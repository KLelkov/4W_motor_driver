
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d928  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800d9e8  0800d9e8  0001d9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfec  0800dfec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dfec  0800dfec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dfec  0800dfec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfec  0800dfec  0001dfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dff0  0800dff0  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e0  0800e1d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800e1d4  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9b3  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002fbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118f3  00000000  00000000  000334d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb3a  00000000  00000000  00044dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ab82  00000000  00000000  000538fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be47f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000471c  00000000  00000000  000be4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d9d0 	.word	0x0800d9d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d9d0 	.word	0x0800d9d0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ffa3 	bl	800139c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 feed 	bl	8001240 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff95 	bl	800139c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8b 	bl	800139c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff0f 	bl	80012b8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ff05 	bl	80012b8 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f001 fdef 	bl	80020b4 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fa38 	bl	8001954 <__aeabi_dsub>
 80004e4:	f001 fde6 	bl	80020b4 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f000 ff9d 	bl	800147c <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f001 fe1a 	bl	8002180 <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f000 ff94 	bl	800147c <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 f9fa 	bl	8001954 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f001 fdd3 	bl	8002120 <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f000 ff7d 	bl	800147c <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f001 fdfa 	bl	8002180 <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 f804 	bl	800059c <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_dadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	464f      	mov	r7, r9
 80005a0:	46d6      	mov	lr, sl
 80005a2:	4646      	mov	r6, r8
 80005a4:	000d      	movs	r5, r1
 80005a6:	0001      	movs	r1, r0
 80005a8:	0018      	movs	r0, r3
 80005aa:	b5c0      	push	{r6, r7, lr}
 80005ac:	0017      	movs	r7, r2
 80005ae:	032b      	lsls	r3, r5, #12
 80005b0:	0a5a      	lsrs	r2, r3, #9
 80005b2:	0f4b      	lsrs	r3, r1, #29
 80005b4:	4313      	orrs	r3, r2
 80005b6:	00ca      	lsls	r2, r1, #3
 80005b8:	4691      	mov	r9, r2
 80005ba:	0302      	lsls	r2, r0, #12
 80005bc:	006e      	lsls	r6, r5, #1
 80005be:	0041      	lsls	r1, r0, #1
 80005c0:	0a52      	lsrs	r2, r2, #9
 80005c2:	0fec      	lsrs	r4, r5, #31
 80005c4:	0f7d      	lsrs	r5, r7, #29
 80005c6:	4315      	orrs	r5, r2
 80005c8:	0d76      	lsrs	r6, r6, #21
 80005ca:	0d49      	lsrs	r1, r1, #21
 80005cc:	0fc0      	lsrs	r0, r0, #31
 80005ce:	4682      	mov	sl, r0
 80005d0:	46ac      	mov	ip, r5
 80005d2:	00ff      	lsls	r7, r7, #3
 80005d4:	1a72      	subs	r2, r6, r1
 80005d6:	4284      	cmp	r4, r0
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x40>
 80005da:	e098      	b.n	800070e <__aeabi_dadd+0x172>
 80005dc:	2a00      	cmp	r2, #0
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_dadd+0x46>
 80005e0:	e081      	b.n	80006e6 <__aeabi_dadd+0x14a>
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x4c>
 80005e6:	e0b6      	b.n	8000756 <__aeabi_dadd+0x1ba>
 80005e8:	49c9      	ldr	r1, [pc, #804]	; (8000910 <__aeabi_dadd+0x374>)
 80005ea:	428e      	cmp	r6, r1
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x54>
 80005ee:	e172      	b.n	80008d6 <__aeabi_dadd+0x33a>
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0028      	movs	r0, r5
 80005f4:	0409      	lsls	r1, r1, #16
 80005f6:	4308      	orrs	r0, r1
 80005f8:	4684      	mov	ip, r0
 80005fa:	2a38      	cmp	r2, #56	; 0x38
 80005fc:	dd00      	ble.n	8000600 <__aeabi_dadd+0x64>
 80005fe:	e15e      	b.n	80008be <__aeabi_dadd+0x322>
 8000600:	2a1f      	cmp	r2, #31
 8000602:	dd00      	ble.n	8000606 <__aeabi_dadd+0x6a>
 8000604:	e1ee      	b.n	80009e4 <__aeabi_dadd+0x448>
 8000606:	2020      	movs	r0, #32
 8000608:	0039      	movs	r1, r7
 800060a:	4665      	mov	r5, ip
 800060c:	1a80      	subs	r0, r0, r2
 800060e:	4087      	lsls	r7, r0
 8000610:	40d1      	lsrs	r1, r2
 8000612:	4085      	lsls	r5, r0
 8000614:	430d      	orrs	r5, r1
 8000616:	0039      	movs	r1, r7
 8000618:	1e4f      	subs	r7, r1, #1
 800061a:	41b9      	sbcs	r1, r7
 800061c:	4667      	mov	r7, ip
 800061e:	40d7      	lsrs	r7, r2
 8000620:	4329      	orrs	r1, r5
 8000622:	1bdb      	subs	r3, r3, r7
 8000624:	464a      	mov	r2, r9
 8000626:	1a55      	subs	r5, r2, r1
 8000628:	45a9      	cmp	r9, r5
 800062a:	4189      	sbcs	r1, r1
 800062c:	4249      	negs	r1, r1
 800062e:	1a5b      	subs	r3, r3, r1
 8000630:	4698      	mov	r8, r3
 8000632:	4643      	mov	r3, r8
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	d400      	bmi.n	800063a <__aeabi_dadd+0x9e>
 8000638:	e0cc      	b.n	80007d4 <__aeabi_dadd+0x238>
 800063a:	4643      	mov	r3, r8
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	4698      	mov	r8, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d100      	bne.n	800064a <__aeabi_dadd+0xae>
 8000648:	e12c      	b.n	80008a4 <__aeabi_dadd+0x308>
 800064a:	4640      	mov	r0, r8
 800064c:	f001 fe8e 	bl	800236c <__clzsi2>
 8000650:	0001      	movs	r1, r0
 8000652:	3908      	subs	r1, #8
 8000654:	2220      	movs	r2, #32
 8000656:	0028      	movs	r0, r5
 8000658:	4643      	mov	r3, r8
 800065a:	1a52      	subs	r2, r2, r1
 800065c:	408b      	lsls	r3, r1
 800065e:	40d0      	lsrs	r0, r2
 8000660:	408d      	lsls	r5, r1
 8000662:	4303      	orrs	r3, r0
 8000664:	428e      	cmp	r6, r1
 8000666:	dd00      	ble.n	800066a <__aeabi_dadd+0xce>
 8000668:	e117      	b.n	800089a <__aeabi_dadd+0x2fe>
 800066a:	1b8e      	subs	r6, r1, r6
 800066c:	1c72      	adds	r2, r6, #1
 800066e:	2a1f      	cmp	r2, #31
 8000670:	dd00      	ble.n	8000674 <__aeabi_dadd+0xd8>
 8000672:	e1a7      	b.n	80009c4 <__aeabi_dadd+0x428>
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	002e      	movs	r6, r5
 800067a:	1a89      	subs	r1, r1, r2
 800067c:	408d      	lsls	r5, r1
 800067e:	4088      	lsls	r0, r1
 8000680:	40d6      	lsrs	r6, r2
 8000682:	40d3      	lsrs	r3, r2
 8000684:	1e69      	subs	r1, r5, #1
 8000686:	418d      	sbcs	r5, r1
 8000688:	4330      	orrs	r0, r6
 800068a:	4698      	mov	r8, r3
 800068c:	2600      	movs	r6, #0
 800068e:	4305      	orrs	r5, r0
 8000690:	076b      	lsls	r3, r5, #29
 8000692:	d009      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 8000694:	230f      	movs	r3, #15
 8000696:	402b      	ands	r3, r5
 8000698:	2b04      	cmp	r3, #4
 800069a:	d005      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 800069c:	1d2b      	adds	r3, r5, #4
 800069e:	42ab      	cmp	r3, r5
 80006a0:	41ad      	sbcs	r5, r5
 80006a2:	426d      	negs	r5, r5
 80006a4:	44a8      	add	r8, r5
 80006a6:	001d      	movs	r5, r3
 80006a8:	4643      	mov	r3, r8
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	d400      	bmi.n	80006b0 <__aeabi_dadd+0x114>
 80006ae:	e094      	b.n	80007da <__aeabi_dadd+0x23e>
 80006b0:	4b97      	ldr	r3, [pc, #604]	; (8000910 <__aeabi_dadd+0x374>)
 80006b2:	1c72      	adds	r2, r6, #1
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x11e>
 80006b8:	e09d      	b.n	80007f6 <__aeabi_dadd+0x25a>
 80006ba:	4641      	mov	r1, r8
 80006bc:	4b95      	ldr	r3, [pc, #596]	; (8000914 <__aeabi_dadd+0x378>)
 80006be:	08ed      	lsrs	r5, r5, #3
 80006c0:	4019      	ands	r1, r3
 80006c2:	000b      	movs	r3, r1
 80006c4:	0552      	lsls	r2, r2, #21
 80006c6:	0749      	lsls	r1, r1, #29
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	4329      	orrs	r1, r5
 80006cc:	0b1b      	lsrs	r3, r3, #12
 80006ce:	0d52      	lsrs	r2, r2, #21
 80006d0:	0512      	lsls	r2, r2, #20
 80006d2:	4313      	orrs	r3, r2
 80006d4:	07e4      	lsls	r4, r4, #31
 80006d6:	4323      	orrs	r3, r4
 80006d8:	0008      	movs	r0, r1
 80006da:	0019      	movs	r1, r3
 80006dc:	bce0      	pop	{r5, r6, r7}
 80006de:	46ba      	mov	sl, r7
 80006e0:	46b1      	mov	r9, r6
 80006e2:	46a8      	mov	r8, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d043      	beq.n	8000772 <__aeabi_dadd+0x1d6>
 80006ea:	1b8a      	subs	r2, r1, r6
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_dadd+0x156>
 80006f0:	e12a      	b.n	8000948 <__aeabi_dadd+0x3ac>
 80006f2:	464c      	mov	r4, r9
 80006f4:	431c      	orrs	r4, r3
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x15e>
 80006f8:	e1d1      	b.n	8000a9e <__aeabi_dadd+0x502>
 80006fa:	1e54      	subs	r4, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x166>
 8000700:	e21f      	b.n	8000b42 <__aeabi_dadd+0x5a6>
 8000702:	4d83      	ldr	r5, [pc, #524]	; (8000910 <__aeabi_dadd+0x374>)
 8000704:	42aa      	cmp	r2, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x16e>
 8000708:	e272      	b.n	8000bf0 <__aeabi_dadd+0x654>
 800070a:	0022      	movs	r2, r4
 800070c:	e123      	b.n	8000956 <__aeabi_dadd+0x3ba>
 800070e:	2a00      	cmp	r2, #0
 8000710:	dc00      	bgt.n	8000714 <__aeabi_dadd+0x178>
 8000712:	e098      	b.n	8000846 <__aeabi_dadd+0x2aa>
 8000714:	2900      	cmp	r1, #0
 8000716:	d042      	beq.n	800079e <__aeabi_dadd+0x202>
 8000718:	497d      	ldr	r1, [pc, #500]	; (8000910 <__aeabi_dadd+0x374>)
 800071a:	428e      	cmp	r6, r1
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x184>
 800071e:	e0da      	b.n	80008d6 <__aeabi_dadd+0x33a>
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0028      	movs	r0, r5
 8000724:	0409      	lsls	r1, r1, #16
 8000726:	4308      	orrs	r0, r1
 8000728:	4684      	mov	ip, r0
 800072a:	2a38      	cmp	r2, #56	; 0x38
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x194>
 800072e:	e129      	b.n	8000984 <__aeabi_dadd+0x3e8>
 8000730:	2a1f      	cmp	r2, #31
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dadd+0x19a>
 8000734:	e187      	b.n	8000a46 <__aeabi_dadd+0x4aa>
 8000736:	0011      	movs	r1, r2
 8000738:	4665      	mov	r5, ip
 800073a:	3920      	subs	r1, #32
 800073c:	40cd      	lsrs	r5, r1
 800073e:	2a20      	cmp	r2, #32
 8000740:	d004      	beq.n	800074c <__aeabi_dadd+0x1b0>
 8000742:	2040      	movs	r0, #64	; 0x40
 8000744:	4661      	mov	r1, ip
 8000746:	1a82      	subs	r2, r0, r2
 8000748:	4091      	lsls	r1, r2
 800074a:	430f      	orrs	r7, r1
 800074c:	0039      	movs	r1, r7
 800074e:	1e4f      	subs	r7, r1, #1
 8000750:	41b9      	sbcs	r1, r7
 8000752:	430d      	orrs	r5, r1
 8000754:	e11b      	b.n	800098e <__aeabi_dadd+0x3f2>
 8000756:	0029      	movs	r1, r5
 8000758:	4339      	orrs	r1, r7
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1c2>
 800075c:	e0b5      	b.n	80008ca <__aeabi_dadd+0x32e>
 800075e:	1e51      	subs	r1, r2, #1
 8000760:	2a01      	cmp	r2, #1
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x1ca>
 8000764:	e1ab      	b.n	8000abe <__aeabi_dadd+0x522>
 8000766:	486a      	ldr	r0, [pc, #424]	; (8000910 <__aeabi_dadd+0x374>)
 8000768:	4282      	cmp	r2, r0
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x1d2>
 800076c:	e1b2      	b.n	8000ad4 <__aeabi_dadd+0x538>
 800076e:	000a      	movs	r2, r1
 8000770:	e743      	b.n	80005fa <__aeabi_dadd+0x5e>
 8000772:	4969      	ldr	r1, [pc, #420]	; (8000918 <__aeabi_dadd+0x37c>)
 8000774:	1c75      	adds	r5, r6, #1
 8000776:	420d      	tst	r5, r1
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1e0>
 800077a:	e0cf      	b.n	800091c <__aeabi_dadd+0x380>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x1e6>
 8000780:	e193      	b.n	8000aaa <__aeabi_dadd+0x50e>
 8000782:	4649      	mov	r1, r9
 8000784:	4319      	orrs	r1, r3
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x1ee>
 8000788:	e1d1      	b.n	8000b2e <__aeabi_dadd+0x592>
 800078a:	4661      	mov	r1, ip
 800078c:	4339      	orrs	r1, r7
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x1f6>
 8000790:	e1e3      	b.n	8000b5a <__aeabi_dadd+0x5be>
 8000792:	4649      	mov	r1, r9
 8000794:	0758      	lsls	r0, r3, #29
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	4301      	orrs	r1, r0
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	e026      	b.n	80007ec <__aeabi_dadd+0x250>
 800079e:	0029      	movs	r1, r5
 80007a0:	4339      	orrs	r1, r7
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x20a>
 80007a4:	e091      	b.n	80008ca <__aeabi_dadd+0x32e>
 80007a6:	1e51      	subs	r1, r2, #1
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d005      	beq.n	80007b8 <__aeabi_dadd+0x21c>
 80007ac:	4858      	ldr	r0, [pc, #352]	; (8000910 <__aeabi_dadd+0x374>)
 80007ae:	4282      	cmp	r2, r0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x218>
 80007b2:	e18f      	b.n	8000ad4 <__aeabi_dadd+0x538>
 80007b4:	000a      	movs	r2, r1
 80007b6:	e7b8      	b.n	800072a <__aeabi_dadd+0x18e>
 80007b8:	003d      	movs	r5, r7
 80007ba:	444d      	add	r5, r9
 80007bc:	454d      	cmp	r5, r9
 80007be:	4189      	sbcs	r1, r1
 80007c0:	4463      	add	r3, ip
 80007c2:	4698      	mov	r8, r3
 80007c4:	4249      	negs	r1, r1
 80007c6:	4488      	add	r8, r1
 80007c8:	4643      	mov	r3, r8
 80007ca:	2602      	movs	r6, #2
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	d500      	bpl.n	80007d2 <__aeabi_dadd+0x236>
 80007d0:	e0eb      	b.n	80009aa <__aeabi_dadd+0x40e>
 80007d2:	3e01      	subs	r6, #1
 80007d4:	076b      	lsls	r3, r5, #29
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x23e>
 80007d8:	e75c      	b.n	8000694 <__aeabi_dadd+0xf8>
 80007da:	4643      	mov	r3, r8
 80007dc:	08e9      	lsrs	r1, r5, #3
 80007de:	075a      	lsls	r2, r3, #29
 80007e0:	4311      	orrs	r1, r2
 80007e2:	0032      	movs	r2, r6
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	484a      	ldr	r0, [pc, #296]	; (8000910 <__aeabi_dadd+0x374>)
 80007e8:	4282      	cmp	r2, r0
 80007ea:	d021      	beq.n	8000830 <__aeabi_dadd+0x294>
 80007ec:	031b      	lsls	r3, r3, #12
 80007ee:	0552      	lsls	r2, r2, #21
 80007f0:	0b1b      	lsrs	r3, r3, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e76c      	b.n	80006d0 <__aeabi_dadd+0x134>
 80007f6:	2300      	movs	r3, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	e769      	b.n	80006d0 <__aeabi_dadd+0x134>
 80007fc:	002a      	movs	r2, r5
 80007fe:	433a      	orrs	r2, r7
 8000800:	d069      	beq.n	80008d6 <__aeabi_dadd+0x33a>
 8000802:	464a      	mov	r2, r9
 8000804:	0758      	lsls	r0, r3, #29
 8000806:	08d1      	lsrs	r1, r2, #3
 8000808:	08da      	lsrs	r2, r3, #3
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	031b      	lsls	r3, r3, #12
 800080e:	4308      	orrs	r0, r1
 8000810:	421a      	tst	r2, r3
 8000812:	d007      	beq.n	8000824 <__aeabi_dadd+0x288>
 8000814:	0029      	movs	r1, r5
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	421d      	tst	r5, r3
 800081a:	d103      	bne.n	8000824 <__aeabi_dadd+0x288>
 800081c:	002a      	movs	r2, r5
 800081e:	08ff      	lsrs	r7, r7, #3
 8000820:	0748      	lsls	r0, r1, #29
 8000822:	4338      	orrs	r0, r7
 8000824:	0f43      	lsrs	r3, r0, #29
 8000826:	00c1      	lsls	r1, r0, #3
 8000828:	075b      	lsls	r3, r3, #29
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	4319      	orrs	r1, r3
 800082e:	0013      	movs	r3, r2
 8000830:	000a      	movs	r2, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x29c>
 8000836:	e213      	b.n	8000c60 <__aeabi_dadd+0x6c4>
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0312      	lsls	r2, r2, #12
 800083c:	4313      	orrs	r3, r2
 800083e:	031b      	lsls	r3, r3, #12
 8000840:	4a33      	ldr	r2, [pc, #204]	; (8000910 <__aeabi_dadd+0x374>)
 8000842:	0b1b      	lsrs	r3, r3, #12
 8000844:	e744      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000846:	2a00      	cmp	r2, #0
 8000848:	d04b      	beq.n	80008e2 <__aeabi_dadd+0x346>
 800084a:	1b8a      	subs	r2, r1, r6
 800084c:	2e00      	cmp	r6, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x2b6>
 8000850:	e0e7      	b.n	8000a22 <__aeabi_dadd+0x486>
 8000852:	482f      	ldr	r0, [pc, #188]	; (8000910 <__aeabi_dadd+0x374>)
 8000854:	4281      	cmp	r1, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x2be>
 8000858:	e195      	b.n	8000b86 <__aeabi_dadd+0x5ea>
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	0400      	lsls	r0, r0, #16
 800085e:	4303      	orrs	r3, r0
 8000860:	2a38      	cmp	r2, #56	; 0x38
 8000862:	dd00      	ble.n	8000866 <__aeabi_dadd+0x2ca>
 8000864:	e143      	b.n	8000aee <__aeabi_dadd+0x552>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x2d0>
 800086a:	e1db      	b.n	8000c24 <__aeabi_dadd+0x688>
 800086c:	2020      	movs	r0, #32
 800086e:	001d      	movs	r5, r3
 8000870:	464e      	mov	r6, r9
 8000872:	1a80      	subs	r0, r0, r2
 8000874:	4085      	lsls	r5, r0
 8000876:	40d6      	lsrs	r6, r2
 8000878:	4335      	orrs	r5, r6
 800087a:	464e      	mov	r6, r9
 800087c:	4086      	lsls	r6, r0
 800087e:	0030      	movs	r0, r6
 8000880:	40d3      	lsrs	r3, r2
 8000882:	1e46      	subs	r6, r0, #1
 8000884:	41b0      	sbcs	r0, r6
 8000886:	449c      	add	ip, r3
 8000888:	4305      	orrs	r5, r0
 800088a:	19ed      	adds	r5, r5, r7
 800088c:	42bd      	cmp	r5, r7
 800088e:	419b      	sbcs	r3, r3
 8000890:	425b      	negs	r3, r3
 8000892:	4463      	add	r3, ip
 8000894:	4698      	mov	r8, r3
 8000896:	000e      	movs	r6, r1
 8000898:	e07f      	b.n	800099a <__aeabi_dadd+0x3fe>
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <__aeabi_dadd+0x378>)
 800089c:	1a76      	subs	r6, r6, r1
 800089e:	4013      	ands	r3, r2
 80008a0:	4698      	mov	r8, r3
 80008a2:	e6f5      	b.n	8000690 <__aeabi_dadd+0xf4>
 80008a4:	0028      	movs	r0, r5
 80008a6:	f001 fd61 	bl	800236c <__clzsi2>
 80008aa:	0001      	movs	r1, r0
 80008ac:	3118      	adds	r1, #24
 80008ae:	291f      	cmp	r1, #31
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dadd+0x318>
 80008b2:	e6cf      	b.n	8000654 <__aeabi_dadd+0xb8>
 80008b4:	002b      	movs	r3, r5
 80008b6:	3808      	subs	r0, #8
 80008b8:	4083      	lsls	r3, r0
 80008ba:	2500      	movs	r5, #0
 80008bc:	e6d2      	b.n	8000664 <__aeabi_dadd+0xc8>
 80008be:	4662      	mov	r2, ip
 80008c0:	433a      	orrs	r2, r7
 80008c2:	0011      	movs	r1, r2
 80008c4:	1e4f      	subs	r7, r1, #1
 80008c6:	41b9      	sbcs	r1, r7
 80008c8:	e6ac      	b.n	8000624 <__aeabi_dadd+0x88>
 80008ca:	4649      	mov	r1, r9
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	08c9      	lsrs	r1, r1, #3
 80008d0:	4301      	orrs	r1, r0
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e787      	b.n	80007e6 <__aeabi_dadd+0x24a>
 80008d6:	4649      	mov	r1, r9
 80008d8:	075a      	lsls	r2, r3, #29
 80008da:	08c9      	lsrs	r1, r1, #3
 80008dc:	4311      	orrs	r1, r2
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	e7a6      	b.n	8000830 <__aeabi_dadd+0x294>
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <__aeabi_dadd+0x37c>)
 80008e4:	1c70      	adds	r0, r6, #1
 80008e6:	4208      	tst	r0, r1
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x350>
 80008ea:	e0bb      	b.n	8000a64 <__aeabi_dadd+0x4c8>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x356>
 80008f0:	e114      	b.n	8000b1c <__aeabi_dadd+0x580>
 80008f2:	4649      	mov	r1, r9
 80008f4:	4319      	orrs	r1, r3
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x35e>
 80008f8:	e175      	b.n	8000be6 <__aeabi_dadd+0x64a>
 80008fa:	0029      	movs	r1, r5
 80008fc:	4339      	orrs	r1, r7
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x366>
 8000900:	e17e      	b.n	8000c00 <__aeabi_dadd+0x664>
 8000902:	4649      	mov	r1, r9
 8000904:	0758      	lsls	r0, r3, #29
 8000906:	08c9      	lsrs	r1, r1, #3
 8000908:	4301      	orrs	r1, r0
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	e76e      	b.n	80007ec <__aeabi_dadd+0x250>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	000007ff 	.word	0x000007ff
 8000914:	ff7fffff 	.word	0xff7fffff
 8000918:	000007fe 	.word	0x000007fe
 800091c:	4649      	mov	r1, r9
 800091e:	1bcd      	subs	r5, r1, r7
 8000920:	4661      	mov	r1, ip
 8000922:	1a58      	subs	r0, r3, r1
 8000924:	45a9      	cmp	r9, r5
 8000926:	4189      	sbcs	r1, r1
 8000928:	4249      	negs	r1, r1
 800092a:	4688      	mov	r8, r1
 800092c:	0001      	movs	r1, r0
 800092e:	4640      	mov	r0, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	4688      	mov	r8, r1
 8000934:	0209      	lsls	r1, r1, #8
 8000936:	d500      	bpl.n	800093a <__aeabi_dadd+0x39e>
 8000938:	e0a6      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 800093a:	4641      	mov	r1, r8
 800093c:	4329      	orrs	r1, r5
 800093e:	d000      	beq.n	8000942 <__aeabi_dadd+0x3a6>
 8000940:	e67f      	b.n	8000642 <__aeabi_dadd+0xa6>
 8000942:	2300      	movs	r3, #0
 8000944:	2400      	movs	r4, #0
 8000946:	e751      	b.n	80007ec <__aeabi_dadd+0x250>
 8000948:	4cc7      	ldr	r4, [pc, #796]	; (8000c68 <__aeabi_dadd+0x6cc>)
 800094a:	42a1      	cmp	r1, r4
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x3b4>
 800094e:	e0c7      	b.n	8000ae0 <__aeabi_dadd+0x544>
 8000950:	2480      	movs	r4, #128	; 0x80
 8000952:	0424      	lsls	r4, r4, #16
 8000954:	4323      	orrs	r3, r4
 8000956:	2a38      	cmp	r2, #56	; 0x38
 8000958:	dc54      	bgt.n	8000a04 <__aeabi_dadd+0x468>
 800095a:	2a1f      	cmp	r2, #31
 800095c:	dd00      	ble.n	8000960 <__aeabi_dadd+0x3c4>
 800095e:	e0cc      	b.n	8000afa <__aeabi_dadd+0x55e>
 8000960:	2420      	movs	r4, #32
 8000962:	4648      	mov	r0, r9
 8000964:	1aa4      	subs	r4, r4, r2
 8000966:	001d      	movs	r5, r3
 8000968:	464e      	mov	r6, r9
 800096a:	40a0      	lsls	r0, r4
 800096c:	40d6      	lsrs	r6, r2
 800096e:	40a5      	lsls	r5, r4
 8000970:	0004      	movs	r4, r0
 8000972:	40d3      	lsrs	r3, r2
 8000974:	4662      	mov	r2, ip
 8000976:	4335      	orrs	r5, r6
 8000978:	1e66      	subs	r6, r4, #1
 800097a:	41b4      	sbcs	r4, r6
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	469c      	mov	ip, r3
 8000980:	4325      	orrs	r5, r4
 8000982:	e044      	b.n	8000a0e <__aeabi_dadd+0x472>
 8000984:	4662      	mov	r2, ip
 8000986:	433a      	orrs	r2, r7
 8000988:	0015      	movs	r5, r2
 800098a:	1e6f      	subs	r7, r5, #1
 800098c:	41bd      	sbcs	r5, r7
 800098e:	444d      	add	r5, r9
 8000990:	454d      	cmp	r5, r9
 8000992:	4189      	sbcs	r1, r1
 8000994:	4249      	negs	r1, r1
 8000996:	4688      	mov	r8, r1
 8000998:	4498      	add	r8, r3
 800099a:	4643      	mov	r3, r8
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	d400      	bmi.n	80009a2 <__aeabi_dadd+0x406>
 80009a0:	e718      	b.n	80007d4 <__aeabi_dadd+0x238>
 80009a2:	4bb1      	ldr	r3, [pc, #708]	; (8000c68 <__aeabi_dadd+0x6cc>)
 80009a4:	3601      	adds	r6, #1
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d049      	beq.n	8000a3e <__aeabi_dadd+0x4a2>
 80009aa:	4642      	mov	r2, r8
 80009ac:	4baf      	ldr	r3, [pc, #700]	; (8000c6c <__aeabi_dadd+0x6d0>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	401a      	ands	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	086a      	lsrs	r2, r5, #1
 80009b6:	400d      	ands	r5, r1
 80009b8:	4315      	orrs	r5, r2
 80009ba:	07d9      	lsls	r1, r3, #31
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	4698      	mov	r8, r3
 80009c0:	430d      	orrs	r5, r1
 80009c2:	e665      	b.n	8000690 <__aeabi_dadd+0xf4>
 80009c4:	0018      	movs	r0, r3
 80009c6:	3e1f      	subs	r6, #31
 80009c8:	40f0      	lsrs	r0, r6
 80009ca:	2a20      	cmp	r2, #32
 80009cc:	d003      	beq.n	80009d6 <__aeabi_dadd+0x43a>
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	431d      	orrs	r5, r3
 80009d6:	1e69      	subs	r1, r5, #1
 80009d8:	418d      	sbcs	r5, r1
 80009da:	2300      	movs	r3, #0
 80009dc:	2600      	movs	r6, #0
 80009de:	4698      	mov	r8, r3
 80009e0:	4305      	orrs	r5, r0
 80009e2:	e6f7      	b.n	80007d4 <__aeabi_dadd+0x238>
 80009e4:	0011      	movs	r1, r2
 80009e6:	4665      	mov	r5, ip
 80009e8:	3920      	subs	r1, #32
 80009ea:	40cd      	lsrs	r5, r1
 80009ec:	2a20      	cmp	r2, #32
 80009ee:	d004      	beq.n	80009fa <__aeabi_dadd+0x45e>
 80009f0:	2040      	movs	r0, #64	; 0x40
 80009f2:	4661      	mov	r1, ip
 80009f4:	1a82      	subs	r2, r0, r2
 80009f6:	4091      	lsls	r1, r2
 80009f8:	430f      	orrs	r7, r1
 80009fa:	0039      	movs	r1, r7
 80009fc:	1e4f      	subs	r7, r1, #1
 80009fe:	41b9      	sbcs	r1, r7
 8000a00:	4329      	orrs	r1, r5
 8000a02:	e60f      	b.n	8000624 <__aeabi_dadd+0x88>
 8000a04:	464a      	mov	r2, r9
 8000a06:	4313      	orrs	r3, r2
 8000a08:	001d      	movs	r5, r3
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	1b7d      	subs	r5, r7, r5
 8000a10:	42af      	cmp	r7, r5
 8000a12:	419b      	sbcs	r3, r3
 8000a14:	4662      	mov	r2, ip
 8000a16:	425b      	negs	r3, r3
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	4654      	mov	r4, sl
 8000a1e:	000e      	movs	r6, r1
 8000a20:	e607      	b.n	8000632 <__aeabi_dadd+0x96>
 8000a22:	4648      	mov	r0, r9
 8000a24:	4318      	orrs	r0, r3
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x48e>
 8000a28:	e0b3      	b.n	8000b92 <__aeabi_dadd+0x5f6>
 8000a2a:	1e50      	subs	r0, r2, #1
 8000a2c:	2a01      	cmp	r2, #1
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x496>
 8000a30:	e10d      	b.n	8000c4e <__aeabi_dadd+0x6b2>
 8000a32:	4d8d      	ldr	r5, [pc, #564]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000a34:	42aa      	cmp	r2, r5
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x49e>
 8000a38:	e0a5      	b.n	8000b86 <__aeabi_dadd+0x5ea>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	e710      	b.n	8000860 <__aeabi_dadd+0x2c4>
 8000a3e:	0032      	movs	r2, r6
 8000a40:	2300      	movs	r3, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	e644      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000a46:	2120      	movs	r1, #32
 8000a48:	0038      	movs	r0, r7
 8000a4a:	1a89      	subs	r1, r1, r2
 8000a4c:	4665      	mov	r5, ip
 8000a4e:	408f      	lsls	r7, r1
 8000a50:	408d      	lsls	r5, r1
 8000a52:	40d0      	lsrs	r0, r2
 8000a54:	1e79      	subs	r1, r7, #1
 8000a56:	418f      	sbcs	r7, r1
 8000a58:	4305      	orrs	r5, r0
 8000a5a:	433d      	orrs	r5, r7
 8000a5c:	4667      	mov	r7, ip
 8000a5e:	40d7      	lsrs	r7, r2
 8000a60:	19db      	adds	r3, r3, r7
 8000a62:	e794      	b.n	800098e <__aeabi_dadd+0x3f2>
 8000a64:	4a80      	ldr	r2, [pc, #512]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000a66:	4290      	cmp	r0, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x4d0>
 8000a6a:	e0ec      	b.n	8000c46 <__aeabi_dadd+0x6aa>
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	4449      	add	r1, r9
 8000a70:	4549      	cmp	r1, r9
 8000a72:	4192      	sbcs	r2, r2
 8000a74:	4463      	add	r3, ip
 8000a76:	4252      	negs	r2, r2
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	07dd      	lsls	r5, r3, #31
 8000a7c:	0849      	lsrs	r1, r1, #1
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	4698      	mov	r8, r3
 8000a82:	0006      	movs	r6, r0
 8000a84:	430d      	orrs	r5, r1
 8000a86:	e6a5      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	1abd      	subs	r5, r7, r2
 8000a8c:	42af      	cmp	r7, r5
 8000a8e:	4189      	sbcs	r1, r1
 8000a90:	4662      	mov	r2, ip
 8000a92:	4249      	negs	r1, r1
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	4698      	mov	r8, r3
 8000a9a:	4654      	mov	r4, sl
 8000a9c:	e5d1      	b.n	8000642 <__aeabi_dadd+0xa6>
 8000a9e:	076c      	lsls	r4, r5, #29
 8000aa0:	08f9      	lsrs	r1, r7, #3
 8000aa2:	4321      	orrs	r1, r4
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	e69d      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	d175      	bne.n	8000b9c <__aeabi_dadd+0x600>
 8000ab0:	4661      	mov	r1, ip
 8000ab2:	4339      	orrs	r1, r7
 8000ab4:	d114      	bne.n	8000ae0 <__aeabi_dadd+0x544>
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	2400      	movs	r4, #0
 8000aba:	031b      	lsls	r3, r3, #12
 8000abc:	e6bc      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000abe:	464a      	mov	r2, r9
 8000ac0:	1bd5      	subs	r5, r2, r7
 8000ac2:	45a9      	cmp	r9, r5
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	4698      	mov	r8, r3
 8000ad0:	2601      	movs	r6, #1
 8000ad2:	e5ae      	b.n	8000632 <__aeabi_dadd+0x96>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	08d1      	lsrs	r1, r2, #3
 8000ad8:	075a      	lsls	r2, r3, #29
 8000ada:	4311      	orrs	r1, r2
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	e6a7      	b.n	8000830 <__aeabi_dadd+0x294>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	08f9      	lsrs	r1, r7, #3
 8000ae4:	075a      	lsls	r2, r3, #29
 8000ae6:	4654      	mov	r4, sl
 8000ae8:	4311      	orrs	r1, r2
 8000aea:	08db      	lsrs	r3, r3, #3
 8000aec:	e6a0      	b.n	8000830 <__aeabi_dadd+0x294>
 8000aee:	464a      	mov	r2, r9
 8000af0:	4313      	orrs	r3, r2
 8000af2:	001d      	movs	r5, r3
 8000af4:	1e6b      	subs	r3, r5, #1
 8000af6:	419d      	sbcs	r5, r3
 8000af8:	e6c7      	b.n	800088a <__aeabi_dadd+0x2ee>
 8000afa:	0014      	movs	r4, r2
 8000afc:	001e      	movs	r6, r3
 8000afe:	3c20      	subs	r4, #32
 8000b00:	40e6      	lsrs	r6, r4
 8000b02:	2a20      	cmp	r2, #32
 8000b04:	d005      	beq.n	8000b12 <__aeabi_dadd+0x576>
 8000b06:	2440      	movs	r4, #64	; 0x40
 8000b08:	1aa2      	subs	r2, r4, r2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4691      	mov	r9, r2
 8000b12:	464d      	mov	r5, r9
 8000b14:	1e6b      	subs	r3, r5, #1
 8000b16:	419d      	sbcs	r5, r3
 8000b18:	4335      	orrs	r5, r6
 8000b1a:	e778      	b.n	8000a0e <__aeabi_dadd+0x472>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	d000      	beq.n	8000b24 <__aeabi_dadd+0x588>
 8000b22:	e66b      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b24:	076b      	lsls	r3, r5, #29
 8000b26:	08f9      	lsrs	r1, r7, #3
 8000b28:	4319      	orrs	r1, r3
 8000b2a:	08eb      	lsrs	r3, r5, #3
 8000b2c:	e680      	b.n	8000830 <__aeabi_dadd+0x294>
 8000b2e:	4661      	mov	r1, ip
 8000b30:	4339      	orrs	r1, r7
 8000b32:	d054      	beq.n	8000bde <__aeabi_dadd+0x642>
 8000b34:	4663      	mov	r3, ip
 8000b36:	08f9      	lsrs	r1, r7, #3
 8000b38:	075c      	lsls	r4, r3, #29
 8000b3a:	4321      	orrs	r1, r4
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	0004      	movs	r4, r0
 8000b40:	e654      	b.n	80007ec <__aeabi_dadd+0x250>
 8000b42:	464a      	mov	r2, r9
 8000b44:	1abd      	subs	r5, r7, r2
 8000b46:	42af      	cmp	r7, r5
 8000b48:	4189      	sbcs	r1, r1
 8000b4a:	4662      	mov	r2, ip
 8000b4c:	4249      	negs	r1, r1
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	4698      	mov	r8, r3
 8000b54:	0004      	movs	r4, r0
 8000b56:	2601      	movs	r6, #1
 8000b58:	e56b      	b.n	8000632 <__aeabi_dadd+0x96>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	1bd5      	subs	r5, r2, r7
 8000b5e:	45a9      	cmp	r9, r5
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4662      	mov	r2, ip
 8000b64:	4249      	negs	r1, r1
 8000b66:	1a9a      	subs	r2, r3, r2
 8000b68:	1a52      	subs	r2, r2, r1
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	0212      	lsls	r2, r2, #8
 8000b6e:	d532      	bpl.n	8000bd6 <__aeabi_dadd+0x63a>
 8000b70:	464a      	mov	r2, r9
 8000b72:	1abd      	subs	r5, r7, r2
 8000b74:	42af      	cmp	r7, r5
 8000b76:	4189      	sbcs	r1, r1
 8000b78:	4662      	mov	r2, ip
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	0004      	movs	r4, r0
 8000b84:	e584      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000b86:	4663      	mov	r3, ip
 8000b88:	08f9      	lsrs	r1, r7, #3
 8000b8a:	075a      	lsls	r2, r3, #29
 8000b8c:	4311      	orrs	r1, r2
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	e64e      	b.n	8000830 <__aeabi_dadd+0x294>
 8000b92:	08f9      	lsrs	r1, r7, #3
 8000b94:	0768      	lsls	r0, r5, #29
 8000b96:	4301      	orrs	r1, r0
 8000b98:	08eb      	lsrs	r3, r5, #3
 8000b9a:	e624      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	433a      	orrs	r2, r7
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x608>
 8000ba2:	e698      	b.n	80008d6 <__aeabi_dadd+0x33a>
 8000ba4:	464a      	mov	r2, r9
 8000ba6:	08d1      	lsrs	r1, r2, #3
 8000ba8:	075a      	lsls	r2, r3, #29
 8000baa:	4311      	orrs	r1, r2
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	031b      	lsls	r3, r3, #12
 8000bb2:	421a      	tst	r2, r3
 8000bb4:	d008      	beq.n	8000bc8 <__aeabi_dadd+0x62c>
 8000bb6:	4660      	mov	r0, ip
 8000bb8:	08c5      	lsrs	r5, r0, #3
 8000bba:	421d      	tst	r5, r3
 8000bbc:	d104      	bne.n	8000bc8 <__aeabi_dadd+0x62c>
 8000bbe:	4654      	mov	r4, sl
 8000bc0:	002a      	movs	r2, r5
 8000bc2:	08f9      	lsrs	r1, r7, #3
 8000bc4:	0743      	lsls	r3, r0, #29
 8000bc6:	4319      	orrs	r1, r3
 8000bc8:	0f4b      	lsrs	r3, r1, #29
 8000bca:	00c9      	lsls	r1, r1, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	08c9      	lsrs	r1, r1, #3
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	e62c      	b.n	8000830 <__aeabi_dadd+0x294>
 8000bd6:	4641      	mov	r1, r8
 8000bd8:	4329      	orrs	r1, r5
 8000bda:	d000      	beq.n	8000bde <__aeabi_dadd+0x642>
 8000bdc:	e5fa      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000bde:	2300      	movs	r3, #0
 8000be0:	000a      	movs	r2, r1
 8000be2:	2400      	movs	r4, #0
 8000be4:	e602      	b.n	80007ec <__aeabi_dadd+0x250>
 8000be6:	076b      	lsls	r3, r5, #29
 8000be8:	08f9      	lsrs	r1, r7, #3
 8000bea:	4319      	orrs	r1, r3
 8000bec:	08eb      	lsrs	r3, r5, #3
 8000bee:	e5fd      	b.n	80007ec <__aeabi_dadd+0x250>
 8000bf0:	4663      	mov	r3, ip
 8000bf2:	08f9      	lsrs	r1, r7, #3
 8000bf4:	075b      	lsls	r3, r3, #29
 8000bf6:	4319      	orrs	r1, r3
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	0004      	movs	r4, r0
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	e617      	b.n	8000830 <__aeabi_dadd+0x294>
 8000c00:	003d      	movs	r5, r7
 8000c02:	444d      	add	r5, r9
 8000c04:	4463      	add	r3, ip
 8000c06:	454d      	cmp	r5, r9
 8000c08:	4189      	sbcs	r1, r1
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	4249      	negs	r1, r1
 8000c0e:	4488      	add	r8, r1
 8000c10:	4643      	mov	r3, r8
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	d400      	bmi.n	8000c18 <__aeabi_dadd+0x67c>
 8000c16:	e5dd      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <__aeabi_dadd+0x6d0>)
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	401a      	ands	r2, r3
 8000c20:	4690      	mov	r8, r2
 8000c22:	e5d7      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000c24:	0010      	movs	r0, r2
 8000c26:	001e      	movs	r6, r3
 8000c28:	3820      	subs	r0, #32
 8000c2a:	40c6      	lsrs	r6, r0
 8000c2c:	2a20      	cmp	r2, #32
 8000c2e:	d005      	beq.n	8000c3c <__aeabi_dadd+0x6a0>
 8000c30:	2040      	movs	r0, #64	; 0x40
 8000c32:	1a82      	subs	r2, r0, r2
 8000c34:	4093      	lsls	r3, r2
 8000c36:	464a      	mov	r2, r9
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	464d      	mov	r5, r9
 8000c3e:	1e6b      	subs	r3, r5, #1
 8000c40:	419d      	sbcs	r5, r3
 8000c42:	4335      	orrs	r5, r6
 8000c44:	e621      	b.n	800088a <__aeabi_dadd+0x2ee>
 8000c46:	0002      	movs	r2, r0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e540      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000c4e:	464a      	mov	r2, r9
 8000c50:	19d5      	adds	r5, r2, r7
 8000c52:	42bd      	cmp	r5, r7
 8000c54:	4189      	sbcs	r1, r1
 8000c56:	4463      	add	r3, ip
 8000c58:	4698      	mov	r8, r3
 8000c5a:	4249      	negs	r1, r1
 8000c5c:	4488      	add	r8, r1
 8000c5e:	e5b3      	b.n	80007c8 <__aeabi_dadd+0x22c>
 8000c60:	2100      	movs	r1, #0
 8000c62:	4a01      	ldr	r2, [pc, #4]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000c64:	000b      	movs	r3, r1
 8000c66:	e533      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	ff7fffff 	.word	0xff7fffff

08000c70 <__aeabi_ddiv>:
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	4657      	mov	r7, sl
 8000c74:	464e      	mov	r6, r9
 8000c76:	4645      	mov	r5, r8
 8000c78:	46de      	mov	lr, fp
 8000c7a:	b5e0      	push	{r5, r6, r7, lr}
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	0005      	movs	r5, r0
 8000c80:	030c      	lsls	r4, r1, #12
 8000c82:	0048      	lsls	r0, r1, #1
 8000c84:	4692      	mov	sl, r2
 8000c86:	001f      	movs	r7, r3
 8000c88:	b085      	sub	sp, #20
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	0d40      	lsrs	r0, r0, #21
 8000c8e:	0fce      	lsrs	r6, r1, #31
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d059      	beq.n	8000d48 <__aeabi_ddiv+0xd8>
 8000c94:	4b87      	ldr	r3, [pc, #540]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000c96:	4298      	cmp	r0, r3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_ddiv+0x2c>
 8000c9a:	e098      	b.n	8000dce <__aeabi_ddiv+0x15e>
 8000c9c:	0f6b      	lsrs	r3, r5, #29
 8000c9e:	00e4      	lsls	r4, r4, #3
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	4323      	orrs	r3, r4
 8000ca8:	4698      	mov	r8, r3
 8000caa:	4b83      	ldr	r3, [pc, #524]	; (8000eb8 <__aeabi_ddiv+0x248>)
 8000cac:	00ed      	lsls	r5, r5, #3
 8000cae:	469b      	mov	fp, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	4483      	add	fp, r0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	033c      	lsls	r4, r7, #12
 8000cba:	007b      	lsls	r3, r7, #1
 8000cbc:	4650      	mov	r0, sl
 8000cbe:	0b24      	lsrs	r4, r4, #12
 8000cc0:	0d5b      	lsrs	r3, r3, #21
 8000cc2:	0fff      	lsrs	r7, r7, #31
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d067      	beq.n	8000d98 <__aeabi_ddiv+0x128>
 8000cc8:	4a7a      	ldr	r2, [pc, #488]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d018      	beq.n	8000d00 <__aeabi_ddiv+0x90>
 8000cce:	497a      	ldr	r1, [pc, #488]	; (8000eb8 <__aeabi_ddiv+0x248>)
 8000cd0:	0f42      	lsrs	r2, r0, #29
 8000cd2:	468c      	mov	ip, r1
 8000cd4:	00e4      	lsls	r4, r4, #3
 8000cd6:	4659      	mov	r1, fp
 8000cd8:	4314      	orrs	r4, r2
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	4463      	add	r3, ip
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	4314      	orrs	r4, r2
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	00c2      	lsls	r2, r0, #3
 8000ce8:	2000      	movs	r0, #0
 8000cea:	0033      	movs	r3, r6
 8000cec:	407b      	eors	r3, r7
 8000cee:	469a      	mov	sl, r3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d900      	bls.n	8000cf8 <__aeabi_ddiv+0x88>
 8000cf6:	e0ef      	b.n	8000ed8 <__aeabi_ddiv+0x268>
 8000cf8:	4970      	ldr	r1, [pc, #448]	; (8000ebc <__aeabi_ddiv+0x24c>)
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	58cb      	ldr	r3, [r1, r3]
 8000cfe:	469f      	mov	pc, r3
 8000d00:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <__aeabi_ddiv+0x250>)
 8000d02:	4652      	mov	r2, sl
 8000d04:	469c      	mov	ip, r3
 8000d06:	4322      	orrs	r2, r4
 8000d08:	44e3      	add	fp, ip
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_ddiv+0xa0>
 8000d0e:	e095      	b.n	8000e3c <__aeabi_ddiv+0x1cc>
 8000d10:	4649      	mov	r1, r9
 8000d12:	2302      	movs	r3, #2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	4689      	mov	r9, r1
 8000d18:	2400      	movs	r4, #0
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	e7e5      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	2500      	movs	r5, #0
 8000d24:	4652      	mov	r2, sl
 8000d26:	051b      	lsls	r3, r3, #20
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	07d2      	lsls	r2, r2, #31
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	0028      	movs	r0, r5
 8000d30:	0019      	movs	r1, r3
 8000d32:	b005      	add	sp, #20
 8000d34:	bcf0      	pop	{r4, r5, r6, r7}
 8000d36:	46bb      	mov	fp, r7
 8000d38:	46b2      	mov	sl, r6
 8000d3a:	46a9      	mov	r9, r5
 8000d3c:	46a0      	mov	r8, r4
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d40:	2400      	movs	r4, #0
 8000d42:	2500      	movs	r5, #0
 8000d44:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000d46:	e7ed      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000d48:	464b      	mov	r3, r9
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_ddiv+0xe2>
 8000d50:	e089      	b.n	8000e66 <__aeabi_ddiv+0x1f6>
 8000d52:	2c00      	cmp	r4, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0xe8>
 8000d56:	e1e0      	b.n	800111a <__aeabi_ddiv+0x4aa>
 8000d58:	0020      	movs	r0, r4
 8000d5a:	f001 fb07 	bl	800236c <__clzsi2>
 8000d5e:	0001      	movs	r1, r0
 8000d60:	0002      	movs	r2, r0
 8000d62:	390b      	subs	r1, #11
 8000d64:	231d      	movs	r3, #29
 8000d66:	1a5b      	subs	r3, r3, r1
 8000d68:	4649      	mov	r1, r9
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	40d9      	lsrs	r1, r3
 8000d6e:	3808      	subs	r0, #8
 8000d70:	4084      	lsls	r4, r0
 8000d72:	000b      	movs	r3, r1
 8000d74:	464d      	mov	r5, r9
 8000d76:	4323      	orrs	r3, r4
 8000d78:	4698      	mov	r8, r3
 8000d7a:	4085      	lsls	r5, r0
 8000d7c:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <__aeabi_ddiv+0x254>)
 8000d7e:	033c      	lsls	r4, r7, #12
 8000d80:	1a83      	subs	r3, r0, r2
 8000d82:	469b      	mov	fp, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	4699      	mov	r9, r3
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	007b      	lsls	r3, r7, #1
 8000d8c:	4650      	mov	r0, sl
 8000d8e:	0b24      	lsrs	r4, r4, #12
 8000d90:	0d5b      	lsrs	r3, r3, #21
 8000d92:	0fff      	lsrs	r7, r7, #31
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d197      	bne.n	8000cc8 <__aeabi_ddiv+0x58>
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4322      	orrs	r2, r4
 8000d9c:	d055      	beq.n	8000e4a <__aeabi_ddiv+0x1da>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_ddiv+0x134>
 8000da2:	e1ca      	b.n	800113a <__aeabi_ddiv+0x4ca>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f001 fae1 	bl	800236c <__clzsi2>
 8000daa:	0002      	movs	r2, r0
 8000dac:	3a0b      	subs	r2, #11
 8000dae:	231d      	movs	r3, #29
 8000db0:	0001      	movs	r1, r0
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	4652      	mov	r2, sl
 8000db6:	3908      	subs	r1, #8
 8000db8:	40da      	lsrs	r2, r3
 8000dba:	408c      	lsls	r4, r1
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	4652      	mov	r2, sl
 8000dc0:	408a      	lsls	r2, r1
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <__aeabi_ddiv+0x258>)
 8000dc4:	4458      	add	r0, fp
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	4483      	add	fp, r0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	e78d      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	d140      	bne.n	8000e58 <__aeabi_ddiv+0x1e8>
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	4699      	mov	r9, r3
 8000dda:	3b06      	subs	r3, #6
 8000ddc:	2500      	movs	r5, #0
 8000dde:	4683      	mov	fp, r0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e769      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000de4:	46b2      	mov	sl, r6
 8000de6:	9b00      	ldr	r3, [sp, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d0a9      	beq.n	8000d40 <__aeabi_ddiv+0xd0>
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x182>
 8000df0:	e211      	b.n	8001216 <__aeabi_ddiv+0x5a6>
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d093      	beq.n	8000d1e <__aeabi_ddiv+0xae>
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <__aeabi_ddiv+0x25c>)
 8000df8:	445a      	add	r2, fp
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	dc00      	bgt.n	8000e00 <__aeabi_ddiv+0x190>
 8000dfe:	e13c      	b.n	800107a <__aeabi_ddiv+0x40a>
 8000e00:	076b      	lsls	r3, r5, #29
 8000e02:	d000      	beq.n	8000e06 <__aeabi_ddiv+0x196>
 8000e04:	e1a7      	b.n	8001156 <__aeabi_ddiv+0x4e6>
 8000e06:	08ed      	lsrs	r5, r5, #3
 8000e08:	4643      	mov	r3, r8
 8000e0a:	01db      	lsls	r3, r3, #7
 8000e0c:	d506      	bpl.n	8000e1c <__aeabi_ddiv+0x1ac>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <__aeabi_ddiv+0x260>)
 8000e12:	401a      	ands	r2, r3
 8000e14:	4690      	mov	r8, r2
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	445a      	add	r2, fp
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <__aeabi_ddiv+0x264>)
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dc8e      	bgt.n	8000d40 <__aeabi_ddiv+0xd0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	0552      	lsls	r2, r2, #21
 8000e26:	0758      	lsls	r0, r3, #29
 8000e28:	025c      	lsls	r4, r3, #9
 8000e2a:	4305      	orrs	r5, r0
 8000e2c:	0b24      	lsrs	r4, r4, #12
 8000e2e:	0d53      	lsrs	r3, r2, #21
 8000e30:	e778      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000e32:	46ba      	mov	sl, r7
 8000e34:	46a0      	mov	r8, r4
 8000e36:	0015      	movs	r5, r2
 8000e38:	9000      	str	r0, [sp, #0]
 8000e3a:	e7d4      	b.n	8000de6 <__aeabi_ddiv+0x176>
 8000e3c:	464a      	mov	r2, r9
 8000e3e:	2303      	movs	r3, #3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	4691      	mov	r9, r2
 8000e44:	2003      	movs	r0, #3
 8000e46:	4652      	mov	r2, sl
 8000e48:	e74f      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4319      	orrs	r1, r3
 8000e50:	4689      	mov	r9, r1
 8000e52:	2400      	movs	r4, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	e748      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	3b09      	subs	r3, #9
 8000e5e:	46a0      	mov	r8, r4
 8000e60:	4683      	mov	fp, r0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	e728      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000e66:	2304      	movs	r3, #4
 8000e68:	4699      	mov	r9, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	469b      	mov	fp, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	2500      	movs	r5, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	e720      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2480      	movs	r4, #128	; 0x80
 8000e7a:	469a      	mov	sl, r3
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	e74f      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	4641      	mov	r1, r8
 8000e88:	031b      	lsls	r3, r3, #12
 8000e8a:	4219      	tst	r1, r3
 8000e8c:	d008      	beq.n	8000ea0 <__aeabi_ddiv+0x230>
 8000e8e:	421c      	tst	r4, r3
 8000e90:	d106      	bne.n	8000ea0 <__aeabi_ddiv+0x230>
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46ba      	mov	sl, r7
 8000e98:	0015      	movs	r5, r2
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000e9c:	0b24      	lsrs	r4, r4, #12
 8000e9e:	e741      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	0324      	lsls	r4, r4, #12
 8000ea6:	431c      	orrs	r4, r3
 8000ea8:	0324      	lsls	r4, r4, #12
 8000eaa:	46b2      	mov	sl, r6
 8000eac:	4b01      	ldr	r3, [pc, #4]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	e738      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	fffffc01 	.word	0xfffffc01
 8000ebc:	0800da8c 	.word	0x0800da8c
 8000ec0:	fffff801 	.word	0xfffff801
 8000ec4:	fffffc0d 	.word	0xfffffc0d
 8000ec8:	000003f3 	.word	0x000003f3
 8000ecc:	000003ff 	.word	0x000003ff
 8000ed0:	feffffff 	.word	0xfeffffff
 8000ed4:	000007fe 	.word	0x000007fe
 8000ed8:	4544      	cmp	r4, r8
 8000eda:	d200      	bcs.n	8000ede <__aeabi_ddiv+0x26e>
 8000edc:	e116      	b.n	800110c <__aeabi_ddiv+0x49c>
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x272>
 8000ee0:	e111      	b.n	8001106 <__aeabi_ddiv+0x496>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	002e      	movs	r6, r5
 8000eea:	4640      	mov	r0, r8
 8000eec:	2500      	movs	r5, #0
 8000eee:	44e3      	add	fp, ip
 8000ef0:	0223      	lsls	r3, r4, #8
 8000ef2:	0e14      	lsrs	r4, r2, #24
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	4699      	mov	r9, r3
 8000efa:	0423      	lsls	r3, r4, #16
 8000efc:	0c1f      	lsrs	r7, r3, #16
 8000efe:	0212      	lsls	r2, r2, #8
 8000f00:	4649      	mov	r1, r9
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	9701      	str	r7, [sp, #4]
 8000f06:	f7ff f9ab 	bl	8000260 <__aeabi_uidivmod>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	437a      	muls	r2, r7
 8000f0e:	040b      	lsls	r3, r1, #16
 8000f10:	0c31      	lsrs	r1, r6, #16
 8000f12:	4680      	mov	r8, r0
 8000f14:	4319      	orrs	r1, r3
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d90b      	bls.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	469c      	mov	ip, r3
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	44e0      	add	r8, ip
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d804      	bhi.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f28:	428a      	cmp	r2, r1
 8000f2a:	d902      	bls.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f2c:	1e83      	subs	r3, r0, #2
 8000f2e:	4698      	mov	r8, r3
 8000f30:	1909      	adds	r1, r1, r4
 8000f32:	1a88      	subs	r0, r1, r2
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f993 	bl	8000260 <__aeabi_uidivmod>
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	0431      	lsls	r1, r6, #16
 8000f40:	4666      	mov	r6, ip
 8000f42:	9a01      	ldr	r2, [sp, #4]
 8000f44:	0c09      	lsrs	r1, r1, #16
 8000f46:	4342      	muls	r2, r0
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4331      	orrs	r1, r6
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	d904      	bls.n	8000f5a <__aeabi_ddiv+0x2ea>
 8000f50:	1909      	adds	r1, r1, r4
 8000f52:	3b01      	subs	r3, #1
 8000f54:	428c      	cmp	r4, r1
 8000f56:	d800      	bhi.n	8000f5a <__aeabi_ddiv+0x2ea>
 8000f58:	e111      	b.n	800117e <__aeabi_ddiv+0x50e>
 8000f5a:	1a89      	subs	r1, r1, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	9e00      	ldr	r6, [sp, #0]
 8000f60:	0412      	lsls	r2, r2, #16
 8000f62:	431a      	orrs	r2, r3
 8000f64:	0c33      	lsrs	r3, r6, #16
 8000f66:	001f      	movs	r7, r3
 8000f68:	0c10      	lsrs	r0, r2, #16
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	0413      	lsls	r3, r2, #16
 8000f70:	0432      	lsls	r2, r6, #16
 8000f72:	0c16      	lsrs	r6, r2, #16
 8000f74:	0032      	movs	r2, r6
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	9603      	str	r6, [sp, #12]
 8000f7c:	437b      	muls	r3, r7
 8000f7e:	4346      	muls	r6, r0
 8000f80:	4378      	muls	r0, r7
 8000f82:	0c17      	lsrs	r7, r2, #16
 8000f84:	46bc      	mov	ip, r7
 8000f86:	199b      	adds	r3, r3, r6
 8000f88:	4463      	add	r3, ip
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x326>
 8000f8e:	2680      	movs	r6, #128	; 0x80
 8000f90:	0276      	lsls	r6, r6, #9
 8000f92:	46b4      	mov	ip, r6
 8000f94:	4460      	add	r0, ip
 8000f96:	0c1e      	lsrs	r6, r3, #16
 8000f98:	1830      	adds	r0, r6, r0
 8000f9a:	0416      	lsls	r6, r2, #16
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	0c36      	lsrs	r6, r6, #16
 8000fa0:	199e      	adds	r6, r3, r6
 8000fa2:	4281      	cmp	r1, r0
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x338>
 8000fa6:	e09c      	b.n	80010e2 <__aeabi_ddiv+0x472>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x33c>
 8000faa:	e097      	b.n	80010dc <__aeabi_ddiv+0x46c>
 8000fac:	1bae      	subs	r6, r5, r6
 8000fae:	1a09      	subs	r1, r1, r0
 8000fb0:	42b5      	cmp	r5, r6
 8000fb2:	4180      	sbcs	r0, r0
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	1a08      	subs	r0, r1, r0
 8000fb8:	4284      	cmp	r4, r0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x34e>
 8000fbc:	e111      	b.n	80011e2 <__aeabi_ddiv+0x572>
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	f7ff f94e 	bl	8000260 <__aeabi_uidivmod>
 8000fc4:	9a01      	ldr	r2, [sp, #4]
 8000fc6:	040b      	lsls	r3, r1, #16
 8000fc8:	4342      	muls	r2, r0
 8000fca:	0c31      	lsrs	r1, r6, #16
 8000fcc:	0005      	movs	r5, r0
 8000fce:	4319      	orrs	r1, r3
 8000fd0:	428a      	cmp	r2, r1
 8000fd2:	d907      	bls.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fd4:	1909      	adds	r1, r1, r4
 8000fd6:	3d01      	subs	r5, #1
 8000fd8:	428c      	cmp	r4, r1
 8000fda:	d803      	bhi.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fdc:	428a      	cmp	r2, r1
 8000fde:	d901      	bls.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fe0:	1e85      	subs	r5, r0, #2
 8000fe2:	1909      	adds	r1, r1, r4
 8000fe4:	1a88      	subs	r0, r1, r2
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	f7ff f93a 	bl	8000260 <__aeabi_uidivmod>
 8000fec:	0409      	lsls	r1, r1, #16
 8000fee:	468c      	mov	ip, r1
 8000ff0:	0431      	lsls	r1, r6, #16
 8000ff2:	4666      	mov	r6, ip
 8000ff4:	9a01      	ldr	r2, [sp, #4]
 8000ff6:	0c09      	lsrs	r1, r1, #16
 8000ff8:	4342      	muls	r2, r0
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	4331      	orrs	r1, r6
 8000ffe:	428a      	cmp	r2, r1
 8001000:	d907      	bls.n	8001012 <__aeabi_ddiv+0x3a2>
 8001002:	1909      	adds	r1, r1, r4
 8001004:	3b01      	subs	r3, #1
 8001006:	428c      	cmp	r4, r1
 8001008:	d803      	bhi.n	8001012 <__aeabi_ddiv+0x3a2>
 800100a:	428a      	cmp	r2, r1
 800100c:	d901      	bls.n	8001012 <__aeabi_ddiv+0x3a2>
 800100e:	1e83      	subs	r3, r0, #2
 8001010:	1909      	adds	r1, r1, r4
 8001012:	9e03      	ldr	r6, [sp, #12]
 8001014:	1a89      	subs	r1, r1, r2
 8001016:	0032      	movs	r2, r6
 8001018:	042d      	lsls	r5, r5, #16
 800101a:	431d      	orrs	r5, r3
 800101c:	9f02      	ldr	r7, [sp, #8]
 800101e:	042b      	lsls	r3, r5, #16
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	435a      	muls	r2, r3
 8001024:	437b      	muls	r3, r7
 8001026:	469c      	mov	ip, r3
 8001028:	0c28      	lsrs	r0, r5, #16
 800102a:	4346      	muls	r6, r0
 800102c:	0c13      	lsrs	r3, r2, #16
 800102e:	44b4      	add	ip, r6
 8001030:	4463      	add	r3, ip
 8001032:	4378      	muls	r0, r7
 8001034:	429e      	cmp	r6, r3
 8001036:	d903      	bls.n	8001040 <__aeabi_ddiv+0x3d0>
 8001038:	2680      	movs	r6, #128	; 0x80
 800103a:	0276      	lsls	r6, r6, #9
 800103c:	46b4      	mov	ip, r6
 800103e:	4460      	add	r0, ip
 8001040:	0c1e      	lsrs	r6, r3, #16
 8001042:	0412      	lsls	r2, r2, #16
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0c12      	lsrs	r2, r2, #16
 8001048:	1830      	adds	r0, r6, r0
 800104a:	189b      	adds	r3, r3, r2
 800104c:	4281      	cmp	r1, r0
 800104e:	d306      	bcc.n	800105e <__aeabi_ddiv+0x3ee>
 8001050:	d002      	beq.n	8001058 <__aeabi_ddiv+0x3e8>
 8001052:	2301      	movs	r3, #1
 8001054:	431d      	orrs	r5, r3
 8001056:	e6ce      	b.n	8000df6 <__aeabi_ddiv+0x186>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x3ee>
 800105c:	e6cb      	b.n	8000df6 <__aeabi_ddiv+0x186>
 800105e:	1861      	adds	r1, r4, r1
 8001060:	1e6e      	subs	r6, r5, #1
 8001062:	42a1      	cmp	r1, r4
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x3f8>
 8001066:	e0a4      	b.n	80011b2 <__aeabi_ddiv+0x542>
 8001068:	4281      	cmp	r1, r0
 800106a:	d200      	bcs.n	800106e <__aeabi_ddiv+0x3fe>
 800106c:	e0c9      	b.n	8001202 <__aeabi_ddiv+0x592>
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0x402>
 8001070:	e0d9      	b.n	8001226 <__aeabi_ddiv+0x5b6>
 8001072:	0035      	movs	r5, r6
 8001074:	e7ed      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 8001076:	2501      	movs	r5, #1
 8001078:	426d      	negs	r5, r5
 800107a:	2101      	movs	r1, #1
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	2938      	cmp	r1, #56	; 0x38
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x414>
 8001082:	e64c      	b.n	8000d1e <__aeabi_ddiv+0xae>
 8001084:	291f      	cmp	r1, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_ddiv+0x41a>
 8001088:	e07f      	b.n	800118a <__aeabi_ddiv+0x51a>
 800108a:	231f      	movs	r3, #31
 800108c:	425b      	negs	r3, r3
 800108e:	1a9a      	subs	r2, r3, r2
 8001090:	4643      	mov	r3, r8
 8001092:	40d3      	lsrs	r3, r2
 8001094:	2920      	cmp	r1, #32
 8001096:	d004      	beq.n	80010a2 <__aeabi_ddiv+0x432>
 8001098:	4644      	mov	r4, r8
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <__aeabi_ddiv+0x5c0>)
 800109c:	445a      	add	r2, fp
 800109e:	4094      	lsls	r4, r2
 80010a0:	4325      	orrs	r5, r4
 80010a2:	1e6a      	subs	r2, r5, #1
 80010a4:	4195      	sbcs	r5, r2
 80010a6:	2207      	movs	r2, #7
 80010a8:	432b      	orrs	r3, r5
 80010aa:	0015      	movs	r5, r2
 80010ac:	2400      	movs	r4, #0
 80010ae:	401d      	ands	r5, r3
 80010b0:	421a      	tst	r2, r3
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x446>
 80010b4:	e0a1      	b.n	80011fa <__aeabi_ddiv+0x58a>
 80010b6:	220f      	movs	r2, #15
 80010b8:	2400      	movs	r4, #0
 80010ba:	401a      	ands	r2, r3
 80010bc:	2a04      	cmp	r2, #4
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x452>
 80010c0:	e098      	b.n	80011f4 <__aeabi_ddiv+0x584>
 80010c2:	1d1a      	adds	r2, r3, #4
 80010c4:	429a      	cmp	r2, r3
 80010c6:	419b      	sbcs	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	18e4      	adds	r4, r4, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	0222      	lsls	r2, r4, #8
 80010d0:	d400      	bmi.n	80010d4 <__aeabi_ddiv+0x464>
 80010d2:	e08f      	b.n	80011f4 <__aeabi_ddiv+0x584>
 80010d4:	2301      	movs	r3, #1
 80010d6:	2400      	movs	r4, #0
 80010d8:	2500      	movs	r5, #0
 80010da:	e623      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 80010dc:	42b5      	cmp	r5, r6
 80010de:	d300      	bcc.n	80010e2 <__aeabi_ddiv+0x472>
 80010e0:	e764      	b.n	8000fac <__aeabi_ddiv+0x33c>
 80010e2:	4643      	mov	r3, r8
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	9b00      	ldr	r3, [sp, #0]
 80010e8:	469c      	mov	ip, r3
 80010ea:	4465      	add	r5, ip
 80010ec:	001f      	movs	r7, r3
 80010ee:	429d      	cmp	r5, r3
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	425b      	negs	r3, r3
 80010f4:	191b      	adds	r3, r3, r4
 80010f6:	18c9      	adds	r1, r1, r3
 80010f8:	428c      	cmp	r4, r1
 80010fa:	d23a      	bcs.n	8001172 <__aeabi_ddiv+0x502>
 80010fc:	4288      	cmp	r0, r1
 80010fe:	d863      	bhi.n	80011c8 <__aeabi_ddiv+0x558>
 8001100:	d060      	beq.n	80011c4 <__aeabi_ddiv+0x554>
 8001102:	4690      	mov	r8, r2
 8001104:	e752      	b.n	8000fac <__aeabi_ddiv+0x33c>
 8001106:	42aa      	cmp	r2, r5
 8001108:	d900      	bls.n	800110c <__aeabi_ddiv+0x49c>
 800110a:	e6ea      	b.n	8000ee2 <__aeabi_ddiv+0x272>
 800110c:	4643      	mov	r3, r8
 800110e:	07de      	lsls	r6, r3, #31
 8001110:	0858      	lsrs	r0, r3, #1
 8001112:	086b      	lsrs	r3, r5, #1
 8001114:	431e      	orrs	r6, r3
 8001116:	07ed      	lsls	r5, r5, #31
 8001118:	e6ea      	b.n	8000ef0 <__aeabi_ddiv+0x280>
 800111a:	4648      	mov	r0, r9
 800111c:	f001 f926 	bl	800236c <__clzsi2>
 8001120:	0001      	movs	r1, r0
 8001122:	0002      	movs	r2, r0
 8001124:	3115      	adds	r1, #21
 8001126:	3220      	adds	r2, #32
 8001128:	291c      	cmp	r1, #28
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x4be>
 800112c:	e61a      	b.n	8000d64 <__aeabi_ddiv+0xf4>
 800112e:	464b      	mov	r3, r9
 8001130:	3808      	subs	r0, #8
 8001132:	4083      	lsls	r3, r0
 8001134:	2500      	movs	r5, #0
 8001136:	4698      	mov	r8, r3
 8001138:	e620      	b.n	8000d7c <__aeabi_ddiv+0x10c>
 800113a:	f001 f917 	bl	800236c <__clzsi2>
 800113e:	0003      	movs	r3, r0
 8001140:	001a      	movs	r2, r3
 8001142:	3215      	adds	r2, #21
 8001144:	3020      	adds	r0, #32
 8001146:	2a1c      	cmp	r2, #28
 8001148:	dc00      	bgt.n	800114c <__aeabi_ddiv+0x4dc>
 800114a:	e630      	b.n	8000dae <__aeabi_ddiv+0x13e>
 800114c:	4654      	mov	r4, sl
 800114e:	3b08      	subs	r3, #8
 8001150:	2200      	movs	r2, #0
 8001152:	409c      	lsls	r4, r3
 8001154:	e635      	b.n	8000dc2 <__aeabi_ddiv+0x152>
 8001156:	230f      	movs	r3, #15
 8001158:	402b      	ands	r3, r5
 800115a:	2b04      	cmp	r3, #4
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x4f0>
 800115e:	e652      	b.n	8000e06 <__aeabi_ddiv+0x196>
 8001160:	2305      	movs	r3, #5
 8001162:	425b      	negs	r3, r3
 8001164:	42ab      	cmp	r3, r5
 8001166:	419b      	sbcs	r3, r3
 8001168:	3504      	adds	r5, #4
 800116a:	425b      	negs	r3, r3
 800116c:	08ed      	lsrs	r5, r5, #3
 800116e:	4498      	add	r8, r3
 8001170:	e64a      	b.n	8000e08 <__aeabi_ddiv+0x198>
 8001172:	428c      	cmp	r4, r1
 8001174:	d1c5      	bne.n	8001102 <__aeabi_ddiv+0x492>
 8001176:	42af      	cmp	r7, r5
 8001178:	d9c0      	bls.n	80010fc <__aeabi_ddiv+0x48c>
 800117a:	4690      	mov	r8, r2
 800117c:	e716      	b.n	8000fac <__aeabi_ddiv+0x33c>
 800117e:	428a      	cmp	r2, r1
 8001180:	d800      	bhi.n	8001184 <__aeabi_ddiv+0x514>
 8001182:	e6ea      	b.n	8000f5a <__aeabi_ddiv+0x2ea>
 8001184:	1e83      	subs	r3, r0, #2
 8001186:	1909      	adds	r1, r1, r4
 8001188:	e6e7      	b.n	8000f5a <__aeabi_ddiv+0x2ea>
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <__aeabi_ddiv+0x5c4>)
 800118c:	0028      	movs	r0, r5
 800118e:	445a      	add	r2, fp
 8001190:	4643      	mov	r3, r8
 8001192:	4095      	lsls	r5, r2
 8001194:	4093      	lsls	r3, r2
 8001196:	40c8      	lsrs	r0, r1
 8001198:	1e6a      	subs	r2, r5, #1
 800119a:	4195      	sbcs	r5, r2
 800119c:	4644      	mov	r4, r8
 800119e:	4303      	orrs	r3, r0
 80011a0:	432b      	orrs	r3, r5
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	075a      	lsls	r2, r3, #29
 80011a6:	d092      	beq.n	80010ce <__aeabi_ddiv+0x45e>
 80011a8:	220f      	movs	r2, #15
 80011aa:	401a      	ands	r2, r3
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d188      	bne.n	80010c2 <__aeabi_ddiv+0x452>
 80011b0:	e78d      	b.n	80010ce <__aeabi_ddiv+0x45e>
 80011b2:	0035      	movs	r5, r6
 80011b4:	4281      	cmp	r1, r0
 80011b6:	d000      	beq.n	80011ba <__aeabi_ddiv+0x54a>
 80011b8:	e74b      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d000      	beq.n	80011c2 <__aeabi_ddiv+0x552>
 80011c0:	e747      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 80011c2:	e618      	b.n	8000df6 <__aeabi_ddiv+0x186>
 80011c4:	42ae      	cmp	r6, r5
 80011c6:	d99c      	bls.n	8001102 <__aeabi_ddiv+0x492>
 80011c8:	2302      	movs	r3, #2
 80011ca:	425b      	negs	r3, r3
 80011cc:	469c      	mov	ip, r3
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	44e0      	add	r8, ip
 80011d2:	469c      	mov	ip, r3
 80011d4:	4465      	add	r5, ip
 80011d6:	429d      	cmp	r5, r3
 80011d8:	419b      	sbcs	r3, r3
 80011da:	425b      	negs	r3, r3
 80011dc:	191b      	adds	r3, r3, r4
 80011de:	18c9      	adds	r1, r1, r3
 80011e0:	e6e4      	b.n	8000fac <__aeabi_ddiv+0x33c>
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <__aeabi_ddiv+0x5c8>)
 80011e4:	445a      	add	r2, fp
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	dc00      	bgt.n	80011ec <__aeabi_ddiv+0x57c>
 80011ea:	e744      	b.n	8001076 <__aeabi_ddiv+0x406>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2500      	movs	r5, #0
 80011f0:	4498      	add	r8, r3
 80011f2:	e609      	b.n	8000e08 <__aeabi_ddiv+0x198>
 80011f4:	0765      	lsls	r5, r4, #29
 80011f6:	0264      	lsls	r4, r4, #9
 80011f8:	0b24      	lsrs	r4, r4, #12
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	431d      	orrs	r5, r3
 80011fe:	2300      	movs	r3, #0
 8001200:	e590      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8001202:	9e00      	ldr	r6, [sp, #0]
 8001204:	3d02      	subs	r5, #2
 8001206:	0072      	lsls	r2, r6, #1
 8001208:	42b2      	cmp	r2, r6
 800120a:	41bf      	sbcs	r7, r7
 800120c:	427f      	negs	r7, r7
 800120e:	193c      	adds	r4, r7, r4
 8001210:	1909      	adds	r1, r1, r4
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	e7ce      	b.n	80011b4 <__aeabi_ddiv+0x544>
 8001216:	2480      	movs	r4, #128	; 0x80
 8001218:	4643      	mov	r3, r8
 800121a:	0324      	lsls	r4, r4, #12
 800121c:	431c      	orrs	r4, r3
 800121e:	0324      	lsls	r4, r4, #12
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <__aeabi_ddiv+0x5cc>)
 8001222:	0b24      	lsrs	r4, r4, #12
 8001224:	e57e      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8001226:	9a00      	ldr	r2, [sp, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3ea      	bcc.n	8001202 <__aeabi_ddiv+0x592>
 800122c:	0035      	movs	r5, r6
 800122e:	e7c4      	b.n	80011ba <__aeabi_ddiv+0x54a>
 8001230:	0000043e 	.word	0x0000043e
 8001234:	0000041e 	.word	0x0000041e
 8001238:	000003ff 	.word	0x000003ff
 800123c:	000007ff 	.word	0x000007ff

08001240 <__eqdf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	464f      	mov	r7, r9
 8001244:	4646      	mov	r6, r8
 8001246:	46d6      	mov	lr, sl
 8001248:	4694      	mov	ip, r2
 800124a:	4691      	mov	r9, r2
 800124c:	031a      	lsls	r2, r3, #12
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	4d18      	ldr	r5, [pc, #96]	; (80012b4 <__eqdf2+0x74>)
 8001252:	b5c0      	push	{r6, r7, lr}
 8001254:	004c      	lsls	r4, r1, #1
 8001256:	030f      	lsls	r7, r1, #12
 8001258:	4692      	mov	sl, r2
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	0006      	movs	r6, r0
 800125e:	4680      	mov	r8, r0
 8001260:	0b3f      	lsrs	r7, r7, #12
 8001262:	2001      	movs	r0, #1
 8001264:	0d64      	lsrs	r4, r4, #21
 8001266:	0fc9      	lsrs	r1, r1, #31
 8001268:	0d52      	lsrs	r2, r2, #21
 800126a:	0fdb      	lsrs	r3, r3, #31
 800126c:	42ac      	cmp	r4, r5
 800126e:	d00a      	beq.n	8001286 <__eqdf2+0x46>
 8001270:	42aa      	cmp	r2, r5
 8001272:	d003      	beq.n	800127c <__eqdf2+0x3c>
 8001274:	4294      	cmp	r4, r2
 8001276:	d101      	bne.n	800127c <__eqdf2+0x3c>
 8001278:	4557      	cmp	r7, sl
 800127a:	d00d      	beq.n	8001298 <__eqdf2+0x58>
 800127c:	bce0      	pop	{r5, r6, r7}
 800127e:	46ba      	mov	sl, r7
 8001280:	46b1      	mov	r9, r6
 8001282:	46a8      	mov	r8, r5
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	003d      	movs	r5, r7
 8001288:	4335      	orrs	r5, r6
 800128a:	d1f7      	bne.n	800127c <__eqdf2+0x3c>
 800128c:	42a2      	cmp	r2, r4
 800128e:	d1f5      	bne.n	800127c <__eqdf2+0x3c>
 8001290:	4652      	mov	r2, sl
 8001292:	4665      	mov	r5, ip
 8001294:	432a      	orrs	r2, r5
 8001296:	d1f1      	bne.n	800127c <__eqdf2+0x3c>
 8001298:	2001      	movs	r0, #1
 800129a:	45c8      	cmp	r8, r9
 800129c:	d1ee      	bne.n	800127c <__eqdf2+0x3c>
 800129e:	4299      	cmp	r1, r3
 80012a0:	d006      	beq.n	80012b0 <__eqdf2+0x70>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d1ea      	bne.n	800127c <__eqdf2+0x3c>
 80012a6:	433e      	orrs	r6, r7
 80012a8:	0030      	movs	r0, r6
 80012aa:	1e46      	subs	r6, r0, #1
 80012ac:	41b0      	sbcs	r0, r6
 80012ae:	e7e5      	b.n	800127c <__eqdf2+0x3c>
 80012b0:	2000      	movs	r0, #0
 80012b2:	e7e3      	b.n	800127c <__eqdf2+0x3c>
 80012b4:	000007ff 	.word	0x000007ff

080012b8 <__gedf2>:
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	464e      	mov	r6, r9
 80012bc:	4645      	mov	r5, r8
 80012be:	4657      	mov	r7, sl
 80012c0:	46de      	mov	lr, fp
 80012c2:	0004      	movs	r4, r0
 80012c4:	0018      	movs	r0, r3
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	0016      	movs	r6, r2
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	0b1b      	lsrs	r3, r3, #12
 80012ce:	4d32      	ldr	r5, [pc, #200]	; (8001398 <__gedf2+0xe0>)
 80012d0:	030f      	lsls	r7, r1, #12
 80012d2:	004a      	lsls	r2, r1, #1
 80012d4:	4699      	mov	r9, r3
 80012d6:	0043      	lsls	r3, r0, #1
 80012d8:	46a4      	mov	ip, r4
 80012da:	46b0      	mov	r8, r6
 80012dc:	0b3f      	lsrs	r7, r7, #12
 80012de:	0d52      	lsrs	r2, r2, #21
 80012e0:	0fc9      	lsrs	r1, r1, #31
 80012e2:	0d5b      	lsrs	r3, r3, #21
 80012e4:	0fc0      	lsrs	r0, r0, #31
 80012e6:	42aa      	cmp	r2, r5
 80012e8:	d029      	beq.n	800133e <__gedf2+0x86>
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	d018      	beq.n	8001320 <__gedf2+0x68>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d12a      	bne.n	8001348 <__gedf2+0x90>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	46a3      	mov	fp, r4
 80012f6:	4265      	negs	r5, r4
 80012f8:	4165      	adcs	r5, r4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <__gedf2+0x4c>
 80012fe:	464c      	mov	r4, r9
 8001300:	4326      	orrs	r6, r4
 8001302:	d027      	beq.n	8001354 <__gedf2+0x9c>
 8001304:	2d00      	cmp	r5, #0
 8001306:	d115      	bne.n	8001334 <__gedf2+0x7c>
 8001308:	4281      	cmp	r1, r0
 800130a:	d028      	beq.n	800135e <__gedf2+0xa6>
 800130c:	2002      	movs	r0, #2
 800130e:	3901      	subs	r1, #1
 8001310:	4008      	ands	r0, r1
 8001312:	3801      	subs	r0, #1
 8001314:	bcf0      	pop	{r4, r5, r6, r7}
 8001316:	46bb      	mov	fp, r7
 8001318:	46b2      	mov	sl, r6
 800131a:	46a9      	mov	r9, r5
 800131c:	46a0      	mov	r8, r4
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	464d      	mov	r5, r9
 8001322:	432e      	orrs	r6, r5
 8001324:	d12f      	bne.n	8001386 <__gedf2+0xce>
 8001326:	2a00      	cmp	r2, #0
 8001328:	d1ee      	bne.n	8001308 <__gedf2+0x50>
 800132a:	433c      	orrs	r4, r7
 800132c:	4265      	negs	r5, r4
 800132e:	4165      	adcs	r5, r4
 8001330:	2d00      	cmp	r5, #0
 8001332:	d0e9      	beq.n	8001308 <__gedf2+0x50>
 8001334:	2800      	cmp	r0, #0
 8001336:	d1ed      	bne.n	8001314 <__gedf2+0x5c>
 8001338:	2001      	movs	r0, #1
 800133a:	4240      	negs	r0, r0
 800133c:	e7ea      	b.n	8001314 <__gedf2+0x5c>
 800133e:	003d      	movs	r5, r7
 8001340:	4325      	orrs	r5, r4
 8001342:	d120      	bne.n	8001386 <__gedf2+0xce>
 8001344:	4293      	cmp	r3, r2
 8001346:	d0eb      	beq.n	8001320 <__gedf2+0x68>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1dd      	bne.n	8001308 <__gedf2+0x50>
 800134c:	464c      	mov	r4, r9
 800134e:	4326      	orrs	r6, r4
 8001350:	d1da      	bne.n	8001308 <__gedf2+0x50>
 8001352:	e7db      	b.n	800130c <__gedf2+0x54>
 8001354:	465b      	mov	r3, fp
 8001356:	2000      	movs	r0, #0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0db      	beq.n	8001314 <__gedf2+0x5c>
 800135c:	e7d6      	b.n	800130c <__gedf2+0x54>
 800135e:	429a      	cmp	r2, r3
 8001360:	dc0a      	bgt.n	8001378 <__gedf2+0xc0>
 8001362:	dbe7      	blt.n	8001334 <__gedf2+0x7c>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8d1      	bhi.n	800130c <__gedf2+0x54>
 8001368:	d010      	beq.n	800138c <__gedf2+0xd4>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2d1      	bcs.n	8001314 <__gedf2+0x5c>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e1      	beq.n	8001338 <__gedf2+0x80>
 8001374:	0008      	movs	r0, r1
 8001376:	e7cd      	b.n	8001314 <__gedf2+0x5c>
 8001378:	4243      	negs	r3, r0
 800137a:	4158      	adcs	r0, r3
 800137c:	2302      	movs	r3, #2
 800137e:	4240      	negs	r0, r0
 8001380:	4018      	ands	r0, r3
 8001382:	3801      	subs	r0, #1
 8001384:	e7c6      	b.n	8001314 <__gedf2+0x5c>
 8001386:	2002      	movs	r0, #2
 8001388:	4240      	negs	r0, r0
 800138a:	e7c3      	b.n	8001314 <__gedf2+0x5c>
 800138c:	45c4      	cmp	ip, r8
 800138e:	d8bd      	bhi.n	800130c <__gedf2+0x54>
 8001390:	2000      	movs	r0, #0
 8001392:	45c4      	cmp	ip, r8
 8001394:	d2be      	bcs.n	8001314 <__gedf2+0x5c>
 8001396:	e7eb      	b.n	8001370 <__gedf2+0xb8>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__ledf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	464e      	mov	r6, r9
 80013a0:	4645      	mov	r5, r8
 80013a2:	4657      	mov	r7, sl
 80013a4:	46de      	mov	lr, fp
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	0016      	movs	r6, r2
 80013ae:	031b      	lsls	r3, r3, #12
 80013b0:	0b1b      	lsrs	r3, r3, #12
 80013b2:	4d31      	ldr	r5, [pc, #196]	; (8001478 <__ledf2+0xdc>)
 80013b4:	030f      	lsls	r7, r1, #12
 80013b6:	004a      	lsls	r2, r1, #1
 80013b8:	4699      	mov	r9, r3
 80013ba:	0043      	lsls	r3, r0, #1
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d011      	beq.n	80013f2 <__ledf2+0x56>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d014      	beq.n	80013fc <__ledf2+0x60>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d12f      	bne.n	8001436 <__ledf2+0x9a>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	46a3      	mov	fp, r4
 80013da:	4265      	negs	r5, r4
 80013dc:	4165      	adcs	r5, r4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d114      	bne.n	800140c <__ledf2+0x70>
 80013e2:	464c      	mov	r4, r9
 80013e4:	4326      	orrs	r6, r4
 80013e6:	d111      	bne.n	800140c <__ledf2+0x70>
 80013e8:	465b      	mov	r3, fp
 80013ea:	2000      	movs	r0, #0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d017      	beq.n	8001420 <__ledf2+0x84>
 80013f0:	e010      	b.n	8001414 <__ledf2+0x78>
 80013f2:	003d      	movs	r5, r7
 80013f4:	4325      	orrs	r5, r4
 80013f6:	d112      	bne.n	800141e <__ledf2+0x82>
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d11c      	bne.n	8001436 <__ledf2+0x9a>
 80013fc:	464d      	mov	r5, r9
 80013fe:	432e      	orrs	r6, r5
 8001400:	d10d      	bne.n	800141e <__ledf2+0x82>
 8001402:	2a00      	cmp	r2, #0
 8001404:	d104      	bne.n	8001410 <__ledf2+0x74>
 8001406:	433c      	orrs	r4, r7
 8001408:	4265      	negs	r5, r4
 800140a:	4165      	adcs	r5, r4
 800140c:	2d00      	cmp	r5, #0
 800140e:	d10d      	bne.n	800142c <__ledf2+0x90>
 8001410:	4281      	cmp	r1, r0
 8001412:	d016      	beq.n	8001442 <__ledf2+0xa6>
 8001414:	2002      	movs	r0, #2
 8001416:	3901      	subs	r1, #1
 8001418:	4008      	ands	r0, r1
 800141a:	3801      	subs	r0, #1
 800141c:	e000      	b.n	8001420 <__ledf2+0x84>
 800141e:	2002      	movs	r0, #2
 8001420:	bcf0      	pop	{r4, r5, r6, r7}
 8001422:	46bb      	mov	fp, r7
 8001424:	46b2      	mov	sl, r6
 8001426:	46a9      	mov	r9, r5
 8001428:	46a0      	mov	r8, r4
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f7      	bne.n	8001420 <__ledf2+0x84>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7f4      	b.n	8001420 <__ledf2+0x84>
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ea      	bne.n	8001410 <__ledf2+0x74>
 800143a:	464c      	mov	r4, r9
 800143c:	4326      	orrs	r6, r4
 800143e:	d1e7      	bne.n	8001410 <__ledf2+0x74>
 8001440:	e7e8      	b.n	8001414 <__ledf2+0x78>
 8001442:	429a      	cmp	r2, r3
 8001444:	dd06      	ble.n	8001454 <__ledf2+0xb8>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	2302      	movs	r3, #2
 800144c:	4240      	negs	r0, r0
 800144e:	4018      	ands	r0, r3
 8001450:	3801      	subs	r0, #1
 8001452:	e7e5      	b.n	8001420 <__ledf2+0x84>
 8001454:	429a      	cmp	r2, r3
 8001456:	dbe9      	blt.n	800142c <__ledf2+0x90>
 8001458:	454f      	cmp	r7, r9
 800145a:	d8db      	bhi.n	8001414 <__ledf2+0x78>
 800145c:	d006      	beq.n	800146c <__ledf2+0xd0>
 800145e:	2000      	movs	r0, #0
 8001460:	454f      	cmp	r7, r9
 8001462:	d2dd      	bcs.n	8001420 <__ledf2+0x84>
 8001464:	2900      	cmp	r1, #0
 8001466:	d0e3      	beq.n	8001430 <__ledf2+0x94>
 8001468:	0008      	movs	r0, r1
 800146a:	e7d9      	b.n	8001420 <__ledf2+0x84>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8d1      	bhi.n	8001414 <__ledf2+0x78>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d2d4      	bcs.n	8001420 <__ledf2+0x84>
 8001476:	e7f5      	b.n	8001464 <__ledf2+0xc8>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__aeabi_dmul>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	4698      	mov	r8, r3
 800148a:	030c      	lsls	r4, r1, #12
 800148c:	004b      	lsls	r3, r1, #1
 800148e:	0006      	movs	r6, r0
 8001490:	4692      	mov	sl, r2
 8001492:	b087      	sub	sp, #28
 8001494:	0b24      	lsrs	r4, r4, #12
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	0fcf      	lsrs	r7, r1, #31
 800149a:	2b00      	cmp	r3, #0
 800149c:	d06c      	beq.n	8001578 <__aeabi_dmul+0xfc>
 800149e:	4add      	ldr	r2, [pc, #884]	; (8001814 <__aeabi_dmul+0x398>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dmul+0x2a>
 80014a4:	e086      	b.n	80015b4 <__aeabi_dmul+0x138>
 80014a6:	0f42      	lsrs	r2, r0, #29
 80014a8:	00e4      	lsls	r4, r4, #3
 80014aa:	4314      	orrs	r4, r2
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0412      	lsls	r2, r2, #16
 80014b0:	4314      	orrs	r4, r2
 80014b2:	4ad9      	ldr	r2, [pc, #868]	; (8001818 <__aeabi_dmul+0x39c>)
 80014b4:	00c5      	lsls	r5, r0, #3
 80014b6:	4694      	mov	ip, r2
 80014b8:	4463      	add	r3, ip
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	4699      	mov	r9, r3
 80014c0:	469b      	mov	fp, r3
 80014c2:	4643      	mov	r3, r8
 80014c4:	4642      	mov	r2, r8
 80014c6:	031e      	lsls	r6, r3, #12
 80014c8:	0fd2      	lsrs	r2, r2, #31
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4650      	mov	r0, sl
 80014ce:	4690      	mov	r8, r2
 80014d0:	0b36      	lsrs	r6, r6, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dmul+0x5c>
 80014d6:	e078      	b.n	80015ca <__aeabi_dmul+0x14e>
 80014d8:	4ace      	ldr	r2, [pc, #824]	; (8001814 <__aeabi_dmul+0x398>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <__aeabi_dmul+0x9e>
 80014de:	49ce      	ldr	r1, [pc, #824]	; (8001818 <__aeabi_dmul+0x39c>)
 80014e0:	0f42      	lsrs	r2, r0, #29
 80014e2:	468c      	mov	ip, r1
 80014e4:	9900      	ldr	r1, [sp, #0]
 80014e6:	4463      	add	r3, ip
 80014e8:	00f6      	lsls	r6, r6, #3
 80014ea:	468c      	mov	ip, r1
 80014ec:	4316      	orrs	r6, r2
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	449c      	add	ip, r3
 80014f2:	0412      	lsls	r2, r2, #16
 80014f4:	4663      	mov	r3, ip
 80014f6:	4316      	orrs	r6, r2
 80014f8:	00c2      	lsls	r2, r0, #3
 80014fa:	2000      	movs	r0, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	9900      	ldr	r1, [sp, #0]
 8001500:	4643      	mov	r3, r8
 8001502:	3101      	adds	r1, #1
 8001504:	468c      	mov	ip, r1
 8001506:	4649      	mov	r1, r9
 8001508:	407b      	eors	r3, r7
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	290f      	cmp	r1, #15
 800150e:	d900      	bls.n	8001512 <__aeabi_dmul+0x96>
 8001510:	e07e      	b.n	8001610 <__aeabi_dmul+0x194>
 8001512:	4bc2      	ldr	r3, [pc, #776]	; (800181c <__aeabi_dmul+0x3a0>)
 8001514:	0089      	lsls	r1, r1, #2
 8001516:	5859      	ldr	r1, [r3, r1]
 8001518:	468f      	mov	pc, r1
 800151a:	4652      	mov	r2, sl
 800151c:	9b00      	ldr	r3, [sp, #0]
 800151e:	4332      	orrs	r2, r6
 8001520:	d000      	beq.n	8001524 <__aeabi_dmul+0xa8>
 8001522:	e156      	b.n	80017d2 <__aeabi_dmul+0x356>
 8001524:	49bb      	ldr	r1, [pc, #748]	; (8001814 <__aeabi_dmul+0x398>)
 8001526:	2600      	movs	r6, #0
 8001528:	468c      	mov	ip, r1
 800152a:	4463      	add	r3, ip
 800152c:	4649      	mov	r1, r9
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	4319      	orrs	r1, r3
 8001534:	4689      	mov	r9, r1
 8001536:	2002      	movs	r0, #2
 8001538:	e7e1      	b.n	80014fe <__aeabi_dmul+0x82>
 800153a:	4643      	mov	r3, r8
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	0034      	movs	r4, r6
 8001540:	0015      	movs	r5, r2
 8001542:	4683      	mov	fp, r0
 8001544:	465b      	mov	r3, fp
 8001546:	2b02      	cmp	r3, #2
 8001548:	d05e      	beq.n	8001608 <__aeabi_dmul+0x18c>
 800154a:	2b03      	cmp	r3, #3
 800154c:	d100      	bne.n	8001550 <__aeabi_dmul+0xd4>
 800154e:	e1f3      	b.n	8001938 <__aeabi_dmul+0x4bc>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d000      	beq.n	8001556 <__aeabi_dmul+0xda>
 8001554:	e118      	b.n	8001788 <__aeabi_dmul+0x30c>
 8001556:	2200      	movs	r2, #0
 8001558:	2400      	movs	r4, #0
 800155a:	2500      	movs	r5, #0
 800155c:	9b01      	ldr	r3, [sp, #4]
 800155e:	0512      	lsls	r2, r2, #20
 8001560:	4322      	orrs	r2, r4
 8001562:	07db      	lsls	r3, r3, #31
 8001564:	431a      	orrs	r2, r3
 8001566:	0028      	movs	r0, r5
 8001568:	0011      	movs	r1, r2
 800156a:	b007      	add	sp, #28
 800156c:	bcf0      	pop	{r4, r5, r6, r7}
 800156e:	46bb      	mov	fp, r7
 8001570:	46b2      	mov	sl, r6
 8001572:	46a9      	mov	r9, r5
 8001574:	46a0      	mov	r8, r4
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	0025      	movs	r5, r4
 800157a:	4305      	orrs	r5, r0
 800157c:	d100      	bne.n	8001580 <__aeabi_dmul+0x104>
 800157e:	e141      	b.n	8001804 <__aeabi_dmul+0x388>
 8001580:	2c00      	cmp	r4, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dmul+0x10a>
 8001584:	e1ad      	b.n	80018e2 <__aeabi_dmul+0x466>
 8001586:	0020      	movs	r0, r4
 8001588:	f000 fef0 	bl	800236c <__clzsi2>
 800158c:	0001      	movs	r1, r0
 800158e:	0002      	movs	r2, r0
 8001590:	390b      	subs	r1, #11
 8001592:	231d      	movs	r3, #29
 8001594:	0010      	movs	r0, r2
 8001596:	1a5b      	subs	r3, r3, r1
 8001598:	0031      	movs	r1, r6
 800159a:	0035      	movs	r5, r6
 800159c:	3808      	subs	r0, #8
 800159e:	4084      	lsls	r4, r0
 80015a0:	40d9      	lsrs	r1, r3
 80015a2:	4085      	lsls	r5, r0
 80015a4:	430c      	orrs	r4, r1
 80015a6:	489e      	ldr	r0, [pc, #632]	; (8001820 <__aeabi_dmul+0x3a4>)
 80015a8:	1a83      	subs	r3, r0, r2
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	4699      	mov	r9, r3
 80015b0:	469b      	mov	fp, r3
 80015b2:	e786      	b.n	80014c2 <__aeabi_dmul+0x46>
 80015b4:	0005      	movs	r5, r0
 80015b6:	4325      	orrs	r5, r4
 80015b8:	d000      	beq.n	80015bc <__aeabi_dmul+0x140>
 80015ba:	e11c      	b.n	80017f6 <__aeabi_dmul+0x37a>
 80015bc:	2208      	movs	r2, #8
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2302      	movs	r3, #2
 80015c2:	2400      	movs	r4, #0
 80015c4:	4691      	mov	r9, r2
 80015c6:	469b      	mov	fp, r3
 80015c8:	e77b      	b.n	80014c2 <__aeabi_dmul+0x46>
 80015ca:	4652      	mov	r2, sl
 80015cc:	4332      	orrs	r2, r6
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x156>
 80015d0:	e10a      	b.n	80017e8 <__aeabi_dmul+0x36c>
 80015d2:	2e00      	cmp	r6, #0
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dmul+0x15c>
 80015d6:	e176      	b.n	80018c6 <__aeabi_dmul+0x44a>
 80015d8:	0030      	movs	r0, r6
 80015da:	f000 fec7 	bl	800236c <__clzsi2>
 80015de:	0002      	movs	r2, r0
 80015e0:	3a0b      	subs	r2, #11
 80015e2:	231d      	movs	r3, #29
 80015e4:	0001      	movs	r1, r0
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	4652      	mov	r2, sl
 80015ea:	3908      	subs	r1, #8
 80015ec:	40da      	lsrs	r2, r3
 80015ee:	408e      	lsls	r6, r1
 80015f0:	4316      	orrs	r6, r2
 80015f2:	4652      	mov	r2, sl
 80015f4:	408a      	lsls	r2, r1
 80015f6:	9b00      	ldr	r3, [sp, #0]
 80015f8:	4989      	ldr	r1, [pc, #548]	; (8001820 <__aeabi_dmul+0x3a4>)
 80015fa:	1a18      	subs	r0, r3, r0
 80015fc:	0003      	movs	r3, r0
 80015fe:	468c      	mov	ip, r1
 8001600:	4463      	add	r3, ip
 8001602:	2000      	movs	r0, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	e77a      	b.n	80014fe <__aeabi_dmul+0x82>
 8001608:	2400      	movs	r4, #0
 800160a:	2500      	movs	r5, #0
 800160c:	4a81      	ldr	r2, [pc, #516]	; (8001814 <__aeabi_dmul+0x398>)
 800160e:	e7a5      	b.n	800155c <__aeabi_dmul+0xe0>
 8001610:	0c2f      	lsrs	r7, r5, #16
 8001612:	042d      	lsls	r5, r5, #16
 8001614:	0c2d      	lsrs	r5, r5, #16
 8001616:	002b      	movs	r3, r5
 8001618:	0c11      	lsrs	r1, r2, #16
 800161a:	0412      	lsls	r2, r2, #16
 800161c:	0c12      	lsrs	r2, r2, #16
 800161e:	4353      	muls	r3, r2
 8001620:	4698      	mov	r8, r3
 8001622:	0013      	movs	r3, r2
 8001624:	0028      	movs	r0, r5
 8001626:	437b      	muls	r3, r7
 8001628:	4699      	mov	r9, r3
 800162a:	4348      	muls	r0, r1
 800162c:	4448      	add	r0, r9
 800162e:	4683      	mov	fp, r0
 8001630:	4640      	mov	r0, r8
 8001632:	000b      	movs	r3, r1
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	4682      	mov	sl, r0
 8001638:	4658      	mov	r0, fp
 800163a:	437b      	muls	r3, r7
 800163c:	4450      	add	r0, sl
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	4581      	cmp	r9, r0
 8001642:	d906      	bls.n	8001652 <__aeabi_dmul+0x1d6>
 8001644:	469a      	mov	sl, r3
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	4699      	mov	r9, r3
 800164c:	44ca      	add	sl, r9
 800164e:	4653      	mov	r3, sl
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	0c03      	lsrs	r3, r0, #16
 8001654:	469b      	mov	fp, r3
 8001656:	4643      	mov	r3, r8
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0400      	lsls	r0, r0, #16
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	4698      	mov	r8, r3
 8001660:	0003      	movs	r3, r0
 8001662:	4443      	add	r3, r8
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	0c33      	lsrs	r3, r6, #16
 8001668:	4699      	mov	r9, r3
 800166a:	002b      	movs	r3, r5
 800166c:	0436      	lsls	r6, r6, #16
 800166e:	0c36      	lsrs	r6, r6, #16
 8001670:	4373      	muls	r3, r6
 8001672:	4698      	mov	r8, r3
 8001674:	0033      	movs	r3, r6
 8001676:	437b      	muls	r3, r7
 8001678:	469a      	mov	sl, r3
 800167a:	464b      	mov	r3, r9
 800167c:	435d      	muls	r5, r3
 800167e:	435f      	muls	r7, r3
 8001680:	4643      	mov	r3, r8
 8001682:	4455      	add	r5, sl
 8001684:	0c18      	lsrs	r0, r3, #16
 8001686:	1940      	adds	r0, r0, r5
 8001688:	4582      	cmp	sl, r0
 800168a:	d903      	bls.n	8001694 <__aeabi_dmul+0x218>
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	469a      	mov	sl, r3
 8001692:	4457      	add	r7, sl
 8001694:	0c05      	lsrs	r5, r0, #16
 8001696:	19eb      	adds	r3, r5, r7
 8001698:	9305      	str	r3, [sp, #20]
 800169a:	4643      	mov	r3, r8
 800169c:	041d      	lsls	r5, r3, #16
 800169e:	0c2d      	lsrs	r5, r5, #16
 80016a0:	0400      	lsls	r0, r0, #16
 80016a2:	1940      	adds	r0, r0, r5
 80016a4:	0c25      	lsrs	r5, r4, #16
 80016a6:	0424      	lsls	r4, r4, #16
 80016a8:	0c24      	lsrs	r4, r4, #16
 80016aa:	0027      	movs	r7, r4
 80016ac:	4357      	muls	r7, r2
 80016ae:	436a      	muls	r2, r5
 80016b0:	4690      	mov	r8, r2
 80016b2:	002a      	movs	r2, r5
 80016b4:	0c3b      	lsrs	r3, r7, #16
 80016b6:	469a      	mov	sl, r3
 80016b8:	434a      	muls	r2, r1
 80016ba:	4361      	muls	r1, r4
 80016bc:	4441      	add	r1, r8
 80016be:	4451      	add	r1, sl
 80016c0:	4483      	add	fp, r0
 80016c2:	4588      	cmp	r8, r1
 80016c4:	d903      	bls.n	80016ce <__aeabi_dmul+0x252>
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	4698      	mov	r8, r3
 80016cc:	4442      	add	r2, r8
 80016ce:	043f      	lsls	r7, r7, #16
 80016d0:	0c0b      	lsrs	r3, r1, #16
 80016d2:	0c3f      	lsrs	r7, r7, #16
 80016d4:	0409      	lsls	r1, r1, #16
 80016d6:	19c9      	adds	r1, r1, r7
 80016d8:	0027      	movs	r7, r4
 80016da:	4698      	mov	r8, r3
 80016dc:	464b      	mov	r3, r9
 80016de:	4377      	muls	r7, r6
 80016e0:	435c      	muls	r4, r3
 80016e2:	436e      	muls	r6, r5
 80016e4:	435d      	muls	r5, r3
 80016e6:	0c3b      	lsrs	r3, r7, #16
 80016e8:	4699      	mov	r9, r3
 80016ea:	19a4      	adds	r4, r4, r6
 80016ec:	444c      	add	r4, r9
 80016ee:	4442      	add	r2, r8
 80016f0:	9503      	str	r5, [sp, #12]
 80016f2:	42a6      	cmp	r6, r4
 80016f4:	d904      	bls.n	8001700 <__aeabi_dmul+0x284>
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	4698      	mov	r8, r3
 80016fc:	4445      	add	r5, r8
 80016fe:	9503      	str	r5, [sp, #12]
 8001700:	9b02      	ldr	r3, [sp, #8]
 8001702:	043f      	lsls	r7, r7, #16
 8001704:	445b      	add	r3, fp
 8001706:	001e      	movs	r6, r3
 8001708:	4283      	cmp	r3, r0
 800170a:	4180      	sbcs	r0, r0
 800170c:	0423      	lsls	r3, r4, #16
 800170e:	4698      	mov	r8, r3
 8001710:	9b05      	ldr	r3, [sp, #20]
 8001712:	0c3f      	lsrs	r7, r7, #16
 8001714:	4447      	add	r7, r8
 8001716:	4698      	mov	r8, r3
 8001718:	1876      	adds	r6, r6, r1
 800171a:	428e      	cmp	r6, r1
 800171c:	4189      	sbcs	r1, r1
 800171e:	4447      	add	r7, r8
 8001720:	4240      	negs	r0, r0
 8001722:	183d      	adds	r5, r7, r0
 8001724:	46a8      	mov	r8, r5
 8001726:	4693      	mov	fp, r2
 8001728:	4249      	negs	r1, r1
 800172a:	468a      	mov	sl, r1
 800172c:	44c3      	add	fp, r8
 800172e:	429f      	cmp	r7, r3
 8001730:	41bf      	sbcs	r7, r7
 8001732:	4580      	cmp	r8, r0
 8001734:	4180      	sbcs	r0, r0
 8001736:	9b03      	ldr	r3, [sp, #12]
 8001738:	44da      	add	sl, fp
 800173a:	4698      	mov	r8, r3
 800173c:	4653      	mov	r3, sl
 800173e:	4240      	negs	r0, r0
 8001740:	427f      	negs	r7, r7
 8001742:	4307      	orrs	r7, r0
 8001744:	0c24      	lsrs	r4, r4, #16
 8001746:	4593      	cmp	fp, r2
 8001748:	4192      	sbcs	r2, r2
 800174a:	458a      	cmp	sl, r1
 800174c:	4189      	sbcs	r1, r1
 800174e:	193f      	adds	r7, r7, r4
 8001750:	0ddc      	lsrs	r4, r3, #23
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	0275      	lsls	r5, r6, #9
 8001756:	431d      	orrs	r5, r3
 8001758:	1e68      	subs	r0, r5, #1
 800175a:	4185      	sbcs	r5, r0
 800175c:	4653      	mov	r3, sl
 800175e:	4252      	negs	r2, r2
 8001760:	4249      	negs	r1, r1
 8001762:	430a      	orrs	r2, r1
 8001764:	18bf      	adds	r7, r7, r2
 8001766:	4447      	add	r7, r8
 8001768:	0df6      	lsrs	r6, r6, #23
 800176a:	027f      	lsls	r7, r7, #9
 800176c:	4335      	orrs	r5, r6
 800176e:	025a      	lsls	r2, r3, #9
 8001770:	433c      	orrs	r4, r7
 8001772:	4315      	orrs	r5, r2
 8001774:	01fb      	lsls	r3, r7, #7
 8001776:	d400      	bmi.n	800177a <__aeabi_dmul+0x2fe>
 8001778:	e0c1      	b.n	80018fe <__aeabi_dmul+0x482>
 800177a:	2101      	movs	r1, #1
 800177c:	086a      	lsrs	r2, r5, #1
 800177e:	400d      	ands	r5, r1
 8001780:	4315      	orrs	r5, r2
 8001782:	07e2      	lsls	r2, r4, #31
 8001784:	4315      	orrs	r5, r2
 8001786:	0864      	lsrs	r4, r4, #1
 8001788:	4926      	ldr	r1, [pc, #152]	; (8001824 <__aeabi_dmul+0x3a8>)
 800178a:	4461      	add	r1, ip
 800178c:	2900      	cmp	r1, #0
 800178e:	dd56      	ble.n	800183e <__aeabi_dmul+0x3c2>
 8001790:	076b      	lsls	r3, r5, #29
 8001792:	d009      	beq.n	80017a8 <__aeabi_dmul+0x32c>
 8001794:	220f      	movs	r2, #15
 8001796:	402a      	ands	r2, r5
 8001798:	2a04      	cmp	r2, #4
 800179a:	d005      	beq.n	80017a8 <__aeabi_dmul+0x32c>
 800179c:	1d2a      	adds	r2, r5, #4
 800179e:	42aa      	cmp	r2, r5
 80017a0:	41ad      	sbcs	r5, r5
 80017a2:	426d      	negs	r5, r5
 80017a4:	1964      	adds	r4, r4, r5
 80017a6:	0015      	movs	r5, r2
 80017a8:	01e3      	lsls	r3, r4, #7
 80017aa:	d504      	bpl.n	80017b6 <__aeabi_dmul+0x33a>
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <__aeabi_dmul+0x3ac>)
 80017b0:	00c9      	lsls	r1, r1, #3
 80017b2:	4014      	ands	r4, r2
 80017b4:	4461      	add	r1, ip
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <__aeabi_dmul+0x3b0>)
 80017b8:	4291      	cmp	r1, r2
 80017ba:	dd00      	ble.n	80017be <__aeabi_dmul+0x342>
 80017bc:	e724      	b.n	8001608 <__aeabi_dmul+0x18c>
 80017be:	0762      	lsls	r2, r4, #29
 80017c0:	08ed      	lsrs	r5, r5, #3
 80017c2:	0264      	lsls	r4, r4, #9
 80017c4:	0549      	lsls	r1, r1, #21
 80017c6:	4315      	orrs	r5, r2
 80017c8:	0b24      	lsrs	r4, r4, #12
 80017ca:	0d4a      	lsrs	r2, r1, #21
 80017cc:	e6c6      	b.n	800155c <__aeabi_dmul+0xe0>
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e6b8      	b.n	8001544 <__aeabi_dmul+0xc8>
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <__aeabi_dmul+0x398>)
 80017d4:	2003      	movs	r0, #3
 80017d6:	4694      	mov	ip, r2
 80017d8:	4463      	add	r3, ip
 80017da:	464a      	mov	r2, r9
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2303      	movs	r3, #3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	4691      	mov	r9, r2
 80017e4:	4652      	mov	r2, sl
 80017e6:	e68a      	b.n	80014fe <__aeabi_dmul+0x82>
 80017e8:	4649      	mov	r1, r9
 80017ea:	2301      	movs	r3, #1
 80017ec:	4319      	orrs	r1, r3
 80017ee:	4689      	mov	r9, r1
 80017f0:	2600      	movs	r6, #0
 80017f2:	2001      	movs	r0, #1
 80017f4:	e683      	b.n	80014fe <__aeabi_dmul+0x82>
 80017f6:	220c      	movs	r2, #12
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2303      	movs	r3, #3
 80017fc:	0005      	movs	r5, r0
 80017fe:	4691      	mov	r9, r2
 8001800:	469b      	mov	fp, r3
 8001802:	e65e      	b.n	80014c2 <__aeabi_dmul+0x46>
 8001804:	2304      	movs	r3, #4
 8001806:	4699      	mov	r9, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	2400      	movs	r4, #0
 8001810:	469b      	mov	fp, r3
 8001812:	e656      	b.n	80014c2 <__aeabi_dmul+0x46>
 8001814:	000007ff 	.word	0x000007ff
 8001818:	fffffc01 	.word	0xfffffc01
 800181c:	0800dacc 	.word	0x0800dacc
 8001820:	fffffc0d 	.word	0xfffffc0d
 8001824:	000003ff 	.word	0x000003ff
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	000007fe 	.word	0x000007fe
 8001830:	2300      	movs	r3, #0
 8001832:	2480      	movs	r4, #128	; 0x80
 8001834:	2500      	movs	r5, #0
 8001836:	4a44      	ldr	r2, [pc, #272]	; (8001948 <__aeabi_dmul+0x4cc>)
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	0324      	lsls	r4, r4, #12
 800183c:	e68e      	b.n	800155c <__aeabi_dmul+0xe0>
 800183e:	2001      	movs	r0, #1
 8001840:	1a40      	subs	r0, r0, r1
 8001842:	2838      	cmp	r0, #56	; 0x38
 8001844:	dd00      	ble.n	8001848 <__aeabi_dmul+0x3cc>
 8001846:	e686      	b.n	8001556 <__aeabi_dmul+0xda>
 8001848:	281f      	cmp	r0, #31
 800184a:	dd5b      	ble.n	8001904 <__aeabi_dmul+0x488>
 800184c:	221f      	movs	r2, #31
 800184e:	0023      	movs	r3, r4
 8001850:	4252      	negs	r2, r2
 8001852:	1a51      	subs	r1, r2, r1
 8001854:	40cb      	lsrs	r3, r1
 8001856:	0019      	movs	r1, r3
 8001858:	2820      	cmp	r0, #32
 800185a:	d003      	beq.n	8001864 <__aeabi_dmul+0x3e8>
 800185c:	4a3b      	ldr	r2, [pc, #236]	; (800194c <__aeabi_dmul+0x4d0>)
 800185e:	4462      	add	r2, ip
 8001860:	4094      	lsls	r4, r2
 8001862:	4325      	orrs	r5, r4
 8001864:	1e6a      	subs	r2, r5, #1
 8001866:	4195      	sbcs	r5, r2
 8001868:	002a      	movs	r2, r5
 800186a:	430a      	orrs	r2, r1
 800186c:	2107      	movs	r1, #7
 800186e:	000d      	movs	r5, r1
 8001870:	2400      	movs	r4, #0
 8001872:	4015      	ands	r5, r2
 8001874:	4211      	tst	r1, r2
 8001876:	d05b      	beq.n	8001930 <__aeabi_dmul+0x4b4>
 8001878:	210f      	movs	r1, #15
 800187a:	2400      	movs	r4, #0
 800187c:	4011      	ands	r1, r2
 800187e:	2904      	cmp	r1, #4
 8001880:	d053      	beq.n	800192a <__aeabi_dmul+0x4ae>
 8001882:	1d11      	adds	r1, r2, #4
 8001884:	4291      	cmp	r1, r2
 8001886:	4192      	sbcs	r2, r2
 8001888:	4252      	negs	r2, r2
 800188a:	18a4      	adds	r4, r4, r2
 800188c:	000a      	movs	r2, r1
 800188e:	0223      	lsls	r3, r4, #8
 8001890:	d54b      	bpl.n	800192a <__aeabi_dmul+0x4ae>
 8001892:	2201      	movs	r2, #1
 8001894:	2400      	movs	r4, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e660      	b.n	800155c <__aeabi_dmul+0xe0>
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	031b      	lsls	r3, r3, #12
 800189e:	421c      	tst	r4, r3
 80018a0:	d009      	beq.n	80018b6 <__aeabi_dmul+0x43a>
 80018a2:	421e      	tst	r6, r3
 80018a4:	d107      	bne.n	80018b6 <__aeabi_dmul+0x43a>
 80018a6:	4333      	orrs	r3, r6
 80018a8:	031c      	lsls	r4, r3, #12
 80018aa:	4643      	mov	r3, r8
 80018ac:	0015      	movs	r5, r2
 80018ae:	0b24      	lsrs	r4, r4, #12
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <__aeabi_dmul+0x4cc>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	e652      	b.n	800155c <__aeabi_dmul+0xe0>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	0312      	lsls	r2, r2, #12
 80018ba:	4314      	orrs	r4, r2
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <__aeabi_dmul+0x4cc>)
 80018c0:	0b24      	lsrs	r4, r4, #12
 80018c2:	9701      	str	r7, [sp, #4]
 80018c4:	e64a      	b.n	800155c <__aeabi_dmul+0xe0>
 80018c6:	f000 fd51 	bl	800236c <__clzsi2>
 80018ca:	0003      	movs	r3, r0
 80018cc:	001a      	movs	r2, r3
 80018ce:	3215      	adds	r2, #21
 80018d0:	3020      	adds	r0, #32
 80018d2:	2a1c      	cmp	r2, #28
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_dmul+0x45c>
 80018d6:	e684      	b.n	80015e2 <__aeabi_dmul+0x166>
 80018d8:	4656      	mov	r6, sl
 80018da:	3b08      	subs	r3, #8
 80018dc:	2200      	movs	r2, #0
 80018de:	409e      	lsls	r6, r3
 80018e0:	e689      	b.n	80015f6 <__aeabi_dmul+0x17a>
 80018e2:	f000 fd43 	bl	800236c <__clzsi2>
 80018e6:	0001      	movs	r1, r0
 80018e8:	0002      	movs	r2, r0
 80018ea:	3115      	adds	r1, #21
 80018ec:	3220      	adds	r2, #32
 80018ee:	291c      	cmp	r1, #28
 80018f0:	dc00      	bgt.n	80018f4 <__aeabi_dmul+0x478>
 80018f2:	e64e      	b.n	8001592 <__aeabi_dmul+0x116>
 80018f4:	0034      	movs	r4, r6
 80018f6:	3808      	subs	r0, #8
 80018f8:	2500      	movs	r5, #0
 80018fa:	4084      	lsls	r4, r0
 80018fc:	e653      	b.n	80015a6 <__aeabi_dmul+0x12a>
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	469c      	mov	ip, r3
 8001902:	e741      	b.n	8001788 <__aeabi_dmul+0x30c>
 8001904:	4912      	ldr	r1, [pc, #72]	; (8001950 <__aeabi_dmul+0x4d4>)
 8001906:	0022      	movs	r2, r4
 8001908:	4461      	add	r1, ip
 800190a:	002e      	movs	r6, r5
 800190c:	408d      	lsls	r5, r1
 800190e:	408a      	lsls	r2, r1
 8001910:	40c6      	lsrs	r6, r0
 8001912:	1e69      	subs	r1, r5, #1
 8001914:	418d      	sbcs	r5, r1
 8001916:	4332      	orrs	r2, r6
 8001918:	432a      	orrs	r2, r5
 800191a:	40c4      	lsrs	r4, r0
 800191c:	0753      	lsls	r3, r2, #29
 800191e:	d0b6      	beq.n	800188e <__aeabi_dmul+0x412>
 8001920:	210f      	movs	r1, #15
 8001922:	4011      	ands	r1, r2
 8001924:	2904      	cmp	r1, #4
 8001926:	d1ac      	bne.n	8001882 <__aeabi_dmul+0x406>
 8001928:	e7b1      	b.n	800188e <__aeabi_dmul+0x412>
 800192a:	0765      	lsls	r5, r4, #29
 800192c:	0264      	lsls	r4, r4, #9
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	08d2      	lsrs	r2, r2, #3
 8001932:	4315      	orrs	r5, r2
 8001934:	2200      	movs	r2, #0
 8001936:	e611      	b.n	800155c <__aeabi_dmul+0xe0>
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4314      	orrs	r4, r2
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4a01      	ldr	r2, [pc, #4]	; (8001948 <__aeabi_dmul+0x4cc>)
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	e60a      	b.n	800155c <__aeabi_dmul+0xe0>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff
 800194c:	0000043e 	.word	0x0000043e
 8001950:	0000041e 	.word	0x0000041e

08001954 <__aeabi_dsub>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	4657      	mov	r7, sl
 8001958:	464e      	mov	r6, r9
 800195a:	4645      	mov	r5, r8
 800195c:	46de      	mov	lr, fp
 800195e:	0004      	movs	r4, r0
 8001960:	b5e0      	push	{r5, r6, r7, lr}
 8001962:	001f      	movs	r7, r3
 8001964:	0010      	movs	r0, r2
 8001966:	030b      	lsls	r3, r1, #12
 8001968:	0f62      	lsrs	r2, r4, #29
 800196a:	004e      	lsls	r6, r1, #1
 800196c:	0fcd      	lsrs	r5, r1, #31
 800196e:	0a5b      	lsrs	r3, r3, #9
 8001970:	0339      	lsls	r1, r7, #12
 8001972:	4313      	orrs	r3, r2
 8001974:	0a49      	lsrs	r1, r1, #9
 8001976:	00e2      	lsls	r2, r4, #3
 8001978:	0f44      	lsrs	r4, r0, #29
 800197a:	4321      	orrs	r1, r4
 800197c:	4cc2      	ldr	r4, [pc, #776]	; (8001c88 <__aeabi_dsub+0x334>)
 800197e:	4691      	mov	r9, r2
 8001980:	4692      	mov	sl, r2
 8001982:	00c0      	lsls	r0, r0, #3
 8001984:	007a      	lsls	r2, r7, #1
 8001986:	4680      	mov	r8, r0
 8001988:	0d76      	lsrs	r6, r6, #21
 800198a:	0d52      	lsrs	r2, r2, #21
 800198c:	0fff      	lsrs	r7, r7, #31
 800198e:	42a2      	cmp	r2, r4
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x40>
 8001992:	e0b4      	b.n	8001afe <__aeabi_dsub+0x1aa>
 8001994:	2401      	movs	r4, #1
 8001996:	4067      	eors	r7, r4
 8001998:	46bb      	mov	fp, r7
 800199a:	42bd      	cmp	r5, r7
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x4c>
 800199e:	e088      	b.n	8001ab2 <__aeabi_dsub+0x15e>
 80019a0:	1ab4      	subs	r4, r6, r2
 80019a2:	46a4      	mov	ip, r4
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dsub+0x56>
 80019a8:	e0b2      	b.n	8001b10 <__aeabi_dsub+0x1bc>
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x5c>
 80019ae:	e0c5      	b.n	8001b3c <__aeabi_dsub+0x1e8>
 80019b0:	4ab5      	ldr	r2, [pc, #724]	; (8001c88 <__aeabi_dsub+0x334>)
 80019b2:	4296      	cmp	r6, r2
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dsub+0x64>
 80019b6:	e28b      	b.n	8001ed0 <__aeabi_dsub+0x57c>
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0412      	lsls	r2, r2, #16
 80019bc:	4311      	orrs	r1, r2
 80019be:	4662      	mov	r2, ip
 80019c0:	2a38      	cmp	r2, #56	; 0x38
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0x72>
 80019c4:	e1a1      	b.n	8001d0a <__aeabi_dsub+0x3b6>
 80019c6:	2a1f      	cmp	r2, #31
 80019c8:	dd00      	ble.n	80019cc <__aeabi_dsub+0x78>
 80019ca:	e216      	b.n	8001dfa <__aeabi_dsub+0x4a6>
 80019cc:	2720      	movs	r7, #32
 80019ce:	000c      	movs	r4, r1
 80019d0:	1abf      	subs	r7, r7, r2
 80019d2:	40bc      	lsls	r4, r7
 80019d4:	0002      	movs	r2, r0
 80019d6:	46a0      	mov	r8, r4
 80019d8:	4664      	mov	r4, ip
 80019da:	40b8      	lsls	r0, r7
 80019dc:	40e2      	lsrs	r2, r4
 80019de:	4644      	mov	r4, r8
 80019e0:	4314      	orrs	r4, r2
 80019e2:	0002      	movs	r2, r0
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	4660      	mov	r0, ip
 80019ea:	40c1      	lsrs	r1, r0
 80019ec:	4322      	orrs	r2, r4
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	4649      	mov	r1, r9
 80019f2:	1a8c      	subs	r4, r1, r2
 80019f4:	45a1      	cmp	r9, r4
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	4698      	mov	r8, r3
 80019fe:	4643      	mov	r3, r8
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	d400      	bmi.n	8001a06 <__aeabi_dsub+0xb2>
 8001a04:	e117      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001a06:	4643      	mov	r3, r8
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	0a5b      	lsrs	r3, r3, #9
 8001a0c:	4698      	mov	r8, r3
 8001a0e:	4643      	mov	r3, r8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0xc2>
 8001a14:	e16c      	b.n	8001cf0 <__aeabi_dsub+0x39c>
 8001a16:	4640      	mov	r0, r8
 8001a18:	f000 fca8 	bl	800236c <__clzsi2>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	3a08      	subs	r2, #8
 8001a20:	2120      	movs	r1, #32
 8001a22:	0020      	movs	r0, r4
 8001a24:	4643      	mov	r3, r8
 8001a26:	1a89      	subs	r1, r1, r2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	40c8      	lsrs	r0, r1
 8001a2c:	4094      	lsls	r4, r2
 8001a2e:	4303      	orrs	r3, r0
 8001a30:	4296      	cmp	r6, r2
 8001a32:	dd00      	ble.n	8001a36 <__aeabi_dsub+0xe2>
 8001a34:	e157      	b.n	8001ce6 <__aeabi_dsub+0x392>
 8001a36:	1b96      	subs	r6, r2, r6
 8001a38:	1c71      	adds	r1, r6, #1
 8001a3a:	291f      	cmp	r1, #31
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0xec>
 8001a3e:	e1cb      	b.n	8001dd8 <__aeabi_dsub+0x484>
 8001a40:	2220      	movs	r2, #32
 8001a42:	0018      	movs	r0, r3
 8001a44:	0026      	movs	r6, r4
 8001a46:	1a52      	subs	r2, r2, r1
 8001a48:	4094      	lsls	r4, r2
 8001a4a:	4090      	lsls	r0, r2
 8001a4c:	40ce      	lsrs	r6, r1
 8001a4e:	40cb      	lsrs	r3, r1
 8001a50:	1e62      	subs	r2, r4, #1
 8001a52:	4194      	sbcs	r4, r2
 8001a54:	4330      	orrs	r0, r6
 8001a56:	4698      	mov	r8, r3
 8001a58:	2600      	movs	r6, #0
 8001a5a:	4304      	orrs	r4, r0
 8001a5c:	0763      	lsls	r3, r4, #29
 8001a5e:	d009      	beq.n	8001a74 <__aeabi_dsub+0x120>
 8001a60:	230f      	movs	r3, #15
 8001a62:	4023      	ands	r3, r4
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <__aeabi_dsub+0x120>
 8001a68:	1d23      	adds	r3, r4, #4
 8001a6a:	42a3      	cmp	r3, r4
 8001a6c:	41a4      	sbcs	r4, r4
 8001a6e:	4264      	negs	r4, r4
 8001a70:	44a0      	add	r8, r4
 8001a72:	001c      	movs	r4, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0x128>
 8001a7a:	e0df      	b.n	8001c3c <__aeabi_dsub+0x2e8>
 8001a7c:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <__aeabi_dsub+0x334>)
 8001a7e:	3601      	adds	r6, #1
 8001a80:	429e      	cmp	r6, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x132>
 8001a84:	e0fb      	b.n	8001c7e <__aeabi_dsub+0x32a>
 8001a86:	4642      	mov	r2, r8
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <__aeabi_dsub+0x338>)
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	0571      	lsls	r1, r6, #21
 8001a92:	0752      	lsls	r2, r2, #29
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4322      	orrs	r2, r4
 8001a98:	0b1b      	lsrs	r3, r3, #12
 8001a9a:	0d49      	lsrs	r1, r1, #21
 8001a9c:	0509      	lsls	r1, r1, #20
 8001a9e:	07ed      	lsls	r5, r5, #31
 8001aa0:	4319      	orrs	r1, r3
 8001aa2:	4329      	orrs	r1, r5
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa8:	46bb      	mov	fp, r7
 8001aaa:	46b2      	mov	sl, r6
 8001aac:	46a9      	mov	r9, r5
 8001aae:	46a0      	mov	r8, r4
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	1ab4      	subs	r4, r6, r2
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	dd58      	ble.n	8001b6c <__aeabi_dsub+0x218>
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dsub+0x16c>
 8001abe:	e09e      	b.n	8001bfe <__aeabi_dsub+0x2aa>
 8001ac0:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <__aeabi_dsub+0x334>)
 8001ac2:	4296      	cmp	r6, r2
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x174>
 8001ac6:	e13b      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	0412      	lsls	r2, r2, #16
 8001acc:	4311      	orrs	r1, r2
 8001ace:	4662      	mov	r2, ip
 8001ad0:	2a38      	cmp	r2, #56	; 0x38
 8001ad2:	dd00      	ble.n	8001ad6 <__aeabi_dsub+0x182>
 8001ad4:	e0c1      	b.n	8001c5a <__aeabi_dsub+0x306>
 8001ad6:	2a1f      	cmp	r2, #31
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x188>
 8001ada:	e1bb      	b.n	8001e54 <__aeabi_dsub+0x500>
 8001adc:	000c      	movs	r4, r1
 8001ade:	3a20      	subs	r2, #32
 8001ae0:	40d4      	lsrs	r4, r2
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	4664      	mov	r4, ip
 8001ae6:	2c20      	cmp	r4, #32
 8001ae8:	d004      	beq.n	8001af4 <__aeabi_dsub+0x1a0>
 8001aea:	2740      	movs	r7, #64	; 0x40
 8001aec:	1b3f      	subs	r7, r7, r4
 8001aee:	40b9      	lsls	r1, r7
 8001af0:	4308      	orrs	r0, r1
 8001af2:	4680      	mov	r8, r0
 8001af4:	4644      	mov	r4, r8
 8001af6:	1e61      	subs	r1, r4, #1
 8001af8:	418c      	sbcs	r4, r1
 8001afa:	4314      	orrs	r4, r2
 8001afc:	e0b1      	b.n	8001c62 <__aeabi_dsub+0x30e>
 8001afe:	000c      	movs	r4, r1
 8001b00:	4304      	orrs	r4, r0
 8001b02:	d02a      	beq.n	8001b5a <__aeabi_dsub+0x206>
 8001b04:	46bb      	mov	fp, r7
 8001b06:	42bd      	cmp	r5, r7
 8001b08:	d02d      	beq.n	8001b66 <__aeabi_dsub+0x212>
 8001b0a:	4c61      	ldr	r4, [pc, #388]	; (8001c90 <__aeabi_dsub+0x33c>)
 8001b0c:	46a4      	mov	ip, r4
 8001b0e:	44b4      	add	ip, r6
 8001b10:	4664      	mov	r4, ip
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d05c      	beq.n	8001bd0 <__aeabi_dsub+0x27c>
 8001b16:	1b94      	subs	r4, r2, r6
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dsub+0x1cc>
 8001b1e:	e115      	b.n	8001d4c <__aeabi_dsub+0x3f8>
 8001b20:	464d      	mov	r5, r9
 8001b22:	431d      	orrs	r5, r3
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x1d4>
 8001b26:	e1c3      	b.n	8001eb0 <__aeabi_dsub+0x55c>
 8001b28:	1e65      	subs	r5, r4, #1
 8001b2a:	2c01      	cmp	r4, #1
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1dc>
 8001b2e:	e20c      	b.n	8001f4a <__aeabi_dsub+0x5f6>
 8001b30:	4e55      	ldr	r6, [pc, #340]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b32:	42b4      	cmp	r4, r6
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x1e4>
 8001b36:	e1f8      	b.n	8001f2a <__aeabi_dsub+0x5d6>
 8001b38:	46ac      	mov	ip, r5
 8001b3a:	e10e      	b.n	8001d5a <__aeabi_dsub+0x406>
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x1f0>
 8001b42:	e136      	b.n	8001db2 <__aeabi_dsub+0x45e>
 8001b44:	0022      	movs	r2, r4
 8001b46:	3a01      	subs	r2, #1
 8001b48:	2c01      	cmp	r4, #1
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x1fa>
 8001b4c:	e1c6      	b.n	8001edc <__aeabi_dsub+0x588>
 8001b4e:	4c4e      	ldr	r4, [pc, #312]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b50:	45a4      	cmp	ip, r4
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x202>
 8001b54:	e0f4      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001b56:	4694      	mov	ip, r2
 8001b58:	e731      	b.n	80019be <__aeabi_dsub+0x6a>
 8001b5a:	2401      	movs	r4, #1
 8001b5c:	4067      	eors	r7, r4
 8001b5e:	46bb      	mov	fp, r7
 8001b60:	42bd      	cmp	r5, r7
 8001b62:	d000      	beq.n	8001b66 <__aeabi_dsub+0x212>
 8001b64:	e71c      	b.n	80019a0 <__aeabi_dsub+0x4c>
 8001b66:	4c4a      	ldr	r4, [pc, #296]	; (8001c90 <__aeabi_dsub+0x33c>)
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	44b4      	add	ip, r6
 8001b6c:	4664      	mov	r4, ip
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x220>
 8001b72:	e0cf      	b.n	8001d14 <__aeabi_dsub+0x3c0>
 8001b74:	1b94      	subs	r4, r2, r6
 8001b76:	46a4      	mov	ip, r4
 8001b78:	2e00      	cmp	r6, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x22a>
 8001b7c:	e15c      	b.n	8001e38 <__aeabi_dsub+0x4e4>
 8001b7e:	4e42      	ldr	r6, [pc, #264]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b80:	42b2      	cmp	r2, r6
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x232>
 8001b84:	e1ec      	b.n	8001f60 <__aeabi_dsub+0x60c>
 8001b86:	2680      	movs	r6, #128	; 0x80
 8001b88:	0436      	lsls	r6, r6, #16
 8001b8a:	4333      	orrs	r3, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c38      	cmp	r4, #56	; 0x38
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_dsub+0x240>
 8001b92:	e1b3      	b.n	8001efc <__aeabi_dsub+0x5a8>
 8001b94:	2c1f      	cmp	r4, #31
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dsub+0x246>
 8001b98:	e238      	b.n	800200c <__aeabi_dsub+0x6b8>
 8001b9a:	2620      	movs	r6, #32
 8001b9c:	1b36      	subs	r6, r6, r4
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	40b4      	lsls	r4, r6
 8001ba2:	464f      	mov	r7, r9
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	4664      	mov	r4, ip
 8001ba8:	40e7      	lsrs	r7, r4
 8001baa:	4644      	mov	r4, r8
 8001bac:	433c      	orrs	r4, r7
 8001bae:	464f      	mov	r7, r9
 8001bb0:	40b7      	lsls	r7, r6
 8001bb2:	003e      	movs	r6, r7
 8001bb4:	1e77      	subs	r7, r6, #1
 8001bb6:	41be      	sbcs	r6, r7
 8001bb8:	4334      	orrs	r4, r6
 8001bba:	4666      	mov	r6, ip
 8001bbc:	40f3      	lsrs	r3, r6
 8001bbe:	18c9      	adds	r1, r1, r3
 8001bc0:	1824      	adds	r4, r4, r0
 8001bc2:	4284      	cmp	r4, r0
 8001bc4:	419b      	sbcs	r3, r3
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	4698      	mov	r8, r3
 8001bca:	0016      	movs	r6, r2
 8001bcc:	4488      	add	r8, r1
 8001bce:	e04e      	b.n	8001c6e <__aeabi_dsub+0x31a>
 8001bd0:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <__aeabi_dsub+0x340>)
 8001bd2:	1c74      	adds	r4, r6, #1
 8001bd4:	4214      	tst	r4, r2
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x286>
 8001bd8:	e0d6      	b.n	8001d88 <__aeabi_dsub+0x434>
 8001bda:	464a      	mov	r2, r9
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	2e00      	cmp	r6, #0
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x290>
 8001be2:	e15b      	b.n	8001e9c <__aeabi_dsub+0x548>
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x296>
 8001be8:	e1a5      	b.n	8001f36 <__aeabi_dsub+0x5e2>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dsub+0x29e>
 8001bf0:	e1bb      	b.n	8001f6a <__aeabi_dsub+0x616>
 8001bf2:	464a      	mov	r2, r9
 8001bf4:	0759      	lsls	r1, r3, #29
 8001bf6:	08d2      	lsrs	r2, r2, #3
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	e027      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001bfe:	000a      	movs	r2, r1
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x2b2>
 8001c04:	e174      	b.n	8001ef0 <__aeabi_dsub+0x59c>
 8001c06:	0022      	movs	r2, r4
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	d005      	beq.n	8001c1a <__aeabi_dsub+0x2c6>
 8001c0e:	4c1e      	ldr	r4, [pc, #120]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c10:	45a4      	cmp	ip, r4
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x2c2>
 8001c14:	e094      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001c16:	4694      	mov	ip, r2
 8001c18:	e759      	b.n	8001ace <__aeabi_dsub+0x17a>
 8001c1a:	4448      	add	r0, r9
 8001c1c:	4548      	cmp	r0, r9
 8001c1e:	4192      	sbcs	r2, r2
 8001c20:	185b      	adds	r3, r3, r1
 8001c22:	4698      	mov	r8, r3
 8001c24:	0004      	movs	r4, r0
 8001c26:	4252      	negs	r2, r2
 8001c28:	4490      	add	r8, r2
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	2602      	movs	r6, #2
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	d500      	bpl.n	8001c34 <__aeabi_dsub+0x2e0>
 8001c32:	e0c4      	b.n	8001dbe <__aeabi_dsub+0x46a>
 8001c34:	3e01      	subs	r6, #1
 8001c36:	0763      	lsls	r3, r4, #29
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dsub+0x2e8>
 8001c3a:	e711      	b.n	8001a60 <__aeabi_dsub+0x10c>
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	46b4      	mov	ip, r6
 8001c40:	0759      	lsls	r1, r3, #29
 8001c42:	08e2      	lsrs	r2, r4, #3
 8001c44:	430a      	orrs	r2, r1
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	490f      	ldr	r1, [pc, #60]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c4a:	458c      	cmp	ip, r1
 8001c4c:	d040      	beq.n	8001cd0 <__aeabi_dsub+0x37c>
 8001c4e:	4661      	mov	r1, ip
 8001c50:	031b      	lsls	r3, r3, #12
 8001c52:	0549      	lsls	r1, r1, #21
 8001c54:	0b1b      	lsrs	r3, r3, #12
 8001c56:	0d49      	lsrs	r1, r1, #21
 8001c58:	e720      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001c5a:	4301      	orrs	r1, r0
 8001c5c:	000c      	movs	r4, r1
 8001c5e:	1e61      	subs	r1, r4, #1
 8001c60:	418c      	sbcs	r4, r1
 8001c62:	444c      	add	r4, r9
 8001c64:	454c      	cmp	r4, r9
 8001c66:	4192      	sbcs	r2, r2
 8001c68:	4252      	negs	r2, r2
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4498      	add	r8, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	d5e0      	bpl.n	8001c36 <__aeabi_dsub+0x2e2>
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c76:	3601      	adds	r6, #1
 8001c78:	429e      	cmp	r6, r3
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x32a>
 8001c7c:	e09f      	b.n	8001dbe <__aeabi_dsub+0x46a>
 8001c7e:	0031      	movs	r1, r6
 8001c80:	2300      	movs	r3, #0
 8001c82:	2200      	movs	r2, #0
 8001c84:	e70a      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	000007ff 	.word	0x000007ff
 8001c8c:	ff7fffff 	.word	0xff7fffff
 8001c90:	fffff801 	.word	0xfffff801
 8001c94:	000007fe 	.word	0x000007fe
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x34a>
 8001c9c:	e160      	b.n	8001f60 <__aeabi_dsub+0x60c>
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d04d      	beq.n	8001d40 <__aeabi_dsub+0x3ec>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	075c      	lsls	r4, r3, #29
 8001ca8:	08d2      	lsrs	r2, r2, #3
 8001caa:	4322      	orrs	r2, r4
 8001cac:	2480      	movs	r4, #128	; 0x80
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	4223      	tst	r3, r4
 8001cb4:	d007      	beq.n	8001cc6 <__aeabi_dsub+0x372>
 8001cb6:	08ce      	lsrs	r6, r1, #3
 8001cb8:	4226      	tst	r6, r4
 8001cba:	d104      	bne.n	8001cc6 <__aeabi_dsub+0x372>
 8001cbc:	465d      	mov	r5, fp
 8001cbe:	0033      	movs	r3, r6
 8001cc0:	08c2      	lsrs	r2, r0, #3
 8001cc2:	0749      	lsls	r1, r1, #29
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	0f51      	lsrs	r1, r2, #29
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	08d2      	lsrs	r2, r2, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	0011      	movs	r1, r2
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x384>
 8001cd6:	e1c8      	b.n	800206a <__aeabi_dsub+0x716>
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0309      	lsls	r1, r1, #12
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	031b      	lsls	r3, r3, #12
 8001ce0:	49d5      	ldr	r1, [pc, #852]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001ce2:	0b1b      	lsrs	r3, r3, #12
 8001ce4:	e6da      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001ce6:	49d5      	ldr	r1, [pc, #852]	; (800203c <__aeabi_dsub+0x6e8>)
 8001ce8:	1ab6      	subs	r6, r6, r2
 8001cea:	400b      	ands	r3, r1
 8001cec:	4698      	mov	r8, r3
 8001cee:	e6b5      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f000 fb3b 	bl	800236c <__clzsi2>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	3218      	adds	r2, #24
 8001cfa:	2a1f      	cmp	r2, #31
 8001cfc:	dc00      	bgt.n	8001d00 <__aeabi_dsub+0x3ac>
 8001cfe:	e68f      	b.n	8001a20 <__aeabi_dsub+0xcc>
 8001d00:	0023      	movs	r3, r4
 8001d02:	3808      	subs	r0, #8
 8001d04:	4083      	lsls	r3, r0
 8001d06:	2400      	movs	r4, #0
 8001d08:	e692      	b.n	8001a30 <__aeabi_dsub+0xdc>
 8001d0a:	4308      	orrs	r0, r1
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	1e50      	subs	r0, r2, #1
 8001d10:	4182      	sbcs	r2, r0
 8001d12:	e66d      	b.n	80019f0 <__aeabi_dsub+0x9c>
 8001d14:	4cca      	ldr	r4, [pc, #808]	; (8002040 <__aeabi_dsub+0x6ec>)
 8001d16:	1c72      	adds	r2, r6, #1
 8001d18:	4222      	tst	r2, r4
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x3ca>
 8001d1c:	e0ad      	b.n	8001e7a <__aeabi_dsub+0x526>
 8001d1e:	464a      	mov	r2, r9
 8001d20:	431a      	orrs	r2, r3
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d1b8      	bne.n	8001c98 <__aeabi_dsub+0x344>
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x3d8>
 8001d2a:	e158      	b.n	8001fde <__aeabi_dsub+0x68a>
 8001d2c:	000a      	movs	r2, r1
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	d000      	beq.n	8001d34 <__aeabi_dsub+0x3e0>
 8001d32:	e159      	b.n	8001fe8 <__aeabi_dsub+0x694>
 8001d34:	464a      	mov	r2, r9
 8001d36:	0759      	lsls	r1, r3, #29
 8001d38:	08d2      	lsrs	r2, r2, #3
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	e786      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001d40:	464a      	mov	r2, r9
 8001d42:	0759      	lsls	r1, r3, #29
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	430a      	orrs	r2, r1
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	e7c1      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001d4c:	4dba      	ldr	r5, [pc, #744]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x400>
 8001d52:	e11e      	b.n	8001f92 <__aeabi_dsub+0x63e>
 8001d54:	2580      	movs	r5, #128	; 0x80
 8001d56:	042d      	lsls	r5, r5, #16
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	2c38      	cmp	r4, #56	; 0x38
 8001d5e:	dc5d      	bgt.n	8001e1c <__aeabi_dsub+0x4c8>
 8001d60:	2c1f      	cmp	r4, #31
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x412>
 8001d64:	e0d0      	b.n	8001f08 <__aeabi_dsub+0x5b4>
 8001d66:	2520      	movs	r5, #32
 8001d68:	4667      	mov	r7, ip
 8001d6a:	1b2d      	subs	r5, r5, r4
 8001d6c:	464e      	mov	r6, r9
 8001d6e:	001c      	movs	r4, r3
 8001d70:	40fe      	lsrs	r6, r7
 8001d72:	40ac      	lsls	r4, r5
 8001d74:	4334      	orrs	r4, r6
 8001d76:	464e      	mov	r6, r9
 8001d78:	40ae      	lsls	r6, r5
 8001d7a:	0035      	movs	r5, r6
 8001d7c:	40fb      	lsrs	r3, r7
 8001d7e:	1e6e      	subs	r6, r5, #1
 8001d80:	41b5      	sbcs	r5, r6
 8001d82:	1ac9      	subs	r1, r1, r3
 8001d84:	432c      	orrs	r4, r5
 8001d86:	e04e      	b.n	8001e26 <__aeabi_dsub+0x4d2>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	1a14      	subs	r4, r2, r0
 8001d8c:	45a1      	cmp	r9, r4
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4690      	mov	r8, r2
 8001d94:	1a5f      	subs	r7, r3, r1
 8001d96:	003a      	movs	r2, r7
 8001d98:	4647      	mov	r7, r8
 8001d9a:	1bd2      	subs	r2, r2, r7
 8001d9c:	4690      	mov	r8, r2
 8001d9e:	0212      	lsls	r2, r2, #8
 8001da0:	d500      	bpl.n	8001da4 <__aeabi_dsub+0x450>
 8001da2:	e08b      	b.n	8001ebc <__aeabi_dsub+0x568>
 8001da4:	4642      	mov	r2, r8
 8001da6:	4322      	orrs	r2, r4
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x458>
 8001daa:	e630      	b.n	8001a0e <__aeabi_dsub+0xba>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2500      	movs	r5, #0
 8001db0:	e74d      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001db2:	464a      	mov	r2, r9
 8001db4:	0759      	lsls	r1, r3, #29
 8001db6:	08d2      	lsrs	r2, r2, #3
 8001db8:	430a      	orrs	r2, r1
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	e744      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	4b9e      	ldr	r3, [pc, #632]	; (800203c <__aeabi_dsub+0x6e8>)
 8001dc2:	0861      	lsrs	r1, r4, #1
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4014      	ands	r4, r2
 8001dcc:	430c      	orrs	r4, r1
 8001dce:	07da      	lsls	r2, r3, #31
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	4698      	mov	r8, r3
 8001dd4:	4314      	orrs	r4, r2
 8001dd6:	e641      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001dd8:	001a      	movs	r2, r3
 8001dda:	3e1f      	subs	r6, #31
 8001ddc:	40f2      	lsrs	r2, r6
 8001dde:	0016      	movs	r6, r2
 8001de0:	2920      	cmp	r1, #32
 8001de2:	d003      	beq.n	8001dec <__aeabi_dsub+0x498>
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	1a51      	subs	r1, r2, r1
 8001de8:	408b      	lsls	r3, r1
 8001dea:	431c      	orrs	r4, r3
 8001dec:	1e62      	subs	r2, r4, #1
 8001dee:	4194      	sbcs	r4, r2
 8001df0:	2300      	movs	r3, #0
 8001df2:	4334      	orrs	r4, r6
 8001df4:	4698      	mov	r8, r3
 8001df6:	2600      	movs	r6, #0
 8001df8:	e71d      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	3a20      	subs	r2, #32
 8001dfe:	40d4      	lsrs	r4, r2
 8001e00:	0022      	movs	r2, r4
 8001e02:	4664      	mov	r4, ip
 8001e04:	2c20      	cmp	r4, #32
 8001e06:	d004      	beq.n	8001e12 <__aeabi_dsub+0x4be>
 8001e08:	2740      	movs	r7, #64	; 0x40
 8001e0a:	1b3f      	subs	r7, r7, r4
 8001e0c:	40b9      	lsls	r1, r7
 8001e0e:	4308      	orrs	r0, r1
 8001e10:	4680      	mov	r8, r0
 8001e12:	4644      	mov	r4, r8
 8001e14:	1e61      	subs	r1, r4, #1
 8001e16:	418c      	sbcs	r4, r1
 8001e18:	4322      	orrs	r2, r4
 8001e1a:	e5e9      	b.n	80019f0 <__aeabi_dsub+0x9c>
 8001e1c:	464c      	mov	r4, r9
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	001c      	movs	r4, r3
 8001e22:	1e63      	subs	r3, r4, #1
 8001e24:	419c      	sbcs	r4, r3
 8001e26:	1b04      	subs	r4, r0, r4
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	1acb      	subs	r3, r1, r3
 8001e30:	4698      	mov	r8, r3
 8001e32:	465d      	mov	r5, fp
 8001e34:	0016      	movs	r6, r2
 8001e36:	e5e2      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001e38:	464e      	mov	r6, r9
 8001e3a:	431e      	orrs	r6, r3
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x4ec>
 8001e3e:	e0ae      	b.n	8001f9e <__aeabi_dsub+0x64a>
 8001e40:	1e66      	subs	r6, r4, #1
 8001e42:	2c01      	cmp	r4, #1
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x4f4>
 8001e46:	e0fd      	b.n	8002044 <__aeabi_dsub+0x6f0>
 8001e48:	4f7b      	ldr	r7, [pc, #492]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001e4a:	42bc      	cmp	r4, r7
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x4fc>
 8001e4e:	e107      	b.n	8002060 <__aeabi_dsub+0x70c>
 8001e50:	46b4      	mov	ip, r6
 8001e52:	e69b      	b.n	8001b8c <__aeabi_dsub+0x238>
 8001e54:	4664      	mov	r4, ip
 8001e56:	2220      	movs	r2, #32
 8001e58:	1b12      	subs	r2, r2, r4
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	4094      	lsls	r4, r2
 8001e5e:	0007      	movs	r7, r0
 8001e60:	4090      	lsls	r0, r2
 8001e62:	46a0      	mov	r8, r4
 8001e64:	4664      	mov	r4, ip
 8001e66:	1e42      	subs	r2, r0, #1
 8001e68:	4190      	sbcs	r0, r2
 8001e6a:	4662      	mov	r2, ip
 8001e6c:	40e7      	lsrs	r7, r4
 8001e6e:	4644      	mov	r4, r8
 8001e70:	40d1      	lsrs	r1, r2
 8001e72:	433c      	orrs	r4, r7
 8001e74:	4304      	orrs	r4, r0
 8001e76:	185b      	adds	r3, r3, r1
 8001e78:	e6f3      	b.n	8001c62 <__aeabi_dsub+0x30e>
 8001e7a:	4c6f      	ldr	r4, [pc, #444]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001e7c:	42a2      	cmp	r2, r4
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x52e>
 8001e80:	e0d5      	b.n	800202e <__aeabi_dsub+0x6da>
 8001e82:	4448      	add	r0, r9
 8001e84:	185b      	adds	r3, r3, r1
 8001e86:	4548      	cmp	r0, r9
 8001e88:	4189      	sbcs	r1, r1
 8001e8a:	4249      	negs	r1, r1
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	07dc      	lsls	r4, r3, #31
 8001e90:	0840      	lsrs	r0, r0, #1
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	4698      	mov	r8, r3
 8001e96:	0016      	movs	r6, r2
 8001e98:	4304      	orrs	r4, r0
 8001e9a:	e6cc      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x54e>
 8001ea0:	e082      	b.n	8001fa8 <__aeabi_dsub+0x654>
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	d140      	bne.n	8001f2a <__aeabi_dsub+0x5d6>
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	2500      	movs	r5, #0
 8001eac:	031b      	lsls	r3, r3, #12
 8001eae:	e713      	b.n	8001cd8 <__aeabi_dsub+0x384>
 8001eb0:	074b      	lsls	r3, r1, #29
 8001eb2:	08c2      	lsrs	r2, r0, #3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	465d      	mov	r5, fp
 8001eb8:	08cb      	lsrs	r3, r1, #3
 8001eba:	e6c5      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	1a84      	subs	r4, r0, r2
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	1acb      	subs	r3, r1, r3
 8001ec6:	4252      	negs	r2, r2
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	4698      	mov	r8, r3
 8001ecc:	465d      	mov	r5, fp
 8001ece:	e59e      	b.n	8001a0e <__aeabi_dsub+0xba>
 8001ed0:	464a      	mov	r2, r9
 8001ed2:	0759      	lsls	r1, r3, #29
 8001ed4:	08d2      	lsrs	r2, r2, #3
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	e6f9      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001edc:	464a      	mov	r2, r9
 8001ede:	1a14      	subs	r4, r2, r0
 8001ee0:	45a1      	cmp	r9, r4
 8001ee2:	4192      	sbcs	r2, r2
 8001ee4:	1a5b      	subs	r3, r3, r1
 8001ee6:	4252      	negs	r2, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	4698      	mov	r8, r3
 8001eec:	2601      	movs	r6, #1
 8001eee:	e586      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0759      	lsls	r1, r3, #29
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	e6a5      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001efc:	464c      	mov	r4, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	001c      	movs	r4, r3
 8001f02:	1e63      	subs	r3, r4, #1
 8001f04:	419c      	sbcs	r4, r3
 8001f06:	e65b      	b.n	8001bc0 <__aeabi_dsub+0x26c>
 8001f08:	4665      	mov	r5, ip
 8001f0a:	001e      	movs	r6, r3
 8001f0c:	3d20      	subs	r5, #32
 8001f0e:	40ee      	lsrs	r6, r5
 8001f10:	2c20      	cmp	r4, #32
 8001f12:	d005      	beq.n	8001f20 <__aeabi_dsub+0x5cc>
 8001f14:	2540      	movs	r5, #64	; 0x40
 8001f16:	1b2d      	subs	r5, r5, r4
 8001f18:	40ab      	lsls	r3, r5
 8001f1a:	464c      	mov	r4, r9
 8001f1c:	431c      	orrs	r4, r3
 8001f1e:	46a2      	mov	sl, r4
 8001f20:	4654      	mov	r4, sl
 8001f22:	1e63      	subs	r3, r4, #1
 8001f24:	419c      	sbcs	r4, r3
 8001f26:	4334      	orrs	r4, r6
 8001f28:	e77d      	b.n	8001e26 <__aeabi_dsub+0x4d2>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e6cc      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f36:	000a      	movs	r2, r1
 8001f38:	4302      	orrs	r2, r0
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x5ea>
 8001f3c:	e736      	b.n	8001dac <__aeabi_dsub+0x458>
 8001f3e:	074b      	lsls	r3, r1, #29
 8001f40:	08c2      	lsrs	r2, r0, #3
 8001f42:	431a      	orrs	r2, r3
 8001f44:	465d      	mov	r5, fp
 8001f46:	08cb      	lsrs	r3, r1, #3
 8001f48:	e681      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001f4a:	464a      	mov	r2, r9
 8001f4c:	1a84      	subs	r4, r0, r2
 8001f4e:	42a0      	cmp	r0, r4
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	4252      	negs	r2, r2
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	4698      	mov	r8, r3
 8001f5a:	465d      	mov	r5, fp
 8001f5c:	2601      	movs	r6, #1
 8001f5e:	e54e      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001f60:	074b      	lsls	r3, r1, #29
 8001f62:	08c2      	lsrs	r2, r0, #3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	08cb      	lsrs	r3, r1, #3
 8001f68:	e6b2      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a14      	subs	r4, r2, r0
 8001f6e:	45a1      	cmp	r9, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1a5f      	subs	r7, r3, r1
 8001f74:	4252      	negs	r2, r2
 8001f76:	1aba      	subs	r2, r7, r2
 8001f78:	4690      	mov	r8, r2
 8001f7a:	0212      	lsls	r2, r2, #8
 8001f7c:	d56b      	bpl.n	8002056 <__aeabi_dsub+0x702>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	1a84      	subs	r4, r0, r2
 8001f82:	42a0      	cmp	r0, r4
 8001f84:	4192      	sbcs	r2, r2
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	4252      	negs	r2, r2
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	465d      	mov	r5, fp
 8001f90:	e564      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001f92:	074b      	lsls	r3, r1, #29
 8001f94:	08c2      	lsrs	r2, r0, #3
 8001f96:	431a      	orrs	r2, r3
 8001f98:	465d      	mov	r5, fp
 8001f9a:	08cb      	lsrs	r3, r1, #3
 8001f9c:	e698      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f9e:	074b      	lsls	r3, r1, #29
 8001fa0:	08c2      	lsrs	r2, r0, #3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	08cb      	lsrs	r3, r1, #3
 8001fa6:	e64f      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	4302      	orrs	r2, r0
 8001fac:	d090      	beq.n	8001ed0 <__aeabi_dsub+0x57c>
 8001fae:	464a      	mov	r2, r9
 8001fb0:	075c      	lsls	r4, r3, #29
 8001fb2:	08d2      	lsrs	r2, r2, #3
 8001fb4:	4314      	orrs	r4, r2
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	0312      	lsls	r2, r2, #12
 8001fbc:	4213      	tst	r3, r2
 8001fbe:	d008      	beq.n	8001fd2 <__aeabi_dsub+0x67e>
 8001fc0:	08ce      	lsrs	r6, r1, #3
 8001fc2:	4216      	tst	r6, r2
 8001fc4:	d105      	bne.n	8001fd2 <__aeabi_dsub+0x67e>
 8001fc6:	08c0      	lsrs	r0, r0, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	0004      	movs	r4, r0
 8001fce:	465d      	mov	r5, fp
 8001fd0:	0033      	movs	r3, r6
 8001fd2:	0f61      	lsrs	r1, r4, #29
 8001fd4:	00e2      	lsls	r2, r4, #3
 8001fd6:	0749      	lsls	r1, r1, #29
 8001fd8:	08d2      	lsrs	r2, r2, #3
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	e678      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001fde:	074b      	lsls	r3, r1, #29
 8001fe0:	08c2      	lsrs	r2, r0, #3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	08cb      	lsrs	r3, r1, #3
 8001fe6:	e632      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001fe8:	4448      	add	r0, r9
 8001fea:	185b      	adds	r3, r3, r1
 8001fec:	4548      	cmp	r0, r9
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	4490      	add	r8, r2
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	d400      	bmi.n	8002000 <__aeabi_dsub+0x6ac>
 8001ffe:	e61a      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8002000:	4642      	mov	r2, r8
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <__aeabi_dsub+0x6e8>)
 8002004:	2601      	movs	r6, #1
 8002006:	401a      	ands	r2, r3
 8002008:	4690      	mov	r8, r2
 800200a:	e614      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 800200c:	4666      	mov	r6, ip
 800200e:	001f      	movs	r7, r3
 8002010:	3e20      	subs	r6, #32
 8002012:	40f7      	lsrs	r7, r6
 8002014:	2c20      	cmp	r4, #32
 8002016:	d005      	beq.n	8002024 <__aeabi_dsub+0x6d0>
 8002018:	2640      	movs	r6, #64	; 0x40
 800201a:	1b36      	subs	r6, r6, r4
 800201c:	40b3      	lsls	r3, r6
 800201e:	464c      	mov	r4, r9
 8002020:	431c      	orrs	r4, r3
 8002022:	46a2      	mov	sl, r4
 8002024:	4654      	mov	r4, sl
 8002026:	1e63      	subs	r3, r4, #1
 8002028:	419c      	sbcs	r4, r3
 800202a:	433c      	orrs	r4, r7
 800202c:	e5c8      	b.n	8001bc0 <__aeabi_dsub+0x26c>
 800202e:	0011      	movs	r1, r2
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	e532      	b.n	8001a9c <__aeabi_dsub+0x148>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff
 800203c:	ff7fffff 	.word	0xff7fffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	464a      	mov	r2, r9
 8002046:	1814      	adds	r4, r2, r0
 8002048:	4284      	cmp	r4, r0
 800204a:	4192      	sbcs	r2, r2
 800204c:	185b      	adds	r3, r3, r1
 800204e:	4698      	mov	r8, r3
 8002050:	4252      	negs	r2, r2
 8002052:	4490      	add	r8, r2
 8002054:	e5e9      	b.n	8001c2a <__aeabi_dsub+0x2d6>
 8002056:	4642      	mov	r2, r8
 8002058:	4322      	orrs	r2, r4
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x70a>
 800205c:	e6a6      	b.n	8001dac <__aeabi_dsub+0x458>
 800205e:	e5ea      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8002060:	074b      	lsls	r3, r1, #29
 8002062:	08c2      	lsrs	r2, r0, #3
 8002064:	431a      	orrs	r2, r3
 8002066:	08cb      	lsrs	r3, r1, #3
 8002068:	e632      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 800206a:	2200      	movs	r2, #0
 800206c:	4901      	ldr	r1, [pc, #4]	; (8002074 <__aeabi_dsub+0x720>)
 800206e:	0013      	movs	r3, r2
 8002070:	e514      	b.n	8001a9c <__aeabi_dsub+0x148>
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff

08002078 <__aeabi_dcmpun>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	0005      	movs	r5, r0
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <__aeabi_dcmpun+0x38>)
 800207e:	030c      	lsls	r4, r1, #12
 8002080:	0016      	movs	r6, r2
 8002082:	0049      	lsls	r1, r1, #1
 8002084:	031a      	lsls	r2, r3, #12
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	0b24      	lsrs	r4, r4, #12
 800208a:	0d49      	lsrs	r1, r1, #21
 800208c:	0b12      	lsrs	r2, r2, #12
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	4281      	cmp	r1, r0
 8002092:	d008      	beq.n	80020a6 <__aeabi_dcmpun+0x2e>
 8002094:	4906      	ldr	r1, [pc, #24]	; (80020b0 <__aeabi_dcmpun+0x38>)
 8002096:	2000      	movs	r0, #0
 8002098:	428b      	cmp	r3, r1
 800209a:	d103      	bne.n	80020a4 <__aeabi_dcmpun+0x2c>
 800209c:	4332      	orrs	r2, r6
 800209e:	0010      	movs	r0, r2
 80020a0:	1e42      	subs	r2, r0, #1
 80020a2:	4190      	sbcs	r0, r2
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	2001      	movs	r0, #1
 80020a8:	432c      	orrs	r4, r5
 80020aa:	d1fb      	bne.n	80020a4 <__aeabi_dcmpun+0x2c>
 80020ac:	e7f2      	b.n	8002094 <__aeabi_dcmpun+0x1c>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	000007ff 	.word	0x000007ff

080020b4 <__aeabi_d2iz>:
 80020b4:	000a      	movs	r2, r1
 80020b6:	b530      	push	{r4, r5, lr}
 80020b8:	4c13      	ldr	r4, [pc, #76]	; (8002108 <__aeabi_d2iz+0x54>)
 80020ba:	0053      	lsls	r3, r2, #1
 80020bc:	0309      	lsls	r1, r1, #12
 80020be:	0005      	movs	r5, r0
 80020c0:	0b09      	lsrs	r1, r1, #12
 80020c2:	2000      	movs	r0, #0
 80020c4:	0d5b      	lsrs	r3, r3, #21
 80020c6:	0fd2      	lsrs	r2, r2, #31
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	dd04      	ble.n	80020d6 <__aeabi_d2iz+0x22>
 80020cc:	480f      	ldr	r0, [pc, #60]	; (800210c <__aeabi_d2iz+0x58>)
 80020ce:	4283      	cmp	r3, r0
 80020d0:	dd02      	ble.n	80020d8 <__aeabi_d2iz+0x24>
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <__aeabi_d2iz+0x5c>)
 80020d4:	18d0      	adds	r0, r2, r3
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	2080      	movs	r0, #128	; 0x80
 80020da:	0340      	lsls	r0, r0, #13
 80020dc:	4301      	orrs	r1, r0
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <__aeabi_d2iz+0x60>)
 80020e0:	1ac0      	subs	r0, r0, r3
 80020e2:	281f      	cmp	r0, #31
 80020e4:	dd08      	ble.n	80020f8 <__aeabi_d2iz+0x44>
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <__aeabi_d2iz+0x64>)
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	40d9      	lsrs	r1, r3
 80020ec:	000b      	movs	r3, r1
 80020ee:	4258      	negs	r0, r3
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d1f0      	bne.n	80020d6 <__aeabi_d2iz+0x22>
 80020f4:	0018      	movs	r0, r3
 80020f6:	e7ee      	b.n	80020d6 <__aeabi_d2iz+0x22>
 80020f8:	4c08      	ldr	r4, [pc, #32]	; (800211c <__aeabi_d2iz+0x68>)
 80020fa:	40c5      	lsrs	r5, r0
 80020fc:	46a4      	mov	ip, r4
 80020fe:	4463      	add	r3, ip
 8002100:	4099      	lsls	r1, r3
 8002102:	000b      	movs	r3, r1
 8002104:	432b      	orrs	r3, r5
 8002106:	e7f2      	b.n	80020ee <__aeabi_d2iz+0x3a>
 8002108:	000003fe 	.word	0x000003fe
 800210c:	0000041d 	.word	0x0000041d
 8002110:	7fffffff 	.word	0x7fffffff
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	fffffbed 	.word	0xfffffbed

08002120 <__aeabi_i2d>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2800      	cmp	r0, #0
 8002124:	d016      	beq.n	8002154 <__aeabi_i2d+0x34>
 8002126:	17c3      	asrs	r3, r0, #31
 8002128:	18c5      	adds	r5, r0, r3
 800212a:	405d      	eors	r5, r3
 800212c:	0fc4      	lsrs	r4, r0, #31
 800212e:	0028      	movs	r0, r5
 8002130:	f000 f91c 	bl	800236c <__clzsi2>
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <__aeabi_i2d+0x5c>)
 8002136:	1a12      	subs	r2, r2, r0
 8002138:	280a      	cmp	r0, #10
 800213a:	dc16      	bgt.n	800216a <__aeabi_i2d+0x4a>
 800213c:	0003      	movs	r3, r0
 800213e:	002e      	movs	r6, r5
 8002140:	3315      	adds	r3, #21
 8002142:	409e      	lsls	r6, r3
 8002144:	230b      	movs	r3, #11
 8002146:	1a18      	subs	r0, r3, r0
 8002148:	40c5      	lsrs	r5, r0
 800214a:	0553      	lsls	r3, r2, #21
 800214c:	032d      	lsls	r5, r5, #12
 800214e:	0b2d      	lsrs	r5, r5, #12
 8002150:	0d5b      	lsrs	r3, r3, #21
 8002152:	e003      	b.n	800215c <__aeabi_i2d+0x3c>
 8002154:	2400      	movs	r4, #0
 8002156:	2300      	movs	r3, #0
 8002158:	2500      	movs	r5, #0
 800215a:	2600      	movs	r6, #0
 800215c:	051b      	lsls	r3, r3, #20
 800215e:	432b      	orrs	r3, r5
 8002160:	07e4      	lsls	r4, r4, #31
 8002162:	4323      	orrs	r3, r4
 8002164:	0030      	movs	r0, r6
 8002166:	0019      	movs	r1, r3
 8002168:	bd70      	pop	{r4, r5, r6, pc}
 800216a:	380b      	subs	r0, #11
 800216c:	4085      	lsls	r5, r0
 800216e:	0553      	lsls	r3, r2, #21
 8002170:	032d      	lsls	r5, r5, #12
 8002172:	2600      	movs	r6, #0
 8002174:	0b2d      	lsrs	r5, r5, #12
 8002176:	0d5b      	lsrs	r3, r3, #21
 8002178:	e7f0      	b.n	800215c <__aeabi_i2d+0x3c>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	0000041e 	.word	0x0000041e

08002180 <__aeabi_ui2d>:
 8002180:	b510      	push	{r4, lr}
 8002182:	1e04      	subs	r4, r0, #0
 8002184:	d010      	beq.n	80021a8 <__aeabi_ui2d+0x28>
 8002186:	f000 f8f1 	bl	800236c <__clzsi2>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <__aeabi_ui2d+0x48>)
 800218c:	1a1b      	subs	r3, r3, r0
 800218e:	280a      	cmp	r0, #10
 8002190:	dc11      	bgt.n	80021b6 <__aeabi_ui2d+0x36>
 8002192:	220b      	movs	r2, #11
 8002194:	0021      	movs	r1, r4
 8002196:	1a12      	subs	r2, r2, r0
 8002198:	40d1      	lsrs	r1, r2
 800219a:	3015      	adds	r0, #21
 800219c:	030a      	lsls	r2, r1, #12
 800219e:	055b      	lsls	r3, r3, #21
 80021a0:	4084      	lsls	r4, r0
 80021a2:	0b12      	lsrs	r2, r2, #12
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	e001      	b.n	80021ac <__aeabi_ui2d+0x2c>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2200      	movs	r2, #0
 80021ac:	051b      	lsls	r3, r3, #20
 80021ae:	4313      	orrs	r3, r2
 80021b0:	0020      	movs	r0, r4
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	0022      	movs	r2, r4
 80021b8:	380b      	subs	r0, #11
 80021ba:	4082      	lsls	r2, r0
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	0312      	lsls	r2, r2, #12
 80021c0:	2400      	movs	r4, #0
 80021c2:	0b12      	lsrs	r2, r2, #12
 80021c4:	0d5b      	lsrs	r3, r3, #21
 80021c6:	e7f1      	b.n	80021ac <__aeabi_ui2d+0x2c>
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_f2d>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	0043      	lsls	r3, r0, #1
 80021d0:	0246      	lsls	r6, r0, #9
 80021d2:	0fc4      	lsrs	r4, r0, #31
 80021d4:	20fe      	movs	r0, #254	; 0xfe
 80021d6:	0e1b      	lsrs	r3, r3, #24
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	0a75      	lsrs	r5, r6, #9
 80021dc:	4208      	tst	r0, r1
 80021de:	d00c      	beq.n	80021fa <__aeabi_f2d+0x2e>
 80021e0:	22e0      	movs	r2, #224	; 0xe0
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4694      	mov	ip, r2
 80021e6:	076d      	lsls	r5, r5, #29
 80021e8:	0b36      	lsrs	r6, r6, #12
 80021ea:	4463      	add	r3, ip
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	4333      	orrs	r3, r6
 80021f0:	07e4      	lsls	r4, r4, #31
 80021f2:	4323      	orrs	r3, r4
 80021f4:	0028      	movs	r0, r5
 80021f6:	0019      	movs	r1, r3
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <__aeabi_f2d+0x5c>
 80021fe:	2d00      	cmp	r5, #0
 8002200:	d01b      	beq.n	800223a <__aeabi_f2d+0x6e>
 8002202:	0028      	movs	r0, r5
 8002204:	f000 f8b2 	bl	800236c <__clzsi2>
 8002208:	280a      	cmp	r0, #10
 800220a:	dc1c      	bgt.n	8002246 <__aeabi_f2d+0x7a>
 800220c:	230b      	movs	r3, #11
 800220e:	002a      	movs	r2, r5
 8002210:	1a1b      	subs	r3, r3, r0
 8002212:	40da      	lsrs	r2, r3
 8002214:	0003      	movs	r3, r0
 8002216:	3315      	adds	r3, #21
 8002218:	409d      	lsls	r5, r3
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <__aeabi_f2d+0x88>)
 800221c:	0312      	lsls	r2, r2, #12
 800221e:	1a1b      	subs	r3, r3, r0
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	0b16      	lsrs	r6, r2, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e7e1      	b.n	80021ec <__aeabi_f2d+0x20>
 8002228:	2d00      	cmp	r5, #0
 800222a:	d009      	beq.n	8002240 <__aeabi_f2d+0x74>
 800222c:	0b32      	lsrs	r2, r6, #12
 800222e:	2680      	movs	r6, #128	; 0x80
 8002230:	0336      	lsls	r6, r6, #12
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <__aeabi_f2d+0x8c>)
 8002234:	076d      	lsls	r5, r5, #29
 8002236:	4316      	orrs	r6, r2
 8002238:	e7d8      	b.n	80021ec <__aeabi_f2d+0x20>
 800223a:	2300      	movs	r3, #0
 800223c:	2600      	movs	r6, #0
 800223e:	e7d5      	b.n	80021ec <__aeabi_f2d+0x20>
 8002240:	2600      	movs	r6, #0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <__aeabi_f2d+0x8c>)
 8002244:	e7d2      	b.n	80021ec <__aeabi_f2d+0x20>
 8002246:	0003      	movs	r3, r0
 8002248:	002a      	movs	r2, r5
 800224a:	3b0b      	subs	r3, #11
 800224c:	409a      	lsls	r2, r3
 800224e:	2500      	movs	r5, #0
 8002250:	e7e3      	b.n	800221a <__aeabi_f2d+0x4e>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	00000389 	.word	0x00000389
 8002258:	000007ff 	.word	0x000007ff

0800225c <__aeabi_d2f>:
 800225c:	0002      	movs	r2, r0
 800225e:	004b      	lsls	r3, r1, #1
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	0308      	lsls	r0, r1, #12
 8002264:	0d5b      	lsrs	r3, r3, #21
 8002266:	4e3d      	ldr	r6, [pc, #244]	; (800235c <__aeabi_d2f+0x100>)
 8002268:	0fcc      	lsrs	r4, r1, #31
 800226a:	0a40      	lsrs	r0, r0, #9
 800226c:	0f51      	lsrs	r1, r2, #29
 800226e:	1c5f      	adds	r7, r3, #1
 8002270:	4308      	orrs	r0, r1
 8002272:	00d5      	lsls	r5, r2, #3
 8002274:	4237      	tst	r7, r6
 8002276:	d00a      	beq.n	800228e <__aeabi_d2f+0x32>
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <__aeabi_d2f+0x104>)
 800227a:	185e      	adds	r6, r3, r1
 800227c:	2efe      	cmp	r6, #254	; 0xfe
 800227e:	dd16      	ble.n	80022ae <__aeabi_d2f+0x52>
 8002280:	23ff      	movs	r3, #255	; 0xff
 8002282:	2100      	movs	r1, #0
 8002284:	05db      	lsls	r3, r3, #23
 8002286:	430b      	orrs	r3, r1
 8002288:	07e0      	lsls	r0, r4, #31
 800228a:	4318      	orrs	r0, r3
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <__aeabi_d2f+0x44>
 8002292:	4328      	orrs	r0, r5
 8002294:	d027      	beq.n	80022e6 <__aeabi_d2f+0x8a>
 8002296:	2105      	movs	r1, #5
 8002298:	0189      	lsls	r1, r1, #6
 800229a:	0a49      	lsrs	r1, r1, #9
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e7f1      	b.n	8002284 <__aeabi_d2f+0x28>
 80022a0:	4305      	orrs	r5, r0
 80022a2:	d0ed      	beq.n	8002280 <__aeabi_d2f+0x24>
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	03c9      	lsls	r1, r1, #15
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	4301      	orrs	r1, r0
 80022ac:	e7ea      	b.n	8002284 <__aeabi_d2f+0x28>
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	dd1c      	ble.n	80022ec <__aeabi_d2f+0x90>
 80022b2:	0192      	lsls	r2, r2, #6
 80022b4:	0011      	movs	r1, r2
 80022b6:	1e4a      	subs	r2, r1, #1
 80022b8:	4191      	sbcs	r1, r2
 80022ba:	00c0      	lsls	r0, r0, #3
 80022bc:	0f6d      	lsrs	r5, r5, #29
 80022be:	4301      	orrs	r1, r0
 80022c0:	4329      	orrs	r1, r5
 80022c2:	074b      	lsls	r3, r1, #29
 80022c4:	d048      	beq.n	8002358 <__aeabi_d2f+0xfc>
 80022c6:	230f      	movs	r3, #15
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d000      	beq.n	80022d0 <__aeabi_d2f+0x74>
 80022ce:	3104      	adds	r1, #4
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	04db      	lsls	r3, r3, #19
 80022d4:	400b      	ands	r3, r1
 80022d6:	d03f      	beq.n	8002358 <__aeabi_d2f+0xfc>
 80022d8:	1c72      	adds	r2, r6, #1
 80022da:	2efe      	cmp	r6, #254	; 0xfe
 80022dc:	d0d0      	beq.n	8002280 <__aeabi_d2f+0x24>
 80022de:	0189      	lsls	r1, r1, #6
 80022e0:	0a49      	lsrs	r1, r1, #9
 80022e2:	b2d3      	uxtb	r3, r2
 80022e4:	e7ce      	b.n	8002284 <__aeabi_d2f+0x28>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	e7cb      	b.n	8002284 <__aeabi_d2f+0x28>
 80022ec:	0032      	movs	r2, r6
 80022ee:	3217      	adds	r2, #23
 80022f0:	db22      	blt.n	8002338 <__aeabi_d2f+0xdc>
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	221e      	movs	r2, #30
 80022f6:	0409      	lsls	r1, r1, #16
 80022f8:	4308      	orrs	r0, r1
 80022fa:	1b92      	subs	r2, r2, r6
 80022fc:	2a1f      	cmp	r2, #31
 80022fe:	dd1d      	ble.n	800233c <__aeabi_d2f+0xe0>
 8002300:	2102      	movs	r1, #2
 8002302:	4249      	negs	r1, r1
 8002304:	1b8e      	subs	r6, r1, r6
 8002306:	0001      	movs	r1, r0
 8002308:	40f1      	lsrs	r1, r6
 800230a:	000e      	movs	r6, r1
 800230c:	2a20      	cmp	r2, #32
 800230e:	d004      	beq.n	800231a <__aeabi_d2f+0xbe>
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <__aeabi_d2f+0x108>)
 8002312:	4694      	mov	ip, r2
 8002314:	4463      	add	r3, ip
 8002316:	4098      	lsls	r0, r3
 8002318:	4305      	orrs	r5, r0
 800231a:	0029      	movs	r1, r5
 800231c:	1e4d      	subs	r5, r1, #1
 800231e:	41a9      	sbcs	r1, r5
 8002320:	4331      	orrs	r1, r6
 8002322:	2600      	movs	r6, #0
 8002324:	074b      	lsls	r3, r1, #29
 8002326:	d1ce      	bne.n	80022c6 <__aeabi_d2f+0x6a>
 8002328:	2080      	movs	r0, #128	; 0x80
 800232a:	000b      	movs	r3, r1
 800232c:	04c0      	lsls	r0, r0, #19
 800232e:	2201      	movs	r2, #1
 8002330:	4003      	ands	r3, r0
 8002332:	4201      	tst	r1, r0
 8002334:	d1d3      	bne.n	80022de <__aeabi_d2f+0x82>
 8002336:	e7af      	b.n	8002298 <__aeabi_d2f+0x3c>
 8002338:	2300      	movs	r3, #0
 800233a:	e7ac      	b.n	8002296 <__aeabi_d2f+0x3a>
 800233c:	490a      	ldr	r1, [pc, #40]	; (8002368 <__aeabi_d2f+0x10c>)
 800233e:	468c      	mov	ip, r1
 8002340:	0029      	movs	r1, r5
 8002342:	4463      	add	r3, ip
 8002344:	40d1      	lsrs	r1, r2
 8002346:	409d      	lsls	r5, r3
 8002348:	000a      	movs	r2, r1
 800234a:	0029      	movs	r1, r5
 800234c:	4098      	lsls	r0, r3
 800234e:	1e4d      	subs	r5, r1, #1
 8002350:	41a9      	sbcs	r1, r5
 8002352:	4301      	orrs	r1, r0
 8002354:	4311      	orrs	r1, r2
 8002356:	e7e4      	b.n	8002322 <__aeabi_d2f+0xc6>
 8002358:	0033      	movs	r3, r6
 800235a:	e79d      	b.n	8002298 <__aeabi_d2f+0x3c>
 800235c:	000007fe 	.word	0x000007fe
 8002360:	fffffc80 	.word	0xfffffc80
 8002364:	fffffca2 	.word	0xfffffca2
 8002368:	fffffc82 	.word	0xfffffc82

0800236c <__clzsi2>:
 800236c:	211c      	movs	r1, #28
 800236e:	2301      	movs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0xe>
 8002376:	0c00      	lsrs	r0, r0, #16
 8002378:	3910      	subs	r1, #16
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	4298      	cmp	r0, r3
 800237e:	d301      	bcc.n	8002384 <__clzsi2+0x18>
 8002380:	0a00      	lsrs	r0, r0, #8
 8002382:	3908      	subs	r1, #8
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	4298      	cmp	r0, r3
 8002388:	d301      	bcc.n	800238e <__clzsi2+0x22>
 800238a:	0900      	lsrs	r0, r0, #4
 800238c:	3904      	subs	r1, #4
 800238e:	a202      	add	r2, pc, #8	; (adr r2, 8002398 <__clzsi2+0x2c>)
 8002390:	5c10      	ldrb	r0, [r2, r0]
 8002392:	1840      	adds	r0, r0, r1
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	02020304 	.word	0x02020304
 800239c:	01010101 	.word	0x01010101
	...

080023a8 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cfb      	adds	r3, r7, #3
 80023b4:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1cfa      	adds	r2, r7, #3
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set LOW
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4818      	ldr	r0, [pc, #96]	; (800243c <motor_wheel_init+0x94>)
 80023dc:	2201      	movs	r2, #1
 80023de:	0019      	movs	r1, r3
 80023e0:	f002 fd07 	bl	8004df2 <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <motor_wheel_init+0x94>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	2101      	movs	r1, #1
 80023f2:	0018      	movs	r0, r3
 80023f4:	f002 fcfd 	bl	8004df2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set HIGH
	}
}
 80023f8:	e01b      	b.n	8002432 <motor_wheel_init+0x8a>
	else if (str->id == 2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d106      	bne.n	8002410 <motor_wheel_init+0x68>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set LOW
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <motor_wheel_init+0x94>)
 8002404:	2201      	movs	r2, #1
 8002406:	2102      	movs	r1, #2
 8002408:	0018      	movs	r0, r3
 800240a:	f002 fcf2 	bl	8004df2 <HAL_GPIO_WritePin>
}
 800240e:	e010      	b.n	8002432 <motor_wheel_init+0x8a>
	else if (str->id == 3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d106      	bne.n	8002426 <motor_wheel_init+0x7e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <motor_wheel_init+0x94>)
 800241a:	2201      	movs	r2, #1
 800241c:	2101      	movs	r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f002 fce7 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8002424:	e005      	b.n	8002432 <motor_wheel_init+0x8a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set HIGH
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <motor_wheel_init+0x94>)
 8002428:	2201      	movs	r2, #1
 800242a:	2102      	movs	r1, #2
 800242c:	0018      	movs	r0, r3
 800242e:	f002 fce0 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	48000800 	.word	0x48000800

08002440 <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, uint8_t LPU) // PWM Velocity Control
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	701a      	strb	r2, [r3, #0]
	uint8_t throttle = LPU;//fabs(LPU) * 100;
 800244e:	2117      	movs	r1, #23
 8002450:	187b      	adds	r3, r7, r1
 8002452:	1dfa      	adds	r2, r7, #7
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	701a      	strb	r2, [r3, #0]
	if (str->id == 1)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <motorPWM_pulse+0x2c>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	187a      	adds	r2, r7, r1
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
	else if (str->id == 3)
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
	else if (str->id == 4)
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};
 800246a:	e01f      	b.n	80024ac <motorPWM_pulse+0x6c>
	else if (str->id == 2)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d106      	bne.n	8002482 <motorPWM_pulse+0x42>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2217      	movs	r2, #23
 800247a:	18ba      	adds	r2, r7, r2
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
};
 8002480:	e014      	b.n	80024ac <motorPWM_pulse+0x6c>
	else if (str->id == 3)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d106      	bne.n	8002498 <motorPWM_pulse+0x58>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2217      	movs	r2, #23
 8002490:	18ba      	adds	r2, r7, r2
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c
};
 8002496:	e009      	b.n	80024ac <motorPWM_pulse+0x6c>
	else if (str->id == 4)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d105      	bne.n	80024ac <motorPWM_pulse+0x6c>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2217      	movs	r2, #23
 80024a6:	18ba      	adds	r2, r7, r2
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
};
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b006      	add	sp, #24
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	000a      	movs	r2, r1
 80024be:	1cfb      	adds	r3, r7, #3
 80024c0:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1cfa      	adds	r2, r7, #3
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	789b      	ldrb	r3, [r3, #2]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10a      	bne.n	80024e8 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	480a      	ldr	r0, [pc, #40]	; (8002500 <motor_break+0x4c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	0019      	movs	r1, r3
 80024dc:	f002 fc89 	bl	8004df2 <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 80024e6:	e006      	b.n	80024f6 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <motor_break+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	0019      	movs	r1, r3
 80024f2:	f002 fc7e 	bl	8004df2 <HAL_GPIO_WritePin>
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	48000800 	.word	0x48000800

08002504 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	0008      	movs	r0, r1
 800250e:	0011      	movs	r1, r2
 8002510:	1cfb      	adds	r3, r7, #3
 8002512:	1c02      	adds	r2, r0, #0
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	1cbb      	adds	r3, r7, #2
 8002518:	1c0a      	adds	r2, r1, #0
 800251a:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1cfa      	adds	r2, r7, #3
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1cba      	adds	r2, r7, #2
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	705a      	strb	r2, [r3, #1]
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <linear_motor_set_target>:


void linear_motor_set_target(Linear_Motor *str, int32_t target)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	if (target > POSITION_MAX)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <linear_motor_set_target+0x34>)
 8002556:	4293      	cmp	r3, r2
 8002558:	dd02      	ble.n	8002560 <linear_motor_set_target+0x18>
	{
		target = POSITION_MAX;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <linear_motor_set_target+0x34>)
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	e005      	b.n	800256c <linear_motor_set_target+0x24>
	}
	else if (target < POSITION_MIN)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <linear_motor_set_target+0x38>)
 8002564:	4293      	cmp	r3, r2
 8002566:	da01      	bge.n	800256c <linear_motor_set_target+0x24>
	{
		target = POSITION_MIN;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <linear_motor_set_target+0x38>)
 800256a:	603b      	str	r3, [r7, #0]
	}
	str->target_position = target;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	609a      	str	r2, [r3, #8]
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	0000280a 	.word	0x0000280a
 8002580:	ffffd7f6 	.word	0xffffd7f6

08002584 <linear_motor_pulse>:
  * @param  timer_handle timer handle associated with linear motors
  * @param  counter_handle counter pointer to track number of pulses sent via interupt callback
  * @retval if(errors_occurred)
  */
uint8_t linear_motor_pulse(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	if (str->id == 1 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d107      	bne.n	80025a8 <linear_motor_pulse+0x24>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	223e      	movs	r2, #62	; 0x3e
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d101      	bne.n	80025a8 <linear_motor_pulse+0x24>
	{
		return 1; // error occurred
 80025a4:	2301      	movs	r3, #1
 80025a6:	e075      	b.n	8002694 <linear_motor_pulse+0x110>
	}
	else if (str->id == 2 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d107      	bne.n	80025c0 <linear_motor_pulse+0x3c>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	5c9b      	ldrb	r3, [r3, r2]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d101      	bne.n	80025c0 <linear_motor_pulse+0x3c>
	{
		return 1; // error occurred
 80025bc:	2301      	movs	r3, #1
 80025be:	e069      	b.n	8002694 <linear_motor_pulse+0x110>
	}
	uint32_t shift = abs(str->target_position - str->current_position);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	17da      	asrs	r2, r3, #31
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	4053      	eors	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
	if (shift == 0)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <linear_motor_pulse+0x58>
	{
		return 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	e05b      	b.n	8002694 <linear_motor_pulse+0x110>
	}
	if (str->target_position - str->current_position > 0)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	dd03      	ble.n	80025f2 <linear_motor_pulse+0x6e>
	{
		str->dir_q = 1;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	705a      	strb	r2, [r3, #1]
 80025f0:	e002      	b.n	80025f8 <linear_motor_pulse+0x74>
	}
	else
	{
		str->dir_q = 0;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	705a      	strb	r2, [r3, #1]
	}
	if (str->id == 1)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d120      	bne.n	8002642 <linear_motor_pulse+0xbe>
	{
		*counter_handle = shift;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
		// TODO: SET DIRECTION GPIO
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	001a      	movs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	17da      	asrs	r2, r3, #31
 8002614:	189b      	adds	r3, r3, r2
 8002616:	4053      	eors	r3, r2
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <linear_motor_pulse+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <linear_motor_pulse+0x118>)
 800261e:	2201      	movs	r2, #1
 8002620:	2104      	movs	r1, #4
 8002622:	0018      	movs	r0, r3
 8002624:	f002 fbe5 	bl	8004df2 <HAL_GPIO_WritePin>
 8002628:	e005      	b.n	8002636 <linear_motor_pulse+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <linear_motor_pulse+0x118>)
 800262c:	2200      	movs	r2, #0
 800262e:	2104      	movs	r1, #4
 8002630:	0018      	movs	r0, r3
 8002632:	f002 fbde 	bl	8004df2 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2100      	movs	r1, #0
 800263a:	0018      	movs	r0, r3
 800263c:	f003 f9c2 	bl	80059c4 <HAL_TIM_PWM_Start_IT>
 8002640:	e023      	b.n	800268a <linear_motor_pulse+0x106>
	}
	else if (str->id == 2)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d11f      	bne.n	800268a <linear_motor_pulse+0x106>
	{
		*counter_handle = shift;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	001a      	movs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	789b      	ldrb	r3, [r3, #2]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	17da      	asrs	r2, r3, #31
 800265e:	189b      	adds	r3, r3, r2
 8002660:	4053      	eors	r3, r2
 8002662:	2b01      	cmp	r3, #1
 8002664:	d106      	bne.n	8002674 <linear_motor_pulse+0xf0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <linear_motor_pulse+0x118>)
 8002668:	2201      	movs	r2, #1
 800266a:	2108      	movs	r1, #8
 800266c:	0018      	movs	r0, r3
 800266e:	f002 fbc0 	bl	8004df2 <HAL_GPIO_WritePin>
 8002672:	e005      	b.n	8002680 <linear_motor_pulse+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <linear_motor_pulse+0x118>)
 8002676:	2200      	movs	r2, #0
 8002678:	2108      	movs	r1, #8
 800267a:	0018      	movs	r0, r3
 800267c:	f002 fbb9 	bl	8004df2 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2104      	movs	r1, #4
 8002684:	0018      	movs	r0, r3
 8002686:	f003 f99d 	bl	80059c4 <HAL_TIM_PWM_Start_IT>
	}
	str->current_position = str->target_position;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]
	return 0;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b006      	add	sp, #24
 800269a:	bd80      	pop	{r7, pc}
 800269c:	48000800 	.word	0x48000800

080026a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	46c6      	mov	lr, r8
 80026a4:	b500      	push	{lr}
 80026a6:	b0c2      	sub	sp, #264	; 0x108
 80026a8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026aa:	f001 fe99 	bl	80043e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ae:	f000 fcfb 	bl	80030a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b2:	f000 ff95 	bl	80035e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80026b6:	f000 fe0b 	bl	80032d0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80026ba:	f000 fd35 	bl	8003128 <MX_TIM1_Init>
  MX_TIM15_Init();
 80026be:	f000 fe83 	bl	80033c8 <MX_TIM15_Init>
  MX_DMA_Init();
 80026c2:	f000 ff6f 	bl	80035a4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80026c6:	f000 ff3d 	bl	8003544 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80026ca:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <main+0x240>)
 80026cc:	2100      	movs	r1, #0
 80026ce:	0018      	movs	r0, r3
 80026d0:	f003 fb86 	bl	8005de0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <main+0x240>)
 80026d6:	2104      	movs	r1, #4
 80026d8:	0018      	movs	r0, r3
 80026da:	f003 fb81 	bl	8005de0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80026de:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <main+0x240>)
 80026e0:	2108      	movs	r1, #8
 80026e2:	0018      	movs	r0, r3
 80026e4:	f003 fb7c 	bl	8005de0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80026e8:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <main+0x240>)
 80026ea:	210c      	movs	r1, #12
 80026ec:	0018      	movs	r0, r3
 80026ee:	f003 fb77 	bl	8005de0 <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 80026f2:	2350      	movs	r3, #80	; 0x50
 80026f4:	2218      	movs	r2, #24
 80026f6:	4694      	mov	ip, r2
 80026f8:	2208      	movs	r2, #8
 80026fa:	4690      	mov	r8, r2
 80026fc:	44b8      	add	r8, r7
 80026fe:	44c4      	add	ip, r8
 8002700:	4463      	add	r3, ip
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	3304      	adds	r3, #4
 8002708:	223d      	movs	r2, #61	; 0x3d
 800270a:	2100      	movs	r1, #0
 800270c:	0018      	movs	r0, r3
 800270e:	f006 f803 	bl	8008718 <memset>
  float speed1 = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	22bc      	movs	r2, #188	; 0xbc
 8002716:	2118      	movs	r1, #24
 8002718:	468c      	mov	ip, r1
 800271a:	2108      	movs	r1, #8
 800271c:	4688      	mov	r8, r1
 800271e:	44b8      	add	r8, r7
 8002720:	44c4      	add	ip, r8
 8002722:	4462      	add	r2, ip
 8002724:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	22b8      	movs	r2, #184	; 0xb8
 800272a:	2118      	movs	r1, #24
 800272c:	468c      	mov	ip, r1
 800272e:	2108      	movs	r1, #8
 8002730:	4688      	mov	r8, r1
 8002732:	44b8      	add	r8, r7
 8002734:	44c4      	add	ip, r8
 8002736:	4462      	add	r2, ip
 8002738:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	22b4      	movs	r2, #180	; 0xb4
 800273e:	2118      	movs	r1, #24
 8002740:	468c      	mov	ip, r1
 8002742:	2108      	movs	r1, #8
 8002744:	4688      	mov	r8, r1
 8002746:	44b8      	add	r8, r7
 8002748:	44c4      	add	ip, r8
 800274a:	4462      	add	r2, ip
 800274c:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	22b0      	movs	r2, #176	; 0xb0
 8002752:	2118      	movs	r1, #24
 8002754:	468c      	mov	ip, r1
 8002756:	2108      	movs	r1, #8
 8002758:	4688      	mov	r8, r1
 800275a:	44b8      	add	r8, r7
 800275c:	44c4      	add	ip, r8
 800275e:	4462      	add	r2, ip
 8002760:	6013      	str	r3, [r2, #0]
  uint8_t cycleCounter = 0;
 8002762:	23af      	movs	r3, #175	; 0xaf
 8002764:	2218      	movs	r2, #24
 8002766:	4694      	mov	ip, r2
 8002768:	2208      	movs	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	44b8      	add	r8, r7
 800276e:	44c4      	add	ip, r8
 8002770:	4463      	add	r3, ip
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 8002776:	2300      	movs	r3, #0
 8002778:	22a8      	movs	r2, #168	; 0xa8
 800277a:	2118      	movs	r1, #24
 800277c:	468c      	mov	ip, r1
 800277e:	2108      	movs	r1, #8
 8002780:	4688      	mov	r8, r1
 8002782:	44b8      	add	r8, r7
 8002784:	44c4      	add	ip, r8
 8002786:	4462      	add	r2, ip
 8002788:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 800278a:	2318      	movs	r3, #24
 800278c:	2208      	movs	r2, #8
 800278e:	4694      	mov	ip, r2
 8002790:	44bc      	add	ip, r7
 8002792:	4463      	add	r3, ip
 8002794:	0018      	movs	r0, r3
 8002796:	2350      	movs	r3, #80	; 0x50
 8002798:	001a      	movs	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	f005 ffbc 	bl	8008718 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <main+0x244>)
 80027a2:	2100      	movs	r1, #0
 80027a4:	0018      	movs	r0, r3
 80027a6:	f003 f85b 	bl	8005860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80027aa:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <main+0x244>)
 80027ac:	2104      	movs	r1, #4
 80027ae:	0018      	movs	r0, r3
 80027b0:	f003 f856 	bl	8005860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027b4:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <main+0x244>)
 80027b6:	2108      	movs	r1, #8
 80027b8:	0018      	movs	r0, r3
 80027ba:	f003 f851 	bl	8005860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80027be:	4b49      	ldr	r3, [pc, #292]	; (80028e4 <main+0x244>)
 80027c0:	210c      	movs	r1, #12
 80027c2:	0018      	movs	r0, r3
 80027c4:	f003 f84c 	bl	8005860 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 80027c8:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <main+0x248>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <main+0x248>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2202      	movs	r2, #2
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38

  // SETUP
  for (int i = 0; i < 4; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	22a4      	movs	r2, #164	; 0xa4
 80027dc:	2118      	movs	r1, #24
 80027de:	468c      	mov	ip, r1
 80027e0:	2108      	movs	r1, #8
 80027e2:	4688      	mov	r8, r1
 80027e4:	44b8      	add	r8, r7
 80027e6:	44c4      	add	ip, r8
 80027e8:	4462      	add	r2, ip
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e049      	b.n	8002882 <main+0x1e2>
  {
	  pMW[i] = &MW[i];
 80027ee:	24a4      	movs	r4, #164	; 0xa4
 80027f0:	2518      	movs	r5, #24
 80027f2:	2308      	movs	r3, #8
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	195b      	adds	r3, r3, r5
 80027f8:	191b      	adds	r3, r3, r4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	00da      	lsls	r2, r3, #3
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <main+0x24c>)
 8002800:	18d1      	adds	r1, r2, r3
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <main+0x250>)
 8002804:	2208      	movs	r2, #8
 8002806:	18ba      	adds	r2, r7, r2
 8002808:	1952      	adds	r2, r2, r5
 800280a:	1912      	adds	r2, r2, r4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <main+0x250>)
 8002814:	2208      	movs	r2, #8
 8002816:	18ba      	adds	r2, r7, r2
 8002818:	1952      	adds	r2, r2, r5
 800281a:	1912      	adds	r2, r2, r4
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	58d2      	ldr	r2, [r2, r3]
 8002822:	2308      	movs	r3, #8
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	195b      	adds	r3, r3, r5
 8002828:	191b      	adds	r3, r3, r4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f7ff fdb7 	bl	80023a8 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <main+0x250>)
 800283c:	2208      	movs	r2, #8
 800283e:	18ba      	adds	r2, r7, r2
 8002840:	1952      	adds	r2, r2, r5
 8002842:	1912      	adds	r2, r2, r4
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	58d1      	ldr	r1, [r2, r3]
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <main+0x244>)
 800284c:	2200      	movs	r2, #0
 800284e:	0018      	movs	r0, r3
 8002850:	f7ff fdf6 	bl	8002440 <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <main+0x250>)
 8002856:	2208      	movs	r2, #8
 8002858:	18ba      	adds	r2, r7, r2
 800285a:	1952      	adds	r2, r2, r5
 800285c:	1912      	adds	r2, r2, r4
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	58d3      	ldr	r3, [r2, r3]
 8002864:	2100      	movs	r1, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff fe24 	bl	80024b4 <motor_break>
  for (int i = 0; i < 4; i++)
 800286c:	2308      	movs	r3, #8
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	195b      	adds	r3, r3, r5
 8002872:	191b      	adds	r3, r3, r4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	2208      	movs	r2, #8
 800287a:	18ba      	adds	r2, r7, r2
 800287c:	1952      	adds	r2, r2, r5
 800287e:	1912      	adds	r2, r2, r4
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	23a4      	movs	r3, #164	; 0xa4
 8002884:	2218      	movs	r2, #24
 8002886:	4694      	mov	ip, r2
 8002888:	2208      	movs	r2, #8
 800288a:	4690      	mov	r8, r2
 800288c:	44b8      	add	r8, r7
 800288e:	44c4      	add	ip, r8
 8002890:	4463      	add	r3, ip
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b03      	cmp	r3, #3
 8002896:	ddaa      	ble.n	80027ee <main+0x14e>
  }


  // basicly - clear all uart queues
  HAL_UART_Receive_DMA(&huart3, &UART2_rxBuffer, 1);
 8002898:	4916      	ldr	r1, [pc, #88]	; (80028f4 <main+0x254>)
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <main+0x258>)
 800289c:	2201      	movs	r2, #1
 800289e:	0018      	movs	r0, r3
 80028a0:	f004 fdfc 	bl	800749c <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart3, MSG, strlen(MSG), 50);
 80028a4:	2450      	movs	r4, #80	; 0x50
 80028a6:	2518      	movs	r5, #24
 80028a8:	2308      	movs	r3, #8
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	195b      	adds	r3, r3, r5
 80028ae:	191b      	adds	r3, r3, r4
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fd fc33 	bl	800011c <strlen>
 80028b6:	0003      	movs	r3, r0
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	2308      	movs	r3, #8
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	195b      	adds	r3, r3, r5
 80028c0:	1919      	adds	r1, r3, r4
 80028c2:	480d      	ldr	r0, [pc, #52]	; (80028f8 <main+0x258>)
 80028c4:	2332      	movs	r3, #50	; 0x32
 80028c6:	f004 fc9d 	bl	8007204 <HAL_UART_Transmit>


  for (int i = 0; i < 2; i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	22a0      	movs	r2, #160	; 0xa0
 80028ce:	2118      	movs	r1, #24
 80028d0:	468c      	mov	ip, r1
 80028d2:	2108      	movs	r1, #8
 80028d4:	4688      	mov	r8, r1
 80028d6:	44b8      	add	r8, r7
 80028d8:	44c4      	add	ip, r8
 80028da:	4462      	add	r2, ip
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e04c      	b.n	800297a <main+0x2da>
 80028e0:	200004d4 	.word	0x200004d4
 80028e4:	2000054c 	.word	0x2000054c
 80028e8:	20000448 	.word	0x20000448
 80028ec:	2000052c 	.word	0x2000052c
 80028f0:	2000051c 	.word	0x2000051c
 80028f4:	2000028c 	.word	0x2000028c
 80028f8:	200003c4 	.word	0x200003c4
  {
	  pLM[i] = &LM[i];
 80028fc:	20a0      	movs	r0, #160	; 0xa0
 80028fe:	2518      	movs	r5, #24
 8002900:	2308      	movs	r3, #8
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	195b      	adds	r3, r3, r5
 8002906:	181b      	adds	r3, r3, r0
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	0013      	movs	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	189b      	adds	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4add      	ldr	r2, [pc, #884]	; (8002c88 <main+0x5e8>)
 8002914:	1899      	adds	r1, r3, r2
 8002916:	4bdd      	ldr	r3, [pc, #884]	; (8002c8c <main+0x5ec>)
 8002918:	2208      	movs	r2, #8
 800291a:	18ba      	adds	r2, r7, r2
 800291c:	1952      	adds	r2, r2, r5
 800291e:	1812      	adds	r2, r2, r0
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	50d1      	str	r1, [r2, r3]
	  linear_motor_init(pLM[i], i+1, i); // init structure
 8002926:	4bd9      	ldr	r3, [pc, #868]	; (8002c8c <main+0x5ec>)
 8002928:	0001      	movs	r1, r0
 800292a:	2208      	movs	r2, #8
 800292c:	18ba      	adds	r2, r7, r2
 800292e:	1952      	adds	r2, r2, r5
 8002930:	1852      	adds	r2, r2, r1
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	58d0      	ldr	r0, [r2, r3]
 8002938:	000a      	movs	r2, r1
 800293a:	2308      	movs	r3, #8
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	195b      	adds	r3, r3, r5
 8002940:	189b      	adds	r3, r3, r2
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	0014      	movs	r4, r2
 800294c:	2118      	movs	r1, #24
 800294e:	468c      	mov	ip, r1
 8002950:	2108      	movs	r1, #8
 8002952:	4688      	mov	r8, r1
 8002954:	44b8      	add	r8, r7
 8002956:	44c4      	add	ip, r8
 8002958:	4462      	add	r2, ip
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	0019      	movs	r1, r3
 8002960:	f7ff fdd0 	bl	8002504 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 8002964:	2308      	movs	r3, #8
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	195b      	adds	r3, r3, r5
 800296a:	191b      	adds	r3, r3, r4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	2208      	movs	r2, #8
 8002972:	18ba      	adds	r2, r7, r2
 8002974:	1952      	adds	r2, r2, r5
 8002976:	1912      	adds	r2, r2, r4
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	23a0      	movs	r3, #160	; 0xa0
 800297c:	2218      	movs	r2, #24
 800297e:	4694      	mov	ip, r2
 8002980:	2208      	movs	r2, #8
 8002982:	4690      	mov	r8, r2
 8002984:	44b8      	add	r8, r7
 8002986:	44c4      	add	ip, r8
 8002988:	4463      	add	r3, ip
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	ddb5      	ble.n	80028fc <main+0x25c>
  }

  uint32_t dist = 0; //linear_motor_calibrate(pLM[0], &htim15, &linearPulse_1);
 8002990:	2300      	movs	r3, #0
 8002992:	2294      	movs	r2, #148	; 0x94
 8002994:	2118      	movs	r1, #24
 8002996:	468c      	mov	ip, r1
 8002998:	2108      	movs	r1, #8
 800299a:	4688      	mov	r8, r1
 800299c:	44b8      	add	r8, r7
 800299e:	44c4      	add	ip, r8
 80029a0:	4462      	add	r2, ip
 80029a2:	6013      	str	r3, [r2, #0]



  // No incoming processing should be done before it is set
  Init_Done = 1;
 80029a4:	4bba      	ldr	r3, [pc, #744]	; (8002c90 <main+0x5f0>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 80029aa:	21af      	movs	r1, #175	; 0xaf
 80029ac:	2018      	movs	r0, #24
 80029ae:	2308      	movs	r3, #8
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	181b      	adds	r3, r3, r0
 80029b4:	185b      	adds	r3, r3, r1
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	2308      	movs	r3, #8
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	181b      	adds	r3, r3, r0
 80029be:	185b      	adds	r3, r3, r1
 80029c0:	3201      	adds	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 80029c4:	2308      	movs	r3, #8
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	181b      	adds	r3, r3, r0
 80029ca:	185b      	adds	r3, r3, r1
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2bff      	cmp	r3, #255	; 0xff
 80029d0:	d105      	bne.n	80029de <main+0x33e>
	{
		cycleCounter = 1;
 80029d2:	2308      	movs	r3, #8
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	181b      	adds	r3, r3, r0
 80029d8:	185b      	adds	r3, r3, r1
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 80029de:	2300      	movs	r3, #0
 80029e0:	24bc      	movs	r4, #188	; 0xbc
 80029e2:	2518      	movs	r5, #24
 80029e4:	2208      	movs	r2, #8
 80029e6:	18ba      	adds	r2, r7, r2
 80029e8:	1952      	adds	r2, r2, r5
 80029ea:	1912      	adds	r2, r2, r4
 80029ec:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	22b8      	movs	r2, #184	; 0xb8
 80029f2:	2118      	movs	r1, #24
 80029f4:	468c      	mov	ip, r1
 80029f6:	2108      	movs	r1, #8
 80029f8:	4688      	mov	r8, r1
 80029fa:	44b8      	add	r8, r7
 80029fc:	44c4      	add	ip, r8
 80029fe:	4462      	add	r2, ip
 8002a00:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	22b4      	movs	r2, #180	; 0xb4
 8002a06:	2118      	movs	r1, #24
 8002a08:	468c      	mov	ip, r1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	4688      	mov	r8, r1
 8002a0e:	44b8      	add	r8, r7
 8002a10:	44c4      	add	ip, r8
 8002a12:	4462      	add	r2, ip
 8002a14:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	22b0      	movs	r2, #176	; 0xb0
 8002a1a:	2118      	movs	r1, #24
 8002a1c:	468c      	mov	ip, r1
 8002a1e:	2108      	movs	r1, #8
 8002a20:	4688      	mov	r8, r1
 8002a22:	44b8      	add	r8, r7
 8002a24:	44c4      	add	ip, r8
 8002a26:	4462      	add	r2, ip
 8002a28:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 8002a2a:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <main+0x5f4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a9a      	ldr	r2, [pc, #616]	; (8002c98 <main+0x5f8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d81a      	bhi.n	8002a6a <main+0x3ca>
 8002a34:	4b97      	ldr	r3, [pc, #604]	; (8002c94 <main+0x5f4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d016      	beq.n	8002a6a <main+0x3ca>
		 {
			 speed1 = 13850.4 / T31pulseWidth;
 8002a3c:	4b95      	ldr	r3, [pc, #596]	; (8002c94 <main+0x5f4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff fb9d 	bl	8002180 <__aeabi_ui2d>
 8002a46:	0002      	movs	r2, r0
 8002a48:	000b      	movs	r3, r1
 8002a4a:	4894      	ldr	r0, [pc, #592]	; (8002c9c <main+0x5fc>)
 8002a4c:	4994      	ldr	r1, [pc, #592]	; (8002ca0 <main+0x600>)
 8002a4e:	f7fe f90f 	bl	8000c70 <__aeabi_ddiv>
 8002a52:	0002      	movs	r2, r0
 8002a54:	000b      	movs	r3, r1
 8002a56:	0010      	movs	r0, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	f7ff fbff 	bl	800225c <__aeabi_d2f>
 8002a5e:	1c03      	adds	r3, r0, #0
 8002a60:	2208      	movs	r2, #8
 8002a62:	18ba      	adds	r2, r7, r2
 8002a64:	1952      	adds	r2, r2, r5
 8002a66:	1912      	adds	r2, r2, r4
 8002a68:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 8002a6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ca4 <main+0x604>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a8a      	ldr	r2, [pc, #552]	; (8002c98 <main+0x5f8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d81e      	bhi.n	8002ab2 <main+0x412>
 8002a74:	4b8b      	ldr	r3, [pc, #556]	; (8002ca4 <main+0x604>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01a      	beq.n	8002ab2 <main+0x412>
		 {
			 speed2 = 13850.4 / T32pulseWidth;
 8002a7c:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <main+0x604>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff fb7d 	bl	8002180 <__aeabi_ui2d>
 8002a86:	0002      	movs	r2, r0
 8002a88:	000b      	movs	r3, r1
 8002a8a:	4884      	ldr	r0, [pc, #528]	; (8002c9c <main+0x5fc>)
 8002a8c:	4984      	ldr	r1, [pc, #528]	; (8002ca0 <main+0x600>)
 8002a8e:	f7fe f8ef 	bl	8000c70 <__aeabi_ddiv>
 8002a92:	0002      	movs	r2, r0
 8002a94:	000b      	movs	r3, r1
 8002a96:	0010      	movs	r0, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	f7ff fbdf 	bl	800225c <__aeabi_d2f>
 8002a9e:	1c03      	adds	r3, r0, #0
 8002aa0:	22b8      	movs	r2, #184	; 0xb8
 8002aa2:	2118      	movs	r1, #24
 8002aa4:	468c      	mov	ip, r1
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	44b8      	add	r8, r7
 8002aac:	44c4      	add	ip, r8
 8002aae:	4462      	add	r2, ip
 8002ab0:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 8002ab2:	4b7d      	ldr	r3, [pc, #500]	; (8002ca8 <main+0x608>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a78      	ldr	r2, [pc, #480]	; (8002c98 <main+0x5f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d81e      	bhi.n	8002afa <main+0x45a>
 8002abc:	4b7a      	ldr	r3, [pc, #488]	; (8002ca8 <main+0x608>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01a      	beq.n	8002afa <main+0x45a>
		 {
			 speed3 = 13850.4 / T33pulseWidth;
 8002ac4:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <main+0x608>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff fb59 	bl	8002180 <__aeabi_ui2d>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	000b      	movs	r3, r1
 8002ad2:	4872      	ldr	r0, [pc, #456]	; (8002c9c <main+0x5fc>)
 8002ad4:	4972      	ldr	r1, [pc, #456]	; (8002ca0 <main+0x600>)
 8002ad6:	f7fe f8cb 	bl	8000c70 <__aeabi_ddiv>
 8002ada:	0002      	movs	r2, r0
 8002adc:	000b      	movs	r3, r1
 8002ade:	0010      	movs	r0, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	f7ff fbbb 	bl	800225c <__aeabi_d2f>
 8002ae6:	1c03      	adds	r3, r0, #0
 8002ae8:	22b4      	movs	r2, #180	; 0xb4
 8002aea:	2118      	movs	r1, #24
 8002aec:	468c      	mov	ip, r1
 8002aee:	2108      	movs	r1, #8
 8002af0:	4688      	mov	r8, r1
 8002af2:	44b8      	add	r8, r7
 8002af4:	44c4      	add	ip, r8
 8002af6:	4462      	add	r2, ip
 8002af8:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <main+0x60c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <main+0x5f8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d81e      	bhi.n	8002b42 <main+0x4a2>
 8002b04:	4b69      	ldr	r3, [pc, #420]	; (8002cac <main+0x60c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01a      	beq.n	8002b42 <main+0x4a2>
		 {
			 speed4 = 13850.4 / T34pulseWidth;
 8002b0c:	4b67      	ldr	r3, [pc, #412]	; (8002cac <main+0x60c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff fb35 	bl	8002180 <__aeabi_ui2d>
 8002b16:	0002      	movs	r2, r0
 8002b18:	000b      	movs	r3, r1
 8002b1a:	4860      	ldr	r0, [pc, #384]	; (8002c9c <main+0x5fc>)
 8002b1c:	4960      	ldr	r1, [pc, #384]	; (8002ca0 <main+0x600>)
 8002b1e:	f7fe f8a7 	bl	8000c70 <__aeabi_ddiv>
 8002b22:	0002      	movs	r2, r0
 8002b24:	000b      	movs	r3, r1
 8002b26:	0010      	movs	r0, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	f7ff fb97 	bl	800225c <__aeabi_d2f>
 8002b2e:	1c03      	adds	r3, r0, #0
 8002b30:	22b0      	movs	r2, #176	; 0xb0
 8002b32:	2118      	movs	r1, #24
 8002b34:	468c      	mov	ip, r1
 8002b36:	2108      	movs	r1, #8
 8002b38:	4688      	mov	r8, r1
 8002b3a:	44b8      	add	r8, r7
 8002b3c:	44c4      	add	ip, r8
 8002b3e:	4462      	add	r2, ip
 8002b40:	6013      	str	r3, [r2, #0]
		 }
		 memset(MSG, 0, sizeof(MSG));
 8002b42:	2350      	movs	r3, #80	; 0x50
 8002b44:	2218      	movs	r2, #24
 8002b46:	4694      	mov	ip, r2
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4690      	mov	r8, r2
 8002b4c:	44b8      	add	r8, r7
 8002b4e:	44c4      	add	ip, r8
 8002b50:	4463      	add	r3, ip
 8002b52:	2241      	movs	r2, #65	; 0x41
 8002b54:	2100      	movs	r1, #0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f005 fdde 	bl	8008718 <memset>
		 sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f %d %d %d\n", speed1, speed2, speed3, speed4, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13), dist);
 8002b5c:	22bc      	movs	r2, #188	; 0xbc
 8002b5e:	2318      	movs	r3, #24
 8002b60:	469c      	mov	ip, r3
 8002b62:	2308      	movs	r3, #8
 8002b64:	4698      	mov	r8, r3
 8002b66:	44b8      	add	r8, r7
 8002b68:	44c4      	add	ip, r8
 8002b6a:	4462      	add	r2, ip
 8002b6c:	6810      	ldr	r0, [r2, #0]
 8002b6e:	f7ff fb2d 	bl	80021cc <__aeabi_f2d>
 8002b72:	61b8      	str	r0, [r7, #24]
 8002b74:	61f9      	str	r1, [r7, #28]
 8002b76:	21b8      	movs	r1, #184	; 0xb8
 8002b78:	2318      	movs	r3, #24
 8002b7a:	469c      	mov	ip, r3
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	4698      	mov	r8, r3
 8002b80:	44b8      	add	r8, r7
 8002b82:	44c4      	add	ip, r8
 8002b84:	4461      	add	r1, ip
 8002b86:	6808      	ldr	r0, [r1, #0]
 8002b88:	f7ff fb20 	bl	80021cc <__aeabi_f2d>
 8002b8c:	0004      	movs	r4, r0
 8002b8e:	000d      	movs	r5, r1
 8002b90:	21b4      	movs	r1, #180	; 0xb4
 8002b92:	2318      	movs	r3, #24
 8002b94:	469c      	mov	ip, r3
 8002b96:	2308      	movs	r3, #8
 8002b98:	4698      	mov	r8, r3
 8002b9a:	44b8      	add	r8, r7
 8002b9c:	44c4      	add	ip, r8
 8002b9e:	4461      	add	r1, ip
 8002ba0:	6808      	ldr	r0, [r1, #0]
 8002ba2:	f7ff fb13 	bl	80021cc <__aeabi_f2d>
 8002ba6:	6138      	str	r0, [r7, #16]
 8002ba8:	6179      	str	r1, [r7, #20]
 8002baa:	21b0      	movs	r1, #176	; 0xb0
 8002bac:	2318      	movs	r3, #24
 8002bae:	469c      	mov	ip, r3
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	4698      	mov	r8, r3
 8002bb4:	44b8      	add	r8, r7
 8002bb6:	44c4      	add	ip, r8
 8002bb8:	4461      	add	r1, ip
 8002bba:	6808      	ldr	r0, [r1, #0]
 8002bbc:	f7ff fb06 	bl	80021cc <__aeabi_f2d>
 8002bc0:	60b8      	str	r0, [r7, #8]
 8002bc2:	60f9      	str	r1, [r7, #12]
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <main+0x610>)
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f002 f8f5 	bl	8004db8 <HAL_GPIO_ReadPin>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	001e      	movs	r6, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	4a37      	ldr	r2, [pc, #220]	; (8002cb4 <main+0x614>)
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0010      	movs	r0, r2
 8002bdc:	f002 f8ec 	bl	8004db8 <HAL_GPIO_ReadPin>
 8002be0:	0003      	movs	r3, r0
 8002be2:	001a      	movs	r2, r3
 8002be4:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <main+0x618>)
 8002be6:	2350      	movs	r3, #80	; 0x50
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	2018      	movs	r0, #24
 8002bec:	2308      	movs	r3, #8
 8002bee:	469c      	mov	ip, r3
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4460      	add	r0, ip
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	469c      	mov	ip, r3
 8002bf8:	4460      	add	r0, ip
 8002bfa:	2394      	movs	r3, #148	; 0x94
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	2318      	movs	r3, #24
 8002c00:	469c      	mov	ip, r3
 8002c02:	2308      	movs	r3, #8
 8002c04:	4698      	mov	r8, r3
 8002c06:	44b8      	add	r8, r7
 8002c08:	44c4      	add	ip, r8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4463      	add	r3, ip
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	9308      	str	r3, [sp, #32]
 8002c12:	9207      	str	r2, [sp, #28]
 8002c14:	9606      	str	r6, [sp, #24]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	9204      	str	r2, [sp, #16]
 8002c1c:	9305      	str	r3, [sp, #20]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	9202      	str	r2, [sp, #8]
 8002c24:	9303      	str	r3, [sp, #12]
 8002c26:	9400      	str	r4, [sp, #0]
 8002c28:	9501      	str	r5, [sp, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f006 fc01 	bl	8009434 <siprintf>
		 //sprintf(MSG, "[enc] %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth);
		 UART_Send(MSG);
 8002c32:	2350      	movs	r3, #80	; 0x50
 8002c34:	2218      	movs	r2, #24
 8002c36:	4694      	mov	ip, r2
 8002c38:	2208      	movs	r2, #8
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	44b8      	add	r8, r7
 8002c3e:	44c4      	add	ip, r8
 8002c40:	4463      	add	r3, ip
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fd66 	bl	8003714 <UART_Send>
	 }

	 for (int i=0; i < 4; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	229c      	movs	r2, #156	; 0x9c
 8002c4c:	2118      	movs	r1, #24
 8002c4e:	468c      	mov	ip, r1
 8002c50:	2108      	movs	r1, #8
 8002c52:	4688      	mov	r8, r1
 8002c54:	44b8      	add	r8, r7
 8002c56:	44c4      	add	ip, r8
 8002c58:	4462      	add	r2, ip
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e1f4      	b.n	8003048 <main+0x9a8>
	 {
		 sumVect = 0.0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	22a8      	movs	r2, #168	; 0xa8
 8002c62:	2118      	movs	r1, #24
 8002c64:	468c      	mov	ip, r1
 8002c66:	2108      	movs	r1, #8
 8002c68:	4688      	mov	r8, r1
 8002c6a:	44b8      	add	r8, r7
 8002c6c:	44c4      	add	ip, r8
 8002c6e:	4462      	add	r2, ip
 8002c70:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	2298      	movs	r2, #152	; 0x98
 8002c76:	2118      	movs	r1, #24
 8002c78:	468c      	mov	ip, r1
 8002c7a:	2108      	movs	r1, #8
 8002c7c:	4688      	mov	r8, r1
 8002c7e:	44b8      	add	r8, r7
 8002c80:	44c4      	add	ip, r8
 8002c82:	4462      	add	r2, ip
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e074      	b.n	8002d72 <main+0x6d2>
 8002c88:	20000594 	.word	0x20000594
 8002c8c:	20000378 	.word	0x20000378
 8002c90:	20000300 	.word	0x20000300
 8002c94:	200001fc 	.word	0x200001fc
 8002c98:	0000752f 	.word	0x0000752f
 8002c9c:	33333333 	.word	0x33333333
 8002ca0:	40cb0d33 	.word	0x40cb0d33
 8002ca4:	20000220 	.word	0x20000220
 8002ca8:	20000244 	.word	0x20000244
 8002cac:	20000268 	.word	0x20000268
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	48000800 	.word	0x48000800
 8002cb8:	0800d9fc 	.word	0x0800d9fc
		 {
			 vect[i][j] = vect[i][j+1];
 8002cbc:	2498      	movs	r4, #152	; 0x98
 8002cbe:	2618      	movs	r6, #24
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	199b      	adds	r3, r3, r6
 8002cc6:	191b      	adds	r3, r3, r4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c58      	adds	r0, r3, #1
 8002ccc:	2308      	movs	r3, #8
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	1999      	adds	r1, r3, r6
 8002cd2:	259c      	movs	r5, #156	; 0x9c
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	199b      	adds	r3, r3, r6
 8002cda:	195b      	adds	r3, r3, r5
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	0013      	movs	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	181b      	adds	r3, r3, r0
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	5858      	ldr	r0, [r3, r1]
 8002cea:	2308      	movs	r3, #8
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	1999      	adds	r1, r3, r6
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	199b      	adds	r3, r3, r6
 8002cf6:	195b      	adds	r3, r3, r5
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	0013      	movs	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	2208      	movs	r2, #8
 8002d02:	18ba      	adds	r2, r7, r2
 8002d04:	1992      	adds	r2, r2, r6
 8002d06:	1912      	adds	r2, r2, r4
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8002d10:	2308      	movs	r3, #8
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	1999      	adds	r1, r3, r6
 8002d16:	2308      	movs	r3, #8
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	199b      	adds	r3, r3, r6
 8002d1c:	195b      	adds	r3, r3, r5
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	0013      	movs	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	0035      	movs	r5, r6
 8002d28:	2208      	movs	r2, #8
 8002d2a:	18ba      	adds	r2, r7, r2
 8002d2c:	1992      	adds	r2, r2, r6
 8002d2e:	1912      	adds	r2, r2, r4
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	585b      	ldr	r3, [r3, r1]
 8002d38:	2105      	movs	r1, #5
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7fd fa0a 	bl	8000154 <__udivsi3>
 8002d40:	0003      	movs	r3, r0
 8002d42:	001a      	movs	r2, r3
 8002d44:	21a8      	movs	r1, #168	; 0xa8
 8002d46:	2308      	movs	r3, #8
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	195b      	adds	r3, r3, r5
 8002d4c:	185b      	adds	r3, r3, r1
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	2208      	movs	r2, #8
 8002d54:	18ba      	adds	r2, r7, r2
 8002d56:	1952      	adds	r2, r2, r5
 8002d58:	1852      	adds	r2, r2, r1
 8002d5a:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	195b      	adds	r3, r3, r5
 8002d62:	191b      	adds	r3, r3, r4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	2208      	movs	r2, #8
 8002d6a:	18ba      	adds	r2, r7, r2
 8002d6c:	1952      	adds	r2, r2, r5
 8002d6e:	1912      	adds	r2, r2, r4
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	2398      	movs	r3, #152	; 0x98
 8002d74:	2218      	movs	r2, #24
 8002d76:	4694      	mov	ip, r2
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	44b8      	add	r8, r7
 8002d7e:	44c4      	add	ip, r8
 8002d80:	4463      	add	r3, ip
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	dd99      	ble.n	8002cbc <main+0x61c>
		 }
		 if (i==0)
 8002d88:	249c      	movs	r4, #156	; 0x9c
 8002d8a:	2518      	movs	r5, #24
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	195b      	adds	r3, r3, r5
 8002d92:	191b      	adds	r3, r3, r4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d14b      	bne.n	8002e32 <main+0x792>
		 {
			 vect[i][4] = T31pulseWidth;
 8002d9a:	4bbd      	ldr	r3, [pc, #756]	; (8003090 <main+0x9f0>)
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	2308      	movs	r3, #8
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	1958      	adds	r0, r3, r5
 8002da4:	2308      	movs	r3, #8
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	195b      	adds	r3, r3, r5
 8002daa:	191b      	adds	r3, r3, r4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	0013      	movs	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	18c3      	adds	r3, r0, r3
 8002db8:	3310      	adds	r3, #16
 8002dba:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	1959      	adds	r1, r3, r5
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	195b      	adds	r3, r3, r5
 8002dc8:	191b      	adds	r3, r3, r4
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	0013      	movs	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	18cb      	adds	r3, r1, r3
 8002dd6:	3310      	adds	r3, #16
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2105      	movs	r1, #5
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7fd f9b9 	bl	8000154 <__udivsi3>
 8002de2:	0003      	movs	r3, r0
 8002de4:	001a      	movs	r2, r3
 8002de6:	21a8      	movs	r1, #168	; 0xa8
 8002de8:	2308      	movs	r3, #8
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	195b      	adds	r3, r3, r5
 8002dee:	185b      	adds	r3, r3, r1
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	2208      	movs	r2, #8
 8002df6:	18ba      	adds	r2, r7, r2
 8002df8:	1952      	adds	r2, r2, r5
 8002dfa:	1852      	adds	r2, r2, r1
 8002dfc:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 8002dfe:	4ba4      	ldr	r3, [pc, #656]	; (8003090 <main+0x9f0>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2308      	movs	r3, #8
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	195b      	adds	r3, r3, r5
 8002e08:	185b      	adds	r3, r3, r1
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	3305      	adds	r3, #5
 8002e10:	da00      	bge.n	8002e14 <main+0x774>
 8002e12:	e108      	b.n	8003026 <main+0x986>
 8002e14:	4b9e      	ldr	r3, [pc, #632]	; (8003090 <main+0x9f0>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2308      	movs	r3, #8
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	195b      	adds	r3, r3, r5
 8002e1e:	185b      	adds	r3, r3, r1
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	dd00      	ble.n	8002e2a <main+0x78a>
 8002e28:	e0fd      	b.n	8003026 <main+0x986>
				 T31pulseWidth = 0;
 8002e2a:	4b99      	ldr	r3, [pc, #612]	; (8003090 <main+0x9f0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e0f9      	b.n	8003026 <main+0x986>
		 }
		 else if (i==1)
 8002e32:	249c      	movs	r4, #156	; 0x9c
 8002e34:	2518      	movs	r5, #24
 8002e36:	2308      	movs	r3, #8
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	195b      	adds	r3, r3, r5
 8002e3c:	191b      	adds	r3, r3, r4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d14b      	bne.n	8002edc <main+0x83c>
		 {
			 vect[i][4] = T32pulseWidth;
 8002e44:	4b93      	ldr	r3, [pc, #588]	; (8003094 <main+0x9f4>)
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	2308      	movs	r3, #8
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	1958      	adds	r0, r3, r5
 8002e4e:	2308      	movs	r3, #8
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	195b      	adds	r3, r3, r5
 8002e54:	191b      	adds	r3, r3, r4
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	0013      	movs	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	18c3      	adds	r3, r0, r3
 8002e62:	3310      	adds	r3, #16
 8002e64:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002e66:	2308      	movs	r3, #8
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	1959      	adds	r1, r3, r5
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	195b      	adds	r3, r3, r5
 8002e72:	191b      	adds	r3, r3, r4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	0013      	movs	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	18cb      	adds	r3, r1, r3
 8002e80:	3310      	adds	r3, #16
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2105      	movs	r1, #5
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fd f964 	bl	8000154 <__udivsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	001a      	movs	r2, r3
 8002e90:	21a8      	movs	r1, #168	; 0xa8
 8002e92:	2308      	movs	r3, #8
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	195b      	adds	r3, r3, r5
 8002e98:	185b      	adds	r3, r3, r1
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	189b      	adds	r3, r3, r2
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	18ba      	adds	r2, r7, r2
 8002ea2:	1952      	adds	r2, r2, r5
 8002ea4:	1852      	adds	r2, r2, r1
 8002ea6:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 8002ea8:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <main+0x9f4>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2308      	movs	r3, #8
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	195b      	adds	r3, r3, r5
 8002eb2:	185b      	adds	r3, r3, r1
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	3305      	adds	r3, #5
 8002eba:	da00      	bge.n	8002ebe <main+0x81e>
 8002ebc:	e0b3      	b.n	8003026 <main+0x986>
 8002ebe:	4b75      	ldr	r3, [pc, #468]	; (8003094 <main+0x9f4>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	195b      	adds	r3, r3, r5
 8002ec8:	185b      	adds	r3, r3, r1
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	dd00      	ble.n	8002ed4 <main+0x834>
 8002ed2:	e0a8      	b.n	8003026 <main+0x986>
				 T32pulseWidth = 0;
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <main+0x9f4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e0a4      	b.n	8003026 <main+0x986>
		 }
		 else if (i==2)
 8002edc:	249c      	movs	r4, #156	; 0x9c
 8002ede:	2518      	movs	r5, #24
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	195b      	adds	r3, r3, r5
 8002ee6:	191b      	adds	r3, r3, r4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d149      	bne.n	8002f82 <main+0x8e2>
		 {
			 vect[i][4] = T33pulseWidth;
 8002eee:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <main+0x9f8>)
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	1958      	adds	r0, r3, r5
 8002ef8:	2308      	movs	r3, #8
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	195b      	adds	r3, r3, r5
 8002efe:	191b      	adds	r3, r3, r4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	0013      	movs	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	18c3      	adds	r3, r0, r3
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002f10:	2308      	movs	r3, #8
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	1959      	adds	r1, r3, r5
 8002f16:	2308      	movs	r3, #8
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	195b      	adds	r3, r3, r5
 8002f1c:	191b      	adds	r3, r3, r4
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	0013      	movs	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	18cb      	adds	r3, r1, r3
 8002f2a:	3310      	adds	r3, #16
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2105      	movs	r1, #5
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fd f90f 	bl	8000154 <__udivsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	001a      	movs	r2, r3
 8002f3a:	21a8      	movs	r1, #168	; 0xa8
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	195b      	adds	r3, r3, r5
 8002f42:	185b      	adds	r3, r3, r1
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	2208      	movs	r2, #8
 8002f4a:	18ba      	adds	r2, r7, r2
 8002f4c:	1952      	adds	r2, r2, r5
 8002f4e:	1852      	adds	r2, r2, r1
 8002f50:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <main+0x9f8>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2308      	movs	r3, #8
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	195b      	adds	r3, r3, r5
 8002f5c:	185b      	adds	r3, r3, r1
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	3305      	adds	r3, #5
 8002f64:	db5f      	blt.n	8003026 <main+0x986>
 8002f66:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <main+0x9f8>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	195b      	adds	r3, r3, r5
 8002f70:	185b      	adds	r3, r3, r1
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	dc55      	bgt.n	8003026 <main+0x986>
				 T33pulseWidth = 0;
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <main+0x9f8>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e051      	b.n	8003026 <main+0x986>
		 }
		 else if (i==3)
 8002f82:	249c      	movs	r4, #156	; 0x9c
 8002f84:	2518      	movs	r5, #24
 8002f86:	2308      	movs	r3, #8
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	195b      	adds	r3, r3, r5
 8002f8c:	191b      	adds	r3, r3, r4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d148      	bne.n	8003026 <main+0x986>
		 {
			 vect[i][4] = T34pulseWidth;
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <main+0x9fc>)
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	2308      	movs	r3, #8
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	1958      	adds	r0, r3, r5
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	195b      	adds	r3, r3, r5
 8002fa4:	191b      	adds	r3, r3, r4
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	0013      	movs	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	18c3      	adds	r3, r0, r3
 8002fb2:	3310      	adds	r3, #16
 8002fb4:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	1959      	adds	r1, r3, r5
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	195b      	adds	r3, r3, r5
 8002fc2:	191b      	adds	r3, r3, r4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	0013      	movs	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	18cb      	adds	r3, r1, r3
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2105      	movs	r1, #5
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd f8bc 	bl	8000154 <__udivsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	001a      	movs	r2, r3
 8002fe0:	21a8      	movs	r1, #168	; 0xa8
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	195b      	adds	r3, r3, r5
 8002fe8:	185b      	adds	r3, r3, r1
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	2208      	movs	r2, #8
 8002ff0:	18ba      	adds	r2, r7, r2
 8002ff2:	1952      	adds	r2, r2, r5
 8002ff4:	1852      	adds	r2, r2, r1
 8002ff6:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <main+0x9fc>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	195b      	adds	r3, r3, r5
 8003002:	185b      	adds	r3, r3, r1
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	3305      	adds	r3, #5
 800300a:	db0c      	blt.n	8003026 <main+0x986>
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <main+0x9fc>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2308      	movs	r3, #8
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	195b      	adds	r3, r3, r5
 8003016:	185b      	adds	r3, r3, r1
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	dc02      	bgt.n	8003026 <main+0x986>
				 T34pulseWidth = 0;
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <main+0x9fc>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8003026:	229c      	movs	r2, #156	; 0x9c
 8003028:	2318      	movs	r3, #24
 800302a:	2108      	movs	r1, #8
 800302c:	468c      	mov	ip, r1
 800302e:	44bc      	add	ip, r7
 8003030:	4463      	add	r3, ip
 8003032:	189b      	adds	r3, r3, r2
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	2118      	movs	r1, #24
 800303a:	468c      	mov	ip, r1
 800303c:	2108      	movs	r1, #8
 800303e:	4688      	mov	r8, r1
 8003040:	44b8      	add	r8, r7
 8003042:	44c4      	add	ip, r8
 8003044:	4462      	add	r2, ip
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	239c      	movs	r3, #156	; 0x9c
 800304a:	2218      	movs	r2, #24
 800304c:	4694      	mov	ip, r2
 800304e:	2208      	movs	r2, #8
 8003050:	4690      	mov	r8, r2
 8003052:	44b8      	add	r8, r7
 8003054:	44c4      	add	ip, r8
 8003056:	4463      	add	r3, ip
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b03      	cmp	r3, #3
 800305c:	dc00      	bgt.n	8003060 <main+0x9c0>
 800305e:	e5fe      	b.n	8002c5e <main+0x5be>
		 }
	 }

	 HAL_Delay(500);
 8003060:	23fa      	movs	r3, #250	; 0xfa
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	0018      	movs	r0, r3
 8003066:	f001 fa1f 	bl	80044a8 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 if (UART_newMessage == 1)
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <main+0xa00>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d000      	beq.n	8003074 <main+0x9d4>
 8003072:	e49a      	b.n	80029aa <main+0x30a>
	 {
		 // check if received string contains [drv] message and parse it
		 drv_messageCheck(rxString);
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <main+0xa04>)
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fb6c 	bl	8003754 <drv_messageCheck>
		 // clear received b
		 memset(rxString, 0, sizeof(rxString));
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <main+0xa04>)
 800307e:	2264      	movs	r2, #100	; 0x64
 8003080:	2100      	movs	r1, #0
 8003082:	0018      	movs	r0, r3
 8003084:	f005 fb48 	bl	8008718 <memset>
		 // set newMessage flag to 0 to begin new string receive
		 UART_newMessage = 0;
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <main+0xa00>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
	cycleCounter++;
 800308e:	e48c      	b.n	80029aa <main+0x30a>
 8003090:	200001fc 	.word	0x200001fc
 8003094:	20000220 	.word	0x20000220
 8003098:	20000244 	.word	0x20000244
 800309c:	20000268 	.word	0x20000268
 80030a0:	2000028d 	.word	0x2000028d
 80030a4:	20000290 	.word	0x20000290

080030a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b091      	sub	sp, #68	; 0x44
 80030ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ae:	2410      	movs	r4, #16
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	0018      	movs	r0, r3
 80030b4:	2330      	movs	r3, #48	; 0x30
 80030b6:	001a      	movs	r2, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	f005 fb2d 	bl	8008718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030be:	003b      	movs	r3, r7
 80030c0:	0018      	movs	r0, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	001a      	movs	r2, r3
 80030c6:	2100      	movs	r1, #0
 80030c8:	f005 fb26 	bl	8008718 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030cc:	0021      	movs	r1, r4
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	2202      	movs	r2, #2
 80030d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	2201      	movs	r2, #1
 80030d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	2210      	movs	r2, #16
 80030de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2200      	movs	r2, #0
 80030e4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	0018      	movs	r0, r3
 80030ea:	f001 fe9f 	bl	8004e2c <HAL_RCC_OscConfig>
 80030ee:	1e03      	subs	r3, r0, #0
 80030f0:	d001      	beq.n	80030f6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80030f2:	f000 fe2d 	bl	8003d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f6:	003b      	movs	r3, r7
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030fc:	003b      	movs	r3, r7
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003102:	003b      	movs	r3, r7
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003108:	003b      	movs	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800310e:	003b      	movs	r3, r7
 8003110:	2100      	movs	r1, #0
 8003112:	0018      	movs	r0, r3
 8003114:	f002 f9a8 	bl	8005468 <HAL_RCC_ClockConfig>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800311c:	f000 fe18 	bl	8003d50 <Error_Handler>
  }
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b011      	add	sp, #68	; 0x44
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b096      	sub	sp, #88	; 0x58
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800312e:	2348      	movs	r3, #72	; 0x48
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	0018      	movs	r0, r3
 8003134:	2310      	movs	r3, #16
 8003136:	001a      	movs	r2, r3
 8003138:	2100      	movs	r1, #0
 800313a:	f005 faed 	bl	8008718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800313e:	2340      	movs	r3, #64	; 0x40
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	0018      	movs	r0, r3
 8003144:	2308      	movs	r3, #8
 8003146:	001a      	movs	r2, r3
 8003148:	2100      	movs	r1, #0
 800314a:	f005 fae5 	bl	8008718 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800314e:	2324      	movs	r3, #36	; 0x24
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	0018      	movs	r0, r3
 8003154:	231c      	movs	r3, #28
 8003156:	001a      	movs	r2, r3
 8003158:	2100      	movs	r1, #0
 800315a:	f005 fadd 	bl	8008718 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	0018      	movs	r0, r3
 8003162:	2320      	movs	r3, #32
 8003164:	001a      	movs	r2, r3
 8003166:	2100      	movs	r1, #0
 8003168:	f005 fad6 	bl	8008718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 800316e:	4a57      	ldr	r2, [pc, #348]	; (80032cc <MX_TIM1_Init+0x1a4>)
 8003170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8003172:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003174:	229f      	movs	r2, #159	; 0x9f
 8003176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003178:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003180:	2263      	movs	r2, #99	; 0x63
 8003182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003184:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800318a:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003190:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003196:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003198:	0018      	movs	r0, r3
 800319a:	f002 fab9 	bl	8005710 <HAL_TIM_Base_Init>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80031a2:	f000 fdd5 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a6:	2148      	movs	r1, #72	; 0x48
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0152      	lsls	r2, r2, #5
 80031ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031b0:	187a      	adds	r2, r7, r1
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 80031b4:	0011      	movs	r1, r2
 80031b6:	0018      	movs	r0, r3
 80031b8:	f003 f99a 	bl	80064f0 <HAL_TIM_ConfigClockSource>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80031c0:	f000 fdc6 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031c4:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 80031c6:	0018      	movs	r0, r3
 80031c8:	f002 faf2 	bl	80057b0 <HAL_TIM_PWM_Init>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80031d0:	f000 fdbe 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d4:	2140      	movs	r1, #64	; 0x40
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e2:	187a      	adds	r2, r7, r1
 80031e4:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f003 fef1 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80031f2:	f000 fdad 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031f6:	2124      	movs	r1, #36	; 0x24
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2260      	movs	r2, #96	; 0x60
 80031fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2200      	movs	r2, #0
 8003202:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2200      	movs	r2, #0
 800320e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003222:	1879      	adds	r1, r7, r1
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003226:	2200      	movs	r2, #0
 8003228:	0018      	movs	r0, r3
 800322a:	f003 f89b 	bl	8006364 <HAL_TIM_PWM_ConfigChannel>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003232:	f000 fd8d 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003236:	2324      	movs	r3, #36	; 0x24
 8003238:	18f9      	adds	r1, r7, r3
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 800323c:	2204      	movs	r2, #4
 800323e:	0018      	movs	r0, r3
 8003240:	f003 f890 	bl	8006364 <HAL_TIM_PWM_ConfigChannel>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d001      	beq.n	800324c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8003248:	f000 fd82 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800324c:	2324      	movs	r3, #36	; 0x24
 800324e:	18f9      	adds	r1, r7, r3
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003252:	2208      	movs	r2, #8
 8003254:	0018      	movs	r0, r3
 8003256:	f003 f885 	bl	8006364 <HAL_TIM_PWM_ConfigChannel>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800325e:	f000 fd77 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003262:	2324      	movs	r3, #36	; 0x24
 8003264:	18f9      	adds	r1, r7, r3
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 8003268:	220c      	movs	r2, #12
 800326a:	0018      	movs	r0, r3
 800326c:	f003 f87a 	bl	8006364 <HAL_TIM_PWM_ConfigChannel>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003274:	f000 fd6c 	bl	8003d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	2200      	movs	r2, #0
 800328e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	0192      	lsls	r2, r2, #6
 800329c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032a4:	1d3a      	adds	r2, r7, #4
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 80032a8:	0011      	movs	r1, r2
 80032aa:	0018      	movs	r0, r3
 80032ac:	f003 fee8 	bl	8007080 <HAL_TIMEx_ConfigBreakDeadTime>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80032b4:	f000 fd4c 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <MX_TIM1_Init+0x1a0>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 fe2a 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b016      	add	sp, #88	; 0x58
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2000054c 	.word	0x2000054c
 80032cc:	40012c00 	.word	0x40012c00

080032d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d6:	2310      	movs	r3, #16
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	0018      	movs	r0, r3
 80032dc:	2308      	movs	r3, #8
 80032de:	001a      	movs	r2, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	f005 fa19 	bl	8008718 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80032e6:	003b      	movs	r3, r7
 80032e8:	0018      	movs	r0, r3
 80032ea:	2310      	movs	r3, #16
 80032ec:	001a      	movs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	f005 fa12 	bl	8008718 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <MX_TIM3_Init+0xec>)
 80032f6:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <MX_TIM3_Init+0xf0>)
 80032f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80032fa:	4b30      	ldr	r3, [pc, #192]	; (80033bc <MX_TIM3_Init+0xec>)
 80032fc:	224f      	movs	r2, #79	; 0x4f
 80032fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003300:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <MX_TIM3_Init+0xec>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8003306:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <MX_TIM3_Init+0xec>)
 8003308:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <MX_TIM3_Init+0xf4>)
 800330a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <MX_TIM3_Init+0xec>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <MX_TIM3_Init+0xec>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <MX_TIM3_Init+0xec>)
 800331a:	0018      	movs	r0, r3
 800331c:	f002 fd10 	bl	8005d40 <HAL_TIM_IC_Init>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003324:	f000 fd14 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003328:	2110      	movs	r1, #16
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	187b      	adds	r3, r7, r1
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003336:	187a      	adds	r2, r7, r1
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <MX_TIM3_Init+0xec>)
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f003 fe47 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003346:	f000 fd03 	bl	8003d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800334a:	003b      	movs	r3, r7
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003350:	003b      	movs	r3, r7
 8003352:	2201      	movs	r2, #1
 8003354:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003356:	003b      	movs	r3, r7
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 800335c:	003b      	movs	r3, r7
 800335e:	2203      	movs	r2, #3
 8003360:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003362:	0039      	movs	r1, r7
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <MX_TIM3_Init+0xec>)
 8003366:	2200      	movs	r2, #0
 8003368:	0018      	movs	r0, r3
 800336a:	f002 ff57 	bl	800621c <HAL_TIM_IC_ConfigChannel>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003372:	f000 fced 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003376:	0039      	movs	r1, r7
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <MX_TIM3_Init+0xec>)
 800337a:	2204      	movs	r2, #4
 800337c:	0018      	movs	r0, r3
 800337e:	f002 ff4d 	bl	800621c <HAL_TIM_IC_ConfigChannel>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8003386:	f000 fce3 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800338a:	0039      	movs	r1, r7
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <MX_TIM3_Init+0xec>)
 800338e:	2208      	movs	r2, #8
 8003390:	0018      	movs	r0, r3
 8003392:	f002 ff43 	bl	800621c <HAL_TIM_IC_ConfigChannel>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d001      	beq.n	800339e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800339a:	f000 fcd9 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800339e:	0039      	movs	r1, r7
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_TIM3_Init+0xec>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	0018      	movs	r0, r3
 80033a6:	f002 ff39 	bl	800621c <HAL_TIM_IC_ConfigChannel>
 80033aa:	1e03      	subs	r3, r0, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80033ae:	f000 fccf 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b006      	add	sp, #24
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	200004d4 	.word	0x200004d4
 80033c0:	40000400 	.word	0x40000400
 80033c4:	0000c34f 	.word	0x0000c34f

080033c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b096      	sub	sp, #88	; 0x58
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ce:	2348      	movs	r3, #72	; 0x48
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	0018      	movs	r0, r3
 80033d4:	2310      	movs	r3, #16
 80033d6:	001a      	movs	r2, r3
 80033d8:	2100      	movs	r1, #0
 80033da:	f005 f99d 	bl	8008718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033de:	2340      	movs	r3, #64	; 0x40
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	0018      	movs	r0, r3
 80033e4:	2308      	movs	r3, #8
 80033e6:	001a      	movs	r2, r3
 80033e8:	2100      	movs	r1, #0
 80033ea:	f005 f995 	bl	8008718 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ee:	2324      	movs	r3, #36	; 0x24
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	0018      	movs	r0, r3
 80033f4:	231c      	movs	r3, #28
 80033f6:	001a      	movs	r2, r3
 80033f8:	2100      	movs	r1, #0
 80033fa:	f005 f98d 	bl	8008718 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	0018      	movs	r0, r3
 8003402:	2320      	movs	r3, #32
 8003404:	001a      	movs	r2, r3
 8003406:	2100      	movs	r1, #0
 8003408:	f005 f986 	bl	8008718 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800340c:	4b4b      	ldr	r3, [pc, #300]	; (800353c <MX_TIM15_Init+0x174>)
 800340e:	4a4c      	ldr	r2, [pc, #304]	; (8003540 <MX_TIM15_Init+0x178>)
 8003410:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 160-1;
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <MX_TIM15_Init+0x174>)
 8003414:	229f      	movs	r2, #159	; 0x9f
 8003416:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <MX_TIM15_Init+0x174>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <MX_TIM15_Init+0x174>)
 8003420:	2204      	movs	r2, #4
 8003422:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003424:	4b45      	ldr	r3, [pc, #276]	; (800353c <MX_TIM15_Init+0x174>)
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 800342a:	4b44      	ldr	r3, [pc, #272]	; (800353c <MX_TIM15_Init+0x174>)
 800342c:	2264      	movs	r2, #100	; 0x64
 800342e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003430:	4b42      	ldr	r3, [pc, #264]	; (800353c <MX_TIM15_Init+0x174>)
 8003432:	2200      	movs	r2, #0
 8003434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <MX_TIM15_Init+0x174>)
 8003438:	0018      	movs	r0, r3
 800343a:	f002 f969 	bl	8005710 <HAL_TIM_Base_Init>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8003442:	f000 fc85 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003446:	2148      	movs	r1, #72	; 0x48
 8003448:	187b      	adds	r3, r7, r1
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	0152      	lsls	r2, r2, #5
 800344e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003450:	187a      	adds	r2, r7, r1
 8003452:	4b3a      	ldr	r3, [pc, #232]	; (800353c <MX_TIM15_Init+0x174>)
 8003454:	0011      	movs	r1, r2
 8003456:	0018      	movs	r0, r3
 8003458:	f003 f84a 	bl	80064f0 <HAL_TIM_ConfigClockSource>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003460:	f000 fc76 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003464:	4b35      	ldr	r3, [pc, #212]	; (800353c <MX_TIM15_Init+0x174>)
 8003466:	0018      	movs	r0, r3
 8003468:	f002 f9a2 	bl	80057b0 <HAL_TIM_PWM_Init>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003470:	f000 fc6e 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	2200      	movs	r2, #0
 8003480:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003482:	187a      	adds	r2, r7, r1
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <MX_TIM15_Init+0x174>)
 8003486:	0011      	movs	r1, r2
 8003488:	0018      	movs	r0, r3
 800348a:	f003 fda1 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8003492:	f000 fc5d 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003496:	2124      	movs	r1, #36	; 0x24
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2260      	movs	r2, #96	; 0x60
 800349c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2200      	movs	r2, #0
 80034ae:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2200      	movs	r2, #0
 80034c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034c2:	1879      	adds	r1, r7, r1
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <MX_TIM15_Init+0x174>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	0018      	movs	r0, r3
 80034ca:	f002 ff4b 	bl	8006364 <HAL_TIM_PWM_ConfigChannel>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80034d2:	f000 fc3d 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034d6:	2324      	movs	r3, #36	; 0x24
 80034d8:	18f9      	adds	r1, r7, r3
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <MX_TIM15_Init+0x174>)
 80034dc:	2204      	movs	r2, #4
 80034de:	0018      	movs	r0, r3
 80034e0:	f002 ff40 	bl	8006364 <HAL_TIM_PWM_ConfigChannel>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80034e8:	f000 fc32 	bl	8003d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0192      	lsls	r2, r2, #6
 8003510:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	2200      	movs	r2, #0
 8003516:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003518:	1d3a      	adds	r2, r7, #4
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <MX_TIM15_Init+0x174>)
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f003 fdae 	bl	8007080 <HAL_TIMEx_ConfigBreakDeadTime>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 8003528:	f000 fc12 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <MX_TIM15_Init+0x174>)
 800352e:	0018      	movs	r0, r3
 8003530:	f000 fcf0 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b016      	add	sp, #88	; 0x58
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000448 	.word	0x20000448
 8003540:	40014000 	.word	0x40014000

08003544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <MX_USART3_UART_Init+0x58>)
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <MX_USART3_UART_Init+0x5c>)
 800354c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003550:	22e1      	movs	r2, #225	; 0xe1
 8003552:	0252      	lsls	r2, r2, #9
 8003554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <MX_USART3_UART_Init+0x58>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_USART3_UART_Init+0x58>)
 800356a:	220c      	movs	r2, #12
 800356c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <MX_USART3_UART_Init+0x58>)
 800357c:	2200      	movs	r2, #0
 800357e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003582:	2200      	movs	r2, #0
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <MX_USART3_UART_Init+0x58>)
 8003588:	0018      	movs	r0, r3
 800358a:	f003 fde7 	bl	800715c <HAL_UART_Init>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d001      	beq.n	8003596 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003592:	f000 fbdd 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200003c4 	.word	0x200003c4
 80035a0:	40004800 	.word	0x40004800

080035a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <MX_DMA_Init+0x38>)
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <MX_DMA_Init+0x38>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	430a      	orrs	r2, r1
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <MX_DMA_Init+0x38>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4013      	ands	r3, r2
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	200a      	movs	r0, #10
 80035c8:	f001 f83e 	bl	8004648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80035cc:	200a      	movs	r0, #10
 80035ce:	f001 f850 	bl	8004672 <HAL_NVIC_EnableIRQ>

}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	40021000 	.word	0x40021000

080035e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e6:	2414      	movs	r4, #20
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	0018      	movs	r0, r3
 80035ec:	2314      	movs	r3, #20
 80035ee:	001a      	movs	r2, r3
 80035f0:	2100      	movs	r1, #0
 80035f2:	f005 f891 	bl	8008718 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <MX_GPIO_Init+0x124>)
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	4b42      	ldr	r3, [pc, #264]	; (8003704 <MX_GPIO_Init+0x124>)
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0309      	lsls	r1, r1, #12
 8003600:	430a      	orrs	r2, r1
 8003602:	615a      	str	r2, [r3, #20]
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <MX_GPIO_Init+0x124>)
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	031b      	lsls	r3, r3, #12
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003612:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <MX_GPIO_Init+0x124>)
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <MX_GPIO_Init+0x124>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	03c9      	lsls	r1, r1, #15
 800361c:	430a      	orrs	r2, r1
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <MX_GPIO_Init+0x124>)
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	03db      	lsls	r3, r3, #15
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	4b35      	ldr	r3, [pc, #212]	; (8003704 <MX_GPIO_Init+0x124>)
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <MX_GPIO_Init+0x124>)
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	02c9      	lsls	r1, r1, #11
 8003638:	430a      	orrs	r2, r1
 800363a:	615a      	str	r2, [r3, #20]
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <MX_GPIO_Init+0x124>)
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	02db      	lsls	r3, r3, #11
 8003644:	4013      	ands	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <MX_GPIO_Init+0x124>)
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <MX_GPIO_Init+0x124>)
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	0289      	lsls	r1, r1, #10
 8003654:	430a      	orrs	r2, r1
 8003656:	615a      	str	r2, [r3, #20]
 8003658:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <MX_GPIO_Init+0x124>)
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4013      	ands	r3, r2
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 8003666:	4928      	ldr	r1, [pc, #160]	; (8003708 <MX_GPIO_Init+0x128>)
 8003668:	4b28      	ldr	r3, [pc, #160]	; (800370c <MX_GPIO_Init+0x12c>)
 800366a:	2200      	movs	r2, #0
 800366c:	0018      	movs	r0, r3
 800366e:	f001 fbc0 	bl	8004df2 <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003672:	193b      	adds	r3, r7, r4
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	0192      	lsls	r2, r2, #6
 8003678:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800367a:	193b      	adds	r3, r7, r4
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2201      	movs	r2, #1
 8003684:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003686:	193b      	adds	r3, r7, r4
 8003688:	4a20      	ldr	r2, [pc, #128]	; (800370c <MX_GPIO_Init+0x12c>)
 800368a:	0019      	movs	r1, r3
 800368c:	0010      	movs	r0, r2
 800368e:	f001 fa23 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003692:	0021      	movs	r1, r4
 8003694:	187b      	adds	r3, r7, r1
 8003696:	22c0      	movs	r2, #192	; 0xc0
 8003698:	0212      	lsls	r2, r2, #8
 800369a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369c:	000c      	movs	r4, r1
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	2200      	movs	r2, #0
 80036a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <MX_GPIO_Init+0x12c>)
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f001 fa11 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <MX_GPIO_Init+0x128>)
 80036ba:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	2201      	movs	r2, #1
 80036c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	4a0e      	ldr	r2, [pc, #56]	; (800370c <MX_GPIO_Init+0x12c>)
 80036d2:	0019      	movs	r1, r3
 80036d4:	0010      	movs	r0, r2
 80036d6:	f001 f9ff 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80036da:	0021      	movs	r1, r4
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	2201      	movs	r2, #1
 80036ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <MX_GPIO_Init+0x130>)
 80036f2:	0019      	movs	r1, r3
 80036f4:	0010      	movs	r0, r2
 80036f6:	f001 f9ef 	bl	8004ad8 <HAL_GPIO_Init>

}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b00b      	add	sp, #44	; 0x2c
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	40021000 	.word	0x40021000
 8003708:	0000040f 	.word	0x0000040f
 800370c:	48000800 	.word	0x48000800
 8003710:	48000400 	.word	0x48000400

08003714 <UART_Send>:

/* USER CODE BEGIN 4 */

void UART_Send(const char message[])
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	while(UART_TX_Busy){};
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <UART_Send+0x38>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1fa      	bne.n	800371e <UART_Send+0xa>
	UART_TX_Busy = 1;
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <UART_Send+0x38>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)message, strlen(message));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f7fc fcf3 	bl	800011c <strlen>
 8003736:	0003      	movs	r3, r0
 8003738:	b29a      	uxth	r2, r3
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <UART_Send+0x3c>)
 800373e:	0018      	movs	r0, r3
 8003740:	f003 fe0a 	bl	8007358 <HAL_UART_Transmit_DMA>
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200002f4 	.word	0x200002f4
 8003750:	200003c4 	.word	0x200003c4

08003754 <drv_messageCheck>:

void drv_messageCheck(const char message[])
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b09b      	sub	sp, #108	; 0x6c
 8003758:	af06      	add	r7, sp, #24
 800375a:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <drv_messageCheck+0x14c>)
 8003760:	0011      	movs	r1, r2
 8003762:	0018      	movs	r0, r3
 8003764:	f005 fefc 	bl	8009560 <strcpy>

	uint8_t MSG[5] = {'\0'};
 8003768:	2548      	movs	r5, #72	; 0x48
 800376a:	197b      	adds	r3, r7, r5
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	711a      	strb	r2, [r3, #4]
	int arw1=0, arw2=0, arw3=0, arw4=0, motor_brk=0;
 8003774:	2300      	movs	r3, #0
 8003776:	647b      	str	r3, [r7, #68]	; 0x44
 8003778:	2300      	movs	r3, #0
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
 800377c:	2300      	movs	r3, #0
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	2300      	movs	r3, #0
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
	int turn=0;
 8003788:	2300      	movs	r3, #0
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
	sscanf(cmd_buf, "%s %d %d %d %d %d %d", &MSG, &arw1, &arw2, &arw3, &arw4, &turn, &motor_brk);
 800378c:	2344      	movs	r3, #68	; 0x44
 800378e:	18fc      	adds	r4, r7, r3
 8003790:	197a      	adds	r2, r7, r5
 8003792:	4944      	ldr	r1, [pc, #272]	; (80038a4 <drv_messageCheck+0x150>)
 8003794:	4842      	ldr	r0, [pc, #264]	; (80038a0 <drv_messageCheck+0x14c>)
 8003796:	2334      	movs	r3, #52	; 0x34
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	2330      	movs	r3, #48	; 0x30
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	2338      	movs	r3, #56	; 0x38
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	233c      	movs	r3, #60	; 0x3c
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	2340      	movs	r3, #64	; 0x40
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	0023      	movs	r3, r4
 80037b6:	f005 fe5d 	bl	8009474 <siscanf>
	if (!strcmp(MSG, "[drv]")) // returns 0 if strings are equal
 80037ba:	4a3b      	ldr	r2, [pc, #236]	; (80038a8 <drv_messageCheck+0x154>)
 80037bc:	197b      	adds	r3, r7, r5
 80037be:	0011      	movs	r1, r2
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7fc fca1 	bl	8000108 <strcmp>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d165      	bne.n	8003896 <drv_messageCheck+0x142>
	{
		uint8_t reply[40] = {'\0'};
 80037ca:	2408      	movs	r4, #8
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	3304      	adds	r3, #4
 80037d4:	2224      	movs	r2, #36	; 0x24
 80037d6:	2100      	movs	r1, #0
 80037d8:	0018      	movs	r0, r3
 80037da:	f004 ff9d 	bl	8008718 <memset>
		sprintf(reply, "received: %d %d %d %d %d %d \n", arw1, arw2, arw3, arw4, turn, motor_brk);
 80037de:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 80037e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e2:	469c      	mov	ip, r3
 80037e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037ec:	4d2f      	ldr	r5, [pc, #188]	; (80038ac <drv_messageCheck+0x158>)
 80037ee:	193c      	adds	r4, r7, r4
 80037f0:	9003      	str	r0, [sp, #12]
 80037f2:	9102      	str	r1, [sp, #8]
 80037f4:	9201      	str	r2, [sp, #4]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4663      	mov	r3, ip
 80037fa:	0032      	movs	r2, r6
 80037fc:	0029      	movs	r1, r5
 80037fe:	0020      	movs	r0, r4
 8003800:	f005 fe18 	bl	8009434 <siprintf>
		UART_Send(reply);
 8003804:	2408      	movs	r4, #8
 8003806:	193b      	adds	r3, r7, r4
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff ff83 	bl	8003714 <UART_Send>
		motorPWM_pulse(&htim1, pMW[0], arw1 );
 800380e:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <drv_messageCheck+0x15c>)
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <drv_messageCheck+0x160>)
 8003818:	0018      	movs	r0, r3
 800381a:	f7fe fe11 	bl	8002440 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[1], arw2 );
 800381e:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <drv_messageCheck+0x15c>)
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <drv_messageCheck+0x160>)
 8003828:	0018      	movs	r0, r3
 800382a:	f7fe fe09 	bl	8002440 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[2], arw3 );
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <drv_messageCheck+0x15c>)
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <drv_messageCheck+0x160>)
 8003838:	0018      	movs	r0, r3
 800383a:	f7fe fe01 	bl	8002440 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[3], arw4 );
 800383e:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <drv_messageCheck+0x15c>)
 8003840:	68d9      	ldr	r1, [r3, #12]
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <drv_messageCheck+0x160>)
 8003848:	0018      	movs	r0, r3
 800384a:	f7fe fdf9 	bl	8002440 <motorPWM_pulse>
		// Since only 1 break pin is used, it is enough to call this function for only 1 wheel
		motor_break(pMW[0], motor_brk);
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <drv_messageCheck+0x15c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f7fe fe2b 	bl	80024b4 <motor_break>
		//motor_break(pMW[1], motor_brk);
		//motor_break(pMW[2], motor_brk);
		//motor_break(pMW[3], motor_brk);
		linear_motor_set_target(pLM[0], turn);
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <drv_messageCheck+0x164>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003864:	0011      	movs	r1, r2
 8003866:	0018      	movs	r0, r3
 8003868:	f7fe fe6e 	bl	8002548 <linear_motor_set_target>
		linear_motor_set_target(pLM[1], turn);
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <drv_messageCheck+0x164>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f7fe fe67 	bl	8002548 <linear_motor_set_target>
		linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <drv_messageCheck+0x164>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <drv_messageCheck+0x168>)
 8003880:	490f      	ldr	r1, [pc, #60]	; (80038c0 <drv_messageCheck+0x16c>)
 8003882:	0018      	movs	r0, r3
 8003884:	f7fe fe7e 	bl	8002584 <linear_motor_pulse>
		linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <drv_messageCheck+0x164>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <drv_messageCheck+0x170>)
 800388e:	490c      	ldr	r1, [pc, #48]	; (80038c0 <drv_messageCheck+0x16c>)
 8003890:	0018      	movs	r0, r3
 8003892:	f7fe fe77 	bl	8002584 <linear_motor_pulse>
	}
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b015      	add	sp, #84	; 0x54
 800389c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20000304 	.word	0x20000304
 80038a4:	0800da20 	.word	0x0800da20
 80038a8:	0800da38 	.word	0x0800da38
 80038ac:	0800da40 	.word	0x0800da40
 80038b0:	2000051c 	.word	0x2000051c
 80038b4:	2000054c 	.word	0x2000054c
 80038b8:	20000378 	.word	0x20000378
 80038bc:	200002f8 	.word	0x200002f8
 80038c0:	20000448 	.word	0x20000448
 80038c4:	200002fc 	.word	0x200002fc

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:

// Linear Motors Timers
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d12e      	bne.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7f1b      	ldrb	r3, [r3, #28]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d113      	bne.n	8003908 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 80038e0:	4b18      	ldr	r3, [pc, #96]	; (8003944 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80038f0:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 80038f2:	e020      	b.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 80038f4:	4b13      	ldr	r3, [pc, #76]	; (8003944 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11c      	bne.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80038fe:	2100      	movs	r1, #0
 8003900:	0018      	movs	r0, r3
 8003902:	f002 f959 	bl	8005bb8 <HAL_TIM_PWM_Stop_IT>
}
 8003906:	e016      	b.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7f1b      	ldrb	r3, [r3, #28]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d112      	bne.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	1e5a      	subs	r2, r3, #1
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003920:	601a      	str	r2, [r3, #0]
}
 8003922:	e008      	b.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800392e:	2104      	movs	r1, #4
 8003930:	0018      	movs	r0, r3
 8003932:	f002 f941 	bl	8005bb8 <HAL_TIM_PWM_Stop_IT>
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	20000448 	.word	0x20000448
 8003944:	200002f8 	.word	0x200002f8
 8003948:	200002fc 	.word	0x200002fc

0800394c <HAL_TIM_IC_CaptureCallback>:

// ENCODERS READING
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4aa9      	ldr	r2, [pc, #676]	; (8003c00 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d000      	beq.n	8003960 <HAL_TIM_IC_CaptureCallback+0x14>
 800395e:	e14a      	b.n	8003bf6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7f1b      	ldrb	r3, [r3, #28]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d14e      	bne.n	8003a06 <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8003968:	4ba6      	ldr	r3, [pc, #664]	; (8003c04 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800396a:	2100      	movs	r1, #0
 800396c:	0018      	movs	r0, r3
 800396e:	f002 fe93 	bl	8006698 <HAL_TIM_ReadCapturedValue>
 8003972:	0002      	movs	r2, r0
 8003974:	4ba4      	ldr	r3, [pc, #656]	; (8003c08 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003976:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 8003978:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4ba3      	ldr	r3, [pc, #652]	; (8003c0c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d93b      	bls.n	80039fc <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 8003984:	4ba2      	ldr	r3, [pc, #648]	; (8003c10 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e01a      	b.n	80039c6 <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	4b9f      	ldr	r3, [pc, #636]	; (8003c14 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003996:	0092      	lsls	r2, r2, #2
 8003998:	58d1      	ldr	r1, [r2, r3]
 800399a:	4b9e      	ldr	r3, [pc, #632]	; (8003c14 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	0092      	lsls	r2, r2, #2
 80039a0:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 80039a2:	4b9c      	ldr	r3, [pc, #624]	; (8003c14 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	0092      	lsls	r2, r2, #2
 80039a8:	58d3      	ldr	r3, [r2, r3]
 80039aa:	2105      	movs	r1, #5
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7fc fbd1 	bl	8000154 <__udivsi3>
 80039b2:	0003      	movs	r3, r0
 80039b4:	001a      	movs	r2, r3
 80039b6:	4b96      	ldr	r3, [pc, #600]	; (8003c10 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	18d2      	adds	r2, r2, r3
 80039bc:	4b94      	ldr	r3, [pc, #592]	; (8003c10 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80039be:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	dde1      	ble.n	8003990 <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 80039cc:	4b8e      	ldr	r3, [pc, #568]	; (8003c08 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b8e      	ldr	r3, [pc, #568]	; (8003c0c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1ad2      	subs	r2, r2, r3
 80039d6:	4b8f      	ldr	r3, [pc, #572]	; (8003c14 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80039d8:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 80039da:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2105      	movs	r1, #5
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fc fbb7 	bl	8000154 <__udivsi3>
 80039e6:	0003      	movs	r3, r0
 80039e8:	001a      	movs	r2, r3
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	18d2      	adds	r2, r2, r3
 80039f0:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80039f2:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 80039f4:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b87      	ldr	r3, [pc, #540]	; (8003c18 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80039fa:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 80039fc:	4b82      	ldr	r3, [pc, #520]	; (8003c08 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003a02:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 8003a04:	e0f7      	b.n	8003bf6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7f1b      	ldrb	r3, [r3, #28]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d14e      	bne.n	8003aac <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	; (8003c04 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003a10:	2104      	movs	r1, #4
 8003a12:	0018      	movs	r0, r3
 8003a14:	f002 fe40 	bl	8006698 <HAL_TIM_ReadCapturedValue>
 8003a18:	0002      	movs	r2, r0
 8003a1a:	4b80      	ldr	r3, [pc, #512]	; (8003c1c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003a1c:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 8003a1e:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b7f      	ldr	r3, [pc, #508]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d93b      	bls.n	8003aa2 <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 8003a2a:	4b7e      	ldr	r3, [pc, #504]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e01a      	b.n	8003a6c <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003a3c:	0092      	lsls	r2, r2, #2
 8003a3e:	58d1      	ldr	r1, [r2, r3]
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 8003a48:	4b77      	ldr	r3, [pc, #476]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	0092      	lsls	r2, r2, #2
 8003a4e:	58d3      	ldr	r3, [r2, r3]
 8003a50:	2105      	movs	r1, #5
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fb7e 	bl	8000154 <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	4b71      	ldr	r3, [pc, #452]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	18d2      	adds	r2, r2, r3
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003a64:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	dde1      	ble.n	8003a36 <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 8003a72:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1ad2      	subs	r2, r2, r3
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003a7e:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 8003a80:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2105      	movs	r1, #5
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fc fb64 	bl	8000154 <__udivsi3>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	001a      	movs	r2, r3
 8003a90:	4b64      	ldr	r3, [pc, #400]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	18d2      	adds	r2, r2, r3
 8003a96:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003a98:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 8003a9a:	4b62      	ldr	r3, [pc, #392]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8003aa0:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 8003aa2:	4b5e      	ldr	r3, [pc, #376]	; (8003c1c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003aa8:	601a      	str	r2, [r3, #0]
}
 8003aaa:	e0a4      	b.n	8003bf6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7f1b      	ldrb	r3, [r3, #28]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d14e      	bne.n	8003b52 <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f002 fded 	bl	8006698 <HAL_TIM_ReadCapturedValue>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003ac2:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 8003ac4:	4b5a      	ldr	r3, [pc, #360]	; (8003c30 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b5a      	ldr	r3, [pc, #360]	; (8003c34 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d93b      	bls.n	8003b48 <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e01a      	b.n	8003b12 <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	58d1      	ldr	r1, [r2, r3]
 8003ae6:	4b55      	ldr	r3, [pc, #340]	; (8003c3c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 8003aee:	4b53      	ldr	r3, [pc, #332]	; (8003c3c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	58d3      	ldr	r3, [r2, r3]
 8003af6:	2105      	movs	r1, #5
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fc fb2b 	bl	8000154 <__udivsi3>
 8003afe:	0003      	movs	r3, r0
 8003b00:	001a      	movs	r2, r3
 8003b02:	4b4d      	ldr	r3, [pc, #308]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	18d2      	adds	r2, r2, r3
 8003b08:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003b0a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	dde1      	ble.n	8003adc <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 8003b18:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1ad2      	subs	r2, r2, r3
 8003b22:	4b46      	ldr	r3, [pc, #280]	; (8003c3c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003b24:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 8003b26:	4b45      	ldr	r3, [pc, #276]	; (8003c3c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2105      	movs	r1, #5
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fc fb11 	bl	8000154 <__udivsi3>
 8003b32:	0003      	movs	r3, r0
 8003b34:	001a      	movs	r2, r3
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	18d2      	adds	r2, r2, r3
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003b3e:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 8003b40:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8003b46:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	e051      	b.n	8003bf6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7f1b      	ldrb	r3, [r3, #28]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d14d      	bne.n	8003bf6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003b5c:	210c      	movs	r1, #12
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 fd9a 	bl	8006698 <HAL_TIM_ReadCapturedValue>
 8003b64:	0002      	movs	r2, r0
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003b68:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 8003b6a:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d93b      	bls.n	8003bee <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 8003b76:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	e01a      	b.n	8003bb8 <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	58d1      	ldr	r1, [r2, r3]
 8003b8c:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 8003b94:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	0092      	lsls	r2, r2, #2
 8003b9a:	58d3      	ldr	r3, [r2, r3]
 8003b9c:	2105      	movs	r1, #5
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fc fad8 	bl	8000154 <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	18d2      	adds	r2, r2, r3
 8003bae:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003bb0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	dde1      	ble.n	8003b82 <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 8003bbe:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	1ad2      	subs	r2, r2, r3
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003bca:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 8003bcc:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2105      	movs	r1, #5
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fc fabe 	bl	8000154 <__udivsi3>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	001a      	movs	r2, r3
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	18d2      	adds	r2, r2, r3
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003be4:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_TIM_IC_CaptureCallback+0x308>)
 8003bec:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b006      	add	sp, #24
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	40000400 	.word	0x40000400
 8003c04:	200004d4 	.word	0x200004d4
 8003c08:	20000204 	.word	0x20000204
 8003c0c:	20000200 	.word	0x20000200
 8003c10:	20000208 	.word	0x20000208
 8003c14:	2000020c 	.word	0x2000020c
 8003c18:	200001fc 	.word	0x200001fc
 8003c1c:	20000228 	.word	0x20000228
 8003c20:	20000224 	.word	0x20000224
 8003c24:	2000022c 	.word	0x2000022c
 8003c28:	20000230 	.word	0x20000230
 8003c2c:	20000220 	.word	0x20000220
 8003c30:	2000024c 	.word	0x2000024c
 8003c34:	20000248 	.word	0x20000248
 8003c38:	20000250 	.word	0x20000250
 8003c3c:	20000254 	.word	0x20000254
 8003c40:	20000244 	.word	0x20000244
 8003c44:	20000270 	.word	0x20000270
 8003c48:	2000026c 	.word	0x2000026c
 8003c4c:	20000274 	.word	0x20000274
 8003c50:	20000278 	.word	0x20000278
 8003c54:	20000268 	.word	0x20000268

08003c58 <HAL_UART_TxCpltCallback>:

// --------------------------------------

// UART Processing
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	UART_TX_Busy = 0;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_UART_TxCpltCallback+0x18>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	200002f4 	.word	0x200002f4

08003c74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3 && UART_newMessage != 1 && Init_Done == 1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2c      	ldr	r2, [pc, #176]	; (8003d34 <HAL_UART_RxCpltCallback+0xc0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d151      	bne.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
 8003c86:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <HAL_UART_RxCpltCallback+0xc4>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d04d      	beq.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
 8003c8e:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <HAL_UART_RxCpltCallback+0xc8>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d149      	bne.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 8003c96:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_UART_RxCpltCallback+0xcc>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b0a      	cmp	r3, #10
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_UART_RxCpltCallback+0x60>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_UART_RxCpltCallback+0xd0>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d112      	bne.n	8003ccc <HAL_UART_RxCpltCallback+0x58>
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	5e9b      	ldrsh	r3, [r3, r2]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_UART_RxCpltCallback+0x58>
			{
				rxString[UART2_rxindex] = 0;
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	5e9b      	ldrsh	r3, [r3, r2]
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_UART_RxCpltCallback+0xd8>)
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 8003cc4:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <HAL_UART_RxCpltCallback+0xc4>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]



	}

}
 8003cca:	e02e      	b.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_UART_RxCpltCallback+0xd0>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
}
 8003cd2:	e02a      	b.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_UART_RxCpltCallback+0xcc>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b0d      	cmp	r3, #13
 8003cda:	d026      	beq.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_UART_RxCpltCallback+0xd0>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d122      	bne.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 8003ce4:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	5e9b      	ldrsh	r3, [r3, r2]
 8003cea:	001a      	movs	r2, r3
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_UART_RxCpltCallback+0xcc>)
 8003cee:	7819      	ldrb	r1, [r3, #0]
 8003cf0:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <HAL_UART_RxCpltCallback+0xd8>)
 8003cf2:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	5e9b      	ldrsh	r3, [r3, r2]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b21a      	sxth	r2, r3
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003d04:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	5e9b      	ldrsh	r3, [r3, r2]
 8003d0c:	2b63      	cmp	r3, #99	; 0x63
 8003d0e:	dd0c      	ble.n	8003d2a <HAL_UART_RxCpltCallback+0xb6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_UART_RxCpltCallback+0xd0>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_UART_RxCpltCallback+0xd4>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	5e9b      	ldrsh	r3, [r3, r2]
 8003d22:	001a      	movs	r2, r3
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_UART_RxCpltCallback+0xd8>)
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	40004800 	.word	0x40004800
 8003d38:	2000028d 	.word	0x2000028d
 8003d3c:	20000300 	.word	0x20000300
 8003d40:	2000028c 	.word	0x2000028c
 8003d44:	20000368 	.word	0x20000368
 8003d48:	2000036a 	.word	0x2000036a
 8003d4c:	20000290 	.word	0x20000290

08003d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d54:	b672      	cpsid	i
}
 8003d56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d58:	e7fe      	b.n	8003d58 <Error_Handler+0x8>
	...

08003d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_MspInit+0x44>)
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_MspInit+0x44>)
 8003d68:	2101      	movs	r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_MspInit+0x44>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2201      	movs	r2, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_MspInit+0x44>)
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_MspInit+0x44>)
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	0549      	lsls	r1, r1, #21
 8003d84:	430a      	orrs	r2, r1
 8003d86:	61da      	str	r2, [r3, #28]
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_MspInit+0x44>)
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	055b      	lsls	r3, r3, #21
 8003d90:	4013      	ands	r3, r2
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_TIM_Base_MspInit+0x70>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <HAL_TIM_Base_MspInit+0x74>)
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <HAL_TIM_Base_MspInit+0x74>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0109      	lsls	r1, r1, #4
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	619a      	str	r2, [r3, #24]
 8003dc4:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_TIM_Base_MspInit+0x74>)
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003dd2:	e01a      	b.n	8003e0a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a10      	ldr	r2, [pc, #64]	; (8003e1c <HAL_TIM_Base_MspInit+0x78>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d115      	bne.n	8003e0a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003dde:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <HAL_TIM_Base_MspInit+0x74>)
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_TIM_Base_MspInit+0x74>)
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	0249      	lsls	r1, r1, #9
 8003de8:	430a      	orrs	r2, r1
 8003dea:	619a      	str	r2, [r3, #24]
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_TIM_Base_MspInit+0x74>)
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	025b      	lsls	r3, r3, #9
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	2014      	movs	r0, #20
 8003e00:	f000 fc22 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003e04:	2014      	movs	r0, #20
 8003e06:	f000 fc34 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b004      	add	sp, #16
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40014000 	.word	0x40014000

08003e20 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b08b      	sub	sp, #44	; 0x2c
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	2414      	movs	r4, #20
 8003e2a:	193b      	adds	r3, r7, r4
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	2314      	movs	r3, #20
 8003e30:	001a      	movs	r2, r3
 8003e32:	2100      	movs	r1, #0
 8003e34:	f004 fc70 	bl	8008718 <memset>
  if(htim_ic->Instance==TIM3)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a31      	ldr	r2, [pc, #196]	; (8003f04 <HAL_TIM_IC_MspInit+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d15b      	bne.n	8003efa <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e48:	2102      	movs	r1, #2
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	2202      	movs	r2, #2
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5a:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e60:	2180      	movs	r1, #128	; 0x80
 8003e62:	02c9      	lsls	r1, r1, #11
 8003e64:	430a      	orrs	r2, r1
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	02db      	lsls	r3, r3, #11
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0309      	lsls	r1, r1, #12
 8003e80:	430a      	orrs	r2, r1
 8003e82:	615a      	str	r2, [r3, #20]
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_TIM_IC_MspInit+0xe8>)
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	031b      	lsls	r3, r3, #12
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	2221      	movs	r2, #33	; 0x21
 8003e96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e98:	193b      	adds	r3, r7, r4
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e9e:	193b      	adds	r3, r7, r4
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	2201      	movs	r2, #1
 8003eae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	193b      	adds	r3, r7, r4
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_TIM_IC_MspInit+0xec>)
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	f000 fe0e 	bl	8004ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003ebc:	0021      	movs	r1, r4
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2290      	movs	r2, #144	; 0x90
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2202      	movs	r2, #2
 8003eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2201      	movs	r2, #1
 8003ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <HAL_TIM_IC_MspInit+0xf0>)
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	0010      	movs	r0, r2
 8003ee6:	f000 fdf7 	bl	8004ad8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2101      	movs	r1, #1
 8003eee:	2010      	movs	r0, #16
 8003ef0:	f000 fbaa 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ef4:	2010      	movs	r0, #16
 8003ef6:	f000 fbbc 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b00b      	add	sp, #44	; 0x2c
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	48000400 	.word	0x48000400
 8003f10:	48000800 	.word	0x48000800

08003f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b08b      	sub	sp, #44	; 0x2c
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	2414      	movs	r4, #20
 8003f1e:	193b      	adds	r3, r7, r4
 8003f20:	0018      	movs	r0, r3
 8003f22:	2314      	movs	r3, #20
 8003f24:	001a      	movs	r2, r3
 8003f26:	2100      	movs	r1, #0
 8003f28:	f004 fbf6 	bl	8008718 <memset>
  if(htim->Instance==TIM1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <HAL_TIM_MspPostInit+0xcc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d126      	bne.n	8003f84 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_TIM_MspPostInit+0xd0>)
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_TIM_MspPostInit+0xd0>)
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	0289      	lsls	r1, r1, #10
 8003f40:	430a      	orrs	r2, r1
 8003f42:	615a      	str	r2, [r3, #20]
 8003f44:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_TIM_MspPostInit+0xd0>)
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003f52:	193b      	adds	r3, r7, r4
 8003f54:	22f0      	movs	r2, #240	; 0xf0
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5a:	0021      	movs	r1, r4
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2202      	movs	r2, #2
 8003f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2202      	movs	r2, #2
 8003f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f74:	187a      	adds	r2, r7, r1
 8003f76:	2390      	movs	r3, #144	; 0x90
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 fdab 	bl	8004ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003f82:	e029      	b.n	8003fd8 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_TIM_MspPostInit+0xd4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d124      	bne.n	8003fd8 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_TIM_MspPostInit+0xd0>)
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_TIM_MspPostInit+0xd0>)
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	02c9      	lsls	r1, r1, #11
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	615a      	str	r2, [r3, #20]
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_TIM_MspPostInit+0xd0>)
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	02db      	lsls	r3, r3, #11
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003faa:	2114      	movs	r1, #20
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	22c0      	movs	r2, #192	; 0xc0
 8003fb0:	0212      	lsls	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2201      	movs	r2, #1
 8003fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	4a07      	ldr	r2, [pc, #28]	; (8003fec <HAL_TIM_MspPostInit+0xd8>)
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	0010      	movs	r0, r2
 8003fd4:	f000 fd80 	bl	8004ad8 <HAL_GPIO_Init>
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b00b      	add	sp, #44	; 0x2c
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	48000400 	.word	0x48000400

08003ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b08b      	sub	sp, #44	; 0x2c
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	2414      	movs	r4, #20
 8003ffa:	193b      	adds	r3, r7, r4
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	2314      	movs	r3, #20
 8004000:	001a      	movs	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	f004 fb88 	bl	8008718 <memset>
  if(huart->Instance==USART3)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4e      	ldr	r2, [pc, #312]	; (8004148 <HAL_UART_MspInit+0x158>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d000      	beq.n	8004014 <HAL_UART_MspInit+0x24>
 8004012:	e094      	b.n	800413e <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_UART_MspInit+0x15c>)
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_UART_MspInit+0x15c>)
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	02c9      	lsls	r1, r1, #11
 800401e:	430a      	orrs	r2, r1
 8004020:	61da      	str	r2, [r3, #28]
 8004022:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_UART_MspInit+0x15c>)
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	02db      	lsls	r3, r3, #11
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004030:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_UART_MspInit+0x15c>)
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	4b45      	ldr	r3, [pc, #276]	; (800414c <HAL_UART_MspInit+0x15c>)
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	0309      	lsls	r1, r1, #12
 800403a:	430a      	orrs	r2, r1
 800403c:	615a      	str	r2, [r3, #20]
 800403e:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_UART_MspInit+0x15c>)
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	031b      	lsls	r3, r3, #12
 8004046:	4013      	ands	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 800404c:	193b      	adds	r3, r7, r4
 800404e:	2281      	movs	r2, #129	; 0x81
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	0021      	movs	r1, r4
 8004056:	187b      	adds	r3, r7, r1
 8004058:	2202      	movs	r2, #2
 800405a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004062:	187b      	adds	r3, r7, r1
 8004064:	2203      	movs	r2, #3
 8004066:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8004068:	187b      	adds	r3, r7, r1
 800406a:	2201      	movs	r2, #1
 800406c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406e:	187b      	adds	r3, r7, r1
 8004070:	4a37      	ldr	r2, [pc, #220]	; (8004150 <HAL_UART_MspInit+0x160>)
 8004072:	0019      	movs	r1, r3
 8004074:	0010      	movs	r0, r2
 8004076:	f000 fd2f 	bl	8004ad8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800407a:	4b36      	ldr	r3, [pc, #216]	; (8004154 <HAL_UART_MspInit+0x164>)
 800407c:	4a36      	ldr	r2, [pc, #216]	; (8004158 <HAL_UART_MspInit+0x168>)
 800407e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004080:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_UART_MspInit+0x164>)
 8004082:	2200      	movs	r2, #0
 8004084:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004086:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_UART_MspInit+0x164>)
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800408c:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_UART_MspInit+0x164>)
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_UART_MspInit+0x164>)
 8004094:	2200      	movs	r2, #0
 8004096:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_UART_MspInit+0x164>)
 800409a:	2200      	movs	r2, #0
 800409c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800409e:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <HAL_UART_MspInit+0x164>)
 80040a0:	2220      	movs	r2, #32
 80040a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_UART_MspInit+0x164>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040aa:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <HAL_UART_MspInit+0x164>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 fafd 	bl	80046ac <HAL_DMA_Init>
 80040b2:	1e03      	subs	r3, r0, #0
 80040b4:	d001      	beq.n	80040ba <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80040b6:	f7ff fe4b 	bl	8003d50 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_UART_MspInit+0x16c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_UART_MspInit+0x16c>)
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	04c9      	lsls	r1, r1, #19
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_UART_MspInit+0x164>)
 80040cc:	671a      	str	r2, [r3, #112]	; 0x70
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_UART_MspInit+0x164>)
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80040d4:	4b22      	ldr	r3, [pc, #136]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_UART_MspInit+0x174>)
 80040d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040da:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040dc:	2210      	movs	r2, #16
 80040de:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e0:	4b1f      	ldr	r3, [pc, #124]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_UART_MspInit+0x170>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040fe:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_UART_MspInit+0x170>)
 8004100:	2200      	movs	r2, #0
 8004102:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_UART_MspInit+0x170>)
 8004106:	0018      	movs	r0, r3
 8004108:	f000 fad0 	bl	80046ac <HAL_DMA_Init>
 800410c:	1e03      	subs	r3, r0, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004110:	f7ff fe1e 	bl	8003d50 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_UART_MspInit+0x16c>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_UART_MspInit+0x16c>)
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	04c9      	lsls	r1, r1, #19
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <HAL_UART_MspInit+0x170>)
 8004126:	66da      	str	r2, [r3, #108]	; 0x6c
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_UART_MspInit+0x170>)
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	201d      	movs	r0, #29
 8004134:	f000 fa88 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8004138:	201d      	movs	r0, #29
 800413a:	f000 fa9a 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b00b      	add	sp, #44	; 0x2c
 8004144:	bd90      	pop	{r4, r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	40004800 	.word	0x40004800
 800414c:	40021000 	.word	0x40021000
 8004150:	48000800 	.word	0x48000800
 8004154:	20000380 	.word	0x20000380
 8004158:	40020030 	.word	0x40020030
 800415c:	40010000 	.word	0x40010000
 8004160:	20000490 	.word	0x20000490
 8004164:	4002001c 	.word	0x4002001c

08004168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800416c:	e7fe      	b.n	800416c <NMI_Handler+0x4>

0800416e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <HardFault_Handler+0x4>

08004174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800418c:	f000 f970 	bl	8004470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 fbaf 	bl	8004902 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 fbab 	bl	8004902 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	20000490 	.word	0x20000490
 80041b8:	20000380 	.word	0x20000380

080041bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <TIM3_IRQHandler+0x14>)
 80041c2:	0018      	movs	r0, r3
 80041c4:	f001 ff14 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	200004d4 	.word	0x200004d4

080041d4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <TIM15_IRQHandler+0x14>)
 80041da:	0018      	movs	r0, r3
 80041dc:	f001 ff08 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000448 	.word	0x20000448

080041ec <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <USART3_4_IRQHandler+0x14>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f003 f9b4 	bl	8007560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	200003c4 	.word	0x200003c4

08004204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
	return 1;
 8004208:	2301      	movs	r3, #1
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_kill>:

int _kill(int pid, int sig)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800421a:	f004 fa53 	bl	80086c4 <__errno>
 800421e:	0003      	movs	r3, r0
 8004220:	2216      	movs	r2, #22
 8004222:	601a      	str	r2, [r3, #0]
	return -1;
 8004224:	2301      	movs	r3, #1
 8004226:	425b      	negs	r3, r3
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <_exit>:

void _exit (int status)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004238:	2301      	movs	r3, #1
 800423a:	425a      	negs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0011      	movs	r1, r2
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff ffe5 	bl	8004210 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004246:	e7fe      	b.n	8004246 <_exit+0x16>

08004248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e00a      	b.n	8004270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800425a:	e000      	b.n	800425e <_read+0x16>
 800425c:	bf00      	nop
 800425e:	0001      	movs	r1, r0
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	60ba      	str	r2, [r7, #8]
 8004266:	b2ca      	uxtb	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3301      	adds	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	dbf0      	blt.n	800425a <_read+0x12>
	}

return len;
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b006      	add	sp, #24
 8004280:	bd80      	pop	{r7, pc}

08004282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e009      	b.n	80042a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	0018      	movs	r0, r3
 800429e:	e000      	b.n	80042a2 <_write+0x20>
 80042a0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	3301      	adds	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	dbf1      	blt.n	8004294 <_write+0x12>
	}
	return len;
 80042b0:	687b      	ldr	r3, [r7, #4]
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b006      	add	sp, #24
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_close>:

int _close(int file)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	return -1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	425b      	negs	r3, r3
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	0192      	lsls	r2, r2, #6
 80042de:	605a      	str	r2, [r3, #4]
	return 0;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_isatty>:

int _isatty(int file)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
	return 1;
 80042f2:	2301      	movs	r3, #1
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
	return 0;
 8004308:	2300      	movs	r3, #0
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <_sbrk+0x5c>)
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <_sbrk+0x60>)
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <_sbrk+0x64>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <_sbrk+0x64>)
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <_sbrk+0x68>)
 8004334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <_sbrk+0x64>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	429a      	cmp	r2, r3
 8004342:	d207      	bcs.n	8004354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004344:	f004 f9be 	bl	80086c4 <__errno>
 8004348:	0003      	movs	r3, r0
 800434a:	220c      	movs	r2, #12
 800434c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800434e:	2301      	movs	r3, #1
 8004350:	425b      	negs	r3, r3
 8004352:	e009      	b.n	8004368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <_sbrk+0x64>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	18d2      	adds	r2, r2, r3
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <_sbrk+0x64>)
 8004364:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b006      	add	sp, #24
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20004000 	.word	0x20004000
 8004374:	00000400 	.word	0x00000400
 8004378:	2000036c 	.word	0x2000036c
 800437c:	200005c0 	.word	0x200005c0

08004380 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800438e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004390:	480d      	ldr	r0, [pc, #52]	; (80043c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004392:	490e      	ldr	r1, [pc, #56]	; (80043cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <LoopForever+0xe>)
  movs r3, #0
 8004396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004398:	e002      	b.n	80043a0 <LoopCopyDataInit>

0800439a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800439a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800439c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800439e:	3304      	adds	r3, #4

080043a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043a4:	d3f9      	bcc.n	800439a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043a6:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043a8:	4c0b      	ldr	r4, [pc, #44]	; (80043d8 <LoopForever+0x16>)
  movs r3, #0
 80043aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043ac:	e001      	b.n	80043b2 <LoopFillZerobss>

080043ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043b0:	3204      	adds	r2, #4

080043b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043b4:	d3fb      	bcc.n	80043ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043b6:	f7ff ffe3 	bl	8004380 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043ba:	f004 f989 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043be:	f7fe f96f 	bl	80026a0 <main>

080043c2 <LoopForever>:

LoopForever:
    b LoopForever
 80043c2:	e7fe      	b.n	80043c2 <LoopForever>
  ldr   r0, =_estack
 80043c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80043c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043cc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80043d0:	0800dff4 	.word	0x0800dff4
  ldr r2, =_sbss
 80043d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80043d8:	200005c0 	.word	0x200005c0

080043dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043dc:	e7fe      	b.n	80043dc <ADC1_IRQHandler>
	...

080043e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_Init+0x24>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_Init+0x24>)
 80043ea:	2110      	movs	r1, #16
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80043f0:	2003      	movs	r0, #3
 80043f2:	f000 f809 	bl	8004408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f6:	f7ff fcb1 	bl	8003d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40022000 	.word	0x40022000

08004408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_InitTick+0x5c>)
 8004412:	681c      	ldr	r4, [r3, #0]
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <HAL_InitTick+0x60>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	0019      	movs	r1, r3
 800441a:	23fa      	movs	r3, #250	; 0xfa
 800441c:	0098      	lsls	r0, r3, #2
 800441e:	f7fb fe99 	bl	8000154 <__udivsi3>
 8004422:	0003      	movs	r3, r0
 8004424:	0019      	movs	r1, r3
 8004426:	0020      	movs	r0, r4
 8004428:	f7fb fe94 	bl	8000154 <__udivsi3>
 800442c:	0003      	movs	r3, r0
 800442e:	0018      	movs	r0, r3
 8004430:	f000 f92f 	bl	8004692 <HAL_SYSTICK_Config>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d001      	beq.n	800443c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e00f      	b.n	800445c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b03      	cmp	r3, #3
 8004440:	d80b      	bhi.n	800445a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	2301      	movs	r3, #1
 8004446:	425b      	negs	r3, r3
 8004448:	2200      	movs	r2, #0
 800444a:	0018      	movs	r0, r3
 800444c:	f000 f8fc 	bl	8004648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_InitTick+0x64>)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b003      	add	sp, #12
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	20000000 	.word	0x20000000
 8004468:	20000008 	.word	0x20000008
 800446c:	20000004 	.word	0x20000004

08004470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_IncTick+0x1c>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	001a      	movs	r2, r3
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_IncTick+0x20>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	18d2      	adds	r2, r2, r3
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_IncTick+0x20>)
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	20000008 	.word	0x20000008
 8004490:	200005ac 	.word	0x200005ac

08004494 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  return uwTick;
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <HAL_GetTick+0x10>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	200005ac 	.word	0x200005ac

080044a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7ff fff0 	bl	8004494 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3301      	adds	r3, #1
 80044c0:	d005      	beq.n	80044ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_Delay+0x44>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	001a      	movs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	189b      	adds	r3, r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	f7ff ffe0 	bl	8004494 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d8f7      	bhi.n	80044d0 <HAL_Delay+0x28>
  {
  }
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b004      	add	sp, #16
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000008 	.word	0x20000008

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	1dfb      	adds	r3, r7, #7
 80044fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b7f      	cmp	r3, #127	; 0x7f
 8004502:	d809      	bhi.n	8004518 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	001a      	movs	r2, r3
 800450a:	231f      	movs	r3, #31
 800450c:	401a      	ands	r2, r3
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <__NVIC_EnableIRQ+0x30>)
 8004510:	2101      	movs	r1, #1
 8004512:	4091      	lsls	r1, r2
 8004514:	000a      	movs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
  }
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	0002      	movs	r2, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b7f      	cmp	r3, #127	; 0x7f
 8004538:	d828      	bhi.n	800458c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800453a:	4a2f      	ldr	r2, [pc, #188]	; (80045f8 <__NVIC_SetPriority+0xd4>)
 800453c:	1dfb      	adds	r3, r7, #7
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b25b      	sxtb	r3, r3
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	33c0      	adds	r3, #192	; 0xc0
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	589b      	ldr	r3, [r3, r2]
 800454a:	1dfa      	adds	r2, r7, #7
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	0011      	movs	r1, r2
 8004550:	2203      	movs	r2, #3
 8004552:	400a      	ands	r2, r1
 8004554:	00d2      	lsls	r2, r2, #3
 8004556:	21ff      	movs	r1, #255	; 0xff
 8004558:	4091      	lsls	r1, r2
 800455a:	000a      	movs	r2, r1
 800455c:	43d2      	mvns	r2, r2
 800455e:	401a      	ands	r2, r3
 8004560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	401a      	ands	r2, r3
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	0018      	movs	r0, r3
 8004570:	2303      	movs	r3, #3
 8004572:	4003      	ands	r3, r0
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004578:	481f      	ldr	r0, [pc, #124]	; (80045f8 <__NVIC_SetPriority+0xd4>)
 800457a:	1dfb      	adds	r3, r7, #7
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b25b      	sxtb	r3, r3
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	430a      	orrs	r2, r1
 8004584:	33c0      	adds	r3, #192	; 0xc0
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800458a:	e031      	b.n	80045f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800458c:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <__NVIC_SetPriority+0xd8>)
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	0019      	movs	r1, r3
 8004594:	230f      	movs	r3, #15
 8004596:	400b      	ands	r3, r1
 8004598:	3b08      	subs	r3, #8
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3306      	adds	r3, #6
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	18d3      	adds	r3, r2, r3
 80045a2:	3304      	adds	r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1dfa      	adds	r2, r7, #7
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	0011      	movs	r1, r2
 80045ac:	2203      	movs	r2, #3
 80045ae:	400a      	ands	r2, r1
 80045b0:	00d2      	lsls	r2, r2, #3
 80045b2:	21ff      	movs	r1, #255	; 0xff
 80045b4:	4091      	lsls	r1, r2
 80045b6:	000a      	movs	r2, r1
 80045b8:	43d2      	mvns	r2, r2
 80045ba:	401a      	ands	r2, r3
 80045bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	22ff      	movs	r2, #255	; 0xff
 80045c4:	401a      	ands	r2, r3
 80045c6:	1dfb      	adds	r3, r7, #7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	0018      	movs	r0, r3
 80045cc:	2303      	movs	r3, #3
 80045ce:	4003      	ands	r3, r0
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d4:	4809      	ldr	r0, [pc, #36]	; (80045fc <__NVIC_SetPriority+0xd8>)
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	001c      	movs	r4, r3
 80045dc:	230f      	movs	r3, #15
 80045de:	4023      	ands	r3, r4
 80045e0:	3b08      	subs	r3, #8
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	430a      	orrs	r2, r1
 80045e6:	3306      	adds	r3, #6
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	18c3      	adds	r3, r0, r3
 80045ec:	3304      	adds	r3, #4
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b003      	add	sp, #12
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	045b      	lsls	r3, r3, #17
 8004610:	429a      	cmp	r2, r3
 8004612:	d301      	bcc.n	8004618 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004614:	2301      	movs	r3, #1
 8004616:	e010      	b.n	800463a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <SysTick_Config+0x44>)
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	3a01      	subs	r2, #1
 800461e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004620:	2301      	movs	r3, #1
 8004622:	425b      	negs	r3, r3
 8004624:	2103      	movs	r1, #3
 8004626:	0018      	movs	r0, r3
 8004628:	f7ff ff7c 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SysTick_Config+0x44>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <SysTick_Config+0x44>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b002      	add	sp, #8
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	210f      	movs	r1, #15
 8004654:	187b      	adds	r3, r7, r1
 8004656:	1c02      	adds	r2, r0, #0
 8004658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	187b      	adds	r3, r7, r1
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b25b      	sxtb	r3, r3
 8004662:	0011      	movs	r1, r2
 8004664:	0018      	movs	r0, r3
 8004666:	f7ff ff5d 	bl	8004524 <__NVIC_SetPriority>
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	0002      	movs	r2, r0
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b25b      	sxtb	r3, r3
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff ff33 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff ffaf 	bl	8004600 <SysTick_Config>
 80046a2:	0003      	movs	r3, r0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e036      	b.n	8004730 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2221      	movs	r2, #33	; 0x21
 80046c6:	2102      	movs	r1, #2
 80046c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_DMA_Init+0x8c>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	0018      	movs	r0, r3
 8004714:	f000 f9c4 	bl	8004aa0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2221      	movs	r2, #33	; 0x21
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}  
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}
 8004738:	ffffc00f 	.word	0xffffc00f

0800473c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800474a:	2317      	movs	r3, #23
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	5c9b      	ldrb	r3, [r3, r2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_DMA_Start_IT+0x24>
 800475c:	2302      	movs	r3, #2
 800475e:	e04f      	b.n	8004800 <HAL_DMA_Start_IT+0xc4>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2221      	movs	r2, #33	; 0x21
 800476c:	5c9b      	ldrb	r3, [r3, r2]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d13a      	bne.n	80047ea <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2221      	movs	r2, #33	; 0x21
 8004778:	2102      	movs	r1, #2
 800477a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2101      	movs	r1, #1
 800478e:	438a      	bics	r2, r1
 8004790:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f954 	bl	8004a46 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	210e      	movs	r1, #14
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e00f      	b.n	80047d8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	210a      	movs	r1, #10
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2104      	movs	r1, #4
 80047d4:	438a      	bics	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2101      	movs	r1, #1
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e007      	b.n	80047fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	2100      	movs	r1, #0
 80047f0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80047f2:	2317      	movs	r3, #23
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2202      	movs	r2, #2
 80047f8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80047fa:	2317      	movs	r3, #23
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	781b      	ldrb	r3, [r3, #0]
} 
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b006      	add	sp, #24
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	5c9b      	ldrb	r3, [r3, r2]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d008      	beq.n	800482e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2204      	movs	r2, #4
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e020      	b.n	8004870 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	210e      	movs	r1, #14
 800483a:	438a      	bics	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2101      	movs	r1, #1
 800484a:	438a      	bics	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	2101      	movs	r1, #1
 8004858:	4091      	lsls	r1, r2
 800485a:	000a      	movs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2221      	movs	r2, #33	; 0x21
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004880:	210f      	movs	r1, #15
 8004882:	187b      	adds	r3, r7, r1
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d006      	beq.n	80048a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2204      	movs	r2, #4
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800489a:	187b      	adds	r3, r7, r1
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e028      	b.n	80048f4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	210e      	movs	r1, #14
 80048ae:	438a      	bics	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	438a      	bics	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	2101      	movs	r1, #1
 80048cc:	4091      	lsls	r1, r2
 80048ce:	000a      	movs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2221      	movs	r2, #33	; 0x21
 80048d6:	2101      	movs	r1, #1
 80048d8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	0010      	movs	r0, r2
 80048f2:	4798      	blx	r3
    } 
  }
  return status;
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	781b      	ldrb	r3, [r3, #0]
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b004      	add	sp, #16
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2204      	movs	r2, #4
 8004920:	409a      	lsls	r2, r3
 8004922:	0013      	movs	r3, r2
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4013      	ands	r3, r2
 8004928:	d024      	beq.n	8004974 <HAL_DMA_IRQHandler+0x72>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2204      	movs	r2, #4
 800492e:	4013      	ands	r3, r2
 8004930:	d020      	beq.n	8004974 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2220      	movs	r2, #32
 800493a:	4013      	ands	r3, r2
 800493c:	d107      	bne.n	800494e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2104      	movs	r1, #4
 800494a:	438a      	bics	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	2104      	movs	r1, #4
 8004958:	4091      	lsls	r1, r2
 800495a:	000a      	movs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d100      	bne.n	8004968 <HAL_DMA_IRQHandler+0x66>
 8004966:	e06a      	b.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	0010      	movs	r0, r2
 8004970:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004972:	e064      	b.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	2202      	movs	r2, #2
 800497a:	409a      	lsls	r2, r3
 800497c:	0013      	movs	r3, r2
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	d02b      	beq.n	80049dc <HAL_DMA_IRQHandler+0xda>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	d027      	beq.n	80049dc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2220      	movs	r2, #32
 8004994:	4013      	ands	r3, r2
 8004996:	d10b      	bne.n	80049b0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	210a      	movs	r1, #10
 80049a4:	438a      	bics	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2221      	movs	r2, #33	; 0x21
 80049ac:	2101      	movs	r1, #1
 80049ae:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	2102      	movs	r1, #2
 80049ba:	4091      	lsls	r1, r2
 80049bc:	000a      	movs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	2100      	movs	r1, #0
 80049c6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d036      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	0010      	movs	r0, r2
 80049d8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80049da:	e030      	b.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	2208      	movs	r2, #8
 80049e2:	409a      	lsls	r2, r3
 80049e4:	0013      	movs	r3, r2
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4013      	ands	r3, r2
 80049ea:	d028      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2208      	movs	r2, #8
 80049f0:	4013      	ands	r3, r2
 80049f2:	d024      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	210e      	movs	r1, #14
 8004a00:	438a      	bics	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4091      	lsls	r1, r2
 8004a10:	000a      	movs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2221      	movs	r2, #33	; 0x21
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	2100      	movs	r1, #0
 8004a28:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	0010      	movs	r0, r2
 8004a3a:	4798      	blx	r3
    }
   }
}  
 8004a3c:	e7ff      	b.n	8004a3e <HAL_DMA_IRQHandler+0x13c>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b004      	add	sp, #16
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4091      	lsls	r1, r2
 8004a60:	000a      	movs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d108      	bne.n	8004a86 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a84:	e007      	b.n	8004a96 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	60da      	str	r2, [r3, #12]
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b004      	add	sp, #16
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x30>)
 8004aae:	4694      	mov	ip, r2
 8004ab0:	4463      	add	r3, ip
 8004ab2:	2114      	movs	r1, #20
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fb fb4d 	bl	8000154 <__udivsi3>
 8004aba:	0003      	movs	r3, r0
 8004abc:	009a      	lsls	r2, r3, #2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a03      	ldr	r2, [pc, #12]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x34>)
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	bffdfff8 	.word	0xbffdfff8
 8004ad4:	40020000 	.word	0x40020000

08004ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ae6:	e14f      	b.n	8004d88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2101      	movs	r1, #1
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4091      	lsls	r1, r2
 8004af2:	000a      	movs	r2, r1
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d100      	bne.n	8004b00 <HAL_GPIO_Init+0x28>
 8004afe:	e140      	b.n	8004d82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2203      	movs	r2, #3
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d005      	beq.n	8004b18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d130      	bne.n	8004b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	2203      	movs	r2, #3
 8004b24:	409a      	lsls	r2, r3
 8004b26:	0013      	movs	r3, r2
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	0013      	movs	r3, r2
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b4e:	2201      	movs	r2, #1
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	409a      	lsls	r2, r3
 8004b54:	0013      	movs	r3, r2
 8004b56:	43da      	mvns	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	2201      	movs	r2, #1
 8004b66:	401a      	ands	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d017      	beq.n	8004bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	2203      	movs	r2, #3
 8004b92:	409a      	lsls	r2, r3
 8004b94:	0013      	movs	r3, r2
 8004b96:	43da      	mvns	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	0013      	movs	r3, r2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d123      	bne.n	8004c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	08da      	lsrs	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3208      	adds	r2, #8
 8004bca:	0092      	lsls	r2, r2, #2
 8004bcc:	58d3      	ldr	r3, [r2, r3]
 8004bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2207      	movs	r2, #7
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	220f      	movs	r2, #15
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	0013      	movs	r3, r2
 8004bde:	43da      	mvns	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2107      	movs	r1, #7
 8004bee:	400b      	ands	r3, r1
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	08da      	lsrs	r2, r3, #3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3208      	adds	r2, #8
 8004c04:	0092      	lsls	r2, r2, #2
 8004c06:	6939      	ldr	r1, [r7, #16]
 8004c08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	2203      	movs	r2, #3
 8004c16:	409a      	lsls	r2, r3
 8004c18:	0013      	movs	r3, r2
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2203      	movs	r2, #3
 8004c28:	401a      	ands	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	0013      	movs	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	23c0      	movs	r3, #192	; 0xc0
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	4013      	ands	r3, r2
 8004c48:	d100      	bne.n	8004c4c <HAL_GPIO_Init+0x174>
 8004c4a:	e09a      	b.n	8004d82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4c:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <HAL_GPIO_Init+0x2c8>)
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_GPIO_Init+0x2c8>)
 8004c52:	2101      	movs	r1, #1
 8004c54:	430a      	orrs	r2, r1
 8004c56:	619a      	str	r2, [r3, #24]
 8004c58:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <HAL_GPIO_Init+0x2c8>)
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c64:	4a4f      	ldr	r2, [pc, #316]	; (8004da4 <HAL_GPIO_Init+0x2cc>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	589b      	ldr	r3, [r3, r2]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2203      	movs	r2, #3
 8004c76:	4013      	ands	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	220f      	movs	r2, #15
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	0013      	movs	r3, r2
 8004c80:	43da      	mvns	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	2390      	movs	r3, #144	; 0x90
 8004c8c:	05db      	lsls	r3, r3, #23
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d013      	beq.n	8004cba <HAL_GPIO_Init+0x1e2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a44      	ldr	r2, [pc, #272]	; (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00d      	beq.n	8004cb6 <HAL_GPIO_Init+0x1de>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_GPIO_Init+0x2d4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <HAL_GPIO_Init+0x1da>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <HAL_GPIO_Init+0x2d8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_GPIO_Init+0x1d6>
 8004caa:	2303      	movs	r3, #3
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x1e4>
 8004cae:	2305      	movs	r3, #5
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x1e4>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x1e4>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x1e4>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	; (8004da4 <HAL_GPIO_Init+0x2cc>)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004cfe:	4b2d      	ldr	r3, [pc, #180]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	029b      	lsls	r3, r3, #10
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2e:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	43da      	mvns	r2, r3
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	035b      	lsls	r3, r3, #13
 8004d46:	4013      	ands	r3, r2
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d52:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004d58:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43da      	mvns	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	039b      	lsls	r3, r3, #14
 8004d70:	4013      	ands	r3, r2
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <HAL_GPIO_Init+0x2dc>)
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	3301      	adds	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	40da      	lsrs	r2, r3
 8004d90:	1e13      	subs	r3, r2, #0
 8004d92:	d000      	beq.n	8004d96 <HAL_GPIO_Init+0x2be>
 8004d94:	e6a8      	b.n	8004ae8 <HAL_GPIO_Init+0x10>
  } 
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b006      	add	sp, #24
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40010000 	.word	0x40010000
 8004da8:	48000400 	.word	0x48000400
 8004dac:	48000800 	.word	0x48000800
 8004db0:	48000c00 	.word	0x48000c00
 8004db4:	40010400 	.word	0x40010400

08004db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	000a      	movs	r2, r1
 8004dc2:	1cbb      	adds	r3, r7, #2
 8004dc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	1cba      	adds	r2, r7, #2
 8004dcc:	8812      	ldrh	r2, [r2, #0]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004dd2:	230f      	movs	r3, #15
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e003      	b.n	8004de4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ddc:	230f      	movs	r3, #15
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004de4:	230f      	movs	r3, #15
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	781b      	ldrb	r3, [r3, #0]
  }
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	0008      	movs	r0, r1
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	1cbb      	adds	r3, r7, #2
 8004e00:	1c02      	adds	r2, r0, #0
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	1c7b      	adds	r3, r7, #1
 8004e06:	1c0a      	adds	r2, r1, #0
 8004e08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e0a:	1c7b      	adds	r3, r7, #1
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e12:	1cbb      	adds	r3, r7, #2
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e1a:	e003      	b.n	8004e24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e1c:	1cbb      	adds	r3, r7, #2
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e305      	b.n	800544a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	4013      	ands	r3, r2
 8004e46:	d100      	bne.n	8004e4a <HAL_RCC_OscConfig+0x1e>
 8004e48:	e08d      	b.n	8004f66 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e4a:	4bc5      	ldr	r3, [pc, #788]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	220c      	movs	r2, #12
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d00e      	beq.n	8004e74 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e56:	4bc2      	ldr	r3, [pc, #776]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	220c      	movs	r2, #12
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d116      	bne.n	8004e90 <HAL_RCC_OscConfig+0x64>
 8004e62:	4bbf      	ldr	r3, [pc, #764]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	23c0      	movs	r3, #192	; 0xc0
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	025b      	lsls	r3, r3, #9
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d10d      	bne.n	8004e90 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	4bba      	ldr	r3, [pc, #744]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	029b      	lsls	r3, r3, #10
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <HAL_RCC_OscConfig+0x56>
 8004e80:	e070      	b.n	8004f64 <HAL_RCC_OscConfig+0x138>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d000      	beq.n	8004e8c <HAL_RCC_OscConfig+0x60>
 8004e8a:	e06b      	b.n	8004f64 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e2dc      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x7c>
 8004e98:	4bb1      	ldr	r3, [pc, #708]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4bb0      	ldr	r3, [pc, #704]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	0249      	lsls	r1, r1, #9
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e02f      	b.n	8004f08 <HAL_RCC_OscConfig+0xdc>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10c      	bne.n	8004eca <HAL_RCC_OscConfig+0x9e>
 8004eb0:	4bab      	ldr	r3, [pc, #684]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4baa      	ldr	r3, [pc, #680]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004eb6:	49ab      	ldr	r1, [pc, #684]	; (8005164 <HAL_RCC_OscConfig+0x338>)
 8004eb8:	400a      	ands	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	4ba8      	ldr	r3, [pc, #672]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4ba7      	ldr	r3, [pc, #668]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ec2:	49a9      	ldr	r1, [pc, #676]	; (8005168 <HAL_RCC_OscConfig+0x33c>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e01e      	b.n	8004f08 <HAL_RCC_OscConfig+0xdc>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xc4>
 8004ed2:	4ba3      	ldr	r3, [pc, #652]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4ba2      	ldr	r3, [pc, #648]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	02c9      	lsls	r1, r1, #11
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	4b9f      	ldr	r3, [pc, #636]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b9e      	ldr	r3, [pc, #632]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	0249      	lsls	r1, r1, #9
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xdc>
 8004ef0:	4b9b      	ldr	r3, [pc, #620]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b9a      	ldr	r3, [pc, #616]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ef6:	499b      	ldr	r1, [pc, #620]	; (8005164 <HAL_RCC_OscConfig+0x338>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b97      	ldr	r3, [pc, #604]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f02:	4999      	ldr	r1, [pc, #612]	; (8005168 <HAL_RCC_OscConfig+0x33c>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d014      	beq.n	8004f3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7ff fac0 	bl	8004494 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f1a:	f7ff fabb 	bl	8004494 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b64      	cmp	r3, #100	; 0x64
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e28e      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2c:	4b8c      	ldr	r3, [pc, #560]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	4013      	ands	r3, r2
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0xee>
 8004f38:	e015      	b.n	8004f66 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7ff faab 	bl	8004494 <HAL_GetTick>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7ff faa6 	bl	8004494 <HAL_GetTick>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e279      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x118>
 8004f62:	e000      	b.n	8004f66 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <HAL_RCC_OscConfig+0x146>
 8004f70:	e06c      	b.n	800504c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f72:	4b7b      	ldr	r3, [pc, #492]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	220c      	movs	r2, #12
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f7c:	4b78      	ldr	r3, [pc, #480]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	220c      	movs	r2, #12
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d11f      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x19c>
 8004f88:	4b75      	ldr	r3, [pc, #468]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	23c0      	movs	r3, #192	; 0xc0
 8004f8e:	025b      	lsls	r3, r3, #9
 8004f90:	401a      	ands	r2, r3
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d116      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	4b71      	ldr	r3, [pc, #452]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x184>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e24c      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b6b      	ldr	r3, [pc, #428]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	22f8      	movs	r2, #248	; 0xf8
 8004fb6:	4393      	bics	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	00da      	lsls	r2, r3, #3
 8004fc0:	4b67      	ldr	r3, [pc, #412]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	e041      	b.n	800504c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d024      	beq.n	800501a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd0:	4b63      	ldr	r3, [pc, #396]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b62      	ldr	r3, [pc, #392]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7ff fa5a 	bl	8004494 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe6:	f7ff fa55 	bl	8004494 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e228      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	4013      	ands	r3, r2
 8005000:	d0f1      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005002:	4b57      	ldr	r3, [pc, #348]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	22f8      	movs	r2, #248	; 0xf8
 8005008:	4393      	bics	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	00da      	lsls	r2, r3, #3
 8005012:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e018      	b.n	800504c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501a:	4b51      	ldr	r3, [pc, #324]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b50      	ldr	r3, [pc, #320]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005020:	2101      	movs	r1, #1
 8005022:	438a      	bics	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7ff fa35 	bl	8004494 <HAL_GetTick>
 800502a:	0003      	movs	r3, r0
 800502c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005030:	f7ff fa30 	bl	8004494 <HAL_GetTick>
 8005034:	0002      	movs	r2, r0
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e203      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2202      	movs	r2, #2
 8005048:	4013      	ands	r3, r2
 800504a:	d1f1      	bne.n	8005030 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2208      	movs	r2, #8
 8005052:	4013      	ands	r3, r2
 8005054:	d036      	beq.n	80050c4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505e:	4b40      	ldr	r3, [pc, #256]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005062:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005064:	2101      	movs	r1, #1
 8005066:	430a      	orrs	r2, r1
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506a:	f7ff fa13 	bl	8004494 <HAL_GetTick>
 800506e:	0003      	movs	r3, r0
 8005070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005074:	f7ff fa0e 	bl	8004494 <HAL_GetTick>
 8005078:	0002      	movs	r2, r0
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1e1      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2202      	movs	r2, #2
 800508c:	4013      	ands	r3, r2
 800508e:	d0f1      	beq.n	8005074 <HAL_RCC_OscConfig+0x248>
 8005090:	e018      	b.n	80050c4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005092:	4b33      	ldr	r3, [pc, #204]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005096:	4b32      	ldr	r3, [pc, #200]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005098:	2101      	movs	r1, #1
 800509a:	438a      	bics	r2, r1
 800509c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7ff f9f9 	bl	8004494 <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7ff f9f4 	bl	8004494 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1c7      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d1f1      	bne.n	80050a8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2204      	movs	r2, #4
 80050ca:	4013      	ands	r3, r2
 80050cc:	d100      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2a4>
 80050ce:	e0b5      	b.n	800523c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d0:	201f      	movs	r0, #31
 80050d2:	183b      	adds	r3, r7, r0
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	055b      	lsls	r3, r3, #21
 80050e0:	4013      	ands	r3, r2
 80050e2:	d110      	bne.n	8005106 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	0549      	lsls	r1, r1, #21
 80050ee:	430a      	orrs	r2, r1
 80050f0:	61da      	str	r2, [r3, #28]
 80050f2:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	055b      	lsls	r3, r3, #21
 80050fa:	4013      	ands	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005100:	183b      	adds	r3, r7, r0
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b19      	ldr	r3, [pc, #100]	; (800516c <HAL_RCC_OscConfig+0x340>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4013      	ands	r3, r2
 8005110:	d11a      	bne.n	8005148 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b16      	ldr	r3, [pc, #88]	; (800516c <HAL_RCC_OscConfig+0x340>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <HAL_RCC_OscConfig+0x340>)
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	0049      	lsls	r1, r1, #1
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005120:	f7ff f9b8 	bl	8004494 <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512a:	f7ff f9b3 	bl	8004494 <HAL_GetTick>
 800512e:	0002      	movs	r2, r0
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	; 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e186      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_RCC_OscConfig+0x340>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4013      	ands	r3, r2
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10f      	bne.n	8005170 <HAL_RCC_OscConfig+0x344>
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	4b02      	ldr	r3, [pc, #8]	; (8005160 <HAL_RCC_OscConfig+0x334>)
 8005156:	2101      	movs	r1, #1
 8005158:	430a      	orrs	r2, r1
 800515a:	621a      	str	r2, [r3, #32]
 800515c:	e036      	b.n	80051cc <HAL_RCC_OscConfig+0x3a0>
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	40021000 	.word	0x40021000
 8005164:	fffeffff 	.word	0xfffeffff
 8005168:	fffbffff 	.word	0xfffbffff
 800516c:	40007000 	.word	0x40007000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10c      	bne.n	8005192 <HAL_RCC_OscConfig+0x366>
 8005178:	4bb6      	ldr	r3, [pc, #728]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	4bb5      	ldr	r3, [pc, #724]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800517e:	2101      	movs	r1, #1
 8005180:	438a      	bics	r2, r1
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	4bb3      	ldr	r3, [pc, #716]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	4bb2      	ldr	r3, [pc, #712]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800518a:	2104      	movs	r1, #4
 800518c:	438a      	bics	r2, r1
 800518e:	621a      	str	r2, [r3, #32]
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x3a0>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x388>
 800519a:	4bae      	ldr	r3, [pc, #696]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	4bad      	ldr	r3, [pc, #692]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051a0:	2104      	movs	r1, #4
 80051a2:	430a      	orrs	r2, r1
 80051a4:	621a      	str	r2, [r3, #32]
 80051a6:	4bab      	ldr	r3, [pc, #684]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	4baa      	ldr	r3, [pc, #680]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051ac:	2101      	movs	r1, #1
 80051ae:	430a      	orrs	r2, r1
 80051b0:	621a      	str	r2, [r3, #32]
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0x3a0>
 80051b4:	4ba7      	ldr	r3, [pc, #668]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	4ba6      	ldr	r3, [pc, #664]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051ba:	2101      	movs	r1, #1
 80051bc:	438a      	bics	r2, r1
 80051be:	621a      	str	r2, [r3, #32]
 80051c0:	4ba4      	ldr	r3, [pc, #656]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	4ba3      	ldr	r3, [pc, #652]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051c6:	2104      	movs	r1, #4
 80051c8:	438a      	bics	r2, r1
 80051ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d014      	beq.n	80051fe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d4:	f7ff f95e 	bl	8004494 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051dc:	e009      	b.n	80051f2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7ff f959 	bl	8004494 <HAL_GetTick>
 80051e2:	0002      	movs	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	4a9b      	ldr	r2, [pc, #620]	; (8005458 <HAL_RCC_OscConfig+0x62c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e12b      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	4b98      	ldr	r3, [pc, #608]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	2202      	movs	r2, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x3b2>
 80051fc:	e013      	b.n	8005226 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7ff f949 	bl	8004494 <HAL_GetTick>
 8005202:	0003      	movs	r3, r0
 8005204:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	e009      	b.n	800521c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7ff f944 	bl	8004494 <HAL_GetTick>
 800520c:	0002      	movs	r2, r0
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	4a91      	ldr	r2, [pc, #580]	; (8005458 <HAL_RCC_OscConfig+0x62c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e116      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521c:	4b8d      	ldr	r3, [pc, #564]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	2202      	movs	r2, #2
 8005222:	4013      	ands	r3, r2
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005226:	231f      	movs	r3, #31
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b88      	ldr	r3, [pc, #544]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	4b87      	ldr	r3, [pc, #540]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005236:	4989      	ldr	r1, [pc, #548]	; (800545c <HAL_RCC_OscConfig+0x630>)
 8005238:	400a      	ands	r2, r1
 800523a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2210      	movs	r2, #16
 8005242:	4013      	ands	r3, r2
 8005244:	d063      	beq.n	800530e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d12a      	bne.n	80052a4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800524e:	4b81      	ldr	r3, [pc, #516]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005252:	4b80      	ldr	r3, [pc, #512]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005254:	2104      	movs	r1, #4
 8005256:	430a      	orrs	r2, r1
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800525a:	4b7e      	ldr	r3, [pc, #504]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800525c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525e:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005260:	2101      	movs	r1, #1
 8005262:	430a      	orrs	r2, r1
 8005264:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005266:	f7ff f915 	bl	8004494 <HAL_GetTick>
 800526a:	0003      	movs	r3, r0
 800526c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005270:	f7ff f910 	bl	8004494 <HAL_GetTick>
 8005274:	0002      	movs	r2, r0
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0e3      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005282:	4b74      	ldr	r3, [pc, #464]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	2202      	movs	r2, #2
 8005288:	4013      	ands	r3, r2
 800528a:	d0f1      	beq.n	8005270 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800528c:	4b71      	ldr	r3, [pc, #452]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	22f8      	movs	r2, #248	; 0xf8
 8005292:	4393      	bics	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	00da      	lsls	r2, r3, #3
 800529c:	4b6d      	ldr	r3, [pc, #436]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800529e:	430a      	orrs	r2, r1
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34
 80052a2:	e034      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	3305      	adds	r3, #5
 80052aa:	d111      	bne.n	80052d0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80052ac:	4b69      	ldr	r3, [pc, #420]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b0:	4b68      	ldr	r3, [pc, #416]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052b2:	2104      	movs	r1, #4
 80052b4:	438a      	bics	r2, r1
 80052b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052b8:	4b66      	ldr	r3, [pc, #408]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	22f8      	movs	r2, #248	; 0xf8
 80052be:	4393      	bics	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	00da      	lsls	r2, r3, #3
 80052c8:	4b62      	ldr	r3, [pc, #392]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34
 80052ce:	e01e      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052d0:	4b60      	ldr	r3, [pc, #384]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d4:	4b5f      	ldr	r3, [pc, #380]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052d6:	2104      	movs	r1, #4
 80052d8:	430a      	orrs	r2, r1
 80052da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80052dc:	4b5d      	ldr	r3, [pc, #372]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e0:	4b5c      	ldr	r3, [pc, #368]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e8:	f7ff f8d4 	bl	8004494 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80052f2:	f7ff f8cf 	bl	8004494 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0a2      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005304:	4b53      	ldr	r3, [pc, #332]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	2202      	movs	r2, #2
 800530a:	4013      	ands	r3, r2
 800530c:	d1f1      	bne.n	80052f2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d100      	bne.n	8005318 <HAL_RCC_OscConfig+0x4ec>
 8005316:	e097      	b.n	8005448 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005318:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	220c      	movs	r2, #12
 800531e:	4013      	ands	r3, r2
 8005320:	2b08      	cmp	r3, #8
 8005322:	d100      	bne.n	8005326 <HAL_RCC_OscConfig+0x4fa>
 8005324:	e06b      	b.n	80053fe <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d14c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532e:	4b49      	ldr	r3, [pc, #292]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b48      	ldr	r3, [pc, #288]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005334:	494a      	ldr	r1, [pc, #296]	; (8005460 <HAL_RCC_OscConfig+0x634>)
 8005336:	400a      	ands	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533a:	f7ff f8ab 	bl	8004494 <HAL_GetTick>
 800533e:	0003      	movs	r3, r0
 8005340:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005344:	f7ff f8a6 	bl	8004494 <HAL_GetTick>
 8005348:	0002      	movs	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e079      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	049b      	lsls	r3, r3, #18
 800535e:	4013      	ands	r3, r2
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005362:	4b3c      	ldr	r3, [pc, #240]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	220f      	movs	r2, #15
 8005368:	4393      	bics	r3, r2
 800536a:	0019      	movs	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	4b38      	ldr	r3, [pc, #224]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005372:	430a      	orrs	r2, r1
 8005374:	62da      	str	r2, [r3, #44]	; 0x2c
 8005376:	4b37      	ldr	r3, [pc, #220]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_RCC_OscConfig+0x638>)
 800537c:	4013      	ands	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	431a      	orrs	r2, r3
 800538a:	4b32      	ldr	r3, [pc, #200]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005390:	4b30      	ldr	r3, [pc, #192]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b2f      	ldr	r3, [pc, #188]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	0449      	lsls	r1, r1, #17
 800539a:	430a      	orrs	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539e:	f7ff f879 	bl	8004494 <HAL_GetTick>
 80053a2:	0003      	movs	r3, r0
 80053a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a8:	f7ff f874 	bl	8004494 <HAL_GetTick>
 80053ac:	0002      	movs	r2, r0
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e047      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ba:	4b26      	ldr	r3, [pc, #152]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	049b      	lsls	r3, r3, #18
 80053c2:	4013      	ands	r3, r2
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x57c>
 80053c6:	e03f      	b.n	8005448 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80053ce:	4924      	ldr	r1, [pc, #144]	; (8005460 <HAL_RCC_OscConfig+0x634>)
 80053d0:	400a      	ands	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7ff f85e 	bl	8004494 <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053de:	f7ff f859 	bl	8004494 <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e02c      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	049b      	lsls	r3, r3, #18
 80053f8:	4013      	ands	r3, r2
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x5b2>
 80053fc:	e024      	b.n	8005448 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e01f      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_RCC_OscConfig+0x628>)
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	23c0      	movs	r3, #192	; 0xc0
 800541a:	025b      	lsls	r3, r3, #9
 800541c:	401a      	ands	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	429a      	cmp	r2, r3
 8005424:	d10e      	bne.n	8005444 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	220f      	movs	r2, #15
 800542a:	401a      	ands	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d107      	bne.n	8005444 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	23f0      	movs	r3, #240	; 0xf0
 8005438:	039b      	lsls	r3, r3, #14
 800543a:	401a      	ands	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b008      	add	sp, #32
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	40021000 	.word	0x40021000
 8005458:	00001388 	.word	0x00001388
 800545c:	efffffff 	.word	0xefffffff
 8005460:	feffffff 	.word	0xfeffffff
 8005464:	ffc27fff 	.word	0xffc27fff

08005468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0b3      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b5b      	ldr	r3, [pc, #364]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	4013      	ands	r3, r2
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d911      	bls.n	80054ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b58      	ldr	r3, [pc, #352]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2201      	movs	r2, #1
 8005490:	4393      	bics	r3, r2
 8005492:	0019      	movs	r1, r3
 8005494:	4b55      	ldr	r3, [pc, #340]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2201      	movs	r2, #1
 80054a2:	4013      	ands	r3, r2
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e09a      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	d015      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2204      	movs	r2, #4
 80054be:	4013      	ands	r3, r2
 80054c0:	d006      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054c2:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80054c8:	21e0      	movs	r1, #224	; 0xe0
 80054ca:	00c9      	lsls	r1, r1, #3
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d0:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	22f0      	movs	r2, #240	; 0xf0
 80054d6:	4393      	bics	r3, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	4b44      	ldr	r3, [pc, #272]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	d040      	beq.n	8005570 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	4013      	ands	r3, r2
 8005500:	d114      	bne.n	800552c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e06e      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	049b      	lsls	r3, r3, #18
 8005516:	4013      	ands	r3, r2
 8005518:	d108      	bne.n	800552c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e062      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2202      	movs	r2, #2
 8005524:	4013      	ands	r3, r2
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e05b      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552c:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2203      	movs	r2, #3
 8005532:	4393      	bics	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005540:	f7fe ffa8 	bl	8004494 <HAL_GetTick>
 8005544:	0003      	movs	r3, r0
 8005546:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005548:	e009      	b.n	800555e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fe ffa3 	bl	8004494 <HAL_GetTick>
 800554e:	0002      	movs	r2, r0
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_RCC_ClockConfig+0x18c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e042      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	220c      	movs	r2, #12
 8005564:	401a      	ands	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	429a      	cmp	r2, r3
 800556e:	d1ec      	bne.n	800554a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	4013      	ands	r3, r2
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d211      	bcs.n	80055a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	4393      	bics	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <HAL_RCC_ClockConfig+0x184>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	4013      	ands	r3, r2
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e020      	b.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2204      	movs	r2, #4
 80055a8:	4013      	ands	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80055ac:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <HAL_RCC_ClockConfig+0x190>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055c0:	f000 f820 	bl	8005604 <HAL_RCC_GetSysClockFreq>
 80055c4:	0001      	movs	r1, r0
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x188>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	220f      	movs	r2, #15
 80055ce:	4013      	ands	r3, r2
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_RCC_ClockConfig+0x194>)
 80055d2:	5cd3      	ldrb	r3, [r2, r3]
 80055d4:	000a      	movs	r2, r1
 80055d6:	40da      	lsrs	r2, r3
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_RCC_ClockConfig+0x198>)
 80055da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80055dc:	2003      	movs	r0, #3
 80055de:	f7fe ff13 	bl	8004408 <HAL_InitTick>
  
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	0018      	movs	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b004      	add	sp, #16
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40022000 	.word	0x40022000
 80055f0:	40021000 	.word	0x40021000
 80055f4:	00001388 	.word	0x00001388
 80055f8:	fffff8ff 	.word	0xfffff8ff
 80055fc:	0800db0c 	.word	0x0800db0c
 8005600:	20000000 	.word	0x20000000

08005604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b08f      	sub	sp, #60	; 0x3c
 8005608:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800560a:	2314      	movs	r3, #20
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	4a2c      	ldr	r2, [pc, #176]	; (80056c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005610:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005612:	c313      	stmia	r3!, {r0, r1, r4}
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800561c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800561e:	c313      	stmia	r3!, {r0, r1, r4}
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005628:	2300      	movs	r3, #0
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
 800562c:	2300      	movs	r3, #0
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	220c      	movs	r2, #12
 8005642:	4013      	ands	r3, r2
 8005644:	2b04      	cmp	r3, #4
 8005646:	d002      	beq.n	800564e <HAL_RCC_GetSysClockFreq+0x4a>
 8005648:	2b08      	cmp	r3, #8
 800564a:	d003      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x50>
 800564c:	e02f      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005650:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005652:	e02f      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	0c9b      	lsrs	r3, r3, #18
 8005658:	220f      	movs	r2, #15
 800565a:	4013      	ands	r3, r2
 800565c:	2214      	movs	r2, #20
 800565e:	18ba      	adds	r2, r7, r2
 8005660:	5cd3      	ldrb	r3, [r2, r3]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005664:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	220f      	movs	r2, #15
 800566a:	4013      	ands	r3, r2
 800566c:	1d3a      	adds	r2, r7, #4
 800566e:	5cd3      	ldrb	r3, [r2, r3]
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005674:	23c0      	movs	r3, #192	; 0xc0
 8005676:	025b      	lsls	r3, r3, #9
 8005678:	401a      	ands	r2, r3
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	025b      	lsls	r3, r3, #9
 800567e:	429a      	cmp	r2, r3
 8005680:	d109      	bne.n	8005696 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005684:	4811      	ldr	r0, [pc, #68]	; (80056cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005686:	f7fa fd65 	bl	8000154 <__udivsi3>
 800568a:	0003      	movs	r3, r0
 800568c:	001a      	movs	r2, r3
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	4353      	muls	r3, r2
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
 8005694:	e008      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005698:	480c      	ldr	r0, [pc, #48]	; (80056cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800569a:	f7fa fd5b 	bl	8000154 <__udivsi3>
 800569e:	0003      	movs	r3, r0
 80056a0:	001a      	movs	r2, r3
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	4353      	muls	r3, r2
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80056a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056ac:	e002      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ae:	4b07      	ldr	r3, [pc, #28]	; (80056cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b00f      	add	sp, #60	; 0x3c
 80056bc:	bd90      	pop	{r4, r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	0800da60 	.word	0x0800da60
 80056c4:	0800da70 	.word	0x0800da70
 80056c8:	40021000 	.word	0x40021000
 80056cc:	007a1200 	.word	0x007a1200

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	20000000 	.word	0x20000000

080056e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80056e8:	f7ff fff2 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056ec:	0001      	movs	r1, r0
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	2207      	movs	r2, #7
 80056f6:	4013      	ands	r3, r2
 80056f8:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_RCC_GetPCLK1Freq+0x28>)
 80056fa:	5cd3      	ldrb	r3, [r2, r3]
 80056fc:	40d9      	lsrs	r1, r3
 80056fe:	000b      	movs	r3, r1
}    
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	40021000 	.word	0x40021000
 800570c:	0800db1c 	.word	0x0800db1c

08005710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e042      	b.n	80057a8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	223d      	movs	r2, #61	; 0x3d
 8005726:	5c9b      	ldrb	r3, [r3, r2]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	223c      	movs	r2, #60	; 0x3c
 8005732:	2100      	movs	r1, #0
 8005734:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f7fe fb33 	bl	8003da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	223d      	movs	r2, #61	; 0x3d
 8005742:	2102      	movs	r1, #2
 8005744:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	0019      	movs	r1, r3
 8005750:	0010      	movs	r0, r2
 8005752:	f000 ffed 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2246      	movs	r2, #70	; 0x46
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	223e      	movs	r2, #62	; 0x3e
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223f      	movs	r2, #63	; 0x3f
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2241      	movs	r2, #65	; 0x41
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2242      	movs	r2, #66	; 0x42
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2243      	movs	r2, #67	; 0x43
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2244      	movs	r2, #68	; 0x44
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2245      	movs	r2, #69	; 0x45
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	223d      	movs	r2, #61	; 0x3d
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e042      	b.n	8005848 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	223d      	movs	r2, #61	; 0x3d
 80057c6:	5c9b      	ldrb	r3, [r3, r2]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223c      	movs	r2, #60	; 0x3c
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 f839 	bl	8005850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	223d      	movs	r2, #61	; 0x3d
 80057e2:	2102      	movs	r1, #2
 80057e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	0019      	movs	r1, r3
 80057f0:	0010      	movs	r0, r2
 80057f2:	f000 ff9d 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2246      	movs	r2, #70	; 0x46
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	223e      	movs	r2, #62	; 0x3e
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	223f      	movs	r2, #63	; 0x3f
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2240      	movs	r2, #64	; 0x40
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2241      	movs	r2, #65	; 0x41
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2242      	movs	r2, #66	; 0x42
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2243      	movs	r2, #67	; 0x43
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2244      	movs	r2, #68	; 0x44
 8005832:	2101      	movs	r1, #1
 8005834:	5499      	strb	r1, [r3, r2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2245      	movs	r2, #69	; 0x45
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	223d      	movs	r2, #61	; 0x3d
 8005842:	2101      	movs	r1, #1
 8005844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <HAL_TIM_PWM_Start+0x22>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	223e      	movs	r2, #62	; 0x3e
 8005874:	5c9b      	ldrb	r3, [r3, r2]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	1e5a      	subs	r2, r3, #1
 800587c:	4193      	sbcs	r3, r2
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e01f      	b.n	80058c2 <HAL_TIM_PWM_Start+0x62>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b04      	cmp	r3, #4
 8005886:	d108      	bne.n	800589a <HAL_TIM_PWM_Start+0x3a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	223f      	movs	r2, #63	; 0x3f
 800588c:	5c9b      	ldrb	r3, [r3, r2]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	4193      	sbcs	r3, r2
 8005896:	b2db      	uxtb	r3, r3
 8005898:	e013      	b.n	80058c2 <HAL_TIM_PWM_Start+0x62>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d108      	bne.n	80058b2 <HAL_TIM_PWM_Start+0x52>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	5c9b      	ldrb	r3, [r3, r2]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	4193      	sbcs	r3, r2
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	e007      	b.n	80058c2 <HAL_TIM_PWM_Start+0x62>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2241      	movs	r2, #65	; 0x41
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	1e5a      	subs	r2, r3, #1
 80058be:	4193      	sbcs	r3, r2
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e06e      	b.n	80059a8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0x7a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	223e      	movs	r2, #62	; 0x3e
 80058d4:	2102      	movs	r1, #2
 80058d6:	5499      	strb	r1, [r3, r2]
 80058d8:	e013      	b.n	8005902 <HAL_TIM_PWM_Start+0xa2>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0x8a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	223f      	movs	r2, #63	; 0x3f
 80058e4:	2102      	movs	r1, #2
 80058e6:	5499      	strb	r1, [r3, r2]
 80058e8:	e00b      	b.n	8005902 <HAL_TIM_PWM_Start+0xa2>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0x9a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2240      	movs	r2, #64	; 0x40
 80058f4:	2102      	movs	r1, #2
 80058f6:	5499      	strb	r1, [r3, r2]
 80058f8:	e003      	b.n	8005902 <HAL_TIM_PWM_Start+0xa2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2241      	movs	r2, #65	; 0x41
 80058fe:	2102      	movs	r1, #2
 8005900:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	0018      	movs	r0, r3
 800590c:	f001 fb3c 	bl	8006f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <HAL_TIM_PWM_Start+0x150>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00e      	beq.n	8005938 <HAL_TIM_PWM_Start+0xd8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <HAL_TIM_PWM_Start+0x154>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_TIM_PWM_Start+0xd8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <HAL_TIM_PWM_Start+0x158>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_TIM_PWM_Start+0xd8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a22      	ldr	r2, [pc, #136]	; (80059bc <HAL_TIM_PWM_Start+0x15c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d101      	bne.n	800593c <HAL_TIM_PWM_Start+0xdc>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <HAL_TIM_PWM_Start+0xde>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2180      	movs	r1, #128	; 0x80
 800594e:	0209      	lsls	r1, r1, #8
 8005950:	430a      	orrs	r2, r1
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <HAL_TIM_PWM_Start+0x150>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIM_PWM_Start+0x112>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <HAL_TIM_PWM_Start+0x160>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIM_PWM_Start+0x112>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <HAL_TIM_PWM_Start+0x154>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d111      	bne.n	8005996 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2207      	movs	r2, #7
 800597a:	4013      	ands	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d010      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2101      	movs	r1, #1
 8005990:	430a      	orrs	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	e007      	b.n	80059a6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2101      	movs	r1, #1
 80059a2:	430a      	orrs	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b004      	add	sp, #16
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	40000400 	.word	0x40000400

080059c4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	230f      	movs	r3, #15
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d108      	bne.n	80059ee <HAL_TIM_PWM_Start_IT+0x2a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223e      	movs	r2, #62	; 0x3e
 80059e0:	5c9b      	ldrb	r3, [r3, r2]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4193      	sbcs	r3, r2
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	e01f      	b.n	8005a2e <HAL_TIM_PWM_Start_IT+0x6a>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d108      	bne.n	8005a06 <HAL_TIM_PWM_Start_IT+0x42>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	223f      	movs	r2, #63	; 0x3f
 80059f8:	5c9b      	ldrb	r3, [r3, r2]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	1e5a      	subs	r2, r3, #1
 8005a00:	4193      	sbcs	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e013      	b.n	8005a2e <HAL_TIM_PWM_Start_IT+0x6a>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d108      	bne.n	8005a1e <HAL_TIM_PWM_Start_IT+0x5a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	5c9b      	ldrb	r3, [r3, r2]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	1e5a      	subs	r2, r3, #1
 8005a18:	4193      	sbcs	r3, r2
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e007      	b.n	8005a2e <HAL_TIM_PWM_Start_IT+0x6a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2241      	movs	r2, #65	; 0x41
 8005a22:	5c9b      	ldrb	r3, [r3, r2]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	4193      	sbcs	r3, r2
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0b1      	b.n	8005b9a <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Start_IT+0x82>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	223e      	movs	r2, #62	; 0x3e
 8005a40:	2102      	movs	r1, #2
 8005a42:	5499      	strb	r1, [r3, r2]
 8005a44:	e013      	b.n	8005a6e <HAL_TIM_PWM_Start_IT+0xaa>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Start_IT+0x92>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	223f      	movs	r2, #63	; 0x3f
 8005a50:	2102      	movs	r1, #2
 8005a52:	5499      	strb	r1, [r3, r2]
 8005a54:	e00b      	b.n	8005a6e <HAL_TIM_PWM_Start_IT+0xaa>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start_IT+0xa2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	2102      	movs	r1, #2
 8005a62:	5499      	strb	r1, [r3, r2]
 8005a64:	e003      	b.n	8005a6e <HAL_TIM_PWM_Start_IT+0xaa>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2241      	movs	r2, #65	; 0x41
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d02a      	beq.n	8005aca <HAL_TIM_PWM_Start_IT+0x106>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d830      	bhi.n	8005adc <HAL_TIM_PWM_Start_IT+0x118>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d01b      	beq.n	8005ab8 <HAL_TIM_PWM_Start_IT+0xf4>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d82a      	bhi.n	8005adc <HAL_TIM_PWM_Start_IT+0x118>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_TIM_PWM_Start_IT+0xd0>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIM_PWM_Start_IT+0xe2>
 8005a92:	e023      	b.n	8005adc <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	60da      	str	r2, [r3, #12]
      break;
 8005aa4:	e01f      	b.n	8005ae6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2104      	movs	r1, #4
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	60da      	str	r2, [r3, #12]
      break;
 8005ab6:	e016      	b.n	8005ae6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2108      	movs	r1, #8
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	60da      	str	r2, [r3, #12]
      break;
 8005ac8:	e00d      	b.n	8005ae6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	60da      	str	r2, [r3, #12]
      break;
 8005ada:	e004      	b.n	8005ae6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005adc:	230f      	movs	r3, #15
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	701a      	strb	r2, [r3, #0]
      break;
 8005ae4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005ae6:	230f      	movs	r3, #15
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d151      	bne.n	8005b94 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	2201      	movs	r2, #1
 8005af8:	0018      	movs	r0, r3
 8005afa:	f001 fa45 	bl	8006f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a28      	ldr	r2, [pc, #160]	; (8005ba4 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_TIM_PWM_Start_IT+0x162>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a26      	ldr	r2, [pc, #152]	; (8005ba8 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_TIM_PWM_Start_IT+0x162>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a25      	ldr	r2, [pc, #148]	; (8005bac <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIM_PWM_Start_IT+0x162>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_PWM_Start_IT+0x166>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_TIM_PWM_Start_IT+0x168>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	0209      	lsls	r1, r1, #8
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_TIM_PWM_Start_IT+0x19c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIM_PWM_Start_IT+0x19c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2207      	movs	r2, #7
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d010      	beq.n	8005b94 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e007      	b.n	8005b94 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2101      	movs	r1, #1
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b94:	230f      	movs	r3, #15
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	781b      	ldrb	r3, [r3, #0]
}
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	b004      	add	sp, #16
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	40000400 	.word	0x40000400

08005bb8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	230f      	movs	r3, #15
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	d02a      	beq.n	8005c26 <HAL_TIM_PWM_Stop_IT+0x6e>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d830      	bhi.n	8005c38 <HAL_TIM_PWM_Stop_IT+0x80>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d01b      	beq.n	8005c14 <HAL_TIM_PWM_Stop_IT+0x5c>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d82a      	bhi.n	8005c38 <HAL_TIM_PWM_Stop_IT+0x80>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_TIM_PWM_Stop_IT+0x38>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d009      	beq.n	8005c02 <HAL_TIM_PWM_Stop_IT+0x4a>
 8005bee:	e023      	b.n	8005c38 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	438a      	bics	r2, r1
 8005bfe:	60da      	str	r2, [r3, #12]
      break;
 8005c00:	e01f      	b.n	8005c42 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2104      	movs	r1, #4
 8005c0e:	438a      	bics	r2, r1
 8005c10:	60da      	str	r2, [r3, #12]
      break;
 8005c12:	e016      	b.n	8005c42 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2108      	movs	r1, #8
 8005c20:	438a      	bics	r2, r1
 8005c22:	60da      	str	r2, [r3, #12]
      break;
 8005c24:	e00d      	b.n	8005c42 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2110      	movs	r1, #16
 8005c32:	438a      	bics	r2, r1
 8005c34:	60da      	str	r2, [r3, #12]
      break;
 8005c36:	e004      	b.n	8005c42 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005c38:	230f      	movs	r3, #15
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
      break;
 8005c40:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005c42:	230f      	movs	r3, #15
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d000      	beq.n	8005c4e <HAL_TIM_PWM_Stop_IT+0x96>
 8005c4c:	e063      	b.n	8005d16 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	0018      	movs	r0, r3
 8005c58:	f001 f996 	bl	8006f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <HAL_TIM_PWM_Stop_IT+0x170>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <HAL_TIM_PWM_Stop_IT+0x174>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_PWM_Stop_IT+0xd0>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_TIM_PWM_Stop_IT+0xd2>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	d10d      	bne.n	8005cb6 <HAL_TIM_PWM_Stop_IT+0xfe>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_PWM_Stop_IT+0xfe>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4922      	ldr	r1, [pc, #136]	; (8005d3c <HAL_TIM_PWM_Stop_IT+0x184>)
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d10d      	bne.n	8005cde <HAL_TIM_PWM_Stop_IT+0x126>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_PWM_Stop_IT+0x126>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2101      	movs	r1, #1
 8005cda:	438a      	bics	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Stop_IT+0x136>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	223e      	movs	r2, #62	; 0x3e
 8005ce8:	2101      	movs	r1, #1
 8005cea:	5499      	strb	r1, [r3, r2]
 8005cec:	e013      	b.n	8005d16 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Stop_IT+0x146>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	223f      	movs	r2, #63	; 0x3f
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	5499      	strb	r1, [r3, r2]
 8005cfc:	e00b      	b.n	8005d16 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_PWM_Stop_IT+0x156>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2240      	movs	r2, #64	; 0x40
 8005d08:	2101      	movs	r1, #1
 8005d0a:	5499      	strb	r1, [r3, r2]
 8005d0c:	e003      	b.n	8005d16 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2241      	movs	r2, #65	; 0x41
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005d16:	230f      	movs	r3, #15
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	781b      	ldrb	r3, [r3, #0]
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b004      	add	sp, #16
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800
 8005d34:	00001111 	.word	0x00001111
 8005d38:	00000444 	.word	0x00000444
 8005d3c:	ffff7fff 	.word	0xffff7fff

08005d40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e042      	b.n	8005dd8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	223d      	movs	r2, #61	; 0x3d
 8005d56:	5c9b      	ldrb	r3, [r3, r2]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	223c      	movs	r2, #60	; 0x3c
 8005d62:	2100      	movs	r1, #0
 8005d64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7fe f859 	bl	8003e20 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	223d      	movs	r2, #61	; 0x3d
 8005d72:	2102      	movs	r1, #2
 8005d74:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	0019      	movs	r1, r3
 8005d80:	0010      	movs	r0, r2
 8005d82:	f000 fcd5 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2246      	movs	r2, #70	; 0x46
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	223e      	movs	r2, #62	; 0x3e
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	223f      	movs	r2, #63	; 0x3f
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2240      	movs	r2, #64	; 0x40
 8005da2:	2101      	movs	r1, #1
 8005da4:	5499      	strb	r1, [r3, r2]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2241      	movs	r2, #65	; 0x41
 8005daa:	2101      	movs	r1, #1
 8005dac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2242      	movs	r2, #66	; 0x42
 8005db2:	2101      	movs	r1, #1
 8005db4:	5499      	strb	r1, [r3, r2]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2243      	movs	r2, #67	; 0x43
 8005dba:	2101      	movs	r1, #1
 8005dbc:	5499      	strb	r1, [r3, r2]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2244      	movs	r2, #68	; 0x44
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	5499      	strb	r1, [r3, r2]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2245      	movs	r2, #69	; 0x45
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	223d      	movs	r2, #61	; 0x3d
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	0018      	movs	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	230f      	movs	r3, #15
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_IC_Start_IT+0x22>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	223e      	movs	r2, #62	; 0x3e
 8005dfc:	5c9b      	ldrb	r3, [r3, r2]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	e013      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x4a>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_IC_Start_IT+0x32>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	223f      	movs	r2, #63	; 0x3f
 8005e0c:	5c9b      	ldrb	r3, [r3, r2]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e00b      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x4a>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_IC_Start_IT+0x42>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	5c9b      	ldrb	r3, [r3, r2]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e003      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x4a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2241      	movs	r2, #65	; 0x41
 8005e26:	5c9b      	ldrb	r3, [r3, r2]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	220e      	movs	r2, #14
 8005e2c:	18ba      	adds	r2, r7, r2
 8005e2e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <HAL_TIM_IC_Start_IT+0x60>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2242      	movs	r2, #66	; 0x42
 8005e3a:	5c9b      	ldrb	r3, [r3, r2]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e013      	b.n	8005e68 <HAL_TIM_IC_Start_IT+0x88>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d104      	bne.n	8005e50 <HAL_TIM_IC_Start_IT+0x70>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2243      	movs	r2, #67	; 0x43
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	e00b      	b.n	8005e68 <HAL_TIM_IC_Start_IT+0x88>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d104      	bne.n	8005e60 <HAL_TIM_IC_Start_IT+0x80>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2244      	movs	r2, #68	; 0x44
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e003      	b.n	8005e68 <HAL_TIM_IC_Start_IT+0x88>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2245      	movs	r2, #69	; 0x45
 8005e64:	5c9b      	ldrb	r3, [r3, r2]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	210d      	movs	r1, #13
 8005e6a:	187a      	adds	r2, r7, r1
 8005e6c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6e:	230e      	movs	r3, #14
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d103      	bne.n	8005e80 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d001      	beq.n	8005e84 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0ab      	b.n	8005fdc <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <HAL_TIM_IC_Start_IT+0xb4>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	223e      	movs	r2, #62	; 0x3e
 8005e8e:	2102      	movs	r1, #2
 8005e90:	5499      	strb	r1, [r3, r2]
 8005e92:	e013      	b.n	8005ebc <HAL_TIM_IC_Start_IT+0xdc>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d104      	bne.n	8005ea4 <HAL_TIM_IC_Start_IT+0xc4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	223f      	movs	r2, #63	; 0x3f
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	5499      	strb	r1, [r3, r2]
 8005ea2:	e00b      	b.n	8005ebc <HAL_TIM_IC_Start_IT+0xdc>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d104      	bne.n	8005eb4 <HAL_TIM_IC_Start_IT+0xd4>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2240      	movs	r2, #64	; 0x40
 8005eae:	2102      	movs	r1, #2
 8005eb0:	5499      	strb	r1, [r3, r2]
 8005eb2:	e003      	b.n	8005ebc <HAL_TIM_IC_Start_IT+0xdc>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2241      	movs	r2, #65	; 0x41
 8005eb8:	2102      	movs	r1, #2
 8005eba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <HAL_TIM_IC_Start_IT+0xec>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2242      	movs	r2, #66	; 0x42
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	5499      	strb	r1, [r3, r2]
 8005eca:	e013      	b.n	8005ef4 <HAL_TIM_IC_Start_IT+0x114>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d104      	bne.n	8005edc <HAL_TIM_IC_Start_IT+0xfc>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2243      	movs	r2, #67	; 0x43
 8005ed6:	2102      	movs	r1, #2
 8005ed8:	5499      	strb	r1, [r3, r2]
 8005eda:	e00b      	b.n	8005ef4 <HAL_TIM_IC_Start_IT+0x114>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d104      	bne.n	8005eec <HAL_TIM_IC_Start_IT+0x10c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2244      	movs	r2, #68	; 0x44
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	5499      	strb	r1, [r3, r2]
 8005eea:	e003      	b.n	8005ef4 <HAL_TIM_IC_Start_IT+0x114>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2245      	movs	r2, #69	; 0x45
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b0c      	cmp	r3, #12
 8005ef8:	d02a      	beq.n	8005f50 <HAL_TIM_IC_Start_IT+0x170>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d830      	bhi.n	8005f62 <HAL_TIM_IC_Start_IT+0x182>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d01b      	beq.n	8005f3e <HAL_TIM_IC_Start_IT+0x15e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d82a      	bhi.n	8005f62 <HAL_TIM_IC_Start_IT+0x182>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IC_Start_IT+0x13a>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d009      	beq.n	8005f2c <HAL_TIM_IC_Start_IT+0x14c>
 8005f18:	e023      	b.n	8005f62 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2102      	movs	r1, #2
 8005f26:	430a      	orrs	r2, r1
 8005f28:	60da      	str	r2, [r3, #12]
      break;
 8005f2a:	e01f      	b.n	8005f6c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2104      	movs	r1, #4
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	60da      	str	r2, [r3, #12]
      break;
 8005f3c:	e016      	b.n	8005f6c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2108      	movs	r1, #8
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	60da      	str	r2, [r3, #12]
      break;
 8005f4e:	e00d      	b.n	8005f6c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2110      	movs	r1, #16
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]
      break;
 8005f60:	e004      	b.n	8005f6c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8005f62:	230f      	movs	r3, #15
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]
      break;
 8005f6a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005f6c:	230f      	movs	r3, #15
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d12f      	bne.n	8005fd6 <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f001 f802 	bl	8006f88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a16      	ldr	r2, [pc, #88]	; (8005fe4 <HAL_TIM_IC_Start_IT+0x204>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIM_IC_Start_IT+0x1c2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <HAL_TIM_IC_Start_IT+0x208>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIM_IC_Start_IT+0x1c2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <HAL_TIM_IC_Start_IT+0x20c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d111      	bne.n	8005fc6 <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2207      	movs	r2, #7
 8005faa:	4013      	ands	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b06      	cmp	r3, #6
 8005fb2:	d010      	beq.n	8005fd6 <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	e007      	b.n	8005fd6 <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005fd6:	230f      	movs	r3, #15
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	781b      	ldrb	r3, [r3, #0]
}
 8005fdc:	0018      	movs	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b004      	add	sp, #16
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40014000 	.word	0x40014000

08005ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2202      	movs	r2, #2
 8006000:	4013      	ands	r3, r2
 8006002:	2b02      	cmp	r3, #2
 8006004:	d124      	bne.n	8006050 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2202      	movs	r2, #2
 800600e:	4013      	ands	r3, r2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11d      	bne.n	8006050 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2203      	movs	r2, #3
 800601a:	4252      	negs	r2, r2
 800601c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2203      	movs	r2, #3
 800602c:	4013      	ands	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0018      	movs	r0, r3
 8006034:	f7fd fc8a 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8006038:	e007      	b.n	800604a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f000 fb67 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f7fd fc3f 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2204      	movs	r2, #4
 8006058:	4013      	ands	r3, r2
 800605a:	2b04      	cmp	r3, #4
 800605c:	d125      	bne.n	80060aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2204      	movs	r2, #4
 8006066:	4013      	ands	r3, r2
 8006068:	2b04      	cmp	r3, #4
 800606a:	d11e      	bne.n	80060aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2205      	movs	r2, #5
 8006072:	4252      	negs	r2, r2
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	23c0      	movs	r3, #192	; 0xc0
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4013      	ands	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	0018      	movs	r0, r3
 800608e:	f7fd fc5d 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8006092:	e007      	b.n	80060a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	0018      	movs	r0, r3
 8006098:	f000 fb3a 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	0018      	movs	r0, r3
 80060a0:	f7fd fc12 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2208      	movs	r2, #8
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d124      	bne.n	8006102 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2208      	movs	r2, #8
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11d      	bne.n	8006102 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2209      	movs	r2, #9
 80060cc:	4252      	negs	r2, r2
 80060ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2204      	movs	r2, #4
 80060d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	2203      	movs	r2, #3
 80060de:	4013      	ands	r3, r2
 80060e0:	d004      	beq.n	80060ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7fd fc31 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 80060ea:	e007      	b.n	80060fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	0018      	movs	r0, r3
 80060f0:	f000 fb0e 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7fd fbe6 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2210      	movs	r2, #16
 800610a:	4013      	ands	r3, r2
 800610c:	2b10      	cmp	r3, #16
 800610e:	d125      	bne.n	800615c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2210      	movs	r2, #16
 8006118:	4013      	ands	r3, r2
 800611a:	2b10      	cmp	r3, #16
 800611c:	d11e      	bne.n	800615c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2211      	movs	r2, #17
 8006124:	4252      	negs	r2, r2
 8006126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2208      	movs	r2, #8
 800612c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	23c0      	movs	r3, #192	; 0xc0
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4013      	ands	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	0018      	movs	r0, r3
 8006140:	f7fd fc04 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8006144:	e007      	b.n	8006156 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 fae1 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	0018      	movs	r0, r3
 8006152:	f7fd fbb9 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2201      	movs	r2, #1
 8006164:	4013      	ands	r3, r2
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10f      	bne.n	800618a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	4013      	ands	r3, r2
 8006174:	2b01      	cmp	r3, #1
 8006176:	d108      	bne.n	800618a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2202      	movs	r2, #2
 800617e:	4252      	negs	r2, r2
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0018      	movs	r0, r3
 8006186:	f000 fabb 	bl	8006700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2280      	movs	r2, #128	; 0x80
 8006192:	4013      	ands	r3, r2
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d10f      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b80      	cmp	r3, #128	; 0x80
 80061a4:	d108      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2281      	movs	r2, #129	; 0x81
 80061ac:	4252      	negs	r2, r2
 80061ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 ffca 	bl	800714c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2240      	movs	r2, #64	; 0x40
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d10f      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2240      	movs	r2, #64	; 0x40
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d108      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2241      	movs	r2, #65	; 0x41
 80061da:	4252      	negs	r2, r2
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 fa9d 	bl	8006720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2220      	movs	r2, #32
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d10f      	bne.n	8006214 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d108      	bne.n	8006214 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2221      	movs	r2, #33	; 0x21
 8006208:	4252      	negs	r2, r2
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	f000 ff94 	bl	800713c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	b002      	add	sp, #8
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006228:	2317      	movs	r3, #23
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	223c      	movs	r2, #60	; 0x3c
 8006234:	5c9b      	ldrb	r3, [r3, r2]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_TIM_IC_ConfigChannel+0x22>
 800623a:	2302      	movs	r3, #2
 800623c:	e08c      	b.n	8006358 <HAL_TIM_IC_ConfigChannel+0x13c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	223c      	movs	r2, #60	; 0x3c
 8006242:	2101      	movs	r1, #1
 8006244:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11b      	bne.n	8006284 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f000 fcda 	bl	8006c14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	210c      	movs	r1, #12
 800626c:	438a      	bics	r2, r1
 800626e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	619a      	str	r2, [r3, #24]
 8006282:	e062      	b.n	800634a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d11c      	bne.n	80062c4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f000 fd41 	bl	8006d20 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	492d      	ldr	r1, [pc, #180]	; (8006360 <HAL_TIM_IC_ConfigChannel+0x144>)
 80062aa:	400a      	ands	r2, r1
 80062ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6999      	ldr	r1, [r3, #24]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	021a      	lsls	r2, r3, #8
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	619a      	str	r2, [r3, #24]
 80062c2:	e042      	b.n	800634a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d11b      	bne.n	8006302 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6819      	ldr	r1, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f000 fd95 	bl	8006e08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	210c      	movs	r1, #12
 80062ea:	438a      	bics	r2, r1
 80062ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69d9      	ldr	r1, [r3, #28]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	61da      	str	r2, [r3, #28]
 8006300:	e023      	b.n	800634a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	d11c      	bne.n	8006342 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f000 fdb6 	bl	8006e88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69da      	ldr	r2, [r3, #28]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	490e      	ldr	r1, [pc, #56]	; (8006360 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006328:	400a      	ands	r2, r1
 800632a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69d9      	ldr	r1, [r3, #28]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	021a      	lsls	r2, r3, #8
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	61da      	str	r2, [r3, #28]
 8006340:	e003      	b.n	800634a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8006342:	2317      	movs	r3, #23
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	223c      	movs	r2, #60	; 0x3c
 800634e:	2100      	movs	r1, #0
 8006350:	5499      	strb	r1, [r3, r2]

  return status;
 8006352:	2317      	movs	r3, #23
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	781b      	ldrb	r3, [r3, #0]
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b006      	add	sp, #24
 800635e:	bd80      	pop	{r7, pc}
 8006360:	fffff3ff 	.word	0xfffff3ff

08006364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006370:	2317      	movs	r3, #23
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	223c      	movs	r2, #60	; 0x3c
 800637c:	5c9b      	ldrb	r3, [r3, r2]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ad      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	223c      	movs	r2, #60	; 0x3c
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	d100      	bne.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006394:	e076      	b.n	8006484 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d900      	bls.n	800639e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800639c:	e095      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x166>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d04e      	beq.n	8006442 <HAL_TIM_PWM_ConfigChannel+0xde>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d900      	bls.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x48>
 80063aa:	e08e      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x166>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x56>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d021      	beq.n	80063fc <HAL_TIM_PWM_ConfigChannel+0x98>
 80063b8:	e087      	b.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	0011      	movs	r1, r2
 80063c2:	0018      	movs	r0, r3
 80063c4:	f000 fa2a 	bl	800681c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2108      	movs	r1, #8
 80063d4:	430a      	orrs	r2, r1
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2104      	movs	r1, #4
 80063e4:	438a      	bics	r2, r1
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
      break;
 80063fa:	e06b      	b.n	80064d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	0011      	movs	r1, r2
 8006404:	0018      	movs	r0, r3
 8006406:	f000 fa91 	bl	800692c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2180      	movs	r1, #128	; 0x80
 8006416:	0109      	lsls	r1, r1, #4
 8006418:	430a      	orrs	r2, r1
 800641a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4931      	ldr	r1, [pc, #196]	; (80064ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006428:	400a      	ands	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6999      	ldr	r1, [r3, #24]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	619a      	str	r2, [r3, #24]
      break;
 8006440:	e048      	b.n	80064d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	0011      	movs	r1, r2
 800644a:	0018      	movs	r0, r3
 800644c:	f000 faf2 	bl	8006a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2108      	movs	r1, #8
 800645c:	430a      	orrs	r2, r1
 800645e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2104      	movs	r1, #4
 800646c:	438a      	bics	r2, r1
 800646e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69d9      	ldr	r1, [r3, #28]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	61da      	str	r2, [r3, #28]
      break;
 8006482:	e027      	b.n	80064d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	0011      	movs	r1, r2
 800648c:	0018      	movs	r0, r3
 800648e:	f000 fb57 	bl	8006b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2180      	movs	r1, #128	; 0x80
 800649e:	0109      	lsls	r1, r1, #4
 80064a0:	430a      	orrs	r2, r1
 80064a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	490f      	ldr	r1, [pc, #60]	; (80064ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 80064b0:	400a      	ands	r2, r1
 80064b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69d9      	ldr	r1, [r3, #28]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	021a      	lsls	r2, r3, #8
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	61da      	str	r2, [r3, #28]
      break;
 80064c8:	e004      	b.n	80064d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80064ca:	2317      	movs	r3, #23
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
      break;
 80064d2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	223c      	movs	r2, #60	; 0x3c
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]

  return status;
 80064dc:	2317      	movs	r3, #23
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	781b      	ldrb	r3, [r3, #0]
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b006      	add	sp, #24
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	fffffbff 	.word	0xfffffbff

080064f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064fa:	230f      	movs	r3, #15
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	223c      	movs	r2, #60	; 0x3c
 8006506:	5c9b      	ldrb	r3, [r3, r2]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x20>
 800650c:	2302      	movs	r3, #2
 800650e:	e0bc      	b.n	800668a <HAL_TIM_ConfigClockSource+0x19a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	223c      	movs	r2, #60	; 0x3c
 8006514:	2101      	movs	r1, #1
 8006516:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	223d      	movs	r2, #61	; 0x3d
 800651c:	2102      	movs	r1, #2
 800651e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2277      	movs	r2, #119	; 0x77
 800652c:	4393      	bics	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006534:	4013      	ands	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2280      	movs	r2, #128	; 0x80
 8006546:	0192      	lsls	r2, r2, #6
 8006548:	4293      	cmp	r3, r2
 800654a:	d040      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0xde>
 800654c:	2280      	movs	r2, #128	; 0x80
 800654e:	0192      	lsls	r2, r2, #6
 8006550:	4293      	cmp	r3, r2
 8006552:	d900      	bls.n	8006556 <HAL_TIM_ConfigClockSource+0x66>
 8006554:	e088      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	0152      	lsls	r2, r2, #5
 800655a:	4293      	cmp	r3, r2
 800655c:	d100      	bne.n	8006560 <HAL_TIM_ConfigClockSource+0x70>
 800655e:	e088      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x182>
 8006560:	2280      	movs	r2, #128	; 0x80
 8006562:	0152      	lsls	r2, r2, #5
 8006564:	4293      	cmp	r3, r2
 8006566:	d900      	bls.n	800656a <HAL_TIM_ConfigClockSource+0x7a>
 8006568:	e07e      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 800656a:	2b70      	cmp	r3, #112	; 0x70
 800656c:	d018      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0xb0>
 800656e:	d900      	bls.n	8006572 <HAL_TIM_ConfigClockSource+0x82>
 8006570:	e07a      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 8006572:	2b60      	cmp	r3, #96	; 0x60
 8006574:	d04f      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x126>
 8006576:	d900      	bls.n	800657a <HAL_TIM_ConfigClockSource+0x8a>
 8006578:	e076      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 800657a:	2b50      	cmp	r3, #80	; 0x50
 800657c:	d03b      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x106>
 800657e:	d900      	bls.n	8006582 <HAL_TIM_ConfigClockSource+0x92>
 8006580:	e072      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d057      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x146>
 8006586:	d900      	bls.n	800658a <HAL_TIM_ConfigClockSource+0x9a>
 8006588:	e06e      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 800658a:	2b30      	cmp	r3, #48	; 0x30
 800658c:	d063      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x166>
 800658e:	d86b      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 8006590:	2b20      	cmp	r3, #32
 8006592:	d060      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x166>
 8006594:	d868      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d05d      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x166>
 800659a:	2b10      	cmp	r3, #16
 800659c:	d05b      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x166>
 800659e:	e063      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6899      	ldr	r1, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f000 fcca 	bl	8006f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2277      	movs	r2, #119	; 0x77
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	609a      	str	r2, [r3, #8]
      break;
 80065cc:	e052      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6899      	ldr	r1, [r3, #8]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f000 fcb3 	bl	8006f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2180      	movs	r1, #128	; 0x80
 80065ee:	01c9      	lsls	r1, r1, #7
 80065f0:	430a      	orrs	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
      break;
 80065f4:	e03e      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	001a      	movs	r2, r3
 8006604:	f000 fb5e 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2150      	movs	r1, #80	; 0x50
 800660e:	0018      	movs	r0, r3
 8006610:	f000 fc80 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006614:	e02e      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	001a      	movs	r2, r3
 8006624:	f000 fbbe 	bl	8006da4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2160      	movs	r1, #96	; 0x60
 800662e:	0018      	movs	r0, r3
 8006630:	f000 fc70 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006634:	e01e      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	001a      	movs	r2, r3
 8006644:	f000 fb3e 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2140      	movs	r1, #64	; 0x40
 800664e:	0018      	movs	r0, r3
 8006650:	f000 fc60 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006654:	e00e      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	0019      	movs	r1, r3
 8006660:	0010      	movs	r0, r2
 8006662:	f000 fc57 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006666:	e005      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006668:	230f      	movs	r3, #15
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2201      	movs	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]
      break;
 8006670:	e000      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006672:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	223d      	movs	r2, #61	; 0x3d
 8006678:	2101      	movs	r1, #1
 800667a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	223c      	movs	r2, #60	; 0x3c
 8006680:	2100      	movs	r1, #0
 8006682:	5499      	strb	r1, [r3, r2]

  return status;
 8006684:	230f      	movs	r3, #15
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	781b      	ldrb	r3, [r3, #0]
}
 800668a:	0018      	movs	r0, r3
 800668c:	46bd      	mov	sp, r7
 800668e:	b004      	add	sp, #16
 8006690:	bd80      	pop	{r7, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	ffff00ff 	.word	0xffff00ff

08006698 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d01e      	beq.n	80066ea <HAL_TIM_ReadCapturedValue+0x52>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d820      	bhi.n	80066f4 <HAL_TIM_ReadCapturedValue+0x5c>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d013      	beq.n	80066e0 <HAL_TIM_ReadCapturedValue+0x48>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d81a      	bhi.n	80066f4 <HAL_TIM_ReadCapturedValue+0x5c>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_TIM_ReadCapturedValue+0x34>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d005      	beq.n	80066d6 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80066ca:	e013      	b.n	80066f4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	60fb      	str	r3, [r7, #12]
      break;
 80066d4:	e00f      	b.n	80066f6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	60fb      	str	r3, [r7, #12]
      break;
 80066de:	e00a      	b.n	80066f6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	60fb      	str	r3, [r7, #12]
      break;
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	60fb      	str	r3, [r7, #12]
      break;
 80066f2:	e000      	b.n	80066f6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80066f4:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80066f6:	68fb      	ldr	r3, [r7, #12]
}
 80066f8:	0018      	movs	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b004      	add	sp, #16
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006708:	46c0      	nop			; (mov r8, r8)
 800670a:	46bd      	mov	sp, r7
 800670c:	b002      	add	sp, #8
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}

08006730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2f      	ldr	r2, [pc, #188]	; (8006800 <TIM_Base_SetConfig+0xd0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_Base_SetConfig+0x20>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2e      	ldr	r2, [pc, #184]	; (8006804 <TIM_Base_SetConfig+0xd4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d108      	bne.n	8006762 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2270      	movs	r2, #112	; 0x70
 8006754:	4393      	bics	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <TIM_Base_SetConfig+0xd0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <TIM_Base_SetConfig+0x62>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a25      	ldr	r2, [pc, #148]	; (8006804 <TIM_Base_SetConfig+0xd4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_Base_SetConfig+0x62>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_Base_SetConfig+0xd8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0x62>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <TIM_Base_SetConfig+0xdc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0x62>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a22      	ldr	r2, [pc, #136]	; (8006810 <TIM_Base_SetConfig+0xe0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0x62>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a21      	ldr	r2, [pc, #132]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a20      	ldr	r2, [pc, #128]	; (8006818 <TIM_Base_SetConfig+0xe8>)
 8006796:	4013      	ands	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	4393      	bics	r3, r2
 80067aa:	001a      	movs	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <TIM_Base_SetConfig+0xd0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_Base_SetConfig+0xba>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a0d      	ldr	r2, [pc, #52]	; (800680c <TIM_Base_SetConfig+0xdc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_Base_SetConfig+0xba>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <TIM_Base_SetConfig+0xe0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_Base_SetConfig+0xba>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d103      	bne.n	80067f2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	615a      	str	r2, [r3, #20]
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b004      	add	sp, #16
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40000400 	.word	0x40000400
 8006808:	40002000 	.word	0x40002000
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800
 8006818:	fffffcff 	.word	0xfffffcff

0800681c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	2201      	movs	r2, #1
 800682c:	4393      	bics	r3, r2
 800682e:	001a      	movs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2270      	movs	r2, #112	; 0x70
 800684a:	4393      	bics	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2203      	movs	r2, #3
 8006852:	4393      	bics	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2202      	movs	r2, #2
 8006864:	4393      	bics	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a27      	ldr	r2, [pc, #156]	; (8006914 <TIM_OC1_SetConfig+0xf8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_OC1_SetConfig+0x76>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a26      	ldr	r2, [pc, #152]	; (8006918 <TIM_OC1_SetConfig+0xfc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_OC1_SetConfig+0x76>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a25      	ldr	r2, [pc, #148]	; (800691c <TIM_OC1_SetConfig+0x100>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_OC1_SetConfig+0x76>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a24      	ldr	r2, [pc, #144]	; (8006920 <TIM_OC1_SetConfig+0x104>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d10c      	bne.n	80068ac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2208      	movs	r2, #8
 8006896:	4393      	bics	r3, r2
 8006898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2204      	movs	r2, #4
 80068a8:	4393      	bics	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a19      	ldr	r2, [pc, #100]	; (8006914 <TIM_OC1_SetConfig+0xf8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_OC1_SetConfig+0xb0>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <TIM_OC1_SetConfig+0xfc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_OC1_SetConfig+0xb0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a17      	ldr	r2, [pc, #92]	; (800691c <TIM_OC1_SetConfig+0x100>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC1_SetConfig+0xb0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a16      	ldr	r2, [pc, #88]	; (8006920 <TIM_OC1_SetConfig+0x104>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d111      	bne.n	80068f0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4a15      	ldr	r2, [pc, #84]	; (8006924 <TIM_OC1_SetConfig+0x108>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4a14      	ldr	r2, [pc, #80]	; (8006928 <TIM_OC1_SetConfig+0x10c>)
 80068d8:	4013      	ands	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	46bd      	mov	sp, r7
 800690e:	b006      	add	sp, #24
 8006910:	bd80      	pop	{r7, pc}
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800
 8006924:	fffffeff 	.word	0xfffffeff
 8006928:	fffffdff 	.word	0xfffffdff

0800692c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	2210      	movs	r2, #16
 800693c:	4393      	bics	r3, r2
 800693e:	001a      	movs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a2e      	ldr	r2, [pc, #184]	; (8006a14 <TIM_OC2_SetConfig+0xe8>)
 800695a:	4013      	ands	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a2d      	ldr	r2, [pc, #180]	; (8006a18 <TIM_OC2_SetConfig+0xec>)
 8006962:	4013      	ands	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2220      	movs	r2, #32
 8006976:	4393      	bics	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <TIM_OC2_SetConfig+0xf0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10d      	bne.n	80069aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2280      	movs	r2, #128	; 0x80
 8006992:	4393      	bics	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2240      	movs	r2, #64	; 0x40
 80069a6:	4393      	bics	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <TIM_OC2_SetConfig+0xf0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_OC2_SetConfig+0x9e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1a      	ldr	r2, [pc, #104]	; (8006a20 <TIM_OC2_SetConfig+0xf4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_OC2_SetConfig+0x9e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <TIM_OC2_SetConfig+0xf8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC2_SetConfig+0x9e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a18      	ldr	r2, [pc, #96]	; (8006a28 <TIM_OC2_SetConfig+0xfc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d113      	bne.n	80069f2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <TIM_OC2_SetConfig+0x100>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <TIM_OC2_SetConfig+0x104>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	621a      	str	r2, [r3, #32]
}
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b006      	add	sp, #24
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	ffff8fff 	.word	0xffff8fff
 8006a18:	fffffcff 	.word	0xfffffcff
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800
 8006a2c:	fffffbff 	.word	0xfffffbff
 8006a30:	fffff7ff 	.word	0xfffff7ff

08006a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4a35      	ldr	r2, [pc, #212]	; (8006b18 <TIM_OC3_SetConfig+0xe4>)
 8006a44:	401a      	ands	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2270      	movs	r2, #112	; 0x70
 8006a60:	4393      	bics	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2203      	movs	r2, #3
 8006a68:	4393      	bics	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4a28      	ldr	r2, [pc, #160]	; (8006b1c <TIM_OC3_SetConfig+0xe8>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a24      	ldr	r2, [pc, #144]	; (8006b20 <TIM_OC3_SetConfig+0xec>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d10d      	bne.n	8006aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4a23      	ldr	r2, [pc, #140]	; (8006b24 <TIM_OC3_SetConfig+0xf0>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <TIM_OC3_SetConfig+0xf4>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <TIM_OC3_SetConfig+0xec>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_OC3_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <TIM_OC3_SetConfig+0xf8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_OC3_SetConfig+0x9a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <TIM_OC3_SetConfig+0xfc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_OC3_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a1a      	ldr	r2, [pc, #104]	; (8006b34 <TIM_OC3_SetConfig+0x100>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d113      	bne.n	8006af6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	4a19      	ldr	r2, [pc, #100]	; (8006b38 <TIM_OC3_SetConfig+0x104>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <TIM_OC3_SetConfig+0x108>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	621a      	str	r2, [r3, #32]
}
 8006b10:	46c0      	nop			; (mov r8, r8)
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b006      	add	sp, #24
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	fffffeff 	.word	0xfffffeff
 8006b1c:	fffffdff 	.word	0xfffffdff
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	fffff7ff 	.word	0xfffff7ff
 8006b28:	fffffbff 	.word	0xfffffbff
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800
 8006b38:	ffffefff 	.word	0xffffefff
 8006b3c:	ffffdfff 	.word	0xffffdfff

08006b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	4a28      	ldr	r2, [pc, #160]	; (8006bf0 <TIM_OC4_SetConfig+0xb0>)
 8006b50:	401a      	ands	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <TIM_OC4_SetConfig+0xb4>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <TIM_OC4_SetConfig+0xb8>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <TIM_OC4_SetConfig+0xbc>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <TIM_OC4_SetConfig+0xc0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_OC4_SetConfig+0x78>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC4_SetConfig+0xc4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_OC4_SetConfig+0x78>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC4_SetConfig+0xc8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC4_SetConfig+0x78>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC4_SetConfig+0xcc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d109      	bne.n	8006bcc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <TIM_OC4_SetConfig+0xd0>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	019b      	lsls	r3, r3, #6
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	46bd      	mov	sp, r7
 8006bea:	b006      	add	sp, #24
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	ffffefff 	.word	0xffffefff
 8006bf4:	ffff8fff 	.word	0xffff8fff
 8006bf8:	fffffcff 	.word	0xfffffcff
 8006bfc:	ffffdfff 	.word	0xffffdfff
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800
 8006c10:	ffffbfff 	.word	0xffffbfff

08006c14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	2201      	movs	r2, #1
 8006c28:	4393      	bics	r3, r2
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <TIM_TI1_SetConfig+0xa4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_TI1_SetConfig+0x40>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <TIM_TI1_SetConfig+0xa8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_TI1_SetConfig+0x40>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <TIM_TI1_SetConfig+0xac>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d101      	bne.n	8006c58 <TIM_TI1_SetConfig+0x44>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <TIM_TI1_SetConfig+0x46>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4393      	bics	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e003      	b.n	8006c78 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2201      	movs	r2, #1
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	22f0      	movs	r2, #240	; 0xf0
 8006c7c:	4393      	bics	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	4013      	ands	r3, r2
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	220a      	movs	r2, #10
 8006c92:	4393      	bics	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b006      	add	sp, #24
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40014000 	.word	0x40014000

08006cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	4393      	bics	r3, r2
 8006cde:	001a      	movs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	22f0      	movs	r2, #240	; 0xf0
 8006cee:	4393      	bics	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	220a      	movs	r2, #10
 8006d00:	4393      	bics	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	621a      	str	r2, [r3, #32]
}
 8006d18:	46c0      	nop			; (mov r8, r8)
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b006      	add	sp, #24
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	2210      	movs	r2, #16
 8006d34:	4393      	bics	r3, r2
 8006d36:	001a      	movs	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	4a14      	ldr	r2, [pc, #80]	; (8006d9c <TIM_TI2_SetConfig+0x7c>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <TIM_TI2_SetConfig+0x80>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	031b      	lsls	r3, r3, #12
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	22a0      	movs	r2, #160	; 0xa0
 8006d74:	4393      	bics	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	22a0      	movs	r2, #160	; 0xa0
 8006d7e:	4013      	ands	r3, r2
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b006      	add	sp, #24
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	fffffcff 	.word	0xfffffcff
 8006da0:	ffff0fff 	.word	0xffff0fff

08006da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	2210      	movs	r2, #16
 8006db6:	4393      	bics	r3, r2
 8006db8:	001a      	movs	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <TIM_TI2_ConfigInputStage+0x60>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	22a0      	movs	r2, #160	; 0xa0
 8006de0:	4393      	bics	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b006      	add	sp, #24
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	ffff0fff 	.word	0xffff0fff

08006e08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <TIM_TI3_SetConfig+0x78>)
 8006e1c:	401a      	ands	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2203      	movs	r2, #3
 8006e32:	4393      	bics	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	22f0      	movs	r2, #240	; 0xf0
 8006e42:	4393      	bics	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4a0b      	ldr	r2, [pc, #44]	; (8006e84 <TIM_TI3_SetConfig+0x7c>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	021a      	lsls	r2, r3, #8
 8006e60:	23a0      	movs	r3, #160	; 0xa0
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	4013      	ands	r3, r2
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	621a      	str	r2, [r3, #32]
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b006      	add	sp, #24
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	fffffeff 	.word	0xfffffeff
 8006e84:	fffff5ff 	.word	0xfffff5ff

08006e88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <TIM_TI4_SetConfig+0x7c>)
 8006e9c:	401a      	ands	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <TIM_TI4_SetConfig+0x80>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	4a12      	ldr	r2, [pc, #72]	; (8006f0c <TIM_TI4_SetConfig+0x84>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	031b      	lsls	r3, r3, #12
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <TIM_TI4_SetConfig+0x88>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	031a      	lsls	r2, r3, #12
 8006ee2:	23a0      	movs	r3, #160	; 0xa0
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b006      	add	sp, #24
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	ffffefff 	.word	0xffffefff
 8006f08:	fffffcff 	.word	0xfffffcff
 8006f0c:	ffff0fff 	.word	0xffff0fff
 8006f10:	ffff5fff 	.word	0xffff5fff

08006f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2270      	movs	r2, #112	; 0x70
 8006f28:	4393      	bics	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	2207      	movs	r2, #7
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b004      	add	sp, #16
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <TIM_ETR_SetConfig+0x3c>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	021a      	lsls	r2, r3, #8
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b006      	add	sp, #24
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	ffff00ff 	.word	0xffff00ff

08006f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	221f      	movs	r2, #31
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	409a      	lsls	r2, r3
 8006f9e:	0013      	movs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	43d2      	mvns	r2, r2
 8006faa:	401a      	ands	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1a      	ldr	r2, [r3, #32]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	211f      	movs	r1, #31
 8006fb8:	400b      	ands	r3, r1
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4099      	lsls	r1, r3
 8006fbe:	000b      	movs	r3, r1
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b006      	add	sp, #24
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	223c      	movs	r2, #60	; 0x3c
 8006fde:	5c9b      	ldrb	r3, [r3, r2]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e041      	b.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	223c      	movs	r2, #60	; 0x3c
 8006fec:	2101      	movs	r1, #1
 8006fee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	223d      	movs	r2, #61	; 0x3d
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2270      	movs	r2, #112	; 0x70
 800700c:	4393      	bics	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a11      	ldr	r2, [pc, #68]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a10      	ldr	r2, [pc, #64]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10c      	bne.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2280      	movs	r2, #128	; 0x80
 8007044:	4393      	bics	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4313      	orrs	r3, r2
 8007050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	223d      	movs	r2, #61	; 0x3d
 800705e:	2101      	movs	r1, #1
 8007060:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	223c      	movs	r2, #60	; 0x3c
 8007066:	2100      	movs	r1, #0
 8007068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	0018      	movs	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	b004      	add	sp, #16
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	223c      	movs	r2, #60	; 0x3c
 8007092:	5c9b      	ldrb	r3, [r3, r2]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007098:	2302      	movs	r3, #2
 800709a:	e03e      	b.n	800711a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	223c      	movs	r2, #60	; 0x3c
 80070a0:	2101      	movs	r1, #1
 80070a2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	22ff      	movs	r2, #255	; 0xff
 80070a8:	4393      	bics	r3, r2
 80070aa:	001a      	movs	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4a1b      	ldr	r2, [pc, #108]	; (8007124 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80070b8:	401a      	ands	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4a18      	ldr	r2, [pc, #96]	; (8007128 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80070c6:	401a      	ands	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a16      	ldr	r2, [pc, #88]	; (800712c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80070d4:	401a      	ands	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a13      	ldr	r2, [pc, #76]	; (8007130 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80070e2:	401a      	ands	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a11      	ldr	r2, [pc, #68]	; (8007134 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80070f0:	401a      	ands	r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a0e      	ldr	r2, [pc, #56]	; (8007138 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80070fe:	401a      	ands	r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	223c      	movs	r2, #60	; 0x3c
 8007114:	2100      	movs	r1, #0
 8007116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	0018      	movs	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	b004      	add	sp, #16
 8007120:	bd80      	pop	{r7, pc}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	fffffcff 	.word	0xfffffcff
 8007128:	fffffbff 	.word	0xfffffbff
 800712c:	fffff7ff 	.word	0xfffff7ff
 8007130:	ffffefff 	.word	0xffffefff
 8007134:	ffffdfff 	.word	0xffffdfff
 8007138:	ffffbfff 	.word	0xffffbfff

0800713c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	b002      	add	sp, #8
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b002      	add	sp, #8
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e044      	b.n	80071f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007172:	2b00      	cmp	r3, #0
 8007174:	d107      	bne.n	8007186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2274      	movs	r2, #116	; 0x74
 800717a:	2100      	movs	r1, #0
 800717c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0018      	movs	r0, r3
 8007182:	f7fc ff35 	bl	8003ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2224      	movs	r2, #36	; 0x24
 800718a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2101      	movs	r1, #1
 8007198:	438a      	bics	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	0018      	movs	r0, r3
 80071a0:	f000 fcc2 	bl	8007b28 <UART_SetConfig>
 80071a4:	0003      	movs	r3, r0
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e024      	b.n	80071f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f000 fe0d 	bl	8007dd8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	490d      	ldr	r1, [pc, #52]	; (8007200 <HAL_UART_Init+0xa4>)
 80071ca:	400a      	ands	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2108      	movs	r1, #8
 80071da:	438a      	bics	r2, r1
 80071dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2101      	movs	r1, #1
 80071ea:	430a      	orrs	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	0018      	movs	r0, r3
 80071f2:	f000 fea5 	bl	8007f40 <UART_CheckIdleState>
 80071f6:	0003      	movs	r3, r0
}
 80071f8:	0018      	movs	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	fffff7ff 	.word	0xfffff7ff

08007204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	1dbb      	adds	r3, r7, #6
 8007212:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007218:	2b20      	cmp	r3, #32
 800721a:	d000      	beq.n	800721e <HAL_UART_Transmit+0x1a>
 800721c:	e096      	b.n	800734c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_UART_Transmit+0x28>
 8007224:	1dbb      	adds	r3, r7, #6
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e08e      	b.n	800734e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	2380      	movs	r3, #128	; 0x80
 8007236:	015b      	lsls	r3, r3, #5
 8007238:	429a      	cmp	r2, r3
 800723a:	d109      	bne.n	8007250 <HAL_UART_Transmit+0x4c>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2201      	movs	r2, #1
 8007248:	4013      	ands	r3, r2
 800724a:	d001      	beq.n	8007250 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e07e      	b.n	800734e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2274      	movs	r2, #116	; 0x74
 8007254:	5c9b      	ldrb	r3, [r3, r2]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_UART_Transmit+0x5a>
 800725a:	2302      	movs	r3, #2
 800725c:	e077      	b.n	800734e <HAL_UART_Transmit+0x14a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2274      	movs	r2, #116	; 0x74
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2280      	movs	r2, #128	; 0x80
 800726a:	2100      	movs	r1, #0
 800726c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2221      	movs	r2, #33	; 0x21
 8007272:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007274:	f7fd f90e 	bl	8004494 <HAL_GetTick>
 8007278:	0003      	movs	r3, r0
 800727a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	1dba      	adds	r2, r7, #6
 8007280:	2150      	movs	r1, #80	; 0x50
 8007282:	8812      	ldrh	r2, [r2, #0]
 8007284:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1dba      	adds	r2, r7, #6
 800728a:	2152      	movs	r1, #82	; 0x52
 800728c:	8812      	ldrh	r2, [r2, #0]
 800728e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	015b      	lsls	r3, r3, #5
 8007298:	429a      	cmp	r2, r3
 800729a:	d108      	bne.n	80072ae <HAL_UART_Transmit+0xaa>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e003      	b.n	80072b6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2274      	movs	r2, #116	; 0x74
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80072be:	e02d      	b.n	800731c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	0013      	movs	r3, r2
 80072ca:	2200      	movs	r2, #0
 80072cc:	2180      	movs	r1, #128	; 0x80
 80072ce:	f000 fe7f 	bl	8007fd0 <UART_WaitOnFlagUntilTimeout>
 80072d2:	1e03      	subs	r3, r0, #0
 80072d4:	d001      	beq.n	80072da <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e039      	b.n	800734e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	881a      	ldrh	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	05d2      	lsls	r2, r2, #23
 80072ea:	0dd2      	lsrs	r2, r2, #23
 80072ec:	b292      	uxth	r2, r2
 80072ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	3302      	adds	r3, #2
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e008      	b.n	800730a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	b292      	uxth	r2, r2
 8007302:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	3301      	adds	r3, #1
 8007308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2252      	movs	r2, #82	; 0x52
 800730e:	5a9b      	ldrh	r3, [r3, r2]
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b299      	uxth	r1, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2252      	movs	r2, #82	; 0x52
 800731a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2252      	movs	r2, #82	; 0x52
 8007320:	5a9b      	ldrh	r3, [r3, r2]
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1cb      	bne.n	80072c0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	0013      	movs	r3, r2
 8007332:	2200      	movs	r2, #0
 8007334:	2140      	movs	r1, #64	; 0x40
 8007336:	f000 fe4b 	bl	8007fd0 <UART_WaitOnFlagUntilTimeout>
 800733a:	1e03      	subs	r3, r0, #0
 800733c:	d001      	beq.n	8007342 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e005      	b.n	800734e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	e000      	b.n	800734e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800734c:	2302      	movs	r3, #2
  }
}
 800734e:	0018      	movs	r0, r3
 8007350:	46bd      	mov	sp, r7
 8007352:	b008      	add	sp, #32
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	1dbb      	adds	r3, r7, #6
 8007364:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800736a:	2b20      	cmp	r3, #32
 800736c:	d000      	beq.n	8007370 <HAL_UART_Transmit_DMA+0x18>
 800736e:	e08a      	b.n	8007486 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_UART_Transmit_DMA+0x26>
 8007376:	1dbb      	adds	r3, r7, #6
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e082      	b.n	8007488 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	2380      	movs	r3, #128	; 0x80
 8007388:	015b      	lsls	r3, r3, #5
 800738a:	429a      	cmp	r2, r3
 800738c:	d109      	bne.n	80073a2 <HAL_UART_Transmit_DMA+0x4a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2201      	movs	r2, #1
 800739a:	4013      	ands	r3, r2
 800739c:	d001      	beq.n	80073a2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e072      	b.n	8007488 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2274      	movs	r2, #116	; 0x74
 80073a6:	5c9b      	ldrb	r3, [r3, r2]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_UART_Transmit_DMA+0x58>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e06b      	b.n	8007488 <HAL_UART_Transmit_DMA+0x130>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2274      	movs	r2, #116	; 0x74
 80073b4:	2101      	movs	r1, #1
 80073b6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1dba      	adds	r2, r7, #6
 80073c2:	2150      	movs	r1, #80	; 0x50
 80073c4:	8812      	ldrh	r2, [r2, #0]
 80073c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	1dba      	adds	r2, r7, #6
 80073cc:	2152      	movs	r1, #82	; 0x52
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2280      	movs	r2, #128	; 0x80
 80073d6:	2100      	movs	r1, #0
 80073d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2221      	movs	r2, #33	; 0x21
 80073de:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02b      	beq.n	8007440 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ec:	4a28      	ldr	r2, [pc, #160]	; (8007490 <HAL_UART_Transmit_DMA+0x138>)
 80073ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f4:	4a27      	ldr	r2, [pc, #156]	; (8007494 <HAL_UART_Transmit_DMA+0x13c>)
 80073f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fc:	4a26      	ldr	r2, [pc, #152]	; (8007498 <HAL_UART_Transmit_DMA+0x140>)
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007404:	2200      	movs	r2, #0
 8007406:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007410:	0019      	movs	r1, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3328      	adds	r3, #40	; 0x28
 8007418:	001a      	movs	r2, r3
 800741a:	1dbb      	adds	r3, r7, #6
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	f7fd f98d 	bl	800473c <HAL_DMA_Start_IT>
 8007422:	1e03      	subs	r3, r0, #0
 8007424:	d00c      	beq.n	8007440 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	2110      	movs	r1, #16
 800742c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2274      	movs	r2, #116	; 0x74
 8007432:	2100      	movs	r1, #0
 8007434:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e023      	b.n	8007488 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2240      	movs	r2, #64	; 0x40
 8007446:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2274      	movs	r2, #116	; 0x74
 800744c:	2100      	movs	r1, #0
 800744e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007450:	f3ef 8310 	mrs	r3, PRIMASK
 8007454:	613b      	str	r3, [r7, #16]
  return(result);
 8007456:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	2301      	movs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f383 8810 	msr	PRIMASK, r3
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f383 8810 	msr	PRIMASK, r3
}
 8007480:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e000      	b.n	8007488 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007486:	2302      	movs	r3, #2
  }
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b008      	add	sp, #32
 800748e:	bd80      	pop	{r7, pc}
 8007490:	080083a9 	.word	0x080083a9
 8007494:	0800843d 	.word	0x0800843d
 8007498:	080085bd 	.word	0x080085bd

0800749c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	1dbb      	adds	r3, r7, #6
 80074a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d150      	bne.n	8007554 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_UART_Receive_DMA+0x24>
 80074b8:	1dbb      	adds	r3, r7, #6
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e048      	b.n	8007556 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	2380      	movs	r3, #128	; 0x80
 80074ca:	015b      	lsls	r3, r3, #5
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d109      	bne.n	80074e4 <HAL_UART_Receive_DMA+0x48>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2201      	movs	r2, #1
 80074dc:	4013      	ands	r3, r2
 80074de:	d001      	beq.n	80074e4 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e038      	b.n	8007556 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2274      	movs	r2, #116	; 0x74
 80074e8:	5c9b      	ldrb	r3, [r3, r2]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Receive_DMA+0x56>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e031      	b.n	8007556 <HAL_UART_Receive_DMA+0xba>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2274      	movs	r2, #116	; 0x74
 80074f6:	2101      	movs	r1, #1
 80074f8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	4013      	ands	r3, r2
 800750c:	d019      	beq.n	8007542 <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750e:	f3ef 8310 	mrs	r3, PRIMASK
 8007512:	613b      	str	r3, [r7, #16]
  return(result);
 8007514:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	2301      	movs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f383 8810 	msr	PRIMASK, r3
}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	04c9      	lsls	r1, r1, #19
 8007532:	430a      	orrs	r2, r1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f383 8810 	msr	PRIMASK, r3
}
 8007540:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007542:	1dbb      	adds	r3, r7, #6
 8007544:	881a      	ldrh	r2, [r3, #0]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0018      	movs	r0, r3
 800754c:	f000 fe04 	bl	8008158 <UART_Start_Receive_DMA>
 8007550:	0003      	movs	r3, r0
 8007552:	e000      	b.n	8007556 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007554:	2302      	movs	r3, #2
  }
}
 8007556:	0018      	movs	r0, r3
 8007558:	46bd      	mov	sp, r7
 800755a:	b008      	add	sp, #32
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b0ab      	sub	sp, #172	; 0xac
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	22a4      	movs	r2, #164	; 0xa4
 8007570:	18b9      	adds	r1, r7, r2
 8007572:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	20a0      	movs	r0, #160	; 0xa0
 800757c:	1839      	adds	r1, r7, r0
 800757e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	219c      	movs	r1, #156	; 0x9c
 8007588:	1879      	adds	r1, r7, r1
 800758a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800758c:	0011      	movs	r1, r2
 800758e:	18bb      	adds	r3, r7, r2
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a99      	ldr	r2, [pc, #612]	; (80077f8 <HAL_UART_IRQHandler+0x298>)
 8007594:	4013      	ands	r3, r2
 8007596:	2298      	movs	r2, #152	; 0x98
 8007598:	18bc      	adds	r4, r7, r2
 800759a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800759c:	18bb      	adds	r3, r7, r2
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d114      	bne.n	80075ce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075a4:	187b      	adds	r3, r7, r1
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2220      	movs	r2, #32
 80075aa:	4013      	ands	r3, r2
 80075ac:	d00f      	beq.n	80075ce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075ae:	183b      	adds	r3, r7, r0
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2220      	movs	r2, #32
 80075b4:	4013      	ands	r3, r2
 80075b6:	d00a      	beq.n	80075ce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d100      	bne.n	80075c2 <HAL_UART_IRQHandler+0x62>
 80075c0:	e27e      	b.n	8007ac0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	0010      	movs	r0, r2
 80075ca:	4798      	blx	r3
      }
      return;
 80075cc:	e278      	b.n	8007ac0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075ce:	2398      	movs	r3, #152	; 0x98
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d100      	bne.n	80075da <HAL_UART_IRQHandler+0x7a>
 80075d8:	e114      	b.n	8007804 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075da:	239c      	movs	r3, #156	; 0x9c
 80075dc:	18fb      	adds	r3, r7, r3
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2201      	movs	r2, #1
 80075e2:	4013      	ands	r3, r2
 80075e4:	d106      	bne.n	80075f4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075e6:	23a0      	movs	r3, #160	; 0xa0
 80075e8:	18fb      	adds	r3, r7, r3
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a83      	ldr	r2, [pc, #524]	; (80077fc <HAL_UART_IRQHandler+0x29c>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	d100      	bne.n	80075f4 <HAL_UART_IRQHandler+0x94>
 80075f2:	e107      	b.n	8007804 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075f4:	23a4      	movs	r3, #164	; 0xa4
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2201      	movs	r2, #1
 80075fc:	4013      	ands	r3, r2
 80075fe:	d012      	beq.n	8007626 <HAL_UART_IRQHandler+0xc6>
 8007600:	23a0      	movs	r3, #160	; 0xa0
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4013      	ands	r3, r2
 800760c:	d00b      	beq.n	8007626 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2280      	movs	r2, #128	; 0x80
 800761a:	589b      	ldr	r3, [r3, r2]
 800761c:	2201      	movs	r2, #1
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2180      	movs	r1, #128	; 0x80
 8007624:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007626:	23a4      	movs	r3, #164	; 0xa4
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2202      	movs	r2, #2
 800762e:	4013      	ands	r3, r2
 8007630:	d011      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
 8007632:	239c      	movs	r3, #156	; 0x9c
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2201      	movs	r2, #1
 800763a:	4013      	ands	r3, r2
 800763c:	d00b      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2202      	movs	r2, #2
 8007644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	589b      	ldr	r3, [r3, r2]
 800764c:	2204      	movs	r2, #4
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007656:	23a4      	movs	r3, #164	; 0xa4
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2204      	movs	r2, #4
 800765e:	4013      	ands	r3, r2
 8007660:	d011      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
 8007662:	239c      	movs	r3, #156	; 0x9c
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	4013      	ands	r3, r2
 800766c:	d00b      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2204      	movs	r2, #4
 8007674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2280      	movs	r2, #128	; 0x80
 800767a:	589b      	ldr	r3, [r3, r2]
 800767c:	2202      	movs	r2, #2
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2180      	movs	r1, #128	; 0x80
 8007684:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007686:	23a4      	movs	r3, #164	; 0xa4
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2208      	movs	r2, #8
 800768e:	4013      	ands	r3, r2
 8007690:	d017      	beq.n	80076c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007692:	23a0      	movs	r3, #160	; 0xa0
 8007694:	18fb      	adds	r3, r7, r3
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2220      	movs	r2, #32
 800769a:	4013      	ands	r3, r2
 800769c:	d105      	bne.n	80076aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800769e:	239c      	movs	r3, #156	; 0x9c
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076a8:	d00b      	beq.n	80076c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2208      	movs	r2, #8
 80076b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	589b      	ldr	r3, [r3, r2]
 80076b8:	2208      	movs	r2, #8
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076c2:	23a4      	movs	r3, #164	; 0xa4
 80076c4:	18fb      	adds	r3, r7, r3
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	4013      	ands	r3, r2
 80076ce:	d013      	beq.n	80076f8 <HAL_UART_IRQHandler+0x198>
 80076d0:	23a0      	movs	r3, #160	; 0xa0
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	2380      	movs	r3, #128	; 0x80
 80076d8:	04db      	lsls	r3, r3, #19
 80076da:	4013      	ands	r3, r2
 80076dc:	d00c      	beq.n	80076f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2280      	movs	r2, #128	; 0x80
 80076e4:	0112      	lsls	r2, r2, #4
 80076e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	589b      	ldr	r3, [r3, r2]
 80076ee:	2220      	movs	r2, #32
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	589b      	ldr	r3, [r3, r2]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d100      	bne.n	8007704 <HAL_UART_IRQHandler+0x1a4>
 8007702:	e1df      	b.n	8007ac4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007704:	23a4      	movs	r3, #164	; 0xa4
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2220      	movs	r2, #32
 800770c:	4013      	ands	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007710:	23a0      	movs	r3, #160	; 0xa0
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2220      	movs	r2, #32
 8007718:	4013      	ands	r3, r2
 800771a:	d008      	beq.n	800772e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	0010      	movs	r0, r2
 800772c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2280      	movs	r2, #128	; 0x80
 8007732:	589b      	ldr	r3, [r3, r2]
 8007734:	2194      	movs	r1, #148	; 0x94
 8007736:	187a      	adds	r2, r7, r1
 8007738:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2240      	movs	r2, #64	; 0x40
 8007742:	4013      	ands	r3, r2
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	d004      	beq.n	8007752 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007748:	187b      	adds	r3, r7, r1
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2228      	movs	r2, #40	; 0x28
 800774e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007750:	d047      	beq.n	80077e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	0018      	movs	r0, r3
 8007756:	f000 fdc5 	bl	80082e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2240      	movs	r2, #64	; 0x40
 8007762:	4013      	ands	r3, r2
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d137      	bne.n	80077d8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007768:	f3ef 8310 	mrs	r3, PRIMASK
 800776c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800776e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007770:	2090      	movs	r0, #144	; 0x90
 8007772:	183a      	adds	r2, r7, r0
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	2301      	movs	r3, #1
 8007778:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800777a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777c:	f383 8810 	msr	PRIMASK, r3
}
 8007780:	46c0      	nop			; (mov r8, r8)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2140      	movs	r1, #64	; 0x40
 800778e:	438a      	bics	r2, r1
 8007790:	609a      	str	r2, [r3, #8]
 8007792:	183b      	adds	r3, r7, r0
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800779a:	f383 8810 	msr	PRIMASK, r3
}
 800779e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d012      	beq.n	80077ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ac:	4a14      	ldr	r2, [pc, #80]	; (8007800 <HAL_UART_IRQHandler+0x2a0>)
 80077ae:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7fd f85f 	bl	8004878 <HAL_DMA_Abort_IT>
 80077ba:	1e03      	subs	r3, r0, #0
 80077bc:	d01a      	beq.n	80077f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c8:	0018      	movs	r0, r3
 80077ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e012      	b.n	80077f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f000 f995 	bl	8007b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d6:	e00d      	b.n	80077f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	0018      	movs	r0, r3
 80077dc:	f000 f990 	bl	8007b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e008      	b.n	80077f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f000 f98b 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2280      	movs	r2, #128	; 0x80
 80077ee:	2100      	movs	r1, #0
 80077f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80077f2:	e167      	b.n	8007ac4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	46c0      	nop			; (mov r8, r8)
    return;
 80077f6:	e165      	b.n	8007ac4 <HAL_UART_IRQHandler+0x564>
 80077f8:	0000080f 	.word	0x0000080f
 80077fc:	04000120 	.word	0x04000120
 8007800:	0800863f 	.word	0x0800863f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007808:	2b01      	cmp	r3, #1
 800780a:	d000      	beq.n	800780e <HAL_UART_IRQHandler+0x2ae>
 800780c:	e131      	b.n	8007a72 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800780e:	23a4      	movs	r3, #164	; 0xa4
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2210      	movs	r2, #16
 8007816:	4013      	ands	r3, r2
 8007818:	d100      	bne.n	800781c <HAL_UART_IRQHandler+0x2bc>
 800781a:	e12a      	b.n	8007a72 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800781c:	23a0      	movs	r3, #160	; 0xa0
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2210      	movs	r2, #16
 8007824:	4013      	ands	r3, r2
 8007826:	d100      	bne.n	800782a <HAL_UART_IRQHandler+0x2ca>
 8007828:	e123      	b.n	8007a72 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2210      	movs	r2, #16
 8007830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2240      	movs	r2, #64	; 0x40
 800783a:	4013      	ands	r3, r2
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d000      	beq.n	8007842 <HAL_UART_IRQHandler+0x2e2>
 8007840:	e09b      	b.n	800797a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	217e      	movs	r1, #126	; 0x7e
 800784c:	187b      	adds	r3, r7, r1
 800784e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007850:	187b      	adds	r3, r7, r1
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d100      	bne.n	800785a <HAL_UART_IRQHandler+0x2fa>
 8007858:	e136      	b.n	8007ac8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2258      	movs	r2, #88	; 0x58
 800785e:	5a9b      	ldrh	r3, [r3, r2]
 8007860:	187a      	adds	r2, r7, r1
 8007862:	8812      	ldrh	r2, [r2, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d300      	bcc.n	800786a <HAL_UART_IRQHandler+0x30a>
 8007868:	e12e      	b.n	8007ac8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	187a      	adds	r2, r7, r1
 800786e:	215a      	movs	r1, #90	; 0x5a
 8007870:	8812      	ldrh	r2, [r2, #0]
 8007872:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b20      	cmp	r3, #32
 800787c:	d06e      	beq.n	800795c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787e:	f3ef 8310 	mrs	r3, PRIMASK
 8007882:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007886:	67bb      	str	r3, [r7, #120]	; 0x78
 8007888:	2301      	movs	r3, #1
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788e:	f383 8810 	msr	PRIMASK, r3
}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	498e      	ldr	r1, [pc, #568]	; (8007ad8 <HAL_UART_IRQHandler+0x578>)
 80078a0:	400a      	ands	r2, r1
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	f383 8810 	msr	PRIMASK, r3
}
 80078ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078b0:	f3ef 8310 	mrs	r3, PRIMASK
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b8:	677b      	str	r3, [r7, #116]	; 0x74
 80078ba:	2301      	movs	r3, #1
 80078bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c0:	f383 8810 	msr	PRIMASK, r3
}
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2101      	movs	r1, #1
 80078d2:	438a      	bics	r2, r1
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078dc:	f383 8810 	msr	PRIMASK, r3
}
 80078e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80078e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ea:	673b      	str	r3, [r7, #112]	; 0x70
 80078ec:	2301      	movs	r3, #1
 80078ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f2:	f383 8810 	msr	PRIMASK, r3
}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2140      	movs	r1, #64	; 0x40
 8007904:	438a      	bics	r2, r1
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	f383 8810 	msr	PRIMASK, r3
}
 8007912:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007920:	f3ef 8310 	mrs	r3, PRIMASK
 8007924:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007926:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800792a:	2301      	movs	r3, #1
 800792c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007930:	f383 8810 	msr	PRIMASK, r3
}
 8007934:	46c0      	nop			; (mov r8, r8)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2110      	movs	r1, #16
 8007942:	438a      	bics	r2, r1
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800794c:	f383 8810 	msr	PRIMASK, r3
}
 8007950:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	0018      	movs	r0, r3
 8007958:	f7fc ff56 	bl	8004808 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2258      	movs	r2, #88	; 0x58
 8007960:	5a9a      	ldrh	r2, [r3, r2]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	215a      	movs	r1, #90	; 0x5a
 8007966:	5a5b      	ldrh	r3, [r3, r1]
 8007968:	b29b      	uxth	r3, r3
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	0011      	movs	r1, r2
 8007972:	0018      	movs	r0, r3
 8007974:	f000 f8cc 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007978:	e0a6      	b.n	8007ac8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2258      	movs	r2, #88	; 0x58
 800797e:	5a99      	ldrh	r1, [r3, r2]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	225a      	movs	r2, #90	; 0x5a
 8007984:	5a9b      	ldrh	r3, [r3, r2]
 8007986:	b29a      	uxth	r2, r3
 8007988:	208e      	movs	r0, #142	; 0x8e
 800798a:	183b      	adds	r3, r7, r0
 800798c:	1a8a      	subs	r2, r1, r2
 800798e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	225a      	movs	r2, #90	; 0x5a
 8007994:	5a9b      	ldrh	r3, [r3, r2]
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d100      	bne.n	800799e <HAL_UART_IRQHandler+0x43e>
 800799c:	e096      	b.n	8007acc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800799e:	183b      	adds	r3, r7, r0
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d100      	bne.n	80079a8 <HAL_UART_IRQHandler+0x448>
 80079a6:	e091      	b.n	8007acc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a8:	f3ef 8310 	mrs	r3, PRIMASK
 80079ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80079ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b0:	2488      	movs	r4, #136	; 0x88
 80079b2:	193a      	adds	r2, r7, r4
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	2301      	movs	r3, #1
 80079b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f383 8810 	msr	PRIMASK, r3
}
 80079c0:	46c0      	nop			; (mov r8, r8)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4943      	ldr	r1, [pc, #268]	; (8007adc <HAL_UART_IRQHandler+0x57c>)
 80079ce:	400a      	ands	r2, r1
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	193b      	adds	r3, r7, r4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f383 8810 	msr	PRIMASK, r3
}
 80079de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e0:	f3ef 8310 	mrs	r3, PRIMASK
 80079e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e8:	2484      	movs	r4, #132	; 0x84
 80079ea:	193a      	adds	r2, r7, r4
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	2301      	movs	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f383 8810 	msr	PRIMASK, r3
}
 80079f8:	46c0      	nop			; (mov r8, r8)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2101      	movs	r1, #1
 8007a06:	438a      	bics	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]
 8007a0a:	193b      	adds	r3, r7, r4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	f383 8810 	msr	PRIMASK, r3
}
 8007a16:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a32:	2480      	movs	r4, #128	; 0x80
 8007a34:	193a      	adds	r2, r7, r4
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	f383 8810 	msr	PRIMASK, r3
}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2110      	movs	r1, #16
 8007a50:	438a      	bics	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	193b      	adds	r3, r7, r4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	f383 8810 	msr	PRIMASK, r3
}
 8007a60:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a62:	183b      	adds	r3, r7, r0
 8007a64:	881a      	ldrh	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	0011      	movs	r1, r2
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f000 f850 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a70:	e02c      	b.n	8007acc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a72:	23a4      	movs	r3, #164	; 0xa4
 8007a74:	18fb      	adds	r3, r7, r3
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2280      	movs	r2, #128	; 0x80
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d00f      	beq.n	8007a9e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a7e:	23a0      	movs	r3, #160	; 0xa0
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2280      	movs	r2, #128	; 0x80
 8007a86:	4013      	ands	r3, r2
 8007a88:	d009      	beq.n	8007a9e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01e      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	0010      	movs	r0, r2
 8007a9a:	4798      	blx	r3
    }
    return;
 8007a9c:	e018      	b.n	8007ad0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a9e:	23a4      	movs	r3, #164	; 0xa4
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2240      	movs	r2, #64	; 0x40
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x572>
 8007aaa:	23a0      	movs	r3, #160	; 0xa0
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2240      	movs	r2, #64	; 0x40
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	d00d      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f000 fdd7 	bl	800866c <UART_EndTransmit_IT>
    return;
 8007abe:	e008      	b.n	8007ad2 <HAL_UART_IRQHandler+0x572>
      return;
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	e006      	b.n	8007ad2 <HAL_UART_IRQHandler+0x572>
    return;
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	e004      	b.n	8007ad2 <HAL_UART_IRQHandler+0x572>
      return;
 8007ac8:	46c0      	nop			; (mov r8, r8)
 8007aca:	e002      	b.n	8007ad2 <HAL_UART_IRQHandler+0x572>
      return;
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	e000      	b.n	8007ad2 <HAL_UART_IRQHandler+0x572>
    return;
 8007ad0:	46c0      	nop			; (mov r8, r8)
  }

}
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b02b      	add	sp, #172	; 0xac
 8007ad6:	bd90      	pop	{r4, r7, pc}
 8007ad8:	fffffeff 	.word	0xfffffeff
 8007adc:	fffffedf 	.word	0xfffffedf

08007ae0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ae8:	46c0      	nop			; (mov r8, r8)
 8007aea:	46bd      	mov	sp, r7
 8007aec:	b002      	add	sp, #8
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b002      	add	sp, #8
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b08:	46c0      	nop			; (mov r8, r8)
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b002      	add	sp, #8
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	000a      	movs	r2, r1
 8007b1a:	1cbb      	adds	r3, r7, #2
 8007b1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	46bd      	mov	sp, r7
 8007b22:	b002      	add	sp, #8
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b30:	231e      	movs	r3, #30
 8007b32:	18fb      	adds	r3, r7, r3
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a97      	ldr	r2, [pc, #604]	; (8007db4 <UART_SetConfig+0x28c>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4a92      	ldr	r2, [pc, #584]	; (8007db8 <UART_SetConfig+0x290>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	0019      	movs	r1, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	4a89      	ldr	r2, [pc, #548]	; (8007dbc <UART_SetConfig+0x294>)
 8007b96:	4013      	ands	r3, r2
 8007b98:	0019      	movs	r1, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a85      	ldr	r2, [pc, #532]	; (8007dc0 <UART_SetConfig+0x298>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d127      	bne.n	8007bfe <UART_SetConfig+0xd6>
 8007bae:	4b85      	ldr	r3, [pc, #532]	; (8007dc4 <UART_SetConfig+0x29c>)
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d00d      	beq.n	8007bd6 <UART_SetConfig+0xae>
 8007bba:	d81b      	bhi.n	8007bf4 <UART_SetConfig+0xcc>
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d014      	beq.n	8007bea <UART_SetConfig+0xc2>
 8007bc0:	d818      	bhi.n	8007bf4 <UART_SetConfig+0xcc>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <UART_SetConfig+0xa4>
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d00a      	beq.n	8007be0 <UART_SetConfig+0xb8>
 8007bca:	e013      	b.n	8007bf4 <UART_SetConfig+0xcc>
 8007bcc:	231f      	movs	r3, #31
 8007bce:	18fb      	adds	r3, r7, r3
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	e035      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007bd6:	231f      	movs	r3, #31
 8007bd8:	18fb      	adds	r3, r7, r3
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e030      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007be0:	231f      	movs	r3, #31
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2204      	movs	r2, #4
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	e02b      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007bea:	231f      	movs	r3, #31
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	2208      	movs	r2, #8
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e026      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007bf4:	231f      	movs	r3, #31
 8007bf6:	18fb      	adds	r3, r7, r3
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	e021      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a71      	ldr	r2, [pc, #452]	; (8007dc8 <UART_SetConfig+0x2a0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d104      	bne.n	8007c12 <UART_SetConfig+0xea>
 8007c08:	231f      	movs	r3, #31
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e017      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a6d      	ldr	r2, [pc, #436]	; (8007dcc <UART_SetConfig+0x2a4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d104      	bne.n	8007c26 <UART_SetConfig+0xfe>
 8007c1c:	231f      	movs	r3, #31
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e00d      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a69      	ldr	r2, [pc, #420]	; (8007dd0 <UART_SetConfig+0x2a8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d104      	bne.n	8007c3a <UART_SetConfig+0x112>
 8007c30:	231f      	movs	r3, #31
 8007c32:	18fb      	adds	r3, r7, r3
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e003      	b.n	8007c42 <UART_SetConfig+0x11a>
 8007c3a:	231f      	movs	r3, #31
 8007c3c:	18fb      	adds	r3, r7, r3
 8007c3e:	2210      	movs	r2, #16
 8007c40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69da      	ldr	r2, [r3, #28]
 8007c46:	2380      	movs	r3, #128	; 0x80
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d15d      	bne.n	8007d0a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8007c4e:	231f      	movs	r3, #31
 8007c50:	18fb      	adds	r3, r7, r3
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d015      	beq.n	8007c84 <UART_SetConfig+0x15c>
 8007c58:	dc18      	bgt.n	8007c8c <UART_SetConfig+0x164>
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d00d      	beq.n	8007c7a <UART_SetConfig+0x152>
 8007c5e:	dc15      	bgt.n	8007c8c <UART_SetConfig+0x164>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <UART_SetConfig+0x142>
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d005      	beq.n	8007c74 <UART_SetConfig+0x14c>
 8007c68:	e010      	b.n	8007c8c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c6a:	f7fd fd3b 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8007c6e:	0003      	movs	r3, r0
 8007c70:	61bb      	str	r3, [r7, #24]
        break;
 8007c72:	e012      	b.n	8007c9a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c74:	4b57      	ldr	r3, [pc, #348]	; (8007dd4 <UART_SetConfig+0x2ac>)
 8007c76:	61bb      	str	r3, [r7, #24]
        break;
 8007c78:	e00f      	b.n	8007c9a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7a:	f7fd fcc3 	bl	8005604 <HAL_RCC_GetSysClockFreq>
 8007c7e:	0003      	movs	r3, r0
 8007c80:	61bb      	str	r3, [r7, #24]
        break;
 8007c82:	e00a      	b.n	8007c9a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c84:	2380      	movs	r3, #128	; 0x80
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	61bb      	str	r3, [r7, #24]
        break;
 8007c8a:	e006      	b.n	8007c9a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c90:	231e      	movs	r3, #30
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
        break;
 8007c98:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d100      	bne.n	8007ca2 <UART_SetConfig+0x17a>
 8007ca0:	e07b      	b.n	8007d9a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	005a      	lsls	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	18d2      	adds	r2, r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	0010      	movs	r0, r2
 8007cb6:	f7f8 fa4d 	bl	8000154 <__udivsi3>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b0f      	cmp	r3, #15
 8007cc4:	d91c      	bls.n	8007d00 <UART_SetConfig+0x1d8>
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	025b      	lsls	r3, r3, #9
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d217      	bcs.n	8007d00 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	200e      	movs	r0, #14
 8007cd6:	183b      	adds	r3, r7, r0
 8007cd8:	210f      	movs	r1, #15
 8007cda:	438a      	bics	r2, r1
 8007cdc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	b299      	uxth	r1, r3
 8007cea:	183b      	adds	r3, r7, r0
 8007cec:	183a      	adds	r2, r7, r0
 8007cee:	8812      	ldrh	r2, [r2, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	183a      	adds	r2, r7, r0
 8007cfa:	8812      	ldrh	r2, [r2, #0]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e04c      	b.n	8007d9a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007d00:	231e      	movs	r3, #30
 8007d02:	18fb      	adds	r3, r7, r3
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	e047      	b.n	8007d9a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d0a:	231f      	movs	r3, #31
 8007d0c:	18fb      	adds	r3, r7, r3
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d015      	beq.n	8007d40 <UART_SetConfig+0x218>
 8007d14:	dc18      	bgt.n	8007d48 <UART_SetConfig+0x220>
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d00d      	beq.n	8007d36 <UART_SetConfig+0x20e>
 8007d1a:	dc15      	bgt.n	8007d48 <UART_SetConfig+0x220>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <UART_SetConfig+0x1fe>
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d005      	beq.n	8007d30 <UART_SetConfig+0x208>
 8007d24:	e010      	b.n	8007d48 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d26:	f7fd fcdd 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8007d2a:	0003      	movs	r3, r0
 8007d2c:	61bb      	str	r3, [r7, #24]
        break;
 8007d2e:	e012      	b.n	8007d56 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d30:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <UART_SetConfig+0x2ac>)
 8007d32:	61bb      	str	r3, [r7, #24]
        break;
 8007d34:	e00f      	b.n	8007d56 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d36:	f7fd fc65 	bl	8005604 <HAL_RCC_GetSysClockFreq>
 8007d3a:	0003      	movs	r3, r0
 8007d3c:	61bb      	str	r3, [r7, #24]
        break;
 8007d3e:	e00a      	b.n	8007d56 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	61bb      	str	r3, [r7, #24]
        break;
 8007d46:	e006      	b.n	8007d56 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d4c:	231e      	movs	r3, #30
 8007d4e:	18fb      	adds	r3, r7, r3
 8007d50:	2201      	movs	r2, #1
 8007d52:	701a      	strb	r2, [r3, #0]
        break;
 8007d54:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01e      	beq.n	8007d9a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	085a      	lsrs	r2, r3, #1
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	18d2      	adds	r2, r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	0019      	movs	r1, r3
 8007d6c:	0010      	movs	r0, r2
 8007d6e:	f7f8 f9f1 	bl	8000154 <__udivsi3>
 8007d72:	0003      	movs	r3, r0
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b0f      	cmp	r3, #15
 8007d7c:	d909      	bls.n	8007d92 <UART_SetConfig+0x26a>
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	2380      	movs	r3, #128	; 0x80
 8007d82:	025b      	lsls	r3, r3, #9
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d204      	bcs.n	8007d92 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	60da      	str	r2, [r3, #12]
 8007d90:	e003      	b.n	8007d9a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007d92:	231e      	movs	r3, #30
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007da6:	231e      	movs	r3, #30
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	781b      	ldrb	r3, [r3, #0]
}
 8007dac:	0018      	movs	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b008      	add	sp, #32
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	efff69f3 	.word	0xefff69f3
 8007db8:	ffffcfff 	.word	0xffffcfff
 8007dbc:	fffff4ff 	.word	0xfffff4ff
 8007dc0:	40013800 	.word	0x40013800
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	40004400 	.word	0x40004400
 8007dcc:	40004800 	.word	0x40004800
 8007dd0:	40004c00 	.word	0x40004c00
 8007dd4:	007a1200 	.word	0x007a1200

08007dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2201      	movs	r2, #1
 8007de6:	4013      	ands	r3, r2
 8007de8:	d00b      	beq.n	8007e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a4a      	ldr	r2, [pc, #296]	; (8007f1c <UART_AdvFeatureConfig+0x144>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2202      	movs	r2, #2
 8007e08:	4013      	ands	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4a43      	ldr	r2, [pc, #268]	; (8007f20 <UART_AdvFeatureConfig+0x148>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	0019      	movs	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2204      	movs	r2, #4
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	4a3b      	ldr	r2, [pc, #236]	; (8007f24 <UART_AdvFeatureConfig+0x14c>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	0019      	movs	r1, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4a34      	ldr	r2, [pc, #208]	; (8007f28 <UART_AdvFeatureConfig+0x150>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	0019      	movs	r1, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	2210      	movs	r2, #16
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4a2c      	ldr	r2, [pc, #176]	; (8007f2c <UART_AdvFeatureConfig+0x154>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	0019      	movs	r1, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2220      	movs	r2, #32
 8007e90:	4013      	ands	r3, r2
 8007e92:	d00b      	beq.n	8007eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4a25      	ldr	r2, [pc, #148]	; (8007f30 <UART_AdvFeatureConfig+0x158>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	0019      	movs	r1, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2240      	movs	r2, #64	; 0x40
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	; (8007f34 <UART_AdvFeatureConfig+0x15c>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	0019      	movs	r1, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ed2:	2380      	movs	r3, #128	; 0x80
 8007ed4:	035b      	lsls	r3, r3, #13
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d10b      	bne.n	8007ef2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <UART_AdvFeatureConfig+0x160>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	0019      	movs	r1, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	4013      	ands	r3, r2
 8007efa:	d00b      	beq.n	8007f14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4a0e      	ldr	r2, [pc, #56]	; (8007f3c <UART_AdvFeatureConfig+0x164>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	0019      	movs	r1, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }
}
 8007f14:	46c0      	nop			; (mov r8, r8)
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	fffdffff 	.word	0xfffdffff
 8007f20:	fffeffff 	.word	0xfffeffff
 8007f24:	fffbffff 	.word	0xfffbffff
 8007f28:	ffff7fff 	.word	0xffff7fff
 8007f2c:	ffffefff 	.word	0xffffefff
 8007f30:	ffffdfff 	.word	0xffffdfff
 8007f34:	ffefffff 	.word	0xffefffff
 8007f38:	ff9fffff 	.word	0xff9fffff
 8007f3c:	fff7ffff 	.word	0xfff7ffff

08007f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2280      	movs	r2, #128	; 0x80
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f50:	f7fc faa0 	bl	8004494 <HAL_GetTick>
 8007f54:	0003      	movs	r3, r0
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2208      	movs	r2, #8
 8007f60:	4013      	ands	r3, r2
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d10c      	bne.n	8007f80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2280      	movs	r2, #128	; 0x80
 8007f6a:	0391      	lsls	r1, r2, #14
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <UART_CheckIdleState+0x8c>)
 8007f70:	9200      	str	r2, [sp, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f000 f82c 	bl	8007fd0 <UART_WaitOnFlagUntilTimeout>
 8007f78:	1e03      	subs	r3, r0, #0
 8007f7a:	d001      	beq.n	8007f80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e021      	b.n	8007fc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2204      	movs	r2, #4
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d10c      	bne.n	8007fa8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2280      	movs	r2, #128	; 0x80
 8007f92:	03d1      	lsls	r1, r2, #15
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <UART_CheckIdleState+0x8c>)
 8007f98:	9200      	str	r2, [sp, #0]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f000 f818 	bl	8007fd0 <UART_WaitOnFlagUntilTimeout>
 8007fa0:	1e03      	subs	r3, r0, #0
 8007fa2:	d001      	beq.n	8007fa8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e00d      	b.n	8007fc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2274      	movs	r2, #116	; 0x74
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b004      	add	sp, #16
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	01ffffff 	.word	0x01ffffff

08007fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b094      	sub	sp, #80	; 0x50
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	1dfb      	adds	r3, r7, #7
 8007fde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe0:	e0a3      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	d100      	bne.n	8007fea <UART_WaitOnFlagUntilTimeout+0x1a>
 8007fe8:	e09f      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fea:	f7fc fa53 	bl	8004494 <HAL_GetTick>
 8007fee:	0002      	movs	r2, r0
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d302      	bcc.n	8008000 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d13d      	bne.n	800807c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008000:	f3ef 8310 	mrs	r3, PRIMASK
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008008:	647b      	str	r3, [r7, #68]	; 0x44
 800800a:	2301      	movs	r3, #1
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	f383 8810 	msr	PRIMASK, r3
}
 8008014:	46c0      	nop			; (mov r8, r8)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	494c      	ldr	r1, [pc, #304]	; (8008154 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008022:	400a      	ands	r2, r1
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008028:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	f383 8810 	msr	PRIMASK, r3
}
 8008030:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008032:	f3ef 8310 	mrs	r3, PRIMASK
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803a:	643b      	str	r3, [r7, #64]	; 0x40
 800803c:	2301      	movs	r3, #1
 800803e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	f383 8810 	msr	PRIMASK, r3
}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2101      	movs	r1, #1
 8008054:	438a      	bics	r2, r1
 8008056:	609a      	str	r2, [r3, #8]
 8008058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	f383 8810 	msr	PRIMASK, r3
}
 8008062:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2220      	movs	r2, #32
 800806e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2274      	movs	r2, #116	; 0x74
 8008074:	2100      	movs	r1, #0
 8008076:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e067      	b.n	800814c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2204      	movs	r2, #4
 8008084:	4013      	ands	r3, r2
 8008086:	d050      	beq.n	800812a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	2380      	movs	r3, #128	; 0x80
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	401a      	ands	r2, r3
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	429a      	cmp	r2, r3
 800809a:	d146      	bne.n	800812a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	0112      	lsls	r2, r2, #4
 80080a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a6:	f3ef 8310 	mrs	r3, PRIMASK
 80080aa:	613b      	str	r3, [r7, #16]
  return(result);
 80080ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080b0:	2301      	movs	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f383 8810 	msr	PRIMASK, r3
}
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4923      	ldr	r1, [pc, #140]	; (8008154 <UART_WaitOnFlagUntilTimeout+0x184>)
 80080c8:	400a      	ands	r2, r1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f383 8810 	msr	PRIMASK, r3
}
 80080d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d8:	f3ef 8310 	mrs	r3, PRIMASK
 80080dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80080de:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080e2:	2301      	movs	r3, #1
 80080e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	f383 8810 	msr	PRIMASK, r3
}
 80080ec:	46c0      	nop			; (mov r8, r8)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2101      	movs	r1, #1
 80080fa:	438a      	bics	r2, r1
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	f383 8810 	msr	PRIMASK, r3
}
 8008108:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2280      	movs	r2, #128	; 0x80
 800811a:	2120      	movs	r1, #32
 800811c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2274      	movs	r2, #116	; 0x74
 8008122:	2100      	movs	r1, #0
 8008124:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e010      	b.n	800814c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	4013      	ands	r3, r2
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	425a      	negs	r2, r3
 800813a:	4153      	adcs	r3, r2
 800813c:	b2db      	uxtb	r3, r3
 800813e:	001a      	movs	r2, r3
 8008140:	1dfb      	adds	r3, r7, #7
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d100      	bne.n	800814a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008148:	e74b      	b.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	0018      	movs	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	b014      	add	sp, #80	; 0x50
 8008152:	bd80      	pop	{r7, pc}
 8008154:	fffffe5f 	.word	0xfffffe5f

08008158 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b090      	sub	sp, #64	; 0x40
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	1dbb      	adds	r3, r7, #6
 8008164:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	1dba      	adds	r2, r7, #6
 8008170:	2158      	movs	r1, #88	; 0x58
 8008172:	8812      	ldrh	r2, [r2, #0]
 8008174:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2280      	movs	r2, #128	; 0x80
 800817a:	2100      	movs	r1, #0
 800817c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2222      	movs	r2, #34	; 0x22
 8008182:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	2b00      	cmp	r3, #0
 800818a:	d02b      	beq.n	80081e4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	4a3f      	ldr	r2, [pc, #252]	; (8008290 <UART_Start_Receive_DMA+0x138>)
 8008192:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008198:	4a3e      	ldr	r2, [pc, #248]	; (8008294 <UART_Start_Receive_DMA+0x13c>)
 800819a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a0:	4a3d      	ldr	r2, [pc, #244]	; (8008298 <UART_Start_Receive_DMA+0x140>)
 80081a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	2200      	movs	r2, #0
 80081aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3324      	adds	r3, #36	; 0x24
 80081b6:	0019      	movs	r1, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081bc:	001a      	movs	r2, r3
 80081be:	1dbb      	adds	r3, r7, #6
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	f7fc fabb 	bl	800473c <HAL_DMA_Start_IT>
 80081c6:	1e03      	subs	r3, r0, #0
 80081c8:	d00c      	beq.n	80081e4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2280      	movs	r2, #128	; 0x80
 80081ce:	2110      	movs	r1, #16
 80081d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2274      	movs	r2, #116	; 0x74
 80081d6:	2100      	movs	r1, #0
 80081d8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e050      	b.n	8008286 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2274      	movs	r2, #116	; 0x74
 80081e8:	2100      	movs	r1, #0
 80081ea:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ec:	f3ef 8310 	mrs	r3, PRIMASK
 80081f0:	613b      	str	r3, [r7, #16]
  return(result);
 80081f2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f6:	2301      	movs	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f383 8810 	msr	PRIMASK, r3
}
 8008200:	46c0      	nop			; (mov r8, r8)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2180      	movs	r1, #128	; 0x80
 800820e:	0049      	lsls	r1, r1, #1
 8008210:	430a      	orrs	r2, r1
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008216:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f383 8810 	msr	PRIMASK, r3
}
 800821e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008220:	f3ef 8310 	mrs	r3, PRIMASK
 8008224:	61fb      	str	r3, [r7, #28]
  return(result);
 8008226:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008228:	63bb      	str	r3, [r7, #56]	; 0x38
 800822a:	2301      	movs	r3, #1
 800822c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f383 8810 	msr	PRIMASK, r3
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2101      	movs	r1, #1
 8008242:	430a      	orrs	r2, r1
 8008244:	609a      	str	r2, [r3, #8]
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	f383 8810 	msr	PRIMASK, r3
}
 8008250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008252:	f3ef 8310 	mrs	r3, PRIMASK
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825a:	637b      	str	r3, [r7, #52]	; 0x34
 800825c:	2301      	movs	r3, #1
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2140      	movs	r1, #64	; 0x40
 8008274:	430a      	orrs	r2, r1
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	0018      	movs	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	b010      	add	sp, #64	; 0x40
 800828c:	bd80      	pop	{r7, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	0800845d 	.word	0x0800845d
 8008294:	08008581 	.word	0x08008581
 8008298:	080085bd 	.word	0x080085bd

0800829c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a4:	f3ef 8310 	mrs	r3, PRIMASK
 80082a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80082aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	2301      	movs	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f383 8810 	msr	PRIMASK, r3
}
 80082b8:	46c0      	nop			; (mov r8, r8)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	21c0      	movs	r1, #192	; 0xc0
 80082c6:	438a      	bics	r2, r1
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f383 8810 	msr	PRIMASK, r3
}
 80082d4:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	679a      	str	r2, [r3, #120]	; 0x78
}
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	46bd      	mov	sp, r7
 80082e0:	b006      	add	sp, #24
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08e      	sub	sp, #56	; 0x38
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ec:	f3ef 8310 	mrs	r3, PRIMASK
 80082f0:	617b      	str	r3, [r7, #20]
  return(result);
 80082f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
 80082f6:	2301      	movs	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f383 8810 	msr	PRIMASK, r3
}
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4925      	ldr	r1, [pc, #148]	; (80083a4 <UART_EndRxTransfer+0xc0>)
 800830e:	400a      	ands	r2, r1
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f383 8810 	msr	PRIMASK, r3
}
 800831c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800831e:	f3ef 8310 	mrs	r3, PRIMASK
 8008322:	623b      	str	r3, [r7, #32]
  return(result);
 8008324:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008326:	633b      	str	r3, [r7, #48]	; 0x30
 8008328:	2301      	movs	r3, #1
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	f383 8810 	msr	PRIMASK, r3
}
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2101      	movs	r1, #1
 8008340:	438a      	bics	r2, r1
 8008342:	609a      	str	r2, [r3, #8]
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	f383 8810 	msr	PRIMASK, r3
}
 800834e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	2b01      	cmp	r3, #1
 8008356:	d118      	bne.n	800838a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008358:	f3ef 8310 	mrs	r3, PRIMASK
 800835c:	60bb      	str	r3, [r7, #8]
  return(result);
 800835e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008362:	2301      	movs	r3, #1
 8008364:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f383 8810 	msr	PRIMASK, r3
}
 800836c:	46c0      	nop			; (mov r8, r8)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2110      	movs	r1, #16
 800837a:	438a      	bics	r2, r1
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f383 8810 	msr	PRIMASK, r3
}
 8008388:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800839c:	46c0      	nop			; (mov r8, r8)
 800839e:	46bd      	mov	sp, r7
 80083a0:	b00e      	add	sp, #56	; 0x38
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	fffffedf 	.word	0xfffffedf

080083a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08c      	sub	sp, #48	; 0x30
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d035      	beq.n	800842a <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	2252      	movs	r2, #82	; 0x52
 80083c2:	2100      	movs	r1, #0
 80083c4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80083cc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80083d0:	2301      	movs	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f383 8810 	msr	PRIMASK, r3
}
 80083da:	46c0      	nop			; (mov r8, r8)
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2180      	movs	r1, #128	; 0x80
 80083e8:	438a      	bics	r2, r1
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083f8:	f3ef 8310 	mrs	r3, PRIMASK
 80083fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80083fe:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
 8008402:	2301      	movs	r3, #1
 8008404:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f383 8810 	msr	PRIMASK, r3
}
 800840c:	46c0      	nop			; (mov r8, r8)
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2140      	movs	r1, #64	; 0x40
 800841a:	430a      	orrs	r2, r1
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	e004      	b.n	8008434 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	0018      	movs	r0, r3
 800842e:	f7fb fc13 	bl	8003c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46c0      	nop			; (mov r8, r8)
 8008436:	46bd      	mov	sp, r7
 8008438:	b00c      	add	sp, #48	; 0x30
 800843a:	bd80      	pop	{r7, pc}

0800843c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	0018      	movs	r0, r3
 800844e:	f7ff fb47 	bl	8007ae0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	46bd      	mov	sp, r7
 8008456:	b004      	add	sp, #16
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b094      	sub	sp, #80	; 0x50
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	2b20      	cmp	r3, #32
 8008470:	d06e      	beq.n	8008550 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	225a      	movs	r2, #90	; 0x5a
 8008476:	2100      	movs	r1, #0
 8008478:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800847a:	f3ef 8310 	mrs	r3, PRIMASK
 800847e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008480:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008482:	64bb      	str	r3, [r7, #72]	; 0x48
 8008484:	2301      	movs	r3, #1
 8008486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f383 8810 	msr	PRIMASK, r3
}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4938      	ldr	r1, [pc, #224]	; (800857c <UART_DMAReceiveCplt+0x120>)
 800849c:	400a      	ands	r2, r1
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	f383 8810 	msr	PRIMASK, r3
}
 80084aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ac:	f3ef 8310 	mrs	r3, PRIMASK
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b4:	647b      	str	r3, [r7, #68]	; 0x44
 80084b6:	2301      	movs	r3, #1
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	f383 8810 	msr	PRIMASK, r3
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2101      	movs	r1, #1
 80084ce:	438a      	bics	r2, r1
 80084d0:	609a      	str	r2, [r3, #8]
 80084d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	f383 8810 	msr	PRIMASK, r3
}
 80084dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084de:	f3ef 8310 	mrs	r3, PRIMASK
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e6:	643b      	str	r3, [r7, #64]	; 0x40
 80084e8:	2301      	movs	r3, #1
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	f383 8810 	msr	PRIMASK, r3
}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2140      	movs	r1, #64	; 0x40
 8008500:	438a      	bics	r2, r1
 8008502:	609a      	str	r2, [r3, #8]
 8008504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008506:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	f383 8810 	msr	PRIMASK, r3
}
 800850e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008512:	2220      	movs	r2, #32
 8008514:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851a:	2b01      	cmp	r3, #1
 800851c:	d118      	bne.n	8008550 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800851e:	f3ef 8310 	mrs	r3, PRIMASK
 8008522:	60fb      	str	r3, [r7, #12]
  return(result);
 8008524:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008528:	2301      	movs	r3, #1
 800852a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f383 8810 	msr	PRIMASK, r3
}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2110      	movs	r1, #16
 8008540:	438a      	bics	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008554:	2b01      	cmp	r3, #1
 8008556:	d108      	bne.n	800856a <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855a:	2258      	movs	r2, #88	; 0x58
 800855c:	5a9a      	ldrh	r2, [r3, r2]
 800855e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008560:	0011      	movs	r1, r2
 8008562:	0018      	movs	r0, r3
 8008564:	f7ff fad4 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008568:	e003      	b.n	8008572 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856c:	0018      	movs	r0, r3
 800856e:	f7fb fb81 	bl	8003c74 <HAL_UART_RxCpltCallback>
}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b014      	add	sp, #80	; 0x50
 8008578:	bd80      	pop	{r7, pc}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	fffffeff 	.word	0xfffffeff

08008580 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008592:	2b01      	cmp	r3, #1
 8008594:	d10a      	bne.n	80085ac <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2258      	movs	r2, #88	; 0x58
 800859a:	5a9b      	ldrh	r3, [r3, r2]
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	0011      	movs	r1, r2
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7ff fab3 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085aa:	e003      	b.n	80085b4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff fa9e 	bl	8007af0 <HAL_UART_RxHalfCpltCallback>
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	46bd      	mov	sp, r7
 80085b8:	b004      	add	sp, #16
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2280      	movs	r2, #128	; 0x80
 80085de:	4013      	ands	r3, r2
 80085e0:	2b80      	cmp	r3, #128	; 0x80
 80085e2:	d10a      	bne.n	80085fa <UART_DMAError+0x3e>
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2b21      	cmp	r3, #33	; 0x21
 80085e8:	d107      	bne.n	80085fa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2252      	movs	r2, #82	; 0x52
 80085ee:	2100      	movs	r1, #0
 80085f0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	0018      	movs	r0, r3
 80085f6:	f7ff fe51 	bl	800829c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2240      	movs	r2, #64	; 0x40
 8008602:	4013      	ands	r3, r2
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	d10a      	bne.n	800861e <UART_DMAError+0x62>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b22      	cmp	r3, #34	; 0x22
 800860c:	d107      	bne.n	800861e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	225a      	movs	r2, #90	; 0x5a
 8008612:	2100      	movs	r1, #0
 8008614:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	0018      	movs	r0, r3
 800861a:	f7ff fe63 	bl	80082e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2280      	movs	r2, #128	; 0x80
 8008622:	589b      	ldr	r3, [r3, r2]
 8008624:	2210      	movs	r2, #16
 8008626:	431a      	orrs	r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2180      	movs	r1, #128	; 0x80
 800862c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	0018      	movs	r0, r3
 8008632:	f7ff fa65 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	46bd      	mov	sp, r7
 800863a:	b006      	add	sp, #24
 800863c:	bd80      	pop	{r7, pc}

0800863e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	225a      	movs	r2, #90	; 0x5a
 8008650:	2100      	movs	r1, #0
 8008652:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2252      	movs	r2, #82	; 0x52
 8008658:	2100      	movs	r1, #0
 800865a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	0018      	movs	r0, r3
 8008660:	f7ff fa4e 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008664:	46c0      	nop			; (mov r8, r8)
 8008666:	46bd      	mov	sp, r7
 8008668:	b004      	add	sp, #16
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008674:	f3ef 8310 	mrs	r3, PRIMASK
 8008678:	60bb      	str	r3, [r7, #8]
  return(result);
 800867a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	2301      	movs	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f383 8810 	msr	PRIMASK, r3
}
 8008688:	46c0      	nop			; (mov r8, r8)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2140      	movs	r1, #64	; 0x40
 8008696:	438a      	bics	r2, r1
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f383 8810 	msr	PRIMASK, r3
}
 80086a4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	0018      	movs	r0, r3
 80086b6:	f7fb facf 	bl	8003c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	46bd      	mov	sp, r7
 80086be:	b006      	add	sp, #24
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <__errno>:
 80086c4:	4b01      	ldr	r3, [pc, #4]	; (80086cc <__errno+0x8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	4770      	bx	lr
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	2000000c 	.word	0x2000000c

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	2600      	movs	r6, #0
 80086d4:	4d0c      	ldr	r5, [pc, #48]	; (8008708 <__libc_init_array+0x38>)
 80086d6:	4c0d      	ldr	r4, [pc, #52]	; (800870c <__libc_init_array+0x3c>)
 80086d8:	1b64      	subs	r4, r4, r5
 80086da:	10a4      	asrs	r4, r4, #2
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	2600      	movs	r6, #0
 80086e2:	f005 f975 	bl	800d9d0 <_init>
 80086e6:	4d0a      	ldr	r5, [pc, #40]	; (8008710 <__libc_init_array+0x40>)
 80086e8:	4c0a      	ldr	r4, [pc, #40]	; (8008714 <__libc_init_array+0x44>)
 80086ea:	1b64      	subs	r4, r4, r5
 80086ec:	10a4      	asrs	r4, r4, #2
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	00b3      	lsls	r3, r6, #2
 80086f6:	58eb      	ldr	r3, [r5, r3]
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	00b3      	lsls	r3, r6, #2
 8008700:	58eb      	ldr	r3, [r5, r3]
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	0800dfec 	.word	0x0800dfec
 800870c:	0800dfec 	.word	0x0800dfec
 8008710:	0800dfec 	.word	0x0800dfec
 8008714:	0800dff0 	.word	0x0800dff0

08008718 <memset>:
 8008718:	0003      	movs	r3, r0
 800871a:	1882      	adds	r2, r0, r2
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	7019      	strb	r1, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <__cvt>:
 8008728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872a:	001e      	movs	r6, r3
 800872c:	2300      	movs	r3, #0
 800872e:	0014      	movs	r4, r2
 8008730:	b08b      	sub	sp, #44	; 0x2c
 8008732:	429e      	cmp	r6, r3
 8008734:	da04      	bge.n	8008740 <__cvt+0x18>
 8008736:	2180      	movs	r1, #128	; 0x80
 8008738:	0609      	lsls	r1, r1, #24
 800873a:	1873      	adds	r3, r6, r1
 800873c:	001e      	movs	r6, r3
 800873e:	232d      	movs	r3, #45	; 0x2d
 8008740:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008742:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008744:	7013      	strb	r3, [r2, #0]
 8008746:	2320      	movs	r3, #32
 8008748:	2203      	movs	r2, #3
 800874a:	439f      	bics	r7, r3
 800874c:	2f46      	cmp	r7, #70	; 0x46
 800874e:	d007      	beq.n	8008760 <__cvt+0x38>
 8008750:	003b      	movs	r3, r7
 8008752:	3b45      	subs	r3, #69	; 0x45
 8008754:	4259      	negs	r1, r3
 8008756:	414b      	adcs	r3, r1
 8008758:	9910      	ldr	r1, [sp, #64]	; 0x40
 800875a:	3a01      	subs	r2, #1
 800875c:	18cb      	adds	r3, r1, r3
 800875e:	9310      	str	r3, [sp, #64]	; 0x40
 8008760:	ab09      	add	r3, sp, #36	; 0x24
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	ab08      	add	r3, sp, #32
 8008766:	9303      	str	r3, [sp, #12]
 8008768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800876a:	9200      	str	r2, [sp, #0]
 800876c:	9302      	str	r3, [sp, #8]
 800876e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008770:	0022      	movs	r2, r4
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	0033      	movs	r3, r6
 8008776:	f001 fe83 	bl	800a480 <_dtoa_r>
 800877a:	0005      	movs	r5, r0
 800877c:	2f47      	cmp	r7, #71	; 0x47
 800877e:	d102      	bne.n	8008786 <__cvt+0x5e>
 8008780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008782:	07db      	lsls	r3, r3, #31
 8008784:	d528      	bpl.n	80087d8 <__cvt+0xb0>
 8008786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008788:	18eb      	adds	r3, r5, r3
 800878a:	9307      	str	r3, [sp, #28]
 800878c:	2f46      	cmp	r7, #70	; 0x46
 800878e:	d114      	bne.n	80087ba <__cvt+0x92>
 8008790:	782b      	ldrb	r3, [r5, #0]
 8008792:	2b30      	cmp	r3, #48	; 0x30
 8008794:	d10c      	bne.n	80087b0 <__cvt+0x88>
 8008796:	2200      	movs	r2, #0
 8008798:	2300      	movs	r3, #0
 800879a:	0020      	movs	r0, r4
 800879c:	0031      	movs	r1, r6
 800879e:	f7f7 fe5f 	bl	8000460 <__aeabi_dcmpeq>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d104      	bne.n	80087b0 <__cvt+0x88>
 80087a6:	2301      	movs	r3, #1
 80087a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087b2:	9a07      	ldr	r2, [sp, #28]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	18d3      	adds	r3, r2, r3
 80087b8:	9307      	str	r3, [sp, #28]
 80087ba:	2200      	movs	r2, #0
 80087bc:	2300      	movs	r3, #0
 80087be:	0020      	movs	r0, r4
 80087c0:	0031      	movs	r1, r6
 80087c2:	f7f7 fe4d 	bl	8000460 <__aeabi_dcmpeq>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d001      	beq.n	80087ce <__cvt+0xa6>
 80087ca:	9b07      	ldr	r3, [sp, #28]
 80087cc:	9309      	str	r3, [sp, #36]	; 0x24
 80087ce:	2230      	movs	r2, #48	; 0x30
 80087d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d2:	9907      	ldr	r1, [sp, #28]
 80087d4:	428b      	cmp	r3, r1
 80087d6:	d306      	bcc.n	80087e6 <__cvt+0xbe>
 80087d8:	0028      	movs	r0, r5
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80087de:	1b5b      	subs	r3, r3, r5
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	b00b      	add	sp, #44	; 0x2c
 80087e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e6:	1c59      	adds	r1, r3, #1
 80087e8:	9109      	str	r1, [sp, #36]	; 0x24
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e7f0      	b.n	80087d0 <__cvt+0xa8>

080087ee <__exponent>:
 80087ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f0:	1c83      	adds	r3, r0, #2
 80087f2:	b087      	sub	sp, #28
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	0005      	movs	r5, r0
 80087f8:	000c      	movs	r4, r1
 80087fa:	232b      	movs	r3, #43	; 0x2b
 80087fc:	7002      	strb	r2, [r0, #0]
 80087fe:	2900      	cmp	r1, #0
 8008800:	da01      	bge.n	8008806 <__exponent+0x18>
 8008802:	424c      	negs	r4, r1
 8008804:	3302      	adds	r3, #2
 8008806:	706b      	strb	r3, [r5, #1]
 8008808:	2c09      	cmp	r4, #9
 800880a:	dd31      	ble.n	8008870 <__exponent+0x82>
 800880c:	270a      	movs	r7, #10
 800880e:	ab04      	add	r3, sp, #16
 8008810:	1dde      	adds	r6, r3, #7
 8008812:	0020      	movs	r0, r4
 8008814:	0039      	movs	r1, r7
 8008816:	9601      	str	r6, [sp, #4]
 8008818:	f7f7 fe0c 	bl	8000434 <__aeabi_idivmod>
 800881c:	3e01      	subs	r6, #1
 800881e:	3130      	adds	r1, #48	; 0x30
 8008820:	0020      	movs	r0, r4
 8008822:	7031      	strb	r1, [r6, #0]
 8008824:	0039      	movs	r1, r7
 8008826:	9402      	str	r4, [sp, #8]
 8008828:	f7f7 fd1e 	bl	8000268 <__divsi3>
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	0004      	movs	r4, r0
 8008830:	2b63      	cmp	r3, #99	; 0x63
 8008832:	dcee      	bgt.n	8008812 <__exponent+0x24>
 8008834:	9b01      	ldr	r3, [sp, #4]
 8008836:	3430      	adds	r4, #48	; 0x30
 8008838:	1e9a      	subs	r2, r3, #2
 800883a:	0013      	movs	r3, r2
 800883c:	9903      	ldr	r1, [sp, #12]
 800883e:	7014      	strb	r4, [r2, #0]
 8008840:	a804      	add	r0, sp, #16
 8008842:	3007      	adds	r0, #7
 8008844:	4298      	cmp	r0, r3
 8008846:	d80e      	bhi.n	8008866 <__exponent+0x78>
 8008848:	ab04      	add	r3, sp, #16
 800884a:	3307      	adds	r3, #7
 800884c:	2000      	movs	r0, #0
 800884e:	429a      	cmp	r2, r3
 8008850:	d804      	bhi.n	800885c <__exponent+0x6e>
 8008852:	ab04      	add	r3, sp, #16
 8008854:	3009      	adds	r0, #9
 8008856:	18c0      	adds	r0, r0, r3
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	1ac0      	subs	r0, r0, r3
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	1818      	adds	r0, r3, r0
 8008860:	1b40      	subs	r0, r0, r5
 8008862:	b007      	add	sp, #28
 8008864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008866:	7818      	ldrb	r0, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	7008      	strb	r0, [r1, #0]
 800886c:	3101      	adds	r1, #1
 800886e:	e7e7      	b.n	8008840 <__exponent+0x52>
 8008870:	2330      	movs	r3, #48	; 0x30
 8008872:	18e4      	adds	r4, r4, r3
 8008874:	70ab      	strb	r3, [r5, #2]
 8008876:	1d28      	adds	r0, r5, #4
 8008878:	70ec      	strb	r4, [r5, #3]
 800887a:	e7f1      	b.n	8008860 <__exponent+0x72>

0800887c <_printf_float>:
 800887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887e:	b095      	sub	sp, #84	; 0x54
 8008880:	000c      	movs	r4, r1
 8008882:	9208      	str	r2, [sp, #32]
 8008884:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
 8008888:	0007      	movs	r7, r0
 800888a:	f002 ff89 	bl	800b7a0 <_localeconv_r>
 800888e:	6803      	ldr	r3, [r0, #0]
 8008890:	0018      	movs	r0, r3
 8008892:	930b      	str	r3, [sp, #44]	; 0x2c
 8008894:	f7f7 fc42 	bl	800011c <strlen>
 8008898:	2300      	movs	r3, #0
 800889a:	9312      	str	r3, [sp, #72]	; 0x48
 800889c:	7e23      	ldrb	r3, [r4, #24]
 800889e:	2207      	movs	r2, #7
 80088a0:	001e      	movs	r6, r3
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	900d      	str	r0, [sp, #52]	; 0x34
 80088a6:	930c      	str	r3, [sp, #48]	; 0x30
 80088a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088aa:	682b      	ldr	r3, [r5, #0]
 80088ac:	05c9      	lsls	r1, r1, #23
 80088ae:	d547      	bpl.n	8008940 <_printf_float+0xc4>
 80088b0:	189b      	adds	r3, r3, r2
 80088b2:	4393      	bics	r3, r2
 80088b4:	001a      	movs	r2, r3
 80088b6:	3208      	adds	r2, #8
 80088b8:	602a      	str	r2, [r5, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	64a2      	str	r2, [r4, #72]	; 0x48
 80088c0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80088c2:	2201      	movs	r2, #1
 80088c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80088c6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80088c8:	930a      	str	r3, [sp, #40]	; 0x28
 80088ca:	006b      	lsls	r3, r5, #1
 80088cc:	085b      	lsrs	r3, r3, #1
 80088ce:	930e      	str	r3, [sp, #56]	; 0x38
 80088d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088d2:	4ba8      	ldr	r3, [pc, #672]	; (8008b74 <_printf_float+0x2f8>)
 80088d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80088d6:	4252      	negs	r2, r2
 80088d8:	f7f9 fbce 	bl	8002078 <__aeabi_dcmpun>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d131      	bne.n	8008944 <_printf_float+0xc8>
 80088e0:	2201      	movs	r2, #1
 80088e2:	4ba4      	ldr	r3, [pc, #656]	; (8008b74 <_printf_float+0x2f8>)
 80088e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80088e8:	4252      	negs	r2, r2
 80088ea:	f7f7 fdc9 	bl	8000480 <__aeabi_dcmple>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d128      	bne.n	8008944 <_printf_float+0xc8>
 80088f2:	2200      	movs	r2, #0
 80088f4:	2300      	movs	r3, #0
 80088f6:	0029      	movs	r1, r5
 80088f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088fa:	f7f7 fdb7 	bl	800046c <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d003      	beq.n	800890a <_printf_float+0x8e>
 8008902:	0023      	movs	r3, r4
 8008904:	222d      	movs	r2, #45	; 0x2d
 8008906:	3343      	adds	r3, #67	; 0x43
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	4d9b      	ldr	r5, [pc, #620]	; (8008b78 <_printf_float+0x2fc>)
 800890c:	2e47      	cmp	r6, #71	; 0x47
 800890e:	d900      	bls.n	8008912 <_printf_float+0x96>
 8008910:	4d9a      	ldr	r5, [pc, #616]	; (8008b7c <_printf_float+0x300>)
 8008912:	2303      	movs	r3, #3
 8008914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008916:	6123      	str	r3, [r4, #16]
 8008918:	3301      	adds	r3, #1
 800891a:	439a      	bics	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	930a      	str	r3, [sp, #40]	; 0x28
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	0021      	movs	r1, r4
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	0038      	movs	r0, r7
 800892a:	9b08      	ldr	r3, [sp, #32]
 800892c:	aa13      	add	r2, sp, #76	; 0x4c
 800892e:	f000 f9f3 	bl	8008d18 <_printf_common>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d000      	beq.n	8008938 <_printf_float+0xbc>
 8008936:	e09e      	b.n	8008a76 <_printf_float+0x1fa>
 8008938:	2001      	movs	r0, #1
 800893a:	4240      	negs	r0, r0
 800893c:	b015      	add	sp, #84	; 0x54
 800893e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008940:	3307      	adds	r3, #7
 8008942:	e7b6      	b.n	80088b2 <_printf_float+0x36>
 8008944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008946:	002b      	movs	r3, r5
 8008948:	0010      	movs	r0, r2
 800894a:	0029      	movs	r1, r5
 800894c:	f7f9 fb94 	bl	8002078 <__aeabi_dcmpun>
 8008950:	2800      	cmp	r0, #0
 8008952:	d00a      	beq.n	800896a <_printf_float+0xee>
 8008954:	2d00      	cmp	r5, #0
 8008956:	da03      	bge.n	8008960 <_printf_float+0xe4>
 8008958:	0023      	movs	r3, r4
 800895a:	222d      	movs	r2, #45	; 0x2d
 800895c:	3343      	adds	r3, #67	; 0x43
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	4d87      	ldr	r5, [pc, #540]	; (8008b80 <_printf_float+0x304>)
 8008962:	2e47      	cmp	r6, #71	; 0x47
 8008964:	d9d5      	bls.n	8008912 <_printf_float+0x96>
 8008966:	4d87      	ldr	r5, [pc, #540]	; (8008b84 <_printf_float+0x308>)
 8008968:	e7d3      	b.n	8008912 <_printf_float+0x96>
 800896a:	2220      	movs	r2, #32
 800896c:	0031      	movs	r1, r6
 800896e:	6863      	ldr	r3, [r4, #4]
 8008970:	4391      	bics	r1, r2
 8008972:	910e      	str	r1, [sp, #56]	; 0x38
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	d147      	bne.n	8008a08 <_printf_float+0x18c>
 8008978:	3307      	adds	r3, #7
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	4313      	orrs	r3, r2
 8008984:	2200      	movs	r2, #0
 8008986:	9206      	str	r2, [sp, #24]
 8008988:	aa12      	add	r2, sp, #72	; 0x48
 800898a:	9205      	str	r2, [sp, #20]
 800898c:	aa11      	add	r2, sp, #68	; 0x44
 800898e:	9203      	str	r2, [sp, #12]
 8008990:	2223      	movs	r2, #35	; 0x23
 8008992:	a908      	add	r1, sp, #32
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	1852      	adds	r2, r2, r1
 800899c:	9202      	str	r2, [sp, #8]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	0038      	movs	r0, r7
 80089a2:	002b      	movs	r3, r5
 80089a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a6:	9604      	str	r6, [sp, #16]
 80089a8:	f7ff febe 	bl	8008728 <__cvt>
 80089ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ae:	0005      	movs	r5, r0
 80089b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089b2:	2b47      	cmp	r3, #71	; 0x47
 80089b4:	d108      	bne.n	80089c8 <_printf_float+0x14c>
 80089b6:	1ccb      	adds	r3, r1, #3
 80089b8:	db02      	blt.n	80089c0 <_printf_float+0x144>
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	4299      	cmp	r1, r3
 80089be:	dd46      	ble.n	8008a4e <_printf_float+0x1d2>
 80089c0:	0033      	movs	r3, r6
 80089c2:	3b02      	subs	r3, #2
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	001e      	movs	r6, r3
 80089c8:	2e65      	cmp	r6, #101	; 0x65
 80089ca:	d824      	bhi.n	8008a16 <_printf_float+0x19a>
 80089cc:	0020      	movs	r0, r4
 80089ce:	0032      	movs	r2, r6
 80089d0:	3901      	subs	r1, #1
 80089d2:	3050      	adds	r0, #80	; 0x50
 80089d4:	9111      	str	r1, [sp, #68]	; 0x44
 80089d6:	f7ff ff0a 	bl	80087ee <__exponent>
 80089da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089dc:	900a      	str	r0, [sp, #40]	; 0x28
 80089de:	1813      	adds	r3, r2, r0
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	dc02      	bgt.n	80089ec <_printf_float+0x170>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	07d2      	lsls	r2, r2, #31
 80089ea:	d501      	bpl.n	80089f0 <_printf_float+0x174>
 80089ec:	3301      	adds	r3, #1
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	2323      	movs	r3, #35	; 0x23
 80089f2:	aa08      	add	r2, sp, #32
 80089f4:	189b      	adds	r3, r3, r2
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d100      	bne.n	80089fe <_printf_float+0x182>
 80089fc:	e791      	b.n	8008922 <_printf_float+0xa6>
 80089fe:	0023      	movs	r3, r4
 8008a00:	222d      	movs	r2, #45	; 0x2d
 8008a02:	3343      	adds	r3, #67	; 0x43
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	e78c      	b.n	8008922 <_printf_float+0xa6>
 8008a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a0a:	2a47      	cmp	r2, #71	; 0x47
 8008a0c:	d1b6      	bne.n	800897c <_printf_float+0x100>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1b4      	bne.n	800897c <_printf_float+0x100>
 8008a12:	3301      	adds	r3, #1
 8008a14:	e7b1      	b.n	800897a <_printf_float+0xfe>
 8008a16:	2e66      	cmp	r6, #102	; 0x66
 8008a18:	d11b      	bne.n	8008a52 <_printf_float+0x1d6>
 8008a1a:	6863      	ldr	r3, [r4, #4]
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	dd0d      	ble.n	8008a3c <_printf_float+0x1c0>
 8008a20:	6121      	str	r1, [r4, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <_printf_float+0x1b0>
 8008a26:	6822      	ldr	r2, [r4, #0]
 8008a28:	07d2      	lsls	r2, r2, #31
 8008a2a:	d502      	bpl.n	8008a32 <_printf_float+0x1b6>
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	1859      	adds	r1, r3, r1
 8008a30:	6121      	str	r1, [r4, #16]
 8008a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a34:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a36:	2300      	movs	r3, #0
 8008a38:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3a:	e7d9      	b.n	80089f0 <_printf_float+0x174>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <_printf_float+0x1cc>
 8008a40:	2201      	movs	r2, #1
 8008a42:	6821      	ldr	r1, [r4, #0]
 8008a44:	4211      	tst	r1, r2
 8008a46:	d000      	beq.n	8008a4a <_printf_float+0x1ce>
 8008a48:	1c9a      	adds	r2, r3, #2
 8008a4a:	6122      	str	r2, [r4, #16]
 8008a4c:	e7f1      	b.n	8008a32 <_printf_float+0x1b6>
 8008a4e:	2367      	movs	r3, #103	; 0x67
 8008a50:	001e      	movs	r6, r3
 8008a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a56:	4293      	cmp	r3, r2
 8008a58:	db06      	blt.n	8008a68 <_printf_float+0x1ec>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	07d2      	lsls	r2, r2, #31
 8008a60:	d5e7      	bpl.n	8008a32 <_printf_float+0x1b6>
 8008a62:	3301      	adds	r3, #1
 8008a64:	6123      	str	r3, [r4, #16]
 8008a66:	e7e4      	b.n	8008a32 <_printf_float+0x1b6>
 8008a68:	2101      	movs	r1, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc01      	bgt.n	8008a72 <_printf_float+0x1f6>
 8008a6e:	1849      	adds	r1, r1, r1
 8008a70:	1ac9      	subs	r1, r1, r3
 8008a72:	1852      	adds	r2, r2, r1
 8008a74:	e7e9      	b.n	8008a4a <_printf_float+0x1ce>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	0553      	lsls	r3, r2, #21
 8008a7a:	d408      	bmi.n	8008a8e <_printf_float+0x212>
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	002a      	movs	r2, r5
 8008a80:	0038      	movs	r0, r7
 8008a82:	9908      	ldr	r1, [sp, #32]
 8008a84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a86:	47a8      	blx	r5
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d129      	bne.n	8008ae0 <_printf_float+0x264>
 8008a8c:	e754      	b.n	8008938 <_printf_float+0xbc>
 8008a8e:	2e65      	cmp	r6, #101	; 0x65
 8008a90:	d800      	bhi.n	8008a94 <_printf_float+0x218>
 8008a92:	e0ec      	b.n	8008c6e <_printf_float+0x3f2>
 8008a94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008a96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f7f7 fce0 	bl	8000460 <__aeabi_dcmpeq>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d034      	beq.n	8008b0e <_printf_float+0x292>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	0038      	movs	r0, r7
 8008aa8:	4a37      	ldr	r2, [pc, #220]	; (8008b88 <_printf_float+0x30c>)
 8008aaa:	9908      	ldr	r1, [sp, #32]
 8008aac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008aae:	47a8      	blx	r5
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d100      	bne.n	8008ab6 <_printf_float+0x23a>
 8008ab4:	e740      	b.n	8008938 <_printf_float+0xbc>
 8008ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008aba:	4293      	cmp	r3, r2
 8008abc:	db02      	blt.n	8008ac4 <_printf_float+0x248>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	07db      	lsls	r3, r3, #31
 8008ac2:	d50d      	bpl.n	8008ae0 <_printf_float+0x264>
 8008ac4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ac6:	0038      	movs	r0, r7
 8008ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008acc:	9908      	ldr	r1, [sp, #32]
 8008ace:	47a8      	blx	r5
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d100      	bne.n	8008ad8 <_printf_float+0x25c>
 8008ad6:	e72f      	b.n	8008938 <_printf_float+0xbc>
 8008ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ada:	3b01      	subs	r3, #1
 8008adc:	42ab      	cmp	r3, r5
 8008ade:	dc0a      	bgt.n	8008af6 <_printf_float+0x27a>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	079b      	lsls	r3, r3, #30
 8008ae4:	d500      	bpl.n	8008ae8 <_printf_float+0x26c>
 8008ae6:	e114      	b.n	8008d12 <_printf_float+0x496>
 8008ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aea:	68e0      	ldr	r0, [r4, #12]
 8008aec:	4298      	cmp	r0, r3
 8008aee:	db00      	blt.n	8008af2 <_printf_float+0x276>
 8008af0:	e724      	b.n	800893c <_printf_float+0xc0>
 8008af2:	0018      	movs	r0, r3
 8008af4:	e722      	b.n	800893c <_printf_float+0xc0>
 8008af6:	0022      	movs	r2, r4
 8008af8:	2301      	movs	r3, #1
 8008afa:	0038      	movs	r0, r7
 8008afc:	9908      	ldr	r1, [sp, #32]
 8008afe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b00:	321a      	adds	r2, #26
 8008b02:	47b0      	blx	r6
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d100      	bne.n	8008b0a <_printf_float+0x28e>
 8008b08:	e716      	b.n	8008938 <_printf_float+0xbc>
 8008b0a:	3501      	adds	r5, #1
 8008b0c:	e7e4      	b.n	8008ad8 <_printf_float+0x25c>
 8008b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dc3b      	bgt.n	8008b8c <_printf_float+0x310>
 8008b14:	2301      	movs	r3, #1
 8008b16:	0038      	movs	r0, r7
 8008b18:	4a1b      	ldr	r2, [pc, #108]	; (8008b88 <_printf_float+0x30c>)
 8008b1a:	9908      	ldr	r1, [sp, #32]
 8008b1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b1e:	47b0      	blx	r6
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d100      	bne.n	8008b26 <_printf_float+0x2aa>
 8008b24:	e708      	b.n	8008938 <_printf_float+0xbc>
 8008b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	d102      	bne.n	8008b34 <_printf_float+0x2b8>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d5d5      	bpl.n	8008ae0 <_printf_float+0x264>
 8008b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b36:	0038      	movs	r0, r7
 8008b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b3a:	9908      	ldr	r1, [sp, #32]
 8008b3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b3e:	47b0      	blx	r6
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d100      	bne.n	8008b46 <_printf_float+0x2ca>
 8008b44:	e6f8      	b.n	8008938 <_printf_float+0xbc>
 8008b46:	2300      	movs	r3, #0
 8008b48:	930a      	str	r3, [sp, #40]	; 0x28
 8008b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b4e:	425b      	negs	r3, r3
 8008b50:	4293      	cmp	r3, r2
 8008b52:	dc01      	bgt.n	8008b58 <_printf_float+0x2dc>
 8008b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b56:	e792      	b.n	8008a7e <_printf_float+0x202>
 8008b58:	0022      	movs	r2, r4
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	0038      	movs	r0, r7
 8008b5e:	9908      	ldr	r1, [sp, #32]
 8008b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b62:	321a      	adds	r2, #26
 8008b64:	47b0      	blx	r6
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	d100      	bne.n	8008b6c <_printf_float+0x2f0>
 8008b6a:	e6e5      	b.n	8008938 <_printf_float+0xbc>
 8008b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6e:	3301      	adds	r3, #1
 8008b70:	e7ea      	b.n	8008b48 <_printf_float+0x2cc>
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	7fefffff 	.word	0x7fefffff
 8008b78:	0800db28 	.word	0x0800db28
 8008b7c:	0800db2c 	.word	0x0800db2c
 8008b80:	0800db30 	.word	0x0800db30
 8008b84:	0800db34 	.word	0x0800db34
 8008b88:	0800df39 	.word	0x0800df39
 8008b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b90:	920a      	str	r2, [sp, #40]	; 0x28
 8008b92:	429a      	cmp	r2, r3
 8008b94:	dd00      	ble.n	8008b98 <_printf_float+0x31c>
 8008b96:	930a      	str	r3, [sp, #40]	; 0x28
 8008b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dc3d      	bgt.n	8008c1a <_printf_float+0x39e>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	17db      	asrs	r3, r3, #31
 8008ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bae:	930c      	str	r3, [sp, #48]	; 0x30
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	dc36      	bgt.n	8008c2c <_printf_float+0x3b0>
 8008bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	db40      	blt.n	8008c48 <_printf_float+0x3cc>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	07db      	lsls	r3, r3, #31
 8008bca:	d43d      	bmi.n	8008c48 <_printf_float+0x3cc>
 8008bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bd0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	1a52      	subs	r2, r2, r1
 8008bd6:	920a      	str	r2, [sp, #40]	; 0x28
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	dd00      	ble.n	8008bde <_printf_float+0x362>
 8008bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8008bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dc3a      	bgt.n	8008c5a <_printf_float+0x3de>
 8008be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be6:	2500      	movs	r5, #0
 8008be8:	43db      	mvns	r3, r3
 8008bea:	17db      	asrs	r3, r3, #31
 8008bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bf8:	400a      	ands	r2, r1
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	42ab      	cmp	r3, r5
 8008bfe:	dc00      	bgt.n	8008c02 <_printf_float+0x386>
 8008c00:	e76e      	b.n	8008ae0 <_printf_float+0x264>
 8008c02:	0022      	movs	r2, r4
 8008c04:	2301      	movs	r3, #1
 8008c06:	0038      	movs	r0, r7
 8008c08:	9908      	ldr	r1, [sp, #32]
 8008c0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c0c:	321a      	adds	r2, #26
 8008c0e:	47b0      	blx	r6
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d100      	bne.n	8008c16 <_printf_float+0x39a>
 8008c14:	e690      	b.n	8008938 <_printf_float+0xbc>
 8008c16:	3501      	adds	r5, #1
 8008c18:	e7e9      	b.n	8008bee <_printf_float+0x372>
 8008c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1c:	002a      	movs	r2, r5
 8008c1e:	0038      	movs	r0, r7
 8008c20:	9908      	ldr	r1, [sp, #32]
 8008c22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c24:	47b0      	blx	r6
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d1b9      	bne.n	8008b9e <_printf_float+0x322>
 8008c2a:	e685      	b.n	8008938 <_printf_float+0xbc>
 8008c2c:	0022      	movs	r2, r4
 8008c2e:	2301      	movs	r3, #1
 8008c30:	0038      	movs	r0, r7
 8008c32:	9908      	ldr	r1, [sp, #32]
 8008c34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c36:	321a      	adds	r2, #26
 8008c38:	47b0      	blx	r6
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d100      	bne.n	8008c40 <_printf_float+0x3c4>
 8008c3e:	e67b      	b.n	8008938 <_printf_float+0xbc>
 8008c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c42:	3301      	adds	r3, #1
 8008c44:	930e      	str	r3, [sp, #56]	; 0x38
 8008c46:	e7b0      	b.n	8008baa <_printf_float+0x32e>
 8008c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c4a:	0038      	movs	r0, r7
 8008c4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c4e:	9908      	ldr	r1, [sp, #32]
 8008c50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c52:	47b0      	blx	r6
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d1b9      	bne.n	8008bcc <_printf_float+0x350>
 8008c58:	e66e      	b.n	8008938 <_printf_float+0xbc>
 8008c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c5c:	0038      	movs	r0, r7
 8008c5e:	18ea      	adds	r2, r5, r3
 8008c60:	9908      	ldr	r1, [sp, #32]
 8008c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c66:	47a8      	blx	r5
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d1bb      	bne.n	8008be4 <_printf_float+0x368>
 8008c6c:	e664      	b.n	8008938 <_printf_float+0xbc>
 8008c6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	dc02      	bgt.n	8008c7a <_printf_float+0x3fe>
 8008c74:	2301      	movs	r3, #1
 8008c76:	421a      	tst	r2, r3
 8008c78:	d038      	beq.n	8008cec <_printf_float+0x470>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	002a      	movs	r2, r5
 8008c7e:	0038      	movs	r0, r7
 8008c80:	9908      	ldr	r1, [sp, #32]
 8008c82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c84:	47b0      	blx	r6
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d100      	bne.n	8008c8c <_printf_float+0x410>
 8008c8a:	e655      	b.n	8008938 <_printf_float+0xbc>
 8008c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c8e:	0038      	movs	r0, r7
 8008c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c92:	9908      	ldr	r1, [sp, #32]
 8008c94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c96:	47b0      	blx	r6
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d100      	bne.n	8008c9e <_printf_float+0x422>
 8008c9c:	e64c      	b.n	8008938 <_printf_float+0xbc>
 8008c9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008ca0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f7f7 fbdb 	bl	8000460 <__aeabi_dcmpeq>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d11c      	bne.n	8008ce8 <_printf_float+0x46c>
 8008cae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cb0:	1c6a      	adds	r2, r5, #1
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	0038      	movs	r0, r7
 8008cb6:	9908      	ldr	r1, [sp, #32]
 8008cb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cba:	47a8      	blx	r5
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d10f      	bne.n	8008ce0 <_printf_float+0x464>
 8008cc0:	e63a      	b.n	8008938 <_printf_float+0xbc>
 8008cc2:	0022      	movs	r2, r4
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	0038      	movs	r0, r7
 8008cc8:	9908      	ldr	r1, [sp, #32]
 8008cca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ccc:	321a      	adds	r2, #26
 8008cce:	47b0      	blx	r6
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d100      	bne.n	8008cd6 <_printf_float+0x45a>
 8008cd4:	e630      	b.n	8008938 <_printf_float+0xbc>
 8008cd6:	3501      	adds	r5, #1
 8008cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	42ab      	cmp	r3, r5
 8008cde:	dcf0      	bgt.n	8008cc2 <_printf_float+0x446>
 8008ce0:	0022      	movs	r2, r4
 8008ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce4:	3250      	adds	r2, #80	; 0x50
 8008ce6:	e6cb      	b.n	8008a80 <_printf_float+0x204>
 8008ce8:	2500      	movs	r5, #0
 8008cea:	e7f5      	b.n	8008cd8 <_printf_float+0x45c>
 8008cec:	002a      	movs	r2, r5
 8008cee:	e7e1      	b.n	8008cb4 <_printf_float+0x438>
 8008cf0:	0022      	movs	r2, r4
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	0038      	movs	r0, r7
 8008cf6:	9908      	ldr	r1, [sp, #32]
 8008cf8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008cfa:	3219      	adds	r2, #25
 8008cfc:	47b0      	blx	r6
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d100      	bne.n	8008d04 <_printf_float+0x488>
 8008d02:	e619      	b.n	8008938 <_printf_float+0xbc>
 8008d04:	3501      	adds	r5, #1
 8008d06:	68e3      	ldr	r3, [r4, #12]
 8008d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	42ab      	cmp	r3, r5
 8008d0e:	dcef      	bgt.n	8008cf0 <_printf_float+0x474>
 8008d10:	e6ea      	b.n	8008ae8 <_printf_float+0x26c>
 8008d12:	2500      	movs	r5, #0
 8008d14:	e7f7      	b.n	8008d06 <_printf_float+0x48a>
 8008d16:	46c0      	nop			; (mov r8, r8)

08008d18 <_printf_common>:
 8008d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d1a:	0015      	movs	r5, r2
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	688a      	ldr	r2, [r1, #8]
 8008d20:	690b      	ldr	r3, [r1, #16]
 8008d22:	000c      	movs	r4, r1
 8008d24:	9000      	str	r0, [sp, #0]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	da00      	bge.n	8008d2c <_printf_common+0x14>
 8008d2a:	0013      	movs	r3, r2
 8008d2c:	0022      	movs	r2, r4
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	3243      	adds	r2, #67	; 0x43
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	d001      	beq.n	8008d3c <_printf_common+0x24>
 8008d38:	3301      	adds	r3, #1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	069b      	lsls	r3, r3, #26
 8008d40:	d502      	bpl.n	8008d48 <_printf_common+0x30>
 8008d42:	682b      	ldr	r3, [r5, #0]
 8008d44:	3302      	adds	r3, #2
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	2306      	movs	r3, #6
 8008d4c:	0017      	movs	r7, r2
 8008d4e:	401f      	ands	r7, r3
 8008d50:	421a      	tst	r2, r3
 8008d52:	d027      	beq.n	8008da4 <_printf_common+0x8c>
 8008d54:	0023      	movs	r3, r4
 8008d56:	3343      	adds	r3, #67	; 0x43
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	1e5a      	subs	r2, r3, #1
 8008d5c:	4193      	sbcs	r3, r2
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	0692      	lsls	r2, r2, #26
 8008d62:	d430      	bmi.n	8008dc6 <_printf_common+0xae>
 8008d64:	0022      	movs	r2, r4
 8008d66:	9901      	ldr	r1, [sp, #4]
 8008d68:	9800      	ldr	r0, [sp, #0]
 8008d6a:	9e08      	ldr	r6, [sp, #32]
 8008d6c:	3243      	adds	r2, #67	; 0x43
 8008d6e:	47b0      	blx	r6
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d025      	beq.n	8008dc0 <_printf_common+0xa8>
 8008d74:	2306      	movs	r3, #6
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	682a      	ldr	r2, [r5, #0]
 8008d7a:	68e1      	ldr	r1, [r4, #12]
 8008d7c:	2500      	movs	r5, #0
 8008d7e:	4003      	ands	r3, r0
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d103      	bne.n	8008d8c <_printf_common+0x74>
 8008d84:	1a8d      	subs	r5, r1, r2
 8008d86:	43eb      	mvns	r3, r5
 8008d88:	17db      	asrs	r3, r3, #31
 8008d8a:	401d      	ands	r5, r3
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	6922      	ldr	r2, [r4, #16]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	dd01      	ble.n	8008d98 <_printf_common+0x80>
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	18ed      	adds	r5, r5, r3
 8008d98:	2700      	movs	r7, #0
 8008d9a:	42bd      	cmp	r5, r7
 8008d9c:	d120      	bne.n	8008de0 <_printf_common+0xc8>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e010      	b.n	8008dc4 <_printf_common+0xac>
 8008da2:	3701      	adds	r7, #1
 8008da4:	68e3      	ldr	r3, [r4, #12]
 8008da6:	682a      	ldr	r2, [r5, #0]
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	42bb      	cmp	r3, r7
 8008dac:	ddd2      	ble.n	8008d54 <_printf_common+0x3c>
 8008dae:	0022      	movs	r2, r4
 8008db0:	2301      	movs	r3, #1
 8008db2:	9901      	ldr	r1, [sp, #4]
 8008db4:	9800      	ldr	r0, [sp, #0]
 8008db6:	9e08      	ldr	r6, [sp, #32]
 8008db8:	3219      	adds	r2, #25
 8008dba:	47b0      	blx	r6
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d1f0      	bne.n	8008da2 <_printf_common+0x8a>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	4240      	negs	r0, r0
 8008dc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008dc6:	2030      	movs	r0, #48	; 0x30
 8008dc8:	18e1      	adds	r1, r4, r3
 8008dca:	3143      	adds	r1, #67	; 0x43
 8008dcc:	7008      	strb	r0, [r1, #0]
 8008dce:	0021      	movs	r1, r4
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	3145      	adds	r1, #69	; 0x45
 8008dd4:	7809      	ldrb	r1, [r1, #0]
 8008dd6:	18a2      	adds	r2, r4, r2
 8008dd8:	3243      	adds	r2, #67	; 0x43
 8008dda:	3302      	adds	r3, #2
 8008ddc:	7011      	strb	r1, [r2, #0]
 8008dde:	e7c1      	b.n	8008d64 <_printf_common+0x4c>
 8008de0:	0022      	movs	r2, r4
 8008de2:	2301      	movs	r3, #1
 8008de4:	9901      	ldr	r1, [sp, #4]
 8008de6:	9800      	ldr	r0, [sp, #0]
 8008de8:	9e08      	ldr	r6, [sp, #32]
 8008dea:	321a      	adds	r2, #26
 8008dec:	47b0      	blx	r6
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d0e6      	beq.n	8008dc0 <_printf_common+0xa8>
 8008df2:	3701      	adds	r7, #1
 8008df4:	e7d1      	b.n	8008d9a <_printf_common+0x82>
	...

08008df8 <_printf_i>:
 8008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfa:	b08b      	sub	sp, #44	; 0x2c
 8008dfc:	9206      	str	r2, [sp, #24]
 8008dfe:	000a      	movs	r2, r1
 8008e00:	3243      	adds	r2, #67	; 0x43
 8008e02:	9307      	str	r3, [sp, #28]
 8008e04:	9005      	str	r0, [sp, #20]
 8008e06:	9204      	str	r2, [sp, #16]
 8008e08:	7e0a      	ldrb	r2, [r1, #24]
 8008e0a:	000c      	movs	r4, r1
 8008e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e0e:	2a78      	cmp	r2, #120	; 0x78
 8008e10:	d806      	bhi.n	8008e20 <_printf_i+0x28>
 8008e12:	2a62      	cmp	r2, #98	; 0x62
 8008e14:	d808      	bhi.n	8008e28 <_printf_i+0x30>
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	d100      	bne.n	8008e1c <_printf_i+0x24>
 8008e1a:	e0c0      	b.n	8008f9e <_printf_i+0x1a6>
 8008e1c:	2a58      	cmp	r2, #88	; 0x58
 8008e1e:	d052      	beq.n	8008ec6 <_printf_i+0xce>
 8008e20:	0026      	movs	r6, r4
 8008e22:	3642      	adds	r6, #66	; 0x42
 8008e24:	7032      	strb	r2, [r6, #0]
 8008e26:	e022      	b.n	8008e6e <_printf_i+0x76>
 8008e28:	0010      	movs	r0, r2
 8008e2a:	3863      	subs	r0, #99	; 0x63
 8008e2c:	2815      	cmp	r0, #21
 8008e2e:	d8f7      	bhi.n	8008e20 <_printf_i+0x28>
 8008e30:	f7f7 f986 	bl	8000140 <__gnu_thumb1_case_shi>
 8008e34:	001f0016 	.word	0x001f0016
 8008e38:	fff6fff6 	.word	0xfff6fff6
 8008e3c:	fff6fff6 	.word	0xfff6fff6
 8008e40:	fff6001f 	.word	0xfff6001f
 8008e44:	fff6fff6 	.word	0xfff6fff6
 8008e48:	00a8fff6 	.word	0x00a8fff6
 8008e4c:	009a0036 	.word	0x009a0036
 8008e50:	fff6fff6 	.word	0xfff6fff6
 8008e54:	fff600b9 	.word	0xfff600b9
 8008e58:	fff60036 	.word	0xfff60036
 8008e5c:	009efff6 	.word	0x009efff6
 8008e60:	0026      	movs	r6, r4
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	3642      	adds	r6, #66	; 0x42
 8008e66:	1d11      	adds	r1, r2, #4
 8008e68:	6019      	str	r1, [r3, #0]
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	7033      	strb	r3, [r6, #0]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e0a7      	b.n	8008fc2 <_printf_i+0x1ca>
 8008e72:	6808      	ldr	r0, [r1, #0]
 8008e74:	6819      	ldr	r1, [r3, #0]
 8008e76:	1d0a      	adds	r2, r1, #4
 8008e78:	0605      	lsls	r5, r0, #24
 8008e7a:	d50b      	bpl.n	8008e94 <_printf_i+0x9c>
 8008e7c:	680d      	ldr	r5, [r1, #0]
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	2d00      	cmp	r5, #0
 8008e82:	da03      	bge.n	8008e8c <_printf_i+0x94>
 8008e84:	232d      	movs	r3, #45	; 0x2d
 8008e86:	9a04      	ldr	r2, [sp, #16]
 8008e88:	426d      	negs	r5, r5
 8008e8a:	7013      	strb	r3, [r2, #0]
 8008e8c:	4b61      	ldr	r3, [pc, #388]	; (8009014 <_printf_i+0x21c>)
 8008e8e:	270a      	movs	r7, #10
 8008e90:	9303      	str	r3, [sp, #12]
 8008e92:	e032      	b.n	8008efa <_printf_i+0x102>
 8008e94:	680d      	ldr	r5, [r1, #0]
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	0641      	lsls	r1, r0, #25
 8008e9a:	d5f1      	bpl.n	8008e80 <_printf_i+0x88>
 8008e9c:	b22d      	sxth	r5, r5
 8008e9e:	e7ef      	b.n	8008e80 <_printf_i+0x88>
 8008ea0:	680d      	ldr	r5, [r1, #0]
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	1d08      	adds	r0, r1, #4
 8008ea6:	6018      	str	r0, [r3, #0]
 8008ea8:	062e      	lsls	r6, r5, #24
 8008eaa:	d501      	bpl.n	8008eb0 <_printf_i+0xb8>
 8008eac:	680d      	ldr	r5, [r1, #0]
 8008eae:	e003      	b.n	8008eb8 <_printf_i+0xc0>
 8008eb0:	066d      	lsls	r5, r5, #25
 8008eb2:	d5fb      	bpl.n	8008eac <_printf_i+0xb4>
 8008eb4:	680d      	ldr	r5, [r1, #0]
 8008eb6:	b2ad      	uxth	r5, r5
 8008eb8:	4b56      	ldr	r3, [pc, #344]	; (8009014 <_printf_i+0x21c>)
 8008eba:	270a      	movs	r7, #10
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	2a6f      	cmp	r2, #111	; 0x6f
 8008ec0:	d117      	bne.n	8008ef2 <_printf_i+0xfa>
 8008ec2:	2708      	movs	r7, #8
 8008ec4:	e015      	b.n	8008ef2 <_printf_i+0xfa>
 8008ec6:	3145      	adds	r1, #69	; 0x45
 8008ec8:	700a      	strb	r2, [r1, #0]
 8008eca:	4a52      	ldr	r2, [pc, #328]	; (8009014 <_printf_i+0x21c>)
 8008ecc:	9203      	str	r2, [sp, #12]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	6821      	ldr	r1, [r4, #0]
 8008ed2:	ca20      	ldmia	r2!, {r5}
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	0608      	lsls	r0, r1, #24
 8008ed8:	d550      	bpl.n	8008f7c <_printf_i+0x184>
 8008eda:	07cb      	lsls	r3, r1, #31
 8008edc:	d502      	bpl.n	8008ee4 <_printf_i+0xec>
 8008ede:	2320      	movs	r3, #32
 8008ee0:	4319      	orrs	r1, r3
 8008ee2:	6021      	str	r1, [r4, #0]
 8008ee4:	2710      	movs	r7, #16
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	d103      	bne.n	8008ef2 <_printf_i+0xfa>
 8008eea:	2320      	movs	r3, #32
 8008eec:	6822      	ldr	r2, [r4, #0]
 8008eee:	439a      	bics	r2, r3
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	0023      	movs	r3, r4
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	3343      	adds	r3, #67	; 0x43
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	6863      	ldr	r3, [r4, #4]
 8008efc:	60a3      	str	r3, [r4, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	db03      	blt.n	8008f0a <_printf_i+0x112>
 8008f02:	2204      	movs	r2, #4
 8008f04:	6821      	ldr	r1, [r4, #0]
 8008f06:	4391      	bics	r1, r2
 8008f08:	6021      	str	r1, [r4, #0]
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	d102      	bne.n	8008f14 <_printf_i+0x11c>
 8008f0e:	9e04      	ldr	r6, [sp, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00c      	beq.n	8008f2e <_printf_i+0x136>
 8008f14:	9e04      	ldr	r6, [sp, #16]
 8008f16:	0028      	movs	r0, r5
 8008f18:	0039      	movs	r1, r7
 8008f1a:	f7f7 f9a1 	bl	8000260 <__aeabi_uidivmod>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	3e01      	subs	r6, #1
 8008f22:	5c5b      	ldrb	r3, [r3, r1]
 8008f24:	7033      	strb	r3, [r6, #0]
 8008f26:	002b      	movs	r3, r5
 8008f28:	0005      	movs	r5, r0
 8008f2a:	429f      	cmp	r7, r3
 8008f2c:	d9f3      	bls.n	8008f16 <_printf_i+0x11e>
 8008f2e:	2f08      	cmp	r7, #8
 8008f30:	d109      	bne.n	8008f46 <_printf_i+0x14e>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	07db      	lsls	r3, r3, #31
 8008f36:	d506      	bpl.n	8008f46 <_printf_i+0x14e>
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	6922      	ldr	r2, [r4, #16]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	dc02      	bgt.n	8008f46 <_printf_i+0x14e>
 8008f40:	2330      	movs	r3, #48	; 0x30
 8008f42:	3e01      	subs	r6, #1
 8008f44:	7033      	strb	r3, [r6, #0]
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	0021      	movs	r1, r4
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	9805      	ldr	r0, [sp, #20]
 8008f54:	9b06      	ldr	r3, [sp, #24]
 8008f56:	aa09      	add	r2, sp, #36	; 0x24
 8008f58:	f7ff fede 	bl	8008d18 <_printf_common>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d135      	bne.n	8008fcc <_printf_i+0x1d4>
 8008f60:	2001      	movs	r0, #1
 8008f62:	4240      	negs	r0, r0
 8008f64:	b00b      	add	sp, #44	; 0x2c
 8008f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f68:	2220      	movs	r2, #32
 8008f6a:	6809      	ldr	r1, [r1, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	0022      	movs	r2, r4
 8008f72:	2178      	movs	r1, #120	; 0x78
 8008f74:	3245      	adds	r2, #69	; 0x45
 8008f76:	7011      	strb	r1, [r2, #0]
 8008f78:	4a27      	ldr	r2, [pc, #156]	; (8009018 <_printf_i+0x220>)
 8008f7a:	e7a7      	b.n	8008ecc <_printf_i+0xd4>
 8008f7c:	0648      	lsls	r0, r1, #25
 8008f7e:	d5ac      	bpl.n	8008eda <_printf_i+0xe2>
 8008f80:	b2ad      	uxth	r5, r5
 8008f82:	e7aa      	b.n	8008eda <_printf_i+0xe2>
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	680d      	ldr	r5, [r1, #0]
 8008f88:	1d10      	adds	r0, r2, #4
 8008f8a:	6949      	ldr	r1, [r1, #20]
 8008f8c:	6018      	str	r0, [r3, #0]
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	062e      	lsls	r6, r5, #24
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0x1a0>
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <_printf_i+0x1a6>
 8008f98:	066d      	lsls	r5, r5, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0x19c>
 8008f9c:	8019      	strh	r1, [r3, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9e04      	ldr	r6, [sp, #16]
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	e7d2      	b.n	8008f4c <_printf_i+0x154>
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	1d11      	adds	r1, r2, #4
 8008faa:	6019      	str	r1, [r3, #0]
 8008fac:	6816      	ldr	r6, [r2, #0]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	0030      	movs	r0, r6
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	f002 fc28 	bl	800b808 <memchr>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d001      	beq.n	8008fc0 <_printf_i+0x1c8>
 8008fbc:	1b80      	subs	r0, r0, r6
 8008fbe:	6060      	str	r0, [r4, #4]
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	6123      	str	r3, [r4, #16]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	7013      	strb	r3, [r2, #0]
 8008fca:	e7bf      	b.n	8008f4c <_printf_i+0x154>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	0032      	movs	r2, r6
 8008fd0:	9906      	ldr	r1, [sp, #24]
 8008fd2:	9805      	ldr	r0, [sp, #20]
 8008fd4:	9d07      	ldr	r5, [sp, #28]
 8008fd6:	47a8      	blx	r5
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d0c1      	beq.n	8008f60 <_printf_i+0x168>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	079b      	lsls	r3, r3, #30
 8008fe0:	d415      	bmi.n	800900e <_printf_i+0x216>
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	68e0      	ldr	r0, [r4, #12]
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	dabc      	bge.n	8008f64 <_printf_i+0x16c>
 8008fea:	0018      	movs	r0, r3
 8008fec:	e7ba      	b.n	8008f64 <_printf_i+0x16c>
 8008fee:	0022      	movs	r2, r4
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	9906      	ldr	r1, [sp, #24]
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	9e07      	ldr	r6, [sp, #28]
 8008ff8:	3219      	adds	r2, #25
 8008ffa:	47b0      	blx	r6
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d0af      	beq.n	8008f60 <_printf_i+0x168>
 8009000:	3501      	adds	r5, #1
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ab      	cmp	r3, r5
 800900a:	dcf0      	bgt.n	8008fee <_printf_i+0x1f6>
 800900c:	e7e9      	b.n	8008fe2 <_printf_i+0x1ea>
 800900e:	2500      	movs	r5, #0
 8009010:	e7f7      	b.n	8009002 <_printf_i+0x20a>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	0800db38 	.word	0x0800db38
 8009018:	0800db49 	.word	0x0800db49

0800901c <_scanf_float>:
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	b08b      	sub	sp, #44	; 0x2c
 8009020:	0015      	movs	r5, r2
 8009022:	9001      	str	r0, [sp, #4]
 8009024:	22ae      	movs	r2, #174	; 0xae
 8009026:	2000      	movs	r0, #0
 8009028:	9306      	str	r3, [sp, #24]
 800902a:	688b      	ldr	r3, [r1, #8]
 800902c:	000e      	movs	r6, r1
 800902e:	1e59      	subs	r1, r3, #1
 8009030:	0052      	lsls	r2, r2, #1
 8009032:	9005      	str	r0, [sp, #20]
 8009034:	4291      	cmp	r1, r2
 8009036:	d905      	bls.n	8009044 <_scanf_float+0x28>
 8009038:	3b5e      	subs	r3, #94	; 0x5e
 800903a:	3bff      	subs	r3, #255	; 0xff
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	235e      	movs	r3, #94	; 0x5e
 8009040:	33ff      	adds	r3, #255	; 0xff
 8009042:	60b3      	str	r3, [r6, #8]
 8009044:	23f0      	movs	r3, #240	; 0xf0
 8009046:	6832      	ldr	r2, [r6, #0]
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	4313      	orrs	r3, r2
 800904c:	6033      	str	r3, [r6, #0]
 800904e:	0033      	movs	r3, r6
 8009050:	2400      	movs	r4, #0
 8009052:	331c      	adds	r3, #28
 8009054:	001f      	movs	r7, r3
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	9402      	str	r4, [sp, #8]
 800905a:	9408      	str	r4, [sp, #32]
 800905c:	9407      	str	r4, [sp, #28]
 800905e:	9400      	str	r4, [sp, #0]
 8009060:	9404      	str	r4, [sp, #16]
 8009062:	68b2      	ldr	r2, [r6, #8]
 8009064:	2a00      	cmp	r2, #0
 8009066:	d00a      	beq.n	800907e <_scanf_float+0x62>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b4e      	cmp	r3, #78	; 0x4e
 800906e:	d844      	bhi.n	80090fa <_scanf_float+0xde>
 8009070:	0018      	movs	r0, r3
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d82c      	bhi.n	80090d0 <_scanf_float+0xb4>
 8009076:	382b      	subs	r0, #43	; 0x2b
 8009078:	b2c1      	uxtb	r1, r0
 800907a:	290e      	cmp	r1, #14
 800907c:	d92a      	bls.n	80090d4 <_scanf_float+0xb8>
 800907e:	9b00      	ldr	r3, [sp, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <_scanf_float+0x70>
 8009084:	6832      	ldr	r2, [r6, #0]
 8009086:	4ba4      	ldr	r3, [pc, #656]	; (8009318 <_scanf_float+0x2fc>)
 8009088:	4013      	ands	r3, r2
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	9b02      	ldr	r3, [sp, #8]
 800908e:	3b01      	subs	r3, #1
 8009090:	2b01      	cmp	r3, #1
 8009092:	d900      	bls.n	8009096 <_scanf_float+0x7a>
 8009094:	e0f9      	b.n	800928a <_scanf_float+0x26e>
 8009096:	24be      	movs	r4, #190	; 0xbe
 8009098:	0064      	lsls	r4, r4, #1
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	429f      	cmp	r7, r3
 800909e:	d900      	bls.n	80090a2 <_scanf_float+0x86>
 80090a0:	e0e9      	b.n	8009276 <_scanf_float+0x25a>
 80090a2:	2301      	movs	r3, #1
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	e185      	b.n	80093b4 <_scanf_float+0x398>
 80090a8:	0018      	movs	r0, r3
 80090aa:	3861      	subs	r0, #97	; 0x61
 80090ac:	280d      	cmp	r0, #13
 80090ae:	d8e6      	bhi.n	800907e <_scanf_float+0x62>
 80090b0:	f7f7 f846 	bl	8000140 <__gnu_thumb1_case_shi>
 80090b4:	ffe50083 	.word	0xffe50083
 80090b8:	ffe5ffe5 	.word	0xffe5ffe5
 80090bc:	00a200b6 	.word	0x00a200b6
 80090c0:	ffe5ffe5 	.word	0xffe5ffe5
 80090c4:	ffe50089 	.word	0xffe50089
 80090c8:	ffe5ffe5 	.word	0xffe5ffe5
 80090cc:	0065ffe5 	.word	0x0065ffe5
 80090d0:	3841      	subs	r0, #65	; 0x41
 80090d2:	e7eb      	b.n	80090ac <_scanf_float+0x90>
 80090d4:	280e      	cmp	r0, #14
 80090d6:	d8d2      	bhi.n	800907e <_scanf_float+0x62>
 80090d8:	f7f7 f832 	bl	8000140 <__gnu_thumb1_case_shi>
 80090dc:	ffd1004b 	.word	0xffd1004b
 80090e0:	0098004b 	.word	0x0098004b
 80090e4:	0020ffd1 	.word	0x0020ffd1
 80090e8:	00400040 	.word	0x00400040
 80090ec:	00400040 	.word	0x00400040
 80090f0:	00400040 	.word	0x00400040
 80090f4:	00400040 	.word	0x00400040
 80090f8:	0040      	.short	0x0040
 80090fa:	2b6e      	cmp	r3, #110	; 0x6e
 80090fc:	d809      	bhi.n	8009112 <_scanf_float+0xf6>
 80090fe:	2b60      	cmp	r3, #96	; 0x60
 8009100:	d8d2      	bhi.n	80090a8 <_scanf_float+0x8c>
 8009102:	2b54      	cmp	r3, #84	; 0x54
 8009104:	d07d      	beq.n	8009202 <_scanf_float+0x1e6>
 8009106:	2b59      	cmp	r3, #89	; 0x59
 8009108:	d1b9      	bne.n	800907e <_scanf_float+0x62>
 800910a:	2c07      	cmp	r4, #7
 800910c:	d1b7      	bne.n	800907e <_scanf_float+0x62>
 800910e:	2408      	movs	r4, #8
 8009110:	e02c      	b.n	800916c <_scanf_float+0x150>
 8009112:	2b74      	cmp	r3, #116	; 0x74
 8009114:	d075      	beq.n	8009202 <_scanf_float+0x1e6>
 8009116:	2b79      	cmp	r3, #121	; 0x79
 8009118:	d0f7      	beq.n	800910a <_scanf_float+0xee>
 800911a:	e7b0      	b.n	800907e <_scanf_float+0x62>
 800911c:	6831      	ldr	r1, [r6, #0]
 800911e:	05c8      	lsls	r0, r1, #23
 8009120:	d51c      	bpl.n	800915c <_scanf_float+0x140>
 8009122:	2380      	movs	r3, #128	; 0x80
 8009124:	4399      	bics	r1, r3
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	6031      	str	r1, [r6, #0]
 800912a:	3301      	adds	r3, #1
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	9b05      	ldr	r3, [sp, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <_scanf_float+0x120>
 8009134:	3b01      	subs	r3, #1
 8009136:	3201      	adds	r2, #1
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	60b2      	str	r2, [r6, #8]
 800913c:	68b3      	ldr	r3, [r6, #8]
 800913e:	3b01      	subs	r3, #1
 8009140:	60b3      	str	r3, [r6, #8]
 8009142:	6933      	ldr	r3, [r6, #16]
 8009144:	3301      	adds	r3, #1
 8009146:	6133      	str	r3, [r6, #16]
 8009148:	686b      	ldr	r3, [r5, #4]
 800914a:	3b01      	subs	r3, #1
 800914c:	606b      	str	r3, [r5, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	dc00      	bgt.n	8009154 <_scanf_float+0x138>
 8009152:	e086      	b.n	8009262 <_scanf_float+0x246>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	602b      	str	r3, [r5, #0]
 800915a:	e782      	b.n	8009062 <_scanf_float+0x46>
 800915c:	9a02      	ldr	r2, [sp, #8]
 800915e:	1912      	adds	r2, r2, r4
 8009160:	2a00      	cmp	r2, #0
 8009162:	d18c      	bne.n	800907e <_scanf_float+0x62>
 8009164:	4a6d      	ldr	r2, [pc, #436]	; (800931c <_scanf_float+0x300>)
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	400a      	ands	r2, r1
 800916a:	6032      	str	r2, [r6, #0]
 800916c:	703b      	strb	r3, [r7, #0]
 800916e:	3701      	adds	r7, #1
 8009170:	e7e4      	b.n	800913c <_scanf_float+0x120>
 8009172:	2180      	movs	r1, #128	; 0x80
 8009174:	6832      	ldr	r2, [r6, #0]
 8009176:	420a      	tst	r2, r1
 8009178:	d081      	beq.n	800907e <_scanf_float+0x62>
 800917a:	438a      	bics	r2, r1
 800917c:	e7f5      	b.n	800916a <_scanf_float+0x14e>
 800917e:	9a02      	ldr	r2, [sp, #8]
 8009180:	2a00      	cmp	r2, #0
 8009182:	d10f      	bne.n	80091a4 <_scanf_float+0x188>
 8009184:	9a00      	ldr	r2, [sp, #0]
 8009186:	2a00      	cmp	r2, #0
 8009188:	d10f      	bne.n	80091aa <_scanf_float+0x18e>
 800918a:	6832      	ldr	r2, [r6, #0]
 800918c:	21e0      	movs	r1, #224	; 0xe0
 800918e:	0010      	movs	r0, r2
 8009190:	00c9      	lsls	r1, r1, #3
 8009192:	4008      	ands	r0, r1
 8009194:	4288      	cmp	r0, r1
 8009196:	d108      	bne.n	80091aa <_scanf_float+0x18e>
 8009198:	4961      	ldr	r1, [pc, #388]	; (8009320 <_scanf_float+0x304>)
 800919a:	400a      	ands	r2, r1
 800919c:	6032      	str	r2, [r6, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	9202      	str	r2, [sp, #8]
 80091a2:	e7e3      	b.n	800916c <_scanf_float+0x150>
 80091a4:	9a02      	ldr	r2, [sp, #8]
 80091a6:	2a02      	cmp	r2, #2
 80091a8:	d059      	beq.n	800925e <_scanf_float+0x242>
 80091aa:	2c01      	cmp	r4, #1
 80091ac:	d002      	beq.n	80091b4 <_scanf_float+0x198>
 80091ae:	2c04      	cmp	r4, #4
 80091b0:	d000      	beq.n	80091b4 <_scanf_float+0x198>
 80091b2:	e764      	b.n	800907e <_scanf_float+0x62>
 80091b4:	3401      	adds	r4, #1
 80091b6:	b2e4      	uxtb	r4, r4
 80091b8:	e7d8      	b.n	800916c <_scanf_float+0x150>
 80091ba:	9a02      	ldr	r2, [sp, #8]
 80091bc:	2a01      	cmp	r2, #1
 80091be:	d000      	beq.n	80091c2 <_scanf_float+0x1a6>
 80091c0:	e75d      	b.n	800907e <_scanf_float+0x62>
 80091c2:	2202      	movs	r2, #2
 80091c4:	e7ec      	b.n	80091a0 <_scanf_float+0x184>
 80091c6:	2c00      	cmp	r4, #0
 80091c8:	d110      	bne.n	80091ec <_scanf_float+0x1d0>
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d000      	beq.n	80091d2 <_scanf_float+0x1b6>
 80091d0:	e758      	b.n	8009084 <_scanf_float+0x68>
 80091d2:	6832      	ldr	r2, [r6, #0]
 80091d4:	21e0      	movs	r1, #224	; 0xe0
 80091d6:	0010      	movs	r0, r2
 80091d8:	00c9      	lsls	r1, r1, #3
 80091da:	4008      	ands	r0, r1
 80091dc:	4288      	cmp	r0, r1
 80091de:	d000      	beq.n	80091e2 <_scanf_float+0x1c6>
 80091e0:	e754      	b.n	800908c <_scanf_float+0x70>
 80091e2:	494f      	ldr	r1, [pc, #316]	; (8009320 <_scanf_float+0x304>)
 80091e4:	3401      	adds	r4, #1
 80091e6:	400a      	ands	r2, r1
 80091e8:	6032      	str	r2, [r6, #0]
 80091ea:	e7bf      	b.n	800916c <_scanf_float+0x150>
 80091ec:	21fd      	movs	r1, #253	; 0xfd
 80091ee:	1ee2      	subs	r2, r4, #3
 80091f0:	420a      	tst	r2, r1
 80091f2:	d000      	beq.n	80091f6 <_scanf_float+0x1da>
 80091f4:	e743      	b.n	800907e <_scanf_float+0x62>
 80091f6:	e7dd      	b.n	80091b4 <_scanf_float+0x198>
 80091f8:	2c02      	cmp	r4, #2
 80091fa:	d000      	beq.n	80091fe <_scanf_float+0x1e2>
 80091fc:	e73f      	b.n	800907e <_scanf_float+0x62>
 80091fe:	2403      	movs	r4, #3
 8009200:	e7b4      	b.n	800916c <_scanf_float+0x150>
 8009202:	2c06      	cmp	r4, #6
 8009204:	d000      	beq.n	8009208 <_scanf_float+0x1ec>
 8009206:	e73a      	b.n	800907e <_scanf_float+0x62>
 8009208:	2407      	movs	r4, #7
 800920a:	e7af      	b.n	800916c <_scanf_float+0x150>
 800920c:	6832      	ldr	r2, [r6, #0]
 800920e:	0591      	lsls	r1, r2, #22
 8009210:	d400      	bmi.n	8009214 <_scanf_float+0x1f8>
 8009212:	e734      	b.n	800907e <_scanf_float+0x62>
 8009214:	4943      	ldr	r1, [pc, #268]	; (8009324 <_scanf_float+0x308>)
 8009216:	400a      	ands	r2, r1
 8009218:	6032      	str	r2, [r6, #0]
 800921a:	9a00      	ldr	r2, [sp, #0]
 800921c:	9204      	str	r2, [sp, #16]
 800921e:	e7a5      	b.n	800916c <_scanf_float+0x150>
 8009220:	21a0      	movs	r1, #160	; 0xa0
 8009222:	2080      	movs	r0, #128	; 0x80
 8009224:	6832      	ldr	r2, [r6, #0]
 8009226:	00c9      	lsls	r1, r1, #3
 8009228:	4011      	ands	r1, r2
 800922a:	00c0      	lsls	r0, r0, #3
 800922c:	4281      	cmp	r1, r0
 800922e:	d006      	beq.n	800923e <_scanf_float+0x222>
 8009230:	4202      	tst	r2, r0
 8009232:	d100      	bne.n	8009236 <_scanf_float+0x21a>
 8009234:	e723      	b.n	800907e <_scanf_float+0x62>
 8009236:	9900      	ldr	r1, [sp, #0]
 8009238:	2900      	cmp	r1, #0
 800923a:	d100      	bne.n	800923e <_scanf_float+0x222>
 800923c:	e726      	b.n	800908c <_scanf_float+0x70>
 800923e:	0591      	lsls	r1, r2, #22
 8009240:	d404      	bmi.n	800924c <_scanf_float+0x230>
 8009242:	9900      	ldr	r1, [sp, #0]
 8009244:	9804      	ldr	r0, [sp, #16]
 8009246:	9708      	str	r7, [sp, #32]
 8009248:	1a09      	subs	r1, r1, r0
 800924a:	9107      	str	r1, [sp, #28]
 800924c:	4934      	ldr	r1, [pc, #208]	; (8009320 <_scanf_float+0x304>)
 800924e:	400a      	ands	r2, r1
 8009250:	21c0      	movs	r1, #192	; 0xc0
 8009252:	0049      	lsls	r1, r1, #1
 8009254:	430a      	orrs	r2, r1
 8009256:	6032      	str	r2, [r6, #0]
 8009258:	2200      	movs	r2, #0
 800925a:	9200      	str	r2, [sp, #0]
 800925c:	e786      	b.n	800916c <_scanf_float+0x150>
 800925e:	2203      	movs	r2, #3
 8009260:	e79e      	b.n	80091a0 <_scanf_float+0x184>
 8009262:	23c0      	movs	r3, #192	; 0xc0
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	0029      	movs	r1, r5
 8009268:	58f3      	ldr	r3, [r6, r3]
 800926a:	9801      	ldr	r0, [sp, #4]
 800926c:	4798      	blx	r3
 800926e:	2800      	cmp	r0, #0
 8009270:	d100      	bne.n	8009274 <_scanf_float+0x258>
 8009272:	e6f6      	b.n	8009062 <_scanf_float+0x46>
 8009274:	e703      	b.n	800907e <_scanf_float+0x62>
 8009276:	3f01      	subs	r7, #1
 8009278:	5933      	ldr	r3, [r6, r4]
 800927a:	002a      	movs	r2, r5
 800927c:	7839      	ldrb	r1, [r7, #0]
 800927e:	9801      	ldr	r0, [sp, #4]
 8009280:	4798      	blx	r3
 8009282:	6933      	ldr	r3, [r6, #16]
 8009284:	3b01      	subs	r3, #1
 8009286:	6133      	str	r3, [r6, #16]
 8009288:	e707      	b.n	800909a <_scanf_float+0x7e>
 800928a:	1e63      	subs	r3, r4, #1
 800928c:	2b06      	cmp	r3, #6
 800928e:	d80e      	bhi.n	80092ae <_scanf_float+0x292>
 8009290:	9702      	str	r7, [sp, #8]
 8009292:	2c02      	cmp	r4, #2
 8009294:	d920      	bls.n	80092d8 <_scanf_float+0x2bc>
 8009296:	1be3      	subs	r3, r4, r7
 8009298:	b2db      	uxtb	r3, r3
 800929a:	9305      	str	r3, [sp, #20]
 800929c:	9b02      	ldr	r3, [sp, #8]
 800929e:	9a05      	ldr	r2, [sp, #20]
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d827      	bhi.n	80092f8 <_scanf_float+0x2dc>
 80092a8:	3c03      	subs	r4, #3
 80092aa:	b2e4      	uxtb	r4, r4
 80092ac:	1b3f      	subs	r7, r7, r4
 80092ae:	6833      	ldr	r3, [r6, #0]
 80092b0:	05da      	lsls	r2, r3, #23
 80092b2:	d554      	bpl.n	800935e <_scanf_float+0x342>
 80092b4:	055b      	lsls	r3, r3, #21
 80092b6:	d537      	bpl.n	8009328 <_scanf_float+0x30c>
 80092b8:	24be      	movs	r4, #190	; 0xbe
 80092ba:	0064      	lsls	r4, r4, #1
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	429f      	cmp	r7, r3
 80092c0:	d800      	bhi.n	80092c4 <_scanf_float+0x2a8>
 80092c2:	e6ee      	b.n	80090a2 <_scanf_float+0x86>
 80092c4:	3f01      	subs	r7, #1
 80092c6:	5933      	ldr	r3, [r6, r4]
 80092c8:	002a      	movs	r2, r5
 80092ca:	7839      	ldrb	r1, [r7, #0]
 80092cc:	9801      	ldr	r0, [sp, #4]
 80092ce:	4798      	blx	r3
 80092d0:	6933      	ldr	r3, [r6, #16]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	6133      	str	r3, [r6, #16]
 80092d6:	e7f1      	b.n	80092bc <_scanf_float+0x2a0>
 80092d8:	24be      	movs	r4, #190	; 0xbe
 80092da:	0064      	lsls	r4, r4, #1
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	429f      	cmp	r7, r3
 80092e0:	d800      	bhi.n	80092e4 <_scanf_float+0x2c8>
 80092e2:	e6de      	b.n	80090a2 <_scanf_float+0x86>
 80092e4:	3f01      	subs	r7, #1
 80092e6:	5933      	ldr	r3, [r6, r4]
 80092e8:	002a      	movs	r2, r5
 80092ea:	7839      	ldrb	r1, [r7, #0]
 80092ec:	9801      	ldr	r0, [sp, #4]
 80092ee:	4798      	blx	r3
 80092f0:	6933      	ldr	r3, [r6, #16]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	6133      	str	r3, [r6, #16]
 80092f6:	e7f1      	b.n	80092dc <_scanf_float+0x2c0>
 80092f8:	9b02      	ldr	r3, [sp, #8]
 80092fa:	002a      	movs	r2, r5
 80092fc:	3b01      	subs	r3, #1
 80092fe:	7819      	ldrb	r1, [r3, #0]
 8009300:	9302      	str	r3, [sp, #8]
 8009302:	23be      	movs	r3, #190	; 0xbe
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	58f3      	ldr	r3, [r6, r3]
 8009308:	9801      	ldr	r0, [sp, #4]
 800930a:	9309      	str	r3, [sp, #36]	; 0x24
 800930c:	4798      	blx	r3
 800930e:	6933      	ldr	r3, [r6, #16]
 8009310:	3b01      	subs	r3, #1
 8009312:	6133      	str	r3, [r6, #16]
 8009314:	e7c2      	b.n	800929c <_scanf_float+0x280>
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	fffffeff 	.word	0xfffffeff
 800931c:	fffffe7f 	.word	0xfffffe7f
 8009320:	fffff87f 	.word	0xfffff87f
 8009324:	fffffd7f 	.word	0xfffffd7f
 8009328:	6933      	ldr	r3, [r6, #16]
 800932a:	1e7c      	subs	r4, r7, #1
 800932c:	7821      	ldrb	r1, [r4, #0]
 800932e:	3b01      	subs	r3, #1
 8009330:	6133      	str	r3, [r6, #16]
 8009332:	2965      	cmp	r1, #101	; 0x65
 8009334:	d00c      	beq.n	8009350 <_scanf_float+0x334>
 8009336:	2945      	cmp	r1, #69	; 0x45
 8009338:	d00a      	beq.n	8009350 <_scanf_float+0x334>
 800933a:	23be      	movs	r3, #190	; 0xbe
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	58f3      	ldr	r3, [r6, r3]
 8009340:	002a      	movs	r2, r5
 8009342:	9801      	ldr	r0, [sp, #4]
 8009344:	4798      	blx	r3
 8009346:	6933      	ldr	r3, [r6, #16]
 8009348:	1ebc      	subs	r4, r7, #2
 800934a:	3b01      	subs	r3, #1
 800934c:	7821      	ldrb	r1, [r4, #0]
 800934e:	6133      	str	r3, [r6, #16]
 8009350:	23be      	movs	r3, #190	; 0xbe
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	002a      	movs	r2, r5
 8009356:	58f3      	ldr	r3, [r6, r3]
 8009358:	9801      	ldr	r0, [sp, #4]
 800935a:	4798      	blx	r3
 800935c:	0027      	movs	r7, r4
 800935e:	6832      	ldr	r2, [r6, #0]
 8009360:	2310      	movs	r3, #16
 8009362:	0011      	movs	r1, r2
 8009364:	4019      	ands	r1, r3
 8009366:	9102      	str	r1, [sp, #8]
 8009368:	421a      	tst	r2, r3
 800936a:	d158      	bne.n	800941e <_scanf_float+0x402>
 800936c:	23c0      	movs	r3, #192	; 0xc0
 800936e:	7039      	strb	r1, [r7, #0]
 8009370:	6832      	ldr	r2, [r6, #0]
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	4013      	ands	r3, r2
 8009376:	2280      	movs	r2, #128	; 0x80
 8009378:	00d2      	lsls	r2, r2, #3
 800937a:	4293      	cmp	r3, r2
 800937c:	d11d      	bne.n	80093ba <_scanf_float+0x39e>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	9a00      	ldr	r2, [sp, #0]
 8009382:	9900      	ldr	r1, [sp, #0]
 8009384:	1a9a      	subs	r2, r3, r2
 8009386:	428b      	cmp	r3, r1
 8009388:	d124      	bne.n	80093d4 <_scanf_float+0x3b8>
 800938a:	2200      	movs	r2, #0
 800938c:	9903      	ldr	r1, [sp, #12]
 800938e:	9801      	ldr	r0, [sp, #4]
 8009390:	f000 ff2a 	bl	800a1e8 <_strtod_r>
 8009394:	9b06      	ldr	r3, [sp, #24]
 8009396:	000d      	movs	r5, r1
 8009398:	6831      	ldr	r1, [r6, #0]
 800939a:	0004      	movs	r4, r0
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	078a      	lsls	r2, r1, #30
 80093a0:	d525      	bpl.n	80093ee <_scanf_float+0x3d2>
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	9906      	ldr	r1, [sp, #24]
 80093a6:	600a      	str	r2, [r1, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	601c      	str	r4, [r3, #0]
 80093ac:	605d      	str	r5, [r3, #4]
 80093ae:	68f3      	ldr	r3, [r6, #12]
 80093b0:	3301      	adds	r3, #1
 80093b2:	60f3      	str	r3, [r6, #12]
 80093b4:	9802      	ldr	r0, [sp, #8]
 80093b6:	b00b      	add	sp, #44	; 0x2c
 80093b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ba:	9b07      	ldr	r3, [sp, #28]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0e4      	beq.n	800938a <_scanf_float+0x36e>
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	9a02      	ldr	r2, [sp, #8]
 80093c4:	1c59      	adds	r1, r3, #1
 80093c6:	9801      	ldr	r0, [sp, #4]
 80093c8:	230a      	movs	r3, #10
 80093ca:	f000 ffa3 	bl	800a314 <_strtol_r>
 80093ce:	9b07      	ldr	r3, [sp, #28]
 80093d0:	9f08      	ldr	r7, [sp, #32]
 80093d2:	1ac2      	subs	r2, r0, r3
 80093d4:	0033      	movs	r3, r6
 80093d6:	3370      	adds	r3, #112	; 0x70
 80093d8:	33ff      	adds	r3, #255	; 0xff
 80093da:	429f      	cmp	r7, r3
 80093dc:	d302      	bcc.n	80093e4 <_scanf_float+0x3c8>
 80093de:	0037      	movs	r7, r6
 80093e0:	376f      	adds	r7, #111	; 0x6f
 80093e2:	37ff      	adds	r7, #255	; 0xff
 80093e4:	0038      	movs	r0, r7
 80093e6:	490f      	ldr	r1, [pc, #60]	; (8009424 <_scanf_float+0x408>)
 80093e8:	f000 f824 	bl	8009434 <siprintf>
 80093ec:	e7cd      	b.n	800938a <_scanf_float+0x36e>
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	0749      	lsls	r1, r1, #29
 80093f2:	d4d7      	bmi.n	80093a4 <_scanf_float+0x388>
 80093f4:	9906      	ldr	r1, [sp, #24]
 80093f6:	0020      	movs	r0, r4
 80093f8:	600a      	str	r2, [r1, #0]
 80093fa:	681f      	ldr	r7, [r3, #0]
 80093fc:	0022      	movs	r2, r4
 80093fe:	002b      	movs	r3, r5
 8009400:	0029      	movs	r1, r5
 8009402:	f7f8 fe39 	bl	8002078 <__aeabi_dcmpun>
 8009406:	2800      	cmp	r0, #0
 8009408:	d004      	beq.n	8009414 <_scanf_float+0x3f8>
 800940a:	4807      	ldr	r0, [pc, #28]	; (8009428 <_scanf_float+0x40c>)
 800940c:	f000 f80e 	bl	800942c <nanf>
 8009410:	6038      	str	r0, [r7, #0]
 8009412:	e7cc      	b.n	80093ae <_scanf_float+0x392>
 8009414:	0020      	movs	r0, r4
 8009416:	0029      	movs	r1, r5
 8009418:	f7f8 ff20 	bl	800225c <__aeabi_d2f>
 800941c:	e7f8      	b.n	8009410 <_scanf_float+0x3f4>
 800941e:	2300      	movs	r3, #0
 8009420:	e640      	b.n	80090a4 <_scanf_float+0x88>
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	0800db5a 	.word	0x0800db5a
 8009428:	0800df8b 	.word	0x0800df8b

0800942c <nanf>:
 800942c:	4800      	ldr	r0, [pc, #0]	; (8009430 <nanf+0x4>)
 800942e:	4770      	bx	lr
 8009430:	7fc00000 	.word	0x7fc00000

08009434 <siprintf>:
 8009434:	b40e      	push	{r1, r2, r3}
 8009436:	b500      	push	{lr}
 8009438:	490b      	ldr	r1, [pc, #44]	; (8009468 <siprintf+0x34>)
 800943a:	b09c      	sub	sp, #112	; 0x70
 800943c:	ab1d      	add	r3, sp, #116	; 0x74
 800943e:	9002      	str	r0, [sp, #8]
 8009440:	9006      	str	r0, [sp, #24]
 8009442:	9107      	str	r1, [sp, #28]
 8009444:	9104      	str	r1, [sp, #16]
 8009446:	4809      	ldr	r0, [pc, #36]	; (800946c <siprintf+0x38>)
 8009448:	4909      	ldr	r1, [pc, #36]	; (8009470 <siprintf+0x3c>)
 800944a:	cb04      	ldmia	r3!, {r2}
 800944c:	9105      	str	r1, [sp, #20]
 800944e:	6800      	ldr	r0, [r0, #0]
 8009450:	a902      	add	r1, sp, #8
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	f002 ffce 	bl	800c3f4 <_svfiprintf_r>
 8009458:	2300      	movs	r3, #0
 800945a:	9a02      	ldr	r2, [sp, #8]
 800945c:	7013      	strb	r3, [r2, #0]
 800945e:	b01c      	add	sp, #112	; 0x70
 8009460:	bc08      	pop	{r3}
 8009462:	b003      	add	sp, #12
 8009464:	4718      	bx	r3
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	7fffffff 	.word	0x7fffffff
 800946c:	2000000c 	.word	0x2000000c
 8009470:	ffff0208 	.word	0xffff0208

08009474 <siscanf>:
 8009474:	b40e      	push	{r1, r2, r3}
 8009476:	b530      	push	{r4, r5, lr}
 8009478:	2381      	movs	r3, #129	; 0x81
 800947a:	b09c      	sub	sp, #112	; 0x70
 800947c:	466a      	mov	r2, sp
 800947e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	cc20      	ldmia	r4!, {r5}
 8009484:	8293      	strh	r3, [r2, #20]
 8009486:	9002      	str	r0, [sp, #8]
 8009488:	9006      	str	r0, [sp, #24]
 800948a:	f7f6 fe47 	bl	800011c <strlen>
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <siscanf+0x48>)
 8009490:	466a      	mov	r2, sp
 8009492:	930b      	str	r3, [sp, #44]	; 0x2c
 8009494:	2300      	movs	r3, #0
 8009496:	9003      	str	r0, [sp, #12]
 8009498:	9007      	str	r0, [sp, #28]
 800949a:	4809      	ldr	r0, [pc, #36]	; (80094c0 <siscanf+0x4c>)
 800949c:	930f      	str	r3, [sp, #60]	; 0x3c
 800949e:	9314      	str	r3, [sp, #80]	; 0x50
 80094a0:	3b01      	subs	r3, #1
 80094a2:	82d3      	strh	r3, [r2, #22]
 80094a4:	a902      	add	r1, sp, #8
 80094a6:	0023      	movs	r3, r4
 80094a8:	002a      	movs	r2, r5
 80094aa:	6800      	ldr	r0, [r0, #0]
 80094ac:	9401      	str	r4, [sp, #4]
 80094ae:	f003 f8fd 	bl	800c6ac <__ssvfiscanf_r>
 80094b2:	b01c      	add	sp, #112	; 0x70
 80094b4:	bc30      	pop	{r4, r5}
 80094b6:	bc08      	pop	{r3}
 80094b8:	b003      	add	sp, #12
 80094ba:	4718      	bx	r3
 80094bc:	080094ed 	.word	0x080094ed
 80094c0:	2000000c 	.word	0x2000000c

080094c4 <__sread>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	000c      	movs	r4, r1
 80094c8:	250e      	movs	r5, #14
 80094ca:	5f49      	ldrsh	r1, [r1, r5]
 80094cc:	f003 fbc8 	bl	800cc60 <_read_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	db03      	blt.n	80094dc <__sread+0x18>
 80094d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80094d6:	181b      	adds	r3, r3, r0
 80094d8:	6563      	str	r3, [r4, #84]	; 0x54
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	4a02      	ldr	r2, [pc, #8]	; (80094e8 <__sread+0x24>)
 80094e0:	4013      	ands	r3, r2
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	e7f9      	b.n	80094da <__sread+0x16>
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	ffffefff 	.word	0xffffefff

080094ec <__seofread>:
 80094ec:	2000      	movs	r0, #0
 80094ee:	4770      	bx	lr

080094f0 <__swrite>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	001f      	movs	r7, r3
 80094f4:	898b      	ldrh	r3, [r1, #12]
 80094f6:	0005      	movs	r5, r0
 80094f8:	000c      	movs	r4, r1
 80094fa:	0016      	movs	r6, r2
 80094fc:	05db      	lsls	r3, r3, #23
 80094fe:	d505      	bpl.n	800950c <__swrite+0x1c>
 8009500:	230e      	movs	r3, #14
 8009502:	5ec9      	ldrsh	r1, [r1, r3]
 8009504:	2200      	movs	r2, #0
 8009506:	2302      	movs	r3, #2
 8009508:	f002 f94e 	bl	800b7a8 <_lseek_r>
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	4a05      	ldr	r2, [pc, #20]	; (8009524 <__swrite+0x34>)
 8009510:	0028      	movs	r0, r5
 8009512:	4013      	ands	r3, r2
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	0032      	movs	r2, r6
 8009518:	230e      	movs	r3, #14
 800951a:	5ee1      	ldrsh	r1, [r4, r3]
 800951c:	003b      	movs	r3, r7
 800951e:	f000 fefd 	bl	800a31c <_write_r>
 8009522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009524:	ffffefff 	.word	0xffffefff

08009528 <__sseek>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	000c      	movs	r4, r1
 800952c:	250e      	movs	r5, #14
 800952e:	5f49      	ldrsh	r1, [r1, r5]
 8009530:	f002 f93a 	bl	800b7a8 <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	1c42      	adds	r2, r0, #1
 8009538:	d103      	bne.n	8009542 <__sseek+0x1a>
 800953a:	4a05      	ldr	r2, [pc, #20]	; (8009550 <__sseek+0x28>)
 800953c:	4013      	ands	r3, r2
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	2280      	movs	r2, #128	; 0x80
 8009544:	0152      	lsls	r2, r2, #5
 8009546:	4313      	orrs	r3, r2
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	6560      	str	r0, [r4, #84]	; 0x54
 800954c:	e7f8      	b.n	8009540 <__sseek+0x18>
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	ffffefff 	.word	0xffffefff

08009554 <__sclose>:
 8009554:	b510      	push	{r4, lr}
 8009556:	230e      	movs	r3, #14
 8009558:	5ec9      	ldrsh	r1, [r1, r3]
 800955a:	f000 fef3 	bl	800a344 <_close_r>
 800955e:	bd10      	pop	{r4, pc}

08009560 <strcpy>:
 8009560:	0003      	movs	r3, r0
 8009562:	780a      	ldrb	r2, [r1, #0]
 8009564:	3101      	adds	r1, #1
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	2a00      	cmp	r2, #0
 800956c:	d1f9      	bne.n	8009562 <strcpy+0x2>
 800956e:	4770      	bx	lr

08009570 <sulp>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	0016      	movs	r6, r2
 8009574:	000d      	movs	r5, r1
 8009576:	f002 fce1 	bl	800bf3c <__ulp>
 800957a:	2e00      	cmp	r6, #0
 800957c:	d00d      	beq.n	800959a <sulp+0x2a>
 800957e:	236b      	movs	r3, #107	; 0x6b
 8009580:	006a      	lsls	r2, r5, #1
 8009582:	0d52      	lsrs	r2, r2, #21
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd07      	ble.n	800959a <sulp+0x2a>
 800958a:	2400      	movs	r4, #0
 800958c:	4a03      	ldr	r2, [pc, #12]	; (800959c <sulp+0x2c>)
 800958e:	051b      	lsls	r3, r3, #20
 8009590:	189d      	adds	r5, r3, r2
 8009592:	002b      	movs	r3, r5
 8009594:	0022      	movs	r2, r4
 8009596:	f7f7 ff71 	bl	800147c <__aeabi_dmul>
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	3ff00000 	.word	0x3ff00000

080095a0 <_strtod_l>:
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	001d      	movs	r5, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	b0a7      	sub	sp, #156	; 0x9c
 80095a8:	9322      	str	r3, [sp, #136]	; 0x88
 80095aa:	4bae      	ldr	r3, [pc, #696]	; (8009864 <_strtod_l+0x2c4>)
 80095ac:	9005      	str	r0, [sp, #20]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	9108      	str	r1, [sp, #32]
 80095b2:	0018      	movs	r0, r3
 80095b4:	9307      	str	r3, [sp, #28]
 80095b6:	921d      	str	r2, [sp, #116]	; 0x74
 80095b8:	f7f6 fdb0 	bl	800011c <strlen>
 80095bc:	2600      	movs	r6, #0
 80095be:	0004      	movs	r4, r0
 80095c0:	2700      	movs	r7, #0
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	9321      	str	r3, [sp, #132]	; 0x84
 80095c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095c8:	7813      	ldrb	r3, [r2, #0]
 80095ca:	2b2b      	cmp	r3, #43	; 0x2b
 80095cc:	d058      	beq.n	8009680 <_strtod_l+0xe0>
 80095ce:	d844      	bhi.n	800965a <_strtod_l+0xba>
 80095d0:	2b0d      	cmp	r3, #13
 80095d2:	d83d      	bhi.n	8009650 <_strtod_l+0xb0>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d83d      	bhi.n	8009654 <_strtod_l+0xb4>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d047      	beq.n	800966c <_strtod_l+0xcc>
 80095dc:	2300      	movs	r3, #0
 80095de:	9310      	str	r3, [sp, #64]	; 0x40
 80095e0:	2200      	movs	r2, #0
 80095e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095e4:	920a      	str	r2, [sp, #40]	; 0x28
 80095e6:	9306      	str	r3, [sp, #24]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b30      	cmp	r3, #48	; 0x30
 80095ec:	d000      	beq.n	80095f0 <_strtod_l+0x50>
 80095ee:	e083      	b.n	80096f8 <_strtod_l+0x158>
 80095f0:	9b06      	ldr	r3, [sp, #24]
 80095f2:	3220      	adds	r2, #32
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	4393      	bics	r3, r2
 80095f8:	2b58      	cmp	r3, #88	; 0x58
 80095fa:	d000      	beq.n	80095fe <_strtod_l+0x5e>
 80095fc:	e072      	b.n	80096e4 <_strtod_l+0x144>
 80095fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009600:	9502      	str	r5, [sp, #8]
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	ab22      	add	r3, sp, #136	; 0x88
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	4a97      	ldr	r2, [pc, #604]	; (8009868 <_strtod_l+0x2c8>)
 800960a:	ab23      	add	r3, sp, #140	; 0x8c
 800960c:	9805      	ldr	r0, [sp, #20]
 800960e:	a921      	add	r1, sp, #132	; 0x84
 8009610:	f001 fdbe 	bl	800b190 <__gethex>
 8009614:	2307      	movs	r3, #7
 8009616:	0005      	movs	r5, r0
 8009618:	0004      	movs	r4, r0
 800961a:	401d      	ands	r5, r3
 800961c:	4218      	tst	r0, r3
 800961e:	d006      	beq.n	800962e <_strtod_l+0x8e>
 8009620:	2d06      	cmp	r5, #6
 8009622:	d12f      	bne.n	8009684 <_strtod_l+0xe4>
 8009624:	9b06      	ldr	r3, [sp, #24]
 8009626:	3301      	adds	r3, #1
 8009628:	9321      	str	r3, [sp, #132]	; 0x84
 800962a:	2300      	movs	r3, #0
 800962c:	9310      	str	r3, [sp, #64]	; 0x40
 800962e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <_strtod_l+0x9a>
 8009634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009636:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963c:	2b00      	cmp	r3, #0
 800963e:	d01c      	beq.n	800967a <_strtod_l+0xda>
 8009640:	2380      	movs	r3, #128	; 0x80
 8009642:	0032      	movs	r2, r6
 8009644:	061b      	lsls	r3, r3, #24
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	0010      	movs	r0, r2
 800964a:	0019      	movs	r1, r3
 800964c:	b027      	add	sp, #156	; 0x9c
 800964e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009650:	2b20      	cmp	r3, #32
 8009652:	d1c3      	bne.n	80095dc <_strtod_l+0x3c>
 8009654:	3201      	adds	r2, #1
 8009656:	9221      	str	r2, [sp, #132]	; 0x84
 8009658:	e7b5      	b.n	80095c6 <_strtod_l+0x26>
 800965a:	2b2d      	cmp	r3, #45	; 0x2d
 800965c:	d1be      	bne.n	80095dc <_strtod_l+0x3c>
 800965e:	3b2c      	subs	r3, #44	; 0x2c
 8009660:	9310      	str	r3, [sp, #64]	; 0x40
 8009662:	1c53      	adds	r3, r2, #1
 8009664:	9321      	str	r3, [sp, #132]	; 0x84
 8009666:	7853      	ldrb	r3, [r2, #1]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1b9      	bne.n	80095e0 <_strtod_l+0x40>
 800966c:	9b08      	ldr	r3, [sp, #32]
 800966e:	9321      	str	r3, [sp, #132]	; 0x84
 8009670:	2300      	movs	r3, #0
 8009672:	9310      	str	r3, [sp, #64]	; 0x40
 8009674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1dc      	bne.n	8009634 <_strtod_l+0x94>
 800967a:	0032      	movs	r2, r6
 800967c:	003b      	movs	r3, r7
 800967e:	e7e3      	b.n	8009648 <_strtod_l+0xa8>
 8009680:	2300      	movs	r3, #0
 8009682:	e7ed      	b.n	8009660 <_strtod_l+0xc0>
 8009684:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009686:	2a00      	cmp	r2, #0
 8009688:	d007      	beq.n	800969a <_strtod_l+0xfa>
 800968a:	2135      	movs	r1, #53	; 0x35
 800968c:	a824      	add	r0, sp, #144	; 0x90
 800968e:	f002 fd54 	bl	800c13a <__copybits>
 8009692:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009694:	9805      	ldr	r0, [sp, #20]
 8009696:	f002 f90f 	bl	800b8b8 <_Bfree>
 800969a:	1e68      	subs	r0, r5, #1
 800969c:	2805      	cmp	r0, #5
 800969e:	d806      	bhi.n	80096ae <_strtod_l+0x10e>
 80096a0:	f7f6 fd44 	bl	800012c <__gnu_thumb1_case_uqi>
 80096a4:	1c190b0e 	.word	0x1c190b0e
 80096a8:	030e      	.short	0x030e
 80096aa:	2700      	movs	r7, #0
 80096ac:	003e      	movs	r6, r7
 80096ae:	0723      	lsls	r3, r4, #28
 80096b0:	d5bd      	bpl.n	800962e <_strtod_l+0x8e>
 80096b2:	2380      	movs	r3, #128	; 0x80
 80096b4:	061b      	lsls	r3, r3, #24
 80096b6:	431f      	orrs	r7, r3
 80096b8:	e7b9      	b.n	800962e <_strtod_l+0x8e>
 80096ba:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80096bc:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80096be:	e7f6      	b.n	80096ae <_strtod_l+0x10e>
 80096c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80096c2:	4a6a      	ldr	r2, [pc, #424]	; (800986c <_strtod_l+0x2cc>)
 80096c4:	496a      	ldr	r1, [pc, #424]	; (8009870 <_strtod_l+0x2d0>)
 80096c6:	401a      	ands	r2, r3
 80096c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096ca:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80096cc:	185b      	adds	r3, r3, r1
 80096ce:	051b      	lsls	r3, r3, #20
 80096d0:	431a      	orrs	r2, r3
 80096d2:	0017      	movs	r7, r2
 80096d4:	e7eb      	b.n	80096ae <_strtod_l+0x10e>
 80096d6:	2600      	movs	r6, #0
 80096d8:	4f66      	ldr	r7, [pc, #408]	; (8009874 <_strtod_l+0x2d4>)
 80096da:	e7e8      	b.n	80096ae <_strtod_l+0x10e>
 80096dc:	2601      	movs	r6, #1
 80096de:	4f66      	ldr	r7, [pc, #408]	; (8009878 <_strtod_l+0x2d8>)
 80096e0:	4276      	negs	r6, r6
 80096e2:	e7e4      	b.n	80096ae <_strtod_l+0x10e>
 80096e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	9221      	str	r2, [sp, #132]	; 0x84
 80096ea:	785b      	ldrb	r3, [r3, #1]
 80096ec:	2b30      	cmp	r3, #48	; 0x30
 80096ee:	d0f9      	beq.n	80096e4 <_strtod_l+0x144>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d09c      	beq.n	800962e <_strtod_l+0x8e>
 80096f4:	2301      	movs	r3, #1
 80096f6:	930a      	str	r3, [sp, #40]	; 0x28
 80096f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096fa:	220a      	movs	r2, #10
 80096fc:	9311      	str	r3, [sp, #68]	; 0x44
 80096fe:	2300      	movs	r3, #0
 8009700:	930e      	str	r3, [sp, #56]	; 0x38
 8009702:	930b      	str	r3, [sp, #44]	; 0x2c
 8009704:	9309      	str	r3, [sp, #36]	; 0x24
 8009706:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009708:	7805      	ldrb	r5, [r0, #0]
 800970a:	002b      	movs	r3, r5
 800970c:	3b30      	subs	r3, #48	; 0x30
 800970e:	b2d9      	uxtb	r1, r3
 8009710:	2909      	cmp	r1, #9
 8009712:	d927      	bls.n	8009764 <_strtod_l+0x1c4>
 8009714:	0022      	movs	r2, r4
 8009716:	9907      	ldr	r1, [sp, #28]
 8009718:	f003 fb0a 	bl	800cd30 <strncmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	d033      	beq.n	8009788 <_strtod_l+0x1e8>
 8009720:	2000      	movs	r0, #0
 8009722:	002b      	movs	r3, r5
 8009724:	4684      	mov	ip, r0
 8009726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009728:	900c      	str	r0, [sp, #48]	; 0x30
 800972a:	9206      	str	r2, [sp, #24]
 800972c:	2220      	movs	r2, #32
 800972e:	0019      	movs	r1, r3
 8009730:	4391      	bics	r1, r2
 8009732:	000a      	movs	r2, r1
 8009734:	2100      	movs	r1, #0
 8009736:	9107      	str	r1, [sp, #28]
 8009738:	2a45      	cmp	r2, #69	; 0x45
 800973a:	d000      	beq.n	800973e <_strtod_l+0x19e>
 800973c:	e0c5      	b.n	80098ca <_strtod_l+0x32a>
 800973e:	9b06      	ldr	r3, [sp, #24]
 8009740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009742:	4303      	orrs	r3, r0
 8009744:	4313      	orrs	r3, r2
 8009746:	428b      	cmp	r3, r1
 8009748:	d090      	beq.n	800966c <_strtod_l+0xcc>
 800974a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800974c:	9308      	str	r3, [sp, #32]
 800974e:	3301      	adds	r3, #1
 8009750:	9321      	str	r3, [sp, #132]	; 0x84
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	2b2b      	cmp	r3, #43	; 0x2b
 8009758:	d075      	beq.n	8009846 <_strtod_l+0x2a6>
 800975a:	000c      	movs	r4, r1
 800975c:	2b2d      	cmp	r3, #45	; 0x2d
 800975e:	d178      	bne.n	8009852 <_strtod_l+0x2b2>
 8009760:	2401      	movs	r4, #1
 8009762:	e071      	b.n	8009848 <_strtod_l+0x2a8>
 8009764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009766:	2908      	cmp	r1, #8
 8009768:	dc09      	bgt.n	800977e <_strtod_l+0x1de>
 800976a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800976c:	4351      	muls	r1, r2
 800976e:	185b      	adds	r3, r3, r1
 8009770:	930b      	str	r3, [sp, #44]	; 0x2c
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	3001      	adds	r0, #1
 8009776:	3301      	adds	r3, #1
 8009778:	9309      	str	r3, [sp, #36]	; 0x24
 800977a:	9021      	str	r0, [sp, #132]	; 0x84
 800977c:	e7c3      	b.n	8009706 <_strtod_l+0x166>
 800977e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009780:	4351      	muls	r1, r2
 8009782:	185b      	adds	r3, r3, r1
 8009784:	930e      	str	r3, [sp, #56]	; 0x38
 8009786:	e7f4      	b.n	8009772 <_strtod_l+0x1d2>
 8009788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800978a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978c:	191c      	adds	r4, r3, r4
 800978e:	9421      	str	r4, [sp, #132]	; 0x84
 8009790:	7823      	ldrb	r3, [r4, #0]
 8009792:	2a00      	cmp	r2, #0
 8009794:	d039      	beq.n	800980a <_strtod_l+0x26a>
 8009796:	900c      	str	r0, [sp, #48]	; 0x30
 8009798:	9206      	str	r2, [sp, #24]
 800979a:	001a      	movs	r2, r3
 800979c:	3a30      	subs	r2, #48	; 0x30
 800979e:	2a09      	cmp	r2, #9
 80097a0:	d912      	bls.n	80097c8 <_strtod_l+0x228>
 80097a2:	2201      	movs	r2, #1
 80097a4:	4694      	mov	ip, r2
 80097a6:	e7c1      	b.n	800972c <_strtod_l+0x18c>
 80097a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097aa:	3001      	adds	r0, #1
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	9221      	str	r2, [sp, #132]	; 0x84
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	2b30      	cmp	r3, #48	; 0x30
 80097b4:	d0f8      	beq.n	80097a8 <_strtod_l+0x208>
 80097b6:	001a      	movs	r2, r3
 80097b8:	3a31      	subs	r2, #49	; 0x31
 80097ba:	2a08      	cmp	r2, #8
 80097bc:	d83e      	bhi.n	800983c <_strtod_l+0x29c>
 80097be:	900c      	str	r0, [sp, #48]	; 0x30
 80097c0:	2000      	movs	r0, #0
 80097c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097c4:	9006      	str	r0, [sp, #24]
 80097c6:	9211      	str	r2, [sp, #68]	; 0x44
 80097c8:	001a      	movs	r2, r3
 80097ca:	9906      	ldr	r1, [sp, #24]
 80097cc:	1c44      	adds	r4, r0, #1
 80097ce:	3a30      	subs	r2, #48	; 0x30
 80097d0:	2b30      	cmp	r3, #48	; 0x30
 80097d2:	d013      	beq.n	80097fc <_strtod_l+0x25c>
 80097d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097d6:	191b      	adds	r3, r3, r4
 80097d8:	930c      	str	r3, [sp, #48]	; 0x30
 80097da:	1844      	adds	r4, r0, r1
 80097dc:	000b      	movs	r3, r1
 80097de:	210a      	movs	r1, #10
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d114      	bne.n	800980e <_strtod_l+0x26e>
 80097e4:	9b06      	ldr	r3, [sp, #24]
 80097e6:	1c59      	adds	r1, r3, #1
 80097e8:	1809      	adds	r1, r1, r0
 80097ea:	1818      	adds	r0, r3, r0
 80097ec:	2808      	cmp	r0, #8
 80097ee:	dc1c      	bgt.n	800982a <_strtod_l+0x28a>
 80097f0:	230a      	movs	r3, #10
 80097f2:	2400      	movs	r4, #0
 80097f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80097f6:	4343      	muls	r3, r0
 80097f8:	18d3      	adds	r3, r2, r3
 80097fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80097fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097fe:	0020      	movs	r0, r4
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	9221      	str	r2, [sp, #132]	; 0x84
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	9106      	str	r1, [sp, #24]
 8009808:	e7c7      	b.n	800979a <_strtod_l+0x1fa>
 800980a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800980c:	e7d1      	b.n	80097b2 <_strtod_l+0x212>
 800980e:	2b08      	cmp	r3, #8
 8009810:	dc04      	bgt.n	800981c <_strtod_l+0x27c>
 8009812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009814:	434d      	muls	r5, r1
 8009816:	950b      	str	r5, [sp, #44]	; 0x2c
 8009818:	3301      	adds	r3, #1
 800981a:	e7e1      	b.n	80097e0 <_strtod_l+0x240>
 800981c:	1c5d      	adds	r5, r3, #1
 800981e:	2d10      	cmp	r5, #16
 8009820:	dcfa      	bgt.n	8009818 <_strtod_l+0x278>
 8009822:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009824:	434d      	muls	r5, r1
 8009826:	950e      	str	r5, [sp, #56]	; 0x38
 8009828:	e7f6      	b.n	8009818 <_strtod_l+0x278>
 800982a:	2400      	movs	r4, #0
 800982c:	2910      	cmp	r1, #16
 800982e:	dce5      	bgt.n	80097fc <_strtod_l+0x25c>
 8009830:	230a      	movs	r3, #10
 8009832:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009834:	4343      	muls	r3, r0
 8009836:	18d3      	adds	r3, r2, r3
 8009838:	930e      	str	r3, [sp, #56]	; 0x38
 800983a:	e7df      	b.n	80097fc <_strtod_l+0x25c>
 800983c:	2200      	movs	r2, #0
 800983e:	920c      	str	r2, [sp, #48]	; 0x30
 8009840:	9206      	str	r2, [sp, #24]
 8009842:	3201      	adds	r2, #1
 8009844:	e7ae      	b.n	80097a4 <_strtod_l+0x204>
 8009846:	2400      	movs	r4, #0
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	3302      	adds	r3, #2
 800984c:	9321      	str	r3, [sp, #132]	; 0x84
 800984e:	9b08      	ldr	r3, [sp, #32]
 8009850:	789b      	ldrb	r3, [r3, #2]
 8009852:	001a      	movs	r2, r3
 8009854:	3a30      	subs	r2, #48	; 0x30
 8009856:	2a09      	cmp	r2, #9
 8009858:	d914      	bls.n	8009884 <_strtod_l+0x2e4>
 800985a:	9a08      	ldr	r2, [sp, #32]
 800985c:	9221      	str	r2, [sp, #132]	; 0x84
 800985e:	2200      	movs	r2, #0
 8009860:	e032      	b.n	80098c8 <_strtod_l+0x328>
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	0800ddb0 	.word	0x0800ddb0
 8009868:	0800db60 	.word	0x0800db60
 800986c:	ffefffff 	.word	0xffefffff
 8009870:	00000433 	.word	0x00000433
 8009874:	7ff00000 	.word	0x7ff00000
 8009878:	7fffffff 	.word	0x7fffffff
 800987c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	9221      	str	r2, [sp, #132]	; 0x84
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	2b30      	cmp	r3, #48	; 0x30
 8009886:	d0f9      	beq.n	800987c <_strtod_l+0x2dc>
 8009888:	2200      	movs	r2, #0
 800988a:	9207      	str	r2, [sp, #28]
 800988c:	001a      	movs	r2, r3
 800988e:	3a31      	subs	r2, #49	; 0x31
 8009890:	2a08      	cmp	r2, #8
 8009892:	d81a      	bhi.n	80098ca <_strtod_l+0x32a>
 8009894:	3b30      	subs	r3, #48	; 0x30
 8009896:	001a      	movs	r2, r3
 8009898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800989a:	9307      	str	r3, [sp, #28]
 800989c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800989e:	1c59      	adds	r1, r3, #1
 80098a0:	9121      	str	r1, [sp, #132]	; 0x84
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	001d      	movs	r5, r3
 80098a6:	3d30      	subs	r5, #48	; 0x30
 80098a8:	2d09      	cmp	r5, #9
 80098aa:	d939      	bls.n	8009920 <_strtod_l+0x380>
 80098ac:	9d07      	ldr	r5, [sp, #28]
 80098ae:	1b49      	subs	r1, r1, r5
 80098b0:	4daf      	ldr	r5, [pc, #700]	; (8009b70 <_strtod_l+0x5d0>)
 80098b2:	9507      	str	r5, [sp, #28]
 80098b4:	2908      	cmp	r1, #8
 80098b6:	dc03      	bgt.n	80098c0 <_strtod_l+0x320>
 80098b8:	9207      	str	r2, [sp, #28]
 80098ba:	42aa      	cmp	r2, r5
 80098bc:	dd00      	ble.n	80098c0 <_strtod_l+0x320>
 80098be:	9507      	str	r5, [sp, #28]
 80098c0:	2c00      	cmp	r4, #0
 80098c2:	d002      	beq.n	80098ca <_strtod_l+0x32a>
 80098c4:	9a07      	ldr	r2, [sp, #28]
 80098c6:	4252      	negs	r2, r2
 80098c8:	9207      	str	r2, [sp, #28]
 80098ca:	9a06      	ldr	r2, [sp, #24]
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d14b      	bne.n	8009968 <_strtod_l+0x3c8>
 80098d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098d2:	4310      	orrs	r0, r2
 80098d4:	d000      	beq.n	80098d8 <_strtod_l+0x338>
 80098d6:	e6aa      	b.n	800962e <_strtod_l+0x8e>
 80098d8:	4662      	mov	r2, ip
 80098da:	2a00      	cmp	r2, #0
 80098dc:	d000      	beq.n	80098e0 <_strtod_l+0x340>
 80098de:	e6c5      	b.n	800966c <_strtod_l+0xcc>
 80098e0:	2b69      	cmp	r3, #105	; 0x69
 80098e2:	d025      	beq.n	8009930 <_strtod_l+0x390>
 80098e4:	dc21      	bgt.n	800992a <_strtod_l+0x38a>
 80098e6:	2b49      	cmp	r3, #73	; 0x49
 80098e8:	d022      	beq.n	8009930 <_strtod_l+0x390>
 80098ea:	2b4e      	cmp	r3, #78	; 0x4e
 80098ec:	d000      	beq.n	80098f0 <_strtod_l+0x350>
 80098ee:	e6bd      	b.n	800966c <_strtod_l+0xcc>
 80098f0:	49a0      	ldr	r1, [pc, #640]	; (8009b74 <_strtod_l+0x5d4>)
 80098f2:	a821      	add	r0, sp, #132	; 0x84
 80098f4:	f001 fe9a 	bl	800b62c <__match>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d100      	bne.n	80098fe <_strtod_l+0x35e>
 80098fc:	e6b6      	b.n	800966c <_strtod_l+0xcc>
 80098fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b28      	cmp	r3, #40	; 0x28
 8009904:	d12a      	bne.n	800995c <_strtod_l+0x3bc>
 8009906:	499c      	ldr	r1, [pc, #624]	; (8009b78 <_strtod_l+0x5d8>)
 8009908:	aa24      	add	r2, sp, #144	; 0x90
 800990a:	a821      	add	r0, sp, #132	; 0x84
 800990c:	f001 fea2 	bl	800b654 <__hexnan>
 8009910:	2805      	cmp	r0, #5
 8009912:	d123      	bne.n	800995c <_strtod_l+0x3bc>
 8009914:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009916:	4a99      	ldr	r2, [pc, #612]	; (8009b7c <_strtod_l+0x5dc>)
 8009918:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800991a:	431a      	orrs	r2, r3
 800991c:	0017      	movs	r7, r2
 800991e:	e686      	b.n	800962e <_strtod_l+0x8e>
 8009920:	210a      	movs	r1, #10
 8009922:	434a      	muls	r2, r1
 8009924:	18d2      	adds	r2, r2, r3
 8009926:	3a30      	subs	r2, #48	; 0x30
 8009928:	e7b8      	b.n	800989c <_strtod_l+0x2fc>
 800992a:	2b6e      	cmp	r3, #110	; 0x6e
 800992c:	d0e0      	beq.n	80098f0 <_strtod_l+0x350>
 800992e:	e69d      	b.n	800966c <_strtod_l+0xcc>
 8009930:	4993      	ldr	r1, [pc, #588]	; (8009b80 <_strtod_l+0x5e0>)
 8009932:	a821      	add	r0, sp, #132	; 0x84
 8009934:	f001 fe7a 	bl	800b62c <__match>
 8009938:	2800      	cmp	r0, #0
 800993a:	d100      	bne.n	800993e <_strtod_l+0x39e>
 800993c:	e696      	b.n	800966c <_strtod_l+0xcc>
 800993e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009940:	4990      	ldr	r1, [pc, #576]	; (8009b84 <_strtod_l+0x5e4>)
 8009942:	3b01      	subs	r3, #1
 8009944:	a821      	add	r0, sp, #132	; 0x84
 8009946:	9321      	str	r3, [sp, #132]	; 0x84
 8009948:	f001 fe70 	bl	800b62c <__match>
 800994c:	2800      	cmp	r0, #0
 800994e:	d102      	bne.n	8009956 <_strtod_l+0x3b6>
 8009950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009952:	3301      	adds	r3, #1
 8009954:	9321      	str	r3, [sp, #132]	; 0x84
 8009956:	2600      	movs	r6, #0
 8009958:	4f88      	ldr	r7, [pc, #544]	; (8009b7c <_strtod_l+0x5dc>)
 800995a:	e668      	b.n	800962e <_strtod_l+0x8e>
 800995c:	488a      	ldr	r0, [pc, #552]	; (8009b88 <_strtod_l+0x5e8>)
 800995e:	f003 f993 	bl	800cc88 <nan>
 8009962:	0006      	movs	r6, r0
 8009964:	000f      	movs	r7, r1
 8009966:	e662      	b.n	800962e <_strtod_l+0x8e>
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	930a      	str	r3, [sp, #40]	; 0x28
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <_strtod_l+0x3da>
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	9309      	str	r3, [sp, #36]	; 0x24
 800997a:	9c06      	ldr	r4, [sp, #24]
 800997c:	2c10      	cmp	r4, #16
 800997e:	dd00      	ble.n	8009982 <_strtod_l+0x3e2>
 8009980:	2410      	movs	r4, #16
 8009982:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009984:	f7f8 fbfc 	bl	8002180 <__aeabi_ui2d>
 8009988:	9b06      	ldr	r3, [sp, #24]
 800998a:	0006      	movs	r6, r0
 800998c:	000f      	movs	r7, r1
 800998e:	2b09      	cmp	r3, #9
 8009990:	dd15      	ble.n	80099be <_strtod_l+0x41e>
 8009992:	0022      	movs	r2, r4
 8009994:	4b7d      	ldr	r3, [pc, #500]	; (8009b8c <_strtod_l+0x5ec>)
 8009996:	3a09      	subs	r2, #9
 8009998:	00d2      	lsls	r2, r2, #3
 800999a:	189b      	adds	r3, r3, r2
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f7f7 fd6c 	bl	800147c <__aeabi_dmul>
 80099a4:	0006      	movs	r6, r0
 80099a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099a8:	000f      	movs	r7, r1
 80099aa:	f7f8 fbe9 	bl	8002180 <__aeabi_ui2d>
 80099ae:	0002      	movs	r2, r0
 80099b0:	000b      	movs	r3, r1
 80099b2:	0030      	movs	r0, r6
 80099b4:	0039      	movs	r1, r7
 80099b6:	f7f6 fdf1 	bl	800059c <__aeabi_dadd>
 80099ba:	0006      	movs	r6, r0
 80099bc:	000f      	movs	r7, r1
 80099be:	9b06      	ldr	r3, [sp, #24]
 80099c0:	2b0f      	cmp	r3, #15
 80099c2:	dc39      	bgt.n	8009a38 <_strtod_l+0x498>
 80099c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d100      	bne.n	80099cc <_strtod_l+0x42c>
 80099ca:	e630      	b.n	800962e <_strtod_l+0x8e>
 80099cc:	dd24      	ble.n	8009a18 <_strtod_l+0x478>
 80099ce:	2b16      	cmp	r3, #22
 80099d0:	dc09      	bgt.n	80099e6 <_strtod_l+0x446>
 80099d2:	00dd      	lsls	r5, r3, #3
 80099d4:	0032      	movs	r2, r6
 80099d6:	003b      	movs	r3, r7
 80099d8:	4c6c      	ldr	r4, [pc, #432]	; (8009b8c <_strtod_l+0x5ec>)
 80099da:	1964      	adds	r4, r4, r5
 80099dc:	6820      	ldr	r0, [r4, #0]
 80099de:	6861      	ldr	r1, [r4, #4]
 80099e0:	f7f7 fd4c 	bl	800147c <__aeabi_dmul>
 80099e4:	e7bd      	b.n	8009962 <_strtod_l+0x3c2>
 80099e6:	2325      	movs	r3, #37	; 0x25
 80099e8:	9a06      	ldr	r2, [sp, #24]
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ee:	4293      	cmp	r3, r2
 80099f0:	db22      	blt.n	8009a38 <_strtod_l+0x498>
 80099f2:	240f      	movs	r4, #15
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	4d65      	ldr	r5, [pc, #404]	; (8009b8c <_strtod_l+0x5ec>)
 80099f8:	1ae4      	subs	r4, r4, r3
 80099fa:	00e1      	lsls	r1, r4, #3
 80099fc:	1869      	adds	r1, r5, r1
 80099fe:	0032      	movs	r2, r6
 8009a00:	6808      	ldr	r0, [r1, #0]
 8009a02:	6849      	ldr	r1, [r1, #4]
 8009a04:	003b      	movs	r3, r7
 8009a06:	f7f7 fd39 	bl	800147c <__aeabi_dmul>
 8009a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0c:	1b1c      	subs	r4, r3, r4
 8009a0e:	00e4      	lsls	r4, r4, #3
 8009a10:	192c      	adds	r4, r5, r4
 8009a12:	6822      	ldr	r2, [r4, #0]
 8009a14:	6863      	ldr	r3, [r4, #4]
 8009a16:	e7e3      	b.n	80099e0 <_strtod_l+0x440>
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	3316      	adds	r3, #22
 8009a1c:	db0c      	blt.n	8009a38 <_strtod_l+0x498>
 8009a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a20:	9a07      	ldr	r2, [sp, #28]
 8009a22:	0030      	movs	r0, r6
 8009a24:	1a9a      	subs	r2, r3, r2
 8009a26:	4b59      	ldr	r3, [pc, #356]	; (8009b8c <_strtod_l+0x5ec>)
 8009a28:	00d2      	lsls	r2, r2, #3
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	0039      	movs	r1, r7
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f7f7 f91d 	bl	8000c70 <__aeabi_ddiv>
 8009a36:	e794      	b.n	8009962 <_strtod_l+0x3c2>
 8009a38:	9b06      	ldr	r3, [sp, #24]
 8009a3a:	1b1c      	subs	r4, r3, r4
 8009a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3e:	18e4      	adds	r4, r4, r3
 8009a40:	2c00      	cmp	r4, #0
 8009a42:	dd70      	ble.n	8009b26 <_strtod_l+0x586>
 8009a44:	230f      	movs	r3, #15
 8009a46:	0021      	movs	r1, r4
 8009a48:	4019      	ands	r1, r3
 8009a4a:	421c      	tst	r4, r3
 8009a4c:	d00a      	beq.n	8009a64 <_strtod_l+0x4c4>
 8009a4e:	00cb      	lsls	r3, r1, #3
 8009a50:	494e      	ldr	r1, [pc, #312]	; (8009b8c <_strtod_l+0x5ec>)
 8009a52:	0032      	movs	r2, r6
 8009a54:	18c9      	adds	r1, r1, r3
 8009a56:	6808      	ldr	r0, [r1, #0]
 8009a58:	6849      	ldr	r1, [r1, #4]
 8009a5a:	003b      	movs	r3, r7
 8009a5c:	f7f7 fd0e 	bl	800147c <__aeabi_dmul>
 8009a60:	0006      	movs	r6, r0
 8009a62:	000f      	movs	r7, r1
 8009a64:	230f      	movs	r3, #15
 8009a66:	439c      	bics	r4, r3
 8009a68:	d048      	beq.n	8009afc <_strtod_l+0x55c>
 8009a6a:	3326      	adds	r3, #38	; 0x26
 8009a6c:	33ff      	adds	r3, #255	; 0xff
 8009a6e:	429c      	cmp	r4, r3
 8009a70:	dd22      	ble.n	8009ab8 <_strtod_l+0x518>
 8009a72:	2300      	movs	r3, #0
 8009a74:	9306      	str	r3, [sp, #24]
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7c:	2322      	movs	r3, #34	; 0x22
 8009a7e:	2600      	movs	r6, #0
 8009a80:	9a05      	ldr	r2, [sp, #20]
 8009a82:	4f3e      	ldr	r7, [pc, #248]	; (8009b7c <_strtod_l+0x5dc>)
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a88:	42b3      	cmp	r3, r6
 8009a8a:	d100      	bne.n	8009a8e <_strtod_l+0x4ee>
 8009a8c:	e5cf      	b.n	800962e <_strtod_l+0x8e>
 8009a8e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a90:	9805      	ldr	r0, [sp, #20]
 8009a92:	f001 ff11 	bl	800b8b8 <_Bfree>
 8009a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a98:	9805      	ldr	r0, [sp, #20]
 8009a9a:	f001 ff0d 	bl	800b8b8 <_Bfree>
 8009a9e:	9907      	ldr	r1, [sp, #28]
 8009aa0:	9805      	ldr	r0, [sp, #20]
 8009aa2:	f001 ff09 	bl	800b8b8 <_Bfree>
 8009aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aa8:	9805      	ldr	r0, [sp, #20]
 8009aaa:	f001 ff05 	bl	800b8b8 <_Bfree>
 8009aae:	9906      	ldr	r1, [sp, #24]
 8009ab0:	9805      	ldr	r0, [sp, #20]
 8009ab2:	f001 ff01 	bl	800b8b8 <_Bfree>
 8009ab6:	e5ba      	b.n	800962e <_strtod_l+0x8e>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	0030      	movs	r0, r6
 8009abc:	0039      	movs	r1, r7
 8009abe:	001d      	movs	r5, r3
 8009ac0:	1124      	asrs	r4, r4, #4
 8009ac2:	2c01      	cmp	r4, #1
 8009ac4:	dc1d      	bgt.n	8009b02 <_strtod_l+0x562>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <_strtod_l+0x52e>
 8009aca:	0006      	movs	r6, r0
 8009acc:	000f      	movs	r7, r1
 8009ace:	4b30      	ldr	r3, [pc, #192]	; (8009b90 <_strtod_l+0x5f0>)
 8009ad0:	00ed      	lsls	r5, r5, #3
 8009ad2:	18ff      	adds	r7, r7, r3
 8009ad4:	4b2f      	ldr	r3, [pc, #188]	; (8009b94 <_strtod_l+0x5f4>)
 8009ad6:	0032      	movs	r2, r6
 8009ad8:	195d      	adds	r5, r3, r5
 8009ada:	6828      	ldr	r0, [r5, #0]
 8009adc:	6869      	ldr	r1, [r5, #4]
 8009ade:	003b      	movs	r3, r7
 8009ae0:	f7f7 fccc 	bl	800147c <__aeabi_dmul>
 8009ae4:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <_strtod_l+0x5dc>)
 8009ae6:	4a2c      	ldr	r2, [pc, #176]	; (8009b98 <_strtod_l+0x5f8>)
 8009ae8:	0006      	movs	r6, r0
 8009aea:	400b      	ands	r3, r1
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d8c0      	bhi.n	8009a72 <_strtod_l+0x4d2>
 8009af0:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <_strtod_l+0x5fc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d913      	bls.n	8009b1e <_strtod_l+0x57e>
 8009af6:	2601      	movs	r6, #1
 8009af8:	4f29      	ldr	r7, [pc, #164]	; (8009ba0 <_strtod_l+0x600>)
 8009afa:	4276      	negs	r6, r6
 8009afc:	2300      	movs	r3, #0
 8009afe:	9308      	str	r3, [sp, #32]
 8009b00:	e087      	b.n	8009c12 <_strtod_l+0x672>
 8009b02:	2201      	movs	r2, #1
 8009b04:	4214      	tst	r4, r2
 8009b06:	d007      	beq.n	8009b18 <_strtod_l+0x578>
 8009b08:	4a22      	ldr	r2, [pc, #136]	; (8009b94 <_strtod_l+0x5f4>)
 8009b0a:	00eb      	lsls	r3, r5, #3
 8009b0c:	189b      	adds	r3, r3, r2
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f7f7 fcb3 	bl	800147c <__aeabi_dmul>
 8009b16:	2301      	movs	r3, #1
 8009b18:	3501      	adds	r5, #1
 8009b1a:	1064      	asrs	r4, r4, #1
 8009b1c:	e7d1      	b.n	8009ac2 <_strtod_l+0x522>
 8009b1e:	23d4      	movs	r3, #212	; 0xd4
 8009b20:	049b      	lsls	r3, r3, #18
 8009b22:	18cf      	adds	r7, r1, r3
 8009b24:	e7ea      	b.n	8009afc <_strtod_l+0x55c>
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	d0e8      	beq.n	8009afc <_strtod_l+0x55c>
 8009b2a:	4264      	negs	r4, r4
 8009b2c:	220f      	movs	r2, #15
 8009b2e:	0023      	movs	r3, r4
 8009b30:	4013      	ands	r3, r2
 8009b32:	4214      	tst	r4, r2
 8009b34:	d00a      	beq.n	8009b4c <_strtod_l+0x5ac>
 8009b36:	00da      	lsls	r2, r3, #3
 8009b38:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <_strtod_l+0x5ec>)
 8009b3a:	0030      	movs	r0, r6
 8009b3c:	189b      	adds	r3, r3, r2
 8009b3e:	0039      	movs	r1, r7
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f7f7 f894 	bl	8000c70 <__aeabi_ddiv>
 8009b48:	0006      	movs	r6, r0
 8009b4a:	000f      	movs	r7, r1
 8009b4c:	1124      	asrs	r4, r4, #4
 8009b4e:	d0d5      	beq.n	8009afc <_strtod_l+0x55c>
 8009b50:	2c1f      	cmp	r4, #31
 8009b52:	dd27      	ble.n	8009ba4 <_strtod_l+0x604>
 8009b54:	2300      	movs	r3, #0
 8009b56:	9306      	str	r3, [sp, #24]
 8009b58:	9307      	str	r3, [sp, #28]
 8009b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5e:	2322      	movs	r3, #34	; 0x22
 8009b60:	9a05      	ldr	r2, [sp, #20]
 8009b62:	2600      	movs	r6, #0
 8009b64:	6013      	str	r3, [r2, #0]
 8009b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b68:	2700      	movs	r7, #0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d18f      	bne.n	8009a8e <_strtod_l+0x4ee>
 8009b6e:	e55e      	b.n	800962e <_strtod_l+0x8e>
 8009b70:	00004e1f 	.word	0x00004e1f
 8009b74:	0800db35 	.word	0x0800db35
 8009b78:	0800db74 	.word	0x0800db74
 8009b7c:	7ff00000 	.word	0x7ff00000
 8009b80:	0800db2d 	.word	0x0800db2d
 8009b84:	0800dcb4 	.word	0x0800dcb4
 8009b88:	0800df8b 	.word	0x0800df8b
 8009b8c:	0800de50 	.word	0x0800de50
 8009b90:	fcb00000 	.word	0xfcb00000
 8009b94:	0800de28 	.word	0x0800de28
 8009b98:	7ca00000 	.word	0x7ca00000
 8009b9c:	7c900000 	.word	0x7c900000
 8009ba0:	7fefffff 	.word	0x7fefffff
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	0022      	movs	r2, r4
 8009ba8:	401a      	ands	r2, r3
 8009baa:	9208      	str	r2, [sp, #32]
 8009bac:	421c      	tst	r4, r3
 8009bae:	d001      	beq.n	8009bb4 <_strtod_l+0x614>
 8009bb0:	335a      	adds	r3, #90	; 0x5a
 8009bb2:	9308      	str	r3, [sp, #32]
 8009bb4:	0030      	movs	r0, r6
 8009bb6:	0039      	movs	r1, r7
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4dca      	ldr	r5, [pc, #808]	; (8009ee4 <_strtod_l+0x944>)
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	4214      	tst	r4, r2
 8009bc0:	d004      	beq.n	8009bcc <_strtod_l+0x62c>
 8009bc2:	682a      	ldr	r2, [r5, #0]
 8009bc4:	686b      	ldr	r3, [r5, #4]
 8009bc6:	f7f7 fc59 	bl	800147c <__aeabi_dmul>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	1064      	asrs	r4, r4, #1
 8009bce:	3508      	adds	r5, #8
 8009bd0:	2c00      	cmp	r4, #0
 8009bd2:	d1f3      	bne.n	8009bbc <_strtod_l+0x61c>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <_strtod_l+0x63c>
 8009bd8:	0006      	movs	r6, r0
 8009bda:	000f      	movs	r7, r1
 8009bdc:	9b08      	ldr	r3, [sp, #32]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00f      	beq.n	8009c02 <_strtod_l+0x662>
 8009be2:	236b      	movs	r3, #107	; 0x6b
 8009be4:	0079      	lsls	r1, r7, #1
 8009be6:	0d49      	lsrs	r1, r1, #21
 8009be8:	003a      	movs	r2, r7
 8009bea:	1a5b      	subs	r3, r3, r1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dd08      	ble.n	8009c02 <_strtod_l+0x662>
 8009bf0:	2b1f      	cmp	r3, #31
 8009bf2:	dc00      	bgt.n	8009bf6 <_strtod_l+0x656>
 8009bf4:	e126      	b.n	8009e44 <_strtod_l+0x8a4>
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	2b34      	cmp	r3, #52	; 0x34
 8009bfa:	dc00      	bgt.n	8009bfe <_strtod_l+0x65e>
 8009bfc:	e11b      	b.n	8009e36 <_strtod_l+0x896>
 8009bfe:	27dc      	movs	r7, #220	; 0xdc
 8009c00:	04bf      	lsls	r7, r7, #18
 8009c02:	2200      	movs	r2, #0
 8009c04:	2300      	movs	r3, #0
 8009c06:	0030      	movs	r0, r6
 8009c08:	0039      	movs	r1, r7
 8009c0a:	f7f6 fc29 	bl	8000460 <__aeabi_dcmpeq>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d1a0      	bne.n	8009b54 <_strtod_l+0x5b4>
 8009c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c1a:	9b06      	ldr	r3, [sp, #24]
 8009c1c:	9805      	ldr	r0, [sp, #20]
 8009c1e:	f001 feb3 	bl	800b988 <__s2b>
 8009c22:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d100      	bne.n	8009c2a <_strtod_l+0x68a>
 8009c28:	e723      	b.n	8009a72 <_strtod_l+0x4d2>
 8009c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2c:	9907      	ldr	r1, [sp, #28]
 8009c2e:	17da      	asrs	r2, r3, #31
 8009c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c32:	1a5b      	subs	r3, r3, r1
 8009c34:	401a      	ands	r2, r3
 8009c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c38:	9215      	str	r2, [sp, #84]	; 0x54
 8009c3a:	43db      	mvns	r3, r3
 8009c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c3e:	17db      	asrs	r3, r3, #31
 8009c40:	401a      	ands	r2, r3
 8009c42:	2300      	movs	r3, #0
 8009c44:	921c      	str	r2, [sp, #112]	; 0x70
 8009c46:	9306      	str	r3, [sp, #24]
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c4c:	9805      	ldr	r0, [sp, #20]
 8009c4e:	6859      	ldr	r1, [r3, #4]
 8009c50:	f001 fdee 	bl	800b830 <_Balloc>
 8009c54:	9009      	str	r0, [sp, #36]	; 0x24
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d100      	bne.n	8009c5c <_strtod_l+0x6bc>
 8009c5a:	e70f      	b.n	8009a7c <_strtod_l+0x4dc>
 8009c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	310c      	adds	r1, #12
 8009c64:	1c9a      	adds	r2, r3, #2
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	300c      	adds	r0, #12
 8009c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c6c:	f001 fdd7 	bl	800b81e <memcpy>
 8009c70:	ab24      	add	r3, sp, #144	; 0x90
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	ab23      	add	r3, sp, #140	; 0x8c
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	0032      	movs	r2, r6
 8009c7a:	003b      	movs	r3, r7
 8009c7c:	9805      	ldr	r0, [sp, #20]
 8009c7e:	960e      	str	r6, [sp, #56]	; 0x38
 8009c80:	970f      	str	r7, [sp, #60]	; 0x3c
 8009c82:	f002 f9cf 	bl	800c024 <__d2b>
 8009c86:	9022      	str	r0, [sp, #136]	; 0x88
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d100      	bne.n	8009c8e <_strtod_l+0x6ee>
 8009c8c:	e6f6      	b.n	8009a7c <_strtod_l+0x4dc>
 8009c8e:	2101      	movs	r1, #1
 8009c90:	9805      	ldr	r0, [sp, #20]
 8009c92:	f001 ff0d 	bl	800bab0 <__i2b>
 8009c96:	9007      	str	r0, [sp, #28]
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d100      	bne.n	8009c9e <_strtod_l+0x6fe>
 8009c9c:	e6ee      	b.n	8009a7c <_strtod_l+0x4dc>
 8009c9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da00      	bge.n	8009ca6 <_strtod_l+0x706>
 8009ca4:	e0d3      	b.n	8009e4e <_strtod_l+0x8ae>
 8009ca6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ca8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009caa:	189d      	adds	r5, r3, r2
 8009cac:	9908      	ldr	r1, [sp, #32]
 8009cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cb0:	1a5b      	subs	r3, r3, r1
 8009cb2:	2136      	movs	r1, #54	; 0x36
 8009cb4:	189b      	adds	r3, r3, r2
 8009cb6:	1a8a      	subs	r2, r1, r2
 8009cb8:	498b      	ldr	r1, [pc, #556]	; (8009ee8 <_strtod_l+0x948>)
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2001      	movs	r0, #1
 8009cbe:	428b      	cmp	r3, r1
 8009cc0:	db00      	blt.n	8009cc4 <_strtod_l+0x724>
 8009cc2:	e0cf      	b.n	8009e64 <_strtod_l+0x8c4>
 8009cc4:	1ac9      	subs	r1, r1, r3
 8009cc6:	1a52      	subs	r2, r2, r1
 8009cc8:	291f      	cmp	r1, #31
 8009cca:	dd00      	ble.n	8009cce <_strtod_l+0x72e>
 8009ccc:	e0c3      	b.n	8009e56 <_strtod_l+0x8b6>
 8009cce:	4088      	lsls	r0, r1
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9014      	str	r0, [sp, #80]	; 0x50
 8009cd4:	9312      	str	r3, [sp, #72]	; 0x48
 8009cd6:	18ab      	adds	r3, r5, r2
 8009cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8009cda:	18a4      	adds	r4, r4, r2
 8009cdc:	9b08      	ldr	r3, [sp, #32]
 8009cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce0:	191c      	adds	r4, r3, r4
 8009ce2:	002b      	movs	r3, r5
 8009ce4:	4295      	cmp	r5, r2
 8009ce6:	dd00      	ble.n	8009cea <_strtod_l+0x74a>
 8009ce8:	0013      	movs	r3, r2
 8009cea:	42a3      	cmp	r3, r4
 8009cec:	dd00      	ble.n	8009cf0 <_strtod_l+0x750>
 8009cee:	0023      	movs	r3, r4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dd04      	ble.n	8009cfe <_strtod_l+0x75e>
 8009cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cf6:	1ae4      	subs	r4, r4, r3
 8009cf8:	1ad2      	subs	r2, r2, r3
 8009cfa:	920c      	str	r2, [sp, #48]	; 0x30
 8009cfc:	1aed      	subs	r5, r5, r3
 8009cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dd17      	ble.n	8009d34 <_strtod_l+0x794>
 8009d04:	001a      	movs	r2, r3
 8009d06:	9907      	ldr	r1, [sp, #28]
 8009d08:	9805      	ldr	r0, [sp, #20]
 8009d0a:	f001 ff97 	bl	800bc3c <__pow5mult>
 8009d0e:	9007      	str	r0, [sp, #28]
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d100      	bne.n	8009d16 <_strtod_l+0x776>
 8009d14:	e6b2      	b.n	8009a7c <_strtod_l+0x4dc>
 8009d16:	0001      	movs	r1, r0
 8009d18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d1a:	9805      	ldr	r0, [sp, #20]
 8009d1c:	f001 fede 	bl	800badc <__multiply>
 8009d20:	9011      	str	r0, [sp, #68]	; 0x44
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d100      	bne.n	8009d28 <_strtod_l+0x788>
 8009d26:	e6a9      	b.n	8009a7c <_strtod_l+0x4dc>
 8009d28:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d2a:	9805      	ldr	r0, [sp, #20]
 8009d2c:	f001 fdc4 	bl	800b8b8 <_Bfree>
 8009d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d32:	9322      	str	r3, [sp, #136]	; 0x88
 8009d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dd00      	ble.n	8009d3c <_strtod_l+0x79c>
 8009d3a:	e096      	b.n	8009e6a <_strtod_l+0x8ca>
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd08      	ble.n	8009d54 <_strtod_l+0x7b4>
 8009d42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d46:	9805      	ldr	r0, [sp, #20]
 8009d48:	f001 ff78 	bl	800bc3c <__pow5mult>
 8009d4c:	9009      	str	r0, [sp, #36]	; 0x24
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d100      	bne.n	8009d54 <_strtod_l+0x7b4>
 8009d52:	e693      	b.n	8009a7c <_strtod_l+0x4dc>
 8009d54:	2c00      	cmp	r4, #0
 8009d56:	dd08      	ble.n	8009d6a <_strtod_l+0x7ca>
 8009d58:	0022      	movs	r2, r4
 8009d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	f001 ffc9 	bl	800bcf4 <__lshift>
 8009d62:	9009      	str	r0, [sp, #36]	; 0x24
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d100      	bne.n	8009d6a <_strtod_l+0x7ca>
 8009d68:	e688      	b.n	8009a7c <_strtod_l+0x4dc>
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	dd08      	ble.n	8009d80 <_strtod_l+0x7e0>
 8009d6e:	002a      	movs	r2, r5
 8009d70:	9907      	ldr	r1, [sp, #28]
 8009d72:	9805      	ldr	r0, [sp, #20]
 8009d74:	f001 ffbe 	bl	800bcf4 <__lshift>
 8009d78:	9007      	str	r0, [sp, #28]
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d100      	bne.n	8009d80 <_strtod_l+0x7e0>
 8009d7e:	e67d      	b.n	8009a7c <_strtod_l+0x4dc>
 8009d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d84:	9805      	ldr	r0, [sp, #20]
 8009d86:	f002 f841 	bl	800be0c <__mdiff>
 8009d8a:	9006      	str	r0, [sp, #24]
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d100      	bne.n	8009d92 <_strtod_l+0x7f2>
 8009d90:	e674      	b.n	8009a7c <_strtod_l+0x4dc>
 8009d92:	2200      	movs	r2, #0
 8009d94:	68c3      	ldr	r3, [r0, #12]
 8009d96:	9907      	ldr	r1, [sp, #28]
 8009d98:	60c2      	str	r2, [r0, #12]
 8009d9a:	9311      	str	r3, [sp, #68]	; 0x44
 8009d9c:	f002 f81a 	bl	800bdd4 <__mcmp>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	da6c      	bge.n	8009e7e <_strtod_l+0x8de>
 8009da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009da6:	4333      	orrs	r3, r6
 8009da8:	d000      	beq.n	8009dac <_strtod_l+0x80c>
 8009daa:	e097      	b.n	8009edc <_strtod_l+0x93c>
 8009dac:	033b      	lsls	r3, r7, #12
 8009dae:	d000      	beq.n	8009db2 <_strtod_l+0x812>
 8009db0:	e094      	b.n	8009edc <_strtod_l+0x93c>
 8009db2:	22d6      	movs	r2, #214	; 0xd6
 8009db4:	4b4d      	ldr	r3, [pc, #308]	; (8009eec <_strtod_l+0x94c>)
 8009db6:	04d2      	lsls	r2, r2, #19
 8009db8:	403b      	ands	r3, r7
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d800      	bhi.n	8009dc0 <_strtod_l+0x820>
 8009dbe:	e08d      	b.n	8009edc <_strtod_l+0x93c>
 8009dc0:	9b06      	ldr	r3, [sp, #24]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <_strtod_l+0x836>
 8009dca:	9b06      	ldr	r3, [sp, #24]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	dc00      	bgt.n	8009dd6 <_strtod_l+0x836>
 8009dd4:	e082      	b.n	8009edc <_strtod_l+0x93c>
 8009dd6:	9906      	ldr	r1, [sp, #24]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	9805      	ldr	r0, [sp, #20]
 8009ddc:	f001 ff8a 	bl	800bcf4 <__lshift>
 8009de0:	9907      	ldr	r1, [sp, #28]
 8009de2:	9006      	str	r0, [sp, #24]
 8009de4:	f001 fff6 	bl	800bdd4 <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	dd77      	ble.n	8009edc <_strtod_l+0x93c>
 8009dec:	9908      	ldr	r1, [sp, #32]
 8009dee:	003b      	movs	r3, r7
 8009df0:	4a3e      	ldr	r2, [pc, #248]	; (8009eec <_strtod_l+0x94c>)
 8009df2:	2900      	cmp	r1, #0
 8009df4:	d100      	bne.n	8009df8 <_strtod_l+0x858>
 8009df6:	e09e      	b.n	8009f36 <_strtod_l+0x996>
 8009df8:	0011      	movs	r1, r2
 8009dfa:	20d6      	movs	r0, #214	; 0xd6
 8009dfc:	4039      	ands	r1, r7
 8009dfe:	04c0      	lsls	r0, r0, #19
 8009e00:	4281      	cmp	r1, r0
 8009e02:	dd00      	ble.n	8009e06 <_strtod_l+0x866>
 8009e04:	e097      	b.n	8009f36 <_strtod_l+0x996>
 8009e06:	23dc      	movs	r3, #220	; 0xdc
 8009e08:	049b      	lsls	r3, r3, #18
 8009e0a:	4299      	cmp	r1, r3
 8009e0c:	dc00      	bgt.n	8009e10 <_strtod_l+0x870>
 8009e0e:	e6a6      	b.n	8009b5e <_strtod_l+0x5be>
 8009e10:	4b37      	ldr	r3, [pc, #220]	; (8009ef0 <_strtod_l+0x950>)
 8009e12:	0030      	movs	r0, r6
 8009e14:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e16:	2300      	movs	r3, #0
 8009e18:	931a      	str	r3, [sp, #104]	; 0x68
 8009e1a:	0039      	movs	r1, r7
 8009e1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e20:	f7f7 fb2c 	bl	800147c <__aeabi_dmul>
 8009e24:	0006      	movs	r6, r0
 8009e26:	000f      	movs	r7, r1
 8009e28:	4308      	orrs	r0, r1
 8009e2a:	d000      	beq.n	8009e2e <_strtod_l+0x88e>
 8009e2c:	e62f      	b.n	8009a8e <_strtod_l+0x4ee>
 8009e2e:	2322      	movs	r3, #34	; 0x22
 8009e30:	9a05      	ldr	r2, [sp, #20]
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	e62b      	b.n	8009a8e <_strtod_l+0x4ee>
 8009e36:	2101      	movs	r1, #1
 8009e38:	3b20      	subs	r3, #32
 8009e3a:	4249      	negs	r1, r1
 8009e3c:	4099      	lsls	r1, r3
 8009e3e:	400a      	ands	r2, r1
 8009e40:	0017      	movs	r7, r2
 8009e42:	e6de      	b.n	8009c02 <_strtod_l+0x662>
 8009e44:	2201      	movs	r2, #1
 8009e46:	4252      	negs	r2, r2
 8009e48:	409a      	lsls	r2, r3
 8009e4a:	4016      	ands	r6, r2
 8009e4c:	e6d9      	b.n	8009c02 <_strtod_l+0x662>
 8009e4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009e52:	1ad4      	subs	r4, r2, r3
 8009e54:	e72a      	b.n	8009cac <_strtod_l+0x70c>
 8009e56:	4927      	ldr	r1, [pc, #156]	; (8009ef4 <_strtod_l+0x954>)
 8009e58:	1acb      	subs	r3, r1, r3
 8009e5a:	0001      	movs	r1, r0
 8009e5c:	4099      	lsls	r1, r3
 8009e5e:	9112      	str	r1, [sp, #72]	; 0x48
 8009e60:	9014      	str	r0, [sp, #80]	; 0x50
 8009e62:	e738      	b.n	8009cd6 <_strtod_l+0x736>
 8009e64:	2300      	movs	r3, #0
 8009e66:	9312      	str	r3, [sp, #72]	; 0x48
 8009e68:	e7fa      	b.n	8009e60 <_strtod_l+0x8c0>
 8009e6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e6c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e6e:	9805      	ldr	r0, [sp, #20]
 8009e70:	f001 ff40 	bl	800bcf4 <__lshift>
 8009e74:	9022      	str	r0, [sp, #136]	; 0x88
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d000      	beq.n	8009e7c <_strtod_l+0x8dc>
 8009e7a:	e75f      	b.n	8009d3c <_strtod_l+0x79c>
 8009e7c:	e5fe      	b.n	8009a7c <_strtod_l+0x4dc>
 8009e7e:	970c      	str	r7, [sp, #48]	; 0x30
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d176      	bne.n	8009f72 <_strtod_l+0x9d2>
 8009e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e86:	033b      	lsls	r3, r7, #12
 8009e88:	0b1b      	lsrs	r3, r3, #12
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	d038      	beq.n	8009f00 <_strtod_l+0x960>
 8009e8e:	4a1a      	ldr	r2, [pc, #104]	; (8009ef8 <_strtod_l+0x958>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d138      	bne.n	8009f06 <_strtod_l+0x966>
 8009e94:	2201      	movs	r2, #1
 8009e96:	9b08      	ldr	r3, [sp, #32]
 8009e98:	4252      	negs	r2, r2
 8009e9a:	0031      	movs	r1, r6
 8009e9c:	0010      	movs	r0, r2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <_strtod_l+0x91a>
 8009ea2:	24d4      	movs	r4, #212	; 0xd4
 8009ea4:	4b11      	ldr	r3, [pc, #68]	; (8009eec <_strtod_l+0x94c>)
 8009ea6:	0010      	movs	r0, r2
 8009ea8:	403b      	ands	r3, r7
 8009eaa:	04e4      	lsls	r4, r4, #19
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	d804      	bhi.n	8009eba <_strtod_l+0x91a>
 8009eb0:	306c      	adds	r0, #108	; 0x6c
 8009eb2:	0d1b      	lsrs	r3, r3, #20
 8009eb4:	1ac3      	subs	r3, r0, r3
 8009eb6:	409a      	lsls	r2, r3
 8009eb8:	0010      	movs	r0, r2
 8009eba:	4281      	cmp	r1, r0
 8009ebc:	d123      	bne.n	8009f06 <_strtod_l+0x966>
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <_strtod_l+0x95c>)
 8009ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d102      	bne.n	8009ecc <_strtod_l+0x92c>
 8009ec6:	1c4b      	adds	r3, r1, #1
 8009ec8:	d100      	bne.n	8009ecc <_strtod_l+0x92c>
 8009eca:	e5d7      	b.n	8009a7c <_strtod_l+0x4dc>
 8009ecc:	4b07      	ldr	r3, [pc, #28]	; (8009eec <_strtod_l+0x94c>)
 8009ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	401a      	ands	r2, r3
 8009ed4:	0013      	movs	r3, r2
 8009ed6:	2280      	movs	r2, #128	; 0x80
 8009ed8:	0352      	lsls	r2, r2, #13
 8009eda:	189f      	adds	r7, r3, r2
 8009edc:	9b08      	ldr	r3, [sp, #32]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d196      	bne.n	8009e10 <_strtod_l+0x870>
 8009ee2:	e5d4      	b.n	8009a8e <_strtod_l+0x4ee>
 8009ee4:	0800db88 	.word	0x0800db88
 8009ee8:	fffffc02 	.word	0xfffffc02
 8009eec:	7ff00000 	.word	0x7ff00000
 8009ef0:	39500000 	.word	0x39500000
 8009ef4:	fffffbe2 	.word	0xfffffbe2
 8009ef8:	000fffff 	.word	0x000fffff
 8009efc:	7fefffff 	.word	0x7fefffff
 8009f00:	4333      	orrs	r3, r6
 8009f02:	d100      	bne.n	8009f06 <_strtod_l+0x966>
 8009f04:	e772      	b.n	8009dec <_strtod_l+0x84c>
 8009f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01d      	beq.n	8009f48 <_strtod_l+0x9a8>
 8009f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f10:	4213      	tst	r3, r2
 8009f12:	d0e3      	beq.n	8009edc <_strtod_l+0x93c>
 8009f14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f16:	0030      	movs	r0, r6
 8009f18:	0039      	movs	r1, r7
 8009f1a:	9a08      	ldr	r2, [sp, #32]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d017      	beq.n	8009f50 <_strtod_l+0x9b0>
 8009f20:	f7ff fb26 	bl	8009570 <sulp>
 8009f24:	0002      	movs	r2, r0
 8009f26:	000b      	movs	r3, r1
 8009f28:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009f2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f2c:	f7f6 fb36 	bl	800059c <__aeabi_dadd>
 8009f30:	0006      	movs	r6, r0
 8009f32:	000f      	movs	r7, r1
 8009f34:	e7d2      	b.n	8009edc <_strtod_l+0x93c>
 8009f36:	2601      	movs	r6, #1
 8009f38:	4013      	ands	r3, r2
 8009f3a:	4a9b      	ldr	r2, [pc, #620]	; (800a1a8 <_strtod_l+0xc08>)
 8009f3c:	4276      	negs	r6, r6
 8009f3e:	189b      	adds	r3, r3, r2
 8009f40:	4a9a      	ldr	r2, [pc, #616]	; (800a1ac <_strtod_l+0xc0c>)
 8009f42:	431a      	orrs	r2, r3
 8009f44:	0017      	movs	r7, r2
 8009f46:	e7c9      	b.n	8009edc <_strtod_l+0x93c>
 8009f48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f4a:	4233      	tst	r3, r6
 8009f4c:	d0c6      	beq.n	8009edc <_strtod_l+0x93c>
 8009f4e:	e7e1      	b.n	8009f14 <_strtod_l+0x974>
 8009f50:	f7ff fb0e 	bl	8009570 <sulp>
 8009f54:	0002      	movs	r2, r0
 8009f56:	000b      	movs	r3, r1
 8009f58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009f5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f5c:	f7f7 fcfa 	bl	8001954 <__aeabi_dsub>
 8009f60:	2200      	movs	r2, #0
 8009f62:	2300      	movs	r3, #0
 8009f64:	0006      	movs	r6, r0
 8009f66:	000f      	movs	r7, r1
 8009f68:	f7f6 fa7a 	bl	8000460 <__aeabi_dcmpeq>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d0b5      	beq.n	8009edc <_strtod_l+0x93c>
 8009f70:	e5f5      	b.n	8009b5e <_strtod_l+0x5be>
 8009f72:	9907      	ldr	r1, [sp, #28]
 8009f74:	9806      	ldr	r0, [sp, #24]
 8009f76:	f002 f8b9 	bl	800c0ec <__ratio>
 8009f7a:	2380      	movs	r3, #128	; 0x80
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	05db      	lsls	r3, r3, #23
 8009f80:	0004      	movs	r4, r0
 8009f82:	000d      	movs	r5, r1
 8009f84:	f7f6 fa7c 	bl	8000480 <__aeabi_dcmple>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d079      	beq.n	800a080 <_strtod_l+0xae0>
 8009f8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d04b      	beq.n	800a02a <_strtod_l+0xa8a>
 8009f92:	2300      	movs	r3, #0
 8009f94:	4c86      	ldr	r4, [pc, #536]	; (800a1b0 <_strtod_l+0xc10>)
 8009f96:	2500      	movs	r5, #0
 8009f98:	9312      	str	r3, [sp, #72]	; 0x48
 8009f9a:	9413      	str	r4, [sp, #76]	; 0x4c
 8009f9c:	4c84      	ldr	r4, [pc, #528]	; (800a1b0 <_strtod_l+0xc10>)
 8009f9e:	4a85      	ldr	r2, [pc, #532]	; (800a1b4 <_strtod_l+0xc14>)
 8009fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	9314      	str	r3, [sp, #80]	; 0x50
 8009fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fa8:	4b83      	ldr	r3, [pc, #524]	; (800a1b8 <_strtod_l+0xc18>)
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d000      	beq.n	8009fb0 <_strtod_l+0xa10>
 8009fae:	e0b0      	b.n	800a112 <_strtod_l+0xb72>
 8009fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fb4:	921a      	str	r2, [sp, #104]	; 0x68
 8009fb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8009fb8:	4a80      	ldr	r2, [pc, #512]	; (800a1bc <_strtod_l+0xc1c>)
 8009fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fbc:	4694      	mov	ip, r2
 8009fbe:	4463      	add	r3, ip
 8009fc0:	001f      	movs	r7, r3
 8009fc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fc6:	0030      	movs	r0, r6
 8009fc8:	0039      	movs	r1, r7
 8009fca:	920c      	str	r2, [sp, #48]	; 0x30
 8009fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8009fce:	f001 ffb5 	bl	800bf3c <__ulp>
 8009fd2:	0002      	movs	r2, r0
 8009fd4:	000b      	movs	r3, r1
 8009fd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009fd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fda:	f7f7 fa4f 	bl	800147c <__aeabi_dmul>
 8009fde:	0032      	movs	r2, r6
 8009fe0:	003b      	movs	r3, r7
 8009fe2:	f7f6 fadb 	bl	800059c <__aeabi_dadd>
 8009fe6:	4a73      	ldr	r2, [pc, #460]	; (800a1b4 <_strtod_l+0xc14>)
 8009fe8:	4b75      	ldr	r3, [pc, #468]	; (800a1c0 <_strtod_l+0xc20>)
 8009fea:	0006      	movs	r6, r0
 8009fec:	400a      	ands	r2, r1
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d95e      	bls.n	800a0b0 <_strtod_l+0xb10>
 8009ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff4:	4a73      	ldr	r2, [pc, #460]	; (800a1c4 <_strtod_l+0xc24>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d103      	bne.n	800a002 <_strtod_l+0xa62>
 8009ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	d100      	bne.n	800a002 <_strtod_l+0xa62>
 800a000:	e53c      	b.n	8009a7c <_strtod_l+0x4dc>
 800a002:	2601      	movs	r6, #1
 800a004:	4f6f      	ldr	r7, [pc, #444]	; (800a1c4 <_strtod_l+0xc24>)
 800a006:	4276      	negs	r6, r6
 800a008:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a00a:	9805      	ldr	r0, [sp, #20]
 800a00c:	f001 fc54 	bl	800b8b8 <_Bfree>
 800a010:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	f001 fc50 	bl	800b8b8 <_Bfree>
 800a018:	9907      	ldr	r1, [sp, #28]
 800a01a:	9805      	ldr	r0, [sp, #20]
 800a01c:	f001 fc4c 	bl	800b8b8 <_Bfree>
 800a020:	9906      	ldr	r1, [sp, #24]
 800a022:	9805      	ldr	r0, [sp, #20]
 800a024:	f001 fc48 	bl	800b8b8 <_Bfree>
 800a028:	e60f      	b.n	8009c4a <_strtod_l+0x6aa>
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	d11c      	bne.n	800a068 <_strtod_l+0xac8>
 800a02e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a030:	031b      	lsls	r3, r3, #12
 800a032:	d11f      	bne.n	800a074 <_strtod_l+0xad4>
 800a034:	2200      	movs	r2, #0
 800a036:	0020      	movs	r0, r4
 800a038:	0029      	movs	r1, r5
 800a03a:	4b5d      	ldr	r3, [pc, #372]	; (800a1b0 <_strtod_l+0xc10>)
 800a03c:	f7f6 fa16 	bl	800046c <__aeabi_dcmplt>
 800a040:	2800      	cmp	r0, #0
 800a042:	d11a      	bne.n	800a07a <_strtod_l+0xada>
 800a044:	0020      	movs	r0, r4
 800a046:	0029      	movs	r1, r5
 800a048:	2200      	movs	r2, #0
 800a04a:	4b5f      	ldr	r3, [pc, #380]	; (800a1c8 <_strtod_l+0xc28>)
 800a04c:	f7f7 fa16 	bl	800147c <__aeabi_dmul>
 800a050:	0005      	movs	r5, r0
 800a052:	000c      	movs	r4, r1
 800a054:	2380      	movs	r3, #128	; 0x80
 800a056:	061b      	lsls	r3, r3, #24
 800a058:	18e3      	adds	r3, r4, r3
 800a05a:	951e      	str	r5, [sp, #120]	; 0x78
 800a05c:	931f      	str	r3, [sp, #124]	; 0x7c
 800a05e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a060:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a062:	9212      	str	r2, [sp, #72]	; 0x48
 800a064:	9313      	str	r3, [sp, #76]	; 0x4c
 800a066:	e79a      	b.n	8009f9e <_strtod_l+0x9fe>
 800a068:	2e01      	cmp	r6, #1
 800a06a:	d103      	bne.n	800a074 <_strtod_l+0xad4>
 800a06c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d100      	bne.n	800a074 <_strtod_l+0xad4>
 800a072:	e574      	b.n	8009b5e <_strtod_l+0x5be>
 800a074:	2300      	movs	r3, #0
 800a076:	4c55      	ldr	r4, [pc, #340]	; (800a1cc <_strtod_l+0xc2c>)
 800a078:	e78d      	b.n	8009f96 <_strtod_l+0x9f6>
 800a07a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a07c:	4c52      	ldr	r4, [pc, #328]	; (800a1c8 <_strtod_l+0xc28>)
 800a07e:	e7e9      	b.n	800a054 <_strtod_l+0xab4>
 800a080:	2200      	movs	r2, #0
 800a082:	0020      	movs	r0, r4
 800a084:	0029      	movs	r1, r5
 800a086:	4b50      	ldr	r3, [pc, #320]	; (800a1c8 <_strtod_l+0xc28>)
 800a088:	f7f7 f9f8 	bl	800147c <__aeabi_dmul>
 800a08c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a08e:	0005      	movs	r5, r0
 800a090:	000b      	movs	r3, r1
 800a092:	000c      	movs	r4, r1
 800a094:	2a00      	cmp	r2, #0
 800a096:	d107      	bne.n	800a0a8 <_strtod_l+0xb08>
 800a098:	2280      	movs	r2, #128	; 0x80
 800a09a:	0612      	lsls	r2, r2, #24
 800a09c:	188b      	adds	r3, r1, r2
 800a09e:	9016      	str	r0, [sp, #88]	; 0x58
 800a0a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0a6:	e7dc      	b.n	800a062 <_strtod_l+0xac2>
 800a0a8:	0002      	movs	r2, r0
 800a0aa:	9216      	str	r2, [sp, #88]	; 0x58
 800a0ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0ae:	e7f8      	b.n	800a0a2 <_strtod_l+0xb02>
 800a0b0:	23d4      	movs	r3, #212	; 0xd4
 800a0b2:	049b      	lsls	r3, r3, #18
 800a0b4:	18cf      	adds	r7, r1, r3
 800a0b6:	9b08      	ldr	r3, [sp, #32]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1a5      	bne.n	800a008 <_strtod_l+0xa68>
 800a0bc:	4b3d      	ldr	r3, [pc, #244]	; (800a1b4 <_strtod_l+0xc14>)
 800a0be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0c0:	403b      	ands	r3, r7
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d1a0      	bne.n	800a008 <_strtod_l+0xa68>
 800a0c6:	0028      	movs	r0, r5
 800a0c8:	0021      	movs	r1, r4
 800a0ca:	f7f6 fa15 	bl	80004f8 <__aeabi_d2lz>
 800a0ce:	f7f6 fa4f 	bl	8000570 <__aeabi_l2d>
 800a0d2:	0002      	movs	r2, r0
 800a0d4:	000b      	movs	r3, r1
 800a0d6:	0028      	movs	r0, r5
 800a0d8:	0021      	movs	r1, r4
 800a0da:	f7f7 fc3b 	bl	8001954 <__aeabi_dsub>
 800a0de:	033b      	lsls	r3, r7, #12
 800a0e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0e2:	0b1b      	lsrs	r3, r3, #12
 800a0e4:	4333      	orrs	r3, r6
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	0004      	movs	r4, r0
 800a0ea:	000d      	movs	r5, r1
 800a0ec:	4a38      	ldr	r2, [pc, #224]	; (800a1d0 <_strtod_l+0xc30>)
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d055      	beq.n	800a19e <_strtod_l+0xbfe>
 800a0f2:	4b38      	ldr	r3, [pc, #224]	; (800a1d4 <_strtod_l+0xc34>)
 800a0f4:	f7f6 f9ba 	bl	800046c <__aeabi_dcmplt>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d000      	beq.n	800a0fe <_strtod_l+0xb5e>
 800a0fc:	e4c7      	b.n	8009a8e <_strtod_l+0x4ee>
 800a0fe:	0020      	movs	r0, r4
 800a100:	0029      	movs	r1, r5
 800a102:	4a35      	ldr	r2, [pc, #212]	; (800a1d8 <_strtod_l+0xc38>)
 800a104:	4b30      	ldr	r3, [pc, #192]	; (800a1c8 <_strtod_l+0xc28>)
 800a106:	f7f6 f9c5 	bl	8000494 <__aeabi_dcmpgt>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d100      	bne.n	800a110 <_strtod_l+0xb70>
 800a10e:	e77b      	b.n	800a008 <_strtod_l+0xa68>
 800a110:	e4bd      	b.n	8009a8e <_strtod_l+0x4ee>
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d02b      	beq.n	800a170 <_strtod_l+0xbd0>
 800a118:	23d4      	movs	r3, #212	; 0xd4
 800a11a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a11c:	04db      	lsls	r3, r3, #19
 800a11e:	429a      	cmp	r2, r3
 800a120:	d826      	bhi.n	800a170 <_strtod_l+0xbd0>
 800a122:	0028      	movs	r0, r5
 800a124:	0021      	movs	r1, r4
 800a126:	4a2d      	ldr	r2, [pc, #180]	; (800a1dc <_strtod_l+0xc3c>)
 800a128:	4b2d      	ldr	r3, [pc, #180]	; (800a1e0 <_strtod_l+0xc40>)
 800a12a:	f7f6 f9a9 	bl	8000480 <__aeabi_dcmple>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d017      	beq.n	800a162 <_strtod_l+0xbc2>
 800a132:	0028      	movs	r0, r5
 800a134:	0021      	movs	r1, r4
 800a136:	f7f6 f9c1 	bl	80004bc <__aeabi_d2uiz>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d100      	bne.n	800a140 <_strtod_l+0xba0>
 800a13e:	3001      	adds	r0, #1
 800a140:	f7f8 f81e 	bl	8002180 <__aeabi_ui2d>
 800a144:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a146:	0005      	movs	r5, r0
 800a148:	000b      	movs	r3, r1
 800a14a:	000c      	movs	r4, r1
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d122      	bne.n	800a196 <_strtod_l+0xbf6>
 800a150:	2280      	movs	r2, #128	; 0x80
 800a152:	0612      	lsls	r2, r2, #24
 800a154:	188b      	adds	r3, r1, r2
 800a156:	9018      	str	r0, [sp, #96]	; 0x60
 800a158:	9319      	str	r3, [sp, #100]	; 0x64
 800a15a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a15c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a15e:	9212      	str	r2, [sp, #72]	; 0x48
 800a160:	9313      	str	r3, [sp, #76]	; 0x4c
 800a162:	22d6      	movs	r2, #214	; 0xd6
 800a164:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a166:	04d2      	lsls	r2, r2, #19
 800a168:	189b      	adds	r3, r3, r2
 800a16a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a16c:	1a9b      	subs	r3, r3, r2
 800a16e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a170:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a172:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a174:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a176:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a178:	f001 fee0 	bl	800bf3c <__ulp>
 800a17c:	0002      	movs	r2, r0
 800a17e:	000b      	movs	r3, r1
 800a180:	0030      	movs	r0, r6
 800a182:	0039      	movs	r1, r7
 800a184:	f7f7 f97a 	bl	800147c <__aeabi_dmul>
 800a188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a18c:	f7f6 fa06 	bl	800059c <__aeabi_dadd>
 800a190:	0006      	movs	r6, r0
 800a192:	000f      	movs	r7, r1
 800a194:	e78f      	b.n	800a0b6 <_strtod_l+0xb16>
 800a196:	0002      	movs	r2, r0
 800a198:	9218      	str	r2, [sp, #96]	; 0x60
 800a19a:	9319      	str	r3, [sp, #100]	; 0x64
 800a19c:	e7dd      	b.n	800a15a <_strtod_l+0xbba>
 800a19e:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <_strtod_l+0xc44>)
 800a1a0:	f7f6 f964 	bl	800046c <__aeabi_dcmplt>
 800a1a4:	e7b1      	b.n	800a10a <_strtod_l+0xb6a>
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	fff00000 	.word	0xfff00000
 800a1ac:	000fffff 	.word	0x000fffff
 800a1b0:	3ff00000 	.word	0x3ff00000
 800a1b4:	7ff00000 	.word	0x7ff00000
 800a1b8:	7fe00000 	.word	0x7fe00000
 800a1bc:	fcb00000 	.word	0xfcb00000
 800a1c0:	7c9fffff 	.word	0x7c9fffff
 800a1c4:	7fefffff 	.word	0x7fefffff
 800a1c8:	3fe00000 	.word	0x3fe00000
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	94a03595 	.word	0x94a03595
 800a1d4:	3fdfffff 	.word	0x3fdfffff
 800a1d8:	35afe535 	.word	0x35afe535
 800a1dc:	ffc00000 	.word	0xffc00000
 800a1e0:	41dfffff 	.word	0x41dfffff
 800a1e4:	3fcfffff 	.word	0x3fcfffff

0800a1e8 <_strtod_r>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <_strtod_r+0xc>)
 800a1ec:	f7ff f9d8 	bl	80095a0 <_strtod_l>
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	20000074 	.word	0x20000074

0800a1f8 <_strtol_l.isra.0>:
 800a1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	001e      	movs	r6, r3
 800a1fe:	9005      	str	r0, [sp, #20]
 800a200:	9101      	str	r1, [sp, #4]
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d045      	beq.n	800a294 <_strtol_l.isra.0+0x9c>
 800a208:	0008      	movs	r0, r1
 800a20a:	2b24      	cmp	r3, #36	; 0x24
 800a20c:	d842      	bhi.n	800a294 <_strtol_l.isra.0+0x9c>
 800a20e:	4b3f      	ldr	r3, [pc, #252]	; (800a30c <_strtol_l.isra.0+0x114>)
 800a210:	2208      	movs	r2, #8
 800a212:	469c      	mov	ip, r3
 800a214:	0003      	movs	r3, r0
 800a216:	4661      	mov	r1, ip
 800a218:	781c      	ldrb	r4, [r3, #0]
 800a21a:	1c45      	adds	r5, r0, #1
 800a21c:	5d09      	ldrb	r1, [r1, r4]
 800a21e:	0028      	movs	r0, r5
 800a220:	000f      	movs	r7, r1
 800a222:	4017      	ands	r7, r2
 800a224:	4211      	tst	r1, r2
 800a226:	d1f5      	bne.n	800a214 <_strtol_l.isra.0+0x1c>
 800a228:	2c2d      	cmp	r4, #45	; 0x2d
 800a22a:	d13a      	bne.n	800a2a2 <_strtol_l.isra.0+0xaa>
 800a22c:	2701      	movs	r7, #1
 800a22e:	782c      	ldrb	r4, [r5, #0]
 800a230:	1c9d      	adds	r5, r3, #2
 800a232:	2e00      	cmp	r6, #0
 800a234:	d065      	beq.n	800a302 <_strtol_l.isra.0+0x10a>
 800a236:	2e10      	cmp	r6, #16
 800a238:	d109      	bne.n	800a24e <_strtol_l.isra.0+0x56>
 800a23a:	2c30      	cmp	r4, #48	; 0x30
 800a23c:	d107      	bne.n	800a24e <_strtol_l.isra.0+0x56>
 800a23e:	2220      	movs	r2, #32
 800a240:	782b      	ldrb	r3, [r5, #0]
 800a242:	4393      	bics	r3, r2
 800a244:	2b58      	cmp	r3, #88	; 0x58
 800a246:	d157      	bne.n	800a2f8 <_strtol_l.isra.0+0x100>
 800a248:	2610      	movs	r6, #16
 800a24a:	786c      	ldrb	r4, [r5, #1]
 800a24c:	3502      	adds	r5, #2
 800a24e:	4b30      	ldr	r3, [pc, #192]	; (800a310 <_strtol_l.isra.0+0x118>)
 800a250:	0031      	movs	r1, r6
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	0018      	movs	r0, r3
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	f7f6 f802 	bl	8000260 <__aeabi_uidivmod>
 800a25c:	2300      	movs	r3, #0
 800a25e:	2201      	movs	r2, #1
 800a260:	4684      	mov	ip, r0
 800a262:	0018      	movs	r0, r3
 800a264:	9104      	str	r1, [sp, #16]
 800a266:	4252      	negs	r2, r2
 800a268:	0021      	movs	r1, r4
 800a26a:	3930      	subs	r1, #48	; 0x30
 800a26c:	2909      	cmp	r1, #9
 800a26e:	d81d      	bhi.n	800a2ac <_strtol_l.isra.0+0xb4>
 800a270:	000c      	movs	r4, r1
 800a272:	42a6      	cmp	r6, r4
 800a274:	dd28      	ble.n	800a2c8 <_strtol_l.isra.0+0xd0>
 800a276:	2b00      	cmp	r3, #0
 800a278:	db24      	blt.n	800a2c4 <_strtol_l.isra.0+0xcc>
 800a27a:	0013      	movs	r3, r2
 800a27c:	4584      	cmp	ip, r0
 800a27e:	d306      	bcc.n	800a28e <_strtol_l.isra.0+0x96>
 800a280:	d102      	bne.n	800a288 <_strtol_l.isra.0+0x90>
 800a282:	9904      	ldr	r1, [sp, #16]
 800a284:	42a1      	cmp	r1, r4
 800a286:	db02      	blt.n	800a28e <_strtol_l.isra.0+0x96>
 800a288:	2301      	movs	r3, #1
 800a28a:	4370      	muls	r0, r6
 800a28c:	1820      	adds	r0, r4, r0
 800a28e:	782c      	ldrb	r4, [r5, #0]
 800a290:	3501      	adds	r5, #1
 800a292:	e7e9      	b.n	800a268 <_strtol_l.isra.0+0x70>
 800a294:	f7fe fa16 	bl	80086c4 <__errno>
 800a298:	2316      	movs	r3, #22
 800a29a:	6003      	str	r3, [r0, #0]
 800a29c:	2000      	movs	r0, #0
 800a29e:	b007      	add	sp, #28
 800a2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a2:	2c2b      	cmp	r4, #43	; 0x2b
 800a2a4:	d1c5      	bne.n	800a232 <_strtol_l.isra.0+0x3a>
 800a2a6:	782c      	ldrb	r4, [r5, #0]
 800a2a8:	1c9d      	adds	r5, r3, #2
 800a2aa:	e7c2      	b.n	800a232 <_strtol_l.isra.0+0x3a>
 800a2ac:	0021      	movs	r1, r4
 800a2ae:	3941      	subs	r1, #65	; 0x41
 800a2b0:	2919      	cmp	r1, #25
 800a2b2:	d801      	bhi.n	800a2b8 <_strtol_l.isra.0+0xc0>
 800a2b4:	3c37      	subs	r4, #55	; 0x37
 800a2b6:	e7dc      	b.n	800a272 <_strtol_l.isra.0+0x7a>
 800a2b8:	0021      	movs	r1, r4
 800a2ba:	3961      	subs	r1, #97	; 0x61
 800a2bc:	2919      	cmp	r1, #25
 800a2be:	d803      	bhi.n	800a2c8 <_strtol_l.isra.0+0xd0>
 800a2c0:	3c57      	subs	r4, #87	; 0x57
 800a2c2:	e7d6      	b.n	800a272 <_strtol_l.isra.0+0x7a>
 800a2c4:	0013      	movs	r3, r2
 800a2c6:	e7e2      	b.n	800a28e <_strtol_l.isra.0+0x96>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da09      	bge.n	800a2e0 <_strtol_l.isra.0+0xe8>
 800a2cc:	2322      	movs	r3, #34	; 0x22
 800a2ce:	9a05      	ldr	r2, [sp, #20]
 800a2d0:	9803      	ldr	r0, [sp, #12]
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	9b02      	ldr	r3, [sp, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0e1      	beq.n	800a29e <_strtol_l.isra.0+0xa6>
 800a2da:	1e6b      	subs	r3, r5, #1
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	e007      	b.n	800a2f0 <_strtol_l.isra.0+0xf8>
 800a2e0:	2f00      	cmp	r7, #0
 800a2e2:	d000      	beq.n	800a2e6 <_strtol_l.isra.0+0xee>
 800a2e4:	4240      	negs	r0, r0
 800a2e6:	9a02      	ldr	r2, [sp, #8]
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	d0d8      	beq.n	800a29e <_strtol_l.isra.0+0xa6>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1f4      	bne.n	800a2da <_strtol_l.isra.0+0xe2>
 800a2f0:	9b02      	ldr	r3, [sp, #8]
 800a2f2:	9a01      	ldr	r2, [sp, #4]
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	e7d2      	b.n	800a29e <_strtol_l.isra.0+0xa6>
 800a2f8:	2430      	movs	r4, #48	; 0x30
 800a2fa:	2e00      	cmp	r6, #0
 800a2fc:	d1a7      	bne.n	800a24e <_strtol_l.isra.0+0x56>
 800a2fe:	3608      	adds	r6, #8
 800a300:	e7a5      	b.n	800a24e <_strtol_l.isra.0+0x56>
 800a302:	2c30      	cmp	r4, #48	; 0x30
 800a304:	d09b      	beq.n	800a23e <_strtol_l.isra.0+0x46>
 800a306:	260a      	movs	r6, #10
 800a308:	e7a1      	b.n	800a24e <_strtol_l.isra.0+0x56>
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	0800dbb1 	.word	0x0800dbb1
 800a310:	7fffffff 	.word	0x7fffffff

0800a314 <_strtol_r>:
 800a314:	b510      	push	{r4, lr}
 800a316:	f7ff ff6f 	bl	800a1f8 <_strtol_l.isra.0>
 800a31a:	bd10      	pop	{r4, pc}

0800a31c <_write_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	0004      	movs	r4, r0
 800a320:	0008      	movs	r0, r1
 800a322:	0011      	movs	r1, r2
 800a324:	001a      	movs	r2, r3
 800a326:	2300      	movs	r3, #0
 800a328:	4d05      	ldr	r5, [pc, #20]	; (800a340 <_write_r+0x24>)
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	f7f9 ffa9 	bl	8004282 <_write>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d103      	bne.n	800a33c <_write_r+0x20>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d000      	beq.n	800a33c <_write_r+0x20>
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	bd70      	pop	{r4, r5, r6, pc}
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	200005b0 	.word	0x200005b0

0800a344 <_close_r>:
 800a344:	2300      	movs	r3, #0
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_close_r+0x20>)
 800a34a:	0004      	movs	r4, r0
 800a34c:	0008      	movs	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f9 ffb3 	bl	80042ba <_close>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d103      	bne.n	800a360 <_close_r+0x1c>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d000      	beq.n	800a360 <_close_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	200005b0 	.word	0x200005b0

0800a368 <quorem>:
 800a368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a36a:	0006      	movs	r6, r0
 800a36c:	690d      	ldr	r5, [r1, #16]
 800a36e:	6933      	ldr	r3, [r6, #16]
 800a370:	b087      	sub	sp, #28
 800a372:	2000      	movs	r0, #0
 800a374:	9102      	str	r1, [sp, #8]
 800a376:	42ab      	cmp	r3, r5
 800a378:	db6b      	blt.n	800a452 <quorem+0xea>
 800a37a:	000b      	movs	r3, r1
 800a37c:	3d01      	subs	r5, #1
 800a37e:	00ac      	lsls	r4, r5, #2
 800a380:	3314      	adds	r3, #20
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	191b      	adds	r3, r3, r4
 800a386:	9303      	str	r3, [sp, #12]
 800a388:	0033      	movs	r3, r6
 800a38a:	3314      	adds	r3, #20
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	191c      	adds	r4, r3, r4
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	6827      	ldr	r7, [r4, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	0038      	movs	r0, r7
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	0019      	movs	r1, r3
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	f7f5 fed8 	bl	8000154 <__udivsi3>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	9000      	str	r0, [sp, #0]
 800a3a8:	429f      	cmp	r7, r3
 800a3aa:	d329      	bcc.n	800a400 <quorem+0x98>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	469c      	mov	ip, r3
 800a3b0:	9801      	ldr	r0, [sp, #4]
 800a3b2:	9f05      	ldr	r7, [sp, #20]
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	cf08      	ldmia	r7!, {r3}
 800a3b8:	9a00      	ldr	r2, [sp, #0]
 800a3ba:	b299      	uxth	r1, r3
 800a3bc:	4351      	muls	r1, r2
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	4353      	muls	r3, r2
 800a3c2:	4461      	add	r1, ip
 800a3c4:	0c0a      	lsrs	r2, r1, #16
 800a3c6:	189b      	adds	r3, r3, r2
 800a3c8:	0c1a      	lsrs	r2, r3, #16
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	6803      	ldr	r3, [r0, #0]
 800a3ce:	4694      	mov	ip, r2
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	9b04      	ldr	r3, [sp, #16]
 800a3d4:	b289      	uxth	r1, r1
 800a3d6:	18d2      	adds	r2, r2, r3
 800a3d8:	6803      	ldr	r3, [r0, #0]
 800a3da:	1a52      	subs	r2, r2, r1
 800a3dc:	0c19      	lsrs	r1, r3, #16
 800a3de:	466b      	mov	r3, sp
 800a3e0:	8a9b      	ldrh	r3, [r3, #20]
 800a3e2:	1acb      	subs	r3, r1, r3
 800a3e4:	1411      	asrs	r1, r2, #16
 800a3e6:	185b      	adds	r3, r3, r1
 800a3e8:	1419      	asrs	r1, r3, #16
 800a3ea:	b292      	uxth	r2, r2
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	9104      	str	r1, [sp, #16]
 800a3f4:	c004      	stmia	r0!, {r2}
 800a3f6:	42bb      	cmp	r3, r7
 800a3f8:	d2dd      	bcs.n	800a3b6 <quorem+0x4e>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d02e      	beq.n	800a45e <quorem+0xf6>
 800a400:	0030      	movs	r0, r6
 800a402:	9902      	ldr	r1, [sp, #8]
 800a404:	f001 fce6 	bl	800bdd4 <__mcmp>
 800a408:	2800      	cmp	r0, #0
 800a40a:	db21      	blt.n	800a450 <quorem+0xe8>
 800a40c:	0030      	movs	r0, r6
 800a40e:	2400      	movs	r4, #0
 800a410:	9b00      	ldr	r3, [sp, #0]
 800a412:	9902      	ldr	r1, [sp, #8]
 800a414:	3301      	adds	r3, #1
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	3014      	adds	r0, #20
 800a41a:	3114      	adds	r1, #20
 800a41c:	6802      	ldr	r2, [r0, #0]
 800a41e:	c908      	ldmia	r1!, {r3}
 800a420:	b292      	uxth	r2, r2
 800a422:	1914      	adds	r4, r2, r4
 800a424:	b29a      	uxth	r2, r3
 800a426:	1aa2      	subs	r2, r4, r2
 800a428:	6804      	ldr	r4, [r0, #0]
 800a42a:	0c1b      	lsrs	r3, r3, #16
 800a42c:	0c24      	lsrs	r4, r4, #16
 800a42e:	1ae3      	subs	r3, r4, r3
 800a430:	1414      	asrs	r4, r2, #16
 800a432:	191b      	adds	r3, r3, r4
 800a434:	141c      	asrs	r4, r3, #16
 800a436:	b292      	uxth	r2, r2
 800a438:	041b      	lsls	r3, r3, #16
 800a43a:	4313      	orrs	r3, r2
 800a43c:	c008      	stmia	r0!, {r3}
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	428b      	cmp	r3, r1
 800a442:	d2eb      	bcs.n	800a41c <quorem+0xb4>
 800a444:	9a01      	ldr	r2, [sp, #4]
 800a446:	00ab      	lsls	r3, r5, #2
 800a448:	18d3      	adds	r3, r2, r3
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	d010      	beq.n	800a472 <quorem+0x10a>
 800a450:	9800      	ldr	r0, [sp, #0]
 800a452:	b007      	add	sp, #28
 800a454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <quorem+0xfe>
 800a45c:	3d01      	subs	r5, #1
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	3c04      	subs	r4, #4
 800a462:	42a3      	cmp	r3, r4
 800a464:	d3f7      	bcc.n	800a456 <quorem+0xee>
 800a466:	6135      	str	r5, [r6, #16]
 800a468:	e7ca      	b.n	800a400 <quorem+0x98>
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d104      	bne.n	800a47a <quorem+0x112>
 800a470:	3d01      	subs	r5, #1
 800a472:	9a01      	ldr	r2, [sp, #4]
 800a474:	3b04      	subs	r3, #4
 800a476:	429a      	cmp	r2, r3
 800a478:	d3f7      	bcc.n	800a46a <quorem+0x102>
 800a47a:	6135      	str	r5, [r6, #16]
 800a47c:	e7e8      	b.n	800a450 <quorem+0xe8>
	...

0800a480 <_dtoa_r>:
 800a480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a482:	b09d      	sub	sp, #116	; 0x74
 800a484:	9202      	str	r2, [sp, #8]
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	9b02      	ldr	r3, [sp, #8]
 800a48a:	9c03      	ldr	r4, [sp, #12]
 800a48c:	930a      	str	r3, [sp, #40]	; 0x28
 800a48e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a490:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a492:	0007      	movs	r7, r0
 800a494:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a496:	2c00      	cmp	r4, #0
 800a498:	d10e      	bne.n	800a4b8 <_dtoa_r+0x38>
 800a49a:	2010      	movs	r0, #16
 800a49c:	f001 f998 	bl	800b7d0 <malloc>
 800a4a0:	1e02      	subs	r2, r0, #0
 800a4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a4a4:	d104      	bne.n	800a4b0 <_dtoa_r+0x30>
 800a4a6:	21ea      	movs	r1, #234	; 0xea
 800a4a8:	4bc0      	ldr	r3, [pc, #768]	; (800a7ac <_dtoa_r+0x32c>)
 800a4aa:	48c1      	ldr	r0, [pc, #772]	; (800a7b0 <_dtoa_r+0x330>)
 800a4ac:	f002 fd2e 	bl	800cf0c <__assert_func>
 800a4b0:	6044      	str	r4, [r0, #4]
 800a4b2:	6084      	str	r4, [r0, #8]
 800a4b4:	6004      	str	r4, [r0, #0]
 800a4b6:	60c4      	str	r4, [r0, #12]
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	6819      	ldr	r1, [r3, #0]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d00a      	beq.n	800a4d6 <_dtoa_r+0x56>
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4093      	lsls	r3, r2
 800a4c6:	604a      	str	r2, [r1, #4]
 800a4c8:	608b      	str	r3, [r1, #8]
 800a4ca:	0038      	movs	r0, r7
 800a4cc:	f001 f9f4 	bl	800b8b8 <_Bfree>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da21      	bge.n	800a520 <_dtoa_r+0xa0>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	602b      	str	r3, [r5, #0]
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a4ea:	4bb2      	ldr	r3, [pc, #712]	; (800a7b4 <_dtoa_r+0x334>)
 800a4ec:	002a      	movs	r2, r5
 800a4ee:	9318      	str	r3, [sp, #96]	; 0x60
 800a4f0:	401a      	ands	r2, r3
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d117      	bne.n	800a526 <_dtoa_r+0xa6>
 800a4f6:	4bb0      	ldr	r3, [pc, #704]	; (800a7b8 <_dtoa_r+0x338>)
 800a4f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4fa:	0328      	lsls	r0, r5, #12
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	9b02      	ldr	r3, [sp, #8]
 800a500:	0b00      	lsrs	r0, r0, #12
 800a502:	4318      	orrs	r0, r3
 800a504:	d101      	bne.n	800a50a <_dtoa_r+0x8a>
 800a506:	f000 fdc3 	bl	800b090 <_dtoa_r+0xc10>
 800a50a:	48ac      	ldr	r0, [pc, #688]	; (800a7bc <_dtoa_r+0x33c>)
 800a50c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a50e:	9005      	str	r0, [sp, #20]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <_dtoa_r+0x9a>
 800a514:	4baa      	ldr	r3, [pc, #680]	; (800a7c0 <_dtoa_r+0x340>)
 800a516:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	9805      	ldr	r0, [sp, #20]
 800a51c:	b01d      	add	sp, #116	; 0x74
 800a51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a520:	2300      	movs	r3, #0
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	e7e0      	b.n	800a4e8 <_dtoa_r+0x68>
 800a526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a528:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a52a:	9312      	str	r3, [sp, #72]	; 0x48
 800a52c:	9413      	str	r4, [sp, #76]	; 0x4c
 800a52e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a530:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a532:	2200      	movs	r2, #0
 800a534:	2300      	movs	r3, #0
 800a536:	f7f5 ff93 	bl	8000460 <__aeabi_dcmpeq>
 800a53a:	1e04      	subs	r4, r0, #0
 800a53c:	d00b      	beq.n	800a556 <_dtoa_r+0xd6>
 800a53e:	2301      	movs	r3, #1
 800a540:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	4b9f      	ldr	r3, [pc, #636]	; (800a7c4 <_dtoa_r+0x344>)
 800a546:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	d0e5      	beq.n	800a51a <_dtoa_r+0x9a>
 800a54e:	4a9e      	ldr	r2, [pc, #632]	; (800a7c8 <_dtoa_r+0x348>)
 800a550:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a552:	600a      	str	r2, [r1, #0]
 800a554:	e7e1      	b.n	800a51a <_dtoa_r+0x9a>
 800a556:	ab1a      	add	r3, sp, #104	; 0x68
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	0038      	movs	r0, r7
 800a560:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a564:	f001 fd5e 	bl	800c024 <__d2b>
 800a568:	006e      	lsls	r6, r5, #1
 800a56a:	9004      	str	r0, [sp, #16]
 800a56c:	0d76      	lsrs	r6, r6, #21
 800a56e:	d100      	bne.n	800a572 <_dtoa_r+0xf2>
 800a570:	e07c      	b.n	800a66c <_dtoa_r+0x1ec>
 800a572:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a574:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a576:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a578:	4a94      	ldr	r2, [pc, #592]	; (800a7cc <_dtoa_r+0x34c>)
 800a57a:	031b      	lsls	r3, r3, #12
 800a57c:	0b1b      	lsrs	r3, r3, #12
 800a57e:	431a      	orrs	r2, r3
 800a580:	0011      	movs	r1, r2
 800a582:	4b93      	ldr	r3, [pc, #588]	; (800a7d0 <_dtoa_r+0x350>)
 800a584:	9416      	str	r4, [sp, #88]	; 0x58
 800a586:	18f6      	adds	r6, r6, r3
 800a588:	2200      	movs	r2, #0
 800a58a:	4b92      	ldr	r3, [pc, #584]	; (800a7d4 <_dtoa_r+0x354>)
 800a58c:	f7f7 f9e2 	bl	8001954 <__aeabi_dsub>
 800a590:	4a91      	ldr	r2, [pc, #580]	; (800a7d8 <_dtoa_r+0x358>)
 800a592:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <_dtoa_r+0x35c>)
 800a594:	f7f6 ff72 	bl	800147c <__aeabi_dmul>
 800a598:	4a91      	ldr	r2, [pc, #580]	; (800a7e0 <_dtoa_r+0x360>)
 800a59a:	4b92      	ldr	r3, [pc, #584]	; (800a7e4 <_dtoa_r+0x364>)
 800a59c:	f7f5 fffe 	bl	800059c <__aeabi_dadd>
 800a5a0:	0004      	movs	r4, r0
 800a5a2:	0030      	movs	r0, r6
 800a5a4:	000d      	movs	r5, r1
 800a5a6:	f7f7 fdbb 	bl	8002120 <__aeabi_i2d>
 800a5aa:	4a8f      	ldr	r2, [pc, #572]	; (800a7e8 <_dtoa_r+0x368>)
 800a5ac:	4b8f      	ldr	r3, [pc, #572]	; (800a7ec <_dtoa_r+0x36c>)
 800a5ae:	f7f6 ff65 	bl	800147c <__aeabi_dmul>
 800a5b2:	0002      	movs	r2, r0
 800a5b4:	000b      	movs	r3, r1
 800a5b6:	0020      	movs	r0, r4
 800a5b8:	0029      	movs	r1, r5
 800a5ba:	f7f5 ffef 	bl	800059c <__aeabi_dadd>
 800a5be:	0004      	movs	r4, r0
 800a5c0:	000d      	movs	r5, r1
 800a5c2:	f7f7 fd77 	bl	80020b4 <__aeabi_d2iz>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	9002      	str	r0, [sp, #8]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	0020      	movs	r0, r4
 800a5ce:	0029      	movs	r1, r5
 800a5d0:	f7f5 ff4c 	bl	800046c <__aeabi_dcmplt>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d00b      	beq.n	800a5f0 <_dtoa_r+0x170>
 800a5d8:	9802      	ldr	r0, [sp, #8]
 800a5da:	f7f7 fda1 	bl	8002120 <__aeabi_i2d>
 800a5de:	002b      	movs	r3, r5
 800a5e0:	0022      	movs	r2, r4
 800a5e2:	f7f5 ff3d 	bl	8000460 <__aeabi_dcmpeq>
 800a5e6:	4243      	negs	r3, r0
 800a5e8:	4158      	adcs	r0, r3
 800a5ea:	9b02      	ldr	r3, [sp, #8]
 800a5ec:	1a1b      	subs	r3, r3, r0
 800a5ee:	9302      	str	r3, [sp, #8]
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	9315      	str	r3, [sp, #84]	; 0x54
 800a5f4:	9b02      	ldr	r3, [sp, #8]
 800a5f6:	2b16      	cmp	r3, #22
 800a5f8:	d80f      	bhi.n	800a61a <_dtoa_r+0x19a>
 800a5fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a5fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a5fe:	00da      	lsls	r2, r3, #3
 800a600:	4b7b      	ldr	r3, [pc, #492]	; (800a7f0 <_dtoa_r+0x370>)
 800a602:	189b      	adds	r3, r3, r2
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f7f5 ff30 	bl	800046c <__aeabi_dcmplt>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d049      	beq.n	800a6a4 <_dtoa_r+0x224>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	3b01      	subs	r3, #1
 800a614:	9302      	str	r3, [sp, #8]
 800a616:	2300      	movs	r3, #0
 800a618:	9315      	str	r3, [sp, #84]	; 0x54
 800a61a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a61c:	1b9e      	subs	r6, r3, r6
 800a61e:	2300      	movs	r3, #0
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	0033      	movs	r3, r6
 800a624:	3b01      	subs	r3, #1
 800a626:	930d      	str	r3, [sp, #52]	; 0x34
 800a628:	d504      	bpl.n	800a634 <_dtoa_r+0x1b4>
 800a62a:	2301      	movs	r3, #1
 800a62c:	1b9b      	subs	r3, r3, r6
 800a62e:	9308      	str	r3, [sp, #32]
 800a630:	2300      	movs	r3, #0
 800a632:	930d      	str	r3, [sp, #52]	; 0x34
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	db36      	blt.n	800a6a8 <_dtoa_r+0x228>
 800a63a:	9a02      	ldr	r2, [sp, #8]
 800a63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63e:	4694      	mov	ip, r2
 800a640:	4463      	add	r3, ip
 800a642:	930d      	str	r3, [sp, #52]	; 0x34
 800a644:	2300      	movs	r3, #0
 800a646:	9214      	str	r2, [sp, #80]	; 0x50
 800a648:	930e      	str	r3, [sp, #56]	; 0x38
 800a64a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a64c:	2401      	movs	r4, #1
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d862      	bhi.n	800a718 <_dtoa_r+0x298>
 800a652:	2b05      	cmp	r3, #5
 800a654:	dd02      	ble.n	800a65c <_dtoa_r+0x1dc>
 800a656:	2400      	movs	r4, #0
 800a658:	3b04      	subs	r3, #4
 800a65a:	9322      	str	r3, [sp, #136]	; 0x88
 800a65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a65e:	1e98      	subs	r0, r3, #2
 800a660:	2803      	cmp	r0, #3
 800a662:	d862      	bhi.n	800a72a <_dtoa_r+0x2aa>
 800a664:	f7f5 fd62 	bl	800012c <__gnu_thumb1_case_uqi>
 800a668:	56343629 	.word	0x56343629
 800a66c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a66e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a670:	189e      	adds	r6, r3, r2
 800a672:	4b60      	ldr	r3, [pc, #384]	; (800a7f4 <_dtoa_r+0x374>)
 800a674:	18f2      	adds	r2, r6, r3
 800a676:	2a20      	cmp	r2, #32
 800a678:	dd0f      	ble.n	800a69a <_dtoa_r+0x21a>
 800a67a:	2340      	movs	r3, #64	; 0x40
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	409d      	lsls	r5, r3
 800a680:	4b5d      	ldr	r3, [pc, #372]	; (800a7f8 <_dtoa_r+0x378>)
 800a682:	9802      	ldr	r0, [sp, #8]
 800a684:	18f3      	adds	r3, r6, r3
 800a686:	40d8      	lsrs	r0, r3
 800a688:	4328      	orrs	r0, r5
 800a68a:	f7f7 fd79 	bl	8002180 <__aeabi_ui2d>
 800a68e:	2301      	movs	r3, #1
 800a690:	4c5a      	ldr	r4, [pc, #360]	; (800a7fc <_dtoa_r+0x37c>)
 800a692:	3e01      	subs	r6, #1
 800a694:	1909      	adds	r1, r1, r4
 800a696:	9316      	str	r3, [sp, #88]	; 0x58
 800a698:	e776      	b.n	800a588 <_dtoa_r+0x108>
 800a69a:	2320      	movs	r3, #32
 800a69c:	9802      	ldr	r0, [sp, #8]
 800a69e:	1a9b      	subs	r3, r3, r2
 800a6a0:	4098      	lsls	r0, r3
 800a6a2:	e7f2      	b.n	800a68a <_dtoa_r+0x20a>
 800a6a4:	9015      	str	r0, [sp, #84]	; 0x54
 800a6a6:	e7b8      	b.n	800a61a <_dtoa_r+0x19a>
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	9a02      	ldr	r2, [sp, #8]
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	9308      	str	r3, [sp, #32]
 800a6b0:	4253      	negs	r3, r2
 800a6b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9314      	str	r3, [sp, #80]	; 0x50
 800a6b8:	e7c7      	b.n	800a64a <_dtoa_r+0x1ca>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dc36      	bgt.n	800a732 <_dtoa_r+0x2b2>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	001a      	movs	r2, r3
 800a6c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ca:	9306      	str	r3, [sp, #24]
 800a6cc:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6ce:	e00d      	b.n	800a6ec <_dtoa_r+0x26c>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e7f3      	b.n	800a6bc <_dtoa_r+0x23c>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a6d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6da:	4694      	mov	ip, r2
 800a6dc:	9b02      	ldr	r3, [sp, #8]
 800a6de:	4463      	add	r3, ip
 800a6e0:	930c      	str	r3, [sp, #48]	; 0x30
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	9306      	str	r3, [sp, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dc00      	bgt.n	800a6ec <_dtoa_r+0x26c>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6f0:	6042      	str	r2, [r0, #4]
 800a6f2:	3204      	adds	r2, #4
 800a6f4:	0015      	movs	r5, r2
 800a6f6:	3514      	adds	r5, #20
 800a6f8:	6841      	ldr	r1, [r0, #4]
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	d91d      	bls.n	800a73a <_dtoa_r+0x2ba>
 800a6fe:	0038      	movs	r0, r7
 800a700:	f001 f896 	bl	800b830 <_Balloc>
 800a704:	9005      	str	r0, [sp, #20]
 800a706:	2800      	cmp	r0, #0
 800a708:	d11b      	bne.n	800a742 <_dtoa_r+0x2c2>
 800a70a:	21d5      	movs	r1, #213	; 0xd5
 800a70c:	0002      	movs	r2, r0
 800a70e:	4b3c      	ldr	r3, [pc, #240]	; (800a800 <_dtoa_r+0x380>)
 800a710:	0049      	lsls	r1, r1, #1
 800a712:	e6ca      	b.n	800a4aa <_dtoa_r+0x2a>
 800a714:	2301      	movs	r3, #1
 800a716:	e7de      	b.n	800a6d6 <_dtoa_r+0x256>
 800a718:	2300      	movs	r3, #0
 800a71a:	940f      	str	r4, [sp, #60]	; 0x3c
 800a71c:	9322      	str	r3, [sp, #136]	; 0x88
 800a71e:	3b01      	subs	r3, #1
 800a720:	930c      	str	r3, [sp, #48]	; 0x30
 800a722:	9306      	str	r3, [sp, #24]
 800a724:	2200      	movs	r2, #0
 800a726:	3313      	adds	r3, #19
 800a728:	e7d0      	b.n	800a6cc <_dtoa_r+0x24c>
 800a72a:	2301      	movs	r3, #1
 800a72c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a72e:	3b02      	subs	r3, #2
 800a730:	e7f6      	b.n	800a720 <_dtoa_r+0x2a0>
 800a732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a734:	930c      	str	r3, [sp, #48]	; 0x30
 800a736:	9306      	str	r3, [sp, #24]
 800a738:	e7d8      	b.n	800a6ec <_dtoa_r+0x26c>
 800a73a:	3101      	adds	r1, #1
 800a73c:	6041      	str	r1, [r0, #4]
 800a73e:	0052      	lsls	r2, r2, #1
 800a740:	e7d8      	b.n	800a6f4 <_dtoa_r+0x274>
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	9a05      	ldr	r2, [sp, #20]
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	9b06      	ldr	r3, [sp, #24]
 800a74a:	2b0e      	cmp	r3, #14
 800a74c:	d900      	bls.n	800a750 <_dtoa_r+0x2d0>
 800a74e:	e0eb      	b.n	800a928 <_dtoa_r+0x4a8>
 800a750:	2c00      	cmp	r4, #0
 800a752:	d100      	bne.n	800a756 <_dtoa_r+0x2d6>
 800a754:	e0e8      	b.n	800a928 <_dtoa_r+0x4a8>
 800a756:	9b02      	ldr	r3, [sp, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dd68      	ble.n	800a82e <_dtoa_r+0x3ae>
 800a75c:	001a      	movs	r2, r3
 800a75e:	210f      	movs	r1, #15
 800a760:	4b23      	ldr	r3, [pc, #140]	; (800a7f0 <_dtoa_r+0x370>)
 800a762:	400a      	ands	r2, r1
 800a764:	00d2      	lsls	r2, r2, #3
 800a766:	189b      	adds	r3, r3, r2
 800a768:	681d      	ldr	r5, [r3, #0]
 800a76a:	685e      	ldr	r6, [r3, #4]
 800a76c:	9b02      	ldr	r3, [sp, #8]
 800a76e:	111c      	asrs	r4, r3, #4
 800a770:	2302      	movs	r3, #2
 800a772:	9310      	str	r3, [sp, #64]	; 0x40
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	05db      	lsls	r3, r3, #23
 800a778:	d50b      	bpl.n	800a792 <_dtoa_r+0x312>
 800a77a:	4b22      	ldr	r3, [pc, #136]	; (800a804 <_dtoa_r+0x384>)
 800a77c:	400c      	ands	r4, r1
 800a77e:	6a1a      	ldr	r2, [r3, #32]
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a784:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a786:	f7f6 fa73 	bl	8000c70 <__aeabi_ddiv>
 800a78a:	2303      	movs	r3, #3
 800a78c:	900a      	str	r0, [sp, #40]	; 0x28
 800a78e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a790:	9310      	str	r3, [sp, #64]	; 0x40
 800a792:	4b1c      	ldr	r3, [pc, #112]	; (800a804 <_dtoa_r+0x384>)
 800a794:	9307      	str	r3, [sp, #28]
 800a796:	2c00      	cmp	r4, #0
 800a798:	d136      	bne.n	800a808 <_dtoa_r+0x388>
 800a79a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a79c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a79e:	002a      	movs	r2, r5
 800a7a0:	0033      	movs	r3, r6
 800a7a2:	f7f6 fa65 	bl	8000c70 <__aeabi_ddiv>
 800a7a6:	900a      	str	r0, [sp, #40]	; 0x28
 800a7a8:	910b      	str	r1, [sp, #44]	; 0x2c
 800a7aa:	e05c      	b.n	800a866 <_dtoa_r+0x3e6>
 800a7ac:	0800dcbe 	.word	0x0800dcbe
 800a7b0:	0800dcd5 	.word	0x0800dcd5
 800a7b4:	7ff00000 	.word	0x7ff00000
 800a7b8:	0000270f 	.word	0x0000270f
 800a7bc:	0800dcba 	.word	0x0800dcba
 800a7c0:	0800dcbd 	.word	0x0800dcbd
 800a7c4:	0800df39 	.word	0x0800df39
 800a7c8:	0800df3a 	.word	0x0800df3a
 800a7cc:	3ff00000 	.word	0x3ff00000
 800a7d0:	fffffc01 	.word	0xfffffc01
 800a7d4:	3ff80000 	.word	0x3ff80000
 800a7d8:	636f4361 	.word	0x636f4361
 800a7dc:	3fd287a7 	.word	0x3fd287a7
 800a7e0:	8b60c8b3 	.word	0x8b60c8b3
 800a7e4:	3fc68a28 	.word	0x3fc68a28
 800a7e8:	509f79fb 	.word	0x509f79fb
 800a7ec:	3fd34413 	.word	0x3fd34413
 800a7f0:	0800de50 	.word	0x0800de50
 800a7f4:	00000432 	.word	0x00000432
 800a7f8:	00000412 	.word	0x00000412
 800a7fc:	fe100000 	.word	0xfe100000
 800a800:	0800dd34 	.word	0x0800dd34
 800a804:	0800de28 	.word	0x0800de28
 800a808:	2301      	movs	r3, #1
 800a80a:	421c      	tst	r4, r3
 800a80c:	d00b      	beq.n	800a826 <_dtoa_r+0x3a6>
 800a80e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a810:	0028      	movs	r0, r5
 800a812:	3301      	adds	r3, #1
 800a814:	9310      	str	r3, [sp, #64]	; 0x40
 800a816:	9b07      	ldr	r3, [sp, #28]
 800a818:	0031      	movs	r1, r6
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f7f6 fe2d 	bl	800147c <__aeabi_dmul>
 800a822:	0005      	movs	r5, r0
 800a824:	000e      	movs	r6, r1
 800a826:	9b07      	ldr	r3, [sp, #28]
 800a828:	1064      	asrs	r4, r4, #1
 800a82a:	3308      	adds	r3, #8
 800a82c:	e7b2      	b.n	800a794 <_dtoa_r+0x314>
 800a82e:	2302      	movs	r3, #2
 800a830:	9310      	str	r3, [sp, #64]	; 0x40
 800a832:	9b02      	ldr	r3, [sp, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d016      	beq.n	800a866 <_dtoa_r+0x3e6>
 800a838:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a83a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a83c:	425c      	negs	r4, r3
 800a83e:	230f      	movs	r3, #15
 800a840:	4ab5      	ldr	r2, [pc, #724]	; (800ab18 <_dtoa_r+0x698>)
 800a842:	4023      	ands	r3, r4
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	18d3      	adds	r3, r2, r3
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f7f6 fe16 	bl	800147c <__aeabi_dmul>
 800a850:	2601      	movs	r6, #1
 800a852:	2300      	movs	r3, #0
 800a854:	900a      	str	r0, [sp, #40]	; 0x28
 800a856:	910b      	str	r1, [sp, #44]	; 0x2c
 800a858:	4db0      	ldr	r5, [pc, #704]	; (800ab1c <_dtoa_r+0x69c>)
 800a85a:	1124      	asrs	r4, r4, #4
 800a85c:	2c00      	cmp	r4, #0
 800a85e:	d000      	beq.n	800a862 <_dtoa_r+0x3e2>
 800a860:	e094      	b.n	800a98c <_dtoa_r+0x50c>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d19f      	bne.n	800a7a6 <_dtoa_r+0x326>
 800a866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d100      	bne.n	800a86e <_dtoa_r+0x3ee>
 800a86c:	e09b      	b.n	800a9a6 <_dtoa_r+0x526>
 800a86e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a870:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a872:	2200      	movs	r2, #0
 800a874:	0020      	movs	r0, r4
 800a876:	0029      	movs	r1, r5
 800a878:	4ba9      	ldr	r3, [pc, #676]	; (800ab20 <_dtoa_r+0x6a0>)
 800a87a:	f7f5 fdf7 	bl	800046c <__aeabi_dcmplt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d100      	bne.n	800a884 <_dtoa_r+0x404>
 800a882:	e090      	b.n	800a9a6 <_dtoa_r+0x526>
 800a884:	9b06      	ldr	r3, [sp, #24]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d100      	bne.n	800a88c <_dtoa_r+0x40c>
 800a88a:	e08c      	b.n	800a9a6 <_dtoa_r+0x526>
 800a88c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dd46      	ble.n	800a920 <_dtoa_r+0x4a0>
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	0020      	movs	r0, r4
 800a898:	0029      	movs	r1, r5
 800a89a:	1e5e      	subs	r6, r3, #1
 800a89c:	4ba1      	ldr	r3, [pc, #644]	; (800ab24 <_dtoa_r+0x6a4>)
 800a89e:	f7f6 fded 	bl	800147c <__aeabi_dmul>
 800a8a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8a4:	900a      	str	r0, [sp, #40]	; 0x28
 800a8a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	9310      	str	r3, [sp, #64]	; 0x40
 800a8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a8b4:	9307      	str	r3, [sp, #28]
 800a8b6:	f7f7 fc33 	bl	8002120 <__aeabi_i2d>
 800a8ba:	0022      	movs	r2, r4
 800a8bc:	002b      	movs	r3, r5
 800a8be:	f7f6 fddd 	bl	800147c <__aeabi_dmul>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4b98      	ldr	r3, [pc, #608]	; (800ab28 <_dtoa_r+0x6a8>)
 800a8c6:	f7f5 fe69 	bl	800059c <__aeabi_dadd>
 800a8ca:	9010      	str	r0, [sp, #64]	; 0x40
 800a8cc:	9111      	str	r1, [sp, #68]	; 0x44
 800a8ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8d2:	920a      	str	r2, [sp, #40]	; 0x28
 800a8d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8d6:	4a95      	ldr	r2, [pc, #596]	; (800ab2c <_dtoa_r+0x6ac>)
 800a8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8da:	4694      	mov	ip, r2
 800a8dc:	4463      	add	r3, ip
 800a8de:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e2:	9b07      	ldr	r3, [sp, #28]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d161      	bne.n	800a9ac <_dtoa_r+0x52c>
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	0020      	movs	r0, r4
 800a8ec:	0029      	movs	r1, r5
 800a8ee:	4b90      	ldr	r3, [pc, #576]	; (800ab30 <_dtoa_r+0x6b0>)
 800a8f0:	f7f7 f830 	bl	8001954 <__aeabi_dsub>
 800a8f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8f8:	0004      	movs	r4, r0
 800a8fa:	000d      	movs	r5, r1
 800a8fc:	f7f5 fdca 	bl	8000494 <__aeabi_dcmpgt>
 800a900:	2800      	cmp	r0, #0
 800a902:	d000      	beq.n	800a906 <_dtoa_r+0x486>
 800a904:	e2b5      	b.n	800ae72 <_dtoa_r+0x9f2>
 800a906:	488b      	ldr	r0, [pc, #556]	; (800ab34 <_dtoa_r+0x6b4>)
 800a908:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a90a:	4684      	mov	ip, r0
 800a90c:	4461      	add	r1, ip
 800a90e:	000b      	movs	r3, r1
 800a910:	0020      	movs	r0, r4
 800a912:	0029      	movs	r1, r5
 800a914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a916:	f7f5 fda9 	bl	800046c <__aeabi_dcmplt>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d000      	beq.n	800a920 <_dtoa_r+0x4a0>
 800a91e:	e2a5      	b.n	800ae6c <_dtoa_r+0x9ec>
 800a920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a922:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a924:	930a      	str	r3, [sp, #40]	; 0x28
 800a926:	940b      	str	r4, [sp, #44]	; 0x2c
 800a928:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da00      	bge.n	800a930 <_dtoa_r+0x4b0>
 800a92e:	e171      	b.n	800ac14 <_dtoa_r+0x794>
 800a930:	9a02      	ldr	r2, [sp, #8]
 800a932:	2a0e      	cmp	r2, #14
 800a934:	dd00      	ble.n	800a938 <_dtoa_r+0x4b8>
 800a936:	e16d      	b.n	800ac14 <_dtoa_r+0x794>
 800a938:	4b77      	ldr	r3, [pc, #476]	; (800ab18 <_dtoa_r+0x698>)
 800a93a:	00d2      	lsls	r2, r2, #3
 800a93c:	189b      	adds	r3, r3, r2
 800a93e:	685c      	ldr	r4, [r3, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	9308      	str	r3, [sp, #32]
 800a944:	9409      	str	r4, [sp, #36]	; 0x24
 800a946:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db00      	blt.n	800a94e <_dtoa_r+0x4ce>
 800a94c:	e0f6      	b.n	800ab3c <_dtoa_r+0x6bc>
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	dd00      	ble.n	800a956 <_dtoa_r+0x4d6>
 800a954:	e0f2      	b.n	800ab3c <_dtoa_r+0x6bc>
 800a956:	d000      	beq.n	800a95a <_dtoa_r+0x4da>
 800a958:	e288      	b.n	800ae6c <_dtoa_r+0x9ec>
 800a95a:	9808      	ldr	r0, [sp, #32]
 800a95c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a95e:	2200      	movs	r2, #0
 800a960:	4b73      	ldr	r3, [pc, #460]	; (800ab30 <_dtoa_r+0x6b0>)
 800a962:	f7f6 fd8b 	bl	800147c <__aeabi_dmul>
 800a966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96a:	f7f5 fd9d 	bl	80004a8 <__aeabi_dcmpge>
 800a96e:	9e06      	ldr	r6, [sp, #24]
 800a970:	0035      	movs	r5, r6
 800a972:	2800      	cmp	r0, #0
 800a974:	d000      	beq.n	800a978 <_dtoa_r+0x4f8>
 800a976:	e25f      	b.n	800ae38 <_dtoa_r+0x9b8>
 800a978:	9b05      	ldr	r3, [sp, #20]
 800a97a:	9a05      	ldr	r2, [sp, #20]
 800a97c:	3301      	adds	r3, #1
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	2331      	movs	r3, #49	; 0x31
 800a982:	7013      	strb	r3, [r2, #0]
 800a984:	9b02      	ldr	r3, [sp, #8]
 800a986:	3301      	adds	r3, #1
 800a988:	9302      	str	r3, [sp, #8]
 800a98a:	e25a      	b.n	800ae42 <_dtoa_r+0x9c2>
 800a98c:	4234      	tst	r4, r6
 800a98e:	d007      	beq.n	800a9a0 <_dtoa_r+0x520>
 800a990:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a992:	3301      	adds	r3, #1
 800a994:	9310      	str	r3, [sp, #64]	; 0x40
 800a996:	682a      	ldr	r2, [r5, #0]
 800a998:	686b      	ldr	r3, [r5, #4]
 800a99a:	f7f6 fd6f 	bl	800147c <__aeabi_dmul>
 800a99e:	0033      	movs	r3, r6
 800a9a0:	1064      	asrs	r4, r4, #1
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	e75a      	b.n	800a85c <_dtoa_r+0x3dc>
 800a9a6:	9e02      	ldr	r6, [sp, #8]
 800a9a8:	9b06      	ldr	r3, [sp, #24]
 800a9aa:	e780      	b.n	800a8ae <_dtoa_r+0x42e>
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9b0:	1e5a      	subs	r2, r3, #1
 800a9b2:	4b59      	ldr	r3, [pc, #356]	; (800ab18 <_dtoa_r+0x698>)
 800a9b4:	00d2      	lsls	r2, r2, #3
 800a9b6:	189b      	adds	r3, r3, r2
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d051      	beq.n	800aa64 <_dtoa_r+0x5e4>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	495d      	ldr	r1, [pc, #372]	; (800ab38 <_dtoa_r+0x6b8>)
 800a9c4:	f7f6 f954 	bl	8000c70 <__aeabi_ddiv>
 800a9c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9cc:	f7f6 ffc2 	bl	8001954 <__aeabi_dsub>
 800a9d0:	9a05      	ldr	r2, [sp, #20]
 800a9d2:	9b05      	ldr	r3, [sp, #20]
 800a9d4:	4694      	mov	ip, r2
 800a9d6:	9310      	str	r3, [sp, #64]	; 0x40
 800a9d8:	9b07      	ldr	r3, [sp, #28]
 800a9da:	900a      	str	r0, [sp, #40]	; 0x28
 800a9dc:	910b      	str	r1, [sp, #44]	; 0x2c
 800a9de:	4463      	add	r3, ip
 800a9e0:	9319      	str	r3, [sp, #100]	; 0x64
 800a9e2:	0029      	movs	r1, r5
 800a9e4:	0020      	movs	r0, r4
 800a9e6:	f7f7 fb65 	bl	80020b4 <__aeabi_d2iz>
 800a9ea:	9017      	str	r0, [sp, #92]	; 0x5c
 800a9ec:	f7f7 fb98 	bl	8002120 <__aeabi_i2d>
 800a9f0:	0002      	movs	r2, r0
 800a9f2:	000b      	movs	r3, r1
 800a9f4:	0020      	movs	r0, r4
 800a9f6:	0029      	movs	r1, r5
 800a9f8:	f7f6 ffac 	bl	8001954 <__aeabi_dsub>
 800a9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa00:	3301      	adds	r3, #1
 800aa02:	9307      	str	r3, [sp, #28]
 800aa04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa06:	0004      	movs	r4, r0
 800aa08:	3330      	adds	r3, #48	; 0x30
 800aa0a:	7013      	strb	r3, [r2, #0]
 800aa0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa10:	000d      	movs	r5, r1
 800aa12:	f7f5 fd2b 	bl	800046c <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d175      	bne.n	800ab06 <_dtoa_r+0x686>
 800aa1a:	0022      	movs	r2, r4
 800aa1c:	002b      	movs	r3, r5
 800aa1e:	2000      	movs	r0, #0
 800aa20:	493f      	ldr	r1, [pc, #252]	; (800ab20 <_dtoa_r+0x6a0>)
 800aa22:	f7f6 ff97 	bl	8001954 <__aeabi_dsub>
 800aa26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2a:	f7f5 fd1f 	bl	800046c <__aeabi_dcmplt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d000      	beq.n	800aa34 <_dtoa_r+0x5b4>
 800aa32:	e0d1      	b.n	800abd8 <_dtoa_r+0x758>
 800aa34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa36:	9a07      	ldr	r2, [sp, #28]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d100      	bne.n	800aa3e <_dtoa_r+0x5be>
 800aa3c:	e770      	b.n	800a920 <_dtoa_r+0x4a0>
 800aa3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa42:	2200      	movs	r2, #0
 800aa44:	4b37      	ldr	r3, [pc, #220]	; (800ab24 <_dtoa_r+0x6a4>)
 800aa46:	f7f6 fd19 	bl	800147c <__aeabi_dmul>
 800aa4a:	4b36      	ldr	r3, [pc, #216]	; (800ab24 <_dtoa_r+0x6a4>)
 800aa4c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa4e:	910b      	str	r1, [sp, #44]	; 0x2c
 800aa50:	2200      	movs	r2, #0
 800aa52:	0020      	movs	r0, r4
 800aa54:	0029      	movs	r1, r5
 800aa56:	f7f6 fd11 	bl	800147c <__aeabi_dmul>
 800aa5a:	9b07      	ldr	r3, [sp, #28]
 800aa5c:	0004      	movs	r4, r0
 800aa5e:	000d      	movs	r5, r1
 800aa60:	9310      	str	r3, [sp, #64]	; 0x40
 800aa62:	e7be      	b.n	800a9e2 <_dtoa_r+0x562>
 800aa64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa68:	f7f6 fd08 	bl	800147c <__aeabi_dmul>
 800aa6c:	9a05      	ldr	r2, [sp, #20]
 800aa6e:	9b05      	ldr	r3, [sp, #20]
 800aa70:	4694      	mov	ip, r2
 800aa72:	930a      	str	r3, [sp, #40]	; 0x28
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	9010      	str	r0, [sp, #64]	; 0x40
 800aa78:	9111      	str	r1, [sp, #68]	; 0x44
 800aa7a:	4463      	add	r3, ip
 800aa7c:	9319      	str	r3, [sp, #100]	; 0x64
 800aa7e:	0029      	movs	r1, r5
 800aa80:	0020      	movs	r0, r4
 800aa82:	f7f7 fb17 	bl	80020b4 <__aeabi_d2iz>
 800aa86:	9017      	str	r0, [sp, #92]	; 0x5c
 800aa88:	f7f7 fb4a 	bl	8002120 <__aeabi_i2d>
 800aa8c:	0002      	movs	r2, r0
 800aa8e:	000b      	movs	r3, r1
 800aa90:	0020      	movs	r0, r4
 800aa92:	0029      	movs	r1, r5
 800aa94:	f7f6 ff5e 	bl	8001954 <__aeabi_dsub>
 800aa98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa9c:	3330      	adds	r3, #48	; 0x30
 800aa9e:	7013      	strb	r3, [r2, #0]
 800aaa0:	0013      	movs	r3, r2
 800aaa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	0004      	movs	r4, r0
 800aaa8:	000d      	movs	r5, r1
 800aaaa:	930a      	str	r3, [sp, #40]	; 0x28
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d12c      	bne.n	800ab0a <_dtoa_r+0x68a>
 800aab0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aab2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aab4:	9a05      	ldr	r2, [sp, #20]
 800aab6:	9b07      	ldr	r3, [sp, #28]
 800aab8:	4694      	mov	ip, r2
 800aaba:	4463      	add	r3, ip
 800aabc:	2200      	movs	r2, #0
 800aabe:	9307      	str	r3, [sp, #28]
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <_dtoa_r+0x6b8>)
 800aac2:	f7f5 fd6b 	bl	800059c <__aeabi_dadd>
 800aac6:	0002      	movs	r2, r0
 800aac8:	000b      	movs	r3, r1
 800aaca:	0020      	movs	r0, r4
 800aacc:	0029      	movs	r1, r5
 800aace:	f7f5 fce1 	bl	8000494 <__aeabi_dcmpgt>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d000      	beq.n	800aad8 <_dtoa_r+0x658>
 800aad6:	e07f      	b.n	800abd8 <_dtoa_r+0x758>
 800aad8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aadc:	2000      	movs	r0, #0
 800aade:	4916      	ldr	r1, [pc, #88]	; (800ab38 <_dtoa_r+0x6b8>)
 800aae0:	f7f6 ff38 	bl	8001954 <__aeabi_dsub>
 800aae4:	0002      	movs	r2, r0
 800aae6:	000b      	movs	r3, r1
 800aae8:	0020      	movs	r0, r4
 800aaea:	0029      	movs	r1, r5
 800aaec:	f7f5 fcbe 	bl	800046c <__aeabi_dcmplt>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d100      	bne.n	800aaf6 <_dtoa_r+0x676>
 800aaf4:	e714      	b.n	800a920 <_dtoa_r+0x4a0>
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	001a      	movs	r2, r3
 800aafa:	3a01      	subs	r2, #1
 800aafc:	9207      	str	r2, [sp, #28]
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	2a30      	cmp	r2, #48	; 0x30
 800ab02:	d0f8      	beq.n	800aaf6 <_dtoa_r+0x676>
 800ab04:	9307      	str	r3, [sp, #28]
 800ab06:	9602      	str	r6, [sp, #8]
 800ab08:	e054      	b.n	800abb4 <_dtoa_r+0x734>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4b05      	ldr	r3, [pc, #20]	; (800ab24 <_dtoa_r+0x6a4>)
 800ab0e:	f7f6 fcb5 	bl	800147c <__aeabi_dmul>
 800ab12:	0004      	movs	r4, r0
 800ab14:	000d      	movs	r5, r1
 800ab16:	e7b2      	b.n	800aa7e <_dtoa_r+0x5fe>
 800ab18:	0800de50 	.word	0x0800de50
 800ab1c:	0800de28 	.word	0x0800de28
 800ab20:	3ff00000 	.word	0x3ff00000
 800ab24:	40240000 	.word	0x40240000
 800ab28:	401c0000 	.word	0x401c0000
 800ab2c:	fcc00000 	.word	0xfcc00000
 800ab30:	40140000 	.word	0x40140000
 800ab34:	7cc00000 	.word	0x7cc00000
 800ab38:	3fe00000 	.word	0x3fe00000
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	9e05      	ldr	r6, [sp, #20]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	199b      	adds	r3, r3, r6
 800ab44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ab48:	930a      	str	r3, [sp, #40]	; 0x28
 800ab4a:	9a08      	ldr	r2, [sp, #32]
 800ab4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4e:	0020      	movs	r0, r4
 800ab50:	0029      	movs	r1, r5
 800ab52:	f7f6 f88d 	bl	8000c70 <__aeabi_ddiv>
 800ab56:	f7f7 faad 	bl	80020b4 <__aeabi_d2iz>
 800ab5a:	9006      	str	r0, [sp, #24]
 800ab5c:	f7f7 fae0 	bl	8002120 <__aeabi_i2d>
 800ab60:	9a08      	ldr	r2, [sp, #32]
 800ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab64:	f7f6 fc8a 	bl	800147c <__aeabi_dmul>
 800ab68:	0002      	movs	r2, r0
 800ab6a:	000b      	movs	r3, r1
 800ab6c:	0020      	movs	r0, r4
 800ab6e:	0029      	movs	r1, r5
 800ab70:	f7f6 fef0 	bl	8001954 <__aeabi_dsub>
 800ab74:	0033      	movs	r3, r6
 800ab76:	9a06      	ldr	r2, [sp, #24]
 800ab78:	3601      	adds	r6, #1
 800ab7a:	3230      	adds	r2, #48	; 0x30
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab80:	9607      	str	r6, [sp, #28]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d139      	bne.n	800abfa <_dtoa_r+0x77a>
 800ab86:	0002      	movs	r2, r0
 800ab88:	000b      	movs	r3, r1
 800ab8a:	f7f5 fd07 	bl	800059c <__aeabi_dadd>
 800ab8e:	9a08      	ldr	r2, [sp, #32]
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	0004      	movs	r4, r0
 800ab94:	000d      	movs	r5, r1
 800ab96:	f7f5 fc7d 	bl	8000494 <__aeabi_dcmpgt>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d11b      	bne.n	800abd6 <_dtoa_r+0x756>
 800ab9e:	9a08      	ldr	r2, [sp, #32]
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	0020      	movs	r0, r4
 800aba4:	0029      	movs	r1, r5
 800aba6:	f7f5 fc5b 	bl	8000460 <__aeabi_dcmpeq>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d002      	beq.n	800abb4 <_dtoa_r+0x734>
 800abae:	9b06      	ldr	r3, [sp, #24]
 800abb0:	07db      	lsls	r3, r3, #31
 800abb2:	d410      	bmi.n	800abd6 <_dtoa_r+0x756>
 800abb4:	0038      	movs	r0, r7
 800abb6:	9904      	ldr	r1, [sp, #16]
 800abb8:	f000 fe7e 	bl	800b8b8 <_Bfree>
 800abbc:	2300      	movs	r3, #0
 800abbe:	9a07      	ldr	r2, [sp, #28]
 800abc0:	9802      	ldr	r0, [sp, #8]
 800abc2:	7013      	strb	r3, [r2, #0]
 800abc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800abc6:	3001      	adds	r0, #1
 800abc8:	6018      	str	r0, [r3, #0]
 800abca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d100      	bne.n	800abd2 <_dtoa_r+0x752>
 800abd0:	e4a3      	b.n	800a51a <_dtoa_r+0x9a>
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	e4a1      	b.n	800a51a <_dtoa_r+0x9a>
 800abd6:	9e02      	ldr	r6, [sp, #8]
 800abd8:	9b07      	ldr	r3, [sp, #28]
 800abda:	9307      	str	r3, [sp, #28]
 800abdc:	3b01      	subs	r3, #1
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	2a39      	cmp	r2, #57	; 0x39
 800abe2:	d106      	bne.n	800abf2 <_dtoa_r+0x772>
 800abe4:	9a05      	ldr	r2, [sp, #20]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d1f7      	bne.n	800abda <_dtoa_r+0x75a>
 800abea:	2230      	movs	r2, #48	; 0x30
 800abec:	9905      	ldr	r1, [sp, #20]
 800abee:	3601      	adds	r6, #1
 800abf0:	700a      	strb	r2, [r1, #0]
 800abf2:	781a      	ldrb	r2, [r3, #0]
 800abf4:	3201      	adds	r2, #1
 800abf6:	701a      	strb	r2, [r3, #0]
 800abf8:	e785      	b.n	800ab06 <_dtoa_r+0x686>
 800abfa:	2200      	movs	r2, #0
 800abfc:	4bad      	ldr	r3, [pc, #692]	; (800aeb4 <_dtoa_r+0xa34>)
 800abfe:	f7f6 fc3d 	bl	800147c <__aeabi_dmul>
 800ac02:	2200      	movs	r2, #0
 800ac04:	2300      	movs	r3, #0
 800ac06:	0004      	movs	r4, r0
 800ac08:	000d      	movs	r5, r1
 800ac0a:	f7f5 fc29 	bl	8000460 <__aeabi_dcmpeq>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d09b      	beq.n	800ab4a <_dtoa_r+0x6ca>
 800ac12:	e7cf      	b.n	800abb4 <_dtoa_r+0x734>
 800ac14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	d100      	bne.n	800ac1c <_dtoa_r+0x79c>
 800ac1a:	e082      	b.n	800ad22 <_dtoa_r+0x8a2>
 800ac1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac1e:	2a01      	cmp	r2, #1
 800ac20:	dc66      	bgt.n	800acf0 <_dtoa_r+0x870>
 800ac22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac24:	2a00      	cmp	r2, #0
 800ac26:	d05f      	beq.n	800ace8 <_dtoa_r+0x868>
 800ac28:	4aa3      	ldr	r2, [pc, #652]	; (800aeb8 <_dtoa_r+0xa38>)
 800ac2a:	189b      	adds	r3, r3, r2
 800ac2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ac2e:	9c08      	ldr	r4, [sp, #32]
 800ac30:	9a08      	ldr	r2, [sp, #32]
 800ac32:	2101      	movs	r1, #1
 800ac34:	18d2      	adds	r2, r2, r3
 800ac36:	9208      	str	r2, [sp, #32]
 800ac38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac3a:	0038      	movs	r0, r7
 800ac3c:	18d3      	adds	r3, r2, r3
 800ac3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac40:	f000 ff36 	bl	800bab0 <__i2b>
 800ac44:	0005      	movs	r5, r0
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	dd0e      	ble.n	800ac68 <_dtoa_r+0x7e8>
 800ac4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dd0b      	ble.n	800ac68 <_dtoa_r+0x7e8>
 800ac50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac52:	0023      	movs	r3, r4
 800ac54:	4294      	cmp	r4, r2
 800ac56:	dd00      	ble.n	800ac5a <_dtoa_r+0x7da>
 800ac58:	0013      	movs	r3, r2
 800ac5a:	9a08      	ldr	r2, [sp, #32]
 800ac5c:	1ae4      	subs	r4, r4, r3
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	9208      	str	r2, [sp, #32]
 800ac62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	930d      	str	r3, [sp, #52]	; 0x34
 800ac68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01f      	beq.n	800acae <_dtoa_r+0x82e>
 800ac6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d05a      	beq.n	800ad2a <_dtoa_r+0x8aa>
 800ac74:	2e00      	cmp	r6, #0
 800ac76:	dd11      	ble.n	800ac9c <_dtoa_r+0x81c>
 800ac78:	0029      	movs	r1, r5
 800ac7a:	0032      	movs	r2, r6
 800ac7c:	0038      	movs	r0, r7
 800ac7e:	f000 ffdd 	bl	800bc3c <__pow5mult>
 800ac82:	9a04      	ldr	r2, [sp, #16]
 800ac84:	0001      	movs	r1, r0
 800ac86:	0005      	movs	r5, r0
 800ac88:	0038      	movs	r0, r7
 800ac8a:	f000 ff27 	bl	800badc <__multiply>
 800ac8e:	9904      	ldr	r1, [sp, #16]
 800ac90:	9007      	str	r0, [sp, #28]
 800ac92:	0038      	movs	r0, r7
 800ac94:	f000 fe10 	bl	800b8b8 <_Bfree>
 800ac98:	9b07      	ldr	r3, [sp, #28]
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac9e:	1b9a      	subs	r2, r3, r6
 800aca0:	42b3      	cmp	r3, r6
 800aca2:	d004      	beq.n	800acae <_dtoa_r+0x82e>
 800aca4:	0038      	movs	r0, r7
 800aca6:	9904      	ldr	r1, [sp, #16]
 800aca8:	f000 ffc8 	bl	800bc3c <__pow5mult>
 800acac:	9004      	str	r0, [sp, #16]
 800acae:	2101      	movs	r1, #1
 800acb0:	0038      	movs	r0, r7
 800acb2:	f000 fefd 	bl	800bab0 <__i2b>
 800acb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acb8:	0006      	movs	r6, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dd37      	ble.n	800ad2e <_dtoa_r+0x8ae>
 800acbe:	001a      	movs	r2, r3
 800acc0:	0001      	movs	r1, r0
 800acc2:	0038      	movs	r0, r7
 800acc4:	f000 ffba 	bl	800bc3c <__pow5mult>
 800acc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acca:	0006      	movs	r6, r0
 800accc:	2b01      	cmp	r3, #1
 800acce:	dd33      	ble.n	800ad38 <_dtoa_r+0x8b8>
 800acd0:	2300      	movs	r3, #0
 800acd2:	9307      	str	r3, [sp, #28]
 800acd4:	6933      	ldr	r3, [r6, #16]
 800acd6:	3303      	adds	r3, #3
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	18f3      	adds	r3, r6, r3
 800acdc:	6858      	ldr	r0, [r3, #4]
 800acde:	f000 fe9f 	bl	800ba20 <__hi0bits>
 800ace2:	2320      	movs	r3, #32
 800ace4:	1a18      	subs	r0, r3, r0
 800ace6:	e03f      	b.n	800ad68 <_dtoa_r+0x8e8>
 800ace8:	2336      	movs	r3, #54	; 0x36
 800acea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	e79d      	b.n	800ac2c <_dtoa_r+0x7ac>
 800acf0:	9b06      	ldr	r3, [sp, #24]
 800acf2:	1e5e      	subs	r6, r3, #1
 800acf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf6:	42b3      	cmp	r3, r6
 800acf8:	db08      	blt.n	800ad0c <_dtoa_r+0x88c>
 800acfa:	1b9e      	subs	r6, r3, r6
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da0c      	bge.n	800ad1c <_dtoa_r+0x89c>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	9a06      	ldr	r2, [sp, #24]
 800ad06:	1a9c      	subs	r4, r3, r2
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e791      	b.n	800ac30 <_dtoa_r+0x7b0>
 800ad0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad10:	1af3      	subs	r3, r6, r3
 800ad12:	18d3      	adds	r3, r2, r3
 800ad14:	960e      	str	r6, [sp, #56]	; 0x38
 800ad16:	9314      	str	r3, [sp, #80]	; 0x50
 800ad18:	2600      	movs	r6, #0
 800ad1a:	e7ef      	b.n	800acfc <_dtoa_r+0x87c>
 800ad1c:	9c08      	ldr	r4, [sp, #32]
 800ad1e:	9b06      	ldr	r3, [sp, #24]
 800ad20:	e786      	b.n	800ac30 <_dtoa_r+0x7b0>
 800ad22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ad24:	9c08      	ldr	r4, [sp, #32]
 800ad26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad28:	e78d      	b.n	800ac46 <_dtoa_r+0x7c6>
 800ad2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad2c:	e7ba      	b.n	800aca4 <_dtoa_r+0x824>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9307      	str	r3, [sp, #28]
 800ad32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	dc13      	bgt.n	800ad60 <_dtoa_r+0x8e0>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9307      	str	r3, [sp, #28]
 800ad3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10e      	bne.n	800ad60 <_dtoa_r+0x8e0>
 800ad42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad44:	031b      	lsls	r3, r3, #12
 800ad46:	d10b      	bne.n	800ad60 <_dtoa_r+0x8e0>
 800ad48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad4c:	4213      	tst	r3, r2
 800ad4e:	d007      	beq.n	800ad60 <_dtoa_r+0x8e0>
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	3301      	adds	r3, #1
 800ad54:	9308      	str	r3, [sp, #32]
 800ad56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad58:	3301      	adds	r3, #1
 800ad5a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	9307      	str	r3, [sp, #28]
 800ad60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad62:	2001      	movs	r0, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1b5      	bne.n	800acd4 <_dtoa_r+0x854>
 800ad68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad6a:	221f      	movs	r2, #31
 800ad6c:	1818      	adds	r0, r3, r0
 800ad6e:	0003      	movs	r3, r0
 800ad70:	4013      	ands	r3, r2
 800ad72:	4210      	tst	r0, r2
 800ad74:	d046      	beq.n	800ae04 <_dtoa_r+0x984>
 800ad76:	3201      	adds	r2, #1
 800ad78:	1ad2      	subs	r2, r2, r3
 800ad7a:	2a04      	cmp	r2, #4
 800ad7c:	dd3f      	ble.n	800adfe <_dtoa_r+0x97e>
 800ad7e:	221c      	movs	r2, #28
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	9a08      	ldr	r2, [sp, #32]
 800ad84:	18e4      	adds	r4, r4, r3
 800ad86:	18d2      	adds	r2, r2, r3
 800ad88:	9208      	str	r2, [sp, #32]
 800ad8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad8c:	18d3      	adds	r3, r2, r3
 800ad8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dd05      	ble.n	800ada2 <_dtoa_r+0x922>
 800ad96:	001a      	movs	r2, r3
 800ad98:	0038      	movs	r0, r7
 800ad9a:	9904      	ldr	r1, [sp, #16]
 800ad9c:	f000 ffaa 	bl	800bcf4 <__lshift>
 800ada0:	9004      	str	r0, [sp, #16]
 800ada2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd05      	ble.n	800adb4 <_dtoa_r+0x934>
 800ada8:	0031      	movs	r1, r6
 800adaa:	001a      	movs	r2, r3
 800adac:	0038      	movs	r0, r7
 800adae:	f000 ffa1 	bl	800bcf4 <__lshift>
 800adb2:	0006      	movs	r6, r0
 800adb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d026      	beq.n	800ae08 <_dtoa_r+0x988>
 800adba:	0031      	movs	r1, r6
 800adbc:	9804      	ldr	r0, [sp, #16]
 800adbe:	f001 f809 	bl	800bdd4 <__mcmp>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	da20      	bge.n	800ae08 <_dtoa_r+0x988>
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	220a      	movs	r2, #10
 800adca:	3b01      	subs	r3, #1
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	0038      	movs	r0, r7
 800add0:	2300      	movs	r3, #0
 800add2:	9904      	ldr	r1, [sp, #16]
 800add4:	f000 fd94 	bl	800b900 <__multadd>
 800add8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adda:	9004      	str	r0, [sp, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d100      	bne.n	800ade2 <_dtoa_r+0x962>
 800ade0:	e160      	b.n	800b0a4 <_dtoa_r+0xc24>
 800ade2:	2300      	movs	r3, #0
 800ade4:	0029      	movs	r1, r5
 800ade6:	220a      	movs	r2, #10
 800ade8:	0038      	movs	r0, r7
 800adea:	f000 fd89 	bl	800b900 <__multadd>
 800adee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf0:	0005      	movs	r5, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dc47      	bgt.n	800ae86 <_dtoa_r+0xa06>
 800adf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	dc0d      	bgt.n	800ae18 <_dtoa_r+0x998>
 800adfc:	e043      	b.n	800ae86 <_dtoa_r+0xa06>
 800adfe:	2a04      	cmp	r2, #4
 800ae00:	d0c6      	beq.n	800ad90 <_dtoa_r+0x910>
 800ae02:	0013      	movs	r3, r2
 800ae04:	331c      	adds	r3, #28
 800ae06:	e7bc      	b.n	800ad82 <_dtoa_r+0x902>
 800ae08:	9b06      	ldr	r3, [sp, #24]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dc35      	bgt.n	800ae7a <_dtoa_r+0x9fa>
 800ae0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	dd32      	ble.n	800ae7a <_dtoa_r+0x9fa>
 800ae14:	9b06      	ldr	r3, [sp, #24]
 800ae16:	930c      	str	r3, [sp, #48]	; 0x30
 800ae18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10c      	bne.n	800ae38 <_dtoa_r+0x9b8>
 800ae1e:	0031      	movs	r1, r6
 800ae20:	2205      	movs	r2, #5
 800ae22:	0038      	movs	r0, r7
 800ae24:	f000 fd6c 	bl	800b900 <__multadd>
 800ae28:	0006      	movs	r6, r0
 800ae2a:	0001      	movs	r1, r0
 800ae2c:	9804      	ldr	r0, [sp, #16]
 800ae2e:	f000 ffd1 	bl	800bdd4 <__mcmp>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	dd00      	ble.n	800ae38 <_dtoa_r+0x9b8>
 800ae36:	e59f      	b.n	800a978 <_dtoa_r+0x4f8>
 800ae38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae3a:	43db      	mvns	r3, r3
 800ae3c:	9302      	str	r3, [sp, #8]
 800ae3e:	9b05      	ldr	r3, [sp, #20]
 800ae40:	9307      	str	r3, [sp, #28]
 800ae42:	2400      	movs	r4, #0
 800ae44:	0031      	movs	r1, r6
 800ae46:	0038      	movs	r0, r7
 800ae48:	f000 fd36 	bl	800b8b8 <_Bfree>
 800ae4c:	2d00      	cmp	r5, #0
 800ae4e:	d100      	bne.n	800ae52 <_dtoa_r+0x9d2>
 800ae50:	e6b0      	b.n	800abb4 <_dtoa_r+0x734>
 800ae52:	2c00      	cmp	r4, #0
 800ae54:	d005      	beq.n	800ae62 <_dtoa_r+0x9e2>
 800ae56:	42ac      	cmp	r4, r5
 800ae58:	d003      	beq.n	800ae62 <_dtoa_r+0x9e2>
 800ae5a:	0021      	movs	r1, r4
 800ae5c:	0038      	movs	r0, r7
 800ae5e:	f000 fd2b 	bl	800b8b8 <_Bfree>
 800ae62:	0029      	movs	r1, r5
 800ae64:	0038      	movs	r0, r7
 800ae66:	f000 fd27 	bl	800b8b8 <_Bfree>
 800ae6a:	e6a3      	b.n	800abb4 <_dtoa_r+0x734>
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	0035      	movs	r5, r6
 800ae70:	e7e2      	b.n	800ae38 <_dtoa_r+0x9b8>
 800ae72:	9602      	str	r6, [sp, #8]
 800ae74:	9e07      	ldr	r6, [sp, #28]
 800ae76:	0035      	movs	r5, r6
 800ae78:	e57e      	b.n	800a978 <_dtoa_r+0x4f8>
 800ae7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d100      	bne.n	800ae82 <_dtoa_r+0xa02>
 800ae80:	e0c8      	b.n	800b014 <_dtoa_r+0xb94>
 800ae82:	9b06      	ldr	r3, [sp, #24]
 800ae84:	930c      	str	r3, [sp, #48]	; 0x30
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	dd05      	ble.n	800ae96 <_dtoa_r+0xa16>
 800ae8a:	0029      	movs	r1, r5
 800ae8c:	0022      	movs	r2, r4
 800ae8e:	0038      	movs	r0, r7
 800ae90:	f000 ff30 	bl	800bcf4 <__lshift>
 800ae94:	0005      	movs	r5, r0
 800ae96:	9b07      	ldr	r3, [sp, #28]
 800ae98:	0028      	movs	r0, r5
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d01f      	beq.n	800aede <_dtoa_r+0xa5e>
 800ae9e:	0038      	movs	r0, r7
 800aea0:	6869      	ldr	r1, [r5, #4]
 800aea2:	f000 fcc5 	bl	800b830 <_Balloc>
 800aea6:	1e04      	subs	r4, r0, #0
 800aea8:	d10c      	bne.n	800aec4 <_dtoa_r+0xa44>
 800aeaa:	0002      	movs	r2, r0
 800aeac:	4b03      	ldr	r3, [pc, #12]	; (800aebc <_dtoa_r+0xa3c>)
 800aeae:	4904      	ldr	r1, [pc, #16]	; (800aec0 <_dtoa_r+0xa40>)
 800aeb0:	f7ff fafb 	bl	800a4aa <_dtoa_r+0x2a>
 800aeb4:	40240000 	.word	0x40240000
 800aeb8:	00000433 	.word	0x00000433
 800aebc:	0800dd34 	.word	0x0800dd34
 800aec0:	000002ea 	.word	0x000002ea
 800aec4:	0029      	movs	r1, r5
 800aec6:	692b      	ldr	r3, [r5, #16]
 800aec8:	310c      	adds	r1, #12
 800aeca:	1c9a      	adds	r2, r3, #2
 800aecc:	0092      	lsls	r2, r2, #2
 800aece:	300c      	adds	r0, #12
 800aed0:	f000 fca5 	bl	800b81e <memcpy>
 800aed4:	2201      	movs	r2, #1
 800aed6:	0021      	movs	r1, r4
 800aed8:	0038      	movs	r0, r7
 800aeda:	f000 ff0b 	bl	800bcf4 <__lshift>
 800aede:	002c      	movs	r4, r5
 800aee0:	0005      	movs	r5, r0
 800aee2:	9b05      	ldr	r3, [sp, #20]
 800aee4:	9308      	str	r3, [sp, #32]
 800aee6:	0031      	movs	r1, r6
 800aee8:	9804      	ldr	r0, [sp, #16]
 800aeea:	f7ff fa3d 	bl	800a368 <quorem>
 800aeee:	0003      	movs	r3, r0
 800aef0:	0021      	movs	r1, r4
 800aef2:	3330      	adds	r3, #48	; 0x30
 800aef4:	900e      	str	r0, [sp, #56]	; 0x38
 800aef6:	9804      	ldr	r0, [sp, #16]
 800aef8:	9306      	str	r3, [sp, #24]
 800aefa:	f000 ff6b 	bl	800bdd4 <__mcmp>
 800aefe:	002a      	movs	r2, r5
 800af00:	900f      	str	r0, [sp, #60]	; 0x3c
 800af02:	0031      	movs	r1, r6
 800af04:	0038      	movs	r0, r7
 800af06:	f000 ff81 	bl	800be0c <__mdiff>
 800af0a:	68c3      	ldr	r3, [r0, #12]
 800af0c:	9007      	str	r0, [sp, #28]
 800af0e:	9310      	str	r3, [sp, #64]	; 0x40
 800af10:	2301      	movs	r3, #1
 800af12:	930d      	str	r3, [sp, #52]	; 0x34
 800af14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d104      	bne.n	800af24 <_dtoa_r+0xaa4>
 800af1a:	0001      	movs	r1, r0
 800af1c:	9804      	ldr	r0, [sp, #16]
 800af1e:	f000 ff59 	bl	800bdd4 <__mcmp>
 800af22:	900d      	str	r0, [sp, #52]	; 0x34
 800af24:	0038      	movs	r0, r7
 800af26:	9907      	ldr	r1, [sp, #28]
 800af28:	f000 fcc6 	bl	800b8b8 <_Bfree>
 800af2c:	2301      	movs	r3, #1
 800af2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af32:	4018      	ands	r0, r3
 800af34:	9b08      	ldr	r3, [sp, #32]
 800af36:	3301      	adds	r3, #1
 800af38:	9307      	str	r3, [sp, #28]
 800af3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af3c:	4313      	orrs	r3, r2
 800af3e:	4303      	orrs	r3, r0
 800af40:	d10c      	bne.n	800af5c <_dtoa_r+0xadc>
 800af42:	9b06      	ldr	r3, [sp, #24]
 800af44:	2b39      	cmp	r3, #57	; 0x39
 800af46:	d025      	beq.n	800af94 <_dtoa_r+0xb14>
 800af48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd02      	ble.n	800af54 <_dtoa_r+0xad4>
 800af4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af50:	3331      	adds	r3, #49	; 0x31
 800af52:	9306      	str	r3, [sp, #24]
 800af54:	9b08      	ldr	r3, [sp, #32]
 800af56:	9a06      	ldr	r2, [sp, #24]
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	e773      	b.n	800ae44 <_dtoa_r+0x9c4>
 800af5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	db03      	blt.n	800af6a <_dtoa_r+0xaea>
 800af62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af64:	4313      	orrs	r3, r2
 800af66:	4303      	orrs	r3, r0
 800af68:	d11f      	bne.n	800afaa <_dtoa_r+0xb2a>
 800af6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	ddf1      	ble.n	800af54 <_dtoa_r+0xad4>
 800af70:	9904      	ldr	r1, [sp, #16]
 800af72:	2201      	movs	r2, #1
 800af74:	0038      	movs	r0, r7
 800af76:	f000 febd 	bl	800bcf4 <__lshift>
 800af7a:	0031      	movs	r1, r6
 800af7c:	9004      	str	r0, [sp, #16]
 800af7e:	f000 ff29 	bl	800bdd4 <__mcmp>
 800af82:	2800      	cmp	r0, #0
 800af84:	dc03      	bgt.n	800af8e <_dtoa_r+0xb0e>
 800af86:	d1e5      	bne.n	800af54 <_dtoa_r+0xad4>
 800af88:	9b06      	ldr	r3, [sp, #24]
 800af8a:	07db      	lsls	r3, r3, #31
 800af8c:	d5e2      	bpl.n	800af54 <_dtoa_r+0xad4>
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	2b39      	cmp	r3, #57	; 0x39
 800af92:	d1dc      	bne.n	800af4e <_dtoa_r+0xace>
 800af94:	2339      	movs	r3, #57	; 0x39
 800af96:	9a08      	ldr	r2, [sp, #32]
 800af98:	7013      	strb	r3, [r2, #0]
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	9307      	str	r3, [sp, #28]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	781a      	ldrb	r2, [r3, #0]
 800afa2:	2a39      	cmp	r2, #57	; 0x39
 800afa4:	d06c      	beq.n	800b080 <_dtoa_r+0xc00>
 800afa6:	3201      	adds	r2, #1
 800afa8:	e7d6      	b.n	800af58 <_dtoa_r+0xad8>
 800afaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd07      	ble.n	800afc0 <_dtoa_r+0xb40>
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	2b39      	cmp	r3, #57	; 0x39
 800afb4:	d0ee      	beq.n	800af94 <_dtoa_r+0xb14>
 800afb6:	9b06      	ldr	r3, [sp, #24]
 800afb8:	9a08      	ldr	r2, [sp, #32]
 800afba:	3301      	adds	r3, #1
 800afbc:	7013      	strb	r3, [r2, #0]
 800afbe:	e741      	b.n	800ae44 <_dtoa_r+0x9c4>
 800afc0:	9b08      	ldr	r3, [sp, #32]
 800afc2:	9a06      	ldr	r2, [sp, #24]
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	2301      	movs	r3, #1
 800afc8:	9a05      	ldr	r2, [sp, #20]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	9a08      	ldr	r2, [sp, #32]
 800afce:	189b      	adds	r3, r3, r2
 800afd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d03e      	beq.n	800b054 <_dtoa_r+0xbd4>
 800afd6:	2300      	movs	r3, #0
 800afd8:	220a      	movs	r2, #10
 800afda:	9904      	ldr	r1, [sp, #16]
 800afdc:	0038      	movs	r0, r7
 800afde:	f000 fc8f 	bl	800b900 <__multadd>
 800afe2:	2300      	movs	r3, #0
 800afe4:	9004      	str	r0, [sp, #16]
 800afe6:	220a      	movs	r2, #10
 800afe8:	0021      	movs	r1, r4
 800afea:	0038      	movs	r0, r7
 800afec:	42ac      	cmp	r4, r5
 800afee:	d106      	bne.n	800affe <_dtoa_r+0xb7e>
 800aff0:	f000 fc86 	bl	800b900 <__multadd>
 800aff4:	0004      	movs	r4, r0
 800aff6:	0005      	movs	r5, r0
 800aff8:	9b07      	ldr	r3, [sp, #28]
 800affa:	9308      	str	r3, [sp, #32]
 800affc:	e773      	b.n	800aee6 <_dtoa_r+0xa66>
 800affe:	f000 fc7f 	bl	800b900 <__multadd>
 800b002:	0029      	movs	r1, r5
 800b004:	0004      	movs	r4, r0
 800b006:	2300      	movs	r3, #0
 800b008:	220a      	movs	r2, #10
 800b00a:	0038      	movs	r0, r7
 800b00c:	f000 fc78 	bl	800b900 <__multadd>
 800b010:	0005      	movs	r5, r0
 800b012:	e7f1      	b.n	800aff8 <_dtoa_r+0xb78>
 800b014:	9b06      	ldr	r3, [sp, #24]
 800b016:	930c      	str	r3, [sp, #48]	; 0x30
 800b018:	2400      	movs	r4, #0
 800b01a:	0031      	movs	r1, r6
 800b01c:	9804      	ldr	r0, [sp, #16]
 800b01e:	f7ff f9a3 	bl	800a368 <quorem>
 800b022:	9b05      	ldr	r3, [sp, #20]
 800b024:	3030      	adds	r0, #48	; 0x30
 800b026:	5518      	strb	r0, [r3, r4]
 800b028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b02a:	3401      	adds	r4, #1
 800b02c:	9006      	str	r0, [sp, #24]
 800b02e:	42a3      	cmp	r3, r4
 800b030:	dd07      	ble.n	800b042 <_dtoa_r+0xbc2>
 800b032:	2300      	movs	r3, #0
 800b034:	220a      	movs	r2, #10
 800b036:	0038      	movs	r0, r7
 800b038:	9904      	ldr	r1, [sp, #16]
 800b03a:	f000 fc61 	bl	800b900 <__multadd>
 800b03e:	9004      	str	r0, [sp, #16]
 800b040:	e7eb      	b.n	800b01a <_dtoa_r+0xb9a>
 800b042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b044:	2001      	movs	r0, #1
 800b046:	2b00      	cmp	r3, #0
 800b048:	dd00      	ble.n	800b04c <_dtoa_r+0xbcc>
 800b04a:	0018      	movs	r0, r3
 800b04c:	2400      	movs	r4, #0
 800b04e:	9b05      	ldr	r3, [sp, #20]
 800b050:	181b      	adds	r3, r3, r0
 800b052:	9307      	str	r3, [sp, #28]
 800b054:	9904      	ldr	r1, [sp, #16]
 800b056:	2201      	movs	r2, #1
 800b058:	0038      	movs	r0, r7
 800b05a:	f000 fe4b 	bl	800bcf4 <__lshift>
 800b05e:	0031      	movs	r1, r6
 800b060:	9004      	str	r0, [sp, #16]
 800b062:	f000 feb7 	bl	800bdd4 <__mcmp>
 800b066:	2800      	cmp	r0, #0
 800b068:	dc97      	bgt.n	800af9a <_dtoa_r+0xb1a>
 800b06a:	d102      	bne.n	800b072 <_dtoa_r+0xbf2>
 800b06c:	9b06      	ldr	r3, [sp, #24]
 800b06e:	07db      	lsls	r3, r3, #31
 800b070:	d493      	bmi.n	800af9a <_dtoa_r+0xb1a>
 800b072:	9b07      	ldr	r3, [sp, #28]
 800b074:	9307      	str	r3, [sp, #28]
 800b076:	3b01      	subs	r3, #1
 800b078:	781a      	ldrb	r2, [r3, #0]
 800b07a:	2a30      	cmp	r2, #48	; 0x30
 800b07c:	d0fa      	beq.n	800b074 <_dtoa_r+0xbf4>
 800b07e:	e6e1      	b.n	800ae44 <_dtoa_r+0x9c4>
 800b080:	9a05      	ldr	r2, [sp, #20]
 800b082:	429a      	cmp	r2, r3
 800b084:	d18a      	bne.n	800af9c <_dtoa_r+0xb1c>
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	3301      	adds	r3, #1
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	2331      	movs	r3, #49	; 0x31
 800b08e:	e795      	b.n	800afbc <_dtoa_r+0xb3c>
 800b090:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <_dtoa_r+0xc34>)
 800b092:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <_dtoa_r+0xc38>)
 800b098:	2a00      	cmp	r2, #0
 800b09a:	d001      	beq.n	800b0a0 <_dtoa_r+0xc20>
 800b09c:	f7ff fa3b 	bl	800a516 <_dtoa_r+0x96>
 800b0a0:	f7ff fa3b 	bl	800a51a <_dtoa_r+0x9a>
 800b0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dcb6      	bgt.n	800b018 <_dtoa_r+0xb98>
 800b0aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	dd00      	ble.n	800b0b2 <_dtoa_r+0xc32>
 800b0b0:	e6b2      	b.n	800ae18 <_dtoa_r+0x998>
 800b0b2:	e7b1      	b.n	800b018 <_dtoa_r+0xb98>
 800b0b4:	0800dcb1 	.word	0x0800dcb1
 800b0b8:	0800dcb9 	.word	0x0800dcb9

0800b0bc <rshift>:
 800b0bc:	0002      	movs	r2, r0
 800b0be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0c0:	6907      	ldr	r7, [r0, #16]
 800b0c2:	3214      	adds	r2, #20
 800b0c4:	0013      	movs	r3, r2
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	114e      	asrs	r6, r1, #5
 800b0ca:	42b7      	cmp	r7, r6
 800b0cc:	dd31      	ble.n	800b132 <rshift+0x76>
 800b0ce:	00b3      	lsls	r3, r6, #2
 800b0d0:	18d3      	adds	r3, r2, r3
 800b0d2:	251f      	movs	r5, #31
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	000b      	movs	r3, r1
 800b0d8:	00bc      	lsls	r4, r7, #2
 800b0da:	402b      	ands	r3, r5
 800b0dc:	1914      	adds	r4, r2, r4
 800b0de:	9302      	str	r3, [sp, #8]
 800b0e0:	4229      	tst	r1, r5
 800b0e2:	d10c      	bne.n	800b0fe <rshift+0x42>
 800b0e4:	0015      	movs	r5, r2
 800b0e6:	9901      	ldr	r1, [sp, #4]
 800b0e8:	428c      	cmp	r4, r1
 800b0ea:	d838      	bhi.n	800b15e <rshift+0xa2>
 800b0ec:	9901      	ldr	r1, [sp, #4]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	3903      	subs	r1, #3
 800b0f2:	428c      	cmp	r4, r1
 800b0f4:	d301      	bcc.n	800b0fa <rshift+0x3e>
 800b0f6:	1bbb      	subs	r3, r7, r6
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	18d3      	adds	r3, r2, r3
 800b0fc:	e019      	b.n	800b132 <rshift+0x76>
 800b0fe:	2120      	movs	r1, #32
 800b100:	9b02      	ldr	r3, [sp, #8]
 800b102:	9d01      	ldr	r5, [sp, #4]
 800b104:	1acb      	subs	r3, r1, r3
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	cd02      	ldmia	r5!, {r1}
 800b10a:	9b02      	ldr	r3, [sp, #8]
 800b10c:	4694      	mov	ip, r2
 800b10e:	40d9      	lsrs	r1, r3
 800b110:	9100      	str	r1, [sp, #0]
 800b112:	42ac      	cmp	r4, r5
 800b114:	d816      	bhi.n	800b144 <rshift+0x88>
 800b116:	9d01      	ldr	r5, [sp, #4]
 800b118:	2300      	movs	r3, #0
 800b11a:	3501      	adds	r5, #1
 800b11c:	42ac      	cmp	r4, r5
 800b11e:	d302      	bcc.n	800b126 <rshift+0x6a>
 800b120:	1bbb      	subs	r3, r7, r6
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	3b04      	subs	r3, #4
 800b126:	9900      	ldr	r1, [sp, #0]
 800b128:	18d3      	adds	r3, r2, r3
 800b12a:	6019      	str	r1, [r3, #0]
 800b12c:	2900      	cmp	r1, #0
 800b12e:	d000      	beq.n	800b132 <rshift+0x76>
 800b130:	3304      	adds	r3, #4
 800b132:	1a99      	subs	r1, r3, r2
 800b134:	1089      	asrs	r1, r1, #2
 800b136:	6101      	str	r1, [r0, #16]
 800b138:	4293      	cmp	r3, r2
 800b13a:	d101      	bne.n	800b140 <rshift+0x84>
 800b13c:	2300      	movs	r3, #0
 800b13e:	6143      	str	r3, [r0, #20]
 800b140:	b005      	add	sp, #20
 800b142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	9903      	ldr	r1, [sp, #12]
 800b148:	408b      	lsls	r3, r1
 800b14a:	9900      	ldr	r1, [sp, #0]
 800b14c:	4319      	orrs	r1, r3
 800b14e:	4663      	mov	r3, ip
 800b150:	c302      	stmia	r3!, {r1}
 800b152:	469c      	mov	ip, r3
 800b154:	cd02      	ldmia	r5!, {r1}
 800b156:	9b02      	ldr	r3, [sp, #8]
 800b158:	40d9      	lsrs	r1, r3
 800b15a:	9100      	str	r1, [sp, #0]
 800b15c:	e7d9      	b.n	800b112 <rshift+0x56>
 800b15e:	c908      	ldmia	r1!, {r3}
 800b160:	c508      	stmia	r5!, {r3}
 800b162:	e7c1      	b.n	800b0e8 <rshift+0x2c>

0800b164 <__hexdig_fun>:
 800b164:	0002      	movs	r2, r0
 800b166:	3a30      	subs	r2, #48	; 0x30
 800b168:	0003      	movs	r3, r0
 800b16a:	2a09      	cmp	r2, #9
 800b16c:	d802      	bhi.n	800b174 <__hexdig_fun+0x10>
 800b16e:	3b20      	subs	r3, #32
 800b170:	b2d8      	uxtb	r0, r3
 800b172:	4770      	bx	lr
 800b174:	0002      	movs	r2, r0
 800b176:	3a61      	subs	r2, #97	; 0x61
 800b178:	2a05      	cmp	r2, #5
 800b17a:	d801      	bhi.n	800b180 <__hexdig_fun+0x1c>
 800b17c:	3b47      	subs	r3, #71	; 0x47
 800b17e:	e7f7      	b.n	800b170 <__hexdig_fun+0xc>
 800b180:	001a      	movs	r2, r3
 800b182:	3a41      	subs	r2, #65	; 0x41
 800b184:	2000      	movs	r0, #0
 800b186:	2a05      	cmp	r2, #5
 800b188:	d8f3      	bhi.n	800b172 <__hexdig_fun+0xe>
 800b18a:	3b27      	subs	r3, #39	; 0x27
 800b18c:	e7f0      	b.n	800b170 <__hexdig_fun+0xc>
	...

0800b190 <__gethex>:
 800b190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b192:	b08d      	sub	sp, #52	; 0x34
 800b194:	930a      	str	r3, [sp, #40]	; 0x28
 800b196:	4bbd      	ldr	r3, [pc, #756]	; (800b48c <__gethex+0x2fc>)
 800b198:	9005      	str	r0, [sp, #20]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	9109      	str	r1, [sp, #36]	; 0x24
 800b19e:	0018      	movs	r0, r3
 800b1a0:	9202      	str	r2, [sp, #8]
 800b1a2:	9307      	str	r3, [sp, #28]
 800b1a4:	f7f4 ffba 	bl	800011c <strlen>
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	9b07      	ldr	r3, [sp, #28]
 800b1ac:	4252      	negs	r2, r2
 800b1ae:	181b      	adds	r3, r3, r0
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	9003      	str	r0, [sp, #12]
 800b1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ba:	6819      	ldr	r1, [r3, #0]
 800b1bc:	1c8b      	adds	r3, r1, #2
 800b1be:	1a52      	subs	r2, r2, r1
 800b1c0:	18d1      	adds	r1, r2, r3
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	9108      	str	r1, [sp, #32]
 800b1c6:	9901      	ldr	r1, [sp, #4]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	7808      	ldrb	r0, [r1, #0]
 800b1cc:	2830      	cmp	r0, #48	; 0x30
 800b1ce:	d0f7      	beq.n	800b1c0 <__gethex+0x30>
 800b1d0:	f7ff ffc8 	bl	800b164 <__hexdig_fun>
 800b1d4:	1e04      	subs	r4, r0, #0
 800b1d6:	d13e      	bne.n	800b256 <__gethex+0xc6>
 800b1d8:	9a03      	ldr	r2, [sp, #12]
 800b1da:	9907      	ldr	r1, [sp, #28]
 800b1dc:	9801      	ldr	r0, [sp, #4]
 800b1de:	f001 fda7 	bl	800cd30 <strncmp>
 800b1e2:	1e07      	subs	r7, r0, #0
 800b1e4:	d000      	beq.n	800b1e8 <__gethex+0x58>
 800b1e6:	e06f      	b.n	800b2c8 <__gethex+0x138>
 800b1e8:	9b01      	ldr	r3, [sp, #4]
 800b1ea:	9a03      	ldr	r2, [sp, #12]
 800b1ec:	5c98      	ldrb	r0, [r3, r2]
 800b1ee:	189d      	adds	r5, r3, r2
 800b1f0:	f7ff ffb8 	bl	800b164 <__hexdig_fun>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d034      	beq.n	800b266 <__gethex+0xd6>
 800b1fc:	9501      	str	r5, [sp, #4]
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	7818      	ldrb	r0, [r3, #0]
 800b202:	2830      	cmp	r0, #48	; 0x30
 800b204:	d009      	beq.n	800b21a <__gethex+0x8a>
 800b206:	f7ff ffad 	bl	800b164 <__hexdig_fun>
 800b20a:	4243      	negs	r3, r0
 800b20c:	4143      	adcs	r3, r0
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	2301      	movs	r3, #1
 800b212:	002c      	movs	r4, r5
 800b214:	9308      	str	r3, [sp, #32]
 800b216:	9d01      	ldr	r5, [sp, #4]
 800b218:	e004      	b.n	800b224 <__gethex+0x94>
 800b21a:	9b01      	ldr	r3, [sp, #4]
 800b21c:	3301      	adds	r3, #1
 800b21e:	9301      	str	r3, [sp, #4]
 800b220:	e7ed      	b.n	800b1fe <__gethex+0x6e>
 800b222:	3501      	adds	r5, #1
 800b224:	7828      	ldrb	r0, [r5, #0]
 800b226:	f7ff ff9d 	bl	800b164 <__hexdig_fun>
 800b22a:	1e07      	subs	r7, r0, #0
 800b22c:	d1f9      	bne.n	800b222 <__gethex+0x92>
 800b22e:	0028      	movs	r0, r5
 800b230:	9a03      	ldr	r2, [sp, #12]
 800b232:	9907      	ldr	r1, [sp, #28]
 800b234:	f001 fd7c 	bl	800cd30 <strncmp>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d112      	bne.n	800b262 <__gethex+0xd2>
 800b23c:	2c00      	cmp	r4, #0
 800b23e:	d107      	bne.n	800b250 <__gethex+0xc0>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	18ed      	adds	r5, r5, r3
 800b244:	002c      	movs	r4, r5
 800b246:	7828      	ldrb	r0, [r5, #0]
 800b248:	f7ff ff8c 	bl	800b164 <__hexdig_fun>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d106      	bne.n	800b25e <__gethex+0xce>
 800b250:	1b67      	subs	r7, r4, r5
 800b252:	00bf      	lsls	r7, r7, #2
 800b254:	e007      	b.n	800b266 <__gethex+0xd6>
 800b256:	2300      	movs	r3, #0
 800b258:	001c      	movs	r4, r3
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	e7db      	b.n	800b216 <__gethex+0x86>
 800b25e:	3501      	adds	r5, #1
 800b260:	e7f1      	b.n	800b246 <__gethex+0xb6>
 800b262:	2c00      	cmp	r4, #0
 800b264:	d1f4      	bne.n	800b250 <__gethex+0xc0>
 800b266:	2220      	movs	r2, #32
 800b268:	782b      	ldrb	r3, [r5, #0]
 800b26a:	002e      	movs	r6, r5
 800b26c:	4393      	bics	r3, r2
 800b26e:	2b50      	cmp	r3, #80	; 0x50
 800b270:	d11d      	bne.n	800b2ae <__gethex+0x11e>
 800b272:	786b      	ldrb	r3, [r5, #1]
 800b274:	2b2b      	cmp	r3, #43	; 0x2b
 800b276:	d02c      	beq.n	800b2d2 <__gethex+0x142>
 800b278:	2b2d      	cmp	r3, #45	; 0x2d
 800b27a:	d02e      	beq.n	800b2da <__gethex+0x14a>
 800b27c:	2300      	movs	r3, #0
 800b27e:	1c6e      	adds	r6, r5, #1
 800b280:	9306      	str	r3, [sp, #24]
 800b282:	7830      	ldrb	r0, [r6, #0]
 800b284:	f7ff ff6e 	bl	800b164 <__hexdig_fun>
 800b288:	1e43      	subs	r3, r0, #1
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b18      	cmp	r3, #24
 800b28e:	d82b      	bhi.n	800b2e8 <__gethex+0x158>
 800b290:	3810      	subs	r0, #16
 800b292:	0004      	movs	r4, r0
 800b294:	7870      	ldrb	r0, [r6, #1]
 800b296:	f7ff ff65 	bl	800b164 <__hexdig_fun>
 800b29a:	1e43      	subs	r3, r0, #1
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	3601      	adds	r6, #1
 800b2a0:	2b18      	cmp	r3, #24
 800b2a2:	d91c      	bls.n	800b2de <__gethex+0x14e>
 800b2a4:	9b06      	ldr	r3, [sp, #24]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d000      	beq.n	800b2ac <__gethex+0x11c>
 800b2aa:	4264      	negs	r4, r4
 800b2ac:	193f      	adds	r7, r7, r4
 800b2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b0:	601e      	str	r6, [r3, #0]
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d019      	beq.n	800b2ec <__gethex+0x15c>
 800b2b8:	2600      	movs	r6, #0
 800b2ba:	9b08      	ldr	r3, [sp, #32]
 800b2bc:	42b3      	cmp	r3, r6
 800b2be:	d100      	bne.n	800b2c2 <__gethex+0x132>
 800b2c0:	3606      	adds	r6, #6
 800b2c2:	0030      	movs	r0, r6
 800b2c4:	b00d      	add	sp, #52	; 0x34
 800b2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	0027      	movs	r7, r4
 800b2cc:	9d01      	ldr	r5, [sp, #4]
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	e7c9      	b.n	800b266 <__gethex+0xd6>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9306      	str	r3, [sp, #24]
 800b2d6:	1cae      	adds	r6, r5, #2
 800b2d8:	e7d3      	b.n	800b282 <__gethex+0xf2>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e7fa      	b.n	800b2d4 <__gethex+0x144>
 800b2de:	230a      	movs	r3, #10
 800b2e0:	435c      	muls	r4, r3
 800b2e2:	1824      	adds	r4, r4, r0
 800b2e4:	3c10      	subs	r4, #16
 800b2e6:	e7d5      	b.n	800b294 <__gethex+0x104>
 800b2e8:	002e      	movs	r6, r5
 800b2ea:	e7e0      	b.n	800b2ae <__gethex+0x11e>
 800b2ec:	9b01      	ldr	r3, [sp, #4]
 800b2ee:	9904      	ldr	r1, [sp, #16]
 800b2f0:	1aeb      	subs	r3, r5, r3
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	2b07      	cmp	r3, #7
 800b2f6:	dc0a      	bgt.n	800b30e <__gethex+0x17e>
 800b2f8:	9805      	ldr	r0, [sp, #20]
 800b2fa:	f000 fa99 	bl	800b830 <_Balloc>
 800b2fe:	1e04      	subs	r4, r0, #0
 800b300:	d108      	bne.n	800b314 <__gethex+0x184>
 800b302:	0002      	movs	r2, r0
 800b304:	21de      	movs	r1, #222	; 0xde
 800b306:	4b62      	ldr	r3, [pc, #392]	; (800b490 <__gethex+0x300>)
 800b308:	4862      	ldr	r0, [pc, #392]	; (800b494 <__gethex+0x304>)
 800b30a:	f001 fdff 	bl	800cf0c <__assert_func>
 800b30e:	3101      	adds	r1, #1
 800b310:	105b      	asrs	r3, r3, #1
 800b312:	e7ef      	b.n	800b2f4 <__gethex+0x164>
 800b314:	0003      	movs	r3, r0
 800b316:	3314      	adds	r3, #20
 800b318:	9304      	str	r3, [sp, #16]
 800b31a:	9309      	str	r3, [sp, #36]	; 0x24
 800b31c:	2300      	movs	r3, #0
 800b31e:	001e      	movs	r6, r3
 800b320:	9306      	str	r3, [sp, #24]
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	42ab      	cmp	r3, r5
 800b326:	d340      	bcc.n	800b3aa <__gethex+0x21a>
 800b328:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b32a:	9b04      	ldr	r3, [sp, #16]
 800b32c:	c540      	stmia	r5!, {r6}
 800b32e:	1aed      	subs	r5, r5, r3
 800b330:	10ad      	asrs	r5, r5, #2
 800b332:	0030      	movs	r0, r6
 800b334:	6125      	str	r5, [r4, #16]
 800b336:	f000 fb73 	bl	800ba20 <__hi0bits>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	016d      	lsls	r5, r5, #5
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	1a2e      	subs	r6, r5, r0
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	429e      	cmp	r6, r3
 800b346:	dd5a      	ble.n	800b3fe <__gethex+0x26e>
 800b348:	1af6      	subs	r6, r6, r3
 800b34a:	0031      	movs	r1, r6
 800b34c:	0020      	movs	r0, r4
 800b34e:	f000 ff16 	bl	800c17e <__any_on>
 800b352:	1e05      	subs	r5, r0, #0
 800b354:	d016      	beq.n	800b384 <__gethex+0x1f4>
 800b356:	2501      	movs	r5, #1
 800b358:	211f      	movs	r1, #31
 800b35a:	0028      	movs	r0, r5
 800b35c:	1e73      	subs	r3, r6, #1
 800b35e:	4019      	ands	r1, r3
 800b360:	4088      	lsls	r0, r1
 800b362:	0001      	movs	r1, r0
 800b364:	115a      	asrs	r2, r3, #5
 800b366:	9804      	ldr	r0, [sp, #16]
 800b368:	0092      	lsls	r2, r2, #2
 800b36a:	5812      	ldr	r2, [r2, r0]
 800b36c:	420a      	tst	r2, r1
 800b36e:	d009      	beq.n	800b384 <__gethex+0x1f4>
 800b370:	42ab      	cmp	r3, r5
 800b372:	dd06      	ble.n	800b382 <__gethex+0x1f2>
 800b374:	0020      	movs	r0, r4
 800b376:	1eb1      	subs	r1, r6, #2
 800b378:	f000 ff01 	bl	800c17e <__any_on>
 800b37c:	3502      	adds	r5, #2
 800b37e:	2800      	cmp	r0, #0
 800b380:	d100      	bne.n	800b384 <__gethex+0x1f4>
 800b382:	2502      	movs	r5, #2
 800b384:	0031      	movs	r1, r6
 800b386:	0020      	movs	r0, r4
 800b388:	f7ff fe98 	bl	800b0bc <rshift>
 800b38c:	19bf      	adds	r7, r7, r6
 800b38e:	9b02      	ldr	r3, [sp, #8]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	9303      	str	r3, [sp, #12]
 800b394:	42bb      	cmp	r3, r7
 800b396:	da42      	bge.n	800b41e <__gethex+0x28e>
 800b398:	0021      	movs	r1, r4
 800b39a:	9805      	ldr	r0, [sp, #20]
 800b39c:	f000 fa8c 	bl	800b8b8 <_Bfree>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3a4:	26a3      	movs	r6, #163	; 0xa3
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	e78b      	b.n	800b2c2 <__gethex+0x132>
 800b3aa:	1e6b      	subs	r3, r5, #1
 800b3ac:	9308      	str	r3, [sp, #32]
 800b3ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d014      	beq.n	800b3e0 <__gethex+0x250>
 800b3b6:	9b06      	ldr	r3, [sp, #24]
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	d104      	bne.n	800b3c6 <__gethex+0x236>
 800b3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3be:	c340      	stmia	r3!, {r6}
 800b3c0:	2600      	movs	r6, #0
 800b3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c4:	9606      	str	r6, [sp, #24]
 800b3c6:	9b08      	ldr	r3, [sp, #32]
 800b3c8:	7818      	ldrb	r0, [r3, #0]
 800b3ca:	f7ff fecb 	bl	800b164 <__hexdig_fun>
 800b3ce:	230f      	movs	r3, #15
 800b3d0:	4018      	ands	r0, r3
 800b3d2:	9b06      	ldr	r3, [sp, #24]
 800b3d4:	9d08      	ldr	r5, [sp, #32]
 800b3d6:	4098      	lsls	r0, r3
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4306      	orrs	r6, r0
 800b3dc:	9306      	str	r3, [sp, #24]
 800b3de:	e7a0      	b.n	800b322 <__gethex+0x192>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	9a03      	ldr	r2, [sp, #12]
 800b3e4:	1a9d      	subs	r5, r3, r2
 800b3e6:	9b08      	ldr	r3, [sp, #32]
 800b3e8:	195d      	adds	r5, r3, r5
 800b3ea:	9b01      	ldr	r3, [sp, #4]
 800b3ec:	429d      	cmp	r5, r3
 800b3ee:	d3e2      	bcc.n	800b3b6 <__gethex+0x226>
 800b3f0:	0028      	movs	r0, r5
 800b3f2:	9907      	ldr	r1, [sp, #28]
 800b3f4:	f001 fc9c 	bl	800cd30 <strncmp>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d1dc      	bne.n	800b3b6 <__gethex+0x226>
 800b3fc:	e791      	b.n	800b322 <__gethex+0x192>
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	2500      	movs	r5, #0
 800b402:	429e      	cmp	r6, r3
 800b404:	dac3      	bge.n	800b38e <__gethex+0x1fe>
 800b406:	1b9e      	subs	r6, r3, r6
 800b408:	0021      	movs	r1, r4
 800b40a:	0032      	movs	r2, r6
 800b40c:	9805      	ldr	r0, [sp, #20]
 800b40e:	f000 fc71 	bl	800bcf4 <__lshift>
 800b412:	0003      	movs	r3, r0
 800b414:	3314      	adds	r3, #20
 800b416:	0004      	movs	r4, r0
 800b418:	1bbf      	subs	r7, r7, r6
 800b41a:	9304      	str	r3, [sp, #16]
 800b41c:	e7b7      	b.n	800b38e <__gethex+0x1fe>
 800b41e:	9b02      	ldr	r3, [sp, #8]
 800b420:	685e      	ldr	r6, [r3, #4]
 800b422:	42be      	cmp	r6, r7
 800b424:	dd71      	ble.n	800b50a <__gethex+0x37a>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	1bf6      	subs	r6, r6, r7
 800b42a:	42b3      	cmp	r3, r6
 800b42c:	dc38      	bgt.n	800b4a0 <__gethex+0x310>
 800b42e:	9b02      	ldr	r3, [sp, #8]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	2b02      	cmp	r3, #2
 800b434:	d026      	beq.n	800b484 <__gethex+0x2f4>
 800b436:	2b03      	cmp	r3, #3
 800b438:	d02e      	beq.n	800b498 <__gethex+0x308>
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d119      	bne.n	800b472 <__gethex+0x2e2>
 800b43e:	9b01      	ldr	r3, [sp, #4]
 800b440:	42b3      	cmp	r3, r6
 800b442:	d116      	bne.n	800b472 <__gethex+0x2e2>
 800b444:	2b01      	cmp	r3, #1
 800b446:	d10d      	bne.n	800b464 <__gethex+0x2d4>
 800b448:	9b02      	ldr	r3, [sp, #8]
 800b44a:	2662      	movs	r6, #98	; 0x62
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	9a01      	ldr	r2, [sp, #4]
 800b452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	2301      	movs	r3, #1
 800b458:	9a04      	ldr	r2, [sp, #16]
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b460:	601c      	str	r4, [r3, #0]
 800b462:	e72e      	b.n	800b2c2 <__gethex+0x132>
 800b464:	9901      	ldr	r1, [sp, #4]
 800b466:	0020      	movs	r0, r4
 800b468:	3901      	subs	r1, #1
 800b46a:	f000 fe88 	bl	800c17e <__any_on>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d1ea      	bne.n	800b448 <__gethex+0x2b8>
 800b472:	0021      	movs	r1, r4
 800b474:	9805      	ldr	r0, [sp, #20]
 800b476:	f000 fa1f 	bl	800b8b8 <_Bfree>
 800b47a:	2300      	movs	r3, #0
 800b47c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b47e:	2650      	movs	r6, #80	; 0x50
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	e71e      	b.n	800b2c2 <__gethex+0x132>
 800b484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1f3      	bne.n	800b472 <__gethex+0x2e2>
 800b48a:	e7dd      	b.n	800b448 <__gethex+0x2b8>
 800b48c:	0800ddb0 	.word	0x0800ddb0
 800b490:	0800dd34 	.word	0x0800dd34
 800b494:	0800dd45 	.word	0x0800dd45
 800b498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1d4      	bne.n	800b448 <__gethex+0x2b8>
 800b49e:	e7e8      	b.n	800b472 <__gethex+0x2e2>
 800b4a0:	1e77      	subs	r7, r6, #1
 800b4a2:	2d00      	cmp	r5, #0
 800b4a4:	d12f      	bne.n	800b506 <__gethex+0x376>
 800b4a6:	2f00      	cmp	r7, #0
 800b4a8:	d004      	beq.n	800b4b4 <__gethex+0x324>
 800b4aa:	0039      	movs	r1, r7
 800b4ac:	0020      	movs	r0, r4
 800b4ae:	f000 fe66 	bl	800c17e <__any_on>
 800b4b2:	0005      	movs	r5, r0
 800b4b4:	231f      	movs	r3, #31
 800b4b6:	117a      	asrs	r2, r7, #5
 800b4b8:	401f      	ands	r7, r3
 800b4ba:	3b1e      	subs	r3, #30
 800b4bc:	40bb      	lsls	r3, r7
 800b4be:	9904      	ldr	r1, [sp, #16]
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	5852      	ldr	r2, [r2, r1]
 800b4c4:	421a      	tst	r2, r3
 800b4c6:	d001      	beq.n	800b4cc <__gethex+0x33c>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	431d      	orrs	r5, r3
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	0031      	movs	r1, r6
 800b4d0:	1b9b      	subs	r3, r3, r6
 800b4d2:	2602      	movs	r6, #2
 800b4d4:	0020      	movs	r0, r4
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	f7ff fdf0 	bl	800b0bc <rshift>
 800b4dc:	9b02      	ldr	r3, [sp, #8]
 800b4de:	685f      	ldr	r7, [r3, #4]
 800b4e0:	2d00      	cmp	r5, #0
 800b4e2:	d041      	beq.n	800b568 <__gethex+0x3d8>
 800b4e4:	9b02      	ldr	r3, [sp, #8]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d010      	beq.n	800b50e <__gethex+0x37e>
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d012      	beq.n	800b516 <__gethex+0x386>
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d106      	bne.n	800b502 <__gethex+0x372>
 800b4f4:	07aa      	lsls	r2, r5, #30
 800b4f6:	d504      	bpl.n	800b502 <__gethex+0x372>
 800b4f8:	9a04      	ldr	r2, [sp, #16]
 800b4fa:	6810      	ldr	r0, [r2, #0]
 800b4fc:	4305      	orrs	r5, r0
 800b4fe:	421d      	tst	r5, r3
 800b500:	d10c      	bne.n	800b51c <__gethex+0x38c>
 800b502:	2310      	movs	r3, #16
 800b504:	e02f      	b.n	800b566 <__gethex+0x3d6>
 800b506:	2501      	movs	r5, #1
 800b508:	e7d4      	b.n	800b4b4 <__gethex+0x324>
 800b50a:	2601      	movs	r6, #1
 800b50c:	e7e8      	b.n	800b4e0 <__gethex+0x350>
 800b50e:	2301      	movs	r3, #1
 800b510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	9313      	str	r3, [sp, #76]	; 0x4c
 800b516:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0f2      	beq.n	800b502 <__gethex+0x372>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	2000      	movs	r0, #0
 800b520:	9303      	str	r3, [sp, #12]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	0023      	movs	r3, r4
 800b528:	9a04      	ldr	r2, [sp, #16]
 800b52a:	3314      	adds	r3, #20
 800b52c:	1899      	adds	r1, r3, r2
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	1c55      	adds	r5, r2, #1
 800b532:	d01e      	beq.n	800b572 <__gethex+0x3e2>
 800b534:	3201      	adds	r2, #1
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	0023      	movs	r3, r4
 800b53a:	3314      	adds	r3, #20
 800b53c:	2e02      	cmp	r6, #2
 800b53e:	d140      	bne.n	800b5c2 <__gethex+0x432>
 800b540:	9a02      	ldr	r2, [sp, #8]
 800b542:	9901      	ldr	r1, [sp, #4]
 800b544:	6812      	ldr	r2, [r2, #0]
 800b546:	3a01      	subs	r2, #1
 800b548:	428a      	cmp	r2, r1
 800b54a:	d10b      	bne.n	800b564 <__gethex+0x3d4>
 800b54c:	114a      	asrs	r2, r1, #5
 800b54e:	211f      	movs	r1, #31
 800b550:	9801      	ldr	r0, [sp, #4]
 800b552:	0092      	lsls	r2, r2, #2
 800b554:	4001      	ands	r1, r0
 800b556:	2001      	movs	r0, #1
 800b558:	0005      	movs	r5, r0
 800b55a:	408d      	lsls	r5, r1
 800b55c:	58d3      	ldr	r3, [r2, r3]
 800b55e:	422b      	tst	r3, r5
 800b560:	d000      	beq.n	800b564 <__gethex+0x3d4>
 800b562:	2601      	movs	r6, #1
 800b564:	2320      	movs	r3, #32
 800b566:	431e      	orrs	r6, r3
 800b568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b56a:	601c      	str	r4, [r3, #0]
 800b56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56e:	601f      	str	r7, [r3, #0]
 800b570:	e6a7      	b.n	800b2c2 <__gethex+0x132>
 800b572:	c301      	stmia	r3!, {r0}
 800b574:	4299      	cmp	r1, r3
 800b576:	d8da      	bhi.n	800b52e <__gethex+0x39e>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	68a2      	ldr	r2, [r4, #8]
 800b57c:	4293      	cmp	r3, r2
 800b57e:	db17      	blt.n	800b5b0 <__gethex+0x420>
 800b580:	6863      	ldr	r3, [r4, #4]
 800b582:	9805      	ldr	r0, [sp, #20]
 800b584:	1c59      	adds	r1, r3, #1
 800b586:	f000 f953 	bl	800b830 <_Balloc>
 800b58a:	1e05      	subs	r5, r0, #0
 800b58c:	d103      	bne.n	800b596 <__gethex+0x406>
 800b58e:	0002      	movs	r2, r0
 800b590:	2184      	movs	r1, #132	; 0x84
 800b592:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <__gethex+0x474>)
 800b594:	e6b8      	b.n	800b308 <__gethex+0x178>
 800b596:	0021      	movs	r1, r4
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	310c      	adds	r1, #12
 800b59c:	1c9a      	adds	r2, r3, #2
 800b59e:	0092      	lsls	r2, r2, #2
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	f000 f93c 	bl	800b81e <memcpy>
 800b5a6:	0021      	movs	r1, r4
 800b5a8:	9805      	ldr	r0, [sp, #20]
 800b5aa:	f000 f985 	bl	800b8b8 <_Bfree>
 800b5ae:	002c      	movs	r4, r5
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	6122      	str	r2, [r4, #16]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	18e3      	adds	r3, r4, r3
 800b5be:	605a      	str	r2, [r3, #4]
 800b5c0:	e7ba      	b.n	800b538 <__gethex+0x3a8>
 800b5c2:	6922      	ldr	r2, [r4, #16]
 800b5c4:	9903      	ldr	r1, [sp, #12]
 800b5c6:	428a      	cmp	r2, r1
 800b5c8:	dd09      	ble.n	800b5de <__gethex+0x44e>
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	0020      	movs	r0, r4
 800b5ce:	f7ff fd75 	bl	800b0bc <rshift>
 800b5d2:	9b02      	ldr	r3, [sp, #8]
 800b5d4:	3701      	adds	r7, #1
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	42bb      	cmp	r3, r7
 800b5da:	dac2      	bge.n	800b562 <__gethex+0x3d2>
 800b5dc:	e6dc      	b.n	800b398 <__gethex+0x208>
 800b5de:	221f      	movs	r2, #31
 800b5e0:	9d01      	ldr	r5, [sp, #4]
 800b5e2:	9901      	ldr	r1, [sp, #4]
 800b5e4:	2601      	movs	r6, #1
 800b5e6:	4015      	ands	r5, r2
 800b5e8:	4211      	tst	r1, r2
 800b5ea:	d0bb      	beq.n	800b564 <__gethex+0x3d4>
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	189b      	adds	r3, r3, r2
 800b5f0:	3b04      	subs	r3, #4
 800b5f2:	6818      	ldr	r0, [r3, #0]
 800b5f4:	f000 fa14 	bl	800ba20 <__hi0bits>
 800b5f8:	2320      	movs	r3, #32
 800b5fa:	1b5d      	subs	r5, r3, r5
 800b5fc:	42a8      	cmp	r0, r5
 800b5fe:	dbe4      	blt.n	800b5ca <__gethex+0x43a>
 800b600:	e7b0      	b.n	800b564 <__gethex+0x3d4>
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	0800dd34 	.word	0x0800dd34

0800b608 <L_shift>:
 800b608:	2308      	movs	r3, #8
 800b60a:	b570      	push	{r4, r5, r6, lr}
 800b60c:	2520      	movs	r5, #32
 800b60e:	1a9a      	subs	r2, r3, r2
 800b610:	0092      	lsls	r2, r2, #2
 800b612:	1aad      	subs	r5, r5, r2
 800b614:	6843      	ldr	r3, [r0, #4]
 800b616:	6806      	ldr	r6, [r0, #0]
 800b618:	001c      	movs	r4, r3
 800b61a:	40ac      	lsls	r4, r5
 800b61c:	40d3      	lsrs	r3, r2
 800b61e:	4334      	orrs	r4, r6
 800b620:	6004      	str	r4, [r0, #0]
 800b622:	6043      	str	r3, [r0, #4]
 800b624:	3004      	adds	r0, #4
 800b626:	4288      	cmp	r0, r1
 800b628:	d3f4      	bcc.n	800b614 <L_shift+0xc>
 800b62a:	bd70      	pop	{r4, r5, r6, pc}

0800b62c <__match>:
 800b62c:	b530      	push	{r4, r5, lr}
 800b62e:	6803      	ldr	r3, [r0, #0]
 800b630:	780c      	ldrb	r4, [r1, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	2c00      	cmp	r4, #0
 800b636:	d102      	bne.n	800b63e <__match+0x12>
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	2001      	movs	r0, #1
 800b63c:	bd30      	pop	{r4, r5, pc}
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	0015      	movs	r5, r2
 800b642:	3d41      	subs	r5, #65	; 0x41
 800b644:	2d19      	cmp	r5, #25
 800b646:	d800      	bhi.n	800b64a <__match+0x1e>
 800b648:	3220      	adds	r2, #32
 800b64a:	3101      	adds	r1, #1
 800b64c:	42a2      	cmp	r2, r4
 800b64e:	d0ef      	beq.n	800b630 <__match+0x4>
 800b650:	2000      	movs	r0, #0
 800b652:	e7f3      	b.n	800b63c <__match+0x10>

0800b654 <__hexnan>:
 800b654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b656:	680b      	ldr	r3, [r1, #0]
 800b658:	b08b      	sub	sp, #44	; 0x2c
 800b65a:	115c      	asrs	r4, r3, #5
 800b65c:	00a4      	lsls	r4, r4, #2
 800b65e:	9201      	str	r2, [sp, #4]
 800b660:	1912      	adds	r2, r2, r4
 800b662:	0019      	movs	r1, r3
 800b664:	9202      	str	r2, [sp, #8]
 800b666:	221f      	movs	r2, #31
 800b668:	4011      	ands	r1, r2
 800b66a:	9008      	str	r0, [sp, #32]
 800b66c:	9106      	str	r1, [sp, #24]
 800b66e:	4213      	tst	r3, r2
 800b670:	d002      	beq.n	800b678 <__hexnan+0x24>
 800b672:	9b02      	ldr	r3, [sp, #8]
 800b674:	3304      	adds	r3, #4
 800b676:	9302      	str	r3, [sp, #8]
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	2500      	movs	r5, #0
 800b67c:	1f1e      	subs	r6, r3, #4
 800b67e:	0037      	movs	r7, r6
 800b680:	0034      	movs	r4, r6
 800b682:	9b08      	ldr	r3, [sp, #32]
 800b684:	6035      	str	r5, [r6, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	9507      	str	r5, [sp, #28]
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	9503      	str	r5, [sp, #12]
 800b68e:	9b05      	ldr	r3, [sp, #20]
 800b690:	3301      	adds	r3, #1
 800b692:	9309      	str	r3, [sp, #36]	; 0x24
 800b694:	9b05      	ldr	r3, [sp, #20]
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d028      	beq.n	800b6f0 <__hexnan+0x9c>
 800b69e:	9804      	ldr	r0, [sp, #16]
 800b6a0:	f7ff fd60 	bl	800b164 <__hexdig_fun>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d154      	bne.n	800b752 <__hexnan+0xfe>
 800b6a8:	9b04      	ldr	r3, [sp, #16]
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d819      	bhi.n	800b6e2 <__hexnan+0x8e>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	9a07      	ldr	r2, [sp, #28]
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	dd12      	ble.n	800b6dc <__hexnan+0x88>
 800b6b6:	42bc      	cmp	r4, r7
 800b6b8:	d206      	bcs.n	800b6c8 <__hexnan+0x74>
 800b6ba:	2d07      	cmp	r5, #7
 800b6bc:	dc04      	bgt.n	800b6c8 <__hexnan+0x74>
 800b6be:	002a      	movs	r2, r5
 800b6c0:	0039      	movs	r1, r7
 800b6c2:	0020      	movs	r0, r4
 800b6c4:	f7ff ffa0 	bl	800b608 <L_shift>
 800b6c8:	9b01      	ldr	r3, [sp, #4]
 800b6ca:	2508      	movs	r5, #8
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	d905      	bls.n	800b6dc <__hexnan+0x88>
 800b6d0:	1f27      	subs	r7, r4, #4
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	003c      	movs	r4, r7
 800b6d6:	9b03      	ldr	r3, [sp, #12]
 800b6d8:	603d      	str	r5, [r7, #0]
 800b6da:	9307      	str	r3, [sp, #28]
 800b6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6de:	9305      	str	r3, [sp, #20]
 800b6e0:	e7d5      	b.n	800b68e <__hexnan+0x3a>
 800b6e2:	9b04      	ldr	r3, [sp, #16]
 800b6e4:	2b29      	cmp	r3, #41	; 0x29
 800b6e6:	d158      	bne.n	800b79a <__hexnan+0x146>
 800b6e8:	9b05      	ldr	r3, [sp, #20]
 800b6ea:	9a08      	ldr	r2, [sp, #32]
 800b6ec:	3302      	adds	r3, #2
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d051      	beq.n	800b79a <__hexnan+0x146>
 800b6f6:	42bc      	cmp	r4, r7
 800b6f8:	d206      	bcs.n	800b708 <__hexnan+0xb4>
 800b6fa:	2d07      	cmp	r5, #7
 800b6fc:	dc04      	bgt.n	800b708 <__hexnan+0xb4>
 800b6fe:	002a      	movs	r2, r5
 800b700:	0039      	movs	r1, r7
 800b702:	0020      	movs	r0, r4
 800b704:	f7ff ff80 	bl	800b608 <L_shift>
 800b708:	9b01      	ldr	r3, [sp, #4]
 800b70a:	429c      	cmp	r4, r3
 800b70c:	d935      	bls.n	800b77a <__hexnan+0x126>
 800b70e:	001a      	movs	r2, r3
 800b710:	0023      	movs	r3, r4
 800b712:	cb02      	ldmia	r3!, {r1}
 800b714:	c202      	stmia	r2!, {r1}
 800b716:	429e      	cmp	r6, r3
 800b718:	d2fb      	bcs.n	800b712 <__hexnan+0xbe>
 800b71a:	9b02      	ldr	r3, [sp, #8]
 800b71c:	1c61      	adds	r1, r4, #1
 800b71e:	1eda      	subs	r2, r3, #3
 800b720:	2304      	movs	r3, #4
 800b722:	4291      	cmp	r1, r2
 800b724:	d805      	bhi.n	800b732 <__hexnan+0xde>
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	3b04      	subs	r3, #4
 800b72a:	1b1c      	subs	r4, r3, r4
 800b72c:	08a4      	lsrs	r4, r4, #2
 800b72e:	3401      	adds	r4, #1
 800b730:	00a3      	lsls	r3, r4, #2
 800b732:	9a01      	ldr	r2, [sp, #4]
 800b734:	18d4      	adds	r4, r2, r3
 800b736:	2300      	movs	r3, #0
 800b738:	c408      	stmia	r4!, {r3}
 800b73a:	42a6      	cmp	r6, r4
 800b73c:	d2fc      	bcs.n	800b738 <__hexnan+0xe4>
 800b73e:	6833      	ldr	r3, [r6, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <__hexnan+0xfa>
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	429e      	cmp	r6, r3
 800b748:	d125      	bne.n	800b796 <__hexnan+0x142>
 800b74a:	2301      	movs	r3, #1
 800b74c:	6033      	str	r3, [r6, #0]
 800b74e:	2005      	movs	r0, #5
 800b750:	e024      	b.n	800b79c <__hexnan+0x148>
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	3501      	adds	r5, #1
 800b756:	3301      	adds	r3, #1
 800b758:	9303      	str	r3, [sp, #12]
 800b75a:	2d08      	cmp	r5, #8
 800b75c:	dd06      	ble.n	800b76c <__hexnan+0x118>
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	429c      	cmp	r4, r3
 800b762:	d9bb      	bls.n	800b6dc <__hexnan+0x88>
 800b764:	2300      	movs	r3, #0
 800b766:	2501      	movs	r5, #1
 800b768:	3c04      	subs	r4, #4
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	220f      	movs	r2, #15
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	4010      	ands	r0, r2
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	4318      	orrs	r0, r3
 800b776:	6020      	str	r0, [r4, #0]
 800b778:	e7b0      	b.n	800b6dc <__hexnan+0x88>
 800b77a:	9b06      	ldr	r3, [sp, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0de      	beq.n	800b73e <__hexnan+0xea>
 800b780:	2220      	movs	r2, #32
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	2301      	movs	r3, #1
 800b786:	425b      	negs	r3, r3
 800b788:	40d3      	lsrs	r3, r2
 800b78a:	9c02      	ldr	r4, [sp, #8]
 800b78c:	3c04      	subs	r4, #4
 800b78e:	6822      	ldr	r2, [r4, #0]
 800b790:	4013      	ands	r3, r2
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	e7d3      	b.n	800b73e <__hexnan+0xea>
 800b796:	3e04      	subs	r6, #4
 800b798:	e7d1      	b.n	800b73e <__hexnan+0xea>
 800b79a:	2004      	movs	r0, #4
 800b79c:	b00b      	add	sp, #44	; 0x2c
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7a0 <_localeconv_r>:
 800b7a0:	4800      	ldr	r0, [pc, #0]	; (800b7a4 <_localeconv_r+0x4>)
 800b7a2:	4770      	bx	lr
 800b7a4:	20000164 	.word	0x20000164

0800b7a8 <_lseek_r>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	0004      	movs	r4, r0
 800b7ac:	0008      	movs	r0, r1
 800b7ae:	0011      	movs	r1, r2
 800b7b0:	001a      	movs	r2, r3
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	4d05      	ldr	r5, [pc, #20]	; (800b7cc <_lseek_r+0x24>)
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f8 fda0 	bl	80042fc <_lseek>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d103      	bne.n	800b7c8 <_lseek_r+0x20>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d000      	beq.n	800b7c8 <_lseek_r+0x20>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ca:	46c0      	nop			; (mov r8, r8)
 800b7cc:	200005b0 	.word	0x200005b0

0800b7d0 <malloc>:
 800b7d0:	b510      	push	{r4, lr}
 800b7d2:	4b03      	ldr	r3, [pc, #12]	; (800b7e0 <malloc+0x10>)
 800b7d4:	0001      	movs	r1, r0
 800b7d6:	6818      	ldr	r0, [r3, #0]
 800b7d8:	f000 fd4c 	bl	800c274 <_malloc_r>
 800b7dc:	bd10      	pop	{r4, pc}
 800b7de:	46c0      	nop			; (mov r8, r8)
 800b7e0:	2000000c 	.word	0x2000000c

0800b7e4 <__ascii_mbtowc>:
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	2900      	cmp	r1, #0
 800b7e8:	d100      	bne.n	800b7ec <__ascii_mbtowc+0x8>
 800b7ea:	a901      	add	r1, sp, #4
 800b7ec:	1e10      	subs	r0, r2, #0
 800b7ee:	d006      	beq.n	800b7fe <__ascii_mbtowc+0x1a>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <__ascii_mbtowc+0x1e>
 800b7f4:	7813      	ldrb	r3, [r2, #0]
 800b7f6:	600b      	str	r3, [r1, #0]
 800b7f8:	7810      	ldrb	r0, [r2, #0]
 800b7fa:	1e43      	subs	r3, r0, #1
 800b7fc:	4198      	sbcs	r0, r3
 800b7fe:	b002      	add	sp, #8
 800b800:	4770      	bx	lr
 800b802:	2002      	movs	r0, #2
 800b804:	4240      	negs	r0, r0
 800b806:	e7fa      	b.n	800b7fe <__ascii_mbtowc+0x1a>

0800b808 <memchr>:
 800b808:	b2c9      	uxtb	r1, r1
 800b80a:	1882      	adds	r2, r0, r2
 800b80c:	4290      	cmp	r0, r2
 800b80e:	d101      	bne.n	800b814 <memchr+0xc>
 800b810:	2000      	movs	r0, #0
 800b812:	4770      	bx	lr
 800b814:	7803      	ldrb	r3, [r0, #0]
 800b816:	428b      	cmp	r3, r1
 800b818:	d0fb      	beq.n	800b812 <memchr+0xa>
 800b81a:	3001      	adds	r0, #1
 800b81c:	e7f6      	b.n	800b80c <memchr+0x4>

0800b81e <memcpy>:
 800b81e:	2300      	movs	r3, #0
 800b820:	b510      	push	{r4, lr}
 800b822:	429a      	cmp	r2, r3
 800b824:	d100      	bne.n	800b828 <memcpy+0xa>
 800b826:	bd10      	pop	{r4, pc}
 800b828:	5ccc      	ldrb	r4, [r1, r3]
 800b82a:	54c4      	strb	r4, [r0, r3]
 800b82c:	3301      	adds	r3, #1
 800b82e:	e7f8      	b.n	800b822 <memcpy+0x4>

0800b830 <_Balloc>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b834:	0006      	movs	r6, r0
 800b836:	000c      	movs	r4, r1
 800b838:	2d00      	cmp	r5, #0
 800b83a:	d10e      	bne.n	800b85a <_Balloc+0x2a>
 800b83c:	2010      	movs	r0, #16
 800b83e:	f7ff ffc7 	bl	800b7d0 <malloc>
 800b842:	1e02      	subs	r2, r0, #0
 800b844:	6270      	str	r0, [r6, #36]	; 0x24
 800b846:	d104      	bne.n	800b852 <_Balloc+0x22>
 800b848:	2166      	movs	r1, #102	; 0x66
 800b84a:	4b19      	ldr	r3, [pc, #100]	; (800b8b0 <_Balloc+0x80>)
 800b84c:	4819      	ldr	r0, [pc, #100]	; (800b8b4 <_Balloc+0x84>)
 800b84e:	f001 fb5d 	bl	800cf0c <__assert_func>
 800b852:	6045      	str	r5, [r0, #4]
 800b854:	6085      	str	r5, [r0, #8]
 800b856:	6005      	str	r5, [r0, #0]
 800b858:	60c5      	str	r5, [r0, #12]
 800b85a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b85c:	68eb      	ldr	r3, [r5, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d013      	beq.n	800b88a <_Balloc+0x5a>
 800b862:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b864:	00a2      	lsls	r2, r4, #2
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	189b      	adds	r3, r3, r2
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d118      	bne.n	800b8a2 <_Balloc+0x72>
 800b870:	2101      	movs	r1, #1
 800b872:	000d      	movs	r5, r1
 800b874:	40a5      	lsls	r5, r4
 800b876:	1d6a      	adds	r2, r5, #5
 800b878:	0030      	movs	r0, r6
 800b87a:	0092      	lsls	r2, r2, #2
 800b87c:	f000 fca2 	bl	800c1c4 <_calloc_r>
 800b880:	2800      	cmp	r0, #0
 800b882:	d00c      	beq.n	800b89e <_Balloc+0x6e>
 800b884:	6044      	str	r4, [r0, #4]
 800b886:	6085      	str	r5, [r0, #8]
 800b888:	e00d      	b.n	800b8a6 <_Balloc+0x76>
 800b88a:	2221      	movs	r2, #33	; 0x21
 800b88c:	2104      	movs	r1, #4
 800b88e:	0030      	movs	r0, r6
 800b890:	f000 fc98 	bl	800c1c4 <_calloc_r>
 800b894:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b896:	60e8      	str	r0, [r5, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e1      	bne.n	800b862 <_Balloc+0x32>
 800b89e:	2000      	movs	r0, #0
 800b8a0:	bd70      	pop	{r4, r5, r6, pc}
 800b8a2:	6802      	ldr	r2, [r0, #0]
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6103      	str	r3, [r0, #16]
 800b8aa:	60c3      	str	r3, [r0, #12]
 800b8ac:	e7f8      	b.n	800b8a0 <_Balloc+0x70>
 800b8ae:	46c0      	nop			; (mov r8, r8)
 800b8b0:	0800dcbe 	.word	0x0800dcbe
 800b8b4:	0800ddc4 	.word	0x0800ddc4

0800b8b8 <_Bfree>:
 800b8b8:	b570      	push	{r4, r5, r6, lr}
 800b8ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8bc:	0005      	movs	r5, r0
 800b8be:	000c      	movs	r4, r1
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	d10e      	bne.n	800b8e2 <_Bfree+0x2a>
 800b8c4:	2010      	movs	r0, #16
 800b8c6:	f7ff ff83 	bl	800b7d0 <malloc>
 800b8ca:	1e02      	subs	r2, r0, #0
 800b8cc:	6268      	str	r0, [r5, #36]	; 0x24
 800b8ce:	d104      	bne.n	800b8da <_Bfree+0x22>
 800b8d0:	218a      	movs	r1, #138	; 0x8a
 800b8d2:	4b09      	ldr	r3, [pc, #36]	; (800b8f8 <_Bfree+0x40>)
 800b8d4:	4809      	ldr	r0, [pc, #36]	; (800b8fc <_Bfree+0x44>)
 800b8d6:	f001 fb19 	bl	800cf0c <__assert_func>
 800b8da:	6046      	str	r6, [r0, #4]
 800b8dc:	6086      	str	r6, [r0, #8]
 800b8de:	6006      	str	r6, [r0, #0]
 800b8e0:	60c6      	str	r6, [r0, #12]
 800b8e2:	2c00      	cmp	r4, #0
 800b8e4:	d007      	beq.n	800b8f6 <_Bfree+0x3e>
 800b8e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8e8:	6862      	ldr	r2, [r4, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	0092      	lsls	r2, r2, #2
 800b8ee:	189b      	adds	r3, r3, r2
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	601c      	str	r4, [r3, #0]
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	0800dcbe 	.word	0x0800dcbe
 800b8fc:	0800ddc4 	.word	0x0800ddc4

0800b900 <__multadd>:
 800b900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b902:	000e      	movs	r6, r1
 800b904:	9001      	str	r0, [sp, #4]
 800b906:	000c      	movs	r4, r1
 800b908:	001d      	movs	r5, r3
 800b90a:	2000      	movs	r0, #0
 800b90c:	690f      	ldr	r7, [r1, #16]
 800b90e:	3614      	adds	r6, #20
 800b910:	6833      	ldr	r3, [r6, #0]
 800b912:	3001      	adds	r0, #1
 800b914:	b299      	uxth	r1, r3
 800b916:	4351      	muls	r1, r2
 800b918:	0c1b      	lsrs	r3, r3, #16
 800b91a:	4353      	muls	r3, r2
 800b91c:	1949      	adds	r1, r1, r5
 800b91e:	0c0d      	lsrs	r5, r1, #16
 800b920:	195b      	adds	r3, r3, r5
 800b922:	0c1d      	lsrs	r5, r3, #16
 800b924:	b289      	uxth	r1, r1
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	185b      	adds	r3, r3, r1
 800b92a:	c608      	stmia	r6!, {r3}
 800b92c:	4287      	cmp	r7, r0
 800b92e:	dcef      	bgt.n	800b910 <__multadd+0x10>
 800b930:	2d00      	cmp	r5, #0
 800b932:	d022      	beq.n	800b97a <__multadd+0x7a>
 800b934:	68a3      	ldr	r3, [r4, #8]
 800b936:	42bb      	cmp	r3, r7
 800b938:	dc19      	bgt.n	800b96e <__multadd+0x6e>
 800b93a:	6863      	ldr	r3, [r4, #4]
 800b93c:	9801      	ldr	r0, [sp, #4]
 800b93e:	1c59      	adds	r1, r3, #1
 800b940:	f7ff ff76 	bl	800b830 <_Balloc>
 800b944:	1e06      	subs	r6, r0, #0
 800b946:	d105      	bne.n	800b954 <__multadd+0x54>
 800b948:	0002      	movs	r2, r0
 800b94a:	21b5      	movs	r1, #181	; 0xb5
 800b94c:	4b0c      	ldr	r3, [pc, #48]	; (800b980 <__multadd+0x80>)
 800b94e:	480d      	ldr	r0, [pc, #52]	; (800b984 <__multadd+0x84>)
 800b950:	f001 fadc 	bl	800cf0c <__assert_func>
 800b954:	0021      	movs	r1, r4
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	310c      	adds	r1, #12
 800b95a:	1c9a      	adds	r2, r3, #2
 800b95c:	0092      	lsls	r2, r2, #2
 800b95e:	300c      	adds	r0, #12
 800b960:	f7ff ff5d 	bl	800b81e <memcpy>
 800b964:	0021      	movs	r1, r4
 800b966:	9801      	ldr	r0, [sp, #4]
 800b968:	f7ff ffa6 	bl	800b8b8 <_Bfree>
 800b96c:	0034      	movs	r4, r6
 800b96e:	1d3b      	adds	r3, r7, #4
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	18e3      	adds	r3, r4, r3
 800b974:	605d      	str	r5, [r3, #4]
 800b976:	1c7b      	adds	r3, r7, #1
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	0020      	movs	r0, r4
 800b97c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	0800dd34 	.word	0x0800dd34
 800b984:	0800ddc4 	.word	0x0800ddc4

0800b988 <__s2b>:
 800b988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b98a:	0006      	movs	r6, r0
 800b98c:	0018      	movs	r0, r3
 800b98e:	000c      	movs	r4, r1
 800b990:	3008      	adds	r0, #8
 800b992:	2109      	movs	r1, #9
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	0015      	movs	r5, r2
 800b998:	f7f4 fc66 	bl	8000268 <__divsi3>
 800b99c:	2301      	movs	r3, #1
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4283      	cmp	r3, r0
 800b9a2:	db0a      	blt.n	800b9ba <__s2b+0x32>
 800b9a4:	0030      	movs	r0, r6
 800b9a6:	f7ff ff43 	bl	800b830 <_Balloc>
 800b9aa:	1e01      	subs	r1, r0, #0
 800b9ac:	d108      	bne.n	800b9c0 <__s2b+0x38>
 800b9ae:	0002      	movs	r2, r0
 800b9b0:	4b19      	ldr	r3, [pc, #100]	; (800ba18 <__s2b+0x90>)
 800b9b2:	481a      	ldr	r0, [pc, #104]	; (800ba1c <__s2b+0x94>)
 800b9b4:	31ce      	adds	r1, #206	; 0xce
 800b9b6:	f001 faa9 	bl	800cf0c <__assert_func>
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	3101      	adds	r1, #1
 800b9be:	e7ef      	b.n	800b9a0 <__s2b+0x18>
 800b9c0:	9b08      	ldr	r3, [sp, #32]
 800b9c2:	6143      	str	r3, [r0, #20]
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	6103      	str	r3, [r0, #16]
 800b9c8:	2d09      	cmp	r5, #9
 800b9ca:	dd18      	ble.n	800b9fe <__s2b+0x76>
 800b9cc:	0023      	movs	r3, r4
 800b9ce:	3309      	adds	r3, #9
 800b9d0:	001f      	movs	r7, r3
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	1964      	adds	r4, r4, r5
 800b9d6:	783b      	ldrb	r3, [r7, #0]
 800b9d8:	220a      	movs	r2, #10
 800b9da:	0030      	movs	r0, r6
 800b9dc:	3b30      	subs	r3, #48	; 0x30
 800b9de:	f7ff ff8f 	bl	800b900 <__multadd>
 800b9e2:	3701      	adds	r7, #1
 800b9e4:	0001      	movs	r1, r0
 800b9e6:	42a7      	cmp	r7, r4
 800b9e8:	d1f5      	bne.n	800b9d6 <__s2b+0x4e>
 800b9ea:	002c      	movs	r4, r5
 800b9ec:	9b00      	ldr	r3, [sp, #0]
 800b9ee:	3c08      	subs	r4, #8
 800b9f0:	191c      	adds	r4, r3, r4
 800b9f2:	002f      	movs	r7, r5
 800b9f4:	9b01      	ldr	r3, [sp, #4]
 800b9f6:	429f      	cmp	r7, r3
 800b9f8:	db04      	blt.n	800ba04 <__s2b+0x7c>
 800b9fa:	0008      	movs	r0, r1
 800b9fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9fe:	2509      	movs	r5, #9
 800ba00:	340a      	adds	r4, #10
 800ba02:	e7f6      	b.n	800b9f2 <__s2b+0x6a>
 800ba04:	1b63      	subs	r3, r4, r5
 800ba06:	5ddb      	ldrb	r3, [r3, r7]
 800ba08:	220a      	movs	r2, #10
 800ba0a:	0030      	movs	r0, r6
 800ba0c:	3b30      	subs	r3, #48	; 0x30
 800ba0e:	f7ff ff77 	bl	800b900 <__multadd>
 800ba12:	3701      	adds	r7, #1
 800ba14:	0001      	movs	r1, r0
 800ba16:	e7ed      	b.n	800b9f4 <__s2b+0x6c>
 800ba18:	0800dd34 	.word	0x0800dd34
 800ba1c:	0800ddc4 	.word	0x0800ddc4

0800ba20 <__hi0bits>:
 800ba20:	0003      	movs	r3, r0
 800ba22:	0c02      	lsrs	r2, r0, #16
 800ba24:	2000      	movs	r0, #0
 800ba26:	4282      	cmp	r2, r0
 800ba28:	d101      	bne.n	800ba2e <__hi0bits+0xe>
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	3010      	adds	r0, #16
 800ba2e:	0e1a      	lsrs	r2, r3, #24
 800ba30:	d101      	bne.n	800ba36 <__hi0bits+0x16>
 800ba32:	3008      	adds	r0, #8
 800ba34:	021b      	lsls	r3, r3, #8
 800ba36:	0f1a      	lsrs	r2, r3, #28
 800ba38:	d101      	bne.n	800ba3e <__hi0bits+0x1e>
 800ba3a:	3004      	adds	r0, #4
 800ba3c:	011b      	lsls	r3, r3, #4
 800ba3e:	0f9a      	lsrs	r2, r3, #30
 800ba40:	d101      	bne.n	800ba46 <__hi0bits+0x26>
 800ba42:	3002      	adds	r0, #2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	db03      	blt.n	800ba52 <__hi0bits+0x32>
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	d400      	bmi.n	800ba52 <__hi0bits+0x32>
 800ba50:	2020      	movs	r0, #32
 800ba52:	4770      	bx	lr

0800ba54 <__lo0bits>:
 800ba54:	6803      	ldr	r3, [r0, #0]
 800ba56:	0002      	movs	r2, r0
 800ba58:	2107      	movs	r1, #7
 800ba5a:	0018      	movs	r0, r3
 800ba5c:	4008      	ands	r0, r1
 800ba5e:	420b      	tst	r3, r1
 800ba60:	d00d      	beq.n	800ba7e <__lo0bits+0x2a>
 800ba62:	3906      	subs	r1, #6
 800ba64:	2000      	movs	r0, #0
 800ba66:	420b      	tst	r3, r1
 800ba68:	d105      	bne.n	800ba76 <__lo0bits+0x22>
 800ba6a:	3002      	adds	r0, #2
 800ba6c:	4203      	tst	r3, r0
 800ba6e:	d003      	beq.n	800ba78 <__lo0bits+0x24>
 800ba70:	40cb      	lsrs	r3, r1
 800ba72:	0008      	movs	r0, r1
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	4770      	bx	lr
 800ba78:	089b      	lsrs	r3, r3, #2
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	e7fb      	b.n	800ba76 <__lo0bits+0x22>
 800ba7e:	b299      	uxth	r1, r3
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d101      	bne.n	800ba88 <__lo0bits+0x34>
 800ba84:	2010      	movs	r0, #16
 800ba86:	0c1b      	lsrs	r3, r3, #16
 800ba88:	b2d9      	uxtb	r1, r3
 800ba8a:	2900      	cmp	r1, #0
 800ba8c:	d101      	bne.n	800ba92 <__lo0bits+0x3e>
 800ba8e:	3008      	adds	r0, #8
 800ba90:	0a1b      	lsrs	r3, r3, #8
 800ba92:	0719      	lsls	r1, r3, #28
 800ba94:	d101      	bne.n	800ba9a <__lo0bits+0x46>
 800ba96:	3004      	adds	r0, #4
 800ba98:	091b      	lsrs	r3, r3, #4
 800ba9a:	0799      	lsls	r1, r3, #30
 800ba9c:	d101      	bne.n	800baa2 <__lo0bits+0x4e>
 800ba9e:	3002      	adds	r0, #2
 800baa0:	089b      	lsrs	r3, r3, #2
 800baa2:	07d9      	lsls	r1, r3, #31
 800baa4:	d4e9      	bmi.n	800ba7a <__lo0bits+0x26>
 800baa6:	3001      	adds	r0, #1
 800baa8:	085b      	lsrs	r3, r3, #1
 800baaa:	d1e6      	bne.n	800ba7a <__lo0bits+0x26>
 800baac:	2020      	movs	r0, #32
 800baae:	e7e2      	b.n	800ba76 <__lo0bits+0x22>

0800bab0 <__i2b>:
 800bab0:	b510      	push	{r4, lr}
 800bab2:	000c      	movs	r4, r1
 800bab4:	2101      	movs	r1, #1
 800bab6:	f7ff febb 	bl	800b830 <_Balloc>
 800baba:	2800      	cmp	r0, #0
 800babc:	d106      	bne.n	800bacc <__i2b+0x1c>
 800babe:	21a0      	movs	r1, #160	; 0xa0
 800bac0:	0002      	movs	r2, r0
 800bac2:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <__i2b+0x24>)
 800bac4:	4804      	ldr	r0, [pc, #16]	; (800bad8 <__i2b+0x28>)
 800bac6:	0049      	lsls	r1, r1, #1
 800bac8:	f001 fa20 	bl	800cf0c <__assert_func>
 800bacc:	2301      	movs	r3, #1
 800bace:	6144      	str	r4, [r0, #20]
 800bad0:	6103      	str	r3, [r0, #16]
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	0800dd34 	.word	0x0800dd34
 800bad8:	0800ddc4 	.word	0x0800ddc4

0800badc <__multiply>:
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bade:	690b      	ldr	r3, [r1, #16]
 800bae0:	0014      	movs	r4, r2
 800bae2:	6912      	ldr	r2, [r2, #16]
 800bae4:	000d      	movs	r5, r1
 800bae6:	b089      	sub	sp, #36	; 0x24
 800bae8:	4293      	cmp	r3, r2
 800baea:	da01      	bge.n	800baf0 <__multiply+0x14>
 800baec:	0025      	movs	r5, r4
 800baee:	000c      	movs	r4, r1
 800baf0:	692f      	ldr	r7, [r5, #16]
 800baf2:	6926      	ldr	r6, [r4, #16]
 800baf4:	6869      	ldr	r1, [r5, #4]
 800baf6:	19bb      	adds	r3, r7, r6
 800baf8:	9302      	str	r3, [sp, #8]
 800bafa:	68ab      	ldr	r3, [r5, #8]
 800bafc:	19ba      	adds	r2, r7, r6
 800bafe:	4293      	cmp	r3, r2
 800bb00:	da00      	bge.n	800bb04 <__multiply+0x28>
 800bb02:	3101      	adds	r1, #1
 800bb04:	f7ff fe94 	bl	800b830 <_Balloc>
 800bb08:	9001      	str	r0, [sp, #4]
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d106      	bne.n	800bb1c <__multiply+0x40>
 800bb0e:	215e      	movs	r1, #94	; 0x5e
 800bb10:	0002      	movs	r2, r0
 800bb12:	4b48      	ldr	r3, [pc, #288]	; (800bc34 <__multiply+0x158>)
 800bb14:	4848      	ldr	r0, [pc, #288]	; (800bc38 <__multiply+0x15c>)
 800bb16:	31ff      	adds	r1, #255	; 0xff
 800bb18:	f001 f9f8 	bl	800cf0c <__assert_func>
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	3314      	adds	r3, #20
 800bb22:	469c      	mov	ip, r3
 800bb24:	19bb      	adds	r3, r7, r6
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4463      	add	r3, ip
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	4663      	mov	r3, ip
 800bb2e:	9903      	ldr	r1, [sp, #12]
 800bb30:	428b      	cmp	r3, r1
 800bb32:	d32c      	bcc.n	800bb8e <__multiply+0xb2>
 800bb34:	002b      	movs	r3, r5
 800bb36:	0022      	movs	r2, r4
 800bb38:	3314      	adds	r3, #20
 800bb3a:	00bf      	lsls	r7, r7, #2
 800bb3c:	3214      	adds	r2, #20
 800bb3e:	9306      	str	r3, [sp, #24]
 800bb40:	00b6      	lsls	r6, r6, #2
 800bb42:	19db      	adds	r3, r3, r7
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	1993      	adds	r3, r2, r6
 800bb48:	9307      	str	r3, [sp, #28]
 800bb4a:	2304      	movs	r3, #4
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	002b      	movs	r3, r5
 800bb50:	9904      	ldr	r1, [sp, #16]
 800bb52:	3315      	adds	r3, #21
 800bb54:	9200      	str	r2, [sp, #0]
 800bb56:	4299      	cmp	r1, r3
 800bb58:	d305      	bcc.n	800bb66 <__multiply+0x8a>
 800bb5a:	1b4b      	subs	r3, r1, r5
 800bb5c:	3b15      	subs	r3, #21
 800bb5e:	089b      	lsrs	r3, r3, #2
 800bb60:	3301      	adds	r3, #1
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	9305      	str	r3, [sp, #20]
 800bb66:	9b07      	ldr	r3, [sp, #28]
 800bb68:	9a00      	ldr	r2, [sp, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d311      	bcc.n	800bb92 <__multiply+0xb6>
 800bb6e:	9b02      	ldr	r3, [sp, #8]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dd06      	ble.n	800bb82 <__multiply+0xa6>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	3b04      	subs	r3, #4
 800bb78:	9303      	str	r3, [sp, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d054      	beq.n	800bc2c <__multiply+0x150>
 800bb82:	9b01      	ldr	r3, [sp, #4]
 800bb84:	9a02      	ldr	r2, [sp, #8]
 800bb86:	0018      	movs	r0, r3
 800bb88:	611a      	str	r2, [r3, #16]
 800bb8a:	b009      	add	sp, #36	; 0x24
 800bb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb8e:	c304      	stmia	r3!, {r2}
 800bb90:	e7cd      	b.n	800bb2e <__multiply+0x52>
 800bb92:	9b00      	ldr	r3, [sp, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	b298      	uxth	r0, r3
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d01c      	beq.n	800bbd6 <__multiply+0xfa>
 800bb9c:	4667      	mov	r7, ip
 800bb9e:	2400      	movs	r4, #0
 800bba0:	9e06      	ldr	r6, [sp, #24]
 800bba2:	ce02      	ldmia	r6!, {r1}
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	b28b      	uxth	r3, r1
 800bba8:	4343      	muls	r3, r0
 800bbaa:	0c09      	lsrs	r1, r1, #16
 800bbac:	4341      	muls	r1, r0
 800bbae:	b292      	uxth	r2, r2
 800bbb0:	189b      	adds	r3, r3, r2
 800bbb2:	191b      	adds	r3, r3, r4
 800bbb4:	000c      	movs	r4, r1
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	0c11      	lsrs	r1, r2, #16
 800bbba:	1861      	adds	r1, r4, r1
 800bbbc:	0c1c      	lsrs	r4, r3, #16
 800bbbe:	1909      	adds	r1, r1, r4
 800bbc0:	0c0c      	lsrs	r4, r1, #16
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	0409      	lsls	r1, r1, #16
 800bbc6:	430b      	orrs	r3, r1
 800bbc8:	c708      	stmia	r7!, {r3}
 800bbca:	9b04      	ldr	r3, [sp, #16]
 800bbcc:	42b3      	cmp	r3, r6
 800bbce:	d8e8      	bhi.n	800bba2 <__multiply+0xc6>
 800bbd0:	4663      	mov	r3, ip
 800bbd2:	9a05      	ldr	r2, [sp, #20]
 800bbd4:	509c      	str	r4, [r3, r2]
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	0c1e      	lsrs	r6, r3, #16
 800bbdc:	d020      	beq.n	800bc20 <__multiply+0x144>
 800bbde:	4663      	mov	r3, ip
 800bbe0:	002c      	movs	r4, r5
 800bbe2:	4660      	mov	r0, ip
 800bbe4:	2700      	movs	r7, #0
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3414      	adds	r4, #20
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	b291      	uxth	r1, r2
 800bbf0:	4371      	muls	r1, r6
 800bbf2:	6802      	ldr	r2, [r0, #0]
 800bbf4:	0c12      	lsrs	r2, r2, #16
 800bbf6:	1889      	adds	r1, r1, r2
 800bbf8:	19cf      	adds	r7, r1, r7
 800bbfa:	0439      	lsls	r1, r7, #16
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	6003      	str	r3, [r0, #0]
 800bc00:	cc02      	ldmia	r4!, {r1}
 800bc02:	6843      	ldr	r3, [r0, #4]
 800bc04:	0c09      	lsrs	r1, r1, #16
 800bc06:	4371      	muls	r1, r6
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	0c3f      	lsrs	r7, r7, #16
 800bc0c:	18cb      	adds	r3, r1, r3
 800bc0e:	9a04      	ldr	r2, [sp, #16]
 800bc10:	19db      	adds	r3, r3, r7
 800bc12:	0c1f      	lsrs	r7, r3, #16
 800bc14:	3004      	adds	r0, #4
 800bc16:	42a2      	cmp	r2, r4
 800bc18:	d8e7      	bhi.n	800bbea <__multiply+0x10e>
 800bc1a:	4662      	mov	r2, ip
 800bc1c:	9905      	ldr	r1, [sp, #20]
 800bc1e:	5053      	str	r3, [r2, r1]
 800bc20:	9b00      	ldr	r3, [sp, #0]
 800bc22:	3304      	adds	r3, #4
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	2304      	movs	r3, #4
 800bc28:	449c      	add	ip, r3
 800bc2a:	e79c      	b.n	800bb66 <__multiply+0x8a>
 800bc2c:	9b02      	ldr	r3, [sp, #8]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	e79c      	b.n	800bb6e <__multiply+0x92>
 800bc34:	0800dd34 	.word	0x0800dd34
 800bc38:	0800ddc4 	.word	0x0800ddc4

0800bc3c <__pow5mult>:
 800bc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc3e:	2303      	movs	r3, #3
 800bc40:	0015      	movs	r5, r2
 800bc42:	0007      	movs	r7, r0
 800bc44:	000e      	movs	r6, r1
 800bc46:	401a      	ands	r2, r3
 800bc48:	421d      	tst	r5, r3
 800bc4a:	d008      	beq.n	800bc5e <__pow5mult+0x22>
 800bc4c:	4925      	ldr	r1, [pc, #148]	; (800bce4 <__pow5mult+0xa8>)
 800bc4e:	3a01      	subs	r2, #1
 800bc50:	0092      	lsls	r2, r2, #2
 800bc52:	5852      	ldr	r2, [r2, r1]
 800bc54:	2300      	movs	r3, #0
 800bc56:	0031      	movs	r1, r6
 800bc58:	f7ff fe52 	bl	800b900 <__multadd>
 800bc5c:	0006      	movs	r6, r0
 800bc5e:	10ad      	asrs	r5, r5, #2
 800bc60:	d03d      	beq.n	800bcde <__pow5mult+0xa2>
 800bc62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	d10f      	bne.n	800bc88 <__pow5mult+0x4c>
 800bc68:	2010      	movs	r0, #16
 800bc6a:	f7ff fdb1 	bl	800b7d0 <malloc>
 800bc6e:	1e02      	subs	r2, r0, #0
 800bc70:	6278      	str	r0, [r7, #36]	; 0x24
 800bc72:	d105      	bne.n	800bc80 <__pow5mult+0x44>
 800bc74:	21d7      	movs	r1, #215	; 0xd7
 800bc76:	4b1c      	ldr	r3, [pc, #112]	; (800bce8 <__pow5mult+0xac>)
 800bc78:	481c      	ldr	r0, [pc, #112]	; (800bcec <__pow5mult+0xb0>)
 800bc7a:	0049      	lsls	r1, r1, #1
 800bc7c:	f001 f946 	bl	800cf0c <__assert_func>
 800bc80:	6044      	str	r4, [r0, #4]
 800bc82:	6084      	str	r4, [r0, #8]
 800bc84:	6004      	str	r4, [r0, #0]
 800bc86:	60c4      	str	r4, [r0, #12]
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	689c      	ldr	r4, [r3, #8]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	d108      	bne.n	800bca4 <__pow5mult+0x68>
 800bc92:	0038      	movs	r0, r7
 800bc94:	4916      	ldr	r1, [pc, #88]	; (800bcf0 <__pow5mult+0xb4>)
 800bc96:	f7ff ff0b 	bl	800bab0 <__i2b>
 800bc9a:	9b01      	ldr	r3, [sp, #4]
 800bc9c:	0004      	movs	r4, r0
 800bc9e:	6098      	str	r0, [r3, #8]
 800bca0:	2300      	movs	r3, #0
 800bca2:	6003      	str	r3, [r0, #0]
 800bca4:	2301      	movs	r3, #1
 800bca6:	421d      	tst	r5, r3
 800bca8:	d00a      	beq.n	800bcc0 <__pow5mult+0x84>
 800bcaa:	0031      	movs	r1, r6
 800bcac:	0022      	movs	r2, r4
 800bcae:	0038      	movs	r0, r7
 800bcb0:	f7ff ff14 	bl	800badc <__multiply>
 800bcb4:	0031      	movs	r1, r6
 800bcb6:	9001      	str	r0, [sp, #4]
 800bcb8:	0038      	movs	r0, r7
 800bcba:	f7ff fdfd 	bl	800b8b8 <_Bfree>
 800bcbe:	9e01      	ldr	r6, [sp, #4]
 800bcc0:	106d      	asrs	r5, r5, #1
 800bcc2:	d00c      	beq.n	800bcde <__pow5mult+0xa2>
 800bcc4:	6820      	ldr	r0, [r4, #0]
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d107      	bne.n	800bcda <__pow5mult+0x9e>
 800bcca:	0022      	movs	r2, r4
 800bccc:	0021      	movs	r1, r4
 800bcce:	0038      	movs	r0, r7
 800bcd0:	f7ff ff04 	bl	800badc <__multiply>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6020      	str	r0, [r4, #0]
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	0004      	movs	r4, r0
 800bcdc:	e7e2      	b.n	800bca4 <__pow5mult+0x68>
 800bcde:	0030      	movs	r0, r6
 800bce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bce2:	46c0      	nop			; (mov r8, r8)
 800bce4:	0800df18 	.word	0x0800df18
 800bce8:	0800dcbe 	.word	0x0800dcbe
 800bcec:	0800ddc4 	.word	0x0800ddc4
 800bcf0:	00000271 	.word	0x00000271

0800bcf4 <__lshift>:
 800bcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcf6:	000c      	movs	r4, r1
 800bcf8:	0017      	movs	r7, r2
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	1155      	asrs	r5, r2, #5
 800bcfe:	b087      	sub	sp, #28
 800bd00:	18eb      	adds	r3, r5, r3
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	3301      	adds	r3, #1
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	6849      	ldr	r1, [r1, #4]
 800bd0a:	68a3      	ldr	r3, [r4, #8]
 800bd0c:	9004      	str	r0, [sp, #16]
 800bd0e:	9a01      	ldr	r2, [sp, #4]
 800bd10:	4293      	cmp	r3, r2
 800bd12:	db11      	blt.n	800bd38 <__lshift+0x44>
 800bd14:	9804      	ldr	r0, [sp, #16]
 800bd16:	f7ff fd8b 	bl	800b830 <_Balloc>
 800bd1a:	0002      	movs	r2, r0
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	3214      	adds	r2, #20
 800bd20:	0006      	movs	r6, r0
 800bd22:	0011      	movs	r1, r2
 800bd24:	9203      	str	r2, [sp, #12]
 800bd26:	4298      	cmp	r0, r3
 800bd28:	d10d      	bne.n	800bd46 <__lshift+0x52>
 800bd2a:	21da      	movs	r1, #218	; 0xda
 800bd2c:	0002      	movs	r2, r0
 800bd2e:	4b27      	ldr	r3, [pc, #156]	; (800bdcc <__lshift+0xd8>)
 800bd30:	4827      	ldr	r0, [pc, #156]	; (800bdd0 <__lshift+0xdc>)
 800bd32:	31ff      	adds	r1, #255	; 0xff
 800bd34:	f001 f8ea 	bl	800cf0c <__assert_func>
 800bd38:	3101      	adds	r1, #1
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	e7e7      	b.n	800bd0e <__lshift+0x1a>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	0098      	lsls	r0, r3, #2
 800bd42:	500a      	str	r2, [r1, r0]
 800bd44:	3301      	adds	r3, #1
 800bd46:	42ab      	cmp	r3, r5
 800bd48:	dbf9      	blt.n	800bd3e <__lshift+0x4a>
 800bd4a:	43eb      	mvns	r3, r5
 800bd4c:	17db      	asrs	r3, r3, #31
 800bd4e:	401d      	ands	r5, r3
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	00ad      	lsls	r5, r5, #2
 800bd54:	211f      	movs	r1, #31
 800bd56:	0038      	movs	r0, r7
 800bd58:	195d      	adds	r5, r3, r5
 800bd5a:	0023      	movs	r3, r4
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	3314      	adds	r3, #20
 800bd60:	0092      	lsls	r2, r2, #2
 800bd62:	4008      	ands	r0, r1
 800bd64:	4684      	mov	ip, r0
 800bd66:	189a      	adds	r2, r3, r2
 800bd68:	420f      	tst	r7, r1
 800bd6a:	d02a      	beq.n	800bdc2 <__lshift+0xce>
 800bd6c:	3101      	adds	r1, #1
 800bd6e:	1a09      	subs	r1, r1, r0
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	2100      	movs	r1, #0
 800bd74:	9503      	str	r5, [sp, #12]
 800bd76:	4667      	mov	r7, ip
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	40b8      	lsls	r0, r7
 800bd7c:	4301      	orrs	r1, r0
 800bd7e:	9803      	ldr	r0, [sp, #12]
 800bd80:	c002      	stmia	r0!, {r1}
 800bd82:	cb02      	ldmia	r3!, {r1}
 800bd84:	9003      	str	r0, [sp, #12]
 800bd86:	9805      	ldr	r0, [sp, #20]
 800bd88:	40c1      	lsrs	r1, r0
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d8f3      	bhi.n	800bd76 <__lshift+0x82>
 800bd8e:	0020      	movs	r0, r4
 800bd90:	3015      	adds	r0, #21
 800bd92:	2304      	movs	r3, #4
 800bd94:	4282      	cmp	r2, r0
 800bd96:	d304      	bcc.n	800bda2 <__lshift+0xae>
 800bd98:	1b13      	subs	r3, r2, r4
 800bd9a:	3b15      	subs	r3, #21
 800bd9c:	089b      	lsrs	r3, r3, #2
 800bd9e:	3301      	adds	r3, #1
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	50e9      	str	r1, [r5, r3]
 800bda4:	2900      	cmp	r1, #0
 800bda6:	d002      	beq.n	800bdae <__lshift+0xba>
 800bda8:	9b02      	ldr	r3, [sp, #8]
 800bdaa:	3302      	adds	r3, #2
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	9b01      	ldr	r3, [sp, #4]
 800bdb0:	9804      	ldr	r0, [sp, #16]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	0021      	movs	r1, r4
 800bdb6:	6133      	str	r3, [r6, #16]
 800bdb8:	f7ff fd7e 	bl	800b8b8 <_Bfree>
 800bdbc:	0030      	movs	r0, r6
 800bdbe:	b007      	add	sp, #28
 800bdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc2:	cb02      	ldmia	r3!, {r1}
 800bdc4:	c502      	stmia	r5!, {r1}
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d8fb      	bhi.n	800bdc2 <__lshift+0xce>
 800bdca:	e7f0      	b.n	800bdae <__lshift+0xba>
 800bdcc:	0800dd34 	.word	0x0800dd34
 800bdd0:	0800ddc4 	.word	0x0800ddc4

0800bdd4 <__mcmp>:
 800bdd4:	6902      	ldr	r2, [r0, #16]
 800bdd6:	690b      	ldr	r3, [r1, #16]
 800bdd8:	b530      	push	{r4, r5, lr}
 800bdda:	0004      	movs	r4, r0
 800bddc:	1ad0      	subs	r0, r2, r3
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d10d      	bne.n	800bdfe <__mcmp+0x2a>
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	3414      	adds	r4, #20
 800bde6:	3114      	adds	r1, #20
 800bde8:	18e2      	adds	r2, r4, r3
 800bdea:	18c9      	adds	r1, r1, r3
 800bdec:	3a04      	subs	r2, #4
 800bdee:	3904      	subs	r1, #4
 800bdf0:	6815      	ldr	r5, [r2, #0]
 800bdf2:	680b      	ldr	r3, [r1, #0]
 800bdf4:	429d      	cmp	r5, r3
 800bdf6:	d003      	beq.n	800be00 <__mcmp+0x2c>
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	429d      	cmp	r5, r3
 800bdfc:	d303      	bcc.n	800be06 <__mcmp+0x32>
 800bdfe:	bd30      	pop	{r4, r5, pc}
 800be00:	4294      	cmp	r4, r2
 800be02:	d3f3      	bcc.n	800bdec <__mcmp+0x18>
 800be04:	e7fb      	b.n	800bdfe <__mcmp+0x2a>
 800be06:	4240      	negs	r0, r0
 800be08:	e7f9      	b.n	800bdfe <__mcmp+0x2a>
	...

0800be0c <__mdiff>:
 800be0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be0e:	000e      	movs	r6, r1
 800be10:	0007      	movs	r7, r0
 800be12:	0011      	movs	r1, r2
 800be14:	0030      	movs	r0, r6
 800be16:	b087      	sub	sp, #28
 800be18:	0014      	movs	r4, r2
 800be1a:	f7ff ffdb 	bl	800bdd4 <__mcmp>
 800be1e:	1e05      	subs	r5, r0, #0
 800be20:	d110      	bne.n	800be44 <__mdiff+0x38>
 800be22:	0001      	movs	r1, r0
 800be24:	0038      	movs	r0, r7
 800be26:	f7ff fd03 	bl	800b830 <_Balloc>
 800be2a:	1e02      	subs	r2, r0, #0
 800be2c:	d104      	bne.n	800be38 <__mdiff+0x2c>
 800be2e:	4b40      	ldr	r3, [pc, #256]	; (800bf30 <__mdiff+0x124>)
 800be30:	4940      	ldr	r1, [pc, #256]	; (800bf34 <__mdiff+0x128>)
 800be32:	4841      	ldr	r0, [pc, #260]	; (800bf38 <__mdiff+0x12c>)
 800be34:	f001 f86a 	bl	800cf0c <__assert_func>
 800be38:	2301      	movs	r3, #1
 800be3a:	6145      	str	r5, [r0, #20]
 800be3c:	6103      	str	r3, [r0, #16]
 800be3e:	0010      	movs	r0, r2
 800be40:	b007      	add	sp, #28
 800be42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be44:	2301      	movs	r3, #1
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	2800      	cmp	r0, #0
 800be4a:	db04      	blt.n	800be56 <__mdiff+0x4a>
 800be4c:	0023      	movs	r3, r4
 800be4e:	0034      	movs	r4, r6
 800be50:	001e      	movs	r6, r3
 800be52:	2300      	movs	r3, #0
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	0038      	movs	r0, r7
 800be58:	6861      	ldr	r1, [r4, #4]
 800be5a:	f7ff fce9 	bl	800b830 <_Balloc>
 800be5e:	1e02      	subs	r2, r0, #0
 800be60:	d103      	bne.n	800be6a <__mdiff+0x5e>
 800be62:	2190      	movs	r1, #144	; 0x90
 800be64:	4b32      	ldr	r3, [pc, #200]	; (800bf30 <__mdiff+0x124>)
 800be66:	0089      	lsls	r1, r1, #2
 800be68:	e7e3      	b.n	800be32 <__mdiff+0x26>
 800be6a:	9b01      	ldr	r3, [sp, #4]
 800be6c:	2700      	movs	r7, #0
 800be6e:	60c3      	str	r3, [r0, #12]
 800be70:	6920      	ldr	r0, [r4, #16]
 800be72:	3414      	adds	r4, #20
 800be74:	9401      	str	r4, [sp, #4]
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	0084      	lsls	r4, r0, #2
 800be7a:	191b      	adds	r3, r3, r4
 800be7c:	0034      	movs	r4, r6
 800be7e:	9302      	str	r3, [sp, #8]
 800be80:	6933      	ldr	r3, [r6, #16]
 800be82:	3414      	adds	r4, #20
 800be84:	0099      	lsls	r1, r3, #2
 800be86:	1863      	adds	r3, r4, r1
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	0013      	movs	r3, r2
 800be8c:	3314      	adds	r3, #20
 800be8e:	469c      	mov	ip, r3
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	9b04      	ldr	r3, [sp, #16]
 800be98:	cc02      	ldmia	r4!, {r1}
 800be9a:	cb20      	ldmia	r3!, {r5}
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	b2ab      	uxth	r3, r5
 800bea0:	19df      	adds	r7, r3, r7
 800bea2:	b28b      	uxth	r3, r1
 800bea4:	1afb      	subs	r3, r7, r3
 800bea6:	0c2d      	lsrs	r5, r5, #16
 800bea8:	0c09      	lsrs	r1, r1, #16
 800beaa:	1a69      	subs	r1, r5, r1
 800beac:	141d      	asrs	r5, r3, #16
 800beae:	1949      	adds	r1, r1, r5
 800beb0:	140f      	asrs	r7, r1, #16
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	0409      	lsls	r1, r1, #16
 800beb6:	430b      	orrs	r3, r1
 800beb8:	4661      	mov	r1, ip
 800beba:	c108      	stmia	r1!, {r3}
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	468c      	mov	ip, r1
 800bec0:	42a3      	cmp	r3, r4
 800bec2:	d8e8      	bhi.n	800be96 <__mdiff+0x8a>
 800bec4:	0031      	movs	r1, r6
 800bec6:	9c03      	ldr	r4, [sp, #12]
 800bec8:	3115      	adds	r1, #21
 800beca:	2304      	movs	r3, #4
 800becc:	428c      	cmp	r4, r1
 800bece:	d304      	bcc.n	800beda <__mdiff+0xce>
 800bed0:	1ba3      	subs	r3, r4, r6
 800bed2:	3b15      	subs	r3, #21
 800bed4:	089b      	lsrs	r3, r3, #2
 800bed6:	3301      	adds	r3, #1
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	9901      	ldr	r1, [sp, #4]
 800bedc:	18cc      	adds	r4, r1, r3
 800bede:	9905      	ldr	r1, [sp, #20]
 800bee0:	0026      	movs	r6, r4
 800bee2:	18cb      	adds	r3, r1, r3
 800bee4:	469c      	mov	ip, r3
 800bee6:	9902      	ldr	r1, [sp, #8]
 800bee8:	428e      	cmp	r6, r1
 800beea:	d310      	bcc.n	800bf0e <__mdiff+0x102>
 800beec:	9e02      	ldr	r6, [sp, #8]
 800beee:	1ee5      	subs	r5, r4, #3
 800bef0:	2100      	movs	r1, #0
 800bef2:	42ae      	cmp	r6, r5
 800bef4:	d304      	bcc.n	800bf00 <__mdiff+0xf4>
 800bef6:	0031      	movs	r1, r6
 800bef8:	3103      	adds	r1, #3
 800befa:	1b09      	subs	r1, r1, r4
 800befc:	0889      	lsrs	r1, r1, #2
 800befe:	0089      	lsls	r1, r1, #2
 800bf00:	185b      	adds	r3, r3, r1
 800bf02:	3b04      	subs	r3, #4
 800bf04:	6819      	ldr	r1, [r3, #0]
 800bf06:	2900      	cmp	r1, #0
 800bf08:	d00f      	beq.n	800bf2a <__mdiff+0x11e>
 800bf0a:	6110      	str	r0, [r2, #16]
 800bf0c:	e797      	b.n	800be3e <__mdiff+0x32>
 800bf0e:	ce02      	ldmia	r6!, {r1}
 800bf10:	b28d      	uxth	r5, r1
 800bf12:	19ed      	adds	r5, r5, r7
 800bf14:	0c0f      	lsrs	r7, r1, #16
 800bf16:	1429      	asrs	r1, r5, #16
 800bf18:	1879      	adds	r1, r7, r1
 800bf1a:	140f      	asrs	r7, r1, #16
 800bf1c:	b2ad      	uxth	r5, r5
 800bf1e:	0409      	lsls	r1, r1, #16
 800bf20:	430d      	orrs	r5, r1
 800bf22:	4661      	mov	r1, ip
 800bf24:	c120      	stmia	r1!, {r5}
 800bf26:	468c      	mov	ip, r1
 800bf28:	e7dd      	b.n	800bee6 <__mdiff+0xda>
 800bf2a:	3801      	subs	r0, #1
 800bf2c:	e7e9      	b.n	800bf02 <__mdiff+0xf6>
 800bf2e:	46c0      	nop			; (mov r8, r8)
 800bf30:	0800dd34 	.word	0x0800dd34
 800bf34:	00000232 	.word	0x00000232
 800bf38:	0800ddc4 	.word	0x0800ddc4

0800bf3c <__ulp>:
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <__ulp+0x40>)
 800bf3e:	4019      	ands	r1, r3
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <__ulp+0x44>)
 800bf42:	18c9      	adds	r1, r1, r3
 800bf44:	2900      	cmp	r1, #0
 800bf46:	dd04      	ble.n	800bf52 <__ulp+0x16>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	000b      	movs	r3, r1
 800bf4c:	0010      	movs	r0, r2
 800bf4e:	0019      	movs	r1, r3
 800bf50:	4770      	bx	lr
 800bf52:	4249      	negs	r1, r1
 800bf54:	2200      	movs	r2, #0
 800bf56:	2300      	movs	r3, #0
 800bf58:	1509      	asrs	r1, r1, #20
 800bf5a:	2913      	cmp	r1, #19
 800bf5c:	dc04      	bgt.n	800bf68 <__ulp+0x2c>
 800bf5e:	2080      	movs	r0, #128	; 0x80
 800bf60:	0300      	lsls	r0, r0, #12
 800bf62:	4108      	asrs	r0, r1
 800bf64:	0003      	movs	r3, r0
 800bf66:	e7f1      	b.n	800bf4c <__ulp+0x10>
 800bf68:	3914      	subs	r1, #20
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	291e      	cmp	r1, #30
 800bf6e:	dc02      	bgt.n	800bf76 <__ulp+0x3a>
 800bf70:	2080      	movs	r0, #128	; 0x80
 800bf72:	0600      	lsls	r0, r0, #24
 800bf74:	40c8      	lsrs	r0, r1
 800bf76:	0002      	movs	r2, r0
 800bf78:	e7e8      	b.n	800bf4c <__ulp+0x10>
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	7ff00000 	.word	0x7ff00000
 800bf80:	fcc00000 	.word	0xfcc00000

0800bf84 <__b2d>:
 800bf84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf86:	0006      	movs	r6, r0
 800bf88:	6903      	ldr	r3, [r0, #16]
 800bf8a:	3614      	adds	r6, #20
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	18f3      	adds	r3, r6, r3
 800bf90:	1f1d      	subs	r5, r3, #4
 800bf92:	682c      	ldr	r4, [r5, #0]
 800bf94:	000f      	movs	r7, r1
 800bf96:	0020      	movs	r0, r4
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	f7ff fd41 	bl	800ba20 <__hi0bits>
 800bf9e:	2320      	movs	r3, #32
 800bfa0:	1a1b      	subs	r3, r3, r0
 800bfa2:	491f      	ldr	r1, [pc, #124]	; (800c020 <__b2d+0x9c>)
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	280a      	cmp	r0, #10
 800bfa8:	dc16      	bgt.n	800bfd8 <__b2d+0x54>
 800bfaa:	230b      	movs	r3, #11
 800bfac:	0027      	movs	r7, r4
 800bfae:	1a1b      	subs	r3, r3, r0
 800bfb0:	40df      	lsrs	r7, r3
 800bfb2:	4339      	orrs	r1, r7
 800bfb4:	469c      	mov	ip, r3
 800bfb6:	000b      	movs	r3, r1
 800bfb8:	2100      	movs	r1, #0
 800bfba:	42ae      	cmp	r6, r5
 800bfbc:	d202      	bcs.n	800bfc4 <__b2d+0x40>
 800bfbe:	9901      	ldr	r1, [sp, #4]
 800bfc0:	3908      	subs	r1, #8
 800bfc2:	6809      	ldr	r1, [r1, #0]
 800bfc4:	3015      	adds	r0, #21
 800bfc6:	4084      	lsls	r4, r0
 800bfc8:	4660      	mov	r0, ip
 800bfca:	40c1      	lsrs	r1, r0
 800bfcc:	430c      	orrs	r4, r1
 800bfce:	0022      	movs	r2, r4
 800bfd0:	0010      	movs	r0, r2
 800bfd2:	0019      	movs	r1, r3
 800bfd4:	b003      	add	sp, #12
 800bfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd8:	2700      	movs	r7, #0
 800bfda:	42ae      	cmp	r6, r5
 800bfdc:	d202      	bcs.n	800bfe4 <__b2d+0x60>
 800bfde:	9d01      	ldr	r5, [sp, #4]
 800bfe0:	3d08      	subs	r5, #8
 800bfe2:	682f      	ldr	r7, [r5, #0]
 800bfe4:	230b      	movs	r3, #11
 800bfe6:	425b      	negs	r3, r3
 800bfe8:	469c      	mov	ip, r3
 800bfea:	4484      	add	ip, r0
 800bfec:	280b      	cmp	r0, #11
 800bfee:	d013      	beq.n	800c018 <__b2d+0x94>
 800bff0:	4663      	mov	r3, ip
 800bff2:	2020      	movs	r0, #32
 800bff4:	409c      	lsls	r4, r3
 800bff6:	1ac0      	subs	r0, r0, r3
 800bff8:	003b      	movs	r3, r7
 800bffa:	40c3      	lsrs	r3, r0
 800bffc:	431c      	orrs	r4, r3
 800bffe:	4321      	orrs	r1, r4
 800c000:	000b      	movs	r3, r1
 800c002:	2100      	movs	r1, #0
 800c004:	42b5      	cmp	r5, r6
 800c006:	d901      	bls.n	800c00c <__b2d+0x88>
 800c008:	3d04      	subs	r5, #4
 800c00a:	6829      	ldr	r1, [r5, #0]
 800c00c:	4664      	mov	r4, ip
 800c00e:	40c1      	lsrs	r1, r0
 800c010:	40a7      	lsls	r7, r4
 800c012:	430f      	orrs	r7, r1
 800c014:	003a      	movs	r2, r7
 800c016:	e7db      	b.n	800bfd0 <__b2d+0x4c>
 800c018:	4321      	orrs	r1, r4
 800c01a:	000b      	movs	r3, r1
 800c01c:	e7fa      	b.n	800c014 <__b2d+0x90>
 800c01e:	46c0      	nop			; (mov r8, r8)
 800c020:	3ff00000 	.word	0x3ff00000

0800c024 <__d2b>:
 800c024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c026:	2101      	movs	r1, #1
 800c028:	0014      	movs	r4, r2
 800c02a:	001e      	movs	r6, r3
 800c02c:	9f08      	ldr	r7, [sp, #32]
 800c02e:	f7ff fbff 	bl	800b830 <_Balloc>
 800c032:	1e05      	subs	r5, r0, #0
 800c034:	d105      	bne.n	800c042 <__d2b+0x1e>
 800c036:	0002      	movs	r2, r0
 800c038:	4b26      	ldr	r3, [pc, #152]	; (800c0d4 <__d2b+0xb0>)
 800c03a:	4927      	ldr	r1, [pc, #156]	; (800c0d8 <__d2b+0xb4>)
 800c03c:	4827      	ldr	r0, [pc, #156]	; (800c0dc <__d2b+0xb8>)
 800c03e:	f000 ff65 	bl	800cf0c <__assert_func>
 800c042:	0333      	lsls	r3, r6, #12
 800c044:	0076      	lsls	r6, r6, #1
 800c046:	0b1b      	lsrs	r3, r3, #12
 800c048:	0d76      	lsrs	r6, r6, #21
 800c04a:	d124      	bne.n	800c096 <__d2b+0x72>
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	2c00      	cmp	r4, #0
 800c050:	d027      	beq.n	800c0a2 <__d2b+0x7e>
 800c052:	4668      	mov	r0, sp
 800c054:	9400      	str	r4, [sp, #0]
 800c056:	f7ff fcfd 	bl	800ba54 <__lo0bits>
 800c05a:	9c00      	ldr	r4, [sp, #0]
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d01e      	beq.n	800c09e <__d2b+0x7a>
 800c060:	9b01      	ldr	r3, [sp, #4]
 800c062:	2120      	movs	r1, #32
 800c064:	001a      	movs	r2, r3
 800c066:	1a09      	subs	r1, r1, r0
 800c068:	408a      	lsls	r2, r1
 800c06a:	40c3      	lsrs	r3, r0
 800c06c:	4322      	orrs	r2, r4
 800c06e:	616a      	str	r2, [r5, #20]
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	9c01      	ldr	r4, [sp, #4]
 800c074:	61ac      	str	r4, [r5, #24]
 800c076:	1e63      	subs	r3, r4, #1
 800c078:	419c      	sbcs	r4, r3
 800c07a:	3401      	adds	r4, #1
 800c07c:	612c      	str	r4, [r5, #16]
 800c07e:	2e00      	cmp	r6, #0
 800c080:	d018      	beq.n	800c0b4 <__d2b+0x90>
 800c082:	4b17      	ldr	r3, [pc, #92]	; (800c0e0 <__d2b+0xbc>)
 800c084:	18f6      	adds	r6, r6, r3
 800c086:	2335      	movs	r3, #53	; 0x35
 800c088:	1836      	adds	r6, r6, r0
 800c08a:	1a18      	subs	r0, r3, r0
 800c08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08e:	603e      	str	r6, [r7, #0]
 800c090:	6018      	str	r0, [r3, #0]
 800c092:	0028      	movs	r0, r5
 800c094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c096:	2280      	movs	r2, #128	; 0x80
 800c098:	0352      	lsls	r2, r2, #13
 800c09a:	4313      	orrs	r3, r2
 800c09c:	e7d6      	b.n	800c04c <__d2b+0x28>
 800c09e:	616c      	str	r4, [r5, #20]
 800c0a0:	e7e7      	b.n	800c072 <__d2b+0x4e>
 800c0a2:	a801      	add	r0, sp, #4
 800c0a4:	f7ff fcd6 	bl	800ba54 <__lo0bits>
 800c0a8:	2401      	movs	r4, #1
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	612c      	str	r4, [r5, #16]
 800c0ae:	616b      	str	r3, [r5, #20]
 800c0b0:	3020      	adds	r0, #32
 800c0b2:	e7e4      	b.n	800c07e <__d2b+0x5a>
 800c0b4:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <__d2b+0xc0>)
 800c0b6:	18c0      	adds	r0, r0, r3
 800c0b8:	4b0b      	ldr	r3, [pc, #44]	; (800c0e8 <__d2b+0xc4>)
 800c0ba:	6038      	str	r0, [r7, #0]
 800c0bc:	18e3      	adds	r3, r4, r3
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	18eb      	adds	r3, r5, r3
 800c0c2:	6958      	ldr	r0, [r3, #20]
 800c0c4:	f7ff fcac 	bl	800ba20 <__hi0bits>
 800c0c8:	0164      	lsls	r4, r4, #5
 800c0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0cc:	1a24      	subs	r4, r4, r0
 800c0ce:	601c      	str	r4, [r3, #0]
 800c0d0:	e7df      	b.n	800c092 <__d2b+0x6e>
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	0800dd34 	.word	0x0800dd34
 800c0d8:	0000030a 	.word	0x0000030a
 800c0dc:	0800ddc4 	.word	0x0800ddc4
 800c0e0:	fffffbcd 	.word	0xfffffbcd
 800c0e4:	fffffbce 	.word	0xfffffbce
 800c0e8:	3fffffff 	.word	0x3fffffff

0800c0ec <__ratio>:
 800c0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	000d      	movs	r5, r1
 800c0f2:	a902      	add	r1, sp, #8
 800c0f4:	0004      	movs	r4, r0
 800c0f6:	f7ff ff45 	bl	800bf84 <__b2d>
 800c0fa:	9000      	str	r0, [sp, #0]
 800c0fc:	9101      	str	r1, [sp, #4]
 800c0fe:	9e00      	ldr	r6, [sp, #0]
 800c100:	9f01      	ldr	r7, [sp, #4]
 800c102:	0028      	movs	r0, r5
 800c104:	a903      	add	r1, sp, #12
 800c106:	f7ff ff3d 	bl	800bf84 <__b2d>
 800c10a:	6924      	ldr	r4, [r4, #16]
 800c10c:	692d      	ldr	r5, [r5, #16]
 800c10e:	0002      	movs	r2, r0
 800c110:	1b65      	subs	r5, r4, r5
 800c112:	016c      	lsls	r4, r5, #5
 800c114:	46a4      	mov	ip, r4
 800c116:	9d03      	ldr	r5, [sp, #12]
 800c118:	9c02      	ldr	r4, [sp, #8]
 800c11a:	000b      	movs	r3, r1
 800c11c:	1b64      	subs	r4, r4, r5
 800c11e:	4464      	add	r4, ip
 800c120:	0525      	lsls	r5, r4, #20
 800c122:	2c00      	cmp	r4, #0
 800c124:	dd07      	ble.n	800c136 <__ratio+0x4a>
 800c126:	9901      	ldr	r1, [sp, #4]
 800c128:	186f      	adds	r7, r5, r1
 800c12a:	0030      	movs	r0, r6
 800c12c:	0039      	movs	r1, r7
 800c12e:	f7f4 fd9f 	bl	8000c70 <__aeabi_ddiv>
 800c132:	b005      	add	sp, #20
 800c134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c136:	1b4b      	subs	r3, r1, r5
 800c138:	e7f7      	b.n	800c12a <__ratio+0x3e>

0800c13a <__copybits>:
 800c13a:	b570      	push	{r4, r5, r6, lr}
 800c13c:	0015      	movs	r5, r2
 800c13e:	6913      	ldr	r3, [r2, #16]
 800c140:	3514      	adds	r5, #20
 800c142:	009c      	lsls	r4, r3, #2
 800c144:	0006      	movs	r6, r0
 800c146:	002b      	movs	r3, r5
 800c148:	3901      	subs	r1, #1
 800c14a:	1149      	asrs	r1, r1, #5
 800c14c:	3101      	adds	r1, #1
 800c14e:	0089      	lsls	r1, r1, #2
 800c150:	1841      	adds	r1, r0, r1
 800c152:	192c      	adds	r4, r5, r4
 800c154:	429c      	cmp	r4, r3
 800c156:	d80d      	bhi.n	800c174 <__copybits+0x3a>
 800c158:	0015      	movs	r5, r2
 800c15a:	3511      	adds	r5, #17
 800c15c:	2300      	movs	r3, #0
 800c15e:	42a5      	cmp	r5, r4
 800c160:	d803      	bhi.n	800c16a <__copybits+0x30>
 800c162:	1aa3      	subs	r3, r4, r2
 800c164:	3b11      	subs	r3, #17
 800c166:	089b      	lsrs	r3, r3, #2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	18c0      	adds	r0, r0, r3
 800c16c:	2300      	movs	r3, #0
 800c16e:	4281      	cmp	r1, r0
 800c170:	d803      	bhi.n	800c17a <__copybits+0x40>
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	cb20      	ldmia	r3!, {r5}
 800c176:	c620      	stmia	r6!, {r5}
 800c178:	e7ec      	b.n	800c154 <__copybits+0x1a>
 800c17a:	c008      	stmia	r0!, {r3}
 800c17c:	e7f7      	b.n	800c16e <__copybits+0x34>

0800c17e <__any_on>:
 800c17e:	0002      	movs	r2, r0
 800c180:	6900      	ldr	r0, [r0, #16]
 800c182:	b510      	push	{r4, lr}
 800c184:	3214      	adds	r2, #20
 800c186:	114b      	asrs	r3, r1, #5
 800c188:	4298      	cmp	r0, r3
 800c18a:	db13      	blt.n	800c1b4 <__any_on+0x36>
 800c18c:	dd0c      	ble.n	800c1a8 <__any_on+0x2a>
 800c18e:	241f      	movs	r4, #31
 800c190:	0008      	movs	r0, r1
 800c192:	4020      	ands	r0, r4
 800c194:	4221      	tst	r1, r4
 800c196:	d007      	beq.n	800c1a8 <__any_on+0x2a>
 800c198:	0099      	lsls	r1, r3, #2
 800c19a:	588c      	ldr	r4, [r1, r2]
 800c19c:	0021      	movs	r1, r4
 800c19e:	40c1      	lsrs	r1, r0
 800c1a0:	4081      	lsls	r1, r0
 800c1a2:	2001      	movs	r0, #1
 800c1a4:	428c      	cmp	r4, r1
 800c1a6:	d104      	bne.n	800c1b2 <__any_on+0x34>
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	18d3      	adds	r3, r2, r3
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d803      	bhi.n	800c1b8 <__any_on+0x3a>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	bd10      	pop	{r4, pc}
 800c1b4:	0003      	movs	r3, r0
 800c1b6:	e7f7      	b.n	800c1a8 <__any_on+0x2a>
 800c1b8:	3b04      	subs	r3, #4
 800c1ba:	6819      	ldr	r1, [r3, #0]
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	d0f5      	beq.n	800c1ac <__any_on+0x2e>
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	e7f6      	b.n	800c1b2 <__any_on+0x34>

0800c1c4 <_calloc_r>:
 800c1c4:	434a      	muls	r2, r1
 800c1c6:	b570      	push	{r4, r5, r6, lr}
 800c1c8:	0011      	movs	r1, r2
 800c1ca:	0015      	movs	r5, r2
 800c1cc:	f000 f852 	bl	800c274 <_malloc_r>
 800c1d0:	1e04      	subs	r4, r0, #0
 800c1d2:	d003      	beq.n	800c1dc <_calloc_r+0x18>
 800c1d4:	002a      	movs	r2, r5
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	f7fc fa9e 	bl	8008718 <memset>
 800c1dc:	0020      	movs	r0, r4
 800c1de:	bd70      	pop	{r4, r5, r6, pc}

0800c1e0 <_free_r>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	0005      	movs	r5, r0
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d010      	beq.n	800c20a <_free_r+0x2a>
 800c1e8:	1f0c      	subs	r4, r1, #4
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da00      	bge.n	800c1f2 <_free_r+0x12>
 800c1f0:	18e4      	adds	r4, r4, r3
 800c1f2:	0028      	movs	r0, r5
 800c1f4:	f001 f89c 	bl	800d330 <__malloc_lock>
 800c1f8:	4a1d      	ldr	r2, [pc, #116]	; (800c270 <_free_r+0x90>)
 800c1fa:	6813      	ldr	r3, [r2, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d105      	bne.n	800c20c <_free_r+0x2c>
 800c200:	6063      	str	r3, [r4, #4]
 800c202:	6014      	str	r4, [r2, #0]
 800c204:	0028      	movs	r0, r5
 800c206:	f001 f89b 	bl	800d340 <__malloc_unlock>
 800c20a:	bd70      	pop	{r4, r5, r6, pc}
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	d908      	bls.n	800c222 <_free_r+0x42>
 800c210:	6821      	ldr	r1, [r4, #0]
 800c212:	1860      	adds	r0, r4, r1
 800c214:	4283      	cmp	r3, r0
 800c216:	d1f3      	bne.n	800c200 <_free_r+0x20>
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	1841      	adds	r1, r0, r1
 800c21e:	6021      	str	r1, [r4, #0]
 800c220:	e7ee      	b.n	800c200 <_free_r+0x20>
 800c222:	001a      	movs	r2, r3
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d001      	beq.n	800c22e <_free_r+0x4e>
 800c22a:	42a3      	cmp	r3, r4
 800c22c:	d9f9      	bls.n	800c222 <_free_r+0x42>
 800c22e:	6811      	ldr	r1, [r2, #0]
 800c230:	1850      	adds	r0, r2, r1
 800c232:	42a0      	cmp	r0, r4
 800c234:	d10b      	bne.n	800c24e <_free_r+0x6e>
 800c236:	6820      	ldr	r0, [r4, #0]
 800c238:	1809      	adds	r1, r1, r0
 800c23a:	1850      	adds	r0, r2, r1
 800c23c:	6011      	str	r1, [r2, #0]
 800c23e:	4283      	cmp	r3, r0
 800c240:	d1e0      	bne.n	800c204 <_free_r+0x24>
 800c242:	6818      	ldr	r0, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	1841      	adds	r1, r0, r1
 800c248:	6011      	str	r1, [r2, #0]
 800c24a:	6053      	str	r3, [r2, #4]
 800c24c:	e7da      	b.n	800c204 <_free_r+0x24>
 800c24e:	42a0      	cmp	r0, r4
 800c250:	d902      	bls.n	800c258 <_free_r+0x78>
 800c252:	230c      	movs	r3, #12
 800c254:	602b      	str	r3, [r5, #0]
 800c256:	e7d5      	b.n	800c204 <_free_r+0x24>
 800c258:	6821      	ldr	r1, [r4, #0]
 800c25a:	1860      	adds	r0, r4, r1
 800c25c:	4283      	cmp	r3, r0
 800c25e:	d103      	bne.n	800c268 <_free_r+0x88>
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	1841      	adds	r1, r0, r1
 800c266:	6021      	str	r1, [r4, #0]
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	6054      	str	r4, [r2, #4]
 800c26c:	e7ca      	b.n	800c204 <_free_r+0x24>
 800c26e:	46c0      	nop			; (mov r8, r8)
 800c270:	20000370 	.word	0x20000370

0800c274 <_malloc_r>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	2303      	movs	r3, #3
 800c278:	1ccd      	adds	r5, r1, #3
 800c27a:	439d      	bics	r5, r3
 800c27c:	3508      	adds	r5, #8
 800c27e:	0006      	movs	r6, r0
 800c280:	2d0c      	cmp	r5, #12
 800c282:	d21f      	bcs.n	800c2c4 <_malloc_r+0x50>
 800c284:	250c      	movs	r5, #12
 800c286:	42a9      	cmp	r1, r5
 800c288:	d81e      	bhi.n	800c2c8 <_malloc_r+0x54>
 800c28a:	0030      	movs	r0, r6
 800c28c:	f001 f850 	bl	800d330 <__malloc_lock>
 800c290:	4925      	ldr	r1, [pc, #148]	; (800c328 <_malloc_r+0xb4>)
 800c292:	680a      	ldr	r2, [r1, #0]
 800c294:	0014      	movs	r4, r2
 800c296:	2c00      	cmp	r4, #0
 800c298:	d11a      	bne.n	800c2d0 <_malloc_r+0x5c>
 800c29a:	4f24      	ldr	r7, [pc, #144]	; (800c32c <_malloc_r+0xb8>)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d104      	bne.n	800c2ac <_malloc_r+0x38>
 800c2a2:	0021      	movs	r1, r4
 800c2a4:	0030      	movs	r0, r6
 800c2a6:	f000 fcf5 	bl	800cc94 <_sbrk_r>
 800c2aa:	6038      	str	r0, [r7, #0]
 800c2ac:	0029      	movs	r1, r5
 800c2ae:	0030      	movs	r0, r6
 800c2b0:	f000 fcf0 	bl	800cc94 <_sbrk_r>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d12b      	bne.n	800c310 <_malloc_r+0x9c>
 800c2b8:	230c      	movs	r3, #12
 800c2ba:	0030      	movs	r0, r6
 800c2bc:	6033      	str	r3, [r6, #0]
 800c2be:	f001 f83f 	bl	800d340 <__malloc_unlock>
 800c2c2:	e003      	b.n	800c2cc <_malloc_r+0x58>
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	dade      	bge.n	800c286 <_malloc_r+0x12>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	6033      	str	r3, [r6, #0]
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	1b5b      	subs	r3, r3, r5
 800c2d4:	d419      	bmi.n	800c30a <_malloc_r+0x96>
 800c2d6:	2b0b      	cmp	r3, #11
 800c2d8:	d903      	bls.n	800c2e2 <_malloc_r+0x6e>
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	18e4      	adds	r4, r4, r3
 800c2de:	6025      	str	r5, [r4, #0]
 800c2e0:	e003      	b.n	800c2ea <_malloc_r+0x76>
 800c2e2:	6863      	ldr	r3, [r4, #4]
 800c2e4:	42a2      	cmp	r2, r4
 800c2e6:	d10e      	bne.n	800c306 <_malloc_r+0x92>
 800c2e8:	600b      	str	r3, [r1, #0]
 800c2ea:	0030      	movs	r0, r6
 800c2ec:	f001 f828 	bl	800d340 <__malloc_unlock>
 800c2f0:	0020      	movs	r0, r4
 800c2f2:	2207      	movs	r2, #7
 800c2f4:	300b      	adds	r0, #11
 800c2f6:	1d23      	adds	r3, r4, #4
 800c2f8:	4390      	bics	r0, r2
 800c2fa:	1ac2      	subs	r2, r0, r3
 800c2fc:	4298      	cmp	r0, r3
 800c2fe:	d0e6      	beq.n	800c2ce <_malloc_r+0x5a>
 800c300:	1a1b      	subs	r3, r3, r0
 800c302:	50a3      	str	r3, [r4, r2]
 800c304:	e7e3      	b.n	800c2ce <_malloc_r+0x5a>
 800c306:	6053      	str	r3, [r2, #4]
 800c308:	e7ef      	b.n	800c2ea <_malloc_r+0x76>
 800c30a:	0022      	movs	r2, r4
 800c30c:	6864      	ldr	r4, [r4, #4]
 800c30e:	e7c2      	b.n	800c296 <_malloc_r+0x22>
 800c310:	2303      	movs	r3, #3
 800c312:	1cc4      	adds	r4, r0, #3
 800c314:	439c      	bics	r4, r3
 800c316:	42a0      	cmp	r0, r4
 800c318:	d0e1      	beq.n	800c2de <_malloc_r+0x6a>
 800c31a:	1a21      	subs	r1, r4, r0
 800c31c:	0030      	movs	r0, r6
 800c31e:	f000 fcb9 	bl	800cc94 <_sbrk_r>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	d1db      	bne.n	800c2de <_malloc_r+0x6a>
 800c326:	e7c7      	b.n	800c2b8 <_malloc_r+0x44>
 800c328:	20000370 	.word	0x20000370
 800c32c:	20000374 	.word	0x20000374

0800c330 <__ssputs_r>:
 800c330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c332:	688e      	ldr	r6, [r1, #8]
 800c334:	b085      	sub	sp, #20
 800c336:	0007      	movs	r7, r0
 800c338:	000c      	movs	r4, r1
 800c33a:	9203      	str	r2, [sp, #12]
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	429e      	cmp	r6, r3
 800c340:	d83c      	bhi.n	800c3bc <__ssputs_r+0x8c>
 800c342:	2390      	movs	r3, #144	; 0x90
 800c344:	898a      	ldrh	r2, [r1, #12]
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	421a      	tst	r2, r3
 800c34a:	d034      	beq.n	800c3b6 <__ssputs_r+0x86>
 800c34c:	2503      	movs	r5, #3
 800c34e:	6909      	ldr	r1, [r1, #16]
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	1a5b      	subs	r3, r3, r1
 800c354:	9302      	str	r3, [sp, #8]
 800c356:	6963      	ldr	r3, [r4, #20]
 800c358:	9802      	ldr	r0, [sp, #8]
 800c35a:	435d      	muls	r5, r3
 800c35c:	0feb      	lsrs	r3, r5, #31
 800c35e:	195d      	adds	r5, r3, r5
 800c360:	9b01      	ldr	r3, [sp, #4]
 800c362:	106d      	asrs	r5, r5, #1
 800c364:	3301      	adds	r3, #1
 800c366:	181b      	adds	r3, r3, r0
 800c368:	42ab      	cmp	r3, r5
 800c36a:	d900      	bls.n	800c36e <__ssputs_r+0x3e>
 800c36c:	001d      	movs	r5, r3
 800c36e:	0553      	lsls	r3, r2, #21
 800c370:	d532      	bpl.n	800c3d8 <__ssputs_r+0xa8>
 800c372:	0029      	movs	r1, r5
 800c374:	0038      	movs	r0, r7
 800c376:	f7ff ff7d 	bl	800c274 <_malloc_r>
 800c37a:	1e06      	subs	r6, r0, #0
 800c37c:	d109      	bne.n	800c392 <__ssputs_r+0x62>
 800c37e:	230c      	movs	r3, #12
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	2340      	movs	r3, #64	; 0x40
 800c384:	2001      	movs	r0, #1
 800c386:	89a2      	ldrh	r2, [r4, #12]
 800c388:	4240      	negs	r0, r0
 800c38a:	4313      	orrs	r3, r2
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	b005      	add	sp, #20
 800c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c392:	9a02      	ldr	r2, [sp, #8]
 800c394:	6921      	ldr	r1, [r4, #16]
 800c396:	f7ff fa42 	bl	800b81e <memcpy>
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	4a14      	ldr	r2, [pc, #80]	; (800c3f0 <__ssputs_r+0xc0>)
 800c39e:	401a      	ands	r2, r3
 800c3a0:	2380      	movs	r3, #128	; 0x80
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	81a3      	strh	r3, [r4, #12]
 800c3a6:	9b02      	ldr	r3, [sp, #8]
 800c3a8:	6126      	str	r6, [r4, #16]
 800c3aa:	18f6      	adds	r6, r6, r3
 800c3ac:	6026      	str	r6, [r4, #0]
 800c3ae:	6165      	str	r5, [r4, #20]
 800c3b0:	9e01      	ldr	r6, [sp, #4]
 800c3b2:	1aed      	subs	r5, r5, r3
 800c3b4:	60a5      	str	r5, [r4, #8]
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	429e      	cmp	r6, r3
 800c3ba:	d900      	bls.n	800c3be <__ssputs_r+0x8e>
 800c3bc:	9e01      	ldr	r6, [sp, #4]
 800c3be:	0032      	movs	r2, r6
 800c3c0:	9903      	ldr	r1, [sp, #12]
 800c3c2:	6820      	ldr	r0, [r4, #0]
 800c3c4:	f000 ffa1 	bl	800d30a <memmove>
 800c3c8:	68a3      	ldr	r3, [r4, #8]
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	1b9b      	subs	r3, r3, r6
 800c3ce:	60a3      	str	r3, [r4, #8]
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	199e      	adds	r6, r3, r6
 800c3d4:	6026      	str	r6, [r4, #0]
 800c3d6:	e7da      	b.n	800c38e <__ssputs_r+0x5e>
 800c3d8:	002a      	movs	r2, r5
 800c3da:	0038      	movs	r0, r7
 800c3dc:	f000 ffb8 	bl	800d350 <_realloc_r>
 800c3e0:	1e06      	subs	r6, r0, #0
 800c3e2:	d1e0      	bne.n	800c3a6 <__ssputs_r+0x76>
 800c3e4:	0038      	movs	r0, r7
 800c3e6:	6921      	ldr	r1, [r4, #16]
 800c3e8:	f7ff fefa 	bl	800c1e0 <_free_r>
 800c3ec:	e7c7      	b.n	800c37e <__ssputs_r+0x4e>
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	fffffb7f 	.word	0xfffffb7f

0800c3f4 <_svfiprintf_r>:
 800c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f6:	b0a1      	sub	sp, #132	; 0x84
 800c3f8:	9003      	str	r0, [sp, #12]
 800c3fa:	001d      	movs	r5, r3
 800c3fc:	898b      	ldrh	r3, [r1, #12]
 800c3fe:	000f      	movs	r7, r1
 800c400:	0016      	movs	r6, r2
 800c402:	061b      	lsls	r3, r3, #24
 800c404:	d511      	bpl.n	800c42a <_svfiprintf_r+0x36>
 800c406:	690b      	ldr	r3, [r1, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10e      	bne.n	800c42a <_svfiprintf_r+0x36>
 800c40c:	2140      	movs	r1, #64	; 0x40
 800c40e:	f7ff ff31 	bl	800c274 <_malloc_r>
 800c412:	6038      	str	r0, [r7, #0]
 800c414:	6138      	str	r0, [r7, #16]
 800c416:	2800      	cmp	r0, #0
 800c418:	d105      	bne.n	800c426 <_svfiprintf_r+0x32>
 800c41a:	230c      	movs	r3, #12
 800c41c:	9a03      	ldr	r2, [sp, #12]
 800c41e:	3801      	subs	r0, #1
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	b021      	add	sp, #132	; 0x84
 800c424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c426:	2340      	movs	r3, #64	; 0x40
 800c428:	617b      	str	r3, [r7, #20]
 800c42a:	2300      	movs	r3, #0
 800c42c:	ac08      	add	r4, sp, #32
 800c42e:	6163      	str	r3, [r4, #20]
 800c430:	3320      	adds	r3, #32
 800c432:	7663      	strb	r3, [r4, #25]
 800c434:	3310      	adds	r3, #16
 800c436:	76a3      	strb	r3, [r4, #26]
 800c438:	9507      	str	r5, [sp, #28]
 800c43a:	0035      	movs	r5, r6
 800c43c:	782b      	ldrb	r3, [r5, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <_svfiprintf_r+0x52>
 800c442:	2b25      	cmp	r3, #37	; 0x25
 800c444:	d147      	bne.n	800c4d6 <_svfiprintf_r+0xe2>
 800c446:	1bab      	subs	r3, r5, r6
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	42b5      	cmp	r5, r6
 800c44c:	d00c      	beq.n	800c468 <_svfiprintf_r+0x74>
 800c44e:	0032      	movs	r2, r6
 800c450:	0039      	movs	r1, r7
 800c452:	9803      	ldr	r0, [sp, #12]
 800c454:	f7ff ff6c 	bl	800c330 <__ssputs_r>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d100      	bne.n	800c45e <_svfiprintf_r+0x6a>
 800c45c:	e0ae      	b.n	800c5bc <_svfiprintf_r+0x1c8>
 800c45e:	6962      	ldr	r2, [r4, #20]
 800c460:	9b05      	ldr	r3, [sp, #20]
 800c462:	4694      	mov	ip, r2
 800c464:	4463      	add	r3, ip
 800c466:	6163      	str	r3, [r4, #20]
 800c468:	782b      	ldrb	r3, [r5, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d100      	bne.n	800c470 <_svfiprintf_r+0x7c>
 800c46e:	e0a5      	b.n	800c5bc <_svfiprintf_r+0x1c8>
 800c470:	2201      	movs	r2, #1
 800c472:	2300      	movs	r3, #0
 800c474:	4252      	negs	r2, r2
 800c476:	6062      	str	r2, [r4, #4]
 800c478:	a904      	add	r1, sp, #16
 800c47a:	3254      	adds	r2, #84	; 0x54
 800c47c:	1852      	adds	r2, r2, r1
 800c47e:	1c6e      	adds	r6, r5, #1
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	60e3      	str	r3, [r4, #12]
 800c484:	60a3      	str	r3, [r4, #8]
 800c486:	7013      	strb	r3, [r2, #0]
 800c488:	65a3      	str	r3, [r4, #88]	; 0x58
 800c48a:	2205      	movs	r2, #5
 800c48c:	7831      	ldrb	r1, [r6, #0]
 800c48e:	4854      	ldr	r0, [pc, #336]	; (800c5e0 <_svfiprintf_r+0x1ec>)
 800c490:	f7ff f9ba 	bl	800b808 <memchr>
 800c494:	1c75      	adds	r5, r6, #1
 800c496:	2800      	cmp	r0, #0
 800c498:	d11f      	bne.n	800c4da <_svfiprintf_r+0xe6>
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	06d3      	lsls	r3, r2, #27
 800c49e:	d504      	bpl.n	800c4aa <_svfiprintf_r+0xb6>
 800c4a0:	2353      	movs	r3, #83	; 0x53
 800c4a2:	a904      	add	r1, sp, #16
 800c4a4:	185b      	adds	r3, r3, r1
 800c4a6:	2120      	movs	r1, #32
 800c4a8:	7019      	strb	r1, [r3, #0]
 800c4aa:	0713      	lsls	r3, r2, #28
 800c4ac:	d504      	bpl.n	800c4b8 <_svfiprintf_r+0xc4>
 800c4ae:	2353      	movs	r3, #83	; 0x53
 800c4b0:	a904      	add	r1, sp, #16
 800c4b2:	185b      	adds	r3, r3, r1
 800c4b4:	212b      	movs	r1, #43	; 0x2b
 800c4b6:	7019      	strb	r1, [r3, #0]
 800c4b8:	7833      	ldrb	r3, [r6, #0]
 800c4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c4bc:	d016      	beq.n	800c4ec <_svfiprintf_r+0xf8>
 800c4be:	0035      	movs	r5, r6
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	200a      	movs	r0, #10
 800c4c4:	68e3      	ldr	r3, [r4, #12]
 800c4c6:	782a      	ldrb	r2, [r5, #0]
 800c4c8:	1c6e      	adds	r6, r5, #1
 800c4ca:	3a30      	subs	r2, #48	; 0x30
 800c4cc:	2a09      	cmp	r2, #9
 800c4ce:	d94e      	bls.n	800c56e <_svfiprintf_r+0x17a>
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	d111      	bne.n	800c4f8 <_svfiprintf_r+0x104>
 800c4d4:	e017      	b.n	800c506 <_svfiprintf_r+0x112>
 800c4d6:	3501      	adds	r5, #1
 800c4d8:	e7b0      	b.n	800c43c <_svfiprintf_r+0x48>
 800c4da:	4b41      	ldr	r3, [pc, #260]	; (800c5e0 <_svfiprintf_r+0x1ec>)
 800c4dc:	6822      	ldr	r2, [r4, #0]
 800c4de:	1ac0      	subs	r0, r0, r3
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	4083      	lsls	r3, r0
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	002e      	movs	r6, r5
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	e7ce      	b.n	800c48a <_svfiprintf_r+0x96>
 800c4ec:	9b07      	ldr	r3, [sp, #28]
 800c4ee:	1d19      	adds	r1, r3, #4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	9107      	str	r1, [sp, #28]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	db01      	blt.n	800c4fc <_svfiprintf_r+0x108>
 800c4f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4fa:	e004      	b.n	800c506 <_svfiprintf_r+0x112>
 800c4fc:	425b      	negs	r3, r3
 800c4fe:	60e3      	str	r3, [r4, #12]
 800c500:	2302      	movs	r3, #2
 800c502:	4313      	orrs	r3, r2
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	782b      	ldrb	r3, [r5, #0]
 800c508:	2b2e      	cmp	r3, #46	; 0x2e
 800c50a:	d10a      	bne.n	800c522 <_svfiprintf_r+0x12e>
 800c50c:	786b      	ldrb	r3, [r5, #1]
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	d135      	bne.n	800c57e <_svfiprintf_r+0x18a>
 800c512:	9b07      	ldr	r3, [sp, #28]
 800c514:	3502      	adds	r5, #2
 800c516:	1d1a      	adds	r2, r3, #4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	9207      	str	r2, [sp, #28]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	db2b      	blt.n	800c578 <_svfiprintf_r+0x184>
 800c520:	9309      	str	r3, [sp, #36]	; 0x24
 800c522:	4e30      	ldr	r6, [pc, #192]	; (800c5e4 <_svfiprintf_r+0x1f0>)
 800c524:	2203      	movs	r2, #3
 800c526:	0030      	movs	r0, r6
 800c528:	7829      	ldrb	r1, [r5, #0]
 800c52a:	f7ff f96d 	bl	800b808 <memchr>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d006      	beq.n	800c540 <_svfiprintf_r+0x14c>
 800c532:	2340      	movs	r3, #64	; 0x40
 800c534:	1b80      	subs	r0, r0, r6
 800c536:	4083      	lsls	r3, r0
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	3501      	adds	r5, #1
 800c53c:	4313      	orrs	r3, r2
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	7829      	ldrb	r1, [r5, #0]
 800c542:	2206      	movs	r2, #6
 800c544:	4828      	ldr	r0, [pc, #160]	; (800c5e8 <_svfiprintf_r+0x1f4>)
 800c546:	1c6e      	adds	r6, r5, #1
 800c548:	7621      	strb	r1, [r4, #24]
 800c54a:	f7ff f95d 	bl	800b808 <memchr>
 800c54e:	2800      	cmp	r0, #0
 800c550:	d03c      	beq.n	800c5cc <_svfiprintf_r+0x1d8>
 800c552:	4b26      	ldr	r3, [pc, #152]	; (800c5ec <_svfiprintf_r+0x1f8>)
 800c554:	2b00      	cmp	r3, #0
 800c556:	d125      	bne.n	800c5a4 <_svfiprintf_r+0x1b0>
 800c558:	2207      	movs	r2, #7
 800c55a:	9b07      	ldr	r3, [sp, #28]
 800c55c:	3307      	adds	r3, #7
 800c55e:	4393      	bics	r3, r2
 800c560:	3308      	adds	r3, #8
 800c562:	9307      	str	r3, [sp, #28]
 800c564:	6963      	ldr	r3, [r4, #20]
 800c566:	9a04      	ldr	r2, [sp, #16]
 800c568:	189b      	adds	r3, r3, r2
 800c56a:	6163      	str	r3, [r4, #20]
 800c56c:	e765      	b.n	800c43a <_svfiprintf_r+0x46>
 800c56e:	4343      	muls	r3, r0
 800c570:	0035      	movs	r5, r6
 800c572:	2101      	movs	r1, #1
 800c574:	189b      	adds	r3, r3, r2
 800c576:	e7a6      	b.n	800c4c6 <_svfiprintf_r+0xd2>
 800c578:	2301      	movs	r3, #1
 800c57a:	425b      	negs	r3, r3
 800c57c:	e7d0      	b.n	800c520 <_svfiprintf_r+0x12c>
 800c57e:	2300      	movs	r3, #0
 800c580:	200a      	movs	r0, #10
 800c582:	001a      	movs	r2, r3
 800c584:	3501      	adds	r5, #1
 800c586:	6063      	str	r3, [r4, #4]
 800c588:	7829      	ldrb	r1, [r5, #0]
 800c58a:	1c6e      	adds	r6, r5, #1
 800c58c:	3930      	subs	r1, #48	; 0x30
 800c58e:	2909      	cmp	r1, #9
 800c590:	d903      	bls.n	800c59a <_svfiprintf_r+0x1a6>
 800c592:	2b00      	cmp	r3, #0
 800c594:	d0c5      	beq.n	800c522 <_svfiprintf_r+0x12e>
 800c596:	9209      	str	r2, [sp, #36]	; 0x24
 800c598:	e7c3      	b.n	800c522 <_svfiprintf_r+0x12e>
 800c59a:	4342      	muls	r2, r0
 800c59c:	0035      	movs	r5, r6
 800c59e:	2301      	movs	r3, #1
 800c5a0:	1852      	adds	r2, r2, r1
 800c5a2:	e7f1      	b.n	800c588 <_svfiprintf_r+0x194>
 800c5a4:	ab07      	add	r3, sp, #28
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	003a      	movs	r2, r7
 800c5aa:	0021      	movs	r1, r4
 800c5ac:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <_svfiprintf_r+0x1fc>)
 800c5ae:	9803      	ldr	r0, [sp, #12]
 800c5b0:	f7fc f964 	bl	800887c <_printf_float>
 800c5b4:	9004      	str	r0, [sp, #16]
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	d1d3      	bne.n	800c564 <_svfiprintf_r+0x170>
 800c5bc:	89bb      	ldrh	r3, [r7, #12]
 800c5be:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c5c0:	065b      	lsls	r3, r3, #25
 800c5c2:	d400      	bmi.n	800c5c6 <_svfiprintf_r+0x1d2>
 800c5c4:	e72d      	b.n	800c422 <_svfiprintf_r+0x2e>
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	4240      	negs	r0, r0
 800c5ca:	e72a      	b.n	800c422 <_svfiprintf_r+0x2e>
 800c5cc:	ab07      	add	r3, sp, #28
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	003a      	movs	r2, r7
 800c5d2:	0021      	movs	r1, r4
 800c5d4:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <_svfiprintf_r+0x1fc>)
 800c5d6:	9803      	ldr	r0, [sp, #12]
 800c5d8:	f7fc fc0e 	bl	8008df8 <_printf_i>
 800c5dc:	e7ea      	b.n	800c5b4 <_svfiprintf_r+0x1c0>
 800c5de:	46c0      	nop			; (mov r8, r8)
 800c5e0:	0800df24 	.word	0x0800df24
 800c5e4:	0800df2a 	.word	0x0800df2a
 800c5e8:	0800df2e 	.word	0x0800df2e
 800c5ec:	0800887d 	.word	0x0800887d
 800c5f0:	0800c331 	.word	0x0800c331

0800c5f4 <_sungetc_r>:
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	0014      	movs	r4, r2
 800c5f8:	1c4b      	adds	r3, r1, #1
 800c5fa:	d103      	bne.n	800c604 <_sungetc_r+0x10>
 800c5fc:	2501      	movs	r5, #1
 800c5fe:	426d      	negs	r5, r5
 800c600:	0028      	movs	r0, r5
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	8993      	ldrh	r3, [r2, #12]
 800c606:	2220      	movs	r2, #32
 800c608:	4393      	bics	r3, r2
 800c60a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c60c:	81a3      	strh	r3, [r4, #12]
 800c60e:	b2ce      	uxtb	r6, r1
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	b2cd      	uxtb	r5, r1
 800c614:	2a00      	cmp	r2, #0
 800c616:	d010      	beq.n	800c63a <_sungetc_r+0x46>
 800c618:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c61a:	429a      	cmp	r2, r3
 800c61c:	dd07      	ble.n	800c62e <_sungetc_r+0x3a>
 800c61e:	6823      	ldr	r3, [r4, #0]
 800c620:	3b01      	subs	r3, #1
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	701e      	strb	r6, [r3, #0]
 800c626:	6863      	ldr	r3, [r4, #4]
 800c628:	3301      	adds	r3, #1
 800c62a:	6063      	str	r3, [r4, #4]
 800c62c:	e7e8      	b.n	800c600 <_sungetc_r+0xc>
 800c62e:	0021      	movs	r1, r4
 800c630:	f000 fc20 	bl	800ce74 <__submore>
 800c634:	2800      	cmp	r0, #0
 800c636:	d0f2      	beq.n	800c61e <_sungetc_r+0x2a>
 800c638:	e7e0      	b.n	800c5fc <_sungetc_r+0x8>
 800c63a:	6921      	ldr	r1, [r4, #16]
 800c63c:	6822      	ldr	r2, [r4, #0]
 800c63e:	2900      	cmp	r1, #0
 800c640:	d007      	beq.n	800c652 <_sungetc_r+0x5e>
 800c642:	4291      	cmp	r1, r2
 800c644:	d205      	bcs.n	800c652 <_sungetc_r+0x5e>
 800c646:	1e51      	subs	r1, r2, #1
 800c648:	7808      	ldrb	r0, [r1, #0]
 800c64a:	42a8      	cmp	r0, r5
 800c64c:	d101      	bne.n	800c652 <_sungetc_r+0x5e>
 800c64e:	6021      	str	r1, [r4, #0]
 800c650:	e7ea      	b.n	800c628 <_sungetc_r+0x34>
 800c652:	6423      	str	r3, [r4, #64]	; 0x40
 800c654:	0023      	movs	r3, r4
 800c656:	3344      	adds	r3, #68	; 0x44
 800c658:	6363      	str	r3, [r4, #52]	; 0x34
 800c65a:	2303      	movs	r3, #3
 800c65c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c65e:	0023      	movs	r3, r4
 800c660:	3346      	adds	r3, #70	; 0x46
 800c662:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c664:	701e      	strb	r6, [r3, #0]
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	2301      	movs	r3, #1
 800c66a:	e7de      	b.n	800c62a <_sungetc_r+0x36>

0800c66c <__ssrefill_r>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	000c      	movs	r4, r1
 800c670:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c672:	2900      	cmp	r1, #0
 800c674:	d00e      	beq.n	800c694 <__ssrefill_r+0x28>
 800c676:	0023      	movs	r3, r4
 800c678:	3344      	adds	r3, #68	; 0x44
 800c67a:	4299      	cmp	r1, r3
 800c67c:	d001      	beq.n	800c682 <__ssrefill_r+0x16>
 800c67e:	f7ff fdaf 	bl	800c1e0 <_free_r>
 800c682:	2000      	movs	r0, #0
 800c684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c686:	6360      	str	r0, [r4, #52]	; 0x34
 800c688:	6063      	str	r3, [r4, #4]
 800c68a:	4283      	cmp	r3, r0
 800c68c:	d002      	beq.n	800c694 <__ssrefill_r+0x28>
 800c68e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	bd10      	pop	{r4, pc}
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	2001      	movs	r0, #1
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	2300      	movs	r3, #0
 800c69c:	89a2      	ldrh	r2, [r4, #12]
 800c69e:	6063      	str	r3, [r4, #4]
 800c6a0:	3320      	adds	r3, #32
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	4240      	negs	r0, r0
 800c6a8:	e7f3      	b.n	800c692 <__ssrefill_r+0x26>
	...

0800c6ac <__ssvfiscanf_r>:
 800c6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ae:	4cb5      	ldr	r4, [pc, #724]	; (800c984 <__ssvfiscanf_r+0x2d8>)
 800c6b0:	0005      	movs	r5, r0
 800c6b2:	44a5      	add	sp, r4
 800c6b4:	000c      	movs	r4, r1
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	9148      	str	r1, [sp, #288]	; 0x120
 800c6ba:	9149      	str	r1, [sp, #292]	; 0x124
 800c6bc:	a905      	add	r1, sp, #20
 800c6be:	914a      	str	r1, [sp, #296]	; 0x128
 800c6c0:	21be      	movs	r1, #190	; 0xbe
 800c6c2:	48b1      	ldr	r0, [pc, #708]	; (800c988 <__ssvfiscanf_r+0x2dc>)
 800c6c4:	0049      	lsls	r1, r1, #1
 800c6c6:	ae45      	add	r6, sp, #276	; 0x114
 800c6c8:	5070      	str	r0, [r6, r1]
 800c6ca:	48b0      	ldr	r0, [pc, #704]	; (800c98c <__ssvfiscanf_r+0x2e0>)
 800c6cc:	3104      	adds	r1, #4
 800c6ce:	ae45      	add	r6, sp, #276	; 0x114
 800c6d0:	5070      	str	r0, [r6, r1]
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	9101      	str	r1, [sp, #4]
 800c6d6:	7813      	ldrb	r3, [r2, #0]
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d100      	bne.n	800c6e0 <__ssvfiscanf_r+0x34>
 800c6de:	e14f      	b.n	800c980 <__ssvfiscanf_r+0x2d4>
 800c6e0:	4fab      	ldr	r7, [pc, #684]	; (800c990 <__ssvfiscanf_r+0x2e4>)
 800c6e2:	2008      	movs	r0, #8
 800c6e4:	5cf9      	ldrb	r1, [r7, r3]
 800c6e6:	2308      	movs	r3, #8
 800c6e8:	1c56      	adds	r6, r2, #1
 800c6ea:	400b      	ands	r3, r1
 800c6ec:	4201      	tst	r1, r0
 800c6ee:	d01e      	beq.n	800c72e <__ssvfiscanf_r+0x82>
 800c6f0:	6863      	ldr	r3, [r4, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	dd11      	ble.n	800c71a <__ssvfiscanf_r+0x6e>
 800c6f6:	2108      	movs	r1, #8
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	781a      	ldrb	r2, [r3, #0]
 800c6fc:	5cba      	ldrb	r2, [r7, r2]
 800c6fe:	420a      	tst	r2, r1
 800c700:	d101      	bne.n	800c706 <__ssvfiscanf_r+0x5a>
 800c702:	0032      	movs	r2, r6
 800c704:	e7e7      	b.n	800c6d6 <__ssvfiscanf_r+0x2a>
 800c706:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c708:	3301      	adds	r3, #1
 800c70a:	9200      	str	r2, [sp, #0]
 800c70c:	3201      	adds	r2, #1
 800c70e:	9249      	str	r2, [sp, #292]	; 0x124
 800c710:	6862      	ldr	r2, [r4, #4]
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	3a01      	subs	r2, #1
 800c716:	6062      	str	r2, [r4, #4]
 800c718:	e7ea      	b.n	800c6f0 <__ssvfiscanf_r+0x44>
 800c71a:	9a01      	ldr	r2, [sp, #4]
 800c71c:	ab45      	add	r3, sp, #276	; 0x114
 800c71e:	589b      	ldr	r3, [r3, r2]
 800c720:	0021      	movs	r1, r4
 800c722:	0028      	movs	r0, r5
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	4798      	blx	r3
 800c728:	2800      	cmp	r0, #0
 800c72a:	d0e4      	beq.n	800c6f6 <__ssvfiscanf_r+0x4a>
 800c72c:	e7e9      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c72e:	9900      	ldr	r1, [sp, #0]
 800c730:	2925      	cmp	r1, #37	; 0x25
 800c732:	d164      	bne.n	800c7fe <__ssvfiscanf_r+0x152>
 800c734:	9347      	str	r3, [sp, #284]	; 0x11c
 800c736:	9345      	str	r3, [sp, #276]	; 0x114
 800c738:	7853      	ldrb	r3, [r2, #1]
 800c73a:	2b2a      	cmp	r3, #42	; 0x2a
 800c73c:	d102      	bne.n	800c744 <__ssvfiscanf_r+0x98>
 800c73e:	3b1a      	subs	r3, #26
 800c740:	9345      	str	r3, [sp, #276]	; 0x114
 800c742:	1c96      	adds	r6, r2, #2
 800c744:	0037      	movs	r7, r6
 800c746:	200a      	movs	r0, #10
 800c748:	7839      	ldrb	r1, [r7, #0]
 800c74a:	1c7b      	adds	r3, r7, #1
 800c74c:	9302      	str	r3, [sp, #8]
 800c74e:	000b      	movs	r3, r1
 800c750:	3b30      	subs	r3, #48	; 0x30
 800c752:	2b09      	cmp	r3, #9
 800c754:	d91f      	bls.n	800c796 <__ssvfiscanf_r+0xea>
 800c756:	4e8f      	ldr	r6, [pc, #572]	; (800c994 <__ssvfiscanf_r+0x2e8>)
 800c758:	2203      	movs	r2, #3
 800c75a:	0030      	movs	r0, r6
 800c75c:	f7ff f854 	bl	800b808 <memchr>
 800c760:	2800      	cmp	r0, #0
 800c762:	d007      	beq.n	800c774 <__ssvfiscanf_r+0xc8>
 800c764:	2301      	movs	r3, #1
 800c766:	1b80      	subs	r0, r0, r6
 800c768:	4083      	lsls	r3, r0
 800c76a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c76c:	9f02      	ldr	r7, [sp, #8]
 800c76e:	4313      	orrs	r3, r2
 800c770:	9203      	str	r2, [sp, #12]
 800c772:	9345      	str	r3, [sp, #276]	; 0x114
 800c774:	783b      	ldrb	r3, [r7, #0]
 800c776:	1c7e      	adds	r6, r7, #1
 800c778:	2b78      	cmp	r3, #120	; 0x78
 800c77a:	d807      	bhi.n	800c78c <__ssvfiscanf_r+0xe0>
 800c77c:	2b57      	cmp	r3, #87	; 0x57
 800c77e:	d812      	bhi.n	800c7a6 <__ssvfiscanf_r+0xfa>
 800c780:	2b25      	cmp	r3, #37	; 0x25
 800c782:	d03c      	beq.n	800c7fe <__ssvfiscanf_r+0x152>
 800c784:	d836      	bhi.n	800c7f4 <__ssvfiscanf_r+0x148>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d100      	bne.n	800c78c <__ssvfiscanf_r+0xe0>
 800c78a:	e0f6      	b.n	800c97a <__ssvfiscanf_r+0x2ce>
 800c78c:	2303      	movs	r3, #3
 800c78e:	934b      	str	r3, [sp, #300]	; 0x12c
 800c790:	3307      	adds	r3, #7
 800c792:	9346      	str	r3, [sp, #280]	; 0x118
 800c794:	e076      	b.n	800c884 <__ssvfiscanf_r+0x1d8>
 800c796:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c798:	9f02      	ldr	r7, [sp, #8]
 800c79a:	9303      	str	r3, [sp, #12]
 800c79c:	4343      	muls	r3, r0
 800c79e:	3b30      	subs	r3, #48	; 0x30
 800c7a0:	185b      	adds	r3, r3, r1
 800c7a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800c7a4:	e7d0      	b.n	800c748 <__ssvfiscanf_r+0x9c>
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	3858      	subs	r0, #88	; 0x58
 800c7aa:	2820      	cmp	r0, #32
 800c7ac:	d8ee      	bhi.n	800c78c <__ssvfiscanf_r+0xe0>
 800c7ae:	f7f3 fcc7 	bl	8000140 <__gnu_thumb1_case_shi>
 800c7b2:	0051      	.short	0x0051
 800c7b4:	ffedffed 	.word	0xffedffed
 800c7b8:	ffed0086 	.word	0xffed0086
 800c7bc:	ffedffed 	.word	0xffedffed
 800c7c0:	ffedffed 	.word	0xffedffed
 800c7c4:	ffedffed 	.word	0xffedffed
 800c7c8:	00600093 	.word	0x00600093
 800c7cc:	00240024 	.word	0x00240024
 800c7d0:	ffed0024 	.word	0xffed0024
 800c7d4:	ffed0062 	.word	0xffed0062
 800c7d8:	ffedffed 	.word	0xffedffed
 800c7dc:	009dffed 	.word	0x009dffed
 800c7e0:	004b0065 	.word	0x004b0065
 800c7e4:	ffedffed 	.word	0xffedffed
 800c7e8:	ffed009b 	.word	0xffed009b
 800c7ec:	ffed0060 	.word	0xffed0060
 800c7f0:	0051ffed 	.word	0x0051ffed
 800c7f4:	3b45      	subs	r3, #69	; 0x45
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d8c8      	bhi.n	800c78c <__ssvfiscanf_r+0xe0>
 800c7fa:	2305      	movs	r3, #5
 800c7fc:	e041      	b.n	800c882 <__ssvfiscanf_r+0x1d6>
 800c7fe:	6863      	ldr	r3, [r4, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	dd0f      	ble.n	800c824 <__ssvfiscanf_r+0x178>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	9900      	ldr	r1, [sp, #0]
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	428a      	cmp	r2, r1
 800c80c:	d000      	beq.n	800c810 <__ssvfiscanf_r+0x164>
 800c80e:	e0b7      	b.n	800c980 <__ssvfiscanf_r+0x2d4>
 800c810:	3301      	adds	r3, #1
 800c812:	6862      	ldr	r2, [r4, #4]
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c818:	3a01      	subs	r2, #1
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	3301      	adds	r3, #1
 800c81e:	6062      	str	r2, [r4, #4]
 800c820:	9349      	str	r3, [sp, #292]	; 0x124
 800c822:	e76e      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c824:	9a01      	ldr	r2, [sp, #4]
 800c826:	ab45      	add	r3, sp, #276	; 0x114
 800c828:	589b      	ldr	r3, [r3, r2]
 800c82a:	0021      	movs	r1, r4
 800c82c:	0028      	movs	r0, r5
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	4798      	blx	r3
 800c832:	2800      	cmp	r0, #0
 800c834:	d0e6      	beq.n	800c804 <__ssvfiscanf_r+0x158>
 800c836:	9848      	ldr	r0, [sp, #288]	; 0x120
 800c838:	2800      	cmp	r0, #0
 800c83a:	d000      	beq.n	800c83e <__ssvfiscanf_r+0x192>
 800c83c:	e099      	b.n	800c972 <__ssvfiscanf_r+0x2c6>
 800c83e:	3801      	subs	r0, #1
 800c840:	23a7      	movs	r3, #167	; 0xa7
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	449d      	add	sp, r3
 800c846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c848:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c84a:	9200      	str	r2, [sp, #0]
 800c84c:	2220      	movs	r2, #32
 800c84e:	9900      	ldr	r1, [sp, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	9245      	str	r2, [sp, #276]	; 0x114
 800c854:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c856:	9200      	str	r2, [sp, #0]
 800c858:	2280      	movs	r2, #128	; 0x80
 800c85a:	9900      	ldr	r1, [sp, #0]
 800c85c:	0092      	lsls	r2, r2, #2
 800c85e:	430a      	orrs	r2, r1
 800c860:	9245      	str	r2, [sp, #276]	; 0x114
 800c862:	2210      	movs	r2, #16
 800c864:	9246      	str	r2, [sp, #280]	; 0x118
 800c866:	226e      	movs	r2, #110	; 0x6e
 800c868:	429a      	cmp	r2, r3
 800c86a:	419b      	sbcs	r3, r3
 800c86c:	425b      	negs	r3, r3
 800c86e:	3303      	adds	r3, #3
 800c870:	e007      	b.n	800c882 <__ssvfiscanf_r+0x1d6>
 800c872:	220a      	movs	r2, #10
 800c874:	e7f6      	b.n	800c864 <__ssvfiscanf_r+0x1b8>
 800c876:	2300      	movs	r3, #0
 800c878:	9346      	str	r3, [sp, #280]	; 0x118
 800c87a:	e7f8      	b.n	800c86e <__ssvfiscanf_r+0x1c2>
 800c87c:	2308      	movs	r3, #8
 800c87e:	9346      	str	r3, [sp, #280]	; 0x118
 800c880:	3b04      	subs	r3, #4
 800c882:	934b      	str	r3, [sp, #300]	; 0x12c
 800c884:	6863      	ldr	r3, [r4, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dd3f      	ble.n	800c90a <__ssvfiscanf_r+0x25e>
 800c88a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	065b      	lsls	r3, r3, #25
 800c890:	d406      	bmi.n	800c8a0 <__ssvfiscanf_r+0x1f4>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	493e      	ldr	r1, [pc, #248]	; (800c990 <__ssvfiscanf_r+0x2e4>)
 800c896:	781a      	ldrb	r2, [r3, #0]
 800c898:	5c8a      	ldrb	r2, [r1, r2]
 800c89a:	2108      	movs	r1, #8
 800c89c:	420a      	tst	r2, r1
 800c89e:	d13e      	bne.n	800c91e <__ssvfiscanf_r+0x272>
 800c8a0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	dc51      	bgt.n	800c94a <__ssvfiscanf_r+0x29e>
 800c8a6:	0022      	movs	r2, r4
 800c8a8:	0028      	movs	r0, r5
 800c8aa:	ab04      	add	r3, sp, #16
 800c8ac:	a945      	add	r1, sp, #276	; 0x114
 800c8ae:	f000 f875 	bl	800c99c <_scanf_chars>
 800c8b2:	2801      	cmp	r0, #1
 800c8b4:	d064      	beq.n	800c980 <__ssvfiscanf_r+0x2d4>
 800c8b6:	2802      	cmp	r0, #2
 800c8b8:	d000      	beq.n	800c8bc <__ssvfiscanf_r+0x210>
 800c8ba:	e722      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c8bc:	e7bb      	b.n	800c836 <__ssvfiscanf_r+0x18a>
 800c8be:	0031      	movs	r1, r6
 800c8c0:	a805      	add	r0, sp, #20
 800c8c2:	f000 f9f9 	bl	800ccb8 <__sccl>
 800c8c6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c8c8:	0006      	movs	r6, r0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2340      	movs	r3, #64	; 0x40
 800c8ce:	9a00      	ldr	r2, [sp, #0]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	9345      	str	r3, [sp, #276]	; 0x114
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e7d4      	b.n	800c882 <__ssvfiscanf_r+0x1d6>
 800c8d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2340      	movs	r3, #64	; 0x40
 800c8de:	9a00      	ldr	r2, [sp, #0]
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	9345      	str	r3, [sp, #276]	; 0x114
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	e7cc      	b.n	800c882 <__ssvfiscanf_r+0x1d6>
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	e7ca      	b.n	800c882 <__ssvfiscanf_r+0x1d6>
 800c8ec:	9845      	ldr	r0, [sp, #276]	; 0x114
 800c8ee:	06c3      	lsls	r3, r0, #27
 800c8f0:	d500      	bpl.n	800c8f4 <__ssvfiscanf_r+0x248>
 800c8f2:	e706      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c8f4:	9b04      	ldr	r3, [sp, #16]
 800c8f6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c8f8:	1d19      	adds	r1, r3, #4
 800c8fa:	9104      	str	r1, [sp, #16]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	07c7      	lsls	r7, r0, #31
 800c900:	d501      	bpl.n	800c906 <__ssvfiscanf_r+0x25a>
 800c902:	801a      	strh	r2, [r3, #0]
 800c904:	e6fd      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c906:	601a      	str	r2, [r3, #0]
 800c908:	e6fb      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	ab45      	add	r3, sp, #276	; 0x114
 800c90e:	589b      	ldr	r3, [r3, r2]
 800c910:	0021      	movs	r1, r4
 800c912:	0028      	movs	r0, r5
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	4798      	blx	r3
 800c918:	2800      	cmp	r0, #0
 800c91a:	d0b6      	beq.n	800c88a <__ssvfiscanf_r+0x1de>
 800c91c:	e78b      	b.n	800c836 <__ssvfiscanf_r+0x18a>
 800c91e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c920:	9200      	str	r2, [sp, #0]
 800c922:	3201      	adds	r2, #1
 800c924:	9249      	str	r2, [sp, #292]	; 0x124
 800c926:	6862      	ldr	r2, [r4, #4]
 800c928:	3a01      	subs	r2, #1
 800c92a:	6062      	str	r2, [r4, #4]
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	dd02      	ble.n	800c936 <__ssvfiscanf_r+0x28a>
 800c930:	3301      	adds	r3, #1
 800c932:	6023      	str	r3, [r4, #0]
 800c934:	e7ad      	b.n	800c892 <__ssvfiscanf_r+0x1e6>
 800c936:	9a01      	ldr	r2, [sp, #4]
 800c938:	ab45      	add	r3, sp, #276	; 0x114
 800c93a:	589b      	ldr	r3, [r3, r2]
 800c93c:	0021      	movs	r1, r4
 800c93e:	0028      	movs	r0, r5
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	4798      	blx	r3
 800c944:	2800      	cmp	r0, #0
 800c946:	d0a4      	beq.n	800c892 <__ssvfiscanf_r+0x1e6>
 800c948:	e775      	b.n	800c836 <__ssvfiscanf_r+0x18a>
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	dc06      	bgt.n	800c95c <__ssvfiscanf_r+0x2b0>
 800c94e:	0022      	movs	r2, r4
 800c950:	0028      	movs	r0, r5
 800c952:	ab04      	add	r3, sp, #16
 800c954:	a945      	add	r1, sp, #276	; 0x114
 800c956:	f000 f87f 	bl	800ca58 <_scanf_i>
 800c95a:	e7aa      	b.n	800c8b2 <__ssvfiscanf_r+0x206>
 800c95c:	4b0e      	ldr	r3, [pc, #56]	; (800c998 <__ssvfiscanf_r+0x2ec>)
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d100      	bne.n	800c964 <__ssvfiscanf_r+0x2b8>
 800c962:	e6ce      	b.n	800c702 <__ssvfiscanf_r+0x56>
 800c964:	0022      	movs	r2, r4
 800c966:	0028      	movs	r0, r5
 800c968:	ab04      	add	r3, sp, #16
 800c96a:	a945      	add	r1, sp, #276	; 0x114
 800c96c:	f7fc fb56 	bl	800901c <_scanf_float>
 800c970:	e79f      	b.n	800c8b2 <__ssvfiscanf_r+0x206>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	065b      	lsls	r3, r3, #25
 800c976:	d400      	bmi.n	800c97a <__ssvfiscanf_r+0x2ce>
 800c978:	e762      	b.n	800c840 <__ssvfiscanf_r+0x194>
 800c97a:	2001      	movs	r0, #1
 800c97c:	4240      	negs	r0, r0
 800c97e:	e75f      	b.n	800c840 <__ssvfiscanf_r+0x194>
 800c980:	9848      	ldr	r0, [sp, #288]	; 0x120
 800c982:	e75d      	b.n	800c840 <__ssvfiscanf_r+0x194>
 800c984:	fffffd64 	.word	0xfffffd64
 800c988:	0800c5f5 	.word	0x0800c5f5
 800c98c:	0800c66d 	.word	0x0800c66d
 800c990:	0800dbb1 	.word	0x0800dbb1
 800c994:	0800df2a 	.word	0x0800df2a
 800c998:	0800901d 	.word	0x0800901d

0800c99c <_scanf_chars>:
 800c99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c99e:	0015      	movs	r5, r2
 800c9a0:	688a      	ldr	r2, [r1, #8]
 800c9a2:	000c      	movs	r4, r1
 800c9a4:	9001      	str	r0, [sp, #4]
 800c9a6:	2a00      	cmp	r2, #0
 800c9a8:	d105      	bne.n	800c9b6 <_scanf_chars+0x1a>
 800c9aa:	6989      	ldr	r1, [r1, #24]
 800c9ac:	3201      	adds	r2, #1
 800c9ae:	2900      	cmp	r1, #0
 800c9b0:	d000      	beq.n	800c9b4 <_scanf_chars+0x18>
 800c9b2:	3a02      	subs	r2, #2
 800c9b4:	60a2      	str	r2, [r4, #8]
 800c9b6:	6822      	ldr	r2, [r4, #0]
 800c9b8:	06d2      	lsls	r2, r2, #27
 800c9ba:	d403      	bmi.n	800c9c4 <_scanf_chars+0x28>
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	1d11      	adds	r1, r2, #4
 800c9c0:	6019      	str	r1, [r3, #0]
 800c9c2:	6817      	ldr	r7, [r2, #0]
 800c9c4:	2600      	movs	r6, #0
 800c9c6:	69a0      	ldr	r0, [r4, #24]
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d013      	beq.n	800c9f4 <_scanf_chars+0x58>
 800c9cc:	2801      	cmp	r0, #1
 800c9ce:	d108      	bne.n	800c9e2 <_scanf_chars+0x46>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	6962      	ldr	r2, [r4, #20]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	5cd3      	ldrb	r3, [r2, r3]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10b      	bne.n	800c9f4 <_scanf_chars+0x58>
 800c9dc:	2e00      	cmp	r6, #0
 800c9de:	d127      	bne.n	800ca30 <_scanf_chars+0x94>
 800c9e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9e2:	2802      	cmp	r0, #2
 800c9e4:	d124      	bne.n	800ca30 <_scanf_chars+0x94>
 800c9e6:	682b      	ldr	r3, [r5, #0]
 800c9e8:	4a1a      	ldr	r2, [pc, #104]	; (800ca54 <_scanf_chars+0xb8>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	5cd3      	ldrb	r3, [r2, r3]
 800c9ee:	2208      	movs	r2, #8
 800c9f0:	4213      	tst	r3, r2
 800c9f2:	d11d      	bne.n	800ca30 <_scanf_chars+0x94>
 800c9f4:	2210      	movs	r2, #16
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	3601      	adds	r6, #1
 800c9fa:	4213      	tst	r3, r2
 800c9fc:	d103      	bne.n	800ca06 <_scanf_chars+0x6a>
 800c9fe:	682b      	ldr	r3, [r5, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	703b      	strb	r3, [r7, #0]
 800ca04:	3701      	adds	r7, #1
 800ca06:	682a      	ldr	r2, [r5, #0]
 800ca08:	686b      	ldr	r3, [r5, #4]
 800ca0a:	3201      	adds	r2, #1
 800ca0c:	602a      	str	r2, [r5, #0]
 800ca0e:	68a2      	ldr	r2, [r4, #8]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	3a01      	subs	r2, #1
 800ca14:	606b      	str	r3, [r5, #4]
 800ca16:	60a2      	str	r2, [r4, #8]
 800ca18:	2a00      	cmp	r2, #0
 800ca1a:	d009      	beq.n	800ca30 <_scanf_chars+0x94>
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	dcd2      	bgt.n	800c9c6 <_scanf_chars+0x2a>
 800ca20:	23c0      	movs	r3, #192	; 0xc0
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	0029      	movs	r1, r5
 800ca26:	58e3      	ldr	r3, [r4, r3]
 800ca28:	9801      	ldr	r0, [sp, #4]
 800ca2a:	4798      	blx	r3
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0ca      	beq.n	800c9c6 <_scanf_chars+0x2a>
 800ca30:	6822      	ldr	r2, [r4, #0]
 800ca32:	2310      	movs	r3, #16
 800ca34:	0011      	movs	r1, r2
 800ca36:	4019      	ands	r1, r3
 800ca38:	421a      	tst	r2, r3
 800ca3a:	d106      	bne.n	800ca4a <_scanf_chars+0xae>
 800ca3c:	68e3      	ldr	r3, [r4, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60e3      	str	r3, [r4, #12]
 800ca42:	69a3      	ldr	r3, [r4, #24]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d000      	beq.n	800ca4a <_scanf_chars+0xae>
 800ca48:	7039      	strb	r1, [r7, #0]
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	199e      	adds	r6, r3, r6
 800ca50:	6126      	str	r6, [r4, #16]
 800ca52:	e7c5      	b.n	800c9e0 <_scanf_chars+0x44>
 800ca54:	0800dbb1 	.word	0x0800dbb1

0800ca58 <_scanf_i>:
 800ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5a:	000c      	movs	r4, r1
 800ca5c:	b08d      	sub	sp, #52	; 0x34
 800ca5e:	9302      	str	r3, [sp, #8]
 800ca60:	4b79      	ldr	r3, [pc, #484]	; (800cc48 <_scanf_i+0x1f0>)
 800ca62:	0016      	movs	r6, r2
 800ca64:	9005      	str	r0, [sp, #20]
 800ca66:	aa09      	add	r2, sp, #36	; 0x24
 800ca68:	cb23      	ldmia	r3!, {r0, r1, r5}
 800ca6a:	c223      	stmia	r2!, {r0, r1, r5}
 800ca6c:	4b77      	ldr	r3, [pc, #476]	; (800cc4c <_scanf_i+0x1f4>)
 800ca6e:	9306      	str	r3, [sp, #24]
 800ca70:	69a3      	ldr	r3, [r4, #24]
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d001      	beq.n	800ca7a <_scanf_i+0x22>
 800ca76:	4b76      	ldr	r3, [pc, #472]	; (800cc50 <_scanf_i+0x1f8>)
 800ca78:	9306      	str	r3, [sp, #24]
 800ca7a:	22ae      	movs	r2, #174	; 0xae
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	68a3      	ldr	r3, [r4, #8]
 800ca80:	0052      	lsls	r2, r2, #1
 800ca82:	1e59      	subs	r1, r3, #1
 800ca84:	9004      	str	r0, [sp, #16]
 800ca86:	4291      	cmp	r1, r2
 800ca88:	d905      	bls.n	800ca96 <_scanf_i+0x3e>
 800ca8a:	3b5e      	subs	r3, #94	; 0x5e
 800ca8c:	3bff      	subs	r3, #255	; 0xff
 800ca8e:	9304      	str	r3, [sp, #16]
 800ca90:	235e      	movs	r3, #94	; 0x5e
 800ca92:	33ff      	adds	r3, #255	; 0xff
 800ca94:	60a3      	str	r3, [r4, #8]
 800ca96:	0023      	movs	r3, r4
 800ca98:	331c      	adds	r3, #28
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	23d0      	movs	r3, #208	; 0xd0
 800ca9e:	2700      	movs	r7, #0
 800caa0:	6822      	ldr	r2, [r4, #0]
 800caa2:	011b      	lsls	r3, r3, #4
 800caa4:	4313      	orrs	r3, r2
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	9b01      	ldr	r3, [sp, #4]
 800caaa:	9303      	str	r3, [sp, #12]
 800caac:	6833      	ldr	r3, [r6, #0]
 800caae:	a809      	add	r0, sp, #36	; 0x24
 800cab0:	7819      	ldrb	r1, [r3, #0]
 800cab2:	00bb      	lsls	r3, r7, #2
 800cab4:	2202      	movs	r2, #2
 800cab6:	5818      	ldr	r0, [r3, r0]
 800cab8:	f7fe fea6 	bl	800b808 <memchr>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d02b      	beq.n	800cb18 <_scanf_i+0xc0>
 800cac0:	2f01      	cmp	r7, #1
 800cac2:	d162      	bne.n	800cb8a <_scanf_i+0x132>
 800cac4:	6863      	ldr	r3, [r4, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d106      	bne.n	800cad8 <_scanf_i+0x80>
 800caca:	3308      	adds	r3, #8
 800cacc:	6822      	ldr	r2, [r4, #0]
 800cace:	6063      	str	r3, [r4, #4]
 800cad0:	33f9      	adds	r3, #249	; 0xf9
 800cad2:	33ff      	adds	r3, #255	; 0xff
 800cad4:	4313      	orrs	r3, r2
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	4b5e      	ldr	r3, [pc, #376]	; (800cc54 <_scanf_i+0x1fc>)
 800cada:	6822      	ldr	r2, [r4, #0]
 800cadc:	4013      	ands	r3, r2
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	1e5a      	subs	r2, r3, #1
 800cae4:	60a2      	str	r2, [r4, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d016      	beq.n	800cb18 <_scanf_i+0xc0>
 800caea:	6833      	ldr	r3, [r6, #0]
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	6032      	str	r2, [r6, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	9a03      	ldr	r2, [sp, #12]
 800caf4:	7013      	strb	r3, [r2, #0]
 800caf6:	6873      	ldr	r3, [r6, #4]
 800caf8:	1c55      	adds	r5, r2, #1
 800cafa:	3b01      	subs	r3, #1
 800cafc:	6073      	str	r3, [r6, #4]
 800cafe:	9503      	str	r5, [sp, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	dc09      	bgt.n	800cb18 <_scanf_i+0xc0>
 800cb04:	23c0      	movs	r3, #192	; 0xc0
 800cb06:	005b      	lsls	r3, r3, #1
 800cb08:	58e3      	ldr	r3, [r4, r3]
 800cb0a:	0031      	movs	r1, r6
 800cb0c:	9805      	ldr	r0, [sp, #20]
 800cb0e:	9307      	str	r3, [sp, #28]
 800cb10:	4798      	blx	r3
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d000      	beq.n	800cb18 <_scanf_i+0xc0>
 800cb16:	e081      	b.n	800cc1c <_scanf_i+0x1c4>
 800cb18:	3701      	adds	r7, #1
 800cb1a:	2f03      	cmp	r7, #3
 800cb1c:	d1c6      	bne.n	800caac <_scanf_i+0x54>
 800cb1e:	6863      	ldr	r3, [r4, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d101      	bne.n	800cb28 <_scanf_i+0xd0>
 800cb24:	330a      	adds	r3, #10
 800cb26:	6063      	str	r3, [r4, #4]
 800cb28:	2110      	movs	r1, #16
 800cb2a:	2700      	movs	r7, #0
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	6960      	ldr	r0, [r4, #20]
 800cb30:	1ac9      	subs	r1, r1, r3
 800cb32:	4b49      	ldr	r3, [pc, #292]	; (800cc58 <_scanf_i+0x200>)
 800cb34:	18c9      	adds	r1, r1, r3
 800cb36:	f000 f8bf 	bl	800ccb8 <__sccl>
 800cb3a:	9d03      	ldr	r5, [sp, #12]
 800cb3c:	68a3      	ldr	r3, [r4, #8]
 800cb3e:	6822      	ldr	r2, [r4, #0]
 800cb40:	9303      	str	r3, [sp, #12]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d041      	beq.n	800cbca <_scanf_i+0x172>
 800cb46:	6831      	ldr	r1, [r6, #0]
 800cb48:	6963      	ldr	r3, [r4, #20]
 800cb4a:	7808      	ldrb	r0, [r1, #0]
 800cb4c:	5c1b      	ldrb	r3, [r3, r0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d03b      	beq.n	800cbca <_scanf_i+0x172>
 800cb52:	2830      	cmp	r0, #48	; 0x30
 800cb54:	d129      	bne.n	800cbaa <_scanf_i+0x152>
 800cb56:	2380      	movs	r3, #128	; 0x80
 800cb58:	011b      	lsls	r3, r3, #4
 800cb5a:	421a      	tst	r2, r3
 800cb5c:	d025      	beq.n	800cbaa <_scanf_i+0x152>
 800cb5e:	9b04      	ldr	r3, [sp, #16]
 800cb60:	3701      	adds	r7, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d005      	beq.n	800cb72 <_scanf_i+0x11a>
 800cb66:	001a      	movs	r2, r3
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	3a01      	subs	r2, #1
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	9204      	str	r2, [sp, #16]
 800cb70:	60a3      	str	r3, [r4, #8]
 800cb72:	6873      	ldr	r3, [r6, #4]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	6073      	str	r3, [r6, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	dd1d      	ble.n	800cbb8 <_scanf_i+0x160>
 800cb7c:	6833      	ldr	r3, [r6, #0]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	6033      	str	r3, [r6, #0]
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	60a3      	str	r3, [r4, #8]
 800cb88:	e7d8      	b.n	800cb3c <_scanf_i+0xe4>
 800cb8a:	2f02      	cmp	r7, #2
 800cb8c:	d1a8      	bne.n	800cae0 <_scanf_i+0x88>
 800cb8e:	21c0      	movs	r1, #192	; 0xc0
 800cb90:	2380      	movs	r3, #128	; 0x80
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	00c9      	lsls	r1, r1, #3
 800cb96:	4011      	ands	r1, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4299      	cmp	r1, r3
 800cb9c:	d1bf      	bne.n	800cb1e <_scanf_i+0xc6>
 800cb9e:	3bf1      	subs	r3, #241	; 0xf1
 800cba0:	3bff      	subs	r3, #255	; 0xff
 800cba2:	6063      	str	r3, [r4, #4]
 800cba4:	33f0      	adds	r3, #240	; 0xf0
 800cba6:	4313      	orrs	r3, r2
 800cba8:	e799      	b.n	800cade <_scanf_i+0x86>
 800cbaa:	4b2c      	ldr	r3, [pc, #176]	; (800cc5c <_scanf_i+0x204>)
 800cbac:	4013      	ands	r3, r2
 800cbae:	6023      	str	r3, [r4, #0]
 800cbb0:	780b      	ldrb	r3, [r1, #0]
 800cbb2:	702b      	strb	r3, [r5, #0]
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	e7dc      	b.n	800cb72 <_scanf_i+0x11a>
 800cbb8:	23c0      	movs	r3, #192	; 0xc0
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	58e3      	ldr	r3, [r4, r3]
 800cbbe:	0031      	movs	r1, r6
 800cbc0:	9805      	ldr	r0, [sp, #20]
 800cbc2:	9303      	str	r3, [sp, #12]
 800cbc4:	4798      	blx	r3
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0db      	beq.n	800cb82 <_scanf_i+0x12a>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	05db      	lsls	r3, r3, #23
 800cbce:	d50e      	bpl.n	800cbee <_scanf_i+0x196>
 800cbd0:	9b01      	ldr	r3, [sp, #4]
 800cbd2:	429d      	cmp	r5, r3
 800cbd4:	d907      	bls.n	800cbe6 <_scanf_i+0x18e>
 800cbd6:	23be      	movs	r3, #190	; 0xbe
 800cbd8:	3d01      	subs	r5, #1
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	0032      	movs	r2, r6
 800cbde:	7829      	ldrb	r1, [r5, #0]
 800cbe0:	58e3      	ldr	r3, [r4, r3]
 800cbe2:	9805      	ldr	r0, [sp, #20]
 800cbe4:	4798      	blx	r3
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	2001      	movs	r0, #1
 800cbea:	429d      	cmp	r5, r3
 800cbec:	d029      	beq.n	800cc42 <_scanf_i+0x1ea>
 800cbee:	6821      	ldr	r1, [r4, #0]
 800cbf0:	2310      	movs	r3, #16
 800cbf2:	000a      	movs	r2, r1
 800cbf4:	401a      	ands	r2, r3
 800cbf6:	4219      	tst	r1, r3
 800cbf8:	d11c      	bne.n	800cc34 <_scanf_i+0x1dc>
 800cbfa:	702a      	strb	r2, [r5, #0]
 800cbfc:	6863      	ldr	r3, [r4, #4]
 800cbfe:	9901      	ldr	r1, [sp, #4]
 800cc00:	9805      	ldr	r0, [sp, #20]
 800cc02:	9e06      	ldr	r6, [sp, #24]
 800cc04:	47b0      	blx	r6
 800cc06:	9b02      	ldr	r3, [sp, #8]
 800cc08:	6821      	ldr	r1, [r4, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	068a      	lsls	r2, r1, #26
 800cc0e:	d507      	bpl.n	800cc20 <_scanf_i+0x1c8>
 800cc10:	1d1a      	adds	r2, r3, #4
 800cc12:	9902      	ldr	r1, [sp, #8]
 800cc14:	600a      	str	r2, [r1, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6018      	str	r0, [r3, #0]
 800cc1a:	e008      	b.n	800cc2e <_scanf_i+0x1d6>
 800cc1c:	2700      	movs	r7, #0
 800cc1e:	e7d4      	b.n	800cbca <_scanf_i+0x172>
 800cc20:	1d1a      	adds	r2, r3, #4
 800cc22:	07ce      	lsls	r6, r1, #31
 800cc24:	d5f5      	bpl.n	800cc12 <_scanf_i+0x1ba>
 800cc26:	9902      	ldr	r1, [sp, #8]
 800cc28:	600a      	str	r2, [r1, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	8018      	strh	r0, [r3, #0]
 800cc2e:	68e3      	ldr	r3, [r4, #12]
 800cc30:	3301      	adds	r3, #1
 800cc32:	60e3      	str	r3, [r4, #12]
 800cc34:	2000      	movs	r0, #0
 800cc36:	9b01      	ldr	r3, [sp, #4]
 800cc38:	1aed      	subs	r5, r5, r3
 800cc3a:	6923      	ldr	r3, [r4, #16]
 800cc3c:	19ef      	adds	r7, r5, r7
 800cc3e:	19df      	adds	r7, r3, r7
 800cc40:	6127      	str	r7, [r4, #16]
 800cc42:	b00d      	add	sp, #52	; 0x34
 800cc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc46:	46c0      	nop			; (mov r8, r8)
 800cc48:	0800da80 	.word	0x0800da80
 800cc4c:	0800a315 	.word	0x0800a315
 800cc50:	0800ce6d 	.word	0x0800ce6d
 800cc54:	fffffaff 	.word	0xfffffaff
 800cc58:	0800df3e 	.word	0x0800df3e
 800cc5c:	fffff6ff 	.word	0xfffff6ff

0800cc60 <_read_r>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	0004      	movs	r4, r0
 800cc64:	0008      	movs	r0, r1
 800cc66:	0011      	movs	r1, r2
 800cc68:	001a      	movs	r2, r3
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	4d05      	ldr	r5, [pc, #20]	; (800cc84 <_read_r+0x24>)
 800cc6e:	602b      	str	r3, [r5, #0]
 800cc70:	f7f7 faea 	bl	8004248 <_read>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d103      	bne.n	800cc80 <_read_r+0x20>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d000      	beq.n	800cc80 <_read_r+0x20>
 800cc7e:	6023      	str	r3, [r4, #0]
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
 800cc82:	46c0      	nop			; (mov r8, r8)
 800cc84:	200005b0 	.word	0x200005b0

0800cc88 <nan>:
 800cc88:	2000      	movs	r0, #0
 800cc8a:	4901      	ldr	r1, [pc, #4]	; (800cc90 <nan+0x8>)
 800cc8c:	4770      	bx	lr
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	7ff80000 	.word	0x7ff80000

0800cc94 <_sbrk_r>:
 800cc94:	2300      	movs	r3, #0
 800cc96:	b570      	push	{r4, r5, r6, lr}
 800cc98:	4d06      	ldr	r5, [pc, #24]	; (800ccb4 <_sbrk_r+0x20>)
 800cc9a:	0004      	movs	r4, r0
 800cc9c:	0008      	movs	r0, r1
 800cc9e:	602b      	str	r3, [r5, #0]
 800cca0:	f7f7 fb38 	bl	8004314 <_sbrk>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d103      	bne.n	800ccb0 <_sbrk_r+0x1c>
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d000      	beq.n	800ccb0 <_sbrk_r+0x1c>
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	bd70      	pop	{r4, r5, r6, pc}
 800ccb2:	46c0      	nop			; (mov r8, r8)
 800ccb4:	200005b0 	.word	0x200005b0

0800ccb8 <__sccl>:
 800ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccba:	780b      	ldrb	r3, [r1, #0]
 800ccbc:	0004      	movs	r4, r0
 800ccbe:	2b5e      	cmp	r3, #94	; 0x5e
 800ccc0:	d00c      	beq.n	800ccdc <__sccl+0x24>
 800ccc2:	1c48      	adds	r0, r1, #1
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	0022      	movs	r2, r4
 800ccc8:	1c65      	adds	r5, r4, #1
 800ccca:	35ff      	adds	r5, #255	; 0xff
 800cccc:	7011      	strb	r1, [r2, #0]
 800ccce:	3201      	adds	r2, #1
 800ccd0:	42aa      	cmp	r2, r5
 800ccd2:	d1fb      	bne.n	800cccc <__sccl+0x14>
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d105      	bne.n	800cce4 <__sccl+0x2c>
 800ccd8:	3801      	subs	r0, #1
 800ccda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccdc:	784b      	ldrb	r3, [r1, #1]
 800ccde:	1c88      	adds	r0, r1, #2
 800cce0:	2101      	movs	r1, #1
 800cce2:	e7f0      	b.n	800ccc6 <__sccl+0xe>
 800cce4:	2201      	movs	r2, #1
 800cce6:	262d      	movs	r6, #45	; 0x2d
 800cce8:	4051      	eors	r1, r2
 800ccea:	0002      	movs	r2, r0
 800ccec:	54e1      	strb	r1, [r4, r3]
 800ccee:	7815      	ldrb	r5, [r2, #0]
 800ccf0:	1c50      	adds	r0, r2, #1
 800ccf2:	2d2d      	cmp	r5, #45	; 0x2d
 800ccf4:	d009      	beq.n	800cd0a <__sccl+0x52>
 800ccf6:	2d5d      	cmp	r5, #93	; 0x5d
 800ccf8:	d0ef      	beq.n	800ccda <__sccl+0x22>
 800ccfa:	2d00      	cmp	r5, #0
 800ccfc:	d101      	bne.n	800cd02 <__sccl+0x4a>
 800ccfe:	0010      	movs	r0, r2
 800cd00:	e7eb      	b.n	800ccda <__sccl+0x22>
 800cd02:	002b      	movs	r3, r5
 800cd04:	e7f1      	b.n	800ccea <__sccl+0x32>
 800cd06:	0033      	movs	r3, r6
 800cd08:	e7ef      	b.n	800ccea <__sccl+0x32>
 800cd0a:	7855      	ldrb	r5, [r2, #1]
 800cd0c:	2d5d      	cmp	r5, #93	; 0x5d
 800cd0e:	d0fa      	beq.n	800cd06 <__sccl+0x4e>
 800cd10:	42ab      	cmp	r3, r5
 800cd12:	dcf8      	bgt.n	800cd06 <__sccl+0x4e>
 800cd14:	0018      	movs	r0, r3
 800cd16:	3202      	adds	r2, #2
 800cd18:	3001      	adds	r0, #1
 800cd1a:	5421      	strb	r1, [r4, r0]
 800cd1c:	4285      	cmp	r5, r0
 800cd1e:	dcfb      	bgt.n	800cd18 <__sccl+0x60>
 800cd20:	2000      	movs	r0, #0
 800cd22:	1c5f      	adds	r7, r3, #1
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	da01      	bge.n	800cd2c <__sccl+0x74>
 800cd28:	1ae8      	subs	r0, r5, r3
 800cd2a:	3801      	subs	r0, #1
 800cd2c:	183b      	adds	r3, r7, r0
 800cd2e:	e7de      	b.n	800ccee <__sccl+0x36>

0800cd30 <strncmp>:
 800cd30:	b530      	push	{r4, r5, lr}
 800cd32:	0005      	movs	r5, r0
 800cd34:	1e10      	subs	r0, r2, #0
 800cd36:	d00b      	beq.n	800cd50 <strncmp+0x20>
 800cd38:	2400      	movs	r4, #0
 800cd3a:	3a01      	subs	r2, #1
 800cd3c:	5d2b      	ldrb	r3, [r5, r4]
 800cd3e:	5d08      	ldrb	r0, [r1, r4]
 800cd40:	4283      	cmp	r3, r0
 800cd42:	d104      	bne.n	800cd4e <strncmp+0x1e>
 800cd44:	4294      	cmp	r4, r2
 800cd46:	d002      	beq.n	800cd4e <strncmp+0x1e>
 800cd48:	3401      	adds	r4, #1
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1f6      	bne.n	800cd3c <strncmp+0xc>
 800cd4e:	1a18      	subs	r0, r3, r0
 800cd50:	bd30      	pop	{r4, r5, pc}
	...

0800cd54 <_strtoul_l.isra.0>:
 800cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd56:	001e      	movs	r6, r3
 800cd58:	4b43      	ldr	r3, [pc, #268]	; (800ce68 <_strtoul_l.isra.0+0x114>)
 800cd5a:	b087      	sub	sp, #28
 800cd5c:	000f      	movs	r7, r1
 800cd5e:	9101      	str	r1, [sp, #4]
 800cd60:	469c      	mov	ip, r3
 800cd62:	2108      	movs	r1, #8
 800cd64:	9005      	str	r0, [sp, #20]
 800cd66:	9202      	str	r2, [sp, #8]
 800cd68:	003b      	movs	r3, r7
 800cd6a:	4662      	mov	r2, ip
 800cd6c:	781c      	ldrb	r4, [r3, #0]
 800cd6e:	1c7d      	adds	r5, r7, #1
 800cd70:	5d10      	ldrb	r0, [r2, r4]
 800cd72:	002f      	movs	r7, r5
 800cd74:	0002      	movs	r2, r0
 800cd76:	400a      	ands	r2, r1
 800cd78:	4208      	tst	r0, r1
 800cd7a:	d1f5      	bne.n	800cd68 <_strtoul_l.isra.0+0x14>
 800cd7c:	2c2d      	cmp	r4, #45	; 0x2d
 800cd7e:	d13a      	bne.n	800cdf6 <_strtoul_l.isra.0+0xa2>
 800cd80:	2701      	movs	r7, #1
 800cd82:	782c      	ldrb	r4, [r5, #0]
 800cd84:	1c9d      	adds	r5, r3, #2
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	d069      	beq.n	800ce5e <_strtoul_l.isra.0+0x10a>
 800cd8a:	2e10      	cmp	r6, #16
 800cd8c:	d109      	bne.n	800cda2 <_strtoul_l.isra.0+0x4e>
 800cd8e:	2c30      	cmp	r4, #48	; 0x30
 800cd90:	d107      	bne.n	800cda2 <_strtoul_l.isra.0+0x4e>
 800cd92:	2220      	movs	r2, #32
 800cd94:	782b      	ldrb	r3, [r5, #0]
 800cd96:	4393      	bics	r3, r2
 800cd98:	2b58      	cmp	r3, #88	; 0x58
 800cd9a:	d15b      	bne.n	800ce54 <_strtoul_l.isra.0+0x100>
 800cd9c:	2610      	movs	r6, #16
 800cd9e:	786c      	ldrb	r4, [r5, #1]
 800cda0:	3502      	adds	r5, #2
 800cda2:	2001      	movs	r0, #1
 800cda4:	0031      	movs	r1, r6
 800cda6:	4240      	negs	r0, r0
 800cda8:	f7f3 f9d4 	bl	8000154 <__udivsi3>
 800cdac:	9003      	str	r0, [sp, #12]
 800cdae:	2001      	movs	r0, #1
 800cdb0:	0031      	movs	r1, r6
 800cdb2:	4240      	negs	r0, r0
 800cdb4:	f7f3 fa54 	bl	8000260 <__aeabi_uidivmod>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	9104      	str	r1, [sp, #16]
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	468c      	mov	ip, r1
 800cdc4:	4252      	negs	r2, r2
 800cdc6:	0021      	movs	r1, r4
 800cdc8:	3930      	subs	r1, #48	; 0x30
 800cdca:	2909      	cmp	r1, #9
 800cdcc:	d81a      	bhi.n	800ce04 <_strtoul_l.isra.0+0xb0>
 800cdce:	000c      	movs	r4, r1
 800cdd0:	42a6      	cmp	r6, r4
 800cdd2:	dd25      	ble.n	800ce20 <_strtoul_l.isra.0+0xcc>
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	db21      	blt.n	800ce1c <_strtoul_l.isra.0+0xc8>
 800cdd8:	9903      	ldr	r1, [sp, #12]
 800cdda:	0013      	movs	r3, r2
 800cddc:	4281      	cmp	r1, r0
 800cdde:	d307      	bcc.n	800cdf0 <_strtoul_l.isra.0+0x9c>
 800cde0:	d103      	bne.n	800cdea <_strtoul_l.isra.0+0x96>
 800cde2:	9904      	ldr	r1, [sp, #16]
 800cde4:	0013      	movs	r3, r2
 800cde6:	42a1      	cmp	r1, r4
 800cde8:	db02      	blt.n	800cdf0 <_strtoul_l.isra.0+0x9c>
 800cdea:	4663      	mov	r3, ip
 800cdec:	4370      	muls	r0, r6
 800cdee:	1820      	adds	r0, r4, r0
 800cdf0:	782c      	ldrb	r4, [r5, #0]
 800cdf2:	3501      	adds	r5, #1
 800cdf4:	e7e7      	b.n	800cdc6 <_strtoul_l.isra.0+0x72>
 800cdf6:	2c2b      	cmp	r4, #43	; 0x2b
 800cdf8:	d001      	beq.n	800cdfe <_strtoul_l.isra.0+0xaa>
 800cdfa:	0017      	movs	r7, r2
 800cdfc:	e7c3      	b.n	800cd86 <_strtoul_l.isra.0+0x32>
 800cdfe:	782c      	ldrb	r4, [r5, #0]
 800ce00:	1c9d      	adds	r5, r3, #2
 800ce02:	e7fa      	b.n	800cdfa <_strtoul_l.isra.0+0xa6>
 800ce04:	0021      	movs	r1, r4
 800ce06:	3941      	subs	r1, #65	; 0x41
 800ce08:	2919      	cmp	r1, #25
 800ce0a:	d801      	bhi.n	800ce10 <_strtoul_l.isra.0+0xbc>
 800ce0c:	3c37      	subs	r4, #55	; 0x37
 800ce0e:	e7df      	b.n	800cdd0 <_strtoul_l.isra.0+0x7c>
 800ce10:	0021      	movs	r1, r4
 800ce12:	3961      	subs	r1, #97	; 0x61
 800ce14:	2919      	cmp	r1, #25
 800ce16:	d803      	bhi.n	800ce20 <_strtoul_l.isra.0+0xcc>
 800ce18:	3c57      	subs	r4, #87	; 0x57
 800ce1a:	e7d9      	b.n	800cdd0 <_strtoul_l.isra.0+0x7c>
 800ce1c:	0013      	movs	r3, r2
 800ce1e:	e7e7      	b.n	800cdf0 <_strtoul_l.isra.0+0x9c>
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	da09      	bge.n	800ce38 <_strtoul_l.isra.0+0xe4>
 800ce24:	2322      	movs	r3, #34	; 0x22
 800ce26:	2001      	movs	r0, #1
 800ce28:	9a05      	ldr	r2, [sp, #20]
 800ce2a:	4240      	negs	r0, r0
 800ce2c:	6013      	str	r3, [r2, #0]
 800ce2e:	9b02      	ldr	r3, [sp, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d109      	bne.n	800ce48 <_strtoul_l.isra.0+0xf4>
 800ce34:	b007      	add	sp, #28
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce38:	2f00      	cmp	r7, #0
 800ce3a:	d000      	beq.n	800ce3e <_strtoul_l.isra.0+0xea>
 800ce3c:	4240      	negs	r0, r0
 800ce3e:	9a02      	ldr	r2, [sp, #8]
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	d0f7      	beq.n	800ce34 <_strtoul_l.isra.0+0xe0>
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <_strtoul_l.isra.0+0xf8>
 800ce48:	1e6b      	subs	r3, r5, #1
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	9b02      	ldr	r3, [sp, #8]
 800ce4e:	9a01      	ldr	r2, [sp, #4]
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e7ef      	b.n	800ce34 <_strtoul_l.isra.0+0xe0>
 800ce54:	2430      	movs	r4, #48	; 0x30
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	d1a3      	bne.n	800cda2 <_strtoul_l.isra.0+0x4e>
 800ce5a:	3608      	adds	r6, #8
 800ce5c:	e7a1      	b.n	800cda2 <_strtoul_l.isra.0+0x4e>
 800ce5e:	2c30      	cmp	r4, #48	; 0x30
 800ce60:	d097      	beq.n	800cd92 <_strtoul_l.isra.0+0x3e>
 800ce62:	260a      	movs	r6, #10
 800ce64:	e79d      	b.n	800cda2 <_strtoul_l.isra.0+0x4e>
 800ce66:	46c0      	nop			; (mov r8, r8)
 800ce68:	0800dbb1 	.word	0x0800dbb1

0800ce6c <_strtoul_r>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	f7ff ff71 	bl	800cd54 <_strtoul_l.isra.0>
 800ce72:	bd10      	pop	{r4, pc}

0800ce74 <__submore>:
 800ce74:	000b      	movs	r3, r1
 800ce76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce78:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800ce7a:	3344      	adds	r3, #68	; 0x44
 800ce7c:	000c      	movs	r4, r1
 800ce7e:	429d      	cmp	r5, r3
 800ce80:	d11c      	bne.n	800cebc <__submore+0x48>
 800ce82:	2680      	movs	r6, #128	; 0x80
 800ce84:	00f6      	lsls	r6, r6, #3
 800ce86:	0031      	movs	r1, r6
 800ce88:	f7ff f9f4 	bl	800c274 <_malloc_r>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d102      	bne.n	800ce96 <__submore+0x22>
 800ce90:	2001      	movs	r0, #1
 800ce92:	4240      	negs	r0, r0
 800ce94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce96:	0023      	movs	r3, r4
 800ce98:	6360      	str	r0, [r4, #52]	; 0x34
 800ce9a:	63a6      	str	r6, [r4, #56]	; 0x38
 800ce9c:	3346      	adds	r3, #70	; 0x46
 800ce9e:	781a      	ldrb	r2, [r3, #0]
 800cea0:	4b10      	ldr	r3, [pc, #64]	; (800cee4 <__submore+0x70>)
 800cea2:	54c2      	strb	r2, [r0, r3]
 800cea4:	0023      	movs	r3, r4
 800cea6:	3345      	adds	r3, #69	; 0x45
 800cea8:	781a      	ldrb	r2, [r3, #0]
 800ceaa:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <__submore+0x74>)
 800ceac:	54c2      	strb	r2, [r0, r3]
 800ceae:	782a      	ldrb	r2, [r5, #0]
 800ceb0:	4b0e      	ldr	r3, [pc, #56]	; (800ceec <__submore+0x78>)
 800ceb2:	54c2      	strb	r2, [r0, r3]
 800ceb4:	18c0      	adds	r0, r0, r3
 800ceb6:	6020      	str	r0, [r4, #0]
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e7eb      	b.n	800ce94 <__submore+0x20>
 800cebc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800cebe:	0029      	movs	r1, r5
 800cec0:	0073      	lsls	r3, r6, #1
 800cec2:	001a      	movs	r2, r3
 800cec4:	9301      	str	r3, [sp, #4]
 800cec6:	f000 fa43 	bl	800d350 <_realloc_r>
 800ceca:	1e05      	subs	r5, r0, #0
 800cecc:	d0e0      	beq.n	800ce90 <__submore+0x1c>
 800cece:	1987      	adds	r7, r0, r6
 800ced0:	0001      	movs	r1, r0
 800ced2:	0032      	movs	r2, r6
 800ced4:	0038      	movs	r0, r7
 800ced6:	f7fe fca2 	bl	800b81e <memcpy>
 800ceda:	9b01      	ldr	r3, [sp, #4]
 800cedc:	6027      	str	r7, [r4, #0]
 800cede:	6365      	str	r5, [r4, #52]	; 0x34
 800cee0:	63a3      	str	r3, [r4, #56]	; 0x38
 800cee2:	e7e9      	b.n	800ceb8 <__submore+0x44>
 800cee4:	000003ff 	.word	0x000003ff
 800cee8:	000003fe 	.word	0x000003fe
 800ceec:	000003fd 	.word	0x000003fd

0800cef0 <__ascii_wctomb>:
 800cef0:	0003      	movs	r3, r0
 800cef2:	1e08      	subs	r0, r1, #0
 800cef4:	d005      	beq.n	800cf02 <__ascii_wctomb+0x12>
 800cef6:	2aff      	cmp	r2, #255	; 0xff
 800cef8:	d904      	bls.n	800cf04 <__ascii_wctomb+0x14>
 800cefa:	228a      	movs	r2, #138	; 0x8a
 800cefc:	2001      	movs	r0, #1
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	4240      	negs	r0, r0
 800cf02:	4770      	bx	lr
 800cf04:	2001      	movs	r0, #1
 800cf06:	700a      	strb	r2, [r1, #0]
 800cf08:	e7fb      	b.n	800cf02 <__ascii_wctomb+0x12>
	...

0800cf0c <__assert_func>:
 800cf0c:	b530      	push	{r4, r5, lr}
 800cf0e:	0014      	movs	r4, r2
 800cf10:	001a      	movs	r2, r3
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <__assert_func+0x2c>)
 800cf14:	0005      	movs	r5, r0
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	b085      	sub	sp, #20
 800cf1a:	68d8      	ldr	r0, [r3, #12]
 800cf1c:	4b07      	ldr	r3, [pc, #28]	; (800cf3c <__assert_func+0x30>)
 800cf1e:	2c00      	cmp	r4, #0
 800cf20:	d101      	bne.n	800cf26 <__assert_func+0x1a>
 800cf22:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <__assert_func+0x34>)
 800cf24:	001c      	movs	r4, r3
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	9100      	str	r1, [sp, #0]
 800cf2a:	002b      	movs	r3, r5
 800cf2c:	4905      	ldr	r1, [pc, #20]	; (800cf44 <__assert_func+0x38>)
 800cf2e:	9402      	str	r4, [sp, #8]
 800cf30:	f000 f9b8 	bl	800d2a4 <fiprintf>
 800cf34:	f000 fc62 	bl	800d7fc <abort>
 800cf38:	2000000c 	.word	0x2000000c
 800cf3c:	0800df50 	.word	0x0800df50
 800cf40:	0800df8b 	.word	0x0800df8b
 800cf44:	0800df5d 	.word	0x0800df5d

0800cf48 <__sflush_r>:
 800cf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf4a:	898b      	ldrh	r3, [r1, #12]
 800cf4c:	0005      	movs	r5, r0
 800cf4e:	000c      	movs	r4, r1
 800cf50:	071a      	lsls	r2, r3, #28
 800cf52:	d45f      	bmi.n	800d014 <__sflush_r+0xcc>
 800cf54:	684a      	ldr	r2, [r1, #4]
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	dc04      	bgt.n	800cf64 <__sflush_r+0x1c>
 800cf5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	dc01      	bgt.n	800cf64 <__sflush_r+0x1c>
 800cf60:	2000      	movs	r0, #0
 800cf62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cf66:	2f00      	cmp	r7, #0
 800cf68:	d0fa      	beq.n	800cf60 <__sflush_r+0x18>
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2180      	movs	r1, #128	; 0x80
 800cf6e:	682e      	ldr	r6, [r5, #0]
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	001a      	movs	r2, r3
 800cf74:	0149      	lsls	r1, r1, #5
 800cf76:	400a      	ands	r2, r1
 800cf78:	420b      	tst	r3, r1
 800cf7a:	d034      	beq.n	800cfe6 <__sflush_r+0x9e>
 800cf7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf7e:	89a3      	ldrh	r3, [r4, #12]
 800cf80:	075b      	lsls	r3, r3, #29
 800cf82:	d506      	bpl.n	800cf92 <__sflush_r+0x4a>
 800cf84:	6863      	ldr	r3, [r4, #4]
 800cf86:	1ac0      	subs	r0, r0, r3
 800cf88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <__sflush_r+0x4a>
 800cf8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf90:	1ac0      	subs	r0, r0, r3
 800cf92:	0002      	movs	r2, r0
 800cf94:	6a21      	ldr	r1, [r4, #32]
 800cf96:	2300      	movs	r3, #0
 800cf98:	0028      	movs	r0, r5
 800cf9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cf9c:	47b8      	blx	r7
 800cf9e:	89a1      	ldrh	r1, [r4, #12]
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d106      	bne.n	800cfb2 <__sflush_r+0x6a>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	2b1d      	cmp	r3, #29
 800cfa8:	d831      	bhi.n	800d00e <__sflush_r+0xc6>
 800cfaa:	4a2c      	ldr	r2, [pc, #176]	; (800d05c <__sflush_r+0x114>)
 800cfac:	40da      	lsrs	r2, r3
 800cfae:	07d3      	lsls	r3, r2, #31
 800cfb0:	d52d      	bpl.n	800d00e <__sflush_r+0xc6>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	6063      	str	r3, [r4, #4]
 800cfb6:	6923      	ldr	r3, [r4, #16]
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	04cb      	lsls	r3, r1, #19
 800cfbc:	d505      	bpl.n	800cfca <__sflush_r+0x82>
 800cfbe:	1c43      	adds	r3, r0, #1
 800cfc0:	d102      	bne.n	800cfc8 <__sflush_r+0x80>
 800cfc2:	682b      	ldr	r3, [r5, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d100      	bne.n	800cfca <__sflush_r+0x82>
 800cfc8:	6560      	str	r0, [r4, #84]	; 0x54
 800cfca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfcc:	602e      	str	r6, [r5, #0]
 800cfce:	2900      	cmp	r1, #0
 800cfd0:	d0c6      	beq.n	800cf60 <__sflush_r+0x18>
 800cfd2:	0023      	movs	r3, r4
 800cfd4:	3344      	adds	r3, #68	; 0x44
 800cfd6:	4299      	cmp	r1, r3
 800cfd8:	d002      	beq.n	800cfe0 <__sflush_r+0x98>
 800cfda:	0028      	movs	r0, r5
 800cfdc:	f7ff f900 	bl	800c1e0 <_free_r>
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	6360      	str	r0, [r4, #52]	; 0x34
 800cfe4:	e7bd      	b.n	800cf62 <__sflush_r+0x1a>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	0028      	movs	r0, r5
 800cfea:	6a21      	ldr	r1, [r4, #32]
 800cfec:	47b8      	blx	r7
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	d1c5      	bne.n	800cf7e <__sflush_r+0x36>
 800cff2:	682b      	ldr	r3, [r5, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d0c2      	beq.n	800cf7e <__sflush_r+0x36>
 800cff8:	2b1d      	cmp	r3, #29
 800cffa:	d001      	beq.n	800d000 <__sflush_r+0xb8>
 800cffc:	2b16      	cmp	r3, #22
 800cffe:	d101      	bne.n	800d004 <__sflush_r+0xbc>
 800d000:	602e      	str	r6, [r5, #0]
 800d002:	e7ad      	b.n	800cf60 <__sflush_r+0x18>
 800d004:	2340      	movs	r3, #64	; 0x40
 800d006:	89a2      	ldrh	r2, [r4, #12]
 800d008:	4313      	orrs	r3, r2
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	e7a9      	b.n	800cf62 <__sflush_r+0x1a>
 800d00e:	2340      	movs	r3, #64	; 0x40
 800d010:	430b      	orrs	r3, r1
 800d012:	e7fa      	b.n	800d00a <__sflush_r+0xc2>
 800d014:	690f      	ldr	r7, [r1, #16]
 800d016:	2f00      	cmp	r7, #0
 800d018:	d0a2      	beq.n	800cf60 <__sflush_r+0x18>
 800d01a:	680a      	ldr	r2, [r1, #0]
 800d01c:	600f      	str	r7, [r1, #0]
 800d01e:	1bd2      	subs	r2, r2, r7
 800d020:	9201      	str	r2, [sp, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	079b      	lsls	r3, r3, #30
 800d026:	d100      	bne.n	800d02a <__sflush_r+0xe2>
 800d028:	694a      	ldr	r2, [r1, #20]
 800d02a:	60a2      	str	r2, [r4, #8]
 800d02c:	9b01      	ldr	r3, [sp, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	dc00      	bgt.n	800d034 <__sflush_r+0xec>
 800d032:	e795      	b.n	800cf60 <__sflush_r+0x18>
 800d034:	003a      	movs	r2, r7
 800d036:	0028      	movs	r0, r5
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	6a21      	ldr	r1, [r4, #32]
 800d03c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d03e:	47b0      	blx	r6
 800d040:	2800      	cmp	r0, #0
 800d042:	dc06      	bgt.n	800d052 <__sflush_r+0x10a>
 800d044:	2340      	movs	r3, #64	; 0x40
 800d046:	2001      	movs	r0, #1
 800d048:	89a2      	ldrh	r2, [r4, #12]
 800d04a:	4240      	negs	r0, r0
 800d04c:	4313      	orrs	r3, r2
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	e787      	b.n	800cf62 <__sflush_r+0x1a>
 800d052:	9b01      	ldr	r3, [sp, #4]
 800d054:	183f      	adds	r7, r7, r0
 800d056:	1a1b      	subs	r3, r3, r0
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	e7e7      	b.n	800d02c <__sflush_r+0xe4>
 800d05c:	20400001 	.word	0x20400001

0800d060 <_fflush_r>:
 800d060:	690b      	ldr	r3, [r1, #16]
 800d062:	b570      	push	{r4, r5, r6, lr}
 800d064:	0005      	movs	r5, r0
 800d066:	000c      	movs	r4, r1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <_fflush_r+0x12>
 800d06c:	2500      	movs	r5, #0
 800d06e:	0028      	movs	r0, r5
 800d070:	bd70      	pop	{r4, r5, r6, pc}
 800d072:	2800      	cmp	r0, #0
 800d074:	d004      	beq.n	800d080 <_fflush_r+0x20>
 800d076:	6983      	ldr	r3, [r0, #24]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <_fflush_r+0x20>
 800d07c:	f000 f892 	bl	800d1a4 <__sinit>
 800d080:	4b14      	ldr	r3, [pc, #80]	; (800d0d4 <_fflush_r+0x74>)
 800d082:	429c      	cmp	r4, r3
 800d084:	d11b      	bne.n	800d0be <_fflush_r+0x5e>
 800d086:	686c      	ldr	r4, [r5, #4]
 800d088:	220c      	movs	r2, #12
 800d08a:	5ea3      	ldrsh	r3, [r4, r2]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0ed      	beq.n	800d06c <_fflush_r+0xc>
 800d090:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d092:	07d2      	lsls	r2, r2, #31
 800d094:	d404      	bmi.n	800d0a0 <_fflush_r+0x40>
 800d096:	059b      	lsls	r3, r3, #22
 800d098:	d402      	bmi.n	800d0a0 <_fflush_r+0x40>
 800d09a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09c:	f000 f933 	bl	800d306 <__retarget_lock_acquire_recursive>
 800d0a0:	0028      	movs	r0, r5
 800d0a2:	0021      	movs	r1, r4
 800d0a4:	f7ff ff50 	bl	800cf48 <__sflush_r>
 800d0a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0aa:	0005      	movs	r5, r0
 800d0ac:	07db      	lsls	r3, r3, #31
 800d0ae:	d4de      	bmi.n	800d06e <_fflush_r+0xe>
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	059b      	lsls	r3, r3, #22
 800d0b4:	d4db      	bmi.n	800d06e <_fflush_r+0xe>
 800d0b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0b8:	f000 f926 	bl	800d308 <__retarget_lock_release_recursive>
 800d0bc:	e7d7      	b.n	800d06e <_fflush_r+0xe>
 800d0be:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <_fflush_r+0x78>)
 800d0c0:	429c      	cmp	r4, r3
 800d0c2:	d101      	bne.n	800d0c8 <_fflush_r+0x68>
 800d0c4:	68ac      	ldr	r4, [r5, #8]
 800d0c6:	e7df      	b.n	800d088 <_fflush_r+0x28>
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <_fflush_r+0x7c>)
 800d0ca:	429c      	cmp	r4, r3
 800d0cc:	d1dc      	bne.n	800d088 <_fflush_r+0x28>
 800d0ce:	68ec      	ldr	r4, [r5, #12]
 800d0d0:	e7da      	b.n	800d088 <_fflush_r+0x28>
 800d0d2:	46c0      	nop			; (mov r8, r8)
 800d0d4:	0800dfac 	.word	0x0800dfac
 800d0d8:	0800dfcc 	.word	0x0800dfcc
 800d0dc:	0800df8c 	.word	0x0800df8c

0800d0e0 <std>:
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	b510      	push	{r4, lr}
 800d0e4:	0004      	movs	r4, r0
 800d0e6:	6003      	str	r3, [r0, #0]
 800d0e8:	6043      	str	r3, [r0, #4]
 800d0ea:	6083      	str	r3, [r0, #8]
 800d0ec:	8181      	strh	r1, [r0, #12]
 800d0ee:	6643      	str	r3, [r0, #100]	; 0x64
 800d0f0:	0019      	movs	r1, r3
 800d0f2:	81c2      	strh	r2, [r0, #14]
 800d0f4:	6103      	str	r3, [r0, #16]
 800d0f6:	6143      	str	r3, [r0, #20]
 800d0f8:	6183      	str	r3, [r0, #24]
 800d0fa:	2208      	movs	r2, #8
 800d0fc:	305c      	adds	r0, #92	; 0x5c
 800d0fe:	f7fb fb0b 	bl	8008718 <memset>
 800d102:	4b05      	ldr	r3, [pc, #20]	; (800d118 <std+0x38>)
 800d104:	6263      	str	r3, [r4, #36]	; 0x24
 800d106:	4b05      	ldr	r3, [pc, #20]	; (800d11c <std+0x3c>)
 800d108:	6224      	str	r4, [r4, #32]
 800d10a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d10c:	4b04      	ldr	r3, [pc, #16]	; (800d120 <std+0x40>)
 800d10e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d110:	4b04      	ldr	r3, [pc, #16]	; (800d124 <std+0x44>)
 800d112:	6323      	str	r3, [r4, #48]	; 0x30
 800d114:	bd10      	pop	{r4, pc}
 800d116:	46c0      	nop			; (mov r8, r8)
 800d118:	080094c5 	.word	0x080094c5
 800d11c:	080094f1 	.word	0x080094f1
 800d120:	08009529 	.word	0x08009529
 800d124:	08009555 	.word	0x08009555

0800d128 <_cleanup_r>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	4902      	ldr	r1, [pc, #8]	; (800d134 <_cleanup_r+0xc>)
 800d12c:	f000 f8ca 	bl	800d2c4 <_fwalk_reent>
 800d130:	bd10      	pop	{r4, pc}
 800d132:	46c0      	nop			; (mov r8, r8)
 800d134:	0800d061 	.word	0x0800d061

0800d138 <__sfmoreglue>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	2568      	movs	r5, #104	; 0x68
 800d13c:	1e4a      	subs	r2, r1, #1
 800d13e:	4355      	muls	r5, r2
 800d140:	000e      	movs	r6, r1
 800d142:	0029      	movs	r1, r5
 800d144:	3174      	adds	r1, #116	; 0x74
 800d146:	f7ff f895 	bl	800c274 <_malloc_r>
 800d14a:	1e04      	subs	r4, r0, #0
 800d14c:	d008      	beq.n	800d160 <__sfmoreglue+0x28>
 800d14e:	2100      	movs	r1, #0
 800d150:	002a      	movs	r2, r5
 800d152:	6001      	str	r1, [r0, #0]
 800d154:	6046      	str	r6, [r0, #4]
 800d156:	300c      	adds	r0, #12
 800d158:	60a0      	str	r0, [r4, #8]
 800d15a:	3268      	adds	r2, #104	; 0x68
 800d15c:	f7fb fadc 	bl	8008718 <memset>
 800d160:	0020      	movs	r0, r4
 800d162:	bd70      	pop	{r4, r5, r6, pc}

0800d164 <__sfp_lock_acquire>:
 800d164:	b510      	push	{r4, lr}
 800d166:	4802      	ldr	r0, [pc, #8]	; (800d170 <__sfp_lock_acquire+0xc>)
 800d168:	f000 f8cd 	bl	800d306 <__retarget_lock_acquire_recursive>
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	200005bc 	.word	0x200005bc

0800d174 <__sfp_lock_release>:
 800d174:	b510      	push	{r4, lr}
 800d176:	4802      	ldr	r0, [pc, #8]	; (800d180 <__sfp_lock_release+0xc>)
 800d178:	f000 f8c6 	bl	800d308 <__retarget_lock_release_recursive>
 800d17c:	bd10      	pop	{r4, pc}
 800d17e:	46c0      	nop			; (mov r8, r8)
 800d180:	200005bc 	.word	0x200005bc

0800d184 <__sinit_lock_acquire>:
 800d184:	b510      	push	{r4, lr}
 800d186:	4802      	ldr	r0, [pc, #8]	; (800d190 <__sinit_lock_acquire+0xc>)
 800d188:	f000 f8bd 	bl	800d306 <__retarget_lock_acquire_recursive>
 800d18c:	bd10      	pop	{r4, pc}
 800d18e:	46c0      	nop			; (mov r8, r8)
 800d190:	200005b7 	.word	0x200005b7

0800d194 <__sinit_lock_release>:
 800d194:	b510      	push	{r4, lr}
 800d196:	4802      	ldr	r0, [pc, #8]	; (800d1a0 <__sinit_lock_release+0xc>)
 800d198:	f000 f8b6 	bl	800d308 <__retarget_lock_release_recursive>
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	46c0      	nop			; (mov r8, r8)
 800d1a0:	200005b7 	.word	0x200005b7

0800d1a4 <__sinit>:
 800d1a4:	b513      	push	{r0, r1, r4, lr}
 800d1a6:	0004      	movs	r4, r0
 800d1a8:	f7ff ffec 	bl	800d184 <__sinit_lock_acquire>
 800d1ac:	69a3      	ldr	r3, [r4, #24]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <__sinit+0x14>
 800d1b2:	f7ff ffef 	bl	800d194 <__sinit_lock_release>
 800d1b6:	bd13      	pop	{r0, r1, r4, pc}
 800d1b8:	64a3      	str	r3, [r4, #72]	; 0x48
 800d1ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d1bc:	6523      	str	r3, [r4, #80]	; 0x50
 800d1be:	4b13      	ldr	r3, [pc, #76]	; (800d20c <__sinit+0x68>)
 800d1c0:	4a13      	ldr	r2, [pc, #76]	; (800d210 <__sinit+0x6c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	42a3      	cmp	r3, r4
 800d1ca:	d101      	bne.n	800d1d0 <__sinit+0x2c>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	61a3      	str	r3, [r4, #24]
 800d1d0:	0020      	movs	r0, r4
 800d1d2:	f000 f81f 	bl	800d214 <__sfp>
 800d1d6:	6060      	str	r0, [r4, #4]
 800d1d8:	0020      	movs	r0, r4
 800d1da:	f000 f81b 	bl	800d214 <__sfp>
 800d1de:	60a0      	str	r0, [r4, #8]
 800d1e0:	0020      	movs	r0, r4
 800d1e2:	f000 f817 	bl	800d214 <__sfp>
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	2104      	movs	r1, #4
 800d1ea:	60e0      	str	r0, [r4, #12]
 800d1ec:	6860      	ldr	r0, [r4, #4]
 800d1ee:	f7ff ff77 	bl	800d0e0 <std>
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	2109      	movs	r1, #9
 800d1f6:	68a0      	ldr	r0, [r4, #8]
 800d1f8:	f7ff ff72 	bl	800d0e0 <std>
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	2112      	movs	r1, #18
 800d200:	68e0      	ldr	r0, [r4, #12]
 800d202:	f7ff ff6d 	bl	800d0e0 <std>
 800d206:	2301      	movs	r3, #1
 800d208:	61a3      	str	r3, [r4, #24]
 800d20a:	e7d2      	b.n	800d1b2 <__sinit+0xe>
 800d20c:	0800db24 	.word	0x0800db24
 800d210:	0800d129 	.word	0x0800d129

0800d214 <__sfp>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	0007      	movs	r7, r0
 800d218:	f7ff ffa4 	bl	800d164 <__sfp_lock_acquire>
 800d21c:	4b1f      	ldr	r3, [pc, #124]	; (800d29c <__sfp+0x88>)
 800d21e:	681e      	ldr	r6, [r3, #0]
 800d220:	69b3      	ldr	r3, [r6, #24]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d102      	bne.n	800d22c <__sfp+0x18>
 800d226:	0030      	movs	r0, r6
 800d228:	f7ff ffbc 	bl	800d1a4 <__sinit>
 800d22c:	3648      	adds	r6, #72	; 0x48
 800d22e:	68b4      	ldr	r4, [r6, #8]
 800d230:	6873      	ldr	r3, [r6, #4]
 800d232:	3b01      	subs	r3, #1
 800d234:	d504      	bpl.n	800d240 <__sfp+0x2c>
 800d236:	6833      	ldr	r3, [r6, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d022      	beq.n	800d282 <__sfp+0x6e>
 800d23c:	6836      	ldr	r6, [r6, #0]
 800d23e:	e7f6      	b.n	800d22e <__sfp+0x1a>
 800d240:	220c      	movs	r2, #12
 800d242:	5ea5      	ldrsh	r5, [r4, r2]
 800d244:	2d00      	cmp	r5, #0
 800d246:	d11a      	bne.n	800d27e <__sfp+0x6a>
 800d248:	0020      	movs	r0, r4
 800d24a:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <__sfp+0x8c>)
 800d24c:	3058      	adds	r0, #88	; 0x58
 800d24e:	60e3      	str	r3, [r4, #12]
 800d250:	6665      	str	r5, [r4, #100]	; 0x64
 800d252:	f000 f857 	bl	800d304 <__retarget_lock_init_recursive>
 800d256:	f7ff ff8d 	bl	800d174 <__sfp_lock_release>
 800d25a:	0020      	movs	r0, r4
 800d25c:	2208      	movs	r2, #8
 800d25e:	0029      	movs	r1, r5
 800d260:	6025      	str	r5, [r4, #0]
 800d262:	60a5      	str	r5, [r4, #8]
 800d264:	6065      	str	r5, [r4, #4]
 800d266:	6125      	str	r5, [r4, #16]
 800d268:	6165      	str	r5, [r4, #20]
 800d26a:	61a5      	str	r5, [r4, #24]
 800d26c:	305c      	adds	r0, #92	; 0x5c
 800d26e:	f7fb fa53 	bl	8008718 <memset>
 800d272:	6365      	str	r5, [r4, #52]	; 0x34
 800d274:	63a5      	str	r5, [r4, #56]	; 0x38
 800d276:	64a5      	str	r5, [r4, #72]	; 0x48
 800d278:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d27a:	0020      	movs	r0, r4
 800d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d27e:	3468      	adds	r4, #104	; 0x68
 800d280:	e7d7      	b.n	800d232 <__sfp+0x1e>
 800d282:	2104      	movs	r1, #4
 800d284:	0038      	movs	r0, r7
 800d286:	f7ff ff57 	bl	800d138 <__sfmoreglue>
 800d28a:	1e04      	subs	r4, r0, #0
 800d28c:	6030      	str	r0, [r6, #0]
 800d28e:	d1d5      	bne.n	800d23c <__sfp+0x28>
 800d290:	f7ff ff70 	bl	800d174 <__sfp_lock_release>
 800d294:	230c      	movs	r3, #12
 800d296:	603b      	str	r3, [r7, #0]
 800d298:	e7ef      	b.n	800d27a <__sfp+0x66>
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	0800db24 	.word	0x0800db24
 800d2a0:	ffff0001 	.word	0xffff0001

0800d2a4 <fiprintf>:
 800d2a4:	b40e      	push	{r1, r2, r3}
 800d2a6:	b503      	push	{r0, r1, lr}
 800d2a8:	0001      	movs	r1, r0
 800d2aa:	ab03      	add	r3, sp, #12
 800d2ac:	4804      	ldr	r0, [pc, #16]	; (800d2c0 <fiprintf+0x1c>)
 800d2ae:	cb04      	ldmia	r3!, {r2}
 800d2b0:	6800      	ldr	r0, [r0, #0]
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	f000 f89a 	bl	800d3ec <_vfiprintf_r>
 800d2b8:	b002      	add	sp, #8
 800d2ba:	bc08      	pop	{r3}
 800d2bc:	b003      	add	sp, #12
 800d2be:	4718      	bx	r3
 800d2c0:	2000000c 	.word	0x2000000c

0800d2c4 <_fwalk_reent>:
 800d2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2c6:	0004      	movs	r4, r0
 800d2c8:	0006      	movs	r6, r0
 800d2ca:	2700      	movs	r7, #0
 800d2cc:	9101      	str	r1, [sp, #4]
 800d2ce:	3448      	adds	r4, #72	; 0x48
 800d2d0:	6863      	ldr	r3, [r4, #4]
 800d2d2:	68a5      	ldr	r5, [r4, #8]
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	9b00      	ldr	r3, [sp, #0]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	d504      	bpl.n	800d2e8 <_fwalk_reent+0x24>
 800d2de:	6824      	ldr	r4, [r4, #0]
 800d2e0:	2c00      	cmp	r4, #0
 800d2e2:	d1f5      	bne.n	800d2d0 <_fwalk_reent+0xc>
 800d2e4:	0038      	movs	r0, r7
 800d2e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2e8:	89ab      	ldrh	r3, [r5, #12]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d908      	bls.n	800d300 <_fwalk_reent+0x3c>
 800d2ee:	220e      	movs	r2, #14
 800d2f0:	5eab      	ldrsh	r3, [r5, r2]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	d004      	beq.n	800d300 <_fwalk_reent+0x3c>
 800d2f6:	0029      	movs	r1, r5
 800d2f8:	0030      	movs	r0, r6
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	4798      	blx	r3
 800d2fe:	4307      	orrs	r7, r0
 800d300:	3568      	adds	r5, #104	; 0x68
 800d302:	e7e8      	b.n	800d2d6 <_fwalk_reent+0x12>

0800d304 <__retarget_lock_init_recursive>:
 800d304:	4770      	bx	lr

0800d306 <__retarget_lock_acquire_recursive>:
 800d306:	4770      	bx	lr

0800d308 <__retarget_lock_release_recursive>:
 800d308:	4770      	bx	lr

0800d30a <memmove>:
 800d30a:	b510      	push	{r4, lr}
 800d30c:	4288      	cmp	r0, r1
 800d30e:	d902      	bls.n	800d316 <memmove+0xc>
 800d310:	188b      	adds	r3, r1, r2
 800d312:	4298      	cmp	r0, r3
 800d314:	d303      	bcc.n	800d31e <memmove+0x14>
 800d316:	2300      	movs	r3, #0
 800d318:	e007      	b.n	800d32a <memmove+0x20>
 800d31a:	5c8b      	ldrb	r3, [r1, r2]
 800d31c:	5483      	strb	r3, [r0, r2]
 800d31e:	3a01      	subs	r2, #1
 800d320:	d2fb      	bcs.n	800d31a <memmove+0x10>
 800d322:	bd10      	pop	{r4, pc}
 800d324:	5ccc      	ldrb	r4, [r1, r3]
 800d326:	54c4      	strb	r4, [r0, r3]
 800d328:	3301      	adds	r3, #1
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d1fa      	bne.n	800d324 <memmove+0x1a>
 800d32e:	e7f8      	b.n	800d322 <memmove+0x18>

0800d330 <__malloc_lock>:
 800d330:	b510      	push	{r4, lr}
 800d332:	4802      	ldr	r0, [pc, #8]	; (800d33c <__malloc_lock+0xc>)
 800d334:	f7ff ffe7 	bl	800d306 <__retarget_lock_acquire_recursive>
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	46c0      	nop			; (mov r8, r8)
 800d33c:	200005b8 	.word	0x200005b8

0800d340 <__malloc_unlock>:
 800d340:	b510      	push	{r4, lr}
 800d342:	4802      	ldr	r0, [pc, #8]	; (800d34c <__malloc_unlock+0xc>)
 800d344:	f7ff ffe0 	bl	800d308 <__retarget_lock_release_recursive>
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	200005b8 	.word	0x200005b8

0800d350 <_realloc_r>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	0007      	movs	r7, r0
 800d354:	000d      	movs	r5, r1
 800d356:	0016      	movs	r6, r2
 800d358:	2900      	cmp	r1, #0
 800d35a:	d105      	bne.n	800d368 <_realloc_r+0x18>
 800d35c:	0011      	movs	r1, r2
 800d35e:	f7fe ff89 	bl	800c274 <_malloc_r>
 800d362:	0004      	movs	r4, r0
 800d364:	0020      	movs	r0, r4
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d368:	2a00      	cmp	r2, #0
 800d36a:	d103      	bne.n	800d374 <_realloc_r+0x24>
 800d36c:	f7fe ff38 	bl	800c1e0 <_free_r>
 800d370:	0034      	movs	r4, r6
 800d372:	e7f7      	b.n	800d364 <_realloc_r+0x14>
 800d374:	f000 fab6 	bl	800d8e4 <_malloc_usable_size_r>
 800d378:	002c      	movs	r4, r5
 800d37a:	42b0      	cmp	r0, r6
 800d37c:	d2f2      	bcs.n	800d364 <_realloc_r+0x14>
 800d37e:	0031      	movs	r1, r6
 800d380:	0038      	movs	r0, r7
 800d382:	f7fe ff77 	bl	800c274 <_malloc_r>
 800d386:	1e04      	subs	r4, r0, #0
 800d388:	d0ec      	beq.n	800d364 <_realloc_r+0x14>
 800d38a:	0029      	movs	r1, r5
 800d38c:	0032      	movs	r2, r6
 800d38e:	f7fe fa46 	bl	800b81e <memcpy>
 800d392:	0029      	movs	r1, r5
 800d394:	0038      	movs	r0, r7
 800d396:	f7fe ff23 	bl	800c1e0 <_free_r>
 800d39a:	e7e3      	b.n	800d364 <_realloc_r+0x14>

0800d39c <__sfputc_r>:
 800d39c:	6893      	ldr	r3, [r2, #8]
 800d39e:	b510      	push	{r4, lr}
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	6093      	str	r3, [r2, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	da04      	bge.n	800d3b2 <__sfputc_r+0x16>
 800d3a8:	6994      	ldr	r4, [r2, #24]
 800d3aa:	42a3      	cmp	r3, r4
 800d3ac:	db07      	blt.n	800d3be <__sfputc_r+0x22>
 800d3ae:	290a      	cmp	r1, #10
 800d3b0:	d005      	beq.n	800d3be <__sfputc_r+0x22>
 800d3b2:	6813      	ldr	r3, [r2, #0]
 800d3b4:	1c58      	adds	r0, r3, #1
 800d3b6:	6010      	str	r0, [r2, #0]
 800d3b8:	7019      	strb	r1, [r3, #0]
 800d3ba:	0008      	movs	r0, r1
 800d3bc:	bd10      	pop	{r4, pc}
 800d3be:	f000 f94f 	bl	800d660 <__swbuf_r>
 800d3c2:	0001      	movs	r1, r0
 800d3c4:	e7f9      	b.n	800d3ba <__sfputc_r+0x1e>

0800d3c6 <__sfputs_r>:
 800d3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c8:	0006      	movs	r6, r0
 800d3ca:	000f      	movs	r7, r1
 800d3cc:	0014      	movs	r4, r2
 800d3ce:	18d5      	adds	r5, r2, r3
 800d3d0:	42ac      	cmp	r4, r5
 800d3d2:	d101      	bne.n	800d3d8 <__sfputs_r+0x12>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	e007      	b.n	800d3e8 <__sfputs_r+0x22>
 800d3d8:	7821      	ldrb	r1, [r4, #0]
 800d3da:	003a      	movs	r2, r7
 800d3dc:	0030      	movs	r0, r6
 800d3de:	f7ff ffdd 	bl	800d39c <__sfputc_r>
 800d3e2:	3401      	adds	r4, #1
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d1f3      	bne.n	800d3d0 <__sfputs_r+0xa>
 800d3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3ec <_vfiprintf_r>:
 800d3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ee:	b0a1      	sub	sp, #132	; 0x84
 800d3f0:	0006      	movs	r6, r0
 800d3f2:	000c      	movs	r4, r1
 800d3f4:	001f      	movs	r7, r3
 800d3f6:	9203      	str	r2, [sp, #12]
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d004      	beq.n	800d406 <_vfiprintf_r+0x1a>
 800d3fc:	6983      	ldr	r3, [r0, #24]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d101      	bne.n	800d406 <_vfiprintf_r+0x1a>
 800d402:	f7ff fecf 	bl	800d1a4 <__sinit>
 800d406:	4b8e      	ldr	r3, [pc, #568]	; (800d640 <_vfiprintf_r+0x254>)
 800d408:	429c      	cmp	r4, r3
 800d40a:	d11c      	bne.n	800d446 <_vfiprintf_r+0x5a>
 800d40c:	6874      	ldr	r4, [r6, #4]
 800d40e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d410:	07db      	lsls	r3, r3, #31
 800d412:	d405      	bmi.n	800d420 <_vfiprintf_r+0x34>
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	059b      	lsls	r3, r3, #22
 800d418:	d402      	bmi.n	800d420 <_vfiprintf_r+0x34>
 800d41a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d41c:	f7ff ff73 	bl	800d306 <__retarget_lock_acquire_recursive>
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	071b      	lsls	r3, r3, #28
 800d424:	d502      	bpl.n	800d42c <_vfiprintf_r+0x40>
 800d426:	6923      	ldr	r3, [r4, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d11d      	bne.n	800d468 <_vfiprintf_r+0x7c>
 800d42c:	0021      	movs	r1, r4
 800d42e:	0030      	movs	r0, r6
 800d430:	f000 f96c 	bl	800d70c <__swsetup_r>
 800d434:	2800      	cmp	r0, #0
 800d436:	d017      	beq.n	800d468 <_vfiprintf_r+0x7c>
 800d438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d43a:	07db      	lsls	r3, r3, #31
 800d43c:	d50d      	bpl.n	800d45a <_vfiprintf_r+0x6e>
 800d43e:	2001      	movs	r0, #1
 800d440:	4240      	negs	r0, r0
 800d442:	b021      	add	sp, #132	; 0x84
 800d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d446:	4b7f      	ldr	r3, [pc, #508]	; (800d644 <_vfiprintf_r+0x258>)
 800d448:	429c      	cmp	r4, r3
 800d44a:	d101      	bne.n	800d450 <_vfiprintf_r+0x64>
 800d44c:	68b4      	ldr	r4, [r6, #8]
 800d44e:	e7de      	b.n	800d40e <_vfiprintf_r+0x22>
 800d450:	4b7d      	ldr	r3, [pc, #500]	; (800d648 <_vfiprintf_r+0x25c>)
 800d452:	429c      	cmp	r4, r3
 800d454:	d1db      	bne.n	800d40e <_vfiprintf_r+0x22>
 800d456:	68f4      	ldr	r4, [r6, #12]
 800d458:	e7d9      	b.n	800d40e <_vfiprintf_r+0x22>
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	059b      	lsls	r3, r3, #22
 800d45e:	d4ee      	bmi.n	800d43e <_vfiprintf_r+0x52>
 800d460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d462:	f7ff ff51 	bl	800d308 <__retarget_lock_release_recursive>
 800d466:	e7ea      	b.n	800d43e <_vfiprintf_r+0x52>
 800d468:	2300      	movs	r3, #0
 800d46a:	ad08      	add	r5, sp, #32
 800d46c:	616b      	str	r3, [r5, #20]
 800d46e:	3320      	adds	r3, #32
 800d470:	766b      	strb	r3, [r5, #25]
 800d472:	3310      	adds	r3, #16
 800d474:	76ab      	strb	r3, [r5, #26]
 800d476:	9707      	str	r7, [sp, #28]
 800d478:	9f03      	ldr	r7, [sp, #12]
 800d47a:	783b      	ldrb	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <_vfiprintf_r+0x98>
 800d480:	2b25      	cmp	r3, #37	; 0x25
 800d482:	d14e      	bne.n	800d522 <_vfiprintf_r+0x136>
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	1afb      	subs	r3, r7, r3
 800d488:	9305      	str	r3, [sp, #20]
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	429f      	cmp	r7, r3
 800d48e:	d00d      	beq.n	800d4ac <_vfiprintf_r+0xc0>
 800d490:	9b05      	ldr	r3, [sp, #20]
 800d492:	0021      	movs	r1, r4
 800d494:	0030      	movs	r0, r6
 800d496:	9a03      	ldr	r2, [sp, #12]
 800d498:	f7ff ff95 	bl	800d3c6 <__sfputs_r>
 800d49c:	1c43      	adds	r3, r0, #1
 800d49e:	d100      	bne.n	800d4a2 <_vfiprintf_r+0xb6>
 800d4a0:	e0b5      	b.n	800d60e <_vfiprintf_r+0x222>
 800d4a2:	696a      	ldr	r2, [r5, #20]
 800d4a4:	9b05      	ldr	r3, [sp, #20]
 800d4a6:	4694      	mov	ip, r2
 800d4a8:	4463      	add	r3, ip
 800d4aa:	616b      	str	r3, [r5, #20]
 800d4ac:	783b      	ldrb	r3, [r7, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d100      	bne.n	800d4b4 <_vfiprintf_r+0xc8>
 800d4b2:	e0ac      	b.n	800d60e <_vfiprintf_r+0x222>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	1c7b      	adds	r3, r7, #1
 800d4b8:	9303      	str	r3, [sp, #12]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	4252      	negs	r2, r2
 800d4be:	606a      	str	r2, [r5, #4]
 800d4c0:	a904      	add	r1, sp, #16
 800d4c2:	3254      	adds	r2, #84	; 0x54
 800d4c4:	1852      	adds	r2, r2, r1
 800d4c6:	602b      	str	r3, [r5, #0]
 800d4c8:	60eb      	str	r3, [r5, #12]
 800d4ca:	60ab      	str	r3, [r5, #8]
 800d4cc:	7013      	strb	r3, [r2, #0]
 800d4ce:	65ab      	str	r3, [r5, #88]	; 0x58
 800d4d0:	9b03      	ldr	r3, [sp, #12]
 800d4d2:	2205      	movs	r2, #5
 800d4d4:	7819      	ldrb	r1, [r3, #0]
 800d4d6:	485d      	ldr	r0, [pc, #372]	; (800d64c <_vfiprintf_r+0x260>)
 800d4d8:	f7fe f996 	bl	800b808 <memchr>
 800d4dc:	9b03      	ldr	r3, [sp, #12]
 800d4de:	1c5f      	adds	r7, r3, #1
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d120      	bne.n	800d526 <_vfiprintf_r+0x13a>
 800d4e4:	682a      	ldr	r2, [r5, #0]
 800d4e6:	06d3      	lsls	r3, r2, #27
 800d4e8:	d504      	bpl.n	800d4f4 <_vfiprintf_r+0x108>
 800d4ea:	2353      	movs	r3, #83	; 0x53
 800d4ec:	a904      	add	r1, sp, #16
 800d4ee:	185b      	adds	r3, r3, r1
 800d4f0:	2120      	movs	r1, #32
 800d4f2:	7019      	strb	r1, [r3, #0]
 800d4f4:	0713      	lsls	r3, r2, #28
 800d4f6:	d504      	bpl.n	800d502 <_vfiprintf_r+0x116>
 800d4f8:	2353      	movs	r3, #83	; 0x53
 800d4fa:	a904      	add	r1, sp, #16
 800d4fc:	185b      	adds	r3, r3, r1
 800d4fe:	212b      	movs	r1, #43	; 0x2b
 800d500:	7019      	strb	r1, [r3, #0]
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b2a      	cmp	r3, #42	; 0x2a
 800d508:	d016      	beq.n	800d538 <_vfiprintf_r+0x14c>
 800d50a:	2100      	movs	r1, #0
 800d50c:	68eb      	ldr	r3, [r5, #12]
 800d50e:	9f03      	ldr	r7, [sp, #12]
 800d510:	783a      	ldrb	r2, [r7, #0]
 800d512:	1c78      	adds	r0, r7, #1
 800d514:	3a30      	subs	r2, #48	; 0x30
 800d516:	4684      	mov	ip, r0
 800d518:	2a09      	cmp	r2, #9
 800d51a:	d94f      	bls.n	800d5bc <_vfiprintf_r+0x1d0>
 800d51c:	2900      	cmp	r1, #0
 800d51e:	d111      	bne.n	800d544 <_vfiprintf_r+0x158>
 800d520:	e017      	b.n	800d552 <_vfiprintf_r+0x166>
 800d522:	3701      	adds	r7, #1
 800d524:	e7a9      	b.n	800d47a <_vfiprintf_r+0x8e>
 800d526:	4b49      	ldr	r3, [pc, #292]	; (800d64c <_vfiprintf_r+0x260>)
 800d528:	682a      	ldr	r2, [r5, #0]
 800d52a:	1ac0      	subs	r0, r0, r3
 800d52c:	2301      	movs	r3, #1
 800d52e:	4083      	lsls	r3, r0
 800d530:	4313      	orrs	r3, r2
 800d532:	602b      	str	r3, [r5, #0]
 800d534:	9703      	str	r7, [sp, #12]
 800d536:	e7cb      	b.n	800d4d0 <_vfiprintf_r+0xe4>
 800d538:	9b07      	ldr	r3, [sp, #28]
 800d53a:	1d19      	adds	r1, r3, #4
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	9107      	str	r1, [sp, #28]
 800d540:	2b00      	cmp	r3, #0
 800d542:	db01      	blt.n	800d548 <_vfiprintf_r+0x15c>
 800d544:	930b      	str	r3, [sp, #44]	; 0x2c
 800d546:	e004      	b.n	800d552 <_vfiprintf_r+0x166>
 800d548:	425b      	negs	r3, r3
 800d54a:	60eb      	str	r3, [r5, #12]
 800d54c:	2302      	movs	r3, #2
 800d54e:	4313      	orrs	r3, r2
 800d550:	602b      	str	r3, [r5, #0]
 800d552:	783b      	ldrb	r3, [r7, #0]
 800d554:	2b2e      	cmp	r3, #46	; 0x2e
 800d556:	d10a      	bne.n	800d56e <_vfiprintf_r+0x182>
 800d558:	787b      	ldrb	r3, [r7, #1]
 800d55a:	2b2a      	cmp	r3, #42	; 0x2a
 800d55c:	d137      	bne.n	800d5ce <_vfiprintf_r+0x1e2>
 800d55e:	9b07      	ldr	r3, [sp, #28]
 800d560:	3702      	adds	r7, #2
 800d562:	1d1a      	adds	r2, r3, #4
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	9207      	str	r2, [sp, #28]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	db2d      	blt.n	800d5c8 <_vfiprintf_r+0x1dc>
 800d56c:	9309      	str	r3, [sp, #36]	; 0x24
 800d56e:	2203      	movs	r2, #3
 800d570:	7839      	ldrb	r1, [r7, #0]
 800d572:	4837      	ldr	r0, [pc, #220]	; (800d650 <_vfiprintf_r+0x264>)
 800d574:	f7fe f948 	bl	800b808 <memchr>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d007      	beq.n	800d58c <_vfiprintf_r+0x1a0>
 800d57c:	4b34      	ldr	r3, [pc, #208]	; (800d650 <_vfiprintf_r+0x264>)
 800d57e:	682a      	ldr	r2, [r5, #0]
 800d580:	1ac0      	subs	r0, r0, r3
 800d582:	2340      	movs	r3, #64	; 0x40
 800d584:	4083      	lsls	r3, r0
 800d586:	4313      	orrs	r3, r2
 800d588:	3701      	adds	r7, #1
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	7839      	ldrb	r1, [r7, #0]
 800d58e:	1c7b      	adds	r3, r7, #1
 800d590:	2206      	movs	r2, #6
 800d592:	4830      	ldr	r0, [pc, #192]	; (800d654 <_vfiprintf_r+0x268>)
 800d594:	9303      	str	r3, [sp, #12]
 800d596:	7629      	strb	r1, [r5, #24]
 800d598:	f7fe f936 	bl	800b808 <memchr>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d045      	beq.n	800d62c <_vfiprintf_r+0x240>
 800d5a0:	4b2d      	ldr	r3, [pc, #180]	; (800d658 <_vfiprintf_r+0x26c>)
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d127      	bne.n	800d5f6 <_vfiprintf_r+0x20a>
 800d5a6:	2207      	movs	r2, #7
 800d5a8:	9b07      	ldr	r3, [sp, #28]
 800d5aa:	3307      	adds	r3, #7
 800d5ac:	4393      	bics	r3, r2
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	9307      	str	r3, [sp, #28]
 800d5b2:	696b      	ldr	r3, [r5, #20]
 800d5b4:	9a04      	ldr	r2, [sp, #16]
 800d5b6:	189b      	adds	r3, r3, r2
 800d5b8:	616b      	str	r3, [r5, #20]
 800d5ba:	e75d      	b.n	800d478 <_vfiprintf_r+0x8c>
 800d5bc:	210a      	movs	r1, #10
 800d5be:	434b      	muls	r3, r1
 800d5c0:	4667      	mov	r7, ip
 800d5c2:	189b      	adds	r3, r3, r2
 800d5c4:	3909      	subs	r1, #9
 800d5c6:	e7a3      	b.n	800d510 <_vfiprintf_r+0x124>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	425b      	negs	r3, r3
 800d5cc:	e7ce      	b.n	800d56c <_vfiprintf_r+0x180>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	001a      	movs	r2, r3
 800d5d2:	3701      	adds	r7, #1
 800d5d4:	606b      	str	r3, [r5, #4]
 800d5d6:	7839      	ldrb	r1, [r7, #0]
 800d5d8:	1c78      	adds	r0, r7, #1
 800d5da:	3930      	subs	r1, #48	; 0x30
 800d5dc:	4684      	mov	ip, r0
 800d5de:	2909      	cmp	r1, #9
 800d5e0:	d903      	bls.n	800d5ea <_vfiprintf_r+0x1fe>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0c3      	beq.n	800d56e <_vfiprintf_r+0x182>
 800d5e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d5e8:	e7c1      	b.n	800d56e <_vfiprintf_r+0x182>
 800d5ea:	230a      	movs	r3, #10
 800d5ec:	435a      	muls	r2, r3
 800d5ee:	4667      	mov	r7, ip
 800d5f0:	1852      	adds	r2, r2, r1
 800d5f2:	3b09      	subs	r3, #9
 800d5f4:	e7ef      	b.n	800d5d6 <_vfiprintf_r+0x1ea>
 800d5f6:	ab07      	add	r3, sp, #28
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	0022      	movs	r2, r4
 800d5fc:	0029      	movs	r1, r5
 800d5fe:	0030      	movs	r0, r6
 800d600:	4b16      	ldr	r3, [pc, #88]	; (800d65c <_vfiprintf_r+0x270>)
 800d602:	f7fb f93b 	bl	800887c <_printf_float>
 800d606:	9004      	str	r0, [sp, #16]
 800d608:	9b04      	ldr	r3, [sp, #16]
 800d60a:	3301      	adds	r3, #1
 800d60c:	d1d1      	bne.n	800d5b2 <_vfiprintf_r+0x1c6>
 800d60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d610:	07db      	lsls	r3, r3, #31
 800d612:	d405      	bmi.n	800d620 <_vfiprintf_r+0x234>
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	059b      	lsls	r3, r3, #22
 800d618:	d402      	bmi.n	800d620 <_vfiprintf_r+0x234>
 800d61a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d61c:	f7ff fe74 	bl	800d308 <__retarget_lock_release_recursive>
 800d620:	89a3      	ldrh	r3, [r4, #12]
 800d622:	065b      	lsls	r3, r3, #25
 800d624:	d500      	bpl.n	800d628 <_vfiprintf_r+0x23c>
 800d626:	e70a      	b.n	800d43e <_vfiprintf_r+0x52>
 800d628:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d62a:	e70a      	b.n	800d442 <_vfiprintf_r+0x56>
 800d62c:	ab07      	add	r3, sp, #28
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	0022      	movs	r2, r4
 800d632:	0029      	movs	r1, r5
 800d634:	0030      	movs	r0, r6
 800d636:	4b09      	ldr	r3, [pc, #36]	; (800d65c <_vfiprintf_r+0x270>)
 800d638:	f7fb fbde 	bl	8008df8 <_printf_i>
 800d63c:	e7e3      	b.n	800d606 <_vfiprintf_r+0x21a>
 800d63e:	46c0      	nop			; (mov r8, r8)
 800d640:	0800dfac 	.word	0x0800dfac
 800d644:	0800dfcc 	.word	0x0800dfcc
 800d648:	0800df8c 	.word	0x0800df8c
 800d64c:	0800df24 	.word	0x0800df24
 800d650:	0800df2a 	.word	0x0800df2a
 800d654:	0800df2e 	.word	0x0800df2e
 800d658:	0800887d 	.word	0x0800887d
 800d65c:	0800d3c7 	.word	0x0800d3c7

0800d660 <__swbuf_r>:
 800d660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d662:	0005      	movs	r5, r0
 800d664:	000e      	movs	r6, r1
 800d666:	0014      	movs	r4, r2
 800d668:	2800      	cmp	r0, #0
 800d66a:	d004      	beq.n	800d676 <__swbuf_r+0x16>
 800d66c:	6983      	ldr	r3, [r0, #24]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <__swbuf_r+0x16>
 800d672:	f7ff fd97 	bl	800d1a4 <__sinit>
 800d676:	4b22      	ldr	r3, [pc, #136]	; (800d700 <__swbuf_r+0xa0>)
 800d678:	429c      	cmp	r4, r3
 800d67a:	d12e      	bne.n	800d6da <__swbuf_r+0x7a>
 800d67c:	686c      	ldr	r4, [r5, #4]
 800d67e:	69a3      	ldr	r3, [r4, #24]
 800d680:	60a3      	str	r3, [r4, #8]
 800d682:	89a3      	ldrh	r3, [r4, #12]
 800d684:	071b      	lsls	r3, r3, #28
 800d686:	d532      	bpl.n	800d6ee <__swbuf_r+0x8e>
 800d688:	6923      	ldr	r3, [r4, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d02f      	beq.n	800d6ee <__swbuf_r+0x8e>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	6922      	ldr	r2, [r4, #16]
 800d692:	b2f7      	uxtb	r7, r6
 800d694:	1a98      	subs	r0, r3, r2
 800d696:	6963      	ldr	r3, [r4, #20]
 800d698:	b2f6      	uxtb	r6, r6
 800d69a:	4283      	cmp	r3, r0
 800d69c:	dc05      	bgt.n	800d6aa <__swbuf_r+0x4a>
 800d69e:	0021      	movs	r1, r4
 800d6a0:	0028      	movs	r0, r5
 800d6a2:	f7ff fcdd 	bl	800d060 <_fflush_r>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d127      	bne.n	800d6fa <__swbuf_r+0x9a>
 800d6aa:	68a3      	ldr	r3, [r4, #8]
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	60a3      	str	r3, [r4, #8]
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	6022      	str	r2, [r4, #0]
 800d6b8:	701f      	strb	r7, [r3, #0]
 800d6ba:	6963      	ldr	r3, [r4, #20]
 800d6bc:	4283      	cmp	r3, r0
 800d6be:	d004      	beq.n	800d6ca <__swbuf_r+0x6a>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	07db      	lsls	r3, r3, #31
 800d6c4:	d507      	bpl.n	800d6d6 <__swbuf_r+0x76>
 800d6c6:	2e0a      	cmp	r6, #10
 800d6c8:	d105      	bne.n	800d6d6 <__swbuf_r+0x76>
 800d6ca:	0021      	movs	r1, r4
 800d6cc:	0028      	movs	r0, r5
 800d6ce:	f7ff fcc7 	bl	800d060 <_fflush_r>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d111      	bne.n	800d6fa <__swbuf_r+0x9a>
 800d6d6:	0030      	movs	r0, r6
 800d6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6da:	4b0a      	ldr	r3, [pc, #40]	; (800d704 <__swbuf_r+0xa4>)
 800d6dc:	429c      	cmp	r4, r3
 800d6de:	d101      	bne.n	800d6e4 <__swbuf_r+0x84>
 800d6e0:	68ac      	ldr	r4, [r5, #8]
 800d6e2:	e7cc      	b.n	800d67e <__swbuf_r+0x1e>
 800d6e4:	4b08      	ldr	r3, [pc, #32]	; (800d708 <__swbuf_r+0xa8>)
 800d6e6:	429c      	cmp	r4, r3
 800d6e8:	d1c9      	bne.n	800d67e <__swbuf_r+0x1e>
 800d6ea:	68ec      	ldr	r4, [r5, #12]
 800d6ec:	e7c7      	b.n	800d67e <__swbuf_r+0x1e>
 800d6ee:	0021      	movs	r1, r4
 800d6f0:	0028      	movs	r0, r5
 800d6f2:	f000 f80b 	bl	800d70c <__swsetup_r>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d0c9      	beq.n	800d68e <__swbuf_r+0x2e>
 800d6fa:	2601      	movs	r6, #1
 800d6fc:	4276      	negs	r6, r6
 800d6fe:	e7ea      	b.n	800d6d6 <__swbuf_r+0x76>
 800d700:	0800dfac 	.word	0x0800dfac
 800d704:	0800dfcc 	.word	0x0800dfcc
 800d708:	0800df8c 	.word	0x0800df8c

0800d70c <__swsetup_r>:
 800d70c:	4b37      	ldr	r3, [pc, #220]	; (800d7ec <__swsetup_r+0xe0>)
 800d70e:	b570      	push	{r4, r5, r6, lr}
 800d710:	681d      	ldr	r5, [r3, #0]
 800d712:	0006      	movs	r6, r0
 800d714:	000c      	movs	r4, r1
 800d716:	2d00      	cmp	r5, #0
 800d718:	d005      	beq.n	800d726 <__swsetup_r+0x1a>
 800d71a:	69ab      	ldr	r3, [r5, #24]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <__swsetup_r+0x1a>
 800d720:	0028      	movs	r0, r5
 800d722:	f7ff fd3f 	bl	800d1a4 <__sinit>
 800d726:	4b32      	ldr	r3, [pc, #200]	; (800d7f0 <__swsetup_r+0xe4>)
 800d728:	429c      	cmp	r4, r3
 800d72a:	d10f      	bne.n	800d74c <__swsetup_r+0x40>
 800d72c:	686c      	ldr	r4, [r5, #4]
 800d72e:	230c      	movs	r3, #12
 800d730:	5ee2      	ldrsh	r2, [r4, r3]
 800d732:	b293      	uxth	r3, r2
 800d734:	0711      	lsls	r1, r2, #28
 800d736:	d42d      	bmi.n	800d794 <__swsetup_r+0x88>
 800d738:	06d9      	lsls	r1, r3, #27
 800d73a:	d411      	bmi.n	800d760 <__swsetup_r+0x54>
 800d73c:	2309      	movs	r3, #9
 800d73e:	2001      	movs	r0, #1
 800d740:	6033      	str	r3, [r6, #0]
 800d742:	3337      	adds	r3, #55	; 0x37
 800d744:	4313      	orrs	r3, r2
 800d746:	81a3      	strh	r3, [r4, #12]
 800d748:	4240      	negs	r0, r0
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	4b29      	ldr	r3, [pc, #164]	; (800d7f4 <__swsetup_r+0xe8>)
 800d74e:	429c      	cmp	r4, r3
 800d750:	d101      	bne.n	800d756 <__swsetup_r+0x4a>
 800d752:	68ac      	ldr	r4, [r5, #8]
 800d754:	e7eb      	b.n	800d72e <__swsetup_r+0x22>
 800d756:	4b28      	ldr	r3, [pc, #160]	; (800d7f8 <__swsetup_r+0xec>)
 800d758:	429c      	cmp	r4, r3
 800d75a:	d1e8      	bne.n	800d72e <__swsetup_r+0x22>
 800d75c:	68ec      	ldr	r4, [r5, #12]
 800d75e:	e7e6      	b.n	800d72e <__swsetup_r+0x22>
 800d760:	075b      	lsls	r3, r3, #29
 800d762:	d513      	bpl.n	800d78c <__swsetup_r+0x80>
 800d764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d766:	2900      	cmp	r1, #0
 800d768:	d008      	beq.n	800d77c <__swsetup_r+0x70>
 800d76a:	0023      	movs	r3, r4
 800d76c:	3344      	adds	r3, #68	; 0x44
 800d76e:	4299      	cmp	r1, r3
 800d770:	d002      	beq.n	800d778 <__swsetup_r+0x6c>
 800d772:	0030      	movs	r0, r6
 800d774:	f7fe fd34 	bl	800c1e0 <_free_r>
 800d778:	2300      	movs	r3, #0
 800d77a:	6363      	str	r3, [r4, #52]	; 0x34
 800d77c:	2224      	movs	r2, #36	; 0x24
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	4393      	bics	r3, r2
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	2300      	movs	r3, #0
 800d786:	6063      	str	r3, [r4, #4]
 800d788:	6923      	ldr	r3, [r4, #16]
 800d78a:	6023      	str	r3, [r4, #0]
 800d78c:	2308      	movs	r3, #8
 800d78e:	89a2      	ldrh	r2, [r4, #12]
 800d790:	4313      	orrs	r3, r2
 800d792:	81a3      	strh	r3, [r4, #12]
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10b      	bne.n	800d7b2 <__swsetup_r+0xa6>
 800d79a:	21a0      	movs	r1, #160	; 0xa0
 800d79c:	2280      	movs	r2, #128	; 0x80
 800d79e:	89a3      	ldrh	r3, [r4, #12]
 800d7a0:	0089      	lsls	r1, r1, #2
 800d7a2:	0092      	lsls	r2, r2, #2
 800d7a4:	400b      	ands	r3, r1
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d003      	beq.n	800d7b2 <__swsetup_r+0xa6>
 800d7aa:	0021      	movs	r1, r4
 800d7ac:	0030      	movs	r0, r6
 800d7ae:	f000 f855 	bl	800d85c <__smakebuf_r>
 800d7b2:	220c      	movs	r2, #12
 800d7b4:	5ea3      	ldrsh	r3, [r4, r2]
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	001a      	movs	r2, r3
 800d7ba:	b299      	uxth	r1, r3
 800d7bc:	4002      	ands	r2, r0
 800d7be:	4203      	tst	r3, r0
 800d7c0:	d00f      	beq.n	800d7e2 <__swsetup_r+0xd6>
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	60a2      	str	r2, [r4, #8]
 800d7c6:	6962      	ldr	r2, [r4, #20]
 800d7c8:	4252      	negs	r2, r2
 800d7ca:	61a2      	str	r2, [r4, #24]
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	6922      	ldr	r2, [r4, #16]
 800d7d0:	4282      	cmp	r2, r0
 800d7d2:	d1ba      	bne.n	800d74a <__swsetup_r+0x3e>
 800d7d4:	060a      	lsls	r2, r1, #24
 800d7d6:	d5b8      	bpl.n	800d74a <__swsetup_r+0x3e>
 800d7d8:	2240      	movs	r2, #64	; 0x40
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	81a3      	strh	r3, [r4, #12]
 800d7de:	3801      	subs	r0, #1
 800d7e0:	e7b3      	b.n	800d74a <__swsetup_r+0x3e>
 800d7e2:	0788      	lsls	r0, r1, #30
 800d7e4:	d400      	bmi.n	800d7e8 <__swsetup_r+0xdc>
 800d7e6:	6962      	ldr	r2, [r4, #20]
 800d7e8:	60a2      	str	r2, [r4, #8]
 800d7ea:	e7ef      	b.n	800d7cc <__swsetup_r+0xc0>
 800d7ec:	2000000c 	.word	0x2000000c
 800d7f0:	0800dfac 	.word	0x0800dfac
 800d7f4:	0800dfcc 	.word	0x0800dfcc
 800d7f8:	0800df8c 	.word	0x0800df8c

0800d7fc <abort>:
 800d7fc:	2006      	movs	r0, #6
 800d7fe:	b510      	push	{r4, lr}
 800d800:	f000 f8a2 	bl	800d948 <raise>
 800d804:	2001      	movs	r0, #1
 800d806:	f7f6 fd13 	bl	8004230 <_exit>
	...

0800d80c <__swhatbuf_r>:
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	000e      	movs	r6, r1
 800d810:	001d      	movs	r5, r3
 800d812:	230e      	movs	r3, #14
 800d814:	5ec9      	ldrsh	r1, [r1, r3]
 800d816:	0014      	movs	r4, r2
 800d818:	b096      	sub	sp, #88	; 0x58
 800d81a:	2900      	cmp	r1, #0
 800d81c:	da07      	bge.n	800d82e <__swhatbuf_r+0x22>
 800d81e:	2300      	movs	r3, #0
 800d820:	602b      	str	r3, [r5, #0]
 800d822:	89b3      	ldrh	r3, [r6, #12]
 800d824:	061b      	lsls	r3, r3, #24
 800d826:	d411      	bmi.n	800d84c <__swhatbuf_r+0x40>
 800d828:	2380      	movs	r3, #128	; 0x80
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	e00f      	b.n	800d84e <__swhatbuf_r+0x42>
 800d82e:	466a      	mov	r2, sp
 800d830:	f000 f8aa 	bl	800d988 <_fstat_r>
 800d834:	2800      	cmp	r0, #0
 800d836:	dbf2      	blt.n	800d81e <__swhatbuf_r+0x12>
 800d838:	23f0      	movs	r3, #240	; 0xf0
 800d83a:	9901      	ldr	r1, [sp, #4]
 800d83c:	021b      	lsls	r3, r3, #8
 800d83e:	4019      	ands	r1, r3
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <__swhatbuf_r+0x4c>)
 800d842:	18c9      	adds	r1, r1, r3
 800d844:	424b      	negs	r3, r1
 800d846:	4159      	adcs	r1, r3
 800d848:	6029      	str	r1, [r5, #0]
 800d84a:	e7ed      	b.n	800d828 <__swhatbuf_r+0x1c>
 800d84c:	2340      	movs	r3, #64	; 0x40
 800d84e:	2000      	movs	r0, #0
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	b016      	add	sp, #88	; 0x58
 800d854:	bd70      	pop	{r4, r5, r6, pc}
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	ffffe000 	.word	0xffffe000

0800d85c <__smakebuf_r>:
 800d85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d85e:	2602      	movs	r6, #2
 800d860:	898b      	ldrh	r3, [r1, #12]
 800d862:	0005      	movs	r5, r0
 800d864:	000c      	movs	r4, r1
 800d866:	4233      	tst	r3, r6
 800d868:	d006      	beq.n	800d878 <__smakebuf_r+0x1c>
 800d86a:	0023      	movs	r3, r4
 800d86c:	3347      	adds	r3, #71	; 0x47
 800d86e:	6023      	str	r3, [r4, #0]
 800d870:	6123      	str	r3, [r4, #16]
 800d872:	2301      	movs	r3, #1
 800d874:	6163      	str	r3, [r4, #20]
 800d876:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d878:	466a      	mov	r2, sp
 800d87a:	ab01      	add	r3, sp, #4
 800d87c:	f7ff ffc6 	bl	800d80c <__swhatbuf_r>
 800d880:	9900      	ldr	r1, [sp, #0]
 800d882:	0007      	movs	r7, r0
 800d884:	0028      	movs	r0, r5
 800d886:	f7fe fcf5 	bl	800c274 <_malloc_r>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d108      	bne.n	800d8a0 <__smakebuf_r+0x44>
 800d88e:	220c      	movs	r2, #12
 800d890:	5ea3      	ldrsh	r3, [r4, r2]
 800d892:	059a      	lsls	r2, r3, #22
 800d894:	d4ef      	bmi.n	800d876 <__smakebuf_r+0x1a>
 800d896:	2203      	movs	r2, #3
 800d898:	4393      	bics	r3, r2
 800d89a:	431e      	orrs	r6, r3
 800d89c:	81a6      	strh	r6, [r4, #12]
 800d89e:	e7e4      	b.n	800d86a <__smakebuf_r+0xe>
 800d8a0:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <__smakebuf_r+0x84>)
 800d8a2:	62ab      	str	r3, [r5, #40]	; 0x28
 800d8a4:	2380      	movs	r3, #128	; 0x80
 800d8a6:	89a2      	ldrh	r2, [r4, #12]
 800d8a8:	6020      	str	r0, [r4, #0]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	81a3      	strh	r3, [r4, #12]
 800d8ae:	9b00      	ldr	r3, [sp, #0]
 800d8b0:	6120      	str	r0, [r4, #16]
 800d8b2:	6163      	str	r3, [r4, #20]
 800d8b4:	9b01      	ldr	r3, [sp, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00d      	beq.n	800d8d6 <__smakebuf_r+0x7a>
 800d8ba:	0028      	movs	r0, r5
 800d8bc:	230e      	movs	r3, #14
 800d8be:	5ee1      	ldrsh	r1, [r4, r3]
 800d8c0:	f000 f874 	bl	800d9ac <_isatty_r>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d006      	beq.n	800d8d6 <__smakebuf_r+0x7a>
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	4393      	bics	r3, r2
 800d8ce:	001a      	movs	r2, r3
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	81a3      	strh	r3, [r4, #12]
 800d8d6:	89a0      	ldrh	r0, [r4, #12]
 800d8d8:	4307      	orrs	r7, r0
 800d8da:	81a7      	strh	r7, [r4, #12]
 800d8dc:	e7cb      	b.n	800d876 <__smakebuf_r+0x1a>
 800d8de:	46c0      	nop			; (mov r8, r8)
 800d8e0:	0800d129 	.word	0x0800d129

0800d8e4 <_malloc_usable_size_r>:
 800d8e4:	1f0b      	subs	r3, r1, #4
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	1f18      	subs	r0, r3, #4
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	da01      	bge.n	800d8f2 <_malloc_usable_size_r+0xe>
 800d8ee:	580b      	ldr	r3, [r1, r0]
 800d8f0:	18c0      	adds	r0, r0, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_raise_r>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	0004      	movs	r4, r0
 800d8f8:	000d      	movs	r5, r1
 800d8fa:	291f      	cmp	r1, #31
 800d8fc:	d904      	bls.n	800d908 <_raise_r+0x14>
 800d8fe:	2316      	movs	r3, #22
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	2001      	movs	r0, #1
 800d904:	4240      	negs	r0, r0
 800d906:	bd70      	pop	{r4, r5, r6, pc}
 800d908:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d004      	beq.n	800d918 <_raise_r+0x24>
 800d90e:	008a      	lsls	r2, r1, #2
 800d910:	189b      	adds	r3, r3, r2
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	2a00      	cmp	r2, #0
 800d916:	d108      	bne.n	800d92a <_raise_r+0x36>
 800d918:	0020      	movs	r0, r4
 800d91a:	f000 f831 	bl	800d980 <_getpid_r>
 800d91e:	002a      	movs	r2, r5
 800d920:	0001      	movs	r1, r0
 800d922:	0020      	movs	r0, r4
 800d924:	f000 f81a 	bl	800d95c <_kill_r>
 800d928:	e7ed      	b.n	800d906 <_raise_r+0x12>
 800d92a:	2000      	movs	r0, #0
 800d92c:	2a01      	cmp	r2, #1
 800d92e:	d0ea      	beq.n	800d906 <_raise_r+0x12>
 800d930:	1c51      	adds	r1, r2, #1
 800d932:	d103      	bne.n	800d93c <_raise_r+0x48>
 800d934:	2316      	movs	r3, #22
 800d936:	3001      	adds	r0, #1
 800d938:	6023      	str	r3, [r4, #0]
 800d93a:	e7e4      	b.n	800d906 <_raise_r+0x12>
 800d93c:	2400      	movs	r4, #0
 800d93e:	0028      	movs	r0, r5
 800d940:	601c      	str	r4, [r3, #0]
 800d942:	4790      	blx	r2
 800d944:	0020      	movs	r0, r4
 800d946:	e7de      	b.n	800d906 <_raise_r+0x12>

0800d948 <raise>:
 800d948:	b510      	push	{r4, lr}
 800d94a:	4b03      	ldr	r3, [pc, #12]	; (800d958 <raise+0x10>)
 800d94c:	0001      	movs	r1, r0
 800d94e:	6818      	ldr	r0, [r3, #0]
 800d950:	f7ff ffd0 	bl	800d8f4 <_raise_r>
 800d954:	bd10      	pop	{r4, pc}
 800d956:	46c0      	nop			; (mov r8, r8)
 800d958:	2000000c 	.word	0x2000000c

0800d95c <_kill_r>:
 800d95c:	2300      	movs	r3, #0
 800d95e:	b570      	push	{r4, r5, r6, lr}
 800d960:	4d06      	ldr	r5, [pc, #24]	; (800d97c <_kill_r+0x20>)
 800d962:	0004      	movs	r4, r0
 800d964:	0008      	movs	r0, r1
 800d966:	0011      	movs	r1, r2
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	f7f6 fc51 	bl	8004210 <_kill>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	d103      	bne.n	800d97a <_kill_r+0x1e>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d000      	beq.n	800d97a <_kill_r+0x1e>
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	200005b0 	.word	0x200005b0

0800d980 <_getpid_r>:
 800d980:	b510      	push	{r4, lr}
 800d982:	f7f6 fc3f 	bl	8004204 <_getpid>
 800d986:	bd10      	pop	{r4, pc}

0800d988 <_fstat_r>:
 800d988:	2300      	movs	r3, #0
 800d98a:	b570      	push	{r4, r5, r6, lr}
 800d98c:	4d06      	ldr	r5, [pc, #24]	; (800d9a8 <_fstat_r+0x20>)
 800d98e:	0004      	movs	r4, r0
 800d990:	0008      	movs	r0, r1
 800d992:	0011      	movs	r1, r2
 800d994:	602b      	str	r3, [r5, #0]
 800d996:	f7f6 fc9a 	bl	80042ce <_fstat>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	d103      	bne.n	800d9a6 <_fstat_r+0x1e>
 800d99e:	682b      	ldr	r3, [r5, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d000      	beq.n	800d9a6 <_fstat_r+0x1e>
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}
 800d9a8:	200005b0 	.word	0x200005b0

0800d9ac <_isatty_r>:
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	b570      	push	{r4, r5, r6, lr}
 800d9b0:	4d06      	ldr	r5, [pc, #24]	; (800d9cc <_isatty_r+0x20>)
 800d9b2:	0004      	movs	r4, r0
 800d9b4:	0008      	movs	r0, r1
 800d9b6:	602b      	str	r3, [r5, #0]
 800d9b8:	f7f6 fc97 	bl	80042ea <_isatty>
 800d9bc:	1c43      	adds	r3, r0, #1
 800d9be:	d103      	bne.n	800d9c8 <_isatty_r+0x1c>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d000      	beq.n	800d9c8 <_isatty_r+0x1c>
 800d9c6:	6023      	str	r3, [r4, #0]
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	46c0      	nop			; (mov r8, r8)
 800d9cc:	200005b0 	.word	0x200005b0

0800d9d0 <_init>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	46c0      	nop			; (mov r8, r8)
 800d9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d6:	bc08      	pop	{r3}
 800d9d8:	469e      	mov	lr, r3
 800d9da:	4770      	bx	lr

0800d9dc <_fini>:
 800d9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9e2:	bc08      	pop	{r3}
 800d9e4:	469e      	mov	lr, r3
 800d9e6:	4770      	bx	lr
