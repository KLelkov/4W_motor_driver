
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800e178  0800e178  0001e178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e81c  0800e81c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e81c  0800e81c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e81c  0800e81c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e81c  0800e81c  0001e81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e820  0800e820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001e0  0800ea04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800ea04  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb7e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002fd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00031cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118f3  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec69  00000000  00000000  00044fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ac19  00000000  00000000  00053c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  000be878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e15c 	.word	0x0800e15c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e15c 	.word	0x0800e15c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fa4b 	bl	80018ec <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f995 	bl	8001790 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa3d 	bl	80018ec <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa33 	bl	80018ec <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9b7 	bl	8001808 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9ad 	bl	8001808 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f002 f897 	bl	8002604 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fce0 	bl	8001ea4 <__aeabi_dsub>
 80004e4:	f002 f88e 	bl	8002604 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f001 fa45 	bl	80019cc <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f002 f8c2 	bl	80026d0 <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f001 fa3c 	bl	80019cc <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fca2 	bl	8001ea4 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f002 f87b 	bl	8002670 <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f001 fa25 	bl	80019cc <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f002 f8a2 	bl	80026d0 <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 faac 	bl	8000aec <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_fadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	4646      	mov	r6, r8
 80005a0:	46d6      	mov	lr, sl
 80005a2:	464f      	mov	r7, r9
 80005a4:	024d      	lsls	r5, r1, #9
 80005a6:	0242      	lsls	r2, r0, #9
 80005a8:	b5c0      	push	{r6, r7, lr}
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	0a6e      	lsrs	r6, r5, #9
 80005ae:	0047      	lsls	r7, r0, #1
 80005b0:	46b0      	mov	r8, r6
 80005b2:	0e3f      	lsrs	r7, r7, #24
 80005b4:	004e      	lsls	r6, r1, #1
 80005b6:	0fc4      	lsrs	r4, r0, #31
 80005b8:	00d0      	lsls	r0, r2, #3
 80005ba:	4694      	mov	ip, r2
 80005bc:	003b      	movs	r3, r7
 80005be:	4682      	mov	sl, r0
 80005c0:	0e36      	lsrs	r6, r6, #24
 80005c2:	0fc9      	lsrs	r1, r1, #31
 80005c4:	09ad      	lsrs	r5, r5, #6
 80005c6:	428c      	cmp	r4, r1
 80005c8:	d06d      	beq.n	80006a6 <__aeabi_fadd+0x10a>
 80005ca:	1bb8      	subs	r0, r7, r6
 80005cc:	4681      	mov	r9, r0
 80005ce:	2800      	cmp	r0, #0
 80005d0:	dd4d      	ble.n	800066e <__aeabi_fadd+0xd2>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x3c>
 80005d6:	e088      	b.n	80006ea <__aeabi_fadd+0x14e>
 80005d8:	2fff      	cmp	r7, #255	; 0xff
 80005da:	d05a      	beq.n	8000692 <__aeabi_fadd+0xf6>
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	04db      	lsls	r3, r3, #19
 80005e0:	431d      	orrs	r5, r3
 80005e2:	464b      	mov	r3, r9
 80005e4:	2201      	movs	r2, #1
 80005e6:	2b1b      	cmp	r3, #27
 80005e8:	dc0a      	bgt.n	8000600 <__aeabi_fadd+0x64>
 80005ea:	002b      	movs	r3, r5
 80005ec:	464a      	mov	r2, r9
 80005ee:	4649      	mov	r1, r9
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	2220      	movs	r2, #32
 80005f4:	1a52      	subs	r2, r2, r1
 80005f6:	4095      	lsls	r5, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	1e55      	subs	r5, r2, #1
 80005fc:	41aa      	sbcs	r2, r5
 80005fe:	431a      	orrs	r2, r3
 8000600:	4653      	mov	r3, sl
 8000602:	1a9a      	subs	r2, r3, r2
 8000604:	0153      	lsls	r3, r2, #5
 8000606:	d400      	bmi.n	800060a <__aeabi_fadd+0x6e>
 8000608:	e0b9      	b.n	800077e <__aeabi_fadd+0x1e2>
 800060a:	0192      	lsls	r2, r2, #6
 800060c:	0996      	lsrs	r6, r2, #6
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f90c 	bl	800282c <__clzsi2>
 8000614:	3805      	subs	r0, #5
 8000616:	4086      	lsls	r6, r0
 8000618:	4287      	cmp	r7, r0
 800061a:	dd00      	ble.n	800061e <__aeabi_fadd+0x82>
 800061c:	e0d4      	b.n	80007c8 <__aeabi_fadd+0x22c>
 800061e:	0033      	movs	r3, r6
 8000620:	1bc7      	subs	r7, r0, r7
 8000622:	2020      	movs	r0, #32
 8000624:	3701      	adds	r7, #1
 8000626:	40fb      	lsrs	r3, r7
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	40be      	lsls	r6, r7
 800062c:	0032      	movs	r2, r6
 800062e:	1e56      	subs	r6, r2, #1
 8000630:	41b2      	sbcs	r2, r6
 8000632:	2700      	movs	r7, #0
 8000634:	431a      	orrs	r2, r3
 8000636:	0753      	lsls	r3, r2, #29
 8000638:	d004      	beq.n	8000644 <__aeabi_fadd+0xa8>
 800063a:	230f      	movs	r3, #15
 800063c:	4013      	ands	r3, r2
 800063e:	2b04      	cmp	r3, #4
 8000640:	d000      	beq.n	8000644 <__aeabi_fadd+0xa8>
 8000642:	3204      	adds	r2, #4
 8000644:	0153      	lsls	r3, r2, #5
 8000646:	d400      	bmi.n	800064a <__aeabi_fadd+0xae>
 8000648:	e09c      	b.n	8000784 <__aeabi_fadd+0x1e8>
 800064a:	1c7b      	adds	r3, r7, #1
 800064c:	2ffe      	cmp	r7, #254	; 0xfe
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0xb6>
 8000650:	e09a      	b.n	8000788 <__aeabi_fadd+0x1ec>
 8000652:	0192      	lsls	r2, r2, #6
 8000654:	0a52      	lsrs	r2, r2, #9
 8000656:	4694      	mov	ip, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	05d8      	lsls	r0, r3, #23
 800065c:	4663      	mov	r3, ip
 800065e:	07e4      	lsls	r4, r4, #31
 8000660:	4318      	orrs	r0, r3
 8000662:	4320      	orrs	r0, r4
 8000664:	bce0      	pop	{r5, r6, r7}
 8000666:	46ba      	mov	sl, r7
 8000668:	46b1      	mov	r9, r6
 800066a:	46a8      	mov	r8, r5
 800066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066e:	2800      	cmp	r0, #0
 8000670:	d049      	beq.n	8000706 <__aeabi_fadd+0x16a>
 8000672:	1bf3      	subs	r3, r6, r7
 8000674:	2f00      	cmp	r7, #0
 8000676:	d000      	beq.n	800067a <__aeabi_fadd+0xde>
 8000678:	e0b6      	b.n	80007e8 <__aeabi_fadd+0x24c>
 800067a:	4652      	mov	r2, sl
 800067c:	2a00      	cmp	r2, #0
 800067e:	d060      	beq.n	8000742 <__aeabi_fadd+0x1a6>
 8000680:	3b01      	subs	r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0xec>
 8000686:	e0fc      	b.n	8000882 <__aeabi_fadd+0x2e6>
 8000688:	2eff      	cmp	r6, #255	; 0xff
 800068a:	d000      	beq.n	800068e <__aeabi_fadd+0xf2>
 800068c:	e0b4      	b.n	80007f8 <__aeabi_fadd+0x25c>
 800068e:	000c      	movs	r4, r1
 8000690:	4642      	mov	r2, r8
 8000692:	2a00      	cmp	r2, #0
 8000694:	d078      	beq.n	8000788 <__aeabi_fadd+0x1ec>
 8000696:	2080      	movs	r0, #128	; 0x80
 8000698:	03c0      	lsls	r0, r0, #15
 800069a:	4310      	orrs	r0, r2
 800069c:	0242      	lsls	r2, r0, #9
 800069e:	0a53      	lsrs	r3, r2, #9
 80006a0:	469c      	mov	ip, r3
 80006a2:	23ff      	movs	r3, #255	; 0xff
 80006a4:	e7d9      	b.n	800065a <__aeabi_fadd+0xbe>
 80006a6:	1bb9      	subs	r1, r7, r6
 80006a8:	2900      	cmp	r1, #0
 80006aa:	dd71      	ble.n	8000790 <__aeabi_fadd+0x1f4>
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d03f      	beq.n	8000730 <__aeabi_fadd+0x194>
 80006b0:	2fff      	cmp	r7, #255	; 0xff
 80006b2:	d0ee      	beq.n	8000692 <__aeabi_fadd+0xf6>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	431d      	orrs	r5, r3
 80006ba:	2201      	movs	r2, #1
 80006bc:	291b      	cmp	r1, #27
 80006be:	dc07      	bgt.n	80006d0 <__aeabi_fadd+0x134>
 80006c0:	002a      	movs	r2, r5
 80006c2:	2320      	movs	r3, #32
 80006c4:	40ca      	lsrs	r2, r1
 80006c6:	1a59      	subs	r1, r3, r1
 80006c8:	408d      	lsls	r5, r1
 80006ca:	1e6b      	subs	r3, r5, #1
 80006cc:	419d      	sbcs	r5, r3
 80006ce:	432a      	orrs	r2, r5
 80006d0:	4452      	add	r2, sl
 80006d2:	0153      	lsls	r3, r2, #5
 80006d4:	d553      	bpl.n	800077e <__aeabi_fadd+0x1e2>
 80006d6:	3701      	adds	r7, #1
 80006d8:	2fff      	cmp	r7, #255	; 0xff
 80006da:	d055      	beq.n	8000788 <__aeabi_fadd+0x1ec>
 80006dc:	2301      	movs	r3, #1
 80006de:	497b      	ldr	r1, [pc, #492]	; (80008cc <__aeabi_fadd+0x330>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	0852      	lsrs	r2, r2, #1
 80006e4:	400a      	ands	r2, r1
 80006e6:	431a      	orrs	r2, r3
 80006e8:	e7a5      	b.n	8000636 <__aeabi_fadd+0x9a>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d02c      	beq.n	8000748 <__aeabi_fadd+0x1ac>
 80006ee:	2301      	movs	r3, #1
 80006f0:	425b      	negs	r3, r3
 80006f2:	469c      	mov	ip, r3
 80006f4:	44e1      	add	r9, ip
 80006f6:	464b      	mov	r3, r9
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x162>
 80006fc:	e0ad      	b.n	800085a <__aeabi_fadd+0x2be>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x168>
 8000702:	e76e      	b.n	80005e2 <__aeabi_fadd+0x46>
 8000704:	e7c5      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000706:	20fe      	movs	r0, #254	; 0xfe
 8000708:	1c7e      	adds	r6, r7, #1
 800070a:	4230      	tst	r0, r6
 800070c:	d160      	bne.n	80007d0 <__aeabi_fadd+0x234>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x178>
 8000712:	e093      	b.n	800083c <__aeabi_fadd+0x2a0>
 8000714:	4652      	mov	r2, sl
 8000716:	2a00      	cmp	r2, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0x180>
 800071a:	e0b6      	b.n	800088a <__aeabi_fadd+0x2ee>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d09c      	beq.n	800065a <__aeabi_fadd+0xbe>
 8000720:	1b52      	subs	r2, r2, r5
 8000722:	0150      	lsls	r0, r2, #5
 8000724:	d400      	bmi.n	8000728 <__aeabi_fadd+0x18c>
 8000726:	e0c3      	b.n	80008b0 <__aeabi_fadd+0x314>
 8000728:	4653      	mov	r3, sl
 800072a:	000c      	movs	r4, r1
 800072c:	1aea      	subs	r2, r5, r3
 800072e:	e782      	b.n	8000636 <__aeabi_fadd+0x9a>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d009      	beq.n	8000748 <__aeabi_fadd+0x1ac>
 8000734:	3901      	subs	r1, #1
 8000736:	2900      	cmp	r1, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x1a0>
 800073a:	e08b      	b.n	8000854 <__aeabi_fadd+0x2b8>
 800073c:	2fff      	cmp	r7, #255	; 0xff
 800073e:	d1bc      	bne.n	80006ba <__aeabi_fadd+0x11e>
 8000740:	e7a7      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000742:	000c      	movs	r4, r1
 8000744:	4642      	mov	r2, r8
 8000746:	0037      	movs	r7, r6
 8000748:	2fff      	cmp	r7, #255	; 0xff
 800074a:	d0a2      	beq.n	8000692 <__aeabi_fadd+0xf6>
 800074c:	0252      	lsls	r2, r2, #9
 800074e:	0a53      	lsrs	r3, r2, #9
 8000750:	469c      	mov	ip, r3
 8000752:	b2fb      	uxtb	r3, r7
 8000754:	e781      	b.n	800065a <__aeabi_fadd+0xbe>
 8000756:	21fe      	movs	r1, #254	; 0xfe
 8000758:	3701      	adds	r7, #1
 800075a:	4239      	tst	r1, r7
 800075c:	d165      	bne.n	800082a <__aeabi_fadd+0x28e>
 800075e:	2b00      	cmp	r3, #0
 8000760:	d17e      	bne.n	8000860 <__aeabi_fadd+0x2c4>
 8000762:	2800      	cmp	r0, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x1cc>
 8000766:	e0aa      	b.n	80008be <__aeabi_fadd+0x322>
 8000768:	2d00      	cmp	r5, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x1d2>
 800076c:	e775      	b.n	800065a <__aeabi_fadd+0xbe>
 800076e:	002a      	movs	r2, r5
 8000770:	4452      	add	r2, sl
 8000772:	2700      	movs	r7, #0
 8000774:	0153      	lsls	r3, r2, #5
 8000776:	d502      	bpl.n	800077e <__aeabi_fadd+0x1e2>
 8000778:	4b55      	ldr	r3, [pc, #340]	; (80008d0 <__aeabi_fadd+0x334>)
 800077a:	3701      	adds	r7, #1
 800077c:	401a      	ands	r2, r3
 800077e:	0753      	lsls	r3, r2, #29
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x1e8>
 8000782:	e75a      	b.n	800063a <__aeabi_fadd+0x9e>
 8000784:	08d2      	lsrs	r2, r2, #3
 8000786:	e7df      	b.n	8000748 <__aeabi_fadd+0x1ac>
 8000788:	2200      	movs	r2, #0
 800078a:	23ff      	movs	r3, #255	; 0xff
 800078c:	4694      	mov	ip, r2
 800078e:	e764      	b.n	800065a <__aeabi_fadd+0xbe>
 8000790:	2900      	cmp	r1, #0
 8000792:	d0e0      	beq.n	8000756 <__aeabi_fadd+0x1ba>
 8000794:	1bf3      	subs	r3, r6, r7
 8000796:	2f00      	cmp	r7, #0
 8000798:	d03e      	beq.n	8000818 <__aeabi_fadd+0x27c>
 800079a:	2eff      	cmp	r6, #255	; 0xff
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x204>
 800079e:	e777      	b.n	8000690 <__aeabi_fadd+0xf4>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0001      	movs	r1, r0
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4311      	orrs	r1, r2
 80007a8:	468a      	mov	sl, r1
 80007aa:	2201      	movs	r2, #1
 80007ac:	2b1b      	cmp	r3, #27
 80007ae:	dc08      	bgt.n	80007c2 <__aeabi_fadd+0x226>
 80007b0:	4652      	mov	r2, sl
 80007b2:	2120      	movs	r1, #32
 80007b4:	4650      	mov	r0, sl
 80007b6:	40da      	lsrs	r2, r3
 80007b8:	1acb      	subs	r3, r1, r3
 80007ba:	4098      	lsls	r0, r3
 80007bc:	1e43      	subs	r3, r0, #1
 80007be:	4198      	sbcs	r0, r3
 80007c0:	4302      	orrs	r2, r0
 80007c2:	0037      	movs	r7, r6
 80007c4:	1952      	adds	r2, r2, r5
 80007c6:	e784      	b.n	80006d2 <__aeabi_fadd+0x136>
 80007c8:	4a41      	ldr	r2, [pc, #260]	; (80008d0 <__aeabi_fadd+0x334>)
 80007ca:	1a3f      	subs	r7, r7, r0
 80007cc:	4032      	ands	r2, r6
 80007ce:	e732      	b.n	8000636 <__aeabi_fadd+0x9a>
 80007d0:	4653      	mov	r3, sl
 80007d2:	1b5e      	subs	r6, r3, r5
 80007d4:	0173      	lsls	r3, r6, #5
 80007d6:	d42d      	bmi.n	8000834 <__aeabi_fadd+0x298>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x242>
 80007dc:	e717      	b.n	800060e <__aeabi_fadd+0x72>
 80007de:	2200      	movs	r2, #0
 80007e0:	2400      	movs	r4, #0
 80007e2:	2300      	movs	r3, #0
 80007e4:	4694      	mov	ip, r2
 80007e6:	e738      	b.n	800065a <__aeabi_fadd+0xbe>
 80007e8:	2eff      	cmp	r6, #255	; 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x252>
 80007ec:	e74f      	b.n	800068e <__aeabi_fadd+0xf2>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	4650      	mov	r0, sl
 80007f2:	04d2      	lsls	r2, r2, #19
 80007f4:	4310      	orrs	r0, r2
 80007f6:	4682      	mov	sl, r0
 80007f8:	2201      	movs	r2, #1
 80007fa:	2b1b      	cmp	r3, #27
 80007fc:	dc08      	bgt.n	8000810 <__aeabi_fadd+0x274>
 80007fe:	4652      	mov	r2, sl
 8000800:	2420      	movs	r4, #32
 8000802:	4650      	mov	r0, sl
 8000804:	40da      	lsrs	r2, r3
 8000806:	1ae3      	subs	r3, r4, r3
 8000808:	4098      	lsls	r0, r3
 800080a:	1e43      	subs	r3, r0, #1
 800080c:	4198      	sbcs	r0, r3
 800080e:	4302      	orrs	r2, r0
 8000810:	000c      	movs	r4, r1
 8000812:	0037      	movs	r7, r6
 8000814:	1aaa      	subs	r2, r5, r2
 8000816:	e6f5      	b.n	8000604 <__aeabi_fadd+0x68>
 8000818:	2800      	cmp	r0, #0
 800081a:	d093      	beq.n	8000744 <__aeabi_fadd+0x1a8>
 800081c:	3b01      	subs	r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04f      	beq.n	80008c2 <__aeabi_fadd+0x326>
 8000822:	2eff      	cmp	r6, #255	; 0xff
 8000824:	d1c1      	bne.n	80007aa <__aeabi_fadd+0x20e>
 8000826:	4642      	mov	r2, r8
 8000828:	e733      	b.n	8000692 <__aeabi_fadd+0xf6>
 800082a:	2fff      	cmp	r7, #255	; 0xff
 800082c:	d0ac      	beq.n	8000788 <__aeabi_fadd+0x1ec>
 800082e:	4455      	add	r5, sl
 8000830:	086a      	lsrs	r2, r5, #1
 8000832:	e7a4      	b.n	800077e <__aeabi_fadd+0x1e2>
 8000834:	4653      	mov	r3, sl
 8000836:	000c      	movs	r4, r1
 8000838:	1aee      	subs	r6, r5, r3
 800083a:	e6e8      	b.n	800060e <__aeabi_fadd+0x72>
 800083c:	4653      	mov	r3, sl
 800083e:	2b00      	cmp	r3, #0
 8000840:	d128      	bne.n	8000894 <__aeabi_fadd+0x2f8>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x2ac>
 8000846:	e722      	b.n	800068e <__aeabi_fadd+0xf2>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	03db      	lsls	r3, r3, #15
 800084c:	469c      	mov	ip, r3
 800084e:	2400      	movs	r4, #0
 8000850:	23ff      	movs	r3, #255	; 0xff
 8000852:	e702      	b.n	800065a <__aeabi_fadd+0xbe>
 8000854:	002a      	movs	r2, r5
 8000856:	4452      	add	r2, sl
 8000858:	e73b      	b.n	80006d2 <__aeabi_fadd+0x136>
 800085a:	4653      	mov	r3, sl
 800085c:	1b5a      	subs	r2, r3, r5
 800085e:	e6d1      	b.n	8000604 <__aeabi_fadd+0x68>
 8000860:	2800      	cmp	r0, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x2ca>
 8000864:	e714      	b.n	8000690 <__aeabi_fadd+0xf4>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x2d0>
 800086a:	e712      	b.n	8000692 <__aeabi_fadd+0xf6>
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	03db      	lsls	r3, r3, #15
 8000870:	421a      	tst	r2, r3
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x2da>
 8000874:	e70d      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000876:	4641      	mov	r1, r8
 8000878:	4219      	tst	r1, r3
 800087a:	d000      	beq.n	800087e <__aeabi_fadd+0x2e2>
 800087c:	e709      	b.n	8000692 <__aeabi_fadd+0xf6>
 800087e:	4642      	mov	r2, r8
 8000880:	e707      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000882:	000c      	movs	r4, r1
 8000884:	0037      	movs	r7, r6
 8000886:	1aaa      	subs	r2, r5, r2
 8000888:	e6bc      	b.n	8000604 <__aeabi_fadd+0x68>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d013      	beq.n	80008b6 <__aeabi_fadd+0x31a>
 800088e:	000c      	movs	r4, r1
 8000890:	46c4      	mov	ip, r8
 8000892:	e6e2      	b.n	800065a <__aeabi_fadd+0xbe>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0x2fe>
 8000898:	e6fb      	b.n	8000692 <__aeabi_fadd+0xf6>
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	03db      	lsls	r3, r3, #15
 800089e:	421a      	tst	r2, r3
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x308>
 80008a2:	e6f6      	b.n	8000692 <__aeabi_fadd+0xf6>
 80008a4:	4640      	mov	r0, r8
 80008a6:	4218      	tst	r0, r3
 80008a8:	d000      	beq.n	80008ac <__aeabi_fadd+0x310>
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0xf6>
 80008ac:	000c      	movs	r4, r1
 80008ae:	e6ef      	b.n	8000690 <__aeabi_fadd+0xf4>
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0x31a>
 80008b4:	e763      	b.n	800077e <__aeabi_fadd+0x1e2>
 80008b6:	2200      	movs	r2, #0
 80008b8:	2400      	movs	r4, #0
 80008ba:	4694      	mov	ip, r2
 80008bc:	e6cd      	b.n	800065a <__aeabi_fadd+0xbe>
 80008be:	46c4      	mov	ip, r8
 80008c0:	e6cb      	b.n	800065a <__aeabi_fadd+0xbe>
 80008c2:	002a      	movs	r2, r5
 80008c4:	0037      	movs	r7, r6
 80008c6:	4452      	add	r2, sl
 80008c8:	e703      	b.n	80006d2 <__aeabi_fadd+0x136>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	7dffffff 	.word	0x7dffffff
 80008d0:	fbffffff 	.word	0xfbffffff

080008d4 <__aeabi_fdiv>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	464f      	mov	r7, r9
 80008d8:	4646      	mov	r6, r8
 80008da:	46d6      	mov	lr, sl
 80008dc:	0245      	lsls	r5, r0, #9
 80008de:	b5c0      	push	{r6, r7, lr}
 80008e0:	0047      	lsls	r7, r0, #1
 80008e2:	1c0c      	adds	r4, r1, #0
 80008e4:	0a6d      	lsrs	r5, r5, #9
 80008e6:	0e3f      	lsrs	r7, r7, #24
 80008e8:	0fc6      	lsrs	r6, r0, #31
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d066      	beq.n	80009bc <__aeabi_fdiv+0xe8>
 80008ee:	2fff      	cmp	r7, #255	; 0xff
 80008f0:	d06c      	beq.n	80009cc <__aeabi_fdiv+0xf8>
 80008f2:	2300      	movs	r3, #0
 80008f4:	00ea      	lsls	r2, r5, #3
 80008f6:	2580      	movs	r5, #128	; 0x80
 80008f8:	4699      	mov	r9, r3
 80008fa:	469a      	mov	sl, r3
 80008fc:	04ed      	lsls	r5, r5, #19
 80008fe:	4315      	orrs	r5, r2
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0061      	lsls	r1, r4, #1
 8000906:	0a43      	lsrs	r3, r0, #9
 8000908:	4698      	mov	r8, r3
 800090a:	0e09      	lsrs	r1, r1, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2900      	cmp	r1, #0
 8000910:	d048      	beq.n	80009a4 <__aeabi_fdiv+0xd0>
 8000912:	29ff      	cmp	r1, #255	; 0xff
 8000914:	d010      	beq.n	8000938 <__aeabi_fdiv+0x64>
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	00d8      	lsls	r0, r3, #3
 800091a:	04d2      	lsls	r2, r2, #19
 800091c:	4302      	orrs	r2, r0
 800091e:	4690      	mov	r8, r2
 8000920:	2000      	movs	r0, #0
 8000922:	397f      	subs	r1, #127	; 0x7f
 8000924:	464a      	mov	r2, r9
 8000926:	0033      	movs	r3, r6
 8000928:	1a7f      	subs	r7, r7, r1
 800092a:	4302      	orrs	r2, r0
 800092c:	496c      	ldr	r1, [pc, #432]	; (8000ae0 <__aeabi_fdiv+0x20c>)
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	588a      	ldr	r2, [r1, r2]
 8000932:	4063      	eors	r3, r4
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4697      	mov	pc, r2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d16d      	bne.n	8000a18 <__aeabi_fdiv+0x144>
 800093c:	2002      	movs	r0, #2
 800093e:	3fff      	subs	r7, #255	; 0xff
 8000940:	e033      	b.n	80009aa <__aeabi_fdiv+0xd6>
 8000942:	2300      	movs	r3, #0
 8000944:	4698      	mov	r8, r3
 8000946:	0026      	movs	r6, r4
 8000948:	4645      	mov	r5, r8
 800094a:	4682      	mov	sl, r0
 800094c:	4653      	mov	r3, sl
 800094e:	2b02      	cmp	r3, #2
 8000950:	d100      	bne.n	8000954 <__aeabi_fdiv+0x80>
 8000952:	e07f      	b.n	8000a54 <__aeabi_fdiv+0x180>
 8000954:	2b03      	cmp	r3, #3
 8000956:	d100      	bne.n	800095a <__aeabi_fdiv+0x86>
 8000958:	e094      	b.n	8000a84 <__aeabi_fdiv+0x1b0>
 800095a:	2b01      	cmp	r3, #1
 800095c:	d017      	beq.n	800098e <__aeabi_fdiv+0xba>
 800095e:	0038      	movs	r0, r7
 8000960:	307f      	adds	r0, #127	; 0x7f
 8000962:	2800      	cmp	r0, #0
 8000964:	dd5f      	ble.n	8000a26 <__aeabi_fdiv+0x152>
 8000966:	076b      	lsls	r3, r5, #29
 8000968:	d004      	beq.n	8000974 <__aeabi_fdiv+0xa0>
 800096a:	230f      	movs	r3, #15
 800096c:	402b      	ands	r3, r5
 800096e:	2b04      	cmp	r3, #4
 8000970:	d000      	beq.n	8000974 <__aeabi_fdiv+0xa0>
 8000972:	3504      	adds	r5, #4
 8000974:	012b      	lsls	r3, r5, #4
 8000976:	d503      	bpl.n	8000980 <__aeabi_fdiv+0xac>
 8000978:	0038      	movs	r0, r7
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <__aeabi_fdiv+0x210>)
 800097c:	3080      	adds	r0, #128	; 0x80
 800097e:	401d      	ands	r5, r3
 8000980:	28fe      	cmp	r0, #254	; 0xfe
 8000982:	dc67      	bgt.n	8000a54 <__aeabi_fdiv+0x180>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2c0      	uxtb	r0, r0
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xbe>
 800098c:	001e      	movs	r6, r3
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d12b      	bne.n	8000a00 <__aeabi_fdiv+0x12c>
 80009a8:	2001      	movs	r0, #1
 80009aa:	464a      	mov	r2, r9
 80009ac:	0033      	movs	r3, r6
 80009ae:	494e      	ldr	r1, [pc, #312]	; (8000ae8 <__aeabi_fdiv+0x214>)
 80009b0:	4302      	orrs	r2, r0
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	588a      	ldr	r2, [r1, r2]
 80009b6:	4063      	eors	r3, r4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4697      	mov	pc, r2
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d113      	bne.n	80009e8 <__aeabi_fdiv+0x114>
 80009c0:	2304      	movs	r3, #4
 80009c2:	4699      	mov	r9, r3
 80009c4:	3b03      	subs	r3, #3
 80009c6:	2700      	movs	r7, #0
 80009c8:	469a      	mov	sl, r3
 80009ca:	e79a      	b.n	8000902 <__aeabi_fdiv+0x2e>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d105      	bne.n	80009dc <__aeabi_fdiv+0x108>
 80009d0:	2308      	movs	r3, #8
 80009d2:	4699      	mov	r9, r3
 80009d4:	3b06      	subs	r3, #6
 80009d6:	27ff      	movs	r7, #255	; 0xff
 80009d8:	469a      	mov	sl, r3
 80009da:	e792      	b.n	8000902 <__aeabi_fdiv+0x2e>
 80009dc:	230c      	movs	r3, #12
 80009de:	4699      	mov	r9, r3
 80009e0:	3b09      	subs	r3, #9
 80009e2:	27ff      	movs	r7, #255	; 0xff
 80009e4:	469a      	mov	sl, r3
 80009e6:	e78c      	b.n	8000902 <__aeabi_fdiv+0x2e>
 80009e8:	0028      	movs	r0, r5
 80009ea:	f001 ff1f 	bl	800282c <__clzsi2>
 80009ee:	2776      	movs	r7, #118	; 0x76
 80009f0:	1f43      	subs	r3, r0, #5
 80009f2:	409d      	lsls	r5, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	427f      	negs	r7, r7
 80009f8:	4699      	mov	r9, r3
 80009fa:	469a      	mov	sl, r3
 80009fc:	1a3f      	subs	r7, r7, r0
 80009fe:	e780      	b.n	8000902 <__aeabi_fdiv+0x2e>
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 ff13 	bl	800282c <__clzsi2>
 8000a06:	4642      	mov	r2, r8
 8000a08:	1f43      	subs	r3, r0, #5
 8000a0a:	2176      	movs	r1, #118	; 0x76
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	4249      	negs	r1, r1
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	4690      	mov	r8, r2
 8000a14:	2000      	movs	r0, #0
 8000a16:	e785      	b.n	8000924 <__aeabi_fdiv+0x50>
 8000a18:	21ff      	movs	r1, #255	; 0xff
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	e782      	b.n	8000924 <__aeabi_fdiv+0x50>
 8000a1e:	001e      	movs	r6, r3
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	2500      	movs	r5, #0
 8000a24:	e7b5      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a26:	2301      	movs	r3, #1
 8000a28:	1a1b      	subs	r3, r3, r0
 8000a2a:	2b1b      	cmp	r3, #27
 8000a2c:	dcaf      	bgt.n	800098e <__aeabi_fdiv+0xba>
 8000a2e:	379e      	adds	r7, #158	; 0x9e
 8000a30:	0029      	movs	r1, r5
 8000a32:	40bd      	lsls	r5, r7
 8000a34:	40d9      	lsrs	r1, r3
 8000a36:	1e6a      	subs	r2, r5, #1
 8000a38:	4195      	sbcs	r5, r2
 8000a3a:	430d      	orrs	r5, r1
 8000a3c:	076b      	lsls	r3, r5, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fdiv+0x176>
 8000a40:	230f      	movs	r3, #15
 8000a42:	402b      	ands	r3, r5
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fdiv+0x176>
 8000a48:	3504      	adds	r5, #4
 8000a4a:	016b      	lsls	r3, r5, #5
 8000a4c:	d544      	bpl.n	8000ad8 <__aeabi_fdiv+0x204>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2500      	movs	r5, #0
 8000a52:	e79e      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	2500      	movs	r5, #0
 8000a58:	e79b      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a5a:	2580      	movs	r5, #128	; 0x80
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	03ed      	lsls	r5, r5, #15
 8000a62:	e796      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a64:	2300      	movs	r3, #0
 8000a66:	4698      	mov	r8, r3
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	03c0      	lsls	r0, r0, #15
 8000a6c:	4205      	tst	r5, r0
 8000a6e:	d009      	beq.n	8000a84 <__aeabi_fdiv+0x1b0>
 8000a70:	4643      	mov	r3, r8
 8000a72:	4203      	tst	r3, r0
 8000a74:	d106      	bne.n	8000a84 <__aeabi_fdiv+0x1b0>
 8000a76:	4645      	mov	r5, r8
 8000a78:	4305      	orrs	r5, r0
 8000a7a:	026d      	lsls	r5, r5, #9
 8000a7c:	0026      	movs	r6, r4
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	0a6d      	lsrs	r5, r5, #9
 8000a82:	e786      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a84:	2080      	movs	r0, #128	; 0x80
 8000a86:	03c0      	lsls	r0, r0, #15
 8000a88:	4305      	orrs	r5, r0
 8000a8a:	026d      	lsls	r5, r5, #9
 8000a8c:	20ff      	movs	r0, #255	; 0xff
 8000a8e:	0a6d      	lsrs	r5, r5, #9
 8000a90:	e77f      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a92:	4641      	mov	r1, r8
 8000a94:	016a      	lsls	r2, r5, #5
 8000a96:	0148      	lsls	r0, r1, #5
 8000a98:	4282      	cmp	r2, r0
 8000a9a:	d219      	bcs.n	8000ad0 <__aeabi_fdiv+0x1fc>
 8000a9c:	211b      	movs	r1, #27
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	3f01      	subs	r7, #1
 8000aa2:	2601      	movs	r6, #1
 8000aa4:	0014      	movs	r4, r2
 8000aa6:	006d      	lsls	r5, r5, #1
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	db01      	blt.n	8000ab2 <__aeabi_fdiv+0x1de>
 8000aae:	4290      	cmp	r0, r2
 8000ab0:	d801      	bhi.n	8000ab6 <__aeabi_fdiv+0x1e2>
 8000ab2:	1a12      	subs	r2, r2, r0
 8000ab4:	4335      	orrs	r5, r6
 8000ab6:	3901      	subs	r1, #1
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	d1f3      	bne.n	8000aa4 <__aeabi_fdiv+0x1d0>
 8000abc:	1e50      	subs	r0, r2, #1
 8000abe:	4182      	sbcs	r2, r0
 8000ac0:	0038      	movs	r0, r7
 8000ac2:	307f      	adds	r0, #127	; 0x7f
 8000ac4:	001e      	movs	r6, r3
 8000ac6:	4315      	orrs	r5, r2
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	dd00      	ble.n	8000ace <__aeabi_fdiv+0x1fa>
 8000acc:	e74b      	b.n	8000966 <__aeabi_fdiv+0x92>
 8000ace:	e7aa      	b.n	8000a26 <__aeabi_fdiv+0x152>
 8000ad0:	211a      	movs	r1, #26
 8000ad2:	2501      	movs	r5, #1
 8000ad4:	1a12      	subs	r2, r2, r0
 8000ad6:	e7e4      	b.n	8000aa2 <__aeabi_fdiv+0x1ce>
 8000ad8:	01ad      	lsls	r5, r5, #6
 8000ada:	2000      	movs	r0, #0
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	e758      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000ae0:	0800e238 	.word	0x0800e238
 8000ae4:	f7ffffff 	.word	0xf7ffffff
 8000ae8:	0800e278 	.word	0x0800e278

08000aec <__aeabi_dadd>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	46d6      	mov	lr, sl
 8000af2:	4646      	mov	r6, r8
 8000af4:	000d      	movs	r5, r1
 8000af6:	0001      	movs	r1, r0
 8000af8:	0018      	movs	r0, r3
 8000afa:	b5c0      	push	{r6, r7, lr}
 8000afc:	0017      	movs	r7, r2
 8000afe:	032b      	lsls	r3, r5, #12
 8000b00:	0a5a      	lsrs	r2, r3, #9
 8000b02:	0f4b      	lsrs	r3, r1, #29
 8000b04:	4313      	orrs	r3, r2
 8000b06:	00ca      	lsls	r2, r1, #3
 8000b08:	4691      	mov	r9, r2
 8000b0a:	0302      	lsls	r2, r0, #12
 8000b0c:	006e      	lsls	r6, r5, #1
 8000b0e:	0041      	lsls	r1, r0, #1
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	0fec      	lsrs	r4, r5, #31
 8000b14:	0f7d      	lsrs	r5, r7, #29
 8000b16:	4315      	orrs	r5, r2
 8000b18:	0d76      	lsrs	r6, r6, #21
 8000b1a:	0d49      	lsrs	r1, r1, #21
 8000b1c:	0fc0      	lsrs	r0, r0, #31
 8000b1e:	4682      	mov	sl, r0
 8000b20:	46ac      	mov	ip, r5
 8000b22:	00ff      	lsls	r7, r7, #3
 8000b24:	1a72      	subs	r2, r6, r1
 8000b26:	4284      	cmp	r4, r0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x40>
 8000b2a:	e098      	b.n	8000c5e <__aeabi_dadd+0x172>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	dc00      	bgt.n	8000b32 <__aeabi_dadd+0x46>
 8000b30:	e081      	b.n	8000c36 <__aeabi_dadd+0x14a>
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4c>
 8000b36:	e0b6      	b.n	8000ca6 <__aeabi_dadd+0x1ba>
 8000b38:	49c9      	ldr	r1, [pc, #804]	; (8000e60 <__aeabi_dadd+0x374>)
 8000b3a:	428e      	cmp	r6, r1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x54>
 8000b3e:	e172      	b.n	8000e26 <__aeabi_dadd+0x33a>
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0028      	movs	r0, r5
 8000b44:	0409      	lsls	r1, r1, #16
 8000b46:	4308      	orrs	r0, r1
 8000b48:	4684      	mov	ip, r0
 8000b4a:	2a38      	cmp	r2, #56	; 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x64>
 8000b4e:	e15e      	b.n	8000e0e <__aeabi_dadd+0x322>
 8000b50:	2a1f      	cmp	r2, #31
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x6a>
 8000b54:	e1ee      	b.n	8000f34 <__aeabi_dadd+0x448>
 8000b56:	2020      	movs	r0, #32
 8000b58:	0039      	movs	r1, r7
 8000b5a:	4665      	mov	r5, ip
 8000b5c:	1a80      	subs	r0, r0, r2
 8000b5e:	4087      	lsls	r7, r0
 8000b60:	40d1      	lsrs	r1, r2
 8000b62:	4085      	lsls	r5, r0
 8000b64:	430d      	orrs	r5, r1
 8000b66:	0039      	movs	r1, r7
 8000b68:	1e4f      	subs	r7, r1, #1
 8000b6a:	41b9      	sbcs	r1, r7
 8000b6c:	4667      	mov	r7, ip
 8000b6e:	40d7      	lsrs	r7, r2
 8000b70:	4329      	orrs	r1, r5
 8000b72:	1bdb      	subs	r3, r3, r7
 8000b74:	464a      	mov	r2, r9
 8000b76:	1a55      	subs	r5, r2, r1
 8000b78:	45a9      	cmp	r9, r5
 8000b7a:	4189      	sbcs	r1, r1
 8000b7c:	4249      	negs	r1, r1
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	4643      	mov	r3, r8
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	d400      	bmi.n	8000b8a <__aeabi_dadd+0x9e>
 8000b88:	e0cc      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	0a5b      	lsrs	r3, r3, #9
 8000b90:	4698      	mov	r8, r3
 8000b92:	4643      	mov	r3, r8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0xae>
 8000b98:	e12c      	b.n	8000df4 <__aeabi_dadd+0x308>
 8000b9a:	4640      	mov	r0, r8
 8000b9c:	f001 fe46 	bl	800282c <__clzsi2>
 8000ba0:	0001      	movs	r1, r0
 8000ba2:	3908      	subs	r1, #8
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	0028      	movs	r0, r5
 8000ba8:	4643      	mov	r3, r8
 8000baa:	1a52      	subs	r2, r2, r1
 8000bac:	408b      	lsls	r3, r1
 8000bae:	40d0      	lsrs	r0, r2
 8000bb0:	408d      	lsls	r5, r1
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	428e      	cmp	r6, r1
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0xce>
 8000bb8:	e117      	b.n	8000dea <__aeabi_dadd+0x2fe>
 8000bba:	1b8e      	subs	r6, r1, r6
 8000bbc:	1c72      	adds	r2, r6, #1
 8000bbe:	2a1f      	cmp	r2, #31
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dadd+0xd8>
 8000bc2:	e1a7      	b.n	8000f14 <__aeabi_dadd+0x428>
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	002e      	movs	r6, r5
 8000bca:	1a89      	subs	r1, r1, r2
 8000bcc:	408d      	lsls	r5, r1
 8000bce:	4088      	lsls	r0, r1
 8000bd0:	40d6      	lsrs	r6, r2
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	1e69      	subs	r1, r5, #1
 8000bd6:	418d      	sbcs	r5, r1
 8000bd8:	4330      	orrs	r0, r6
 8000bda:	4698      	mov	r8, r3
 8000bdc:	2600      	movs	r6, #0
 8000bde:	4305      	orrs	r5, r0
 8000be0:	076b      	lsls	r3, r5, #29
 8000be2:	d009      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000be4:	230f      	movs	r3, #15
 8000be6:	402b      	ands	r3, r5
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d005      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000bec:	1d2b      	adds	r3, r5, #4
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	41ad      	sbcs	r5, r5
 8000bf2:	426d      	negs	r5, r5
 8000bf4:	44a8      	add	r8, r5
 8000bf6:	001d      	movs	r5, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	d400      	bmi.n	8000c00 <__aeabi_dadd+0x114>
 8000bfe:	e094      	b.n	8000d2a <__aeabi_dadd+0x23e>
 8000c00:	4b97      	ldr	r3, [pc, #604]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c02:	1c72      	adds	r2, r6, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x11e>
 8000c08:	e09d      	b.n	8000d46 <__aeabi_dadd+0x25a>
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4b95      	ldr	r3, [pc, #596]	; (8000e64 <__aeabi_dadd+0x378>)
 8000c0e:	08ed      	lsrs	r5, r5, #3
 8000c10:	4019      	ands	r1, r3
 8000c12:	000b      	movs	r3, r1
 8000c14:	0552      	lsls	r2, r2, #21
 8000c16:	0749      	lsls	r1, r1, #29
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4329      	orrs	r1, r5
 8000c1c:	0b1b      	lsrs	r3, r3, #12
 8000c1e:	0d52      	lsrs	r2, r2, #21
 8000c20:	0512      	lsls	r2, r2, #20
 8000c22:	4313      	orrs	r3, r2
 8000c24:	07e4      	lsls	r4, r4, #31
 8000c26:	4323      	orrs	r3, r4
 8000c28:	0008      	movs	r0, r1
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	bce0      	pop	{r5, r6, r7}
 8000c2e:	46ba      	mov	sl, r7
 8000c30:	46b1      	mov	r9, r6
 8000c32:	46a8      	mov	r8, r5
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d043      	beq.n	8000cc2 <__aeabi_dadd+0x1d6>
 8000c3a:	1b8a      	subs	r2, r1, r6
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_dadd+0x156>
 8000c40:	e12a      	b.n	8000e98 <__aeabi_dadd+0x3ac>
 8000c42:	464c      	mov	r4, r9
 8000c44:	431c      	orrs	r4, r3
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x15e>
 8000c48:	e1d1      	b.n	8000fee <__aeabi_dadd+0x502>
 8000c4a:	1e54      	subs	r4, r2, #1
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x166>
 8000c50:	e21f      	b.n	8001092 <__aeabi_dadd+0x5a6>
 8000c52:	4d83      	ldr	r5, [pc, #524]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c54:	42aa      	cmp	r2, r5
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x16e>
 8000c58:	e272      	b.n	8001140 <__aeabi_dadd+0x654>
 8000c5a:	0022      	movs	r2, r4
 8000c5c:	e123      	b.n	8000ea6 <__aeabi_dadd+0x3ba>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	dc00      	bgt.n	8000c64 <__aeabi_dadd+0x178>
 8000c62:	e098      	b.n	8000d96 <__aeabi_dadd+0x2aa>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d042      	beq.n	8000cee <__aeabi_dadd+0x202>
 8000c68:	497d      	ldr	r1, [pc, #500]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c6a:	428e      	cmp	r6, r1
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x184>
 8000c6e:	e0da      	b.n	8000e26 <__aeabi_dadd+0x33a>
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0028      	movs	r0, r5
 8000c74:	0409      	lsls	r1, r1, #16
 8000c76:	4308      	orrs	r0, r1
 8000c78:	4684      	mov	ip, r0
 8000c7a:	2a38      	cmp	r2, #56	; 0x38
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0x194>
 8000c7e:	e129      	b.n	8000ed4 <__aeabi_dadd+0x3e8>
 8000c80:	2a1f      	cmp	r2, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x19a>
 8000c84:	e187      	b.n	8000f96 <__aeabi_dadd+0x4aa>
 8000c86:	0011      	movs	r1, r2
 8000c88:	4665      	mov	r5, ip
 8000c8a:	3920      	subs	r1, #32
 8000c8c:	40cd      	lsrs	r5, r1
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d004      	beq.n	8000c9c <__aeabi_dadd+0x1b0>
 8000c92:	2040      	movs	r0, #64	; 0x40
 8000c94:	4661      	mov	r1, ip
 8000c96:	1a82      	subs	r2, r0, r2
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	430f      	orrs	r7, r1
 8000c9c:	0039      	movs	r1, r7
 8000c9e:	1e4f      	subs	r7, r1, #1
 8000ca0:	41b9      	sbcs	r1, r7
 8000ca2:	430d      	orrs	r5, r1
 8000ca4:	e11b      	b.n	8000ede <__aeabi_dadd+0x3f2>
 8000ca6:	0029      	movs	r1, r5
 8000ca8:	4339      	orrs	r1, r7
 8000caa:	d100      	bne.n	8000cae <__aeabi_dadd+0x1c2>
 8000cac:	e0b5      	b.n	8000e1a <__aeabi_dadd+0x32e>
 8000cae:	1e51      	subs	r1, r2, #1
 8000cb0:	2a01      	cmp	r2, #1
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x1ca>
 8000cb4:	e1ab      	b.n	800100e <__aeabi_dadd+0x522>
 8000cb6:	486a      	ldr	r0, [pc, #424]	; (8000e60 <__aeabi_dadd+0x374>)
 8000cb8:	4282      	cmp	r2, r0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x1d2>
 8000cbc:	e1b2      	b.n	8001024 <__aeabi_dadd+0x538>
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	e743      	b.n	8000b4a <__aeabi_dadd+0x5e>
 8000cc2:	4969      	ldr	r1, [pc, #420]	; (8000e68 <__aeabi_dadd+0x37c>)
 8000cc4:	1c75      	adds	r5, r6, #1
 8000cc6:	420d      	tst	r5, r1
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dadd+0x1e0>
 8000cca:	e0cf      	b.n	8000e6c <__aeabi_dadd+0x380>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_dadd+0x1e6>
 8000cd0:	e193      	b.n	8000ffa <__aeabi_dadd+0x50e>
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x1ee>
 8000cd8:	e1d1      	b.n	800107e <__aeabi_dadd+0x592>
 8000cda:	4661      	mov	r1, ip
 8000cdc:	4339      	orrs	r1, r7
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x1f6>
 8000ce0:	e1e3      	b.n	80010aa <__aeabi_dadd+0x5be>
 8000ce2:	4649      	mov	r1, r9
 8000ce4:	0758      	lsls	r0, r3, #29
 8000ce6:	08c9      	lsrs	r1, r1, #3
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	e026      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000cee:	0029      	movs	r1, r5
 8000cf0:	4339      	orrs	r1, r7
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x20a>
 8000cf4:	e091      	b.n	8000e1a <__aeabi_dadd+0x32e>
 8000cf6:	1e51      	subs	r1, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d005      	beq.n	8000d08 <__aeabi_dadd+0x21c>
 8000cfc:	4858      	ldr	r0, [pc, #352]	; (8000e60 <__aeabi_dadd+0x374>)
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x218>
 8000d02:	e18f      	b.n	8001024 <__aeabi_dadd+0x538>
 8000d04:	000a      	movs	r2, r1
 8000d06:	e7b8      	b.n	8000c7a <__aeabi_dadd+0x18e>
 8000d08:	003d      	movs	r5, r7
 8000d0a:	444d      	add	r5, r9
 8000d0c:	454d      	cmp	r5, r9
 8000d0e:	4189      	sbcs	r1, r1
 8000d10:	4463      	add	r3, ip
 8000d12:	4698      	mov	r8, r3
 8000d14:	4249      	negs	r1, r1
 8000d16:	4488      	add	r8, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	2602      	movs	r6, #2
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	d500      	bpl.n	8000d22 <__aeabi_dadd+0x236>
 8000d20:	e0eb      	b.n	8000efa <__aeabi_dadd+0x40e>
 8000d22:	3e01      	subs	r6, #1
 8000d24:	076b      	lsls	r3, r5, #29
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x23e>
 8000d28:	e75c      	b.n	8000be4 <__aeabi_dadd+0xf8>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	08e9      	lsrs	r1, r5, #3
 8000d2e:	075a      	lsls	r2, r3, #29
 8000d30:	4311      	orrs	r1, r2
 8000d32:	0032      	movs	r2, r6
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <__aeabi_dadd+0x374>)
 8000d38:	4282      	cmp	r2, r0
 8000d3a:	d021      	beq.n	8000d80 <__aeabi_dadd+0x294>
 8000d3c:	031b      	lsls	r3, r3, #12
 8000d3e:	0552      	lsls	r2, r2, #21
 8000d40:	0b1b      	lsrs	r3, r3, #12
 8000d42:	0d52      	lsrs	r2, r2, #21
 8000d44:	e76c      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e769      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d4c:	002a      	movs	r2, r5
 8000d4e:	433a      	orrs	r2, r7
 8000d50:	d069      	beq.n	8000e26 <__aeabi_dadd+0x33a>
 8000d52:	464a      	mov	r2, r9
 8000d54:	0758      	lsls	r0, r3, #29
 8000d56:	08d1      	lsrs	r1, r2, #3
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	4308      	orrs	r0, r1
 8000d60:	421a      	tst	r2, r3
 8000d62:	d007      	beq.n	8000d74 <__aeabi_dadd+0x288>
 8000d64:	0029      	movs	r1, r5
 8000d66:	08ed      	lsrs	r5, r5, #3
 8000d68:	421d      	tst	r5, r3
 8000d6a:	d103      	bne.n	8000d74 <__aeabi_dadd+0x288>
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	08ff      	lsrs	r7, r7, #3
 8000d70:	0748      	lsls	r0, r1, #29
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0f43      	lsrs	r3, r0, #29
 8000d76:	00c1      	lsls	r1, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	08c9      	lsrs	r1, r1, #3
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dadd+0x29c>
 8000d86:	e213      	b.n	80011b0 <__aeabi_dadd+0x6c4>
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0312      	lsls	r2, r2, #12
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	031b      	lsls	r3, r3, #12
 8000d90:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <__aeabi_dadd+0x374>)
 8000d92:	0b1b      	lsrs	r3, r3, #12
 8000d94:	e744      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d04b      	beq.n	8000e32 <__aeabi_dadd+0x346>
 8000d9a:	1b8a      	subs	r2, r1, r6
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dadd+0x2b6>
 8000da0:	e0e7      	b.n	8000f72 <__aeabi_dadd+0x486>
 8000da2:	482f      	ldr	r0, [pc, #188]	; (8000e60 <__aeabi_dadd+0x374>)
 8000da4:	4281      	cmp	r1, r0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x2be>
 8000da8:	e195      	b.n	80010d6 <__aeabi_dadd+0x5ea>
 8000daa:	2080      	movs	r0, #128	; 0x80
 8000dac:	0400      	lsls	r0, r0, #16
 8000dae:	4303      	orrs	r3, r0
 8000db0:	2a38      	cmp	r2, #56	; 0x38
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_dadd+0x2ca>
 8000db4:	e143      	b.n	800103e <__aeabi_dadd+0x552>
 8000db6:	2a1f      	cmp	r2, #31
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_dadd+0x2d0>
 8000dba:	e1db      	b.n	8001174 <__aeabi_dadd+0x688>
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	001d      	movs	r5, r3
 8000dc0:	464e      	mov	r6, r9
 8000dc2:	1a80      	subs	r0, r0, r2
 8000dc4:	4085      	lsls	r5, r0
 8000dc6:	40d6      	lsrs	r6, r2
 8000dc8:	4335      	orrs	r5, r6
 8000dca:	464e      	mov	r6, r9
 8000dcc:	4086      	lsls	r6, r0
 8000dce:	0030      	movs	r0, r6
 8000dd0:	40d3      	lsrs	r3, r2
 8000dd2:	1e46      	subs	r6, r0, #1
 8000dd4:	41b0      	sbcs	r0, r6
 8000dd6:	449c      	add	ip, r3
 8000dd8:	4305      	orrs	r5, r0
 8000dda:	19ed      	adds	r5, r5, r7
 8000ddc:	42bd      	cmp	r5, r7
 8000dde:	419b      	sbcs	r3, r3
 8000de0:	425b      	negs	r3, r3
 8000de2:	4463      	add	r3, ip
 8000de4:	4698      	mov	r8, r3
 8000de6:	000e      	movs	r6, r1
 8000de8:	e07f      	b.n	8000eea <__aeabi_dadd+0x3fe>
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <__aeabi_dadd+0x378>)
 8000dec:	1a76      	subs	r6, r6, r1
 8000dee:	4013      	ands	r3, r2
 8000df0:	4698      	mov	r8, r3
 8000df2:	e6f5      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000df4:	0028      	movs	r0, r5
 8000df6:	f001 fd19 	bl	800282c <__clzsi2>
 8000dfa:	0001      	movs	r1, r0
 8000dfc:	3118      	adds	r1, #24
 8000dfe:	291f      	cmp	r1, #31
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x318>
 8000e02:	e6cf      	b.n	8000ba4 <__aeabi_dadd+0xb8>
 8000e04:	002b      	movs	r3, r5
 8000e06:	3808      	subs	r0, #8
 8000e08:	4083      	lsls	r3, r0
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	e6d2      	b.n	8000bb4 <__aeabi_dadd+0xc8>
 8000e0e:	4662      	mov	r2, ip
 8000e10:	433a      	orrs	r2, r7
 8000e12:	0011      	movs	r1, r2
 8000e14:	1e4f      	subs	r7, r1, #1
 8000e16:	41b9      	sbcs	r1, r7
 8000e18:	e6ac      	b.n	8000b74 <__aeabi_dadd+0x88>
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	0758      	lsls	r0, r3, #29
 8000e1e:	08c9      	lsrs	r1, r1, #3
 8000e20:	4301      	orrs	r1, r0
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	e787      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000e26:	4649      	mov	r1, r9
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	08c9      	lsrs	r1, r1, #3
 8000e2c:	4311      	orrs	r1, r2
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	e7a6      	b.n	8000d80 <__aeabi_dadd+0x294>
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <__aeabi_dadd+0x37c>)
 8000e34:	1c70      	adds	r0, r6, #1
 8000e36:	4208      	tst	r0, r1
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x350>
 8000e3a:	e0bb      	b.n	8000fb4 <__aeabi_dadd+0x4c8>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x356>
 8000e40:	e114      	b.n	800106c <__aeabi_dadd+0x580>
 8000e42:	4649      	mov	r1, r9
 8000e44:	4319      	orrs	r1, r3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dadd+0x35e>
 8000e48:	e175      	b.n	8001136 <__aeabi_dadd+0x64a>
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	4339      	orrs	r1, r7
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x366>
 8000e50:	e17e      	b.n	8001150 <__aeabi_dadd+0x664>
 8000e52:	4649      	mov	r1, r9
 8000e54:	0758      	lsls	r0, r3, #29
 8000e56:	08c9      	lsrs	r1, r1, #3
 8000e58:	4301      	orrs	r1, r0
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	e76e      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	ff7fffff 	.word	0xff7fffff
 8000e68:	000007fe 	.word	0x000007fe
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	1bcd      	subs	r5, r1, r7
 8000e70:	4661      	mov	r1, ip
 8000e72:	1a58      	subs	r0, r3, r1
 8000e74:	45a9      	cmp	r9, r5
 8000e76:	4189      	sbcs	r1, r1
 8000e78:	4249      	negs	r1, r1
 8000e7a:	4688      	mov	r8, r1
 8000e7c:	0001      	movs	r1, r0
 8000e7e:	4640      	mov	r0, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	4688      	mov	r8, r1
 8000e84:	0209      	lsls	r1, r1, #8
 8000e86:	d500      	bpl.n	8000e8a <__aeabi_dadd+0x39e>
 8000e88:	e0a6      	b.n	8000fd8 <__aeabi_dadd+0x4ec>
 8000e8a:	4641      	mov	r1, r8
 8000e8c:	4329      	orrs	r1, r5
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x3a6>
 8000e90:	e67f      	b.n	8000b92 <__aeabi_dadd+0xa6>
 8000e92:	2300      	movs	r3, #0
 8000e94:	2400      	movs	r4, #0
 8000e96:	e751      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000e98:	4cc7      	ldr	r4, [pc, #796]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x3b4>
 8000e9e:	e0c7      	b.n	8001030 <__aeabi_dadd+0x544>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	0424      	lsls	r4, r4, #16
 8000ea4:	4323      	orrs	r3, r4
 8000ea6:	2a38      	cmp	r2, #56	; 0x38
 8000ea8:	dc54      	bgt.n	8000f54 <__aeabi_dadd+0x468>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x3c4>
 8000eae:	e0cc      	b.n	800104a <__aeabi_dadd+0x55e>
 8000eb0:	2420      	movs	r4, #32
 8000eb2:	4648      	mov	r0, r9
 8000eb4:	1aa4      	subs	r4, r4, r2
 8000eb6:	001d      	movs	r5, r3
 8000eb8:	464e      	mov	r6, r9
 8000eba:	40a0      	lsls	r0, r4
 8000ebc:	40d6      	lsrs	r6, r2
 8000ebe:	40a5      	lsls	r5, r4
 8000ec0:	0004      	movs	r4, r0
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	4335      	orrs	r5, r6
 8000ec8:	1e66      	subs	r6, r4, #1
 8000eca:	41b4      	sbcs	r4, r6
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	469c      	mov	ip, r3
 8000ed0:	4325      	orrs	r5, r4
 8000ed2:	e044      	b.n	8000f5e <__aeabi_dadd+0x472>
 8000ed4:	4662      	mov	r2, ip
 8000ed6:	433a      	orrs	r2, r7
 8000ed8:	0015      	movs	r5, r2
 8000eda:	1e6f      	subs	r7, r5, #1
 8000edc:	41bd      	sbcs	r5, r7
 8000ede:	444d      	add	r5, r9
 8000ee0:	454d      	cmp	r5, r9
 8000ee2:	4189      	sbcs	r1, r1
 8000ee4:	4249      	negs	r1, r1
 8000ee6:	4688      	mov	r8, r1
 8000ee8:	4498      	add	r8, r3
 8000eea:	4643      	mov	r3, r8
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	d400      	bmi.n	8000ef2 <__aeabi_dadd+0x406>
 8000ef0:	e718      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000ef2:	4bb1      	ldr	r3, [pc, #708]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000ef4:	3601      	adds	r6, #1
 8000ef6:	429e      	cmp	r6, r3
 8000ef8:	d049      	beq.n	8000f8e <__aeabi_dadd+0x4a2>
 8000efa:	4642      	mov	r2, r8
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <__aeabi_dadd+0x6d0>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	401a      	ands	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	086a      	lsrs	r2, r5, #1
 8000f06:	400d      	ands	r5, r1
 8000f08:	4315      	orrs	r5, r2
 8000f0a:	07d9      	lsls	r1, r3, #31
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	4698      	mov	r8, r3
 8000f10:	430d      	orrs	r5, r1
 8000f12:	e665      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000f14:	0018      	movs	r0, r3
 8000f16:	3e1f      	subs	r6, #31
 8000f18:	40f0      	lsrs	r0, r6
 8000f1a:	2a20      	cmp	r2, #32
 8000f1c:	d003      	beq.n	8000f26 <__aeabi_dadd+0x43a>
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	1a8a      	subs	r2, r1, r2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	431d      	orrs	r5, r3
 8000f26:	1e69      	subs	r1, r5, #1
 8000f28:	418d      	sbcs	r5, r1
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	4698      	mov	r8, r3
 8000f30:	4305      	orrs	r5, r0
 8000f32:	e6f7      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000f34:	0011      	movs	r1, r2
 8000f36:	4665      	mov	r5, ip
 8000f38:	3920      	subs	r1, #32
 8000f3a:	40cd      	lsrs	r5, r1
 8000f3c:	2a20      	cmp	r2, #32
 8000f3e:	d004      	beq.n	8000f4a <__aeabi_dadd+0x45e>
 8000f40:	2040      	movs	r0, #64	; 0x40
 8000f42:	4661      	mov	r1, ip
 8000f44:	1a82      	subs	r2, r0, r2
 8000f46:	4091      	lsls	r1, r2
 8000f48:	430f      	orrs	r7, r1
 8000f4a:	0039      	movs	r1, r7
 8000f4c:	1e4f      	subs	r7, r1, #1
 8000f4e:	41b9      	sbcs	r1, r7
 8000f50:	4329      	orrs	r1, r5
 8000f52:	e60f      	b.n	8000b74 <__aeabi_dadd+0x88>
 8000f54:	464a      	mov	r2, r9
 8000f56:	4313      	orrs	r3, r2
 8000f58:	001d      	movs	r5, r3
 8000f5a:	1e6b      	subs	r3, r5, #1
 8000f5c:	419d      	sbcs	r5, r3
 8000f5e:	1b7d      	subs	r5, r7, r5
 8000f60:	42af      	cmp	r7, r5
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	4662      	mov	r2, ip
 8000f66:	425b      	negs	r3, r3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	4654      	mov	r4, sl
 8000f6e:	000e      	movs	r6, r1
 8000f70:	e607      	b.n	8000b82 <__aeabi_dadd+0x96>
 8000f72:	4648      	mov	r0, r9
 8000f74:	4318      	orrs	r0, r3
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x48e>
 8000f78:	e0b3      	b.n	80010e2 <__aeabi_dadd+0x5f6>
 8000f7a:	1e50      	subs	r0, r2, #1
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x496>
 8000f80:	e10d      	b.n	800119e <__aeabi_dadd+0x6b2>
 8000f82:	4d8d      	ldr	r5, [pc, #564]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x49e>
 8000f88:	e0a5      	b.n	80010d6 <__aeabi_dadd+0x5ea>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	e710      	b.n	8000db0 <__aeabi_dadd+0x2c4>
 8000f8e:	0032      	movs	r2, r6
 8000f90:	2300      	movs	r3, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	e644      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000f96:	2120      	movs	r1, #32
 8000f98:	0038      	movs	r0, r7
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	408f      	lsls	r7, r1
 8000fa0:	408d      	lsls	r5, r1
 8000fa2:	40d0      	lsrs	r0, r2
 8000fa4:	1e79      	subs	r1, r7, #1
 8000fa6:	418f      	sbcs	r7, r1
 8000fa8:	4305      	orrs	r5, r0
 8000faa:	433d      	orrs	r5, r7
 8000fac:	4667      	mov	r7, ip
 8000fae:	40d7      	lsrs	r7, r2
 8000fb0:	19db      	adds	r3, r3, r7
 8000fb2:	e794      	b.n	8000ede <__aeabi_dadd+0x3f2>
 8000fb4:	4a80      	ldr	r2, [pc, #512]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dadd+0x4d0>
 8000fba:	e0ec      	b.n	8001196 <__aeabi_dadd+0x6aa>
 8000fbc:	0039      	movs	r1, r7
 8000fbe:	4449      	add	r1, r9
 8000fc0:	4549      	cmp	r1, r9
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4463      	add	r3, ip
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	07dd      	lsls	r5, r3, #31
 8000fcc:	0849      	lsrs	r1, r1, #1
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	0006      	movs	r6, r0
 8000fd4:	430d      	orrs	r5, r1
 8000fd6:	e6a5      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	1abd      	subs	r5, r7, r2
 8000fdc:	42af      	cmp	r7, r5
 8000fde:	4189      	sbcs	r1, r1
 8000fe0:	4662      	mov	r2, ip
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	1a5b      	subs	r3, r3, r1
 8000fe8:	4698      	mov	r8, r3
 8000fea:	4654      	mov	r4, sl
 8000fec:	e5d1      	b.n	8000b92 <__aeabi_dadd+0xa6>
 8000fee:	076c      	lsls	r4, r5, #29
 8000ff0:	08f9      	lsrs	r1, r7, #3
 8000ff2:	4321      	orrs	r1, r4
 8000ff4:	08eb      	lsrs	r3, r5, #3
 8000ff6:	0004      	movs	r4, r0
 8000ff8:	e69d      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000ffa:	464a      	mov	r2, r9
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	d175      	bne.n	80010ec <__aeabi_dadd+0x600>
 8001000:	4661      	mov	r1, ip
 8001002:	4339      	orrs	r1, r7
 8001004:	d114      	bne.n	8001030 <__aeabi_dadd+0x544>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	2400      	movs	r4, #0
 800100a:	031b      	lsls	r3, r3, #12
 800100c:	e6bc      	b.n	8000d88 <__aeabi_dadd+0x29c>
 800100e:	464a      	mov	r2, r9
 8001010:	1bd5      	subs	r5, r2, r7
 8001012:	45a9      	cmp	r9, r5
 8001014:	4189      	sbcs	r1, r1
 8001016:	4662      	mov	r2, ip
 8001018:	4249      	negs	r1, r1
 800101a:	1a9b      	subs	r3, r3, r2
 800101c:	1a5b      	subs	r3, r3, r1
 800101e:	4698      	mov	r8, r3
 8001020:	2601      	movs	r6, #1
 8001022:	e5ae      	b.n	8000b82 <__aeabi_dadd+0x96>
 8001024:	464a      	mov	r2, r9
 8001026:	08d1      	lsrs	r1, r2, #3
 8001028:	075a      	lsls	r2, r3, #29
 800102a:	4311      	orrs	r1, r2
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	e6a7      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001030:	4663      	mov	r3, ip
 8001032:	08f9      	lsrs	r1, r7, #3
 8001034:	075a      	lsls	r2, r3, #29
 8001036:	4654      	mov	r4, sl
 8001038:	4311      	orrs	r1, r2
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	e6a0      	b.n	8000d80 <__aeabi_dadd+0x294>
 800103e:	464a      	mov	r2, r9
 8001040:	4313      	orrs	r3, r2
 8001042:	001d      	movs	r5, r3
 8001044:	1e6b      	subs	r3, r5, #1
 8001046:	419d      	sbcs	r5, r3
 8001048:	e6c7      	b.n	8000dda <__aeabi_dadd+0x2ee>
 800104a:	0014      	movs	r4, r2
 800104c:	001e      	movs	r6, r3
 800104e:	3c20      	subs	r4, #32
 8001050:	40e6      	lsrs	r6, r4
 8001052:	2a20      	cmp	r2, #32
 8001054:	d005      	beq.n	8001062 <__aeabi_dadd+0x576>
 8001056:	2440      	movs	r4, #64	; 0x40
 8001058:	1aa2      	subs	r2, r4, r2
 800105a:	4093      	lsls	r3, r2
 800105c:	464a      	mov	r2, r9
 800105e:	431a      	orrs	r2, r3
 8001060:	4691      	mov	r9, r2
 8001062:	464d      	mov	r5, r9
 8001064:	1e6b      	subs	r3, r5, #1
 8001066:	419d      	sbcs	r5, r3
 8001068:	4335      	orrs	r5, r6
 800106a:	e778      	b.n	8000f5e <__aeabi_dadd+0x472>
 800106c:	464a      	mov	r2, r9
 800106e:	431a      	orrs	r2, r3
 8001070:	d000      	beq.n	8001074 <__aeabi_dadd+0x588>
 8001072:	e66b      	b.n	8000d4c <__aeabi_dadd+0x260>
 8001074:	076b      	lsls	r3, r5, #29
 8001076:	08f9      	lsrs	r1, r7, #3
 8001078:	4319      	orrs	r1, r3
 800107a:	08eb      	lsrs	r3, r5, #3
 800107c:	e680      	b.n	8000d80 <__aeabi_dadd+0x294>
 800107e:	4661      	mov	r1, ip
 8001080:	4339      	orrs	r1, r7
 8001082:	d054      	beq.n	800112e <__aeabi_dadd+0x642>
 8001084:	4663      	mov	r3, ip
 8001086:	08f9      	lsrs	r1, r7, #3
 8001088:	075c      	lsls	r4, r3, #29
 800108a:	4321      	orrs	r1, r4
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	0004      	movs	r4, r0
 8001090:	e654      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001092:	464a      	mov	r2, r9
 8001094:	1abd      	subs	r5, r7, r2
 8001096:	42af      	cmp	r7, r5
 8001098:	4189      	sbcs	r1, r1
 800109a:	4662      	mov	r2, ip
 800109c:	4249      	negs	r1, r1
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	1a5b      	subs	r3, r3, r1
 80010a2:	4698      	mov	r8, r3
 80010a4:	0004      	movs	r4, r0
 80010a6:	2601      	movs	r6, #1
 80010a8:	e56b      	b.n	8000b82 <__aeabi_dadd+0x96>
 80010aa:	464a      	mov	r2, r9
 80010ac:	1bd5      	subs	r5, r2, r7
 80010ae:	45a9      	cmp	r9, r5
 80010b0:	4189      	sbcs	r1, r1
 80010b2:	4662      	mov	r2, ip
 80010b4:	4249      	negs	r1, r1
 80010b6:	1a9a      	subs	r2, r3, r2
 80010b8:	1a52      	subs	r2, r2, r1
 80010ba:	4690      	mov	r8, r2
 80010bc:	0212      	lsls	r2, r2, #8
 80010be:	d532      	bpl.n	8001126 <__aeabi_dadd+0x63a>
 80010c0:	464a      	mov	r2, r9
 80010c2:	1abd      	subs	r5, r7, r2
 80010c4:	42af      	cmp	r7, r5
 80010c6:	4189      	sbcs	r1, r1
 80010c8:	4662      	mov	r2, ip
 80010ca:	4249      	negs	r1, r1
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	4698      	mov	r8, r3
 80010d2:	0004      	movs	r4, r0
 80010d4:	e584      	b.n	8000be0 <__aeabi_dadd+0xf4>
 80010d6:	4663      	mov	r3, ip
 80010d8:	08f9      	lsrs	r1, r7, #3
 80010da:	075a      	lsls	r2, r3, #29
 80010dc:	4311      	orrs	r1, r2
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	e64e      	b.n	8000d80 <__aeabi_dadd+0x294>
 80010e2:	08f9      	lsrs	r1, r7, #3
 80010e4:	0768      	lsls	r0, r5, #29
 80010e6:	4301      	orrs	r1, r0
 80010e8:	08eb      	lsrs	r3, r5, #3
 80010ea:	e624      	b.n	8000d36 <__aeabi_dadd+0x24a>
 80010ec:	4662      	mov	r2, ip
 80010ee:	433a      	orrs	r2, r7
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dadd+0x608>
 80010f2:	e698      	b.n	8000e26 <__aeabi_dadd+0x33a>
 80010f4:	464a      	mov	r2, r9
 80010f6:	08d1      	lsrs	r1, r2, #3
 80010f8:	075a      	lsls	r2, r3, #29
 80010fa:	4311      	orrs	r1, r2
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	031b      	lsls	r3, r3, #12
 8001102:	421a      	tst	r2, r3
 8001104:	d008      	beq.n	8001118 <__aeabi_dadd+0x62c>
 8001106:	4660      	mov	r0, ip
 8001108:	08c5      	lsrs	r5, r0, #3
 800110a:	421d      	tst	r5, r3
 800110c:	d104      	bne.n	8001118 <__aeabi_dadd+0x62c>
 800110e:	4654      	mov	r4, sl
 8001110:	002a      	movs	r2, r5
 8001112:	08f9      	lsrs	r1, r7, #3
 8001114:	0743      	lsls	r3, r0, #29
 8001116:	4319      	orrs	r1, r3
 8001118:	0f4b      	lsrs	r3, r1, #29
 800111a:	00c9      	lsls	r1, r1, #3
 800111c:	075b      	lsls	r3, r3, #29
 800111e:	08c9      	lsrs	r1, r1, #3
 8001120:	4319      	orrs	r1, r3
 8001122:	0013      	movs	r3, r2
 8001124:	e62c      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001126:	4641      	mov	r1, r8
 8001128:	4329      	orrs	r1, r5
 800112a:	d000      	beq.n	800112e <__aeabi_dadd+0x642>
 800112c:	e5fa      	b.n	8000d24 <__aeabi_dadd+0x238>
 800112e:	2300      	movs	r3, #0
 8001130:	000a      	movs	r2, r1
 8001132:	2400      	movs	r4, #0
 8001134:	e602      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001136:	076b      	lsls	r3, r5, #29
 8001138:	08f9      	lsrs	r1, r7, #3
 800113a:	4319      	orrs	r1, r3
 800113c:	08eb      	lsrs	r3, r5, #3
 800113e:	e5fd      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001140:	4663      	mov	r3, ip
 8001142:	08f9      	lsrs	r1, r7, #3
 8001144:	075b      	lsls	r3, r3, #29
 8001146:	4319      	orrs	r1, r3
 8001148:	4663      	mov	r3, ip
 800114a:	0004      	movs	r4, r0
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	e617      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001150:	003d      	movs	r5, r7
 8001152:	444d      	add	r5, r9
 8001154:	4463      	add	r3, ip
 8001156:	454d      	cmp	r5, r9
 8001158:	4189      	sbcs	r1, r1
 800115a:	4698      	mov	r8, r3
 800115c:	4249      	negs	r1, r1
 800115e:	4488      	add	r8, r1
 8001160:	4643      	mov	r3, r8
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	d400      	bmi.n	8001168 <__aeabi_dadd+0x67c>
 8001166:	e5dd      	b.n	8000d24 <__aeabi_dadd+0x238>
 8001168:	4642      	mov	r2, r8
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <__aeabi_dadd+0x6d0>)
 800116c:	2601      	movs	r6, #1
 800116e:	401a      	ands	r2, r3
 8001170:	4690      	mov	r8, r2
 8001172:	e5d7      	b.n	8000d24 <__aeabi_dadd+0x238>
 8001174:	0010      	movs	r0, r2
 8001176:	001e      	movs	r6, r3
 8001178:	3820      	subs	r0, #32
 800117a:	40c6      	lsrs	r6, r0
 800117c:	2a20      	cmp	r2, #32
 800117e:	d005      	beq.n	800118c <__aeabi_dadd+0x6a0>
 8001180:	2040      	movs	r0, #64	; 0x40
 8001182:	1a82      	subs	r2, r0, r2
 8001184:	4093      	lsls	r3, r2
 8001186:	464a      	mov	r2, r9
 8001188:	431a      	orrs	r2, r3
 800118a:	4691      	mov	r9, r2
 800118c:	464d      	mov	r5, r9
 800118e:	1e6b      	subs	r3, r5, #1
 8001190:	419d      	sbcs	r5, r3
 8001192:	4335      	orrs	r5, r6
 8001194:	e621      	b.n	8000dda <__aeabi_dadd+0x2ee>
 8001196:	0002      	movs	r2, r0
 8001198:	2300      	movs	r3, #0
 800119a:	2100      	movs	r1, #0
 800119c:	e540      	b.n	8000c20 <__aeabi_dadd+0x134>
 800119e:	464a      	mov	r2, r9
 80011a0:	19d5      	adds	r5, r2, r7
 80011a2:	42bd      	cmp	r5, r7
 80011a4:	4189      	sbcs	r1, r1
 80011a6:	4463      	add	r3, ip
 80011a8:	4698      	mov	r8, r3
 80011aa:	4249      	negs	r1, r1
 80011ac:	4488      	add	r8, r1
 80011ae:	e5b3      	b.n	8000d18 <__aeabi_dadd+0x22c>
 80011b0:	2100      	movs	r1, #0
 80011b2:	4a01      	ldr	r2, [pc, #4]	; (80011b8 <__aeabi_dadd+0x6cc>)
 80011b4:	000b      	movs	r3, r1
 80011b6:	e533      	b.n	8000c20 <__aeabi_dadd+0x134>
 80011b8:	000007ff 	.word	0x000007ff
 80011bc:	ff7fffff 	.word	0xff7fffff

080011c0 <__aeabi_ddiv>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	4657      	mov	r7, sl
 80011c4:	464e      	mov	r6, r9
 80011c6:	4645      	mov	r5, r8
 80011c8:	46de      	mov	lr, fp
 80011ca:	b5e0      	push	{r5, r6, r7, lr}
 80011cc:	4681      	mov	r9, r0
 80011ce:	0005      	movs	r5, r0
 80011d0:	030c      	lsls	r4, r1, #12
 80011d2:	0048      	lsls	r0, r1, #1
 80011d4:	4692      	mov	sl, r2
 80011d6:	001f      	movs	r7, r3
 80011d8:	b085      	sub	sp, #20
 80011da:	0b24      	lsrs	r4, r4, #12
 80011dc:	0d40      	lsrs	r0, r0, #21
 80011de:	0fce      	lsrs	r6, r1, #31
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d059      	beq.n	8001298 <__aeabi_ddiv+0xd8>
 80011e4:	4b87      	ldr	r3, [pc, #540]	; (8001404 <__aeabi_ddiv+0x244>)
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x2c>
 80011ea:	e098      	b.n	800131e <__aeabi_ddiv+0x15e>
 80011ec:	0f6b      	lsrs	r3, r5, #29
 80011ee:	00e4      	lsls	r4, r4, #3
 80011f0:	431c      	orrs	r4, r3
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	4323      	orrs	r3, r4
 80011f8:	4698      	mov	r8, r3
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <__aeabi_ddiv+0x248>)
 80011fc:	00ed      	lsls	r5, r5, #3
 80011fe:	469b      	mov	fp, r3
 8001200:	2300      	movs	r3, #0
 8001202:	4699      	mov	r9, r3
 8001204:	4483      	add	fp, r0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	033c      	lsls	r4, r7, #12
 800120a:	007b      	lsls	r3, r7, #1
 800120c:	4650      	mov	r0, sl
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	0fff      	lsrs	r7, r7, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d067      	beq.n	80012e8 <__aeabi_ddiv+0x128>
 8001218:	4a7a      	ldr	r2, [pc, #488]	; (8001404 <__aeabi_ddiv+0x244>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d018      	beq.n	8001250 <__aeabi_ddiv+0x90>
 800121e:	497a      	ldr	r1, [pc, #488]	; (8001408 <__aeabi_ddiv+0x248>)
 8001220:	0f42      	lsrs	r2, r0, #29
 8001222:	468c      	mov	ip, r1
 8001224:	00e4      	lsls	r4, r4, #3
 8001226:	4659      	mov	r1, fp
 8001228:	4314      	orrs	r4, r2
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	4463      	add	r3, ip
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	1acb      	subs	r3, r1, r3
 8001232:	4314      	orrs	r4, r2
 8001234:	469b      	mov	fp, r3
 8001236:	00c2      	lsls	r2, r0, #3
 8001238:	2000      	movs	r0, #0
 800123a:	0033      	movs	r3, r6
 800123c:	407b      	eors	r3, r7
 800123e:	469a      	mov	sl, r3
 8001240:	464b      	mov	r3, r9
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d900      	bls.n	8001248 <__aeabi_ddiv+0x88>
 8001246:	e0ef      	b.n	8001428 <__aeabi_ddiv+0x268>
 8001248:	4970      	ldr	r1, [pc, #448]	; (800140c <__aeabi_ddiv+0x24c>)
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	58cb      	ldr	r3, [r1, r3]
 800124e:	469f      	mov	pc, r3
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <__aeabi_ddiv+0x250>)
 8001252:	4652      	mov	r2, sl
 8001254:	469c      	mov	ip, r3
 8001256:	4322      	orrs	r2, r4
 8001258:	44e3      	add	fp, ip
 800125a:	2a00      	cmp	r2, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_ddiv+0xa0>
 800125e:	e095      	b.n	800138c <__aeabi_ddiv+0x1cc>
 8001260:	4649      	mov	r1, r9
 8001262:	2302      	movs	r3, #2
 8001264:	4319      	orrs	r1, r3
 8001266:	4689      	mov	r9, r1
 8001268:	2400      	movs	r4, #0
 800126a:	2002      	movs	r0, #2
 800126c:	e7e5      	b.n	800123a <__aeabi_ddiv+0x7a>
 800126e:	2300      	movs	r3, #0
 8001270:	2400      	movs	r4, #0
 8001272:	2500      	movs	r5, #0
 8001274:	4652      	mov	r2, sl
 8001276:	051b      	lsls	r3, r3, #20
 8001278:	4323      	orrs	r3, r4
 800127a:	07d2      	lsls	r2, r2, #31
 800127c:	4313      	orrs	r3, r2
 800127e:	0028      	movs	r0, r5
 8001280:	0019      	movs	r1, r3
 8001282:	b005      	add	sp, #20
 8001284:	bcf0      	pop	{r4, r5, r6, r7}
 8001286:	46bb      	mov	fp, r7
 8001288:	46b2      	mov	sl, r6
 800128a:	46a9      	mov	r9, r5
 800128c:	46a0      	mov	r8, r4
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001290:	2400      	movs	r4, #0
 8001292:	2500      	movs	r5, #0
 8001294:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <__aeabi_ddiv+0x244>)
 8001296:	e7ed      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001298:	464b      	mov	r3, r9
 800129a:	4323      	orrs	r3, r4
 800129c:	4698      	mov	r8, r3
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0xe2>
 80012a0:	e089      	b.n	80013b6 <__aeabi_ddiv+0x1f6>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_ddiv+0xe8>
 80012a6:	e1e0      	b.n	800166a <__aeabi_ddiv+0x4aa>
 80012a8:	0020      	movs	r0, r4
 80012aa:	f001 fabf 	bl	800282c <__clzsi2>
 80012ae:	0001      	movs	r1, r0
 80012b0:	0002      	movs	r2, r0
 80012b2:	390b      	subs	r1, #11
 80012b4:	231d      	movs	r3, #29
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	4649      	mov	r1, r9
 80012ba:	0010      	movs	r0, r2
 80012bc:	40d9      	lsrs	r1, r3
 80012be:	3808      	subs	r0, #8
 80012c0:	4084      	lsls	r4, r0
 80012c2:	000b      	movs	r3, r1
 80012c4:	464d      	mov	r5, r9
 80012c6:	4323      	orrs	r3, r4
 80012c8:	4698      	mov	r8, r3
 80012ca:	4085      	lsls	r5, r0
 80012cc:	4851      	ldr	r0, [pc, #324]	; (8001414 <__aeabi_ddiv+0x254>)
 80012ce:	033c      	lsls	r4, r7, #12
 80012d0:	1a83      	subs	r3, r0, r2
 80012d2:	469b      	mov	fp, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	4699      	mov	r9, r3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	007b      	lsls	r3, r7, #1
 80012dc:	4650      	mov	r0, sl
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	0fff      	lsrs	r7, r7, #31
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d197      	bne.n	8001218 <__aeabi_ddiv+0x58>
 80012e8:	4652      	mov	r2, sl
 80012ea:	4322      	orrs	r2, r4
 80012ec:	d055      	beq.n	800139a <__aeabi_ddiv+0x1da>
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_ddiv+0x134>
 80012f2:	e1ca      	b.n	800168a <__aeabi_ddiv+0x4ca>
 80012f4:	0020      	movs	r0, r4
 80012f6:	f001 fa99 	bl	800282c <__clzsi2>
 80012fa:	0002      	movs	r2, r0
 80012fc:	3a0b      	subs	r2, #11
 80012fe:	231d      	movs	r3, #29
 8001300:	0001      	movs	r1, r0
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	4652      	mov	r2, sl
 8001306:	3908      	subs	r1, #8
 8001308:	40da      	lsrs	r2, r3
 800130a:	408c      	lsls	r4, r1
 800130c:	4314      	orrs	r4, r2
 800130e:	4652      	mov	r2, sl
 8001310:	408a      	lsls	r2, r1
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <__aeabi_ddiv+0x258>)
 8001314:	4458      	add	r0, fp
 8001316:	469b      	mov	fp, r3
 8001318:	4483      	add	fp, r0
 800131a:	2000      	movs	r0, #0
 800131c:	e78d      	b.n	800123a <__aeabi_ddiv+0x7a>
 800131e:	464b      	mov	r3, r9
 8001320:	4323      	orrs	r3, r4
 8001322:	4698      	mov	r8, r3
 8001324:	d140      	bne.n	80013a8 <__aeabi_ddiv+0x1e8>
 8001326:	2308      	movs	r3, #8
 8001328:	4699      	mov	r9, r3
 800132a:	3b06      	subs	r3, #6
 800132c:	2500      	movs	r5, #0
 800132e:	4683      	mov	fp, r0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	e769      	b.n	8001208 <__aeabi_ddiv+0x48>
 8001334:	46b2      	mov	sl, r6
 8001336:	9b00      	ldr	r3, [sp, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d0a9      	beq.n	8001290 <__aeabi_ddiv+0xd0>
 800133c:	2b03      	cmp	r3, #3
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x182>
 8001340:	e211      	b.n	8001766 <__aeabi_ddiv+0x5a6>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d093      	beq.n	800126e <__aeabi_ddiv+0xae>
 8001346:	4a35      	ldr	r2, [pc, #212]	; (800141c <__aeabi_ddiv+0x25c>)
 8001348:	445a      	add	r2, fp
 800134a:	2a00      	cmp	r2, #0
 800134c:	dc00      	bgt.n	8001350 <__aeabi_ddiv+0x190>
 800134e:	e13c      	b.n	80015ca <__aeabi_ddiv+0x40a>
 8001350:	076b      	lsls	r3, r5, #29
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x196>
 8001354:	e1a7      	b.n	80016a6 <__aeabi_ddiv+0x4e6>
 8001356:	08ed      	lsrs	r5, r5, #3
 8001358:	4643      	mov	r3, r8
 800135a:	01db      	lsls	r3, r3, #7
 800135c:	d506      	bpl.n	800136c <__aeabi_ddiv+0x1ac>
 800135e:	4642      	mov	r2, r8
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <__aeabi_ddiv+0x260>)
 8001362:	401a      	ands	r2, r3
 8001364:	4690      	mov	r8, r2
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	445a      	add	r2, fp
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <__aeabi_ddiv+0x264>)
 800136e:	429a      	cmp	r2, r3
 8001370:	dc8e      	bgt.n	8001290 <__aeabi_ddiv+0xd0>
 8001372:	4643      	mov	r3, r8
 8001374:	0552      	lsls	r2, r2, #21
 8001376:	0758      	lsls	r0, r3, #29
 8001378:	025c      	lsls	r4, r3, #9
 800137a:	4305      	orrs	r5, r0
 800137c:	0b24      	lsrs	r4, r4, #12
 800137e:	0d53      	lsrs	r3, r2, #21
 8001380:	e778      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001382:	46ba      	mov	sl, r7
 8001384:	46a0      	mov	r8, r4
 8001386:	0015      	movs	r5, r2
 8001388:	9000      	str	r0, [sp, #0]
 800138a:	e7d4      	b.n	8001336 <__aeabi_ddiv+0x176>
 800138c:	464a      	mov	r2, r9
 800138e:	2303      	movs	r3, #3
 8001390:	431a      	orrs	r2, r3
 8001392:	4691      	mov	r9, r2
 8001394:	2003      	movs	r0, #3
 8001396:	4652      	mov	r2, sl
 8001398:	e74f      	b.n	800123a <__aeabi_ddiv+0x7a>
 800139a:	4649      	mov	r1, r9
 800139c:	2301      	movs	r3, #1
 800139e:	4319      	orrs	r1, r3
 80013a0:	4689      	mov	r9, r1
 80013a2:	2400      	movs	r4, #0
 80013a4:	2001      	movs	r0, #1
 80013a6:	e748      	b.n	800123a <__aeabi_ddiv+0x7a>
 80013a8:	230c      	movs	r3, #12
 80013aa:	4699      	mov	r9, r3
 80013ac:	3b09      	subs	r3, #9
 80013ae:	46a0      	mov	r8, r4
 80013b0:	4683      	mov	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	e728      	b.n	8001208 <__aeabi_ddiv+0x48>
 80013b6:	2304      	movs	r3, #4
 80013b8:	4699      	mov	r9, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	469b      	mov	fp, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	2500      	movs	r5, #0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	e720      	b.n	8001208 <__aeabi_ddiv+0x48>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	469a      	mov	sl, r3
 80013cc:	2500      	movs	r5, #0
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <__aeabi_ddiv+0x244>)
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	e74f      	b.n	8001274 <__aeabi_ddiv+0xb4>
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	4641      	mov	r1, r8
 80013d8:	031b      	lsls	r3, r3, #12
 80013da:	4219      	tst	r1, r3
 80013dc:	d008      	beq.n	80013f0 <__aeabi_ddiv+0x230>
 80013de:	421c      	tst	r4, r3
 80013e0:	d106      	bne.n	80013f0 <__aeabi_ddiv+0x230>
 80013e2:	431c      	orrs	r4, r3
 80013e4:	0324      	lsls	r4, r4, #12
 80013e6:	46ba      	mov	sl, r7
 80013e8:	0015      	movs	r5, r2
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__aeabi_ddiv+0x244>)
 80013ec:	0b24      	lsrs	r4, r4, #12
 80013ee:	e741      	b.n	8001274 <__aeabi_ddiv+0xb4>
 80013f0:	2480      	movs	r4, #128	; 0x80
 80013f2:	4643      	mov	r3, r8
 80013f4:	0324      	lsls	r4, r4, #12
 80013f6:	431c      	orrs	r4, r3
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	46b2      	mov	sl, r6
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <__aeabi_ddiv+0x244>)
 80013fe:	0b24      	lsrs	r4, r4, #12
 8001400:	e738      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	000007ff 	.word	0x000007ff
 8001408:	fffffc01 	.word	0xfffffc01
 800140c:	0800e2b8 	.word	0x0800e2b8
 8001410:	fffff801 	.word	0xfffff801
 8001414:	fffffc0d 	.word	0xfffffc0d
 8001418:	000003f3 	.word	0x000003f3
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	4544      	cmp	r4, r8
 800142a:	d200      	bcs.n	800142e <__aeabi_ddiv+0x26e>
 800142c:	e116      	b.n	800165c <__aeabi_ddiv+0x49c>
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x272>
 8001430:	e111      	b.n	8001656 <__aeabi_ddiv+0x496>
 8001432:	2301      	movs	r3, #1
 8001434:	425b      	negs	r3, r3
 8001436:	469c      	mov	ip, r3
 8001438:	002e      	movs	r6, r5
 800143a:	4640      	mov	r0, r8
 800143c:	2500      	movs	r5, #0
 800143e:	44e3      	add	fp, ip
 8001440:	0223      	lsls	r3, r4, #8
 8001442:	0e14      	lsrs	r4, r2, #24
 8001444:	431c      	orrs	r4, r3
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	4699      	mov	r9, r3
 800144a:	0423      	lsls	r3, r4, #16
 800144c:	0c1f      	lsrs	r7, r3, #16
 800144e:	0212      	lsls	r2, r2, #8
 8001450:	4649      	mov	r1, r9
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	9701      	str	r7, [sp, #4]
 8001456:	f7fe ff03 	bl	8000260 <__aeabi_uidivmod>
 800145a:	0002      	movs	r2, r0
 800145c:	437a      	muls	r2, r7
 800145e:	040b      	lsls	r3, r1, #16
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	4680      	mov	r8, r0
 8001464:	4319      	orrs	r1, r3
 8001466:	428a      	cmp	r2, r1
 8001468:	d90b      	bls.n	8001482 <__aeabi_ddiv+0x2c2>
 800146a:	2301      	movs	r3, #1
 800146c:	425b      	negs	r3, r3
 800146e:	469c      	mov	ip, r3
 8001470:	1909      	adds	r1, r1, r4
 8001472:	44e0      	add	r8, ip
 8001474:	428c      	cmp	r4, r1
 8001476:	d804      	bhi.n	8001482 <__aeabi_ddiv+0x2c2>
 8001478:	428a      	cmp	r2, r1
 800147a:	d902      	bls.n	8001482 <__aeabi_ddiv+0x2c2>
 800147c:	1e83      	subs	r3, r0, #2
 800147e:	4698      	mov	r8, r3
 8001480:	1909      	adds	r1, r1, r4
 8001482:	1a88      	subs	r0, r1, r2
 8001484:	4649      	mov	r1, r9
 8001486:	f7fe feeb 	bl	8000260 <__aeabi_uidivmod>
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	468c      	mov	ip, r1
 800148e:	0431      	lsls	r1, r6, #16
 8001490:	4666      	mov	r6, ip
 8001492:	9a01      	ldr	r2, [sp, #4]
 8001494:	0c09      	lsrs	r1, r1, #16
 8001496:	4342      	muls	r2, r0
 8001498:	0003      	movs	r3, r0
 800149a:	4331      	orrs	r1, r6
 800149c:	428a      	cmp	r2, r1
 800149e:	d904      	bls.n	80014aa <__aeabi_ddiv+0x2ea>
 80014a0:	1909      	adds	r1, r1, r4
 80014a2:	3b01      	subs	r3, #1
 80014a4:	428c      	cmp	r4, r1
 80014a6:	d800      	bhi.n	80014aa <__aeabi_ddiv+0x2ea>
 80014a8:	e111      	b.n	80016ce <__aeabi_ddiv+0x50e>
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	4642      	mov	r2, r8
 80014ae:	9e00      	ldr	r6, [sp, #0]
 80014b0:	0412      	lsls	r2, r2, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	0c33      	lsrs	r3, r6, #16
 80014b6:	001f      	movs	r7, r3
 80014b8:	0c10      	lsrs	r0, r2, #16
 80014ba:	4690      	mov	r8, r2
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	0413      	lsls	r3, r2, #16
 80014c0:	0432      	lsls	r2, r6, #16
 80014c2:	0c16      	lsrs	r6, r2, #16
 80014c4:	0032      	movs	r2, r6
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	435a      	muls	r2, r3
 80014ca:	9603      	str	r6, [sp, #12]
 80014cc:	437b      	muls	r3, r7
 80014ce:	4346      	muls	r6, r0
 80014d0:	4378      	muls	r0, r7
 80014d2:	0c17      	lsrs	r7, r2, #16
 80014d4:	46bc      	mov	ip, r7
 80014d6:	199b      	adds	r3, r3, r6
 80014d8:	4463      	add	r3, ip
 80014da:	429e      	cmp	r6, r3
 80014dc:	d903      	bls.n	80014e6 <__aeabi_ddiv+0x326>
 80014de:	2680      	movs	r6, #128	; 0x80
 80014e0:	0276      	lsls	r6, r6, #9
 80014e2:	46b4      	mov	ip, r6
 80014e4:	4460      	add	r0, ip
 80014e6:	0c1e      	lsrs	r6, r3, #16
 80014e8:	1830      	adds	r0, r6, r0
 80014ea:	0416      	lsls	r6, r2, #16
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c36      	lsrs	r6, r6, #16
 80014f0:	199e      	adds	r6, r3, r6
 80014f2:	4281      	cmp	r1, r0
 80014f4:	d200      	bcs.n	80014f8 <__aeabi_ddiv+0x338>
 80014f6:	e09c      	b.n	8001632 <__aeabi_ddiv+0x472>
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x33c>
 80014fa:	e097      	b.n	800162c <__aeabi_ddiv+0x46c>
 80014fc:	1bae      	subs	r6, r5, r6
 80014fe:	1a09      	subs	r1, r1, r0
 8001500:	42b5      	cmp	r5, r6
 8001502:	4180      	sbcs	r0, r0
 8001504:	4240      	negs	r0, r0
 8001506:	1a08      	subs	r0, r1, r0
 8001508:	4284      	cmp	r4, r0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x34e>
 800150c:	e111      	b.n	8001732 <__aeabi_ddiv+0x572>
 800150e:	4649      	mov	r1, r9
 8001510:	f7fe fea6 	bl	8000260 <__aeabi_uidivmod>
 8001514:	9a01      	ldr	r2, [sp, #4]
 8001516:	040b      	lsls	r3, r1, #16
 8001518:	4342      	muls	r2, r0
 800151a:	0c31      	lsrs	r1, r6, #16
 800151c:	0005      	movs	r5, r0
 800151e:	4319      	orrs	r1, r3
 8001520:	428a      	cmp	r2, r1
 8001522:	d907      	bls.n	8001534 <__aeabi_ddiv+0x374>
 8001524:	1909      	adds	r1, r1, r4
 8001526:	3d01      	subs	r5, #1
 8001528:	428c      	cmp	r4, r1
 800152a:	d803      	bhi.n	8001534 <__aeabi_ddiv+0x374>
 800152c:	428a      	cmp	r2, r1
 800152e:	d901      	bls.n	8001534 <__aeabi_ddiv+0x374>
 8001530:	1e85      	subs	r5, r0, #2
 8001532:	1909      	adds	r1, r1, r4
 8001534:	1a88      	subs	r0, r1, r2
 8001536:	4649      	mov	r1, r9
 8001538:	f7fe fe92 	bl	8000260 <__aeabi_uidivmod>
 800153c:	0409      	lsls	r1, r1, #16
 800153e:	468c      	mov	ip, r1
 8001540:	0431      	lsls	r1, r6, #16
 8001542:	4666      	mov	r6, ip
 8001544:	9a01      	ldr	r2, [sp, #4]
 8001546:	0c09      	lsrs	r1, r1, #16
 8001548:	4342      	muls	r2, r0
 800154a:	0003      	movs	r3, r0
 800154c:	4331      	orrs	r1, r6
 800154e:	428a      	cmp	r2, r1
 8001550:	d907      	bls.n	8001562 <__aeabi_ddiv+0x3a2>
 8001552:	1909      	adds	r1, r1, r4
 8001554:	3b01      	subs	r3, #1
 8001556:	428c      	cmp	r4, r1
 8001558:	d803      	bhi.n	8001562 <__aeabi_ddiv+0x3a2>
 800155a:	428a      	cmp	r2, r1
 800155c:	d901      	bls.n	8001562 <__aeabi_ddiv+0x3a2>
 800155e:	1e83      	subs	r3, r0, #2
 8001560:	1909      	adds	r1, r1, r4
 8001562:	9e03      	ldr	r6, [sp, #12]
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	0032      	movs	r2, r6
 8001568:	042d      	lsls	r5, r5, #16
 800156a:	431d      	orrs	r5, r3
 800156c:	9f02      	ldr	r7, [sp, #8]
 800156e:	042b      	lsls	r3, r5, #16
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	435a      	muls	r2, r3
 8001574:	437b      	muls	r3, r7
 8001576:	469c      	mov	ip, r3
 8001578:	0c28      	lsrs	r0, r5, #16
 800157a:	4346      	muls	r6, r0
 800157c:	0c13      	lsrs	r3, r2, #16
 800157e:	44b4      	add	ip, r6
 8001580:	4463      	add	r3, ip
 8001582:	4378      	muls	r0, r7
 8001584:	429e      	cmp	r6, r3
 8001586:	d903      	bls.n	8001590 <__aeabi_ddiv+0x3d0>
 8001588:	2680      	movs	r6, #128	; 0x80
 800158a:	0276      	lsls	r6, r6, #9
 800158c:	46b4      	mov	ip, r6
 800158e:	4460      	add	r0, ip
 8001590:	0c1e      	lsrs	r6, r3, #16
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	1830      	adds	r0, r6, r0
 800159a:	189b      	adds	r3, r3, r2
 800159c:	4281      	cmp	r1, r0
 800159e:	d306      	bcc.n	80015ae <__aeabi_ddiv+0x3ee>
 80015a0:	d002      	beq.n	80015a8 <__aeabi_ddiv+0x3e8>
 80015a2:	2301      	movs	r3, #1
 80015a4:	431d      	orrs	r5, r3
 80015a6:	e6ce      	b.n	8001346 <__aeabi_ddiv+0x186>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_ddiv+0x3ee>
 80015ac:	e6cb      	b.n	8001346 <__aeabi_ddiv+0x186>
 80015ae:	1861      	adds	r1, r4, r1
 80015b0:	1e6e      	subs	r6, r5, #1
 80015b2:	42a1      	cmp	r1, r4
 80015b4:	d200      	bcs.n	80015b8 <__aeabi_ddiv+0x3f8>
 80015b6:	e0a4      	b.n	8001702 <__aeabi_ddiv+0x542>
 80015b8:	4281      	cmp	r1, r0
 80015ba:	d200      	bcs.n	80015be <__aeabi_ddiv+0x3fe>
 80015bc:	e0c9      	b.n	8001752 <__aeabi_ddiv+0x592>
 80015be:	d100      	bne.n	80015c2 <__aeabi_ddiv+0x402>
 80015c0:	e0d9      	b.n	8001776 <__aeabi_ddiv+0x5b6>
 80015c2:	0035      	movs	r5, r6
 80015c4:	e7ed      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 80015c6:	2501      	movs	r5, #1
 80015c8:	426d      	negs	r5, r5
 80015ca:	2101      	movs	r1, #1
 80015cc:	1a89      	subs	r1, r1, r2
 80015ce:	2938      	cmp	r1, #56	; 0x38
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_ddiv+0x414>
 80015d2:	e64c      	b.n	800126e <__aeabi_ddiv+0xae>
 80015d4:	291f      	cmp	r1, #31
 80015d6:	dc00      	bgt.n	80015da <__aeabi_ddiv+0x41a>
 80015d8:	e07f      	b.n	80016da <__aeabi_ddiv+0x51a>
 80015da:	231f      	movs	r3, #31
 80015dc:	425b      	negs	r3, r3
 80015de:	1a9a      	subs	r2, r3, r2
 80015e0:	4643      	mov	r3, r8
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	2920      	cmp	r1, #32
 80015e6:	d004      	beq.n	80015f2 <__aeabi_ddiv+0x432>
 80015e8:	4644      	mov	r4, r8
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <__aeabi_ddiv+0x5c0>)
 80015ec:	445a      	add	r2, fp
 80015ee:	4094      	lsls	r4, r2
 80015f0:	4325      	orrs	r5, r4
 80015f2:	1e6a      	subs	r2, r5, #1
 80015f4:	4195      	sbcs	r5, r2
 80015f6:	2207      	movs	r2, #7
 80015f8:	432b      	orrs	r3, r5
 80015fa:	0015      	movs	r5, r2
 80015fc:	2400      	movs	r4, #0
 80015fe:	401d      	ands	r5, r3
 8001600:	421a      	tst	r2, r3
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x446>
 8001604:	e0a1      	b.n	800174a <__aeabi_ddiv+0x58a>
 8001606:	220f      	movs	r2, #15
 8001608:	2400      	movs	r4, #0
 800160a:	401a      	ands	r2, r3
 800160c:	2a04      	cmp	r2, #4
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x452>
 8001610:	e098      	b.n	8001744 <__aeabi_ddiv+0x584>
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	429a      	cmp	r2, r3
 8001616:	419b      	sbcs	r3, r3
 8001618:	425b      	negs	r3, r3
 800161a:	18e4      	adds	r4, r4, r3
 800161c:	0013      	movs	r3, r2
 800161e:	0222      	lsls	r2, r4, #8
 8001620:	d400      	bmi.n	8001624 <__aeabi_ddiv+0x464>
 8001622:	e08f      	b.n	8001744 <__aeabi_ddiv+0x584>
 8001624:	2301      	movs	r3, #1
 8001626:	2400      	movs	r4, #0
 8001628:	2500      	movs	r5, #0
 800162a:	e623      	b.n	8001274 <__aeabi_ddiv+0xb4>
 800162c:	42b5      	cmp	r5, r6
 800162e:	d300      	bcc.n	8001632 <__aeabi_ddiv+0x472>
 8001630:	e764      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001632:	4643      	mov	r3, r8
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	469c      	mov	ip, r3
 800163a:	4465      	add	r5, ip
 800163c:	001f      	movs	r7, r3
 800163e:	429d      	cmp	r5, r3
 8001640:	419b      	sbcs	r3, r3
 8001642:	425b      	negs	r3, r3
 8001644:	191b      	adds	r3, r3, r4
 8001646:	18c9      	adds	r1, r1, r3
 8001648:	428c      	cmp	r4, r1
 800164a:	d23a      	bcs.n	80016c2 <__aeabi_ddiv+0x502>
 800164c:	4288      	cmp	r0, r1
 800164e:	d863      	bhi.n	8001718 <__aeabi_ddiv+0x558>
 8001650:	d060      	beq.n	8001714 <__aeabi_ddiv+0x554>
 8001652:	4690      	mov	r8, r2
 8001654:	e752      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001656:	42aa      	cmp	r2, r5
 8001658:	d900      	bls.n	800165c <__aeabi_ddiv+0x49c>
 800165a:	e6ea      	b.n	8001432 <__aeabi_ddiv+0x272>
 800165c:	4643      	mov	r3, r8
 800165e:	07de      	lsls	r6, r3, #31
 8001660:	0858      	lsrs	r0, r3, #1
 8001662:	086b      	lsrs	r3, r5, #1
 8001664:	431e      	orrs	r6, r3
 8001666:	07ed      	lsls	r5, r5, #31
 8001668:	e6ea      	b.n	8001440 <__aeabi_ddiv+0x280>
 800166a:	4648      	mov	r0, r9
 800166c:	f001 f8de 	bl	800282c <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	0002      	movs	r2, r0
 8001674:	3115      	adds	r1, #21
 8001676:	3220      	adds	r2, #32
 8001678:	291c      	cmp	r1, #28
 800167a:	dc00      	bgt.n	800167e <__aeabi_ddiv+0x4be>
 800167c:	e61a      	b.n	80012b4 <__aeabi_ddiv+0xf4>
 800167e:	464b      	mov	r3, r9
 8001680:	3808      	subs	r0, #8
 8001682:	4083      	lsls	r3, r0
 8001684:	2500      	movs	r5, #0
 8001686:	4698      	mov	r8, r3
 8001688:	e620      	b.n	80012cc <__aeabi_ddiv+0x10c>
 800168a:	f001 f8cf 	bl	800282c <__clzsi2>
 800168e:	0003      	movs	r3, r0
 8001690:	001a      	movs	r2, r3
 8001692:	3215      	adds	r2, #21
 8001694:	3020      	adds	r0, #32
 8001696:	2a1c      	cmp	r2, #28
 8001698:	dc00      	bgt.n	800169c <__aeabi_ddiv+0x4dc>
 800169a:	e630      	b.n	80012fe <__aeabi_ddiv+0x13e>
 800169c:	4654      	mov	r4, sl
 800169e:	3b08      	subs	r3, #8
 80016a0:	2200      	movs	r2, #0
 80016a2:	409c      	lsls	r4, r3
 80016a4:	e635      	b.n	8001312 <__aeabi_ddiv+0x152>
 80016a6:	230f      	movs	r3, #15
 80016a8:	402b      	ands	r3, r5
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x4f0>
 80016ae:	e652      	b.n	8001356 <__aeabi_ddiv+0x196>
 80016b0:	2305      	movs	r3, #5
 80016b2:	425b      	negs	r3, r3
 80016b4:	42ab      	cmp	r3, r5
 80016b6:	419b      	sbcs	r3, r3
 80016b8:	3504      	adds	r5, #4
 80016ba:	425b      	negs	r3, r3
 80016bc:	08ed      	lsrs	r5, r5, #3
 80016be:	4498      	add	r8, r3
 80016c0:	e64a      	b.n	8001358 <__aeabi_ddiv+0x198>
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d1c5      	bne.n	8001652 <__aeabi_ddiv+0x492>
 80016c6:	42af      	cmp	r7, r5
 80016c8:	d9c0      	bls.n	800164c <__aeabi_ddiv+0x48c>
 80016ca:	4690      	mov	r8, r2
 80016cc:	e716      	b.n	80014fc <__aeabi_ddiv+0x33c>
 80016ce:	428a      	cmp	r2, r1
 80016d0:	d800      	bhi.n	80016d4 <__aeabi_ddiv+0x514>
 80016d2:	e6ea      	b.n	80014aa <__aeabi_ddiv+0x2ea>
 80016d4:	1e83      	subs	r3, r0, #2
 80016d6:	1909      	adds	r1, r1, r4
 80016d8:	e6e7      	b.n	80014aa <__aeabi_ddiv+0x2ea>
 80016da:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <__aeabi_ddiv+0x5c4>)
 80016dc:	0028      	movs	r0, r5
 80016de:	445a      	add	r2, fp
 80016e0:	4643      	mov	r3, r8
 80016e2:	4095      	lsls	r5, r2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	40c8      	lsrs	r0, r1
 80016e8:	1e6a      	subs	r2, r5, #1
 80016ea:	4195      	sbcs	r5, r2
 80016ec:	4644      	mov	r4, r8
 80016ee:	4303      	orrs	r3, r0
 80016f0:	432b      	orrs	r3, r5
 80016f2:	40cc      	lsrs	r4, r1
 80016f4:	075a      	lsls	r2, r3, #29
 80016f6:	d092      	beq.n	800161e <__aeabi_ddiv+0x45e>
 80016f8:	220f      	movs	r2, #15
 80016fa:	401a      	ands	r2, r3
 80016fc:	2a04      	cmp	r2, #4
 80016fe:	d188      	bne.n	8001612 <__aeabi_ddiv+0x452>
 8001700:	e78d      	b.n	800161e <__aeabi_ddiv+0x45e>
 8001702:	0035      	movs	r5, r6
 8001704:	4281      	cmp	r1, r0
 8001706:	d000      	beq.n	800170a <__aeabi_ddiv+0x54a>
 8001708:	e74b      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 800170a:	9a00      	ldr	r2, [sp, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d000      	beq.n	8001712 <__aeabi_ddiv+0x552>
 8001710:	e747      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 8001712:	e618      	b.n	8001346 <__aeabi_ddiv+0x186>
 8001714:	42ae      	cmp	r6, r5
 8001716:	d99c      	bls.n	8001652 <__aeabi_ddiv+0x492>
 8001718:	2302      	movs	r3, #2
 800171a:	425b      	negs	r3, r3
 800171c:	469c      	mov	ip, r3
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	44e0      	add	r8, ip
 8001722:	469c      	mov	ip, r3
 8001724:	4465      	add	r5, ip
 8001726:	429d      	cmp	r5, r3
 8001728:	419b      	sbcs	r3, r3
 800172a:	425b      	negs	r3, r3
 800172c:	191b      	adds	r3, r3, r4
 800172e:	18c9      	adds	r1, r1, r3
 8001730:	e6e4      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <__aeabi_ddiv+0x5c8>)
 8001734:	445a      	add	r2, fp
 8001736:	2a00      	cmp	r2, #0
 8001738:	dc00      	bgt.n	800173c <__aeabi_ddiv+0x57c>
 800173a:	e744      	b.n	80015c6 <__aeabi_ddiv+0x406>
 800173c:	2301      	movs	r3, #1
 800173e:	2500      	movs	r5, #0
 8001740:	4498      	add	r8, r3
 8001742:	e609      	b.n	8001358 <__aeabi_ddiv+0x198>
 8001744:	0765      	lsls	r5, r4, #29
 8001746:	0264      	lsls	r4, r4, #9
 8001748:	0b24      	lsrs	r4, r4, #12
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	431d      	orrs	r5, r3
 800174e:	2300      	movs	r3, #0
 8001750:	e590      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001752:	9e00      	ldr	r6, [sp, #0]
 8001754:	3d02      	subs	r5, #2
 8001756:	0072      	lsls	r2, r6, #1
 8001758:	42b2      	cmp	r2, r6
 800175a:	41bf      	sbcs	r7, r7
 800175c:	427f      	negs	r7, r7
 800175e:	193c      	adds	r4, r7, r4
 8001760:	1909      	adds	r1, r1, r4
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	e7ce      	b.n	8001704 <__aeabi_ddiv+0x544>
 8001766:	2480      	movs	r4, #128	; 0x80
 8001768:	4643      	mov	r3, r8
 800176a:	0324      	lsls	r4, r4, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <__aeabi_ddiv+0x5cc>)
 8001772:	0b24      	lsrs	r4, r4, #12
 8001774:	e57e      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001776:	9a00      	ldr	r2, [sp, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3ea      	bcc.n	8001752 <__aeabi_ddiv+0x592>
 800177c:	0035      	movs	r5, r6
 800177e:	e7c4      	b.n	800170a <__aeabi_ddiv+0x54a>
 8001780:	0000043e 	.word	0x0000043e
 8001784:	0000041e 	.word	0x0000041e
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	464f      	mov	r7, r9
 8001794:	4646      	mov	r6, r8
 8001796:	46d6      	mov	lr, sl
 8001798:	4694      	mov	ip, r2
 800179a:	4691      	mov	r9, r2
 800179c:	031a      	lsls	r2, r3, #12
 800179e:	0b12      	lsrs	r2, r2, #12
 80017a0:	4d18      	ldr	r5, [pc, #96]	; (8001804 <__eqdf2+0x74>)
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	004c      	lsls	r4, r1, #1
 80017a6:	030f      	lsls	r7, r1, #12
 80017a8:	4692      	mov	sl, r2
 80017aa:	005a      	lsls	r2, r3, #1
 80017ac:	0006      	movs	r6, r0
 80017ae:	4680      	mov	r8, r0
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	2001      	movs	r0, #1
 80017b4:	0d64      	lsrs	r4, r4, #21
 80017b6:	0fc9      	lsrs	r1, r1, #31
 80017b8:	0d52      	lsrs	r2, r2, #21
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	42ac      	cmp	r4, r5
 80017be:	d00a      	beq.n	80017d6 <__eqdf2+0x46>
 80017c0:	42aa      	cmp	r2, r5
 80017c2:	d003      	beq.n	80017cc <__eqdf2+0x3c>
 80017c4:	4294      	cmp	r4, r2
 80017c6:	d101      	bne.n	80017cc <__eqdf2+0x3c>
 80017c8:	4557      	cmp	r7, sl
 80017ca:	d00d      	beq.n	80017e8 <__eqdf2+0x58>
 80017cc:	bce0      	pop	{r5, r6, r7}
 80017ce:	46ba      	mov	sl, r7
 80017d0:	46b1      	mov	r9, r6
 80017d2:	46a8      	mov	r8, r5
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	003d      	movs	r5, r7
 80017d8:	4335      	orrs	r5, r6
 80017da:	d1f7      	bne.n	80017cc <__eqdf2+0x3c>
 80017dc:	42a2      	cmp	r2, r4
 80017de:	d1f5      	bne.n	80017cc <__eqdf2+0x3c>
 80017e0:	4652      	mov	r2, sl
 80017e2:	4665      	mov	r5, ip
 80017e4:	432a      	orrs	r2, r5
 80017e6:	d1f1      	bne.n	80017cc <__eqdf2+0x3c>
 80017e8:	2001      	movs	r0, #1
 80017ea:	45c8      	cmp	r8, r9
 80017ec:	d1ee      	bne.n	80017cc <__eqdf2+0x3c>
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d006      	beq.n	8001800 <__eqdf2+0x70>
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	d1ea      	bne.n	80017cc <__eqdf2+0x3c>
 80017f6:	433e      	orrs	r6, r7
 80017f8:	0030      	movs	r0, r6
 80017fa:	1e46      	subs	r6, r0, #1
 80017fc:	41b0      	sbcs	r0, r6
 80017fe:	e7e5      	b.n	80017cc <__eqdf2+0x3c>
 8001800:	2000      	movs	r0, #0
 8001802:	e7e3      	b.n	80017cc <__eqdf2+0x3c>
 8001804:	000007ff 	.word	0x000007ff

08001808 <__gedf2>:
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	464e      	mov	r6, r9
 800180c:	4645      	mov	r5, r8
 800180e:	4657      	mov	r7, sl
 8001810:	46de      	mov	lr, fp
 8001812:	0004      	movs	r4, r0
 8001814:	0018      	movs	r0, r3
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	0016      	movs	r6, r2
 800181a:	031b      	lsls	r3, r3, #12
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	4d32      	ldr	r5, [pc, #200]	; (80018e8 <__gedf2+0xe0>)
 8001820:	030f      	lsls	r7, r1, #12
 8001822:	004a      	lsls	r2, r1, #1
 8001824:	4699      	mov	r9, r3
 8001826:	0043      	lsls	r3, r0, #1
 8001828:	46a4      	mov	ip, r4
 800182a:	46b0      	mov	r8, r6
 800182c:	0b3f      	lsrs	r7, r7, #12
 800182e:	0d52      	lsrs	r2, r2, #21
 8001830:	0fc9      	lsrs	r1, r1, #31
 8001832:	0d5b      	lsrs	r3, r3, #21
 8001834:	0fc0      	lsrs	r0, r0, #31
 8001836:	42aa      	cmp	r2, r5
 8001838:	d029      	beq.n	800188e <__gedf2+0x86>
 800183a:	42ab      	cmp	r3, r5
 800183c:	d018      	beq.n	8001870 <__gedf2+0x68>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d12a      	bne.n	8001898 <__gedf2+0x90>
 8001842:	433c      	orrs	r4, r7
 8001844:	46a3      	mov	fp, r4
 8001846:	4265      	negs	r5, r4
 8001848:	4165      	adcs	r5, r4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <__gedf2+0x4c>
 800184e:	464c      	mov	r4, r9
 8001850:	4326      	orrs	r6, r4
 8001852:	d027      	beq.n	80018a4 <__gedf2+0x9c>
 8001854:	2d00      	cmp	r5, #0
 8001856:	d115      	bne.n	8001884 <__gedf2+0x7c>
 8001858:	4281      	cmp	r1, r0
 800185a:	d028      	beq.n	80018ae <__gedf2+0xa6>
 800185c:	2002      	movs	r0, #2
 800185e:	3901      	subs	r1, #1
 8001860:	4008      	ands	r0, r1
 8001862:	3801      	subs	r0, #1
 8001864:	bcf0      	pop	{r4, r5, r6, r7}
 8001866:	46bb      	mov	fp, r7
 8001868:	46b2      	mov	sl, r6
 800186a:	46a9      	mov	r9, r5
 800186c:	46a0      	mov	r8, r4
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001870:	464d      	mov	r5, r9
 8001872:	432e      	orrs	r6, r5
 8001874:	d12f      	bne.n	80018d6 <__gedf2+0xce>
 8001876:	2a00      	cmp	r2, #0
 8001878:	d1ee      	bne.n	8001858 <__gedf2+0x50>
 800187a:	433c      	orrs	r4, r7
 800187c:	4265      	negs	r5, r4
 800187e:	4165      	adcs	r5, r4
 8001880:	2d00      	cmp	r5, #0
 8001882:	d0e9      	beq.n	8001858 <__gedf2+0x50>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1ed      	bne.n	8001864 <__gedf2+0x5c>
 8001888:	2001      	movs	r0, #1
 800188a:	4240      	negs	r0, r0
 800188c:	e7ea      	b.n	8001864 <__gedf2+0x5c>
 800188e:	003d      	movs	r5, r7
 8001890:	4325      	orrs	r5, r4
 8001892:	d120      	bne.n	80018d6 <__gedf2+0xce>
 8001894:	4293      	cmp	r3, r2
 8001896:	d0eb      	beq.n	8001870 <__gedf2+0x68>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1dd      	bne.n	8001858 <__gedf2+0x50>
 800189c:	464c      	mov	r4, r9
 800189e:	4326      	orrs	r6, r4
 80018a0:	d1da      	bne.n	8001858 <__gedf2+0x50>
 80018a2:	e7db      	b.n	800185c <__gedf2+0x54>
 80018a4:	465b      	mov	r3, fp
 80018a6:	2000      	movs	r0, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0db      	beq.n	8001864 <__gedf2+0x5c>
 80018ac:	e7d6      	b.n	800185c <__gedf2+0x54>
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dc0a      	bgt.n	80018c8 <__gedf2+0xc0>
 80018b2:	dbe7      	blt.n	8001884 <__gedf2+0x7c>
 80018b4:	454f      	cmp	r7, r9
 80018b6:	d8d1      	bhi.n	800185c <__gedf2+0x54>
 80018b8:	d010      	beq.n	80018dc <__gedf2+0xd4>
 80018ba:	2000      	movs	r0, #0
 80018bc:	454f      	cmp	r7, r9
 80018be:	d2d1      	bcs.n	8001864 <__gedf2+0x5c>
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d0e1      	beq.n	8001888 <__gedf2+0x80>
 80018c4:	0008      	movs	r0, r1
 80018c6:	e7cd      	b.n	8001864 <__gedf2+0x5c>
 80018c8:	4243      	negs	r3, r0
 80018ca:	4158      	adcs	r0, r3
 80018cc:	2302      	movs	r3, #2
 80018ce:	4240      	negs	r0, r0
 80018d0:	4018      	ands	r0, r3
 80018d2:	3801      	subs	r0, #1
 80018d4:	e7c6      	b.n	8001864 <__gedf2+0x5c>
 80018d6:	2002      	movs	r0, #2
 80018d8:	4240      	negs	r0, r0
 80018da:	e7c3      	b.n	8001864 <__gedf2+0x5c>
 80018dc:	45c4      	cmp	ip, r8
 80018de:	d8bd      	bhi.n	800185c <__gedf2+0x54>
 80018e0:	2000      	movs	r0, #0
 80018e2:	45c4      	cmp	ip, r8
 80018e4:	d2be      	bcs.n	8001864 <__gedf2+0x5c>
 80018e6:	e7eb      	b.n	80018c0 <__gedf2+0xb8>
 80018e8:	000007ff 	.word	0x000007ff

080018ec <__ledf2>:
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	464e      	mov	r6, r9
 80018f0:	4645      	mov	r5, r8
 80018f2:	4657      	mov	r7, sl
 80018f4:	46de      	mov	lr, fp
 80018f6:	0004      	movs	r4, r0
 80018f8:	0018      	movs	r0, r3
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	0016      	movs	r6, r2
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	0b1b      	lsrs	r3, r3, #12
 8001902:	4d31      	ldr	r5, [pc, #196]	; (80019c8 <__ledf2+0xdc>)
 8001904:	030f      	lsls	r7, r1, #12
 8001906:	004a      	lsls	r2, r1, #1
 8001908:	4699      	mov	r9, r3
 800190a:	0043      	lsls	r3, r0, #1
 800190c:	46a4      	mov	ip, r4
 800190e:	46b0      	mov	r8, r6
 8001910:	0b3f      	lsrs	r7, r7, #12
 8001912:	0d52      	lsrs	r2, r2, #21
 8001914:	0fc9      	lsrs	r1, r1, #31
 8001916:	0d5b      	lsrs	r3, r3, #21
 8001918:	0fc0      	lsrs	r0, r0, #31
 800191a:	42aa      	cmp	r2, r5
 800191c:	d011      	beq.n	8001942 <__ledf2+0x56>
 800191e:	42ab      	cmp	r3, r5
 8001920:	d014      	beq.n	800194c <__ledf2+0x60>
 8001922:	2a00      	cmp	r2, #0
 8001924:	d12f      	bne.n	8001986 <__ledf2+0x9a>
 8001926:	433c      	orrs	r4, r7
 8001928:	46a3      	mov	fp, r4
 800192a:	4265      	negs	r5, r4
 800192c:	4165      	adcs	r5, r4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d114      	bne.n	800195c <__ledf2+0x70>
 8001932:	464c      	mov	r4, r9
 8001934:	4326      	orrs	r6, r4
 8001936:	d111      	bne.n	800195c <__ledf2+0x70>
 8001938:	465b      	mov	r3, fp
 800193a:	2000      	movs	r0, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <__ledf2+0x84>
 8001940:	e010      	b.n	8001964 <__ledf2+0x78>
 8001942:	003d      	movs	r5, r7
 8001944:	4325      	orrs	r5, r4
 8001946:	d112      	bne.n	800196e <__ledf2+0x82>
 8001948:	4293      	cmp	r3, r2
 800194a:	d11c      	bne.n	8001986 <__ledf2+0x9a>
 800194c:	464d      	mov	r5, r9
 800194e:	432e      	orrs	r6, r5
 8001950:	d10d      	bne.n	800196e <__ledf2+0x82>
 8001952:	2a00      	cmp	r2, #0
 8001954:	d104      	bne.n	8001960 <__ledf2+0x74>
 8001956:	433c      	orrs	r4, r7
 8001958:	4265      	negs	r5, r4
 800195a:	4165      	adcs	r5, r4
 800195c:	2d00      	cmp	r5, #0
 800195e:	d10d      	bne.n	800197c <__ledf2+0x90>
 8001960:	4281      	cmp	r1, r0
 8001962:	d016      	beq.n	8001992 <__ledf2+0xa6>
 8001964:	2002      	movs	r0, #2
 8001966:	3901      	subs	r1, #1
 8001968:	4008      	ands	r0, r1
 800196a:	3801      	subs	r0, #1
 800196c:	e000      	b.n	8001970 <__ledf2+0x84>
 800196e:	2002      	movs	r0, #2
 8001970:	bcf0      	pop	{r4, r5, r6, r7}
 8001972:	46bb      	mov	fp, r7
 8001974:	46b2      	mov	sl, r6
 8001976:	46a9      	mov	r9, r5
 8001978:	46a0      	mov	r8, r4
 800197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197c:	2800      	cmp	r0, #0
 800197e:	d1f7      	bne.n	8001970 <__ledf2+0x84>
 8001980:	2001      	movs	r0, #1
 8001982:	4240      	negs	r0, r0
 8001984:	e7f4      	b.n	8001970 <__ledf2+0x84>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ea      	bne.n	8001960 <__ledf2+0x74>
 800198a:	464c      	mov	r4, r9
 800198c:	4326      	orrs	r6, r4
 800198e:	d1e7      	bne.n	8001960 <__ledf2+0x74>
 8001990:	e7e8      	b.n	8001964 <__ledf2+0x78>
 8001992:	429a      	cmp	r2, r3
 8001994:	dd06      	ble.n	80019a4 <__ledf2+0xb8>
 8001996:	4243      	negs	r3, r0
 8001998:	4158      	adcs	r0, r3
 800199a:	2302      	movs	r3, #2
 800199c:	4240      	negs	r0, r0
 800199e:	4018      	ands	r0, r3
 80019a0:	3801      	subs	r0, #1
 80019a2:	e7e5      	b.n	8001970 <__ledf2+0x84>
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbe9      	blt.n	800197c <__ledf2+0x90>
 80019a8:	454f      	cmp	r7, r9
 80019aa:	d8db      	bhi.n	8001964 <__ledf2+0x78>
 80019ac:	d006      	beq.n	80019bc <__ledf2+0xd0>
 80019ae:	2000      	movs	r0, #0
 80019b0:	454f      	cmp	r7, r9
 80019b2:	d2dd      	bcs.n	8001970 <__ledf2+0x84>
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d0e3      	beq.n	8001980 <__ledf2+0x94>
 80019b8:	0008      	movs	r0, r1
 80019ba:	e7d9      	b.n	8001970 <__ledf2+0x84>
 80019bc:	45c4      	cmp	ip, r8
 80019be:	d8d1      	bhi.n	8001964 <__ledf2+0x78>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c4      	cmp	ip, r8
 80019c4:	d2d4      	bcs.n	8001970 <__ledf2+0x84>
 80019c6:	e7f5      	b.n	80019b4 <__ledf2+0xc8>
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_dmul>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	464e      	mov	r6, r9
 80019d2:	4645      	mov	r5, r8
 80019d4:	46de      	mov	lr, fp
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	4698      	mov	r8, r3
 80019da:	030c      	lsls	r4, r1, #12
 80019dc:	004b      	lsls	r3, r1, #1
 80019de:	0006      	movs	r6, r0
 80019e0:	4692      	mov	sl, r2
 80019e2:	b087      	sub	sp, #28
 80019e4:	0b24      	lsrs	r4, r4, #12
 80019e6:	0d5b      	lsrs	r3, r3, #21
 80019e8:	0fcf      	lsrs	r7, r1, #31
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <__aeabi_dmul+0xfc>
 80019ee:	4add      	ldr	r2, [pc, #884]	; (8001d64 <__aeabi_dmul+0x398>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dmul+0x2a>
 80019f4:	e086      	b.n	8001b04 <__aeabi_dmul+0x138>
 80019f6:	0f42      	lsrs	r2, r0, #29
 80019f8:	00e4      	lsls	r4, r4, #3
 80019fa:	4314      	orrs	r4, r2
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	4314      	orrs	r4, r2
 8001a02:	4ad9      	ldr	r2, [pc, #868]	; (8001d68 <__aeabi_dmul+0x39c>)
 8001a04:	00c5      	lsls	r5, r0, #3
 8001a06:	4694      	mov	ip, r2
 8001a08:	4463      	add	r3, ip
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4699      	mov	r9, r3
 8001a10:	469b      	mov	fp, r3
 8001a12:	4643      	mov	r3, r8
 8001a14:	4642      	mov	r2, r8
 8001a16:	031e      	lsls	r6, r3, #12
 8001a18:	0fd2      	lsrs	r2, r2, #31
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4650      	mov	r0, sl
 8001a1e:	4690      	mov	r8, r2
 8001a20:	0b36      	lsrs	r6, r6, #12
 8001a22:	0d5b      	lsrs	r3, r3, #21
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dmul+0x5c>
 8001a26:	e078      	b.n	8001b1a <__aeabi_dmul+0x14e>
 8001a28:	4ace      	ldr	r2, [pc, #824]	; (8001d64 <__aeabi_dmul+0x398>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01d      	beq.n	8001a6a <__aeabi_dmul+0x9e>
 8001a2e:	49ce      	ldr	r1, [pc, #824]	; (8001d68 <__aeabi_dmul+0x39c>)
 8001a30:	0f42      	lsrs	r2, r0, #29
 8001a32:	468c      	mov	ip, r1
 8001a34:	9900      	ldr	r1, [sp, #0]
 8001a36:	4463      	add	r3, ip
 8001a38:	00f6      	lsls	r6, r6, #3
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	4316      	orrs	r6, r2
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	449c      	add	ip, r3
 8001a42:	0412      	lsls	r2, r2, #16
 8001a44:	4663      	mov	r3, ip
 8001a46:	4316      	orrs	r6, r2
 8001a48:	00c2      	lsls	r2, r0, #3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	9900      	ldr	r1, [sp, #0]
 8001a50:	4643      	mov	r3, r8
 8001a52:	3101      	adds	r1, #1
 8001a54:	468c      	mov	ip, r1
 8001a56:	4649      	mov	r1, r9
 8001a58:	407b      	eors	r3, r7
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	290f      	cmp	r1, #15
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_dmul+0x96>
 8001a60:	e07e      	b.n	8001b60 <__aeabi_dmul+0x194>
 8001a62:	4bc2      	ldr	r3, [pc, #776]	; (8001d6c <__aeabi_dmul+0x3a0>)
 8001a64:	0089      	lsls	r1, r1, #2
 8001a66:	5859      	ldr	r1, [r3, r1]
 8001a68:	468f      	mov	pc, r1
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	4332      	orrs	r2, r6
 8001a70:	d000      	beq.n	8001a74 <__aeabi_dmul+0xa8>
 8001a72:	e156      	b.n	8001d22 <__aeabi_dmul+0x356>
 8001a74:	49bb      	ldr	r1, [pc, #748]	; (8001d64 <__aeabi_dmul+0x398>)
 8001a76:	2600      	movs	r6, #0
 8001a78:	468c      	mov	ip, r1
 8001a7a:	4463      	add	r3, ip
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2302      	movs	r3, #2
 8001a82:	4319      	orrs	r1, r3
 8001a84:	4689      	mov	r9, r1
 8001a86:	2002      	movs	r0, #2
 8001a88:	e7e1      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001a8a:	4643      	mov	r3, r8
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	0034      	movs	r4, r6
 8001a90:	0015      	movs	r5, r2
 8001a92:	4683      	mov	fp, r0
 8001a94:	465b      	mov	r3, fp
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d05e      	beq.n	8001b58 <__aeabi_dmul+0x18c>
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dmul+0xd4>
 8001a9e:	e1f3      	b.n	8001e88 <__aeabi_dmul+0x4bc>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dmul+0xda>
 8001aa4:	e118      	b.n	8001cd8 <__aeabi_dmul+0x30c>
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2500      	movs	r5, #0
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	0512      	lsls	r2, r2, #20
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	07db      	lsls	r3, r3, #31
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	0011      	movs	r1, r2
 8001aba:	b007      	add	sp, #28
 8001abc:	bcf0      	pop	{r4, r5, r6, r7}
 8001abe:	46bb      	mov	fp, r7
 8001ac0:	46b2      	mov	sl, r6
 8001ac2:	46a9      	mov	r9, r5
 8001ac4:	46a0      	mov	r8, r4
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	0025      	movs	r5, r4
 8001aca:	4305      	orrs	r5, r0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dmul+0x104>
 8001ace:	e141      	b.n	8001d54 <__aeabi_dmul+0x388>
 8001ad0:	2c00      	cmp	r4, #0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dmul+0x10a>
 8001ad4:	e1ad      	b.n	8001e32 <__aeabi_dmul+0x466>
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f000 fea8 	bl	800282c <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0002      	movs	r2, r0
 8001ae0:	390b      	subs	r1, #11
 8001ae2:	231d      	movs	r3, #29
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	1a5b      	subs	r3, r3, r1
 8001ae8:	0031      	movs	r1, r6
 8001aea:	0035      	movs	r5, r6
 8001aec:	3808      	subs	r0, #8
 8001aee:	4084      	lsls	r4, r0
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	4085      	lsls	r5, r0
 8001af4:	430c      	orrs	r4, r1
 8001af6:	489e      	ldr	r0, [pc, #632]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001af8:	1a83      	subs	r3, r0, r2
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2300      	movs	r3, #0
 8001afe:	4699      	mov	r9, r3
 8001b00:	469b      	mov	fp, r3
 8001b02:	e786      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001b04:	0005      	movs	r5, r0
 8001b06:	4325      	orrs	r5, r4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dmul+0x140>
 8001b0a:	e11c      	b.n	8001d46 <__aeabi_dmul+0x37a>
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2302      	movs	r3, #2
 8001b12:	2400      	movs	r4, #0
 8001b14:	4691      	mov	r9, r2
 8001b16:	469b      	mov	fp, r3
 8001b18:	e77b      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001b1a:	4652      	mov	r2, sl
 8001b1c:	4332      	orrs	r2, r6
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x156>
 8001b20:	e10a      	b.n	8001d38 <__aeabi_dmul+0x36c>
 8001b22:	2e00      	cmp	r6, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x15c>
 8001b26:	e176      	b.n	8001e16 <__aeabi_dmul+0x44a>
 8001b28:	0030      	movs	r0, r6
 8001b2a:	f000 fe7f 	bl	800282c <__clzsi2>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	3a0b      	subs	r2, #11
 8001b32:	231d      	movs	r3, #29
 8001b34:	0001      	movs	r1, r0
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	4652      	mov	r2, sl
 8001b3a:	3908      	subs	r1, #8
 8001b3c:	40da      	lsrs	r2, r3
 8001b3e:	408e      	lsls	r6, r1
 8001b40:	4316      	orrs	r6, r2
 8001b42:	4652      	mov	r2, sl
 8001b44:	408a      	lsls	r2, r1
 8001b46:	9b00      	ldr	r3, [sp, #0]
 8001b48:	4989      	ldr	r1, [pc, #548]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001b4a:	1a18      	subs	r0, r3, r0
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	468c      	mov	ip, r1
 8001b50:	4463      	add	r3, ip
 8001b52:	2000      	movs	r0, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	e77a      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001b58:	2400      	movs	r4, #0
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	4a81      	ldr	r2, [pc, #516]	; (8001d64 <__aeabi_dmul+0x398>)
 8001b5e:	e7a5      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001b60:	0c2f      	lsrs	r7, r5, #16
 8001b62:	042d      	lsls	r5, r5, #16
 8001b64:	0c2d      	lsrs	r5, r5, #16
 8001b66:	002b      	movs	r3, r5
 8001b68:	0c11      	lsrs	r1, r2, #16
 8001b6a:	0412      	lsls	r2, r2, #16
 8001b6c:	0c12      	lsrs	r2, r2, #16
 8001b6e:	4353      	muls	r3, r2
 8001b70:	4698      	mov	r8, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	0028      	movs	r0, r5
 8001b76:	437b      	muls	r3, r7
 8001b78:	4699      	mov	r9, r3
 8001b7a:	4348      	muls	r0, r1
 8001b7c:	4448      	add	r0, r9
 8001b7e:	4683      	mov	fp, r0
 8001b80:	4640      	mov	r0, r8
 8001b82:	000b      	movs	r3, r1
 8001b84:	0c00      	lsrs	r0, r0, #16
 8001b86:	4682      	mov	sl, r0
 8001b88:	4658      	mov	r0, fp
 8001b8a:	437b      	muls	r3, r7
 8001b8c:	4450      	add	r0, sl
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	4581      	cmp	r9, r0
 8001b92:	d906      	bls.n	8001ba2 <__aeabi_dmul+0x1d6>
 8001b94:	469a      	mov	sl, r3
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	44ca      	add	sl, r9
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	0c03      	lsrs	r3, r0, #16
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	0400      	lsls	r0, r0, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	4698      	mov	r8, r3
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	4443      	add	r3, r8
 8001bb4:	9304      	str	r3, [sp, #16]
 8001bb6:	0c33      	lsrs	r3, r6, #16
 8001bb8:	4699      	mov	r9, r3
 8001bba:	002b      	movs	r3, r5
 8001bbc:	0436      	lsls	r6, r6, #16
 8001bbe:	0c36      	lsrs	r6, r6, #16
 8001bc0:	4373      	muls	r3, r6
 8001bc2:	4698      	mov	r8, r3
 8001bc4:	0033      	movs	r3, r6
 8001bc6:	437b      	muls	r3, r7
 8001bc8:	469a      	mov	sl, r3
 8001bca:	464b      	mov	r3, r9
 8001bcc:	435d      	muls	r5, r3
 8001bce:	435f      	muls	r7, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	4455      	add	r5, sl
 8001bd4:	0c18      	lsrs	r0, r3, #16
 8001bd6:	1940      	adds	r0, r0, r5
 8001bd8:	4582      	cmp	sl, r0
 8001bda:	d903      	bls.n	8001be4 <__aeabi_dmul+0x218>
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	469a      	mov	sl, r3
 8001be2:	4457      	add	r7, sl
 8001be4:	0c05      	lsrs	r5, r0, #16
 8001be6:	19eb      	adds	r3, r5, r7
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	4643      	mov	r3, r8
 8001bec:	041d      	lsls	r5, r3, #16
 8001bee:	0c2d      	lsrs	r5, r5, #16
 8001bf0:	0400      	lsls	r0, r0, #16
 8001bf2:	1940      	adds	r0, r0, r5
 8001bf4:	0c25      	lsrs	r5, r4, #16
 8001bf6:	0424      	lsls	r4, r4, #16
 8001bf8:	0c24      	lsrs	r4, r4, #16
 8001bfa:	0027      	movs	r7, r4
 8001bfc:	4357      	muls	r7, r2
 8001bfe:	436a      	muls	r2, r5
 8001c00:	4690      	mov	r8, r2
 8001c02:	002a      	movs	r2, r5
 8001c04:	0c3b      	lsrs	r3, r7, #16
 8001c06:	469a      	mov	sl, r3
 8001c08:	434a      	muls	r2, r1
 8001c0a:	4361      	muls	r1, r4
 8001c0c:	4441      	add	r1, r8
 8001c0e:	4451      	add	r1, sl
 8001c10:	4483      	add	fp, r0
 8001c12:	4588      	cmp	r8, r1
 8001c14:	d903      	bls.n	8001c1e <__aeabi_dmul+0x252>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4442      	add	r2, r8
 8001c1e:	043f      	lsls	r7, r7, #16
 8001c20:	0c0b      	lsrs	r3, r1, #16
 8001c22:	0c3f      	lsrs	r7, r7, #16
 8001c24:	0409      	lsls	r1, r1, #16
 8001c26:	19c9      	adds	r1, r1, r7
 8001c28:	0027      	movs	r7, r4
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	4377      	muls	r7, r6
 8001c30:	435c      	muls	r4, r3
 8001c32:	436e      	muls	r6, r5
 8001c34:	435d      	muls	r5, r3
 8001c36:	0c3b      	lsrs	r3, r7, #16
 8001c38:	4699      	mov	r9, r3
 8001c3a:	19a4      	adds	r4, r4, r6
 8001c3c:	444c      	add	r4, r9
 8001c3e:	4442      	add	r2, r8
 8001c40:	9503      	str	r5, [sp, #12]
 8001c42:	42a6      	cmp	r6, r4
 8001c44:	d904      	bls.n	8001c50 <__aeabi_dmul+0x284>
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4445      	add	r5, r8
 8001c4e:	9503      	str	r5, [sp, #12]
 8001c50:	9b02      	ldr	r3, [sp, #8]
 8001c52:	043f      	lsls	r7, r7, #16
 8001c54:	445b      	add	r3, fp
 8001c56:	001e      	movs	r6, r3
 8001c58:	4283      	cmp	r3, r0
 8001c5a:	4180      	sbcs	r0, r0
 8001c5c:	0423      	lsls	r3, r4, #16
 8001c5e:	4698      	mov	r8, r3
 8001c60:	9b05      	ldr	r3, [sp, #20]
 8001c62:	0c3f      	lsrs	r7, r7, #16
 8001c64:	4447      	add	r7, r8
 8001c66:	4698      	mov	r8, r3
 8001c68:	1876      	adds	r6, r6, r1
 8001c6a:	428e      	cmp	r6, r1
 8001c6c:	4189      	sbcs	r1, r1
 8001c6e:	4447      	add	r7, r8
 8001c70:	4240      	negs	r0, r0
 8001c72:	183d      	adds	r5, r7, r0
 8001c74:	46a8      	mov	r8, r5
 8001c76:	4693      	mov	fp, r2
 8001c78:	4249      	negs	r1, r1
 8001c7a:	468a      	mov	sl, r1
 8001c7c:	44c3      	add	fp, r8
 8001c7e:	429f      	cmp	r7, r3
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4580      	cmp	r8, r0
 8001c84:	4180      	sbcs	r0, r0
 8001c86:	9b03      	ldr	r3, [sp, #12]
 8001c88:	44da      	add	sl, fp
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4653      	mov	r3, sl
 8001c8e:	4240      	negs	r0, r0
 8001c90:	427f      	negs	r7, r7
 8001c92:	4307      	orrs	r7, r0
 8001c94:	0c24      	lsrs	r4, r4, #16
 8001c96:	4593      	cmp	fp, r2
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	458a      	cmp	sl, r1
 8001c9c:	4189      	sbcs	r1, r1
 8001c9e:	193f      	adds	r7, r7, r4
 8001ca0:	0ddc      	lsrs	r4, r3, #23
 8001ca2:	9b04      	ldr	r3, [sp, #16]
 8001ca4:	0275      	lsls	r5, r6, #9
 8001ca6:	431d      	orrs	r5, r3
 8001ca8:	1e68      	subs	r0, r5, #1
 8001caa:	4185      	sbcs	r5, r0
 8001cac:	4653      	mov	r3, sl
 8001cae:	4252      	negs	r2, r2
 8001cb0:	4249      	negs	r1, r1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	18bf      	adds	r7, r7, r2
 8001cb6:	4447      	add	r7, r8
 8001cb8:	0df6      	lsrs	r6, r6, #23
 8001cba:	027f      	lsls	r7, r7, #9
 8001cbc:	4335      	orrs	r5, r6
 8001cbe:	025a      	lsls	r2, r3, #9
 8001cc0:	433c      	orrs	r4, r7
 8001cc2:	4315      	orrs	r5, r2
 8001cc4:	01fb      	lsls	r3, r7, #7
 8001cc6:	d400      	bmi.n	8001cca <__aeabi_dmul+0x2fe>
 8001cc8:	e0c1      	b.n	8001e4e <__aeabi_dmul+0x482>
 8001cca:	2101      	movs	r1, #1
 8001ccc:	086a      	lsrs	r2, r5, #1
 8001cce:	400d      	ands	r5, r1
 8001cd0:	4315      	orrs	r5, r2
 8001cd2:	07e2      	lsls	r2, r4, #31
 8001cd4:	4315      	orrs	r5, r2
 8001cd6:	0864      	lsrs	r4, r4, #1
 8001cd8:	4926      	ldr	r1, [pc, #152]	; (8001d74 <__aeabi_dmul+0x3a8>)
 8001cda:	4461      	add	r1, ip
 8001cdc:	2900      	cmp	r1, #0
 8001cde:	dd56      	ble.n	8001d8e <__aeabi_dmul+0x3c2>
 8001ce0:	076b      	lsls	r3, r5, #29
 8001ce2:	d009      	beq.n	8001cf8 <__aeabi_dmul+0x32c>
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	402a      	ands	r2, r5
 8001ce8:	2a04      	cmp	r2, #4
 8001cea:	d005      	beq.n	8001cf8 <__aeabi_dmul+0x32c>
 8001cec:	1d2a      	adds	r2, r5, #4
 8001cee:	42aa      	cmp	r2, r5
 8001cf0:	41ad      	sbcs	r5, r5
 8001cf2:	426d      	negs	r5, r5
 8001cf4:	1964      	adds	r4, r4, r5
 8001cf6:	0015      	movs	r5, r2
 8001cf8:	01e3      	lsls	r3, r4, #7
 8001cfa:	d504      	bpl.n	8001d06 <__aeabi_dmul+0x33a>
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <__aeabi_dmul+0x3ac>)
 8001d00:	00c9      	lsls	r1, r1, #3
 8001d02:	4014      	ands	r4, r2
 8001d04:	4461      	add	r1, ip
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <__aeabi_dmul+0x3b0>)
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dmul+0x342>
 8001d0c:	e724      	b.n	8001b58 <__aeabi_dmul+0x18c>
 8001d0e:	0762      	lsls	r2, r4, #29
 8001d10:	08ed      	lsrs	r5, r5, #3
 8001d12:	0264      	lsls	r4, r4, #9
 8001d14:	0549      	lsls	r1, r1, #21
 8001d16:	4315      	orrs	r5, r2
 8001d18:	0b24      	lsrs	r4, r4, #12
 8001d1a:	0d4a      	lsrs	r2, r1, #21
 8001d1c:	e6c6      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001d1e:	9701      	str	r7, [sp, #4]
 8001d20:	e6b8      	b.n	8001a94 <__aeabi_dmul+0xc8>
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <__aeabi_dmul+0x398>)
 8001d24:	2003      	movs	r0, #3
 8001d26:	4694      	mov	ip, r2
 8001d28:	4463      	add	r3, ip
 8001d2a:	464a      	mov	r2, r9
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2303      	movs	r3, #3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4691      	mov	r9, r2
 8001d34:	4652      	mov	r2, sl
 8001d36:	e68a      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d38:	4649      	mov	r1, r9
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4319      	orrs	r1, r3
 8001d3e:	4689      	mov	r9, r1
 8001d40:	2600      	movs	r6, #0
 8001d42:	2001      	movs	r0, #1
 8001d44:	e683      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d46:	220c      	movs	r2, #12
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	0005      	movs	r5, r0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e65e      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001d54:	2304      	movs	r3, #4
 8001d56:	4699      	mov	r9, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	2400      	movs	r4, #0
 8001d60:	469b      	mov	fp, r3
 8001d62:	e656      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001d64:	000007ff 	.word	0x000007ff
 8001d68:	fffffc01 	.word	0xfffffc01
 8001d6c:	0800e2f8 	.word	0x0800e2f8
 8001d70:	fffffc0d 	.word	0xfffffc0d
 8001d74:	000003ff 	.word	0x000003ff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	000007fe 	.word	0x000007fe
 8001d80:	2300      	movs	r3, #0
 8001d82:	2480      	movs	r4, #128	; 0x80
 8001d84:	2500      	movs	r5, #0
 8001d86:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	0324      	lsls	r4, r4, #12
 8001d8c:	e68e      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001d8e:	2001      	movs	r0, #1
 8001d90:	1a40      	subs	r0, r0, r1
 8001d92:	2838      	cmp	r0, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x3cc>
 8001d96:	e686      	b.n	8001aa6 <__aeabi_dmul+0xda>
 8001d98:	281f      	cmp	r0, #31
 8001d9a:	dd5b      	ble.n	8001e54 <__aeabi_dmul+0x488>
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	0023      	movs	r3, r4
 8001da0:	4252      	negs	r2, r2
 8001da2:	1a51      	subs	r1, r2, r1
 8001da4:	40cb      	lsrs	r3, r1
 8001da6:	0019      	movs	r1, r3
 8001da8:	2820      	cmp	r0, #32
 8001daa:	d003      	beq.n	8001db4 <__aeabi_dmul+0x3e8>
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <__aeabi_dmul+0x4d0>)
 8001dae:	4462      	add	r2, ip
 8001db0:	4094      	lsls	r4, r2
 8001db2:	4325      	orrs	r5, r4
 8001db4:	1e6a      	subs	r2, r5, #1
 8001db6:	4195      	sbcs	r5, r2
 8001db8:	002a      	movs	r2, r5
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	000d      	movs	r5, r1
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	4015      	ands	r5, r2
 8001dc4:	4211      	tst	r1, r2
 8001dc6:	d05b      	beq.n	8001e80 <__aeabi_dmul+0x4b4>
 8001dc8:	210f      	movs	r1, #15
 8001dca:	2400      	movs	r4, #0
 8001dcc:	4011      	ands	r1, r2
 8001dce:	2904      	cmp	r1, #4
 8001dd0:	d053      	beq.n	8001e7a <__aeabi_dmul+0x4ae>
 8001dd2:	1d11      	adds	r1, r2, #4
 8001dd4:	4291      	cmp	r1, r2
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	4252      	negs	r2, r2
 8001dda:	18a4      	adds	r4, r4, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	0223      	lsls	r3, r4, #8
 8001de0:	d54b      	bpl.n	8001e7a <__aeabi_dmul+0x4ae>
 8001de2:	2201      	movs	r2, #1
 8001de4:	2400      	movs	r4, #0
 8001de6:	2500      	movs	r5, #0
 8001de8:	e660      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	031b      	lsls	r3, r3, #12
 8001dee:	421c      	tst	r4, r3
 8001df0:	d009      	beq.n	8001e06 <__aeabi_dmul+0x43a>
 8001df2:	421e      	tst	r6, r3
 8001df4:	d107      	bne.n	8001e06 <__aeabi_dmul+0x43a>
 8001df6:	4333      	orrs	r3, r6
 8001df8:	031c      	lsls	r4, r3, #12
 8001dfa:	4643      	mov	r3, r8
 8001dfc:	0015      	movs	r5, r2
 8001dfe:	0b24      	lsrs	r4, r4, #12
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	e652      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0312      	lsls	r2, r2, #12
 8001e0a:	4314      	orrs	r4, r2
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e10:	0b24      	lsrs	r4, r4, #12
 8001e12:	9701      	str	r7, [sp, #4]
 8001e14:	e64a      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e16:	f000 fd09 	bl	800282c <__clzsi2>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	3215      	adds	r2, #21
 8001e20:	3020      	adds	r0, #32
 8001e22:	2a1c      	cmp	r2, #28
 8001e24:	dc00      	bgt.n	8001e28 <__aeabi_dmul+0x45c>
 8001e26:	e684      	b.n	8001b32 <__aeabi_dmul+0x166>
 8001e28:	4656      	mov	r6, sl
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	409e      	lsls	r6, r3
 8001e30:	e689      	b.n	8001b46 <__aeabi_dmul+0x17a>
 8001e32:	f000 fcfb 	bl	800282c <__clzsi2>
 8001e36:	0001      	movs	r1, r0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	3115      	adds	r1, #21
 8001e3c:	3220      	adds	r2, #32
 8001e3e:	291c      	cmp	r1, #28
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dmul+0x478>
 8001e42:	e64e      	b.n	8001ae2 <__aeabi_dmul+0x116>
 8001e44:	0034      	movs	r4, r6
 8001e46:	3808      	subs	r0, #8
 8001e48:	2500      	movs	r5, #0
 8001e4a:	4084      	lsls	r4, r0
 8001e4c:	e653      	b.n	8001af6 <__aeabi_dmul+0x12a>
 8001e4e:	9b00      	ldr	r3, [sp, #0]
 8001e50:	469c      	mov	ip, r3
 8001e52:	e741      	b.n	8001cd8 <__aeabi_dmul+0x30c>
 8001e54:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <__aeabi_dmul+0x4d4>)
 8001e56:	0022      	movs	r2, r4
 8001e58:	4461      	add	r1, ip
 8001e5a:	002e      	movs	r6, r5
 8001e5c:	408d      	lsls	r5, r1
 8001e5e:	408a      	lsls	r2, r1
 8001e60:	40c6      	lsrs	r6, r0
 8001e62:	1e69      	subs	r1, r5, #1
 8001e64:	418d      	sbcs	r5, r1
 8001e66:	4332      	orrs	r2, r6
 8001e68:	432a      	orrs	r2, r5
 8001e6a:	40c4      	lsrs	r4, r0
 8001e6c:	0753      	lsls	r3, r2, #29
 8001e6e:	d0b6      	beq.n	8001dde <__aeabi_dmul+0x412>
 8001e70:	210f      	movs	r1, #15
 8001e72:	4011      	ands	r1, r2
 8001e74:	2904      	cmp	r1, #4
 8001e76:	d1ac      	bne.n	8001dd2 <__aeabi_dmul+0x406>
 8001e78:	e7b1      	b.n	8001dde <__aeabi_dmul+0x412>
 8001e7a:	0765      	lsls	r5, r4, #29
 8001e7c:	0264      	lsls	r4, r4, #9
 8001e7e:	0b24      	lsrs	r4, r4, #12
 8001e80:	08d2      	lsrs	r2, r2, #3
 8001e82:	4315      	orrs	r5, r2
 8001e84:	2200      	movs	r2, #0
 8001e86:	e611      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0312      	lsls	r2, r2, #12
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4a01      	ldr	r2, [pc, #4]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e92:	0b24      	lsrs	r4, r4, #12
 8001e94:	e60a      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	0000043e 	.word	0x0000043e
 8001ea0:	0000041e 	.word	0x0000041e

08001ea4 <__aeabi_dsub>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	4657      	mov	r7, sl
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	4645      	mov	r5, r8
 8001eac:	46de      	mov	lr, fp
 8001eae:	0004      	movs	r4, r0
 8001eb0:	b5e0      	push	{r5, r6, r7, lr}
 8001eb2:	001f      	movs	r7, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	030b      	lsls	r3, r1, #12
 8001eb8:	0f62      	lsrs	r2, r4, #29
 8001eba:	004e      	lsls	r6, r1, #1
 8001ebc:	0fcd      	lsrs	r5, r1, #31
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	0339      	lsls	r1, r7, #12
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	0a49      	lsrs	r1, r1, #9
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	0f44      	lsrs	r4, r0, #29
 8001eca:	4321      	orrs	r1, r4
 8001ecc:	4cc2      	ldr	r4, [pc, #776]	; (80021d8 <__aeabi_dsub+0x334>)
 8001ece:	4691      	mov	r9, r2
 8001ed0:	4692      	mov	sl, r2
 8001ed2:	00c0      	lsls	r0, r0, #3
 8001ed4:	007a      	lsls	r2, r7, #1
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	0d76      	lsrs	r6, r6, #21
 8001eda:	0d52      	lsrs	r2, r2, #21
 8001edc:	0fff      	lsrs	r7, r7, #31
 8001ede:	42a2      	cmp	r2, r4
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x40>
 8001ee2:	e0b4      	b.n	800204e <__aeabi_dsub+0x1aa>
 8001ee4:	2401      	movs	r4, #1
 8001ee6:	4067      	eors	r7, r4
 8001ee8:	46bb      	mov	fp, r7
 8001eea:	42bd      	cmp	r5, r7
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x4c>
 8001eee:	e088      	b.n	8002002 <__aeabi_dsub+0x15e>
 8001ef0:	1ab4      	subs	r4, r6, r2
 8001ef2:	46a4      	mov	ip, r4
 8001ef4:	2c00      	cmp	r4, #0
 8001ef6:	dc00      	bgt.n	8001efa <__aeabi_dsub+0x56>
 8001ef8:	e0b2      	b.n	8002060 <__aeabi_dsub+0x1bc>
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x5c>
 8001efe:	e0c5      	b.n	800208c <__aeabi_dsub+0x1e8>
 8001f00:	4ab5      	ldr	r2, [pc, #724]	; (80021d8 <__aeabi_dsub+0x334>)
 8001f02:	4296      	cmp	r6, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x64>
 8001f06:	e28b      	b.n	8002420 <__aeabi_dsub+0x57c>
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0412      	lsls	r2, r2, #16
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	4662      	mov	r2, ip
 8001f10:	2a38      	cmp	r2, #56	; 0x38
 8001f12:	dd00      	ble.n	8001f16 <__aeabi_dsub+0x72>
 8001f14:	e1a1      	b.n	800225a <__aeabi_dsub+0x3b6>
 8001f16:	2a1f      	cmp	r2, #31
 8001f18:	dd00      	ble.n	8001f1c <__aeabi_dsub+0x78>
 8001f1a:	e216      	b.n	800234a <__aeabi_dsub+0x4a6>
 8001f1c:	2720      	movs	r7, #32
 8001f1e:	000c      	movs	r4, r1
 8001f20:	1abf      	subs	r7, r7, r2
 8001f22:	40bc      	lsls	r4, r7
 8001f24:	0002      	movs	r2, r0
 8001f26:	46a0      	mov	r8, r4
 8001f28:	4664      	mov	r4, ip
 8001f2a:	40b8      	lsls	r0, r7
 8001f2c:	40e2      	lsrs	r2, r4
 8001f2e:	4644      	mov	r4, r8
 8001f30:	4314      	orrs	r4, r2
 8001f32:	0002      	movs	r2, r0
 8001f34:	1e50      	subs	r0, r2, #1
 8001f36:	4182      	sbcs	r2, r0
 8001f38:	4660      	mov	r0, ip
 8001f3a:	40c1      	lsrs	r1, r0
 8001f3c:	4322      	orrs	r2, r4
 8001f3e:	1a5b      	subs	r3, r3, r1
 8001f40:	4649      	mov	r1, r9
 8001f42:	1a8c      	subs	r4, r1, r2
 8001f44:	45a1      	cmp	r9, r4
 8001f46:	4192      	sbcs	r2, r2
 8001f48:	4252      	negs	r2, r2
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	4643      	mov	r3, r8
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	d400      	bmi.n	8001f56 <__aeabi_dsub+0xb2>
 8001f54:	e117      	b.n	8002186 <__aeabi_dsub+0x2e2>
 8001f56:	4643      	mov	r3, r8
 8001f58:	025b      	lsls	r3, r3, #9
 8001f5a:	0a5b      	lsrs	r3, r3, #9
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	4643      	mov	r3, r8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0xc2>
 8001f64:	e16c      	b.n	8002240 <__aeabi_dsub+0x39c>
 8001f66:	4640      	mov	r0, r8
 8001f68:	f000 fc60 	bl	800282c <__clzsi2>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	3a08      	subs	r2, #8
 8001f70:	2120      	movs	r1, #32
 8001f72:	0020      	movs	r0, r4
 8001f74:	4643      	mov	r3, r8
 8001f76:	1a89      	subs	r1, r1, r2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	40c8      	lsrs	r0, r1
 8001f7c:	4094      	lsls	r4, r2
 8001f7e:	4303      	orrs	r3, r0
 8001f80:	4296      	cmp	r6, r2
 8001f82:	dd00      	ble.n	8001f86 <__aeabi_dsub+0xe2>
 8001f84:	e157      	b.n	8002236 <__aeabi_dsub+0x392>
 8001f86:	1b96      	subs	r6, r2, r6
 8001f88:	1c71      	adds	r1, r6, #1
 8001f8a:	291f      	cmp	r1, #31
 8001f8c:	dd00      	ble.n	8001f90 <__aeabi_dsub+0xec>
 8001f8e:	e1cb      	b.n	8002328 <__aeabi_dsub+0x484>
 8001f90:	2220      	movs	r2, #32
 8001f92:	0018      	movs	r0, r3
 8001f94:	0026      	movs	r6, r4
 8001f96:	1a52      	subs	r2, r2, r1
 8001f98:	4094      	lsls	r4, r2
 8001f9a:	4090      	lsls	r0, r2
 8001f9c:	40ce      	lsrs	r6, r1
 8001f9e:	40cb      	lsrs	r3, r1
 8001fa0:	1e62      	subs	r2, r4, #1
 8001fa2:	4194      	sbcs	r4, r2
 8001fa4:	4330      	orrs	r0, r6
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4304      	orrs	r4, r0
 8001fac:	0763      	lsls	r3, r4, #29
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dsub+0x120>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4023      	ands	r3, r4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x120>
 8001fb8:	1d23      	adds	r3, r4, #4
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	41a4      	sbcs	r4, r4
 8001fbe:	4264      	negs	r4, r4
 8001fc0:	44a0      	add	r8, r4
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	d400      	bmi.n	8001fcc <__aeabi_dsub+0x128>
 8001fca:	e0df      	b.n	800218c <__aeabi_dsub+0x2e8>
 8001fcc:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <__aeabi_dsub+0x334>)
 8001fce:	3601      	adds	r6, #1
 8001fd0:	429e      	cmp	r6, r3
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dsub+0x132>
 8001fd4:	e0fb      	b.n	80021ce <__aeabi_dsub+0x32a>
 8001fd6:	4642      	mov	r2, r8
 8001fd8:	4b80      	ldr	r3, [pc, #512]	; (80021dc <__aeabi_dsub+0x338>)
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	0013      	movs	r3, r2
 8001fe0:	0571      	lsls	r1, r6, #21
 8001fe2:	0752      	lsls	r2, r2, #29
 8001fe4:	025b      	lsls	r3, r3, #9
 8001fe6:	4322      	orrs	r2, r4
 8001fe8:	0b1b      	lsrs	r3, r3, #12
 8001fea:	0d49      	lsrs	r1, r1, #21
 8001fec:	0509      	lsls	r1, r1, #20
 8001fee:	07ed      	lsls	r5, r5, #31
 8001ff0:	4319      	orrs	r1, r3
 8001ff2:	4329      	orrs	r1, r5
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff8:	46bb      	mov	fp, r7
 8001ffa:	46b2      	mov	sl, r6
 8001ffc:	46a9      	mov	r9, r5
 8001ffe:	46a0      	mov	r8, r4
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002002:	1ab4      	subs	r4, r6, r2
 8002004:	46a4      	mov	ip, r4
 8002006:	2c00      	cmp	r4, #0
 8002008:	dd58      	ble.n	80020bc <__aeabi_dsub+0x218>
 800200a:	2a00      	cmp	r2, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x16c>
 800200e:	e09e      	b.n	800214e <__aeabi_dsub+0x2aa>
 8002010:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <__aeabi_dsub+0x334>)
 8002012:	4296      	cmp	r6, r2
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x174>
 8002016:	e13b      	b.n	8002290 <__aeabi_dsub+0x3ec>
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	0412      	lsls	r2, r2, #16
 800201c:	4311      	orrs	r1, r2
 800201e:	4662      	mov	r2, ip
 8002020:	2a38      	cmp	r2, #56	; 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x182>
 8002024:	e0c1      	b.n	80021aa <__aeabi_dsub+0x306>
 8002026:	2a1f      	cmp	r2, #31
 8002028:	dc00      	bgt.n	800202c <__aeabi_dsub+0x188>
 800202a:	e1bb      	b.n	80023a4 <__aeabi_dsub+0x500>
 800202c:	000c      	movs	r4, r1
 800202e:	3a20      	subs	r2, #32
 8002030:	40d4      	lsrs	r4, r2
 8002032:	0022      	movs	r2, r4
 8002034:	4664      	mov	r4, ip
 8002036:	2c20      	cmp	r4, #32
 8002038:	d004      	beq.n	8002044 <__aeabi_dsub+0x1a0>
 800203a:	2740      	movs	r7, #64	; 0x40
 800203c:	1b3f      	subs	r7, r7, r4
 800203e:	40b9      	lsls	r1, r7
 8002040:	4308      	orrs	r0, r1
 8002042:	4680      	mov	r8, r0
 8002044:	4644      	mov	r4, r8
 8002046:	1e61      	subs	r1, r4, #1
 8002048:	418c      	sbcs	r4, r1
 800204a:	4314      	orrs	r4, r2
 800204c:	e0b1      	b.n	80021b2 <__aeabi_dsub+0x30e>
 800204e:	000c      	movs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	d02a      	beq.n	80020aa <__aeabi_dsub+0x206>
 8002054:	46bb      	mov	fp, r7
 8002056:	42bd      	cmp	r5, r7
 8002058:	d02d      	beq.n	80020b6 <__aeabi_dsub+0x212>
 800205a:	4c61      	ldr	r4, [pc, #388]	; (80021e0 <__aeabi_dsub+0x33c>)
 800205c:	46a4      	mov	ip, r4
 800205e:	44b4      	add	ip, r6
 8002060:	4664      	mov	r4, ip
 8002062:	2c00      	cmp	r4, #0
 8002064:	d05c      	beq.n	8002120 <__aeabi_dsub+0x27c>
 8002066:	1b94      	subs	r4, r2, r6
 8002068:	46a4      	mov	ip, r4
 800206a:	2e00      	cmp	r6, #0
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x1cc>
 800206e:	e115      	b.n	800229c <__aeabi_dsub+0x3f8>
 8002070:	464d      	mov	r5, r9
 8002072:	431d      	orrs	r5, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x1d4>
 8002076:	e1c3      	b.n	8002400 <__aeabi_dsub+0x55c>
 8002078:	1e65      	subs	r5, r4, #1
 800207a:	2c01      	cmp	r4, #1
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x1dc>
 800207e:	e20c      	b.n	800249a <__aeabi_dsub+0x5f6>
 8002080:	4e55      	ldr	r6, [pc, #340]	; (80021d8 <__aeabi_dsub+0x334>)
 8002082:	42b4      	cmp	r4, r6
 8002084:	d100      	bne.n	8002088 <__aeabi_dsub+0x1e4>
 8002086:	e1f8      	b.n	800247a <__aeabi_dsub+0x5d6>
 8002088:	46ac      	mov	ip, r5
 800208a:	e10e      	b.n	80022aa <__aeabi_dsub+0x406>
 800208c:	000a      	movs	r2, r1
 800208e:	4302      	orrs	r2, r0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x1f0>
 8002092:	e136      	b.n	8002302 <__aeabi_dsub+0x45e>
 8002094:	0022      	movs	r2, r4
 8002096:	3a01      	subs	r2, #1
 8002098:	2c01      	cmp	r4, #1
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x1fa>
 800209c:	e1c6      	b.n	800242c <__aeabi_dsub+0x588>
 800209e:	4c4e      	ldr	r4, [pc, #312]	; (80021d8 <__aeabi_dsub+0x334>)
 80020a0:	45a4      	cmp	ip, r4
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x202>
 80020a4:	e0f4      	b.n	8002290 <__aeabi_dsub+0x3ec>
 80020a6:	4694      	mov	ip, r2
 80020a8:	e731      	b.n	8001f0e <__aeabi_dsub+0x6a>
 80020aa:	2401      	movs	r4, #1
 80020ac:	4067      	eors	r7, r4
 80020ae:	46bb      	mov	fp, r7
 80020b0:	42bd      	cmp	r5, r7
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x212>
 80020b4:	e71c      	b.n	8001ef0 <__aeabi_dsub+0x4c>
 80020b6:	4c4a      	ldr	r4, [pc, #296]	; (80021e0 <__aeabi_dsub+0x33c>)
 80020b8:	46a4      	mov	ip, r4
 80020ba:	44b4      	add	ip, r6
 80020bc:	4664      	mov	r4, ip
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x220>
 80020c2:	e0cf      	b.n	8002264 <__aeabi_dsub+0x3c0>
 80020c4:	1b94      	subs	r4, r2, r6
 80020c6:	46a4      	mov	ip, r4
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x22a>
 80020cc:	e15c      	b.n	8002388 <__aeabi_dsub+0x4e4>
 80020ce:	4e42      	ldr	r6, [pc, #264]	; (80021d8 <__aeabi_dsub+0x334>)
 80020d0:	42b2      	cmp	r2, r6
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x232>
 80020d4:	e1ec      	b.n	80024b0 <__aeabi_dsub+0x60c>
 80020d6:	2680      	movs	r6, #128	; 0x80
 80020d8:	0436      	lsls	r6, r6, #16
 80020da:	4333      	orrs	r3, r6
 80020dc:	4664      	mov	r4, ip
 80020de:	2c38      	cmp	r4, #56	; 0x38
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x240>
 80020e2:	e1b3      	b.n	800244c <__aeabi_dsub+0x5a8>
 80020e4:	2c1f      	cmp	r4, #31
 80020e6:	dd00      	ble.n	80020ea <__aeabi_dsub+0x246>
 80020e8:	e238      	b.n	800255c <__aeabi_dsub+0x6b8>
 80020ea:	2620      	movs	r6, #32
 80020ec:	1b36      	subs	r6, r6, r4
 80020ee:	001c      	movs	r4, r3
 80020f0:	40b4      	lsls	r4, r6
 80020f2:	464f      	mov	r7, r9
 80020f4:	46a0      	mov	r8, r4
 80020f6:	4664      	mov	r4, ip
 80020f8:	40e7      	lsrs	r7, r4
 80020fa:	4644      	mov	r4, r8
 80020fc:	433c      	orrs	r4, r7
 80020fe:	464f      	mov	r7, r9
 8002100:	40b7      	lsls	r7, r6
 8002102:	003e      	movs	r6, r7
 8002104:	1e77      	subs	r7, r6, #1
 8002106:	41be      	sbcs	r6, r7
 8002108:	4334      	orrs	r4, r6
 800210a:	4666      	mov	r6, ip
 800210c:	40f3      	lsrs	r3, r6
 800210e:	18c9      	adds	r1, r1, r3
 8002110:	1824      	adds	r4, r4, r0
 8002112:	4284      	cmp	r4, r0
 8002114:	419b      	sbcs	r3, r3
 8002116:	425b      	negs	r3, r3
 8002118:	4698      	mov	r8, r3
 800211a:	0016      	movs	r6, r2
 800211c:	4488      	add	r8, r1
 800211e:	e04e      	b.n	80021be <__aeabi_dsub+0x31a>
 8002120:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <__aeabi_dsub+0x340>)
 8002122:	1c74      	adds	r4, r6, #1
 8002124:	4214      	tst	r4, r2
 8002126:	d000      	beq.n	800212a <__aeabi_dsub+0x286>
 8002128:	e0d6      	b.n	80022d8 <__aeabi_dsub+0x434>
 800212a:	464a      	mov	r2, r9
 800212c:	431a      	orrs	r2, r3
 800212e:	2e00      	cmp	r6, #0
 8002130:	d000      	beq.n	8002134 <__aeabi_dsub+0x290>
 8002132:	e15b      	b.n	80023ec <__aeabi_dsub+0x548>
 8002134:	2a00      	cmp	r2, #0
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x296>
 8002138:	e1a5      	b.n	8002486 <__aeabi_dsub+0x5e2>
 800213a:	000a      	movs	r2, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x29e>
 8002140:	e1bb      	b.n	80024ba <__aeabi_dsub+0x616>
 8002142:	464a      	mov	r2, r9
 8002144:	0759      	lsls	r1, r3, #29
 8002146:	08d2      	lsrs	r2, r2, #3
 8002148:	430a      	orrs	r2, r1
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	e027      	b.n	800219e <__aeabi_dsub+0x2fa>
 800214e:	000a      	movs	r2, r1
 8002150:	4302      	orrs	r2, r0
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2b2>
 8002154:	e174      	b.n	8002440 <__aeabi_dsub+0x59c>
 8002156:	0022      	movs	r2, r4
 8002158:	3a01      	subs	r2, #1
 800215a:	2c01      	cmp	r4, #1
 800215c:	d005      	beq.n	800216a <__aeabi_dsub+0x2c6>
 800215e:	4c1e      	ldr	r4, [pc, #120]	; (80021d8 <__aeabi_dsub+0x334>)
 8002160:	45a4      	cmp	ip, r4
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x2c2>
 8002164:	e094      	b.n	8002290 <__aeabi_dsub+0x3ec>
 8002166:	4694      	mov	ip, r2
 8002168:	e759      	b.n	800201e <__aeabi_dsub+0x17a>
 800216a:	4448      	add	r0, r9
 800216c:	4548      	cmp	r0, r9
 800216e:	4192      	sbcs	r2, r2
 8002170:	185b      	adds	r3, r3, r1
 8002172:	4698      	mov	r8, r3
 8002174:	0004      	movs	r4, r0
 8002176:	4252      	negs	r2, r2
 8002178:	4490      	add	r8, r2
 800217a:	4643      	mov	r3, r8
 800217c:	2602      	movs	r6, #2
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	d500      	bpl.n	8002184 <__aeabi_dsub+0x2e0>
 8002182:	e0c4      	b.n	800230e <__aeabi_dsub+0x46a>
 8002184:	3e01      	subs	r6, #1
 8002186:	0763      	lsls	r3, r4, #29
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x2e8>
 800218a:	e711      	b.n	8001fb0 <__aeabi_dsub+0x10c>
 800218c:	4643      	mov	r3, r8
 800218e:	46b4      	mov	ip, r6
 8002190:	0759      	lsls	r1, r3, #29
 8002192:	08e2      	lsrs	r2, r4, #3
 8002194:	430a      	orrs	r2, r1
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	490f      	ldr	r1, [pc, #60]	; (80021d8 <__aeabi_dsub+0x334>)
 800219a:	458c      	cmp	ip, r1
 800219c:	d040      	beq.n	8002220 <__aeabi_dsub+0x37c>
 800219e:	4661      	mov	r1, ip
 80021a0:	031b      	lsls	r3, r3, #12
 80021a2:	0549      	lsls	r1, r1, #21
 80021a4:	0b1b      	lsrs	r3, r3, #12
 80021a6:	0d49      	lsrs	r1, r1, #21
 80021a8:	e720      	b.n	8001fec <__aeabi_dsub+0x148>
 80021aa:	4301      	orrs	r1, r0
 80021ac:	000c      	movs	r4, r1
 80021ae:	1e61      	subs	r1, r4, #1
 80021b0:	418c      	sbcs	r4, r1
 80021b2:	444c      	add	r4, r9
 80021b4:	454c      	cmp	r4, r9
 80021b6:	4192      	sbcs	r2, r2
 80021b8:	4252      	negs	r2, r2
 80021ba:	4690      	mov	r8, r2
 80021bc:	4498      	add	r8, r3
 80021be:	4643      	mov	r3, r8
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	d5e0      	bpl.n	8002186 <__aeabi_dsub+0x2e2>
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__aeabi_dsub+0x334>)
 80021c6:	3601      	adds	r6, #1
 80021c8:	429e      	cmp	r6, r3
 80021ca:	d000      	beq.n	80021ce <__aeabi_dsub+0x32a>
 80021cc:	e09f      	b.n	800230e <__aeabi_dsub+0x46a>
 80021ce:	0031      	movs	r1, r6
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	e70a      	b.n	8001fec <__aeabi_dsub+0x148>
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	000007ff 	.word	0x000007ff
 80021dc:	ff7fffff 	.word	0xff7fffff
 80021e0:	fffff801 	.word	0xfffff801
 80021e4:	000007fe 	.word	0x000007fe
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x34a>
 80021ec:	e160      	b.n	80024b0 <__aeabi_dsub+0x60c>
 80021ee:	000a      	movs	r2, r1
 80021f0:	4302      	orrs	r2, r0
 80021f2:	d04d      	beq.n	8002290 <__aeabi_dsub+0x3ec>
 80021f4:	464a      	mov	r2, r9
 80021f6:	075c      	lsls	r4, r3, #29
 80021f8:	08d2      	lsrs	r2, r2, #3
 80021fa:	4322      	orrs	r2, r4
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4223      	tst	r3, r4
 8002204:	d007      	beq.n	8002216 <__aeabi_dsub+0x372>
 8002206:	08ce      	lsrs	r6, r1, #3
 8002208:	4226      	tst	r6, r4
 800220a:	d104      	bne.n	8002216 <__aeabi_dsub+0x372>
 800220c:	465d      	mov	r5, fp
 800220e:	0033      	movs	r3, r6
 8002210:	08c2      	lsrs	r2, r0, #3
 8002212:	0749      	lsls	r1, r1, #29
 8002214:	430a      	orrs	r2, r1
 8002216:	0f51      	lsrs	r1, r2, #29
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	08d2      	lsrs	r2, r2, #3
 800221c:	0749      	lsls	r1, r1, #29
 800221e:	430a      	orrs	r2, r1
 8002220:	0011      	movs	r1, r2
 8002222:	4319      	orrs	r1, r3
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x384>
 8002226:	e1c8      	b.n	80025ba <__aeabi_dsub+0x716>
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	0309      	lsls	r1, r1, #12
 800222c:	430b      	orrs	r3, r1
 800222e:	031b      	lsls	r3, r3, #12
 8002230:	49d5      	ldr	r1, [pc, #852]	; (8002588 <__aeabi_dsub+0x6e4>)
 8002232:	0b1b      	lsrs	r3, r3, #12
 8002234:	e6da      	b.n	8001fec <__aeabi_dsub+0x148>
 8002236:	49d5      	ldr	r1, [pc, #852]	; (800258c <__aeabi_dsub+0x6e8>)
 8002238:	1ab6      	subs	r6, r6, r2
 800223a:	400b      	ands	r3, r1
 800223c:	4698      	mov	r8, r3
 800223e:	e6b5      	b.n	8001fac <__aeabi_dsub+0x108>
 8002240:	0020      	movs	r0, r4
 8002242:	f000 faf3 	bl	800282c <__clzsi2>
 8002246:	0002      	movs	r2, r0
 8002248:	3218      	adds	r2, #24
 800224a:	2a1f      	cmp	r2, #31
 800224c:	dc00      	bgt.n	8002250 <__aeabi_dsub+0x3ac>
 800224e:	e68f      	b.n	8001f70 <__aeabi_dsub+0xcc>
 8002250:	0023      	movs	r3, r4
 8002252:	3808      	subs	r0, #8
 8002254:	4083      	lsls	r3, r0
 8002256:	2400      	movs	r4, #0
 8002258:	e692      	b.n	8001f80 <__aeabi_dsub+0xdc>
 800225a:	4308      	orrs	r0, r1
 800225c:	0002      	movs	r2, r0
 800225e:	1e50      	subs	r0, r2, #1
 8002260:	4182      	sbcs	r2, r0
 8002262:	e66d      	b.n	8001f40 <__aeabi_dsub+0x9c>
 8002264:	4cca      	ldr	r4, [pc, #808]	; (8002590 <__aeabi_dsub+0x6ec>)
 8002266:	1c72      	adds	r2, r6, #1
 8002268:	4222      	tst	r2, r4
 800226a:	d000      	beq.n	800226e <__aeabi_dsub+0x3ca>
 800226c:	e0ad      	b.n	80023ca <__aeabi_dsub+0x526>
 800226e:	464a      	mov	r2, r9
 8002270:	431a      	orrs	r2, r3
 8002272:	2e00      	cmp	r6, #0
 8002274:	d1b8      	bne.n	80021e8 <__aeabi_dsub+0x344>
 8002276:	2a00      	cmp	r2, #0
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x3d8>
 800227a:	e158      	b.n	800252e <__aeabi_dsub+0x68a>
 800227c:	000a      	movs	r2, r1
 800227e:	4302      	orrs	r2, r0
 8002280:	d000      	beq.n	8002284 <__aeabi_dsub+0x3e0>
 8002282:	e159      	b.n	8002538 <__aeabi_dsub+0x694>
 8002284:	464a      	mov	r2, r9
 8002286:	0759      	lsls	r1, r3, #29
 8002288:	08d2      	lsrs	r2, r2, #3
 800228a:	430a      	orrs	r2, r1
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	e786      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002290:	464a      	mov	r2, r9
 8002292:	0759      	lsls	r1, r3, #29
 8002294:	08d2      	lsrs	r2, r2, #3
 8002296:	430a      	orrs	r2, r1
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	e7c1      	b.n	8002220 <__aeabi_dsub+0x37c>
 800229c:	4dba      	ldr	r5, [pc, #744]	; (8002588 <__aeabi_dsub+0x6e4>)
 800229e:	42aa      	cmp	r2, r5
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x400>
 80022a2:	e11e      	b.n	80024e2 <__aeabi_dsub+0x63e>
 80022a4:	2580      	movs	r5, #128	; 0x80
 80022a6:	042d      	lsls	r5, r5, #16
 80022a8:	432b      	orrs	r3, r5
 80022aa:	4664      	mov	r4, ip
 80022ac:	2c38      	cmp	r4, #56	; 0x38
 80022ae:	dc5d      	bgt.n	800236c <__aeabi_dsub+0x4c8>
 80022b0:	2c1f      	cmp	r4, #31
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dsub+0x412>
 80022b4:	e0d0      	b.n	8002458 <__aeabi_dsub+0x5b4>
 80022b6:	2520      	movs	r5, #32
 80022b8:	4667      	mov	r7, ip
 80022ba:	1b2d      	subs	r5, r5, r4
 80022bc:	464e      	mov	r6, r9
 80022be:	001c      	movs	r4, r3
 80022c0:	40fe      	lsrs	r6, r7
 80022c2:	40ac      	lsls	r4, r5
 80022c4:	4334      	orrs	r4, r6
 80022c6:	464e      	mov	r6, r9
 80022c8:	40ae      	lsls	r6, r5
 80022ca:	0035      	movs	r5, r6
 80022cc:	40fb      	lsrs	r3, r7
 80022ce:	1e6e      	subs	r6, r5, #1
 80022d0:	41b5      	sbcs	r5, r6
 80022d2:	1ac9      	subs	r1, r1, r3
 80022d4:	432c      	orrs	r4, r5
 80022d6:	e04e      	b.n	8002376 <__aeabi_dsub+0x4d2>
 80022d8:	464a      	mov	r2, r9
 80022da:	1a14      	subs	r4, r2, r0
 80022dc:	45a1      	cmp	r9, r4
 80022de:	4192      	sbcs	r2, r2
 80022e0:	4252      	negs	r2, r2
 80022e2:	4690      	mov	r8, r2
 80022e4:	1a5f      	subs	r7, r3, r1
 80022e6:	003a      	movs	r2, r7
 80022e8:	4647      	mov	r7, r8
 80022ea:	1bd2      	subs	r2, r2, r7
 80022ec:	4690      	mov	r8, r2
 80022ee:	0212      	lsls	r2, r2, #8
 80022f0:	d500      	bpl.n	80022f4 <__aeabi_dsub+0x450>
 80022f2:	e08b      	b.n	800240c <__aeabi_dsub+0x568>
 80022f4:	4642      	mov	r2, r8
 80022f6:	4322      	orrs	r2, r4
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x458>
 80022fa:	e630      	b.n	8001f5e <__aeabi_dsub+0xba>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2500      	movs	r5, #0
 8002300:	e74d      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002302:	464a      	mov	r2, r9
 8002304:	0759      	lsls	r1, r3, #29
 8002306:	08d2      	lsrs	r2, r2, #3
 8002308:	430a      	orrs	r2, r1
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	e744      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800230e:	4642      	mov	r2, r8
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <__aeabi_dsub+0x6e8>)
 8002312:	0861      	lsrs	r1, r4, #1
 8002314:	401a      	ands	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	2201      	movs	r2, #1
 800231a:	4014      	ands	r4, r2
 800231c:	430c      	orrs	r4, r1
 800231e:	07da      	lsls	r2, r3, #31
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	4698      	mov	r8, r3
 8002324:	4314      	orrs	r4, r2
 8002326:	e641      	b.n	8001fac <__aeabi_dsub+0x108>
 8002328:	001a      	movs	r2, r3
 800232a:	3e1f      	subs	r6, #31
 800232c:	40f2      	lsrs	r2, r6
 800232e:	0016      	movs	r6, r2
 8002330:	2920      	cmp	r1, #32
 8002332:	d003      	beq.n	800233c <__aeabi_dsub+0x498>
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	1a51      	subs	r1, r2, r1
 8002338:	408b      	lsls	r3, r1
 800233a:	431c      	orrs	r4, r3
 800233c:	1e62      	subs	r2, r4, #1
 800233e:	4194      	sbcs	r4, r2
 8002340:	2300      	movs	r3, #0
 8002342:	4334      	orrs	r4, r6
 8002344:	4698      	mov	r8, r3
 8002346:	2600      	movs	r6, #0
 8002348:	e71d      	b.n	8002186 <__aeabi_dsub+0x2e2>
 800234a:	000c      	movs	r4, r1
 800234c:	3a20      	subs	r2, #32
 800234e:	40d4      	lsrs	r4, r2
 8002350:	0022      	movs	r2, r4
 8002352:	4664      	mov	r4, ip
 8002354:	2c20      	cmp	r4, #32
 8002356:	d004      	beq.n	8002362 <__aeabi_dsub+0x4be>
 8002358:	2740      	movs	r7, #64	; 0x40
 800235a:	1b3f      	subs	r7, r7, r4
 800235c:	40b9      	lsls	r1, r7
 800235e:	4308      	orrs	r0, r1
 8002360:	4680      	mov	r8, r0
 8002362:	4644      	mov	r4, r8
 8002364:	1e61      	subs	r1, r4, #1
 8002366:	418c      	sbcs	r4, r1
 8002368:	4322      	orrs	r2, r4
 800236a:	e5e9      	b.n	8001f40 <__aeabi_dsub+0x9c>
 800236c:	464c      	mov	r4, r9
 800236e:	4323      	orrs	r3, r4
 8002370:	001c      	movs	r4, r3
 8002372:	1e63      	subs	r3, r4, #1
 8002374:	419c      	sbcs	r4, r3
 8002376:	1b04      	subs	r4, r0, r4
 8002378:	42a0      	cmp	r0, r4
 800237a:	419b      	sbcs	r3, r3
 800237c:	425b      	negs	r3, r3
 800237e:	1acb      	subs	r3, r1, r3
 8002380:	4698      	mov	r8, r3
 8002382:	465d      	mov	r5, fp
 8002384:	0016      	movs	r6, r2
 8002386:	e5e2      	b.n	8001f4e <__aeabi_dsub+0xaa>
 8002388:	464e      	mov	r6, r9
 800238a:	431e      	orrs	r6, r3
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4ec>
 800238e:	e0ae      	b.n	80024ee <__aeabi_dsub+0x64a>
 8002390:	1e66      	subs	r6, r4, #1
 8002392:	2c01      	cmp	r4, #1
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x4f4>
 8002396:	e0fd      	b.n	8002594 <__aeabi_dsub+0x6f0>
 8002398:	4f7b      	ldr	r7, [pc, #492]	; (8002588 <__aeabi_dsub+0x6e4>)
 800239a:	42bc      	cmp	r4, r7
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4fc>
 800239e:	e107      	b.n	80025b0 <__aeabi_dsub+0x70c>
 80023a0:	46b4      	mov	ip, r6
 80023a2:	e69b      	b.n	80020dc <__aeabi_dsub+0x238>
 80023a4:	4664      	mov	r4, ip
 80023a6:	2220      	movs	r2, #32
 80023a8:	1b12      	subs	r2, r2, r4
 80023aa:	000c      	movs	r4, r1
 80023ac:	4094      	lsls	r4, r2
 80023ae:	0007      	movs	r7, r0
 80023b0:	4090      	lsls	r0, r2
 80023b2:	46a0      	mov	r8, r4
 80023b4:	4664      	mov	r4, ip
 80023b6:	1e42      	subs	r2, r0, #1
 80023b8:	4190      	sbcs	r0, r2
 80023ba:	4662      	mov	r2, ip
 80023bc:	40e7      	lsrs	r7, r4
 80023be:	4644      	mov	r4, r8
 80023c0:	40d1      	lsrs	r1, r2
 80023c2:	433c      	orrs	r4, r7
 80023c4:	4304      	orrs	r4, r0
 80023c6:	185b      	adds	r3, r3, r1
 80023c8:	e6f3      	b.n	80021b2 <__aeabi_dsub+0x30e>
 80023ca:	4c6f      	ldr	r4, [pc, #444]	; (8002588 <__aeabi_dsub+0x6e4>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x52e>
 80023d0:	e0d5      	b.n	800257e <__aeabi_dsub+0x6da>
 80023d2:	4448      	add	r0, r9
 80023d4:	185b      	adds	r3, r3, r1
 80023d6:	4548      	cmp	r0, r9
 80023d8:	4189      	sbcs	r1, r1
 80023da:	4249      	negs	r1, r1
 80023dc:	185b      	adds	r3, r3, r1
 80023de:	07dc      	lsls	r4, r3, #31
 80023e0:	0840      	lsrs	r0, r0, #1
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	4698      	mov	r8, r3
 80023e6:	0016      	movs	r6, r2
 80023e8:	4304      	orrs	r4, r0
 80023ea:	e6cc      	b.n	8002186 <__aeabi_dsub+0x2e2>
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d000      	beq.n	80023f2 <__aeabi_dsub+0x54e>
 80023f0:	e082      	b.n	80024f8 <__aeabi_dsub+0x654>
 80023f2:	000a      	movs	r2, r1
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d140      	bne.n	800247a <__aeabi_dsub+0x5d6>
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	2500      	movs	r5, #0
 80023fc:	031b      	lsls	r3, r3, #12
 80023fe:	e713      	b.n	8002228 <__aeabi_dsub+0x384>
 8002400:	074b      	lsls	r3, r1, #29
 8002402:	08c2      	lsrs	r2, r0, #3
 8002404:	431a      	orrs	r2, r3
 8002406:	465d      	mov	r5, fp
 8002408:	08cb      	lsrs	r3, r1, #3
 800240a:	e6c5      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800240c:	464a      	mov	r2, r9
 800240e:	1a84      	subs	r4, r0, r2
 8002410:	42a0      	cmp	r0, r4
 8002412:	4192      	sbcs	r2, r2
 8002414:	1acb      	subs	r3, r1, r3
 8002416:	4252      	negs	r2, r2
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	4698      	mov	r8, r3
 800241c:	465d      	mov	r5, fp
 800241e:	e59e      	b.n	8001f5e <__aeabi_dsub+0xba>
 8002420:	464a      	mov	r2, r9
 8002422:	0759      	lsls	r1, r3, #29
 8002424:	08d2      	lsrs	r2, r2, #3
 8002426:	430a      	orrs	r2, r1
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	e6f9      	b.n	8002220 <__aeabi_dsub+0x37c>
 800242c:	464a      	mov	r2, r9
 800242e:	1a14      	subs	r4, r2, r0
 8002430:	45a1      	cmp	r9, r4
 8002432:	4192      	sbcs	r2, r2
 8002434:	1a5b      	subs	r3, r3, r1
 8002436:	4252      	negs	r2, r2
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	4698      	mov	r8, r3
 800243c:	2601      	movs	r6, #1
 800243e:	e586      	b.n	8001f4e <__aeabi_dsub+0xaa>
 8002440:	464a      	mov	r2, r9
 8002442:	0759      	lsls	r1, r3, #29
 8002444:	08d2      	lsrs	r2, r2, #3
 8002446:	430a      	orrs	r2, r1
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	e6a5      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800244c:	464c      	mov	r4, r9
 800244e:	4323      	orrs	r3, r4
 8002450:	001c      	movs	r4, r3
 8002452:	1e63      	subs	r3, r4, #1
 8002454:	419c      	sbcs	r4, r3
 8002456:	e65b      	b.n	8002110 <__aeabi_dsub+0x26c>
 8002458:	4665      	mov	r5, ip
 800245a:	001e      	movs	r6, r3
 800245c:	3d20      	subs	r5, #32
 800245e:	40ee      	lsrs	r6, r5
 8002460:	2c20      	cmp	r4, #32
 8002462:	d005      	beq.n	8002470 <__aeabi_dsub+0x5cc>
 8002464:	2540      	movs	r5, #64	; 0x40
 8002466:	1b2d      	subs	r5, r5, r4
 8002468:	40ab      	lsls	r3, r5
 800246a:	464c      	mov	r4, r9
 800246c:	431c      	orrs	r4, r3
 800246e:	46a2      	mov	sl, r4
 8002470:	4654      	mov	r4, sl
 8002472:	1e63      	subs	r3, r4, #1
 8002474:	419c      	sbcs	r4, r3
 8002476:	4334      	orrs	r4, r6
 8002478:	e77d      	b.n	8002376 <__aeabi_dsub+0x4d2>
 800247a:	074b      	lsls	r3, r1, #29
 800247c:	08c2      	lsrs	r2, r0, #3
 800247e:	431a      	orrs	r2, r3
 8002480:	465d      	mov	r5, fp
 8002482:	08cb      	lsrs	r3, r1, #3
 8002484:	e6cc      	b.n	8002220 <__aeabi_dsub+0x37c>
 8002486:	000a      	movs	r2, r1
 8002488:	4302      	orrs	r2, r0
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x5ea>
 800248c:	e736      	b.n	80022fc <__aeabi_dsub+0x458>
 800248e:	074b      	lsls	r3, r1, #29
 8002490:	08c2      	lsrs	r2, r0, #3
 8002492:	431a      	orrs	r2, r3
 8002494:	465d      	mov	r5, fp
 8002496:	08cb      	lsrs	r3, r1, #3
 8002498:	e681      	b.n	800219e <__aeabi_dsub+0x2fa>
 800249a:	464a      	mov	r2, r9
 800249c:	1a84      	subs	r4, r0, r2
 800249e:	42a0      	cmp	r0, r4
 80024a0:	4192      	sbcs	r2, r2
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	4252      	negs	r2, r2
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	4698      	mov	r8, r3
 80024aa:	465d      	mov	r5, fp
 80024ac:	2601      	movs	r6, #1
 80024ae:	e54e      	b.n	8001f4e <__aeabi_dsub+0xaa>
 80024b0:	074b      	lsls	r3, r1, #29
 80024b2:	08c2      	lsrs	r2, r0, #3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	08cb      	lsrs	r3, r1, #3
 80024b8:	e6b2      	b.n	8002220 <__aeabi_dsub+0x37c>
 80024ba:	464a      	mov	r2, r9
 80024bc:	1a14      	subs	r4, r2, r0
 80024be:	45a1      	cmp	r9, r4
 80024c0:	4192      	sbcs	r2, r2
 80024c2:	1a5f      	subs	r7, r3, r1
 80024c4:	4252      	negs	r2, r2
 80024c6:	1aba      	subs	r2, r7, r2
 80024c8:	4690      	mov	r8, r2
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	d56b      	bpl.n	80025a6 <__aeabi_dsub+0x702>
 80024ce:	464a      	mov	r2, r9
 80024d0:	1a84      	subs	r4, r0, r2
 80024d2:	42a0      	cmp	r0, r4
 80024d4:	4192      	sbcs	r2, r2
 80024d6:	1acb      	subs	r3, r1, r3
 80024d8:	4252      	negs	r2, r2
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	4698      	mov	r8, r3
 80024de:	465d      	mov	r5, fp
 80024e0:	e564      	b.n	8001fac <__aeabi_dsub+0x108>
 80024e2:	074b      	lsls	r3, r1, #29
 80024e4:	08c2      	lsrs	r2, r0, #3
 80024e6:	431a      	orrs	r2, r3
 80024e8:	465d      	mov	r5, fp
 80024ea:	08cb      	lsrs	r3, r1, #3
 80024ec:	e698      	b.n	8002220 <__aeabi_dsub+0x37c>
 80024ee:	074b      	lsls	r3, r1, #29
 80024f0:	08c2      	lsrs	r2, r0, #3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	08cb      	lsrs	r3, r1, #3
 80024f6:	e64f      	b.n	8002198 <__aeabi_dsub+0x2f4>
 80024f8:	000a      	movs	r2, r1
 80024fa:	4302      	orrs	r2, r0
 80024fc:	d090      	beq.n	8002420 <__aeabi_dsub+0x57c>
 80024fe:	464a      	mov	r2, r9
 8002500:	075c      	lsls	r4, r3, #29
 8002502:	08d2      	lsrs	r2, r2, #3
 8002504:	4314      	orrs	r4, r2
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	0312      	lsls	r2, r2, #12
 800250c:	4213      	tst	r3, r2
 800250e:	d008      	beq.n	8002522 <__aeabi_dsub+0x67e>
 8002510:	08ce      	lsrs	r6, r1, #3
 8002512:	4216      	tst	r6, r2
 8002514:	d105      	bne.n	8002522 <__aeabi_dsub+0x67e>
 8002516:	08c0      	lsrs	r0, r0, #3
 8002518:	0749      	lsls	r1, r1, #29
 800251a:	4308      	orrs	r0, r1
 800251c:	0004      	movs	r4, r0
 800251e:	465d      	mov	r5, fp
 8002520:	0033      	movs	r3, r6
 8002522:	0f61      	lsrs	r1, r4, #29
 8002524:	00e2      	lsls	r2, r4, #3
 8002526:	0749      	lsls	r1, r1, #29
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	430a      	orrs	r2, r1
 800252c:	e678      	b.n	8002220 <__aeabi_dsub+0x37c>
 800252e:	074b      	lsls	r3, r1, #29
 8002530:	08c2      	lsrs	r2, r0, #3
 8002532:	431a      	orrs	r2, r3
 8002534:	08cb      	lsrs	r3, r1, #3
 8002536:	e632      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002538:	4448      	add	r0, r9
 800253a:	185b      	adds	r3, r3, r1
 800253c:	4548      	cmp	r0, r9
 800253e:	4192      	sbcs	r2, r2
 8002540:	4698      	mov	r8, r3
 8002542:	4252      	negs	r2, r2
 8002544:	4490      	add	r8, r2
 8002546:	4643      	mov	r3, r8
 8002548:	0004      	movs	r4, r0
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0x6ac>
 800254e:	e61a      	b.n	8002186 <__aeabi_dsub+0x2e2>
 8002550:	4642      	mov	r2, r8
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <__aeabi_dsub+0x6e8>)
 8002554:	2601      	movs	r6, #1
 8002556:	401a      	ands	r2, r3
 8002558:	4690      	mov	r8, r2
 800255a:	e614      	b.n	8002186 <__aeabi_dsub+0x2e2>
 800255c:	4666      	mov	r6, ip
 800255e:	001f      	movs	r7, r3
 8002560:	3e20      	subs	r6, #32
 8002562:	40f7      	lsrs	r7, r6
 8002564:	2c20      	cmp	r4, #32
 8002566:	d005      	beq.n	8002574 <__aeabi_dsub+0x6d0>
 8002568:	2640      	movs	r6, #64	; 0x40
 800256a:	1b36      	subs	r6, r6, r4
 800256c:	40b3      	lsls	r3, r6
 800256e:	464c      	mov	r4, r9
 8002570:	431c      	orrs	r4, r3
 8002572:	46a2      	mov	sl, r4
 8002574:	4654      	mov	r4, sl
 8002576:	1e63      	subs	r3, r4, #1
 8002578:	419c      	sbcs	r4, r3
 800257a:	433c      	orrs	r4, r7
 800257c:	e5c8      	b.n	8002110 <__aeabi_dsub+0x26c>
 800257e:	0011      	movs	r1, r2
 8002580:	2300      	movs	r3, #0
 8002582:	2200      	movs	r2, #0
 8002584:	e532      	b.n	8001fec <__aeabi_dsub+0x148>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	000007ff 	.word	0x000007ff
 800258c:	ff7fffff 	.word	0xff7fffff
 8002590:	000007fe 	.word	0x000007fe
 8002594:	464a      	mov	r2, r9
 8002596:	1814      	adds	r4, r2, r0
 8002598:	4284      	cmp	r4, r0
 800259a:	4192      	sbcs	r2, r2
 800259c:	185b      	adds	r3, r3, r1
 800259e:	4698      	mov	r8, r3
 80025a0:	4252      	negs	r2, r2
 80025a2:	4490      	add	r8, r2
 80025a4:	e5e9      	b.n	800217a <__aeabi_dsub+0x2d6>
 80025a6:	4642      	mov	r2, r8
 80025a8:	4322      	orrs	r2, r4
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x70a>
 80025ac:	e6a6      	b.n	80022fc <__aeabi_dsub+0x458>
 80025ae:	e5ea      	b.n	8002186 <__aeabi_dsub+0x2e2>
 80025b0:	074b      	lsls	r3, r1, #29
 80025b2:	08c2      	lsrs	r2, r0, #3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	08cb      	lsrs	r3, r1, #3
 80025b8:	e632      	b.n	8002220 <__aeabi_dsub+0x37c>
 80025ba:	2200      	movs	r2, #0
 80025bc:	4901      	ldr	r1, [pc, #4]	; (80025c4 <__aeabi_dsub+0x720>)
 80025be:	0013      	movs	r3, r2
 80025c0:	e514      	b.n	8001fec <__aeabi_dsub+0x148>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	000007ff 	.word	0x000007ff

080025c8 <__aeabi_dcmpun>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	0005      	movs	r5, r0
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <__aeabi_dcmpun+0x38>)
 80025ce:	030c      	lsls	r4, r1, #12
 80025d0:	0016      	movs	r6, r2
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	031a      	lsls	r2, r3, #12
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	0b24      	lsrs	r4, r4, #12
 80025da:	0d49      	lsrs	r1, r1, #21
 80025dc:	0b12      	lsrs	r2, r2, #12
 80025de:	0d5b      	lsrs	r3, r3, #21
 80025e0:	4281      	cmp	r1, r0
 80025e2:	d008      	beq.n	80025f6 <__aeabi_dcmpun+0x2e>
 80025e4:	4906      	ldr	r1, [pc, #24]	; (8002600 <__aeabi_dcmpun+0x38>)
 80025e6:	2000      	movs	r0, #0
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d103      	bne.n	80025f4 <__aeabi_dcmpun+0x2c>
 80025ec:	4332      	orrs	r2, r6
 80025ee:	0010      	movs	r0, r2
 80025f0:	1e42      	subs	r2, r0, #1
 80025f2:	4190      	sbcs	r0, r2
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	2001      	movs	r0, #1
 80025f8:	432c      	orrs	r4, r5
 80025fa:	d1fb      	bne.n	80025f4 <__aeabi_dcmpun+0x2c>
 80025fc:	e7f2      	b.n	80025e4 <__aeabi_dcmpun+0x1c>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	000007ff 	.word	0x000007ff

08002604 <__aeabi_d2iz>:
 8002604:	000a      	movs	r2, r1
 8002606:	b530      	push	{r4, r5, lr}
 8002608:	4c13      	ldr	r4, [pc, #76]	; (8002658 <__aeabi_d2iz+0x54>)
 800260a:	0053      	lsls	r3, r2, #1
 800260c:	0309      	lsls	r1, r1, #12
 800260e:	0005      	movs	r5, r0
 8002610:	0b09      	lsrs	r1, r1, #12
 8002612:	2000      	movs	r0, #0
 8002614:	0d5b      	lsrs	r3, r3, #21
 8002616:	0fd2      	lsrs	r2, r2, #31
 8002618:	42a3      	cmp	r3, r4
 800261a:	dd04      	ble.n	8002626 <__aeabi_d2iz+0x22>
 800261c:	480f      	ldr	r0, [pc, #60]	; (800265c <__aeabi_d2iz+0x58>)
 800261e:	4283      	cmp	r3, r0
 8002620:	dd02      	ble.n	8002628 <__aeabi_d2iz+0x24>
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <__aeabi_d2iz+0x5c>)
 8002624:	18d0      	adds	r0, r2, r3
 8002626:	bd30      	pop	{r4, r5, pc}
 8002628:	2080      	movs	r0, #128	; 0x80
 800262a:	0340      	lsls	r0, r0, #13
 800262c:	4301      	orrs	r1, r0
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <__aeabi_d2iz+0x60>)
 8002630:	1ac0      	subs	r0, r0, r3
 8002632:	281f      	cmp	r0, #31
 8002634:	dd08      	ble.n	8002648 <__aeabi_d2iz+0x44>
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <__aeabi_d2iz+0x64>)
 8002638:	1ac3      	subs	r3, r0, r3
 800263a:	40d9      	lsrs	r1, r3
 800263c:	000b      	movs	r3, r1
 800263e:	4258      	negs	r0, r3
 8002640:	2a00      	cmp	r2, #0
 8002642:	d1f0      	bne.n	8002626 <__aeabi_d2iz+0x22>
 8002644:	0018      	movs	r0, r3
 8002646:	e7ee      	b.n	8002626 <__aeabi_d2iz+0x22>
 8002648:	4c08      	ldr	r4, [pc, #32]	; (800266c <__aeabi_d2iz+0x68>)
 800264a:	40c5      	lsrs	r5, r0
 800264c:	46a4      	mov	ip, r4
 800264e:	4463      	add	r3, ip
 8002650:	4099      	lsls	r1, r3
 8002652:	000b      	movs	r3, r1
 8002654:	432b      	orrs	r3, r5
 8002656:	e7f2      	b.n	800263e <__aeabi_d2iz+0x3a>
 8002658:	000003fe 	.word	0x000003fe
 800265c:	0000041d 	.word	0x0000041d
 8002660:	7fffffff 	.word	0x7fffffff
 8002664:	00000433 	.word	0x00000433
 8002668:	00000413 	.word	0x00000413
 800266c:	fffffbed 	.word	0xfffffbed

08002670 <__aeabi_i2d>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2800      	cmp	r0, #0
 8002674:	d016      	beq.n	80026a4 <__aeabi_i2d+0x34>
 8002676:	17c3      	asrs	r3, r0, #31
 8002678:	18c5      	adds	r5, r0, r3
 800267a:	405d      	eors	r5, r3
 800267c:	0fc4      	lsrs	r4, r0, #31
 800267e:	0028      	movs	r0, r5
 8002680:	f000 f8d4 	bl	800282c <__clzsi2>
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <__aeabi_i2d+0x5c>)
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	280a      	cmp	r0, #10
 800268a:	dc16      	bgt.n	80026ba <__aeabi_i2d+0x4a>
 800268c:	0003      	movs	r3, r0
 800268e:	002e      	movs	r6, r5
 8002690:	3315      	adds	r3, #21
 8002692:	409e      	lsls	r6, r3
 8002694:	230b      	movs	r3, #11
 8002696:	1a18      	subs	r0, r3, r0
 8002698:	40c5      	lsrs	r5, r0
 800269a:	0553      	lsls	r3, r2, #21
 800269c:	032d      	lsls	r5, r5, #12
 800269e:	0b2d      	lsrs	r5, r5, #12
 80026a0:	0d5b      	lsrs	r3, r3, #21
 80026a2:	e003      	b.n	80026ac <__aeabi_i2d+0x3c>
 80026a4:	2400      	movs	r4, #0
 80026a6:	2300      	movs	r3, #0
 80026a8:	2500      	movs	r5, #0
 80026aa:	2600      	movs	r6, #0
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	432b      	orrs	r3, r5
 80026b0:	07e4      	lsls	r4, r4, #31
 80026b2:	4323      	orrs	r3, r4
 80026b4:	0030      	movs	r0, r6
 80026b6:	0019      	movs	r1, r3
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	380b      	subs	r0, #11
 80026bc:	4085      	lsls	r5, r0
 80026be:	0553      	lsls	r3, r2, #21
 80026c0:	032d      	lsls	r5, r5, #12
 80026c2:	2600      	movs	r6, #0
 80026c4:	0b2d      	lsrs	r5, r5, #12
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	e7f0      	b.n	80026ac <__aeabi_i2d+0x3c>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	0000041e 	.word	0x0000041e

080026d0 <__aeabi_ui2d>:
 80026d0:	b510      	push	{r4, lr}
 80026d2:	1e04      	subs	r4, r0, #0
 80026d4:	d010      	beq.n	80026f8 <__aeabi_ui2d+0x28>
 80026d6:	f000 f8a9 	bl	800282c <__clzsi2>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <__aeabi_ui2d+0x48>)
 80026dc:	1a1b      	subs	r3, r3, r0
 80026de:	280a      	cmp	r0, #10
 80026e0:	dc11      	bgt.n	8002706 <__aeabi_ui2d+0x36>
 80026e2:	220b      	movs	r2, #11
 80026e4:	0021      	movs	r1, r4
 80026e6:	1a12      	subs	r2, r2, r0
 80026e8:	40d1      	lsrs	r1, r2
 80026ea:	3015      	adds	r0, #21
 80026ec:	030a      	lsls	r2, r1, #12
 80026ee:	055b      	lsls	r3, r3, #21
 80026f0:	4084      	lsls	r4, r0
 80026f2:	0b12      	lsrs	r2, r2, #12
 80026f4:	0d5b      	lsrs	r3, r3, #21
 80026f6:	e001      	b.n	80026fc <__aeabi_ui2d+0x2c>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2200      	movs	r2, #0
 80026fc:	051b      	lsls	r3, r3, #20
 80026fe:	4313      	orrs	r3, r2
 8002700:	0020      	movs	r0, r4
 8002702:	0019      	movs	r1, r3
 8002704:	bd10      	pop	{r4, pc}
 8002706:	0022      	movs	r2, r4
 8002708:	380b      	subs	r0, #11
 800270a:	4082      	lsls	r2, r0
 800270c:	055b      	lsls	r3, r3, #21
 800270e:	0312      	lsls	r2, r2, #12
 8002710:	2400      	movs	r4, #0
 8002712:	0b12      	lsrs	r2, r2, #12
 8002714:	0d5b      	lsrs	r3, r3, #21
 8002716:	e7f1      	b.n	80026fc <__aeabi_ui2d+0x2c>
 8002718:	0000041e 	.word	0x0000041e

0800271c <__aeabi_d2f>:
 800271c:	0002      	movs	r2, r0
 800271e:	004b      	lsls	r3, r1, #1
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	0308      	lsls	r0, r1, #12
 8002724:	0d5b      	lsrs	r3, r3, #21
 8002726:	4e3d      	ldr	r6, [pc, #244]	; (800281c <__aeabi_d2f+0x100>)
 8002728:	0fcc      	lsrs	r4, r1, #31
 800272a:	0a40      	lsrs	r0, r0, #9
 800272c:	0f51      	lsrs	r1, r2, #29
 800272e:	1c5f      	adds	r7, r3, #1
 8002730:	4308      	orrs	r0, r1
 8002732:	00d5      	lsls	r5, r2, #3
 8002734:	4237      	tst	r7, r6
 8002736:	d00a      	beq.n	800274e <__aeabi_d2f+0x32>
 8002738:	4939      	ldr	r1, [pc, #228]	; (8002820 <__aeabi_d2f+0x104>)
 800273a:	185e      	adds	r6, r3, r1
 800273c:	2efe      	cmp	r6, #254	; 0xfe
 800273e:	dd16      	ble.n	800276e <__aeabi_d2f+0x52>
 8002740:	23ff      	movs	r3, #255	; 0xff
 8002742:	2100      	movs	r1, #0
 8002744:	05db      	lsls	r3, r3, #23
 8002746:	430b      	orrs	r3, r1
 8002748:	07e0      	lsls	r0, r4, #31
 800274a:	4318      	orrs	r0, r3
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <__aeabi_d2f+0x44>
 8002752:	4328      	orrs	r0, r5
 8002754:	d027      	beq.n	80027a6 <__aeabi_d2f+0x8a>
 8002756:	2105      	movs	r1, #5
 8002758:	0189      	lsls	r1, r1, #6
 800275a:	0a49      	lsrs	r1, r1, #9
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e7f1      	b.n	8002744 <__aeabi_d2f+0x28>
 8002760:	4305      	orrs	r5, r0
 8002762:	d0ed      	beq.n	8002740 <__aeabi_d2f+0x24>
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	03c9      	lsls	r1, r1, #15
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	4301      	orrs	r1, r0
 800276c:	e7ea      	b.n	8002744 <__aeabi_d2f+0x28>
 800276e:	2e00      	cmp	r6, #0
 8002770:	dd1c      	ble.n	80027ac <__aeabi_d2f+0x90>
 8002772:	0192      	lsls	r2, r2, #6
 8002774:	0011      	movs	r1, r2
 8002776:	1e4a      	subs	r2, r1, #1
 8002778:	4191      	sbcs	r1, r2
 800277a:	00c0      	lsls	r0, r0, #3
 800277c:	0f6d      	lsrs	r5, r5, #29
 800277e:	4301      	orrs	r1, r0
 8002780:	4329      	orrs	r1, r5
 8002782:	074b      	lsls	r3, r1, #29
 8002784:	d048      	beq.n	8002818 <__aeabi_d2f+0xfc>
 8002786:	230f      	movs	r3, #15
 8002788:	400b      	ands	r3, r1
 800278a:	2b04      	cmp	r3, #4
 800278c:	d000      	beq.n	8002790 <__aeabi_d2f+0x74>
 800278e:	3104      	adds	r1, #4
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	04db      	lsls	r3, r3, #19
 8002794:	400b      	ands	r3, r1
 8002796:	d03f      	beq.n	8002818 <__aeabi_d2f+0xfc>
 8002798:	1c72      	adds	r2, r6, #1
 800279a:	2efe      	cmp	r6, #254	; 0xfe
 800279c:	d0d0      	beq.n	8002740 <__aeabi_d2f+0x24>
 800279e:	0189      	lsls	r1, r1, #6
 80027a0:	0a49      	lsrs	r1, r1, #9
 80027a2:	b2d3      	uxtb	r3, r2
 80027a4:	e7ce      	b.n	8002744 <__aeabi_d2f+0x28>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	e7cb      	b.n	8002744 <__aeabi_d2f+0x28>
 80027ac:	0032      	movs	r2, r6
 80027ae:	3217      	adds	r2, #23
 80027b0:	db22      	blt.n	80027f8 <__aeabi_d2f+0xdc>
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	221e      	movs	r2, #30
 80027b6:	0409      	lsls	r1, r1, #16
 80027b8:	4308      	orrs	r0, r1
 80027ba:	1b92      	subs	r2, r2, r6
 80027bc:	2a1f      	cmp	r2, #31
 80027be:	dd1d      	ble.n	80027fc <__aeabi_d2f+0xe0>
 80027c0:	2102      	movs	r1, #2
 80027c2:	4249      	negs	r1, r1
 80027c4:	1b8e      	subs	r6, r1, r6
 80027c6:	0001      	movs	r1, r0
 80027c8:	40f1      	lsrs	r1, r6
 80027ca:	000e      	movs	r6, r1
 80027cc:	2a20      	cmp	r2, #32
 80027ce:	d004      	beq.n	80027da <__aeabi_d2f+0xbe>
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <__aeabi_d2f+0x108>)
 80027d2:	4694      	mov	ip, r2
 80027d4:	4463      	add	r3, ip
 80027d6:	4098      	lsls	r0, r3
 80027d8:	4305      	orrs	r5, r0
 80027da:	0029      	movs	r1, r5
 80027dc:	1e4d      	subs	r5, r1, #1
 80027de:	41a9      	sbcs	r1, r5
 80027e0:	4331      	orrs	r1, r6
 80027e2:	2600      	movs	r6, #0
 80027e4:	074b      	lsls	r3, r1, #29
 80027e6:	d1ce      	bne.n	8002786 <__aeabi_d2f+0x6a>
 80027e8:	2080      	movs	r0, #128	; 0x80
 80027ea:	000b      	movs	r3, r1
 80027ec:	04c0      	lsls	r0, r0, #19
 80027ee:	2201      	movs	r2, #1
 80027f0:	4003      	ands	r3, r0
 80027f2:	4201      	tst	r1, r0
 80027f4:	d1d3      	bne.n	800279e <__aeabi_d2f+0x82>
 80027f6:	e7af      	b.n	8002758 <__aeabi_d2f+0x3c>
 80027f8:	2300      	movs	r3, #0
 80027fa:	e7ac      	b.n	8002756 <__aeabi_d2f+0x3a>
 80027fc:	490a      	ldr	r1, [pc, #40]	; (8002828 <__aeabi_d2f+0x10c>)
 80027fe:	468c      	mov	ip, r1
 8002800:	0029      	movs	r1, r5
 8002802:	4463      	add	r3, ip
 8002804:	40d1      	lsrs	r1, r2
 8002806:	409d      	lsls	r5, r3
 8002808:	000a      	movs	r2, r1
 800280a:	0029      	movs	r1, r5
 800280c:	4098      	lsls	r0, r3
 800280e:	1e4d      	subs	r5, r1, #1
 8002810:	41a9      	sbcs	r1, r5
 8002812:	4301      	orrs	r1, r0
 8002814:	4311      	orrs	r1, r2
 8002816:	e7e4      	b.n	80027e2 <__aeabi_d2f+0xc6>
 8002818:	0033      	movs	r3, r6
 800281a:	e79d      	b.n	8002758 <__aeabi_d2f+0x3c>
 800281c:	000007fe 	.word	0x000007fe
 8002820:	fffffc80 	.word	0xfffffc80
 8002824:	fffffca2 	.word	0xfffffca2
 8002828:	fffffc82 	.word	0xfffffc82

0800282c <__clzsi2>:
 800282c:	211c      	movs	r1, #28
 800282e:	2301      	movs	r3, #1
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	4298      	cmp	r0, r3
 8002834:	d301      	bcc.n	800283a <__clzsi2+0xe>
 8002836:	0c00      	lsrs	r0, r0, #16
 8002838:	3910      	subs	r1, #16
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	4298      	cmp	r0, r3
 800283e:	d301      	bcc.n	8002844 <__clzsi2+0x18>
 8002840:	0a00      	lsrs	r0, r0, #8
 8002842:	3908      	subs	r1, #8
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	4298      	cmp	r0, r3
 8002848:	d301      	bcc.n	800284e <__clzsi2+0x22>
 800284a:	0900      	lsrs	r0, r0, #4
 800284c:	3904      	subs	r1, #4
 800284e:	a202      	add	r2, pc, #8	; (adr r2, 8002858 <__clzsi2+0x2c>)
 8002850:	5c10      	ldrb	r0, [r2, r0]
 8002852:	1840      	adds	r0, r0, r1
 8002854:	4770      	bx	lr
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	02020304 	.word	0x02020304
 800285c:	01010101 	.word	0x01010101
	...

08002868 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	000a      	movs	r2, r1
 8002872:	1cfb      	adds	r3, r7, #3
 8002874:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1cfa      	adds	r2, r7, #3
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set HIGH
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	481b      	ldr	r0, [pc, #108]	; (8002908 <motor_wheel_init+0xa0>)
 800289c:	2200      	movs	r2, #0
 800289e:	0019      	movs	r1, r3
 80028a0:	f002 fe6d 	bl	800557e <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <motor_wheel_init+0xa0>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	2101      	movs	r1, #1
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 fe63 	bl	800557e <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
		str->inverse_q = 1;
	}
}
 80028b8:	e021      	b.n	80028fe <motor_wheel_init+0x96>
	else if (str->id == 2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d109      	bne.n	80028d6 <motor_wheel_init+0x6e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <motor_wheel_init+0xa0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	2102      	movs	r1, #2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f002 fe58 	bl	800557e <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	70da      	strb	r2, [r3, #3]
}
 80028d4:	e013      	b.n	80028fe <motor_wheel_init+0x96>
	else if (str->id == 3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d106      	bne.n	80028ec <motor_wheel_init+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <motor_wheel_init+0xa0>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	2101      	movs	r1, #1
 80028e4:	0018      	movs	r0, r3
 80028e6:	f002 fe4a 	bl	800557e <HAL_GPIO_WritePin>
}
 80028ea:	e008      	b.n	80028fe <motor_wheel_init+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <motor_wheel_init+0xa0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	2102      	movs	r1, #2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f002 fe43 	bl	800557e <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	70da      	strb	r2, [r3, #3]
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	48000800 	.word	0x48000800

0800290c <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, int LPU) // PWM Velocity Control
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]

	uint8_t throttle = abs(LPU);//fabs(LPU) * 100;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	17d9      	asrs	r1, r3, #31
 800291c:	185a      	adds	r2, r3, r1
 800291e:	404a      	eors	r2, r1
 8002920:	2117      	movs	r1, #23
 8002922:	187b      	adds	r3, r7, r1
 8002924:	701a      	strb	r2, [r3, #0]
	if (abs(LPU) > 100)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	17da      	asrs	r2, r3, #31
 800292a:	189b      	adds	r3, r3, r2
 800292c:	4053      	eors	r3, r2
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	dc2a      	bgt.n	8002988 <motorPWM_pulse+0x7c>
	{
		return;
	}

	if (str->id == 1)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <motorPWM_pulse+0x3a>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	187a      	adds	r2, r7, r1
 8002940:	7812      	ldrb	r2, [r2, #0]
 8002942:	635a      	str	r2, [r3, #52]	; 0x34
 8002944:	e021      	b.n	800298a <motorPWM_pulse+0x7e>
	else if (str->id == 2)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d106      	bne.n	800295c <motorPWM_pulse+0x50>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2217      	movs	r2, #23
 8002954:	18ba      	adds	r2, r7, r2
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
 800295a:	e016      	b.n	800298a <motorPWM_pulse+0x7e>
	else if (str->id == 3)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d106      	bne.n	8002972 <motorPWM_pulse+0x66>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2217      	movs	r2, #23
 800296a:	18ba      	adds	r2, r7, r2
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002970:	e00b      	b.n	800298a <motorPWM_pulse+0x7e>
	else if (str->id == 4)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b04      	cmp	r3, #4
 8002978:	d107      	bne.n	800298a <motorPWM_pulse+0x7e>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2217      	movs	r2, #23
 8002980:	18ba      	adds	r2, r7, r2
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
 8002986:	e000      	b.n	800298a <motorPWM_pulse+0x7e>
		return;
 8002988:	46c0      	nop			; (mov r8, r8)
};
 800298a:	46bd      	mov	sp, r7
 800298c:	b006      	add	sp, #24
 800298e:	bd80      	pop	{r7, pc}

08002990 <motor_DIR>:
  else if (str->id == 4)
	  __HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};

void motor_DIR(Motor_Wheel *str, const uint8_t Direction) // Send direction change command
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	000a      	movs	r2, r1
 800299a:	1cfb      	adds	r3, r7, #3
 800299c:	701a      	strb	r2, [r3, #0]

	str->dir_q = Direction;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1cfa      	adds	r2, r7, #3
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	705a      	strb	r2, [r3, #1]
	// 0 = Forward
	// 1 = backward


  // DIRECTION PIN
  if (str->dir_q == 1) // Backward
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d115      	bne.n	80029da <motor_DIR+0x4a>
  {
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d003      	beq.n	80029be <motor_DIR+0x2e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d106      	bne.n	80029cc <motor_DIR+0x3c>
	  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <motor_DIR+0x80>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	2101      	movs	r1, #1
 80029c4:	0018      	movs	r0, r3
 80029c6:	f002 fdda 	bl	800557e <HAL_GPIO_WritePin>
 80029ca:	e01c      	b.n	8002a06 <motor_DIR+0x76>
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set HIGH
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <motor_DIR+0x80>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	2102      	movs	r1, #2
 80029d2:	0018      	movs	r0, r3
 80029d4:	f002 fdd3 	bl	800557e <HAL_GPIO_WritePin>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
  }
}
 80029d8:	e015      	b.n	8002a06 <motor_DIR+0x76>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d003      	beq.n	80029ea <motor_DIR+0x5a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d106      	bne.n	80029f8 <motor_DIR+0x68>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <motor_DIR+0x80>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	2101      	movs	r1, #1
 80029f0:	0018      	movs	r0, r3
 80029f2:	f002 fdc4 	bl	800557e <HAL_GPIO_WritePin>
 80029f6:	e006      	b.n	8002a06 <motor_DIR+0x76>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <motor_DIR+0x80>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	2102      	movs	r1, #2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f002 fdbd 	bl	800557e <HAL_GPIO_WritePin>
}
 8002a04:	e7ff      	b.n	8002a06 <motor_DIR+0x76>
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	48000800 	.word	0x48000800

08002a14 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	1cfb      	adds	r3, r7, #3
 8002a20:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	1cfa      	adds	r2, r7, #3
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10a      	bne.n	8002a48 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	480a      	ldr	r0, [pc, #40]	; (8002a60 <motor_break+0x4c>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	f002 fd9f 	bl	800557e <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 8002a46:	e006      	b.n	8002a56 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4804      	ldr	r0, [pc, #16]	; (8002a60 <motor_break+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	0019      	movs	r1, r3
 8002a52:	f002 fd94 	bl	800557e <HAL_GPIO_WritePin>
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	48000800 	.word	0x48000800

08002a64 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	0011      	movs	r1, r2
 8002a70:	1cfb      	adds	r3, r7, #3
 8002a72:	1c02      	adds	r2, r0, #0
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	1cbb      	adds	r3, r7, #2
 8002a78:	1c0a      	adds	r2, r1, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1cfa      	adds	r2, r7, #3
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1cba      	adds	r2, r7, #2
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b002      	add	sp, #8
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <linear_motor_set_target>:


void linear_motor_set_target(Linear_Motor *str, int32_t target)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	if (target > POSITION_MAX)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4a09      	ldr	r2, [pc, #36]	; (8002adc <linear_motor_set_target+0x34>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	dd02      	ble.n	8002ac0 <linear_motor_set_target+0x18>
	{
		target = POSITION_MAX;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <linear_motor_set_target+0x34>)
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	e005      	b.n	8002acc <linear_motor_set_target+0x24>
	}
	else if (target < POSITION_MIN)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <linear_motor_set_target+0x38>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	da01      	bge.n	8002acc <linear_motor_set_target+0x24>
	{
		target = POSITION_MIN;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <linear_motor_set_target+0x38>)
 8002aca:	603b      	str	r3, [r7, #0]
	}
	str->target_position = target;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	0000280a 	.word	0x0000280a
 8002ae0:	ffffd7f6 	.word	0xffffd7f6

08002ae4 <linear_motor_get_position>:


int32_t linear_motor_get_position(Linear_Motor *str)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	return str->current_position;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <linear_motor_pulse>:
  * @param  timer_handle timer handle associated with linear motors
  * @param  counter_handle counter pointer to track number of pulses sent via interupt callback
  * @retval if(errors_occurred)
  */
uint8_t linear_motor_pulse(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	if (str->id == 1 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <linear_motor_pulse+0x24>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	223e      	movs	r2, #62	; 0x3e
 8002b10:	5c9b      	ldrb	r3, [r3, r2]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d101      	bne.n	8002b1c <linear_motor_pulse+0x24>
	{
		return 1; // error occurred
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e075      	b.n	8002c08 <linear_motor_pulse+0x110>
	}
	else if (str->id == 2 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <linear_motor_pulse+0x3c>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	223f      	movs	r2, #63	; 0x3f
 8002b28:	5c9b      	ldrb	r3, [r3, r2]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d101      	bne.n	8002b34 <linear_motor_pulse+0x3c>
	{
		return 1; // error occurred
 8002b30:	2301      	movs	r3, #1
 8002b32:	e069      	b.n	8002c08 <linear_motor_pulse+0x110>
	}
	uint32_t shift = abs(str->target_position - str->current_position);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	17da      	asrs	r2, r3, #31
 8002b40:	189b      	adds	r3, r3, r2
 8002b42:	4053      	eors	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
	if (shift == 0)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <linear_motor_pulse+0x58>
	{
		return 1;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e05b      	b.n	8002c08 <linear_motor_pulse+0x110>
	}
	if (str->target_position - str->current_position > 0)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	dd03      	ble.n	8002b66 <linear_motor_pulse+0x6e>
	{
		str->dir_q = 1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	705a      	strb	r2, [r3, #1]
 8002b64:	e002      	b.n	8002b6c <linear_motor_pulse+0x74>
	}
	else
	{
		str->dir_q = 0;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	705a      	strb	r2, [r3, #1]
	}
	if (str->id == 1)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d120      	bne.n	8002bb6 <linear_motor_pulse+0xbe>
	{
		*counter_handle = shift;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
		// TODO: SET DIRECTION GPIO
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	001a      	movs	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	789b      	ldrb	r3, [r3, #2]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	17da      	asrs	r2, r3, #31
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	4053      	eors	r3, r2
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d106      	bne.n	8002b9e <linear_motor_pulse+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <linear_motor_pulse+0x118>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	2104      	movs	r1, #4
 8002b96:	0018      	movs	r0, r3
 8002b98:	f002 fcf1 	bl	800557e <HAL_GPIO_WritePin>
 8002b9c:	e005      	b.n	8002baa <linear_motor_pulse+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <linear_motor_pulse+0x118>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f002 fcea 	bl	800557e <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2100      	movs	r1, #0
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f003 face 	bl	8006150 <HAL_TIM_PWM_Start_IT>
 8002bb4:	e023      	b.n	8002bfe <linear_motor_pulse+0x106>
	}
	else if (str->id == 2)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d11f      	bne.n	8002bfe <linear_motor_pulse+0x106>
	{
		*counter_handle = shift;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	001a      	movs	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	789b      	ldrb	r3, [r3, #2]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	17da      	asrs	r2, r3, #31
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	4053      	eors	r3, r2
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d106      	bne.n	8002be8 <linear_motor_pulse+0xf0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <linear_motor_pulse+0x118>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2108      	movs	r1, #8
 8002be0:	0018      	movs	r0, r3
 8002be2:	f002 fccc 	bl	800557e <HAL_GPIO_WritePin>
 8002be6:	e005      	b.n	8002bf4 <linear_motor_pulse+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <linear_motor_pulse+0x118>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	2108      	movs	r1, #8
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f002 fcc5 	bl	800557e <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f003 faa9 	bl	8006150 <HAL_TIM_PWM_Start_IT>
	}
	str->current_position = str->target_position;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	605a      	str	r2, [r3, #4]
	return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b006      	add	sp, #24
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	48000800 	.word	0x48000800

08002c14 <linear_motor_calibrate>:


uint32_t linear_motor_calibrate(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	uint32_t stepSize = 100;
 8002c20:	2364      	movs	r3, #100	; 0x64
 8002c22:	617b      	str	r3, [r7, #20]
	uint32_t distanceTraveled = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
	uint8_t edgeReached1 = 0;
 8002c28:	231b      	movs	r3, #27
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
	uint8_t edgeReached2 = 0;
 8002c30:	2313      	movs	r3, #19
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
	if (str->id == 1)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d106      	bne.n	8002c4e <linear_motor_calibrate+0x3a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 8002c40:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <linear_motor_calibrate+0x138>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	2104      	movs	r1, #4
 8002c46:	0018      	movs	r0, r3
 8002c48:	f002 fc99 	bl	800557e <HAL_GPIO_WritePin>
 8002c4c:	e046      	b.n	8002cdc <linear_motor_calibrate+0xc8>
	}
	else if (str->id == 2)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d142      	bne.n	8002cdc <linear_motor_calibrate+0xc8>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <linear_motor_calibrate+0x138>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2108      	movs	r1, #8
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f002 fc8e 	bl	800557e <HAL_GPIO_WritePin>
	}
	while (edgeReached1 == 0)
 8002c62:	e03b      	b.n	8002cdc <linear_motor_calibrate+0xc8>
	{
		*counter_handle = stepSize;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]
		if (str->id == 1)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d115      	bne.n	8002c9e <linear_motor_calibrate+0x8a>
		{
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2100      	movs	r1, #0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f003 fa6a 	bl	8006150 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0)
 8002c7c:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <linear_motor_calibrate+0x13c>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0018      	movs	r0, r3
 8002c82:	f002 fc5f 	bl	8005544 <HAL_GPIO_ReadPin>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d104      	bne.n	8002c94 <linear_motor_calibrate+0x80>
			{
				edgeReached1 = 1;
 8002c8a:	231b      	movs	r3, #27
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e023      	b.n	8002cdc <linear_motor_calibrate+0xc8>
			}
			else
			{
				distanceTraveled += stepSize;
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	18d3      	adds	r3, r2, r3
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	e01e      	b.n	8002cdc <linear_motor_calibrate+0xc8>
			}
			// TODO: add timeout
		}
		else if (str->id == 2)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	241b      	movs	r4, #27
 8002ca4:	193a      	adds	r2, r7, r4
 8002ca6:	1939      	adds	r1, r7, r4
 8002ca8:	7809      	ldrb	r1, [r1, #0]
 8002caa:	7011      	strb	r1, [r2, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d115      	bne.n	8002cdc <linear_motor_calibrate+0xc8>
		{
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f003 fa4b 	bl	8006150 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <linear_motor_calibrate+0x138>)
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	f002 fc3e 	bl	8005544 <HAL_GPIO_ReadPin>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d103      	bne.n	8002cd4 <linear_motor_calibrate+0xc0>
			{
				edgeReached1 = 1;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e003      	b.n	8002cdc <linear_motor_calibrate+0xc8>
			}
			else
			{
				distanceTraveled += stepSize;
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	61fb      	str	r3, [r7, #28]
	while (edgeReached1 == 0)
 8002cdc:	231b      	movs	r3, #27
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0be      	beq.n	8002c64 <linear_motor_calibrate+0x50>
			}
			// TODO: add timeout
		}

	}
	if (str->id == 1)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d112      	bne.n	8002d14 <linear_motor_calibrate+0x100>
	{
		// Change direction of the front motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <linear_motor_calibrate+0x138>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f002 fc42 	bl	800557e <HAL_GPIO_WritePin>
		*counter_handle = 9300;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <linear_motor_calibrate+0x140>)
 8002cfe:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2100      	movs	r1, #0
 8002d04:	0018      	movs	r0, r3
 8002d06:	f003 fa23 	bl	8006150 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	e017      	b.n	8002d44 <linear_motor_calibrate+0x130>
	}
	else if (str->id == 2)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d112      	bne.n	8002d42 <linear_motor_calibrate+0x12e>
	{
		// Change direction of the rear motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <linear_motor_calibrate+0x138>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2108      	movs	r1, #8
 8002d22:	0018      	movs	r0, r3
 8002d24:	f002 fc2b 	bl	800557e <HAL_GPIO_WritePin>
		*counter_handle = 9300;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <linear_motor_calibrate+0x140>)
 8002d2c:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2104      	movs	r1, #4
 8002d32:	0018      	movs	r0, r3
 8002d34:	f003 fa0c 	bl	8006150 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	e000      	b.n	8002d44 <linear_motor_calibrate+0x130>
	}
	return 0;
 8002d42:	2300      	movs	r3, #0

}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b009      	add	sp, #36	; 0x24
 8002d4a:	bd90      	pop	{r4, r7, pc}
 8002d4c:	48000800 	.word	0x48000800
 8002d50:	48000400 	.word	0x48000400
 8002d54:	00002454 	.word	0x00002454

08002d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5a:	b0b5      	sub	sp, #212	; 0xd4
 8002d5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d5e:	f001 ff05 	bl	8004b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d62:	f000 fb33 	bl	80033cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d66:	f000 fdcd 	bl	8003904 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002d6a:	f000 fc43 	bl	80035f4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002d6e:	f000 fb6d 	bl	800344c <MX_TIM1_Init>
  MX_TIM15_Init();
 8002d72:	f000 fcbb 	bl	80036ec <MX_TIM15_Init>
  MX_DMA_Init();
 8002d76:	f000 fda7 	bl	80038c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002d7a:	f000 fd75 	bl	8003868 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8002d7e:	23fa      	movs	r3, #250	; 0xfa
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f001 ff56 	bl	8004c34 <HAL_Delay>

  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002d88:	4bd0      	ldr	r3, [pc, #832]	; (80030cc <main+0x374>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f003 fbed 	bl	800656c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002d92:	4bce      	ldr	r3, [pc, #824]	; (80030cc <main+0x374>)
 8002d94:	2104      	movs	r1, #4
 8002d96:	0018      	movs	r0, r3
 8002d98:	f003 fbe8 	bl	800656c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002d9c:	4bcb      	ldr	r3, [pc, #812]	; (80030cc <main+0x374>)
 8002d9e:	2108      	movs	r1, #8
 8002da0:	0018      	movs	r0, r3
 8002da2:	f003 fbe3 	bl	800656c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002da6:	4bc9      	ldr	r3, [pc, #804]	; (80030cc <main+0x374>)
 8002da8:	210c      	movs	r1, #12
 8002daa:	0018      	movs	r0, r3
 8002dac:	f003 fbde 	bl	800656c <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 8002db0:	235c      	movs	r3, #92	; 0x5c
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	3304      	adds	r3, #4
 8002dba:	223d      	movs	r2, #61	; 0x3d
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f006 f870 	bl	8008ea4 <memset>
  float speed1 = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	22ac      	movs	r2, #172	; 0xac
 8002dc8:	18ba      	adds	r2, r7, r2
 8002dca:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	22a8      	movs	r2, #168	; 0xa8
 8002dd0:	18ba      	adds	r2, r7, r2
 8002dd2:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	22a4      	movs	r2, #164	; 0xa4
 8002dd8:	18ba      	adds	r2, r7, r2
 8002dda:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	22a0      	movs	r2, #160	; 0xa0
 8002de0:	18ba      	adds	r2, r7, r2
 8002de2:	6013      	str	r3, [r2, #0]
  float gamma1 = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	65bb      	str	r3, [r7, #88]	; 0x58
  float gamma2 = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t cycleCounter = 0;
 8002dec:	23c7      	movs	r3, #199	; 0xc7
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	22c0      	movs	r2, #192	; 0xc0
 8002df8:	18ba      	adds	r2, r7, r2
 8002dfa:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	0018      	movs	r0, r3
 8002e00:	2350      	movs	r3, #80	; 0x50
 8002e02:	001a      	movs	r2, r3
 8002e04:	2100      	movs	r1, #0
 8002e06:	f006 f84d 	bl	8008ea4 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e0a:	4bb1      	ldr	r3, [pc, #708]	; (80030d0 <main+0x378>)
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f003 f8ec 	bl	8005fec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002e14:	4bae      	ldr	r3, [pc, #696]	; (80030d0 <main+0x378>)
 8002e16:	2104      	movs	r1, #4
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f003 f8e7 	bl	8005fec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002e1e:	4bac      	ldr	r3, [pc, #688]	; (80030d0 <main+0x378>)
 8002e20:	2108      	movs	r1, #8
 8002e22:	0018      	movs	r0, r3
 8002e24:	f003 f8e2 	bl	8005fec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002e28:	4ba9      	ldr	r3, [pc, #676]	; (80030d0 <main+0x378>)
 8002e2a:	210c      	movs	r1, #12
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f003 f8dd 	bl	8005fec <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 8002e32:	4ba8      	ldr	r3, [pc, #672]	; (80030d4 <main+0x37c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2202      	movs	r2, #2
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 8002e3a:	4ba6      	ldr	r3, [pc, #664]	; (80030d4 <main+0x37c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38

  // SETUP
  for (int i = 0; i < 4; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	22bc      	movs	r2, #188	; 0xbc
 8002e46:	18ba      	adds	r2, r7, r2
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e030      	b.n	8002eae <main+0x156>
  {
	  pMW[i] = &MW[i];
 8002e4c:	24bc      	movs	r4, #188	; 0xbc
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	00da      	lsls	r2, r3, #3
 8002e54:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <main+0x380>)
 8002e56:	18d1      	adds	r1, r2, r3
 8002e58:	4ba0      	ldr	r3, [pc, #640]	; (80030dc <main+0x384>)
 8002e5a:	193a      	adds	r2, r7, r4
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 8002e62:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <main+0x384>)
 8002e64:	193a      	adds	r2, r7, r4
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	58d2      	ldr	r2, [r2, r3]
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	0019      	movs	r1, r3
 8002e78:	0010      	movs	r0, r2
 8002e7a:	f7ff fcf5 	bl	8002868 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 8002e7e:	4b97      	ldr	r3, [pc, #604]	; (80030dc <main+0x384>)
 8002e80:	193a      	adds	r2, r7, r4
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	58d1      	ldr	r1, [r2, r3]
 8002e88:	4b91      	ldr	r3, [pc, #580]	; (80030d0 <main+0x378>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fd3d 	bl	800290c <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 8002e92:	4b92      	ldr	r3, [pc, #584]	; (80030dc <main+0x384>)
 8002e94:	193a      	adds	r2, r7, r4
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	58d3      	ldr	r3, [r2, r3]
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff fdb8 	bl	8002a14 <motor_break>
  for (int i = 0; i < 4; i++)
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	193a      	adds	r2, r7, r4
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	23bc      	movs	r3, #188	; 0xbc
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	ddc9      	ble.n	8002e4c <main+0xf4>
  }


  // basicly - clear all uart queues
  HAL_UART_Receive_DMA(&huart3, &UART2_rxBuffer, 1);
 8002eb8:	4989      	ldr	r1, [pc, #548]	; (80030e0 <main+0x388>)
 8002eba:	4b8a      	ldr	r3, [pc, #552]	; (80030e4 <main+0x38c>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f004 feb2 	bl	8007c28 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart3, MSG, strlen(MSG), 50);
 8002ec4:	245c      	movs	r4, #92	; 0x5c
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7fd f927 	bl	800011c <strlen>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	1939      	adds	r1, r7, r4
 8002ed4:	4883      	ldr	r0, [pc, #524]	; (80030e4 <main+0x38c>)
 8002ed6:	2332      	movs	r3, #50	; 0x32
 8002ed8:	f004 fd5a 	bl	8007990 <HAL_UART_Transmit>


  for (int i = 0; i < 2; i++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	22b8      	movs	r2, #184	; 0xb8
 8002ee0:	18ba      	adds	r2, r7, r2
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e025      	b.n	8002f32 <main+0x1da>
  {
	  pLM[i] = &LM[i];
 8002ee6:	20b8      	movs	r0, #184	; 0xb8
 8002ee8:	183b      	adds	r3, r7, r0
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	0013      	movs	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4a7c      	ldr	r2, [pc, #496]	; (80030e8 <main+0x390>)
 8002ef6:	1899      	adds	r1, r3, r2
 8002ef8:	4b7c      	ldr	r3, [pc, #496]	; (80030ec <main+0x394>)
 8002efa:	183a      	adds	r2, r7, r0
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	50d1      	str	r1, [r2, r3]
	  linear_motor_init(pLM[i], i+1, i); // init structure
 8002f02:	4b7a      	ldr	r3, [pc, #488]	; (80030ec <main+0x394>)
 8002f04:	0001      	movs	r1, r0
 8002f06:	187a      	adds	r2, r7, r1
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	58d0      	ldr	r0, [r2, r3]
 8002f0e:	000a      	movs	r2, r1
 8002f10:	18bb      	adds	r3, r7, r2
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	0014      	movs	r4, r2
 8002f1c:	18ba      	adds	r2, r7, r2
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	f7ff fd9e 	bl	8002a64 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	193a      	adds	r2, r7, r4
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	23b8      	movs	r3, #184	; 0xb8
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	ddd4      	ble.n	8002ee6 <main+0x18e>




  // No incoming processing should be done before it is set
  Init_Done = 1;
 8002f3c:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <main+0x398>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 8002f42:	21c7      	movs	r1, #199	; 0xc7
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	3201      	adds	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d102      	bne.n	8002f5c <main+0x204>
	{
		cycleCounter = 1;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	24ac      	movs	r4, #172	; 0xac
 8002f60:	193a      	adds	r2, r7, r4
 8002f62:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	22a8      	movs	r2, #168	; 0xa8
 8002f68:	18ba      	adds	r2, r7, r2
 8002f6a:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	22a4      	movs	r2, #164	; 0xa4
 8002f70:	18ba      	adds	r2, r7, r2
 8002f72:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	22a0      	movs	r2, #160	; 0xa0
 8002f78:	18ba      	adds	r2, r7, r2
 8002f7a:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 8002f7c:	4b5d      	ldr	r3, [pc, #372]	; (80030f4 <main+0x39c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5d      	ldr	r2, [pc, #372]	; (80030f8 <main+0x3a0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d817      	bhi.n	8002fb6 <main+0x25e>
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <main+0x39c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d013      	beq.n	8002fb6 <main+0x25e>
		 {
			 speed1 = 13850.4 / T31pulseWidth;
 8002f8e:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <main+0x39c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7ff fb9c 	bl	80026d0 <__aeabi_ui2d>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	000b      	movs	r3, r1
 8002f9c:	4857      	ldr	r0, [pc, #348]	; (80030fc <main+0x3a4>)
 8002f9e:	4958      	ldr	r1, [pc, #352]	; (8003100 <main+0x3a8>)
 8002fa0:	f7fe f90e 	bl	80011c0 <__aeabi_ddiv>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	0010      	movs	r0, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	f7ff fbb6 	bl	800271c <__aeabi_d2f>
 8002fb0:	1c03      	adds	r3, r0, #0
 8002fb2:	193a      	adds	r2, r7, r4
 8002fb4:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 8002fb6:	4b53      	ldr	r3, [pc, #332]	; (8003104 <main+0x3ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a4f      	ldr	r2, [pc, #316]	; (80030f8 <main+0x3a0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d818      	bhi.n	8002ff2 <main+0x29a>
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <main+0x3ac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d014      	beq.n	8002ff2 <main+0x29a>
		 {
			 speed2 = 13850.4 / T32pulseWidth;
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <main+0x3ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fb7f 	bl	80026d0 <__aeabi_ui2d>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	000b      	movs	r3, r1
 8002fd6:	4849      	ldr	r0, [pc, #292]	; (80030fc <main+0x3a4>)
 8002fd8:	4949      	ldr	r1, [pc, #292]	; (8003100 <main+0x3a8>)
 8002fda:	f7fe f8f1 	bl	80011c0 <__aeabi_ddiv>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	000b      	movs	r3, r1
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	f7ff fb99 	bl	800271c <__aeabi_d2f>
 8002fea:	1c03      	adds	r3, r0, #0
 8002fec:	22a8      	movs	r2, #168	; 0xa8
 8002fee:	18ba      	adds	r2, r7, r2
 8002ff0:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 8002ff2:	4b45      	ldr	r3, [pc, #276]	; (8003108 <main+0x3b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <main+0x3a0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d818      	bhi.n	800302e <main+0x2d6>
 8002ffc:	4b42      	ldr	r3, [pc, #264]	; (8003108 <main+0x3b0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d014      	beq.n	800302e <main+0x2d6>
		 {
			 speed3 = 13850.4 / T33pulseWidth;
 8003004:	4b40      	ldr	r3, [pc, #256]	; (8003108 <main+0x3b0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff fb61 	bl	80026d0 <__aeabi_ui2d>
 800300e:	0002      	movs	r2, r0
 8003010:	000b      	movs	r3, r1
 8003012:	483a      	ldr	r0, [pc, #232]	; (80030fc <main+0x3a4>)
 8003014:	493a      	ldr	r1, [pc, #232]	; (8003100 <main+0x3a8>)
 8003016:	f7fe f8d3 	bl	80011c0 <__aeabi_ddiv>
 800301a:	0002      	movs	r2, r0
 800301c:	000b      	movs	r3, r1
 800301e:	0010      	movs	r0, r2
 8003020:	0019      	movs	r1, r3
 8003022:	f7ff fb7b 	bl	800271c <__aeabi_d2f>
 8003026:	1c03      	adds	r3, r0, #0
 8003028:	22a4      	movs	r2, #164	; 0xa4
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <main+0x3b4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a31      	ldr	r2, [pc, #196]	; (80030f8 <main+0x3a0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d818      	bhi.n	800306a <main+0x312>
 8003038:	4b34      	ldr	r3, [pc, #208]	; (800310c <main+0x3b4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d014      	beq.n	800306a <main+0x312>
		 {
			 speed4 = 13850.4 / T34pulseWidth;
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <main+0x3b4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff fb43 	bl	80026d0 <__aeabi_ui2d>
 800304a:	0002      	movs	r2, r0
 800304c:	000b      	movs	r3, r1
 800304e:	482b      	ldr	r0, [pc, #172]	; (80030fc <main+0x3a4>)
 8003050:	492b      	ldr	r1, [pc, #172]	; (8003100 <main+0x3a8>)
 8003052:	f7fe f8b5 	bl	80011c0 <__aeabi_ddiv>
 8003056:	0002      	movs	r2, r0
 8003058:	000b      	movs	r3, r1
 800305a:	0010      	movs	r0, r2
 800305c:	0019      	movs	r1, r3
 800305e:	f7ff fb5d 	bl	800271c <__aeabi_d2f>
 8003062:	1c03      	adds	r3, r0, #0
 8003064:	22a0      	movs	r2, #160	; 0xa0
 8003066:	18ba      	adds	r2, r7, r2
 8003068:	6013      	str	r3, [r2, #0]
		 }
		 calculate_angles(&gamma1, &gamma2);
 800306a:	2354      	movs	r3, #84	; 0x54
 800306c:	18fa      	adds	r2, r7, r3
 800306e:	2358      	movs	r3, #88	; 0x58
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fe0b 	bl	8003c90 <calculate_angles>
		 memset(MSG, 0, sizeof(MSG));
 800307a:	265c      	movs	r6, #92	; 0x5c
 800307c:	19bb      	adds	r3, r7, r6
 800307e:	2241      	movs	r2, #65	; 0x41
 8003080:	2100      	movs	r1, #0
 8003082:	0018      	movs	r0, r3
 8003084:	f005 ff0e 	bl	8008ea4 <memset>
		 //sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f %.2f %.2f\n", speed1, speed2, speed3, speed4, gamma1, gamma2);
		 sprintf(MSG, "[enc] %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth);
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <main+0x39c>)
 800308a:	681c      	ldr	r4, [r3, #0]
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <main+0x3ac>)
 800308e:	681d      	ldr	r5, [r3, #0]
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <main+0x3b0>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <main+0x3b4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	491d      	ldr	r1, [pc, #116]	; (8003110 <main+0x3b8>)
 800309a:	19b8      	adds	r0, r7, r6
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	9200      	str	r2, [sp, #0]
 80030a0:	002b      	movs	r3, r5
 80030a2:	0022      	movs	r2, r4
 80030a4:	f006 fd8c 	bl	8009bc0 <siprintf>
		 UART_Send(MSG);
 80030a8:	19bb      	adds	r3, r7, r6
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fcb2 	bl	8003a14 <UART_Send>
		 //memset(MSG, 0, sizeof(MSG));
		 //sprintf(MSG, "status: %d %d\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		 //UART_Send(MSG);
	 }

	 for (int i=0; i < 4; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	22b4      	movs	r2, #180	; 0xb4
 80030b4:	18ba      	adds	r2, r7, r2
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	e153      	b.n	8003362 <main+0x60a>
	 {
		 sumVect = 0.0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	22c0      	movs	r2, #192	; 0xc0
 80030be:	18ba      	adds	r2, r7, r2
 80030c0:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	22b0      	movs	r2, #176	; 0xb0
 80030c6:	18ba      	adds	r2, r7, r2
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e058      	b.n	800317e <main+0x426>
 80030cc:	20000538 	.word	0x20000538
 80030d0:	200005b0 	.word	0x200005b0
 80030d4:	200004ac 	.word	0x200004ac
 80030d8:	20000590 	.word	0x20000590
 80030dc:	20000580 	.word	0x20000580
 80030e0:	2000028c 	.word	0x2000028c
 80030e4:	20000428 	.word	0x20000428
 80030e8:	200005f8 	.word	0x200005f8
 80030ec:	200003dc 	.word	0x200003dc
 80030f0:	20000300 	.word	0x20000300
 80030f4:	200001fc 	.word	0x200001fc
 80030f8:	0000752f 	.word	0x0000752f
 80030fc:	33333333 	.word	0x33333333
 8003100:	40cb0d33 	.word	0x40cb0d33
 8003104:	20000220 	.word	0x20000220
 8003108:	20000244 	.word	0x20000244
 800310c:	20000268 	.word	0x20000268
 8003110:	0800e18c 	.word	0x0800e18c
		 {
			 vect[i][j] = vect[i][j+1];
 8003114:	24b0      	movs	r4, #176	; 0xb0
 8003116:	193b      	adds	r3, r7, r4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1c58      	adds	r0, r3, #1
 800311c:	1d39      	adds	r1, r7, #4
 800311e:	25b4      	movs	r5, #180	; 0xb4
 8003120:	197b      	adds	r3, r7, r5
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	0013      	movs	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	189b      	adds	r3, r3, r2
 800312a:	181b      	adds	r3, r3, r0
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	5858      	ldr	r0, [r3, r1]
 8003130:	1d39      	adds	r1, r7, #4
 8003132:	197b      	adds	r3, r7, r5
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	0013      	movs	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	189b      	adds	r3, r3, r2
 800313c:	193a      	adds	r2, r7, r4
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	189b      	adds	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8003146:	1d39      	adds	r1, r7, #4
 8003148:	197b      	adds	r3, r7, r5
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	0013      	movs	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	189b      	adds	r3, r3, r2
 8003152:	193a      	adds	r2, r7, r4
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	189b      	adds	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	585b      	ldr	r3, [r3, r1]
 800315c:	2105      	movs	r1, #5
 800315e:	0018      	movs	r0, r3
 8003160:	f7fc fff8 	bl	8000154 <__udivsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	001a      	movs	r2, r3
 8003168:	21c0      	movs	r1, #192	; 0xc0
 800316a:	187b      	adds	r3, r7, r1
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	189b      	adds	r3, r3, r2
 8003170:	187a      	adds	r2, r7, r1
 8003172:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8003174:	193b      	adds	r3, r7, r4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	193a      	adds	r2, r7, r4
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	23b0      	movs	r3, #176	; 0xb0
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b03      	cmp	r3, #3
 8003186:	ddc5      	ble.n	8003114 <main+0x3bc>
		 }
		 if (i==0)
 8003188:	24b4      	movs	r4, #180	; 0xb4
 800318a:	193b      	adds	r3, r7, r4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d135      	bne.n	80031fe <main+0x4a6>
		 {
			 vect[i][4] = T31pulseWidth;
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <main+0x65c>)
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	1d38      	adds	r0, r7, #4
 8003198:	193b      	adds	r3, r7, r4
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	0013      	movs	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	18c3      	adds	r3, r0, r3
 80031a6:	3310      	adds	r3, #16
 80031a8:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 80031aa:	1d39      	adds	r1, r7, #4
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	0013      	movs	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	18cb      	adds	r3, r1, r3
 80031ba:	3310      	adds	r3, #16
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2105      	movs	r1, #5
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7fc ffc7 	bl	8000154 <__udivsi3>
 80031c6:	0003      	movs	r3, r0
 80031c8:	001a      	movs	r2, r3
 80031ca:	21c0      	movs	r1, #192	; 0xc0
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	187a      	adds	r2, r7, r1
 80031d4:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 80031d6:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <main+0x65c>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	3305      	adds	r3, #5
 80031e2:	da00      	bge.n	80031e6 <main+0x48e>
 80031e4:	e0b7      	b.n	8003356 <main+0x5fe>
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <main+0x65c>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	dd00      	ble.n	80031f6 <main+0x49e>
 80031f4:	e0af      	b.n	8003356 <main+0x5fe>
				 T31pulseWidth = 0;
 80031f6:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <main+0x65c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e0ab      	b.n	8003356 <main+0x5fe>
		 }
		 else if (i==1)
 80031fe:	24b4      	movs	r4, #180	; 0xb4
 8003200:	193b      	adds	r3, r7, r4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d135      	bne.n	8003274 <main+0x51c>
		 {
			 vect[i][4] = T32pulseWidth;
 8003208:	4b6b      	ldr	r3, [pc, #428]	; (80033b8 <main+0x660>)
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	1d38      	adds	r0, r7, #4
 800320e:	193b      	adds	r3, r7, r4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	0013      	movs	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	189b      	adds	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	18c3      	adds	r3, r0, r3
 800321c:	3310      	adds	r3, #16
 800321e:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8003220:	1d39      	adds	r1, r7, #4
 8003222:	193b      	adds	r3, r7, r4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	0013      	movs	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	189b      	adds	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	18cb      	adds	r3, r1, r3
 8003230:	3310      	adds	r3, #16
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2105      	movs	r1, #5
 8003236:	0018      	movs	r0, r3
 8003238:	f7fc ff8c 	bl	8000154 <__udivsi3>
 800323c:	0003      	movs	r3, r0
 800323e:	001a      	movs	r2, r3
 8003240:	21c0      	movs	r1, #192	; 0xc0
 8003242:	187b      	adds	r3, r7, r1
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	189b      	adds	r3, r3, r2
 8003248:	187a      	adds	r2, r7, r1
 800324a:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 800324c:	4b5a      	ldr	r3, [pc, #360]	; (80033b8 <main+0x660>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	187b      	adds	r3, r7, r1
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	3305      	adds	r3, #5
 8003258:	da00      	bge.n	800325c <main+0x504>
 800325a:	e07c      	b.n	8003356 <main+0x5fe>
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <main+0x660>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	187b      	adds	r3, r7, r1
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	dd00      	ble.n	800326c <main+0x514>
 800326a:	e074      	b.n	8003356 <main+0x5fe>
				 T32pulseWidth = 0;
 800326c:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <main+0x660>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e070      	b.n	8003356 <main+0x5fe>
		 }
		 else if (i==2)
 8003274:	24b4      	movs	r4, #180	; 0xb4
 8003276:	193b      	adds	r3, r7, r4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d133      	bne.n	80032e6 <main+0x58e>
		 {
			 vect[i][4] = T33pulseWidth;
 800327e:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <main+0x664>)
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	1d38      	adds	r0, r7, #4
 8003284:	193b      	adds	r3, r7, r4
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	0013      	movs	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	189b      	adds	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	18c3      	adds	r3, r0, r3
 8003292:	3310      	adds	r3, #16
 8003294:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8003296:	1d39      	adds	r1, r7, #4
 8003298:	193b      	adds	r3, r7, r4
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	0013      	movs	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	18cb      	adds	r3, r1, r3
 80032a6:	3310      	adds	r3, #16
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2105      	movs	r1, #5
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fc ff51 	bl	8000154 <__udivsi3>
 80032b2:	0003      	movs	r3, r0
 80032b4:	001a      	movs	r2, r3
 80032b6:	21c0      	movs	r1, #192	; 0xc0
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	187a      	adds	r2, r7, r1
 80032c0:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <main+0x664>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	3305      	adds	r3, #5
 80032ce:	db42      	blt.n	8003356 <main+0x5fe>
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <main+0x664>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	dc3b      	bgt.n	8003356 <main+0x5fe>
				 T33pulseWidth = 0;
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <main+0x664>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e037      	b.n	8003356 <main+0x5fe>
		 }
		 else if (i==3)
 80032e6:	24b4      	movs	r4, #180	; 0xb4
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d132      	bne.n	8003356 <main+0x5fe>
		 {
			 vect[i][4] = T34pulseWidth;
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <main+0x668>)
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	1d38      	adds	r0, r7, #4
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	0013      	movs	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	18c3      	adds	r3, r0, r3
 8003304:	3310      	adds	r3, #16
 8003306:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8003308:	1d39      	adds	r1, r7, #4
 800330a:	193b      	adds	r3, r7, r4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	0013      	movs	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	189b      	adds	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	18cb      	adds	r3, r1, r3
 8003318:	3310      	adds	r3, #16
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2105      	movs	r1, #5
 800331e:	0018      	movs	r0, r3
 8003320:	f7fc ff18 	bl	8000154 <__udivsi3>
 8003324:	0003      	movs	r3, r0
 8003326:	001a      	movs	r2, r3
 8003328:	21c0      	movs	r1, #192	; 0xc0
 800332a:	187b      	adds	r3, r7, r1
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	189b      	adds	r3, r3, r2
 8003330:	187a      	adds	r2, r7, r1
 8003332:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <main+0x668>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	187b      	adds	r3, r7, r1
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	3305      	adds	r3, #5
 8003340:	db09      	blt.n	8003356 <main+0x5fe>
 8003342:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <main+0x668>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	187b      	adds	r3, r7, r1
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b05      	cmp	r3, #5
 800334e:	dc02      	bgt.n	8003356 <main+0x5fe>
				 T34pulseWidth = 0;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <main+0x668>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8003356:	22b4      	movs	r2, #180	; 0xb4
 8003358:	18bb      	adds	r3, r7, r2
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	18ba      	adds	r2, r7, r2
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	23b4      	movs	r3, #180	; 0xb4
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b03      	cmp	r3, #3
 800336a:	dc00      	bgt.n	800336e <main+0x616>
 800336c:	e6a5      	b.n	80030ba <main+0x362>
		 }
	 }

	 HAL_Delay(50);
 800336e:	2032      	movs	r0, #50	; 0x32
 8003370:	f001 fc60 	bl	8004c34 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 if ((UART_newMessage == 1) && (cycleCounter % 2 == 0))
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <main+0x66c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d000      	beq.n	800337e <main+0x626>
 800337c:	e5e1      	b.n	8002f42 <main+0x1ea>
 800337e:	23c7      	movs	r3, #199	; 0xc7
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	4013      	ands	r3, r2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d000      	beq.n	8003390 <main+0x638>
 800338e:	e5d8      	b.n	8002f42 <main+0x1ea>
	 {
		 // check if received string contains [drv] message and parse it
		 drv_messageCheck(rxString);
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <main+0x670>)
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fb5e 	bl	8003a54 <drv_messageCheck>
		 cal_messageCheck(rxString);
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <main+0x670>)
 800339a:	0018      	movs	r0, r3
 800339c:	f000 fc28 	bl	8003bf0 <cal_messageCheck>
		 // clear received b
		 memset(rxString, 0, sizeof(rxString));
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <main+0x670>)
 80033a2:	2264      	movs	r2, #100	; 0x64
 80033a4:	2100      	movs	r1, #0
 80033a6:	0018      	movs	r0, r3
 80033a8:	f005 fd7c 	bl	8008ea4 <memset>
		 // set newMessage flag to 0 to begin new string receive
		 UART_newMessage = 0;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <main+0x66c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
	cycleCounter++;
 80033b2:	e5c6      	b.n	8002f42 <main+0x1ea>
 80033b4:	200001fc 	.word	0x200001fc
 80033b8:	20000220 	.word	0x20000220
 80033bc:	20000244 	.word	0x20000244
 80033c0:	20000268 	.word	0x20000268
 80033c4:	2000028d 	.word	0x2000028d
 80033c8:	20000290 	.word	0x20000290

080033cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b091      	sub	sp, #68	; 0x44
 80033d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033d2:	2410      	movs	r4, #16
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	0018      	movs	r0, r3
 80033d8:	2330      	movs	r3, #48	; 0x30
 80033da:	001a      	movs	r2, r3
 80033dc:	2100      	movs	r1, #0
 80033de:	f005 fd61 	bl	8008ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033e2:	003b      	movs	r3, r7
 80033e4:	0018      	movs	r0, r3
 80033e6:	2310      	movs	r3, #16
 80033e8:	001a      	movs	r2, r3
 80033ea:	2100      	movs	r1, #0
 80033ec:	f005 fd5a 	bl	8008ea4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033f0:	0021      	movs	r1, r4
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	2202      	movs	r2, #2
 80033f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	2201      	movs	r2, #1
 80033fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2210      	movs	r2, #16
 8003402:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003404:	187b      	adds	r3, r7, r1
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800340a:	187b      	adds	r3, r7, r1
 800340c:	0018      	movs	r0, r3
 800340e:	f002 f8d3 	bl	80055b8 <HAL_RCC_OscConfig>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d001      	beq.n	800341a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8003416:	f001 f861 	bl	80044dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800341a:	003b      	movs	r3, r7
 800341c:	2207      	movs	r2, #7
 800341e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003420:	003b      	movs	r3, r7
 8003422:	2200      	movs	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003426:	003b      	movs	r3, r7
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800342c:	003b      	movs	r3, r7
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003432:	003b      	movs	r3, r7
 8003434:	2100      	movs	r1, #0
 8003436:	0018      	movs	r0, r3
 8003438:	f002 fbdc 	bl	8005bf4 <HAL_RCC_ClockConfig>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003440:	f001 f84c 	bl	80044dc <Error_Handler>
  }
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b011      	add	sp, #68	; 0x44
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b096      	sub	sp, #88	; 0x58
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003452:	2348      	movs	r3, #72	; 0x48
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	0018      	movs	r0, r3
 8003458:	2310      	movs	r3, #16
 800345a:	001a      	movs	r2, r3
 800345c:	2100      	movs	r1, #0
 800345e:	f005 fd21 	bl	8008ea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	0018      	movs	r0, r3
 8003468:	2308      	movs	r3, #8
 800346a:	001a      	movs	r2, r3
 800346c:	2100      	movs	r1, #0
 800346e:	f005 fd19 	bl	8008ea4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003472:	2324      	movs	r3, #36	; 0x24
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	0018      	movs	r0, r3
 8003478:	231c      	movs	r3, #28
 800347a:	001a      	movs	r2, r3
 800347c:	2100      	movs	r1, #0
 800347e:	f005 fd11 	bl	8008ea4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	0018      	movs	r0, r3
 8003486:	2320      	movs	r3, #32
 8003488:	001a      	movs	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f005 fd0a 	bl	8008ea4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <MX_TIM1_Init+0x1a0>)
 8003492:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <MX_TIM1_Init+0x1a4>)
 8003494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8003496:	4b55      	ldr	r3, [pc, #340]	; (80035ec <MX_TIM1_Init+0x1a0>)
 8003498:	229f      	movs	r2, #159	; 0x9f
 800349a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <MX_TIM1_Init+0x1a0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80034a2:	4b52      	ldr	r3, [pc, #328]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034a4:	2263      	movs	r2, #99	; 0x63
 80034a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034ba:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034bc:	0018      	movs	r0, r3
 80034be:	f002 fced 	bl	8005e9c <HAL_TIM_Base_Init>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80034c6:	f001 f809 	bl	80044dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ca:	2148      	movs	r1, #72	; 0x48
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0152      	lsls	r2, r2, #5
 80034d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034d4:	187a      	adds	r2, r7, r1
 80034d6:	4b45      	ldr	r3, [pc, #276]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034d8:	0011      	movs	r1, r2
 80034da:	0018      	movs	r0, r3
 80034dc:	f003 fbce 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80034e4:	f000 fffa 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034e8:	4b40      	ldr	r3, [pc, #256]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f002 fd26 	bl	8005f3c <HAL_TIM_PWM_Init>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80034f4:	f000 fff2 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003506:	187a      	adds	r2, r7, r1
 8003508:	4b38      	ldr	r3, [pc, #224]	; (80035ec <MX_TIM1_Init+0x1a0>)
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f004 f925 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8003516:	f000 ffe1 	bl	80044dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800351a:	2124      	movs	r1, #36	; 0x24
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2260      	movs	r2, #96	; 0x60
 8003520:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2200      	movs	r2, #0
 8003532:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003534:	187b      	adds	r3, r7, r1
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800353a:	187b      	adds	r3, r7, r1
 800353c:	2200      	movs	r2, #0
 800353e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2200      	movs	r2, #0
 8003544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003546:	1879      	adds	r1, r7, r1
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <MX_TIM1_Init+0x1a0>)
 800354a:	2200      	movs	r2, #0
 800354c:	0018      	movs	r0, r3
 800354e:	f003 facf 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d001      	beq.n	800355a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003556:	f000 ffc1 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800355a:	2324      	movs	r3, #36	; 0x24
 800355c:	18f9      	adds	r1, r7, r3
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <MX_TIM1_Init+0x1a0>)
 8003560:	2204      	movs	r2, #4
 8003562:	0018      	movs	r0, r3
 8003564:	f003 fac4 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800356c:	f000 ffb6 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003570:	2324      	movs	r3, #36	; 0x24
 8003572:	18f9      	adds	r1, r7, r3
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <MX_TIM1_Init+0x1a0>)
 8003576:	2208      	movs	r2, #8
 8003578:	0018      	movs	r0, r3
 800357a:	f003 fab9 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d001      	beq.n	8003586 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8003582:	f000 ffab 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003586:	2324      	movs	r3, #36	; 0x24
 8003588:	18f9      	adds	r1, r7, r3
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <MX_TIM1_Init+0x1a0>)
 800358c:	220c      	movs	r2, #12
 800358e:	0018      	movs	r0, r3
 8003590:	f003 faae 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003598:	f000 ffa0 	bl	80044dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	2200      	movs	r2, #0
 80035a6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	0192      	lsls	r2, r2, #6
 80035c0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035c8:	1d3a      	adds	r2, r7, #4
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80035cc:	0011      	movs	r1, r2
 80035ce:	0018      	movs	r0, r3
 80035d0:	f004 f91c 	bl	800780c <HAL_TIMEx_ConfigBreakDeadTime>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80035d8:	f000 ff80 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <MX_TIM1_Init+0x1a0>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f001 f85e 	bl	80046a0 <HAL_TIM_MspPostInit>

}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b016      	add	sp, #88	; 0x58
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200005b0 	.word	0x200005b0
 80035f0:	40012c00 	.word	0x40012c00

080035f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fa:	2310      	movs	r3, #16
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	0018      	movs	r0, r3
 8003600:	2308      	movs	r3, #8
 8003602:	001a      	movs	r2, r3
 8003604:	2100      	movs	r1, #0
 8003606:	f005 fc4d 	bl	8008ea4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800360a:	003b      	movs	r3, r7
 800360c:	0018      	movs	r0, r3
 800360e:	2310      	movs	r3, #16
 8003610:	001a      	movs	r2, r3
 8003612:	2100      	movs	r1, #0
 8003614:	f005 fc46 	bl	8008ea4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003618:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <MX_TIM3_Init+0xec>)
 800361a:	4a32      	ldr	r2, [pc, #200]	; (80036e4 <MX_TIM3_Init+0xf0>)
 800361c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <MX_TIM3_Init+0xec>)
 8003620:	224f      	movs	r2, #79	; 0x4f
 8003622:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003624:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <MX_TIM3_Init+0xec>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800362a:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <MX_TIM3_Init+0xec>)
 800362c:	4a2e      	ldr	r2, [pc, #184]	; (80036e8 <MX_TIM3_Init+0xf4>)
 800362e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <MX_TIM3_Init+0xec>)
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <MX_TIM3_Init+0xec>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800363c:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <MX_TIM3_Init+0xec>)
 800363e:	0018      	movs	r0, r3
 8003640:	f002 ff44 	bl	80064cc <HAL_TIM_IC_Init>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003648:	f000 ff48 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800364c:	2110      	movs	r1, #16
 800364e:	187b      	adds	r3, r7, r1
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2200      	movs	r2, #0
 8003658:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800365a:	187a      	adds	r2, r7, r1
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <MX_TIM3_Init+0xec>)
 800365e:	0011      	movs	r1, r2
 8003660:	0018      	movs	r0, r3
 8003662:	f004 f87b 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800366a:	f000 ff37 	bl	80044dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800366e:	003b      	movs	r3, r7
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003674:	003b      	movs	r3, r7
 8003676:	2201      	movs	r2, #1
 8003678:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800367a:	003b      	movs	r3, r7
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 8003680:	003b      	movs	r3, r7
 8003682:	2203      	movs	r2, #3
 8003684:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003686:	0039      	movs	r1, r7
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <MX_TIM3_Init+0xec>)
 800368a:	2200      	movs	r2, #0
 800368c:	0018      	movs	r0, r3
 800368e:	f003 f98b 	bl	80069a8 <HAL_TIM_IC_ConfigChannel>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003696:	f000 ff21 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800369a:	0039      	movs	r1, r7
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <MX_TIM3_Init+0xec>)
 800369e:	2204      	movs	r2, #4
 80036a0:	0018      	movs	r0, r3
 80036a2:	f003 f981 	bl	80069a8 <HAL_TIM_IC_ConfigChannel>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d001      	beq.n	80036ae <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80036aa:	f000 ff17 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80036ae:	0039      	movs	r1, r7
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <MX_TIM3_Init+0xec>)
 80036b2:	2208      	movs	r2, #8
 80036b4:	0018      	movs	r0, r3
 80036b6:	f003 f977 	bl	80069a8 <HAL_TIM_IC_ConfigChannel>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80036be:	f000 ff0d 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80036c2:	0039      	movs	r1, r7
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <MX_TIM3_Init+0xec>)
 80036c6:	220c      	movs	r2, #12
 80036c8:	0018      	movs	r0, r3
 80036ca:	f003 f96d 	bl	80069a8 <HAL_TIM_IC_ConfigChannel>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80036d2:	f000 ff03 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b006      	add	sp, #24
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000538 	.word	0x20000538
 80036e4:	40000400 	.word	0x40000400
 80036e8:	0000c34f 	.word	0x0000c34f

080036ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b096      	sub	sp, #88	; 0x58
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036f2:	2348      	movs	r3, #72	; 0x48
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	0018      	movs	r0, r3
 80036f8:	2310      	movs	r3, #16
 80036fa:	001a      	movs	r2, r3
 80036fc:	2100      	movs	r1, #0
 80036fe:	f005 fbd1 	bl	8008ea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	0018      	movs	r0, r3
 8003708:	2308      	movs	r3, #8
 800370a:	001a      	movs	r2, r3
 800370c:	2100      	movs	r1, #0
 800370e:	f005 fbc9 	bl	8008ea4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003712:	2324      	movs	r3, #36	; 0x24
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	0018      	movs	r0, r3
 8003718:	231c      	movs	r3, #28
 800371a:	001a      	movs	r2, r3
 800371c:	2100      	movs	r1, #0
 800371e:	f005 fbc1 	bl	8008ea4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	0018      	movs	r0, r3
 8003726:	2320      	movs	r3, #32
 8003728:	001a      	movs	r2, r3
 800372a:	2100      	movs	r1, #0
 800372c:	f005 fbba 	bl	8008ea4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <MX_TIM15_Init+0x174>)
 8003732:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <MX_TIM15_Init+0x178>)
 8003734:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 160-1;
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <MX_TIM15_Init+0x174>)
 8003738:	229f      	movs	r2, #159	; 0x9f
 800373a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373c:	4b48      	ldr	r3, [pc, #288]	; (8003860 <MX_TIM15_Init+0x174>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <MX_TIM15_Init+0x174>)
 8003744:	2204      	movs	r2, #4
 8003746:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <MX_TIM15_Init+0x174>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 800374e:	4b44      	ldr	r3, [pc, #272]	; (8003860 <MX_TIM15_Init+0x174>)
 8003750:	2264      	movs	r2, #100	; 0x64
 8003752:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003754:	4b42      	ldr	r3, [pc, #264]	; (8003860 <MX_TIM15_Init+0x174>)
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <MX_TIM15_Init+0x174>)
 800375c:	0018      	movs	r0, r3
 800375e:	f002 fb9d 	bl	8005e9c <HAL_TIM_Base_Init>
 8003762:	1e03      	subs	r3, r0, #0
 8003764:	d001      	beq.n	800376a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8003766:	f000 feb9 	bl	80044dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376a:	2148      	movs	r1, #72	; 0x48
 800376c:	187b      	adds	r3, r7, r1
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	0152      	lsls	r2, r2, #5
 8003772:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003774:	187a      	adds	r2, r7, r1
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <MX_TIM15_Init+0x174>)
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f003 fa7e 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003784:	f000 feaa 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <MX_TIM15_Init+0x174>)
 800378a:	0018      	movs	r0, r3
 800378c:	f002 fbd6 	bl	8005f3c <HAL_TIM_PWM_Init>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003794:	f000 fea2 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80037a6:	187a      	adds	r2, r7, r1
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <MX_TIM15_Init+0x174>)
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f003 ffd5 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80037b6:	f000 fe91 	bl	80044dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ba:	2124      	movs	r1, #36	; 0x24
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	2260      	movs	r2, #96	; 0x60
 80037c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2200      	movs	r2, #0
 80037de:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037e6:	1879      	adds	r1, r7, r1
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <MX_TIM15_Init+0x174>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	0018      	movs	r0, r3
 80037ee:	f003 f97f 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80037f6:	f000 fe71 	bl	80044dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037fa:	2324      	movs	r3, #36	; 0x24
 80037fc:	18f9      	adds	r1, r7, r3
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_TIM15_Init+0x174>)
 8003800:	2204      	movs	r2, #4
 8003802:	0018      	movs	r0, r3
 8003804:	f003 f974 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 800380c:	f000 fe66 	bl	80044dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	0192      	lsls	r2, r2, #6
 8003834:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800383c:	1d3a      	adds	r2, r7, #4
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_TIM15_Init+0x174>)
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f003 ffe2 	bl	800780c <HAL_TIMEx_ConfigBreakDeadTime>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 800384c:	f000 fe46 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <MX_TIM15_Init+0x174>)
 8003852:	0018      	movs	r0, r3
 8003854:	f000 ff24 	bl	80046a0 <HAL_TIM_MspPostInit>

}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b016      	add	sp, #88	; 0x58
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200004ac 	.word	0x200004ac
 8003864:	40014000 	.word	0x40014000

08003868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <MX_USART3_UART_Init+0x5c>)
 8003870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 8003874:	22e1      	movs	r2, #225	; 0xe1
 8003876:	0252      	lsls	r2, r2, #9
 8003878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 800388e:	220c      	movs	r2, #12
 8003890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <MX_USART3_UART_Init+0x58>)
 80038ac:	0018      	movs	r0, r3
 80038ae:	f004 f81b 	bl	80078e8 <HAL_UART_Init>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038b6:	f000 fe11 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000428 	.word	0x20000428
 80038c4:	40004800 	.word	0x40004800

080038c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <MX_DMA_Init+0x38>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <MX_DMA_Init+0x38>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	615a      	str	r2, [r3, #20]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <MX_DMA_Init+0x38>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	2201      	movs	r2, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	200a      	movs	r0, #10
 80038ec:	f001 fa72 	bl	8004dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80038f0:	200a      	movs	r0, #10
 80038f2:	f001 fa84 	bl	8004dfe <HAL_NVIC_EnableIRQ>

}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	40021000 	.word	0x40021000

08003904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b08b      	sub	sp, #44	; 0x2c
 8003908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390a:	2414      	movs	r4, #20
 800390c:	193b      	adds	r3, r7, r4
 800390e:	0018      	movs	r0, r3
 8003910:	2314      	movs	r3, #20
 8003912:	001a      	movs	r2, r3
 8003914:	2100      	movs	r1, #0
 8003916:	f005 fac5 	bl	8008ea4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391a:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <MX_GPIO_Init+0x100>)
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0309      	lsls	r1, r1, #12
 8003924:	430a      	orrs	r2, r1
 8003926:	615a      	str	r2, [r3, #20]
 8003928:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <MX_GPIO_Init+0x100>)
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	031b      	lsls	r3, r3, #12
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <MX_GPIO_Init+0x100>)
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	03c9      	lsls	r1, r1, #15
 8003940:	430a      	orrs	r2, r1
 8003942:	615a      	str	r2, [r3, #20]
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	03db      	lsls	r3, r3, #15
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	02c9      	lsls	r1, r1, #11
 800395c:	430a      	orrs	r2, r1
 800395e:	615a      	str	r2, [r3, #20]
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	02db      	lsls	r3, r3, #11
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <MX_GPIO_Init+0x100>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0289      	lsls	r1, r1, #10
 8003978:	430a      	orrs	r2, r1
 800397a:	615a      	str	r2, [r3, #20]
 800397c:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <MX_GPIO_Init+0x100>)
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 800398a:	491f      	ldr	r1, [pc, #124]	; (8003a08 <MX_GPIO_Init+0x104>)
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <MX_GPIO_Init+0x108>)
 800398e:	2200      	movs	r2, #0
 8003990:	0018      	movs	r0, r3
 8003992:	f001 fdf4 	bl	800557e <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003996:	193b      	adds	r3, r7, r4
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	0192      	lsls	r2, r2, #6
 800399c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a4:	193b      	adds	r3, r7, r4
 80039a6:	2201      	movs	r2, #1
 80039a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039aa:	193b      	adds	r3, r7, r4
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <MX_GPIO_Init+0x108>)
 80039ae:	0019      	movs	r1, r3
 80039b0:	0010      	movs	r0, r2
 80039b2:	f001 fc57 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 80039b6:	193b      	adds	r3, r7, r4
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <MX_GPIO_Init+0x104>)
 80039ba:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	2201      	movs	r2, #1
 80039c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <MX_GPIO_Init+0x108>)
 80039d2:	0019      	movs	r1, r3
 80039d4:	0010      	movs	r0, r2
 80039d6:	f001 fc45 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039da:	0021      	movs	r1, r4
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2201      	movs	r2, #1
 80039ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <MX_GPIO_Init+0x10c>)
 80039f2:	0019      	movs	r1, r3
 80039f4:	0010      	movs	r0, r2
 80039f6:	f001 fc35 	bl	8005264 <HAL_GPIO_Init>

}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b00b      	add	sp, #44	; 0x2c
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40021000 	.word	0x40021000
 8003a08:	0000040f 	.word	0x0000040f
 8003a0c:	48000800 	.word	0x48000800
 8003a10:	48000400 	.word	0x48000400

08003a14 <UART_Send>:

/* USER CODE BEGIN 4 */

void UART_Send(const uint8_t message[])
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	while(UART_TX_Busy){};
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <UART_Send+0x38>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1fa      	bne.n	8003a1e <UART_Send+0xa>
	UART_TX_Busy = 1;
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <UART_Send+0x38>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)message, strlen(message));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7fc fb73 	bl	800011c <strlen>
 8003a36:	0003      	movs	r3, r0
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <UART_Send+0x3c>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f004 f850 	bl	8007ae4 <HAL_UART_Transmit_DMA>
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200002f4 	.word	0x200002f4
 8003a50:	20000428 	.word	0x20000428

08003a54 <drv_messageCheck>:

void drv_messageCheck(const char message[])
{
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	b09b      	sub	sp, #108	; 0x6c
 8003a58:	af06      	add	r7, sp, #24
 8003a5a:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4b5e      	ldr	r3, [pc, #376]	; (8003bd8 <drv_messageCheck+0x184>)
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f006 f942 	bl	8009cec <strcpy>

	uint8_t MSG[5] = {'\0'};
 8003a68:	2548      	movs	r5, #72	; 0x48
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	711a      	strb	r2, [r3, #4]
	int arw1=0, arw2=0, arw3=0, arw4=0, motor_brk=0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	647b      	str	r3, [r7, #68]	; 0x44
 8003a78:	2300      	movs	r3, #0
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a80:	2300      	movs	r3, #0
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a84:	2300      	movs	r3, #0
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
	int turn = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
	sscanf(cmd_buf, "%s %d %d %d %d %d %d", &MSG, &arw1, &arw2, &arw3, &arw4, &turn, &motor_brk);
 8003a8c:	2344      	movs	r3, #68	; 0x44
 8003a8e:	18fc      	adds	r4, r7, r3
 8003a90:	197a      	adds	r2, r7, r5
 8003a92:	4952      	ldr	r1, [pc, #328]	; (8003bdc <drv_messageCheck+0x188>)
 8003a94:	4850      	ldr	r0, [pc, #320]	; (8003bd8 <drv_messageCheck+0x184>)
 8003a96:	2334      	movs	r3, #52	; 0x34
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	2330      	movs	r3, #48	; 0x30
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	2338      	movs	r3, #56	; 0x38
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	9302      	str	r3, [sp, #8]
 8003aa8:	233c      	movs	r3, #60	; 0x3c
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	2340      	movs	r3, #64	; 0x40
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	0023      	movs	r3, r4
 8003ab6:	f006 f8a3 	bl	8009c00 <siscanf>
	if (!strcmp(MSG, "[drv]")) // returns 0 if strings are equal
 8003aba:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <drv_messageCheck+0x18c>)
 8003abc:	197b      	adds	r3, r7, r5
 8003abe:	0011      	movs	r1, r2
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fc fb21 	bl	8000108 <strcmp>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d000      	beq.n	8003acc <drv_messageCheck+0x78>
 8003aca:	e080      	b.n	8003bce <drv_messageCheck+0x17a>
	{
		uint8_t reply[40] = {'\0'};
 8003acc:	2408      	movs	r4, #8
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	2100      	movs	r1, #0
 8003ada:	0018      	movs	r0, r3
 8003adc:	f005 f9e2 	bl	8008ea4 <memset>
		sprintf(reply, "received: %d %d %d %d %d %d \n", arw1, arw2, arw3, arw4, turn, motor_brk);
 8003ae0:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8003ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae4:	469c      	mov	ip, r3
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003aee:	4d3d      	ldr	r5, [pc, #244]	; (8003be4 <drv_messageCheck+0x190>)
 8003af0:	193c      	adds	r4, r7, r4
 8003af2:	9003      	str	r0, [sp, #12]
 8003af4:	9102      	str	r1, [sp, #8]
 8003af6:	9201      	str	r2, [sp, #4]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4663      	mov	r3, ip
 8003afc:	0032      	movs	r2, r6
 8003afe:	0029      	movs	r1, r5
 8003b00:	0020      	movs	r0, r4
 8003b02:	f006 f85d 	bl	8009bc0 <siprintf>
		UART_Send(reply);
 8003b06:	2408      	movs	r4, #8
 8003b08:	193b      	adds	r3, r7, r4
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7ff ff82 	bl	8003a14 <UART_Send>

		// Since only 1 break pin is used, it is enough to call this function for only 1 wheel
		motor_break(pMW[0], motor_brk);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <drv_messageCheck+0x194>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7fe ff7a 	bl	8002a14 <motor_break>

		// Direction is set separately for left and right sided wheels
		if (arw1 < 0 && arw3 < 0)
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da09      	bge.n	8003b3a <drv_messageCheck+0xe6>
 8003b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da06      	bge.n	8003b3a <drv_messageCheck+0xe6>
		{
			motor_DIR(pMW[0], 1); // set direction to backward
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <drv_messageCheck+0x194>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7fe ff2c 	bl	8002990 <motor_DIR>
 8003b38:	e005      	b.n	8003b46 <drv_messageCheck+0xf2>
		}
		else
		{
			motor_DIR(pMW[0], 0); // set direction to forward
 8003b3a:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <drv_messageCheck+0x194>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fe ff25 	bl	8002990 <motor_DIR>
		}
		if (arw2 < 0 && arw4 < 0)
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	da09      	bge.n	8003b60 <drv_messageCheck+0x10c>
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da06      	bge.n	8003b60 <drv_messageCheck+0x10c>
		{
			motor_DIR(pMW[1], 1); // set direction to backward
 8003b52:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <drv_messageCheck+0x194>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2101      	movs	r1, #1
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fe ff19 	bl	8002990 <motor_DIR>
 8003b5e:	e005      	b.n	8003b6c <drv_messageCheck+0x118>
		}
		else
		{
			motor_DIR(pMW[1], 0); // set direction to forward
 8003b60:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <drv_messageCheck+0x194>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2100      	movs	r1, #0
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7fe ff12 	bl	8002990 <motor_DIR>
		}

		motorPWM_pulse(&htim1, pMW[0], arw1 );
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <drv_messageCheck+0x194>)
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <drv_messageCheck+0x198>)
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fe fec9 	bl	800290c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[1], arw2 );
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <drv_messageCheck+0x194>)
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <drv_messageCheck+0x198>)
 8003b82:	0018      	movs	r0, r3
 8003b84:	f7fe fec2 	bl	800290c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[2], arw3 );
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <drv_messageCheck+0x194>)
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <drv_messageCheck+0x198>)
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fe febb 	bl	800290c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[3], arw4 );
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <drv_messageCheck+0x194>)
 8003b98:	68d9      	ldr	r1, [r3, #12]
 8003b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <drv_messageCheck+0x198>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fe feb4 	bl	800290c <motorPWM_pulse>

		// Positive turn direction is RIGHT
		if (abs(turn) > 30)
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	17da      	asrs	r2, r3, #31
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	4053      	eors	r3, r2
 8003bac:	2b1e      	cmp	r3, #30
 8003bae:	dd07      	ble.n	8003bc0 <drv_messageCheck+0x16c>
		{
			turn = turn / abs(turn) * 30;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da02      	bge.n	8003bbc <drv_messageCheck+0x168>
 8003bb6:	231e      	movs	r3, #30
 8003bb8:	425b      	negs	r3, r3
 8003bba:	e000      	b.n	8003bbe <drv_messageCheck+0x16a>
 8003bbc:	231e      	movs	r3, #30
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
		}
		calculate_pulses(turn, -turn);
 8003bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	0010      	movs	r0, r2
 8003bca:	f000 f9d7 	bl	8003f7c <calculate_pulses>
		//linear_motor_set_target(pLM[0], turn);
		//linear_motor_set_target(pLM[1], turn);
		//linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
		//linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
	}
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b015      	add	sp, #84	; 0x54
 8003bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	20000304 	.word	0x20000304
 8003bdc:	0800e1a0 	.word	0x0800e1a0
 8003be0:	0800e1b8 	.word	0x0800e1b8
 8003be4:	0800e1c0 	.word	0x0800e1c0
 8003be8:	20000580 	.word	0x20000580
 8003bec:	200005b0 	.word	0x200005b0

08003bf0 <cal_messageCheck>:

void cal_messageCheck(const char message[])
{
 8003bf0:	b5b0      	push	{r4, r5, r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <cal_messageCheck+0x80>)
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f006 f874 	bl	8009cec <strcpy>

	uint8_t MSG[5] = {'\0'};
 8003c04:	2128      	movs	r1, #40	; 0x28
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	711a      	strb	r2, [r3, #4]
	sscanf(cmd_buf, "%s", &MSG);
 8003c10:	000c      	movs	r4, r1
 8003c12:	187a      	adds	r2, r7, r1
 8003c14:	4917      	ldr	r1, [pc, #92]	; (8003c74 <cal_messageCheck+0x84>)
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <cal_messageCheck+0x80>)
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f005 fff1 	bl	8009c00 <siscanf>
	if (!strcmp(MSG, "[cal]")) // returns 0 if strings are equal
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <cal_messageCheck+0x88>)
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	0011      	movs	r1, r2
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fc fa6f 	bl	8000108 <strcmp>
 8003c2a:	1e03      	subs	r3, r0, #0
 8003c2c:	d11c      	bne.n	8003c68 <cal_messageCheck+0x78>
	{
		uint8_t reply[] = "received calibration command\n";
 8003c2e:	2008      	movs	r0, #8
 8003c30:	183b      	adds	r3, r7, r0
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <cal_messageCheck+0x8c>)
 8003c34:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003c36:	c332      	stmia	r3!, {r1, r4, r5}
 8003c38:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003c3a:	c332      	stmia	r3!, {r1, r4, r5}
 8003c3c:	6811      	ldr	r1, [r2, #0]
 8003c3e:	6019      	str	r1, [r3, #0]
 8003c40:	8892      	ldrh	r2, [r2, #4]
 8003c42:	809a      	strh	r2, [r3, #4]
		UART_Send(reply);
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7ff fee4 	bl	8003a14 <UART_Send>
		linear_motor_calibrate(pLM[0], &htim15, &linearPulse_1);
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <cal_messageCheck+0x90>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <cal_messageCheck+0x94>)
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <cal_messageCheck+0x98>)
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7fe ffdd 	bl	8002c14 <linear_motor_calibrate>
		linear_motor_calibrate(pLM[1], &htim15, &linearPulse_2);
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <cal_messageCheck+0x90>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <cal_messageCheck+0x9c>)
 8003c60:	4909      	ldr	r1, [pc, #36]	; (8003c88 <cal_messageCheck+0x98>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7fe ffd6 	bl	8002c14 <linear_motor_calibrate>
	}
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b00c      	add	sp, #48	; 0x30
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	20000368 	.word	0x20000368
 8003c74:	0800e1e0 	.word	0x0800e1e0
 8003c78:	0800e1e4 	.word	0x0800e1e4
 8003c7c:	0800e1ec 	.word	0x0800e1ec
 8003c80:	200003dc 	.word	0x200003dc
 8003c84:	200002f8 	.word	0x200002f8
 8003c88:	200004ac 	.word	0x200004ac
 8003c8c:	200002fc 	.word	0x200002fc

08003c90 <calculate_angles>:

void calculate_angles(float *frontAngle, float *rearAngle)
{
 8003c90:	b5b0      	push	{r4, r5, r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	int32_t posFront = linear_motor_get_position(pLM[0]);
 8003c9a:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <calculate_angles+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fe ff20 	bl	8002ae4 <linear_motor_get_position>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	61fb      	str	r3, [r7, #28]
	int32_t posRear = linear_motor_get_position(pLM[1]);
 8003ca8:	4b95      	ldr	r3, [pc, #596]	; (8003f00 <calculate_angles+0x270>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7fe ff19 	bl	8002ae4 <linear_motor_get_position>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	61bb      	str	r3, [r7, #24]
	float angle1 =  -3.6131e-08 * posFront*posFront - 0.0041*posFront - 0.3205;
 8003cb6:	69f8      	ldr	r0, [r7, #28]
 8003cb8:	f7fe fcda 	bl	8002670 <__aeabi_i2d>
 8003cbc:	4a91      	ldr	r2, [pc, #580]	; (8003f04 <calculate_angles+0x274>)
 8003cbe:	4b92      	ldr	r3, [pc, #584]	; (8003f08 <calculate_angles+0x278>)
 8003cc0:	f7fd fe84 	bl	80019cc <__aeabi_dmul>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	000b      	movs	r3, r1
 8003cc8:	0014      	movs	r4, r2
 8003cca:	001d      	movs	r5, r3
 8003ccc:	69f8      	ldr	r0, [r7, #28]
 8003cce:	f7fe fccf 	bl	8002670 <__aeabi_i2d>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	000b      	movs	r3, r1
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	0029      	movs	r1, r5
 8003cda:	f7fd fe77 	bl	80019cc <__aeabi_dmul>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	000b      	movs	r3, r1
 8003ce2:	0014      	movs	r4, r2
 8003ce4:	001d      	movs	r5, r3
 8003ce6:	69f8      	ldr	r0, [r7, #28]
 8003ce8:	f7fe fcc2 	bl	8002670 <__aeabi_i2d>
 8003cec:	4a87      	ldr	r2, [pc, #540]	; (8003f0c <calculate_angles+0x27c>)
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <calculate_angles+0x280>)
 8003cf0:	f7fd fe6c 	bl	80019cc <__aeabi_dmul>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	000b      	movs	r3, r1
 8003cf8:	0020      	movs	r0, r4
 8003cfa:	0029      	movs	r1, r5
 8003cfc:	f7fe f8d2 	bl	8001ea4 <__aeabi_dsub>
 8003d00:	0002      	movs	r2, r0
 8003d02:	000b      	movs	r3, r1
 8003d04:	0010      	movs	r0, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	4a82      	ldr	r2, [pc, #520]	; (8003f14 <calculate_angles+0x284>)
 8003d0a:	4b83      	ldr	r3, [pc, #524]	; (8003f18 <calculate_angles+0x288>)
 8003d0c:	f7fe f8ca 	bl	8001ea4 <__aeabi_dsub>
 8003d10:	0002      	movs	r2, r0
 8003d12:	000b      	movs	r3, r1
 8003d14:	0010      	movs	r0, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	f7fe fd00 	bl	800271c <__aeabi_d2f>
 8003d1c:	1c03      	adds	r3, r0, #0
 8003d1e:	617b      	str	r3, [r7, #20]
	float angle2 =   1.0956e-07 * posFront*posFront - 0.0038*posFront + 0.1772;
 8003d20:	69f8      	ldr	r0, [r7, #28]
 8003d22:	f7fe fca5 	bl	8002670 <__aeabi_i2d>
 8003d26:	4a7d      	ldr	r2, [pc, #500]	; (8003f1c <calculate_angles+0x28c>)
 8003d28:	4b7d      	ldr	r3, [pc, #500]	; (8003f20 <calculate_angles+0x290>)
 8003d2a:	f7fd fe4f 	bl	80019cc <__aeabi_dmul>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	000b      	movs	r3, r1
 8003d32:	0014      	movs	r4, r2
 8003d34:	001d      	movs	r5, r3
 8003d36:	69f8      	ldr	r0, [r7, #28]
 8003d38:	f7fe fc9a 	bl	8002670 <__aeabi_i2d>
 8003d3c:	0002      	movs	r2, r0
 8003d3e:	000b      	movs	r3, r1
 8003d40:	0020      	movs	r0, r4
 8003d42:	0029      	movs	r1, r5
 8003d44:	f7fd fe42 	bl	80019cc <__aeabi_dmul>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	000b      	movs	r3, r1
 8003d4c:	0014      	movs	r4, r2
 8003d4e:	001d      	movs	r5, r3
 8003d50:	69f8      	ldr	r0, [r7, #28]
 8003d52:	f7fe fc8d 	bl	8002670 <__aeabi_i2d>
 8003d56:	4a73      	ldr	r2, [pc, #460]	; (8003f24 <calculate_angles+0x294>)
 8003d58:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <calculate_angles+0x298>)
 8003d5a:	f7fd fe37 	bl	80019cc <__aeabi_dmul>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	000b      	movs	r3, r1
 8003d62:	0020      	movs	r0, r4
 8003d64:	0029      	movs	r1, r5
 8003d66:	f7fe f89d 	bl	8001ea4 <__aeabi_dsub>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	0010      	movs	r0, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	4a6e      	ldr	r2, [pc, #440]	; (8003f2c <calculate_angles+0x29c>)
 8003d74:	4b6e      	ldr	r3, [pc, #440]	; (8003f30 <calculate_angles+0x2a0>)
 8003d76:	f7fc feb9 	bl	8000aec <__aeabi_dadd>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	000b      	movs	r3, r1
 8003d7e:	0010      	movs	r0, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	f7fe fccb 	bl	800271c <__aeabi_d2f>
 8003d86:	1c03      	adds	r3, r0, #0
 8003d88:	613b      	str	r3, [r7, #16]
	float angle3 =   -6.9930e-08 * posFront*posRear + 0.0041*posRear + 0.0629;
 8003d8a:	69f8      	ldr	r0, [r7, #28]
 8003d8c:	f7fe fc70 	bl	8002670 <__aeabi_i2d>
 8003d90:	4a68      	ldr	r2, [pc, #416]	; (8003f34 <calculate_angles+0x2a4>)
 8003d92:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <calculate_angles+0x2a8>)
 8003d94:	f7fd fe1a 	bl	80019cc <__aeabi_dmul>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	000b      	movs	r3, r1
 8003d9c:	0014      	movs	r4, r2
 8003d9e:	001d      	movs	r5, r3
 8003da0:	69b8      	ldr	r0, [r7, #24]
 8003da2:	f7fe fc65 	bl	8002670 <__aeabi_i2d>
 8003da6:	0002      	movs	r2, r0
 8003da8:	000b      	movs	r3, r1
 8003daa:	0020      	movs	r0, r4
 8003dac:	0029      	movs	r1, r5
 8003dae:	f7fd fe0d 	bl	80019cc <__aeabi_dmul>
 8003db2:	0002      	movs	r2, r0
 8003db4:	000b      	movs	r3, r1
 8003db6:	0014      	movs	r4, r2
 8003db8:	001d      	movs	r5, r3
 8003dba:	69b8      	ldr	r0, [r7, #24]
 8003dbc:	f7fe fc58 	bl	8002670 <__aeabi_i2d>
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <calculate_angles+0x27c>)
 8003dc2:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <calculate_angles+0x280>)
 8003dc4:	f7fd fe02 	bl	80019cc <__aeabi_dmul>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	000b      	movs	r3, r1
 8003dcc:	0020      	movs	r0, r4
 8003dce:	0029      	movs	r1, r5
 8003dd0:	f7fc fe8c 	bl	8000aec <__aeabi_dadd>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	000b      	movs	r3, r1
 8003dd8:	0010      	movs	r0, r2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	4a57      	ldr	r2, [pc, #348]	; (8003f3c <calculate_angles+0x2ac>)
 8003dde:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <calculate_angles+0x2b0>)
 8003de0:	f7fc fe84 	bl	8000aec <__aeabi_dadd>
 8003de4:	0002      	movs	r2, r0
 8003de6:	000b      	movs	r3, r1
 8003de8:	0010      	movs	r0, r2
 8003dea:	0019      	movs	r1, r3
 8003dec:	f7fe fc96 	bl	800271c <__aeabi_d2f>
 8003df0:	1c03      	adds	r3, r0, #0
 8003df2:	60fb      	str	r3, [r7, #12]
	float angle4 =  -1.2005e-07 * posFront*posRear + 0.0039*posRear + 0.0641;
 8003df4:	69f8      	ldr	r0, [r7, #28]
 8003df6:	f7fe fc3b 	bl	8002670 <__aeabi_i2d>
 8003dfa:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <calculate_angles+0x2b4>)
 8003dfc:	4b52      	ldr	r3, [pc, #328]	; (8003f48 <calculate_angles+0x2b8>)
 8003dfe:	f7fd fde5 	bl	80019cc <__aeabi_dmul>
 8003e02:	0002      	movs	r2, r0
 8003e04:	000b      	movs	r3, r1
 8003e06:	0014      	movs	r4, r2
 8003e08:	001d      	movs	r5, r3
 8003e0a:	69b8      	ldr	r0, [r7, #24]
 8003e0c:	f7fe fc30 	bl	8002670 <__aeabi_i2d>
 8003e10:	0002      	movs	r2, r0
 8003e12:	000b      	movs	r3, r1
 8003e14:	0020      	movs	r0, r4
 8003e16:	0029      	movs	r1, r5
 8003e18:	f7fd fdd8 	bl	80019cc <__aeabi_dmul>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	000b      	movs	r3, r1
 8003e20:	0014      	movs	r4, r2
 8003e22:	001d      	movs	r5, r3
 8003e24:	69b8      	ldr	r0, [r7, #24]
 8003e26:	f7fe fc23 	bl	8002670 <__aeabi_i2d>
 8003e2a:	4a48      	ldr	r2, [pc, #288]	; (8003f4c <calculate_angles+0x2bc>)
 8003e2c:	4b48      	ldr	r3, [pc, #288]	; (8003f50 <calculate_angles+0x2c0>)
 8003e2e:	f7fd fdcd 	bl	80019cc <__aeabi_dmul>
 8003e32:	0002      	movs	r2, r0
 8003e34:	000b      	movs	r3, r1
 8003e36:	0020      	movs	r0, r4
 8003e38:	0029      	movs	r1, r5
 8003e3a:	f7fc fe57 	bl	8000aec <__aeabi_dadd>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	000b      	movs	r3, r1
 8003e42:	0010      	movs	r0, r2
 8003e44:	0019      	movs	r1, r3
 8003e46:	4a43      	ldr	r2, [pc, #268]	; (8003f54 <calculate_angles+0x2c4>)
 8003e48:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <calculate_angles+0x2c8>)
 8003e4a:	f7fc fe4f 	bl	8000aec <__aeabi_dadd>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	000b      	movs	r3, r1
 8003e52:	0010      	movs	r0, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	f7fe fc61 	bl	800271c <__aeabi_d2f>
 8003e5a:	1c03      	adds	r3, r0, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
	*frontAngle = (angle1 + angle2) / 2;
 8003e5e:	6939      	ldr	r1, [r7, #16]
 8003e60:	6978      	ldr	r0, [r7, #20]
 8003e62:	f7fc fb9b 	bl	800059c <__aeabi_fadd>
 8003e66:	1c03      	adds	r3, r0, #0
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	05c9      	lsls	r1, r1, #23
 8003e6c:	1c18      	adds	r0, r3, #0
 8003e6e:	f7fc fd31 	bl	80008d4 <__aeabi_fdiv>
 8003e72:	1c03      	adds	r3, r0, #0
 8003e74:	1c1a      	adds	r2, r3, #0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
	*rearAngle = (angle3 + angle4) / 2;
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7fc fb8d 	bl	800059c <__aeabi_fadd>
 8003e82:	1c03      	adds	r3, r0, #0
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	05c9      	lsls	r1, r1, #23
 8003e88:	1c18      	adds	r0, r3, #0
 8003e8a:	f7fc fd23 	bl	80008d4 <__aeabi_fdiv>
 8003e8e:	1c03      	adds	r3, r0, #0
 8003e90:	1c1a      	adds	r2, r3, #0
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	601a      	str	r2, [r3, #0]
	*frontAngle = (posFront - 145.1114) / (-255.5008);
 8003e96:	69f8      	ldr	r0, [r7, #28]
 8003e98:	f7fe fbea 	bl	8002670 <__aeabi_i2d>
 8003e9c:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <calculate_angles+0x2cc>)
 8003e9e:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <calculate_angles+0x2d0>)
 8003ea0:	f7fe f800 	bl	8001ea4 <__aeabi_dsub>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	000b      	movs	r3, r1
 8003ea8:	0010      	movs	r0, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <calculate_angles+0x2d4>)
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <calculate_angles+0x2d8>)
 8003eb0:	f7fd f986 	bl	80011c0 <__aeabi_ddiv>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	000b      	movs	r3, r1
 8003eb8:	0010      	movs	r0, r2
 8003eba:	0019      	movs	r1, r3
 8003ebc:	f7fe fc2e 	bl	800271c <__aeabi_d2f>
 8003ec0:	1c02      	adds	r2, r0, #0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
	*rearAngle = (posRear - 394.3129) / (247.7792);
 8003ec6:	69b8      	ldr	r0, [r7, #24]
 8003ec8:	f7fe fbd2 	bl	8002670 <__aeabi_i2d>
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <calculate_angles+0x2dc>)
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <calculate_angles+0x2e0>)
 8003ed0:	f7fd ffe8 	bl	8001ea4 <__aeabi_dsub>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	000b      	movs	r3, r1
 8003ed8:	0010      	movs	r0, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <calculate_angles+0x2e4>)
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <calculate_angles+0x2e8>)
 8003ee0:	f7fd f96e 	bl	80011c0 <__aeabi_ddiv>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	000b      	movs	r3, r1
 8003ee8:	0010      	movs	r0, r2
 8003eea:	0019      	movs	r1, r3
 8003eec:	f7fe fc16 	bl	800271c <__aeabi_d2f>
 8003ef0:	1c02      	adds	r2, r0, #0
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b008      	add	sp, #32
 8003efc:	bdb0      	pop	{r4, r5, r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	200003dc 	.word	0x200003dc
 8003f04:	8c45e665 	.word	0x8c45e665
 8003f08:	be6365ce 	.word	0xbe6365ce
 8003f0c:	5e9e1b09 	.word	0x5e9e1b09
 8003f10:	3f70cb29 	.word	0x3f70cb29
 8003f14:	6e978d50 	.word	0x6e978d50
 8003f18:	3fd48312 	.word	0x3fd48312
 8003f1c:	e72cb9e5 	.word	0xe72cb9e5
 8003f20:	3e7d68e7 	.word	0x3e7d68e7
 8003f24:	77318fc5 	.word	0x77318fc5
 8003f28:	3f6f212d 	.word	0x3f6f212d
 8003f2c:	566cf41f 	.word	0x566cf41f
 8003f30:	3fc6ae7d 	.word	0x3fc6ae7d
 8003f34:	91f12825 	.word	0x91f12825
 8003f38:	be72c58d 	.word	0xbe72c58d
 8003f3c:	e2eb1c43 	.word	0xe2eb1c43
 8003f40:	3fb01a36 	.word	0x3fb01a36
 8003f44:	f7a206a7 	.word	0xf7a206a7
 8003f48:	be801ce2 	.word	0xbe801ce2
 8003f4c:	8e8a71de 	.word	0x8e8a71de
 8003f50:	3f6ff2e4 	.word	0x3f6ff2e4
 8003f54:	8bac710d 	.word	0x8bac710d
 8003f58:	3fb068db 	.word	0x3fb068db
 8003f5c:	96bb98c8 	.word	0x96bb98c8
 8003f60:	40622390 	.word	0x40622390
 8003f64:	8db8bac7 	.word	0x8db8bac7
 8003f68:	c06ff006 	.word	0xc06ff006
 8003f6c:	a36e2eb2 	.word	0xa36e2eb2
 8003f70:	4078a501 	.word	0x4078a501
 8003f74:	34d6a162 	.word	0x34d6a162
 8003f78:	406ef8ef 	.word	0x406ef8ef

08003f7c <calculate_pulses>:

void calculate_pulses(int32_t frontAngle, int32_t rearAngle)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	//int32_t posFront = linear_motor_get_position(pLM[0]);
	//int32_t posRear = linear_motor_get_position(pLM[1]);
	int32_t pulses_front = -255.5008 * frontAngle + 145.1114;
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fe fb72 	bl	8002670 <__aeabi_i2d>
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <calculate_pulses+0xa8>)
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <calculate_pulses+0xac>)
 8003f90:	f7fd fd1c 	bl	80019cc <__aeabi_dmul>
 8003f94:	0002      	movs	r2, r0
 8003f96:	000b      	movs	r3, r1
 8003f98:	0010      	movs	r0, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <calculate_pulses+0xb0>)
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <calculate_pulses+0xb4>)
 8003fa0:	f7fc fda4 	bl	8000aec <__aeabi_dadd>
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	000b      	movs	r3, r1
 8003fa8:	0010      	movs	r0, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	f7fe fb2a 	bl	8002604 <__aeabi_d2iz>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	60fb      	str	r3, [r7, #12]
	int32_t pulses_rear = 247.7792 * rearAngle + 394.3129;
 8003fb4:	6838      	ldr	r0, [r7, #0]
 8003fb6:	f7fe fb5b 	bl	8002670 <__aeabi_i2d>
 8003fba:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <calculate_pulses+0xb8>)
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <calculate_pulses+0xbc>)
 8003fbe:	f7fd fd05 	bl	80019cc <__aeabi_dmul>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	000b      	movs	r3, r1
 8003fc6:	0010      	movs	r0, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	4a1c      	ldr	r2, [pc, #112]	; (800403c <calculate_pulses+0xc0>)
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <calculate_pulses+0xc4>)
 8003fce:	f7fc fd8d 	bl	8000aec <__aeabi_dadd>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	000b      	movs	r3, r1
 8003fd6:	0010      	movs	r0, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	f7fe fb13 	bl	8002604 <__aeabi_d2iz>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	60bb      	str	r3, [r7, #8]

	// Positive turn direction is RIGHT
	linear_motor_set_target(pLM[0], pulses_front);
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <calculate_pulses+0xc8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7fe fd5c 	bl	8002aa8 <linear_motor_set_target>
	linear_motor_set_target(pLM[1], pulses_rear);
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <calculate_pulses+0xc8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fe fd55 	bl	8002aa8 <linear_motor_set_target>
	linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <calculate_pulses+0xc8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a11      	ldr	r2, [pc, #68]	; (8004048 <calculate_pulses+0xcc>)
 8004004:	4911      	ldr	r1, [pc, #68]	; (800404c <calculate_pulses+0xd0>)
 8004006:	0018      	movs	r0, r3
 8004008:	f7fe fd76 	bl	8002af8 <linear_motor_pulse>
	linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <calculate_pulses+0xc8>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <calculate_pulses+0xd4>)
 8004012:	490e      	ldr	r1, [pc, #56]	; (800404c <calculate_pulses+0xd0>)
 8004014:	0018      	movs	r0, r3
 8004016:	f7fe fd6f 	bl	8002af8 <linear_motor_pulse>
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	8db8bac7 	.word	0x8db8bac7
 8004028:	c06ff006 	.word	0xc06ff006
 800402c:	96bb98c8 	.word	0x96bb98c8
 8004030:	40622390 	.word	0x40622390
 8004034:	34d6a162 	.word	0x34d6a162
 8004038:	406ef8ef 	.word	0x406ef8ef
 800403c:	a36e2eb2 	.word	0xa36e2eb2
 8004040:	4078a501 	.word	0x4078a501
 8004044:	200003dc 	.word	0x200003dc
 8004048:	200002f8 	.word	0x200002f8
 800404c:	200004ac 	.word	0x200004ac
 8004050:	200002fc 	.word	0x200002fc

08004054 <HAL_TIM_PWM_PulseFinishedCallback>:

// Linear Motors Timers
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d12e      	bne.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7f1b      	ldrb	r3, [r3, #28]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d113      	bne.n	8004094 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800407c:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 800407e:	e020      	b.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 8004080:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11c      	bne.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800408a:	2100      	movs	r1, #0
 800408c:	0018      	movs	r0, r3
 800408e:	f002 f959 	bl	8006344 <HAL_TIM_PWM_Stop_IT>
}
 8004092:	e016      	b.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7f1b      	ldrb	r3, [r3, #28]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d112      	bne.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	e008      	b.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80040ba:	2104      	movs	r1, #4
 80040bc:	0018      	movs	r0, r3
 80040be:	f002 f941 	bl	8006344 <HAL_TIM_PWM_Stop_IT>
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	200004ac 	.word	0x200004ac
 80040d0:	200002f8 	.word	0x200002f8
 80040d4:	200002fc 	.word	0x200002fc

080040d8 <HAL_TIM_IC_CaptureCallback>:

// ENCODERS READING
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4aa9      	ldr	r2, [pc, #676]	; (800438c <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d000      	beq.n	80040ec <HAL_TIM_IC_CaptureCallback+0x14>
 80040ea:	e14a      	b.n	8004382 <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7f1b      	ldrb	r3, [r3, #28]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d14e      	bne.n	8004192 <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80040f4:	4ba6      	ldr	r3, [pc, #664]	; (8004390 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80040f6:	2100      	movs	r1, #0
 80040f8:	0018      	movs	r0, r3
 80040fa:	f002 fe93 	bl	8006e24 <HAL_TIM_ReadCapturedValue>
 80040fe:	0002      	movs	r2, r0
 8004100:	4ba4      	ldr	r3, [pc, #656]	; (8004394 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8004102:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 8004104:	4ba3      	ldr	r3, [pc, #652]	; (8004394 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4ba3      	ldr	r3, [pc, #652]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d93b      	bls.n	8004188 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 8004110:	4ba2      	ldr	r3, [pc, #648]	; (800439c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e01a      	b.n	8004152 <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	4b9f      	ldr	r3, [pc, #636]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004122:	0092      	lsls	r2, r2, #2
 8004124:	58d1      	ldr	r1, [r2, r3]
 8004126:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	0092      	lsls	r2, r2, #2
 800412c:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 800412e:	4b9c      	ldr	r3, [pc, #624]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	58d3      	ldr	r3, [r2, r3]
 8004136:	2105      	movs	r1, #5
 8004138:	0018      	movs	r0, r3
 800413a:	f7fc f80b 	bl	8000154 <__udivsi3>
 800413e:	0003      	movs	r3, r0
 8004140:	001a      	movs	r2, r3
 8004142:	4b96      	ldr	r3, [pc, #600]	; (800439c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	18d2      	adds	r2, r2, r3
 8004148:	4b94      	ldr	r3, [pc, #592]	; (800439c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800414a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b03      	cmp	r3, #3
 8004156:	dde1      	ble.n	800411c <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 8004158:	4b8e      	ldr	r3, [pc, #568]	; (8004394 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b8e      	ldr	r3, [pc, #568]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004164:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 8004166:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2105      	movs	r1, #5
 800416c:	0018      	movs	r0, r3
 800416e:	f7fb fff1 	bl	8000154 <__udivsi3>
 8004172:	0003      	movs	r3, r0
 8004174:	001a      	movs	r2, r3
 8004176:	4b89      	ldr	r3, [pc, #548]	; (800439c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	18d2      	adds	r2, r2, r3
 800417c:	4b87      	ldr	r3, [pc, #540]	; (800439c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800417e:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 8004180:	4b86      	ldr	r3, [pc, #536]	; (800439c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b87      	ldr	r3, [pc, #540]	; (80043a4 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8004186:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 8004188:	4b82      	ldr	r3, [pc, #520]	; (8004394 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800418e:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 8004190:	e0f7      	b.n	8004382 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7f1b      	ldrb	r3, [r3, #28]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d14e      	bne.n	8004238 <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800419a:	4b7d      	ldr	r3, [pc, #500]	; (8004390 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800419c:	2104      	movs	r1, #4
 800419e:	0018      	movs	r0, r3
 80041a0:	f002 fe40 	bl	8006e24 <HAL_TIM_ReadCapturedValue>
 80041a4:	0002      	movs	r2, r0
 80041a6:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80041a8:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 80041aa:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d93b      	bls.n	800422e <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 80041b6:	4b7e      	ldr	r3, [pc, #504]	; (80043b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e01a      	b.n	80041f8 <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80041c8:	0092      	lsls	r2, r2, #2
 80041ca:	58d1      	ldr	r1, [r2, r3]
 80041cc:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 80041d4:	4b77      	ldr	r3, [pc, #476]	; (80043b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	2105      	movs	r1, #5
 80041de:	0018      	movs	r0, r3
 80041e0:	f7fb ffb8 	bl	8000154 <__udivsi3>
 80041e4:	0003      	movs	r3, r0
 80041e6:	001a      	movs	r2, r3
 80041e8:	4b71      	ldr	r3, [pc, #452]	; (80043b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	18d2      	adds	r2, r2, r3
 80041ee:	4b70      	ldr	r3, [pc, #448]	; (80043b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80041f0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3301      	adds	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	dde1      	ble.n	80041c2 <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 80041fe:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800420a:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2105      	movs	r1, #5
 8004212:	0018      	movs	r0, r3
 8004214:	f7fb ff9e 	bl	8000154 <__udivsi3>
 8004218:	0003      	movs	r3, r0
 800421a:	001a      	movs	r2, r3
 800421c:	4b64      	ldr	r3, [pc, #400]	; (80043b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	18d2      	adds	r2, r2, r3
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004224:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 8004226:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b63      	ldr	r3, [pc, #396]	; (80043b8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800422c:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 800422e:	4b5e      	ldr	r3, [pc, #376]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	e0a4      	b.n	8004382 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7f1b      	ldrb	r3, [r3, #28]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d14e      	bne.n	80042de <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8004242:	2108      	movs	r1, #8
 8004244:	0018      	movs	r0, r3
 8004246:	f002 fded 	bl	8006e24 <HAL_TIM_ReadCapturedValue>
 800424a:	0002      	movs	r2, r0
 800424c:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800424e:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 8004250:	4b5a      	ldr	r3, [pc, #360]	; (80043bc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b5a      	ldr	r3, [pc, #360]	; (80043c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d93b      	bls.n	80042d4 <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e01a      	b.n	800429e <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	58d1      	ldr	r1, [r2, r3]
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	0092      	lsls	r2, r2, #2
 8004278:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 800427a:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	58d3      	ldr	r3, [r2, r3]
 8004282:	2105      	movs	r1, #5
 8004284:	0018      	movs	r0, r3
 8004286:	f7fb ff65 	bl	8000154 <__udivsi3>
 800428a:	0003      	movs	r3, r0
 800428c:	001a      	movs	r2, r3
 800428e:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	18d2      	adds	r2, r2, r3
 8004294:	4b4b      	ldr	r3, [pc, #300]	; (80043c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004296:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	dde1      	ble.n	8004268 <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1ad2      	subs	r2, r2, r3
 80042ae:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80042b0:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 80042b2:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2105      	movs	r1, #5
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fb ff4b 	bl	8000154 <__udivsi3>
 80042be:	0003      	movs	r3, r0
 80042c0:	001a      	movs	r2, r3
 80042c2:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	18d2      	adds	r2, r2, r3
 80042c8:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80042ca:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80042d2:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	e051      	b.n	8004382 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7f1b      	ldrb	r3, [r3, #28]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d14d      	bne.n	8004382 <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 80042e6:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80042e8:	210c      	movs	r1, #12
 80042ea:	0018      	movs	r0, r3
 80042ec:	f002 fd9a 	bl	8006e24 <HAL_TIM_ReadCapturedValue>
 80042f0:	0002      	movs	r2, r0
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80042f4:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d93b      	bls.n	800437a <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 8004302:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	e01a      	b.n	8004344 <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	4b32      	ldr	r3, [pc, #200]	; (80043dc <HAL_TIM_IC_CaptureCallback+0x304>)
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	58d1      	ldr	r1, [r2, r3]
 8004318:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_TIM_IC_CaptureCallback+0x304>)
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	0092      	lsls	r2, r2, #2
 800431e:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 8004320:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_TIM_IC_CaptureCallback+0x304>)
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	58d3      	ldr	r3, [r2, r3]
 8004328:	2105      	movs	r1, #5
 800432a:	0018      	movs	r0, r3
 800432c:	f7fb ff12 	bl	8000154 <__udivsi3>
 8004330:	0003      	movs	r3, r0
 8004332:	001a      	movs	r2, r3
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	18d2      	adds	r2, r2, r3
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 800433c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b03      	cmp	r3, #3
 8004348:	dde1      	ble.n	800430e <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <HAL_TIM_IC_CaptureCallback+0x304>)
 8004356:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_TIM_IC_CaptureCallback+0x304>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2105      	movs	r1, #5
 800435e:	0018      	movs	r0, r3
 8004360:	f7fb fef8 	bl	8000154 <__udivsi3>
 8004364:	0003      	movs	r3, r0
 8004366:	001a      	movs	r2, r3
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	18d2      	adds	r2, r2, r3
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004370:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8004378:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b006      	add	sp, #24
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	40000400 	.word	0x40000400
 8004390:	20000538 	.word	0x20000538
 8004394:	20000204 	.word	0x20000204
 8004398:	20000200 	.word	0x20000200
 800439c:	20000208 	.word	0x20000208
 80043a0:	2000020c 	.word	0x2000020c
 80043a4:	200001fc 	.word	0x200001fc
 80043a8:	20000228 	.word	0x20000228
 80043ac:	20000224 	.word	0x20000224
 80043b0:	2000022c 	.word	0x2000022c
 80043b4:	20000230 	.word	0x20000230
 80043b8:	20000220 	.word	0x20000220
 80043bc:	2000024c 	.word	0x2000024c
 80043c0:	20000248 	.word	0x20000248
 80043c4:	20000250 	.word	0x20000250
 80043c8:	20000254 	.word	0x20000254
 80043cc:	20000244 	.word	0x20000244
 80043d0:	20000270 	.word	0x20000270
 80043d4:	2000026c 	.word	0x2000026c
 80043d8:	20000274 	.word	0x20000274
 80043dc:	20000278 	.word	0x20000278
 80043e0:	20000268 	.word	0x20000268

080043e4 <HAL_UART_TxCpltCallback>:

// --------------------------------------

// UART Processing
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	UART_TX_Busy = 0;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_UART_TxCpltCallback+0x18>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	200002f4 	.word	0x200002f4

08004400 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3 && UART_newMessage != 1 && Init_Done == 1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <HAL_UART_RxCpltCallback+0xc0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d151      	bne.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HAL_UART_RxCpltCallback+0xc4>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d04d      	beq.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
 800441a:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <HAL_UART_RxCpltCallback+0xc8>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d149      	bne.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 8004422:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <HAL_UART_RxCpltCallback+0xcc>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b0a      	cmp	r3, #10
 8004428:	d11a      	bne.n	8004460 <HAL_UART_RxCpltCallback+0x60>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 800442a:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_UART_RxCpltCallback+0xd0>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d112      	bne.n	8004458 <HAL_UART_RxCpltCallback+0x58>
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 8004434:	2200      	movs	r2, #0
 8004436:	5e9b      	ldrsh	r3, [r3, r2]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <HAL_UART_RxCpltCallback+0x58>
			{
				rxString[UART2_rxindex] = 0;
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 800443e:	2200      	movs	r2, #0
 8004440:	5e9b      	ldrsh	r3, [r3, r2]
 8004442:	001a      	movs	r2, r3
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_UART_RxCpltCallback+0xd8>)
 8004446:	2100      	movs	r1, #0
 8004448:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 800444c:	2200      	movs	r2, #0
 800444e:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <HAL_UART_RxCpltCallback+0xc4>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]



	}

}
 8004456:	e02e      	b.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_UART_RxCpltCallback+0xd0>)
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
}
 800445e:	e02a      	b.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <HAL_UART_RxCpltCallback+0xcc>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b0d      	cmp	r3, #13
 8004466:	d026      	beq.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_UART_RxCpltCallback+0xd0>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d122      	bne.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 8004470:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 8004472:	2200      	movs	r2, #0
 8004474:	5e9b      	ldrsh	r3, [r3, r2]
 8004476:	001a      	movs	r2, r3
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <HAL_UART_RxCpltCallback+0xcc>)
 800447a:	7819      	ldrb	r1, [r3, #0]
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_UART_RxCpltCallback+0xd8>)
 800447e:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 8004482:	2200      	movs	r2, #0
 8004484:	5e9b      	ldrsh	r3, [r3, r2]
 8004486:	b29b      	uxth	r3, r3
 8004488:	3301      	adds	r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	b21a      	sxth	r2, r3
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 8004490:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 8004494:	2200      	movs	r2, #0
 8004496:	5e9b      	ldrsh	r3, [r3, r2]
 8004498:	2b63      	cmp	r3, #99	; 0x63
 800449a:	dd0c      	ble.n	80044b6 <HAL_UART_RxCpltCallback+0xb6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <HAL_UART_RxCpltCallback+0xd0>)
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <HAL_UART_RxCpltCallback+0xd4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	5e9b      	ldrsh	r3, [r3, r2]
 80044ae:	001a      	movs	r2, r3
 80044b0:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_UART_RxCpltCallback+0xd8>)
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b002      	add	sp, #8
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	40004800 	.word	0x40004800
 80044c4:	2000028d 	.word	0x2000028d
 80044c8:	20000300 	.word	0x20000300
 80044cc:	2000028c 	.word	0x2000028c
 80044d0:	200003cc 	.word	0x200003cc
 80044d4:	200003ce 	.word	0x200003ce
 80044d8:	20000290 	.word	0x20000290

080044dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044e0:	b672      	cpsid	i
}
 80044e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044e4:	e7fe      	b.n	80044e4 <Error_Handler+0x8>
	...

080044e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_MspInit+0x44>)
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	4b0e      	ldr	r3, [pc, #56]	; (800452c <HAL_MspInit+0x44>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	619a      	str	r2, [r3, #24]
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_MspInit+0x44>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2201      	movs	r2, #1
 8004500:	4013      	ands	r3, r2
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_MspInit+0x44>)
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_MspInit+0x44>)
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	0549      	lsls	r1, r1, #21
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_MspInit+0x44>)
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	055b      	lsls	r3, r3, #21
 800451c:	4013      	ands	r3, r2
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	40021000 	.word	0x40021000

08004530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_TIM_Base_MspInit+0x70>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10e      	bne.n	8004560 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <HAL_TIM_Base_MspInit+0x74>)
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_TIM_Base_MspInit+0x74>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0109      	lsls	r1, r1, #4
 800454c:	430a      	orrs	r2, r1
 800454e:	619a      	str	r2, [r3, #24]
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_TIM_Base_MspInit+0x74>)
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800455e:	e01a      	b.n	8004596 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a10      	ldr	r2, [pc, #64]	; (80045a8 <HAL_TIM_Base_MspInit+0x78>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d115      	bne.n	8004596 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800456a:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_TIM_Base_MspInit+0x74>)
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_TIM_Base_MspInit+0x74>)
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	0249      	lsls	r1, r1, #9
 8004574:	430a      	orrs	r2, r1
 8004576:	619a      	str	r2, [r3, #24]
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_TIM_Base_MspInit+0x74>)
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	025b      	lsls	r3, r3, #9
 8004580:	4013      	ands	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	2014      	movs	r0, #20
 800458c:	f000 fc22 	bl	8004dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004590:	2014      	movs	r0, #20
 8004592:	f000 fc34 	bl	8004dfe <HAL_NVIC_EnableIRQ>
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40014000 	.word	0x40014000

080045ac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b08b      	sub	sp, #44	; 0x2c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	2414      	movs	r4, #20
 80045b6:	193b      	adds	r3, r7, r4
 80045b8:	0018      	movs	r0, r3
 80045ba:	2314      	movs	r3, #20
 80045bc:	001a      	movs	r2, r3
 80045be:	2100      	movs	r1, #0
 80045c0:	f004 fc70 	bl	8008ea4 <memset>
  if(htim_ic->Instance==TIM3)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a31      	ldr	r2, [pc, #196]	; (8004690 <HAL_TIM_IC_MspInit+0xe4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d15b      	bne.n	8004686 <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 80045d4:	2102      	movs	r1, #2
 80045d6:	430a      	orrs	r2, r1
 80045d8:	61da      	str	r2, [r3, #28]
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e6:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	02c9      	lsls	r1, r1, #11
 80045f0:	430a      	orrs	r2, r1
 80045f2:	615a      	str	r2, [r3, #20]
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	02db      	lsls	r3, r3, #11
 80045fc:	4013      	ands	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	0309      	lsls	r1, r1, #12
 800460c:	430a      	orrs	r2, r1
 800460e:	615a      	str	r2, [r3, #20]
 8004610:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_TIM_IC_MspInit+0xe8>)
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	4013      	ands	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800461e:	193b      	adds	r3, r7, r4
 8004620:	2221      	movs	r2, #33	; 0x21
 8004622:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	193b      	adds	r3, r7, r4
 8004626:	2202      	movs	r2, #2
 8004628:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800462a:	193b      	adds	r3, r7, r4
 800462c:	2201      	movs	r2, #1
 800462e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004630:	193b      	adds	r3, r7, r4
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004636:	193b      	adds	r3, r7, r4
 8004638:	2201      	movs	r2, #1
 800463a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463c:	193b      	adds	r3, r7, r4
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <HAL_TIM_IC_MspInit+0xec>)
 8004640:	0019      	movs	r1, r3
 8004642:	0010      	movs	r0, r2
 8004644:	f000 fe0e 	bl	8005264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004648:	0021      	movs	r1, r4
 800464a:	187b      	adds	r3, r7, r1
 800464c:	2290      	movs	r2, #144	; 0x90
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2202      	movs	r2, #2
 8004656:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004658:	187b      	adds	r3, r7, r1
 800465a:	2201      	movs	r2, #1
 800465c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465e:	187b      	adds	r3, r7, r1
 8004660:	2200      	movs	r2, #0
 8004662:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004664:	187b      	adds	r3, r7, r1
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800466a:	187b      	adds	r3, r7, r1
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <HAL_TIM_IC_MspInit+0xf0>)
 800466e:	0019      	movs	r1, r3
 8004670:	0010      	movs	r0, r2
 8004672:	f000 fdf7 	bl	8005264 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004676:	2200      	movs	r2, #0
 8004678:	2101      	movs	r1, #1
 800467a:	2010      	movs	r0, #16
 800467c:	f000 fbaa 	bl	8004dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004680:	2010      	movs	r0, #16
 8004682:	f000 fbbc 	bl	8004dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b00b      	add	sp, #44	; 0x2c
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	40000400 	.word	0x40000400
 8004694:	40021000 	.word	0x40021000
 8004698:	48000400 	.word	0x48000400
 800469c:	48000800 	.word	0x48000800

080046a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b08b      	sub	sp, #44	; 0x2c
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a8:	2414      	movs	r4, #20
 80046aa:	193b      	adds	r3, r7, r4
 80046ac:	0018      	movs	r0, r3
 80046ae:	2314      	movs	r3, #20
 80046b0:	001a      	movs	r2, r3
 80046b2:	2100      	movs	r1, #0
 80046b4:	f004 fbf6 	bl	8008ea4 <memset>
  if(htim->Instance==TIM1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2b      	ldr	r2, [pc, #172]	; (800476c <HAL_TIM_MspPostInit+0xcc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d126      	bne.n	8004710 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_TIM_MspPostInit+0xd0>)
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_TIM_MspPostInit+0xd0>)
 80046c8:	2180      	movs	r1, #128	; 0x80
 80046ca:	0289      	lsls	r1, r1, #10
 80046cc:	430a      	orrs	r2, r1
 80046ce:	615a      	str	r2, [r3, #20]
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_TIM_MspPostInit+0xd0>)
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80046de:	193b      	adds	r3, r7, r4
 80046e0:	22f0      	movs	r2, #240	; 0xf0
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	0021      	movs	r1, r4
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2202      	movs	r2, #2
 80046ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	2202      	movs	r2, #2
 80046fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004700:	187a      	adds	r2, r7, r1
 8004702:	2390      	movs	r3, #144	; 0x90
 8004704:	05db      	lsls	r3, r3, #23
 8004706:	0011      	movs	r1, r2
 8004708:	0018      	movs	r0, r3
 800470a:	f000 fdab 	bl	8005264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800470e:	e029      	b.n	8004764 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_TIM_MspPostInit+0xd4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d124      	bne.n	8004764 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_TIM_MspPostInit+0xd0>)
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_TIM_MspPostInit+0xd0>)
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	02c9      	lsls	r1, r1, #11
 8004724:	430a      	orrs	r2, r1
 8004726:	615a      	str	r2, [r3, #20]
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_TIM_MspPostInit+0xd0>)
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	02db      	lsls	r3, r3, #11
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004736:	2114      	movs	r1, #20
 8004738:	187b      	adds	r3, r7, r1
 800473a:	22c0      	movs	r2, #192	; 0xc0
 800473c:	0212      	lsls	r2, r2, #8
 800473e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	187b      	adds	r3, r7, r1
 8004742:	2202      	movs	r2, #2
 8004744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	187b      	adds	r3, r7, r1
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474c:	187b      	adds	r3, r7, r1
 800474e:	2200      	movs	r2, #0
 8004750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8004752:	187b      	adds	r3, r7, r1
 8004754:	2201      	movs	r2, #1
 8004756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004758:	187b      	adds	r3, r7, r1
 800475a:	4a07      	ldr	r2, [pc, #28]	; (8004778 <HAL_TIM_MspPostInit+0xd8>)
 800475c:	0019      	movs	r1, r3
 800475e:	0010      	movs	r0, r2
 8004760:	f000 fd80 	bl	8005264 <HAL_GPIO_Init>
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b00b      	add	sp, #44	; 0x2c
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40021000 	.word	0x40021000
 8004774:	40014000 	.word	0x40014000
 8004778:	48000400 	.word	0x48000400

0800477c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	2414      	movs	r4, #20
 8004786:	193b      	adds	r3, r7, r4
 8004788:	0018      	movs	r0, r3
 800478a:	2314      	movs	r3, #20
 800478c:	001a      	movs	r2, r3
 800478e:	2100      	movs	r1, #0
 8004790:	f004 fb88 	bl	8008ea4 <memset>
  if(huart->Instance==USART3)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <HAL_UART_MspInit+0x158>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d000      	beq.n	80047a0 <HAL_UART_MspInit+0x24>
 800479e:	e094      	b.n	80048ca <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80047a0:	4b4d      	ldr	r3, [pc, #308]	; (80048d8 <HAL_UART_MspInit+0x15c>)
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <HAL_UART_MspInit+0x15c>)
 80047a6:	2180      	movs	r1, #128	; 0x80
 80047a8:	02c9      	lsls	r1, r1, #11
 80047aa:	430a      	orrs	r2, r1
 80047ac:	61da      	str	r2, [r3, #28]
 80047ae:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <HAL_UART_MspInit+0x15c>)
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	02db      	lsls	r3, r3, #11
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <HAL_UART_MspInit+0x15c>)
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <HAL_UART_MspInit+0x15c>)
 80047c2:	2180      	movs	r1, #128	; 0x80
 80047c4:	0309      	lsls	r1, r1, #12
 80047c6:	430a      	orrs	r2, r1
 80047c8:	615a      	str	r2, [r3, #20]
 80047ca:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_UART_MspInit+0x15c>)
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	4013      	ands	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	2281      	movs	r2, #129	; 0x81
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	0021      	movs	r1, r4
 80047e2:	187b      	adds	r3, r7, r1
 80047e4:	2202      	movs	r2, #2
 80047e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	2203      	movs	r2, #3
 80047f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	2201      	movs	r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	4a37      	ldr	r2, [pc, #220]	; (80048dc <HAL_UART_MspInit+0x160>)
 80047fe:	0019      	movs	r1, r3
 8004800:	0010      	movs	r0, r2
 8004802:	f000 fd2f 	bl	8005264 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004808:	4a36      	ldr	r2, [pc, #216]	; (80048e4 <HAL_UART_MspInit+0x168>)
 800480a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800480c:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <HAL_UART_MspInit+0x164>)
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004814:	2200      	movs	r2, #0
 8004816:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_UART_MspInit+0x164>)
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800481e:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004820:	2200      	movs	r2, #0
 8004822:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004826:	2200      	movs	r2, #0
 8004828:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800482a:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_UART_MspInit+0x164>)
 800482c:	2220      	movs	r2, #32
 800482e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004832:	2200      	movs	r2, #0
 8004834:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004838:	0018      	movs	r0, r3
 800483a:	f000 fafd 	bl	8004e38 <HAL_DMA_Init>
 800483e:	1e03      	subs	r3, r0, #0
 8004840:	d001      	beq.n	8004846 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004842:	f7ff fe4b 	bl	80044dc <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <HAL_UART_MspInit+0x16c>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <HAL_UART_MspInit+0x16c>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	04c9      	lsls	r1, r1, #19
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_UART_MspInit+0x164>)
 8004858:	671a      	str	r2, [r3, #112]	; 0x70
 800485a:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_UART_MspInit+0x164>)
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_UART_MspInit+0x170>)
 8004862:	4a23      	ldr	r2, [pc, #140]	; (80048f0 <HAL_UART_MspInit+0x174>)
 8004864:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004866:	4b21      	ldr	r3, [pc, #132]	; (80048ec <HAL_UART_MspInit+0x170>)
 8004868:	2210      	movs	r2, #16
 800486a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800486c:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <HAL_UART_MspInit+0x170>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <HAL_UART_MspInit+0x170>)
 8004874:	2280      	movs	r2, #128	; 0x80
 8004876:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004878:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <HAL_UART_MspInit+0x170>)
 800487a:	2200      	movs	r2, #0
 800487c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800487e:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <HAL_UART_MspInit+0x170>)
 8004880:	2200      	movs	r2, #0
 8004882:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_UART_MspInit+0x170>)
 8004886:	2200      	movs	r2, #0
 8004888:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800488a:	4b18      	ldr	r3, [pc, #96]	; (80048ec <HAL_UART_MspInit+0x170>)
 800488c:	2200      	movs	r2, #0
 800488e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004890:	4b16      	ldr	r3, [pc, #88]	; (80048ec <HAL_UART_MspInit+0x170>)
 8004892:	0018      	movs	r0, r3
 8004894:	f000 fad0 	bl	8004e38 <HAL_DMA_Init>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d001      	beq.n	80048a0 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800489c:	f7ff fe1e 	bl	80044dc <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_UART_MspInit+0x16c>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_UART_MspInit+0x16c>)
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	04c9      	lsls	r1, r1, #19
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_UART_MspInit+0x170>)
 80048b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <HAL_UART_MspInit+0x170>)
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	201d      	movs	r0, #29
 80048c0:	f000 fa88 	bl	8004dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80048c4:	201d      	movs	r0, #29
 80048c6:	f000 fa9a 	bl	8004dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b00b      	add	sp, #44	; 0x2c
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	40004800 	.word	0x40004800
 80048d8:	40021000 	.word	0x40021000
 80048dc:	48000800 	.word	0x48000800
 80048e0:	200003e4 	.word	0x200003e4
 80048e4:	40020030 	.word	0x40020030
 80048e8:	40010000 	.word	0x40010000
 80048ec:	200004f4 	.word	0x200004f4
 80048f0:	4002001c 	.word	0x4002001c

080048f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <NMI_Handler+0x4>

080048fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048fe:	e7fe      	b.n	80048fe <HardFault_Handler+0x4>

08004900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004918:	f000 f970 	bl	8004bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800492a:	0018      	movs	r0, r3
 800492c:	f000 fbaf 	bl	800508e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004932:	0018      	movs	r0, r3
 8004934:	f000 fbab 	bl	800508e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	200004f4 	.word	0x200004f4
 8004944:	200003e4 	.word	0x200003e4

08004948 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <TIM3_IRQHandler+0x14>)
 800494e:	0018      	movs	r0, r3
 8004950:	f001 ff14 	bl	800677c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	20000538 	.word	0x20000538

08004960 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <TIM15_IRQHandler+0x14>)
 8004966:	0018      	movs	r0, r3
 8004968:	f001 ff08 	bl	800677c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	200004ac 	.word	0x200004ac

08004978 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <USART3_4_IRQHandler+0x14>)
 800497e:	0018      	movs	r0, r3
 8004980:	f003 f9b4 	bl	8007cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	20000428 	.word	0x20000428

08004990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	return 1;
 8004994:	2301      	movs	r3, #1
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_kill>:

int _kill(int pid, int sig)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049a6:	f004 fa53 	bl	8008e50 <__errno>
 80049aa:	0003      	movs	r3, r0
 80049ac:	2216      	movs	r2, #22
 80049ae:	601a      	str	r2, [r3, #0]
	return -1;
 80049b0:	2301      	movs	r3, #1
 80049b2:	425b      	negs	r3, r3
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_exit>:

void _exit (int status)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049c4:	2301      	movs	r3, #1
 80049c6:	425a      	negs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0011      	movs	r1, r2
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff ffe5 	bl	800499c <_kill>
	while (1) {}		/* Make sure we hang here */
 80049d2:	e7fe      	b.n	80049d2 <_exit+0x16>

080049d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e00a      	b.n	80049fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049e6:	e000      	b.n	80049ea <_read+0x16>
 80049e8:	bf00      	nop
 80049ea:	0001      	movs	r1, r0
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	60ba      	str	r2, [r7, #8]
 80049f2:	b2ca      	uxtb	r2, r1
 80049f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	3301      	adds	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	dbf0      	blt.n	80049e6 <_read+0x12>
	}

return len;
 8004a04:	687b      	ldr	r3, [r7, #4]
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b006      	add	sp, #24
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e009      	b.n	8004a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	60ba      	str	r2, [r7, #8]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	e000      	b.n	8004a2e <_write+0x20>
 8004a2c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	3301      	adds	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dbf1      	blt.n	8004a20 <_write+0x12>
	}
	return len;
 8004a3c:	687b      	ldr	r3, [r7, #4]
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b006      	add	sp, #24
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <_close>:

int _close(int file)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	425b      	negs	r3, r3
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	0192      	lsls	r2, r2, #6
 8004a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b002      	add	sp, #8
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_isatty>:

int _isatty(int file)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8004a7e:	2301      	movs	r3, #1
}
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
	return 0;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b004      	add	sp, #16
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004aa8:	4a14      	ldr	r2, [pc, #80]	; (8004afc <_sbrk+0x5c>)
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <_sbrk+0x60>)
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <_sbrk+0x64>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <_sbrk+0x64>)
 8004abe:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <_sbrk+0x68>)
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <_sbrk+0x64>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d207      	bcs.n	8004ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ad0:	f004 f9be 	bl	8008e50 <__errno>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	220c      	movs	r2, #12
 8004ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	425b      	negs	r3, r3
 8004ade:	e009      	b.n	8004af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <_sbrk+0x64>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <_sbrk+0x64>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	18d2      	adds	r2, r2, r3
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <_sbrk+0x64>)
 8004af0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b006      	add	sp, #24
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20004000 	.word	0x20004000
 8004b00:	00000400 	.word	0x00000400
 8004b04:	200003d0 	.word	0x200003d0
 8004b08:	20000628 	.word	0x20000628

08004b0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b18:	480d      	ldr	r0, [pc, #52]	; (8004b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b1c:	480d      	ldr	r0, [pc, #52]	; (8004b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b1e:	490e      	ldr	r1, [pc, #56]	; (8004b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b20:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <LoopForever+0xe>)
  movs r3, #0
 8004b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b24:	e002      	b.n	8004b2c <LoopCopyDataInit>

08004b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b2a:	3304      	adds	r3, #4

08004b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b30:	d3f9      	bcc.n	8004b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b32:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b34:	4c0b      	ldr	r4, [pc, #44]	; (8004b64 <LoopForever+0x16>)
  movs r3, #0
 8004b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b38:	e001      	b.n	8004b3e <LoopFillZerobss>

08004b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b3c:	3204      	adds	r2, #4

08004b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b40:	d3fb      	bcc.n	8004b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b42:	f7ff ffe3 	bl	8004b0c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004b46:	f004 f989 	bl	8008e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b4a:	f7fe f905 	bl	8002d58 <main>

08004b4e <LoopForever>:

LoopForever:
    b LoopForever
 8004b4e:	e7fe      	b.n	8004b4e <LoopForever>
  ldr   r0, =_estack
 8004b50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b58:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004b5c:	0800e824 	.word	0x0800e824
  ldr r2, =_sbss
 8004b60:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004b64:	20000624 	.word	0x20000624

08004b68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b68:	e7fe      	b.n	8004b68 <ADC1_IRQHandler>
	...

08004b6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_Init+0x24>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_Init+0x24>)
 8004b76:	2110      	movs	r1, #16
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	f000 f809 	bl	8004b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b82:	f7ff fcb1 	bl	80044e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	40022000 	.word	0x40022000

08004b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_InitTick+0x5c>)
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <HAL_InitTick+0x60>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	23fa      	movs	r3, #250	; 0xfa
 8004ba8:	0098      	lsls	r0, r3, #2
 8004baa:	f7fb fad3 	bl	8000154 <__udivsi3>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	0020      	movs	r0, r4
 8004bb4:	f7fb face 	bl	8000154 <__udivsi3>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 f92f 	bl	8004e1e <HAL_SYSTICK_Config>
 8004bc0:	1e03      	subs	r3, r0, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e00f      	b.n	8004be8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d80b      	bhi.n	8004be6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	425b      	negs	r3, r3
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f8fc 	bl	8004dd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_InitTick+0x64>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b003      	add	sp, #12
 8004bee:	bd90      	pop	{r4, r7, pc}
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20000008 	.word	0x20000008
 8004bf8:	20000004 	.word	0x20000004

08004bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_IncTick+0x1c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	001a      	movs	r2, r3
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_IncTick+0x20>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	18d2      	adds	r2, r2, r3
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_IncTick+0x20>)
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	20000008 	.word	0x20000008
 8004c1c:	20000610 	.word	0x20000610

08004c20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <HAL_GetTick+0x10>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	20000610 	.word	0x20000610

08004c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff fff0 	bl	8004c20 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	d005      	beq.n	8004c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_Delay+0x44>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	001a      	movs	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	f7ff ffe0 	bl	8004c20 <HAL_GetTick>
 8004c60:	0002      	movs	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d8f7      	bhi.n	8004c5c <HAL_Delay+0x28>
  {
  }
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	20000008 	.word	0x20000008

08004c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	0002      	movs	r2, r0
 8004c84:	1dfb      	adds	r3, r7, #7
 8004c86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c88:	1dfb      	adds	r3, r7, #7
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c8e:	d809      	bhi.n	8004ca4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	001a      	movs	r2, r3
 8004c96:	231f      	movs	r3, #31
 8004c98:	401a      	ands	r2, r3
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <__NVIC_EnableIRQ+0x30>)
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4091      	lsls	r1, r2
 8004ca0:	000a      	movs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
  }
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	e000e100 	.word	0xe000e100

08004cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	1dfb      	adds	r3, r7, #7
 8004cbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc4:	d828      	bhi.n	8004d18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <__NVIC_SetPriority+0xd4>)
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	33c0      	adds	r3, #192	; 0xc0
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	589b      	ldr	r3, [r3, r2]
 8004cd6:	1dfa      	adds	r2, r7, #7
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	0011      	movs	r1, r2
 8004cdc:	2203      	movs	r2, #3
 8004cde:	400a      	ands	r2, r1
 8004ce0:	00d2      	lsls	r2, r2, #3
 8004ce2:	21ff      	movs	r1, #255	; 0xff
 8004ce4:	4091      	lsls	r1, r2
 8004ce6:	000a      	movs	r2, r1
 8004ce8:	43d2      	mvns	r2, r2
 8004cea:	401a      	ands	r2, r3
 8004cec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	019b      	lsls	r3, r3, #6
 8004cf2:	22ff      	movs	r2, #255	; 0xff
 8004cf4:	401a      	ands	r2, r3
 8004cf6:	1dfb      	adds	r3, r7, #7
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	4003      	ands	r3, r0
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d04:	481f      	ldr	r0, [pc, #124]	; (8004d84 <__NVIC_SetPriority+0xd4>)
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	33c0      	adds	r3, #192	; 0xc0
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d16:	e031      	b.n	8004d7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <__NVIC_SetPriority+0xd8>)
 8004d1a:	1dfb      	adds	r3, r7, #7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	0019      	movs	r1, r3
 8004d20:	230f      	movs	r3, #15
 8004d22:	400b      	ands	r3, r1
 8004d24:	3b08      	subs	r3, #8
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	3306      	adds	r3, #6
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	18d3      	adds	r3, r2, r3
 8004d2e:	3304      	adds	r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	1dfa      	adds	r2, r7, #7
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	0011      	movs	r1, r2
 8004d38:	2203      	movs	r2, #3
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	00d2      	lsls	r2, r2, #3
 8004d3e:	21ff      	movs	r1, #255	; 0xff
 8004d40:	4091      	lsls	r1, r2
 8004d42:	000a      	movs	r2, r1
 8004d44:	43d2      	mvns	r2, r2
 8004d46:	401a      	ands	r2, r3
 8004d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	019b      	lsls	r3, r3, #6
 8004d4e:	22ff      	movs	r2, #255	; 0xff
 8004d50:	401a      	ands	r2, r3
 8004d52:	1dfb      	adds	r3, r7, #7
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	0018      	movs	r0, r3
 8004d58:	2303      	movs	r3, #3
 8004d5a:	4003      	ands	r3, r0
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <__NVIC_SetPriority+0xd8>)
 8004d62:	1dfb      	adds	r3, r7, #7
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	001c      	movs	r4, r3
 8004d68:	230f      	movs	r3, #15
 8004d6a:	4023      	ands	r3, r4
 8004d6c:	3b08      	subs	r3, #8
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	430a      	orrs	r2, r1
 8004d72:	3306      	adds	r3, #6
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	18c3      	adds	r3, r0, r3
 8004d78:	3304      	adds	r3, #4
 8004d7a:	601a      	str	r2, [r3, #0]
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b003      	add	sp, #12
 8004d82:	bd90      	pop	{r4, r7, pc}
 8004d84:	e000e100 	.word	0xe000e100
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	045b      	lsls	r3, r3, #17
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d301      	bcc.n	8004da4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004da0:	2301      	movs	r3, #1
 8004da2:	e010      	b.n	8004dc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <SysTick_Config+0x44>)
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	3a01      	subs	r2, #1
 8004daa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dac:	2301      	movs	r3, #1
 8004dae:	425b      	negs	r3, r3
 8004db0:	2103      	movs	r1, #3
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7ff ff7c 	bl	8004cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <SysTick_Config+0x44>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <SysTick_Config+0x44>)
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	e000e010 	.word	0xe000e010

08004dd4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	210f      	movs	r1, #15
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	1c02      	adds	r2, r0, #0
 8004de4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	0011      	movs	r1, r2
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7ff ff5d 	bl	8004cb0 <__NVIC_SetPriority>
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b004      	add	sp, #16
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	0002      	movs	r2, r0
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0a:	1dfb      	adds	r3, r7, #7
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff ff33 	bl	8004c7c <__NVIC_EnableIRQ>
}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b002      	add	sp, #8
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7ff ffaf 	bl	8004d8c <SysTick_Config>
 8004e2e:	0003      	movs	r3, r0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e036      	b.n	8004ebc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2221      	movs	r2, #33	; 0x21
 8004e52:	2102      	movs	r1, #2
 8004e54:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <HAL_DMA_Init+0x8c>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f9c4 	bl	800522c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	2101      	movs	r1, #1
 8004eb0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}  
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	ffffc00f 	.word	0xffffc00f

08004ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2317      	movs	r3, #23
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	5c9b      	ldrb	r3, [r3, r2]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_DMA_Start_IT+0x24>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e04f      	b.n	8004f8c <HAL_DMA_Start_IT+0xc4>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2221      	movs	r2, #33	; 0x21
 8004ef8:	5c9b      	ldrb	r3, [r3, r2]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d13a      	bne.n	8004f76 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	2102      	movs	r1, #2
 8004f06:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	438a      	bics	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f954 	bl	80051d2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	210e      	movs	r1, #14
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e00f      	b.n	8004f64 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	210a      	movs	r1, #10
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2104      	movs	r1, #4
 8004f60:	438a      	bics	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e007      	b.n	8004f86 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004f7e:	2317      	movs	r3, #23
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2202      	movs	r2, #2
 8004f84:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004f86:	2317      	movs	r3, #23
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
} 
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b006      	add	sp, #24
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2221      	movs	r2, #33	; 0x21
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d008      	beq.n	8004fba <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2204      	movs	r2, #4
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e020      	b.n	8004ffc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	210e      	movs	r1, #14
 8004fc6:	438a      	bics	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	438a      	bics	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4091      	lsls	r1, r2
 8004fe6:	000a      	movs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b002      	add	sp, #8
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	210f      	movs	r1, #15
 800500e:	187b      	adds	r3, r7, r1
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2221      	movs	r2, #33	; 0x21
 8005018:	5c9b      	ldrb	r3, [r3, r2]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d006      	beq.n	800502e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2204      	movs	r2, #4
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005026:	187b      	adds	r3, r7, r1
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e028      	b.n	8005080 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	210e      	movs	r1, #14
 800503a:	438a      	bics	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	438a      	bics	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	2101      	movs	r1, #1
 8005058:	4091      	lsls	r1, r2
 800505a:	000a      	movs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2221      	movs	r2, #33	; 0x21
 8005062:	2101      	movs	r1, #1
 8005064:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	2100      	movs	r1, #0
 800506c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	0010      	movs	r0, r2
 800507e:	4798      	blx	r3
    } 
  }
  return status;
 8005080:	230f      	movs	r3, #15
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	781b      	ldrb	r3, [r3, #0]
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b004      	add	sp, #16
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2204      	movs	r2, #4
 80050ac:	409a      	lsls	r2, r3
 80050ae:	0013      	movs	r3, r2
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4013      	ands	r3, r2
 80050b4:	d024      	beq.n	8005100 <HAL_DMA_IRQHandler+0x72>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2204      	movs	r2, #4
 80050ba:	4013      	ands	r3, r2
 80050bc:	d020      	beq.n	8005100 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2220      	movs	r2, #32
 80050c6:	4013      	ands	r3, r2
 80050c8:	d107      	bne.n	80050da <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2104      	movs	r1, #4
 80050d6:	438a      	bics	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2104      	movs	r1, #4
 80050e4:	4091      	lsls	r1, r2
 80050e6:	000a      	movs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d100      	bne.n	80050f4 <HAL_DMA_IRQHandler+0x66>
 80050f2:	e06a      	b.n	80051ca <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	0010      	movs	r0, r2
 80050fc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80050fe:	e064      	b.n	80051ca <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	2202      	movs	r2, #2
 8005106:	409a      	lsls	r2, r3
 8005108:	0013      	movs	r3, r2
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4013      	ands	r3, r2
 800510e:	d02b      	beq.n	8005168 <HAL_DMA_IRQHandler+0xda>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2202      	movs	r2, #2
 8005114:	4013      	ands	r3, r2
 8005116:	d027      	beq.n	8005168 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2220      	movs	r2, #32
 8005120:	4013      	ands	r3, r2
 8005122:	d10b      	bne.n	800513c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	210a      	movs	r1, #10
 8005130:	438a      	bics	r2, r1
 8005132:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2221      	movs	r2, #33	; 0x21
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	2102      	movs	r1, #2
 8005146:	4091      	lsls	r1, r2
 8005148:	000a      	movs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d036      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	0010      	movs	r0, r2
 8005164:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005166:	e030      	b.n	80051ca <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	2208      	movs	r2, #8
 800516e:	409a      	lsls	r2, r3
 8005170:	0013      	movs	r3, r2
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4013      	ands	r3, r2
 8005176:	d028      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13c>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2208      	movs	r2, #8
 800517c:	4013      	ands	r3, r2
 800517e:	d024      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	210e      	movs	r1, #14
 800518c:	438a      	bics	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	2101      	movs	r1, #1
 800519a:	4091      	lsls	r1, r2
 800519c:	000a      	movs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2221      	movs	r2, #33	; 0x21
 80051aa:	2101      	movs	r1, #1
 80051ac:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	2100      	movs	r1, #0
 80051b4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	0010      	movs	r0, r2
 80051c6:	4798      	blx	r3
    }
   }
}  
 80051c8:	e7ff      	b.n	80051ca <HAL_DMA_IRQHandler+0x13c>
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b004      	add	sp, #16
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	2101      	movs	r1, #1
 80051ea:	4091      	lsls	r1, r2
 80051ec:	000a      	movs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d108      	bne.n	8005212 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005210:	e007      	b.n	8005222 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <DMA_CalcBaseAndBitshift+0x30>)
 800523a:	4694      	mov	ip, r2
 800523c:	4463      	add	r3, ip
 800523e:	2114      	movs	r1, #20
 8005240:	0018      	movs	r0, r3
 8005242:	f7fa ff87 	bl	8000154 <__udivsi3>
 8005246:	0003      	movs	r3, r0
 8005248:	009a      	lsls	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a03      	ldr	r2, [pc, #12]	; (8005260 <DMA_CalcBaseAndBitshift+0x34>)
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}
 800525c:	bffdfff8 	.word	0xbffdfff8
 8005260:	40020000 	.word	0x40020000

08005264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005272:	e14f      	b.n	8005514 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2101      	movs	r1, #1
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4091      	lsls	r1, r2
 800527e:	000a      	movs	r2, r1
 8005280:	4013      	ands	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d100      	bne.n	800528c <HAL_GPIO_Init+0x28>
 800528a:	e140      	b.n	800550e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2203      	movs	r2, #3
 8005292:	4013      	ands	r3, r2
 8005294:	2b01      	cmp	r3, #1
 8005296:	d005      	beq.n	80052a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2203      	movs	r2, #3
 800529e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d130      	bne.n	8005306 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2203      	movs	r2, #3
 80052b0:	409a      	lsls	r2, r3
 80052b2:	0013      	movs	r3, r2
 80052b4:	43da      	mvns	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	409a      	lsls	r2, r3
 80052c6:	0013      	movs	r3, r2
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052da:	2201      	movs	r2, #1
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	409a      	lsls	r2, r3
 80052e0:	0013      	movs	r3, r2
 80052e2:	43da      	mvns	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	091b      	lsrs	r3, r3, #4
 80052f0:	2201      	movs	r2, #1
 80052f2:	401a      	ands	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	409a      	lsls	r2, r3
 80052f8:	0013      	movs	r3, r2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2203      	movs	r2, #3
 800530c:	4013      	ands	r3, r2
 800530e:	2b03      	cmp	r3, #3
 8005310:	d017      	beq.n	8005342 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2203      	movs	r2, #3
 800531e:	409a      	lsls	r2, r3
 8005320:	0013      	movs	r3, r2
 8005322:	43da      	mvns	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4013      	ands	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	409a      	lsls	r2, r3
 8005334:	0013      	movs	r3, r2
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2203      	movs	r2, #3
 8005348:	4013      	ands	r3, r2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d123      	bne.n	8005396 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	08da      	lsrs	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3208      	adds	r2, #8
 8005356:	0092      	lsls	r2, r2, #2
 8005358:	58d3      	ldr	r3, [r2, r3]
 800535a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2207      	movs	r2, #7
 8005360:	4013      	ands	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	220f      	movs	r2, #15
 8005366:	409a      	lsls	r2, r3
 8005368:	0013      	movs	r3, r2
 800536a:	43da      	mvns	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2107      	movs	r1, #7
 800537a:	400b      	ands	r3, r1
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	409a      	lsls	r2, r3
 8005380:	0013      	movs	r3, r2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	08da      	lsrs	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3208      	adds	r2, #8
 8005390:	0092      	lsls	r2, r2, #2
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	2203      	movs	r2, #3
 80053a2:	409a      	lsls	r2, r3
 80053a4:	0013      	movs	r3, r2
 80053a6:	43da      	mvns	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4013      	ands	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2203      	movs	r2, #3
 80053b4:	401a      	ands	r2, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	409a      	lsls	r2, r3
 80053bc:	0013      	movs	r3, r2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	4013      	ands	r3, r2
 80053d4:	d100      	bne.n	80053d8 <HAL_GPIO_Init+0x174>
 80053d6:	e09a      	b.n	800550e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d8:	4b54      	ldr	r3, [pc, #336]	; (800552c <HAL_GPIO_Init+0x2c8>)
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	4b53      	ldr	r3, [pc, #332]	; (800552c <HAL_GPIO_Init+0x2c8>)
 80053de:	2101      	movs	r1, #1
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
 80053e4:	4b51      	ldr	r3, [pc, #324]	; (800552c <HAL_GPIO_Init+0x2c8>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2201      	movs	r2, #1
 80053ea:	4013      	ands	r3, r2
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053f0:	4a4f      	ldr	r2, [pc, #316]	; (8005530 <HAL_GPIO_Init+0x2cc>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	3302      	adds	r3, #2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	589b      	ldr	r3, [r3, r2]
 80053fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2203      	movs	r2, #3
 8005402:	4013      	ands	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	220f      	movs	r2, #15
 8005408:	409a      	lsls	r2, r3
 800540a:	0013      	movs	r3, r2
 800540c:	43da      	mvns	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4013      	ands	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	2390      	movs	r3, #144	; 0x90
 8005418:	05db      	lsls	r3, r3, #23
 800541a:	429a      	cmp	r2, r3
 800541c:	d013      	beq.n	8005446 <HAL_GPIO_Init+0x1e2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a44      	ldr	r2, [pc, #272]	; (8005534 <HAL_GPIO_Init+0x2d0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00d      	beq.n	8005442 <HAL_GPIO_Init+0x1de>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a43      	ldr	r2, [pc, #268]	; (8005538 <HAL_GPIO_Init+0x2d4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <HAL_GPIO_Init+0x1da>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a42      	ldr	r2, [pc, #264]	; (800553c <HAL_GPIO_Init+0x2d8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_GPIO_Init+0x1d6>
 8005436:	2303      	movs	r3, #3
 8005438:	e006      	b.n	8005448 <HAL_GPIO_Init+0x1e4>
 800543a:	2305      	movs	r3, #5
 800543c:	e004      	b.n	8005448 <HAL_GPIO_Init+0x1e4>
 800543e:	2302      	movs	r3, #2
 8005440:	e002      	b.n	8005448 <HAL_GPIO_Init+0x1e4>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <HAL_GPIO_Init+0x1e4>
 8005446:	2300      	movs	r3, #0
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	2103      	movs	r1, #3
 800544c:	400a      	ands	r2, r1
 800544e:	0092      	lsls	r2, r2, #2
 8005450:	4093      	lsls	r3, r2
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005458:	4935      	ldr	r1, [pc, #212]	; (8005530 <HAL_GPIO_Init+0x2cc>)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	089b      	lsrs	r3, r3, #2
 800545e:	3302      	adds	r3, #2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005466:	4b36      	ldr	r3, [pc, #216]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	43da      	mvns	r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	4013      	ands	r3, r2
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800548a:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005490:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	43da      	mvns	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4013      	ands	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	029b      	lsls	r3, r3, #10
 80054a8:	4013      	ands	r3, r2
 80054aa:	d003      	beq.n	80054b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054b4:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ba:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4013      	ands	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	035b      	lsls	r3, r3, #13
 80054d2:	4013      	ands	r3, r2
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80054e4:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	43da      	mvns	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	039b      	lsls	r3, r3, #14
 80054fc:	4013      	ands	r3, r2
 80054fe:	d003      	beq.n	8005508 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <HAL_GPIO_Init+0x2dc>)
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3301      	adds	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	40da      	lsrs	r2, r3
 800551c:	1e13      	subs	r3, r2, #0
 800551e:	d000      	beq.n	8005522 <HAL_GPIO_Init+0x2be>
 8005520:	e6a8      	b.n	8005274 <HAL_GPIO_Init+0x10>
  } 
}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b006      	add	sp, #24
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	40010000 	.word	0x40010000
 8005534:	48000400 	.word	0x48000400
 8005538:	48000800 	.word	0x48000800
 800553c:	48000c00 	.word	0x48000c00
 8005540:	40010400 	.word	0x40010400

08005544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	000a      	movs	r2, r1
 800554e:	1cbb      	adds	r3, r7, #2
 8005550:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	1cba      	adds	r2, r7, #2
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	4013      	ands	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800555e:	230f      	movs	r3, #15
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e003      	b.n	8005570 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005568:	230f      	movs	r3, #15
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005570:	230f      	movs	r3, #15
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	781b      	ldrb	r3, [r3, #0]
  }
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	0008      	movs	r0, r1
 8005588:	0011      	movs	r1, r2
 800558a:	1cbb      	adds	r3, r7, #2
 800558c:	1c02      	adds	r2, r0, #0
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	1c7b      	adds	r3, r7, #1
 8005592:	1c0a      	adds	r2, r1, #0
 8005594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005596:	1c7b      	adds	r3, r7, #1
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800559e:	1cbb      	adds	r3, r7, #2
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055a6:	e003      	b.n	80055b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055a8:	1cbb      	adds	r3, r7, #2
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e305      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2201      	movs	r2, #1
 80055d0:	4013      	ands	r3, r2
 80055d2:	d100      	bne.n	80055d6 <HAL_RCC_OscConfig+0x1e>
 80055d4:	e08d      	b.n	80056f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055d6:	4bc5      	ldr	r3, [pc, #788]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	220c      	movs	r2, #12
 80055dc:	4013      	ands	r3, r2
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d00e      	beq.n	8005600 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055e2:	4bc2      	ldr	r3, [pc, #776]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	220c      	movs	r2, #12
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d116      	bne.n	800561c <HAL_RCC_OscConfig+0x64>
 80055ee:	4bbf      	ldr	r3, [pc, #764]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	23c0      	movs	r3, #192	; 0xc0
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	401a      	ands	r2, r3
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	025b      	lsls	r3, r3, #9
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d10d      	bne.n	800561c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	4bba      	ldr	r3, [pc, #744]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	029b      	lsls	r3, r3, #10
 8005608:	4013      	ands	r3, r2
 800560a:	d100      	bne.n	800560e <HAL_RCC_OscConfig+0x56>
 800560c:	e070      	b.n	80056f0 <HAL_RCC_OscConfig+0x138>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d000      	beq.n	8005618 <HAL_RCC_OscConfig+0x60>
 8005616:	e06b      	b.n	80056f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e2dc      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d107      	bne.n	8005634 <HAL_RCC_OscConfig+0x7c>
 8005624:	4bb1      	ldr	r3, [pc, #708]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4bb0      	ldr	r3, [pc, #704]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800562a:	2180      	movs	r1, #128	; 0x80
 800562c:	0249      	lsls	r1, r1, #9
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e02f      	b.n	8005694 <HAL_RCC_OscConfig+0xdc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <HAL_RCC_OscConfig+0x9e>
 800563c:	4bab      	ldr	r3, [pc, #684]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4baa      	ldr	r3, [pc, #680]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005642:	49ab      	ldr	r1, [pc, #684]	; (80058f0 <HAL_RCC_OscConfig+0x338>)
 8005644:	400a      	ands	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	4ba8      	ldr	r3, [pc, #672]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4ba7      	ldr	r3, [pc, #668]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800564e:	49a9      	ldr	r1, [pc, #676]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 8005650:	400a      	ands	r2, r1
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e01e      	b.n	8005694 <HAL_RCC_OscConfig+0xdc>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b05      	cmp	r3, #5
 800565c:	d10e      	bne.n	800567c <HAL_RCC_OscConfig+0xc4>
 800565e:	4ba3      	ldr	r3, [pc, #652]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4ba2      	ldr	r3, [pc, #648]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	02c9      	lsls	r1, r1, #11
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	4b9f      	ldr	r3, [pc, #636]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b9e      	ldr	r3, [pc, #632]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	0249      	lsls	r1, r1, #9
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0xdc>
 800567c:	4b9b      	ldr	r3, [pc, #620]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b9a      	ldr	r3, [pc, #616]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005682:	499b      	ldr	r1, [pc, #620]	; (80058f0 <HAL_RCC_OscConfig+0x338>)
 8005684:	400a      	ands	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	4b98      	ldr	r3, [pc, #608]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b97      	ldr	r3, [pc, #604]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800568e:	4999      	ldr	r1, [pc, #612]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 8005690:	400a      	ands	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d014      	beq.n	80056c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569c:	f7ff fac0 	bl	8004c20 <HAL_GetTick>
 80056a0:	0003      	movs	r3, r0
 80056a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a6:	f7ff fabb 	bl	8004c20 <HAL_GetTick>
 80056aa:	0002      	movs	r2, r0
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b64      	cmp	r3, #100	; 0x64
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e28e      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b8:	4b8c      	ldr	r3, [pc, #560]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	4013      	ands	r3, r2
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0xee>
 80056c4:	e015      	b.n	80056f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c6:	f7ff faab 	bl	8004c20 <HAL_GetTick>
 80056ca:	0003      	movs	r3, r0
 80056cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d0:	f7ff faa6 	bl	8004c20 <HAL_GetTick>
 80056d4:	0002      	movs	r2, r0
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e279      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e2:	4b82      	ldr	r3, [pc, #520]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	4013      	ands	r3, r2
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x118>
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2202      	movs	r2, #2
 80056f8:	4013      	ands	r3, r2
 80056fa:	d100      	bne.n	80056fe <HAL_RCC_OscConfig+0x146>
 80056fc:	e06c      	b.n	80057d8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80056fe:	4b7b      	ldr	r3, [pc, #492]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	220c      	movs	r2, #12
 8005704:	4013      	ands	r3, r2
 8005706:	d00e      	beq.n	8005726 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005708:	4b78      	ldr	r3, [pc, #480]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	220c      	movs	r2, #12
 800570e:	4013      	ands	r3, r2
 8005710:	2b08      	cmp	r3, #8
 8005712:	d11f      	bne.n	8005754 <HAL_RCC_OscConfig+0x19c>
 8005714:	4b75      	ldr	r3, [pc, #468]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	23c0      	movs	r3, #192	; 0xc0
 800571a:	025b      	lsls	r3, r3, #9
 800571c:	401a      	ands	r2, r3
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	429a      	cmp	r2, r3
 8005724:	d116      	bne.n	8005754 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005726:	4b71      	ldr	r3, [pc, #452]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2202      	movs	r2, #2
 800572c:	4013      	ands	r3, r2
 800572e:	d005      	beq.n	800573c <HAL_RCC_OscConfig+0x184>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e24c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573c:	4b6b      	ldr	r3, [pc, #428]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	22f8      	movs	r2, #248	; 0xf8
 8005742:	4393      	bics	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00da      	lsls	r2, r3, #3
 800574c:	4b67      	ldr	r3, [pc, #412]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005752:	e041      	b.n	80057d8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d024      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800575c:	4b63      	ldr	r3, [pc, #396]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b62      	ldr	r3, [pc, #392]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005762:	2101      	movs	r1, #1
 8005764:	430a      	orrs	r2, r1
 8005766:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7ff fa5a 	bl	8004c20 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005772:	f7ff fa55 	bl	8004c20 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e228      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	4b59      	ldr	r3, [pc, #356]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	d0f1      	beq.n	8005772 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b57      	ldr	r3, [pc, #348]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	22f8      	movs	r2, #248	; 0xf8
 8005794:	4393      	bics	r3, r2
 8005796:	0019      	movs	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	00da      	lsls	r2, r3, #3
 800579e:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e018      	b.n	80057d8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a6:	4b51      	ldr	r3, [pc, #324]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80057ac:	2101      	movs	r1, #1
 80057ae:	438a      	bics	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7ff fa35 	bl	8004c20 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057bc:	f7ff fa30 	bl	8004c20 <HAL_GetTick>
 80057c0:	0002      	movs	r2, r0
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e203      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ce:	4b47      	ldr	r3, [pc, #284]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2202      	movs	r2, #2
 80057d4:	4013      	ands	r3, r2
 80057d6:	d1f1      	bne.n	80057bc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2208      	movs	r2, #8
 80057de:	4013      	ands	r3, r2
 80057e0:	d036      	beq.n	8005850 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d019      	beq.n	800581e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ea:	4b40      	ldr	r3, [pc, #256]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80057ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ee:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80057f0:	2101      	movs	r1, #1
 80057f2:	430a      	orrs	r2, r1
 80057f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f6:	f7ff fa13 	bl	8004c20 <HAL_GetTick>
 80057fa:	0003      	movs	r3, r0
 80057fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005800:	f7ff fa0e 	bl	8004c20 <HAL_GetTick>
 8005804:	0002      	movs	r2, r0
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e1e1      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2202      	movs	r2, #2
 8005818:	4013      	ands	r3, r2
 800581a:	d0f1      	beq.n	8005800 <HAL_RCC_OscConfig+0x248>
 800581c:	e018      	b.n	8005850 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581e:	4b33      	ldr	r3, [pc, #204]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005822:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005824:	2101      	movs	r1, #1
 8005826:	438a      	bics	r2, r1
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582a:	f7ff f9f9 	bl	8004c20 <HAL_GetTick>
 800582e:	0003      	movs	r3, r0
 8005830:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005834:	f7ff f9f4 	bl	8004c20 <HAL_GetTick>
 8005838:	0002      	movs	r2, r0
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e1c7      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005846:	4b29      	ldr	r3, [pc, #164]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2202      	movs	r2, #2
 800584c:	4013      	ands	r3, r2
 800584e:	d1f1      	bne.n	8005834 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2204      	movs	r2, #4
 8005856:	4013      	ands	r3, r2
 8005858:	d100      	bne.n	800585c <HAL_RCC_OscConfig+0x2a4>
 800585a:	e0b5      	b.n	80059c8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585c:	201f      	movs	r0, #31
 800585e:	183b      	adds	r3, r7, r0
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	055b      	lsls	r3, r3, #21
 800586c:	4013      	ands	r3, r2
 800586e:	d110      	bne.n	8005892 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	0549      	lsls	r1, r1, #21
 800587a:	430a      	orrs	r2, r1
 800587c:	61da      	str	r2, [r3, #28]
 800587e:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	055b      	lsls	r3, r3, #21
 8005886:	4013      	ands	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800588c:	183b      	adds	r3, r7, r0
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005892:	4b19      	ldr	r3, [pc, #100]	; (80058f8 <HAL_RCC_OscConfig+0x340>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4013      	ands	r3, r2
 800589c:	d11a      	bne.n	80058d4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <HAL_RCC_OscConfig+0x340>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_OscConfig+0x340>)
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	0049      	lsls	r1, r1, #1
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ac:	f7ff f9b8 	bl	8004c20 <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7ff f9b3 	bl	8004c20 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b64      	cmp	r3, #100	; 0x64
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e186      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x340>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4013      	ands	r3, r2
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d10f      	bne.n	80058fc <HAL_RCC_OscConfig+0x344>
 80058dc:	4b03      	ldr	r3, [pc, #12]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	4b02      	ldr	r3, [pc, #8]	; (80058ec <HAL_RCC_OscConfig+0x334>)
 80058e2:	2101      	movs	r1, #1
 80058e4:	430a      	orrs	r2, r1
 80058e6:	621a      	str	r2, [r3, #32]
 80058e8:	e036      	b.n	8005958 <HAL_RCC_OscConfig+0x3a0>
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	40021000 	.word	0x40021000
 80058f0:	fffeffff 	.word	0xfffeffff
 80058f4:	fffbffff 	.word	0xfffbffff
 80058f8:	40007000 	.word	0x40007000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10c      	bne.n	800591e <HAL_RCC_OscConfig+0x366>
 8005904:	4bb6      	ldr	r3, [pc, #728]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	4bb5      	ldr	r3, [pc, #724]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	621a      	str	r2, [r3, #32]
 8005910:	4bb3      	ldr	r3, [pc, #716]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	4bb2      	ldr	r3, [pc, #712]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005916:	2104      	movs	r1, #4
 8005918:	438a      	bics	r2, r1
 800591a:	621a      	str	r2, [r3, #32]
 800591c:	e01c      	b.n	8005958 <HAL_RCC_OscConfig+0x3a0>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b05      	cmp	r3, #5
 8005924:	d10c      	bne.n	8005940 <HAL_RCC_OscConfig+0x388>
 8005926:	4bae      	ldr	r3, [pc, #696]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	4bad      	ldr	r3, [pc, #692]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 800592c:	2104      	movs	r1, #4
 800592e:	430a      	orrs	r2, r1
 8005930:	621a      	str	r2, [r3, #32]
 8005932:	4bab      	ldr	r3, [pc, #684]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	4baa      	ldr	r3, [pc, #680]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005938:	2101      	movs	r1, #1
 800593a:	430a      	orrs	r2, r1
 800593c:	621a      	str	r2, [r3, #32]
 800593e:	e00b      	b.n	8005958 <HAL_RCC_OscConfig+0x3a0>
 8005940:	4ba7      	ldr	r3, [pc, #668]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	4ba6      	ldr	r3, [pc, #664]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005946:	2101      	movs	r1, #1
 8005948:	438a      	bics	r2, r1
 800594a:	621a      	str	r2, [r3, #32]
 800594c:	4ba4      	ldr	r3, [pc, #656]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	4ba3      	ldr	r3, [pc, #652]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005952:	2104      	movs	r1, #4
 8005954:	438a      	bics	r2, r1
 8005956:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d014      	beq.n	800598a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005960:	f7ff f95e 	bl	8004c20 <HAL_GetTick>
 8005964:	0003      	movs	r3, r0
 8005966:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005968:	e009      	b.n	800597e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7ff f959 	bl	8004c20 <HAL_GetTick>
 800596e:	0002      	movs	r2, r0
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	4a9b      	ldr	r2, [pc, #620]	; (8005be4 <HAL_RCC_OscConfig+0x62c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e12b      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597e:	4b98      	ldr	r3, [pc, #608]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	2202      	movs	r2, #2
 8005984:	4013      	ands	r3, r2
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x3b2>
 8005988:	e013      	b.n	80059b2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598a:	f7ff f949 	bl	8004c20 <HAL_GetTick>
 800598e:	0003      	movs	r3, r0
 8005990:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005992:	e009      	b.n	80059a8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7ff f944 	bl	8004c20 <HAL_GetTick>
 8005998:	0002      	movs	r2, r0
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	4a91      	ldr	r2, [pc, #580]	; (8005be4 <HAL_RCC_OscConfig+0x62c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e116      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a8:	4b8d      	ldr	r3, [pc, #564]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	2202      	movs	r2, #2
 80059ae:	4013      	ands	r3, r2
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059b2:	231f      	movs	r3, #31
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d105      	bne.n	80059c8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059bc:	4b88      	ldr	r3, [pc, #544]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	4b87      	ldr	r3, [pc, #540]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059c2:	4989      	ldr	r1, [pc, #548]	; (8005be8 <HAL_RCC_OscConfig+0x630>)
 80059c4:	400a      	ands	r2, r1
 80059c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	4013      	ands	r3, r2
 80059d0:	d063      	beq.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d12a      	bne.n	8005a30 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80059da:	4b81      	ldr	r3, [pc, #516]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059de:	4b80      	ldr	r3, [pc, #512]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059e0:	2104      	movs	r1, #4
 80059e2:	430a      	orrs	r2, r1
 80059e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80059e6:	4b7e      	ldr	r3, [pc, #504]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ea:	4b7d      	ldr	r3, [pc, #500]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 80059ec:	2101      	movs	r1, #1
 80059ee:	430a      	orrs	r2, r1
 80059f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f2:	f7ff f915 	bl	8004c20 <HAL_GetTick>
 80059f6:	0003      	movs	r3, r0
 80059f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80059fc:	f7ff f910 	bl	8004c20 <HAL_GetTick>
 8005a00:	0002      	movs	r2, r0
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e0e3      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a0e:	4b74      	ldr	r3, [pc, #464]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	2202      	movs	r2, #2
 8005a14:	4013      	ands	r3, r2
 8005a16:	d0f1      	beq.n	80059fc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a18:	4b71      	ldr	r3, [pc, #452]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	22f8      	movs	r2, #248	; 0xf8
 8005a1e:	4393      	bics	r3, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	4b6d      	ldr	r3, [pc, #436]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a2e:	e034      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	3305      	adds	r3, #5
 8005a36:	d111      	bne.n	8005a5c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005a38:	4b69      	ldr	r3, [pc, #420]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3c:	4b68      	ldr	r3, [pc, #416]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a3e:	2104      	movs	r1, #4
 8005a40:	438a      	bics	r2, r1
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a44:	4b66      	ldr	r3, [pc, #408]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	22f8      	movs	r2, #248	; 0xf8
 8005a4a:	4393      	bics	r3, r2
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	00da      	lsls	r2, r3, #3
 8005a54:	4b62      	ldr	r3, [pc, #392]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a56:	430a      	orrs	r2, r1
 8005a58:	635a      	str	r2, [r3, #52]	; 0x34
 8005a5a:	e01e      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a5c:	4b60      	ldr	r3, [pc, #384]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a60:	4b5f      	ldr	r3, [pc, #380]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a62:	2104      	movs	r1, #4
 8005a64:	430a      	orrs	r2, r1
 8005a66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005a68:	4b5d      	ldr	r3, [pc, #372]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6c:	4b5c      	ldr	r3, [pc, #368]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a6e:	2101      	movs	r1, #1
 8005a70:	438a      	bics	r2, r1
 8005a72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a74:	f7ff f8d4 	bl	8004c20 <HAL_GetTick>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005a7e:	f7ff f8cf 	bl	8004c20 <HAL_GetTick>
 8005a82:	0002      	movs	r2, r0
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0a2      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a90:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	2202      	movs	r2, #2
 8005a96:	4013      	ands	r3, r2
 8005a98:	d1f1      	bne.n	8005a7e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d100      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x4ec>
 8005aa2:	e097      	b.n	8005bd4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa4:	4b4e      	ldr	r3, [pc, #312]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	220c      	movs	r2, #12
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d100      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x4fa>
 8005ab0:	e06b      	b.n	8005b8a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d14c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aba:	4b49      	ldr	r3, [pc, #292]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005ac0:	494a      	ldr	r1, [pc, #296]	; (8005bec <HAL_RCC_OscConfig+0x634>)
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7ff f8ab 	bl	8004c20 <HAL_GetTick>
 8005aca:	0003      	movs	r3, r0
 8005acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7ff f8a6 	bl	8004c20 <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e079      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	049b      	lsls	r3, r3, #18
 8005aea:	4013      	ands	r3, r2
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aee:	4b3c      	ldr	r3, [pc, #240]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	220f      	movs	r2, #15
 8005af4:	4393      	bics	r3, r2
 8005af6:	0019      	movs	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005afe:	430a      	orrs	r2, r1
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4a3a      	ldr	r2, [pc, #232]	; (8005bf0 <HAL_RCC_OscConfig+0x638>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	431a      	orrs	r2, r3
 8005b16:	4b32      	ldr	r3, [pc, #200]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b1c:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4b2f      	ldr	r3, [pc, #188]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	0449      	lsls	r1, r1, #17
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2a:	f7ff f879 	bl	8004c20 <HAL_GetTick>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b34:	f7ff f874 	bl	8004c20 <HAL_GetTick>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e047      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b46:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	049b      	lsls	r3, r3, #18
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x57c>
 8005b52:	e03f      	b.n	8005bd4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b54:	4b22      	ldr	r3, [pc, #136]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b5a:	4924      	ldr	r1, [pc, #144]	; (8005bec <HAL_RCC_OscConfig+0x634>)
 8005b5c:	400a      	ands	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7ff f85e 	bl	8004c20 <HAL_GetTick>
 8005b64:	0003      	movs	r3, r0
 8005b66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6a:	f7ff f859 	bl	8004c20 <HAL_GetTick>
 8005b6e:	0002      	movs	r2, r0
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e02c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	049b      	lsls	r3, r3, #18
 8005b84:	4013      	ands	r3, r2
 8005b86:	d1f0      	bne.n	8005b6a <HAL_RCC_OscConfig+0x5b2>
 8005b88:	e024      	b.n	8005bd4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e01f      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_RCC_OscConfig+0x628>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	23c0      	movs	r3, #192	; 0xc0
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	401a      	ands	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	23f0      	movs	r3, #240	; 0xf0
 8005bc4:	039b      	lsls	r3, r3, #14
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b008      	add	sp, #32
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	40021000 	.word	0x40021000
 8005be4:	00001388 	.word	0x00001388
 8005be8:	efffffff 	.word	0xefffffff
 8005bec:	feffffff 	.word	0xfeffffff
 8005bf0:	ffc27fff 	.word	0xffc27fff

08005bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0b3      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c08:	4b5b      	ldr	r3, [pc, #364]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4013      	ands	r3, r2
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d911      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c16:	4b58      	ldr	r3, [pc, #352]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4393      	bics	r3, r2
 8005c1e:	0019      	movs	r1, r3
 8005c20:	4b55      	ldr	r3, [pc, #340]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c28:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	4013      	ands	r3, r2
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d001      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e09a      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	4013      	ands	r3, r2
 8005c42:	d015      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d006      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005c4e:	4b4b      	ldr	r3, [pc, #300]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	4b4a      	ldr	r3, [pc, #296]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005c54:	21e0      	movs	r1, #224	; 0xe0
 8005c56:	00c9      	lsls	r1, r1, #3
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	22f0      	movs	r2, #240	; 0xf0
 8005c62:	4393      	bics	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	4b44      	ldr	r3, [pc, #272]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2201      	movs	r2, #1
 8005c76:	4013      	ands	r3, r2
 8005c78:	d040      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	029b      	lsls	r3, r3, #10
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d114      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e06e      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9a:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	2380      	movs	r3, #128	; 0x80
 8005ca0:	049b      	lsls	r3, r3, #18
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e062      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005caa:	4b34      	ldr	r3, [pc, #208]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e05b      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cb8:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ccc:	f7fe ffa8 	bl	8004c20 <HAL_GetTick>
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd4:	e009      	b.n	8005cea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd6:	f7fe ffa3 	bl	8004c20 <HAL_GetTick>
 8005cda:	0002      	movs	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <HAL_RCC_ClockConfig+0x18c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e042      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	220c      	movs	r2, #12
 8005cf0:	401a      	ands	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1ec      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2201      	movs	r2, #1
 8005d02:	4013      	ands	r3, r2
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d211      	bcs.n	8005d2e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	4393      	bics	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1c:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <HAL_RCC_ClockConfig+0x184>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2201      	movs	r2, #1
 8005d22:	4013      	ands	r3, r2
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d001      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e020      	b.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2204      	movs	r2, #4
 8005d34:	4013      	ands	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a11      	ldr	r2, [pc, #68]	; (8005d84 <HAL_RCC_ClockConfig+0x190>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	0019      	movs	r1, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d4c:	f000 f820 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d50:	0001      	movs	r1, r0
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_RCC_ClockConfig+0x188>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	220f      	movs	r2, #15
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x194>)
 8005d5e:	5cd3      	ldrb	r3, [r2, r3]
 8005d60:	000a      	movs	r2, r1
 8005d62:	40da      	lsrs	r2, r3
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x198>)
 8005d66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005d68:	2003      	movs	r0, #3
 8005d6a:	f7fe ff13 	bl	8004b94 <HAL_InitTick>
  
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	0018      	movs	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b004      	add	sp, #16
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40022000 	.word	0x40022000
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	00001388 	.word	0x00001388
 8005d84:	fffff8ff 	.word	0xfffff8ff
 8005d88:	0800e338 	.word	0x0800e338
 8005d8c:	20000000 	.word	0x20000000

08005d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b08f      	sub	sp, #60	; 0x3c
 8005d94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005d96:	2314      	movs	r3, #20
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	4a2c      	ldr	r2, [pc, #176]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d9e:	c313      	stmia	r3!, {r0, r1, r4}
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005da4:	1d3b      	adds	r3, r7, #4
 8005da6:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005da8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005daa:	c313      	stmia	r3!, {r0, r1, r4}
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db4:	2300      	movs	r3, #0
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db8:	2300      	movs	r3, #0
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005dc4:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	220c      	movs	r2, #12
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d002      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0x4a>
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d003      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0x50>
 8005dd8:	e02f      	b.n	8005e3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dda:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dde:	e02f      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	0c9b      	lsrs	r3, r3, #18
 8005de4:	220f      	movs	r2, #15
 8005de6:	4013      	ands	r3, r2
 8005de8:	2214      	movs	r2, #20
 8005dea:	18ba      	adds	r2, r7, r2
 8005dec:	5cd3      	ldrb	r3, [r2, r3]
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005df0:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	220f      	movs	r2, #15
 8005df6:	4013      	ands	r3, r2
 8005df8:	1d3a      	adds	r2, r7, #4
 8005dfa:	5cd3      	ldrb	r3, [r2, r3]
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e00:	23c0      	movs	r3, #192	; 0xc0
 8005e02:	025b      	lsls	r3, r3, #9
 8005e04:	401a      	ands	r2, r3
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	025b      	lsls	r3, r3, #9
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d109      	bne.n	8005e22 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e10:	4811      	ldr	r0, [pc, #68]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e12:	f7fa f99f 	bl	8000154 <__udivsi3>
 8005e16:	0003      	movs	r3, r0
 8005e18:	001a      	movs	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	4353      	muls	r3, r2
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e24:	480c      	ldr	r0, [pc, #48]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e26:	f7fa f995 	bl	8000154 <__udivsi3>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	4353      	muls	r3, r2
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e38:	e002      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b00f      	add	sp, #60	; 0x3c
 8005e48:	bd90      	pop	{r4, r7, pc}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	0800e20c 	.word	0x0800e20c
 8005e50:	0800e21c 	.word	0x0800e21c
 8005e54:	40021000 	.word	0x40021000
 8005e58:	007a1200 	.word	0x007a1200

08005e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	20000000 	.word	0x20000000

08005e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005e74:	f7ff fff2 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005e78:	0001      	movs	r1, r0
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	2207      	movs	r2, #7
 8005e82:	4013      	ands	r3, r2
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e86:	5cd3      	ldrb	r3, [r2, r3]
 8005e88:	40d9      	lsrs	r1, r3
 8005e8a:	000b      	movs	r3, r1
}    
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	40021000 	.word	0x40021000
 8005e98:	0800e348 	.word	0x0800e348

08005e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	223d      	movs	r2, #61	; 0x3d
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	223c      	movs	r2, #60	; 0x3c
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7fe fb33 	bl	8004530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	223d      	movs	r2, #61	; 0x3d
 8005ece:	2102      	movs	r1, #2
 8005ed0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	0019      	movs	r1, r3
 8005edc:	0010      	movs	r0, r2
 8005ede:	f000 ffed 	bl	8006ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2246      	movs	r2, #70	; 0x46
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	223e      	movs	r2, #62	; 0x3e
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	223f      	movs	r2, #63	; 0x3f
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	2101      	movs	r1, #1
 8005f00:	5499      	strb	r1, [r3, r2]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2241      	movs	r2, #65	; 0x41
 8005f06:	2101      	movs	r1, #1
 8005f08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2242      	movs	r2, #66	; 0x42
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2243      	movs	r2, #67	; 0x43
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2244      	movs	r2, #68	; 0x44
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2245      	movs	r2, #69	; 0x45
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	223d      	movs	r2, #61	; 0x3d
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b002      	add	sp, #8
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e042      	b.n	8005fd4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	223d      	movs	r2, #61	; 0x3d
 8005f52:	5c9b      	ldrb	r3, [r3, r2]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d107      	bne.n	8005f6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	223c      	movs	r2, #60	; 0x3c
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 f839 	bl	8005fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	223d      	movs	r2, #61	; 0x3d
 8005f6e:	2102      	movs	r1, #2
 8005f70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	0010      	movs	r0, r2
 8005f7e:	f000 ff9d 	bl	8006ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2246      	movs	r2, #70	; 0x46
 8005f86:	2101      	movs	r1, #1
 8005f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	223e      	movs	r2, #62	; 0x3e
 8005f8e:	2101      	movs	r1, #1
 8005f90:	5499      	strb	r1, [r3, r2]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	223f      	movs	r2, #63	; 0x3f
 8005f96:	2101      	movs	r1, #1
 8005f98:	5499      	strb	r1, [r3, r2]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2240      	movs	r2, #64	; 0x40
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	5499      	strb	r1, [r3, r2]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2241      	movs	r2, #65	; 0x41
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2242      	movs	r2, #66	; 0x42
 8005fae:	2101      	movs	r1, #1
 8005fb0:	5499      	strb	r1, [r3, r2]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2243      	movs	r2, #67	; 0x43
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	5499      	strb	r1, [r3, r2]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2244      	movs	r2, #68	; 0x44
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	5499      	strb	r1, [r3, r2]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2245      	movs	r2, #69	; 0x45
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223d      	movs	r2, #61	; 0x3d
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b002      	add	sp, #8
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <HAL_TIM_PWM_Start+0x22>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	223e      	movs	r2, #62	; 0x3e
 8006000:	5c9b      	ldrb	r3, [r3, r2]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	4193      	sbcs	r3, r2
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e01f      	b.n	800604e <HAL_TIM_PWM_Start+0x62>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d108      	bne.n	8006026 <HAL_TIM_PWM_Start+0x3a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	223f      	movs	r2, #63	; 0x3f
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	4193      	sbcs	r3, r2
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e013      	b.n	800604e <HAL_TIM_PWM_Start+0x62>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d108      	bne.n	800603e <HAL_TIM_PWM_Start+0x52>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2240      	movs	r2, #64	; 0x40
 8006030:	5c9b      	ldrb	r3, [r3, r2]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	1e5a      	subs	r2, r3, #1
 8006038:	4193      	sbcs	r3, r2
 800603a:	b2db      	uxtb	r3, r3
 800603c:	e007      	b.n	800604e <HAL_TIM_PWM_Start+0x62>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2241      	movs	r2, #65	; 0x41
 8006042:	5c9b      	ldrb	r3, [r3, r2]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	4193      	sbcs	r3, r2
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e06e      	b.n	8006134 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0x7a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	223e      	movs	r2, #62	; 0x3e
 8006060:	2102      	movs	r1, #2
 8006062:	5499      	strb	r1, [r3, r2]
 8006064:	e013      	b.n	800608e <HAL_TIM_PWM_Start+0xa2>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0x8a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	223f      	movs	r2, #63	; 0x3f
 8006070:	2102      	movs	r1, #2
 8006072:	5499      	strb	r1, [r3, r2]
 8006074:	e00b      	b.n	800608e <HAL_TIM_PWM_Start+0xa2>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0x9a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	2102      	movs	r1, #2
 8006082:	5499      	strb	r1, [r3, r2]
 8006084:	e003      	b.n	800608e <HAL_TIM_PWM_Start+0xa2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2241      	movs	r2, #65	; 0x41
 800608a:	2102      	movs	r1, #2
 800608c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	0018      	movs	r0, r3
 8006098:	f001 fb3c 	bl	8007714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a26      	ldr	r2, [pc, #152]	; (800613c <HAL_TIM_PWM_Start+0x150>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_PWM_Start+0xd8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a25      	ldr	r2, [pc, #148]	; (8006140 <HAL_TIM_PWM_Start+0x154>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_PWM_Start+0xd8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a23      	ldr	r2, [pc, #140]	; (8006144 <HAL_TIM_PWM_Start+0x158>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_PWM_Start+0xd8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_TIM_PWM_Start+0x15c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d101      	bne.n	80060c8 <HAL_TIM_PWM_Start+0xdc>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <HAL_TIM_PWM_Start+0xde>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	0209      	lsls	r1, r1, #8
 80060dc:	430a      	orrs	r2, r1
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <HAL_TIM_PWM_Start+0x150>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_PWM_Start+0x112>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_TIM_PWM_Start+0x160>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_PWM_Start+0x112>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_TIM_PWM_Start+0x154>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2207      	movs	r2, #7
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b06      	cmp	r3, #6
 800610e:	d010      	beq.n	8006132 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2101      	movs	r1, #1
 800611c:	430a      	orrs	r2, r1
 800611e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006120:	e007      	b.n	8006132 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2101      	movs	r1, #1
 800612e:	430a      	orrs	r2, r1
 8006130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	b004      	add	sp, #16
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40012c00 	.word	0x40012c00
 8006140:	40014000 	.word	0x40014000
 8006144:	40014400 	.word	0x40014400
 8006148:	40014800 	.word	0x40014800
 800614c:	40000400 	.word	0x40000400

08006150 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800615a:	230f      	movs	r3, #15
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <HAL_TIM_PWM_Start_IT+0x2a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	223e      	movs	r2, #62	; 0x3e
 800616c:	5c9b      	ldrb	r3, [r3, r2]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	1e5a      	subs	r2, r3, #1
 8006174:	4193      	sbcs	r3, r2
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e01f      	b.n	80061ba <HAL_TIM_PWM_Start_IT+0x6a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d108      	bne.n	8006192 <HAL_TIM_PWM_Start_IT+0x42>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	223f      	movs	r2, #63	; 0x3f
 8006184:	5c9b      	ldrb	r3, [r3, r2]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	1e5a      	subs	r2, r3, #1
 800618c:	4193      	sbcs	r3, r2
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e013      	b.n	80061ba <HAL_TIM_PWM_Start_IT+0x6a>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d108      	bne.n	80061aa <HAL_TIM_PWM_Start_IT+0x5a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2240      	movs	r2, #64	; 0x40
 800619c:	5c9b      	ldrb	r3, [r3, r2]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	1e5a      	subs	r2, r3, #1
 80061a4:	4193      	sbcs	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e007      	b.n	80061ba <HAL_TIM_PWM_Start_IT+0x6a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2241      	movs	r2, #65	; 0x41
 80061ae:	5c9b      	ldrb	r3, [r3, r2]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	4193      	sbcs	r3, r2
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0b1      	b.n	8006326 <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start_IT+0x82>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	223e      	movs	r2, #62	; 0x3e
 80061cc:	2102      	movs	r1, #2
 80061ce:	5499      	strb	r1, [r3, r2]
 80061d0:	e013      	b.n	80061fa <HAL_TIM_PWM_Start_IT+0xaa>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start_IT+0x92>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	223f      	movs	r2, #63	; 0x3f
 80061dc:	2102      	movs	r1, #2
 80061de:	5499      	strb	r1, [r3, r2]
 80061e0:	e00b      	b.n	80061fa <HAL_TIM_PWM_Start_IT+0xaa>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start_IT+0xa2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2240      	movs	r2, #64	; 0x40
 80061ec:	2102      	movs	r1, #2
 80061ee:	5499      	strb	r1, [r3, r2]
 80061f0:	e003      	b.n	80061fa <HAL_TIM_PWM_Start_IT+0xaa>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2241      	movs	r2, #65	; 0x41
 80061f6:	2102      	movs	r1, #2
 80061f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b0c      	cmp	r3, #12
 80061fe:	d02a      	beq.n	8006256 <HAL_TIM_PWM_Start_IT+0x106>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d830      	bhi.n	8006268 <HAL_TIM_PWM_Start_IT+0x118>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d01b      	beq.n	8006244 <HAL_TIM_PWM_Start_IT+0xf4>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b08      	cmp	r3, #8
 8006210:	d82a      	bhi.n	8006268 <HAL_TIM_PWM_Start_IT+0x118>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_TIM_PWM_Start_IT+0xd0>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d009      	beq.n	8006232 <HAL_TIM_PWM_Start_IT+0xe2>
 800621e:	e023      	b.n	8006268 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2102      	movs	r1, #2
 800622c:	430a      	orrs	r2, r1
 800622e:	60da      	str	r2, [r3, #12]
      break;
 8006230:	e01f      	b.n	8006272 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2104      	movs	r1, #4
 800623e:	430a      	orrs	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
      break;
 8006242:	e016      	b.n	8006272 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2108      	movs	r1, #8
 8006250:	430a      	orrs	r2, r1
 8006252:	60da      	str	r2, [r3, #12]
      break;
 8006254:	e00d      	b.n	8006272 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2110      	movs	r1, #16
 8006262:	430a      	orrs	r2, r1
 8006264:	60da      	str	r2, [r3, #12]
      break;
 8006266:	e004      	b.n	8006272 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8006268:	230f      	movs	r3, #15
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
      break;
 8006270:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d151      	bne.n	8006320 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	2201      	movs	r2, #1
 8006284:	0018      	movs	r0, r3
 8006286:	f001 fa45 	bl	8007714 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a28      	ldr	r2, [pc, #160]	; (8006330 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_TIM_PWM_Start_IT+0x162>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a26      	ldr	r2, [pc, #152]	; (8006334 <HAL_TIM_PWM_Start_IT+0x1e4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIM_PWM_Start_IT+0x162>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a25      	ldr	r2, [pc, #148]	; (8006338 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIM_PWM_Start_IT+0x162>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a23      	ldr	r2, [pc, #140]	; (800633c <HAL_TIM_PWM_Start_IT+0x1ec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_PWM_Start_IT+0x166>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <HAL_TIM_PWM_Start_IT+0x168>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2180      	movs	r1, #128	; 0x80
 80062c8:	0209      	lsls	r1, r1, #8
 80062ca:	430a      	orrs	r2, r1
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a17      	ldr	r2, [pc, #92]	; (8006330 <HAL_TIM_PWM_Start_IT+0x1e0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x19c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x19c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <HAL_TIM_PWM_Start_IT+0x1e4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d111      	bne.n	8006310 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2207      	movs	r2, #7
 80062f4:	4013      	ands	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d010      	beq.n	8006320 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2101      	movs	r1, #1
 800630a:	430a      	orrs	r2, r1
 800630c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	e007      	b.n	8006320 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2101      	movs	r1, #1
 800631c:	430a      	orrs	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006320:	230f      	movs	r3, #15
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	781b      	ldrb	r3, [r3, #0]
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b004      	add	sp, #16
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800
 8006340:	40000400 	.word	0x40000400

08006344 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800634e:	230f      	movs	r3, #15
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d02a      	beq.n	80063b2 <HAL_TIM_PWM_Stop_IT+0x6e>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b0c      	cmp	r3, #12
 8006360:	d830      	bhi.n	80063c4 <HAL_TIM_PWM_Stop_IT+0x80>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d01b      	beq.n	80063a0 <HAL_TIM_PWM_Stop_IT+0x5c>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b08      	cmp	r3, #8
 800636c:	d82a      	bhi.n	80063c4 <HAL_TIM_PWM_Stop_IT+0x80>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_TIM_PWM_Stop_IT+0x38>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b04      	cmp	r3, #4
 8006378:	d009      	beq.n	800638e <HAL_TIM_PWM_Stop_IT+0x4a>
 800637a:	e023      	b.n	80063c4 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2102      	movs	r1, #2
 8006388:	438a      	bics	r2, r1
 800638a:	60da      	str	r2, [r3, #12]
      break;
 800638c:	e01f      	b.n	80063ce <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2104      	movs	r1, #4
 800639a:	438a      	bics	r2, r1
 800639c:	60da      	str	r2, [r3, #12]
      break;
 800639e:	e016      	b.n	80063ce <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2108      	movs	r1, #8
 80063ac:	438a      	bics	r2, r1
 80063ae:	60da      	str	r2, [r3, #12]
      break;
 80063b0:	e00d      	b.n	80063ce <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2110      	movs	r1, #16
 80063be:	438a      	bics	r2, r1
 80063c0:	60da      	str	r2, [r3, #12]
      break;
 80063c2:	e004      	b.n	80063ce <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80063c4:	230f      	movs	r3, #15
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
      break;
 80063cc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80063ce:	230f      	movs	r3, #15
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d000      	beq.n	80063da <HAL_TIM_PWM_Stop_IT+0x96>
 80063d8:	e063      	b.n	80064a2 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	2200      	movs	r2, #0
 80063e2:	0018      	movs	r0, r3
 80063e4:	f001 f996 	bl	8007714 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a30      	ldr	r2, [pc, #192]	; (80064b0 <HAL_TIM_PWM_Stop_IT+0x16c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00e      	beq.n	8006410 <HAL_TIM_PWM_Stop_IT+0xcc>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <HAL_TIM_PWM_Stop_IT+0x170>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d009      	beq.n	8006410 <HAL_TIM_PWM_Stop_IT+0xcc>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <HAL_TIM_PWM_Stop_IT+0x174>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_TIM_PWM_Stop_IT+0xcc>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <HAL_TIM_PWM_Stop_IT+0x178>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <HAL_TIM_PWM_Stop_IT+0xd0>
 8006410:	2301      	movs	r3, #1
 8006412:	e000      	b.n	8006416 <HAL_TIM_PWM_Stop_IT+0xd2>
 8006414:	2300      	movs	r3, #0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d013      	beq.n	8006442 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8006422:	4013      	ands	r3, r2
 8006424:	d10d      	bne.n	8006442 <HAL_TIM_PWM_Stop_IT+0xfe>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4a25      	ldr	r2, [pc, #148]	; (80064c4 <HAL_TIM_PWM_Stop_IT+0x180>)
 800642e:	4013      	ands	r3, r2
 8006430:	d107      	bne.n	8006442 <HAL_TIM_PWM_Stop_IT+0xfe>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4922      	ldr	r1, [pc, #136]	; (80064c8 <HAL_TIM_PWM_Stop_IT+0x184>)
 800643e:	400a      	ands	r2, r1
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_TIM_PWM_Stop_IT+0x17c>)
 800644a:	4013      	ands	r3, r2
 800644c:	d10d      	bne.n	800646a <HAL_TIM_PWM_Stop_IT+0x126>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <HAL_TIM_PWM_Stop_IT+0x180>)
 8006456:	4013      	ands	r3, r2
 8006458:	d107      	bne.n	800646a <HAL_TIM_PWM_Stop_IT+0x126>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2101      	movs	r1, #1
 8006466:	438a      	bics	r2, r1
 8006468:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_TIM_PWM_Stop_IT+0x136>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	223e      	movs	r2, #62	; 0x3e
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]
 8006478:	e013      	b.n	80064a2 <HAL_TIM_PWM_Stop_IT+0x15e>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d104      	bne.n	800648a <HAL_TIM_PWM_Stop_IT+0x146>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	223f      	movs	r2, #63	; 0x3f
 8006484:	2101      	movs	r1, #1
 8006486:	5499      	strb	r1, [r3, r2]
 8006488:	e00b      	b.n	80064a2 <HAL_TIM_PWM_Stop_IT+0x15e>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Stop_IT+0x156>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	2101      	movs	r1, #1
 8006496:	5499      	strb	r1, [r3, r2]
 8006498:	e003      	b.n	80064a2 <HAL_TIM_PWM_Stop_IT+0x15e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2241      	movs	r2, #65	; 0x41
 800649e:	2101      	movs	r1, #1
 80064a0:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80064a2:	230f      	movs	r3, #15
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	781b      	ldrb	r3, [r3, #0]
}
 80064a8:	0018      	movs	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b004      	add	sp, #16
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800
 80064c0:	00001111 	.word	0x00001111
 80064c4:	00000444 	.word	0x00000444
 80064c8:	ffff7fff 	.word	0xffff7fff

080064cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e042      	b.n	8006564 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	223d      	movs	r2, #61	; 0x3d
 80064e2:	5c9b      	ldrb	r3, [r3, r2]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	223c      	movs	r2, #60	; 0x3c
 80064ee:	2100      	movs	r1, #0
 80064f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f7fe f859 	bl	80045ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	223d      	movs	r2, #61	; 0x3d
 80064fe:	2102      	movs	r1, #2
 8006500:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3304      	adds	r3, #4
 800650a:	0019      	movs	r1, r3
 800650c:	0010      	movs	r0, r2
 800650e:	f000 fcd5 	bl	8006ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2246      	movs	r2, #70	; 0x46
 8006516:	2101      	movs	r1, #1
 8006518:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	223e      	movs	r2, #62	; 0x3e
 800651e:	2101      	movs	r1, #1
 8006520:	5499      	strb	r1, [r3, r2]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	223f      	movs	r2, #63	; 0x3f
 8006526:	2101      	movs	r1, #1
 8006528:	5499      	strb	r1, [r3, r2]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2240      	movs	r2, #64	; 0x40
 800652e:	2101      	movs	r1, #1
 8006530:	5499      	strb	r1, [r3, r2]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2241      	movs	r2, #65	; 0x41
 8006536:	2101      	movs	r1, #1
 8006538:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2242      	movs	r2, #66	; 0x42
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2243      	movs	r2, #67	; 0x43
 8006546:	2101      	movs	r1, #1
 8006548:	5499      	strb	r1, [r3, r2]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2244      	movs	r2, #68	; 0x44
 800654e:	2101      	movs	r1, #1
 8006550:	5499      	strb	r1, [r3, r2]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2245      	movs	r2, #69	; 0x45
 8006556:	2101      	movs	r1, #1
 8006558:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	223d      	movs	r2, #61	; 0x3d
 800655e:	2101      	movs	r1, #1
 8006560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	0018      	movs	r0, r3
 8006566:	46bd      	mov	sp, r7
 8006568:	b002      	add	sp, #8
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006576:	230f      	movs	r3, #15
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	2200      	movs	r2, #0
 800657c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_TIM_IC_Start_IT+0x22>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	223e      	movs	r2, #62	; 0x3e
 8006588:	5c9b      	ldrb	r3, [r3, r2]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e013      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0x4a>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d104      	bne.n	800659e <HAL_TIM_IC_Start_IT+0x32>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	223f      	movs	r2, #63	; 0x3f
 8006598:	5c9b      	ldrb	r3, [r3, r2]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	e00b      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0x4a>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_IC_Start_IT+0x42>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	5c9b      	ldrb	r3, [r3, r2]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e003      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0x4a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2241      	movs	r2, #65	; 0x41
 80065b2:	5c9b      	ldrb	r3, [r3, r2]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	220e      	movs	r2, #14
 80065b8:	18ba      	adds	r2, r7, r2
 80065ba:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_TIM_IC_Start_IT+0x60>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2242      	movs	r2, #66	; 0x42
 80065c6:	5c9b      	ldrb	r3, [r3, r2]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	e013      	b.n	80065f4 <HAL_TIM_IC_Start_IT+0x88>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d104      	bne.n	80065dc <HAL_TIM_IC_Start_IT+0x70>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2243      	movs	r2, #67	; 0x43
 80065d6:	5c9b      	ldrb	r3, [r3, r2]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e00b      	b.n	80065f4 <HAL_TIM_IC_Start_IT+0x88>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d104      	bne.n	80065ec <HAL_TIM_IC_Start_IT+0x80>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2244      	movs	r2, #68	; 0x44
 80065e6:	5c9b      	ldrb	r3, [r3, r2]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	e003      	b.n	80065f4 <HAL_TIM_IC_Start_IT+0x88>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2245      	movs	r2, #69	; 0x45
 80065f0:	5c9b      	ldrb	r3, [r3, r2]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	210d      	movs	r1, #13
 80065f6:	187a      	adds	r2, r7, r1
 80065f8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065fa:	230e      	movs	r3, #14
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d103      	bne.n	800660c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006604:	187b      	adds	r3, r7, r1
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d001      	beq.n	8006610 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0ab      	b.n	8006768 <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <HAL_TIM_IC_Start_IT+0xb4>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	223e      	movs	r2, #62	; 0x3e
 800661a:	2102      	movs	r1, #2
 800661c:	5499      	strb	r1, [r3, r2]
 800661e:	e013      	b.n	8006648 <HAL_TIM_IC_Start_IT+0xdc>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d104      	bne.n	8006630 <HAL_TIM_IC_Start_IT+0xc4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	223f      	movs	r2, #63	; 0x3f
 800662a:	2102      	movs	r1, #2
 800662c:	5499      	strb	r1, [r3, r2]
 800662e:	e00b      	b.n	8006648 <HAL_TIM_IC_Start_IT+0xdc>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d104      	bne.n	8006640 <HAL_TIM_IC_Start_IT+0xd4>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2240      	movs	r2, #64	; 0x40
 800663a:	2102      	movs	r1, #2
 800663c:	5499      	strb	r1, [r3, r2]
 800663e:	e003      	b.n	8006648 <HAL_TIM_IC_Start_IT+0xdc>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2241      	movs	r2, #65	; 0x41
 8006644:	2102      	movs	r1, #2
 8006646:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <HAL_TIM_IC_Start_IT+0xec>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2242      	movs	r2, #66	; 0x42
 8006652:	2102      	movs	r1, #2
 8006654:	5499      	strb	r1, [r3, r2]
 8006656:	e013      	b.n	8006680 <HAL_TIM_IC_Start_IT+0x114>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d104      	bne.n	8006668 <HAL_TIM_IC_Start_IT+0xfc>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2243      	movs	r2, #67	; 0x43
 8006662:	2102      	movs	r1, #2
 8006664:	5499      	strb	r1, [r3, r2]
 8006666:	e00b      	b.n	8006680 <HAL_TIM_IC_Start_IT+0x114>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b08      	cmp	r3, #8
 800666c:	d104      	bne.n	8006678 <HAL_TIM_IC_Start_IT+0x10c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2244      	movs	r2, #68	; 0x44
 8006672:	2102      	movs	r1, #2
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	e003      	b.n	8006680 <HAL_TIM_IC_Start_IT+0x114>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2245      	movs	r2, #69	; 0x45
 800667c:	2102      	movs	r1, #2
 800667e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d02a      	beq.n	80066dc <HAL_TIM_IC_Start_IT+0x170>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d830      	bhi.n	80066ee <HAL_TIM_IC_Start_IT+0x182>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b08      	cmp	r3, #8
 8006690:	d01b      	beq.n	80066ca <HAL_TIM_IC_Start_IT+0x15e>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d82a      	bhi.n	80066ee <HAL_TIM_IC_Start_IT+0x182>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IC_Start_IT+0x13a>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d009      	beq.n	80066b8 <HAL_TIM_IC_Start_IT+0x14c>
 80066a4:	e023      	b.n	80066ee <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2102      	movs	r1, #2
 80066b2:	430a      	orrs	r2, r1
 80066b4:	60da      	str	r2, [r3, #12]
      break;
 80066b6:	e01f      	b.n	80066f8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2104      	movs	r1, #4
 80066c4:	430a      	orrs	r2, r1
 80066c6:	60da      	str	r2, [r3, #12]
      break;
 80066c8:	e016      	b.n	80066f8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2108      	movs	r1, #8
 80066d6:	430a      	orrs	r2, r1
 80066d8:	60da      	str	r2, [r3, #12]
      break;
 80066da:	e00d      	b.n	80066f8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2110      	movs	r1, #16
 80066e8:	430a      	orrs	r2, r1
 80066ea:	60da      	str	r2, [r3, #12]
      break;
 80066ec:	e004      	b.n	80066f8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80066ee:	230f      	movs	r3, #15
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
      break;
 80066f6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80066f8:	230f      	movs	r3, #15
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d12f      	bne.n	8006762 <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	0018      	movs	r0, r3
 800670c:	f001 f802 	bl	8007714 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a16      	ldr	r2, [pc, #88]	; (8006770 <HAL_TIM_IC_Start_IT+0x204>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_TIM_IC_Start_IT+0x1c2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a15      	ldr	r2, [pc, #84]	; (8006774 <HAL_TIM_IC_Start_IT+0x208>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIM_IC_Start_IT+0x1c2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a13      	ldr	r2, [pc, #76]	; (8006778 <HAL_TIM_IC_Start_IT+0x20c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d111      	bne.n	8006752 <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2207      	movs	r2, #7
 8006736:	4013      	ands	r3, r2
 8006738:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b06      	cmp	r3, #6
 800673e:	d010      	beq.n	8006762 <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2101      	movs	r1, #1
 800674c:	430a      	orrs	r2, r1
 800674e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006750:	e007      	b.n	8006762 <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2101      	movs	r1, #1
 800675e:	430a      	orrs	r2, r1
 8006760:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006762:	230f      	movs	r3, #15
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	781b      	ldrb	r3, [r3, #0]
}
 8006768:	0018      	movs	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	b004      	add	sp, #16
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40000400 	.word	0x40000400
 8006778:	40014000 	.word	0x40014000

0800677c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2202      	movs	r2, #2
 800678c:	4013      	ands	r3, r2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d124      	bne.n	80067dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2202      	movs	r2, #2
 800679a:	4013      	ands	r3, r2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d11d      	bne.n	80067dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2203      	movs	r2, #3
 80067a6:	4252      	negs	r2, r2
 80067a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2203      	movs	r2, #3
 80067b8:	4013      	ands	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f7fd fc8a 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 80067c4:	e007      	b.n	80067d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0018      	movs	r0, r3
 80067ca:	f000 fb67 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7fd fc3f 	bl	8004054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2204      	movs	r2, #4
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d125      	bne.n	8006836 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2204      	movs	r2, #4
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d11e      	bne.n	8006836 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2205      	movs	r2, #5
 80067fe:	4252      	negs	r2, r2
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	23c0      	movs	r3, #192	; 0xc0
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4013      	ands	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0018      	movs	r0, r3
 800681a:	f7fd fc5d 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 800681e:	e007      	b.n	8006830 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	0018      	movs	r0, r3
 8006824:	f000 fb3a 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f7fd fc12 	bl	8004054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2208      	movs	r2, #8
 800683e:	4013      	ands	r3, r2
 8006840:	2b08      	cmp	r3, #8
 8006842:	d124      	bne.n	800688e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2208      	movs	r2, #8
 800684c:	4013      	ands	r3, r2
 800684e:	2b08      	cmp	r3, #8
 8006850:	d11d      	bne.n	800688e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2209      	movs	r2, #9
 8006858:	4252      	negs	r2, r2
 800685a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2204      	movs	r2, #4
 8006860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	2203      	movs	r2, #3
 800686a:	4013      	ands	r3, r2
 800686c:	d004      	beq.n	8006878 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	f7fd fc31 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 8006876:	e007      	b.n	8006888 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0018      	movs	r0, r3
 800687c:	f000 fb0e 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	0018      	movs	r0, r3
 8006884:	f7fd fbe6 	bl	8004054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2210      	movs	r2, #16
 8006896:	4013      	ands	r3, r2
 8006898:	2b10      	cmp	r3, #16
 800689a:	d125      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	2210      	movs	r2, #16
 80068a4:	4013      	ands	r3, r2
 80068a6:	2b10      	cmp	r3, #16
 80068a8:	d11e      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2211      	movs	r2, #17
 80068b0:	4252      	negs	r2, r2
 80068b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2208      	movs	r2, #8
 80068b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	23c0      	movs	r3, #192	; 0xc0
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4013      	ands	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fd fc04 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e007      	b.n	80068e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f000 fae1 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0018      	movs	r0, r3
 80068de:	f7fd fbb9 	bl	8004054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2201      	movs	r2, #1
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10f      	bne.n	8006916 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	2b01      	cmp	r3, #1
 8006902:	d108      	bne.n	8006916 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2202      	movs	r2, #2
 800690a:	4252      	negs	r2, r2
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f000 fabb 	bl	8006e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	4013      	ands	r3, r2
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d10f      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2280      	movs	r2, #128	; 0x80
 800692c:	4013      	ands	r3, r2
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d108      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2281      	movs	r2, #129	; 0x81
 8006938:	4252      	negs	r2, r2
 800693a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0018      	movs	r0, r3
 8006940:	f000 ffca 	bl	80078d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2240      	movs	r2, #64	; 0x40
 800694c:	4013      	ands	r3, r2
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d10f      	bne.n	8006972 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2240      	movs	r2, #64	; 0x40
 800695a:	4013      	ands	r3, r2
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d108      	bne.n	8006972 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2241      	movs	r2, #65	; 0x41
 8006966:	4252      	negs	r2, r2
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0018      	movs	r0, r3
 800696e:	f000 fa9d 	bl	8006eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2220      	movs	r2, #32
 800697a:	4013      	ands	r3, r2
 800697c:	2b20      	cmp	r3, #32
 800697e:	d10f      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	4013      	ands	r3, r2
 800698a:	2b20      	cmp	r3, #32
 800698c:	d108      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2221      	movs	r2, #33	; 0x21
 8006994:	4252      	negs	r2, r2
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	0018      	movs	r0, r3
 800699c:	f000 ff94 	bl	80078c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b4:	2317      	movs	r3, #23
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	223c      	movs	r2, #60	; 0x3c
 80069c0:	5c9b      	ldrb	r3, [r3, r2]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_IC_ConfigChannel+0x22>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e08c      	b.n	8006ae4 <HAL_TIM_IC_ConfigChannel+0x13c>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	223c      	movs	r2, #60	; 0x3c
 80069ce:	2101      	movs	r1, #1
 80069d0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11b      	bne.n	8006a10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f000 fcda 	bl	80073a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	210c      	movs	r1, #12
 80069f8:	438a      	bics	r2, r1
 80069fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6999      	ldr	r1, [r3, #24]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	619a      	str	r2, [r3, #24]
 8006a0e:	e062      	b.n	8006ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d11c      	bne.n	8006a50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6819      	ldr	r1, [r3, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f000 fd41 	bl	80074ac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	492d      	ldr	r1, [pc, #180]	; (8006aec <HAL_TIM_IC_ConfigChannel+0x144>)
 8006a36:	400a      	ands	r2, r1
 8006a38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6999      	ldr	r1, [r3, #24]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	021a      	lsls	r2, r3, #8
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	619a      	str	r2, [r3, #24]
 8006a4e:	e042      	b.n	8006ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d11b      	bne.n	8006a8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f000 fd95 	bl	8007594 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	210c      	movs	r1, #12
 8006a76:	438a      	bics	r2, r1
 8006a78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69d9      	ldr	r1, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	61da      	str	r2, [r3, #28]
 8006a8c:	e023      	b.n	8006ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b0c      	cmp	r3, #12
 8006a92:	d11c      	bne.n	8006ace <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f000 fdb6 	bl	8007614 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	490e      	ldr	r1, [pc, #56]	; (8006aec <HAL_TIM_IC_ConfigChannel+0x144>)
 8006ab4:	400a      	ands	r2, r1
 8006ab6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69d9      	ldr	r1, [r3, #28]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	61da      	str	r2, [r3, #28]
 8006acc:	e003      	b.n	8006ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8006ace:	2317      	movs	r3, #23
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	223c      	movs	r2, #60	; 0x3c
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]

  return status;
 8006ade:	2317      	movs	r3, #23
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	781b      	ldrb	r3, [r3, #0]
}
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b006      	add	sp, #24
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	fffff3ff 	.word	0xfffff3ff

08006af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2317      	movs	r3, #23
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	223c      	movs	r2, #60	; 0x3c
 8006b08:	5c9b      	ldrb	r3, [r3, r2]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e0ad      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	223c      	movs	r2, #60	; 0x3c
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b0c      	cmp	r3, #12
 8006b1e:	d100      	bne.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006b20:	e076      	b.n	8006c10 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b0c      	cmp	r3, #12
 8006b26:	d900      	bls.n	8006b2a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006b28:	e095      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d04e      	beq.n	8006bce <HAL_TIM_PWM_ConfigChannel+0xde>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d900      	bls.n	8006b38 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006b36:	e08e      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x56>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d021      	beq.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006b44:	e087      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f000 fa2a 	bl	8006fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2108      	movs	r1, #8
 8006b60:	430a      	orrs	r2, r1
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2104      	movs	r1, #4
 8006b70:	438a      	bics	r2, r1
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	619a      	str	r2, [r3, #24]
      break;
 8006b86:	e06b      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fa91 	bl	80070b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2180      	movs	r1, #128	; 0x80
 8006ba2:	0109      	lsls	r1, r1, #4
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4931      	ldr	r1, [pc, #196]	; (8006c78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	021a      	lsls	r2, r3, #8
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	619a      	str	r2, [r3, #24]
      break;
 8006bcc:	e048      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0011      	movs	r1, r2
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 faf2 	bl	80071c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69da      	ldr	r2, [r3, #28]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2108      	movs	r1, #8
 8006be8:	430a      	orrs	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	438a      	bics	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69d9      	ldr	r1, [r3, #28]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	61da      	str	r2, [r3, #28]
      break;
 8006c0e:	e027      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 fb57 	bl	80072cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	0109      	lsls	r1, r1, #4
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	490f      	ldr	r1, [pc, #60]	; (8006c78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006c3c:	400a      	ands	r2, r1
 8006c3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69d9      	ldr	r1, [r3, #28]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	61da      	str	r2, [r3, #28]
      break;
 8006c54:	e004      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006c56:	2317      	movs	r3, #23
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
      break;
 8006c5e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	223c      	movs	r2, #60	; 0x3c
 8006c64:	2100      	movs	r1, #0
 8006c66:	5499      	strb	r1, [r3, r2]

  return status;
 8006c68:	2317      	movs	r3, #23
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
}
 8006c6e:	0018      	movs	r0, r3
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b006      	add	sp, #24
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	fffffbff 	.word	0xfffffbff

08006c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c86:	230f      	movs	r3, #15
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	223c      	movs	r2, #60	; 0x3c
 8006c92:	5c9b      	ldrb	r3, [r3, r2]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x20>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0bc      	b.n	8006e16 <HAL_TIM_ConfigClockSource+0x19a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	223c      	movs	r2, #60	; 0x3c
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	223d      	movs	r2, #61	; 0x3d
 8006ca8:	2102      	movs	r1, #2
 8006caa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2277      	movs	r2, #119	; 0x77
 8006cb8:	4393      	bics	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a58      	ldr	r2, [pc, #352]	; (8006e20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	0192      	lsls	r2, r2, #6
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xde>
 8006cd8:	2280      	movs	r2, #128	; 0x80
 8006cda:	0192      	lsls	r2, r2, #6
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d900      	bls.n	8006ce2 <HAL_TIM_ConfigClockSource+0x66>
 8006ce0:	e088      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	0152      	lsls	r2, r2, #5
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d100      	bne.n	8006cec <HAL_TIM_ConfigClockSource+0x70>
 8006cea:	e088      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x182>
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	0152      	lsls	r2, r2, #5
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d900      	bls.n	8006cf6 <HAL_TIM_ConfigClockSource+0x7a>
 8006cf4:	e07e      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006cf6:	2b70      	cmp	r3, #112	; 0x70
 8006cf8:	d018      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0xb0>
 8006cfa:	d900      	bls.n	8006cfe <HAL_TIM_ConfigClockSource+0x82>
 8006cfc:	e07a      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006cfe:	2b60      	cmp	r3, #96	; 0x60
 8006d00:	d04f      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x126>
 8006d02:	d900      	bls.n	8006d06 <HAL_TIM_ConfigClockSource+0x8a>
 8006d04:	e076      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d06:	2b50      	cmp	r3, #80	; 0x50
 8006d08:	d03b      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x106>
 8006d0a:	d900      	bls.n	8006d0e <HAL_TIM_ConfigClockSource+0x92>
 8006d0c:	e072      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d057      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x146>
 8006d12:	d900      	bls.n	8006d16 <HAL_TIM_ConfigClockSource+0x9a>
 8006d14:	e06e      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d063      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d1a:	d86b      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d060      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d20:	d868      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d05d      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d05b      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d2a:	e063      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f000 fcca 	bl	80076d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2277      	movs	r2, #119	; 0x77
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]
      break;
 8006d58:	e052      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6899      	ldr	r1, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f000 fcb3 	bl	80076d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	01c9      	lsls	r1, r1, #7
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
      break;
 8006d80:	e03e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	001a      	movs	r2, r3
 8006d90:	f000 fb5e 	bl	8007450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2150      	movs	r1, #80	; 0x50
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 fc80 	bl	80076a0 <TIM_ITRx_SetConfig>
      break;
 8006da0:	e02e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	001a      	movs	r2, r3
 8006db0:	f000 fbbe 	bl	8007530 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2160      	movs	r1, #96	; 0x60
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 fc70 	bl	80076a0 <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e01e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	001a      	movs	r2, r3
 8006dd0:	f000 fb3e 	bl	8007450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2140      	movs	r1, #64	; 0x40
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f000 fc60 	bl	80076a0 <TIM_ITRx_SetConfig>
      break;
 8006de0:	e00e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	0019      	movs	r1, r3
 8006dec:	0010      	movs	r0, r2
 8006dee:	f000 fc57 	bl	80076a0 <TIM_ITRx_SetConfig>
      break;
 8006df2:	e005      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006df4:	230f      	movs	r3, #15
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
      break;
 8006dfc:	e000      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006dfe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	223d      	movs	r2, #61	; 0x3d
 8006e04:	2101      	movs	r1, #1
 8006e06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	223c      	movs	r2, #60	; 0x3c
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	5499      	strb	r1, [r3, r2]

  return status;
 8006e10:	230f      	movs	r3, #15
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	781b      	ldrb	r3, [r3, #0]
}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b004      	add	sp, #16
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	ffff00ff 	.word	0xffff00ff

08006e24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b0c      	cmp	r3, #12
 8006e36:	d01e      	beq.n	8006e76 <HAL_TIM_ReadCapturedValue+0x52>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b0c      	cmp	r3, #12
 8006e3c:	d820      	bhi.n	8006e80 <HAL_TIM_ReadCapturedValue+0x5c>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d013      	beq.n	8006e6c <HAL_TIM_ReadCapturedValue+0x48>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d81a      	bhi.n	8006e80 <HAL_TIM_ReadCapturedValue+0x5c>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_TIM_ReadCapturedValue+0x34>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d005      	beq.n	8006e62 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8006e56:	e013      	b.n	8006e80 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	60fb      	str	r3, [r7, #12]
      break;
 8006e60:	e00f      	b.n	8006e82 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	60fb      	str	r3, [r7, #12]
      break;
 8006e6a:	e00a      	b.n	8006e82 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	60fb      	str	r3, [r7, #12]
      break;
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	60fb      	str	r3, [r7, #12]
      break;
 8006e7e:	e000      	b.n	8006e82 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8006e80:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8006e82:	68fb      	ldr	r3, [r7, #12]
}
 8006e84:	0018      	movs	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b004      	add	sp, #16
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a2f      	ldr	r2, [pc, #188]	; (8006f8c <TIM_Base_SetConfig+0xd0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_Base_SetConfig+0x20>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a2e      	ldr	r2, [pc, #184]	; (8006f90 <TIM_Base_SetConfig+0xd4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d108      	bne.n	8006eee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2270      	movs	r2, #112	; 0x70
 8006ee0:	4393      	bics	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a26      	ldr	r2, [pc, #152]	; (8006f8c <TIM_Base_SetConfig+0xd0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <TIM_Base_SetConfig+0x62>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a25      	ldr	r2, [pc, #148]	; (8006f90 <TIM_Base_SetConfig+0xd4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00f      	beq.n	8006f1e <TIM_Base_SetConfig+0x62>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a24      	ldr	r2, [pc, #144]	; (8006f94 <TIM_Base_SetConfig+0xd8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <TIM_Base_SetConfig+0x62>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <TIM_Base_SetConfig+0xdc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <TIM_Base_SetConfig+0x62>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <TIM_Base_SetConfig+0xe0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_Base_SetConfig+0x62>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a21      	ldr	r2, [pc, #132]	; (8006fa0 <TIM_Base_SetConfig+0xe4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d108      	bne.n	8006f30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4a20      	ldr	r2, [pc, #128]	; (8006fa4 <TIM_Base_SetConfig+0xe8>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2280      	movs	r2, #128	; 0x80
 8006f34:	4393      	bics	r3, r2
 8006f36:	001a      	movs	r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a0c      	ldr	r2, [pc, #48]	; (8006f8c <TIM_Base_SetConfig+0xd0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_Base_SetConfig+0xba>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a0d      	ldr	r2, [pc, #52]	; (8006f98 <TIM_Base_SetConfig+0xdc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_Base_SetConfig+0xba>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a0c      	ldr	r2, [pc, #48]	; (8006f9c <TIM_Base_SetConfig+0xe0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0xba>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a0b      	ldr	r2, [pc, #44]	; (8006fa0 <TIM_Base_SetConfig+0xe4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d103      	bne.n	8006f7e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	615a      	str	r2, [r3, #20]
}
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b004      	add	sp, #16
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40002000 	.word	0x40002000
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800
 8006fa4:	fffffcff 	.word	0xfffffcff

08006fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4393      	bics	r3, r2
 8006fba:	001a      	movs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2270      	movs	r2, #112	; 0x70
 8006fd6:	4393      	bics	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	4393      	bics	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	4393      	bics	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a27      	ldr	r2, [pc, #156]	; (80070a0 <TIM_OC1_SetConfig+0xf8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00b      	beq.n	800701e <TIM_OC1_SetConfig+0x76>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a26      	ldr	r2, [pc, #152]	; (80070a4 <TIM_OC1_SetConfig+0xfc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <TIM_OC1_SetConfig+0x76>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a25      	ldr	r2, [pc, #148]	; (80070a8 <TIM_OC1_SetConfig+0x100>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_OC1_SetConfig+0x76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a24      	ldr	r2, [pc, #144]	; (80070ac <TIM_OC1_SetConfig+0x104>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d10c      	bne.n	8007038 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2208      	movs	r2, #8
 8007022:	4393      	bics	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2204      	movs	r2, #4
 8007034:	4393      	bics	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <TIM_OC1_SetConfig+0xf8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00b      	beq.n	8007058 <TIM_OC1_SetConfig+0xb0>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <TIM_OC1_SetConfig+0xfc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d007      	beq.n	8007058 <TIM_OC1_SetConfig+0xb0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <TIM_OC1_SetConfig+0x100>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_OC1_SetConfig+0xb0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC1_SetConfig+0x104>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d111      	bne.n	800707c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC1_SetConfig+0x108>)
 800705c:	4013      	ands	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC1_SetConfig+0x10c>)
 8007064:	4013      	ands	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	46bd      	mov	sp, r7
 800709a:	b006      	add	sp, #24
 800709c:	bd80      	pop	{r7, pc}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400
 80070ac:	40014800 	.word	0x40014800
 80070b0:	fffffeff 	.word	0xfffffeff
 80070b4:	fffffdff 	.word	0xfffffdff

080070b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	2210      	movs	r2, #16
 80070c8:	4393      	bics	r3, r2
 80070ca:	001a      	movs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4a2e      	ldr	r2, [pc, #184]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <TIM_OC2_SetConfig+0xec>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2220      	movs	r2, #32
 8007102:	4393      	bics	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <TIM_OC2_SetConfig+0xf0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d10d      	bne.n	8007136 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2280      	movs	r2, #128	; 0x80
 800711e:	4393      	bics	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2240      	movs	r2, #64	; 0x40
 8007132:	4393      	bics	r3, r2
 8007134:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <TIM_OC2_SetConfig+0xf0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_OC2_SetConfig+0x9e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <TIM_OC2_SetConfig+0xf4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_OC2_SetConfig+0x9e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <TIM_OC2_SetConfig+0xf8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC2_SetConfig+0x9e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <TIM_OC2_SetConfig+0xfc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d113      	bne.n	800717e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <TIM_OC2_SetConfig+0x100>)
 800715a:	4013      	ands	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <TIM_OC2_SetConfig+0x104>)
 8007162:	4013      	ands	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	621a      	str	r2, [r3, #32]
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b006      	add	sp, #24
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	ffff8fff 	.word	0xffff8fff
 80071a4:	fffffcff 	.word	0xfffffcff
 80071a8:	40012c00 	.word	0x40012c00
 80071ac:	40014000 	.word	0x40014000
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40014800 	.word	0x40014800
 80071b8:	fffffbff 	.word	0xfffffbff
 80071bc:	fffff7ff 	.word	0xfffff7ff

080071c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	4a35      	ldr	r2, [pc, #212]	; (80072a4 <TIM_OC3_SetConfig+0xe4>)
 80071d0:	401a      	ands	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2270      	movs	r2, #112	; 0x70
 80071ec:	4393      	bics	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2203      	movs	r2, #3
 80071f4:	4393      	bics	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <TIM_OC3_SetConfig+0xe8>)
 8007206:	4013      	ands	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a24      	ldr	r2, [pc, #144]	; (80072ac <TIM_OC3_SetConfig+0xec>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d10d      	bne.n	800723a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4a23      	ldr	r2, [pc, #140]	; (80072b0 <TIM_OC3_SetConfig+0xf0>)
 8007222:	4013      	ands	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <TIM_OC3_SetConfig+0xf4>)
 8007236:	4013      	ands	r3, r2
 8007238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1b      	ldr	r2, [pc, #108]	; (80072ac <TIM_OC3_SetConfig+0xec>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00b      	beq.n	800725a <TIM_OC3_SetConfig+0x9a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <TIM_OC3_SetConfig+0xf8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d007      	beq.n	800725a <TIM_OC3_SetConfig+0x9a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a1b      	ldr	r2, [pc, #108]	; (80072bc <TIM_OC3_SetConfig+0xfc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d003      	beq.n	800725a <TIM_OC3_SetConfig+0x9a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <TIM_OC3_SetConfig+0x100>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d113      	bne.n	8007282 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <TIM_OC3_SetConfig+0x104>)
 800725e:	4013      	ands	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <TIM_OC3_SetConfig+0x108>)
 8007266:	4013      	ands	r3, r2
 8007268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	621a      	str	r2, [r3, #32]
}
 800729c:	46c0      	nop			; (mov r8, r8)
 800729e:	46bd      	mov	sp, r7
 80072a0:	b006      	add	sp, #24
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	fffffeff 	.word	0xfffffeff
 80072a8:	fffffdff 	.word	0xfffffdff
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	fffff7ff 	.word	0xfffff7ff
 80072b4:	fffffbff 	.word	0xfffffbff
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800
 80072c4:	ffffefff 	.word	0xffffefff
 80072c8:	ffffdfff 	.word	0xffffdfff

080072cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	4a28      	ldr	r2, [pc, #160]	; (800737c <TIM_OC4_SetConfig+0xb0>)
 80072dc:	401a      	ands	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_OC4_SetConfig+0xb4>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_OC4_SetConfig+0xb8>)
 8007300:	4013      	ands	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <TIM_OC4_SetConfig+0xbc>)
 8007314:	4013      	ands	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	031b      	lsls	r3, r3, #12
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a19      	ldr	r2, [pc, #100]	; (800738c <TIM_OC4_SetConfig+0xc0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_OC4_SetConfig+0x78>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a18      	ldr	r2, [pc, #96]	; (8007390 <TIM_OC4_SetConfig+0xc4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <TIM_OC4_SetConfig+0x78>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a17      	ldr	r2, [pc, #92]	; (8007394 <TIM_OC4_SetConfig+0xc8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC4_SetConfig+0x78>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a16      	ldr	r2, [pc, #88]	; (8007398 <TIM_OC4_SetConfig+0xcc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d109      	bne.n	8007358 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4a15      	ldr	r2, [pc, #84]	; (800739c <TIM_OC4_SetConfig+0xd0>)
 8007348:	4013      	ands	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	019b      	lsls	r3, r3, #6
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	b006      	add	sp, #24
 8007378:	bd80      	pop	{r7, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	ffffefff 	.word	0xffffefff
 8007380:	ffff8fff 	.word	0xffff8fff
 8007384:	fffffcff 	.word	0xfffffcff
 8007388:	ffffdfff 	.word	0xffffdfff
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800
 800739c:	ffffbfff 	.word	0xffffbfff

080073a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	2201      	movs	r2, #1
 80073b4:	4393      	bics	r3, r2
 80073b6:	001a      	movs	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4a1e      	ldr	r2, [pc, #120]	; (8007444 <TIM_TI1_SetConfig+0xa4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_TI1_SetConfig+0x40>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <TIM_TI1_SetConfig+0xa8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_TI1_SetConfig+0x40>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a1c      	ldr	r2, [pc, #112]	; (800744c <TIM_TI1_SetConfig+0xac>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d101      	bne.n	80073e4 <TIM_TI1_SetConfig+0x44>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <TIM_TI1_SetConfig+0x46>
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2203      	movs	r2, #3
 80073ee:	4393      	bics	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e003      	b.n	8007404 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2201      	movs	r2, #1
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	22f0      	movs	r2, #240	; 0xf0
 8007408:	4393      	bics	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	22ff      	movs	r2, #255	; 0xff
 8007412:	4013      	ands	r3, r2
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	220a      	movs	r2, #10
 800741e:	4393      	bics	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	220a      	movs	r2, #10
 8007426:	4013      	ands	r3, r2
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	46bd      	mov	sp, r7
 800743e:	b006      	add	sp, #24
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40000400 	.word	0x40000400
 800744c:	40014000 	.word	0x40014000

08007450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	2201      	movs	r2, #1
 8007468:	4393      	bics	r3, r2
 800746a:	001a      	movs	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	22f0      	movs	r2, #240	; 0xf0
 800747a:	4393      	bics	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	220a      	movs	r2, #10
 800748c:	4393      	bics	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b006      	add	sp, #24
 80074aa:	bd80      	pop	{r7, pc}

080074ac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	2210      	movs	r2, #16
 80074c0:	4393      	bics	r3, r2
 80074c2:	001a      	movs	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	4a14      	ldr	r2, [pc, #80]	; (8007528 <TIM_TI2_SetConfig+0x7c>)
 80074d8:	4013      	ands	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4a10      	ldr	r2, [pc, #64]	; (800752c <TIM_TI2_SetConfig+0x80>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	031b      	lsls	r3, r3, #12
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	22a0      	movs	r2, #160	; 0xa0
 8007500:	4393      	bics	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	22a0      	movs	r2, #160	; 0xa0
 800750a:	4013      	ands	r3, r2
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	46bd      	mov	sp, r7
 8007522:	b006      	add	sp, #24
 8007524:	bd80      	pop	{r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	fffffcff 	.word	0xfffffcff
 800752c:	ffff0fff 	.word	0xffff0fff

08007530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	2210      	movs	r2, #16
 8007542:	4393      	bics	r3, r2
 8007544:	001a      	movs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <TIM_TI2_ConfigInputStage+0x60>)
 800755a:	4013      	ands	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	031b      	lsls	r3, r3, #12
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	22a0      	movs	r2, #160	; 0xa0
 800756c:	4393      	bics	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	621a      	str	r2, [r3, #32]
}
 8007586:	46c0      	nop			; (mov r8, r8)
 8007588:	46bd      	mov	sp, r7
 800758a:	b006      	add	sp, #24
 800758c:	bd80      	pop	{r7, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	ffff0fff 	.word	0xffff0fff

08007594 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	4a19      	ldr	r2, [pc, #100]	; (800760c <TIM_TI3_SetConfig+0x78>)
 80075a8:	401a      	ands	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2203      	movs	r2, #3
 80075be:	4393      	bics	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	22f0      	movs	r2, #240	; 0xf0
 80075ce:	4393      	bics	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	22ff      	movs	r2, #255	; 0xff
 80075d8:	4013      	ands	r3, r2
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4a0b      	ldr	r2, [pc, #44]	; (8007610 <TIM_TI3_SetConfig+0x7c>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	021a      	lsls	r2, r3, #8
 80075ec:	23a0      	movs	r3, #160	; 0xa0
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	4013      	ands	r3, r2
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	621a      	str	r2, [r3, #32]
}
 8007604:	46c0      	nop			; (mov r8, r8)
 8007606:	46bd      	mov	sp, r7
 8007608:	b006      	add	sp, #24
 800760a:	bd80      	pop	{r7, pc}
 800760c:	fffffeff 	.word	0xfffffeff
 8007610:	fffff5ff 	.word	0xfffff5ff

08007614 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	4a1a      	ldr	r2, [pc, #104]	; (8007690 <TIM_TI4_SetConfig+0x7c>)
 8007628:	401a      	ands	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4a15      	ldr	r2, [pc, #84]	; (8007694 <TIM_TI4_SetConfig+0x80>)
 800763e:	4013      	ands	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	4a12      	ldr	r2, [pc, #72]	; (8007698 <TIM_TI4_SetConfig+0x84>)
 8007650:	4013      	ands	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	031b      	lsls	r3, r3, #12
 8007658:	041b      	lsls	r3, r3, #16
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <TIM_TI4_SetConfig+0x88>)
 8007666:	4013      	ands	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	031a      	lsls	r2, r3, #12
 800766e:	23a0      	movs	r3, #160	; 0xa0
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	4013      	ands	r3, r2
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	b006      	add	sp, #24
 800768c:	bd80      	pop	{r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	ffffefff 	.word	0xffffefff
 8007694:	fffffcff 	.word	0xfffffcff
 8007698:	ffff0fff 	.word	0xffff0fff
 800769c:	ffff5fff 	.word	0xffff5fff

080076a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2270      	movs	r2, #112	; 0x70
 80076b4:	4393      	bics	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	2207      	movs	r2, #7
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	609a      	str	r2, [r3, #8]
}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b004      	add	sp, #16
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4a09      	ldr	r2, [pc, #36]	; (8007710 <TIM_ETR_SetConfig+0x3c>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	46c0      	nop			; (mov r8, r8)
 800770a:	46bd      	mov	sp, r7
 800770c:	b006      	add	sp, #24
 800770e:	bd80      	pop	{r7, pc}
 8007710:	ffff00ff 	.word	0xffff00ff

08007714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	221f      	movs	r2, #31
 8007724:	4013      	ands	r3, r2
 8007726:	2201      	movs	r2, #1
 8007728:	409a      	lsls	r2, r3
 800772a:	0013      	movs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	43d2      	mvns	r2, r2
 8007736:	401a      	ands	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a1a      	ldr	r2, [r3, #32]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	211f      	movs	r1, #31
 8007744:	400b      	ands	r3, r1
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4099      	lsls	r1, r3
 800774a:	000b      	movs	r3, r1
 800774c:	431a      	orrs	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	46bd      	mov	sp, r7
 8007756:	b006      	add	sp, #24
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	223c      	movs	r2, #60	; 0x3c
 800776a:	5c9b      	ldrb	r3, [r3, r2]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007770:	2302      	movs	r3, #2
 8007772:	e041      	b.n	80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	223c      	movs	r2, #60	; 0x3c
 8007778:	2101      	movs	r1, #1
 800777a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	223d      	movs	r2, #61	; 0x3d
 8007780:	2102      	movs	r1, #2
 8007782:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2270      	movs	r2, #112	; 0x70
 8007798:	4393      	bics	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a13      	ldr	r2, [pc, #76]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a11      	ldr	r2, [pc, #68]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a10      	ldr	r2, [pc, #64]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10c      	bne.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2280      	movs	r2, #128	; 0x80
 80077d0:	4393      	bics	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	223d      	movs	r2, #61	; 0x3d
 80077ea:	2101      	movs	r1, #1
 80077ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	223c      	movs	r2, #60	; 0x3c
 80077f2:	2100      	movs	r1, #0
 80077f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	0018      	movs	r0, r3
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b004      	add	sp, #16
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40000400 	.word	0x40000400
 8007808:	40014000 	.word	0x40014000

0800780c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	223c      	movs	r2, #60	; 0x3c
 800781e:	5c9b      	ldrb	r3, [r3, r2]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007824:	2302      	movs	r3, #2
 8007826:	e03e      	b.n	80078a6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	223c      	movs	r2, #60	; 0x3c
 800782c:	2101      	movs	r1, #1
 800782e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	22ff      	movs	r2, #255	; 0xff
 8007834:	4393      	bics	r3, r2
 8007836:	001a      	movs	r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a1b      	ldr	r2, [pc, #108]	; (80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007844:	401a      	ands	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007852:	401a      	ands	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a16      	ldr	r2, [pc, #88]	; (80078b8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007860:	401a      	ands	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4a13      	ldr	r2, [pc, #76]	; (80078bc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800786e:	401a      	ands	r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a11      	ldr	r2, [pc, #68]	; (80078c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800787c:	401a      	ands	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4a0e      	ldr	r2, [pc, #56]	; (80078c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800788a:	401a      	ands	r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	223c      	movs	r2, #60	; 0x3c
 80078a0:	2100      	movs	r1, #0
 80078a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	0018      	movs	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b004      	add	sp, #16
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	fffffcff 	.word	0xfffffcff
 80078b4:	fffffbff 	.word	0xfffffbff
 80078b8:	fffff7ff 	.word	0xfffff7ff
 80078bc:	ffffefff 	.word	0xffffefff
 80078c0:	ffffdfff 	.word	0xffffdfff
 80078c4:	ffffbfff 	.word	0xffffbfff

080078c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d0:	46c0      	nop			; (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e0:	46c0      	nop			; (mov r8, r8)
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b002      	add	sp, #8
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e044      	b.n	8007984 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d107      	bne.n	8007912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2274      	movs	r2, #116	; 0x74
 8007906:	2100      	movs	r1, #0
 8007908:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	0018      	movs	r0, r3
 800790e:	f7fc ff35 	bl	800477c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2224      	movs	r2, #36	; 0x24
 8007916:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2101      	movs	r1, #1
 8007924:	438a      	bics	r2, r1
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	0018      	movs	r0, r3
 800792c:	f000 fcc2 	bl	80082b4 <UART_SetConfig>
 8007930:	0003      	movs	r3, r0
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e024      	b.n	8007984 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0018      	movs	r0, r3
 8007946:	f000 fe0d 	bl	8008564 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	490d      	ldr	r1, [pc, #52]	; (800798c <HAL_UART_Init+0xa4>)
 8007956:	400a      	ands	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2108      	movs	r1, #8
 8007966:	438a      	bics	r2, r1
 8007968:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2101      	movs	r1, #1
 8007976:	430a      	orrs	r2, r1
 8007978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	0018      	movs	r0, r3
 800797e:	f000 fea5 	bl	80086cc <UART_CheckIdleState>
 8007982:	0003      	movs	r3, r0
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	b002      	add	sp, #8
 800798a:	bd80      	pop	{r7, pc}
 800798c:	fffff7ff 	.word	0xfffff7ff

08007990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af02      	add	r7, sp, #8
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	1dbb      	adds	r3, r7, #6
 800799e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d000      	beq.n	80079aa <HAL_UART_Transmit+0x1a>
 80079a8:	e096      	b.n	8007ad8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <HAL_UART_Transmit+0x28>
 80079b0:	1dbb      	adds	r3, r7, #6
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e08e      	b.n	8007ada <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	015b      	lsls	r3, r3, #5
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d109      	bne.n	80079dc <HAL_UART_Transmit+0x4c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d105      	bne.n	80079dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2201      	movs	r2, #1
 80079d4:	4013      	ands	r3, r2
 80079d6:	d001      	beq.n	80079dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e07e      	b.n	8007ada <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2274      	movs	r2, #116	; 0x74
 80079e0:	5c9b      	ldrb	r3, [r3, r2]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_UART_Transmit+0x5a>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e077      	b.n	8007ada <HAL_UART_Transmit+0x14a>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2274      	movs	r2, #116	; 0x74
 80079ee:	2101      	movs	r1, #1
 80079f0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2280      	movs	r2, #128	; 0x80
 80079f6:	2100      	movs	r1, #0
 80079f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2221      	movs	r2, #33	; 0x21
 80079fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a00:	f7fd f90e 	bl	8004c20 <HAL_GetTick>
 8007a04:	0003      	movs	r3, r0
 8007a06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1dba      	adds	r2, r7, #6
 8007a0c:	2150      	movs	r1, #80	; 0x50
 8007a0e:	8812      	ldrh	r2, [r2, #0]
 8007a10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1dba      	adds	r2, r7, #6
 8007a16:	2152      	movs	r1, #82	; 0x52
 8007a18:	8812      	ldrh	r2, [r2, #0]
 8007a1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	015b      	lsls	r3, r3, #5
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d108      	bne.n	8007a3a <HAL_UART_Transmit+0xaa>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e003      	b.n	8007a42 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2274      	movs	r2, #116	; 0x74
 8007a46:	2100      	movs	r1, #0
 8007a48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007a4a:	e02d      	b.n	8007aa8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	0013      	movs	r3, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	2180      	movs	r1, #128	; 0x80
 8007a5a:	f000 fe7f 	bl	800875c <UART_WaitOnFlagUntilTimeout>
 8007a5e:	1e03      	subs	r3, r0, #0
 8007a60:	d001      	beq.n	8007a66 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e039      	b.n	8007ada <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	881a      	ldrh	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	05d2      	lsls	r2, r2, #23
 8007a76:	0dd2      	lsrs	r2, r2, #23
 8007a78:	b292      	uxth	r2, r2
 8007a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	3302      	adds	r3, #2
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	e008      	b.n	8007a96 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	b292      	uxth	r2, r2
 8007a8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	3301      	adds	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2252      	movs	r2, #82	; 0x52
 8007a9a:	5a9b      	ldrh	r3, [r3, r2]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b299      	uxth	r1, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2252      	movs	r2, #82	; 0x52
 8007aa6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2252      	movs	r2, #82	; 0x52
 8007aac:	5a9b      	ldrh	r3, [r3, r2]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1cb      	bne.n	8007a4c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	0013      	movs	r3, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2140      	movs	r1, #64	; 0x40
 8007ac2:	f000 fe4b 	bl	800875c <UART_WaitOnFlagUntilTimeout>
 8007ac6:	1e03      	subs	r3, r0, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e005      	b.n	8007ada <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e000      	b.n	8007ada <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007ad8:	2302      	movs	r3, #2
  }
}
 8007ada:	0018      	movs	r0, r3
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b008      	add	sp, #32
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	1dbb      	adds	r3, r7, #6
 8007af0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d000      	beq.n	8007afc <HAL_UART_Transmit_DMA+0x18>
 8007afa:	e08a      	b.n	8007c12 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_UART_Transmit_DMA+0x26>
 8007b02:	1dbb      	adds	r3, r7, #6
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e082      	b.n	8007c14 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	2380      	movs	r3, #128	; 0x80
 8007b14:	015b      	lsls	r3, r3, #5
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d109      	bne.n	8007b2e <HAL_UART_Transmit_DMA+0x4a>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d105      	bne.n	8007b2e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2201      	movs	r2, #1
 8007b26:	4013      	ands	r3, r2
 8007b28:	d001      	beq.n	8007b2e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e072      	b.n	8007c14 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2274      	movs	r2, #116	; 0x74
 8007b32:	5c9b      	ldrb	r3, [r3, r2]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Transmit_DMA+0x58>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e06b      	b.n	8007c14 <HAL_UART_Transmit_DMA+0x130>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2274      	movs	r2, #116	; 0x74
 8007b40:	2101      	movs	r1, #1
 8007b42:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1dba      	adds	r2, r7, #6
 8007b4e:	2150      	movs	r1, #80	; 0x50
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1dba      	adds	r2, r7, #6
 8007b58:	2152      	movs	r1, #82	; 0x52
 8007b5a:	8812      	ldrh	r2, [r2, #0]
 8007b5c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2280      	movs	r2, #128	; 0x80
 8007b62:	2100      	movs	r1, #0
 8007b64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2221      	movs	r2, #33	; 0x21
 8007b6a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d02b      	beq.n	8007bcc <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b78:	4a28      	ldr	r2, [pc, #160]	; (8007c1c <HAL_UART_Transmit_DMA+0x138>)
 8007b7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b80:	4a27      	ldr	r2, [pc, #156]	; (8007c20 <HAL_UART_Transmit_DMA+0x13c>)
 8007b82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b88:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <HAL_UART_Transmit_DMA+0x140>)
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b90:	2200      	movs	r2, #0
 8007b92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	0019      	movs	r1, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3328      	adds	r3, #40	; 0x28
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	1dbb      	adds	r3, r7, #6
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	f7fd f98d 	bl	8004ec8 <HAL_DMA_Start_IT>
 8007bae:	1e03      	subs	r3, r0, #0
 8007bb0:	d00c      	beq.n	8007bcc <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2280      	movs	r2, #128	; 0x80
 8007bb6:	2110      	movs	r1, #16
 8007bb8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2274      	movs	r2, #116	; 0x74
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e023      	b.n	8007c14 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2240      	movs	r2, #64	; 0x40
 8007bd2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2274      	movs	r2, #116	; 0x74
 8007bd8:	2100      	movs	r1, #0
 8007bda:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007be0:	613b      	str	r3, [r7, #16]
  return(result);
 8007be2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	2301      	movs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f383 8810 	msr	PRIMASK, r3
}
 8007bf0:	46c0      	nop			; (mov r8, r8)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2180      	movs	r1, #128	; 0x80
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	609a      	str	r2, [r3, #8]
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f383 8810 	msr	PRIMASK, r3
}
 8007c0c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e000      	b.n	8007c14 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007c12:	2302      	movs	r3, #2
  }
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b008      	add	sp, #32
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	08008b35 	.word	0x08008b35
 8007c20:	08008bc9 	.word	0x08008bc9
 8007c24:	08008d49 	.word	0x08008d49

08007c28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	1dbb      	adds	r3, r7, #6
 8007c34:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d150      	bne.n	8007ce0 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_UART_Receive_DMA+0x24>
 8007c44:	1dbb      	adds	r3, r7, #6
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e048      	b.n	8007ce2 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	2380      	movs	r3, #128	; 0x80
 8007c56:	015b      	lsls	r3, r3, #5
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d109      	bne.n	8007c70 <HAL_UART_Receive_DMA+0x48>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2201      	movs	r2, #1
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d001      	beq.n	8007c70 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e038      	b.n	8007ce2 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2274      	movs	r2, #116	; 0x74
 8007c74:	5c9b      	ldrb	r3, [r3, r2]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_UART_Receive_DMA+0x56>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e031      	b.n	8007ce2 <HAL_UART_Receive_DMA+0xba>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2274      	movs	r2, #116	; 0x74
 8007c82:	2101      	movs	r1, #1
 8007c84:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	2380      	movs	r3, #128	; 0x80
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	4013      	ands	r3, r2
 8007c98:	d019      	beq.n	8007cce <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c9e:	613b      	str	r3, [r7, #16]
  return(result);
 8007ca0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f383 8810 	msr	PRIMASK, r3
}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	04c9      	lsls	r1, r1, #19
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f383 8810 	msr	PRIMASK, r3
}
 8007ccc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007cce:	1dbb      	adds	r3, r7, #6
 8007cd0:	881a      	ldrh	r2, [r3, #0]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f000 fe04 	bl	80088e4 <UART_Start_Receive_DMA>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	e000      	b.n	8007ce2 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
  }
}
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b008      	add	sp, #32
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cec:	b590      	push	{r4, r7, lr}
 8007cee:	b0ab      	sub	sp, #172	; 0xac
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	22a4      	movs	r2, #164	; 0xa4
 8007cfc:	18b9      	adds	r1, r7, r2
 8007cfe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	20a0      	movs	r0, #160	; 0xa0
 8007d08:	1839      	adds	r1, r7, r0
 8007d0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	219c      	movs	r1, #156	; 0x9c
 8007d14:	1879      	adds	r1, r7, r1
 8007d16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d18:	0011      	movs	r1, r2
 8007d1a:	18bb      	adds	r3, r7, r2
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a99      	ldr	r2, [pc, #612]	; (8007f84 <HAL_UART_IRQHandler+0x298>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	2298      	movs	r2, #152	; 0x98
 8007d24:	18bc      	adds	r4, r7, r2
 8007d26:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007d28:	18bb      	adds	r3, r7, r2
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d114      	bne.n	8007d5a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d30:	187b      	adds	r3, r7, r1
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2220      	movs	r2, #32
 8007d36:	4013      	ands	r3, r2
 8007d38:	d00f      	beq.n	8007d5a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d3a:	183b      	adds	r3, r7, r0
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	4013      	ands	r3, r2
 8007d42:	d00a      	beq.n	8007d5a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d100      	bne.n	8007d4e <HAL_UART_IRQHandler+0x62>
 8007d4c:	e27e      	b.n	800824c <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	0010      	movs	r0, r2
 8007d56:	4798      	blx	r3
      }
      return;
 8007d58:	e278      	b.n	800824c <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d5a:	2398      	movs	r3, #152	; 0x98
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d100      	bne.n	8007d66 <HAL_UART_IRQHandler+0x7a>
 8007d64:	e114      	b.n	8007f90 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d66:	239c      	movs	r3, #156	; 0x9c
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d106      	bne.n	8007d80 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d72:	23a0      	movs	r3, #160	; 0xa0
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a83      	ldr	r2, [pc, #524]	; (8007f88 <HAL_UART_IRQHandler+0x29c>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	d100      	bne.n	8007d80 <HAL_UART_IRQHandler+0x94>
 8007d7e:	e107      	b.n	8007f90 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d80:	23a4      	movs	r3, #164	; 0xa4
 8007d82:	18fb      	adds	r3, r7, r3
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2201      	movs	r2, #1
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d012      	beq.n	8007db2 <HAL_UART_IRQHandler+0xc6>
 8007d8c:	23a0      	movs	r3, #160	; 0xa0
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	2380      	movs	r3, #128	; 0x80
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	4013      	ands	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2280      	movs	r2, #128	; 0x80
 8007da6:	589b      	ldr	r3, [r3, r2]
 8007da8:	2201      	movs	r2, #1
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007db2:	23a4      	movs	r3, #164	; 0xa4
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2202      	movs	r2, #2
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d011      	beq.n	8007de2 <HAL_UART_IRQHandler+0xf6>
 8007dbe:	239c      	movs	r3, #156	; 0x9c
 8007dc0:	18fb      	adds	r3, r7, r3
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d00b      	beq.n	8007de2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2280      	movs	r2, #128	; 0x80
 8007dd6:	589b      	ldr	r3, [r3, r2]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2180      	movs	r1, #128	; 0x80
 8007de0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007de2:	23a4      	movs	r3, #164	; 0xa4
 8007de4:	18fb      	adds	r3, r7, r3
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2204      	movs	r2, #4
 8007dea:	4013      	ands	r3, r2
 8007dec:	d011      	beq.n	8007e12 <HAL_UART_IRQHandler+0x126>
 8007dee:	239c      	movs	r3, #156	; 0x9c
 8007df0:	18fb      	adds	r3, r7, r3
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2201      	movs	r2, #1
 8007df6:	4013      	ands	r3, r2
 8007df8:	d00b      	beq.n	8007e12 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2280      	movs	r2, #128	; 0x80
 8007e06:	589b      	ldr	r3, [r3, r2]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2180      	movs	r1, #128	; 0x80
 8007e10:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e12:	23a4      	movs	r3, #164	; 0xa4
 8007e14:	18fb      	adds	r3, r7, r3
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d017      	beq.n	8007e4e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e1e:	23a0      	movs	r3, #160	; 0xa0
 8007e20:	18fb      	adds	r3, r7, r3
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2220      	movs	r2, #32
 8007e26:	4013      	ands	r3, r2
 8007e28:	d105      	bne.n	8007e36 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e2a:	239c      	movs	r3, #156	; 0x9c
 8007e2c:	18fb      	adds	r3, r7, r3
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e34:	d00b      	beq.n	8007e4e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2280      	movs	r2, #128	; 0x80
 8007e42:	589b      	ldr	r3, [r3, r2]
 8007e44:	2208      	movs	r2, #8
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2180      	movs	r1, #128	; 0x80
 8007e4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e4e:	23a4      	movs	r3, #164	; 0xa4
 8007e50:	18fb      	adds	r3, r7, r3
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	2380      	movs	r3, #128	; 0x80
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_UART_IRQHandler+0x198>
 8007e5c:	23a0      	movs	r3, #160	; 0xa0
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	2380      	movs	r3, #128	; 0x80
 8007e64:	04db      	lsls	r3, r3, #19
 8007e66:	4013      	ands	r3, r2
 8007e68:	d00c      	beq.n	8007e84 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2280      	movs	r2, #128	; 0x80
 8007e70:	0112      	lsls	r2, r2, #4
 8007e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	589b      	ldr	r3, [r3, r2]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2180      	movs	r1, #128	; 0x80
 8007e82:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	589b      	ldr	r3, [r3, r2]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d100      	bne.n	8007e90 <HAL_UART_IRQHandler+0x1a4>
 8007e8e:	e1df      	b.n	8008250 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e90:	23a4      	movs	r3, #164	; 0xa4
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2220      	movs	r2, #32
 8007e98:	4013      	ands	r3, r2
 8007e9a:	d00e      	beq.n	8007eba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e9c:	23a0      	movs	r3, #160	; 0xa0
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d008      	beq.n	8007eba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	0010      	movs	r0, r2
 8007eb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2280      	movs	r2, #128	; 0x80
 8007ebe:	589b      	ldr	r3, [r3, r2]
 8007ec0:	2194      	movs	r1, #148	; 0x94
 8007ec2:	187a      	adds	r2, r7, r1
 8007ec4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2240      	movs	r2, #64	; 0x40
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b40      	cmp	r3, #64	; 0x40
 8007ed2:	d004      	beq.n	8007ede <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2228      	movs	r2, #40	; 0x28
 8007eda:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007edc:	d047      	beq.n	8007f6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f000 fdc5 	bl	8008a70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2240      	movs	r2, #64	; 0x40
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	d137      	bne.n	8007f64 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007efc:	2090      	movs	r0, #144	; 0x90
 8007efe:	183a      	adds	r2, r7, r0
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	2301      	movs	r3, #1
 8007f04:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f08:	f383 8810 	msr	PRIMASK, r3
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2140      	movs	r1, #64	; 0x40
 8007f1a:	438a      	bics	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]
 8007f1e:	183b      	adds	r3, r7, r0
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d012      	beq.n	8007f5a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f38:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <HAL_UART_IRQHandler+0x2a0>)
 8007f3a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7fd f85f 	bl	8005004 <HAL_DMA_Abort_IT>
 8007f46:	1e03      	subs	r3, r0, #0
 8007f48:	d01a      	beq.n	8007f80 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	0018      	movs	r0, r3
 8007f56:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f58:	e012      	b.n	8007f80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 f995 	bl	800828c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f62:	e00d      	b.n	8007f80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	0018      	movs	r0, r3
 8007f68:	f000 f990 	bl	800828c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	e008      	b.n	8007f80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0018      	movs	r0, r3
 8007f72:	f000 f98b 	bl	800828c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2280      	movs	r2, #128	; 0x80
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007f7e:	e167      	b.n	8008250 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	46c0      	nop			; (mov r8, r8)
    return;
 8007f82:	e165      	b.n	8008250 <HAL_UART_IRQHandler+0x564>
 8007f84:	0000080f 	.word	0x0000080f
 8007f88:	04000120 	.word	0x04000120
 8007f8c:	08008dcb 	.word	0x08008dcb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d000      	beq.n	8007f9a <HAL_UART_IRQHandler+0x2ae>
 8007f98:	e131      	b.n	80081fe <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f9a:	23a4      	movs	r3, #164	; 0xa4
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2210      	movs	r2, #16
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d100      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x2bc>
 8007fa6:	e12a      	b.n	80081fe <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fa8:	23a0      	movs	r3, #160	; 0xa0
 8007faa:	18fb      	adds	r3, r7, r3
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	d100      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x2ca>
 8007fb4:	e123      	b.n	80081fe <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2210      	movs	r2, #16
 8007fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2240      	movs	r2, #64	; 0x40
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d000      	beq.n	8007fce <HAL_UART_IRQHandler+0x2e2>
 8007fcc:	e09b      	b.n	8008106 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	217e      	movs	r1, #126	; 0x7e
 8007fd8:	187b      	adds	r3, r7, r1
 8007fda:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007fdc:	187b      	adds	r3, r7, r1
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d100      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x2fa>
 8007fe4:	e136      	b.n	8008254 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2258      	movs	r2, #88	; 0x58
 8007fea:	5a9b      	ldrh	r3, [r3, r2]
 8007fec:	187a      	adds	r2, r7, r1
 8007fee:	8812      	ldrh	r2, [r2, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d300      	bcc.n	8007ff6 <HAL_UART_IRQHandler+0x30a>
 8007ff4:	e12e      	b.n	8008254 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	187a      	adds	r2, r7, r1
 8007ffa:	215a      	movs	r1, #90	; 0x5a
 8007ffc:	8812      	ldrh	r2, [r2, #0]
 8007ffe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	2b20      	cmp	r3, #32
 8008008:	d06e      	beq.n	80080e8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800a:	f3ef 8310 	mrs	r3, PRIMASK
 800800e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008012:	67bb      	str	r3, [r7, #120]	; 0x78
 8008014:	2301      	movs	r3, #1
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801a:	f383 8810 	msr	PRIMASK, r3
}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	498e      	ldr	r1, [pc, #568]	; (8008264 <HAL_UART_IRQHandler+0x578>)
 800802c:	400a      	ands	r2, r1
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008032:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	f383 8810 	msr	PRIMASK, r3
}
 800803a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803c:	f3ef 8310 	mrs	r3, PRIMASK
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008044:	677b      	str	r3, [r7, #116]	; 0x74
 8008046:	2301      	movs	r3, #1
 8008048:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2101      	movs	r1, #1
 800805e:	438a      	bics	r2, r1
 8008060:	609a      	str	r2, [r3, #8]
 8008062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008064:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008068:	f383 8810 	msr	PRIMASK, r3
}
 800806c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800806e:	f3ef 8310 	mrs	r3, PRIMASK
 8008072:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008074:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008076:	673b      	str	r3, [r7, #112]	; 0x70
 8008078:	2301      	movs	r3, #1
 800807a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800807c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807e:	f383 8810 	msr	PRIMASK, r3
}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2140      	movs	r1, #64	; 0x40
 8008090:	438a      	bics	r2, r1
 8008092:	609a      	str	r2, [r3, #8]
 8008094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008096:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809a:	f383 8810 	msr	PRIMASK, r3
}
 800809e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ac:	f3ef 8310 	mrs	r3, PRIMASK
 80080b0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80080b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080b6:	2301      	movs	r3, #1
 80080b8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080bc:	f383 8810 	msr	PRIMASK, r3
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2110      	movs	r1, #16
 80080ce:	438a      	bics	r2, r1
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d8:	f383 8810 	msr	PRIMASK, r3
}
 80080dc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	0018      	movs	r0, r3
 80080e4:	f7fc ff56 	bl	8004f94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2258      	movs	r2, #88	; 0x58
 80080ec:	5a9a      	ldrh	r2, [r3, r2]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	215a      	movs	r1, #90	; 0x5a
 80080f2:	5a5b      	ldrh	r3, [r3, r1]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	0011      	movs	r1, r2
 80080fe:	0018      	movs	r0, r3
 8008100:	f000 f8cc 	bl	800829c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008104:	e0a6      	b.n	8008254 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2258      	movs	r2, #88	; 0x58
 800810a:	5a99      	ldrh	r1, [r3, r2]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	225a      	movs	r2, #90	; 0x5a
 8008110:	5a9b      	ldrh	r3, [r3, r2]
 8008112:	b29a      	uxth	r2, r3
 8008114:	208e      	movs	r0, #142	; 0x8e
 8008116:	183b      	adds	r3, r7, r0
 8008118:	1a8a      	subs	r2, r1, r2
 800811a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	225a      	movs	r2, #90	; 0x5a
 8008120:	5a9b      	ldrh	r3, [r3, r2]
 8008122:	b29b      	uxth	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d100      	bne.n	800812a <HAL_UART_IRQHandler+0x43e>
 8008128:	e096      	b.n	8008258 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800812a:	183b      	adds	r3, r7, r0
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d100      	bne.n	8008134 <HAL_UART_IRQHandler+0x448>
 8008132:	e091      	b.n	8008258 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	60fb      	str	r3, [r7, #12]
  return(result);
 800813a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813c:	2488      	movs	r4, #136	; 0x88
 800813e:	193a      	adds	r2, r7, r4
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	2301      	movs	r3, #1
 8008144:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f383 8810 	msr	PRIMASK, r3
}
 800814c:	46c0      	nop			; (mov r8, r8)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4943      	ldr	r1, [pc, #268]	; (8008268 <HAL_UART_IRQHandler+0x57c>)
 800815a:	400a      	ands	r2, r1
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	193b      	adds	r3, r7, r4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f383 8810 	msr	PRIMASK, r3
}
 800816a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816c:	f3ef 8310 	mrs	r3, PRIMASK
 8008170:	61bb      	str	r3, [r7, #24]
  return(result);
 8008172:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008174:	2484      	movs	r4, #132	; 0x84
 8008176:	193a      	adds	r2, r7, r4
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	2301      	movs	r3, #1
 800817c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f383 8810 	msr	PRIMASK, r3
}
 8008184:	46c0      	nop			; (mov r8, r8)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2101      	movs	r1, #1
 8008192:	438a      	bics	r2, r1
 8008194:	609a      	str	r2, [r3, #8]
 8008196:	193b      	adds	r3, r7, r4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	f383 8810 	msr	PRIMASK, r3
}
 80081a2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b6:	f3ef 8310 	mrs	r3, PRIMASK
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081be:	2480      	movs	r4, #128	; 0x80
 80081c0:	193a      	adds	r2, r7, r4
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	2301      	movs	r3, #1
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f383 8810 	msr	PRIMASK, r3
}
 80081ce:	46c0      	nop			; (mov r8, r8)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2110      	movs	r1, #16
 80081dc:	438a      	bics	r2, r1
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	193b      	adds	r3, r7, r4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	f383 8810 	msr	PRIMASK, r3
}
 80081ec:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081ee:	183b      	adds	r3, r7, r0
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	0011      	movs	r1, r2
 80081f6:	0018      	movs	r0, r3
 80081f8:	f000 f850 	bl	800829c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081fc:	e02c      	b.n	8008258 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80081fe:	23a4      	movs	r3, #164	; 0xa4
 8008200:	18fb      	adds	r3, r7, r3
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2280      	movs	r2, #128	; 0x80
 8008206:	4013      	ands	r3, r2
 8008208:	d00f      	beq.n	800822a <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800820a:	23a0      	movs	r3, #160	; 0xa0
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2280      	movs	r2, #128	; 0x80
 8008212:	4013      	ands	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01e      	beq.n	800825c <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	0010      	movs	r0, r2
 8008226:	4798      	blx	r3
    }
    return;
 8008228:	e018      	b.n	800825c <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800822a:	23a4      	movs	r3, #164	; 0xa4
 800822c:	18fb      	adds	r3, r7, r3
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2240      	movs	r2, #64	; 0x40
 8008232:	4013      	ands	r3, r2
 8008234:	d013      	beq.n	800825e <HAL_UART_IRQHandler+0x572>
 8008236:	23a0      	movs	r3, #160	; 0xa0
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2240      	movs	r2, #64	; 0x40
 800823e:	4013      	ands	r3, r2
 8008240:	d00d      	beq.n	800825e <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	0018      	movs	r0, r3
 8008246:	f000 fdd7 	bl	8008df8 <UART_EndTransmit_IT>
    return;
 800824a:	e008      	b.n	800825e <HAL_UART_IRQHandler+0x572>
      return;
 800824c:	46c0      	nop			; (mov r8, r8)
 800824e:	e006      	b.n	800825e <HAL_UART_IRQHandler+0x572>
    return;
 8008250:	46c0      	nop			; (mov r8, r8)
 8008252:	e004      	b.n	800825e <HAL_UART_IRQHandler+0x572>
      return;
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	e002      	b.n	800825e <HAL_UART_IRQHandler+0x572>
      return;
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	e000      	b.n	800825e <HAL_UART_IRQHandler+0x572>
    return;
 800825c:	46c0      	nop			; (mov r8, r8)
  }

}
 800825e:	46bd      	mov	sp, r7
 8008260:	b02b      	add	sp, #172	; 0xac
 8008262:	bd90      	pop	{r4, r7, pc}
 8008264:	fffffeff 	.word	0xfffffeff
 8008268:	fffffedf 	.word	0xfffffedf

0800826c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	46bd      	mov	sp, r7
 8008278:	b002      	add	sp, #8
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	46bd      	mov	sp, r7
 8008288:	b002      	add	sp, #8
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46bd      	mov	sp, r7
 8008298:	b002      	add	sp, #8
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	000a      	movs	r2, r1
 80082a6:	1cbb      	adds	r3, r7, #2
 80082a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	46bd      	mov	sp, r7
 80082ae:	b002      	add	sp, #8
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082bc:	231e      	movs	r3, #30
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a97      	ldr	r2, [pc, #604]	; (8008540 <UART_SetConfig+0x28c>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	0019      	movs	r1, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4a92      	ldr	r2, [pc, #584]	; (8008544 <UART_SetConfig+0x290>)
 80082fa:	4013      	ands	r3, r2
 80082fc:	0019      	movs	r1, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	4a89      	ldr	r2, [pc, #548]	; (8008548 <UART_SetConfig+0x294>)
 8008322:	4013      	ands	r3, r2
 8008324:	0019      	movs	r1, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	430a      	orrs	r2, r1
 800832e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a85      	ldr	r2, [pc, #532]	; (800854c <UART_SetConfig+0x298>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d127      	bne.n	800838a <UART_SetConfig+0xd6>
 800833a:	4b85      	ldr	r3, [pc, #532]	; (8008550 <UART_SetConfig+0x29c>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	2203      	movs	r2, #3
 8008340:	4013      	ands	r3, r2
 8008342:	2b03      	cmp	r3, #3
 8008344:	d00d      	beq.n	8008362 <UART_SetConfig+0xae>
 8008346:	d81b      	bhi.n	8008380 <UART_SetConfig+0xcc>
 8008348:	2b02      	cmp	r3, #2
 800834a:	d014      	beq.n	8008376 <UART_SetConfig+0xc2>
 800834c:	d818      	bhi.n	8008380 <UART_SetConfig+0xcc>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <UART_SetConfig+0xa4>
 8008352:	2b01      	cmp	r3, #1
 8008354:	d00a      	beq.n	800836c <UART_SetConfig+0xb8>
 8008356:	e013      	b.n	8008380 <UART_SetConfig+0xcc>
 8008358:	231f      	movs	r3, #31
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e035      	b.n	80083ce <UART_SetConfig+0x11a>
 8008362:	231f      	movs	r3, #31
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	2202      	movs	r2, #2
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e030      	b.n	80083ce <UART_SetConfig+0x11a>
 800836c:	231f      	movs	r3, #31
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	2204      	movs	r2, #4
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e02b      	b.n	80083ce <UART_SetConfig+0x11a>
 8008376:	231f      	movs	r3, #31
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	2208      	movs	r2, #8
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	e026      	b.n	80083ce <UART_SetConfig+0x11a>
 8008380:	231f      	movs	r3, #31
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	2210      	movs	r2, #16
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e021      	b.n	80083ce <UART_SetConfig+0x11a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a71      	ldr	r2, [pc, #452]	; (8008554 <UART_SetConfig+0x2a0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d104      	bne.n	800839e <UART_SetConfig+0xea>
 8008394:	231f      	movs	r3, #31
 8008396:	18fb      	adds	r3, r7, r3
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e017      	b.n	80083ce <UART_SetConfig+0x11a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a6d      	ldr	r2, [pc, #436]	; (8008558 <UART_SetConfig+0x2a4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d104      	bne.n	80083b2 <UART_SetConfig+0xfe>
 80083a8:	231f      	movs	r3, #31
 80083aa:	18fb      	adds	r3, r7, r3
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e00d      	b.n	80083ce <UART_SetConfig+0x11a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a69      	ldr	r2, [pc, #420]	; (800855c <UART_SetConfig+0x2a8>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d104      	bne.n	80083c6 <UART_SetConfig+0x112>
 80083bc:	231f      	movs	r3, #31
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	2200      	movs	r2, #0
 80083c2:	701a      	strb	r2, [r3, #0]
 80083c4:	e003      	b.n	80083ce <UART_SetConfig+0x11a>
 80083c6:	231f      	movs	r3, #31
 80083c8:	18fb      	adds	r3, r7, r3
 80083ca:	2210      	movs	r2, #16
 80083cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69da      	ldr	r2, [r3, #28]
 80083d2:	2380      	movs	r3, #128	; 0x80
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d15d      	bne.n	8008496 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80083da:	231f      	movs	r3, #31
 80083dc:	18fb      	adds	r3, r7, r3
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d015      	beq.n	8008410 <UART_SetConfig+0x15c>
 80083e4:	dc18      	bgt.n	8008418 <UART_SetConfig+0x164>
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d00d      	beq.n	8008406 <UART_SetConfig+0x152>
 80083ea:	dc15      	bgt.n	8008418 <UART_SetConfig+0x164>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <UART_SetConfig+0x142>
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d005      	beq.n	8008400 <UART_SetConfig+0x14c>
 80083f4:	e010      	b.n	8008418 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f6:	f7fd fd3b 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 80083fa:	0003      	movs	r3, r0
 80083fc:	61bb      	str	r3, [r7, #24]
        break;
 80083fe:	e012      	b.n	8008426 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008400:	4b57      	ldr	r3, [pc, #348]	; (8008560 <UART_SetConfig+0x2ac>)
 8008402:	61bb      	str	r3, [r7, #24]
        break;
 8008404:	e00f      	b.n	8008426 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008406:	f7fd fcc3 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 800840a:	0003      	movs	r3, r0
 800840c:	61bb      	str	r3, [r7, #24]
        break;
 800840e:	e00a      	b.n	8008426 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008410:	2380      	movs	r3, #128	; 0x80
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	61bb      	str	r3, [r7, #24]
        break;
 8008416:	e006      	b.n	8008426 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800841c:	231e      	movs	r3, #30
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	2201      	movs	r2, #1
 8008422:	701a      	strb	r2, [r3, #0]
        break;
 8008424:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d100      	bne.n	800842e <UART_SetConfig+0x17a>
 800842c:	e07b      	b.n	8008526 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	005a      	lsls	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	18d2      	adds	r2, r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	0019      	movs	r1, r3
 8008440:	0010      	movs	r0, r2
 8008442:	f7f7 fe87 	bl	8000154 <__udivsi3>
 8008446:	0003      	movs	r3, r0
 8008448:	b29b      	uxth	r3, r3
 800844a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d91c      	bls.n	800848c <UART_SetConfig+0x1d8>
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	2380      	movs	r3, #128	; 0x80
 8008456:	025b      	lsls	r3, r3, #9
 8008458:	429a      	cmp	r2, r3
 800845a:	d217      	bcs.n	800848c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	b29a      	uxth	r2, r3
 8008460:	200e      	movs	r0, #14
 8008462:	183b      	adds	r3, r7, r0
 8008464:	210f      	movs	r1, #15
 8008466:	438a      	bics	r2, r1
 8008468:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	b29b      	uxth	r3, r3
 8008470:	2207      	movs	r2, #7
 8008472:	4013      	ands	r3, r2
 8008474:	b299      	uxth	r1, r3
 8008476:	183b      	adds	r3, r7, r0
 8008478:	183a      	adds	r2, r7, r0
 800847a:	8812      	ldrh	r2, [r2, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	183a      	adds	r2, r7, r0
 8008486:	8812      	ldrh	r2, [r2, #0]
 8008488:	60da      	str	r2, [r3, #12]
 800848a:	e04c      	b.n	8008526 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800848c:	231e      	movs	r3, #30
 800848e:	18fb      	adds	r3, r7, r3
 8008490:	2201      	movs	r2, #1
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	e047      	b.n	8008526 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008496:	231f      	movs	r3, #31
 8008498:	18fb      	adds	r3, r7, r3
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b08      	cmp	r3, #8
 800849e:	d015      	beq.n	80084cc <UART_SetConfig+0x218>
 80084a0:	dc18      	bgt.n	80084d4 <UART_SetConfig+0x220>
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d00d      	beq.n	80084c2 <UART_SetConfig+0x20e>
 80084a6:	dc15      	bgt.n	80084d4 <UART_SetConfig+0x220>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <UART_SetConfig+0x1fe>
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d005      	beq.n	80084bc <UART_SetConfig+0x208>
 80084b0:	e010      	b.n	80084d4 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b2:	f7fd fcdd 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 80084b6:	0003      	movs	r3, r0
 80084b8:	61bb      	str	r3, [r7, #24]
        break;
 80084ba:	e012      	b.n	80084e2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084bc:	4b28      	ldr	r3, [pc, #160]	; (8008560 <UART_SetConfig+0x2ac>)
 80084be:	61bb      	str	r3, [r7, #24]
        break;
 80084c0:	e00f      	b.n	80084e2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c2:	f7fd fc65 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80084c6:	0003      	movs	r3, r0
 80084c8:	61bb      	str	r3, [r7, #24]
        break;
 80084ca:	e00a      	b.n	80084e2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	61bb      	str	r3, [r7, #24]
        break;
 80084d2:	e006      	b.n	80084e2 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084d8:	231e      	movs	r3, #30
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	2201      	movs	r2, #1
 80084de:	701a      	strb	r2, [r3, #0]
        break;
 80084e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01e      	beq.n	8008526 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	085a      	lsrs	r2, r3, #1
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	18d2      	adds	r2, r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	0019      	movs	r1, r3
 80084f8:	0010      	movs	r0, r2
 80084fa:	f7f7 fe2b 	bl	8000154 <__udivsi3>
 80084fe:	0003      	movs	r3, r0
 8008500:	b29b      	uxth	r3, r3
 8008502:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b0f      	cmp	r3, #15
 8008508:	d909      	bls.n	800851e <UART_SetConfig+0x26a>
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	2380      	movs	r3, #128	; 0x80
 800850e:	025b      	lsls	r3, r3, #9
 8008510:	429a      	cmp	r2, r3
 8008512:	d204      	bcs.n	800851e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	60da      	str	r2, [r3, #12]
 800851c:	e003      	b.n	8008526 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800851e:	231e      	movs	r3, #30
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	2201      	movs	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008532:	231e      	movs	r3, #30
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	781b      	ldrb	r3, [r3, #0]
}
 8008538:	0018      	movs	r0, r3
 800853a:	46bd      	mov	sp, r7
 800853c:	b008      	add	sp, #32
 800853e:	bd80      	pop	{r7, pc}
 8008540:	efff69f3 	.word	0xefff69f3
 8008544:	ffffcfff 	.word	0xffffcfff
 8008548:	fffff4ff 	.word	0xfffff4ff
 800854c:	40013800 	.word	0x40013800
 8008550:	40021000 	.word	0x40021000
 8008554:	40004400 	.word	0x40004400
 8008558:	40004800 	.word	0x40004800
 800855c:	40004c00 	.word	0x40004c00
 8008560:	007a1200 	.word	0x007a1200

08008564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2201      	movs	r2, #1
 8008572:	4013      	ands	r3, r2
 8008574:	d00b      	beq.n	800858e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4a4a      	ldr	r2, [pc, #296]	; (80086a8 <UART_AdvFeatureConfig+0x144>)
 800857e:	4013      	ands	r3, r2
 8008580:	0019      	movs	r1, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	2202      	movs	r2, #2
 8008594:	4013      	ands	r3, r2
 8008596:	d00b      	beq.n	80085b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	4a43      	ldr	r2, [pc, #268]	; (80086ac <UART_AdvFeatureConfig+0x148>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	0019      	movs	r1, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	2204      	movs	r2, #4
 80085b6:	4013      	ands	r3, r2
 80085b8:	d00b      	beq.n	80085d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a3b      	ldr	r2, [pc, #236]	; (80086b0 <UART_AdvFeatureConfig+0x14c>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	0019      	movs	r1, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2208      	movs	r2, #8
 80085d8:	4013      	ands	r3, r2
 80085da:	d00b      	beq.n	80085f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	4a34      	ldr	r2, [pc, #208]	; (80086b4 <UART_AdvFeatureConfig+0x150>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	0019      	movs	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2210      	movs	r2, #16
 80085fa:	4013      	ands	r3, r2
 80085fc:	d00b      	beq.n	8008616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	4a2c      	ldr	r2, [pc, #176]	; (80086b8 <UART_AdvFeatureConfig+0x154>)
 8008606:	4013      	ands	r3, r2
 8008608:	0019      	movs	r1, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	2220      	movs	r2, #32
 800861c:	4013      	ands	r3, r2
 800861e:	d00b      	beq.n	8008638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	4a25      	ldr	r2, [pc, #148]	; (80086bc <UART_AdvFeatureConfig+0x158>)
 8008628:	4013      	ands	r3, r2
 800862a:	0019      	movs	r1, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2240      	movs	r2, #64	; 0x40
 800863e:	4013      	ands	r3, r2
 8008640:	d01d      	beq.n	800867e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <UART_AdvFeatureConfig+0x15c>)
 800864a:	4013      	ands	r3, r2
 800864c:	0019      	movs	r1, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800865e:	2380      	movs	r3, #128	; 0x80
 8008660:	035b      	lsls	r3, r3, #13
 8008662:	429a      	cmp	r2, r3
 8008664:	d10b      	bne.n	800867e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <UART_AdvFeatureConfig+0x160>)
 800866e:	4013      	ands	r3, r2
 8008670:	0019      	movs	r1, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2280      	movs	r2, #128	; 0x80
 8008684:	4013      	ands	r3, r2
 8008686:	d00b      	beq.n	80086a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	4a0e      	ldr	r2, [pc, #56]	; (80086c8 <UART_AdvFeatureConfig+0x164>)
 8008690:	4013      	ands	r3, r2
 8008692:	0019      	movs	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	605a      	str	r2, [r3, #4]
  }
}
 80086a0:	46c0      	nop			; (mov r8, r8)
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b002      	add	sp, #8
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	fffdffff 	.word	0xfffdffff
 80086ac:	fffeffff 	.word	0xfffeffff
 80086b0:	fffbffff 	.word	0xfffbffff
 80086b4:	ffff7fff 	.word	0xffff7fff
 80086b8:	ffffefff 	.word	0xffffefff
 80086bc:	ffffdfff 	.word	0xffffdfff
 80086c0:	ffefffff 	.word	0xffefffff
 80086c4:	ff9fffff 	.word	0xff9fffff
 80086c8:	fff7ffff 	.word	0xfff7ffff

080086cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2280      	movs	r2, #128	; 0x80
 80086d8:	2100      	movs	r1, #0
 80086da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086dc:	f7fc faa0 	bl	8004c20 <HAL_GetTick>
 80086e0:	0003      	movs	r3, r0
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2208      	movs	r2, #8
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	d10c      	bne.n	800870c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2280      	movs	r2, #128	; 0x80
 80086f6:	0391      	lsls	r1, r2, #14
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4a17      	ldr	r2, [pc, #92]	; (8008758 <UART_CheckIdleState+0x8c>)
 80086fc:	9200      	str	r2, [sp, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	f000 f82c 	bl	800875c <UART_WaitOnFlagUntilTimeout>
 8008704:	1e03      	subs	r3, r0, #0
 8008706:	d001      	beq.n	800870c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e021      	b.n	8008750 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2204      	movs	r2, #4
 8008714:	4013      	ands	r3, r2
 8008716:	2b04      	cmp	r3, #4
 8008718:	d10c      	bne.n	8008734 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2280      	movs	r2, #128	; 0x80
 800871e:	03d1      	lsls	r1, r2, #15
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <UART_CheckIdleState+0x8c>)
 8008724:	9200      	str	r2, [sp, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	f000 f818 	bl	800875c <UART_WaitOnFlagUntilTimeout>
 800872c:	1e03      	subs	r3, r0, #0
 800872e:	d001      	beq.n	8008734 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e00d      	b.n	8008750 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2274      	movs	r2, #116	; 0x74
 800874a:	2100      	movs	r1, #0
 800874c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	0018      	movs	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	b004      	add	sp, #16
 8008756:	bd80      	pop	{r7, pc}
 8008758:	01ffffff 	.word	0x01ffffff

0800875c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b094      	sub	sp, #80	; 0x50
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	1dfb      	adds	r3, r7, #7
 800876a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800876c:	e0a3      	b.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008770:	3301      	adds	r3, #1
 8008772:	d100      	bne.n	8008776 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008774:	e09f      	b.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008776:	f7fc fa53 	bl	8004c20 <HAL_GetTick>
 800877a:	0002      	movs	r2, r0
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008782:	429a      	cmp	r2, r3
 8008784:	d302      	bcc.n	800878c <UART_WaitOnFlagUntilTimeout+0x30>
 8008786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008788:	2b00      	cmp	r3, #0
 800878a:	d13d      	bne.n	8008808 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878c:	f3ef 8310 	mrs	r3, PRIMASK
 8008790:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008794:	647b      	str	r3, [r7, #68]	; 0x44
 8008796:	2301      	movs	r3, #1
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	f383 8810 	msr	PRIMASK, r3
}
 80087a0:	46c0      	nop			; (mov r8, r8)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	494c      	ldr	r1, [pc, #304]	; (80088e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80087ae:	400a      	ands	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f383 8810 	msr	PRIMASK, r3
}
 80087bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087be:	f3ef 8310 	mrs	r3, PRIMASK
 80087c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c6:	643b      	str	r3, [r7, #64]	; 0x40
 80087c8:	2301      	movs	r3, #1
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2101      	movs	r1, #1
 80087e0:	438a      	bics	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]
 80087e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ea:	f383 8810 	msr	PRIMASK, r3
}
 80087ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2220      	movs	r2, #32
 80087f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2274      	movs	r2, #116	; 0x74
 8008800:	2100      	movs	r1, #0
 8008802:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e067      	b.n	80088d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2204      	movs	r2, #4
 8008810:	4013      	ands	r3, r2
 8008812:	d050      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	2380      	movs	r3, #128	; 0x80
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	401a      	ands	r2, r3
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	429a      	cmp	r2, r3
 8008826:	d146      	bne.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2280      	movs	r2, #128	; 0x80
 800882e:	0112      	lsls	r2, r2, #4
 8008830:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008832:	f3ef 8310 	mrs	r3, PRIMASK
 8008836:	613b      	str	r3, [r7, #16]
  return(result);
 8008838:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800883a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800883c:	2301      	movs	r3, #1
 800883e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f383 8810 	msr	PRIMASK, r3
}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4923      	ldr	r1, [pc, #140]	; (80088e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008854:	400a      	ands	r2, r1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	f383 8810 	msr	PRIMASK, r3
}
 8008862:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008864:	f3ef 8310 	mrs	r3, PRIMASK
 8008868:	61fb      	str	r3, [r7, #28]
  return(result);
 800886a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800886c:	64bb      	str	r3, [r7, #72]	; 0x48
 800886e:	2301      	movs	r3, #1
 8008870:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	f383 8810 	msr	PRIMASK, r3
}
 8008878:	46c0      	nop			; (mov r8, r8)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2101      	movs	r1, #1
 8008886:	438a      	bics	r2, r1
 8008888:	609a      	str	r2, [r3, #8]
 800888a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	f383 8810 	msr	PRIMASK, r3
}
 8008894:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2220      	movs	r2, #32
 800889a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2280      	movs	r2, #128	; 0x80
 80088a6:	2120      	movs	r1, #32
 80088a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2274      	movs	r2, #116	; 0x74
 80088ae:	2100      	movs	r1, #0
 80088b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e010      	b.n	80088d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	4013      	ands	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	425a      	negs	r2, r3
 80088c6:	4153      	adcs	r3, r2
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	001a      	movs	r2, r3
 80088cc:	1dfb      	adds	r3, r7, #7
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d100      	bne.n	80088d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80088d4:	e74b      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	0018      	movs	r0, r3
 80088da:	46bd      	mov	sp, r7
 80088dc:	b014      	add	sp, #80	; 0x50
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	fffffe5f 	.word	0xfffffe5f

080088e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b090      	sub	sp, #64	; 0x40
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	1dbb      	adds	r3, r7, #6
 80088f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	1dba      	adds	r2, r7, #6
 80088fc:	2158      	movs	r1, #88	; 0x58
 80088fe:	8812      	ldrh	r2, [r2, #0]
 8008900:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2280      	movs	r2, #128	; 0x80
 8008906:	2100      	movs	r1, #0
 8008908:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2222      	movs	r2, #34	; 0x22
 800890e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008914:	2b00      	cmp	r3, #0
 8008916:	d02b      	beq.n	8008970 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	4a3f      	ldr	r2, [pc, #252]	; (8008a1c <UART_Start_Receive_DMA+0x138>)
 800891e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	4a3e      	ldr	r2, [pc, #248]	; (8008a20 <UART_Start_Receive_DMA+0x13c>)
 8008926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892c:	4a3d      	ldr	r2, [pc, #244]	; (8008a24 <UART_Start_Receive_DMA+0x140>)
 800892e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008934:	2200      	movs	r2, #0
 8008936:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3324      	adds	r3, #36	; 0x24
 8008942:	0019      	movs	r1, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008948:	001a      	movs	r2, r3
 800894a:	1dbb      	adds	r3, r7, #6
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	f7fc fabb 	bl	8004ec8 <HAL_DMA_Start_IT>
 8008952:	1e03      	subs	r3, r0, #0
 8008954:	d00c      	beq.n	8008970 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2280      	movs	r2, #128	; 0x80
 800895a:	2110      	movs	r1, #16
 800895c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2274      	movs	r2, #116	; 0x74
 8008962:	2100      	movs	r1, #0
 8008964:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e050      	b.n	8008a12 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2274      	movs	r2, #116	; 0x74
 8008974:	2100      	movs	r1, #0
 8008976:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008978:	f3ef 8310 	mrs	r3, PRIMASK
 800897c:	613b      	str	r3, [r7, #16]
  return(result);
 800897e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008982:	2301      	movs	r3, #1
 8008984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f383 8810 	msr	PRIMASK, r3
}
 800898c:	46c0      	nop			; (mov r8, r8)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	0049      	lsls	r1, r1, #1
 800899c:	430a      	orrs	r2, r1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f383 8810 	msr	PRIMASK, r3
}
 80089aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ac:	f3ef 8310 	mrs	r3, PRIMASK
 80089b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80089b2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80089b6:	2301      	movs	r3, #1
 80089b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	f383 8810 	msr	PRIMASK, r3
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2101      	movs	r1, #1
 80089ce:	430a      	orrs	r2, r1
 80089d0:	609a      	str	r2, [r3, #8]
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	f383 8810 	msr	PRIMASK, r3
}
 80089dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089de:	f3ef 8310 	mrs	r3, PRIMASK
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e6:	637b      	str	r3, [r7, #52]	; 0x34
 80089e8:	2301      	movs	r3, #1
 80089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	f383 8810 	msr	PRIMASK, r3
}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2140      	movs	r1, #64	; 0x40
 8008a00:	430a      	orrs	r2, r1
 8008a02:	609a      	str	r2, [r3, #8]
 8008a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a06:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	f383 8810 	msr	PRIMASK, r3
}
 8008a0e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b010      	add	sp, #64	; 0x40
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	08008be9 	.word	0x08008be9
 8008a20:	08008d0d 	.word	0x08008d0d
 8008a24:	08008d49 	.word	0x08008d49

08008a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a30:	f3ef 8310 	mrs	r3, PRIMASK
 8008a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a36:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f383 8810 	msr	PRIMASK, r3
}
 8008a44:	46c0      	nop			; (mov r8, r8)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	21c0      	movs	r1, #192	; 0xc0
 8008a52:	438a      	bics	r2, r1
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f383 8810 	msr	PRIMASK, r3
}
 8008a60:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008a68:	46c0      	nop			; (mov r8, r8)
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b006      	add	sp, #24
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08e      	sub	sp, #56	; 0x38
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a78:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008a7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a80:	637b      	str	r3, [r7, #52]	; 0x34
 8008a82:	2301      	movs	r3, #1
 8008a84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f383 8810 	msr	PRIMASK, r3
}
 8008a8c:	46c0      	nop			; (mov r8, r8)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4925      	ldr	r1, [pc, #148]	; (8008b30 <UART_EndRxTransfer+0xc0>)
 8008a9a:	400a      	ands	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	f383 8810 	msr	PRIMASK, r3
}
 8008aa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8008aae:	623b      	str	r3, [r7, #32]
  return(result);
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	f383 8810 	msr	PRIMASK, r3
}
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2101      	movs	r1, #1
 8008acc:	438a      	bics	r2, r1
 8008ace:	609a      	str	r2, [r3, #8]
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	f383 8810 	msr	PRIMASK, r3
}
 8008ada:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d118      	bne.n	8008b16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008aea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aee:	2301      	movs	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f383 8810 	msr	PRIMASK, r3
}
 8008af8:	46c0      	nop			; (mov r8, r8)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2110      	movs	r1, #16
 8008b06:	438a      	bics	r2, r1
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f383 8810 	msr	PRIMASK, r3
}
 8008b14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008b28:	46c0      	nop			; (mov r8, r8)
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b00e      	add	sp, #56	; 0x38
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	fffffedf 	.word	0xfffffedf

08008b34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08c      	sub	sp, #48	; 0x30
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d035      	beq.n	8008bb6 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	2252      	movs	r2, #82	; 0x52
 8008b4e:	2100      	movs	r1, #0
 8008b50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b52:	f3ef 8310 	mrs	r3, PRIMASK
 8008b56:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b58:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f383 8810 	msr	PRIMASK, r3
}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	438a      	bics	r2, r1
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f383 8810 	msr	PRIMASK, r3
}
 8008b82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b84:	f3ef 8310 	mrs	r3, PRIMASK
 8008b88:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b8a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8e:	2301      	movs	r3, #1
 8008b90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	46c0      	nop			; (mov r8, r8)
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2140      	movs	r1, #64	; 0x40
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	f383 8810 	msr	PRIMASK, r3
}
 8008bb4:	e004      	b.n	8008bc0 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f7fb fc13 	bl	80043e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	46c0      	nop			; (mov r8, r8)
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	b00c      	add	sp, #48	; 0x30
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7ff fb47 	bl	800826c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bde:	46c0      	nop			; (mov r8, r8)
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b004      	add	sp, #16
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b094      	sub	sp, #80	; 0x50
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d06e      	beq.n	8008cdc <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8008bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c00:	225a      	movs	r2, #90	; 0x5a
 8008c02:	2100      	movs	r1, #0
 8008c04:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c06:	f3ef 8310 	mrs	r3, PRIMASK
 8008c0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c0c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c10:	2301      	movs	r3, #1
 8008c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f383 8810 	msr	PRIMASK, r3
}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4938      	ldr	r1, [pc, #224]	; (8008d08 <UART_DMAReceiveCplt+0x120>)
 8008c28:	400a      	ands	r2, r1
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	f383 8810 	msr	PRIMASK, r3
}
 8008c36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c38:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c40:	647b      	str	r3, [r7, #68]	; 0x44
 8008c42:	2301      	movs	r3, #1
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	f383 8810 	msr	PRIMASK, r3
}
 8008c4c:	46c0      	nop			; (mov r8, r8)
 8008c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2101      	movs	r1, #1
 8008c5a:	438a      	bics	r2, r1
 8008c5c:	609a      	str	r2, [r3, #8]
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	f383 8810 	msr	PRIMASK, r3
}
 8008c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c72:	643b      	str	r3, [r7, #64]	; 0x40
 8008c74:	2301      	movs	r3, #1
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	f383 8810 	msr	PRIMASK, r3
}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2140      	movs	r1, #64	; 0x40
 8008c8c:	438a      	bics	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]
 8008c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	f383 8810 	msr	PRIMASK, r3
}
 8008c9a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d118      	bne.n	8008cdc <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008caa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f383 8810 	msr	PRIMASK, r3
}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2110      	movs	r1, #16
 8008ccc:	438a      	bics	r2, r1
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f383 8810 	msr	PRIMASK, r3
}
 8008cda:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d108      	bne.n	8008cf6 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce6:	2258      	movs	r2, #88	; 0x58
 8008ce8:	5a9a      	ldrh	r2, [r3, r2]
 8008cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cec:	0011      	movs	r1, r2
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f7ff fad4 	bl	800829c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cf4:	e003      	b.n	8008cfe <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8008cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7fb fb81 	bl	8004400 <HAL_UART_RxCpltCallback>
}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	46bd      	mov	sp, r7
 8008d02:	b014      	add	sp, #80	; 0x50
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	46c0      	nop			; (mov r8, r8)
 8008d08:	fffffeff 	.word	0xfffffeff

08008d0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d10a      	bne.n	8008d38 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2258      	movs	r2, #88	; 0x58
 8008d26:	5a9b      	ldrh	r3, [r3, r2]
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	0011      	movs	r1, r2
 8008d30:	0018      	movs	r0, r3
 8008d32:	f7ff fab3 	bl	800829c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d36:	e003      	b.n	8008d40 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f7ff fa9e 	bl	800827c <HAL_UART_RxHalfCpltCallback>
}
 8008d40:	46c0      	nop			; (mov r8, r8)
 8008d42:	46bd      	mov	sp, r7
 8008d44:	b004      	add	sp, #16
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2280      	movs	r2, #128	; 0x80
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b80      	cmp	r3, #128	; 0x80
 8008d6e:	d10a      	bne.n	8008d86 <UART_DMAError+0x3e>
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2b21      	cmp	r3, #33	; 0x21
 8008d74:	d107      	bne.n	8008d86 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2252      	movs	r2, #82	; 0x52
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7ff fe51 	bl	8008a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	2240      	movs	r2, #64	; 0x40
 8008d8e:	4013      	ands	r3, r2
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	d10a      	bne.n	8008daa <UART_DMAError+0x62>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b22      	cmp	r3, #34	; 0x22
 8008d98:	d107      	bne.n	8008daa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	225a      	movs	r2, #90	; 0x5a
 8008d9e:	2100      	movs	r1, #0
 8008da0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	0018      	movs	r0, r3
 8008da6:	f7ff fe63 	bl	8008a70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2280      	movs	r2, #128	; 0x80
 8008dae:	589b      	ldr	r3, [r3, r2]
 8008db0:	2210      	movs	r2, #16
 8008db2:	431a      	orrs	r2, r3
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2180      	movs	r1, #128	; 0x80
 8008db8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f7ff fa65 	bl	800828c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	b006      	add	sp, #24
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	225a      	movs	r2, #90	; 0x5a
 8008ddc:	2100      	movs	r1, #0
 8008dde:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2252      	movs	r2, #82	; 0x52
 8008de4:	2100      	movs	r1, #0
 8008de6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7ff fa4e 	bl	800828c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df0:	46c0      	nop			; (mov r8, r8)
 8008df2:	46bd      	mov	sp, r7
 8008df4:	b004      	add	sp, #16
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e00:	f3ef 8310 	mrs	r3, PRIMASK
 8008e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e06:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f383 8810 	msr	PRIMASK, r3
}
 8008e14:	46c0      	nop			; (mov r8, r8)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2140      	movs	r1, #64	; 0x40
 8008e22:	438a      	bics	r2, r1
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f383 8810 	msr	PRIMASK, r3
}
 8008e30:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	0018      	movs	r0, r3
 8008e42:	f7fb facf 	bl	80043e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b006      	add	sp, #24
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <__errno>:
 8008e50:	4b01      	ldr	r3, [pc, #4]	; (8008e58 <__errno+0x8>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	4770      	bx	lr
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	2000000c 	.word	0x2000000c

08008e5c <__libc_init_array>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	2600      	movs	r6, #0
 8008e60:	4d0c      	ldr	r5, [pc, #48]	; (8008e94 <__libc_init_array+0x38>)
 8008e62:	4c0d      	ldr	r4, [pc, #52]	; (8008e98 <__libc_init_array+0x3c>)
 8008e64:	1b64      	subs	r4, r4, r5
 8008e66:	10a4      	asrs	r4, r4, #2
 8008e68:	42a6      	cmp	r6, r4
 8008e6a:	d109      	bne.n	8008e80 <__libc_init_array+0x24>
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	f005 f975 	bl	800e15c <_init>
 8008e72:	4d0a      	ldr	r5, [pc, #40]	; (8008e9c <__libc_init_array+0x40>)
 8008e74:	4c0a      	ldr	r4, [pc, #40]	; (8008ea0 <__libc_init_array+0x44>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	42a6      	cmp	r6, r4
 8008e7c:	d105      	bne.n	8008e8a <__libc_init_array+0x2e>
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	00b3      	lsls	r3, r6, #2
 8008e82:	58eb      	ldr	r3, [r5, r3]
 8008e84:	4798      	blx	r3
 8008e86:	3601      	adds	r6, #1
 8008e88:	e7ee      	b.n	8008e68 <__libc_init_array+0xc>
 8008e8a:	00b3      	lsls	r3, r6, #2
 8008e8c:	58eb      	ldr	r3, [r5, r3]
 8008e8e:	4798      	blx	r3
 8008e90:	3601      	adds	r6, #1
 8008e92:	e7f2      	b.n	8008e7a <__libc_init_array+0x1e>
 8008e94:	0800e81c 	.word	0x0800e81c
 8008e98:	0800e81c 	.word	0x0800e81c
 8008e9c:	0800e81c 	.word	0x0800e81c
 8008ea0:	0800e820 	.word	0x0800e820

08008ea4 <memset>:
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	1882      	adds	r2, r0, r2
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	7019      	strb	r1, [r3, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <__cvt>:
 8008eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eb6:	001e      	movs	r6, r3
 8008eb8:	2300      	movs	r3, #0
 8008eba:	0014      	movs	r4, r2
 8008ebc:	b08b      	sub	sp, #44	; 0x2c
 8008ebe:	429e      	cmp	r6, r3
 8008ec0:	da04      	bge.n	8008ecc <__cvt+0x18>
 8008ec2:	2180      	movs	r1, #128	; 0x80
 8008ec4:	0609      	lsls	r1, r1, #24
 8008ec6:	1873      	adds	r3, r6, r1
 8008ec8:	001e      	movs	r6, r3
 8008eca:	232d      	movs	r3, #45	; 0x2d
 8008ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ece:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008ed0:	7013      	strb	r3, [r2, #0]
 8008ed2:	2320      	movs	r3, #32
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	439f      	bics	r7, r3
 8008ed8:	2f46      	cmp	r7, #70	; 0x46
 8008eda:	d007      	beq.n	8008eec <__cvt+0x38>
 8008edc:	003b      	movs	r3, r7
 8008ede:	3b45      	subs	r3, #69	; 0x45
 8008ee0:	4259      	negs	r1, r3
 8008ee2:	414b      	adcs	r3, r1
 8008ee4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	18cb      	adds	r3, r1, r3
 8008eea:	9310      	str	r3, [sp, #64]	; 0x40
 8008eec:	ab09      	add	r3, sp, #36	; 0x24
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	ab08      	add	r3, sp, #32
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ef6:	9200      	str	r2, [sp, #0]
 8008ef8:	9302      	str	r3, [sp, #8]
 8008efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008efc:	0022      	movs	r2, r4
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	0033      	movs	r3, r6
 8008f02:	f001 fe83 	bl	800ac0c <_dtoa_r>
 8008f06:	0005      	movs	r5, r0
 8008f08:	2f47      	cmp	r7, #71	; 0x47
 8008f0a:	d102      	bne.n	8008f12 <__cvt+0x5e>
 8008f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f0e:	07db      	lsls	r3, r3, #31
 8008f10:	d528      	bpl.n	8008f64 <__cvt+0xb0>
 8008f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f14:	18eb      	adds	r3, r5, r3
 8008f16:	9307      	str	r3, [sp, #28]
 8008f18:	2f46      	cmp	r7, #70	; 0x46
 8008f1a:	d114      	bne.n	8008f46 <__cvt+0x92>
 8008f1c:	782b      	ldrb	r3, [r5, #0]
 8008f1e:	2b30      	cmp	r3, #48	; 0x30
 8008f20:	d10c      	bne.n	8008f3c <__cvt+0x88>
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	0020      	movs	r0, r4
 8008f28:	0031      	movs	r1, r6
 8008f2a:	f7f7 fa99 	bl	8000460 <__aeabi_dcmpeq>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d104      	bne.n	8008f3c <__cvt+0x88>
 8008f32:	2301      	movs	r3, #1
 8008f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f3e:	9a07      	ldr	r2, [sp, #28]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	18d3      	adds	r3, r2, r3
 8008f44:	9307      	str	r3, [sp, #28]
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	0020      	movs	r0, r4
 8008f4c:	0031      	movs	r1, r6
 8008f4e:	f7f7 fa87 	bl	8000460 <__aeabi_dcmpeq>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d001      	beq.n	8008f5a <__cvt+0xa6>
 8008f56:	9b07      	ldr	r3, [sp, #28]
 8008f58:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5a:	2230      	movs	r2, #48	; 0x30
 8008f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5e:	9907      	ldr	r1, [sp, #28]
 8008f60:	428b      	cmp	r3, r1
 8008f62:	d306      	bcc.n	8008f72 <__cvt+0xbe>
 8008f64:	0028      	movs	r0, r5
 8008f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f6a:	1b5b      	subs	r3, r3, r5
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	b00b      	add	sp, #44	; 0x2c
 8008f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	9109      	str	r1, [sp, #36]	; 0x24
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	e7f0      	b.n	8008f5c <__cvt+0xa8>

08008f7a <__exponent>:
 8008f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f7c:	1c83      	adds	r3, r0, #2
 8008f7e:	b087      	sub	sp, #28
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	0005      	movs	r5, r0
 8008f84:	000c      	movs	r4, r1
 8008f86:	232b      	movs	r3, #43	; 0x2b
 8008f88:	7002      	strb	r2, [r0, #0]
 8008f8a:	2900      	cmp	r1, #0
 8008f8c:	da01      	bge.n	8008f92 <__exponent+0x18>
 8008f8e:	424c      	negs	r4, r1
 8008f90:	3302      	adds	r3, #2
 8008f92:	706b      	strb	r3, [r5, #1]
 8008f94:	2c09      	cmp	r4, #9
 8008f96:	dd31      	ble.n	8008ffc <__exponent+0x82>
 8008f98:	270a      	movs	r7, #10
 8008f9a:	ab04      	add	r3, sp, #16
 8008f9c:	1dde      	adds	r6, r3, #7
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	0039      	movs	r1, r7
 8008fa2:	9601      	str	r6, [sp, #4]
 8008fa4:	f7f7 fa46 	bl	8000434 <__aeabi_idivmod>
 8008fa8:	3e01      	subs	r6, #1
 8008faa:	3130      	adds	r1, #48	; 0x30
 8008fac:	0020      	movs	r0, r4
 8008fae:	7031      	strb	r1, [r6, #0]
 8008fb0:	0039      	movs	r1, r7
 8008fb2:	9402      	str	r4, [sp, #8]
 8008fb4:	f7f7 f958 	bl	8000268 <__divsi3>
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	0004      	movs	r4, r0
 8008fbc:	2b63      	cmp	r3, #99	; 0x63
 8008fbe:	dcee      	bgt.n	8008f9e <__exponent+0x24>
 8008fc0:	9b01      	ldr	r3, [sp, #4]
 8008fc2:	3430      	adds	r4, #48	; 0x30
 8008fc4:	1e9a      	subs	r2, r3, #2
 8008fc6:	0013      	movs	r3, r2
 8008fc8:	9903      	ldr	r1, [sp, #12]
 8008fca:	7014      	strb	r4, [r2, #0]
 8008fcc:	a804      	add	r0, sp, #16
 8008fce:	3007      	adds	r0, #7
 8008fd0:	4298      	cmp	r0, r3
 8008fd2:	d80e      	bhi.n	8008ff2 <__exponent+0x78>
 8008fd4:	ab04      	add	r3, sp, #16
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	2000      	movs	r0, #0
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d804      	bhi.n	8008fe8 <__exponent+0x6e>
 8008fde:	ab04      	add	r3, sp, #16
 8008fe0:	3009      	adds	r0, #9
 8008fe2:	18c0      	adds	r0, r0, r3
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	1ac0      	subs	r0, r0, r3
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	1818      	adds	r0, r3, r0
 8008fec:	1b40      	subs	r0, r0, r5
 8008fee:	b007      	add	sp, #28
 8008ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff2:	7818      	ldrb	r0, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	7008      	strb	r0, [r1, #0]
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	e7e7      	b.n	8008fcc <__exponent+0x52>
 8008ffc:	2330      	movs	r3, #48	; 0x30
 8008ffe:	18e4      	adds	r4, r4, r3
 8009000:	70ab      	strb	r3, [r5, #2]
 8009002:	1d28      	adds	r0, r5, #4
 8009004:	70ec      	strb	r4, [r5, #3]
 8009006:	e7f1      	b.n	8008fec <__exponent+0x72>

08009008 <_printf_float>:
 8009008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800900a:	b095      	sub	sp, #84	; 0x54
 800900c:	000c      	movs	r4, r1
 800900e:	9208      	str	r2, [sp, #32]
 8009010:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009012:	9309      	str	r3, [sp, #36]	; 0x24
 8009014:	0007      	movs	r7, r0
 8009016:	f002 ff89 	bl	800bf2c <_localeconv_r>
 800901a:	6803      	ldr	r3, [r0, #0]
 800901c:	0018      	movs	r0, r3
 800901e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009020:	f7f7 f87c 	bl	800011c <strlen>
 8009024:	2300      	movs	r3, #0
 8009026:	9312      	str	r3, [sp, #72]	; 0x48
 8009028:	7e23      	ldrb	r3, [r4, #24]
 800902a:	2207      	movs	r2, #7
 800902c:	001e      	movs	r6, r3
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	900d      	str	r0, [sp, #52]	; 0x34
 8009032:	930c      	str	r3, [sp, #48]	; 0x30
 8009034:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	05c9      	lsls	r1, r1, #23
 800903a:	d547      	bpl.n	80090cc <_printf_float+0xc4>
 800903c:	189b      	adds	r3, r3, r2
 800903e:	4393      	bics	r3, r2
 8009040:	001a      	movs	r2, r3
 8009042:	3208      	adds	r2, #8
 8009044:	602a      	str	r2, [r5, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	64a2      	str	r2, [r4, #72]	; 0x48
 800904c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800904e:	2201      	movs	r2, #1
 8009050:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009052:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009054:	930a      	str	r3, [sp, #40]	; 0x28
 8009056:	006b      	lsls	r3, r5, #1
 8009058:	085b      	lsrs	r3, r3, #1
 800905a:	930e      	str	r3, [sp, #56]	; 0x38
 800905c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800905e:	4ba8      	ldr	r3, [pc, #672]	; (8009300 <_printf_float+0x2f8>)
 8009060:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009062:	4252      	negs	r2, r2
 8009064:	f7f9 fab0 	bl	80025c8 <__aeabi_dcmpun>
 8009068:	2800      	cmp	r0, #0
 800906a:	d131      	bne.n	80090d0 <_printf_float+0xc8>
 800906c:	2201      	movs	r2, #1
 800906e:	4ba4      	ldr	r3, [pc, #656]	; (8009300 <_printf_float+0x2f8>)
 8009070:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009072:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009074:	4252      	negs	r2, r2
 8009076:	f7f7 fa03 	bl	8000480 <__aeabi_dcmple>
 800907a:	2800      	cmp	r0, #0
 800907c:	d128      	bne.n	80090d0 <_printf_float+0xc8>
 800907e:	2200      	movs	r2, #0
 8009080:	2300      	movs	r3, #0
 8009082:	0029      	movs	r1, r5
 8009084:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009086:	f7f7 f9f1 	bl	800046c <__aeabi_dcmplt>
 800908a:	2800      	cmp	r0, #0
 800908c:	d003      	beq.n	8009096 <_printf_float+0x8e>
 800908e:	0023      	movs	r3, r4
 8009090:	222d      	movs	r2, #45	; 0x2d
 8009092:	3343      	adds	r3, #67	; 0x43
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	4d9b      	ldr	r5, [pc, #620]	; (8009304 <_printf_float+0x2fc>)
 8009098:	2e47      	cmp	r6, #71	; 0x47
 800909a:	d900      	bls.n	800909e <_printf_float+0x96>
 800909c:	4d9a      	ldr	r5, [pc, #616]	; (8009308 <_printf_float+0x300>)
 800909e:	2303      	movs	r3, #3
 80090a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090a2:	6123      	str	r3, [r4, #16]
 80090a4:	3301      	adds	r3, #1
 80090a6:	439a      	bics	r2, r3
 80090a8:	2300      	movs	r3, #0
 80090aa:	6022      	str	r2, [r4, #0]
 80090ac:	930a      	str	r3, [sp, #40]	; 0x28
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	0021      	movs	r1, r4
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	0038      	movs	r0, r7
 80090b6:	9b08      	ldr	r3, [sp, #32]
 80090b8:	aa13      	add	r2, sp, #76	; 0x4c
 80090ba:	f000 f9f3 	bl	80094a4 <_printf_common>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d000      	beq.n	80090c4 <_printf_float+0xbc>
 80090c2:	e09e      	b.n	8009202 <_printf_float+0x1fa>
 80090c4:	2001      	movs	r0, #1
 80090c6:	4240      	negs	r0, r0
 80090c8:	b015      	add	sp, #84	; 0x54
 80090ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090cc:	3307      	adds	r3, #7
 80090ce:	e7b6      	b.n	800903e <_printf_float+0x36>
 80090d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090d2:	002b      	movs	r3, r5
 80090d4:	0010      	movs	r0, r2
 80090d6:	0029      	movs	r1, r5
 80090d8:	f7f9 fa76 	bl	80025c8 <__aeabi_dcmpun>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d00a      	beq.n	80090f6 <_printf_float+0xee>
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	da03      	bge.n	80090ec <_printf_float+0xe4>
 80090e4:	0023      	movs	r3, r4
 80090e6:	222d      	movs	r2, #45	; 0x2d
 80090e8:	3343      	adds	r3, #67	; 0x43
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	4d87      	ldr	r5, [pc, #540]	; (800930c <_printf_float+0x304>)
 80090ee:	2e47      	cmp	r6, #71	; 0x47
 80090f0:	d9d5      	bls.n	800909e <_printf_float+0x96>
 80090f2:	4d87      	ldr	r5, [pc, #540]	; (8009310 <_printf_float+0x308>)
 80090f4:	e7d3      	b.n	800909e <_printf_float+0x96>
 80090f6:	2220      	movs	r2, #32
 80090f8:	0031      	movs	r1, r6
 80090fa:	6863      	ldr	r3, [r4, #4]
 80090fc:	4391      	bics	r1, r2
 80090fe:	910e      	str	r1, [sp, #56]	; 0x38
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	d147      	bne.n	8009194 <_printf_float+0x18c>
 8009104:	3307      	adds	r3, #7
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	2380      	movs	r3, #128	; 0x80
 800910a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	4313      	orrs	r3, r2
 8009110:	2200      	movs	r2, #0
 8009112:	9206      	str	r2, [sp, #24]
 8009114:	aa12      	add	r2, sp, #72	; 0x48
 8009116:	9205      	str	r2, [sp, #20]
 8009118:	aa11      	add	r2, sp, #68	; 0x44
 800911a:	9203      	str	r2, [sp, #12]
 800911c:	2223      	movs	r2, #35	; 0x23
 800911e:	a908      	add	r1, sp, #32
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	1852      	adds	r2, r2, r1
 8009128:	9202      	str	r2, [sp, #8]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	0038      	movs	r0, r7
 800912e:	002b      	movs	r3, r5
 8009130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009132:	9604      	str	r6, [sp, #16]
 8009134:	f7ff febe 	bl	8008eb4 <__cvt>
 8009138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800913a:	0005      	movs	r5, r0
 800913c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800913e:	2b47      	cmp	r3, #71	; 0x47
 8009140:	d108      	bne.n	8009154 <_printf_float+0x14c>
 8009142:	1ccb      	adds	r3, r1, #3
 8009144:	db02      	blt.n	800914c <_printf_float+0x144>
 8009146:	6863      	ldr	r3, [r4, #4]
 8009148:	4299      	cmp	r1, r3
 800914a:	dd46      	ble.n	80091da <_printf_float+0x1d2>
 800914c:	0033      	movs	r3, r6
 800914e:	3b02      	subs	r3, #2
 8009150:	b2db      	uxtb	r3, r3
 8009152:	001e      	movs	r6, r3
 8009154:	2e65      	cmp	r6, #101	; 0x65
 8009156:	d824      	bhi.n	80091a2 <_printf_float+0x19a>
 8009158:	0020      	movs	r0, r4
 800915a:	0032      	movs	r2, r6
 800915c:	3901      	subs	r1, #1
 800915e:	3050      	adds	r0, #80	; 0x50
 8009160:	9111      	str	r1, [sp, #68]	; 0x44
 8009162:	f7ff ff0a 	bl	8008f7a <__exponent>
 8009166:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009168:	900a      	str	r0, [sp, #40]	; 0x28
 800916a:	1813      	adds	r3, r2, r0
 800916c:	6123      	str	r3, [r4, #16]
 800916e:	2a01      	cmp	r2, #1
 8009170:	dc02      	bgt.n	8009178 <_printf_float+0x170>
 8009172:	6822      	ldr	r2, [r4, #0]
 8009174:	07d2      	lsls	r2, r2, #31
 8009176:	d501      	bpl.n	800917c <_printf_float+0x174>
 8009178:	3301      	adds	r3, #1
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	2323      	movs	r3, #35	; 0x23
 800917e:	aa08      	add	r2, sp, #32
 8009180:	189b      	adds	r3, r3, r2
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d100      	bne.n	800918a <_printf_float+0x182>
 8009188:	e791      	b.n	80090ae <_printf_float+0xa6>
 800918a:	0023      	movs	r3, r4
 800918c:	222d      	movs	r2, #45	; 0x2d
 800918e:	3343      	adds	r3, #67	; 0x43
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	e78c      	b.n	80090ae <_printf_float+0xa6>
 8009194:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009196:	2a47      	cmp	r2, #71	; 0x47
 8009198:	d1b6      	bne.n	8009108 <_printf_float+0x100>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1b4      	bne.n	8009108 <_printf_float+0x100>
 800919e:	3301      	adds	r3, #1
 80091a0:	e7b1      	b.n	8009106 <_printf_float+0xfe>
 80091a2:	2e66      	cmp	r6, #102	; 0x66
 80091a4:	d11b      	bne.n	80091de <_printf_float+0x1d6>
 80091a6:	6863      	ldr	r3, [r4, #4]
 80091a8:	2900      	cmp	r1, #0
 80091aa:	dd0d      	ble.n	80091c8 <_printf_float+0x1c0>
 80091ac:	6121      	str	r1, [r4, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <_printf_float+0x1b0>
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	07d2      	lsls	r2, r2, #31
 80091b6:	d502      	bpl.n	80091be <_printf_float+0x1b6>
 80091b8:	3301      	adds	r3, #1
 80091ba:	1859      	adds	r1, r3, r1
 80091bc:	6121      	str	r1, [r4, #16]
 80091be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80091c2:	2300      	movs	r3, #0
 80091c4:	930a      	str	r3, [sp, #40]	; 0x28
 80091c6:	e7d9      	b.n	800917c <_printf_float+0x174>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d103      	bne.n	80091d4 <_printf_float+0x1cc>
 80091cc:	2201      	movs	r2, #1
 80091ce:	6821      	ldr	r1, [r4, #0]
 80091d0:	4211      	tst	r1, r2
 80091d2:	d000      	beq.n	80091d6 <_printf_float+0x1ce>
 80091d4:	1c9a      	adds	r2, r3, #2
 80091d6:	6122      	str	r2, [r4, #16]
 80091d8:	e7f1      	b.n	80091be <_printf_float+0x1b6>
 80091da:	2367      	movs	r3, #103	; 0x67
 80091dc:	001e      	movs	r6, r3
 80091de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091e2:	4293      	cmp	r3, r2
 80091e4:	db06      	blt.n	80091f4 <_printf_float+0x1ec>
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	07d2      	lsls	r2, r2, #31
 80091ec:	d5e7      	bpl.n	80091be <_printf_float+0x1b6>
 80091ee:	3301      	adds	r3, #1
 80091f0:	6123      	str	r3, [r4, #16]
 80091f2:	e7e4      	b.n	80091be <_printf_float+0x1b6>
 80091f4:	2101      	movs	r1, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc01      	bgt.n	80091fe <_printf_float+0x1f6>
 80091fa:	1849      	adds	r1, r1, r1
 80091fc:	1ac9      	subs	r1, r1, r3
 80091fe:	1852      	adds	r2, r2, r1
 8009200:	e7e9      	b.n	80091d6 <_printf_float+0x1ce>
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	0553      	lsls	r3, r2, #21
 8009206:	d408      	bmi.n	800921a <_printf_float+0x212>
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	002a      	movs	r2, r5
 800920c:	0038      	movs	r0, r7
 800920e:	9908      	ldr	r1, [sp, #32]
 8009210:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009212:	47a8      	blx	r5
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d129      	bne.n	800926c <_printf_float+0x264>
 8009218:	e754      	b.n	80090c4 <_printf_float+0xbc>
 800921a:	2e65      	cmp	r6, #101	; 0x65
 800921c:	d800      	bhi.n	8009220 <_printf_float+0x218>
 800921e:	e0ec      	b.n	80093fa <_printf_float+0x3f2>
 8009220:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009222:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	f7f7 f91a 	bl	8000460 <__aeabi_dcmpeq>
 800922c:	2800      	cmp	r0, #0
 800922e:	d034      	beq.n	800929a <_printf_float+0x292>
 8009230:	2301      	movs	r3, #1
 8009232:	0038      	movs	r0, r7
 8009234:	4a37      	ldr	r2, [pc, #220]	; (8009314 <_printf_float+0x30c>)
 8009236:	9908      	ldr	r1, [sp, #32]
 8009238:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800923a:	47a8      	blx	r5
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d100      	bne.n	8009242 <_printf_float+0x23a>
 8009240:	e740      	b.n	80090c4 <_printf_float+0xbc>
 8009242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009246:	4293      	cmp	r3, r2
 8009248:	db02      	blt.n	8009250 <_printf_float+0x248>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	07db      	lsls	r3, r3, #31
 800924e:	d50d      	bpl.n	800926c <_printf_float+0x264>
 8009250:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009252:	0038      	movs	r0, r7
 8009254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009258:	9908      	ldr	r1, [sp, #32]
 800925a:	47a8      	blx	r5
 800925c:	2500      	movs	r5, #0
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	d100      	bne.n	8009264 <_printf_float+0x25c>
 8009262:	e72f      	b.n	80090c4 <_printf_float+0xbc>
 8009264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009266:	3b01      	subs	r3, #1
 8009268:	42ab      	cmp	r3, r5
 800926a:	dc0a      	bgt.n	8009282 <_printf_float+0x27a>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	079b      	lsls	r3, r3, #30
 8009270:	d500      	bpl.n	8009274 <_printf_float+0x26c>
 8009272:	e114      	b.n	800949e <_printf_float+0x496>
 8009274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009276:	68e0      	ldr	r0, [r4, #12]
 8009278:	4298      	cmp	r0, r3
 800927a:	db00      	blt.n	800927e <_printf_float+0x276>
 800927c:	e724      	b.n	80090c8 <_printf_float+0xc0>
 800927e:	0018      	movs	r0, r3
 8009280:	e722      	b.n	80090c8 <_printf_float+0xc0>
 8009282:	0022      	movs	r2, r4
 8009284:	2301      	movs	r3, #1
 8009286:	0038      	movs	r0, r7
 8009288:	9908      	ldr	r1, [sp, #32]
 800928a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800928c:	321a      	adds	r2, #26
 800928e:	47b0      	blx	r6
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d100      	bne.n	8009296 <_printf_float+0x28e>
 8009294:	e716      	b.n	80090c4 <_printf_float+0xbc>
 8009296:	3501      	adds	r5, #1
 8009298:	e7e4      	b.n	8009264 <_printf_float+0x25c>
 800929a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc3b      	bgt.n	8009318 <_printf_float+0x310>
 80092a0:	2301      	movs	r3, #1
 80092a2:	0038      	movs	r0, r7
 80092a4:	4a1b      	ldr	r2, [pc, #108]	; (8009314 <_printf_float+0x30c>)
 80092a6:	9908      	ldr	r1, [sp, #32]
 80092a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092aa:	47b0      	blx	r6
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d100      	bne.n	80092b2 <_printf_float+0x2aa>
 80092b0:	e708      	b.n	80090c4 <_printf_float+0xbc>
 80092b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092b6:	4313      	orrs	r3, r2
 80092b8:	d102      	bne.n	80092c0 <_printf_float+0x2b8>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	07db      	lsls	r3, r3, #31
 80092be:	d5d5      	bpl.n	800926c <_printf_float+0x264>
 80092c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c2:	0038      	movs	r0, r7
 80092c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092c6:	9908      	ldr	r1, [sp, #32]
 80092c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092ca:	47b0      	blx	r6
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d100      	bne.n	80092d2 <_printf_float+0x2ca>
 80092d0:	e6f8      	b.n	80090c4 <_printf_float+0xbc>
 80092d2:	2300      	movs	r3, #0
 80092d4:	930a      	str	r3, [sp, #40]	; 0x28
 80092d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092da:	425b      	negs	r3, r3
 80092dc:	4293      	cmp	r3, r2
 80092de:	dc01      	bgt.n	80092e4 <_printf_float+0x2dc>
 80092e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092e2:	e792      	b.n	800920a <_printf_float+0x202>
 80092e4:	0022      	movs	r2, r4
 80092e6:	2301      	movs	r3, #1
 80092e8:	0038      	movs	r0, r7
 80092ea:	9908      	ldr	r1, [sp, #32]
 80092ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092ee:	321a      	adds	r2, #26
 80092f0:	47b0      	blx	r6
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d100      	bne.n	80092f8 <_printf_float+0x2f0>
 80092f6:	e6e5      	b.n	80090c4 <_printf_float+0xbc>
 80092f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fa:	3301      	adds	r3, #1
 80092fc:	e7ea      	b.n	80092d4 <_printf_float+0x2cc>
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	7fefffff 	.word	0x7fefffff
 8009304:	0800e354 	.word	0x0800e354
 8009308:	0800e358 	.word	0x0800e358
 800930c:	0800e35c 	.word	0x0800e35c
 8009310:	0800e360 	.word	0x0800e360
 8009314:	0800e769 	.word	0x0800e769
 8009318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800931a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800931c:	920a      	str	r2, [sp, #40]	; 0x28
 800931e:	429a      	cmp	r2, r3
 8009320:	dd00      	ble.n	8009324 <_printf_float+0x31c>
 8009322:	930a      	str	r3, [sp, #40]	; 0x28
 8009324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009326:	2b00      	cmp	r3, #0
 8009328:	dc3d      	bgt.n	80093a6 <_printf_float+0x39e>
 800932a:	2300      	movs	r3, #0
 800932c:	930e      	str	r3, [sp, #56]	; 0x38
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	43db      	mvns	r3, r3
 8009332:	17db      	asrs	r3, r3, #31
 8009334:	930f      	str	r3, [sp, #60]	; 0x3c
 8009336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800933a:	930c      	str	r3, [sp, #48]	; 0x30
 800933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933e:	4013      	ands	r3, r2
 8009340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009346:	4293      	cmp	r3, r2
 8009348:	dc36      	bgt.n	80093b8 <_printf_float+0x3b0>
 800934a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800934c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800934e:	4293      	cmp	r3, r2
 8009350:	db40      	blt.n	80093d4 <_printf_float+0x3cc>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	07db      	lsls	r3, r3, #31
 8009356:	d43d      	bmi.n	80093d4 <_printf_float+0x3cc>
 8009358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800935a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800935c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	1a52      	subs	r2, r2, r1
 8009362:	920a      	str	r2, [sp, #40]	; 0x28
 8009364:	429a      	cmp	r2, r3
 8009366:	dd00      	ble.n	800936a <_printf_float+0x362>
 8009368:	930a      	str	r3, [sp, #40]	; 0x28
 800936a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936c:	2b00      	cmp	r3, #0
 800936e:	dc3a      	bgt.n	80093e6 <_printf_float+0x3de>
 8009370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009372:	2500      	movs	r5, #0
 8009374:	43db      	mvns	r3, r3
 8009376:	17db      	asrs	r3, r3, #31
 8009378:	930b      	str	r3, [sp, #44]	; 0x2c
 800937a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800937c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800937e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009384:	400a      	ands	r2, r1
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	42ab      	cmp	r3, r5
 800938a:	dc00      	bgt.n	800938e <_printf_float+0x386>
 800938c:	e76e      	b.n	800926c <_printf_float+0x264>
 800938e:	0022      	movs	r2, r4
 8009390:	2301      	movs	r3, #1
 8009392:	0038      	movs	r0, r7
 8009394:	9908      	ldr	r1, [sp, #32]
 8009396:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009398:	321a      	adds	r2, #26
 800939a:	47b0      	blx	r6
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d100      	bne.n	80093a2 <_printf_float+0x39a>
 80093a0:	e690      	b.n	80090c4 <_printf_float+0xbc>
 80093a2:	3501      	adds	r5, #1
 80093a4:	e7e9      	b.n	800937a <_printf_float+0x372>
 80093a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a8:	002a      	movs	r2, r5
 80093aa:	0038      	movs	r0, r7
 80093ac:	9908      	ldr	r1, [sp, #32]
 80093ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80093b0:	47b0      	blx	r6
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	d1b9      	bne.n	800932a <_printf_float+0x322>
 80093b6:	e685      	b.n	80090c4 <_printf_float+0xbc>
 80093b8:	0022      	movs	r2, r4
 80093ba:	2301      	movs	r3, #1
 80093bc:	0038      	movs	r0, r7
 80093be:	9908      	ldr	r1, [sp, #32]
 80093c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80093c2:	321a      	adds	r2, #26
 80093c4:	47b0      	blx	r6
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	d100      	bne.n	80093cc <_printf_float+0x3c4>
 80093ca:	e67b      	b.n	80090c4 <_printf_float+0xbc>
 80093cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ce:	3301      	adds	r3, #1
 80093d0:	930e      	str	r3, [sp, #56]	; 0x38
 80093d2:	e7b0      	b.n	8009336 <_printf_float+0x32e>
 80093d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d6:	0038      	movs	r0, r7
 80093d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093da:	9908      	ldr	r1, [sp, #32]
 80093dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80093de:	47b0      	blx	r6
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d1b9      	bne.n	8009358 <_printf_float+0x350>
 80093e4:	e66e      	b.n	80090c4 <_printf_float+0xbc>
 80093e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093e8:	0038      	movs	r0, r7
 80093ea:	18ea      	adds	r2, r5, r3
 80093ec:	9908      	ldr	r1, [sp, #32]
 80093ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093f2:	47a8      	blx	r5
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d1bb      	bne.n	8009370 <_printf_float+0x368>
 80093f8:	e664      	b.n	80090c4 <_printf_float+0xbc>
 80093fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	dc02      	bgt.n	8009406 <_printf_float+0x3fe>
 8009400:	2301      	movs	r3, #1
 8009402:	421a      	tst	r2, r3
 8009404:	d038      	beq.n	8009478 <_printf_float+0x470>
 8009406:	2301      	movs	r3, #1
 8009408:	002a      	movs	r2, r5
 800940a:	0038      	movs	r0, r7
 800940c:	9908      	ldr	r1, [sp, #32]
 800940e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009410:	47b0      	blx	r6
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d100      	bne.n	8009418 <_printf_float+0x410>
 8009416:	e655      	b.n	80090c4 <_printf_float+0xbc>
 8009418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800941a:	0038      	movs	r0, r7
 800941c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800941e:	9908      	ldr	r1, [sp, #32]
 8009420:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009422:	47b0      	blx	r6
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d100      	bne.n	800942a <_printf_float+0x422>
 8009428:	e64c      	b.n	80090c4 <_printf_float+0xbc>
 800942a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800942c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800942e:	2200      	movs	r2, #0
 8009430:	2300      	movs	r3, #0
 8009432:	f7f7 f815 	bl	8000460 <__aeabi_dcmpeq>
 8009436:	2800      	cmp	r0, #0
 8009438:	d11c      	bne.n	8009474 <_printf_float+0x46c>
 800943a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800943c:	1c6a      	adds	r2, r5, #1
 800943e:	3b01      	subs	r3, #1
 8009440:	0038      	movs	r0, r7
 8009442:	9908      	ldr	r1, [sp, #32]
 8009444:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009446:	47a8      	blx	r5
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d10f      	bne.n	800946c <_printf_float+0x464>
 800944c:	e63a      	b.n	80090c4 <_printf_float+0xbc>
 800944e:	0022      	movs	r2, r4
 8009450:	2301      	movs	r3, #1
 8009452:	0038      	movs	r0, r7
 8009454:	9908      	ldr	r1, [sp, #32]
 8009456:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009458:	321a      	adds	r2, #26
 800945a:	47b0      	blx	r6
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d100      	bne.n	8009462 <_printf_float+0x45a>
 8009460:	e630      	b.n	80090c4 <_printf_float+0xbc>
 8009462:	3501      	adds	r5, #1
 8009464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009466:	3b01      	subs	r3, #1
 8009468:	42ab      	cmp	r3, r5
 800946a:	dcf0      	bgt.n	800944e <_printf_float+0x446>
 800946c:	0022      	movs	r2, r4
 800946e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009470:	3250      	adds	r2, #80	; 0x50
 8009472:	e6cb      	b.n	800920c <_printf_float+0x204>
 8009474:	2500      	movs	r5, #0
 8009476:	e7f5      	b.n	8009464 <_printf_float+0x45c>
 8009478:	002a      	movs	r2, r5
 800947a:	e7e1      	b.n	8009440 <_printf_float+0x438>
 800947c:	0022      	movs	r2, r4
 800947e:	2301      	movs	r3, #1
 8009480:	0038      	movs	r0, r7
 8009482:	9908      	ldr	r1, [sp, #32]
 8009484:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009486:	3219      	adds	r2, #25
 8009488:	47b0      	blx	r6
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d100      	bne.n	8009490 <_printf_float+0x488>
 800948e:	e619      	b.n	80090c4 <_printf_float+0xbc>
 8009490:	3501      	adds	r5, #1
 8009492:	68e3      	ldr	r3, [r4, #12]
 8009494:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	42ab      	cmp	r3, r5
 800949a:	dcef      	bgt.n	800947c <_printf_float+0x474>
 800949c:	e6ea      	b.n	8009274 <_printf_float+0x26c>
 800949e:	2500      	movs	r5, #0
 80094a0:	e7f7      	b.n	8009492 <_printf_float+0x48a>
 80094a2:	46c0      	nop			; (mov r8, r8)

080094a4 <_printf_common>:
 80094a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a6:	0015      	movs	r5, r2
 80094a8:	9301      	str	r3, [sp, #4]
 80094aa:	688a      	ldr	r2, [r1, #8]
 80094ac:	690b      	ldr	r3, [r1, #16]
 80094ae:	000c      	movs	r4, r1
 80094b0:	9000      	str	r0, [sp, #0]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	da00      	bge.n	80094b8 <_printf_common+0x14>
 80094b6:	0013      	movs	r3, r2
 80094b8:	0022      	movs	r2, r4
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	3243      	adds	r2, #67	; 0x43
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	d001      	beq.n	80094c8 <_printf_common+0x24>
 80094c4:	3301      	adds	r3, #1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	069b      	lsls	r3, r3, #26
 80094cc:	d502      	bpl.n	80094d4 <_printf_common+0x30>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	3302      	adds	r3, #2
 80094d2:	602b      	str	r3, [r5, #0]
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	2306      	movs	r3, #6
 80094d8:	0017      	movs	r7, r2
 80094da:	401f      	ands	r7, r3
 80094dc:	421a      	tst	r2, r3
 80094de:	d027      	beq.n	8009530 <_printf_common+0x8c>
 80094e0:	0023      	movs	r3, r4
 80094e2:	3343      	adds	r3, #67	; 0x43
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	1e5a      	subs	r2, r3, #1
 80094e8:	4193      	sbcs	r3, r2
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	0692      	lsls	r2, r2, #26
 80094ee:	d430      	bmi.n	8009552 <_printf_common+0xae>
 80094f0:	0022      	movs	r2, r4
 80094f2:	9901      	ldr	r1, [sp, #4]
 80094f4:	9800      	ldr	r0, [sp, #0]
 80094f6:	9e08      	ldr	r6, [sp, #32]
 80094f8:	3243      	adds	r2, #67	; 0x43
 80094fa:	47b0      	blx	r6
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d025      	beq.n	800954c <_printf_common+0xa8>
 8009500:	2306      	movs	r3, #6
 8009502:	6820      	ldr	r0, [r4, #0]
 8009504:	682a      	ldr	r2, [r5, #0]
 8009506:	68e1      	ldr	r1, [r4, #12]
 8009508:	2500      	movs	r5, #0
 800950a:	4003      	ands	r3, r0
 800950c:	2b04      	cmp	r3, #4
 800950e:	d103      	bne.n	8009518 <_printf_common+0x74>
 8009510:	1a8d      	subs	r5, r1, r2
 8009512:	43eb      	mvns	r3, r5
 8009514:	17db      	asrs	r3, r3, #31
 8009516:	401d      	ands	r5, r3
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	6922      	ldr	r2, [r4, #16]
 800951c:	4293      	cmp	r3, r2
 800951e:	dd01      	ble.n	8009524 <_printf_common+0x80>
 8009520:	1a9b      	subs	r3, r3, r2
 8009522:	18ed      	adds	r5, r5, r3
 8009524:	2700      	movs	r7, #0
 8009526:	42bd      	cmp	r5, r7
 8009528:	d120      	bne.n	800956c <_printf_common+0xc8>
 800952a:	2000      	movs	r0, #0
 800952c:	e010      	b.n	8009550 <_printf_common+0xac>
 800952e:	3701      	adds	r7, #1
 8009530:	68e3      	ldr	r3, [r4, #12]
 8009532:	682a      	ldr	r2, [r5, #0]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	42bb      	cmp	r3, r7
 8009538:	ddd2      	ble.n	80094e0 <_printf_common+0x3c>
 800953a:	0022      	movs	r2, r4
 800953c:	2301      	movs	r3, #1
 800953e:	9901      	ldr	r1, [sp, #4]
 8009540:	9800      	ldr	r0, [sp, #0]
 8009542:	9e08      	ldr	r6, [sp, #32]
 8009544:	3219      	adds	r2, #25
 8009546:	47b0      	blx	r6
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d1f0      	bne.n	800952e <_printf_common+0x8a>
 800954c:	2001      	movs	r0, #1
 800954e:	4240      	negs	r0, r0
 8009550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009552:	2030      	movs	r0, #48	; 0x30
 8009554:	18e1      	adds	r1, r4, r3
 8009556:	3143      	adds	r1, #67	; 0x43
 8009558:	7008      	strb	r0, [r1, #0]
 800955a:	0021      	movs	r1, r4
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	3145      	adds	r1, #69	; 0x45
 8009560:	7809      	ldrb	r1, [r1, #0]
 8009562:	18a2      	adds	r2, r4, r2
 8009564:	3243      	adds	r2, #67	; 0x43
 8009566:	3302      	adds	r3, #2
 8009568:	7011      	strb	r1, [r2, #0]
 800956a:	e7c1      	b.n	80094f0 <_printf_common+0x4c>
 800956c:	0022      	movs	r2, r4
 800956e:	2301      	movs	r3, #1
 8009570:	9901      	ldr	r1, [sp, #4]
 8009572:	9800      	ldr	r0, [sp, #0]
 8009574:	9e08      	ldr	r6, [sp, #32]
 8009576:	321a      	adds	r2, #26
 8009578:	47b0      	blx	r6
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d0e6      	beq.n	800954c <_printf_common+0xa8>
 800957e:	3701      	adds	r7, #1
 8009580:	e7d1      	b.n	8009526 <_printf_common+0x82>
	...

08009584 <_printf_i>:
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	b08b      	sub	sp, #44	; 0x2c
 8009588:	9206      	str	r2, [sp, #24]
 800958a:	000a      	movs	r2, r1
 800958c:	3243      	adds	r2, #67	; 0x43
 800958e:	9307      	str	r3, [sp, #28]
 8009590:	9005      	str	r0, [sp, #20]
 8009592:	9204      	str	r2, [sp, #16]
 8009594:	7e0a      	ldrb	r2, [r1, #24]
 8009596:	000c      	movs	r4, r1
 8009598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800959a:	2a78      	cmp	r2, #120	; 0x78
 800959c:	d806      	bhi.n	80095ac <_printf_i+0x28>
 800959e:	2a62      	cmp	r2, #98	; 0x62
 80095a0:	d808      	bhi.n	80095b4 <_printf_i+0x30>
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d100      	bne.n	80095a8 <_printf_i+0x24>
 80095a6:	e0c0      	b.n	800972a <_printf_i+0x1a6>
 80095a8:	2a58      	cmp	r2, #88	; 0x58
 80095aa:	d052      	beq.n	8009652 <_printf_i+0xce>
 80095ac:	0026      	movs	r6, r4
 80095ae:	3642      	adds	r6, #66	; 0x42
 80095b0:	7032      	strb	r2, [r6, #0]
 80095b2:	e022      	b.n	80095fa <_printf_i+0x76>
 80095b4:	0010      	movs	r0, r2
 80095b6:	3863      	subs	r0, #99	; 0x63
 80095b8:	2815      	cmp	r0, #21
 80095ba:	d8f7      	bhi.n	80095ac <_printf_i+0x28>
 80095bc:	f7f6 fdc0 	bl	8000140 <__gnu_thumb1_case_shi>
 80095c0:	001f0016 	.word	0x001f0016
 80095c4:	fff6fff6 	.word	0xfff6fff6
 80095c8:	fff6fff6 	.word	0xfff6fff6
 80095cc:	fff6001f 	.word	0xfff6001f
 80095d0:	fff6fff6 	.word	0xfff6fff6
 80095d4:	00a8fff6 	.word	0x00a8fff6
 80095d8:	009a0036 	.word	0x009a0036
 80095dc:	fff6fff6 	.word	0xfff6fff6
 80095e0:	fff600b9 	.word	0xfff600b9
 80095e4:	fff60036 	.word	0xfff60036
 80095e8:	009efff6 	.word	0x009efff6
 80095ec:	0026      	movs	r6, r4
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	3642      	adds	r6, #66	; 0x42
 80095f2:	1d11      	adds	r1, r2, #4
 80095f4:	6019      	str	r1, [r3, #0]
 80095f6:	6813      	ldr	r3, [r2, #0]
 80095f8:	7033      	strb	r3, [r6, #0]
 80095fa:	2301      	movs	r3, #1
 80095fc:	e0a7      	b.n	800974e <_printf_i+0x1ca>
 80095fe:	6808      	ldr	r0, [r1, #0]
 8009600:	6819      	ldr	r1, [r3, #0]
 8009602:	1d0a      	adds	r2, r1, #4
 8009604:	0605      	lsls	r5, r0, #24
 8009606:	d50b      	bpl.n	8009620 <_printf_i+0x9c>
 8009608:	680d      	ldr	r5, [r1, #0]
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	2d00      	cmp	r5, #0
 800960e:	da03      	bge.n	8009618 <_printf_i+0x94>
 8009610:	232d      	movs	r3, #45	; 0x2d
 8009612:	9a04      	ldr	r2, [sp, #16]
 8009614:	426d      	negs	r5, r5
 8009616:	7013      	strb	r3, [r2, #0]
 8009618:	4b61      	ldr	r3, [pc, #388]	; (80097a0 <_printf_i+0x21c>)
 800961a:	270a      	movs	r7, #10
 800961c:	9303      	str	r3, [sp, #12]
 800961e:	e032      	b.n	8009686 <_printf_i+0x102>
 8009620:	680d      	ldr	r5, [r1, #0]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	0641      	lsls	r1, r0, #25
 8009626:	d5f1      	bpl.n	800960c <_printf_i+0x88>
 8009628:	b22d      	sxth	r5, r5
 800962a:	e7ef      	b.n	800960c <_printf_i+0x88>
 800962c:	680d      	ldr	r5, [r1, #0]
 800962e:	6819      	ldr	r1, [r3, #0]
 8009630:	1d08      	adds	r0, r1, #4
 8009632:	6018      	str	r0, [r3, #0]
 8009634:	062e      	lsls	r6, r5, #24
 8009636:	d501      	bpl.n	800963c <_printf_i+0xb8>
 8009638:	680d      	ldr	r5, [r1, #0]
 800963a:	e003      	b.n	8009644 <_printf_i+0xc0>
 800963c:	066d      	lsls	r5, r5, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0xb4>
 8009640:	680d      	ldr	r5, [r1, #0]
 8009642:	b2ad      	uxth	r5, r5
 8009644:	4b56      	ldr	r3, [pc, #344]	; (80097a0 <_printf_i+0x21c>)
 8009646:	270a      	movs	r7, #10
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	2a6f      	cmp	r2, #111	; 0x6f
 800964c:	d117      	bne.n	800967e <_printf_i+0xfa>
 800964e:	2708      	movs	r7, #8
 8009650:	e015      	b.n	800967e <_printf_i+0xfa>
 8009652:	3145      	adds	r1, #69	; 0x45
 8009654:	700a      	strb	r2, [r1, #0]
 8009656:	4a52      	ldr	r2, [pc, #328]	; (80097a0 <_printf_i+0x21c>)
 8009658:	9203      	str	r2, [sp, #12]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	6821      	ldr	r1, [r4, #0]
 800965e:	ca20      	ldmia	r2!, {r5}
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	0608      	lsls	r0, r1, #24
 8009664:	d550      	bpl.n	8009708 <_printf_i+0x184>
 8009666:	07cb      	lsls	r3, r1, #31
 8009668:	d502      	bpl.n	8009670 <_printf_i+0xec>
 800966a:	2320      	movs	r3, #32
 800966c:	4319      	orrs	r1, r3
 800966e:	6021      	str	r1, [r4, #0]
 8009670:	2710      	movs	r7, #16
 8009672:	2d00      	cmp	r5, #0
 8009674:	d103      	bne.n	800967e <_printf_i+0xfa>
 8009676:	2320      	movs	r3, #32
 8009678:	6822      	ldr	r2, [r4, #0]
 800967a:	439a      	bics	r2, r3
 800967c:	6022      	str	r2, [r4, #0]
 800967e:	0023      	movs	r3, r4
 8009680:	2200      	movs	r2, #0
 8009682:	3343      	adds	r3, #67	; 0x43
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	6863      	ldr	r3, [r4, #4]
 8009688:	60a3      	str	r3, [r4, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	db03      	blt.n	8009696 <_printf_i+0x112>
 800968e:	2204      	movs	r2, #4
 8009690:	6821      	ldr	r1, [r4, #0]
 8009692:	4391      	bics	r1, r2
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	2d00      	cmp	r5, #0
 8009698:	d102      	bne.n	80096a0 <_printf_i+0x11c>
 800969a:	9e04      	ldr	r6, [sp, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00c      	beq.n	80096ba <_printf_i+0x136>
 80096a0:	9e04      	ldr	r6, [sp, #16]
 80096a2:	0028      	movs	r0, r5
 80096a4:	0039      	movs	r1, r7
 80096a6:	f7f6 fddb 	bl	8000260 <__aeabi_uidivmod>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	3e01      	subs	r6, #1
 80096ae:	5c5b      	ldrb	r3, [r3, r1]
 80096b0:	7033      	strb	r3, [r6, #0]
 80096b2:	002b      	movs	r3, r5
 80096b4:	0005      	movs	r5, r0
 80096b6:	429f      	cmp	r7, r3
 80096b8:	d9f3      	bls.n	80096a2 <_printf_i+0x11e>
 80096ba:	2f08      	cmp	r7, #8
 80096bc:	d109      	bne.n	80096d2 <_printf_i+0x14e>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	07db      	lsls	r3, r3, #31
 80096c2:	d506      	bpl.n	80096d2 <_printf_i+0x14e>
 80096c4:	6863      	ldr	r3, [r4, #4]
 80096c6:	6922      	ldr	r2, [r4, #16]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	dc02      	bgt.n	80096d2 <_printf_i+0x14e>
 80096cc:	2330      	movs	r3, #48	; 0x30
 80096ce:	3e01      	subs	r6, #1
 80096d0:	7033      	strb	r3, [r6, #0]
 80096d2:	9b04      	ldr	r3, [sp, #16]
 80096d4:	1b9b      	subs	r3, r3, r6
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	0021      	movs	r1, r4
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	9805      	ldr	r0, [sp, #20]
 80096e0:	9b06      	ldr	r3, [sp, #24]
 80096e2:	aa09      	add	r2, sp, #36	; 0x24
 80096e4:	f7ff fede 	bl	80094a4 <_printf_common>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d135      	bne.n	8009758 <_printf_i+0x1d4>
 80096ec:	2001      	movs	r0, #1
 80096ee:	4240      	negs	r0, r0
 80096f0:	b00b      	add	sp, #44	; 0x2c
 80096f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096f4:	2220      	movs	r2, #32
 80096f6:	6809      	ldr	r1, [r1, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	6022      	str	r2, [r4, #0]
 80096fc:	0022      	movs	r2, r4
 80096fe:	2178      	movs	r1, #120	; 0x78
 8009700:	3245      	adds	r2, #69	; 0x45
 8009702:	7011      	strb	r1, [r2, #0]
 8009704:	4a27      	ldr	r2, [pc, #156]	; (80097a4 <_printf_i+0x220>)
 8009706:	e7a7      	b.n	8009658 <_printf_i+0xd4>
 8009708:	0648      	lsls	r0, r1, #25
 800970a:	d5ac      	bpl.n	8009666 <_printf_i+0xe2>
 800970c:	b2ad      	uxth	r5, r5
 800970e:	e7aa      	b.n	8009666 <_printf_i+0xe2>
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	680d      	ldr	r5, [r1, #0]
 8009714:	1d10      	adds	r0, r2, #4
 8009716:	6949      	ldr	r1, [r1, #20]
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	062e      	lsls	r6, r5, #24
 800971e:	d501      	bpl.n	8009724 <_printf_i+0x1a0>
 8009720:	6019      	str	r1, [r3, #0]
 8009722:	e002      	b.n	800972a <_printf_i+0x1a6>
 8009724:	066d      	lsls	r5, r5, #25
 8009726:	d5fb      	bpl.n	8009720 <_printf_i+0x19c>
 8009728:	8019      	strh	r1, [r3, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	9e04      	ldr	r6, [sp, #16]
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	e7d2      	b.n	80096d8 <_printf_i+0x154>
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	1d11      	adds	r1, r2, #4
 8009736:	6019      	str	r1, [r3, #0]
 8009738:	6816      	ldr	r6, [r2, #0]
 800973a:	2100      	movs	r1, #0
 800973c:	0030      	movs	r0, r6
 800973e:	6862      	ldr	r2, [r4, #4]
 8009740:	f002 fc28 	bl	800bf94 <memchr>
 8009744:	2800      	cmp	r0, #0
 8009746:	d001      	beq.n	800974c <_printf_i+0x1c8>
 8009748:	1b80      	subs	r0, r0, r6
 800974a:	6060      	str	r0, [r4, #4]
 800974c:	6863      	ldr	r3, [r4, #4]
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	2300      	movs	r3, #0
 8009752:	9a04      	ldr	r2, [sp, #16]
 8009754:	7013      	strb	r3, [r2, #0]
 8009756:	e7bf      	b.n	80096d8 <_printf_i+0x154>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	0032      	movs	r2, r6
 800975c:	9906      	ldr	r1, [sp, #24]
 800975e:	9805      	ldr	r0, [sp, #20]
 8009760:	9d07      	ldr	r5, [sp, #28]
 8009762:	47a8      	blx	r5
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d0c1      	beq.n	80096ec <_printf_i+0x168>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	079b      	lsls	r3, r3, #30
 800976c:	d415      	bmi.n	800979a <_printf_i+0x216>
 800976e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009770:	68e0      	ldr	r0, [r4, #12]
 8009772:	4298      	cmp	r0, r3
 8009774:	dabc      	bge.n	80096f0 <_printf_i+0x16c>
 8009776:	0018      	movs	r0, r3
 8009778:	e7ba      	b.n	80096f0 <_printf_i+0x16c>
 800977a:	0022      	movs	r2, r4
 800977c:	2301      	movs	r3, #1
 800977e:	9906      	ldr	r1, [sp, #24]
 8009780:	9805      	ldr	r0, [sp, #20]
 8009782:	9e07      	ldr	r6, [sp, #28]
 8009784:	3219      	adds	r2, #25
 8009786:	47b0      	blx	r6
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d0af      	beq.n	80096ec <_printf_i+0x168>
 800978c:	3501      	adds	r5, #1
 800978e:	68e3      	ldr	r3, [r4, #12]
 8009790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	42ab      	cmp	r3, r5
 8009796:	dcf0      	bgt.n	800977a <_printf_i+0x1f6>
 8009798:	e7e9      	b.n	800976e <_printf_i+0x1ea>
 800979a:	2500      	movs	r5, #0
 800979c:	e7f7      	b.n	800978e <_printf_i+0x20a>
 800979e:	46c0      	nop			; (mov r8, r8)
 80097a0:	0800e364 	.word	0x0800e364
 80097a4:	0800e375 	.word	0x0800e375

080097a8 <_scanf_float>:
 80097a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097aa:	b08b      	sub	sp, #44	; 0x2c
 80097ac:	0015      	movs	r5, r2
 80097ae:	9001      	str	r0, [sp, #4]
 80097b0:	22ae      	movs	r2, #174	; 0xae
 80097b2:	2000      	movs	r0, #0
 80097b4:	9306      	str	r3, [sp, #24]
 80097b6:	688b      	ldr	r3, [r1, #8]
 80097b8:	000e      	movs	r6, r1
 80097ba:	1e59      	subs	r1, r3, #1
 80097bc:	0052      	lsls	r2, r2, #1
 80097be:	9005      	str	r0, [sp, #20]
 80097c0:	4291      	cmp	r1, r2
 80097c2:	d905      	bls.n	80097d0 <_scanf_float+0x28>
 80097c4:	3b5e      	subs	r3, #94	; 0x5e
 80097c6:	3bff      	subs	r3, #255	; 0xff
 80097c8:	9305      	str	r3, [sp, #20]
 80097ca:	235e      	movs	r3, #94	; 0x5e
 80097cc:	33ff      	adds	r3, #255	; 0xff
 80097ce:	60b3      	str	r3, [r6, #8]
 80097d0:	23f0      	movs	r3, #240	; 0xf0
 80097d2:	6832      	ldr	r2, [r6, #0]
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	6033      	str	r3, [r6, #0]
 80097da:	0033      	movs	r3, r6
 80097dc:	2400      	movs	r4, #0
 80097de:	331c      	adds	r3, #28
 80097e0:	001f      	movs	r7, r3
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	9402      	str	r4, [sp, #8]
 80097e6:	9408      	str	r4, [sp, #32]
 80097e8:	9407      	str	r4, [sp, #28]
 80097ea:	9400      	str	r4, [sp, #0]
 80097ec:	9404      	str	r4, [sp, #16]
 80097ee:	68b2      	ldr	r2, [r6, #8]
 80097f0:	2a00      	cmp	r2, #0
 80097f2:	d00a      	beq.n	800980a <_scanf_float+0x62>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b4e      	cmp	r3, #78	; 0x4e
 80097fa:	d844      	bhi.n	8009886 <_scanf_float+0xde>
 80097fc:	0018      	movs	r0, r3
 80097fe:	2b40      	cmp	r3, #64	; 0x40
 8009800:	d82c      	bhi.n	800985c <_scanf_float+0xb4>
 8009802:	382b      	subs	r0, #43	; 0x2b
 8009804:	b2c1      	uxtb	r1, r0
 8009806:	290e      	cmp	r1, #14
 8009808:	d92a      	bls.n	8009860 <_scanf_float+0xb8>
 800980a:	9b00      	ldr	r3, [sp, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <_scanf_float+0x70>
 8009810:	6832      	ldr	r2, [r6, #0]
 8009812:	4ba4      	ldr	r3, [pc, #656]	; (8009aa4 <_scanf_float+0x2fc>)
 8009814:	4013      	ands	r3, r2
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	9b02      	ldr	r3, [sp, #8]
 800981a:	3b01      	subs	r3, #1
 800981c:	2b01      	cmp	r3, #1
 800981e:	d900      	bls.n	8009822 <_scanf_float+0x7a>
 8009820:	e0f9      	b.n	8009a16 <_scanf_float+0x26e>
 8009822:	24be      	movs	r4, #190	; 0xbe
 8009824:	0064      	lsls	r4, r4, #1
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	429f      	cmp	r7, r3
 800982a:	d900      	bls.n	800982e <_scanf_float+0x86>
 800982c:	e0e9      	b.n	8009a02 <_scanf_float+0x25a>
 800982e:	2301      	movs	r3, #1
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	e185      	b.n	8009b40 <_scanf_float+0x398>
 8009834:	0018      	movs	r0, r3
 8009836:	3861      	subs	r0, #97	; 0x61
 8009838:	280d      	cmp	r0, #13
 800983a:	d8e6      	bhi.n	800980a <_scanf_float+0x62>
 800983c:	f7f6 fc80 	bl	8000140 <__gnu_thumb1_case_shi>
 8009840:	ffe50083 	.word	0xffe50083
 8009844:	ffe5ffe5 	.word	0xffe5ffe5
 8009848:	00a200b6 	.word	0x00a200b6
 800984c:	ffe5ffe5 	.word	0xffe5ffe5
 8009850:	ffe50089 	.word	0xffe50089
 8009854:	ffe5ffe5 	.word	0xffe5ffe5
 8009858:	0065ffe5 	.word	0x0065ffe5
 800985c:	3841      	subs	r0, #65	; 0x41
 800985e:	e7eb      	b.n	8009838 <_scanf_float+0x90>
 8009860:	280e      	cmp	r0, #14
 8009862:	d8d2      	bhi.n	800980a <_scanf_float+0x62>
 8009864:	f7f6 fc6c 	bl	8000140 <__gnu_thumb1_case_shi>
 8009868:	ffd1004b 	.word	0xffd1004b
 800986c:	0098004b 	.word	0x0098004b
 8009870:	0020ffd1 	.word	0x0020ffd1
 8009874:	00400040 	.word	0x00400040
 8009878:	00400040 	.word	0x00400040
 800987c:	00400040 	.word	0x00400040
 8009880:	00400040 	.word	0x00400040
 8009884:	0040      	.short	0x0040
 8009886:	2b6e      	cmp	r3, #110	; 0x6e
 8009888:	d809      	bhi.n	800989e <_scanf_float+0xf6>
 800988a:	2b60      	cmp	r3, #96	; 0x60
 800988c:	d8d2      	bhi.n	8009834 <_scanf_float+0x8c>
 800988e:	2b54      	cmp	r3, #84	; 0x54
 8009890:	d07d      	beq.n	800998e <_scanf_float+0x1e6>
 8009892:	2b59      	cmp	r3, #89	; 0x59
 8009894:	d1b9      	bne.n	800980a <_scanf_float+0x62>
 8009896:	2c07      	cmp	r4, #7
 8009898:	d1b7      	bne.n	800980a <_scanf_float+0x62>
 800989a:	2408      	movs	r4, #8
 800989c:	e02c      	b.n	80098f8 <_scanf_float+0x150>
 800989e:	2b74      	cmp	r3, #116	; 0x74
 80098a0:	d075      	beq.n	800998e <_scanf_float+0x1e6>
 80098a2:	2b79      	cmp	r3, #121	; 0x79
 80098a4:	d0f7      	beq.n	8009896 <_scanf_float+0xee>
 80098a6:	e7b0      	b.n	800980a <_scanf_float+0x62>
 80098a8:	6831      	ldr	r1, [r6, #0]
 80098aa:	05c8      	lsls	r0, r1, #23
 80098ac:	d51c      	bpl.n	80098e8 <_scanf_float+0x140>
 80098ae:	2380      	movs	r3, #128	; 0x80
 80098b0:	4399      	bics	r1, r3
 80098b2:	9b00      	ldr	r3, [sp, #0]
 80098b4:	6031      	str	r1, [r6, #0]
 80098b6:	3301      	adds	r3, #1
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	9b05      	ldr	r3, [sp, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <_scanf_float+0x120>
 80098c0:	3b01      	subs	r3, #1
 80098c2:	3201      	adds	r2, #1
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	60b2      	str	r2, [r6, #8]
 80098c8:	68b3      	ldr	r3, [r6, #8]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	60b3      	str	r3, [r6, #8]
 80098ce:	6933      	ldr	r3, [r6, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	6133      	str	r3, [r6, #16]
 80098d4:	686b      	ldr	r3, [r5, #4]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	606b      	str	r3, [r5, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dc00      	bgt.n	80098e0 <_scanf_float+0x138>
 80098de:	e086      	b.n	80099ee <_scanf_float+0x246>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	e782      	b.n	80097ee <_scanf_float+0x46>
 80098e8:	9a02      	ldr	r2, [sp, #8]
 80098ea:	1912      	adds	r2, r2, r4
 80098ec:	2a00      	cmp	r2, #0
 80098ee:	d18c      	bne.n	800980a <_scanf_float+0x62>
 80098f0:	4a6d      	ldr	r2, [pc, #436]	; (8009aa8 <_scanf_float+0x300>)
 80098f2:	6831      	ldr	r1, [r6, #0]
 80098f4:	400a      	ands	r2, r1
 80098f6:	6032      	str	r2, [r6, #0]
 80098f8:	703b      	strb	r3, [r7, #0]
 80098fa:	3701      	adds	r7, #1
 80098fc:	e7e4      	b.n	80098c8 <_scanf_float+0x120>
 80098fe:	2180      	movs	r1, #128	; 0x80
 8009900:	6832      	ldr	r2, [r6, #0]
 8009902:	420a      	tst	r2, r1
 8009904:	d081      	beq.n	800980a <_scanf_float+0x62>
 8009906:	438a      	bics	r2, r1
 8009908:	e7f5      	b.n	80098f6 <_scanf_float+0x14e>
 800990a:	9a02      	ldr	r2, [sp, #8]
 800990c:	2a00      	cmp	r2, #0
 800990e:	d10f      	bne.n	8009930 <_scanf_float+0x188>
 8009910:	9a00      	ldr	r2, [sp, #0]
 8009912:	2a00      	cmp	r2, #0
 8009914:	d10f      	bne.n	8009936 <_scanf_float+0x18e>
 8009916:	6832      	ldr	r2, [r6, #0]
 8009918:	21e0      	movs	r1, #224	; 0xe0
 800991a:	0010      	movs	r0, r2
 800991c:	00c9      	lsls	r1, r1, #3
 800991e:	4008      	ands	r0, r1
 8009920:	4288      	cmp	r0, r1
 8009922:	d108      	bne.n	8009936 <_scanf_float+0x18e>
 8009924:	4961      	ldr	r1, [pc, #388]	; (8009aac <_scanf_float+0x304>)
 8009926:	400a      	ands	r2, r1
 8009928:	6032      	str	r2, [r6, #0]
 800992a:	2201      	movs	r2, #1
 800992c:	9202      	str	r2, [sp, #8]
 800992e:	e7e3      	b.n	80098f8 <_scanf_float+0x150>
 8009930:	9a02      	ldr	r2, [sp, #8]
 8009932:	2a02      	cmp	r2, #2
 8009934:	d059      	beq.n	80099ea <_scanf_float+0x242>
 8009936:	2c01      	cmp	r4, #1
 8009938:	d002      	beq.n	8009940 <_scanf_float+0x198>
 800993a:	2c04      	cmp	r4, #4
 800993c:	d000      	beq.n	8009940 <_scanf_float+0x198>
 800993e:	e764      	b.n	800980a <_scanf_float+0x62>
 8009940:	3401      	adds	r4, #1
 8009942:	b2e4      	uxtb	r4, r4
 8009944:	e7d8      	b.n	80098f8 <_scanf_float+0x150>
 8009946:	9a02      	ldr	r2, [sp, #8]
 8009948:	2a01      	cmp	r2, #1
 800994a:	d000      	beq.n	800994e <_scanf_float+0x1a6>
 800994c:	e75d      	b.n	800980a <_scanf_float+0x62>
 800994e:	2202      	movs	r2, #2
 8009950:	e7ec      	b.n	800992c <_scanf_float+0x184>
 8009952:	2c00      	cmp	r4, #0
 8009954:	d110      	bne.n	8009978 <_scanf_float+0x1d0>
 8009956:	9a00      	ldr	r2, [sp, #0]
 8009958:	2a00      	cmp	r2, #0
 800995a:	d000      	beq.n	800995e <_scanf_float+0x1b6>
 800995c:	e758      	b.n	8009810 <_scanf_float+0x68>
 800995e:	6832      	ldr	r2, [r6, #0]
 8009960:	21e0      	movs	r1, #224	; 0xe0
 8009962:	0010      	movs	r0, r2
 8009964:	00c9      	lsls	r1, r1, #3
 8009966:	4008      	ands	r0, r1
 8009968:	4288      	cmp	r0, r1
 800996a:	d000      	beq.n	800996e <_scanf_float+0x1c6>
 800996c:	e754      	b.n	8009818 <_scanf_float+0x70>
 800996e:	494f      	ldr	r1, [pc, #316]	; (8009aac <_scanf_float+0x304>)
 8009970:	3401      	adds	r4, #1
 8009972:	400a      	ands	r2, r1
 8009974:	6032      	str	r2, [r6, #0]
 8009976:	e7bf      	b.n	80098f8 <_scanf_float+0x150>
 8009978:	21fd      	movs	r1, #253	; 0xfd
 800997a:	1ee2      	subs	r2, r4, #3
 800997c:	420a      	tst	r2, r1
 800997e:	d000      	beq.n	8009982 <_scanf_float+0x1da>
 8009980:	e743      	b.n	800980a <_scanf_float+0x62>
 8009982:	e7dd      	b.n	8009940 <_scanf_float+0x198>
 8009984:	2c02      	cmp	r4, #2
 8009986:	d000      	beq.n	800998a <_scanf_float+0x1e2>
 8009988:	e73f      	b.n	800980a <_scanf_float+0x62>
 800998a:	2403      	movs	r4, #3
 800998c:	e7b4      	b.n	80098f8 <_scanf_float+0x150>
 800998e:	2c06      	cmp	r4, #6
 8009990:	d000      	beq.n	8009994 <_scanf_float+0x1ec>
 8009992:	e73a      	b.n	800980a <_scanf_float+0x62>
 8009994:	2407      	movs	r4, #7
 8009996:	e7af      	b.n	80098f8 <_scanf_float+0x150>
 8009998:	6832      	ldr	r2, [r6, #0]
 800999a:	0591      	lsls	r1, r2, #22
 800999c:	d400      	bmi.n	80099a0 <_scanf_float+0x1f8>
 800999e:	e734      	b.n	800980a <_scanf_float+0x62>
 80099a0:	4943      	ldr	r1, [pc, #268]	; (8009ab0 <_scanf_float+0x308>)
 80099a2:	400a      	ands	r2, r1
 80099a4:	6032      	str	r2, [r6, #0]
 80099a6:	9a00      	ldr	r2, [sp, #0]
 80099a8:	9204      	str	r2, [sp, #16]
 80099aa:	e7a5      	b.n	80098f8 <_scanf_float+0x150>
 80099ac:	21a0      	movs	r1, #160	; 0xa0
 80099ae:	2080      	movs	r0, #128	; 0x80
 80099b0:	6832      	ldr	r2, [r6, #0]
 80099b2:	00c9      	lsls	r1, r1, #3
 80099b4:	4011      	ands	r1, r2
 80099b6:	00c0      	lsls	r0, r0, #3
 80099b8:	4281      	cmp	r1, r0
 80099ba:	d006      	beq.n	80099ca <_scanf_float+0x222>
 80099bc:	4202      	tst	r2, r0
 80099be:	d100      	bne.n	80099c2 <_scanf_float+0x21a>
 80099c0:	e723      	b.n	800980a <_scanf_float+0x62>
 80099c2:	9900      	ldr	r1, [sp, #0]
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d100      	bne.n	80099ca <_scanf_float+0x222>
 80099c8:	e726      	b.n	8009818 <_scanf_float+0x70>
 80099ca:	0591      	lsls	r1, r2, #22
 80099cc:	d404      	bmi.n	80099d8 <_scanf_float+0x230>
 80099ce:	9900      	ldr	r1, [sp, #0]
 80099d0:	9804      	ldr	r0, [sp, #16]
 80099d2:	9708      	str	r7, [sp, #32]
 80099d4:	1a09      	subs	r1, r1, r0
 80099d6:	9107      	str	r1, [sp, #28]
 80099d8:	4934      	ldr	r1, [pc, #208]	; (8009aac <_scanf_float+0x304>)
 80099da:	400a      	ands	r2, r1
 80099dc:	21c0      	movs	r1, #192	; 0xc0
 80099de:	0049      	lsls	r1, r1, #1
 80099e0:	430a      	orrs	r2, r1
 80099e2:	6032      	str	r2, [r6, #0]
 80099e4:	2200      	movs	r2, #0
 80099e6:	9200      	str	r2, [sp, #0]
 80099e8:	e786      	b.n	80098f8 <_scanf_float+0x150>
 80099ea:	2203      	movs	r2, #3
 80099ec:	e79e      	b.n	800992c <_scanf_float+0x184>
 80099ee:	23c0      	movs	r3, #192	; 0xc0
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	0029      	movs	r1, r5
 80099f4:	58f3      	ldr	r3, [r6, r3]
 80099f6:	9801      	ldr	r0, [sp, #4]
 80099f8:	4798      	blx	r3
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d100      	bne.n	8009a00 <_scanf_float+0x258>
 80099fe:	e6f6      	b.n	80097ee <_scanf_float+0x46>
 8009a00:	e703      	b.n	800980a <_scanf_float+0x62>
 8009a02:	3f01      	subs	r7, #1
 8009a04:	5933      	ldr	r3, [r6, r4]
 8009a06:	002a      	movs	r2, r5
 8009a08:	7839      	ldrb	r1, [r7, #0]
 8009a0a:	9801      	ldr	r0, [sp, #4]
 8009a0c:	4798      	blx	r3
 8009a0e:	6933      	ldr	r3, [r6, #16]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	6133      	str	r3, [r6, #16]
 8009a14:	e707      	b.n	8009826 <_scanf_float+0x7e>
 8009a16:	1e63      	subs	r3, r4, #1
 8009a18:	2b06      	cmp	r3, #6
 8009a1a:	d80e      	bhi.n	8009a3a <_scanf_float+0x292>
 8009a1c:	9702      	str	r7, [sp, #8]
 8009a1e:	2c02      	cmp	r4, #2
 8009a20:	d920      	bls.n	8009a64 <_scanf_float+0x2bc>
 8009a22:	1be3      	subs	r3, r4, r7
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	9305      	str	r3, [sp, #20]
 8009a28:	9b02      	ldr	r3, [sp, #8]
 8009a2a:	9a05      	ldr	r2, [sp, #20]
 8009a2c:	189b      	adds	r3, r3, r2
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d827      	bhi.n	8009a84 <_scanf_float+0x2dc>
 8009a34:	3c03      	subs	r4, #3
 8009a36:	b2e4      	uxtb	r4, r4
 8009a38:	1b3f      	subs	r7, r7, r4
 8009a3a:	6833      	ldr	r3, [r6, #0]
 8009a3c:	05da      	lsls	r2, r3, #23
 8009a3e:	d554      	bpl.n	8009aea <_scanf_float+0x342>
 8009a40:	055b      	lsls	r3, r3, #21
 8009a42:	d537      	bpl.n	8009ab4 <_scanf_float+0x30c>
 8009a44:	24be      	movs	r4, #190	; 0xbe
 8009a46:	0064      	lsls	r4, r4, #1
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	429f      	cmp	r7, r3
 8009a4c:	d800      	bhi.n	8009a50 <_scanf_float+0x2a8>
 8009a4e:	e6ee      	b.n	800982e <_scanf_float+0x86>
 8009a50:	3f01      	subs	r7, #1
 8009a52:	5933      	ldr	r3, [r6, r4]
 8009a54:	002a      	movs	r2, r5
 8009a56:	7839      	ldrb	r1, [r7, #0]
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	4798      	blx	r3
 8009a5c:	6933      	ldr	r3, [r6, #16]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	6133      	str	r3, [r6, #16]
 8009a62:	e7f1      	b.n	8009a48 <_scanf_float+0x2a0>
 8009a64:	24be      	movs	r4, #190	; 0xbe
 8009a66:	0064      	lsls	r4, r4, #1
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	429f      	cmp	r7, r3
 8009a6c:	d800      	bhi.n	8009a70 <_scanf_float+0x2c8>
 8009a6e:	e6de      	b.n	800982e <_scanf_float+0x86>
 8009a70:	3f01      	subs	r7, #1
 8009a72:	5933      	ldr	r3, [r6, r4]
 8009a74:	002a      	movs	r2, r5
 8009a76:	7839      	ldrb	r1, [r7, #0]
 8009a78:	9801      	ldr	r0, [sp, #4]
 8009a7a:	4798      	blx	r3
 8009a7c:	6933      	ldr	r3, [r6, #16]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	6133      	str	r3, [r6, #16]
 8009a82:	e7f1      	b.n	8009a68 <_scanf_float+0x2c0>
 8009a84:	9b02      	ldr	r3, [sp, #8]
 8009a86:	002a      	movs	r2, r5
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	7819      	ldrb	r1, [r3, #0]
 8009a8c:	9302      	str	r3, [sp, #8]
 8009a8e:	23be      	movs	r3, #190	; 0xbe
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	58f3      	ldr	r3, [r6, r3]
 8009a94:	9801      	ldr	r0, [sp, #4]
 8009a96:	9309      	str	r3, [sp, #36]	; 0x24
 8009a98:	4798      	blx	r3
 8009a9a:	6933      	ldr	r3, [r6, #16]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	6133      	str	r3, [r6, #16]
 8009aa0:	e7c2      	b.n	8009a28 <_scanf_float+0x280>
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	fffffeff 	.word	0xfffffeff
 8009aa8:	fffffe7f 	.word	0xfffffe7f
 8009aac:	fffff87f 	.word	0xfffff87f
 8009ab0:	fffffd7f 	.word	0xfffffd7f
 8009ab4:	6933      	ldr	r3, [r6, #16]
 8009ab6:	1e7c      	subs	r4, r7, #1
 8009ab8:	7821      	ldrb	r1, [r4, #0]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	6133      	str	r3, [r6, #16]
 8009abe:	2965      	cmp	r1, #101	; 0x65
 8009ac0:	d00c      	beq.n	8009adc <_scanf_float+0x334>
 8009ac2:	2945      	cmp	r1, #69	; 0x45
 8009ac4:	d00a      	beq.n	8009adc <_scanf_float+0x334>
 8009ac6:	23be      	movs	r3, #190	; 0xbe
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	58f3      	ldr	r3, [r6, r3]
 8009acc:	002a      	movs	r2, r5
 8009ace:	9801      	ldr	r0, [sp, #4]
 8009ad0:	4798      	blx	r3
 8009ad2:	6933      	ldr	r3, [r6, #16]
 8009ad4:	1ebc      	subs	r4, r7, #2
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	7821      	ldrb	r1, [r4, #0]
 8009ada:	6133      	str	r3, [r6, #16]
 8009adc:	23be      	movs	r3, #190	; 0xbe
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	002a      	movs	r2, r5
 8009ae2:	58f3      	ldr	r3, [r6, r3]
 8009ae4:	9801      	ldr	r0, [sp, #4]
 8009ae6:	4798      	blx	r3
 8009ae8:	0027      	movs	r7, r4
 8009aea:	6832      	ldr	r2, [r6, #0]
 8009aec:	2310      	movs	r3, #16
 8009aee:	0011      	movs	r1, r2
 8009af0:	4019      	ands	r1, r3
 8009af2:	9102      	str	r1, [sp, #8]
 8009af4:	421a      	tst	r2, r3
 8009af6:	d158      	bne.n	8009baa <_scanf_float+0x402>
 8009af8:	23c0      	movs	r3, #192	; 0xc0
 8009afa:	7039      	strb	r1, [r7, #0]
 8009afc:	6832      	ldr	r2, [r6, #0]
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	4013      	ands	r3, r2
 8009b02:	2280      	movs	r2, #128	; 0x80
 8009b04:	00d2      	lsls	r2, r2, #3
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d11d      	bne.n	8009b46 <_scanf_float+0x39e>
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	9a00      	ldr	r2, [sp, #0]
 8009b0e:	9900      	ldr	r1, [sp, #0]
 8009b10:	1a9a      	subs	r2, r3, r2
 8009b12:	428b      	cmp	r3, r1
 8009b14:	d124      	bne.n	8009b60 <_scanf_float+0x3b8>
 8009b16:	2200      	movs	r2, #0
 8009b18:	9903      	ldr	r1, [sp, #12]
 8009b1a:	9801      	ldr	r0, [sp, #4]
 8009b1c:	f000 ff2a 	bl	800a974 <_strtod_r>
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	000d      	movs	r5, r1
 8009b24:	6831      	ldr	r1, [r6, #0]
 8009b26:	0004      	movs	r4, r0
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	078a      	lsls	r2, r1, #30
 8009b2c:	d525      	bpl.n	8009b7a <_scanf_float+0x3d2>
 8009b2e:	1d1a      	adds	r2, r3, #4
 8009b30:	9906      	ldr	r1, [sp, #24]
 8009b32:	600a      	str	r2, [r1, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	601c      	str	r4, [r3, #0]
 8009b38:	605d      	str	r5, [r3, #4]
 8009b3a:	68f3      	ldr	r3, [r6, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60f3      	str	r3, [r6, #12]
 8009b40:	9802      	ldr	r0, [sp, #8]
 8009b42:	b00b      	add	sp, #44	; 0x2c
 8009b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d0e4      	beq.n	8009b16 <_scanf_float+0x36e>
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	9a02      	ldr	r2, [sp, #8]
 8009b50:	1c59      	adds	r1, r3, #1
 8009b52:	9801      	ldr	r0, [sp, #4]
 8009b54:	230a      	movs	r3, #10
 8009b56:	f000 ffa3 	bl	800aaa0 <_strtol_r>
 8009b5a:	9b07      	ldr	r3, [sp, #28]
 8009b5c:	9f08      	ldr	r7, [sp, #32]
 8009b5e:	1ac2      	subs	r2, r0, r3
 8009b60:	0033      	movs	r3, r6
 8009b62:	3370      	adds	r3, #112	; 0x70
 8009b64:	33ff      	adds	r3, #255	; 0xff
 8009b66:	429f      	cmp	r7, r3
 8009b68:	d302      	bcc.n	8009b70 <_scanf_float+0x3c8>
 8009b6a:	0037      	movs	r7, r6
 8009b6c:	376f      	adds	r7, #111	; 0x6f
 8009b6e:	37ff      	adds	r7, #255	; 0xff
 8009b70:	0038      	movs	r0, r7
 8009b72:	490f      	ldr	r1, [pc, #60]	; (8009bb0 <_scanf_float+0x408>)
 8009b74:	f000 f824 	bl	8009bc0 <siprintf>
 8009b78:	e7cd      	b.n	8009b16 <_scanf_float+0x36e>
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	0749      	lsls	r1, r1, #29
 8009b7e:	d4d7      	bmi.n	8009b30 <_scanf_float+0x388>
 8009b80:	9906      	ldr	r1, [sp, #24]
 8009b82:	0020      	movs	r0, r4
 8009b84:	600a      	str	r2, [r1, #0]
 8009b86:	681f      	ldr	r7, [r3, #0]
 8009b88:	0022      	movs	r2, r4
 8009b8a:	002b      	movs	r3, r5
 8009b8c:	0029      	movs	r1, r5
 8009b8e:	f7f8 fd1b 	bl	80025c8 <__aeabi_dcmpun>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d004      	beq.n	8009ba0 <_scanf_float+0x3f8>
 8009b96:	4807      	ldr	r0, [pc, #28]	; (8009bb4 <_scanf_float+0x40c>)
 8009b98:	f000 f80e 	bl	8009bb8 <nanf>
 8009b9c:	6038      	str	r0, [r7, #0]
 8009b9e:	e7cc      	b.n	8009b3a <_scanf_float+0x392>
 8009ba0:	0020      	movs	r0, r4
 8009ba2:	0029      	movs	r1, r5
 8009ba4:	f7f8 fdba 	bl	800271c <__aeabi_d2f>
 8009ba8:	e7f8      	b.n	8009b9c <_scanf_float+0x3f4>
 8009baa:	2300      	movs	r3, #0
 8009bac:	e640      	b.n	8009830 <_scanf_float+0x88>
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	0800e386 	.word	0x0800e386
 8009bb4:	0800e7bb 	.word	0x0800e7bb

08009bb8 <nanf>:
 8009bb8:	4800      	ldr	r0, [pc, #0]	; (8009bbc <nanf+0x4>)
 8009bba:	4770      	bx	lr
 8009bbc:	7fc00000 	.word	0x7fc00000

08009bc0 <siprintf>:
 8009bc0:	b40e      	push	{r1, r2, r3}
 8009bc2:	b500      	push	{lr}
 8009bc4:	490b      	ldr	r1, [pc, #44]	; (8009bf4 <siprintf+0x34>)
 8009bc6:	b09c      	sub	sp, #112	; 0x70
 8009bc8:	ab1d      	add	r3, sp, #116	; 0x74
 8009bca:	9002      	str	r0, [sp, #8]
 8009bcc:	9006      	str	r0, [sp, #24]
 8009bce:	9107      	str	r1, [sp, #28]
 8009bd0:	9104      	str	r1, [sp, #16]
 8009bd2:	4809      	ldr	r0, [pc, #36]	; (8009bf8 <siprintf+0x38>)
 8009bd4:	4909      	ldr	r1, [pc, #36]	; (8009bfc <siprintf+0x3c>)
 8009bd6:	cb04      	ldmia	r3!, {r2}
 8009bd8:	9105      	str	r1, [sp, #20]
 8009bda:	6800      	ldr	r0, [r0, #0]
 8009bdc:	a902      	add	r1, sp, #8
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	f002 ffce 	bl	800cb80 <_svfiprintf_r>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9a02      	ldr	r2, [sp, #8]
 8009be8:	7013      	strb	r3, [r2, #0]
 8009bea:	b01c      	add	sp, #112	; 0x70
 8009bec:	bc08      	pop	{r3}
 8009bee:	b003      	add	sp, #12
 8009bf0:	4718      	bx	r3
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	7fffffff 	.word	0x7fffffff
 8009bf8:	2000000c 	.word	0x2000000c
 8009bfc:	ffff0208 	.word	0xffff0208

08009c00 <siscanf>:
 8009c00:	b40e      	push	{r1, r2, r3}
 8009c02:	b530      	push	{r4, r5, lr}
 8009c04:	2381      	movs	r3, #129	; 0x81
 8009c06:	b09c      	sub	sp, #112	; 0x70
 8009c08:	466a      	mov	r2, sp
 8009c0a:	ac1f      	add	r4, sp, #124	; 0x7c
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	cc20      	ldmia	r4!, {r5}
 8009c10:	8293      	strh	r3, [r2, #20]
 8009c12:	9002      	str	r0, [sp, #8]
 8009c14:	9006      	str	r0, [sp, #24]
 8009c16:	f7f6 fa81 	bl	800011c <strlen>
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <siscanf+0x48>)
 8009c1c:	466a      	mov	r2, sp
 8009c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c20:	2300      	movs	r3, #0
 8009c22:	9003      	str	r0, [sp, #12]
 8009c24:	9007      	str	r0, [sp, #28]
 8009c26:	4809      	ldr	r0, [pc, #36]	; (8009c4c <siscanf+0x4c>)
 8009c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c2a:	9314      	str	r3, [sp, #80]	; 0x50
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	82d3      	strh	r3, [r2, #22]
 8009c30:	a902      	add	r1, sp, #8
 8009c32:	0023      	movs	r3, r4
 8009c34:	002a      	movs	r2, r5
 8009c36:	6800      	ldr	r0, [r0, #0]
 8009c38:	9401      	str	r4, [sp, #4]
 8009c3a:	f003 f8fd 	bl	800ce38 <__ssvfiscanf_r>
 8009c3e:	b01c      	add	sp, #112	; 0x70
 8009c40:	bc30      	pop	{r4, r5}
 8009c42:	bc08      	pop	{r3}
 8009c44:	b003      	add	sp, #12
 8009c46:	4718      	bx	r3
 8009c48:	08009c79 	.word	0x08009c79
 8009c4c:	2000000c 	.word	0x2000000c

08009c50 <__sread>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	000c      	movs	r4, r1
 8009c54:	250e      	movs	r5, #14
 8009c56:	5f49      	ldrsh	r1, [r1, r5]
 8009c58:	f003 fbc8 	bl	800d3ec <_read_r>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	db03      	blt.n	8009c68 <__sread+0x18>
 8009c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c62:	181b      	adds	r3, r3, r0
 8009c64:	6563      	str	r3, [r4, #84]	; 0x54
 8009c66:	bd70      	pop	{r4, r5, r6, pc}
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	4a02      	ldr	r2, [pc, #8]	; (8009c74 <__sread+0x24>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	81a3      	strh	r3, [r4, #12]
 8009c70:	e7f9      	b.n	8009c66 <__sread+0x16>
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	ffffefff 	.word	0xffffefff

08009c78 <__seofread>:
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4770      	bx	lr

08009c7c <__swrite>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	001f      	movs	r7, r3
 8009c80:	898b      	ldrh	r3, [r1, #12]
 8009c82:	0005      	movs	r5, r0
 8009c84:	000c      	movs	r4, r1
 8009c86:	0016      	movs	r6, r2
 8009c88:	05db      	lsls	r3, r3, #23
 8009c8a:	d505      	bpl.n	8009c98 <__swrite+0x1c>
 8009c8c:	230e      	movs	r3, #14
 8009c8e:	5ec9      	ldrsh	r1, [r1, r3]
 8009c90:	2200      	movs	r2, #0
 8009c92:	2302      	movs	r3, #2
 8009c94:	f002 f94e 	bl	800bf34 <_lseek_r>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	4a05      	ldr	r2, [pc, #20]	; (8009cb0 <__swrite+0x34>)
 8009c9c:	0028      	movs	r0, r5
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	0032      	movs	r2, r6
 8009ca4:	230e      	movs	r3, #14
 8009ca6:	5ee1      	ldrsh	r1, [r4, r3]
 8009ca8:	003b      	movs	r3, r7
 8009caa:	f000 fefd 	bl	800aaa8 <_write_r>
 8009cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb0:	ffffefff 	.word	0xffffefff

08009cb4 <__sseek>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	000c      	movs	r4, r1
 8009cb8:	250e      	movs	r5, #14
 8009cba:	5f49      	ldrsh	r1, [r1, r5]
 8009cbc:	f002 f93a 	bl	800bf34 <_lseek_r>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	1c42      	adds	r2, r0, #1
 8009cc4:	d103      	bne.n	8009cce <__sseek+0x1a>
 8009cc6:	4a05      	ldr	r2, [pc, #20]	; (8009cdc <__sseek+0x28>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	2280      	movs	r2, #128	; 0x80
 8009cd0:	0152      	lsls	r2, r2, #5
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8009cd8:	e7f8      	b.n	8009ccc <__sseek+0x18>
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	ffffefff 	.word	0xffffefff

08009ce0 <__sclose>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	230e      	movs	r3, #14
 8009ce4:	5ec9      	ldrsh	r1, [r1, r3]
 8009ce6:	f000 fef3 	bl	800aad0 <_close_r>
 8009cea:	bd10      	pop	{r4, pc}

08009cec <strcpy>:
 8009cec:	0003      	movs	r3, r0
 8009cee:	780a      	ldrb	r2, [r1, #0]
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	d1f9      	bne.n	8009cee <strcpy+0x2>
 8009cfa:	4770      	bx	lr

08009cfc <sulp>:
 8009cfc:	b570      	push	{r4, r5, r6, lr}
 8009cfe:	0016      	movs	r6, r2
 8009d00:	000d      	movs	r5, r1
 8009d02:	f002 fce1 	bl	800c6c8 <__ulp>
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d00d      	beq.n	8009d26 <sulp+0x2a>
 8009d0a:	236b      	movs	r3, #107	; 0x6b
 8009d0c:	006a      	lsls	r2, r5, #1
 8009d0e:	0d52      	lsrs	r2, r2, #21
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd07      	ble.n	8009d26 <sulp+0x2a>
 8009d16:	2400      	movs	r4, #0
 8009d18:	4a03      	ldr	r2, [pc, #12]	; (8009d28 <sulp+0x2c>)
 8009d1a:	051b      	lsls	r3, r3, #20
 8009d1c:	189d      	adds	r5, r3, r2
 8009d1e:	002b      	movs	r3, r5
 8009d20:	0022      	movs	r2, r4
 8009d22:	f7f7 fe53 	bl	80019cc <__aeabi_dmul>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	3ff00000 	.word	0x3ff00000

08009d2c <_strtod_l>:
 8009d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d2e:	001d      	movs	r5, r3
 8009d30:	2300      	movs	r3, #0
 8009d32:	b0a7      	sub	sp, #156	; 0x9c
 8009d34:	9322      	str	r3, [sp, #136]	; 0x88
 8009d36:	4bae      	ldr	r3, [pc, #696]	; (8009ff0 <_strtod_l+0x2c4>)
 8009d38:	9005      	str	r0, [sp, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	9108      	str	r1, [sp, #32]
 8009d3e:	0018      	movs	r0, r3
 8009d40:	9307      	str	r3, [sp, #28]
 8009d42:	921d      	str	r2, [sp, #116]	; 0x74
 8009d44:	f7f6 f9ea 	bl	800011c <strlen>
 8009d48:	2600      	movs	r6, #0
 8009d4a:	0004      	movs	r4, r0
 8009d4c:	2700      	movs	r7, #0
 8009d4e:	9b08      	ldr	r3, [sp, #32]
 8009d50:	9321      	str	r3, [sp, #132]	; 0x84
 8009d52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d54:	7813      	ldrb	r3, [r2, #0]
 8009d56:	2b2b      	cmp	r3, #43	; 0x2b
 8009d58:	d058      	beq.n	8009e0c <_strtod_l+0xe0>
 8009d5a:	d844      	bhi.n	8009de6 <_strtod_l+0xba>
 8009d5c:	2b0d      	cmp	r3, #13
 8009d5e:	d83d      	bhi.n	8009ddc <_strtod_l+0xb0>
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d83d      	bhi.n	8009de0 <_strtod_l+0xb4>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d047      	beq.n	8009df8 <_strtod_l+0xcc>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d70:	920a      	str	r2, [sp, #40]	; 0x28
 8009d72:	9306      	str	r3, [sp, #24]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	2b30      	cmp	r3, #48	; 0x30
 8009d78:	d000      	beq.n	8009d7c <_strtod_l+0x50>
 8009d7a:	e083      	b.n	8009e84 <_strtod_l+0x158>
 8009d7c:	9b06      	ldr	r3, [sp, #24]
 8009d7e:	3220      	adds	r2, #32
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	4393      	bics	r3, r2
 8009d84:	2b58      	cmp	r3, #88	; 0x58
 8009d86:	d000      	beq.n	8009d8a <_strtod_l+0x5e>
 8009d88:	e072      	b.n	8009e70 <_strtod_l+0x144>
 8009d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d8c:	9502      	str	r5, [sp, #8]
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	ab22      	add	r3, sp, #136	; 0x88
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	4a97      	ldr	r2, [pc, #604]	; (8009ff4 <_strtod_l+0x2c8>)
 8009d96:	ab23      	add	r3, sp, #140	; 0x8c
 8009d98:	9805      	ldr	r0, [sp, #20]
 8009d9a:	a921      	add	r1, sp, #132	; 0x84
 8009d9c:	f001 fdbe 	bl	800b91c <__gethex>
 8009da0:	2307      	movs	r3, #7
 8009da2:	0005      	movs	r5, r0
 8009da4:	0004      	movs	r4, r0
 8009da6:	401d      	ands	r5, r3
 8009da8:	4218      	tst	r0, r3
 8009daa:	d006      	beq.n	8009dba <_strtod_l+0x8e>
 8009dac:	2d06      	cmp	r5, #6
 8009dae:	d12f      	bne.n	8009e10 <_strtod_l+0xe4>
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	3301      	adds	r3, #1
 8009db4:	9321      	str	r3, [sp, #132]	; 0x84
 8009db6:	2300      	movs	r3, #0
 8009db8:	9310      	str	r3, [sp, #64]	; 0x40
 8009dba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <_strtod_l+0x9a>
 8009dc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01c      	beq.n	8009e06 <_strtod_l+0xda>
 8009dcc:	2380      	movs	r3, #128	; 0x80
 8009dce:	0032      	movs	r2, r6
 8009dd0:	061b      	lsls	r3, r3, #24
 8009dd2:	18fb      	adds	r3, r7, r3
 8009dd4:	0010      	movs	r0, r2
 8009dd6:	0019      	movs	r1, r3
 8009dd8:	b027      	add	sp, #156	; 0x9c
 8009dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d1c3      	bne.n	8009d68 <_strtod_l+0x3c>
 8009de0:	3201      	adds	r2, #1
 8009de2:	9221      	str	r2, [sp, #132]	; 0x84
 8009de4:	e7b5      	b.n	8009d52 <_strtod_l+0x26>
 8009de6:	2b2d      	cmp	r3, #45	; 0x2d
 8009de8:	d1be      	bne.n	8009d68 <_strtod_l+0x3c>
 8009dea:	3b2c      	subs	r3, #44	; 0x2c
 8009dec:	9310      	str	r3, [sp, #64]	; 0x40
 8009dee:	1c53      	adds	r3, r2, #1
 8009df0:	9321      	str	r3, [sp, #132]	; 0x84
 8009df2:	7853      	ldrb	r3, [r2, #1]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1b9      	bne.n	8009d6c <_strtod_l+0x40>
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	9321      	str	r3, [sp, #132]	; 0x84
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8009e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1dc      	bne.n	8009dc0 <_strtod_l+0x94>
 8009e06:	0032      	movs	r2, r6
 8009e08:	003b      	movs	r3, r7
 8009e0a:	e7e3      	b.n	8009dd4 <_strtod_l+0xa8>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e7ed      	b.n	8009dec <_strtod_l+0xc0>
 8009e10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	d007      	beq.n	8009e26 <_strtod_l+0xfa>
 8009e16:	2135      	movs	r1, #53	; 0x35
 8009e18:	a824      	add	r0, sp, #144	; 0x90
 8009e1a:	f002 fd54 	bl	800c8c6 <__copybits>
 8009e1e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e20:	9805      	ldr	r0, [sp, #20]
 8009e22:	f002 f90f 	bl	800c044 <_Bfree>
 8009e26:	1e68      	subs	r0, r5, #1
 8009e28:	2805      	cmp	r0, #5
 8009e2a:	d806      	bhi.n	8009e3a <_strtod_l+0x10e>
 8009e2c:	f7f6 f97e 	bl	800012c <__gnu_thumb1_case_uqi>
 8009e30:	1c190b0e 	.word	0x1c190b0e
 8009e34:	030e      	.short	0x030e
 8009e36:	2700      	movs	r7, #0
 8009e38:	003e      	movs	r6, r7
 8009e3a:	0723      	lsls	r3, r4, #28
 8009e3c:	d5bd      	bpl.n	8009dba <_strtod_l+0x8e>
 8009e3e:	2380      	movs	r3, #128	; 0x80
 8009e40:	061b      	lsls	r3, r3, #24
 8009e42:	431f      	orrs	r7, r3
 8009e44:	e7b9      	b.n	8009dba <_strtod_l+0x8e>
 8009e46:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009e48:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009e4a:	e7f6      	b.n	8009e3a <_strtod_l+0x10e>
 8009e4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009e4e:	4a6a      	ldr	r2, [pc, #424]	; (8009ff8 <_strtod_l+0x2cc>)
 8009e50:	496a      	ldr	r1, [pc, #424]	; (8009ffc <_strtod_l+0x2d0>)
 8009e52:	401a      	ands	r2, r3
 8009e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e56:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009e58:	185b      	adds	r3, r3, r1
 8009e5a:	051b      	lsls	r3, r3, #20
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	0017      	movs	r7, r2
 8009e60:	e7eb      	b.n	8009e3a <_strtod_l+0x10e>
 8009e62:	2600      	movs	r6, #0
 8009e64:	4f66      	ldr	r7, [pc, #408]	; (800a000 <_strtod_l+0x2d4>)
 8009e66:	e7e8      	b.n	8009e3a <_strtod_l+0x10e>
 8009e68:	2601      	movs	r6, #1
 8009e6a:	4f66      	ldr	r7, [pc, #408]	; (800a004 <_strtod_l+0x2d8>)
 8009e6c:	4276      	negs	r6, r6
 8009e6e:	e7e4      	b.n	8009e3a <_strtod_l+0x10e>
 8009e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	9221      	str	r2, [sp, #132]	; 0x84
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b30      	cmp	r3, #48	; 0x30
 8009e7a:	d0f9      	beq.n	8009e70 <_strtod_l+0x144>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d09c      	beq.n	8009dba <_strtod_l+0x8e>
 8009e80:	2301      	movs	r3, #1
 8009e82:	930a      	str	r3, [sp, #40]	; 0x28
 8009e84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e86:	220a      	movs	r2, #10
 8009e88:	9311      	str	r3, [sp, #68]	; 0x44
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e90:	9309      	str	r3, [sp, #36]	; 0x24
 8009e92:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009e94:	7805      	ldrb	r5, [r0, #0]
 8009e96:	002b      	movs	r3, r5
 8009e98:	3b30      	subs	r3, #48	; 0x30
 8009e9a:	b2d9      	uxtb	r1, r3
 8009e9c:	2909      	cmp	r1, #9
 8009e9e:	d927      	bls.n	8009ef0 <_strtod_l+0x1c4>
 8009ea0:	0022      	movs	r2, r4
 8009ea2:	9907      	ldr	r1, [sp, #28]
 8009ea4:	f003 fb0a 	bl	800d4bc <strncmp>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d033      	beq.n	8009f14 <_strtod_l+0x1e8>
 8009eac:	2000      	movs	r0, #0
 8009eae:	002b      	movs	r3, r5
 8009eb0:	4684      	mov	ip, r0
 8009eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb4:	900c      	str	r0, [sp, #48]	; 0x30
 8009eb6:	9206      	str	r2, [sp, #24]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	0019      	movs	r1, r3
 8009ebc:	4391      	bics	r1, r2
 8009ebe:	000a      	movs	r2, r1
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	9107      	str	r1, [sp, #28]
 8009ec4:	2a45      	cmp	r2, #69	; 0x45
 8009ec6:	d000      	beq.n	8009eca <_strtod_l+0x19e>
 8009ec8:	e0c5      	b.n	800a056 <_strtod_l+0x32a>
 8009eca:	9b06      	ldr	r3, [sp, #24]
 8009ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ece:	4303      	orrs	r3, r0
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	428b      	cmp	r3, r1
 8009ed4:	d090      	beq.n	8009df8 <_strtod_l+0xcc>
 8009ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ed8:	9308      	str	r3, [sp, #32]
 8009eda:	3301      	adds	r3, #1
 8009edc:	9321      	str	r3, [sp, #132]	; 0x84
 8009ede:	9b08      	ldr	r3, [sp, #32]
 8009ee0:	785b      	ldrb	r3, [r3, #1]
 8009ee2:	2b2b      	cmp	r3, #43	; 0x2b
 8009ee4:	d075      	beq.n	8009fd2 <_strtod_l+0x2a6>
 8009ee6:	000c      	movs	r4, r1
 8009ee8:	2b2d      	cmp	r3, #45	; 0x2d
 8009eea:	d178      	bne.n	8009fde <_strtod_l+0x2b2>
 8009eec:	2401      	movs	r4, #1
 8009eee:	e071      	b.n	8009fd4 <_strtod_l+0x2a8>
 8009ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ef2:	2908      	cmp	r1, #8
 8009ef4:	dc09      	bgt.n	8009f0a <_strtod_l+0x1de>
 8009ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ef8:	4351      	muls	r1, r2
 8009efa:	185b      	adds	r3, r3, r1
 8009efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f00:	3001      	adds	r0, #1
 8009f02:	3301      	adds	r3, #1
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	9021      	str	r0, [sp, #132]	; 0x84
 8009f08:	e7c3      	b.n	8009e92 <_strtod_l+0x166>
 8009f0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f0c:	4351      	muls	r1, r2
 8009f0e:	185b      	adds	r3, r3, r1
 8009f10:	930e      	str	r3, [sp, #56]	; 0x38
 8009f12:	e7f4      	b.n	8009efe <_strtod_l+0x1d2>
 8009f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f18:	191c      	adds	r4, r3, r4
 8009f1a:	9421      	str	r4, [sp, #132]	; 0x84
 8009f1c:	7823      	ldrb	r3, [r4, #0]
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	d039      	beq.n	8009f96 <_strtod_l+0x26a>
 8009f22:	900c      	str	r0, [sp, #48]	; 0x30
 8009f24:	9206      	str	r2, [sp, #24]
 8009f26:	001a      	movs	r2, r3
 8009f28:	3a30      	subs	r2, #48	; 0x30
 8009f2a:	2a09      	cmp	r2, #9
 8009f2c:	d912      	bls.n	8009f54 <_strtod_l+0x228>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4694      	mov	ip, r2
 8009f32:	e7c1      	b.n	8009eb8 <_strtod_l+0x18c>
 8009f34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f36:	3001      	adds	r0, #1
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	9221      	str	r2, [sp, #132]	; 0x84
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b30      	cmp	r3, #48	; 0x30
 8009f40:	d0f8      	beq.n	8009f34 <_strtod_l+0x208>
 8009f42:	001a      	movs	r2, r3
 8009f44:	3a31      	subs	r2, #49	; 0x31
 8009f46:	2a08      	cmp	r2, #8
 8009f48:	d83e      	bhi.n	8009fc8 <_strtod_l+0x29c>
 8009f4a:	900c      	str	r0, [sp, #48]	; 0x30
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f50:	9006      	str	r0, [sp, #24]
 8009f52:	9211      	str	r2, [sp, #68]	; 0x44
 8009f54:	001a      	movs	r2, r3
 8009f56:	9906      	ldr	r1, [sp, #24]
 8009f58:	1c44      	adds	r4, r0, #1
 8009f5a:	3a30      	subs	r2, #48	; 0x30
 8009f5c:	2b30      	cmp	r3, #48	; 0x30
 8009f5e:	d013      	beq.n	8009f88 <_strtod_l+0x25c>
 8009f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f62:	191b      	adds	r3, r3, r4
 8009f64:	930c      	str	r3, [sp, #48]	; 0x30
 8009f66:	1844      	adds	r4, r0, r1
 8009f68:	000b      	movs	r3, r1
 8009f6a:	210a      	movs	r1, #10
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d114      	bne.n	8009f9a <_strtod_l+0x26e>
 8009f70:	9b06      	ldr	r3, [sp, #24]
 8009f72:	1c59      	adds	r1, r3, #1
 8009f74:	1809      	adds	r1, r1, r0
 8009f76:	1818      	adds	r0, r3, r0
 8009f78:	2808      	cmp	r0, #8
 8009f7a:	dc1c      	bgt.n	8009fb6 <_strtod_l+0x28a>
 8009f7c:	230a      	movs	r3, #10
 8009f7e:	2400      	movs	r4, #0
 8009f80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009f82:	4343      	muls	r3, r0
 8009f84:	18d3      	adds	r3, r2, r3
 8009f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f8a:	0020      	movs	r0, r4
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	9221      	str	r2, [sp, #132]	; 0x84
 8009f90:	785b      	ldrb	r3, [r3, #1]
 8009f92:	9106      	str	r1, [sp, #24]
 8009f94:	e7c7      	b.n	8009f26 <_strtod_l+0x1fa>
 8009f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f98:	e7d1      	b.n	8009f3e <_strtod_l+0x212>
 8009f9a:	2b08      	cmp	r3, #8
 8009f9c:	dc04      	bgt.n	8009fa8 <_strtod_l+0x27c>
 8009f9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009fa0:	434d      	muls	r5, r1
 8009fa2:	950b      	str	r5, [sp, #44]	; 0x2c
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	e7e1      	b.n	8009f6c <_strtod_l+0x240>
 8009fa8:	1c5d      	adds	r5, r3, #1
 8009faa:	2d10      	cmp	r5, #16
 8009fac:	dcfa      	bgt.n	8009fa4 <_strtod_l+0x278>
 8009fae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009fb0:	434d      	muls	r5, r1
 8009fb2:	950e      	str	r5, [sp, #56]	; 0x38
 8009fb4:	e7f6      	b.n	8009fa4 <_strtod_l+0x278>
 8009fb6:	2400      	movs	r4, #0
 8009fb8:	2910      	cmp	r1, #16
 8009fba:	dce5      	bgt.n	8009f88 <_strtod_l+0x25c>
 8009fbc:	230a      	movs	r3, #10
 8009fbe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009fc0:	4343      	muls	r3, r0
 8009fc2:	18d3      	adds	r3, r2, r3
 8009fc4:	930e      	str	r3, [sp, #56]	; 0x38
 8009fc6:	e7df      	b.n	8009f88 <_strtod_l+0x25c>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	920c      	str	r2, [sp, #48]	; 0x30
 8009fcc:	9206      	str	r2, [sp, #24]
 8009fce:	3201      	adds	r2, #1
 8009fd0:	e7ae      	b.n	8009f30 <_strtod_l+0x204>
 8009fd2:	2400      	movs	r4, #0
 8009fd4:	9b08      	ldr	r3, [sp, #32]
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	9321      	str	r3, [sp, #132]	; 0x84
 8009fda:	9b08      	ldr	r3, [sp, #32]
 8009fdc:	789b      	ldrb	r3, [r3, #2]
 8009fde:	001a      	movs	r2, r3
 8009fe0:	3a30      	subs	r2, #48	; 0x30
 8009fe2:	2a09      	cmp	r2, #9
 8009fe4:	d914      	bls.n	800a010 <_strtod_l+0x2e4>
 8009fe6:	9a08      	ldr	r2, [sp, #32]
 8009fe8:	9221      	str	r2, [sp, #132]	; 0x84
 8009fea:	2200      	movs	r2, #0
 8009fec:	e032      	b.n	800a054 <_strtod_l+0x328>
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	0800e5e0 	.word	0x0800e5e0
 8009ff4:	0800e38c 	.word	0x0800e38c
 8009ff8:	ffefffff 	.word	0xffefffff
 8009ffc:	00000433 	.word	0x00000433
 800a000:	7ff00000 	.word	0x7ff00000
 800a004:	7fffffff 	.word	0x7fffffff
 800a008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	9221      	str	r2, [sp, #132]	; 0x84
 800a00e:	785b      	ldrb	r3, [r3, #1]
 800a010:	2b30      	cmp	r3, #48	; 0x30
 800a012:	d0f9      	beq.n	800a008 <_strtod_l+0x2dc>
 800a014:	2200      	movs	r2, #0
 800a016:	9207      	str	r2, [sp, #28]
 800a018:	001a      	movs	r2, r3
 800a01a:	3a31      	subs	r2, #49	; 0x31
 800a01c:	2a08      	cmp	r2, #8
 800a01e:	d81a      	bhi.n	800a056 <_strtod_l+0x32a>
 800a020:	3b30      	subs	r3, #48	; 0x30
 800a022:	001a      	movs	r2, r3
 800a024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a026:	9307      	str	r3, [sp, #28]
 800a028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a02a:	1c59      	adds	r1, r3, #1
 800a02c:	9121      	str	r1, [sp, #132]	; 0x84
 800a02e:	785b      	ldrb	r3, [r3, #1]
 800a030:	001d      	movs	r5, r3
 800a032:	3d30      	subs	r5, #48	; 0x30
 800a034:	2d09      	cmp	r5, #9
 800a036:	d939      	bls.n	800a0ac <_strtod_l+0x380>
 800a038:	9d07      	ldr	r5, [sp, #28]
 800a03a:	1b49      	subs	r1, r1, r5
 800a03c:	4daf      	ldr	r5, [pc, #700]	; (800a2fc <_strtod_l+0x5d0>)
 800a03e:	9507      	str	r5, [sp, #28]
 800a040:	2908      	cmp	r1, #8
 800a042:	dc03      	bgt.n	800a04c <_strtod_l+0x320>
 800a044:	9207      	str	r2, [sp, #28]
 800a046:	42aa      	cmp	r2, r5
 800a048:	dd00      	ble.n	800a04c <_strtod_l+0x320>
 800a04a:	9507      	str	r5, [sp, #28]
 800a04c:	2c00      	cmp	r4, #0
 800a04e:	d002      	beq.n	800a056 <_strtod_l+0x32a>
 800a050:	9a07      	ldr	r2, [sp, #28]
 800a052:	4252      	negs	r2, r2
 800a054:	9207      	str	r2, [sp, #28]
 800a056:	9a06      	ldr	r2, [sp, #24]
 800a058:	2a00      	cmp	r2, #0
 800a05a:	d14b      	bne.n	800a0f4 <_strtod_l+0x3c8>
 800a05c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a05e:	4310      	orrs	r0, r2
 800a060:	d000      	beq.n	800a064 <_strtod_l+0x338>
 800a062:	e6aa      	b.n	8009dba <_strtod_l+0x8e>
 800a064:	4662      	mov	r2, ip
 800a066:	2a00      	cmp	r2, #0
 800a068:	d000      	beq.n	800a06c <_strtod_l+0x340>
 800a06a:	e6c5      	b.n	8009df8 <_strtod_l+0xcc>
 800a06c:	2b69      	cmp	r3, #105	; 0x69
 800a06e:	d025      	beq.n	800a0bc <_strtod_l+0x390>
 800a070:	dc21      	bgt.n	800a0b6 <_strtod_l+0x38a>
 800a072:	2b49      	cmp	r3, #73	; 0x49
 800a074:	d022      	beq.n	800a0bc <_strtod_l+0x390>
 800a076:	2b4e      	cmp	r3, #78	; 0x4e
 800a078:	d000      	beq.n	800a07c <_strtod_l+0x350>
 800a07a:	e6bd      	b.n	8009df8 <_strtod_l+0xcc>
 800a07c:	49a0      	ldr	r1, [pc, #640]	; (800a300 <_strtod_l+0x5d4>)
 800a07e:	a821      	add	r0, sp, #132	; 0x84
 800a080:	f001 fe9a 	bl	800bdb8 <__match>
 800a084:	2800      	cmp	r0, #0
 800a086:	d100      	bne.n	800a08a <_strtod_l+0x35e>
 800a088:	e6b6      	b.n	8009df8 <_strtod_l+0xcc>
 800a08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b28      	cmp	r3, #40	; 0x28
 800a090:	d12a      	bne.n	800a0e8 <_strtod_l+0x3bc>
 800a092:	499c      	ldr	r1, [pc, #624]	; (800a304 <_strtod_l+0x5d8>)
 800a094:	aa24      	add	r2, sp, #144	; 0x90
 800a096:	a821      	add	r0, sp, #132	; 0x84
 800a098:	f001 fea2 	bl	800bde0 <__hexnan>
 800a09c:	2805      	cmp	r0, #5
 800a09e:	d123      	bne.n	800a0e8 <_strtod_l+0x3bc>
 800a0a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a0a2:	4a99      	ldr	r2, [pc, #612]	; (800a308 <_strtod_l+0x5dc>)
 800a0a4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	0017      	movs	r7, r2
 800a0aa:	e686      	b.n	8009dba <_strtod_l+0x8e>
 800a0ac:	210a      	movs	r1, #10
 800a0ae:	434a      	muls	r2, r1
 800a0b0:	18d2      	adds	r2, r2, r3
 800a0b2:	3a30      	subs	r2, #48	; 0x30
 800a0b4:	e7b8      	b.n	800a028 <_strtod_l+0x2fc>
 800a0b6:	2b6e      	cmp	r3, #110	; 0x6e
 800a0b8:	d0e0      	beq.n	800a07c <_strtod_l+0x350>
 800a0ba:	e69d      	b.n	8009df8 <_strtod_l+0xcc>
 800a0bc:	4993      	ldr	r1, [pc, #588]	; (800a30c <_strtod_l+0x5e0>)
 800a0be:	a821      	add	r0, sp, #132	; 0x84
 800a0c0:	f001 fe7a 	bl	800bdb8 <__match>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d100      	bne.n	800a0ca <_strtod_l+0x39e>
 800a0c8:	e696      	b.n	8009df8 <_strtod_l+0xcc>
 800a0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0cc:	4990      	ldr	r1, [pc, #576]	; (800a310 <_strtod_l+0x5e4>)
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	a821      	add	r0, sp, #132	; 0x84
 800a0d2:	9321      	str	r3, [sp, #132]	; 0x84
 800a0d4:	f001 fe70 	bl	800bdb8 <__match>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d102      	bne.n	800a0e2 <_strtod_l+0x3b6>
 800a0dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0de:	3301      	adds	r3, #1
 800a0e0:	9321      	str	r3, [sp, #132]	; 0x84
 800a0e2:	2600      	movs	r6, #0
 800a0e4:	4f88      	ldr	r7, [pc, #544]	; (800a308 <_strtod_l+0x5dc>)
 800a0e6:	e668      	b.n	8009dba <_strtod_l+0x8e>
 800a0e8:	488a      	ldr	r0, [pc, #552]	; (800a314 <_strtod_l+0x5e8>)
 800a0ea:	f003 f993 	bl	800d414 <nan>
 800a0ee:	0006      	movs	r6, r0
 800a0f0:	000f      	movs	r7, r1
 800a0f2:	e662      	b.n	8009dba <_strtod_l+0x8e>
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <_strtod_l+0x3da>
 800a102:	9b06      	ldr	r3, [sp, #24]
 800a104:	9309      	str	r3, [sp, #36]	; 0x24
 800a106:	9c06      	ldr	r4, [sp, #24]
 800a108:	2c10      	cmp	r4, #16
 800a10a:	dd00      	ble.n	800a10e <_strtod_l+0x3e2>
 800a10c:	2410      	movs	r4, #16
 800a10e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a110:	f7f8 fade 	bl	80026d0 <__aeabi_ui2d>
 800a114:	9b06      	ldr	r3, [sp, #24]
 800a116:	0006      	movs	r6, r0
 800a118:	000f      	movs	r7, r1
 800a11a:	2b09      	cmp	r3, #9
 800a11c:	dd15      	ble.n	800a14a <_strtod_l+0x41e>
 800a11e:	0022      	movs	r2, r4
 800a120:	4b7d      	ldr	r3, [pc, #500]	; (800a318 <_strtod_l+0x5ec>)
 800a122:	3a09      	subs	r2, #9
 800a124:	00d2      	lsls	r2, r2, #3
 800a126:	189b      	adds	r3, r3, r2
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f7f7 fc4e 	bl	80019cc <__aeabi_dmul>
 800a130:	0006      	movs	r6, r0
 800a132:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a134:	000f      	movs	r7, r1
 800a136:	f7f8 facb 	bl	80026d0 <__aeabi_ui2d>
 800a13a:	0002      	movs	r2, r0
 800a13c:	000b      	movs	r3, r1
 800a13e:	0030      	movs	r0, r6
 800a140:	0039      	movs	r1, r7
 800a142:	f7f6 fcd3 	bl	8000aec <__aeabi_dadd>
 800a146:	0006      	movs	r6, r0
 800a148:	000f      	movs	r7, r1
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	2b0f      	cmp	r3, #15
 800a14e:	dc39      	bgt.n	800a1c4 <_strtod_l+0x498>
 800a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d100      	bne.n	800a158 <_strtod_l+0x42c>
 800a156:	e630      	b.n	8009dba <_strtod_l+0x8e>
 800a158:	dd24      	ble.n	800a1a4 <_strtod_l+0x478>
 800a15a:	2b16      	cmp	r3, #22
 800a15c:	dc09      	bgt.n	800a172 <_strtod_l+0x446>
 800a15e:	00dd      	lsls	r5, r3, #3
 800a160:	0032      	movs	r2, r6
 800a162:	003b      	movs	r3, r7
 800a164:	4c6c      	ldr	r4, [pc, #432]	; (800a318 <_strtod_l+0x5ec>)
 800a166:	1964      	adds	r4, r4, r5
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	6861      	ldr	r1, [r4, #4]
 800a16c:	f7f7 fc2e 	bl	80019cc <__aeabi_dmul>
 800a170:	e7bd      	b.n	800a0ee <_strtod_l+0x3c2>
 800a172:	2325      	movs	r3, #37	; 0x25
 800a174:	9a06      	ldr	r2, [sp, #24]
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a17a:	4293      	cmp	r3, r2
 800a17c:	db22      	blt.n	800a1c4 <_strtod_l+0x498>
 800a17e:	240f      	movs	r4, #15
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	4d65      	ldr	r5, [pc, #404]	; (800a318 <_strtod_l+0x5ec>)
 800a184:	1ae4      	subs	r4, r4, r3
 800a186:	00e1      	lsls	r1, r4, #3
 800a188:	1869      	adds	r1, r5, r1
 800a18a:	0032      	movs	r2, r6
 800a18c:	6808      	ldr	r0, [r1, #0]
 800a18e:	6849      	ldr	r1, [r1, #4]
 800a190:	003b      	movs	r3, r7
 800a192:	f7f7 fc1b 	bl	80019cc <__aeabi_dmul>
 800a196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a198:	1b1c      	subs	r4, r3, r4
 800a19a:	00e4      	lsls	r4, r4, #3
 800a19c:	192c      	adds	r4, r5, r4
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	6863      	ldr	r3, [r4, #4]
 800a1a2:	e7e3      	b.n	800a16c <_strtod_l+0x440>
 800a1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a6:	3316      	adds	r3, #22
 800a1a8:	db0c      	blt.n	800a1c4 <_strtod_l+0x498>
 800a1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ac:	9a07      	ldr	r2, [sp, #28]
 800a1ae:	0030      	movs	r0, r6
 800a1b0:	1a9a      	subs	r2, r3, r2
 800a1b2:	4b59      	ldr	r3, [pc, #356]	; (800a318 <_strtod_l+0x5ec>)
 800a1b4:	00d2      	lsls	r2, r2, #3
 800a1b6:	189b      	adds	r3, r3, r2
 800a1b8:	0039      	movs	r1, r7
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f7f6 ffff 	bl	80011c0 <__aeabi_ddiv>
 800a1c2:	e794      	b.n	800a0ee <_strtod_l+0x3c2>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	1b1c      	subs	r4, r3, r4
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	18e4      	adds	r4, r4, r3
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	dd70      	ble.n	800a2b2 <_strtod_l+0x586>
 800a1d0:	230f      	movs	r3, #15
 800a1d2:	0021      	movs	r1, r4
 800a1d4:	4019      	ands	r1, r3
 800a1d6:	421c      	tst	r4, r3
 800a1d8:	d00a      	beq.n	800a1f0 <_strtod_l+0x4c4>
 800a1da:	00cb      	lsls	r3, r1, #3
 800a1dc:	494e      	ldr	r1, [pc, #312]	; (800a318 <_strtod_l+0x5ec>)
 800a1de:	0032      	movs	r2, r6
 800a1e0:	18c9      	adds	r1, r1, r3
 800a1e2:	6808      	ldr	r0, [r1, #0]
 800a1e4:	6849      	ldr	r1, [r1, #4]
 800a1e6:	003b      	movs	r3, r7
 800a1e8:	f7f7 fbf0 	bl	80019cc <__aeabi_dmul>
 800a1ec:	0006      	movs	r6, r0
 800a1ee:	000f      	movs	r7, r1
 800a1f0:	230f      	movs	r3, #15
 800a1f2:	439c      	bics	r4, r3
 800a1f4:	d048      	beq.n	800a288 <_strtod_l+0x55c>
 800a1f6:	3326      	adds	r3, #38	; 0x26
 800a1f8:	33ff      	adds	r3, #255	; 0xff
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	dd22      	ble.n	800a244 <_strtod_l+0x518>
 800a1fe:	2300      	movs	r3, #0
 800a200:	9306      	str	r3, [sp, #24]
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	930b      	str	r3, [sp, #44]	; 0x2c
 800a206:	9309      	str	r3, [sp, #36]	; 0x24
 800a208:	2322      	movs	r3, #34	; 0x22
 800a20a:	2600      	movs	r6, #0
 800a20c:	9a05      	ldr	r2, [sp, #20]
 800a20e:	4f3e      	ldr	r7, [pc, #248]	; (800a308 <_strtod_l+0x5dc>)
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a214:	42b3      	cmp	r3, r6
 800a216:	d100      	bne.n	800a21a <_strtod_l+0x4ee>
 800a218:	e5cf      	b.n	8009dba <_strtod_l+0x8e>
 800a21a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a21c:	9805      	ldr	r0, [sp, #20]
 800a21e:	f001 ff11 	bl	800c044 <_Bfree>
 800a222:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a224:	9805      	ldr	r0, [sp, #20]
 800a226:	f001 ff0d 	bl	800c044 <_Bfree>
 800a22a:	9907      	ldr	r1, [sp, #28]
 800a22c:	9805      	ldr	r0, [sp, #20]
 800a22e:	f001 ff09 	bl	800c044 <_Bfree>
 800a232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a234:	9805      	ldr	r0, [sp, #20]
 800a236:	f001 ff05 	bl	800c044 <_Bfree>
 800a23a:	9906      	ldr	r1, [sp, #24]
 800a23c:	9805      	ldr	r0, [sp, #20]
 800a23e:	f001 ff01 	bl	800c044 <_Bfree>
 800a242:	e5ba      	b.n	8009dba <_strtod_l+0x8e>
 800a244:	2300      	movs	r3, #0
 800a246:	0030      	movs	r0, r6
 800a248:	0039      	movs	r1, r7
 800a24a:	001d      	movs	r5, r3
 800a24c:	1124      	asrs	r4, r4, #4
 800a24e:	2c01      	cmp	r4, #1
 800a250:	dc1d      	bgt.n	800a28e <_strtod_l+0x562>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <_strtod_l+0x52e>
 800a256:	0006      	movs	r6, r0
 800a258:	000f      	movs	r7, r1
 800a25a:	4b30      	ldr	r3, [pc, #192]	; (800a31c <_strtod_l+0x5f0>)
 800a25c:	00ed      	lsls	r5, r5, #3
 800a25e:	18ff      	adds	r7, r7, r3
 800a260:	4b2f      	ldr	r3, [pc, #188]	; (800a320 <_strtod_l+0x5f4>)
 800a262:	0032      	movs	r2, r6
 800a264:	195d      	adds	r5, r3, r5
 800a266:	6828      	ldr	r0, [r5, #0]
 800a268:	6869      	ldr	r1, [r5, #4]
 800a26a:	003b      	movs	r3, r7
 800a26c:	f7f7 fbae 	bl	80019cc <__aeabi_dmul>
 800a270:	4b25      	ldr	r3, [pc, #148]	; (800a308 <_strtod_l+0x5dc>)
 800a272:	4a2c      	ldr	r2, [pc, #176]	; (800a324 <_strtod_l+0x5f8>)
 800a274:	0006      	movs	r6, r0
 800a276:	400b      	ands	r3, r1
 800a278:	4293      	cmp	r3, r2
 800a27a:	d8c0      	bhi.n	800a1fe <_strtod_l+0x4d2>
 800a27c:	4a2a      	ldr	r2, [pc, #168]	; (800a328 <_strtod_l+0x5fc>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d913      	bls.n	800a2aa <_strtod_l+0x57e>
 800a282:	2601      	movs	r6, #1
 800a284:	4f29      	ldr	r7, [pc, #164]	; (800a32c <_strtod_l+0x600>)
 800a286:	4276      	negs	r6, r6
 800a288:	2300      	movs	r3, #0
 800a28a:	9308      	str	r3, [sp, #32]
 800a28c:	e087      	b.n	800a39e <_strtod_l+0x672>
 800a28e:	2201      	movs	r2, #1
 800a290:	4214      	tst	r4, r2
 800a292:	d007      	beq.n	800a2a4 <_strtod_l+0x578>
 800a294:	4a22      	ldr	r2, [pc, #136]	; (800a320 <_strtod_l+0x5f4>)
 800a296:	00eb      	lsls	r3, r5, #3
 800a298:	189b      	adds	r3, r3, r2
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f7f7 fb95 	bl	80019cc <__aeabi_dmul>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	1064      	asrs	r4, r4, #1
 800a2a8:	e7d1      	b.n	800a24e <_strtod_l+0x522>
 800a2aa:	23d4      	movs	r3, #212	; 0xd4
 800a2ac:	049b      	lsls	r3, r3, #18
 800a2ae:	18cf      	adds	r7, r1, r3
 800a2b0:	e7ea      	b.n	800a288 <_strtod_l+0x55c>
 800a2b2:	2c00      	cmp	r4, #0
 800a2b4:	d0e8      	beq.n	800a288 <_strtod_l+0x55c>
 800a2b6:	4264      	negs	r4, r4
 800a2b8:	220f      	movs	r2, #15
 800a2ba:	0023      	movs	r3, r4
 800a2bc:	4013      	ands	r3, r2
 800a2be:	4214      	tst	r4, r2
 800a2c0:	d00a      	beq.n	800a2d8 <_strtod_l+0x5ac>
 800a2c2:	00da      	lsls	r2, r3, #3
 800a2c4:	4b14      	ldr	r3, [pc, #80]	; (800a318 <_strtod_l+0x5ec>)
 800a2c6:	0030      	movs	r0, r6
 800a2c8:	189b      	adds	r3, r3, r2
 800a2ca:	0039      	movs	r1, r7
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f7f6 ff76 	bl	80011c0 <__aeabi_ddiv>
 800a2d4:	0006      	movs	r6, r0
 800a2d6:	000f      	movs	r7, r1
 800a2d8:	1124      	asrs	r4, r4, #4
 800a2da:	d0d5      	beq.n	800a288 <_strtod_l+0x55c>
 800a2dc:	2c1f      	cmp	r4, #31
 800a2de:	dd27      	ble.n	800a330 <_strtod_l+0x604>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	9306      	str	r3, [sp, #24]
 800a2e4:	9307      	str	r3, [sp, #28]
 800a2e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ea:	2322      	movs	r3, #34	; 0x22
 800a2ec:	9a05      	ldr	r2, [sp, #20]
 800a2ee:	2600      	movs	r6, #0
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f4:	2700      	movs	r7, #0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d18f      	bne.n	800a21a <_strtod_l+0x4ee>
 800a2fa:	e55e      	b.n	8009dba <_strtod_l+0x8e>
 800a2fc:	00004e1f 	.word	0x00004e1f
 800a300:	0800e361 	.word	0x0800e361
 800a304:	0800e3a0 	.word	0x0800e3a0
 800a308:	7ff00000 	.word	0x7ff00000
 800a30c:	0800e359 	.word	0x0800e359
 800a310:	0800e4e4 	.word	0x0800e4e4
 800a314:	0800e7bb 	.word	0x0800e7bb
 800a318:	0800e680 	.word	0x0800e680
 800a31c:	fcb00000 	.word	0xfcb00000
 800a320:	0800e658 	.word	0x0800e658
 800a324:	7ca00000 	.word	0x7ca00000
 800a328:	7c900000 	.word	0x7c900000
 800a32c:	7fefffff 	.word	0x7fefffff
 800a330:	2310      	movs	r3, #16
 800a332:	0022      	movs	r2, r4
 800a334:	401a      	ands	r2, r3
 800a336:	9208      	str	r2, [sp, #32]
 800a338:	421c      	tst	r4, r3
 800a33a:	d001      	beq.n	800a340 <_strtod_l+0x614>
 800a33c:	335a      	adds	r3, #90	; 0x5a
 800a33e:	9308      	str	r3, [sp, #32]
 800a340:	0030      	movs	r0, r6
 800a342:	0039      	movs	r1, r7
 800a344:	2300      	movs	r3, #0
 800a346:	4dca      	ldr	r5, [pc, #808]	; (800a670 <_strtod_l+0x944>)
 800a348:	2201      	movs	r2, #1
 800a34a:	4214      	tst	r4, r2
 800a34c:	d004      	beq.n	800a358 <_strtod_l+0x62c>
 800a34e:	682a      	ldr	r2, [r5, #0]
 800a350:	686b      	ldr	r3, [r5, #4]
 800a352:	f7f7 fb3b 	bl	80019cc <__aeabi_dmul>
 800a356:	2301      	movs	r3, #1
 800a358:	1064      	asrs	r4, r4, #1
 800a35a:	3508      	adds	r5, #8
 800a35c:	2c00      	cmp	r4, #0
 800a35e:	d1f3      	bne.n	800a348 <_strtod_l+0x61c>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <_strtod_l+0x63c>
 800a364:	0006      	movs	r6, r0
 800a366:	000f      	movs	r7, r1
 800a368:	9b08      	ldr	r3, [sp, #32]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00f      	beq.n	800a38e <_strtod_l+0x662>
 800a36e:	236b      	movs	r3, #107	; 0x6b
 800a370:	0079      	lsls	r1, r7, #1
 800a372:	0d49      	lsrs	r1, r1, #21
 800a374:	003a      	movs	r2, r7
 800a376:	1a5b      	subs	r3, r3, r1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	dd08      	ble.n	800a38e <_strtod_l+0x662>
 800a37c:	2b1f      	cmp	r3, #31
 800a37e:	dc00      	bgt.n	800a382 <_strtod_l+0x656>
 800a380:	e126      	b.n	800a5d0 <_strtod_l+0x8a4>
 800a382:	2600      	movs	r6, #0
 800a384:	2b34      	cmp	r3, #52	; 0x34
 800a386:	dc00      	bgt.n	800a38a <_strtod_l+0x65e>
 800a388:	e11b      	b.n	800a5c2 <_strtod_l+0x896>
 800a38a:	27dc      	movs	r7, #220	; 0xdc
 800a38c:	04bf      	lsls	r7, r7, #18
 800a38e:	2200      	movs	r2, #0
 800a390:	2300      	movs	r3, #0
 800a392:	0030      	movs	r0, r6
 800a394:	0039      	movs	r1, r7
 800a396:	f7f6 f863 	bl	8000460 <__aeabi_dcmpeq>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d1a0      	bne.n	800a2e0 <_strtod_l+0x5b4>
 800a39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	9805      	ldr	r0, [sp, #20]
 800a3aa:	f001 feb3 	bl	800c114 <__s2b>
 800a3ae:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d100      	bne.n	800a3b6 <_strtod_l+0x68a>
 800a3b4:	e723      	b.n	800a1fe <_strtod_l+0x4d2>
 800a3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b8:	9907      	ldr	r1, [sp, #28]
 800a3ba:	17da      	asrs	r2, r3, #31
 800a3bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3be:	1a5b      	subs	r3, r3, r1
 800a3c0:	401a      	ands	r2, r3
 800a3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c4:	9215      	str	r2, [sp, #84]	; 0x54
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ca:	17db      	asrs	r3, r3, #31
 800a3cc:	401a      	ands	r2, r3
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	921c      	str	r2, [sp, #112]	; 0x70
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	9307      	str	r3, [sp, #28]
 800a3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d8:	9805      	ldr	r0, [sp, #20]
 800a3da:	6859      	ldr	r1, [r3, #4]
 800a3dc:	f001 fdee 	bl	800bfbc <_Balloc>
 800a3e0:	9009      	str	r0, [sp, #36]	; 0x24
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d100      	bne.n	800a3e8 <_strtod_l+0x6bc>
 800a3e6:	e70f      	b.n	800a208 <_strtod_l+0x4dc>
 800a3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	310c      	adds	r1, #12
 800a3f0:	1c9a      	adds	r2, r3, #2
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f8:	f001 fdd7 	bl	800bfaa <memcpy>
 800a3fc:	ab24      	add	r3, sp, #144	; 0x90
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	ab23      	add	r3, sp, #140	; 0x8c
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	0032      	movs	r2, r6
 800a406:	003b      	movs	r3, r7
 800a408:	9805      	ldr	r0, [sp, #20]
 800a40a:	960e      	str	r6, [sp, #56]	; 0x38
 800a40c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a40e:	f002 f9cf 	bl	800c7b0 <__d2b>
 800a412:	9022      	str	r0, [sp, #136]	; 0x88
 800a414:	2800      	cmp	r0, #0
 800a416:	d100      	bne.n	800a41a <_strtod_l+0x6ee>
 800a418:	e6f6      	b.n	800a208 <_strtod_l+0x4dc>
 800a41a:	2101      	movs	r1, #1
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	f001 ff0d 	bl	800c23c <__i2b>
 800a422:	9007      	str	r0, [sp, #28]
 800a424:	2800      	cmp	r0, #0
 800a426:	d100      	bne.n	800a42a <_strtod_l+0x6fe>
 800a428:	e6ee      	b.n	800a208 <_strtod_l+0x4dc>
 800a42a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da00      	bge.n	800a432 <_strtod_l+0x706>
 800a430:	e0d3      	b.n	800a5da <_strtod_l+0x8ae>
 800a432:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a434:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a436:	189d      	adds	r5, r3, r2
 800a438:	9908      	ldr	r1, [sp, #32]
 800a43a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a43c:	1a5b      	subs	r3, r3, r1
 800a43e:	2136      	movs	r1, #54	; 0x36
 800a440:	189b      	adds	r3, r3, r2
 800a442:	1a8a      	subs	r2, r1, r2
 800a444:	498b      	ldr	r1, [pc, #556]	; (800a674 <_strtod_l+0x948>)
 800a446:	3b01      	subs	r3, #1
 800a448:	2001      	movs	r0, #1
 800a44a:	428b      	cmp	r3, r1
 800a44c:	db00      	blt.n	800a450 <_strtod_l+0x724>
 800a44e:	e0cf      	b.n	800a5f0 <_strtod_l+0x8c4>
 800a450:	1ac9      	subs	r1, r1, r3
 800a452:	1a52      	subs	r2, r2, r1
 800a454:	291f      	cmp	r1, #31
 800a456:	dd00      	ble.n	800a45a <_strtod_l+0x72e>
 800a458:	e0c3      	b.n	800a5e2 <_strtod_l+0x8b6>
 800a45a:	4088      	lsls	r0, r1
 800a45c:	2300      	movs	r3, #0
 800a45e:	9014      	str	r0, [sp, #80]	; 0x50
 800a460:	9312      	str	r3, [sp, #72]	; 0x48
 800a462:	18ab      	adds	r3, r5, r2
 800a464:	930c      	str	r3, [sp, #48]	; 0x30
 800a466:	18a4      	adds	r4, r4, r2
 800a468:	9b08      	ldr	r3, [sp, #32]
 800a46a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a46c:	191c      	adds	r4, r3, r4
 800a46e:	002b      	movs	r3, r5
 800a470:	4295      	cmp	r5, r2
 800a472:	dd00      	ble.n	800a476 <_strtod_l+0x74a>
 800a474:	0013      	movs	r3, r2
 800a476:	42a3      	cmp	r3, r4
 800a478:	dd00      	ble.n	800a47c <_strtod_l+0x750>
 800a47a:	0023      	movs	r3, r4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dd04      	ble.n	800a48a <_strtod_l+0x75e>
 800a480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a482:	1ae4      	subs	r4, r4, r3
 800a484:	1ad2      	subs	r2, r2, r3
 800a486:	920c      	str	r2, [sp, #48]	; 0x30
 800a488:	1aed      	subs	r5, r5, r3
 800a48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd17      	ble.n	800a4c0 <_strtod_l+0x794>
 800a490:	001a      	movs	r2, r3
 800a492:	9907      	ldr	r1, [sp, #28]
 800a494:	9805      	ldr	r0, [sp, #20]
 800a496:	f001 ff97 	bl	800c3c8 <__pow5mult>
 800a49a:	9007      	str	r0, [sp, #28]
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d100      	bne.n	800a4a2 <_strtod_l+0x776>
 800a4a0:	e6b2      	b.n	800a208 <_strtod_l+0x4dc>
 800a4a2:	0001      	movs	r1, r0
 800a4a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a4a6:	9805      	ldr	r0, [sp, #20]
 800a4a8:	f001 fede 	bl	800c268 <__multiply>
 800a4ac:	9011      	str	r0, [sp, #68]	; 0x44
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d100      	bne.n	800a4b4 <_strtod_l+0x788>
 800a4b2:	e6a9      	b.n	800a208 <_strtod_l+0x4dc>
 800a4b4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a4b6:	9805      	ldr	r0, [sp, #20]
 800a4b8:	f001 fdc4 	bl	800c044 <_Bfree>
 800a4bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4be:	9322      	str	r3, [sp, #136]	; 0x88
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd00      	ble.n	800a4c8 <_strtod_l+0x79c>
 800a4c6:	e096      	b.n	800a5f6 <_strtod_l+0x8ca>
 800a4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dd08      	ble.n	800a4e0 <_strtod_l+0x7b4>
 800a4ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a4d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4d2:	9805      	ldr	r0, [sp, #20]
 800a4d4:	f001 ff78 	bl	800c3c8 <__pow5mult>
 800a4d8:	9009      	str	r0, [sp, #36]	; 0x24
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d100      	bne.n	800a4e0 <_strtod_l+0x7b4>
 800a4de:	e693      	b.n	800a208 <_strtod_l+0x4dc>
 800a4e0:	2c00      	cmp	r4, #0
 800a4e2:	dd08      	ble.n	800a4f6 <_strtod_l+0x7ca>
 800a4e4:	0022      	movs	r2, r4
 800a4e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4e8:	9805      	ldr	r0, [sp, #20]
 800a4ea:	f001 ffc9 	bl	800c480 <__lshift>
 800a4ee:	9009      	str	r0, [sp, #36]	; 0x24
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d100      	bne.n	800a4f6 <_strtod_l+0x7ca>
 800a4f4:	e688      	b.n	800a208 <_strtod_l+0x4dc>
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	dd08      	ble.n	800a50c <_strtod_l+0x7e0>
 800a4fa:	002a      	movs	r2, r5
 800a4fc:	9907      	ldr	r1, [sp, #28]
 800a4fe:	9805      	ldr	r0, [sp, #20]
 800a500:	f001 ffbe 	bl	800c480 <__lshift>
 800a504:	9007      	str	r0, [sp, #28]
 800a506:	2800      	cmp	r0, #0
 800a508:	d100      	bne.n	800a50c <_strtod_l+0x7e0>
 800a50a:	e67d      	b.n	800a208 <_strtod_l+0x4dc>
 800a50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a50e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a510:	9805      	ldr	r0, [sp, #20]
 800a512:	f002 f841 	bl	800c598 <__mdiff>
 800a516:	9006      	str	r0, [sp, #24]
 800a518:	2800      	cmp	r0, #0
 800a51a:	d100      	bne.n	800a51e <_strtod_l+0x7f2>
 800a51c:	e674      	b.n	800a208 <_strtod_l+0x4dc>
 800a51e:	2200      	movs	r2, #0
 800a520:	68c3      	ldr	r3, [r0, #12]
 800a522:	9907      	ldr	r1, [sp, #28]
 800a524:	60c2      	str	r2, [r0, #12]
 800a526:	9311      	str	r3, [sp, #68]	; 0x44
 800a528:	f002 f81a 	bl	800c560 <__mcmp>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	da6c      	bge.n	800a60a <_strtod_l+0x8de>
 800a530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a532:	4333      	orrs	r3, r6
 800a534:	d000      	beq.n	800a538 <_strtod_l+0x80c>
 800a536:	e097      	b.n	800a668 <_strtod_l+0x93c>
 800a538:	033b      	lsls	r3, r7, #12
 800a53a:	d000      	beq.n	800a53e <_strtod_l+0x812>
 800a53c:	e094      	b.n	800a668 <_strtod_l+0x93c>
 800a53e:	22d6      	movs	r2, #214	; 0xd6
 800a540:	4b4d      	ldr	r3, [pc, #308]	; (800a678 <_strtod_l+0x94c>)
 800a542:	04d2      	lsls	r2, r2, #19
 800a544:	403b      	ands	r3, r7
 800a546:	4293      	cmp	r3, r2
 800a548:	d800      	bhi.n	800a54c <_strtod_l+0x820>
 800a54a:	e08d      	b.n	800a668 <_strtod_l+0x93c>
 800a54c:	9b06      	ldr	r3, [sp, #24]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	930a      	str	r3, [sp, #40]	; 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <_strtod_l+0x836>
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	930a      	str	r3, [sp, #40]	; 0x28
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	dc00      	bgt.n	800a562 <_strtod_l+0x836>
 800a560:	e082      	b.n	800a668 <_strtod_l+0x93c>
 800a562:	9906      	ldr	r1, [sp, #24]
 800a564:	2201      	movs	r2, #1
 800a566:	9805      	ldr	r0, [sp, #20]
 800a568:	f001 ff8a 	bl	800c480 <__lshift>
 800a56c:	9907      	ldr	r1, [sp, #28]
 800a56e:	9006      	str	r0, [sp, #24]
 800a570:	f001 fff6 	bl	800c560 <__mcmp>
 800a574:	2800      	cmp	r0, #0
 800a576:	dd77      	ble.n	800a668 <_strtod_l+0x93c>
 800a578:	9908      	ldr	r1, [sp, #32]
 800a57a:	003b      	movs	r3, r7
 800a57c:	4a3e      	ldr	r2, [pc, #248]	; (800a678 <_strtod_l+0x94c>)
 800a57e:	2900      	cmp	r1, #0
 800a580:	d100      	bne.n	800a584 <_strtod_l+0x858>
 800a582:	e09e      	b.n	800a6c2 <_strtod_l+0x996>
 800a584:	0011      	movs	r1, r2
 800a586:	20d6      	movs	r0, #214	; 0xd6
 800a588:	4039      	ands	r1, r7
 800a58a:	04c0      	lsls	r0, r0, #19
 800a58c:	4281      	cmp	r1, r0
 800a58e:	dd00      	ble.n	800a592 <_strtod_l+0x866>
 800a590:	e097      	b.n	800a6c2 <_strtod_l+0x996>
 800a592:	23dc      	movs	r3, #220	; 0xdc
 800a594:	049b      	lsls	r3, r3, #18
 800a596:	4299      	cmp	r1, r3
 800a598:	dc00      	bgt.n	800a59c <_strtod_l+0x870>
 800a59a:	e6a6      	b.n	800a2ea <_strtod_l+0x5be>
 800a59c:	4b37      	ldr	r3, [pc, #220]	; (800a67c <_strtod_l+0x950>)
 800a59e:	0030      	movs	r0, r6
 800a5a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5a6:	0039      	movs	r1, r7
 800a5a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a5aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5ac:	f7f7 fa0e 	bl	80019cc <__aeabi_dmul>
 800a5b0:	0006      	movs	r6, r0
 800a5b2:	000f      	movs	r7, r1
 800a5b4:	4308      	orrs	r0, r1
 800a5b6:	d000      	beq.n	800a5ba <_strtod_l+0x88e>
 800a5b8:	e62f      	b.n	800a21a <_strtod_l+0x4ee>
 800a5ba:	2322      	movs	r3, #34	; 0x22
 800a5bc:	9a05      	ldr	r2, [sp, #20]
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e62b      	b.n	800a21a <_strtod_l+0x4ee>
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	3b20      	subs	r3, #32
 800a5c6:	4249      	negs	r1, r1
 800a5c8:	4099      	lsls	r1, r3
 800a5ca:	400a      	ands	r2, r1
 800a5cc:	0017      	movs	r7, r2
 800a5ce:	e6de      	b.n	800a38e <_strtod_l+0x662>
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	4252      	negs	r2, r2
 800a5d4:	409a      	lsls	r2, r3
 800a5d6:	4016      	ands	r6, r2
 800a5d8:	e6d9      	b.n	800a38e <_strtod_l+0x662>
 800a5da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a5dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a5de:	1ad4      	subs	r4, r2, r3
 800a5e0:	e72a      	b.n	800a438 <_strtod_l+0x70c>
 800a5e2:	4927      	ldr	r1, [pc, #156]	; (800a680 <_strtod_l+0x954>)
 800a5e4:	1acb      	subs	r3, r1, r3
 800a5e6:	0001      	movs	r1, r0
 800a5e8:	4099      	lsls	r1, r3
 800a5ea:	9112      	str	r1, [sp, #72]	; 0x48
 800a5ec:	9014      	str	r0, [sp, #80]	; 0x50
 800a5ee:	e738      	b.n	800a462 <_strtod_l+0x736>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9312      	str	r3, [sp, #72]	; 0x48
 800a5f4:	e7fa      	b.n	800a5ec <_strtod_l+0x8c0>
 800a5f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a5fa:	9805      	ldr	r0, [sp, #20]
 800a5fc:	f001 ff40 	bl	800c480 <__lshift>
 800a600:	9022      	str	r0, [sp, #136]	; 0x88
 800a602:	2800      	cmp	r0, #0
 800a604:	d000      	beq.n	800a608 <_strtod_l+0x8dc>
 800a606:	e75f      	b.n	800a4c8 <_strtod_l+0x79c>
 800a608:	e5fe      	b.n	800a208 <_strtod_l+0x4dc>
 800a60a:	970c      	str	r7, [sp, #48]	; 0x30
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d176      	bne.n	800a6fe <_strtod_l+0x9d2>
 800a610:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a612:	033b      	lsls	r3, r7, #12
 800a614:	0b1b      	lsrs	r3, r3, #12
 800a616:	2a00      	cmp	r2, #0
 800a618:	d038      	beq.n	800a68c <_strtod_l+0x960>
 800a61a:	4a1a      	ldr	r2, [pc, #104]	; (800a684 <_strtod_l+0x958>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d138      	bne.n	800a692 <_strtod_l+0x966>
 800a620:	2201      	movs	r2, #1
 800a622:	9b08      	ldr	r3, [sp, #32]
 800a624:	4252      	negs	r2, r2
 800a626:	0031      	movs	r1, r6
 800a628:	0010      	movs	r0, r2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00b      	beq.n	800a646 <_strtod_l+0x91a>
 800a62e:	24d4      	movs	r4, #212	; 0xd4
 800a630:	4b11      	ldr	r3, [pc, #68]	; (800a678 <_strtod_l+0x94c>)
 800a632:	0010      	movs	r0, r2
 800a634:	403b      	ands	r3, r7
 800a636:	04e4      	lsls	r4, r4, #19
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d804      	bhi.n	800a646 <_strtod_l+0x91a>
 800a63c:	306c      	adds	r0, #108	; 0x6c
 800a63e:	0d1b      	lsrs	r3, r3, #20
 800a640:	1ac3      	subs	r3, r0, r3
 800a642:	409a      	lsls	r2, r3
 800a644:	0010      	movs	r0, r2
 800a646:	4281      	cmp	r1, r0
 800a648:	d123      	bne.n	800a692 <_strtod_l+0x966>
 800a64a:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <_strtod_l+0x95c>)
 800a64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a64e:	429a      	cmp	r2, r3
 800a650:	d102      	bne.n	800a658 <_strtod_l+0x92c>
 800a652:	1c4b      	adds	r3, r1, #1
 800a654:	d100      	bne.n	800a658 <_strtod_l+0x92c>
 800a656:	e5d7      	b.n	800a208 <_strtod_l+0x4dc>
 800a658:	4b07      	ldr	r3, [pc, #28]	; (800a678 <_strtod_l+0x94c>)
 800a65a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a65c:	2600      	movs	r6, #0
 800a65e:	401a      	ands	r2, r3
 800a660:	0013      	movs	r3, r2
 800a662:	2280      	movs	r2, #128	; 0x80
 800a664:	0352      	lsls	r2, r2, #13
 800a666:	189f      	adds	r7, r3, r2
 800a668:	9b08      	ldr	r3, [sp, #32]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d196      	bne.n	800a59c <_strtod_l+0x870>
 800a66e:	e5d4      	b.n	800a21a <_strtod_l+0x4ee>
 800a670:	0800e3b8 	.word	0x0800e3b8
 800a674:	fffffc02 	.word	0xfffffc02
 800a678:	7ff00000 	.word	0x7ff00000
 800a67c:	39500000 	.word	0x39500000
 800a680:	fffffbe2 	.word	0xfffffbe2
 800a684:	000fffff 	.word	0x000fffff
 800a688:	7fefffff 	.word	0x7fefffff
 800a68c:	4333      	orrs	r3, r6
 800a68e:	d100      	bne.n	800a692 <_strtod_l+0x966>
 800a690:	e772      	b.n	800a578 <_strtod_l+0x84c>
 800a692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01d      	beq.n	800a6d4 <_strtod_l+0x9a8>
 800a698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a69a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a69c:	4213      	tst	r3, r2
 800a69e:	d0e3      	beq.n	800a668 <_strtod_l+0x93c>
 800a6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6a2:	0030      	movs	r0, r6
 800a6a4:	0039      	movs	r1, r7
 800a6a6:	9a08      	ldr	r2, [sp, #32]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d017      	beq.n	800a6dc <_strtod_l+0x9b0>
 800a6ac:	f7ff fb26 	bl	8009cfc <sulp>
 800a6b0:	0002      	movs	r2, r0
 800a6b2:	000b      	movs	r3, r1
 800a6b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a6b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6b8:	f7f6 fa18 	bl	8000aec <__aeabi_dadd>
 800a6bc:	0006      	movs	r6, r0
 800a6be:	000f      	movs	r7, r1
 800a6c0:	e7d2      	b.n	800a668 <_strtod_l+0x93c>
 800a6c2:	2601      	movs	r6, #1
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	4a9b      	ldr	r2, [pc, #620]	; (800a934 <_strtod_l+0xc08>)
 800a6c8:	4276      	negs	r6, r6
 800a6ca:	189b      	adds	r3, r3, r2
 800a6cc:	4a9a      	ldr	r2, [pc, #616]	; (800a938 <_strtod_l+0xc0c>)
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	0017      	movs	r7, r2
 800a6d2:	e7c9      	b.n	800a668 <_strtod_l+0x93c>
 800a6d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6d6:	4233      	tst	r3, r6
 800a6d8:	d0c6      	beq.n	800a668 <_strtod_l+0x93c>
 800a6da:	e7e1      	b.n	800a6a0 <_strtod_l+0x974>
 800a6dc:	f7ff fb0e 	bl	8009cfc <sulp>
 800a6e0:	0002      	movs	r2, r0
 800a6e2:	000b      	movs	r3, r1
 800a6e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a6e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6e8:	f7f7 fbdc 	bl	8001ea4 <__aeabi_dsub>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	0006      	movs	r6, r0
 800a6f2:	000f      	movs	r7, r1
 800a6f4:	f7f5 feb4 	bl	8000460 <__aeabi_dcmpeq>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0b5      	beq.n	800a668 <_strtod_l+0x93c>
 800a6fc:	e5f5      	b.n	800a2ea <_strtod_l+0x5be>
 800a6fe:	9907      	ldr	r1, [sp, #28]
 800a700:	9806      	ldr	r0, [sp, #24]
 800a702:	f002 f8b9 	bl	800c878 <__ratio>
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	2200      	movs	r2, #0
 800a70a:	05db      	lsls	r3, r3, #23
 800a70c:	0004      	movs	r4, r0
 800a70e:	000d      	movs	r5, r1
 800a710:	f7f5 feb6 	bl	8000480 <__aeabi_dcmple>
 800a714:	2800      	cmp	r0, #0
 800a716:	d079      	beq.n	800a80c <_strtod_l+0xae0>
 800a718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d04b      	beq.n	800a7b6 <_strtod_l+0xa8a>
 800a71e:	2300      	movs	r3, #0
 800a720:	4c86      	ldr	r4, [pc, #536]	; (800a93c <_strtod_l+0xc10>)
 800a722:	2500      	movs	r5, #0
 800a724:	9312      	str	r3, [sp, #72]	; 0x48
 800a726:	9413      	str	r4, [sp, #76]	; 0x4c
 800a728:	4c84      	ldr	r4, [pc, #528]	; (800a93c <_strtod_l+0xc10>)
 800a72a:	4a85      	ldr	r2, [pc, #532]	; (800a940 <_strtod_l+0xc14>)
 800a72c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a72e:	4013      	ands	r3, r2
 800a730:	9314      	str	r3, [sp, #80]	; 0x50
 800a732:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a734:	4b83      	ldr	r3, [pc, #524]	; (800a944 <_strtod_l+0xc18>)
 800a736:	429a      	cmp	r2, r3
 800a738:	d000      	beq.n	800a73c <_strtod_l+0xa10>
 800a73a:	e0b0      	b.n	800a89e <_strtod_l+0xb72>
 800a73c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a73e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a740:	921a      	str	r2, [sp, #104]	; 0x68
 800a742:	931b      	str	r3, [sp, #108]	; 0x6c
 800a744:	4a80      	ldr	r2, [pc, #512]	; (800a948 <_strtod_l+0xc1c>)
 800a746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a748:	4694      	mov	ip, r2
 800a74a:	4463      	add	r3, ip
 800a74c:	001f      	movs	r7, r3
 800a74e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a752:	0030      	movs	r0, r6
 800a754:	0039      	movs	r1, r7
 800a756:	920c      	str	r2, [sp, #48]	; 0x30
 800a758:	930d      	str	r3, [sp, #52]	; 0x34
 800a75a:	f001 ffb5 	bl	800c6c8 <__ulp>
 800a75e:	0002      	movs	r2, r0
 800a760:	000b      	movs	r3, r1
 800a762:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a764:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a766:	f7f7 f931 	bl	80019cc <__aeabi_dmul>
 800a76a:	0032      	movs	r2, r6
 800a76c:	003b      	movs	r3, r7
 800a76e:	f7f6 f9bd 	bl	8000aec <__aeabi_dadd>
 800a772:	4a73      	ldr	r2, [pc, #460]	; (800a940 <_strtod_l+0xc14>)
 800a774:	4b75      	ldr	r3, [pc, #468]	; (800a94c <_strtod_l+0xc20>)
 800a776:	0006      	movs	r6, r0
 800a778:	400a      	ands	r2, r1
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d95e      	bls.n	800a83c <_strtod_l+0xb10>
 800a77e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a780:	4a73      	ldr	r2, [pc, #460]	; (800a950 <_strtod_l+0xc24>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d103      	bne.n	800a78e <_strtod_l+0xa62>
 800a786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a788:	3301      	adds	r3, #1
 800a78a:	d100      	bne.n	800a78e <_strtod_l+0xa62>
 800a78c:	e53c      	b.n	800a208 <_strtod_l+0x4dc>
 800a78e:	2601      	movs	r6, #1
 800a790:	4f6f      	ldr	r7, [pc, #444]	; (800a950 <_strtod_l+0xc24>)
 800a792:	4276      	negs	r6, r6
 800a794:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a796:	9805      	ldr	r0, [sp, #20]
 800a798:	f001 fc54 	bl	800c044 <_Bfree>
 800a79c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a79e:	9805      	ldr	r0, [sp, #20]
 800a7a0:	f001 fc50 	bl	800c044 <_Bfree>
 800a7a4:	9907      	ldr	r1, [sp, #28]
 800a7a6:	9805      	ldr	r0, [sp, #20]
 800a7a8:	f001 fc4c 	bl	800c044 <_Bfree>
 800a7ac:	9906      	ldr	r1, [sp, #24]
 800a7ae:	9805      	ldr	r0, [sp, #20]
 800a7b0:	f001 fc48 	bl	800c044 <_Bfree>
 800a7b4:	e60f      	b.n	800a3d6 <_strtod_l+0x6aa>
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	d11c      	bne.n	800a7f4 <_strtod_l+0xac8>
 800a7ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7bc:	031b      	lsls	r3, r3, #12
 800a7be:	d11f      	bne.n	800a800 <_strtod_l+0xad4>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	0020      	movs	r0, r4
 800a7c4:	0029      	movs	r1, r5
 800a7c6:	4b5d      	ldr	r3, [pc, #372]	; (800a93c <_strtod_l+0xc10>)
 800a7c8:	f7f5 fe50 	bl	800046c <__aeabi_dcmplt>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d11a      	bne.n	800a806 <_strtod_l+0xada>
 800a7d0:	0020      	movs	r0, r4
 800a7d2:	0029      	movs	r1, r5
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4b5f      	ldr	r3, [pc, #380]	; (800a954 <_strtod_l+0xc28>)
 800a7d8:	f7f7 f8f8 	bl	80019cc <__aeabi_dmul>
 800a7dc:	0005      	movs	r5, r0
 800a7de:	000c      	movs	r4, r1
 800a7e0:	2380      	movs	r3, #128	; 0x80
 800a7e2:	061b      	lsls	r3, r3, #24
 800a7e4:	18e3      	adds	r3, r4, r3
 800a7e6:	951e      	str	r5, [sp, #120]	; 0x78
 800a7e8:	931f      	str	r3, [sp, #124]	; 0x7c
 800a7ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a7ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a7ee:	9212      	str	r2, [sp, #72]	; 0x48
 800a7f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7f2:	e79a      	b.n	800a72a <_strtod_l+0x9fe>
 800a7f4:	2e01      	cmp	r6, #1
 800a7f6:	d103      	bne.n	800a800 <_strtod_l+0xad4>
 800a7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d100      	bne.n	800a800 <_strtod_l+0xad4>
 800a7fe:	e574      	b.n	800a2ea <_strtod_l+0x5be>
 800a800:	2300      	movs	r3, #0
 800a802:	4c55      	ldr	r4, [pc, #340]	; (800a958 <_strtod_l+0xc2c>)
 800a804:	e78d      	b.n	800a722 <_strtod_l+0x9f6>
 800a806:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a808:	4c52      	ldr	r4, [pc, #328]	; (800a954 <_strtod_l+0xc28>)
 800a80a:	e7e9      	b.n	800a7e0 <_strtod_l+0xab4>
 800a80c:	2200      	movs	r2, #0
 800a80e:	0020      	movs	r0, r4
 800a810:	0029      	movs	r1, r5
 800a812:	4b50      	ldr	r3, [pc, #320]	; (800a954 <_strtod_l+0xc28>)
 800a814:	f7f7 f8da 	bl	80019cc <__aeabi_dmul>
 800a818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a81a:	0005      	movs	r5, r0
 800a81c:	000b      	movs	r3, r1
 800a81e:	000c      	movs	r4, r1
 800a820:	2a00      	cmp	r2, #0
 800a822:	d107      	bne.n	800a834 <_strtod_l+0xb08>
 800a824:	2280      	movs	r2, #128	; 0x80
 800a826:	0612      	lsls	r2, r2, #24
 800a828:	188b      	adds	r3, r1, r2
 800a82a:	9016      	str	r0, [sp, #88]	; 0x58
 800a82c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a82e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a832:	e7dc      	b.n	800a7ee <_strtod_l+0xac2>
 800a834:	0002      	movs	r2, r0
 800a836:	9216      	str	r2, [sp, #88]	; 0x58
 800a838:	9317      	str	r3, [sp, #92]	; 0x5c
 800a83a:	e7f8      	b.n	800a82e <_strtod_l+0xb02>
 800a83c:	23d4      	movs	r3, #212	; 0xd4
 800a83e:	049b      	lsls	r3, r3, #18
 800a840:	18cf      	adds	r7, r1, r3
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1a5      	bne.n	800a794 <_strtod_l+0xa68>
 800a848:	4b3d      	ldr	r3, [pc, #244]	; (800a940 <_strtod_l+0xc14>)
 800a84a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a84c:	403b      	ands	r3, r7
 800a84e:	429a      	cmp	r2, r3
 800a850:	d1a0      	bne.n	800a794 <_strtod_l+0xa68>
 800a852:	0028      	movs	r0, r5
 800a854:	0021      	movs	r1, r4
 800a856:	f7f5 fe4f 	bl	80004f8 <__aeabi_d2lz>
 800a85a:	f7f5 fe89 	bl	8000570 <__aeabi_l2d>
 800a85e:	0002      	movs	r2, r0
 800a860:	000b      	movs	r3, r1
 800a862:	0028      	movs	r0, r5
 800a864:	0021      	movs	r1, r4
 800a866:	f7f7 fb1d 	bl	8001ea4 <__aeabi_dsub>
 800a86a:	033b      	lsls	r3, r7, #12
 800a86c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a86e:	0b1b      	lsrs	r3, r3, #12
 800a870:	4333      	orrs	r3, r6
 800a872:	4313      	orrs	r3, r2
 800a874:	0004      	movs	r4, r0
 800a876:	000d      	movs	r5, r1
 800a878:	4a38      	ldr	r2, [pc, #224]	; (800a95c <_strtod_l+0xc30>)
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d055      	beq.n	800a92a <_strtod_l+0xbfe>
 800a87e:	4b38      	ldr	r3, [pc, #224]	; (800a960 <_strtod_l+0xc34>)
 800a880:	f7f5 fdf4 	bl	800046c <__aeabi_dcmplt>
 800a884:	2800      	cmp	r0, #0
 800a886:	d000      	beq.n	800a88a <_strtod_l+0xb5e>
 800a888:	e4c7      	b.n	800a21a <_strtod_l+0x4ee>
 800a88a:	0020      	movs	r0, r4
 800a88c:	0029      	movs	r1, r5
 800a88e:	4a35      	ldr	r2, [pc, #212]	; (800a964 <_strtod_l+0xc38>)
 800a890:	4b30      	ldr	r3, [pc, #192]	; (800a954 <_strtod_l+0xc28>)
 800a892:	f7f5 fdff 	bl	8000494 <__aeabi_dcmpgt>
 800a896:	2800      	cmp	r0, #0
 800a898:	d100      	bne.n	800a89c <_strtod_l+0xb70>
 800a89a:	e77b      	b.n	800a794 <_strtod_l+0xa68>
 800a89c:	e4bd      	b.n	800a21a <_strtod_l+0x4ee>
 800a89e:	9b08      	ldr	r3, [sp, #32]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d02b      	beq.n	800a8fc <_strtod_l+0xbd0>
 800a8a4:	23d4      	movs	r3, #212	; 0xd4
 800a8a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8a8:	04db      	lsls	r3, r3, #19
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d826      	bhi.n	800a8fc <_strtod_l+0xbd0>
 800a8ae:	0028      	movs	r0, r5
 800a8b0:	0021      	movs	r1, r4
 800a8b2:	4a2d      	ldr	r2, [pc, #180]	; (800a968 <_strtod_l+0xc3c>)
 800a8b4:	4b2d      	ldr	r3, [pc, #180]	; (800a96c <_strtod_l+0xc40>)
 800a8b6:	f7f5 fde3 	bl	8000480 <__aeabi_dcmple>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d017      	beq.n	800a8ee <_strtod_l+0xbc2>
 800a8be:	0028      	movs	r0, r5
 800a8c0:	0021      	movs	r1, r4
 800a8c2:	f7f5 fdfb 	bl	80004bc <__aeabi_d2uiz>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d100      	bne.n	800a8cc <_strtod_l+0xba0>
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f7f7 ff00 	bl	80026d0 <__aeabi_ui2d>
 800a8d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8d2:	0005      	movs	r5, r0
 800a8d4:	000b      	movs	r3, r1
 800a8d6:	000c      	movs	r4, r1
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	d122      	bne.n	800a922 <_strtod_l+0xbf6>
 800a8dc:	2280      	movs	r2, #128	; 0x80
 800a8de:	0612      	lsls	r2, r2, #24
 800a8e0:	188b      	adds	r3, r1, r2
 800a8e2:	9018      	str	r0, [sp, #96]	; 0x60
 800a8e4:	9319      	str	r3, [sp, #100]	; 0x64
 800a8e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8ea:	9212      	str	r2, [sp, #72]	; 0x48
 800a8ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8ee:	22d6      	movs	r2, #214	; 0xd6
 800a8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8f2:	04d2      	lsls	r2, r2, #19
 800a8f4:	189b      	adds	r3, r3, r2
 800a8f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a8fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a900:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a902:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a904:	f001 fee0 	bl	800c6c8 <__ulp>
 800a908:	0002      	movs	r2, r0
 800a90a:	000b      	movs	r3, r1
 800a90c:	0030      	movs	r0, r6
 800a90e:	0039      	movs	r1, r7
 800a910:	f7f7 f85c 	bl	80019cc <__aeabi_dmul>
 800a914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a918:	f7f6 f8e8 	bl	8000aec <__aeabi_dadd>
 800a91c:	0006      	movs	r6, r0
 800a91e:	000f      	movs	r7, r1
 800a920:	e78f      	b.n	800a842 <_strtod_l+0xb16>
 800a922:	0002      	movs	r2, r0
 800a924:	9218      	str	r2, [sp, #96]	; 0x60
 800a926:	9319      	str	r3, [sp, #100]	; 0x64
 800a928:	e7dd      	b.n	800a8e6 <_strtod_l+0xbba>
 800a92a:	4b11      	ldr	r3, [pc, #68]	; (800a970 <_strtod_l+0xc44>)
 800a92c:	f7f5 fd9e 	bl	800046c <__aeabi_dcmplt>
 800a930:	e7b1      	b.n	800a896 <_strtod_l+0xb6a>
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	fff00000 	.word	0xfff00000
 800a938:	000fffff 	.word	0x000fffff
 800a93c:	3ff00000 	.word	0x3ff00000
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	7fe00000 	.word	0x7fe00000
 800a948:	fcb00000 	.word	0xfcb00000
 800a94c:	7c9fffff 	.word	0x7c9fffff
 800a950:	7fefffff 	.word	0x7fefffff
 800a954:	3fe00000 	.word	0x3fe00000
 800a958:	bff00000 	.word	0xbff00000
 800a95c:	94a03595 	.word	0x94a03595
 800a960:	3fdfffff 	.word	0x3fdfffff
 800a964:	35afe535 	.word	0x35afe535
 800a968:	ffc00000 	.word	0xffc00000
 800a96c:	41dfffff 	.word	0x41dfffff
 800a970:	3fcfffff 	.word	0x3fcfffff

0800a974 <_strtod_r>:
 800a974:	b510      	push	{r4, lr}
 800a976:	4b02      	ldr	r3, [pc, #8]	; (800a980 <_strtod_r+0xc>)
 800a978:	f7ff f9d8 	bl	8009d2c <_strtod_l>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	46c0      	nop			; (mov r8, r8)
 800a980:	20000074 	.word	0x20000074

0800a984 <_strtol_l.isra.0>:
 800a984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a986:	b087      	sub	sp, #28
 800a988:	001e      	movs	r6, r3
 800a98a:	9005      	str	r0, [sp, #20]
 800a98c:	9101      	str	r1, [sp, #4]
 800a98e:	9202      	str	r2, [sp, #8]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d045      	beq.n	800aa20 <_strtol_l.isra.0+0x9c>
 800a994:	0008      	movs	r0, r1
 800a996:	2b24      	cmp	r3, #36	; 0x24
 800a998:	d842      	bhi.n	800aa20 <_strtol_l.isra.0+0x9c>
 800a99a:	4b3f      	ldr	r3, [pc, #252]	; (800aa98 <_strtol_l.isra.0+0x114>)
 800a99c:	2208      	movs	r2, #8
 800a99e:	469c      	mov	ip, r3
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	4661      	mov	r1, ip
 800a9a4:	781c      	ldrb	r4, [r3, #0]
 800a9a6:	1c45      	adds	r5, r0, #1
 800a9a8:	5d09      	ldrb	r1, [r1, r4]
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	000f      	movs	r7, r1
 800a9ae:	4017      	ands	r7, r2
 800a9b0:	4211      	tst	r1, r2
 800a9b2:	d1f5      	bne.n	800a9a0 <_strtol_l.isra.0+0x1c>
 800a9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800a9b6:	d13a      	bne.n	800aa2e <_strtol_l.isra.0+0xaa>
 800a9b8:	2701      	movs	r7, #1
 800a9ba:	782c      	ldrb	r4, [r5, #0]
 800a9bc:	1c9d      	adds	r5, r3, #2
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	d065      	beq.n	800aa8e <_strtol_l.isra.0+0x10a>
 800a9c2:	2e10      	cmp	r6, #16
 800a9c4:	d109      	bne.n	800a9da <_strtol_l.isra.0+0x56>
 800a9c6:	2c30      	cmp	r4, #48	; 0x30
 800a9c8:	d107      	bne.n	800a9da <_strtol_l.isra.0+0x56>
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	782b      	ldrb	r3, [r5, #0]
 800a9ce:	4393      	bics	r3, r2
 800a9d0:	2b58      	cmp	r3, #88	; 0x58
 800a9d2:	d157      	bne.n	800aa84 <_strtol_l.isra.0+0x100>
 800a9d4:	2610      	movs	r6, #16
 800a9d6:	786c      	ldrb	r4, [r5, #1]
 800a9d8:	3502      	adds	r5, #2
 800a9da:	4b30      	ldr	r3, [pc, #192]	; (800aa9c <_strtol_l.isra.0+0x118>)
 800a9dc:	0031      	movs	r1, r6
 800a9de:	18fb      	adds	r3, r7, r3
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	9303      	str	r3, [sp, #12]
 800a9e4:	f7f5 fc3c 	bl	8000260 <__aeabi_uidivmod>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4684      	mov	ip, r0
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	9104      	str	r1, [sp, #16]
 800a9f2:	4252      	negs	r2, r2
 800a9f4:	0021      	movs	r1, r4
 800a9f6:	3930      	subs	r1, #48	; 0x30
 800a9f8:	2909      	cmp	r1, #9
 800a9fa:	d81d      	bhi.n	800aa38 <_strtol_l.isra.0+0xb4>
 800a9fc:	000c      	movs	r4, r1
 800a9fe:	42a6      	cmp	r6, r4
 800aa00:	dd28      	ble.n	800aa54 <_strtol_l.isra.0+0xd0>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	db24      	blt.n	800aa50 <_strtol_l.isra.0+0xcc>
 800aa06:	0013      	movs	r3, r2
 800aa08:	4584      	cmp	ip, r0
 800aa0a:	d306      	bcc.n	800aa1a <_strtol_l.isra.0+0x96>
 800aa0c:	d102      	bne.n	800aa14 <_strtol_l.isra.0+0x90>
 800aa0e:	9904      	ldr	r1, [sp, #16]
 800aa10:	42a1      	cmp	r1, r4
 800aa12:	db02      	blt.n	800aa1a <_strtol_l.isra.0+0x96>
 800aa14:	2301      	movs	r3, #1
 800aa16:	4370      	muls	r0, r6
 800aa18:	1820      	adds	r0, r4, r0
 800aa1a:	782c      	ldrb	r4, [r5, #0]
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	e7e9      	b.n	800a9f4 <_strtol_l.isra.0+0x70>
 800aa20:	f7fe fa16 	bl	8008e50 <__errno>
 800aa24:	2316      	movs	r3, #22
 800aa26:	6003      	str	r3, [r0, #0]
 800aa28:	2000      	movs	r0, #0
 800aa2a:	b007      	add	sp, #28
 800aa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2e:	2c2b      	cmp	r4, #43	; 0x2b
 800aa30:	d1c5      	bne.n	800a9be <_strtol_l.isra.0+0x3a>
 800aa32:	782c      	ldrb	r4, [r5, #0]
 800aa34:	1c9d      	adds	r5, r3, #2
 800aa36:	e7c2      	b.n	800a9be <_strtol_l.isra.0+0x3a>
 800aa38:	0021      	movs	r1, r4
 800aa3a:	3941      	subs	r1, #65	; 0x41
 800aa3c:	2919      	cmp	r1, #25
 800aa3e:	d801      	bhi.n	800aa44 <_strtol_l.isra.0+0xc0>
 800aa40:	3c37      	subs	r4, #55	; 0x37
 800aa42:	e7dc      	b.n	800a9fe <_strtol_l.isra.0+0x7a>
 800aa44:	0021      	movs	r1, r4
 800aa46:	3961      	subs	r1, #97	; 0x61
 800aa48:	2919      	cmp	r1, #25
 800aa4a:	d803      	bhi.n	800aa54 <_strtol_l.isra.0+0xd0>
 800aa4c:	3c57      	subs	r4, #87	; 0x57
 800aa4e:	e7d6      	b.n	800a9fe <_strtol_l.isra.0+0x7a>
 800aa50:	0013      	movs	r3, r2
 800aa52:	e7e2      	b.n	800aa1a <_strtol_l.isra.0+0x96>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da09      	bge.n	800aa6c <_strtol_l.isra.0+0xe8>
 800aa58:	2322      	movs	r3, #34	; 0x22
 800aa5a:	9a05      	ldr	r2, [sp, #20]
 800aa5c:	9803      	ldr	r0, [sp, #12]
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	9b02      	ldr	r3, [sp, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0e1      	beq.n	800aa2a <_strtol_l.isra.0+0xa6>
 800aa66:	1e6b      	subs	r3, r5, #1
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	e007      	b.n	800aa7c <_strtol_l.isra.0+0xf8>
 800aa6c:	2f00      	cmp	r7, #0
 800aa6e:	d000      	beq.n	800aa72 <_strtol_l.isra.0+0xee>
 800aa70:	4240      	negs	r0, r0
 800aa72:	9a02      	ldr	r2, [sp, #8]
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d0d8      	beq.n	800aa2a <_strtol_l.isra.0+0xa6>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1f4      	bne.n	800aa66 <_strtol_l.isra.0+0xe2>
 800aa7c:	9b02      	ldr	r3, [sp, #8]
 800aa7e:	9a01      	ldr	r2, [sp, #4]
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	e7d2      	b.n	800aa2a <_strtol_l.isra.0+0xa6>
 800aa84:	2430      	movs	r4, #48	; 0x30
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	d1a7      	bne.n	800a9da <_strtol_l.isra.0+0x56>
 800aa8a:	3608      	adds	r6, #8
 800aa8c:	e7a5      	b.n	800a9da <_strtol_l.isra.0+0x56>
 800aa8e:	2c30      	cmp	r4, #48	; 0x30
 800aa90:	d09b      	beq.n	800a9ca <_strtol_l.isra.0+0x46>
 800aa92:	260a      	movs	r6, #10
 800aa94:	e7a1      	b.n	800a9da <_strtol_l.isra.0+0x56>
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	0800e3e1 	.word	0x0800e3e1
 800aa9c:	7fffffff 	.word	0x7fffffff

0800aaa0 <_strtol_r>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	f7ff ff6f 	bl	800a984 <_strtol_l.isra.0>
 800aaa6:	bd10      	pop	{r4, pc}

0800aaa8 <_write_r>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	0004      	movs	r4, r0
 800aaac:	0008      	movs	r0, r1
 800aaae:	0011      	movs	r1, r2
 800aab0:	001a      	movs	r2, r3
 800aab2:	2300      	movs	r3, #0
 800aab4:	4d05      	ldr	r5, [pc, #20]	; (800aacc <_write_r+0x24>)
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f9 ffa9 	bl	8004a0e <_write>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d103      	bne.n	800aac8 <_write_r+0x20>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d000      	beq.n	800aac8 <_write_r+0x20>
 800aac6:	6023      	str	r3, [r4, #0]
 800aac8:	bd70      	pop	{r4, r5, r6, pc}
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	20000614 	.word	0x20000614

0800aad0 <_close_r>:
 800aad0:	2300      	movs	r3, #0
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	4d06      	ldr	r5, [pc, #24]	; (800aaf0 <_close_r+0x20>)
 800aad6:	0004      	movs	r4, r0
 800aad8:	0008      	movs	r0, r1
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	f7f9 ffb3 	bl	8004a46 <_close>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d103      	bne.n	800aaec <_close_r+0x1c>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d000      	beq.n	800aaec <_close_r+0x1c>
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	bd70      	pop	{r4, r5, r6, pc}
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	20000614 	.word	0x20000614

0800aaf4 <quorem>:
 800aaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf6:	0006      	movs	r6, r0
 800aaf8:	690d      	ldr	r5, [r1, #16]
 800aafa:	6933      	ldr	r3, [r6, #16]
 800aafc:	b087      	sub	sp, #28
 800aafe:	2000      	movs	r0, #0
 800ab00:	9102      	str	r1, [sp, #8]
 800ab02:	42ab      	cmp	r3, r5
 800ab04:	db6b      	blt.n	800abde <quorem+0xea>
 800ab06:	000b      	movs	r3, r1
 800ab08:	3d01      	subs	r5, #1
 800ab0a:	00ac      	lsls	r4, r5, #2
 800ab0c:	3314      	adds	r3, #20
 800ab0e:	9305      	str	r3, [sp, #20]
 800ab10:	191b      	adds	r3, r3, r4
 800ab12:	9303      	str	r3, [sp, #12]
 800ab14:	0033      	movs	r3, r6
 800ab16:	3314      	adds	r3, #20
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	191c      	adds	r4, r3, r4
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	6827      	ldr	r7, [r4, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	0038      	movs	r0, r7
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	3301      	adds	r3, #1
 800ab28:	0019      	movs	r1, r3
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	f7f5 fb12 	bl	8000154 <__udivsi3>
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	9000      	str	r0, [sp, #0]
 800ab34:	429f      	cmp	r7, r3
 800ab36:	d329      	bcc.n	800ab8c <quorem+0x98>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	469c      	mov	ip, r3
 800ab3c:	9801      	ldr	r0, [sp, #4]
 800ab3e:	9f05      	ldr	r7, [sp, #20]
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	cf08      	ldmia	r7!, {r3}
 800ab44:	9a00      	ldr	r2, [sp, #0]
 800ab46:	b299      	uxth	r1, r3
 800ab48:	4351      	muls	r1, r2
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	4353      	muls	r3, r2
 800ab4e:	4461      	add	r1, ip
 800ab50:	0c0a      	lsrs	r2, r1, #16
 800ab52:	189b      	adds	r3, r3, r2
 800ab54:	0c1a      	lsrs	r2, r3, #16
 800ab56:	9305      	str	r3, [sp, #20]
 800ab58:	6803      	ldr	r3, [r0, #0]
 800ab5a:	4694      	mov	ip, r2
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	b289      	uxth	r1, r1
 800ab62:	18d2      	adds	r2, r2, r3
 800ab64:	6803      	ldr	r3, [r0, #0]
 800ab66:	1a52      	subs	r2, r2, r1
 800ab68:	0c19      	lsrs	r1, r3, #16
 800ab6a:	466b      	mov	r3, sp
 800ab6c:	8a9b      	ldrh	r3, [r3, #20]
 800ab6e:	1acb      	subs	r3, r1, r3
 800ab70:	1411      	asrs	r1, r2, #16
 800ab72:	185b      	adds	r3, r3, r1
 800ab74:	1419      	asrs	r1, r3, #16
 800ab76:	b292      	uxth	r2, r2
 800ab78:	041b      	lsls	r3, r3, #16
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	9104      	str	r1, [sp, #16]
 800ab80:	c004      	stmia	r0!, {r2}
 800ab82:	42bb      	cmp	r3, r7
 800ab84:	d2dd      	bcs.n	800ab42 <quorem+0x4e>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d02e      	beq.n	800abea <quorem+0xf6>
 800ab8c:	0030      	movs	r0, r6
 800ab8e:	9902      	ldr	r1, [sp, #8]
 800ab90:	f001 fce6 	bl	800c560 <__mcmp>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	db21      	blt.n	800abdc <quorem+0xe8>
 800ab98:	0030      	movs	r0, r6
 800ab9a:	2400      	movs	r4, #0
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	9902      	ldr	r1, [sp, #8]
 800aba0:	3301      	adds	r3, #1
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	3014      	adds	r0, #20
 800aba6:	3114      	adds	r1, #20
 800aba8:	6802      	ldr	r2, [r0, #0]
 800abaa:	c908      	ldmia	r1!, {r3}
 800abac:	b292      	uxth	r2, r2
 800abae:	1914      	adds	r4, r2, r4
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	1aa2      	subs	r2, r4, r2
 800abb4:	6804      	ldr	r4, [r0, #0]
 800abb6:	0c1b      	lsrs	r3, r3, #16
 800abb8:	0c24      	lsrs	r4, r4, #16
 800abba:	1ae3      	subs	r3, r4, r3
 800abbc:	1414      	asrs	r4, r2, #16
 800abbe:	191b      	adds	r3, r3, r4
 800abc0:	141c      	asrs	r4, r3, #16
 800abc2:	b292      	uxth	r2, r2
 800abc4:	041b      	lsls	r3, r3, #16
 800abc6:	4313      	orrs	r3, r2
 800abc8:	c008      	stmia	r0!, {r3}
 800abca:	9b03      	ldr	r3, [sp, #12]
 800abcc:	428b      	cmp	r3, r1
 800abce:	d2eb      	bcs.n	800aba8 <quorem+0xb4>
 800abd0:	9a01      	ldr	r2, [sp, #4]
 800abd2:	00ab      	lsls	r3, r5, #2
 800abd4:	18d3      	adds	r3, r2, r3
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	2a00      	cmp	r2, #0
 800abda:	d010      	beq.n	800abfe <quorem+0x10a>
 800abdc:	9800      	ldr	r0, [sp, #0]
 800abde:	b007      	add	sp, #28
 800abe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <quorem+0xfe>
 800abe8:	3d01      	subs	r5, #1
 800abea:	9b01      	ldr	r3, [sp, #4]
 800abec:	3c04      	subs	r4, #4
 800abee:	42a3      	cmp	r3, r4
 800abf0:	d3f7      	bcc.n	800abe2 <quorem+0xee>
 800abf2:	6135      	str	r5, [r6, #16]
 800abf4:	e7ca      	b.n	800ab8c <quorem+0x98>
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	d104      	bne.n	800ac06 <quorem+0x112>
 800abfc:	3d01      	subs	r5, #1
 800abfe:	9a01      	ldr	r2, [sp, #4]
 800ac00:	3b04      	subs	r3, #4
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d3f7      	bcc.n	800abf6 <quorem+0x102>
 800ac06:	6135      	str	r5, [r6, #16]
 800ac08:	e7e8      	b.n	800abdc <quorem+0xe8>
	...

0800ac0c <_dtoa_r>:
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b09d      	sub	sp, #116	; 0x74
 800ac10:	9202      	str	r2, [sp, #8]
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	9b02      	ldr	r3, [sp, #8]
 800ac16:	9c03      	ldr	r4, [sp, #12]
 800ac18:	930a      	str	r3, [sp, #40]	; 0x28
 800ac1a:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac1e:	0007      	movs	r7, r0
 800ac20:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ac22:	2c00      	cmp	r4, #0
 800ac24:	d10e      	bne.n	800ac44 <_dtoa_r+0x38>
 800ac26:	2010      	movs	r0, #16
 800ac28:	f001 f998 	bl	800bf5c <malloc>
 800ac2c:	1e02      	subs	r2, r0, #0
 800ac2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac30:	d104      	bne.n	800ac3c <_dtoa_r+0x30>
 800ac32:	21ea      	movs	r1, #234	; 0xea
 800ac34:	4bc0      	ldr	r3, [pc, #768]	; (800af38 <_dtoa_r+0x32c>)
 800ac36:	48c1      	ldr	r0, [pc, #772]	; (800af3c <_dtoa_r+0x330>)
 800ac38:	f002 fd2e 	bl	800d698 <__assert_func>
 800ac3c:	6044      	str	r4, [r0, #4]
 800ac3e:	6084      	str	r4, [r0, #8]
 800ac40:	6004      	str	r4, [r0, #0]
 800ac42:	60c4      	str	r4, [r0, #12]
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	6819      	ldr	r1, [r3, #0]
 800ac48:	2900      	cmp	r1, #0
 800ac4a:	d00a      	beq.n	800ac62 <_dtoa_r+0x56>
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4093      	lsls	r3, r2
 800ac52:	604a      	str	r2, [r1, #4]
 800ac54:	608b      	str	r3, [r1, #8]
 800ac56:	0038      	movs	r0, r7
 800ac58:	f001 f9f4 	bl	800c044 <_Bfree>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	da21      	bge.n	800acac <_dtoa_r+0xa0>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	602b      	str	r3, [r5, #0]
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ac76:	4bb2      	ldr	r3, [pc, #712]	; (800af40 <_dtoa_r+0x334>)
 800ac78:	002a      	movs	r2, r5
 800ac7a:	9318      	str	r3, [sp, #96]	; 0x60
 800ac7c:	401a      	ands	r2, r3
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d117      	bne.n	800acb2 <_dtoa_r+0xa6>
 800ac82:	4bb0      	ldr	r3, [pc, #704]	; (800af44 <_dtoa_r+0x338>)
 800ac84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac86:	0328      	lsls	r0, r5, #12
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	9b02      	ldr	r3, [sp, #8]
 800ac8c:	0b00      	lsrs	r0, r0, #12
 800ac8e:	4318      	orrs	r0, r3
 800ac90:	d101      	bne.n	800ac96 <_dtoa_r+0x8a>
 800ac92:	f000 fdc3 	bl	800b81c <_dtoa_r+0xc10>
 800ac96:	48ac      	ldr	r0, [pc, #688]	; (800af48 <_dtoa_r+0x33c>)
 800ac98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac9a:	9005      	str	r0, [sp, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <_dtoa_r+0x9a>
 800aca0:	4baa      	ldr	r3, [pc, #680]	; (800af4c <_dtoa_r+0x340>)
 800aca2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	b01d      	add	sp, #116	; 0x74
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acac:	2300      	movs	r3, #0
 800acae:	602b      	str	r3, [r5, #0]
 800acb0:	e7e0      	b.n	800ac74 <_dtoa_r+0x68>
 800acb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800acb6:	9312      	str	r3, [sp, #72]	; 0x48
 800acb8:	9413      	str	r4, [sp, #76]	; 0x4c
 800acba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800acbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800acbe:	2200      	movs	r2, #0
 800acc0:	2300      	movs	r3, #0
 800acc2:	f7f5 fbcd 	bl	8000460 <__aeabi_dcmpeq>
 800acc6:	1e04      	subs	r4, r0, #0
 800acc8:	d00b      	beq.n	800ace2 <_dtoa_r+0xd6>
 800acca:	2301      	movs	r3, #1
 800accc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	4b9f      	ldr	r3, [pc, #636]	; (800af50 <_dtoa_r+0x344>)
 800acd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800acd4:	9305      	str	r3, [sp, #20]
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	d0e5      	beq.n	800aca6 <_dtoa_r+0x9a>
 800acda:	4a9e      	ldr	r2, [pc, #632]	; (800af54 <_dtoa_r+0x348>)
 800acdc:	9926      	ldr	r1, [sp, #152]	; 0x98
 800acde:	600a      	str	r2, [r1, #0]
 800ace0:	e7e1      	b.n	800aca6 <_dtoa_r+0x9a>
 800ace2:	ab1a      	add	r3, sp, #104	; 0x68
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	ab1b      	add	r3, sp, #108	; 0x6c
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	0038      	movs	r0, r7
 800acec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acf0:	f001 fd5e 	bl	800c7b0 <__d2b>
 800acf4:	006e      	lsls	r6, r5, #1
 800acf6:	9004      	str	r0, [sp, #16]
 800acf8:	0d76      	lsrs	r6, r6, #21
 800acfa:	d100      	bne.n	800acfe <_dtoa_r+0xf2>
 800acfc:	e07c      	b.n	800adf8 <_dtoa_r+0x1ec>
 800acfe:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ad00:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ad02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad04:	4a94      	ldr	r2, [pc, #592]	; (800af58 <_dtoa_r+0x34c>)
 800ad06:	031b      	lsls	r3, r3, #12
 800ad08:	0b1b      	lsrs	r3, r3, #12
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	0011      	movs	r1, r2
 800ad0e:	4b93      	ldr	r3, [pc, #588]	; (800af5c <_dtoa_r+0x350>)
 800ad10:	9416      	str	r4, [sp, #88]	; 0x58
 800ad12:	18f6      	adds	r6, r6, r3
 800ad14:	2200      	movs	r2, #0
 800ad16:	4b92      	ldr	r3, [pc, #584]	; (800af60 <_dtoa_r+0x354>)
 800ad18:	f7f7 f8c4 	bl	8001ea4 <__aeabi_dsub>
 800ad1c:	4a91      	ldr	r2, [pc, #580]	; (800af64 <_dtoa_r+0x358>)
 800ad1e:	4b92      	ldr	r3, [pc, #584]	; (800af68 <_dtoa_r+0x35c>)
 800ad20:	f7f6 fe54 	bl	80019cc <__aeabi_dmul>
 800ad24:	4a91      	ldr	r2, [pc, #580]	; (800af6c <_dtoa_r+0x360>)
 800ad26:	4b92      	ldr	r3, [pc, #584]	; (800af70 <_dtoa_r+0x364>)
 800ad28:	f7f5 fee0 	bl	8000aec <__aeabi_dadd>
 800ad2c:	0004      	movs	r4, r0
 800ad2e:	0030      	movs	r0, r6
 800ad30:	000d      	movs	r5, r1
 800ad32:	f7f7 fc9d 	bl	8002670 <__aeabi_i2d>
 800ad36:	4a8f      	ldr	r2, [pc, #572]	; (800af74 <_dtoa_r+0x368>)
 800ad38:	4b8f      	ldr	r3, [pc, #572]	; (800af78 <_dtoa_r+0x36c>)
 800ad3a:	f7f6 fe47 	bl	80019cc <__aeabi_dmul>
 800ad3e:	0002      	movs	r2, r0
 800ad40:	000b      	movs	r3, r1
 800ad42:	0020      	movs	r0, r4
 800ad44:	0029      	movs	r1, r5
 800ad46:	f7f5 fed1 	bl	8000aec <__aeabi_dadd>
 800ad4a:	0004      	movs	r4, r0
 800ad4c:	000d      	movs	r5, r1
 800ad4e:	f7f7 fc59 	bl	8002604 <__aeabi_d2iz>
 800ad52:	2200      	movs	r2, #0
 800ad54:	9002      	str	r0, [sp, #8]
 800ad56:	2300      	movs	r3, #0
 800ad58:	0020      	movs	r0, r4
 800ad5a:	0029      	movs	r1, r5
 800ad5c:	f7f5 fb86 	bl	800046c <__aeabi_dcmplt>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d00b      	beq.n	800ad7c <_dtoa_r+0x170>
 800ad64:	9802      	ldr	r0, [sp, #8]
 800ad66:	f7f7 fc83 	bl	8002670 <__aeabi_i2d>
 800ad6a:	002b      	movs	r3, r5
 800ad6c:	0022      	movs	r2, r4
 800ad6e:	f7f5 fb77 	bl	8000460 <__aeabi_dcmpeq>
 800ad72:	4243      	negs	r3, r0
 800ad74:	4158      	adcs	r0, r3
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	1a1b      	subs	r3, r3, r0
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	9315      	str	r3, [sp, #84]	; 0x54
 800ad80:	9b02      	ldr	r3, [sp, #8]
 800ad82:	2b16      	cmp	r3, #22
 800ad84:	d80f      	bhi.n	800ada6 <_dtoa_r+0x19a>
 800ad86:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ad88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ad8a:	00da      	lsls	r2, r3, #3
 800ad8c:	4b7b      	ldr	r3, [pc, #492]	; (800af7c <_dtoa_r+0x370>)
 800ad8e:	189b      	adds	r3, r3, r2
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f7f5 fb6a 	bl	800046c <__aeabi_dcmplt>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d049      	beq.n	800ae30 <_dtoa_r+0x224>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	9302      	str	r3, [sp, #8]
 800ada2:	2300      	movs	r3, #0
 800ada4:	9315      	str	r3, [sp, #84]	; 0x54
 800ada6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ada8:	1b9e      	subs	r6, r3, r6
 800adaa:	2300      	movs	r3, #0
 800adac:	9308      	str	r3, [sp, #32]
 800adae:	0033      	movs	r3, r6
 800adb0:	3b01      	subs	r3, #1
 800adb2:	930d      	str	r3, [sp, #52]	; 0x34
 800adb4:	d504      	bpl.n	800adc0 <_dtoa_r+0x1b4>
 800adb6:	2301      	movs	r3, #1
 800adb8:	1b9b      	subs	r3, r3, r6
 800adba:	9308      	str	r3, [sp, #32]
 800adbc:	2300      	movs	r3, #0
 800adbe:	930d      	str	r3, [sp, #52]	; 0x34
 800adc0:	9b02      	ldr	r3, [sp, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	db36      	blt.n	800ae34 <_dtoa_r+0x228>
 800adc6:	9a02      	ldr	r2, [sp, #8]
 800adc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adca:	4694      	mov	ip, r2
 800adcc:	4463      	add	r3, ip
 800adce:	930d      	str	r3, [sp, #52]	; 0x34
 800add0:	2300      	movs	r3, #0
 800add2:	9214      	str	r2, [sp, #80]	; 0x50
 800add4:	930e      	str	r3, [sp, #56]	; 0x38
 800add6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800add8:	2401      	movs	r4, #1
 800adda:	2b09      	cmp	r3, #9
 800addc:	d862      	bhi.n	800aea4 <_dtoa_r+0x298>
 800adde:	2b05      	cmp	r3, #5
 800ade0:	dd02      	ble.n	800ade8 <_dtoa_r+0x1dc>
 800ade2:	2400      	movs	r4, #0
 800ade4:	3b04      	subs	r3, #4
 800ade6:	9322      	str	r3, [sp, #136]	; 0x88
 800ade8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adea:	1e98      	subs	r0, r3, #2
 800adec:	2803      	cmp	r0, #3
 800adee:	d862      	bhi.n	800aeb6 <_dtoa_r+0x2aa>
 800adf0:	f7f5 f99c 	bl	800012c <__gnu_thumb1_case_uqi>
 800adf4:	56343629 	.word	0x56343629
 800adf8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800adfa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800adfc:	189e      	adds	r6, r3, r2
 800adfe:	4b60      	ldr	r3, [pc, #384]	; (800af80 <_dtoa_r+0x374>)
 800ae00:	18f2      	adds	r2, r6, r3
 800ae02:	2a20      	cmp	r2, #32
 800ae04:	dd0f      	ble.n	800ae26 <_dtoa_r+0x21a>
 800ae06:	2340      	movs	r3, #64	; 0x40
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	409d      	lsls	r5, r3
 800ae0c:	4b5d      	ldr	r3, [pc, #372]	; (800af84 <_dtoa_r+0x378>)
 800ae0e:	9802      	ldr	r0, [sp, #8]
 800ae10:	18f3      	adds	r3, r6, r3
 800ae12:	40d8      	lsrs	r0, r3
 800ae14:	4328      	orrs	r0, r5
 800ae16:	f7f7 fc5b 	bl	80026d0 <__aeabi_ui2d>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4c5a      	ldr	r4, [pc, #360]	; (800af88 <_dtoa_r+0x37c>)
 800ae1e:	3e01      	subs	r6, #1
 800ae20:	1909      	adds	r1, r1, r4
 800ae22:	9316      	str	r3, [sp, #88]	; 0x58
 800ae24:	e776      	b.n	800ad14 <_dtoa_r+0x108>
 800ae26:	2320      	movs	r3, #32
 800ae28:	9802      	ldr	r0, [sp, #8]
 800ae2a:	1a9b      	subs	r3, r3, r2
 800ae2c:	4098      	lsls	r0, r3
 800ae2e:	e7f2      	b.n	800ae16 <_dtoa_r+0x20a>
 800ae30:	9015      	str	r0, [sp, #84]	; 0x54
 800ae32:	e7b8      	b.n	800ada6 <_dtoa_r+0x19a>
 800ae34:	9b08      	ldr	r3, [sp, #32]
 800ae36:	9a02      	ldr	r2, [sp, #8]
 800ae38:	1a9b      	subs	r3, r3, r2
 800ae3a:	9308      	str	r3, [sp, #32]
 800ae3c:	4253      	negs	r3, r2
 800ae3e:	930e      	str	r3, [sp, #56]	; 0x38
 800ae40:	2300      	movs	r3, #0
 800ae42:	9314      	str	r3, [sp, #80]	; 0x50
 800ae44:	e7c7      	b.n	800add6 <_dtoa_r+0x1ca>
 800ae46:	2300      	movs	r3, #0
 800ae48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dc36      	bgt.n	800aebe <_dtoa_r+0x2b2>
 800ae50:	2301      	movs	r3, #1
 800ae52:	001a      	movs	r2, r3
 800ae54:	930c      	str	r3, [sp, #48]	; 0x30
 800ae56:	9306      	str	r3, [sp, #24]
 800ae58:	9223      	str	r2, [sp, #140]	; 0x8c
 800ae5a:	e00d      	b.n	800ae78 <_dtoa_r+0x26c>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e7f3      	b.n	800ae48 <_dtoa_r+0x23c>
 800ae60:	2300      	movs	r3, #0
 800ae62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ae64:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae66:	4694      	mov	ip, r2
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	4463      	add	r3, ip
 800ae6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae6e:	3301      	adds	r3, #1
 800ae70:	9306      	str	r3, [sp, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dc00      	bgt.n	800ae78 <_dtoa_r+0x26c>
 800ae76:	2301      	movs	r3, #1
 800ae78:	2200      	movs	r2, #0
 800ae7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae7c:	6042      	str	r2, [r0, #4]
 800ae7e:	3204      	adds	r2, #4
 800ae80:	0015      	movs	r5, r2
 800ae82:	3514      	adds	r5, #20
 800ae84:	6841      	ldr	r1, [r0, #4]
 800ae86:	429d      	cmp	r5, r3
 800ae88:	d91d      	bls.n	800aec6 <_dtoa_r+0x2ba>
 800ae8a:	0038      	movs	r0, r7
 800ae8c:	f001 f896 	bl	800bfbc <_Balloc>
 800ae90:	9005      	str	r0, [sp, #20]
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d11b      	bne.n	800aece <_dtoa_r+0x2c2>
 800ae96:	21d5      	movs	r1, #213	; 0xd5
 800ae98:	0002      	movs	r2, r0
 800ae9a:	4b3c      	ldr	r3, [pc, #240]	; (800af8c <_dtoa_r+0x380>)
 800ae9c:	0049      	lsls	r1, r1, #1
 800ae9e:	e6ca      	b.n	800ac36 <_dtoa_r+0x2a>
 800aea0:	2301      	movs	r3, #1
 800aea2:	e7de      	b.n	800ae62 <_dtoa_r+0x256>
 800aea4:	2300      	movs	r3, #0
 800aea6:	940f      	str	r4, [sp, #60]	; 0x3c
 800aea8:	9322      	str	r3, [sp, #136]	; 0x88
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	930c      	str	r3, [sp, #48]	; 0x30
 800aeae:	9306      	str	r3, [sp, #24]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	3313      	adds	r3, #19
 800aeb4:	e7d0      	b.n	800ae58 <_dtoa_r+0x24c>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeba:	3b02      	subs	r3, #2
 800aebc:	e7f6      	b.n	800aeac <_dtoa_r+0x2a0>
 800aebe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aec0:	930c      	str	r3, [sp, #48]	; 0x30
 800aec2:	9306      	str	r3, [sp, #24]
 800aec4:	e7d8      	b.n	800ae78 <_dtoa_r+0x26c>
 800aec6:	3101      	adds	r1, #1
 800aec8:	6041      	str	r1, [r0, #4]
 800aeca:	0052      	lsls	r2, r2, #1
 800aecc:	e7d8      	b.n	800ae80 <_dtoa_r+0x274>
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	9a05      	ldr	r2, [sp, #20]
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	9b06      	ldr	r3, [sp, #24]
 800aed6:	2b0e      	cmp	r3, #14
 800aed8:	d900      	bls.n	800aedc <_dtoa_r+0x2d0>
 800aeda:	e0eb      	b.n	800b0b4 <_dtoa_r+0x4a8>
 800aedc:	2c00      	cmp	r4, #0
 800aede:	d100      	bne.n	800aee2 <_dtoa_r+0x2d6>
 800aee0:	e0e8      	b.n	800b0b4 <_dtoa_r+0x4a8>
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	dd68      	ble.n	800afba <_dtoa_r+0x3ae>
 800aee8:	001a      	movs	r2, r3
 800aeea:	210f      	movs	r1, #15
 800aeec:	4b23      	ldr	r3, [pc, #140]	; (800af7c <_dtoa_r+0x370>)
 800aeee:	400a      	ands	r2, r1
 800aef0:	00d2      	lsls	r2, r2, #3
 800aef2:	189b      	adds	r3, r3, r2
 800aef4:	681d      	ldr	r5, [r3, #0]
 800aef6:	685e      	ldr	r6, [r3, #4]
 800aef8:	9b02      	ldr	r3, [sp, #8]
 800aefa:	111c      	asrs	r4, r3, #4
 800aefc:	2302      	movs	r3, #2
 800aefe:	9310      	str	r3, [sp, #64]	; 0x40
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	05db      	lsls	r3, r3, #23
 800af04:	d50b      	bpl.n	800af1e <_dtoa_r+0x312>
 800af06:	4b22      	ldr	r3, [pc, #136]	; (800af90 <_dtoa_r+0x384>)
 800af08:	400c      	ands	r4, r1
 800af0a:	6a1a      	ldr	r2, [r3, #32]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af10:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af12:	f7f6 f955 	bl	80011c0 <__aeabi_ddiv>
 800af16:	2303      	movs	r3, #3
 800af18:	900a      	str	r0, [sp, #40]	; 0x28
 800af1a:	910b      	str	r1, [sp, #44]	; 0x2c
 800af1c:	9310      	str	r3, [sp, #64]	; 0x40
 800af1e:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <_dtoa_r+0x384>)
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	2c00      	cmp	r4, #0
 800af24:	d136      	bne.n	800af94 <_dtoa_r+0x388>
 800af26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af2a:	002a      	movs	r2, r5
 800af2c:	0033      	movs	r3, r6
 800af2e:	f7f6 f947 	bl	80011c0 <__aeabi_ddiv>
 800af32:	900a      	str	r0, [sp, #40]	; 0x28
 800af34:	910b      	str	r1, [sp, #44]	; 0x2c
 800af36:	e05c      	b.n	800aff2 <_dtoa_r+0x3e6>
 800af38:	0800e4ee 	.word	0x0800e4ee
 800af3c:	0800e505 	.word	0x0800e505
 800af40:	7ff00000 	.word	0x7ff00000
 800af44:	0000270f 	.word	0x0000270f
 800af48:	0800e4ea 	.word	0x0800e4ea
 800af4c:	0800e4ed 	.word	0x0800e4ed
 800af50:	0800e769 	.word	0x0800e769
 800af54:	0800e76a 	.word	0x0800e76a
 800af58:	3ff00000 	.word	0x3ff00000
 800af5c:	fffffc01 	.word	0xfffffc01
 800af60:	3ff80000 	.word	0x3ff80000
 800af64:	636f4361 	.word	0x636f4361
 800af68:	3fd287a7 	.word	0x3fd287a7
 800af6c:	8b60c8b3 	.word	0x8b60c8b3
 800af70:	3fc68a28 	.word	0x3fc68a28
 800af74:	509f79fb 	.word	0x509f79fb
 800af78:	3fd34413 	.word	0x3fd34413
 800af7c:	0800e680 	.word	0x0800e680
 800af80:	00000432 	.word	0x00000432
 800af84:	00000412 	.word	0x00000412
 800af88:	fe100000 	.word	0xfe100000
 800af8c:	0800e564 	.word	0x0800e564
 800af90:	0800e658 	.word	0x0800e658
 800af94:	2301      	movs	r3, #1
 800af96:	421c      	tst	r4, r3
 800af98:	d00b      	beq.n	800afb2 <_dtoa_r+0x3a6>
 800af9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af9c:	0028      	movs	r0, r5
 800af9e:	3301      	adds	r3, #1
 800afa0:	9310      	str	r3, [sp, #64]	; 0x40
 800afa2:	9b07      	ldr	r3, [sp, #28]
 800afa4:	0031      	movs	r1, r6
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	f7f6 fd0f 	bl	80019cc <__aeabi_dmul>
 800afae:	0005      	movs	r5, r0
 800afb0:	000e      	movs	r6, r1
 800afb2:	9b07      	ldr	r3, [sp, #28]
 800afb4:	1064      	asrs	r4, r4, #1
 800afb6:	3308      	adds	r3, #8
 800afb8:	e7b2      	b.n	800af20 <_dtoa_r+0x314>
 800afba:	2302      	movs	r3, #2
 800afbc:	9310      	str	r3, [sp, #64]	; 0x40
 800afbe:	9b02      	ldr	r3, [sp, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d016      	beq.n	800aff2 <_dtoa_r+0x3e6>
 800afc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800afc8:	425c      	negs	r4, r3
 800afca:	230f      	movs	r3, #15
 800afcc:	4ab5      	ldr	r2, [pc, #724]	; (800b2a4 <_dtoa_r+0x698>)
 800afce:	4023      	ands	r3, r4
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	18d3      	adds	r3, r2, r3
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f7f6 fcf8 	bl	80019cc <__aeabi_dmul>
 800afdc:	2601      	movs	r6, #1
 800afde:	2300      	movs	r3, #0
 800afe0:	900a      	str	r0, [sp, #40]	; 0x28
 800afe2:	910b      	str	r1, [sp, #44]	; 0x2c
 800afe4:	4db0      	ldr	r5, [pc, #704]	; (800b2a8 <_dtoa_r+0x69c>)
 800afe6:	1124      	asrs	r4, r4, #4
 800afe8:	2c00      	cmp	r4, #0
 800afea:	d000      	beq.n	800afee <_dtoa_r+0x3e2>
 800afec:	e094      	b.n	800b118 <_dtoa_r+0x50c>
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d19f      	bne.n	800af32 <_dtoa_r+0x326>
 800aff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d100      	bne.n	800affa <_dtoa_r+0x3ee>
 800aff8:	e09b      	b.n	800b132 <_dtoa_r+0x526>
 800affa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800affc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800affe:	2200      	movs	r2, #0
 800b000:	0020      	movs	r0, r4
 800b002:	0029      	movs	r1, r5
 800b004:	4ba9      	ldr	r3, [pc, #676]	; (800b2ac <_dtoa_r+0x6a0>)
 800b006:	f7f5 fa31 	bl	800046c <__aeabi_dcmplt>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d100      	bne.n	800b010 <_dtoa_r+0x404>
 800b00e:	e090      	b.n	800b132 <_dtoa_r+0x526>
 800b010:	9b06      	ldr	r3, [sp, #24]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d100      	bne.n	800b018 <_dtoa_r+0x40c>
 800b016:	e08c      	b.n	800b132 <_dtoa_r+0x526>
 800b018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dd46      	ble.n	800b0ac <_dtoa_r+0x4a0>
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	2200      	movs	r2, #0
 800b022:	0020      	movs	r0, r4
 800b024:	0029      	movs	r1, r5
 800b026:	1e5e      	subs	r6, r3, #1
 800b028:	4ba1      	ldr	r3, [pc, #644]	; (800b2b0 <_dtoa_r+0x6a4>)
 800b02a:	f7f6 fccf 	bl	80019cc <__aeabi_dmul>
 800b02e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b030:	900a      	str	r0, [sp, #40]	; 0x28
 800b032:	910b      	str	r1, [sp, #44]	; 0x2c
 800b034:	3301      	adds	r3, #1
 800b036:	9310      	str	r3, [sp, #64]	; 0x40
 800b038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b03a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b03c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b03e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b040:	9307      	str	r3, [sp, #28]
 800b042:	f7f7 fb15 	bl	8002670 <__aeabi_i2d>
 800b046:	0022      	movs	r2, r4
 800b048:	002b      	movs	r3, r5
 800b04a:	f7f6 fcbf 	bl	80019cc <__aeabi_dmul>
 800b04e:	2200      	movs	r2, #0
 800b050:	4b98      	ldr	r3, [pc, #608]	; (800b2b4 <_dtoa_r+0x6a8>)
 800b052:	f7f5 fd4b 	bl	8000aec <__aeabi_dadd>
 800b056:	9010      	str	r0, [sp, #64]	; 0x40
 800b058:	9111      	str	r1, [sp, #68]	; 0x44
 800b05a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b05c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b05e:	920a      	str	r2, [sp, #40]	; 0x28
 800b060:	930b      	str	r3, [sp, #44]	; 0x2c
 800b062:	4a95      	ldr	r2, [pc, #596]	; (800b2b8 <_dtoa_r+0x6ac>)
 800b064:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b066:	4694      	mov	ip, r2
 800b068:	4463      	add	r3, ip
 800b06a:	9317      	str	r3, [sp, #92]	; 0x5c
 800b06c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b06e:	9b07      	ldr	r3, [sp, #28]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d161      	bne.n	800b138 <_dtoa_r+0x52c>
 800b074:	2200      	movs	r2, #0
 800b076:	0020      	movs	r0, r4
 800b078:	0029      	movs	r1, r5
 800b07a:	4b90      	ldr	r3, [pc, #576]	; (800b2bc <_dtoa_r+0x6b0>)
 800b07c:	f7f6 ff12 	bl	8001ea4 <__aeabi_dsub>
 800b080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b084:	0004      	movs	r4, r0
 800b086:	000d      	movs	r5, r1
 800b088:	f7f5 fa04 	bl	8000494 <__aeabi_dcmpgt>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d000      	beq.n	800b092 <_dtoa_r+0x486>
 800b090:	e2b5      	b.n	800b5fe <_dtoa_r+0x9f2>
 800b092:	488b      	ldr	r0, [pc, #556]	; (800b2c0 <_dtoa_r+0x6b4>)
 800b094:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b096:	4684      	mov	ip, r0
 800b098:	4461      	add	r1, ip
 800b09a:	000b      	movs	r3, r1
 800b09c:	0020      	movs	r0, r4
 800b09e:	0029      	movs	r1, r5
 800b0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0a2:	f7f5 f9e3 	bl	800046c <__aeabi_dcmplt>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d000      	beq.n	800b0ac <_dtoa_r+0x4a0>
 800b0aa:	e2a5      	b.n	800b5f8 <_dtoa_r+0x9ec>
 800b0ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b2:	940b      	str	r4, [sp, #44]	; 0x2c
 800b0b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	da00      	bge.n	800b0bc <_dtoa_r+0x4b0>
 800b0ba:	e171      	b.n	800b3a0 <_dtoa_r+0x794>
 800b0bc:	9a02      	ldr	r2, [sp, #8]
 800b0be:	2a0e      	cmp	r2, #14
 800b0c0:	dd00      	ble.n	800b0c4 <_dtoa_r+0x4b8>
 800b0c2:	e16d      	b.n	800b3a0 <_dtoa_r+0x794>
 800b0c4:	4b77      	ldr	r3, [pc, #476]	; (800b2a4 <_dtoa_r+0x698>)
 800b0c6:	00d2      	lsls	r2, r2, #3
 800b0c8:	189b      	adds	r3, r3, r2
 800b0ca:	685c      	ldr	r4, [r3, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	9308      	str	r3, [sp, #32]
 800b0d0:	9409      	str	r4, [sp, #36]	; 0x24
 800b0d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	db00      	blt.n	800b0da <_dtoa_r+0x4ce>
 800b0d8:	e0f6      	b.n	800b2c8 <_dtoa_r+0x6bc>
 800b0da:	9b06      	ldr	r3, [sp, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dd00      	ble.n	800b0e2 <_dtoa_r+0x4d6>
 800b0e0:	e0f2      	b.n	800b2c8 <_dtoa_r+0x6bc>
 800b0e2:	d000      	beq.n	800b0e6 <_dtoa_r+0x4da>
 800b0e4:	e288      	b.n	800b5f8 <_dtoa_r+0x9ec>
 800b0e6:	9808      	ldr	r0, [sp, #32]
 800b0e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4b73      	ldr	r3, [pc, #460]	; (800b2bc <_dtoa_r+0x6b0>)
 800b0ee:	f7f6 fc6d 	bl	80019cc <__aeabi_dmul>
 800b0f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f6:	f7f5 f9d7 	bl	80004a8 <__aeabi_dcmpge>
 800b0fa:	9e06      	ldr	r6, [sp, #24]
 800b0fc:	0035      	movs	r5, r6
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d000      	beq.n	800b104 <_dtoa_r+0x4f8>
 800b102:	e25f      	b.n	800b5c4 <_dtoa_r+0x9b8>
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	9a05      	ldr	r2, [sp, #20]
 800b108:	3301      	adds	r3, #1
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	2331      	movs	r3, #49	; 0x31
 800b10e:	7013      	strb	r3, [r2, #0]
 800b110:	9b02      	ldr	r3, [sp, #8]
 800b112:	3301      	adds	r3, #1
 800b114:	9302      	str	r3, [sp, #8]
 800b116:	e25a      	b.n	800b5ce <_dtoa_r+0x9c2>
 800b118:	4234      	tst	r4, r6
 800b11a:	d007      	beq.n	800b12c <_dtoa_r+0x520>
 800b11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b11e:	3301      	adds	r3, #1
 800b120:	9310      	str	r3, [sp, #64]	; 0x40
 800b122:	682a      	ldr	r2, [r5, #0]
 800b124:	686b      	ldr	r3, [r5, #4]
 800b126:	f7f6 fc51 	bl	80019cc <__aeabi_dmul>
 800b12a:	0033      	movs	r3, r6
 800b12c:	1064      	asrs	r4, r4, #1
 800b12e:	3508      	adds	r5, #8
 800b130:	e75a      	b.n	800afe8 <_dtoa_r+0x3dc>
 800b132:	9e02      	ldr	r6, [sp, #8]
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	e780      	b.n	800b03a <_dtoa_r+0x42e>
 800b138:	9b07      	ldr	r3, [sp, #28]
 800b13a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b13c:	1e5a      	subs	r2, r3, #1
 800b13e:	4b59      	ldr	r3, [pc, #356]	; (800b2a4 <_dtoa_r+0x698>)
 800b140:	00d2      	lsls	r2, r2, #3
 800b142:	189b      	adds	r3, r3, r2
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	2900      	cmp	r1, #0
 800b14a:	d051      	beq.n	800b1f0 <_dtoa_r+0x5e4>
 800b14c:	2000      	movs	r0, #0
 800b14e:	495d      	ldr	r1, [pc, #372]	; (800b2c4 <_dtoa_r+0x6b8>)
 800b150:	f7f6 f836 	bl	80011c0 <__aeabi_ddiv>
 800b154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b158:	f7f6 fea4 	bl	8001ea4 <__aeabi_dsub>
 800b15c:	9a05      	ldr	r2, [sp, #20]
 800b15e:	9b05      	ldr	r3, [sp, #20]
 800b160:	4694      	mov	ip, r2
 800b162:	9310      	str	r3, [sp, #64]	; 0x40
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	900a      	str	r0, [sp, #40]	; 0x28
 800b168:	910b      	str	r1, [sp, #44]	; 0x2c
 800b16a:	4463      	add	r3, ip
 800b16c:	9319      	str	r3, [sp, #100]	; 0x64
 800b16e:	0029      	movs	r1, r5
 800b170:	0020      	movs	r0, r4
 800b172:	f7f7 fa47 	bl	8002604 <__aeabi_d2iz>
 800b176:	9017      	str	r0, [sp, #92]	; 0x5c
 800b178:	f7f7 fa7a 	bl	8002670 <__aeabi_i2d>
 800b17c:	0002      	movs	r2, r0
 800b17e:	000b      	movs	r3, r1
 800b180:	0020      	movs	r0, r4
 800b182:	0029      	movs	r1, r5
 800b184:	f7f6 fe8e 	bl	8001ea4 <__aeabi_dsub>
 800b188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b18a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b18c:	3301      	adds	r3, #1
 800b18e:	9307      	str	r3, [sp, #28]
 800b190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b192:	0004      	movs	r4, r0
 800b194:	3330      	adds	r3, #48	; 0x30
 800b196:	7013      	strb	r3, [r2, #0]
 800b198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19c:	000d      	movs	r5, r1
 800b19e:	f7f5 f965 	bl	800046c <__aeabi_dcmplt>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d175      	bne.n	800b292 <_dtoa_r+0x686>
 800b1a6:	0022      	movs	r2, r4
 800b1a8:	002b      	movs	r3, r5
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	493f      	ldr	r1, [pc, #252]	; (800b2ac <_dtoa_r+0x6a0>)
 800b1ae:	f7f6 fe79 	bl	8001ea4 <__aeabi_dsub>
 800b1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b6:	f7f5 f959 	bl	800046c <__aeabi_dcmplt>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d000      	beq.n	800b1c0 <_dtoa_r+0x5b4>
 800b1be:	e0d1      	b.n	800b364 <_dtoa_r+0x758>
 800b1c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1c2:	9a07      	ldr	r2, [sp, #28]
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d100      	bne.n	800b1ca <_dtoa_r+0x5be>
 800b1c8:	e770      	b.n	800b0ac <_dtoa_r+0x4a0>
 800b1ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	4b37      	ldr	r3, [pc, #220]	; (800b2b0 <_dtoa_r+0x6a4>)
 800b1d2:	f7f6 fbfb 	bl	80019cc <__aeabi_dmul>
 800b1d6:	4b36      	ldr	r3, [pc, #216]	; (800b2b0 <_dtoa_r+0x6a4>)
 800b1d8:	900a      	str	r0, [sp, #40]	; 0x28
 800b1da:	910b      	str	r1, [sp, #44]	; 0x2c
 800b1dc:	2200      	movs	r2, #0
 800b1de:	0020      	movs	r0, r4
 800b1e0:	0029      	movs	r1, r5
 800b1e2:	f7f6 fbf3 	bl	80019cc <__aeabi_dmul>
 800b1e6:	9b07      	ldr	r3, [sp, #28]
 800b1e8:	0004      	movs	r4, r0
 800b1ea:	000d      	movs	r5, r1
 800b1ec:	9310      	str	r3, [sp, #64]	; 0x40
 800b1ee:	e7be      	b.n	800b16e <_dtoa_r+0x562>
 800b1f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1f4:	f7f6 fbea 	bl	80019cc <__aeabi_dmul>
 800b1f8:	9a05      	ldr	r2, [sp, #20]
 800b1fa:	9b05      	ldr	r3, [sp, #20]
 800b1fc:	4694      	mov	ip, r2
 800b1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b200:	9b07      	ldr	r3, [sp, #28]
 800b202:	9010      	str	r0, [sp, #64]	; 0x40
 800b204:	9111      	str	r1, [sp, #68]	; 0x44
 800b206:	4463      	add	r3, ip
 800b208:	9319      	str	r3, [sp, #100]	; 0x64
 800b20a:	0029      	movs	r1, r5
 800b20c:	0020      	movs	r0, r4
 800b20e:	f7f7 f9f9 	bl	8002604 <__aeabi_d2iz>
 800b212:	9017      	str	r0, [sp, #92]	; 0x5c
 800b214:	f7f7 fa2c 	bl	8002670 <__aeabi_i2d>
 800b218:	0002      	movs	r2, r0
 800b21a:	000b      	movs	r3, r1
 800b21c:	0020      	movs	r0, r4
 800b21e:	0029      	movs	r1, r5
 800b220:	f7f6 fe40 	bl	8001ea4 <__aeabi_dsub>
 800b224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b228:	3330      	adds	r3, #48	; 0x30
 800b22a:	7013      	strb	r3, [r2, #0]
 800b22c:	0013      	movs	r3, r2
 800b22e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b230:	3301      	adds	r3, #1
 800b232:	0004      	movs	r4, r0
 800b234:	000d      	movs	r5, r1
 800b236:	930a      	str	r3, [sp, #40]	; 0x28
 800b238:	4293      	cmp	r3, r2
 800b23a:	d12c      	bne.n	800b296 <_dtoa_r+0x68a>
 800b23c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b23e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b240:	9a05      	ldr	r2, [sp, #20]
 800b242:	9b07      	ldr	r3, [sp, #28]
 800b244:	4694      	mov	ip, r2
 800b246:	4463      	add	r3, ip
 800b248:	2200      	movs	r2, #0
 800b24a:	9307      	str	r3, [sp, #28]
 800b24c:	4b1d      	ldr	r3, [pc, #116]	; (800b2c4 <_dtoa_r+0x6b8>)
 800b24e:	f7f5 fc4d 	bl	8000aec <__aeabi_dadd>
 800b252:	0002      	movs	r2, r0
 800b254:	000b      	movs	r3, r1
 800b256:	0020      	movs	r0, r4
 800b258:	0029      	movs	r1, r5
 800b25a:	f7f5 f91b 	bl	8000494 <__aeabi_dcmpgt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d000      	beq.n	800b264 <_dtoa_r+0x658>
 800b262:	e07f      	b.n	800b364 <_dtoa_r+0x758>
 800b264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b268:	2000      	movs	r0, #0
 800b26a:	4916      	ldr	r1, [pc, #88]	; (800b2c4 <_dtoa_r+0x6b8>)
 800b26c:	f7f6 fe1a 	bl	8001ea4 <__aeabi_dsub>
 800b270:	0002      	movs	r2, r0
 800b272:	000b      	movs	r3, r1
 800b274:	0020      	movs	r0, r4
 800b276:	0029      	movs	r1, r5
 800b278:	f7f5 f8f8 	bl	800046c <__aeabi_dcmplt>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d100      	bne.n	800b282 <_dtoa_r+0x676>
 800b280:	e714      	b.n	800b0ac <_dtoa_r+0x4a0>
 800b282:	9b07      	ldr	r3, [sp, #28]
 800b284:	001a      	movs	r2, r3
 800b286:	3a01      	subs	r2, #1
 800b288:	9207      	str	r2, [sp, #28]
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	2a30      	cmp	r2, #48	; 0x30
 800b28e:	d0f8      	beq.n	800b282 <_dtoa_r+0x676>
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	9602      	str	r6, [sp, #8]
 800b294:	e054      	b.n	800b340 <_dtoa_r+0x734>
 800b296:	2200      	movs	r2, #0
 800b298:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <_dtoa_r+0x6a4>)
 800b29a:	f7f6 fb97 	bl	80019cc <__aeabi_dmul>
 800b29e:	0004      	movs	r4, r0
 800b2a0:	000d      	movs	r5, r1
 800b2a2:	e7b2      	b.n	800b20a <_dtoa_r+0x5fe>
 800b2a4:	0800e680 	.word	0x0800e680
 800b2a8:	0800e658 	.word	0x0800e658
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	40240000 	.word	0x40240000
 800b2b4:	401c0000 	.word	0x401c0000
 800b2b8:	fcc00000 	.word	0xfcc00000
 800b2bc:	40140000 	.word	0x40140000
 800b2c0:	7cc00000 	.word	0x7cc00000
 800b2c4:	3fe00000 	.word	0x3fe00000
 800b2c8:	9b06      	ldr	r3, [sp, #24]
 800b2ca:	9e05      	ldr	r6, [sp, #20]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	199b      	adds	r3, r3, r6
 800b2d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b2d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b2d6:	9a08      	ldr	r2, [sp, #32]
 800b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2da:	0020      	movs	r0, r4
 800b2dc:	0029      	movs	r1, r5
 800b2de:	f7f5 ff6f 	bl	80011c0 <__aeabi_ddiv>
 800b2e2:	f7f7 f98f 	bl	8002604 <__aeabi_d2iz>
 800b2e6:	9006      	str	r0, [sp, #24]
 800b2e8:	f7f7 f9c2 	bl	8002670 <__aeabi_i2d>
 800b2ec:	9a08      	ldr	r2, [sp, #32]
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	f7f6 fb6c 	bl	80019cc <__aeabi_dmul>
 800b2f4:	0002      	movs	r2, r0
 800b2f6:	000b      	movs	r3, r1
 800b2f8:	0020      	movs	r0, r4
 800b2fa:	0029      	movs	r1, r5
 800b2fc:	f7f6 fdd2 	bl	8001ea4 <__aeabi_dsub>
 800b300:	0033      	movs	r3, r6
 800b302:	9a06      	ldr	r2, [sp, #24]
 800b304:	3601      	adds	r6, #1
 800b306:	3230      	adds	r2, #48	; 0x30
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b30c:	9607      	str	r6, [sp, #28]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d139      	bne.n	800b386 <_dtoa_r+0x77a>
 800b312:	0002      	movs	r2, r0
 800b314:	000b      	movs	r3, r1
 800b316:	f7f5 fbe9 	bl	8000aec <__aeabi_dadd>
 800b31a:	9a08      	ldr	r2, [sp, #32]
 800b31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31e:	0004      	movs	r4, r0
 800b320:	000d      	movs	r5, r1
 800b322:	f7f5 f8b7 	bl	8000494 <__aeabi_dcmpgt>
 800b326:	2800      	cmp	r0, #0
 800b328:	d11b      	bne.n	800b362 <_dtoa_r+0x756>
 800b32a:	9a08      	ldr	r2, [sp, #32]
 800b32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b32e:	0020      	movs	r0, r4
 800b330:	0029      	movs	r1, r5
 800b332:	f7f5 f895 	bl	8000460 <__aeabi_dcmpeq>
 800b336:	2800      	cmp	r0, #0
 800b338:	d002      	beq.n	800b340 <_dtoa_r+0x734>
 800b33a:	9b06      	ldr	r3, [sp, #24]
 800b33c:	07db      	lsls	r3, r3, #31
 800b33e:	d410      	bmi.n	800b362 <_dtoa_r+0x756>
 800b340:	0038      	movs	r0, r7
 800b342:	9904      	ldr	r1, [sp, #16]
 800b344:	f000 fe7e 	bl	800c044 <_Bfree>
 800b348:	2300      	movs	r3, #0
 800b34a:	9a07      	ldr	r2, [sp, #28]
 800b34c:	9802      	ldr	r0, [sp, #8]
 800b34e:	7013      	strb	r3, [r2, #0]
 800b350:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b352:	3001      	adds	r0, #1
 800b354:	6018      	str	r0, [r3, #0]
 800b356:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d100      	bne.n	800b35e <_dtoa_r+0x752>
 800b35c:	e4a3      	b.n	800aca6 <_dtoa_r+0x9a>
 800b35e:	601a      	str	r2, [r3, #0]
 800b360:	e4a1      	b.n	800aca6 <_dtoa_r+0x9a>
 800b362:	9e02      	ldr	r6, [sp, #8]
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	9307      	str	r3, [sp, #28]
 800b368:	3b01      	subs	r3, #1
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	2a39      	cmp	r2, #57	; 0x39
 800b36e:	d106      	bne.n	800b37e <_dtoa_r+0x772>
 800b370:	9a05      	ldr	r2, [sp, #20]
 800b372:	429a      	cmp	r2, r3
 800b374:	d1f7      	bne.n	800b366 <_dtoa_r+0x75a>
 800b376:	2230      	movs	r2, #48	; 0x30
 800b378:	9905      	ldr	r1, [sp, #20]
 800b37a:	3601      	adds	r6, #1
 800b37c:	700a      	strb	r2, [r1, #0]
 800b37e:	781a      	ldrb	r2, [r3, #0]
 800b380:	3201      	adds	r2, #1
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	e785      	b.n	800b292 <_dtoa_r+0x686>
 800b386:	2200      	movs	r2, #0
 800b388:	4bad      	ldr	r3, [pc, #692]	; (800b640 <_dtoa_r+0xa34>)
 800b38a:	f7f6 fb1f 	bl	80019cc <__aeabi_dmul>
 800b38e:	2200      	movs	r2, #0
 800b390:	2300      	movs	r3, #0
 800b392:	0004      	movs	r4, r0
 800b394:	000d      	movs	r5, r1
 800b396:	f7f5 f863 	bl	8000460 <__aeabi_dcmpeq>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d09b      	beq.n	800b2d6 <_dtoa_r+0x6ca>
 800b39e:	e7cf      	b.n	800b340 <_dtoa_r+0x734>
 800b3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d100      	bne.n	800b3a8 <_dtoa_r+0x79c>
 800b3a6:	e082      	b.n	800b4ae <_dtoa_r+0x8a2>
 800b3a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b3aa:	2a01      	cmp	r2, #1
 800b3ac:	dc66      	bgt.n	800b47c <_dtoa_r+0x870>
 800b3ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	d05f      	beq.n	800b474 <_dtoa_r+0x868>
 800b3b4:	4aa3      	ldr	r2, [pc, #652]	; (800b644 <_dtoa_r+0xa38>)
 800b3b6:	189b      	adds	r3, r3, r2
 800b3b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b3ba:	9c08      	ldr	r4, [sp, #32]
 800b3bc:	9a08      	ldr	r2, [sp, #32]
 800b3be:	2101      	movs	r1, #1
 800b3c0:	18d2      	adds	r2, r2, r3
 800b3c2:	9208      	str	r2, [sp, #32]
 800b3c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3c6:	0038      	movs	r0, r7
 800b3c8:	18d3      	adds	r3, r2, r3
 800b3ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b3cc:	f000 ff36 	bl	800c23c <__i2b>
 800b3d0:	0005      	movs	r5, r0
 800b3d2:	2c00      	cmp	r4, #0
 800b3d4:	dd0e      	ble.n	800b3f4 <_dtoa_r+0x7e8>
 800b3d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	dd0b      	ble.n	800b3f4 <_dtoa_r+0x7e8>
 800b3dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3de:	0023      	movs	r3, r4
 800b3e0:	4294      	cmp	r4, r2
 800b3e2:	dd00      	ble.n	800b3e6 <_dtoa_r+0x7da>
 800b3e4:	0013      	movs	r3, r2
 800b3e6:	9a08      	ldr	r2, [sp, #32]
 800b3e8:	1ae4      	subs	r4, r4, r3
 800b3ea:	1ad2      	subs	r2, r2, r3
 800b3ec:	9208      	str	r2, [sp, #32]
 800b3ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b3f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01f      	beq.n	800b43a <_dtoa_r+0x82e>
 800b3fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d05a      	beq.n	800b4b6 <_dtoa_r+0x8aa>
 800b400:	2e00      	cmp	r6, #0
 800b402:	dd11      	ble.n	800b428 <_dtoa_r+0x81c>
 800b404:	0029      	movs	r1, r5
 800b406:	0032      	movs	r2, r6
 800b408:	0038      	movs	r0, r7
 800b40a:	f000 ffdd 	bl	800c3c8 <__pow5mult>
 800b40e:	9a04      	ldr	r2, [sp, #16]
 800b410:	0001      	movs	r1, r0
 800b412:	0005      	movs	r5, r0
 800b414:	0038      	movs	r0, r7
 800b416:	f000 ff27 	bl	800c268 <__multiply>
 800b41a:	9904      	ldr	r1, [sp, #16]
 800b41c:	9007      	str	r0, [sp, #28]
 800b41e:	0038      	movs	r0, r7
 800b420:	f000 fe10 	bl	800c044 <_Bfree>
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	9304      	str	r3, [sp, #16]
 800b428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b42a:	1b9a      	subs	r2, r3, r6
 800b42c:	42b3      	cmp	r3, r6
 800b42e:	d004      	beq.n	800b43a <_dtoa_r+0x82e>
 800b430:	0038      	movs	r0, r7
 800b432:	9904      	ldr	r1, [sp, #16]
 800b434:	f000 ffc8 	bl	800c3c8 <__pow5mult>
 800b438:	9004      	str	r0, [sp, #16]
 800b43a:	2101      	movs	r1, #1
 800b43c:	0038      	movs	r0, r7
 800b43e:	f000 fefd 	bl	800c23c <__i2b>
 800b442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b444:	0006      	movs	r6, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd37      	ble.n	800b4ba <_dtoa_r+0x8ae>
 800b44a:	001a      	movs	r2, r3
 800b44c:	0001      	movs	r1, r0
 800b44e:	0038      	movs	r0, r7
 800b450:	f000 ffba 	bl	800c3c8 <__pow5mult>
 800b454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b456:	0006      	movs	r6, r0
 800b458:	2b01      	cmp	r3, #1
 800b45a:	dd33      	ble.n	800b4c4 <_dtoa_r+0x8b8>
 800b45c:	2300      	movs	r3, #0
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	6933      	ldr	r3, [r6, #16]
 800b462:	3303      	adds	r3, #3
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	18f3      	adds	r3, r6, r3
 800b468:	6858      	ldr	r0, [r3, #4]
 800b46a:	f000 fe9f 	bl	800c1ac <__hi0bits>
 800b46e:	2320      	movs	r3, #32
 800b470:	1a18      	subs	r0, r3, r0
 800b472:	e03f      	b.n	800b4f4 <_dtoa_r+0x8e8>
 800b474:	2336      	movs	r3, #54	; 0x36
 800b476:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b478:	1a9b      	subs	r3, r3, r2
 800b47a:	e79d      	b.n	800b3b8 <_dtoa_r+0x7ac>
 800b47c:	9b06      	ldr	r3, [sp, #24]
 800b47e:	1e5e      	subs	r6, r3, #1
 800b480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b482:	42b3      	cmp	r3, r6
 800b484:	db08      	blt.n	800b498 <_dtoa_r+0x88c>
 800b486:	1b9e      	subs	r6, r3, r6
 800b488:	9b06      	ldr	r3, [sp, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	da0c      	bge.n	800b4a8 <_dtoa_r+0x89c>
 800b48e:	9b08      	ldr	r3, [sp, #32]
 800b490:	9a06      	ldr	r2, [sp, #24]
 800b492:	1a9c      	subs	r4, r3, r2
 800b494:	2300      	movs	r3, #0
 800b496:	e791      	b.n	800b3bc <_dtoa_r+0x7b0>
 800b498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b49a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b49c:	1af3      	subs	r3, r6, r3
 800b49e:	18d3      	adds	r3, r2, r3
 800b4a0:	960e      	str	r6, [sp, #56]	; 0x38
 800b4a2:	9314      	str	r3, [sp, #80]	; 0x50
 800b4a4:	2600      	movs	r6, #0
 800b4a6:	e7ef      	b.n	800b488 <_dtoa_r+0x87c>
 800b4a8:	9c08      	ldr	r4, [sp, #32]
 800b4aa:	9b06      	ldr	r3, [sp, #24]
 800b4ac:	e786      	b.n	800b3bc <_dtoa_r+0x7b0>
 800b4ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b4b0:	9c08      	ldr	r4, [sp, #32]
 800b4b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4b4:	e78d      	b.n	800b3d2 <_dtoa_r+0x7c6>
 800b4b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4b8:	e7ba      	b.n	800b430 <_dtoa_r+0x824>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9307      	str	r3, [sp, #28]
 800b4be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	dc13      	bgt.n	800b4ec <_dtoa_r+0x8e0>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9307      	str	r3, [sp, #28]
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10e      	bne.n	800b4ec <_dtoa_r+0x8e0>
 800b4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d0:	031b      	lsls	r3, r3, #12
 800b4d2:	d10b      	bne.n	800b4ec <_dtoa_r+0x8e0>
 800b4d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4d8:	4213      	tst	r3, r2
 800b4da:	d007      	beq.n	800b4ec <_dtoa_r+0x8e0>
 800b4dc:	9b08      	ldr	r3, [sp, #32]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	9308      	str	r3, [sp, #32]
 800b4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	9307      	str	r3, [sp, #28]
 800b4ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1b5      	bne.n	800b460 <_dtoa_r+0x854>
 800b4f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4f6:	221f      	movs	r2, #31
 800b4f8:	1818      	adds	r0, r3, r0
 800b4fa:	0003      	movs	r3, r0
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	4210      	tst	r0, r2
 800b500:	d046      	beq.n	800b590 <_dtoa_r+0x984>
 800b502:	3201      	adds	r2, #1
 800b504:	1ad2      	subs	r2, r2, r3
 800b506:	2a04      	cmp	r2, #4
 800b508:	dd3f      	ble.n	800b58a <_dtoa_r+0x97e>
 800b50a:	221c      	movs	r2, #28
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	9a08      	ldr	r2, [sp, #32]
 800b510:	18e4      	adds	r4, r4, r3
 800b512:	18d2      	adds	r2, r2, r3
 800b514:	9208      	str	r2, [sp, #32]
 800b516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b518:	18d3      	adds	r3, r2, r3
 800b51a:	930d      	str	r3, [sp, #52]	; 0x34
 800b51c:	9b08      	ldr	r3, [sp, #32]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dd05      	ble.n	800b52e <_dtoa_r+0x922>
 800b522:	001a      	movs	r2, r3
 800b524:	0038      	movs	r0, r7
 800b526:	9904      	ldr	r1, [sp, #16]
 800b528:	f000 ffaa 	bl	800c480 <__lshift>
 800b52c:	9004      	str	r0, [sp, #16]
 800b52e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b530:	2b00      	cmp	r3, #0
 800b532:	dd05      	ble.n	800b540 <_dtoa_r+0x934>
 800b534:	0031      	movs	r1, r6
 800b536:	001a      	movs	r2, r3
 800b538:	0038      	movs	r0, r7
 800b53a:	f000 ffa1 	bl	800c480 <__lshift>
 800b53e:	0006      	movs	r6, r0
 800b540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b542:	2b00      	cmp	r3, #0
 800b544:	d026      	beq.n	800b594 <_dtoa_r+0x988>
 800b546:	0031      	movs	r1, r6
 800b548:	9804      	ldr	r0, [sp, #16]
 800b54a:	f001 f809 	bl	800c560 <__mcmp>
 800b54e:	2800      	cmp	r0, #0
 800b550:	da20      	bge.n	800b594 <_dtoa_r+0x988>
 800b552:	9b02      	ldr	r3, [sp, #8]
 800b554:	220a      	movs	r2, #10
 800b556:	3b01      	subs	r3, #1
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	0038      	movs	r0, r7
 800b55c:	2300      	movs	r3, #0
 800b55e:	9904      	ldr	r1, [sp, #16]
 800b560:	f000 fd94 	bl	800c08c <__multadd>
 800b564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b566:	9004      	str	r0, [sp, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d100      	bne.n	800b56e <_dtoa_r+0x962>
 800b56c:	e160      	b.n	800b830 <_dtoa_r+0xc24>
 800b56e:	2300      	movs	r3, #0
 800b570:	0029      	movs	r1, r5
 800b572:	220a      	movs	r2, #10
 800b574:	0038      	movs	r0, r7
 800b576:	f000 fd89 	bl	800c08c <__multadd>
 800b57a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b57c:	0005      	movs	r5, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dc47      	bgt.n	800b612 <_dtoa_r+0xa06>
 800b582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b584:	2b02      	cmp	r3, #2
 800b586:	dc0d      	bgt.n	800b5a4 <_dtoa_r+0x998>
 800b588:	e043      	b.n	800b612 <_dtoa_r+0xa06>
 800b58a:	2a04      	cmp	r2, #4
 800b58c:	d0c6      	beq.n	800b51c <_dtoa_r+0x910>
 800b58e:	0013      	movs	r3, r2
 800b590:	331c      	adds	r3, #28
 800b592:	e7bc      	b.n	800b50e <_dtoa_r+0x902>
 800b594:	9b06      	ldr	r3, [sp, #24]
 800b596:	2b00      	cmp	r3, #0
 800b598:	dc35      	bgt.n	800b606 <_dtoa_r+0x9fa>
 800b59a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	dd32      	ble.n	800b606 <_dtoa_r+0x9fa>
 800b5a0:	9b06      	ldr	r3, [sp, #24]
 800b5a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10c      	bne.n	800b5c4 <_dtoa_r+0x9b8>
 800b5aa:	0031      	movs	r1, r6
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	0038      	movs	r0, r7
 800b5b0:	f000 fd6c 	bl	800c08c <__multadd>
 800b5b4:	0006      	movs	r6, r0
 800b5b6:	0001      	movs	r1, r0
 800b5b8:	9804      	ldr	r0, [sp, #16]
 800b5ba:	f000 ffd1 	bl	800c560 <__mcmp>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	dd00      	ble.n	800b5c4 <_dtoa_r+0x9b8>
 800b5c2:	e59f      	b.n	800b104 <_dtoa_r+0x4f8>
 800b5c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5c6:	43db      	mvns	r3, r3
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	9b05      	ldr	r3, [sp, #20]
 800b5cc:	9307      	str	r3, [sp, #28]
 800b5ce:	2400      	movs	r4, #0
 800b5d0:	0031      	movs	r1, r6
 800b5d2:	0038      	movs	r0, r7
 800b5d4:	f000 fd36 	bl	800c044 <_Bfree>
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	d100      	bne.n	800b5de <_dtoa_r+0x9d2>
 800b5dc:	e6b0      	b.n	800b340 <_dtoa_r+0x734>
 800b5de:	2c00      	cmp	r4, #0
 800b5e0:	d005      	beq.n	800b5ee <_dtoa_r+0x9e2>
 800b5e2:	42ac      	cmp	r4, r5
 800b5e4:	d003      	beq.n	800b5ee <_dtoa_r+0x9e2>
 800b5e6:	0021      	movs	r1, r4
 800b5e8:	0038      	movs	r0, r7
 800b5ea:	f000 fd2b 	bl	800c044 <_Bfree>
 800b5ee:	0029      	movs	r1, r5
 800b5f0:	0038      	movs	r0, r7
 800b5f2:	f000 fd27 	bl	800c044 <_Bfree>
 800b5f6:	e6a3      	b.n	800b340 <_dtoa_r+0x734>
 800b5f8:	2600      	movs	r6, #0
 800b5fa:	0035      	movs	r5, r6
 800b5fc:	e7e2      	b.n	800b5c4 <_dtoa_r+0x9b8>
 800b5fe:	9602      	str	r6, [sp, #8]
 800b600:	9e07      	ldr	r6, [sp, #28]
 800b602:	0035      	movs	r5, r6
 800b604:	e57e      	b.n	800b104 <_dtoa_r+0x4f8>
 800b606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d100      	bne.n	800b60e <_dtoa_r+0xa02>
 800b60c:	e0c8      	b.n	800b7a0 <_dtoa_r+0xb94>
 800b60e:	9b06      	ldr	r3, [sp, #24]
 800b610:	930c      	str	r3, [sp, #48]	; 0x30
 800b612:	2c00      	cmp	r4, #0
 800b614:	dd05      	ble.n	800b622 <_dtoa_r+0xa16>
 800b616:	0029      	movs	r1, r5
 800b618:	0022      	movs	r2, r4
 800b61a:	0038      	movs	r0, r7
 800b61c:	f000 ff30 	bl	800c480 <__lshift>
 800b620:	0005      	movs	r5, r0
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	0028      	movs	r0, r5
 800b626:	2b00      	cmp	r3, #0
 800b628:	d01f      	beq.n	800b66a <_dtoa_r+0xa5e>
 800b62a:	0038      	movs	r0, r7
 800b62c:	6869      	ldr	r1, [r5, #4]
 800b62e:	f000 fcc5 	bl	800bfbc <_Balloc>
 800b632:	1e04      	subs	r4, r0, #0
 800b634:	d10c      	bne.n	800b650 <_dtoa_r+0xa44>
 800b636:	0002      	movs	r2, r0
 800b638:	4b03      	ldr	r3, [pc, #12]	; (800b648 <_dtoa_r+0xa3c>)
 800b63a:	4904      	ldr	r1, [pc, #16]	; (800b64c <_dtoa_r+0xa40>)
 800b63c:	f7ff fafb 	bl	800ac36 <_dtoa_r+0x2a>
 800b640:	40240000 	.word	0x40240000
 800b644:	00000433 	.word	0x00000433
 800b648:	0800e564 	.word	0x0800e564
 800b64c:	000002ea 	.word	0x000002ea
 800b650:	0029      	movs	r1, r5
 800b652:	692b      	ldr	r3, [r5, #16]
 800b654:	310c      	adds	r1, #12
 800b656:	1c9a      	adds	r2, r3, #2
 800b658:	0092      	lsls	r2, r2, #2
 800b65a:	300c      	adds	r0, #12
 800b65c:	f000 fca5 	bl	800bfaa <memcpy>
 800b660:	2201      	movs	r2, #1
 800b662:	0021      	movs	r1, r4
 800b664:	0038      	movs	r0, r7
 800b666:	f000 ff0b 	bl	800c480 <__lshift>
 800b66a:	002c      	movs	r4, r5
 800b66c:	0005      	movs	r5, r0
 800b66e:	9b05      	ldr	r3, [sp, #20]
 800b670:	9308      	str	r3, [sp, #32]
 800b672:	0031      	movs	r1, r6
 800b674:	9804      	ldr	r0, [sp, #16]
 800b676:	f7ff fa3d 	bl	800aaf4 <quorem>
 800b67a:	0003      	movs	r3, r0
 800b67c:	0021      	movs	r1, r4
 800b67e:	3330      	adds	r3, #48	; 0x30
 800b680:	900e      	str	r0, [sp, #56]	; 0x38
 800b682:	9804      	ldr	r0, [sp, #16]
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	f000 ff6b 	bl	800c560 <__mcmp>
 800b68a:	002a      	movs	r2, r5
 800b68c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b68e:	0031      	movs	r1, r6
 800b690:	0038      	movs	r0, r7
 800b692:	f000 ff81 	bl	800c598 <__mdiff>
 800b696:	68c3      	ldr	r3, [r0, #12]
 800b698:	9007      	str	r0, [sp, #28]
 800b69a:	9310      	str	r3, [sp, #64]	; 0x40
 800b69c:	2301      	movs	r3, #1
 800b69e:	930d      	str	r3, [sp, #52]	; 0x34
 800b6a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d104      	bne.n	800b6b0 <_dtoa_r+0xaa4>
 800b6a6:	0001      	movs	r1, r0
 800b6a8:	9804      	ldr	r0, [sp, #16]
 800b6aa:	f000 ff59 	bl	800c560 <__mcmp>
 800b6ae:	900d      	str	r0, [sp, #52]	; 0x34
 800b6b0:	0038      	movs	r0, r7
 800b6b2:	9907      	ldr	r1, [sp, #28]
 800b6b4:	f000 fcc6 	bl	800c044 <_Bfree>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6be:	4018      	ands	r0, r3
 800b6c0:	9b08      	ldr	r3, [sp, #32]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	9307      	str	r3, [sp, #28]
 800b6c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	4303      	orrs	r3, r0
 800b6cc:	d10c      	bne.n	800b6e8 <_dtoa_r+0xadc>
 800b6ce:	9b06      	ldr	r3, [sp, #24]
 800b6d0:	2b39      	cmp	r3, #57	; 0x39
 800b6d2:	d025      	beq.n	800b720 <_dtoa_r+0xb14>
 800b6d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	dd02      	ble.n	800b6e0 <_dtoa_r+0xad4>
 800b6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6dc:	3331      	adds	r3, #49	; 0x31
 800b6de:	9306      	str	r3, [sp, #24]
 800b6e0:	9b08      	ldr	r3, [sp, #32]
 800b6e2:	9a06      	ldr	r2, [sp, #24]
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	e773      	b.n	800b5d0 <_dtoa_r+0x9c4>
 800b6e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	db03      	blt.n	800b6f6 <_dtoa_r+0xaea>
 800b6ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	4303      	orrs	r3, r0
 800b6f4:	d11f      	bne.n	800b736 <_dtoa_r+0xb2a>
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	ddf1      	ble.n	800b6e0 <_dtoa_r+0xad4>
 800b6fc:	9904      	ldr	r1, [sp, #16]
 800b6fe:	2201      	movs	r2, #1
 800b700:	0038      	movs	r0, r7
 800b702:	f000 febd 	bl	800c480 <__lshift>
 800b706:	0031      	movs	r1, r6
 800b708:	9004      	str	r0, [sp, #16]
 800b70a:	f000 ff29 	bl	800c560 <__mcmp>
 800b70e:	2800      	cmp	r0, #0
 800b710:	dc03      	bgt.n	800b71a <_dtoa_r+0xb0e>
 800b712:	d1e5      	bne.n	800b6e0 <_dtoa_r+0xad4>
 800b714:	9b06      	ldr	r3, [sp, #24]
 800b716:	07db      	lsls	r3, r3, #31
 800b718:	d5e2      	bpl.n	800b6e0 <_dtoa_r+0xad4>
 800b71a:	9b06      	ldr	r3, [sp, #24]
 800b71c:	2b39      	cmp	r3, #57	; 0x39
 800b71e:	d1dc      	bne.n	800b6da <_dtoa_r+0xace>
 800b720:	2339      	movs	r3, #57	; 0x39
 800b722:	9a08      	ldr	r2, [sp, #32]
 800b724:	7013      	strb	r3, [r2, #0]
 800b726:	9b07      	ldr	r3, [sp, #28]
 800b728:	9307      	str	r3, [sp, #28]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	781a      	ldrb	r2, [r3, #0]
 800b72e:	2a39      	cmp	r2, #57	; 0x39
 800b730:	d06c      	beq.n	800b80c <_dtoa_r+0xc00>
 800b732:	3201      	adds	r2, #1
 800b734:	e7d6      	b.n	800b6e4 <_dtoa_r+0xad8>
 800b736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dd07      	ble.n	800b74c <_dtoa_r+0xb40>
 800b73c:	9b06      	ldr	r3, [sp, #24]
 800b73e:	2b39      	cmp	r3, #57	; 0x39
 800b740:	d0ee      	beq.n	800b720 <_dtoa_r+0xb14>
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	9a08      	ldr	r2, [sp, #32]
 800b746:	3301      	adds	r3, #1
 800b748:	7013      	strb	r3, [r2, #0]
 800b74a:	e741      	b.n	800b5d0 <_dtoa_r+0x9c4>
 800b74c:	9b08      	ldr	r3, [sp, #32]
 800b74e:	9a06      	ldr	r2, [sp, #24]
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	2301      	movs	r3, #1
 800b754:	9a05      	ldr	r2, [sp, #20]
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	9a08      	ldr	r2, [sp, #32]
 800b75a:	189b      	adds	r3, r3, r2
 800b75c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b75e:	429a      	cmp	r2, r3
 800b760:	d03e      	beq.n	800b7e0 <_dtoa_r+0xbd4>
 800b762:	2300      	movs	r3, #0
 800b764:	220a      	movs	r2, #10
 800b766:	9904      	ldr	r1, [sp, #16]
 800b768:	0038      	movs	r0, r7
 800b76a:	f000 fc8f 	bl	800c08c <__multadd>
 800b76e:	2300      	movs	r3, #0
 800b770:	9004      	str	r0, [sp, #16]
 800b772:	220a      	movs	r2, #10
 800b774:	0021      	movs	r1, r4
 800b776:	0038      	movs	r0, r7
 800b778:	42ac      	cmp	r4, r5
 800b77a:	d106      	bne.n	800b78a <_dtoa_r+0xb7e>
 800b77c:	f000 fc86 	bl	800c08c <__multadd>
 800b780:	0004      	movs	r4, r0
 800b782:	0005      	movs	r5, r0
 800b784:	9b07      	ldr	r3, [sp, #28]
 800b786:	9308      	str	r3, [sp, #32]
 800b788:	e773      	b.n	800b672 <_dtoa_r+0xa66>
 800b78a:	f000 fc7f 	bl	800c08c <__multadd>
 800b78e:	0029      	movs	r1, r5
 800b790:	0004      	movs	r4, r0
 800b792:	2300      	movs	r3, #0
 800b794:	220a      	movs	r2, #10
 800b796:	0038      	movs	r0, r7
 800b798:	f000 fc78 	bl	800c08c <__multadd>
 800b79c:	0005      	movs	r5, r0
 800b79e:	e7f1      	b.n	800b784 <_dtoa_r+0xb78>
 800b7a0:	9b06      	ldr	r3, [sp, #24]
 800b7a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a4:	2400      	movs	r4, #0
 800b7a6:	0031      	movs	r1, r6
 800b7a8:	9804      	ldr	r0, [sp, #16]
 800b7aa:	f7ff f9a3 	bl	800aaf4 <quorem>
 800b7ae:	9b05      	ldr	r3, [sp, #20]
 800b7b0:	3030      	adds	r0, #48	; 0x30
 800b7b2:	5518      	strb	r0, [r3, r4]
 800b7b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7b6:	3401      	adds	r4, #1
 800b7b8:	9006      	str	r0, [sp, #24]
 800b7ba:	42a3      	cmp	r3, r4
 800b7bc:	dd07      	ble.n	800b7ce <_dtoa_r+0xbc2>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	0038      	movs	r0, r7
 800b7c4:	9904      	ldr	r1, [sp, #16]
 800b7c6:	f000 fc61 	bl	800c08c <__multadd>
 800b7ca:	9004      	str	r0, [sp, #16]
 800b7cc:	e7eb      	b.n	800b7a6 <_dtoa_r+0xb9a>
 800b7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dd00      	ble.n	800b7d8 <_dtoa_r+0xbcc>
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	2400      	movs	r4, #0
 800b7da:	9b05      	ldr	r3, [sp, #20]
 800b7dc:	181b      	adds	r3, r3, r0
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	9904      	ldr	r1, [sp, #16]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	0038      	movs	r0, r7
 800b7e6:	f000 fe4b 	bl	800c480 <__lshift>
 800b7ea:	0031      	movs	r1, r6
 800b7ec:	9004      	str	r0, [sp, #16]
 800b7ee:	f000 feb7 	bl	800c560 <__mcmp>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	dc97      	bgt.n	800b726 <_dtoa_r+0xb1a>
 800b7f6:	d102      	bne.n	800b7fe <_dtoa_r+0xbf2>
 800b7f8:	9b06      	ldr	r3, [sp, #24]
 800b7fa:	07db      	lsls	r3, r3, #31
 800b7fc:	d493      	bmi.n	800b726 <_dtoa_r+0xb1a>
 800b7fe:	9b07      	ldr	r3, [sp, #28]
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	3b01      	subs	r3, #1
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	2a30      	cmp	r2, #48	; 0x30
 800b808:	d0fa      	beq.n	800b800 <_dtoa_r+0xbf4>
 800b80a:	e6e1      	b.n	800b5d0 <_dtoa_r+0x9c4>
 800b80c:	9a05      	ldr	r2, [sp, #20]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d18a      	bne.n	800b728 <_dtoa_r+0xb1c>
 800b812:	9b02      	ldr	r3, [sp, #8]
 800b814:	3301      	adds	r3, #1
 800b816:	9302      	str	r3, [sp, #8]
 800b818:	2331      	movs	r3, #49	; 0x31
 800b81a:	e795      	b.n	800b748 <_dtoa_r+0xb3c>
 800b81c:	4b08      	ldr	r3, [pc, #32]	; (800b840 <_dtoa_r+0xc34>)
 800b81e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b820:	9305      	str	r3, [sp, #20]
 800b822:	4b08      	ldr	r3, [pc, #32]	; (800b844 <_dtoa_r+0xc38>)
 800b824:	2a00      	cmp	r2, #0
 800b826:	d001      	beq.n	800b82c <_dtoa_r+0xc20>
 800b828:	f7ff fa3b 	bl	800aca2 <_dtoa_r+0x96>
 800b82c:	f7ff fa3b 	bl	800aca6 <_dtoa_r+0x9a>
 800b830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b832:	2b00      	cmp	r3, #0
 800b834:	dcb6      	bgt.n	800b7a4 <_dtoa_r+0xb98>
 800b836:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b838:	2b02      	cmp	r3, #2
 800b83a:	dd00      	ble.n	800b83e <_dtoa_r+0xc32>
 800b83c:	e6b2      	b.n	800b5a4 <_dtoa_r+0x998>
 800b83e:	e7b1      	b.n	800b7a4 <_dtoa_r+0xb98>
 800b840:	0800e4e1 	.word	0x0800e4e1
 800b844:	0800e4e9 	.word	0x0800e4e9

0800b848 <rshift>:
 800b848:	0002      	movs	r2, r0
 800b84a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84c:	6907      	ldr	r7, [r0, #16]
 800b84e:	3214      	adds	r2, #20
 800b850:	0013      	movs	r3, r2
 800b852:	b085      	sub	sp, #20
 800b854:	114e      	asrs	r6, r1, #5
 800b856:	42b7      	cmp	r7, r6
 800b858:	dd31      	ble.n	800b8be <rshift+0x76>
 800b85a:	00b3      	lsls	r3, r6, #2
 800b85c:	18d3      	adds	r3, r2, r3
 800b85e:	251f      	movs	r5, #31
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	000b      	movs	r3, r1
 800b864:	00bc      	lsls	r4, r7, #2
 800b866:	402b      	ands	r3, r5
 800b868:	1914      	adds	r4, r2, r4
 800b86a:	9302      	str	r3, [sp, #8]
 800b86c:	4229      	tst	r1, r5
 800b86e:	d10c      	bne.n	800b88a <rshift+0x42>
 800b870:	0015      	movs	r5, r2
 800b872:	9901      	ldr	r1, [sp, #4]
 800b874:	428c      	cmp	r4, r1
 800b876:	d838      	bhi.n	800b8ea <rshift+0xa2>
 800b878:	9901      	ldr	r1, [sp, #4]
 800b87a:	2300      	movs	r3, #0
 800b87c:	3903      	subs	r1, #3
 800b87e:	428c      	cmp	r4, r1
 800b880:	d301      	bcc.n	800b886 <rshift+0x3e>
 800b882:	1bbb      	subs	r3, r7, r6
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	18d3      	adds	r3, r2, r3
 800b888:	e019      	b.n	800b8be <rshift+0x76>
 800b88a:	2120      	movs	r1, #32
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	9d01      	ldr	r5, [sp, #4]
 800b890:	1acb      	subs	r3, r1, r3
 800b892:	9303      	str	r3, [sp, #12]
 800b894:	cd02      	ldmia	r5!, {r1}
 800b896:	9b02      	ldr	r3, [sp, #8]
 800b898:	4694      	mov	ip, r2
 800b89a:	40d9      	lsrs	r1, r3
 800b89c:	9100      	str	r1, [sp, #0]
 800b89e:	42ac      	cmp	r4, r5
 800b8a0:	d816      	bhi.n	800b8d0 <rshift+0x88>
 800b8a2:	9d01      	ldr	r5, [sp, #4]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	3501      	adds	r5, #1
 800b8a8:	42ac      	cmp	r4, r5
 800b8aa:	d302      	bcc.n	800b8b2 <rshift+0x6a>
 800b8ac:	1bbb      	subs	r3, r7, r6
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	3b04      	subs	r3, #4
 800b8b2:	9900      	ldr	r1, [sp, #0]
 800b8b4:	18d3      	adds	r3, r2, r3
 800b8b6:	6019      	str	r1, [r3, #0]
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	d000      	beq.n	800b8be <rshift+0x76>
 800b8bc:	3304      	adds	r3, #4
 800b8be:	1a99      	subs	r1, r3, r2
 800b8c0:	1089      	asrs	r1, r1, #2
 800b8c2:	6101      	str	r1, [r0, #16]
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d101      	bne.n	800b8cc <rshift+0x84>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	6143      	str	r3, [r0, #20]
 800b8cc:	b005      	add	sp, #20
 800b8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	9903      	ldr	r1, [sp, #12]
 800b8d4:	408b      	lsls	r3, r1
 800b8d6:	9900      	ldr	r1, [sp, #0]
 800b8d8:	4319      	orrs	r1, r3
 800b8da:	4663      	mov	r3, ip
 800b8dc:	c302      	stmia	r3!, {r1}
 800b8de:	469c      	mov	ip, r3
 800b8e0:	cd02      	ldmia	r5!, {r1}
 800b8e2:	9b02      	ldr	r3, [sp, #8]
 800b8e4:	40d9      	lsrs	r1, r3
 800b8e6:	9100      	str	r1, [sp, #0]
 800b8e8:	e7d9      	b.n	800b89e <rshift+0x56>
 800b8ea:	c908      	ldmia	r1!, {r3}
 800b8ec:	c508      	stmia	r5!, {r3}
 800b8ee:	e7c1      	b.n	800b874 <rshift+0x2c>

0800b8f0 <__hexdig_fun>:
 800b8f0:	0002      	movs	r2, r0
 800b8f2:	3a30      	subs	r2, #48	; 0x30
 800b8f4:	0003      	movs	r3, r0
 800b8f6:	2a09      	cmp	r2, #9
 800b8f8:	d802      	bhi.n	800b900 <__hexdig_fun+0x10>
 800b8fa:	3b20      	subs	r3, #32
 800b8fc:	b2d8      	uxtb	r0, r3
 800b8fe:	4770      	bx	lr
 800b900:	0002      	movs	r2, r0
 800b902:	3a61      	subs	r2, #97	; 0x61
 800b904:	2a05      	cmp	r2, #5
 800b906:	d801      	bhi.n	800b90c <__hexdig_fun+0x1c>
 800b908:	3b47      	subs	r3, #71	; 0x47
 800b90a:	e7f7      	b.n	800b8fc <__hexdig_fun+0xc>
 800b90c:	001a      	movs	r2, r3
 800b90e:	3a41      	subs	r2, #65	; 0x41
 800b910:	2000      	movs	r0, #0
 800b912:	2a05      	cmp	r2, #5
 800b914:	d8f3      	bhi.n	800b8fe <__hexdig_fun+0xe>
 800b916:	3b27      	subs	r3, #39	; 0x27
 800b918:	e7f0      	b.n	800b8fc <__hexdig_fun+0xc>
	...

0800b91c <__gethex>:
 800b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b91e:	b08d      	sub	sp, #52	; 0x34
 800b920:	930a      	str	r3, [sp, #40]	; 0x28
 800b922:	4bbd      	ldr	r3, [pc, #756]	; (800bc18 <__gethex+0x2fc>)
 800b924:	9005      	str	r0, [sp, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	9109      	str	r1, [sp, #36]	; 0x24
 800b92a:	0018      	movs	r0, r3
 800b92c:	9202      	str	r2, [sp, #8]
 800b92e:	9307      	str	r3, [sp, #28]
 800b930:	f7f4 fbf4 	bl	800011c <strlen>
 800b934:	2202      	movs	r2, #2
 800b936:	9b07      	ldr	r3, [sp, #28]
 800b938:	4252      	negs	r2, r2
 800b93a:	181b      	adds	r3, r3, r0
 800b93c:	3b01      	subs	r3, #1
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	9003      	str	r0, [sp, #12]
 800b942:	930b      	str	r3, [sp, #44]	; 0x2c
 800b944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b946:	6819      	ldr	r1, [r3, #0]
 800b948:	1c8b      	adds	r3, r1, #2
 800b94a:	1a52      	subs	r2, r2, r1
 800b94c:	18d1      	adds	r1, r2, r3
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	9108      	str	r1, [sp, #32]
 800b952:	9901      	ldr	r1, [sp, #4]
 800b954:	3301      	adds	r3, #1
 800b956:	7808      	ldrb	r0, [r1, #0]
 800b958:	2830      	cmp	r0, #48	; 0x30
 800b95a:	d0f7      	beq.n	800b94c <__gethex+0x30>
 800b95c:	f7ff ffc8 	bl	800b8f0 <__hexdig_fun>
 800b960:	1e04      	subs	r4, r0, #0
 800b962:	d13e      	bne.n	800b9e2 <__gethex+0xc6>
 800b964:	9a03      	ldr	r2, [sp, #12]
 800b966:	9907      	ldr	r1, [sp, #28]
 800b968:	9801      	ldr	r0, [sp, #4]
 800b96a:	f001 fda7 	bl	800d4bc <strncmp>
 800b96e:	1e07      	subs	r7, r0, #0
 800b970:	d000      	beq.n	800b974 <__gethex+0x58>
 800b972:	e06f      	b.n	800ba54 <__gethex+0x138>
 800b974:	9b01      	ldr	r3, [sp, #4]
 800b976:	9a03      	ldr	r2, [sp, #12]
 800b978:	5c98      	ldrb	r0, [r3, r2]
 800b97a:	189d      	adds	r5, r3, r2
 800b97c:	f7ff ffb8 	bl	800b8f0 <__hexdig_fun>
 800b980:	2301      	movs	r3, #1
 800b982:	9304      	str	r3, [sp, #16]
 800b984:	2800      	cmp	r0, #0
 800b986:	d034      	beq.n	800b9f2 <__gethex+0xd6>
 800b988:	9501      	str	r5, [sp, #4]
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	7818      	ldrb	r0, [r3, #0]
 800b98e:	2830      	cmp	r0, #48	; 0x30
 800b990:	d009      	beq.n	800b9a6 <__gethex+0x8a>
 800b992:	f7ff ffad 	bl	800b8f0 <__hexdig_fun>
 800b996:	4243      	negs	r3, r0
 800b998:	4143      	adcs	r3, r0
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	2301      	movs	r3, #1
 800b99e:	002c      	movs	r4, r5
 800b9a0:	9308      	str	r3, [sp, #32]
 800b9a2:	9d01      	ldr	r5, [sp, #4]
 800b9a4:	e004      	b.n	800b9b0 <__gethex+0x94>
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	e7ed      	b.n	800b98a <__gethex+0x6e>
 800b9ae:	3501      	adds	r5, #1
 800b9b0:	7828      	ldrb	r0, [r5, #0]
 800b9b2:	f7ff ff9d 	bl	800b8f0 <__hexdig_fun>
 800b9b6:	1e07      	subs	r7, r0, #0
 800b9b8:	d1f9      	bne.n	800b9ae <__gethex+0x92>
 800b9ba:	0028      	movs	r0, r5
 800b9bc:	9a03      	ldr	r2, [sp, #12]
 800b9be:	9907      	ldr	r1, [sp, #28]
 800b9c0:	f001 fd7c 	bl	800d4bc <strncmp>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d112      	bne.n	800b9ee <__gethex+0xd2>
 800b9c8:	2c00      	cmp	r4, #0
 800b9ca:	d107      	bne.n	800b9dc <__gethex+0xc0>
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	18ed      	adds	r5, r5, r3
 800b9d0:	002c      	movs	r4, r5
 800b9d2:	7828      	ldrb	r0, [r5, #0]
 800b9d4:	f7ff ff8c 	bl	800b8f0 <__hexdig_fun>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d106      	bne.n	800b9ea <__gethex+0xce>
 800b9dc:	1b67      	subs	r7, r4, r5
 800b9de:	00bf      	lsls	r7, r7, #2
 800b9e0:	e007      	b.n	800b9f2 <__gethex+0xd6>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	001c      	movs	r4, r3
 800b9e6:	9304      	str	r3, [sp, #16]
 800b9e8:	e7db      	b.n	800b9a2 <__gethex+0x86>
 800b9ea:	3501      	adds	r5, #1
 800b9ec:	e7f1      	b.n	800b9d2 <__gethex+0xb6>
 800b9ee:	2c00      	cmp	r4, #0
 800b9f0:	d1f4      	bne.n	800b9dc <__gethex+0xc0>
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	782b      	ldrb	r3, [r5, #0]
 800b9f6:	002e      	movs	r6, r5
 800b9f8:	4393      	bics	r3, r2
 800b9fa:	2b50      	cmp	r3, #80	; 0x50
 800b9fc:	d11d      	bne.n	800ba3a <__gethex+0x11e>
 800b9fe:	786b      	ldrb	r3, [r5, #1]
 800ba00:	2b2b      	cmp	r3, #43	; 0x2b
 800ba02:	d02c      	beq.n	800ba5e <__gethex+0x142>
 800ba04:	2b2d      	cmp	r3, #45	; 0x2d
 800ba06:	d02e      	beq.n	800ba66 <__gethex+0x14a>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	1c6e      	adds	r6, r5, #1
 800ba0c:	9306      	str	r3, [sp, #24]
 800ba0e:	7830      	ldrb	r0, [r6, #0]
 800ba10:	f7ff ff6e 	bl	800b8f0 <__hexdig_fun>
 800ba14:	1e43      	subs	r3, r0, #1
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b18      	cmp	r3, #24
 800ba1a:	d82b      	bhi.n	800ba74 <__gethex+0x158>
 800ba1c:	3810      	subs	r0, #16
 800ba1e:	0004      	movs	r4, r0
 800ba20:	7870      	ldrb	r0, [r6, #1]
 800ba22:	f7ff ff65 	bl	800b8f0 <__hexdig_fun>
 800ba26:	1e43      	subs	r3, r0, #1
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	3601      	adds	r6, #1
 800ba2c:	2b18      	cmp	r3, #24
 800ba2e:	d91c      	bls.n	800ba6a <__gethex+0x14e>
 800ba30:	9b06      	ldr	r3, [sp, #24]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d000      	beq.n	800ba38 <__gethex+0x11c>
 800ba36:	4264      	negs	r4, r4
 800ba38:	193f      	adds	r7, r7, r4
 800ba3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3c:	601e      	str	r6, [r3, #0]
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d019      	beq.n	800ba78 <__gethex+0x15c>
 800ba44:	2600      	movs	r6, #0
 800ba46:	9b08      	ldr	r3, [sp, #32]
 800ba48:	42b3      	cmp	r3, r6
 800ba4a:	d100      	bne.n	800ba4e <__gethex+0x132>
 800ba4c:	3606      	adds	r6, #6
 800ba4e:	0030      	movs	r0, r6
 800ba50:	b00d      	add	sp, #52	; 0x34
 800ba52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba54:	2301      	movs	r3, #1
 800ba56:	0027      	movs	r7, r4
 800ba58:	9d01      	ldr	r5, [sp, #4]
 800ba5a:	9304      	str	r3, [sp, #16]
 800ba5c:	e7c9      	b.n	800b9f2 <__gethex+0xd6>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9306      	str	r3, [sp, #24]
 800ba62:	1cae      	adds	r6, r5, #2
 800ba64:	e7d3      	b.n	800ba0e <__gethex+0xf2>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e7fa      	b.n	800ba60 <__gethex+0x144>
 800ba6a:	230a      	movs	r3, #10
 800ba6c:	435c      	muls	r4, r3
 800ba6e:	1824      	adds	r4, r4, r0
 800ba70:	3c10      	subs	r4, #16
 800ba72:	e7d5      	b.n	800ba20 <__gethex+0x104>
 800ba74:	002e      	movs	r6, r5
 800ba76:	e7e0      	b.n	800ba3a <__gethex+0x11e>
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	9904      	ldr	r1, [sp, #16]
 800ba7c:	1aeb      	subs	r3, r5, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	2b07      	cmp	r3, #7
 800ba82:	dc0a      	bgt.n	800ba9a <__gethex+0x17e>
 800ba84:	9805      	ldr	r0, [sp, #20]
 800ba86:	f000 fa99 	bl	800bfbc <_Balloc>
 800ba8a:	1e04      	subs	r4, r0, #0
 800ba8c:	d108      	bne.n	800baa0 <__gethex+0x184>
 800ba8e:	0002      	movs	r2, r0
 800ba90:	21de      	movs	r1, #222	; 0xde
 800ba92:	4b62      	ldr	r3, [pc, #392]	; (800bc1c <__gethex+0x300>)
 800ba94:	4862      	ldr	r0, [pc, #392]	; (800bc20 <__gethex+0x304>)
 800ba96:	f001 fdff 	bl	800d698 <__assert_func>
 800ba9a:	3101      	adds	r1, #1
 800ba9c:	105b      	asrs	r3, r3, #1
 800ba9e:	e7ef      	b.n	800ba80 <__gethex+0x164>
 800baa0:	0003      	movs	r3, r0
 800baa2:	3314      	adds	r3, #20
 800baa4:	9304      	str	r3, [sp, #16]
 800baa6:	9309      	str	r3, [sp, #36]	; 0x24
 800baa8:	2300      	movs	r3, #0
 800baaa:	001e      	movs	r6, r3
 800baac:	9306      	str	r3, [sp, #24]
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	42ab      	cmp	r3, r5
 800bab2:	d340      	bcc.n	800bb36 <__gethex+0x21a>
 800bab4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	c540      	stmia	r5!, {r6}
 800baba:	1aed      	subs	r5, r5, r3
 800babc:	10ad      	asrs	r5, r5, #2
 800babe:	0030      	movs	r0, r6
 800bac0:	6125      	str	r5, [r4, #16]
 800bac2:	f000 fb73 	bl	800c1ac <__hi0bits>
 800bac6:	9b02      	ldr	r3, [sp, #8]
 800bac8:	016d      	lsls	r5, r5, #5
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	1a2e      	subs	r6, r5, r0
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	429e      	cmp	r6, r3
 800bad2:	dd5a      	ble.n	800bb8a <__gethex+0x26e>
 800bad4:	1af6      	subs	r6, r6, r3
 800bad6:	0031      	movs	r1, r6
 800bad8:	0020      	movs	r0, r4
 800bada:	f000 ff16 	bl	800c90a <__any_on>
 800bade:	1e05      	subs	r5, r0, #0
 800bae0:	d016      	beq.n	800bb10 <__gethex+0x1f4>
 800bae2:	2501      	movs	r5, #1
 800bae4:	211f      	movs	r1, #31
 800bae6:	0028      	movs	r0, r5
 800bae8:	1e73      	subs	r3, r6, #1
 800baea:	4019      	ands	r1, r3
 800baec:	4088      	lsls	r0, r1
 800baee:	0001      	movs	r1, r0
 800baf0:	115a      	asrs	r2, r3, #5
 800baf2:	9804      	ldr	r0, [sp, #16]
 800baf4:	0092      	lsls	r2, r2, #2
 800baf6:	5812      	ldr	r2, [r2, r0]
 800baf8:	420a      	tst	r2, r1
 800bafa:	d009      	beq.n	800bb10 <__gethex+0x1f4>
 800bafc:	42ab      	cmp	r3, r5
 800bafe:	dd06      	ble.n	800bb0e <__gethex+0x1f2>
 800bb00:	0020      	movs	r0, r4
 800bb02:	1eb1      	subs	r1, r6, #2
 800bb04:	f000 ff01 	bl	800c90a <__any_on>
 800bb08:	3502      	adds	r5, #2
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d100      	bne.n	800bb10 <__gethex+0x1f4>
 800bb0e:	2502      	movs	r5, #2
 800bb10:	0031      	movs	r1, r6
 800bb12:	0020      	movs	r0, r4
 800bb14:	f7ff fe98 	bl	800b848 <rshift>
 800bb18:	19bf      	adds	r7, r7, r6
 800bb1a:	9b02      	ldr	r3, [sp, #8]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	9303      	str	r3, [sp, #12]
 800bb20:	42bb      	cmp	r3, r7
 800bb22:	da42      	bge.n	800bbaa <__gethex+0x28e>
 800bb24:	0021      	movs	r1, r4
 800bb26:	9805      	ldr	r0, [sp, #20]
 800bb28:	f000 fa8c 	bl	800c044 <_Bfree>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb30:	26a3      	movs	r6, #163	; 0xa3
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	e78b      	b.n	800ba4e <__gethex+0x132>
 800bb36:	1e6b      	subs	r3, r5, #1
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d014      	beq.n	800bb6c <__gethex+0x250>
 800bb42:	9b06      	ldr	r3, [sp, #24]
 800bb44:	2b20      	cmp	r3, #32
 800bb46:	d104      	bne.n	800bb52 <__gethex+0x236>
 800bb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4a:	c340      	stmia	r3!, {r6}
 800bb4c:	2600      	movs	r6, #0
 800bb4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb50:	9606      	str	r6, [sp, #24]
 800bb52:	9b08      	ldr	r3, [sp, #32]
 800bb54:	7818      	ldrb	r0, [r3, #0]
 800bb56:	f7ff fecb 	bl	800b8f0 <__hexdig_fun>
 800bb5a:	230f      	movs	r3, #15
 800bb5c:	4018      	ands	r0, r3
 800bb5e:	9b06      	ldr	r3, [sp, #24]
 800bb60:	9d08      	ldr	r5, [sp, #32]
 800bb62:	4098      	lsls	r0, r3
 800bb64:	3304      	adds	r3, #4
 800bb66:	4306      	orrs	r6, r0
 800bb68:	9306      	str	r3, [sp, #24]
 800bb6a:	e7a0      	b.n	800baae <__gethex+0x192>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	9a03      	ldr	r2, [sp, #12]
 800bb70:	1a9d      	subs	r5, r3, r2
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	195d      	adds	r5, r3, r5
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	429d      	cmp	r5, r3
 800bb7a:	d3e2      	bcc.n	800bb42 <__gethex+0x226>
 800bb7c:	0028      	movs	r0, r5
 800bb7e:	9907      	ldr	r1, [sp, #28]
 800bb80:	f001 fc9c 	bl	800d4bc <strncmp>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d1dc      	bne.n	800bb42 <__gethex+0x226>
 800bb88:	e791      	b.n	800baae <__gethex+0x192>
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	2500      	movs	r5, #0
 800bb8e:	429e      	cmp	r6, r3
 800bb90:	dac3      	bge.n	800bb1a <__gethex+0x1fe>
 800bb92:	1b9e      	subs	r6, r3, r6
 800bb94:	0021      	movs	r1, r4
 800bb96:	0032      	movs	r2, r6
 800bb98:	9805      	ldr	r0, [sp, #20]
 800bb9a:	f000 fc71 	bl	800c480 <__lshift>
 800bb9e:	0003      	movs	r3, r0
 800bba0:	3314      	adds	r3, #20
 800bba2:	0004      	movs	r4, r0
 800bba4:	1bbf      	subs	r7, r7, r6
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	e7b7      	b.n	800bb1a <__gethex+0x1fe>
 800bbaa:	9b02      	ldr	r3, [sp, #8]
 800bbac:	685e      	ldr	r6, [r3, #4]
 800bbae:	42be      	cmp	r6, r7
 800bbb0:	dd71      	ble.n	800bc96 <__gethex+0x37a>
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	1bf6      	subs	r6, r6, r7
 800bbb6:	42b3      	cmp	r3, r6
 800bbb8:	dc38      	bgt.n	800bc2c <__gethex+0x310>
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d026      	beq.n	800bc10 <__gethex+0x2f4>
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d02e      	beq.n	800bc24 <__gethex+0x308>
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d119      	bne.n	800bbfe <__gethex+0x2e2>
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	42b3      	cmp	r3, r6
 800bbce:	d116      	bne.n	800bbfe <__gethex+0x2e2>
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d10d      	bne.n	800bbf0 <__gethex+0x2d4>
 800bbd4:	9b02      	ldr	r3, [sp, #8]
 800bbd6:	2662      	movs	r6, #98	; 0x62
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	9a01      	ldr	r2, [sp, #4]
 800bbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe0:	601a      	str	r2, [r3, #0]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	9a04      	ldr	r2, [sp, #16]
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbec:	601c      	str	r4, [r3, #0]
 800bbee:	e72e      	b.n	800ba4e <__gethex+0x132>
 800bbf0:	9901      	ldr	r1, [sp, #4]
 800bbf2:	0020      	movs	r0, r4
 800bbf4:	3901      	subs	r1, #1
 800bbf6:	f000 fe88 	bl	800c90a <__any_on>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d1ea      	bne.n	800bbd4 <__gethex+0x2b8>
 800bbfe:	0021      	movs	r1, r4
 800bc00:	9805      	ldr	r0, [sp, #20]
 800bc02:	f000 fa1f 	bl	800c044 <_Bfree>
 800bc06:	2300      	movs	r3, #0
 800bc08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc0a:	2650      	movs	r6, #80	; 0x50
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	e71e      	b.n	800ba4e <__gethex+0x132>
 800bc10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1f3      	bne.n	800bbfe <__gethex+0x2e2>
 800bc16:	e7dd      	b.n	800bbd4 <__gethex+0x2b8>
 800bc18:	0800e5e0 	.word	0x0800e5e0
 800bc1c:	0800e564 	.word	0x0800e564
 800bc20:	0800e575 	.word	0x0800e575
 800bc24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1d4      	bne.n	800bbd4 <__gethex+0x2b8>
 800bc2a:	e7e8      	b.n	800bbfe <__gethex+0x2e2>
 800bc2c:	1e77      	subs	r7, r6, #1
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	d12f      	bne.n	800bc92 <__gethex+0x376>
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	d004      	beq.n	800bc40 <__gethex+0x324>
 800bc36:	0039      	movs	r1, r7
 800bc38:	0020      	movs	r0, r4
 800bc3a:	f000 fe66 	bl	800c90a <__any_on>
 800bc3e:	0005      	movs	r5, r0
 800bc40:	231f      	movs	r3, #31
 800bc42:	117a      	asrs	r2, r7, #5
 800bc44:	401f      	ands	r7, r3
 800bc46:	3b1e      	subs	r3, #30
 800bc48:	40bb      	lsls	r3, r7
 800bc4a:	9904      	ldr	r1, [sp, #16]
 800bc4c:	0092      	lsls	r2, r2, #2
 800bc4e:	5852      	ldr	r2, [r2, r1]
 800bc50:	421a      	tst	r2, r3
 800bc52:	d001      	beq.n	800bc58 <__gethex+0x33c>
 800bc54:	2302      	movs	r3, #2
 800bc56:	431d      	orrs	r5, r3
 800bc58:	9b01      	ldr	r3, [sp, #4]
 800bc5a:	0031      	movs	r1, r6
 800bc5c:	1b9b      	subs	r3, r3, r6
 800bc5e:	2602      	movs	r6, #2
 800bc60:	0020      	movs	r0, r4
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	f7ff fdf0 	bl	800b848 <rshift>
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	685f      	ldr	r7, [r3, #4]
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	d041      	beq.n	800bcf4 <__gethex+0x3d8>
 800bc70:	9b02      	ldr	r3, [sp, #8]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d010      	beq.n	800bc9a <__gethex+0x37e>
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d012      	beq.n	800bca2 <__gethex+0x386>
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d106      	bne.n	800bc8e <__gethex+0x372>
 800bc80:	07aa      	lsls	r2, r5, #30
 800bc82:	d504      	bpl.n	800bc8e <__gethex+0x372>
 800bc84:	9a04      	ldr	r2, [sp, #16]
 800bc86:	6810      	ldr	r0, [r2, #0]
 800bc88:	4305      	orrs	r5, r0
 800bc8a:	421d      	tst	r5, r3
 800bc8c:	d10c      	bne.n	800bca8 <__gethex+0x38c>
 800bc8e:	2310      	movs	r3, #16
 800bc90:	e02f      	b.n	800bcf2 <__gethex+0x3d6>
 800bc92:	2501      	movs	r5, #1
 800bc94:	e7d4      	b.n	800bc40 <__gethex+0x324>
 800bc96:	2601      	movs	r6, #1
 800bc98:	e7e8      	b.n	800bc6c <__gethex+0x350>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc9e:	1a9b      	subs	r3, r3, r2
 800bca0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0f2      	beq.n	800bc8e <__gethex+0x372>
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	2000      	movs	r0, #0
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	9304      	str	r3, [sp, #16]
 800bcb2:	0023      	movs	r3, r4
 800bcb4:	9a04      	ldr	r2, [sp, #16]
 800bcb6:	3314      	adds	r3, #20
 800bcb8:	1899      	adds	r1, r3, r2
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	1c55      	adds	r5, r2, #1
 800bcbe:	d01e      	beq.n	800bcfe <__gethex+0x3e2>
 800bcc0:	3201      	adds	r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	0023      	movs	r3, r4
 800bcc6:	3314      	adds	r3, #20
 800bcc8:	2e02      	cmp	r6, #2
 800bcca:	d140      	bne.n	800bd4e <__gethex+0x432>
 800bccc:	9a02      	ldr	r2, [sp, #8]
 800bcce:	9901      	ldr	r1, [sp, #4]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	3a01      	subs	r2, #1
 800bcd4:	428a      	cmp	r2, r1
 800bcd6:	d10b      	bne.n	800bcf0 <__gethex+0x3d4>
 800bcd8:	114a      	asrs	r2, r1, #5
 800bcda:	211f      	movs	r1, #31
 800bcdc:	9801      	ldr	r0, [sp, #4]
 800bcde:	0092      	lsls	r2, r2, #2
 800bce0:	4001      	ands	r1, r0
 800bce2:	2001      	movs	r0, #1
 800bce4:	0005      	movs	r5, r0
 800bce6:	408d      	lsls	r5, r1
 800bce8:	58d3      	ldr	r3, [r2, r3]
 800bcea:	422b      	tst	r3, r5
 800bcec:	d000      	beq.n	800bcf0 <__gethex+0x3d4>
 800bcee:	2601      	movs	r6, #1
 800bcf0:	2320      	movs	r3, #32
 800bcf2:	431e      	orrs	r6, r3
 800bcf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcf6:	601c      	str	r4, [r3, #0]
 800bcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcfa:	601f      	str	r7, [r3, #0]
 800bcfc:	e6a7      	b.n	800ba4e <__gethex+0x132>
 800bcfe:	c301      	stmia	r3!, {r0}
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d8da      	bhi.n	800bcba <__gethex+0x39e>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	68a2      	ldr	r2, [r4, #8]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	db17      	blt.n	800bd3c <__gethex+0x420>
 800bd0c:	6863      	ldr	r3, [r4, #4]
 800bd0e:	9805      	ldr	r0, [sp, #20]
 800bd10:	1c59      	adds	r1, r3, #1
 800bd12:	f000 f953 	bl	800bfbc <_Balloc>
 800bd16:	1e05      	subs	r5, r0, #0
 800bd18:	d103      	bne.n	800bd22 <__gethex+0x406>
 800bd1a:	0002      	movs	r2, r0
 800bd1c:	2184      	movs	r1, #132	; 0x84
 800bd1e:	4b1c      	ldr	r3, [pc, #112]	; (800bd90 <__gethex+0x474>)
 800bd20:	e6b8      	b.n	800ba94 <__gethex+0x178>
 800bd22:	0021      	movs	r1, r4
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	310c      	adds	r1, #12
 800bd28:	1c9a      	adds	r2, r3, #2
 800bd2a:	0092      	lsls	r2, r2, #2
 800bd2c:	300c      	adds	r0, #12
 800bd2e:	f000 f93c 	bl	800bfaa <memcpy>
 800bd32:	0021      	movs	r1, r4
 800bd34:	9805      	ldr	r0, [sp, #20]
 800bd36:	f000 f985 	bl	800c044 <_Bfree>
 800bd3a:	002c      	movs	r4, r5
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	6122      	str	r2, [r4, #16]
 800bd42:	2201      	movs	r2, #1
 800bd44:	3304      	adds	r3, #4
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	18e3      	adds	r3, r4, r3
 800bd4a:	605a      	str	r2, [r3, #4]
 800bd4c:	e7ba      	b.n	800bcc4 <__gethex+0x3a8>
 800bd4e:	6922      	ldr	r2, [r4, #16]
 800bd50:	9903      	ldr	r1, [sp, #12]
 800bd52:	428a      	cmp	r2, r1
 800bd54:	dd09      	ble.n	800bd6a <__gethex+0x44e>
 800bd56:	2101      	movs	r1, #1
 800bd58:	0020      	movs	r0, r4
 800bd5a:	f7ff fd75 	bl	800b848 <rshift>
 800bd5e:	9b02      	ldr	r3, [sp, #8]
 800bd60:	3701      	adds	r7, #1
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	42bb      	cmp	r3, r7
 800bd66:	dac2      	bge.n	800bcee <__gethex+0x3d2>
 800bd68:	e6dc      	b.n	800bb24 <__gethex+0x208>
 800bd6a:	221f      	movs	r2, #31
 800bd6c:	9d01      	ldr	r5, [sp, #4]
 800bd6e:	9901      	ldr	r1, [sp, #4]
 800bd70:	2601      	movs	r6, #1
 800bd72:	4015      	ands	r5, r2
 800bd74:	4211      	tst	r1, r2
 800bd76:	d0bb      	beq.n	800bcf0 <__gethex+0x3d4>
 800bd78:	9a04      	ldr	r2, [sp, #16]
 800bd7a:	189b      	adds	r3, r3, r2
 800bd7c:	3b04      	subs	r3, #4
 800bd7e:	6818      	ldr	r0, [r3, #0]
 800bd80:	f000 fa14 	bl	800c1ac <__hi0bits>
 800bd84:	2320      	movs	r3, #32
 800bd86:	1b5d      	subs	r5, r3, r5
 800bd88:	42a8      	cmp	r0, r5
 800bd8a:	dbe4      	blt.n	800bd56 <__gethex+0x43a>
 800bd8c:	e7b0      	b.n	800bcf0 <__gethex+0x3d4>
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	0800e564 	.word	0x0800e564

0800bd94 <L_shift>:
 800bd94:	2308      	movs	r3, #8
 800bd96:	b570      	push	{r4, r5, r6, lr}
 800bd98:	2520      	movs	r5, #32
 800bd9a:	1a9a      	subs	r2, r3, r2
 800bd9c:	0092      	lsls	r2, r2, #2
 800bd9e:	1aad      	subs	r5, r5, r2
 800bda0:	6843      	ldr	r3, [r0, #4]
 800bda2:	6806      	ldr	r6, [r0, #0]
 800bda4:	001c      	movs	r4, r3
 800bda6:	40ac      	lsls	r4, r5
 800bda8:	40d3      	lsrs	r3, r2
 800bdaa:	4334      	orrs	r4, r6
 800bdac:	6004      	str	r4, [r0, #0]
 800bdae:	6043      	str	r3, [r0, #4]
 800bdb0:	3004      	adds	r0, #4
 800bdb2:	4288      	cmp	r0, r1
 800bdb4:	d3f4      	bcc.n	800bda0 <L_shift+0xc>
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}

0800bdb8 <__match>:
 800bdb8:	b530      	push	{r4, r5, lr}
 800bdba:	6803      	ldr	r3, [r0, #0]
 800bdbc:	780c      	ldrb	r4, [r1, #0]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	2c00      	cmp	r4, #0
 800bdc2:	d102      	bne.n	800bdca <__match+0x12>
 800bdc4:	6003      	str	r3, [r0, #0]
 800bdc6:	2001      	movs	r0, #1
 800bdc8:	bd30      	pop	{r4, r5, pc}
 800bdca:	781a      	ldrb	r2, [r3, #0]
 800bdcc:	0015      	movs	r5, r2
 800bdce:	3d41      	subs	r5, #65	; 0x41
 800bdd0:	2d19      	cmp	r5, #25
 800bdd2:	d800      	bhi.n	800bdd6 <__match+0x1e>
 800bdd4:	3220      	adds	r2, #32
 800bdd6:	3101      	adds	r1, #1
 800bdd8:	42a2      	cmp	r2, r4
 800bdda:	d0ef      	beq.n	800bdbc <__match+0x4>
 800bddc:	2000      	movs	r0, #0
 800bdde:	e7f3      	b.n	800bdc8 <__match+0x10>

0800bde0 <__hexnan>:
 800bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde2:	680b      	ldr	r3, [r1, #0]
 800bde4:	b08b      	sub	sp, #44	; 0x2c
 800bde6:	115c      	asrs	r4, r3, #5
 800bde8:	00a4      	lsls	r4, r4, #2
 800bdea:	9201      	str	r2, [sp, #4]
 800bdec:	1912      	adds	r2, r2, r4
 800bdee:	0019      	movs	r1, r3
 800bdf0:	9202      	str	r2, [sp, #8]
 800bdf2:	221f      	movs	r2, #31
 800bdf4:	4011      	ands	r1, r2
 800bdf6:	9008      	str	r0, [sp, #32]
 800bdf8:	9106      	str	r1, [sp, #24]
 800bdfa:	4213      	tst	r3, r2
 800bdfc:	d002      	beq.n	800be04 <__hexnan+0x24>
 800bdfe:	9b02      	ldr	r3, [sp, #8]
 800be00:	3304      	adds	r3, #4
 800be02:	9302      	str	r3, [sp, #8]
 800be04:	9b02      	ldr	r3, [sp, #8]
 800be06:	2500      	movs	r5, #0
 800be08:	1f1e      	subs	r6, r3, #4
 800be0a:	0037      	movs	r7, r6
 800be0c:	0034      	movs	r4, r6
 800be0e:	9b08      	ldr	r3, [sp, #32]
 800be10:	6035      	str	r5, [r6, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9507      	str	r5, [sp, #28]
 800be16:	9305      	str	r3, [sp, #20]
 800be18:	9503      	str	r5, [sp, #12]
 800be1a:	9b05      	ldr	r3, [sp, #20]
 800be1c:	3301      	adds	r3, #1
 800be1e:	9309      	str	r3, [sp, #36]	; 0x24
 800be20:	9b05      	ldr	r3, [sp, #20]
 800be22:	785b      	ldrb	r3, [r3, #1]
 800be24:	9304      	str	r3, [sp, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d028      	beq.n	800be7c <__hexnan+0x9c>
 800be2a:	9804      	ldr	r0, [sp, #16]
 800be2c:	f7ff fd60 	bl	800b8f0 <__hexdig_fun>
 800be30:	2800      	cmp	r0, #0
 800be32:	d154      	bne.n	800bede <__hexnan+0xfe>
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	2b20      	cmp	r3, #32
 800be38:	d819      	bhi.n	800be6e <__hexnan+0x8e>
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	9a07      	ldr	r2, [sp, #28]
 800be3e:	4293      	cmp	r3, r2
 800be40:	dd12      	ble.n	800be68 <__hexnan+0x88>
 800be42:	42bc      	cmp	r4, r7
 800be44:	d206      	bcs.n	800be54 <__hexnan+0x74>
 800be46:	2d07      	cmp	r5, #7
 800be48:	dc04      	bgt.n	800be54 <__hexnan+0x74>
 800be4a:	002a      	movs	r2, r5
 800be4c:	0039      	movs	r1, r7
 800be4e:	0020      	movs	r0, r4
 800be50:	f7ff ffa0 	bl	800bd94 <L_shift>
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	2508      	movs	r5, #8
 800be58:	429c      	cmp	r4, r3
 800be5a:	d905      	bls.n	800be68 <__hexnan+0x88>
 800be5c:	1f27      	subs	r7, r4, #4
 800be5e:	2500      	movs	r5, #0
 800be60:	003c      	movs	r4, r7
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	603d      	str	r5, [r7, #0]
 800be66:	9307      	str	r3, [sp, #28]
 800be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	e7d5      	b.n	800be1a <__hexnan+0x3a>
 800be6e:	9b04      	ldr	r3, [sp, #16]
 800be70:	2b29      	cmp	r3, #41	; 0x29
 800be72:	d158      	bne.n	800bf26 <__hexnan+0x146>
 800be74:	9b05      	ldr	r3, [sp, #20]
 800be76:	9a08      	ldr	r2, [sp, #32]
 800be78:	3302      	adds	r3, #2
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d051      	beq.n	800bf26 <__hexnan+0x146>
 800be82:	42bc      	cmp	r4, r7
 800be84:	d206      	bcs.n	800be94 <__hexnan+0xb4>
 800be86:	2d07      	cmp	r5, #7
 800be88:	dc04      	bgt.n	800be94 <__hexnan+0xb4>
 800be8a:	002a      	movs	r2, r5
 800be8c:	0039      	movs	r1, r7
 800be8e:	0020      	movs	r0, r4
 800be90:	f7ff ff80 	bl	800bd94 <L_shift>
 800be94:	9b01      	ldr	r3, [sp, #4]
 800be96:	429c      	cmp	r4, r3
 800be98:	d935      	bls.n	800bf06 <__hexnan+0x126>
 800be9a:	001a      	movs	r2, r3
 800be9c:	0023      	movs	r3, r4
 800be9e:	cb02      	ldmia	r3!, {r1}
 800bea0:	c202      	stmia	r2!, {r1}
 800bea2:	429e      	cmp	r6, r3
 800bea4:	d2fb      	bcs.n	800be9e <__hexnan+0xbe>
 800bea6:	9b02      	ldr	r3, [sp, #8]
 800bea8:	1c61      	adds	r1, r4, #1
 800beaa:	1eda      	subs	r2, r3, #3
 800beac:	2304      	movs	r3, #4
 800beae:	4291      	cmp	r1, r2
 800beb0:	d805      	bhi.n	800bebe <__hexnan+0xde>
 800beb2:	9b02      	ldr	r3, [sp, #8]
 800beb4:	3b04      	subs	r3, #4
 800beb6:	1b1c      	subs	r4, r3, r4
 800beb8:	08a4      	lsrs	r4, r4, #2
 800beba:	3401      	adds	r4, #1
 800bebc:	00a3      	lsls	r3, r4, #2
 800bebe:	9a01      	ldr	r2, [sp, #4]
 800bec0:	18d4      	adds	r4, r2, r3
 800bec2:	2300      	movs	r3, #0
 800bec4:	c408      	stmia	r4!, {r3}
 800bec6:	42a6      	cmp	r6, r4
 800bec8:	d2fc      	bcs.n	800bec4 <__hexnan+0xe4>
 800beca:	6833      	ldr	r3, [r6, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d104      	bne.n	800beda <__hexnan+0xfa>
 800bed0:	9b01      	ldr	r3, [sp, #4]
 800bed2:	429e      	cmp	r6, r3
 800bed4:	d125      	bne.n	800bf22 <__hexnan+0x142>
 800bed6:	2301      	movs	r3, #1
 800bed8:	6033      	str	r3, [r6, #0]
 800beda:	2005      	movs	r0, #5
 800bedc:	e024      	b.n	800bf28 <__hexnan+0x148>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	3501      	adds	r5, #1
 800bee2:	3301      	adds	r3, #1
 800bee4:	9303      	str	r3, [sp, #12]
 800bee6:	2d08      	cmp	r5, #8
 800bee8:	dd06      	ble.n	800bef8 <__hexnan+0x118>
 800beea:	9b01      	ldr	r3, [sp, #4]
 800beec:	429c      	cmp	r4, r3
 800beee:	d9bb      	bls.n	800be68 <__hexnan+0x88>
 800bef0:	2300      	movs	r3, #0
 800bef2:	2501      	movs	r5, #1
 800bef4:	3c04      	subs	r4, #4
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	220f      	movs	r2, #15
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	4010      	ands	r0, r2
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	4318      	orrs	r0, r3
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	e7b0      	b.n	800be68 <__hexnan+0x88>
 800bf06:	9b06      	ldr	r3, [sp, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0de      	beq.n	800beca <__hexnan+0xea>
 800bf0c:	2220      	movs	r2, #32
 800bf0e:	1ad2      	subs	r2, r2, r3
 800bf10:	2301      	movs	r3, #1
 800bf12:	425b      	negs	r3, r3
 800bf14:	40d3      	lsrs	r3, r2
 800bf16:	9c02      	ldr	r4, [sp, #8]
 800bf18:	3c04      	subs	r4, #4
 800bf1a:	6822      	ldr	r2, [r4, #0]
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	e7d3      	b.n	800beca <__hexnan+0xea>
 800bf22:	3e04      	subs	r6, #4
 800bf24:	e7d1      	b.n	800beca <__hexnan+0xea>
 800bf26:	2004      	movs	r0, #4
 800bf28:	b00b      	add	sp, #44	; 0x2c
 800bf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf2c <_localeconv_r>:
 800bf2c:	4800      	ldr	r0, [pc, #0]	; (800bf30 <_localeconv_r+0x4>)
 800bf2e:	4770      	bx	lr
 800bf30:	20000164 	.word	0x20000164

0800bf34 <_lseek_r>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	0004      	movs	r4, r0
 800bf38:	0008      	movs	r0, r1
 800bf3a:	0011      	movs	r1, r2
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4d05      	ldr	r5, [pc, #20]	; (800bf58 <_lseek_r+0x24>)
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	f7f8 fda0 	bl	8004a88 <_lseek>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d103      	bne.n	800bf54 <_lseek_r+0x20>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d000      	beq.n	800bf54 <_lseek_r+0x20>
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	bd70      	pop	{r4, r5, r6, pc}
 800bf56:	46c0      	nop			; (mov r8, r8)
 800bf58:	20000614 	.word	0x20000614

0800bf5c <malloc>:
 800bf5c:	b510      	push	{r4, lr}
 800bf5e:	4b03      	ldr	r3, [pc, #12]	; (800bf6c <malloc+0x10>)
 800bf60:	0001      	movs	r1, r0
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	f000 fd4c 	bl	800ca00 <_malloc_r>
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	46c0      	nop			; (mov r8, r8)
 800bf6c:	2000000c 	.word	0x2000000c

0800bf70 <__ascii_mbtowc>:
 800bf70:	b082      	sub	sp, #8
 800bf72:	2900      	cmp	r1, #0
 800bf74:	d100      	bne.n	800bf78 <__ascii_mbtowc+0x8>
 800bf76:	a901      	add	r1, sp, #4
 800bf78:	1e10      	subs	r0, r2, #0
 800bf7a:	d006      	beq.n	800bf8a <__ascii_mbtowc+0x1a>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d006      	beq.n	800bf8e <__ascii_mbtowc+0x1e>
 800bf80:	7813      	ldrb	r3, [r2, #0]
 800bf82:	600b      	str	r3, [r1, #0]
 800bf84:	7810      	ldrb	r0, [r2, #0]
 800bf86:	1e43      	subs	r3, r0, #1
 800bf88:	4198      	sbcs	r0, r3
 800bf8a:	b002      	add	sp, #8
 800bf8c:	4770      	bx	lr
 800bf8e:	2002      	movs	r0, #2
 800bf90:	4240      	negs	r0, r0
 800bf92:	e7fa      	b.n	800bf8a <__ascii_mbtowc+0x1a>

0800bf94 <memchr>:
 800bf94:	b2c9      	uxtb	r1, r1
 800bf96:	1882      	adds	r2, r0, r2
 800bf98:	4290      	cmp	r0, r2
 800bf9a:	d101      	bne.n	800bfa0 <memchr+0xc>
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	4770      	bx	lr
 800bfa0:	7803      	ldrb	r3, [r0, #0]
 800bfa2:	428b      	cmp	r3, r1
 800bfa4:	d0fb      	beq.n	800bf9e <memchr+0xa>
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	e7f6      	b.n	800bf98 <memchr+0x4>

0800bfaa <memcpy>:
 800bfaa:	2300      	movs	r3, #0
 800bfac:	b510      	push	{r4, lr}
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d100      	bne.n	800bfb4 <memcpy+0xa>
 800bfb2:	bd10      	pop	{r4, pc}
 800bfb4:	5ccc      	ldrb	r4, [r1, r3]
 800bfb6:	54c4      	strb	r4, [r0, r3]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	e7f8      	b.n	800bfae <memcpy+0x4>

0800bfbc <_Balloc>:
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfc0:	0006      	movs	r6, r0
 800bfc2:	000c      	movs	r4, r1
 800bfc4:	2d00      	cmp	r5, #0
 800bfc6:	d10e      	bne.n	800bfe6 <_Balloc+0x2a>
 800bfc8:	2010      	movs	r0, #16
 800bfca:	f7ff ffc7 	bl	800bf5c <malloc>
 800bfce:	1e02      	subs	r2, r0, #0
 800bfd0:	6270      	str	r0, [r6, #36]	; 0x24
 800bfd2:	d104      	bne.n	800bfde <_Balloc+0x22>
 800bfd4:	2166      	movs	r1, #102	; 0x66
 800bfd6:	4b19      	ldr	r3, [pc, #100]	; (800c03c <_Balloc+0x80>)
 800bfd8:	4819      	ldr	r0, [pc, #100]	; (800c040 <_Balloc+0x84>)
 800bfda:	f001 fb5d 	bl	800d698 <__assert_func>
 800bfde:	6045      	str	r5, [r0, #4]
 800bfe0:	6085      	str	r5, [r0, #8]
 800bfe2:	6005      	str	r5, [r0, #0]
 800bfe4:	60c5      	str	r5, [r0, #12]
 800bfe6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bfe8:	68eb      	ldr	r3, [r5, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d013      	beq.n	800c016 <_Balloc+0x5a>
 800bfee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bff0:	00a2      	lsls	r2, r4, #2
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	189b      	adds	r3, r3, r2
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d118      	bne.n	800c02e <_Balloc+0x72>
 800bffc:	2101      	movs	r1, #1
 800bffe:	000d      	movs	r5, r1
 800c000:	40a5      	lsls	r5, r4
 800c002:	1d6a      	adds	r2, r5, #5
 800c004:	0030      	movs	r0, r6
 800c006:	0092      	lsls	r2, r2, #2
 800c008:	f000 fca2 	bl	800c950 <_calloc_r>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d00c      	beq.n	800c02a <_Balloc+0x6e>
 800c010:	6044      	str	r4, [r0, #4]
 800c012:	6085      	str	r5, [r0, #8]
 800c014:	e00d      	b.n	800c032 <_Balloc+0x76>
 800c016:	2221      	movs	r2, #33	; 0x21
 800c018:	2104      	movs	r1, #4
 800c01a:	0030      	movs	r0, r6
 800c01c:	f000 fc98 	bl	800c950 <_calloc_r>
 800c020:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c022:	60e8      	str	r0, [r5, #12]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e1      	bne.n	800bfee <_Balloc+0x32>
 800c02a:	2000      	movs	r0, #0
 800c02c:	bd70      	pop	{r4, r5, r6, pc}
 800c02e:	6802      	ldr	r2, [r0, #0]
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	2300      	movs	r3, #0
 800c034:	6103      	str	r3, [r0, #16]
 800c036:	60c3      	str	r3, [r0, #12]
 800c038:	e7f8      	b.n	800c02c <_Balloc+0x70>
 800c03a:	46c0      	nop			; (mov r8, r8)
 800c03c:	0800e4ee 	.word	0x0800e4ee
 800c040:	0800e5f4 	.word	0x0800e5f4

0800c044 <_Bfree>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c048:	0005      	movs	r5, r0
 800c04a:	000c      	movs	r4, r1
 800c04c:	2e00      	cmp	r6, #0
 800c04e:	d10e      	bne.n	800c06e <_Bfree+0x2a>
 800c050:	2010      	movs	r0, #16
 800c052:	f7ff ff83 	bl	800bf5c <malloc>
 800c056:	1e02      	subs	r2, r0, #0
 800c058:	6268      	str	r0, [r5, #36]	; 0x24
 800c05a:	d104      	bne.n	800c066 <_Bfree+0x22>
 800c05c:	218a      	movs	r1, #138	; 0x8a
 800c05e:	4b09      	ldr	r3, [pc, #36]	; (800c084 <_Bfree+0x40>)
 800c060:	4809      	ldr	r0, [pc, #36]	; (800c088 <_Bfree+0x44>)
 800c062:	f001 fb19 	bl	800d698 <__assert_func>
 800c066:	6046      	str	r6, [r0, #4]
 800c068:	6086      	str	r6, [r0, #8]
 800c06a:	6006      	str	r6, [r0, #0]
 800c06c:	60c6      	str	r6, [r0, #12]
 800c06e:	2c00      	cmp	r4, #0
 800c070:	d007      	beq.n	800c082 <_Bfree+0x3e>
 800c072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c074:	6862      	ldr	r2, [r4, #4]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	0092      	lsls	r2, r2, #2
 800c07a:	189b      	adds	r3, r3, r2
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	6022      	str	r2, [r4, #0]
 800c080:	601c      	str	r4, [r3, #0]
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	0800e4ee 	.word	0x0800e4ee
 800c088:	0800e5f4 	.word	0x0800e5f4

0800c08c <__multadd>:
 800c08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c08e:	000e      	movs	r6, r1
 800c090:	9001      	str	r0, [sp, #4]
 800c092:	000c      	movs	r4, r1
 800c094:	001d      	movs	r5, r3
 800c096:	2000      	movs	r0, #0
 800c098:	690f      	ldr	r7, [r1, #16]
 800c09a:	3614      	adds	r6, #20
 800c09c:	6833      	ldr	r3, [r6, #0]
 800c09e:	3001      	adds	r0, #1
 800c0a0:	b299      	uxth	r1, r3
 800c0a2:	4351      	muls	r1, r2
 800c0a4:	0c1b      	lsrs	r3, r3, #16
 800c0a6:	4353      	muls	r3, r2
 800c0a8:	1949      	adds	r1, r1, r5
 800c0aa:	0c0d      	lsrs	r5, r1, #16
 800c0ac:	195b      	adds	r3, r3, r5
 800c0ae:	0c1d      	lsrs	r5, r3, #16
 800c0b0:	b289      	uxth	r1, r1
 800c0b2:	041b      	lsls	r3, r3, #16
 800c0b4:	185b      	adds	r3, r3, r1
 800c0b6:	c608      	stmia	r6!, {r3}
 800c0b8:	4287      	cmp	r7, r0
 800c0ba:	dcef      	bgt.n	800c09c <__multadd+0x10>
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	d022      	beq.n	800c106 <__multadd+0x7a>
 800c0c0:	68a3      	ldr	r3, [r4, #8]
 800c0c2:	42bb      	cmp	r3, r7
 800c0c4:	dc19      	bgt.n	800c0fa <__multadd+0x6e>
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	9801      	ldr	r0, [sp, #4]
 800c0ca:	1c59      	adds	r1, r3, #1
 800c0cc:	f7ff ff76 	bl	800bfbc <_Balloc>
 800c0d0:	1e06      	subs	r6, r0, #0
 800c0d2:	d105      	bne.n	800c0e0 <__multadd+0x54>
 800c0d4:	0002      	movs	r2, r0
 800c0d6:	21b5      	movs	r1, #181	; 0xb5
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	; (800c10c <__multadd+0x80>)
 800c0da:	480d      	ldr	r0, [pc, #52]	; (800c110 <__multadd+0x84>)
 800c0dc:	f001 fadc 	bl	800d698 <__assert_func>
 800c0e0:	0021      	movs	r1, r4
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	310c      	adds	r1, #12
 800c0e6:	1c9a      	adds	r2, r3, #2
 800c0e8:	0092      	lsls	r2, r2, #2
 800c0ea:	300c      	adds	r0, #12
 800c0ec:	f7ff ff5d 	bl	800bfaa <memcpy>
 800c0f0:	0021      	movs	r1, r4
 800c0f2:	9801      	ldr	r0, [sp, #4]
 800c0f4:	f7ff ffa6 	bl	800c044 <_Bfree>
 800c0f8:	0034      	movs	r4, r6
 800c0fa:	1d3b      	adds	r3, r7, #4
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	18e3      	adds	r3, r4, r3
 800c100:	605d      	str	r5, [r3, #4]
 800c102:	1c7b      	adds	r3, r7, #1
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	0020      	movs	r0, r4
 800c108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	0800e564 	.word	0x0800e564
 800c110:	0800e5f4 	.word	0x0800e5f4

0800c114 <__s2b>:
 800c114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c116:	0006      	movs	r6, r0
 800c118:	0018      	movs	r0, r3
 800c11a:	000c      	movs	r4, r1
 800c11c:	3008      	adds	r0, #8
 800c11e:	2109      	movs	r1, #9
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	0015      	movs	r5, r2
 800c124:	f7f4 f8a0 	bl	8000268 <__divsi3>
 800c128:	2301      	movs	r3, #1
 800c12a:	2100      	movs	r1, #0
 800c12c:	4283      	cmp	r3, r0
 800c12e:	db0a      	blt.n	800c146 <__s2b+0x32>
 800c130:	0030      	movs	r0, r6
 800c132:	f7ff ff43 	bl	800bfbc <_Balloc>
 800c136:	1e01      	subs	r1, r0, #0
 800c138:	d108      	bne.n	800c14c <__s2b+0x38>
 800c13a:	0002      	movs	r2, r0
 800c13c:	4b19      	ldr	r3, [pc, #100]	; (800c1a4 <__s2b+0x90>)
 800c13e:	481a      	ldr	r0, [pc, #104]	; (800c1a8 <__s2b+0x94>)
 800c140:	31ce      	adds	r1, #206	; 0xce
 800c142:	f001 faa9 	bl	800d698 <__assert_func>
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	3101      	adds	r1, #1
 800c14a:	e7ef      	b.n	800c12c <__s2b+0x18>
 800c14c:	9b08      	ldr	r3, [sp, #32]
 800c14e:	6143      	str	r3, [r0, #20]
 800c150:	2301      	movs	r3, #1
 800c152:	6103      	str	r3, [r0, #16]
 800c154:	2d09      	cmp	r5, #9
 800c156:	dd18      	ble.n	800c18a <__s2b+0x76>
 800c158:	0023      	movs	r3, r4
 800c15a:	3309      	adds	r3, #9
 800c15c:	001f      	movs	r7, r3
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	1964      	adds	r4, r4, r5
 800c162:	783b      	ldrb	r3, [r7, #0]
 800c164:	220a      	movs	r2, #10
 800c166:	0030      	movs	r0, r6
 800c168:	3b30      	subs	r3, #48	; 0x30
 800c16a:	f7ff ff8f 	bl	800c08c <__multadd>
 800c16e:	3701      	adds	r7, #1
 800c170:	0001      	movs	r1, r0
 800c172:	42a7      	cmp	r7, r4
 800c174:	d1f5      	bne.n	800c162 <__s2b+0x4e>
 800c176:	002c      	movs	r4, r5
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	3c08      	subs	r4, #8
 800c17c:	191c      	adds	r4, r3, r4
 800c17e:	002f      	movs	r7, r5
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	429f      	cmp	r7, r3
 800c184:	db04      	blt.n	800c190 <__s2b+0x7c>
 800c186:	0008      	movs	r0, r1
 800c188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c18a:	2509      	movs	r5, #9
 800c18c:	340a      	adds	r4, #10
 800c18e:	e7f6      	b.n	800c17e <__s2b+0x6a>
 800c190:	1b63      	subs	r3, r4, r5
 800c192:	5ddb      	ldrb	r3, [r3, r7]
 800c194:	220a      	movs	r2, #10
 800c196:	0030      	movs	r0, r6
 800c198:	3b30      	subs	r3, #48	; 0x30
 800c19a:	f7ff ff77 	bl	800c08c <__multadd>
 800c19e:	3701      	adds	r7, #1
 800c1a0:	0001      	movs	r1, r0
 800c1a2:	e7ed      	b.n	800c180 <__s2b+0x6c>
 800c1a4:	0800e564 	.word	0x0800e564
 800c1a8:	0800e5f4 	.word	0x0800e5f4

0800c1ac <__hi0bits>:
 800c1ac:	0003      	movs	r3, r0
 800c1ae:	0c02      	lsrs	r2, r0, #16
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	4282      	cmp	r2, r0
 800c1b4:	d101      	bne.n	800c1ba <__hi0bits+0xe>
 800c1b6:	041b      	lsls	r3, r3, #16
 800c1b8:	3010      	adds	r0, #16
 800c1ba:	0e1a      	lsrs	r2, r3, #24
 800c1bc:	d101      	bne.n	800c1c2 <__hi0bits+0x16>
 800c1be:	3008      	adds	r0, #8
 800c1c0:	021b      	lsls	r3, r3, #8
 800c1c2:	0f1a      	lsrs	r2, r3, #28
 800c1c4:	d101      	bne.n	800c1ca <__hi0bits+0x1e>
 800c1c6:	3004      	adds	r0, #4
 800c1c8:	011b      	lsls	r3, r3, #4
 800c1ca:	0f9a      	lsrs	r2, r3, #30
 800c1cc:	d101      	bne.n	800c1d2 <__hi0bits+0x26>
 800c1ce:	3002      	adds	r0, #2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	db03      	blt.n	800c1de <__hi0bits+0x32>
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	d400      	bmi.n	800c1de <__hi0bits+0x32>
 800c1dc:	2020      	movs	r0, #32
 800c1de:	4770      	bx	lr

0800c1e0 <__lo0bits>:
 800c1e0:	6803      	ldr	r3, [r0, #0]
 800c1e2:	0002      	movs	r2, r0
 800c1e4:	2107      	movs	r1, #7
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	4008      	ands	r0, r1
 800c1ea:	420b      	tst	r3, r1
 800c1ec:	d00d      	beq.n	800c20a <__lo0bits+0x2a>
 800c1ee:	3906      	subs	r1, #6
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	420b      	tst	r3, r1
 800c1f4:	d105      	bne.n	800c202 <__lo0bits+0x22>
 800c1f6:	3002      	adds	r0, #2
 800c1f8:	4203      	tst	r3, r0
 800c1fa:	d003      	beq.n	800c204 <__lo0bits+0x24>
 800c1fc:	40cb      	lsrs	r3, r1
 800c1fe:	0008      	movs	r0, r1
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	4770      	bx	lr
 800c204:	089b      	lsrs	r3, r3, #2
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	e7fb      	b.n	800c202 <__lo0bits+0x22>
 800c20a:	b299      	uxth	r1, r3
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d101      	bne.n	800c214 <__lo0bits+0x34>
 800c210:	2010      	movs	r0, #16
 800c212:	0c1b      	lsrs	r3, r3, #16
 800c214:	b2d9      	uxtb	r1, r3
 800c216:	2900      	cmp	r1, #0
 800c218:	d101      	bne.n	800c21e <__lo0bits+0x3e>
 800c21a:	3008      	adds	r0, #8
 800c21c:	0a1b      	lsrs	r3, r3, #8
 800c21e:	0719      	lsls	r1, r3, #28
 800c220:	d101      	bne.n	800c226 <__lo0bits+0x46>
 800c222:	3004      	adds	r0, #4
 800c224:	091b      	lsrs	r3, r3, #4
 800c226:	0799      	lsls	r1, r3, #30
 800c228:	d101      	bne.n	800c22e <__lo0bits+0x4e>
 800c22a:	3002      	adds	r0, #2
 800c22c:	089b      	lsrs	r3, r3, #2
 800c22e:	07d9      	lsls	r1, r3, #31
 800c230:	d4e9      	bmi.n	800c206 <__lo0bits+0x26>
 800c232:	3001      	adds	r0, #1
 800c234:	085b      	lsrs	r3, r3, #1
 800c236:	d1e6      	bne.n	800c206 <__lo0bits+0x26>
 800c238:	2020      	movs	r0, #32
 800c23a:	e7e2      	b.n	800c202 <__lo0bits+0x22>

0800c23c <__i2b>:
 800c23c:	b510      	push	{r4, lr}
 800c23e:	000c      	movs	r4, r1
 800c240:	2101      	movs	r1, #1
 800c242:	f7ff febb 	bl	800bfbc <_Balloc>
 800c246:	2800      	cmp	r0, #0
 800c248:	d106      	bne.n	800c258 <__i2b+0x1c>
 800c24a:	21a0      	movs	r1, #160	; 0xa0
 800c24c:	0002      	movs	r2, r0
 800c24e:	4b04      	ldr	r3, [pc, #16]	; (800c260 <__i2b+0x24>)
 800c250:	4804      	ldr	r0, [pc, #16]	; (800c264 <__i2b+0x28>)
 800c252:	0049      	lsls	r1, r1, #1
 800c254:	f001 fa20 	bl	800d698 <__assert_func>
 800c258:	2301      	movs	r3, #1
 800c25a:	6144      	str	r4, [r0, #20]
 800c25c:	6103      	str	r3, [r0, #16]
 800c25e:	bd10      	pop	{r4, pc}
 800c260:	0800e564 	.word	0x0800e564
 800c264:	0800e5f4 	.word	0x0800e5f4

0800c268 <__multiply>:
 800c268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c26a:	690b      	ldr	r3, [r1, #16]
 800c26c:	0014      	movs	r4, r2
 800c26e:	6912      	ldr	r2, [r2, #16]
 800c270:	000d      	movs	r5, r1
 800c272:	b089      	sub	sp, #36	; 0x24
 800c274:	4293      	cmp	r3, r2
 800c276:	da01      	bge.n	800c27c <__multiply+0x14>
 800c278:	0025      	movs	r5, r4
 800c27a:	000c      	movs	r4, r1
 800c27c:	692f      	ldr	r7, [r5, #16]
 800c27e:	6926      	ldr	r6, [r4, #16]
 800c280:	6869      	ldr	r1, [r5, #4]
 800c282:	19bb      	adds	r3, r7, r6
 800c284:	9302      	str	r3, [sp, #8]
 800c286:	68ab      	ldr	r3, [r5, #8]
 800c288:	19ba      	adds	r2, r7, r6
 800c28a:	4293      	cmp	r3, r2
 800c28c:	da00      	bge.n	800c290 <__multiply+0x28>
 800c28e:	3101      	adds	r1, #1
 800c290:	f7ff fe94 	bl	800bfbc <_Balloc>
 800c294:	9001      	str	r0, [sp, #4]
 800c296:	2800      	cmp	r0, #0
 800c298:	d106      	bne.n	800c2a8 <__multiply+0x40>
 800c29a:	215e      	movs	r1, #94	; 0x5e
 800c29c:	0002      	movs	r2, r0
 800c29e:	4b48      	ldr	r3, [pc, #288]	; (800c3c0 <__multiply+0x158>)
 800c2a0:	4848      	ldr	r0, [pc, #288]	; (800c3c4 <__multiply+0x15c>)
 800c2a2:	31ff      	adds	r1, #255	; 0xff
 800c2a4:	f001 f9f8 	bl	800d698 <__assert_func>
 800c2a8:	9b01      	ldr	r3, [sp, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	3314      	adds	r3, #20
 800c2ae:	469c      	mov	ip, r3
 800c2b0:	19bb      	adds	r3, r7, r6
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4463      	add	r3, ip
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	4663      	mov	r3, ip
 800c2ba:	9903      	ldr	r1, [sp, #12]
 800c2bc:	428b      	cmp	r3, r1
 800c2be:	d32c      	bcc.n	800c31a <__multiply+0xb2>
 800c2c0:	002b      	movs	r3, r5
 800c2c2:	0022      	movs	r2, r4
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	00bf      	lsls	r7, r7, #2
 800c2c8:	3214      	adds	r2, #20
 800c2ca:	9306      	str	r3, [sp, #24]
 800c2cc:	00b6      	lsls	r6, r6, #2
 800c2ce:	19db      	adds	r3, r3, r7
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	1993      	adds	r3, r2, r6
 800c2d4:	9307      	str	r3, [sp, #28]
 800c2d6:	2304      	movs	r3, #4
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	002b      	movs	r3, r5
 800c2dc:	9904      	ldr	r1, [sp, #16]
 800c2de:	3315      	adds	r3, #21
 800c2e0:	9200      	str	r2, [sp, #0]
 800c2e2:	4299      	cmp	r1, r3
 800c2e4:	d305      	bcc.n	800c2f2 <__multiply+0x8a>
 800c2e6:	1b4b      	subs	r3, r1, r5
 800c2e8:	3b15      	subs	r3, #21
 800c2ea:	089b      	lsrs	r3, r3, #2
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	9305      	str	r3, [sp, #20]
 800c2f2:	9b07      	ldr	r3, [sp, #28]
 800c2f4:	9a00      	ldr	r2, [sp, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d311      	bcc.n	800c31e <__multiply+0xb6>
 800c2fa:	9b02      	ldr	r3, [sp, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	dd06      	ble.n	800c30e <__multiply+0xa6>
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	3b04      	subs	r3, #4
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d054      	beq.n	800c3b8 <__multiply+0x150>
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	9a02      	ldr	r2, [sp, #8]
 800c312:	0018      	movs	r0, r3
 800c314:	611a      	str	r2, [r3, #16]
 800c316:	b009      	add	sp, #36	; 0x24
 800c318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31a:	c304      	stmia	r3!, {r2}
 800c31c:	e7cd      	b.n	800c2ba <__multiply+0x52>
 800c31e:	9b00      	ldr	r3, [sp, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	b298      	uxth	r0, r3
 800c324:	2800      	cmp	r0, #0
 800c326:	d01c      	beq.n	800c362 <__multiply+0xfa>
 800c328:	4667      	mov	r7, ip
 800c32a:	2400      	movs	r4, #0
 800c32c:	9e06      	ldr	r6, [sp, #24]
 800c32e:	ce02      	ldmia	r6!, {r1}
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	b28b      	uxth	r3, r1
 800c334:	4343      	muls	r3, r0
 800c336:	0c09      	lsrs	r1, r1, #16
 800c338:	4341      	muls	r1, r0
 800c33a:	b292      	uxth	r2, r2
 800c33c:	189b      	adds	r3, r3, r2
 800c33e:	191b      	adds	r3, r3, r4
 800c340:	000c      	movs	r4, r1
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	0c11      	lsrs	r1, r2, #16
 800c346:	1861      	adds	r1, r4, r1
 800c348:	0c1c      	lsrs	r4, r3, #16
 800c34a:	1909      	adds	r1, r1, r4
 800c34c:	0c0c      	lsrs	r4, r1, #16
 800c34e:	b29b      	uxth	r3, r3
 800c350:	0409      	lsls	r1, r1, #16
 800c352:	430b      	orrs	r3, r1
 800c354:	c708      	stmia	r7!, {r3}
 800c356:	9b04      	ldr	r3, [sp, #16]
 800c358:	42b3      	cmp	r3, r6
 800c35a:	d8e8      	bhi.n	800c32e <__multiply+0xc6>
 800c35c:	4663      	mov	r3, ip
 800c35e:	9a05      	ldr	r2, [sp, #20]
 800c360:	509c      	str	r4, [r3, r2]
 800c362:	9b00      	ldr	r3, [sp, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	0c1e      	lsrs	r6, r3, #16
 800c368:	d020      	beq.n	800c3ac <__multiply+0x144>
 800c36a:	4663      	mov	r3, ip
 800c36c:	002c      	movs	r4, r5
 800c36e:	4660      	mov	r0, ip
 800c370:	2700      	movs	r7, #0
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3414      	adds	r4, #20
 800c376:	6822      	ldr	r2, [r4, #0]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	b291      	uxth	r1, r2
 800c37c:	4371      	muls	r1, r6
 800c37e:	6802      	ldr	r2, [r0, #0]
 800c380:	0c12      	lsrs	r2, r2, #16
 800c382:	1889      	adds	r1, r1, r2
 800c384:	19cf      	adds	r7, r1, r7
 800c386:	0439      	lsls	r1, r7, #16
 800c388:	430b      	orrs	r3, r1
 800c38a:	6003      	str	r3, [r0, #0]
 800c38c:	cc02      	ldmia	r4!, {r1}
 800c38e:	6843      	ldr	r3, [r0, #4]
 800c390:	0c09      	lsrs	r1, r1, #16
 800c392:	4371      	muls	r1, r6
 800c394:	b29b      	uxth	r3, r3
 800c396:	0c3f      	lsrs	r7, r7, #16
 800c398:	18cb      	adds	r3, r1, r3
 800c39a:	9a04      	ldr	r2, [sp, #16]
 800c39c:	19db      	adds	r3, r3, r7
 800c39e:	0c1f      	lsrs	r7, r3, #16
 800c3a0:	3004      	adds	r0, #4
 800c3a2:	42a2      	cmp	r2, r4
 800c3a4:	d8e7      	bhi.n	800c376 <__multiply+0x10e>
 800c3a6:	4662      	mov	r2, ip
 800c3a8:	9905      	ldr	r1, [sp, #20]
 800c3aa:	5053      	str	r3, [r2, r1]
 800c3ac:	9b00      	ldr	r3, [sp, #0]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	2304      	movs	r3, #4
 800c3b4:	449c      	add	ip, r3
 800c3b6:	e79c      	b.n	800c2f2 <__multiply+0x8a>
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	9302      	str	r3, [sp, #8]
 800c3be:	e79c      	b.n	800c2fa <__multiply+0x92>
 800c3c0:	0800e564 	.word	0x0800e564
 800c3c4:	0800e5f4 	.word	0x0800e5f4

0800c3c8 <__pow5mult>:
 800c3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	0015      	movs	r5, r2
 800c3ce:	0007      	movs	r7, r0
 800c3d0:	000e      	movs	r6, r1
 800c3d2:	401a      	ands	r2, r3
 800c3d4:	421d      	tst	r5, r3
 800c3d6:	d008      	beq.n	800c3ea <__pow5mult+0x22>
 800c3d8:	4925      	ldr	r1, [pc, #148]	; (800c470 <__pow5mult+0xa8>)
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	0092      	lsls	r2, r2, #2
 800c3de:	5852      	ldr	r2, [r2, r1]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	0031      	movs	r1, r6
 800c3e4:	f7ff fe52 	bl	800c08c <__multadd>
 800c3e8:	0006      	movs	r6, r0
 800c3ea:	10ad      	asrs	r5, r5, #2
 800c3ec:	d03d      	beq.n	800c46a <__pow5mult+0xa2>
 800c3ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c3f0:	2c00      	cmp	r4, #0
 800c3f2:	d10f      	bne.n	800c414 <__pow5mult+0x4c>
 800c3f4:	2010      	movs	r0, #16
 800c3f6:	f7ff fdb1 	bl	800bf5c <malloc>
 800c3fa:	1e02      	subs	r2, r0, #0
 800c3fc:	6278      	str	r0, [r7, #36]	; 0x24
 800c3fe:	d105      	bne.n	800c40c <__pow5mult+0x44>
 800c400:	21d7      	movs	r1, #215	; 0xd7
 800c402:	4b1c      	ldr	r3, [pc, #112]	; (800c474 <__pow5mult+0xac>)
 800c404:	481c      	ldr	r0, [pc, #112]	; (800c478 <__pow5mult+0xb0>)
 800c406:	0049      	lsls	r1, r1, #1
 800c408:	f001 f946 	bl	800d698 <__assert_func>
 800c40c:	6044      	str	r4, [r0, #4]
 800c40e:	6084      	str	r4, [r0, #8]
 800c410:	6004      	str	r4, [r0, #0]
 800c412:	60c4      	str	r4, [r0, #12]
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	689c      	ldr	r4, [r3, #8]
 800c418:	9301      	str	r3, [sp, #4]
 800c41a:	2c00      	cmp	r4, #0
 800c41c:	d108      	bne.n	800c430 <__pow5mult+0x68>
 800c41e:	0038      	movs	r0, r7
 800c420:	4916      	ldr	r1, [pc, #88]	; (800c47c <__pow5mult+0xb4>)
 800c422:	f7ff ff0b 	bl	800c23c <__i2b>
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	0004      	movs	r4, r0
 800c42a:	6098      	str	r0, [r3, #8]
 800c42c:	2300      	movs	r3, #0
 800c42e:	6003      	str	r3, [r0, #0]
 800c430:	2301      	movs	r3, #1
 800c432:	421d      	tst	r5, r3
 800c434:	d00a      	beq.n	800c44c <__pow5mult+0x84>
 800c436:	0031      	movs	r1, r6
 800c438:	0022      	movs	r2, r4
 800c43a:	0038      	movs	r0, r7
 800c43c:	f7ff ff14 	bl	800c268 <__multiply>
 800c440:	0031      	movs	r1, r6
 800c442:	9001      	str	r0, [sp, #4]
 800c444:	0038      	movs	r0, r7
 800c446:	f7ff fdfd 	bl	800c044 <_Bfree>
 800c44a:	9e01      	ldr	r6, [sp, #4]
 800c44c:	106d      	asrs	r5, r5, #1
 800c44e:	d00c      	beq.n	800c46a <__pow5mult+0xa2>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	2800      	cmp	r0, #0
 800c454:	d107      	bne.n	800c466 <__pow5mult+0x9e>
 800c456:	0022      	movs	r2, r4
 800c458:	0021      	movs	r1, r4
 800c45a:	0038      	movs	r0, r7
 800c45c:	f7ff ff04 	bl	800c268 <__multiply>
 800c460:	2300      	movs	r3, #0
 800c462:	6020      	str	r0, [r4, #0]
 800c464:	6003      	str	r3, [r0, #0]
 800c466:	0004      	movs	r4, r0
 800c468:	e7e2      	b.n	800c430 <__pow5mult+0x68>
 800c46a:	0030      	movs	r0, r6
 800c46c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c46e:	46c0      	nop			; (mov r8, r8)
 800c470:	0800e748 	.word	0x0800e748
 800c474:	0800e4ee 	.word	0x0800e4ee
 800c478:	0800e5f4 	.word	0x0800e5f4
 800c47c:	00000271 	.word	0x00000271

0800c480 <__lshift>:
 800c480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c482:	000c      	movs	r4, r1
 800c484:	0017      	movs	r7, r2
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	1155      	asrs	r5, r2, #5
 800c48a:	b087      	sub	sp, #28
 800c48c:	18eb      	adds	r3, r5, r3
 800c48e:	9302      	str	r3, [sp, #8]
 800c490:	3301      	adds	r3, #1
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	6849      	ldr	r1, [r1, #4]
 800c496:	68a3      	ldr	r3, [r4, #8]
 800c498:	9004      	str	r0, [sp, #16]
 800c49a:	9a01      	ldr	r2, [sp, #4]
 800c49c:	4293      	cmp	r3, r2
 800c49e:	db11      	blt.n	800c4c4 <__lshift+0x44>
 800c4a0:	9804      	ldr	r0, [sp, #16]
 800c4a2:	f7ff fd8b 	bl	800bfbc <_Balloc>
 800c4a6:	0002      	movs	r2, r0
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	3214      	adds	r2, #20
 800c4ac:	0006      	movs	r6, r0
 800c4ae:	0011      	movs	r1, r2
 800c4b0:	9203      	str	r2, [sp, #12]
 800c4b2:	4298      	cmp	r0, r3
 800c4b4:	d10d      	bne.n	800c4d2 <__lshift+0x52>
 800c4b6:	21da      	movs	r1, #218	; 0xda
 800c4b8:	0002      	movs	r2, r0
 800c4ba:	4b27      	ldr	r3, [pc, #156]	; (800c558 <__lshift+0xd8>)
 800c4bc:	4827      	ldr	r0, [pc, #156]	; (800c55c <__lshift+0xdc>)
 800c4be:	31ff      	adds	r1, #255	; 0xff
 800c4c0:	f001 f8ea 	bl	800d698 <__assert_func>
 800c4c4:	3101      	adds	r1, #1
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	e7e7      	b.n	800c49a <__lshift+0x1a>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	0098      	lsls	r0, r3, #2
 800c4ce:	500a      	str	r2, [r1, r0]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	42ab      	cmp	r3, r5
 800c4d4:	dbf9      	blt.n	800c4ca <__lshift+0x4a>
 800c4d6:	43eb      	mvns	r3, r5
 800c4d8:	17db      	asrs	r3, r3, #31
 800c4da:	401d      	ands	r5, r3
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	00ad      	lsls	r5, r5, #2
 800c4e0:	211f      	movs	r1, #31
 800c4e2:	0038      	movs	r0, r7
 800c4e4:	195d      	adds	r5, r3, r5
 800c4e6:	0023      	movs	r3, r4
 800c4e8:	6922      	ldr	r2, [r4, #16]
 800c4ea:	3314      	adds	r3, #20
 800c4ec:	0092      	lsls	r2, r2, #2
 800c4ee:	4008      	ands	r0, r1
 800c4f0:	4684      	mov	ip, r0
 800c4f2:	189a      	adds	r2, r3, r2
 800c4f4:	420f      	tst	r7, r1
 800c4f6:	d02a      	beq.n	800c54e <__lshift+0xce>
 800c4f8:	3101      	adds	r1, #1
 800c4fa:	1a09      	subs	r1, r1, r0
 800c4fc:	9105      	str	r1, [sp, #20]
 800c4fe:	2100      	movs	r1, #0
 800c500:	9503      	str	r5, [sp, #12]
 800c502:	4667      	mov	r7, ip
 800c504:	6818      	ldr	r0, [r3, #0]
 800c506:	40b8      	lsls	r0, r7
 800c508:	4301      	orrs	r1, r0
 800c50a:	9803      	ldr	r0, [sp, #12]
 800c50c:	c002      	stmia	r0!, {r1}
 800c50e:	cb02      	ldmia	r3!, {r1}
 800c510:	9003      	str	r0, [sp, #12]
 800c512:	9805      	ldr	r0, [sp, #20]
 800c514:	40c1      	lsrs	r1, r0
 800c516:	429a      	cmp	r2, r3
 800c518:	d8f3      	bhi.n	800c502 <__lshift+0x82>
 800c51a:	0020      	movs	r0, r4
 800c51c:	3015      	adds	r0, #21
 800c51e:	2304      	movs	r3, #4
 800c520:	4282      	cmp	r2, r0
 800c522:	d304      	bcc.n	800c52e <__lshift+0xae>
 800c524:	1b13      	subs	r3, r2, r4
 800c526:	3b15      	subs	r3, #21
 800c528:	089b      	lsrs	r3, r3, #2
 800c52a:	3301      	adds	r3, #1
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	50e9      	str	r1, [r5, r3]
 800c530:	2900      	cmp	r1, #0
 800c532:	d002      	beq.n	800c53a <__lshift+0xba>
 800c534:	9b02      	ldr	r3, [sp, #8]
 800c536:	3302      	adds	r3, #2
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	9804      	ldr	r0, [sp, #16]
 800c53e:	3b01      	subs	r3, #1
 800c540:	0021      	movs	r1, r4
 800c542:	6133      	str	r3, [r6, #16]
 800c544:	f7ff fd7e 	bl	800c044 <_Bfree>
 800c548:	0030      	movs	r0, r6
 800c54a:	b007      	add	sp, #28
 800c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54e:	cb02      	ldmia	r3!, {r1}
 800c550:	c502      	stmia	r5!, {r1}
 800c552:	429a      	cmp	r2, r3
 800c554:	d8fb      	bhi.n	800c54e <__lshift+0xce>
 800c556:	e7f0      	b.n	800c53a <__lshift+0xba>
 800c558:	0800e564 	.word	0x0800e564
 800c55c:	0800e5f4 	.word	0x0800e5f4

0800c560 <__mcmp>:
 800c560:	6902      	ldr	r2, [r0, #16]
 800c562:	690b      	ldr	r3, [r1, #16]
 800c564:	b530      	push	{r4, r5, lr}
 800c566:	0004      	movs	r4, r0
 800c568:	1ad0      	subs	r0, r2, r3
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d10d      	bne.n	800c58a <__mcmp+0x2a>
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	3414      	adds	r4, #20
 800c572:	3114      	adds	r1, #20
 800c574:	18e2      	adds	r2, r4, r3
 800c576:	18c9      	adds	r1, r1, r3
 800c578:	3a04      	subs	r2, #4
 800c57a:	3904      	subs	r1, #4
 800c57c:	6815      	ldr	r5, [r2, #0]
 800c57e:	680b      	ldr	r3, [r1, #0]
 800c580:	429d      	cmp	r5, r3
 800c582:	d003      	beq.n	800c58c <__mcmp+0x2c>
 800c584:	2001      	movs	r0, #1
 800c586:	429d      	cmp	r5, r3
 800c588:	d303      	bcc.n	800c592 <__mcmp+0x32>
 800c58a:	bd30      	pop	{r4, r5, pc}
 800c58c:	4294      	cmp	r4, r2
 800c58e:	d3f3      	bcc.n	800c578 <__mcmp+0x18>
 800c590:	e7fb      	b.n	800c58a <__mcmp+0x2a>
 800c592:	4240      	negs	r0, r0
 800c594:	e7f9      	b.n	800c58a <__mcmp+0x2a>
	...

0800c598 <__mdiff>:
 800c598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59a:	000e      	movs	r6, r1
 800c59c:	0007      	movs	r7, r0
 800c59e:	0011      	movs	r1, r2
 800c5a0:	0030      	movs	r0, r6
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	0014      	movs	r4, r2
 800c5a6:	f7ff ffdb 	bl	800c560 <__mcmp>
 800c5aa:	1e05      	subs	r5, r0, #0
 800c5ac:	d110      	bne.n	800c5d0 <__mdiff+0x38>
 800c5ae:	0001      	movs	r1, r0
 800c5b0:	0038      	movs	r0, r7
 800c5b2:	f7ff fd03 	bl	800bfbc <_Balloc>
 800c5b6:	1e02      	subs	r2, r0, #0
 800c5b8:	d104      	bne.n	800c5c4 <__mdiff+0x2c>
 800c5ba:	4b40      	ldr	r3, [pc, #256]	; (800c6bc <__mdiff+0x124>)
 800c5bc:	4940      	ldr	r1, [pc, #256]	; (800c6c0 <__mdiff+0x128>)
 800c5be:	4841      	ldr	r0, [pc, #260]	; (800c6c4 <__mdiff+0x12c>)
 800c5c0:	f001 f86a 	bl	800d698 <__assert_func>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	6145      	str	r5, [r0, #20]
 800c5c8:	6103      	str	r3, [r0, #16]
 800c5ca:	0010      	movs	r0, r2
 800c5cc:	b007      	add	sp, #28
 800c5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	db04      	blt.n	800c5e2 <__mdiff+0x4a>
 800c5d8:	0023      	movs	r3, r4
 800c5da:	0034      	movs	r4, r6
 800c5dc:	001e      	movs	r6, r3
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	0038      	movs	r0, r7
 800c5e4:	6861      	ldr	r1, [r4, #4]
 800c5e6:	f7ff fce9 	bl	800bfbc <_Balloc>
 800c5ea:	1e02      	subs	r2, r0, #0
 800c5ec:	d103      	bne.n	800c5f6 <__mdiff+0x5e>
 800c5ee:	2190      	movs	r1, #144	; 0x90
 800c5f0:	4b32      	ldr	r3, [pc, #200]	; (800c6bc <__mdiff+0x124>)
 800c5f2:	0089      	lsls	r1, r1, #2
 800c5f4:	e7e3      	b.n	800c5be <__mdiff+0x26>
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	2700      	movs	r7, #0
 800c5fa:	60c3      	str	r3, [r0, #12]
 800c5fc:	6920      	ldr	r0, [r4, #16]
 800c5fe:	3414      	adds	r4, #20
 800c600:	9401      	str	r4, [sp, #4]
 800c602:	9b01      	ldr	r3, [sp, #4]
 800c604:	0084      	lsls	r4, r0, #2
 800c606:	191b      	adds	r3, r3, r4
 800c608:	0034      	movs	r4, r6
 800c60a:	9302      	str	r3, [sp, #8]
 800c60c:	6933      	ldr	r3, [r6, #16]
 800c60e:	3414      	adds	r4, #20
 800c610:	0099      	lsls	r1, r3, #2
 800c612:	1863      	adds	r3, r4, r1
 800c614:	9303      	str	r3, [sp, #12]
 800c616:	0013      	movs	r3, r2
 800c618:	3314      	adds	r3, #20
 800c61a:	469c      	mov	ip, r3
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	9b04      	ldr	r3, [sp, #16]
 800c624:	cc02      	ldmia	r4!, {r1}
 800c626:	cb20      	ldmia	r3!, {r5}
 800c628:	9304      	str	r3, [sp, #16]
 800c62a:	b2ab      	uxth	r3, r5
 800c62c:	19df      	adds	r7, r3, r7
 800c62e:	b28b      	uxth	r3, r1
 800c630:	1afb      	subs	r3, r7, r3
 800c632:	0c2d      	lsrs	r5, r5, #16
 800c634:	0c09      	lsrs	r1, r1, #16
 800c636:	1a69      	subs	r1, r5, r1
 800c638:	141d      	asrs	r5, r3, #16
 800c63a:	1949      	adds	r1, r1, r5
 800c63c:	140f      	asrs	r7, r1, #16
 800c63e:	b29b      	uxth	r3, r3
 800c640:	0409      	lsls	r1, r1, #16
 800c642:	430b      	orrs	r3, r1
 800c644:	4661      	mov	r1, ip
 800c646:	c108      	stmia	r1!, {r3}
 800c648:	9b03      	ldr	r3, [sp, #12]
 800c64a:	468c      	mov	ip, r1
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	d8e8      	bhi.n	800c622 <__mdiff+0x8a>
 800c650:	0031      	movs	r1, r6
 800c652:	9c03      	ldr	r4, [sp, #12]
 800c654:	3115      	adds	r1, #21
 800c656:	2304      	movs	r3, #4
 800c658:	428c      	cmp	r4, r1
 800c65a:	d304      	bcc.n	800c666 <__mdiff+0xce>
 800c65c:	1ba3      	subs	r3, r4, r6
 800c65e:	3b15      	subs	r3, #21
 800c660:	089b      	lsrs	r3, r3, #2
 800c662:	3301      	adds	r3, #1
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	9901      	ldr	r1, [sp, #4]
 800c668:	18cc      	adds	r4, r1, r3
 800c66a:	9905      	ldr	r1, [sp, #20]
 800c66c:	0026      	movs	r6, r4
 800c66e:	18cb      	adds	r3, r1, r3
 800c670:	469c      	mov	ip, r3
 800c672:	9902      	ldr	r1, [sp, #8]
 800c674:	428e      	cmp	r6, r1
 800c676:	d310      	bcc.n	800c69a <__mdiff+0x102>
 800c678:	9e02      	ldr	r6, [sp, #8]
 800c67a:	1ee5      	subs	r5, r4, #3
 800c67c:	2100      	movs	r1, #0
 800c67e:	42ae      	cmp	r6, r5
 800c680:	d304      	bcc.n	800c68c <__mdiff+0xf4>
 800c682:	0031      	movs	r1, r6
 800c684:	3103      	adds	r1, #3
 800c686:	1b09      	subs	r1, r1, r4
 800c688:	0889      	lsrs	r1, r1, #2
 800c68a:	0089      	lsls	r1, r1, #2
 800c68c:	185b      	adds	r3, r3, r1
 800c68e:	3b04      	subs	r3, #4
 800c690:	6819      	ldr	r1, [r3, #0]
 800c692:	2900      	cmp	r1, #0
 800c694:	d00f      	beq.n	800c6b6 <__mdiff+0x11e>
 800c696:	6110      	str	r0, [r2, #16]
 800c698:	e797      	b.n	800c5ca <__mdiff+0x32>
 800c69a:	ce02      	ldmia	r6!, {r1}
 800c69c:	b28d      	uxth	r5, r1
 800c69e:	19ed      	adds	r5, r5, r7
 800c6a0:	0c0f      	lsrs	r7, r1, #16
 800c6a2:	1429      	asrs	r1, r5, #16
 800c6a4:	1879      	adds	r1, r7, r1
 800c6a6:	140f      	asrs	r7, r1, #16
 800c6a8:	b2ad      	uxth	r5, r5
 800c6aa:	0409      	lsls	r1, r1, #16
 800c6ac:	430d      	orrs	r5, r1
 800c6ae:	4661      	mov	r1, ip
 800c6b0:	c120      	stmia	r1!, {r5}
 800c6b2:	468c      	mov	ip, r1
 800c6b4:	e7dd      	b.n	800c672 <__mdiff+0xda>
 800c6b6:	3801      	subs	r0, #1
 800c6b8:	e7e9      	b.n	800c68e <__mdiff+0xf6>
 800c6ba:	46c0      	nop			; (mov r8, r8)
 800c6bc:	0800e564 	.word	0x0800e564
 800c6c0:	00000232 	.word	0x00000232
 800c6c4:	0800e5f4 	.word	0x0800e5f4

0800c6c8 <__ulp>:
 800c6c8:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <__ulp+0x40>)
 800c6ca:	4019      	ands	r1, r3
 800c6cc:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <__ulp+0x44>)
 800c6ce:	18c9      	adds	r1, r1, r3
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	dd04      	ble.n	800c6de <__ulp+0x16>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	000b      	movs	r3, r1
 800c6d8:	0010      	movs	r0, r2
 800c6da:	0019      	movs	r1, r3
 800c6dc:	4770      	bx	lr
 800c6de:	4249      	negs	r1, r1
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	1509      	asrs	r1, r1, #20
 800c6e6:	2913      	cmp	r1, #19
 800c6e8:	dc04      	bgt.n	800c6f4 <__ulp+0x2c>
 800c6ea:	2080      	movs	r0, #128	; 0x80
 800c6ec:	0300      	lsls	r0, r0, #12
 800c6ee:	4108      	asrs	r0, r1
 800c6f0:	0003      	movs	r3, r0
 800c6f2:	e7f1      	b.n	800c6d8 <__ulp+0x10>
 800c6f4:	3914      	subs	r1, #20
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	291e      	cmp	r1, #30
 800c6fa:	dc02      	bgt.n	800c702 <__ulp+0x3a>
 800c6fc:	2080      	movs	r0, #128	; 0x80
 800c6fe:	0600      	lsls	r0, r0, #24
 800c700:	40c8      	lsrs	r0, r1
 800c702:	0002      	movs	r2, r0
 800c704:	e7e8      	b.n	800c6d8 <__ulp+0x10>
 800c706:	46c0      	nop			; (mov r8, r8)
 800c708:	7ff00000 	.word	0x7ff00000
 800c70c:	fcc00000 	.word	0xfcc00000

0800c710 <__b2d>:
 800c710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c712:	0006      	movs	r6, r0
 800c714:	6903      	ldr	r3, [r0, #16]
 800c716:	3614      	adds	r6, #20
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	18f3      	adds	r3, r6, r3
 800c71c:	1f1d      	subs	r5, r3, #4
 800c71e:	682c      	ldr	r4, [r5, #0]
 800c720:	000f      	movs	r7, r1
 800c722:	0020      	movs	r0, r4
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	f7ff fd41 	bl	800c1ac <__hi0bits>
 800c72a:	2320      	movs	r3, #32
 800c72c:	1a1b      	subs	r3, r3, r0
 800c72e:	491f      	ldr	r1, [pc, #124]	; (800c7ac <__b2d+0x9c>)
 800c730:	603b      	str	r3, [r7, #0]
 800c732:	280a      	cmp	r0, #10
 800c734:	dc16      	bgt.n	800c764 <__b2d+0x54>
 800c736:	230b      	movs	r3, #11
 800c738:	0027      	movs	r7, r4
 800c73a:	1a1b      	subs	r3, r3, r0
 800c73c:	40df      	lsrs	r7, r3
 800c73e:	4339      	orrs	r1, r7
 800c740:	469c      	mov	ip, r3
 800c742:	000b      	movs	r3, r1
 800c744:	2100      	movs	r1, #0
 800c746:	42ae      	cmp	r6, r5
 800c748:	d202      	bcs.n	800c750 <__b2d+0x40>
 800c74a:	9901      	ldr	r1, [sp, #4]
 800c74c:	3908      	subs	r1, #8
 800c74e:	6809      	ldr	r1, [r1, #0]
 800c750:	3015      	adds	r0, #21
 800c752:	4084      	lsls	r4, r0
 800c754:	4660      	mov	r0, ip
 800c756:	40c1      	lsrs	r1, r0
 800c758:	430c      	orrs	r4, r1
 800c75a:	0022      	movs	r2, r4
 800c75c:	0010      	movs	r0, r2
 800c75e:	0019      	movs	r1, r3
 800c760:	b003      	add	sp, #12
 800c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c764:	2700      	movs	r7, #0
 800c766:	42ae      	cmp	r6, r5
 800c768:	d202      	bcs.n	800c770 <__b2d+0x60>
 800c76a:	9d01      	ldr	r5, [sp, #4]
 800c76c:	3d08      	subs	r5, #8
 800c76e:	682f      	ldr	r7, [r5, #0]
 800c770:	230b      	movs	r3, #11
 800c772:	425b      	negs	r3, r3
 800c774:	469c      	mov	ip, r3
 800c776:	4484      	add	ip, r0
 800c778:	280b      	cmp	r0, #11
 800c77a:	d013      	beq.n	800c7a4 <__b2d+0x94>
 800c77c:	4663      	mov	r3, ip
 800c77e:	2020      	movs	r0, #32
 800c780:	409c      	lsls	r4, r3
 800c782:	1ac0      	subs	r0, r0, r3
 800c784:	003b      	movs	r3, r7
 800c786:	40c3      	lsrs	r3, r0
 800c788:	431c      	orrs	r4, r3
 800c78a:	4321      	orrs	r1, r4
 800c78c:	000b      	movs	r3, r1
 800c78e:	2100      	movs	r1, #0
 800c790:	42b5      	cmp	r5, r6
 800c792:	d901      	bls.n	800c798 <__b2d+0x88>
 800c794:	3d04      	subs	r5, #4
 800c796:	6829      	ldr	r1, [r5, #0]
 800c798:	4664      	mov	r4, ip
 800c79a:	40c1      	lsrs	r1, r0
 800c79c:	40a7      	lsls	r7, r4
 800c79e:	430f      	orrs	r7, r1
 800c7a0:	003a      	movs	r2, r7
 800c7a2:	e7db      	b.n	800c75c <__b2d+0x4c>
 800c7a4:	4321      	orrs	r1, r4
 800c7a6:	000b      	movs	r3, r1
 800c7a8:	e7fa      	b.n	800c7a0 <__b2d+0x90>
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	3ff00000 	.word	0x3ff00000

0800c7b0 <__d2b>:
 800c7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	0014      	movs	r4, r2
 800c7b6:	001e      	movs	r6, r3
 800c7b8:	9f08      	ldr	r7, [sp, #32]
 800c7ba:	f7ff fbff 	bl	800bfbc <_Balloc>
 800c7be:	1e05      	subs	r5, r0, #0
 800c7c0:	d105      	bne.n	800c7ce <__d2b+0x1e>
 800c7c2:	0002      	movs	r2, r0
 800c7c4:	4b26      	ldr	r3, [pc, #152]	; (800c860 <__d2b+0xb0>)
 800c7c6:	4927      	ldr	r1, [pc, #156]	; (800c864 <__d2b+0xb4>)
 800c7c8:	4827      	ldr	r0, [pc, #156]	; (800c868 <__d2b+0xb8>)
 800c7ca:	f000 ff65 	bl	800d698 <__assert_func>
 800c7ce:	0333      	lsls	r3, r6, #12
 800c7d0:	0076      	lsls	r6, r6, #1
 800c7d2:	0b1b      	lsrs	r3, r3, #12
 800c7d4:	0d76      	lsrs	r6, r6, #21
 800c7d6:	d124      	bne.n	800c822 <__d2b+0x72>
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	d027      	beq.n	800c82e <__d2b+0x7e>
 800c7de:	4668      	mov	r0, sp
 800c7e0:	9400      	str	r4, [sp, #0]
 800c7e2:	f7ff fcfd 	bl	800c1e0 <__lo0bits>
 800c7e6:	9c00      	ldr	r4, [sp, #0]
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d01e      	beq.n	800c82a <__d2b+0x7a>
 800c7ec:	9b01      	ldr	r3, [sp, #4]
 800c7ee:	2120      	movs	r1, #32
 800c7f0:	001a      	movs	r2, r3
 800c7f2:	1a09      	subs	r1, r1, r0
 800c7f4:	408a      	lsls	r2, r1
 800c7f6:	40c3      	lsrs	r3, r0
 800c7f8:	4322      	orrs	r2, r4
 800c7fa:	616a      	str	r2, [r5, #20]
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	9c01      	ldr	r4, [sp, #4]
 800c800:	61ac      	str	r4, [r5, #24]
 800c802:	1e63      	subs	r3, r4, #1
 800c804:	419c      	sbcs	r4, r3
 800c806:	3401      	adds	r4, #1
 800c808:	612c      	str	r4, [r5, #16]
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	d018      	beq.n	800c840 <__d2b+0x90>
 800c80e:	4b17      	ldr	r3, [pc, #92]	; (800c86c <__d2b+0xbc>)
 800c810:	18f6      	adds	r6, r6, r3
 800c812:	2335      	movs	r3, #53	; 0x35
 800c814:	1836      	adds	r6, r6, r0
 800c816:	1a18      	subs	r0, r3, r0
 800c818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81a:	603e      	str	r6, [r7, #0]
 800c81c:	6018      	str	r0, [r3, #0]
 800c81e:	0028      	movs	r0, r5
 800c820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c822:	2280      	movs	r2, #128	; 0x80
 800c824:	0352      	lsls	r2, r2, #13
 800c826:	4313      	orrs	r3, r2
 800c828:	e7d6      	b.n	800c7d8 <__d2b+0x28>
 800c82a:	616c      	str	r4, [r5, #20]
 800c82c:	e7e7      	b.n	800c7fe <__d2b+0x4e>
 800c82e:	a801      	add	r0, sp, #4
 800c830:	f7ff fcd6 	bl	800c1e0 <__lo0bits>
 800c834:	2401      	movs	r4, #1
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	612c      	str	r4, [r5, #16]
 800c83a:	616b      	str	r3, [r5, #20]
 800c83c:	3020      	adds	r0, #32
 800c83e:	e7e4      	b.n	800c80a <__d2b+0x5a>
 800c840:	4b0b      	ldr	r3, [pc, #44]	; (800c870 <__d2b+0xc0>)
 800c842:	18c0      	adds	r0, r0, r3
 800c844:	4b0b      	ldr	r3, [pc, #44]	; (800c874 <__d2b+0xc4>)
 800c846:	6038      	str	r0, [r7, #0]
 800c848:	18e3      	adds	r3, r4, r3
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	18eb      	adds	r3, r5, r3
 800c84e:	6958      	ldr	r0, [r3, #20]
 800c850:	f7ff fcac 	bl	800c1ac <__hi0bits>
 800c854:	0164      	lsls	r4, r4, #5
 800c856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c858:	1a24      	subs	r4, r4, r0
 800c85a:	601c      	str	r4, [r3, #0]
 800c85c:	e7df      	b.n	800c81e <__d2b+0x6e>
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	0800e564 	.word	0x0800e564
 800c864:	0000030a 	.word	0x0000030a
 800c868:	0800e5f4 	.word	0x0800e5f4
 800c86c:	fffffbcd 	.word	0xfffffbcd
 800c870:	fffffbce 	.word	0xfffffbce
 800c874:	3fffffff 	.word	0x3fffffff

0800c878 <__ratio>:
 800c878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87a:	b085      	sub	sp, #20
 800c87c:	000d      	movs	r5, r1
 800c87e:	a902      	add	r1, sp, #8
 800c880:	0004      	movs	r4, r0
 800c882:	f7ff ff45 	bl	800c710 <__b2d>
 800c886:	9000      	str	r0, [sp, #0]
 800c888:	9101      	str	r1, [sp, #4]
 800c88a:	9e00      	ldr	r6, [sp, #0]
 800c88c:	9f01      	ldr	r7, [sp, #4]
 800c88e:	0028      	movs	r0, r5
 800c890:	a903      	add	r1, sp, #12
 800c892:	f7ff ff3d 	bl	800c710 <__b2d>
 800c896:	6924      	ldr	r4, [r4, #16]
 800c898:	692d      	ldr	r5, [r5, #16]
 800c89a:	0002      	movs	r2, r0
 800c89c:	1b65      	subs	r5, r4, r5
 800c89e:	016c      	lsls	r4, r5, #5
 800c8a0:	46a4      	mov	ip, r4
 800c8a2:	9d03      	ldr	r5, [sp, #12]
 800c8a4:	9c02      	ldr	r4, [sp, #8]
 800c8a6:	000b      	movs	r3, r1
 800c8a8:	1b64      	subs	r4, r4, r5
 800c8aa:	4464      	add	r4, ip
 800c8ac:	0525      	lsls	r5, r4, #20
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	dd07      	ble.n	800c8c2 <__ratio+0x4a>
 800c8b2:	9901      	ldr	r1, [sp, #4]
 800c8b4:	186f      	adds	r7, r5, r1
 800c8b6:	0030      	movs	r0, r6
 800c8b8:	0039      	movs	r1, r7
 800c8ba:	f7f4 fc81 	bl	80011c0 <__aeabi_ddiv>
 800c8be:	b005      	add	sp, #20
 800c8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c2:	1b4b      	subs	r3, r1, r5
 800c8c4:	e7f7      	b.n	800c8b6 <__ratio+0x3e>

0800c8c6 <__copybits>:
 800c8c6:	b570      	push	{r4, r5, r6, lr}
 800c8c8:	0015      	movs	r5, r2
 800c8ca:	6913      	ldr	r3, [r2, #16]
 800c8cc:	3514      	adds	r5, #20
 800c8ce:	009c      	lsls	r4, r3, #2
 800c8d0:	0006      	movs	r6, r0
 800c8d2:	002b      	movs	r3, r5
 800c8d4:	3901      	subs	r1, #1
 800c8d6:	1149      	asrs	r1, r1, #5
 800c8d8:	3101      	adds	r1, #1
 800c8da:	0089      	lsls	r1, r1, #2
 800c8dc:	1841      	adds	r1, r0, r1
 800c8de:	192c      	adds	r4, r5, r4
 800c8e0:	429c      	cmp	r4, r3
 800c8e2:	d80d      	bhi.n	800c900 <__copybits+0x3a>
 800c8e4:	0015      	movs	r5, r2
 800c8e6:	3511      	adds	r5, #17
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	42a5      	cmp	r5, r4
 800c8ec:	d803      	bhi.n	800c8f6 <__copybits+0x30>
 800c8ee:	1aa3      	subs	r3, r4, r2
 800c8f0:	3b11      	subs	r3, #17
 800c8f2:	089b      	lsrs	r3, r3, #2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	18c0      	adds	r0, r0, r3
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4281      	cmp	r1, r0
 800c8fc:	d803      	bhi.n	800c906 <__copybits+0x40>
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	cb20      	ldmia	r3!, {r5}
 800c902:	c620      	stmia	r6!, {r5}
 800c904:	e7ec      	b.n	800c8e0 <__copybits+0x1a>
 800c906:	c008      	stmia	r0!, {r3}
 800c908:	e7f7      	b.n	800c8fa <__copybits+0x34>

0800c90a <__any_on>:
 800c90a:	0002      	movs	r2, r0
 800c90c:	6900      	ldr	r0, [r0, #16]
 800c90e:	b510      	push	{r4, lr}
 800c910:	3214      	adds	r2, #20
 800c912:	114b      	asrs	r3, r1, #5
 800c914:	4298      	cmp	r0, r3
 800c916:	db13      	blt.n	800c940 <__any_on+0x36>
 800c918:	dd0c      	ble.n	800c934 <__any_on+0x2a>
 800c91a:	241f      	movs	r4, #31
 800c91c:	0008      	movs	r0, r1
 800c91e:	4020      	ands	r0, r4
 800c920:	4221      	tst	r1, r4
 800c922:	d007      	beq.n	800c934 <__any_on+0x2a>
 800c924:	0099      	lsls	r1, r3, #2
 800c926:	588c      	ldr	r4, [r1, r2]
 800c928:	0021      	movs	r1, r4
 800c92a:	40c1      	lsrs	r1, r0
 800c92c:	4081      	lsls	r1, r0
 800c92e:	2001      	movs	r0, #1
 800c930:	428c      	cmp	r4, r1
 800c932:	d104      	bne.n	800c93e <__any_on+0x34>
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	18d3      	adds	r3, r2, r3
 800c938:	4293      	cmp	r3, r2
 800c93a:	d803      	bhi.n	800c944 <__any_on+0x3a>
 800c93c:	2000      	movs	r0, #0
 800c93e:	bd10      	pop	{r4, pc}
 800c940:	0003      	movs	r3, r0
 800c942:	e7f7      	b.n	800c934 <__any_on+0x2a>
 800c944:	3b04      	subs	r3, #4
 800c946:	6819      	ldr	r1, [r3, #0]
 800c948:	2900      	cmp	r1, #0
 800c94a:	d0f5      	beq.n	800c938 <__any_on+0x2e>
 800c94c:	2001      	movs	r0, #1
 800c94e:	e7f6      	b.n	800c93e <__any_on+0x34>

0800c950 <_calloc_r>:
 800c950:	434a      	muls	r2, r1
 800c952:	b570      	push	{r4, r5, r6, lr}
 800c954:	0011      	movs	r1, r2
 800c956:	0015      	movs	r5, r2
 800c958:	f000 f852 	bl	800ca00 <_malloc_r>
 800c95c:	1e04      	subs	r4, r0, #0
 800c95e:	d003      	beq.n	800c968 <_calloc_r+0x18>
 800c960:	002a      	movs	r2, r5
 800c962:	2100      	movs	r1, #0
 800c964:	f7fc fa9e 	bl	8008ea4 <memset>
 800c968:	0020      	movs	r0, r4
 800c96a:	bd70      	pop	{r4, r5, r6, pc}

0800c96c <_free_r>:
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	0005      	movs	r5, r0
 800c970:	2900      	cmp	r1, #0
 800c972:	d010      	beq.n	800c996 <_free_r+0x2a>
 800c974:	1f0c      	subs	r4, r1, #4
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	da00      	bge.n	800c97e <_free_r+0x12>
 800c97c:	18e4      	adds	r4, r4, r3
 800c97e:	0028      	movs	r0, r5
 800c980:	f001 f89c 	bl	800dabc <__malloc_lock>
 800c984:	4a1d      	ldr	r2, [pc, #116]	; (800c9fc <_free_r+0x90>)
 800c986:	6813      	ldr	r3, [r2, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d105      	bne.n	800c998 <_free_r+0x2c>
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6014      	str	r4, [r2, #0]
 800c990:	0028      	movs	r0, r5
 800c992:	f001 f89b 	bl	800dacc <__malloc_unlock>
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	42a3      	cmp	r3, r4
 800c99a:	d908      	bls.n	800c9ae <_free_r+0x42>
 800c99c:	6821      	ldr	r1, [r4, #0]
 800c99e:	1860      	adds	r0, r4, r1
 800c9a0:	4283      	cmp	r3, r0
 800c9a2:	d1f3      	bne.n	800c98c <_free_r+0x20>
 800c9a4:	6818      	ldr	r0, [r3, #0]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	1841      	adds	r1, r0, r1
 800c9aa:	6021      	str	r1, [r4, #0]
 800c9ac:	e7ee      	b.n	800c98c <_free_r+0x20>
 800c9ae:	001a      	movs	r2, r3
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <_free_r+0x4e>
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	d9f9      	bls.n	800c9ae <_free_r+0x42>
 800c9ba:	6811      	ldr	r1, [r2, #0]
 800c9bc:	1850      	adds	r0, r2, r1
 800c9be:	42a0      	cmp	r0, r4
 800c9c0:	d10b      	bne.n	800c9da <_free_r+0x6e>
 800c9c2:	6820      	ldr	r0, [r4, #0]
 800c9c4:	1809      	adds	r1, r1, r0
 800c9c6:	1850      	adds	r0, r2, r1
 800c9c8:	6011      	str	r1, [r2, #0]
 800c9ca:	4283      	cmp	r3, r0
 800c9cc:	d1e0      	bne.n	800c990 <_free_r+0x24>
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	1841      	adds	r1, r0, r1
 800c9d4:	6011      	str	r1, [r2, #0]
 800c9d6:	6053      	str	r3, [r2, #4]
 800c9d8:	e7da      	b.n	800c990 <_free_r+0x24>
 800c9da:	42a0      	cmp	r0, r4
 800c9dc:	d902      	bls.n	800c9e4 <_free_r+0x78>
 800c9de:	230c      	movs	r3, #12
 800c9e0:	602b      	str	r3, [r5, #0]
 800c9e2:	e7d5      	b.n	800c990 <_free_r+0x24>
 800c9e4:	6821      	ldr	r1, [r4, #0]
 800c9e6:	1860      	adds	r0, r4, r1
 800c9e8:	4283      	cmp	r3, r0
 800c9ea:	d103      	bne.n	800c9f4 <_free_r+0x88>
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	1841      	adds	r1, r0, r1
 800c9f2:	6021      	str	r1, [r4, #0]
 800c9f4:	6063      	str	r3, [r4, #4]
 800c9f6:	6054      	str	r4, [r2, #4]
 800c9f8:	e7ca      	b.n	800c990 <_free_r+0x24>
 800c9fa:	46c0      	nop			; (mov r8, r8)
 800c9fc:	200003d4 	.word	0x200003d4

0800ca00 <_malloc_r>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	2303      	movs	r3, #3
 800ca04:	1ccd      	adds	r5, r1, #3
 800ca06:	439d      	bics	r5, r3
 800ca08:	3508      	adds	r5, #8
 800ca0a:	0006      	movs	r6, r0
 800ca0c:	2d0c      	cmp	r5, #12
 800ca0e:	d21f      	bcs.n	800ca50 <_malloc_r+0x50>
 800ca10:	250c      	movs	r5, #12
 800ca12:	42a9      	cmp	r1, r5
 800ca14:	d81e      	bhi.n	800ca54 <_malloc_r+0x54>
 800ca16:	0030      	movs	r0, r6
 800ca18:	f001 f850 	bl	800dabc <__malloc_lock>
 800ca1c:	4925      	ldr	r1, [pc, #148]	; (800cab4 <_malloc_r+0xb4>)
 800ca1e:	680a      	ldr	r2, [r1, #0]
 800ca20:	0014      	movs	r4, r2
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	d11a      	bne.n	800ca5c <_malloc_r+0x5c>
 800ca26:	4f24      	ldr	r7, [pc, #144]	; (800cab8 <_malloc_r+0xb8>)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d104      	bne.n	800ca38 <_malloc_r+0x38>
 800ca2e:	0021      	movs	r1, r4
 800ca30:	0030      	movs	r0, r6
 800ca32:	f000 fcf5 	bl	800d420 <_sbrk_r>
 800ca36:	6038      	str	r0, [r7, #0]
 800ca38:	0029      	movs	r1, r5
 800ca3a:	0030      	movs	r0, r6
 800ca3c:	f000 fcf0 	bl	800d420 <_sbrk_r>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d12b      	bne.n	800ca9c <_malloc_r+0x9c>
 800ca44:	230c      	movs	r3, #12
 800ca46:	0030      	movs	r0, r6
 800ca48:	6033      	str	r3, [r6, #0]
 800ca4a:	f001 f83f 	bl	800dacc <__malloc_unlock>
 800ca4e:	e003      	b.n	800ca58 <_malloc_r+0x58>
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	dade      	bge.n	800ca12 <_malloc_r+0x12>
 800ca54:	230c      	movs	r3, #12
 800ca56:	6033      	str	r3, [r6, #0]
 800ca58:	2000      	movs	r0, #0
 800ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	1b5b      	subs	r3, r3, r5
 800ca60:	d419      	bmi.n	800ca96 <_malloc_r+0x96>
 800ca62:	2b0b      	cmp	r3, #11
 800ca64:	d903      	bls.n	800ca6e <_malloc_r+0x6e>
 800ca66:	6023      	str	r3, [r4, #0]
 800ca68:	18e4      	adds	r4, r4, r3
 800ca6a:	6025      	str	r5, [r4, #0]
 800ca6c:	e003      	b.n	800ca76 <_malloc_r+0x76>
 800ca6e:	6863      	ldr	r3, [r4, #4]
 800ca70:	42a2      	cmp	r2, r4
 800ca72:	d10e      	bne.n	800ca92 <_malloc_r+0x92>
 800ca74:	600b      	str	r3, [r1, #0]
 800ca76:	0030      	movs	r0, r6
 800ca78:	f001 f828 	bl	800dacc <__malloc_unlock>
 800ca7c:	0020      	movs	r0, r4
 800ca7e:	2207      	movs	r2, #7
 800ca80:	300b      	adds	r0, #11
 800ca82:	1d23      	adds	r3, r4, #4
 800ca84:	4390      	bics	r0, r2
 800ca86:	1ac2      	subs	r2, r0, r3
 800ca88:	4298      	cmp	r0, r3
 800ca8a:	d0e6      	beq.n	800ca5a <_malloc_r+0x5a>
 800ca8c:	1a1b      	subs	r3, r3, r0
 800ca8e:	50a3      	str	r3, [r4, r2]
 800ca90:	e7e3      	b.n	800ca5a <_malloc_r+0x5a>
 800ca92:	6053      	str	r3, [r2, #4]
 800ca94:	e7ef      	b.n	800ca76 <_malloc_r+0x76>
 800ca96:	0022      	movs	r2, r4
 800ca98:	6864      	ldr	r4, [r4, #4]
 800ca9a:	e7c2      	b.n	800ca22 <_malloc_r+0x22>
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	1cc4      	adds	r4, r0, #3
 800caa0:	439c      	bics	r4, r3
 800caa2:	42a0      	cmp	r0, r4
 800caa4:	d0e1      	beq.n	800ca6a <_malloc_r+0x6a>
 800caa6:	1a21      	subs	r1, r4, r0
 800caa8:	0030      	movs	r0, r6
 800caaa:	f000 fcb9 	bl	800d420 <_sbrk_r>
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	d1db      	bne.n	800ca6a <_malloc_r+0x6a>
 800cab2:	e7c7      	b.n	800ca44 <_malloc_r+0x44>
 800cab4:	200003d4 	.word	0x200003d4
 800cab8:	200003d8 	.word	0x200003d8

0800cabc <__ssputs_r>:
 800cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabe:	688e      	ldr	r6, [r1, #8]
 800cac0:	b085      	sub	sp, #20
 800cac2:	0007      	movs	r7, r0
 800cac4:	000c      	movs	r4, r1
 800cac6:	9203      	str	r2, [sp, #12]
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	429e      	cmp	r6, r3
 800cacc:	d83c      	bhi.n	800cb48 <__ssputs_r+0x8c>
 800cace:	2390      	movs	r3, #144	; 0x90
 800cad0:	898a      	ldrh	r2, [r1, #12]
 800cad2:	00db      	lsls	r3, r3, #3
 800cad4:	421a      	tst	r2, r3
 800cad6:	d034      	beq.n	800cb42 <__ssputs_r+0x86>
 800cad8:	2503      	movs	r5, #3
 800cada:	6909      	ldr	r1, [r1, #16]
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	1a5b      	subs	r3, r3, r1
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	6963      	ldr	r3, [r4, #20]
 800cae4:	9802      	ldr	r0, [sp, #8]
 800cae6:	435d      	muls	r5, r3
 800cae8:	0feb      	lsrs	r3, r5, #31
 800caea:	195d      	adds	r5, r3, r5
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	106d      	asrs	r5, r5, #1
 800caf0:	3301      	adds	r3, #1
 800caf2:	181b      	adds	r3, r3, r0
 800caf4:	42ab      	cmp	r3, r5
 800caf6:	d900      	bls.n	800cafa <__ssputs_r+0x3e>
 800caf8:	001d      	movs	r5, r3
 800cafa:	0553      	lsls	r3, r2, #21
 800cafc:	d532      	bpl.n	800cb64 <__ssputs_r+0xa8>
 800cafe:	0029      	movs	r1, r5
 800cb00:	0038      	movs	r0, r7
 800cb02:	f7ff ff7d 	bl	800ca00 <_malloc_r>
 800cb06:	1e06      	subs	r6, r0, #0
 800cb08:	d109      	bne.n	800cb1e <__ssputs_r+0x62>
 800cb0a:	230c      	movs	r3, #12
 800cb0c:	603b      	str	r3, [r7, #0]
 800cb0e:	2340      	movs	r3, #64	; 0x40
 800cb10:	2001      	movs	r0, #1
 800cb12:	89a2      	ldrh	r2, [r4, #12]
 800cb14:	4240      	negs	r0, r0
 800cb16:	4313      	orrs	r3, r2
 800cb18:	81a3      	strh	r3, [r4, #12]
 800cb1a:	b005      	add	sp, #20
 800cb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb1e:	9a02      	ldr	r2, [sp, #8]
 800cb20:	6921      	ldr	r1, [r4, #16]
 800cb22:	f7ff fa42 	bl	800bfaa <memcpy>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	4a14      	ldr	r2, [pc, #80]	; (800cb7c <__ssputs_r+0xc0>)
 800cb2a:	401a      	ands	r2, r3
 800cb2c:	2380      	movs	r3, #128	; 0x80
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	81a3      	strh	r3, [r4, #12]
 800cb32:	9b02      	ldr	r3, [sp, #8]
 800cb34:	6126      	str	r6, [r4, #16]
 800cb36:	18f6      	adds	r6, r6, r3
 800cb38:	6026      	str	r6, [r4, #0]
 800cb3a:	6165      	str	r5, [r4, #20]
 800cb3c:	9e01      	ldr	r6, [sp, #4]
 800cb3e:	1aed      	subs	r5, r5, r3
 800cb40:	60a5      	str	r5, [r4, #8]
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	429e      	cmp	r6, r3
 800cb46:	d900      	bls.n	800cb4a <__ssputs_r+0x8e>
 800cb48:	9e01      	ldr	r6, [sp, #4]
 800cb4a:	0032      	movs	r2, r6
 800cb4c:	9903      	ldr	r1, [sp, #12]
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	f000 ffa1 	bl	800da96 <memmove>
 800cb54:	68a3      	ldr	r3, [r4, #8]
 800cb56:	2000      	movs	r0, #0
 800cb58:	1b9b      	subs	r3, r3, r6
 800cb5a:	60a3      	str	r3, [r4, #8]
 800cb5c:	6823      	ldr	r3, [r4, #0]
 800cb5e:	199e      	adds	r6, r3, r6
 800cb60:	6026      	str	r6, [r4, #0]
 800cb62:	e7da      	b.n	800cb1a <__ssputs_r+0x5e>
 800cb64:	002a      	movs	r2, r5
 800cb66:	0038      	movs	r0, r7
 800cb68:	f000 ffb8 	bl	800dadc <_realloc_r>
 800cb6c:	1e06      	subs	r6, r0, #0
 800cb6e:	d1e0      	bne.n	800cb32 <__ssputs_r+0x76>
 800cb70:	0038      	movs	r0, r7
 800cb72:	6921      	ldr	r1, [r4, #16]
 800cb74:	f7ff fefa 	bl	800c96c <_free_r>
 800cb78:	e7c7      	b.n	800cb0a <__ssputs_r+0x4e>
 800cb7a:	46c0      	nop			; (mov r8, r8)
 800cb7c:	fffffb7f 	.word	0xfffffb7f

0800cb80 <_svfiprintf_r>:
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb82:	b0a1      	sub	sp, #132	; 0x84
 800cb84:	9003      	str	r0, [sp, #12]
 800cb86:	001d      	movs	r5, r3
 800cb88:	898b      	ldrh	r3, [r1, #12]
 800cb8a:	000f      	movs	r7, r1
 800cb8c:	0016      	movs	r6, r2
 800cb8e:	061b      	lsls	r3, r3, #24
 800cb90:	d511      	bpl.n	800cbb6 <_svfiprintf_r+0x36>
 800cb92:	690b      	ldr	r3, [r1, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10e      	bne.n	800cbb6 <_svfiprintf_r+0x36>
 800cb98:	2140      	movs	r1, #64	; 0x40
 800cb9a:	f7ff ff31 	bl	800ca00 <_malloc_r>
 800cb9e:	6038      	str	r0, [r7, #0]
 800cba0:	6138      	str	r0, [r7, #16]
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d105      	bne.n	800cbb2 <_svfiprintf_r+0x32>
 800cba6:	230c      	movs	r3, #12
 800cba8:	9a03      	ldr	r2, [sp, #12]
 800cbaa:	3801      	subs	r0, #1
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	b021      	add	sp, #132	; 0x84
 800cbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb2:	2340      	movs	r3, #64	; 0x40
 800cbb4:	617b      	str	r3, [r7, #20]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	ac08      	add	r4, sp, #32
 800cbba:	6163      	str	r3, [r4, #20]
 800cbbc:	3320      	adds	r3, #32
 800cbbe:	7663      	strb	r3, [r4, #25]
 800cbc0:	3310      	adds	r3, #16
 800cbc2:	76a3      	strb	r3, [r4, #26]
 800cbc4:	9507      	str	r5, [sp, #28]
 800cbc6:	0035      	movs	r5, r6
 800cbc8:	782b      	ldrb	r3, [r5, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <_svfiprintf_r+0x52>
 800cbce:	2b25      	cmp	r3, #37	; 0x25
 800cbd0:	d147      	bne.n	800cc62 <_svfiprintf_r+0xe2>
 800cbd2:	1bab      	subs	r3, r5, r6
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	42b5      	cmp	r5, r6
 800cbd8:	d00c      	beq.n	800cbf4 <_svfiprintf_r+0x74>
 800cbda:	0032      	movs	r2, r6
 800cbdc:	0039      	movs	r1, r7
 800cbde:	9803      	ldr	r0, [sp, #12]
 800cbe0:	f7ff ff6c 	bl	800cabc <__ssputs_r>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d100      	bne.n	800cbea <_svfiprintf_r+0x6a>
 800cbe8:	e0ae      	b.n	800cd48 <_svfiprintf_r+0x1c8>
 800cbea:	6962      	ldr	r2, [r4, #20]
 800cbec:	9b05      	ldr	r3, [sp, #20]
 800cbee:	4694      	mov	ip, r2
 800cbf0:	4463      	add	r3, ip
 800cbf2:	6163      	str	r3, [r4, #20]
 800cbf4:	782b      	ldrb	r3, [r5, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d100      	bne.n	800cbfc <_svfiprintf_r+0x7c>
 800cbfa:	e0a5      	b.n	800cd48 <_svfiprintf_r+0x1c8>
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4252      	negs	r2, r2
 800cc02:	6062      	str	r2, [r4, #4]
 800cc04:	a904      	add	r1, sp, #16
 800cc06:	3254      	adds	r2, #84	; 0x54
 800cc08:	1852      	adds	r2, r2, r1
 800cc0a:	1c6e      	adds	r6, r5, #1
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	60e3      	str	r3, [r4, #12]
 800cc10:	60a3      	str	r3, [r4, #8]
 800cc12:	7013      	strb	r3, [r2, #0]
 800cc14:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc16:	2205      	movs	r2, #5
 800cc18:	7831      	ldrb	r1, [r6, #0]
 800cc1a:	4854      	ldr	r0, [pc, #336]	; (800cd6c <_svfiprintf_r+0x1ec>)
 800cc1c:	f7ff f9ba 	bl	800bf94 <memchr>
 800cc20:	1c75      	adds	r5, r6, #1
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d11f      	bne.n	800cc66 <_svfiprintf_r+0xe6>
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	06d3      	lsls	r3, r2, #27
 800cc2a:	d504      	bpl.n	800cc36 <_svfiprintf_r+0xb6>
 800cc2c:	2353      	movs	r3, #83	; 0x53
 800cc2e:	a904      	add	r1, sp, #16
 800cc30:	185b      	adds	r3, r3, r1
 800cc32:	2120      	movs	r1, #32
 800cc34:	7019      	strb	r1, [r3, #0]
 800cc36:	0713      	lsls	r3, r2, #28
 800cc38:	d504      	bpl.n	800cc44 <_svfiprintf_r+0xc4>
 800cc3a:	2353      	movs	r3, #83	; 0x53
 800cc3c:	a904      	add	r1, sp, #16
 800cc3e:	185b      	adds	r3, r3, r1
 800cc40:	212b      	movs	r1, #43	; 0x2b
 800cc42:	7019      	strb	r1, [r3, #0]
 800cc44:	7833      	ldrb	r3, [r6, #0]
 800cc46:	2b2a      	cmp	r3, #42	; 0x2a
 800cc48:	d016      	beq.n	800cc78 <_svfiprintf_r+0xf8>
 800cc4a:	0035      	movs	r5, r6
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	200a      	movs	r0, #10
 800cc50:	68e3      	ldr	r3, [r4, #12]
 800cc52:	782a      	ldrb	r2, [r5, #0]
 800cc54:	1c6e      	adds	r6, r5, #1
 800cc56:	3a30      	subs	r2, #48	; 0x30
 800cc58:	2a09      	cmp	r2, #9
 800cc5a:	d94e      	bls.n	800ccfa <_svfiprintf_r+0x17a>
 800cc5c:	2900      	cmp	r1, #0
 800cc5e:	d111      	bne.n	800cc84 <_svfiprintf_r+0x104>
 800cc60:	e017      	b.n	800cc92 <_svfiprintf_r+0x112>
 800cc62:	3501      	adds	r5, #1
 800cc64:	e7b0      	b.n	800cbc8 <_svfiprintf_r+0x48>
 800cc66:	4b41      	ldr	r3, [pc, #260]	; (800cd6c <_svfiprintf_r+0x1ec>)
 800cc68:	6822      	ldr	r2, [r4, #0]
 800cc6a:	1ac0      	subs	r0, r0, r3
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4083      	lsls	r3, r0
 800cc70:	4313      	orrs	r3, r2
 800cc72:	002e      	movs	r6, r5
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	e7ce      	b.n	800cc16 <_svfiprintf_r+0x96>
 800cc78:	9b07      	ldr	r3, [sp, #28]
 800cc7a:	1d19      	adds	r1, r3, #4
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	9107      	str	r1, [sp, #28]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	db01      	blt.n	800cc88 <_svfiprintf_r+0x108>
 800cc84:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc86:	e004      	b.n	800cc92 <_svfiprintf_r+0x112>
 800cc88:	425b      	negs	r3, r3
 800cc8a:	60e3      	str	r3, [r4, #12]
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	782b      	ldrb	r3, [r5, #0]
 800cc94:	2b2e      	cmp	r3, #46	; 0x2e
 800cc96:	d10a      	bne.n	800ccae <_svfiprintf_r+0x12e>
 800cc98:	786b      	ldrb	r3, [r5, #1]
 800cc9a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc9c:	d135      	bne.n	800cd0a <_svfiprintf_r+0x18a>
 800cc9e:	9b07      	ldr	r3, [sp, #28]
 800cca0:	3502      	adds	r5, #2
 800cca2:	1d1a      	adds	r2, r3, #4
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	9207      	str	r2, [sp, #28]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	db2b      	blt.n	800cd04 <_svfiprintf_r+0x184>
 800ccac:	9309      	str	r3, [sp, #36]	; 0x24
 800ccae:	4e30      	ldr	r6, [pc, #192]	; (800cd70 <_svfiprintf_r+0x1f0>)
 800ccb0:	2203      	movs	r2, #3
 800ccb2:	0030      	movs	r0, r6
 800ccb4:	7829      	ldrb	r1, [r5, #0]
 800ccb6:	f7ff f96d 	bl	800bf94 <memchr>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d006      	beq.n	800cccc <_svfiprintf_r+0x14c>
 800ccbe:	2340      	movs	r3, #64	; 0x40
 800ccc0:	1b80      	subs	r0, r0, r6
 800ccc2:	4083      	lsls	r3, r0
 800ccc4:	6822      	ldr	r2, [r4, #0]
 800ccc6:	3501      	adds	r5, #1
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	6023      	str	r3, [r4, #0]
 800cccc:	7829      	ldrb	r1, [r5, #0]
 800ccce:	2206      	movs	r2, #6
 800ccd0:	4828      	ldr	r0, [pc, #160]	; (800cd74 <_svfiprintf_r+0x1f4>)
 800ccd2:	1c6e      	adds	r6, r5, #1
 800ccd4:	7621      	strb	r1, [r4, #24]
 800ccd6:	f7ff f95d 	bl	800bf94 <memchr>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d03c      	beq.n	800cd58 <_svfiprintf_r+0x1d8>
 800ccde:	4b26      	ldr	r3, [pc, #152]	; (800cd78 <_svfiprintf_r+0x1f8>)
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d125      	bne.n	800cd30 <_svfiprintf_r+0x1b0>
 800cce4:	2207      	movs	r2, #7
 800cce6:	9b07      	ldr	r3, [sp, #28]
 800cce8:	3307      	adds	r3, #7
 800ccea:	4393      	bics	r3, r2
 800ccec:	3308      	adds	r3, #8
 800ccee:	9307      	str	r3, [sp, #28]
 800ccf0:	6963      	ldr	r3, [r4, #20]
 800ccf2:	9a04      	ldr	r2, [sp, #16]
 800ccf4:	189b      	adds	r3, r3, r2
 800ccf6:	6163      	str	r3, [r4, #20]
 800ccf8:	e765      	b.n	800cbc6 <_svfiprintf_r+0x46>
 800ccfa:	4343      	muls	r3, r0
 800ccfc:	0035      	movs	r5, r6
 800ccfe:	2101      	movs	r1, #1
 800cd00:	189b      	adds	r3, r3, r2
 800cd02:	e7a6      	b.n	800cc52 <_svfiprintf_r+0xd2>
 800cd04:	2301      	movs	r3, #1
 800cd06:	425b      	negs	r3, r3
 800cd08:	e7d0      	b.n	800ccac <_svfiprintf_r+0x12c>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	200a      	movs	r0, #10
 800cd0e:	001a      	movs	r2, r3
 800cd10:	3501      	adds	r5, #1
 800cd12:	6063      	str	r3, [r4, #4]
 800cd14:	7829      	ldrb	r1, [r5, #0]
 800cd16:	1c6e      	adds	r6, r5, #1
 800cd18:	3930      	subs	r1, #48	; 0x30
 800cd1a:	2909      	cmp	r1, #9
 800cd1c:	d903      	bls.n	800cd26 <_svfiprintf_r+0x1a6>
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0c5      	beq.n	800ccae <_svfiprintf_r+0x12e>
 800cd22:	9209      	str	r2, [sp, #36]	; 0x24
 800cd24:	e7c3      	b.n	800ccae <_svfiprintf_r+0x12e>
 800cd26:	4342      	muls	r2, r0
 800cd28:	0035      	movs	r5, r6
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	1852      	adds	r2, r2, r1
 800cd2e:	e7f1      	b.n	800cd14 <_svfiprintf_r+0x194>
 800cd30:	ab07      	add	r3, sp, #28
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	003a      	movs	r2, r7
 800cd36:	0021      	movs	r1, r4
 800cd38:	4b10      	ldr	r3, [pc, #64]	; (800cd7c <_svfiprintf_r+0x1fc>)
 800cd3a:	9803      	ldr	r0, [sp, #12]
 800cd3c:	f7fc f964 	bl	8009008 <_printf_float>
 800cd40:	9004      	str	r0, [sp, #16]
 800cd42:	9b04      	ldr	r3, [sp, #16]
 800cd44:	3301      	adds	r3, #1
 800cd46:	d1d3      	bne.n	800ccf0 <_svfiprintf_r+0x170>
 800cd48:	89bb      	ldrh	r3, [r7, #12]
 800cd4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cd4c:	065b      	lsls	r3, r3, #25
 800cd4e:	d400      	bmi.n	800cd52 <_svfiprintf_r+0x1d2>
 800cd50:	e72d      	b.n	800cbae <_svfiprintf_r+0x2e>
 800cd52:	2001      	movs	r0, #1
 800cd54:	4240      	negs	r0, r0
 800cd56:	e72a      	b.n	800cbae <_svfiprintf_r+0x2e>
 800cd58:	ab07      	add	r3, sp, #28
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	003a      	movs	r2, r7
 800cd5e:	0021      	movs	r1, r4
 800cd60:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <_svfiprintf_r+0x1fc>)
 800cd62:	9803      	ldr	r0, [sp, #12]
 800cd64:	f7fc fc0e 	bl	8009584 <_printf_i>
 800cd68:	e7ea      	b.n	800cd40 <_svfiprintf_r+0x1c0>
 800cd6a:	46c0      	nop			; (mov r8, r8)
 800cd6c:	0800e754 	.word	0x0800e754
 800cd70:	0800e75a 	.word	0x0800e75a
 800cd74:	0800e75e 	.word	0x0800e75e
 800cd78:	08009009 	.word	0x08009009
 800cd7c:	0800cabd 	.word	0x0800cabd

0800cd80 <_sungetc_r>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	0014      	movs	r4, r2
 800cd84:	1c4b      	adds	r3, r1, #1
 800cd86:	d103      	bne.n	800cd90 <_sungetc_r+0x10>
 800cd88:	2501      	movs	r5, #1
 800cd8a:	426d      	negs	r5, r5
 800cd8c:	0028      	movs	r0, r5
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	8993      	ldrh	r3, [r2, #12]
 800cd92:	2220      	movs	r2, #32
 800cd94:	4393      	bics	r3, r2
 800cd96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cd98:	81a3      	strh	r3, [r4, #12]
 800cd9a:	b2ce      	uxtb	r6, r1
 800cd9c:	6863      	ldr	r3, [r4, #4]
 800cd9e:	b2cd      	uxtb	r5, r1
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	d010      	beq.n	800cdc6 <_sungetc_r+0x46>
 800cda4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cda6:	429a      	cmp	r2, r3
 800cda8:	dd07      	ble.n	800cdba <_sungetc_r+0x3a>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	701e      	strb	r6, [r3, #0]
 800cdb2:	6863      	ldr	r3, [r4, #4]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	6063      	str	r3, [r4, #4]
 800cdb8:	e7e8      	b.n	800cd8c <_sungetc_r+0xc>
 800cdba:	0021      	movs	r1, r4
 800cdbc:	f000 fc20 	bl	800d600 <__submore>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d0f2      	beq.n	800cdaa <_sungetc_r+0x2a>
 800cdc4:	e7e0      	b.n	800cd88 <_sungetc_r+0x8>
 800cdc6:	6921      	ldr	r1, [r4, #16]
 800cdc8:	6822      	ldr	r2, [r4, #0]
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	d007      	beq.n	800cdde <_sungetc_r+0x5e>
 800cdce:	4291      	cmp	r1, r2
 800cdd0:	d205      	bcs.n	800cdde <_sungetc_r+0x5e>
 800cdd2:	1e51      	subs	r1, r2, #1
 800cdd4:	7808      	ldrb	r0, [r1, #0]
 800cdd6:	42a8      	cmp	r0, r5
 800cdd8:	d101      	bne.n	800cdde <_sungetc_r+0x5e>
 800cdda:	6021      	str	r1, [r4, #0]
 800cddc:	e7ea      	b.n	800cdb4 <_sungetc_r+0x34>
 800cdde:	6423      	str	r3, [r4, #64]	; 0x40
 800cde0:	0023      	movs	r3, r4
 800cde2:	3344      	adds	r3, #68	; 0x44
 800cde4:	6363      	str	r3, [r4, #52]	; 0x34
 800cde6:	2303      	movs	r3, #3
 800cde8:	63a3      	str	r3, [r4, #56]	; 0x38
 800cdea:	0023      	movs	r3, r4
 800cdec:	3346      	adds	r3, #70	; 0x46
 800cdee:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cdf0:	701e      	strb	r6, [r3, #0]
 800cdf2:	6023      	str	r3, [r4, #0]
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e7de      	b.n	800cdb6 <_sungetc_r+0x36>

0800cdf8 <__ssrefill_r>:
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	000c      	movs	r4, r1
 800cdfc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cdfe:	2900      	cmp	r1, #0
 800ce00:	d00e      	beq.n	800ce20 <__ssrefill_r+0x28>
 800ce02:	0023      	movs	r3, r4
 800ce04:	3344      	adds	r3, #68	; 0x44
 800ce06:	4299      	cmp	r1, r3
 800ce08:	d001      	beq.n	800ce0e <__ssrefill_r+0x16>
 800ce0a:	f7ff fdaf 	bl	800c96c <_free_r>
 800ce0e:	2000      	movs	r0, #0
 800ce10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce12:	6360      	str	r0, [r4, #52]	; 0x34
 800ce14:	6063      	str	r3, [r4, #4]
 800ce16:	4283      	cmp	r3, r0
 800ce18:	d002      	beq.n	800ce20 <__ssrefill_r+0x28>
 800ce1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	bd10      	pop	{r4, pc}
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	2001      	movs	r0, #1
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	2300      	movs	r3, #0
 800ce28:	89a2      	ldrh	r2, [r4, #12]
 800ce2a:	6063      	str	r3, [r4, #4]
 800ce2c:	3320      	adds	r3, #32
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	4240      	negs	r0, r0
 800ce34:	e7f3      	b.n	800ce1e <__ssrefill_r+0x26>
	...

0800ce38 <__ssvfiscanf_r>:
 800ce38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce3a:	4cb5      	ldr	r4, [pc, #724]	; (800d110 <__ssvfiscanf_r+0x2d8>)
 800ce3c:	0005      	movs	r5, r0
 800ce3e:	44a5      	add	sp, r4
 800ce40:	000c      	movs	r4, r1
 800ce42:	2100      	movs	r1, #0
 800ce44:	9148      	str	r1, [sp, #288]	; 0x120
 800ce46:	9149      	str	r1, [sp, #292]	; 0x124
 800ce48:	a905      	add	r1, sp, #20
 800ce4a:	914a      	str	r1, [sp, #296]	; 0x128
 800ce4c:	21be      	movs	r1, #190	; 0xbe
 800ce4e:	48b1      	ldr	r0, [pc, #708]	; (800d114 <__ssvfiscanf_r+0x2dc>)
 800ce50:	0049      	lsls	r1, r1, #1
 800ce52:	ae45      	add	r6, sp, #276	; 0x114
 800ce54:	5070      	str	r0, [r6, r1]
 800ce56:	48b0      	ldr	r0, [pc, #704]	; (800d118 <__ssvfiscanf_r+0x2e0>)
 800ce58:	3104      	adds	r1, #4
 800ce5a:	ae45      	add	r6, sp, #276	; 0x114
 800ce5c:	5070      	str	r0, [r6, r1]
 800ce5e:	9304      	str	r3, [sp, #16]
 800ce60:	9101      	str	r1, [sp, #4]
 800ce62:	7813      	ldrb	r3, [r2, #0]
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d100      	bne.n	800ce6c <__ssvfiscanf_r+0x34>
 800ce6a:	e14f      	b.n	800d10c <__ssvfiscanf_r+0x2d4>
 800ce6c:	4fab      	ldr	r7, [pc, #684]	; (800d11c <__ssvfiscanf_r+0x2e4>)
 800ce6e:	2008      	movs	r0, #8
 800ce70:	5cf9      	ldrb	r1, [r7, r3]
 800ce72:	2308      	movs	r3, #8
 800ce74:	1c56      	adds	r6, r2, #1
 800ce76:	400b      	ands	r3, r1
 800ce78:	4201      	tst	r1, r0
 800ce7a:	d01e      	beq.n	800ceba <__ssvfiscanf_r+0x82>
 800ce7c:	6863      	ldr	r3, [r4, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dd11      	ble.n	800cea6 <__ssvfiscanf_r+0x6e>
 800ce82:	2108      	movs	r1, #8
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	781a      	ldrb	r2, [r3, #0]
 800ce88:	5cba      	ldrb	r2, [r7, r2]
 800ce8a:	420a      	tst	r2, r1
 800ce8c:	d101      	bne.n	800ce92 <__ssvfiscanf_r+0x5a>
 800ce8e:	0032      	movs	r2, r6
 800ce90:	e7e7      	b.n	800ce62 <__ssvfiscanf_r+0x2a>
 800ce92:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800ce94:	3301      	adds	r3, #1
 800ce96:	9200      	str	r2, [sp, #0]
 800ce98:	3201      	adds	r2, #1
 800ce9a:	9249      	str	r2, [sp, #292]	; 0x124
 800ce9c:	6862      	ldr	r2, [r4, #4]
 800ce9e:	6023      	str	r3, [r4, #0]
 800cea0:	3a01      	subs	r2, #1
 800cea2:	6062      	str	r2, [r4, #4]
 800cea4:	e7ea      	b.n	800ce7c <__ssvfiscanf_r+0x44>
 800cea6:	9a01      	ldr	r2, [sp, #4]
 800cea8:	ab45      	add	r3, sp, #276	; 0x114
 800ceaa:	589b      	ldr	r3, [r3, r2]
 800ceac:	0021      	movs	r1, r4
 800ceae:	0028      	movs	r0, r5
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	4798      	blx	r3
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d0e4      	beq.n	800ce82 <__ssvfiscanf_r+0x4a>
 800ceb8:	e7e9      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800ceba:	9900      	ldr	r1, [sp, #0]
 800cebc:	2925      	cmp	r1, #37	; 0x25
 800cebe:	d164      	bne.n	800cf8a <__ssvfiscanf_r+0x152>
 800cec0:	9347      	str	r3, [sp, #284]	; 0x11c
 800cec2:	9345      	str	r3, [sp, #276]	; 0x114
 800cec4:	7853      	ldrb	r3, [r2, #1]
 800cec6:	2b2a      	cmp	r3, #42	; 0x2a
 800cec8:	d102      	bne.n	800ced0 <__ssvfiscanf_r+0x98>
 800ceca:	3b1a      	subs	r3, #26
 800cecc:	9345      	str	r3, [sp, #276]	; 0x114
 800cece:	1c96      	adds	r6, r2, #2
 800ced0:	0037      	movs	r7, r6
 800ced2:	200a      	movs	r0, #10
 800ced4:	7839      	ldrb	r1, [r7, #0]
 800ced6:	1c7b      	adds	r3, r7, #1
 800ced8:	9302      	str	r3, [sp, #8]
 800ceda:	000b      	movs	r3, r1
 800cedc:	3b30      	subs	r3, #48	; 0x30
 800cede:	2b09      	cmp	r3, #9
 800cee0:	d91f      	bls.n	800cf22 <__ssvfiscanf_r+0xea>
 800cee2:	4e8f      	ldr	r6, [pc, #572]	; (800d120 <__ssvfiscanf_r+0x2e8>)
 800cee4:	2203      	movs	r2, #3
 800cee6:	0030      	movs	r0, r6
 800cee8:	f7ff f854 	bl	800bf94 <memchr>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d007      	beq.n	800cf00 <__ssvfiscanf_r+0xc8>
 800cef0:	2301      	movs	r3, #1
 800cef2:	1b80      	subs	r0, r0, r6
 800cef4:	4083      	lsls	r3, r0
 800cef6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cef8:	9f02      	ldr	r7, [sp, #8]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	9203      	str	r2, [sp, #12]
 800cefe:	9345      	str	r3, [sp, #276]	; 0x114
 800cf00:	783b      	ldrb	r3, [r7, #0]
 800cf02:	1c7e      	adds	r6, r7, #1
 800cf04:	2b78      	cmp	r3, #120	; 0x78
 800cf06:	d807      	bhi.n	800cf18 <__ssvfiscanf_r+0xe0>
 800cf08:	2b57      	cmp	r3, #87	; 0x57
 800cf0a:	d812      	bhi.n	800cf32 <__ssvfiscanf_r+0xfa>
 800cf0c:	2b25      	cmp	r3, #37	; 0x25
 800cf0e:	d03c      	beq.n	800cf8a <__ssvfiscanf_r+0x152>
 800cf10:	d836      	bhi.n	800cf80 <__ssvfiscanf_r+0x148>
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d100      	bne.n	800cf18 <__ssvfiscanf_r+0xe0>
 800cf16:	e0f6      	b.n	800d106 <__ssvfiscanf_r+0x2ce>
 800cf18:	2303      	movs	r3, #3
 800cf1a:	934b      	str	r3, [sp, #300]	; 0x12c
 800cf1c:	3307      	adds	r3, #7
 800cf1e:	9346      	str	r3, [sp, #280]	; 0x118
 800cf20:	e076      	b.n	800d010 <__ssvfiscanf_r+0x1d8>
 800cf22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cf24:	9f02      	ldr	r7, [sp, #8]
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	4343      	muls	r3, r0
 800cf2a:	3b30      	subs	r3, #48	; 0x30
 800cf2c:	185b      	adds	r3, r3, r1
 800cf2e:	9347      	str	r3, [sp, #284]	; 0x11c
 800cf30:	e7d0      	b.n	800ced4 <__ssvfiscanf_r+0x9c>
 800cf32:	0018      	movs	r0, r3
 800cf34:	3858      	subs	r0, #88	; 0x58
 800cf36:	2820      	cmp	r0, #32
 800cf38:	d8ee      	bhi.n	800cf18 <__ssvfiscanf_r+0xe0>
 800cf3a:	f7f3 f901 	bl	8000140 <__gnu_thumb1_case_shi>
 800cf3e:	0051      	.short	0x0051
 800cf40:	ffedffed 	.word	0xffedffed
 800cf44:	ffed0086 	.word	0xffed0086
 800cf48:	ffedffed 	.word	0xffedffed
 800cf4c:	ffedffed 	.word	0xffedffed
 800cf50:	ffedffed 	.word	0xffedffed
 800cf54:	00600093 	.word	0x00600093
 800cf58:	00240024 	.word	0x00240024
 800cf5c:	ffed0024 	.word	0xffed0024
 800cf60:	ffed0062 	.word	0xffed0062
 800cf64:	ffedffed 	.word	0xffedffed
 800cf68:	009dffed 	.word	0x009dffed
 800cf6c:	004b0065 	.word	0x004b0065
 800cf70:	ffedffed 	.word	0xffedffed
 800cf74:	ffed009b 	.word	0xffed009b
 800cf78:	ffed0060 	.word	0xffed0060
 800cf7c:	0051ffed 	.word	0x0051ffed
 800cf80:	3b45      	subs	r3, #69	; 0x45
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d8c8      	bhi.n	800cf18 <__ssvfiscanf_r+0xe0>
 800cf86:	2305      	movs	r3, #5
 800cf88:	e041      	b.n	800d00e <__ssvfiscanf_r+0x1d6>
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dd0f      	ble.n	800cfb0 <__ssvfiscanf_r+0x178>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	9900      	ldr	r1, [sp, #0]
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	428a      	cmp	r2, r1
 800cf98:	d000      	beq.n	800cf9c <__ssvfiscanf_r+0x164>
 800cf9a:	e0b7      	b.n	800d10c <__ssvfiscanf_r+0x2d4>
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	6862      	ldr	r2, [r4, #4]
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cfa4:	3a01      	subs	r2, #1
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	6062      	str	r2, [r4, #4]
 800cfac:	9349      	str	r3, [sp, #292]	; 0x124
 800cfae:	e76e      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800cfb0:	9a01      	ldr	r2, [sp, #4]
 800cfb2:	ab45      	add	r3, sp, #276	; 0x114
 800cfb4:	589b      	ldr	r3, [r3, r2]
 800cfb6:	0021      	movs	r1, r4
 800cfb8:	0028      	movs	r0, r5
 800cfba:	9302      	str	r3, [sp, #8]
 800cfbc:	4798      	blx	r3
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d0e6      	beq.n	800cf90 <__ssvfiscanf_r+0x158>
 800cfc2:	9848      	ldr	r0, [sp, #288]	; 0x120
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d000      	beq.n	800cfca <__ssvfiscanf_r+0x192>
 800cfc8:	e099      	b.n	800d0fe <__ssvfiscanf_r+0x2c6>
 800cfca:	3801      	subs	r0, #1
 800cfcc:	23a7      	movs	r3, #167	; 0xa7
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	449d      	add	sp, r3
 800cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cfd6:	9200      	str	r2, [sp, #0]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	9900      	ldr	r1, [sp, #0]
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	9245      	str	r2, [sp, #276]	; 0x114
 800cfe0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cfe2:	9200      	str	r2, [sp, #0]
 800cfe4:	2280      	movs	r2, #128	; 0x80
 800cfe6:	9900      	ldr	r1, [sp, #0]
 800cfe8:	0092      	lsls	r2, r2, #2
 800cfea:	430a      	orrs	r2, r1
 800cfec:	9245      	str	r2, [sp, #276]	; 0x114
 800cfee:	2210      	movs	r2, #16
 800cff0:	9246      	str	r2, [sp, #280]	; 0x118
 800cff2:	226e      	movs	r2, #110	; 0x6e
 800cff4:	429a      	cmp	r2, r3
 800cff6:	419b      	sbcs	r3, r3
 800cff8:	425b      	negs	r3, r3
 800cffa:	3303      	adds	r3, #3
 800cffc:	e007      	b.n	800d00e <__ssvfiscanf_r+0x1d6>
 800cffe:	220a      	movs	r2, #10
 800d000:	e7f6      	b.n	800cff0 <__ssvfiscanf_r+0x1b8>
 800d002:	2300      	movs	r3, #0
 800d004:	9346      	str	r3, [sp, #280]	; 0x118
 800d006:	e7f8      	b.n	800cffa <__ssvfiscanf_r+0x1c2>
 800d008:	2308      	movs	r3, #8
 800d00a:	9346      	str	r3, [sp, #280]	; 0x118
 800d00c:	3b04      	subs	r3, #4
 800d00e:	934b      	str	r3, [sp, #300]	; 0x12c
 800d010:	6863      	ldr	r3, [r4, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dd3f      	ble.n	800d096 <__ssvfiscanf_r+0x25e>
 800d016:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	065b      	lsls	r3, r3, #25
 800d01c:	d406      	bmi.n	800d02c <__ssvfiscanf_r+0x1f4>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	493e      	ldr	r1, [pc, #248]	; (800d11c <__ssvfiscanf_r+0x2e4>)
 800d022:	781a      	ldrb	r2, [r3, #0]
 800d024:	5c8a      	ldrb	r2, [r1, r2]
 800d026:	2108      	movs	r1, #8
 800d028:	420a      	tst	r2, r1
 800d02a:	d13e      	bne.n	800d0aa <__ssvfiscanf_r+0x272>
 800d02c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800d02e:	2b02      	cmp	r3, #2
 800d030:	dc51      	bgt.n	800d0d6 <__ssvfiscanf_r+0x29e>
 800d032:	0022      	movs	r2, r4
 800d034:	0028      	movs	r0, r5
 800d036:	ab04      	add	r3, sp, #16
 800d038:	a945      	add	r1, sp, #276	; 0x114
 800d03a:	f000 f875 	bl	800d128 <_scanf_chars>
 800d03e:	2801      	cmp	r0, #1
 800d040:	d064      	beq.n	800d10c <__ssvfiscanf_r+0x2d4>
 800d042:	2802      	cmp	r0, #2
 800d044:	d000      	beq.n	800d048 <__ssvfiscanf_r+0x210>
 800d046:	e722      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800d048:	e7bb      	b.n	800cfc2 <__ssvfiscanf_r+0x18a>
 800d04a:	0031      	movs	r1, r6
 800d04c:	a805      	add	r0, sp, #20
 800d04e:	f000 f9f9 	bl	800d444 <__sccl>
 800d052:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d054:	0006      	movs	r6, r0
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	2340      	movs	r3, #64	; 0x40
 800d05a:	9a00      	ldr	r2, [sp, #0]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	9345      	str	r3, [sp, #276]	; 0x114
 800d060:	2301      	movs	r3, #1
 800d062:	e7d4      	b.n	800d00e <__ssvfiscanf_r+0x1d6>
 800d064:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	2340      	movs	r3, #64	; 0x40
 800d06a:	9a00      	ldr	r2, [sp, #0]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	9345      	str	r3, [sp, #276]	; 0x114
 800d070:	2300      	movs	r3, #0
 800d072:	e7cc      	b.n	800d00e <__ssvfiscanf_r+0x1d6>
 800d074:	2302      	movs	r3, #2
 800d076:	e7ca      	b.n	800d00e <__ssvfiscanf_r+0x1d6>
 800d078:	9845      	ldr	r0, [sp, #276]	; 0x114
 800d07a:	06c3      	lsls	r3, r0, #27
 800d07c:	d500      	bpl.n	800d080 <__ssvfiscanf_r+0x248>
 800d07e:	e706      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800d080:	9b04      	ldr	r3, [sp, #16]
 800d082:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d084:	1d19      	adds	r1, r3, #4
 800d086:	9104      	str	r1, [sp, #16]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	07c7      	lsls	r7, r0, #31
 800d08c:	d501      	bpl.n	800d092 <__ssvfiscanf_r+0x25a>
 800d08e:	801a      	strh	r2, [r3, #0]
 800d090:	e6fd      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e6fb      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800d096:	9a01      	ldr	r2, [sp, #4]
 800d098:	ab45      	add	r3, sp, #276	; 0x114
 800d09a:	589b      	ldr	r3, [r3, r2]
 800d09c:	0021      	movs	r1, r4
 800d09e:	0028      	movs	r0, r5
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	4798      	blx	r3
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d0b6      	beq.n	800d016 <__ssvfiscanf_r+0x1de>
 800d0a8:	e78b      	b.n	800cfc2 <__ssvfiscanf_r+0x18a>
 800d0aa:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d0ac:	9200      	str	r2, [sp, #0]
 800d0ae:	3201      	adds	r2, #1
 800d0b0:	9249      	str	r2, [sp, #292]	; 0x124
 800d0b2:	6862      	ldr	r2, [r4, #4]
 800d0b4:	3a01      	subs	r2, #1
 800d0b6:	6062      	str	r2, [r4, #4]
 800d0b8:	2a00      	cmp	r2, #0
 800d0ba:	dd02      	ble.n	800d0c2 <__ssvfiscanf_r+0x28a>
 800d0bc:	3301      	adds	r3, #1
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	e7ad      	b.n	800d01e <__ssvfiscanf_r+0x1e6>
 800d0c2:	9a01      	ldr	r2, [sp, #4]
 800d0c4:	ab45      	add	r3, sp, #276	; 0x114
 800d0c6:	589b      	ldr	r3, [r3, r2]
 800d0c8:	0021      	movs	r1, r4
 800d0ca:	0028      	movs	r0, r5
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	4798      	blx	r3
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0a4      	beq.n	800d01e <__ssvfiscanf_r+0x1e6>
 800d0d4:	e775      	b.n	800cfc2 <__ssvfiscanf_r+0x18a>
 800d0d6:	2b04      	cmp	r3, #4
 800d0d8:	dc06      	bgt.n	800d0e8 <__ssvfiscanf_r+0x2b0>
 800d0da:	0022      	movs	r2, r4
 800d0dc:	0028      	movs	r0, r5
 800d0de:	ab04      	add	r3, sp, #16
 800d0e0:	a945      	add	r1, sp, #276	; 0x114
 800d0e2:	f000 f87f 	bl	800d1e4 <_scanf_i>
 800d0e6:	e7aa      	b.n	800d03e <__ssvfiscanf_r+0x206>
 800d0e8:	4b0e      	ldr	r3, [pc, #56]	; (800d124 <__ssvfiscanf_r+0x2ec>)
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d100      	bne.n	800d0f0 <__ssvfiscanf_r+0x2b8>
 800d0ee:	e6ce      	b.n	800ce8e <__ssvfiscanf_r+0x56>
 800d0f0:	0022      	movs	r2, r4
 800d0f2:	0028      	movs	r0, r5
 800d0f4:	ab04      	add	r3, sp, #16
 800d0f6:	a945      	add	r1, sp, #276	; 0x114
 800d0f8:	f7fc fb56 	bl	80097a8 <_scanf_float>
 800d0fc:	e79f      	b.n	800d03e <__ssvfiscanf_r+0x206>
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	065b      	lsls	r3, r3, #25
 800d102:	d400      	bmi.n	800d106 <__ssvfiscanf_r+0x2ce>
 800d104:	e762      	b.n	800cfcc <__ssvfiscanf_r+0x194>
 800d106:	2001      	movs	r0, #1
 800d108:	4240      	negs	r0, r0
 800d10a:	e75f      	b.n	800cfcc <__ssvfiscanf_r+0x194>
 800d10c:	9848      	ldr	r0, [sp, #288]	; 0x120
 800d10e:	e75d      	b.n	800cfcc <__ssvfiscanf_r+0x194>
 800d110:	fffffd64 	.word	0xfffffd64
 800d114:	0800cd81 	.word	0x0800cd81
 800d118:	0800cdf9 	.word	0x0800cdf9
 800d11c:	0800e3e1 	.word	0x0800e3e1
 800d120:	0800e75a 	.word	0x0800e75a
 800d124:	080097a9 	.word	0x080097a9

0800d128 <_scanf_chars>:
 800d128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d12a:	0015      	movs	r5, r2
 800d12c:	688a      	ldr	r2, [r1, #8]
 800d12e:	000c      	movs	r4, r1
 800d130:	9001      	str	r0, [sp, #4]
 800d132:	2a00      	cmp	r2, #0
 800d134:	d105      	bne.n	800d142 <_scanf_chars+0x1a>
 800d136:	6989      	ldr	r1, [r1, #24]
 800d138:	3201      	adds	r2, #1
 800d13a:	2900      	cmp	r1, #0
 800d13c:	d000      	beq.n	800d140 <_scanf_chars+0x18>
 800d13e:	3a02      	subs	r2, #2
 800d140:	60a2      	str	r2, [r4, #8]
 800d142:	6822      	ldr	r2, [r4, #0]
 800d144:	06d2      	lsls	r2, r2, #27
 800d146:	d403      	bmi.n	800d150 <_scanf_chars+0x28>
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	1d11      	adds	r1, r2, #4
 800d14c:	6019      	str	r1, [r3, #0]
 800d14e:	6817      	ldr	r7, [r2, #0]
 800d150:	2600      	movs	r6, #0
 800d152:	69a0      	ldr	r0, [r4, #24]
 800d154:	2800      	cmp	r0, #0
 800d156:	d013      	beq.n	800d180 <_scanf_chars+0x58>
 800d158:	2801      	cmp	r0, #1
 800d15a:	d108      	bne.n	800d16e <_scanf_chars+0x46>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	6962      	ldr	r2, [r4, #20]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	5cd3      	ldrb	r3, [r2, r3]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10b      	bne.n	800d180 <_scanf_chars+0x58>
 800d168:	2e00      	cmp	r6, #0
 800d16a:	d127      	bne.n	800d1bc <_scanf_chars+0x94>
 800d16c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d16e:	2802      	cmp	r0, #2
 800d170:	d124      	bne.n	800d1bc <_scanf_chars+0x94>
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	4a1a      	ldr	r2, [pc, #104]	; (800d1e0 <_scanf_chars+0xb8>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	5cd3      	ldrb	r3, [r2, r3]
 800d17a:	2208      	movs	r2, #8
 800d17c:	4213      	tst	r3, r2
 800d17e:	d11d      	bne.n	800d1bc <_scanf_chars+0x94>
 800d180:	2210      	movs	r2, #16
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	3601      	adds	r6, #1
 800d186:	4213      	tst	r3, r2
 800d188:	d103      	bne.n	800d192 <_scanf_chars+0x6a>
 800d18a:	682b      	ldr	r3, [r5, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	703b      	strb	r3, [r7, #0]
 800d190:	3701      	adds	r7, #1
 800d192:	682a      	ldr	r2, [r5, #0]
 800d194:	686b      	ldr	r3, [r5, #4]
 800d196:	3201      	adds	r2, #1
 800d198:	602a      	str	r2, [r5, #0]
 800d19a:	68a2      	ldr	r2, [r4, #8]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	3a01      	subs	r2, #1
 800d1a0:	606b      	str	r3, [r5, #4]
 800d1a2:	60a2      	str	r2, [r4, #8]
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	d009      	beq.n	800d1bc <_scanf_chars+0x94>
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	dcd2      	bgt.n	800d152 <_scanf_chars+0x2a>
 800d1ac:	23c0      	movs	r3, #192	; 0xc0
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	0029      	movs	r1, r5
 800d1b2:	58e3      	ldr	r3, [r4, r3]
 800d1b4:	9801      	ldr	r0, [sp, #4]
 800d1b6:	4798      	blx	r3
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d0ca      	beq.n	800d152 <_scanf_chars+0x2a>
 800d1bc:	6822      	ldr	r2, [r4, #0]
 800d1be:	2310      	movs	r3, #16
 800d1c0:	0011      	movs	r1, r2
 800d1c2:	4019      	ands	r1, r3
 800d1c4:	421a      	tst	r2, r3
 800d1c6:	d106      	bne.n	800d1d6 <_scanf_chars+0xae>
 800d1c8:	68e3      	ldr	r3, [r4, #12]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	60e3      	str	r3, [r4, #12]
 800d1ce:	69a3      	ldr	r3, [r4, #24]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d000      	beq.n	800d1d6 <_scanf_chars+0xae>
 800d1d4:	7039      	strb	r1, [r7, #0]
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	2000      	movs	r0, #0
 800d1da:	199e      	adds	r6, r3, r6
 800d1dc:	6126      	str	r6, [r4, #16]
 800d1de:	e7c5      	b.n	800d16c <_scanf_chars+0x44>
 800d1e0:	0800e3e1 	.word	0x0800e3e1

0800d1e4 <_scanf_i>:
 800d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e6:	000c      	movs	r4, r1
 800d1e8:	b08d      	sub	sp, #52	; 0x34
 800d1ea:	9302      	str	r3, [sp, #8]
 800d1ec:	4b79      	ldr	r3, [pc, #484]	; (800d3d4 <_scanf_i+0x1f0>)
 800d1ee:	0016      	movs	r6, r2
 800d1f0:	9005      	str	r0, [sp, #20]
 800d1f2:	aa09      	add	r2, sp, #36	; 0x24
 800d1f4:	cb23      	ldmia	r3!, {r0, r1, r5}
 800d1f6:	c223      	stmia	r2!, {r0, r1, r5}
 800d1f8:	4b77      	ldr	r3, [pc, #476]	; (800d3d8 <_scanf_i+0x1f4>)
 800d1fa:	9306      	str	r3, [sp, #24]
 800d1fc:	69a3      	ldr	r3, [r4, #24]
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d001      	beq.n	800d206 <_scanf_i+0x22>
 800d202:	4b76      	ldr	r3, [pc, #472]	; (800d3dc <_scanf_i+0x1f8>)
 800d204:	9306      	str	r3, [sp, #24]
 800d206:	22ae      	movs	r2, #174	; 0xae
 800d208:	2000      	movs	r0, #0
 800d20a:	68a3      	ldr	r3, [r4, #8]
 800d20c:	0052      	lsls	r2, r2, #1
 800d20e:	1e59      	subs	r1, r3, #1
 800d210:	9004      	str	r0, [sp, #16]
 800d212:	4291      	cmp	r1, r2
 800d214:	d905      	bls.n	800d222 <_scanf_i+0x3e>
 800d216:	3b5e      	subs	r3, #94	; 0x5e
 800d218:	3bff      	subs	r3, #255	; 0xff
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	235e      	movs	r3, #94	; 0x5e
 800d21e:	33ff      	adds	r3, #255	; 0xff
 800d220:	60a3      	str	r3, [r4, #8]
 800d222:	0023      	movs	r3, r4
 800d224:	331c      	adds	r3, #28
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	23d0      	movs	r3, #208	; 0xd0
 800d22a:	2700      	movs	r7, #0
 800d22c:	6822      	ldr	r2, [r4, #0]
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	4313      	orrs	r3, r2
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	9303      	str	r3, [sp, #12]
 800d238:	6833      	ldr	r3, [r6, #0]
 800d23a:	a809      	add	r0, sp, #36	; 0x24
 800d23c:	7819      	ldrb	r1, [r3, #0]
 800d23e:	00bb      	lsls	r3, r7, #2
 800d240:	2202      	movs	r2, #2
 800d242:	5818      	ldr	r0, [r3, r0]
 800d244:	f7fe fea6 	bl	800bf94 <memchr>
 800d248:	2800      	cmp	r0, #0
 800d24a:	d02b      	beq.n	800d2a4 <_scanf_i+0xc0>
 800d24c:	2f01      	cmp	r7, #1
 800d24e:	d162      	bne.n	800d316 <_scanf_i+0x132>
 800d250:	6863      	ldr	r3, [r4, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <_scanf_i+0x80>
 800d256:	3308      	adds	r3, #8
 800d258:	6822      	ldr	r2, [r4, #0]
 800d25a:	6063      	str	r3, [r4, #4]
 800d25c:	33f9      	adds	r3, #249	; 0xf9
 800d25e:	33ff      	adds	r3, #255	; 0xff
 800d260:	4313      	orrs	r3, r2
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	4b5e      	ldr	r3, [pc, #376]	; (800d3e0 <_scanf_i+0x1fc>)
 800d266:	6822      	ldr	r2, [r4, #0]
 800d268:	4013      	ands	r3, r2
 800d26a:	6023      	str	r3, [r4, #0]
 800d26c:	68a3      	ldr	r3, [r4, #8]
 800d26e:	1e5a      	subs	r2, r3, #1
 800d270:	60a2      	str	r2, [r4, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d016      	beq.n	800d2a4 <_scanf_i+0xc0>
 800d276:	6833      	ldr	r3, [r6, #0]
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	6032      	str	r2, [r6, #0]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	9a03      	ldr	r2, [sp, #12]
 800d280:	7013      	strb	r3, [r2, #0]
 800d282:	6873      	ldr	r3, [r6, #4]
 800d284:	1c55      	adds	r5, r2, #1
 800d286:	3b01      	subs	r3, #1
 800d288:	6073      	str	r3, [r6, #4]
 800d28a:	9503      	str	r5, [sp, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dc09      	bgt.n	800d2a4 <_scanf_i+0xc0>
 800d290:	23c0      	movs	r3, #192	; 0xc0
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	58e3      	ldr	r3, [r4, r3]
 800d296:	0031      	movs	r1, r6
 800d298:	9805      	ldr	r0, [sp, #20]
 800d29a:	9307      	str	r3, [sp, #28]
 800d29c:	4798      	blx	r3
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d000      	beq.n	800d2a4 <_scanf_i+0xc0>
 800d2a2:	e081      	b.n	800d3a8 <_scanf_i+0x1c4>
 800d2a4:	3701      	adds	r7, #1
 800d2a6:	2f03      	cmp	r7, #3
 800d2a8:	d1c6      	bne.n	800d238 <_scanf_i+0x54>
 800d2aa:	6863      	ldr	r3, [r4, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <_scanf_i+0xd0>
 800d2b0:	330a      	adds	r3, #10
 800d2b2:	6063      	str	r3, [r4, #4]
 800d2b4:	2110      	movs	r1, #16
 800d2b6:	2700      	movs	r7, #0
 800d2b8:	6863      	ldr	r3, [r4, #4]
 800d2ba:	6960      	ldr	r0, [r4, #20]
 800d2bc:	1ac9      	subs	r1, r1, r3
 800d2be:	4b49      	ldr	r3, [pc, #292]	; (800d3e4 <_scanf_i+0x200>)
 800d2c0:	18c9      	adds	r1, r1, r3
 800d2c2:	f000 f8bf 	bl	800d444 <__sccl>
 800d2c6:	9d03      	ldr	r5, [sp, #12]
 800d2c8:	68a3      	ldr	r3, [r4, #8]
 800d2ca:	6822      	ldr	r2, [r4, #0]
 800d2cc:	9303      	str	r3, [sp, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d041      	beq.n	800d356 <_scanf_i+0x172>
 800d2d2:	6831      	ldr	r1, [r6, #0]
 800d2d4:	6963      	ldr	r3, [r4, #20]
 800d2d6:	7808      	ldrb	r0, [r1, #0]
 800d2d8:	5c1b      	ldrb	r3, [r3, r0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d03b      	beq.n	800d356 <_scanf_i+0x172>
 800d2de:	2830      	cmp	r0, #48	; 0x30
 800d2e0:	d129      	bne.n	800d336 <_scanf_i+0x152>
 800d2e2:	2380      	movs	r3, #128	; 0x80
 800d2e4:	011b      	lsls	r3, r3, #4
 800d2e6:	421a      	tst	r2, r3
 800d2e8:	d025      	beq.n	800d336 <_scanf_i+0x152>
 800d2ea:	9b04      	ldr	r3, [sp, #16]
 800d2ec:	3701      	adds	r7, #1
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d005      	beq.n	800d2fe <_scanf_i+0x11a>
 800d2f2:	001a      	movs	r2, r3
 800d2f4:	9b03      	ldr	r3, [sp, #12]
 800d2f6:	3a01      	subs	r2, #1
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	9204      	str	r2, [sp, #16]
 800d2fc:	60a3      	str	r3, [r4, #8]
 800d2fe:	6873      	ldr	r3, [r6, #4]
 800d300:	3b01      	subs	r3, #1
 800d302:	6073      	str	r3, [r6, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd1d      	ble.n	800d344 <_scanf_i+0x160>
 800d308:	6833      	ldr	r3, [r6, #0]
 800d30a:	3301      	adds	r3, #1
 800d30c:	6033      	str	r3, [r6, #0]
 800d30e:	68a3      	ldr	r3, [r4, #8]
 800d310:	3b01      	subs	r3, #1
 800d312:	60a3      	str	r3, [r4, #8]
 800d314:	e7d8      	b.n	800d2c8 <_scanf_i+0xe4>
 800d316:	2f02      	cmp	r7, #2
 800d318:	d1a8      	bne.n	800d26c <_scanf_i+0x88>
 800d31a:	21c0      	movs	r1, #192	; 0xc0
 800d31c:	2380      	movs	r3, #128	; 0x80
 800d31e:	6822      	ldr	r2, [r4, #0]
 800d320:	00c9      	lsls	r1, r1, #3
 800d322:	4011      	ands	r1, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4299      	cmp	r1, r3
 800d328:	d1bf      	bne.n	800d2aa <_scanf_i+0xc6>
 800d32a:	3bf1      	subs	r3, #241	; 0xf1
 800d32c:	3bff      	subs	r3, #255	; 0xff
 800d32e:	6063      	str	r3, [r4, #4]
 800d330:	33f0      	adds	r3, #240	; 0xf0
 800d332:	4313      	orrs	r3, r2
 800d334:	e799      	b.n	800d26a <_scanf_i+0x86>
 800d336:	4b2c      	ldr	r3, [pc, #176]	; (800d3e8 <_scanf_i+0x204>)
 800d338:	4013      	ands	r3, r2
 800d33a:	6023      	str	r3, [r4, #0]
 800d33c:	780b      	ldrb	r3, [r1, #0]
 800d33e:	702b      	strb	r3, [r5, #0]
 800d340:	3501      	adds	r5, #1
 800d342:	e7dc      	b.n	800d2fe <_scanf_i+0x11a>
 800d344:	23c0      	movs	r3, #192	; 0xc0
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	58e3      	ldr	r3, [r4, r3]
 800d34a:	0031      	movs	r1, r6
 800d34c:	9805      	ldr	r0, [sp, #20]
 800d34e:	9303      	str	r3, [sp, #12]
 800d350:	4798      	blx	r3
 800d352:	2800      	cmp	r0, #0
 800d354:	d0db      	beq.n	800d30e <_scanf_i+0x12a>
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	05db      	lsls	r3, r3, #23
 800d35a:	d50e      	bpl.n	800d37a <_scanf_i+0x196>
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	429d      	cmp	r5, r3
 800d360:	d907      	bls.n	800d372 <_scanf_i+0x18e>
 800d362:	23be      	movs	r3, #190	; 0xbe
 800d364:	3d01      	subs	r5, #1
 800d366:	005b      	lsls	r3, r3, #1
 800d368:	0032      	movs	r2, r6
 800d36a:	7829      	ldrb	r1, [r5, #0]
 800d36c:	58e3      	ldr	r3, [r4, r3]
 800d36e:	9805      	ldr	r0, [sp, #20]
 800d370:	4798      	blx	r3
 800d372:	9b01      	ldr	r3, [sp, #4]
 800d374:	2001      	movs	r0, #1
 800d376:	429d      	cmp	r5, r3
 800d378:	d029      	beq.n	800d3ce <_scanf_i+0x1ea>
 800d37a:	6821      	ldr	r1, [r4, #0]
 800d37c:	2310      	movs	r3, #16
 800d37e:	000a      	movs	r2, r1
 800d380:	401a      	ands	r2, r3
 800d382:	4219      	tst	r1, r3
 800d384:	d11c      	bne.n	800d3c0 <_scanf_i+0x1dc>
 800d386:	702a      	strb	r2, [r5, #0]
 800d388:	6863      	ldr	r3, [r4, #4]
 800d38a:	9901      	ldr	r1, [sp, #4]
 800d38c:	9805      	ldr	r0, [sp, #20]
 800d38e:	9e06      	ldr	r6, [sp, #24]
 800d390:	47b0      	blx	r6
 800d392:	9b02      	ldr	r3, [sp, #8]
 800d394:	6821      	ldr	r1, [r4, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	068a      	lsls	r2, r1, #26
 800d39a:	d507      	bpl.n	800d3ac <_scanf_i+0x1c8>
 800d39c:	1d1a      	adds	r2, r3, #4
 800d39e:	9902      	ldr	r1, [sp, #8]
 800d3a0:	600a      	str	r2, [r1, #0]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6018      	str	r0, [r3, #0]
 800d3a6:	e008      	b.n	800d3ba <_scanf_i+0x1d6>
 800d3a8:	2700      	movs	r7, #0
 800d3aa:	e7d4      	b.n	800d356 <_scanf_i+0x172>
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	07ce      	lsls	r6, r1, #31
 800d3b0:	d5f5      	bpl.n	800d39e <_scanf_i+0x1ba>
 800d3b2:	9902      	ldr	r1, [sp, #8]
 800d3b4:	600a      	str	r2, [r1, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	8018      	strh	r0, [r3, #0]
 800d3ba:	68e3      	ldr	r3, [r4, #12]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	60e3      	str	r3, [r4, #12]
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	9b01      	ldr	r3, [sp, #4]
 800d3c4:	1aed      	subs	r5, r5, r3
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	19ef      	adds	r7, r5, r7
 800d3ca:	19df      	adds	r7, r3, r7
 800d3cc:	6127      	str	r7, [r4, #16]
 800d3ce:	b00d      	add	sp, #52	; 0x34
 800d3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d2:	46c0      	nop			; (mov r8, r8)
 800d3d4:	0800e22c 	.word	0x0800e22c
 800d3d8:	0800aaa1 	.word	0x0800aaa1
 800d3dc:	0800d5f9 	.word	0x0800d5f9
 800d3e0:	fffffaff 	.word	0xfffffaff
 800d3e4:	0800e76e 	.word	0x0800e76e
 800d3e8:	fffff6ff 	.word	0xfffff6ff

0800d3ec <_read_r>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	0004      	movs	r4, r0
 800d3f0:	0008      	movs	r0, r1
 800d3f2:	0011      	movs	r1, r2
 800d3f4:	001a      	movs	r2, r3
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4d05      	ldr	r5, [pc, #20]	; (800d410 <_read_r+0x24>)
 800d3fa:	602b      	str	r3, [r5, #0]
 800d3fc:	f7f7 faea 	bl	80049d4 <_read>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d103      	bne.n	800d40c <_read_r+0x20>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d000      	beq.n	800d40c <_read_r+0x20>
 800d40a:	6023      	str	r3, [r4, #0]
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	46c0      	nop			; (mov r8, r8)
 800d410:	20000614 	.word	0x20000614

0800d414 <nan>:
 800d414:	2000      	movs	r0, #0
 800d416:	4901      	ldr	r1, [pc, #4]	; (800d41c <nan+0x8>)
 800d418:	4770      	bx	lr
 800d41a:	46c0      	nop			; (mov r8, r8)
 800d41c:	7ff80000 	.word	0x7ff80000

0800d420 <_sbrk_r>:
 800d420:	2300      	movs	r3, #0
 800d422:	b570      	push	{r4, r5, r6, lr}
 800d424:	4d06      	ldr	r5, [pc, #24]	; (800d440 <_sbrk_r+0x20>)
 800d426:	0004      	movs	r4, r0
 800d428:	0008      	movs	r0, r1
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	f7f7 fb38 	bl	8004aa0 <_sbrk>
 800d430:	1c43      	adds	r3, r0, #1
 800d432:	d103      	bne.n	800d43c <_sbrk_r+0x1c>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d000      	beq.n	800d43c <_sbrk_r+0x1c>
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	bd70      	pop	{r4, r5, r6, pc}
 800d43e:	46c0      	nop			; (mov r8, r8)
 800d440:	20000614 	.word	0x20000614

0800d444 <__sccl>:
 800d444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d446:	780b      	ldrb	r3, [r1, #0]
 800d448:	0004      	movs	r4, r0
 800d44a:	2b5e      	cmp	r3, #94	; 0x5e
 800d44c:	d00c      	beq.n	800d468 <__sccl+0x24>
 800d44e:	1c48      	adds	r0, r1, #1
 800d450:	2100      	movs	r1, #0
 800d452:	0022      	movs	r2, r4
 800d454:	1c65      	adds	r5, r4, #1
 800d456:	35ff      	adds	r5, #255	; 0xff
 800d458:	7011      	strb	r1, [r2, #0]
 800d45a:	3201      	adds	r2, #1
 800d45c:	42aa      	cmp	r2, r5
 800d45e:	d1fb      	bne.n	800d458 <__sccl+0x14>
 800d460:	2b00      	cmp	r3, #0
 800d462:	d105      	bne.n	800d470 <__sccl+0x2c>
 800d464:	3801      	subs	r0, #1
 800d466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d468:	784b      	ldrb	r3, [r1, #1]
 800d46a:	1c88      	adds	r0, r1, #2
 800d46c:	2101      	movs	r1, #1
 800d46e:	e7f0      	b.n	800d452 <__sccl+0xe>
 800d470:	2201      	movs	r2, #1
 800d472:	262d      	movs	r6, #45	; 0x2d
 800d474:	4051      	eors	r1, r2
 800d476:	0002      	movs	r2, r0
 800d478:	54e1      	strb	r1, [r4, r3]
 800d47a:	7815      	ldrb	r5, [r2, #0]
 800d47c:	1c50      	adds	r0, r2, #1
 800d47e:	2d2d      	cmp	r5, #45	; 0x2d
 800d480:	d009      	beq.n	800d496 <__sccl+0x52>
 800d482:	2d5d      	cmp	r5, #93	; 0x5d
 800d484:	d0ef      	beq.n	800d466 <__sccl+0x22>
 800d486:	2d00      	cmp	r5, #0
 800d488:	d101      	bne.n	800d48e <__sccl+0x4a>
 800d48a:	0010      	movs	r0, r2
 800d48c:	e7eb      	b.n	800d466 <__sccl+0x22>
 800d48e:	002b      	movs	r3, r5
 800d490:	e7f1      	b.n	800d476 <__sccl+0x32>
 800d492:	0033      	movs	r3, r6
 800d494:	e7ef      	b.n	800d476 <__sccl+0x32>
 800d496:	7855      	ldrb	r5, [r2, #1]
 800d498:	2d5d      	cmp	r5, #93	; 0x5d
 800d49a:	d0fa      	beq.n	800d492 <__sccl+0x4e>
 800d49c:	42ab      	cmp	r3, r5
 800d49e:	dcf8      	bgt.n	800d492 <__sccl+0x4e>
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	3202      	adds	r2, #2
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	5421      	strb	r1, [r4, r0]
 800d4a8:	4285      	cmp	r5, r0
 800d4aa:	dcfb      	bgt.n	800d4a4 <__sccl+0x60>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	1c5f      	adds	r7, r3, #1
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	da01      	bge.n	800d4b8 <__sccl+0x74>
 800d4b4:	1ae8      	subs	r0, r5, r3
 800d4b6:	3801      	subs	r0, #1
 800d4b8:	183b      	adds	r3, r7, r0
 800d4ba:	e7de      	b.n	800d47a <__sccl+0x36>

0800d4bc <strncmp>:
 800d4bc:	b530      	push	{r4, r5, lr}
 800d4be:	0005      	movs	r5, r0
 800d4c0:	1e10      	subs	r0, r2, #0
 800d4c2:	d00b      	beq.n	800d4dc <strncmp+0x20>
 800d4c4:	2400      	movs	r4, #0
 800d4c6:	3a01      	subs	r2, #1
 800d4c8:	5d2b      	ldrb	r3, [r5, r4]
 800d4ca:	5d08      	ldrb	r0, [r1, r4]
 800d4cc:	4283      	cmp	r3, r0
 800d4ce:	d104      	bne.n	800d4da <strncmp+0x1e>
 800d4d0:	4294      	cmp	r4, r2
 800d4d2:	d002      	beq.n	800d4da <strncmp+0x1e>
 800d4d4:	3401      	adds	r4, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1f6      	bne.n	800d4c8 <strncmp+0xc>
 800d4da:	1a18      	subs	r0, r3, r0
 800d4dc:	bd30      	pop	{r4, r5, pc}
	...

0800d4e0 <_strtoul_l.isra.0>:
 800d4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e2:	001e      	movs	r6, r3
 800d4e4:	4b43      	ldr	r3, [pc, #268]	; (800d5f4 <_strtoul_l.isra.0+0x114>)
 800d4e6:	b087      	sub	sp, #28
 800d4e8:	000f      	movs	r7, r1
 800d4ea:	9101      	str	r1, [sp, #4]
 800d4ec:	469c      	mov	ip, r3
 800d4ee:	2108      	movs	r1, #8
 800d4f0:	9005      	str	r0, [sp, #20]
 800d4f2:	9202      	str	r2, [sp, #8]
 800d4f4:	003b      	movs	r3, r7
 800d4f6:	4662      	mov	r2, ip
 800d4f8:	781c      	ldrb	r4, [r3, #0]
 800d4fa:	1c7d      	adds	r5, r7, #1
 800d4fc:	5d10      	ldrb	r0, [r2, r4]
 800d4fe:	002f      	movs	r7, r5
 800d500:	0002      	movs	r2, r0
 800d502:	400a      	ands	r2, r1
 800d504:	4208      	tst	r0, r1
 800d506:	d1f5      	bne.n	800d4f4 <_strtoul_l.isra.0+0x14>
 800d508:	2c2d      	cmp	r4, #45	; 0x2d
 800d50a:	d13a      	bne.n	800d582 <_strtoul_l.isra.0+0xa2>
 800d50c:	2701      	movs	r7, #1
 800d50e:	782c      	ldrb	r4, [r5, #0]
 800d510:	1c9d      	adds	r5, r3, #2
 800d512:	2e00      	cmp	r6, #0
 800d514:	d069      	beq.n	800d5ea <_strtoul_l.isra.0+0x10a>
 800d516:	2e10      	cmp	r6, #16
 800d518:	d109      	bne.n	800d52e <_strtoul_l.isra.0+0x4e>
 800d51a:	2c30      	cmp	r4, #48	; 0x30
 800d51c:	d107      	bne.n	800d52e <_strtoul_l.isra.0+0x4e>
 800d51e:	2220      	movs	r2, #32
 800d520:	782b      	ldrb	r3, [r5, #0]
 800d522:	4393      	bics	r3, r2
 800d524:	2b58      	cmp	r3, #88	; 0x58
 800d526:	d15b      	bne.n	800d5e0 <_strtoul_l.isra.0+0x100>
 800d528:	2610      	movs	r6, #16
 800d52a:	786c      	ldrb	r4, [r5, #1]
 800d52c:	3502      	adds	r5, #2
 800d52e:	2001      	movs	r0, #1
 800d530:	0031      	movs	r1, r6
 800d532:	4240      	negs	r0, r0
 800d534:	f7f2 fe0e 	bl	8000154 <__udivsi3>
 800d538:	9003      	str	r0, [sp, #12]
 800d53a:	2001      	movs	r0, #1
 800d53c:	0031      	movs	r1, r6
 800d53e:	4240      	negs	r0, r0
 800d540:	f7f2 fe8e 	bl	8000260 <__aeabi_uidivmod>
 800d544:	2300      	movs	r3, #0
 800d546:	9104      	str	r1, [sp, #16]
 800d548:	2101      	movs	r1, #1
 800d54a:	2201      	movs	r2, #1
 800d54c:	0018      	movs	r0, r3
 800d54e:	468c      	mov	ip, r1
 800d550:	4252      	negs	r2, r2
 800d552:	0021      	movs	r1, r4
 800d554:	3930      	subs	r1, #48	; 0x30
 800d556:	2909      	cmp	r1, #9
 800d558:	d81a      	bhi.n	800d590 <_strtoul_l.isra.0+0xb0>
 800d55a:	000c      	movs	r4, r1
 800d55c:	42a6      	cmp	r6, r4
 800d55e:	dd25      	ble.n	800d5ac <_strtoul_l.isra.0+0xcc>
 800d560:	2b00      	cmp	r3, #0
 800d562:	db21      	blt.n	800d5a8 <_strtoul_l.isra.0+0xc8>
 800d564:	9903      	ldr	r1, [sp, #12]
 800d566:	0013      	movs	r3, r2
 800d568:	4281      	cmp	r1, r0
 800d56a:	d307      	bcc.n	800d57c <_strtoul_l.isra.0+0x9c>
 800d56c:	d103      	bne.n	800d576 <_strtoul_l.isra.0+0x96>
 800d56e:	9904      	ldr	r1, [sp, #16]
 800d570:	0013      	movs	r3, r2
 800d572:	42a1      	cmp	r1, r4
 800d574:	db02      	blt.n	800d57c <_strtoul_l.isra.0+0x9c>
 800d576:	4663      	mov	r3, ip
 800d578:	4370      	muls	r0, r6
 800d57a:	1820      	adds	r0, r4, r0
 800d57c:	782c      	ldrb	r4, [r5, #0]
 800d57e:	3501      	adds	r5, #1
 800d580:	e7e7      	b.n	800d552 <_strtoul_l.isra.0+0x72>
 800d582:	2c2b      	cmp	r4, #43	; 0x2b
 800d584:	d001      	beq.n	800d58a <_strtoul_l.isra.0+0xaa>
 800d586:	0017      	movs	r7, r2
 800d588:	e7c3      	b.n	800d512 <_strtoul_l.isra.0+0x32>
 800d58a:	782c      	ldrb	r4, [r5, #0]
 800d58c:	1c9d      	adds	r5, r3, #2
 800d58e:	e7fa      	b.n	800d586 <_strtoul_l.isra.0+0xa6>
 800d590:	0021      	movs	r1, r4
 800d592:	3941      	subs	r1, #65	; 0x41
 800d594:	2919      	cmp	r1, #25
 800d596:	d801      	bhi.n	800d59c <_strtoul_l.isra.0+0xbc>
 800d598:	3c37      	subs	r4, #55	; 0x37
 800d59a:	e7df      	b.n	800d55c <_strtoul_l.isra.0+0x7c>
 800d59c:	0021      	movs	r1, r4
 800d59e:	3961      	subs	r1, #97	; 0x61
 800d5a0:	2919      	cmp	r1, #25
 800d5a2:	d803      	bhi.n	800d5ac <_strtoul_l.isra.0+0xcc>
 800d5a4:	3c57      	subs	r4, #87	; 0x57
 800d5a6:	e7d9      	b.n	800d55c <_strtoul_l.isra.0+0x7c>
 800d5a8:	0013      	movs	r3, r2
 800d5aa:	e7e7      	b.n	800d57c <_strtoul_l.isra.0+0x9c>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	da09      	bge.n	800d5c4 <_strtoul_l.isra.0+0xe4>
 800d5b0:	2322      	movs	r3, #34	; 0x22
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	9a05      	ldr	r2, [sp, #20]
 800d5b6:	4240      	negs	r0, r0
 800d5b8:	6013      	str	r3, [r2, #0]
 800d5ba:	9b02      	ldr	r3, [sp, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d109      	bne.n	800d5d4 <_strtoul_l.isra.0+0xf4>
 800d5c0:	b007      	add	sp, #28
 800d5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	d000      	beq.n	800d5ca <_strtoul_l.isra.0+0xea>
 800d5c8:	4240      	negs	r0, r0
 800d5ca:	9a02      	ldr	r2, [sp, #8]
 800d5cc:	2a00      	cmp	r2, #0
 800d5ce:	d0f7      	beq.n	800d5c0 <_strtoul_l.isra.0+0xe0>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <_strtoul_l.isra.0+0xf8>
 800d5d4:	1e6b      	subs	r3, r5, #1
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	9b02      	ldr	r3, [sp, #8]
 800d5da:	9a01      	ldr	r2, [sp, #4]
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	e7ef      	b.n	800d5c0 <_strtoul_l.isra.0+0xe0>
 800d5e0:	2430      	movs	r4, #48	; 0x30
 800d5e2:	2e00      	cmp	r6, #0
 800d5e4:	d1a3      	bne.n	800d52e <_strtoul_l.isra.0+0x4e>
 800d5e6:	3608      	adds	r6, #8
 800d5e8:	e7a1      	b.n	800d52e <_strtoul_l.isra.0+0x4e>
 800d5ea:	2c30      	cmp	r4, #48	; 0x30
 800d5ec:	d097      	beq.n	800d51e <_strtoul_l.isra.0+0x3e>
 800d5ee:	260a      	movs	r6, #10
 800d5f0:	e79d      	b.n	800d52e <_strtoul_l.isra.0+0x4e>
 800d5f2:	46c0      	nop			; (mov r8, r8)
 800d5f4:	0800e3e1 	.word	0x0800e3e1

0800d5f8 <_strtoul_r>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	f7ff ff71 	bl	800d4e0 <_strtoul_l.isra.0>
 800d5fe:	bd10      	pop	{r4, pc}

0800d600 <__submore>:
 800d600:	000b      	movs	r3, r1
 800d602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d604:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d606:	3344      	adds	r3, #68	; 0x44
 800d608:	000c      	movs	r4, r1
 800d60a:	429d      	cmp	r5, r3
 800d60c:	d11c      	bne.n	800d648 <__submore+0x48>
 800d60e:	2680      	movs	r6, #128	; 0x80
 800d610:	00f6      	lsls	r6, r6, #3
 800d612:	0031      	movs	r1, r6
 800d614:	f7ff f9f4 	bl	800ca00 <_malloc_r>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d102      	bne.n	800d622 <__submore+0x22>
 800d61c:	2001      	movs	r0, #1
 800d61e:	4240      	negs	r0, r0
 800d620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d622:	0023      	movs	r3, r4
 800d624:	6360      	str	r0, [r4, #52]	; 0x34
 800d626:	63a6      	str	r6, [r4, #56]	; 0x38
 800d628:	3346      	adds	r3, #70	; 0x46
 800d62a:	781a      	ldrb	r2, [r3, #0]
 800d62c:	4b10      	ldr	r3, [pc, #64]	; (800d670 <__submore+0x70>)
 800d62e:	54c2      	strb	r2, [r0, r3]
 800d630:	0023      	movs	r3, r4
 800d632:	3345      	adds	r3, #69	; 0x45
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <__submore+0x74>)
 800d638:	54c2      	strb	r2, [r0, r3]
 800d63a:	782a      	ldrb	r2, [r5, #0]
 800d63c:	4b0e      	ldr	r3, [pc, #56]	; (800d678 <__submore+0x78>)
 800d63e:	54c2      	strb	r2, [r0, r3]
 800d640:	18c0      	adds	r0, r0, r3
 800d642:	6020      	str	r0, [r4, #0]
 800d644:	2000      	movs	r0, #0
 800d646:	e7eb      	b.n	800d620 <__submore+0x20>
 800d648:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800d64a:	0029      	movs	r1, r5
 800d64c:	0073      	lsls	r3, r6, #1
 800d64e:	001a      	movs	r2, r3
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	f000 fa43 	bl	800dadc <_realloc_r>
 800d656:	1e05      	subs	r5, r0, #0
 800d658:	d0e0      	beq.n	800d61c <__submore+0x1c>
 800d65a:	1987      	adds	r7, r0, r6
 800d65c:	0001      	movs	r1, r0
 800d65e:	0032      	movs	r2, r6
 800d660:	0038      	movs	r0, r7
 800d662:	f7fe fca2 	bl	800bfaa <memcpy>
 800d666:	9b01      	ldr	r3, [sp, #4]
 800d668:	6027      	str	r7, [r4, #0]
 800d66a:	6365      	str	r5, [r4, #52]	; 0x34
 800d66c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d66e:	e7e9      	b.n	800d644 <__submore+0x44>
 800d670:	000003ff 	.word	0x000003ff
 800d674:	000003fe 	.word	0x000003fe
 800d678:	000003fd 	.word	0x000003fd

0800d67c <__ascii_wctomb>:
 800d67c:	0003      	movs	r3, r0
 800d67e:	1e08      	subs	r0, r1, #0
 800d680:	d005      	beq.n	800d68e <__ascii_wctomb+0x12>
 800d682:	2aff      	cmp	r2, #255	; 0xff
 800d684:	d904      	bls.n	800d690 <__ascii_wctomb+0x14>
 800d686:	228a      	movs	r2, #138	; 0x8a
 800d688:	2001      	movs	r0, #1
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	4240      	negs	r0, r0
 800d68e:	4770      	bx	lr
 800d690:	2001      	movs	r0, #1
 800d692:	700a      	strb	r2, [r1, #0]
 800d694:	e7fb      	b.n	800d68e <__ascii_wctomb+0x12>
	...

0800d698 <__assert_func>:
 800d698:	b530      	push	{r4, r5, lr}
 800d69a:	0014      	movs	r4, r2
 800d69c:	001a      	movs	r2, r3
 800d69e:	4b09      	ldr	r3, [pc, #36]	; (800d6c4 <__assert_func+0x2c>)
 800d6a0:	0005      	movs	r5, r0
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	68d8      	ldr	r0, [r3, #12]
 800d6a8:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <__assert_func+0x30>)
 800d6aa:	2c00      	cmp	r4, #0
 800d6ac:	d101      	bne.n	800d6b2 <__assert_func+0x1a>
 800d6ae:	4b07      	ldr	r3, [pc, #28]	; (800d6cc <__assert_func+0x34>)
 800d6b0:	001c      	movs	r4, r3
 800d6b2:	9301      	str	r3, [sp, #4]
 800d6b4:	9100      	str	r1, [sp, #0]
 800d6b6:	002b      	movs	r3, r5
 800d6b8:	4905      	ldr	r1, [pc, #20]	; (800d6d0 <__assert_func+0x38>)
 800d6ba:	9402      	str	r4, [sp, #8]
 800d6bc:	f000 f9b8 	bl	800da30 <fiprintf>
 800d6c0:	f000 fc62 	bl	800df88 <abort>
 800d6c4:	2000000c 	.word	0x2000000c
 800d6c8:	0800e780 	.word	0x0800e780
 800d6cc:	0800e7bb 	.word	0x0800e7bb
 800d6d0:	0800e78d 	.word	0x0800e78d

0800d6d4 <__sflush_r>:
 800d6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6d6:	898b      	ldrh	r3, [r1, #12]
 800d6d8:	0005      	movs	r5, r0
 800d6da:	000c      	movs	r4, r1
 800d6dc:	071a      	lsls	r2, r3, #28
 800d6de:	d45f      	bmi.n	800d7a0 <__sflush_r+0xcc>
 800d6e0:	684a      	ldr	r2, [r1, #4]
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	dc04      	bgt.n	800d6f0 <__sflush_r+0x1c>
 800d6e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d6e8:	2a00      	cmp	r2, #0
 800d6ea:	dc01      	bgt.n	800d6f0 <__sflush_r+0x1c>
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d6f2:	2f00      	cmp	r7, #0
 800d6f4:	d0fa      	beq.n	800d6ec <__sflush_r+0x18>
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	2180      	movs	r1, #128	; 0x80
 800d6fa:	682e      	ldr	r6, [r5, #0]
 800d6fc:	602a      	str	r2, [r5, #0]
 800d6fe:	001a      	movs	r2, r3
 800d700:	0149      	lsls	r1, r1, #5
 800d702:	400a      	ands	r2, r1
 800d704:	420b      	tst	r3, r1
 800d706:	d034      	beq.n	800d772 <__sflush_r+0x9e>
 800d708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d70a:	89a3      	ldrh	r3, [r4, #12]
 800d70c:	075b      	lsls	r3, r3, #29
 800d70e:	d506      	bpl.n	800d71e <__sflush_r+0x4a>
 800d710:	6863      	ldr	r3, [r4, #4]
 800d712:	1ac0      	subs	r0, r0, r3
 800d714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <__sflush_r+0x4a>
 800d71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d71c:	1ac0      	subs	r0, r0, r3
 800d71e:	0002      	movs	r2, r0
 800d720:	6a21      	ldr	r1, [r4, #32]
 800d722:	2300      	movs	r3, #0
 800d724:	0028      	movs	r0, r5
 800d726:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d728:	47b8      	blx	r7
 800d72a:	89a1      	ldrh	r1, [r4, #12]
 800d72c:	1c43      	adds	r3, r0, #1
 800d72e:	d106      	bne.n	800d73e <__sflush_r+0x6a>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	2b1d      	cmp	r3, #29
 800d734:	d831      	bhi.n	800d79a <__sflush_r+0xc6>
 800d736:	4a2c      	ldr	r2, [pc, #176]	; (800d7e8 <__sflush_r+0x114>)
 800d738:	40da      	lsrs	r2, r3
 800d73a:	07d3      	lsls	r3, r2, #31
 800d73c:	d52d      	bpl.n	800d79a <__sflush_r+0xc6>
 800d73e:	2300      	movs	r3, #0
 800d740:	6063      	str	r3, [r4, #4]
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	04cb      	lsls	r3, r1, #19
 800d748:	d505      	bpl.n	800d756 <__sflush_r+0x82>
 800d74a:	1c43      	adds	r3, r0, #1
 800d74c:	d102      	bne.n	800d754 <__sflush_r+0x80>
 800d74e:	682b      	ldr	r3, [r5, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d100      	bne.n	800d756 <__sflush_r+0x82>
 800d754:	6560      	str	r0, [r4, #84]	; 0x54
 800d756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d758:	602e      	str	r6, [r5, #0]
 800d75a:	2900      	cmp	r1, #0
 800d75c:	d0c6      	beq.n	800d6ec <__sflush_r+0x18>
 800d75e:	0023      	movs	r3, r4
 800d760:	3344      	adds	r3, #68	; 0x44
 800d762:	4299      	cmp	r1, r3
 800d764:	d002      	beq.n	800d76c <__sflush_r+0x98>
 800d766:	0028      	movs	r0, r5
 800d768:	f7ff f900 	bl	800c96c <_free_r>
 800d76c:	2000      	movs	r0, #0
 800d76e:	6360      	str	r0, [r4, #52]	; 0x34
 800d770:	e7bd      	b.n	800d6ee <__sflush_r+0x1a>
 800d772:	2301      	movs	r3, #1
 800d774:	0028      	movs	r0, r5
 800d776:	6a21      	ldr	r1, [r4, #32]
 800d778:	47b8      	blx	r7
 800d77a:	1c43      	adds	r3, r0, #1
 800d77c:	d1c5      	bne.n	800d70a <__sflush_r+0x36>
 800d77e:	682b      	ldr	r3, [r5, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d0c2      	beq.n	800d70a <__sflush_r+0x36>
 800d784:	2b1d      	cmp	r3, #29
 800d786:	d001      	beq.n	800d78c <__sflush_r+0xb8>
 800d788:	2b16      	cmp	r3, #22
 800d78a:	d101      	bne.n	800d790 <__sflush_r+0xbc>
 800d78c:	602e      	str	r6, [r5, #0]
 800d78e:	e7ad      	b.n	800d6ec <__sflush_r+0x18>
 800d790:	2340      	movs	r3, #64	; 0x40
 800d792:	89a2      	ldrh	r2, [r4, #12]
 800d794:	4313      	orrs	r3, r2
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	e7a9      	b.n	800d6ee <__sflush_r+0x1a>
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	430b      	orrs	r3, r1
 800d79e:	e7fa      	b.n	800d796 <__sflush_r+0xc2>
 800d7a0:	690f      	ldr	r7, [r1, #16]
 800d7a2:	2f00      	cmp	r7, #0
 800d7a4:	d0a2      	beq.n	800d6ec <__sflush_r+0x18>
 800d7a6:	680a      	ldr	r2, [r1, #0]
 800d7a8:	600f      	str	r7, [r1, #0]
 800d7aa:	1bd2      	subs	r2, r2, r7
 800d7ac:	9201      	str	r2, [sp, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	079b      	lsls	r3, r3, #30
 800d7b2:	d100      	bne.n	800d7b6 <__sflush_r+0xe2>
 800d7b4:	694a      	ldr	r2, [r1, #20]
 800d7b6:	60a2      	str	r2, [r4, #8]
 800d7b8:	9b01      	ldr	r3, [sp, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dc00      	bgt.n	800d7c0 <__sflush_r+0xec>
 800d7be:	e795      	b.n	800d6ec <__sflush_r+0x18>
 800d7c0:	003a      	movs	r2, r7
 800d7c2:	0028      	movs	r0, r5
 800d7c4:	9b01      	ldr	r3, [sp, #4]
 800d7c6:	6a21      	ldr	r1, [r4, #32]
 800d7c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7ca:	47b0      	blx	r6
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	dc06      	bgt.n	800d7de <__sflush_r+0x10a>
 800d7d0:	2340      	movs	r3, #64	; 0x40
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	89a2      	ldrh	r2, [r4, #12]
 800d7d6:	4240      	negs	r0, r0
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	81a3      	strh	r3, [r4, #12]
 800d7dc:	e787      	b.n	800d6ee <__sflush_r+0x1a>
 800d7de:	9b01      	ldr	r3, [sp, #4]
 800d7e0:	183f      	adds	r7, r7, r0
 800d7e2:	1a1b      	subs	r3, r3, r0
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	e7e7      	b.n	800d7b8 <__sflush_r+0xe4>
 800d7e8:	20400001 	.word	0x20400001

0800d7ec <_fflush_r>:
 800d7ec:	690b      	ldr	r3, [r1, #16]
 800d7ee:	b570      	push	{r4, r5, r6, lr}
 800d7f0:	0005      	movs	r5, r0
 800d7f2:	000c      	movs	r4, r1
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <_fflush_r+0x12>
 800d7f8:	2500      	movs	r5, #0
 800d7fa:	0028      	movs	r0, r5
 800d7fc:	bd70      	pop	{r4, r5, r6, pc}
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d004      	beq.n	800d80c <_fflush_r+0x20>
 800d802:	6983      	ldr	r3, [r0, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d101      	bne.n	800d80c <_fflush_r+0x20>
 800d808:	f000 f892 	bl	800d930 <__sinit>
 800d80c:	4b14      	ldr	r3, [pc, #80]	; (800d860 <_fflush_r+0x74>)
 800d80e:	429c      	cmp	r4, r3
 800d810:	d11b      	bne.n	800d84a <_fflush_r+0x5e>
 800d812:	686c      	ldr	r4, [r5, #4]
 800d814:	220c      	movs	r2, #12
 800d816:	5ea3      	ldrsh	r3, [r4, r2]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d0ed      	beq.n	800d7f8 <_fflush_r+0xc>
 800d81c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d81e:	07d2      	lsls	r2, r2, #31
 800d820:	d404      	bmi.n	800d82c <_fflush_r+0x40>
 800d822:	059b      	lsls	r3, r3, #22
 800d824:	d402      	bmi.n	800d82c <_fflush_r+0x40>
 800d826:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d828:	f000 f933 	bl	800da92 <__retarget_lock_acquire_recursive>
 800d82c:	0028      	movs	r0, r5
 800d82e:	0021      	movs	r1, r4
 800d830:	f7ff ff50 	bl	800d6d4 <__sflush_r>
 800d834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d836:	0005      	movs	r5, r0
 800d838:	07db      	lsls	r3, r3, #31
 800d83a:	d4de      	bmi.n	800d7fa <_fflush_r+0xe>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	059b      	lsls	r3, r3, #22
 800d840:	d4db      	bmi.n	800d7fa <_fflush_r+0xe>
 800d842:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d844:	f000 f926 	bl	800da94 <__retarget_lock_release_recursive>
 800d848:	e7d7      	b.n	800d7fa <_fflush_r+0xe>
 800d84a:	4b06      	ldr	r3, [pc, #24]	; (800d864 <_fflush_r+0x78>)
 800d84c:	429c      	cmp	r4, r3
 800d84e:	d101      	bne.n	800d854 <_fflush_r+0x68>
 800d850:	68ac      	ldr	r4, [r5, #8]
 800d852:	e7df      	b.n	800d814 <_fflush_r+0x28>
 800d854:	4b04      	ldr	r3, [pc, #16]	; (800d868 <_fflush_r+0x7c>)
 800d856:	429c      	cmp	r4, r3
 800d858:	d1dc      	bne.n	800d814 <_fflush_r+0x28>
 800d85a:	68ec      	ldr	r4, [r5, #12]
 800d85c:	e7da      	b.n	800d814 <_fflush_r+0x28>
 800d85e:	46c0      	nop			; (mov r8, r8)
 800d860:	0800e7dc 	.word	0x0800e7dc
 800d864:	0800e7fc 	.word	0x0800e7fc
 800d868:	0800e7bc 	.word	0x0800e7bc

0800d86c <std>:
 800d86c:	2300      	movs	r3, #0
 800d86e:	b510      	push	{r4, lr}
 800d870:	0004      	movs	r4, r0
 800d872:	6003      	str	r3, [r0, #0]
 800d874:	6043      	str	r3, [r0, #4]
 800d876:	6083      	str	r3, [r0, #8]
 800d878:	8181      	strh	r1, [r0, #12]
 800d87a:	6643      	str	r3, [r0, #100]	; 0x64
 800d87c:	0019      	movs	r1, r3
 800d87e:	81c2      	strh	r2, [r0, #14]
 800d880:	6103      	str	r3, [r0, #16]
 800d882:	6143      	str	r3, [r0, #20]
 800d884:	6183      	str	r3, [r0, #24]
 800d886:	2208      	movs	r2, #8
 800d888:	305c      	adds	r0, #92	; 0x5c
 800d88a:	f7fb fb0b 	bl	8008ea4 <memset>
 800d88e:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <std+0x38>)
 800d890:	6263      	str	r3, [r4, #36]	; 0x24
 800d892:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <std+0x3c>)
 800d894:	6224      	str	r4, [r4, #32]
 800d896:	62a3      	str	r3, [r4, #40]	; 0x28
 800d898:	4b04      	ldr	r3, [pc, #16]	; (800d8ac <std+0x40>)
 800d89a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d89c:	4b04      	ldr	r3, [pc, #16]	; (800d8b0 <std+0x44>)
 800d89e:	6323      	str	r3, [r4, #48]	; 0x30
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	46c0      	nop			; (mov r8, r8)
 800d8a4:	08009c51 	.word	0x08009c51
 800d8a8:	08009c7d 	.word	0x08009c7d
 800d8ac:	08009cb5 	.word	0x08009cb5
 800d8b0:	08009ce1 	.word	0x08009ce1

0800d8b4 <_cleanup_r>:
 800d8b4:	b510      	push	{r4, lr}
 800d8b6:	4902      	ldr	r1, [pc, #8]	; (800d8c0 <_cleanup_r+0xc>)
 800d8b8:	f000 f8ca 	bl	800da50 <_fwalk_reent>
 800d8bc:	bd10      	pop	{r4, pc}
 800d8be:	46c0      	nop			; (mov r8, r8)
 800d8c0:	0800d7ed 	.word	0x0800d7ed

0800d8c4 <__sfmoreglue>:
 800d8c4:	b570      	push	{r4, r5, r6, lr}
 800d8c6:	2568      	movs	r5, #104	; 0x68
 800d8c8:	1e4a      	subs	r2, r1, #1
 800d8ca:	4355      	muls	r5, r2
 800d8cc:	000e      	movs	r6, r1
 800d8ce:	0029      	movs	r1, r5
 800d8d0:	3174      	adds	r1, #116	; 0x74
 800d8d2:	f7ff f895 	bl	800ca00 <_malloc_r>
 800d8d6:	1e04      	subs	r4, r0, #0
 800d8d8:	d008      	beq.n	800d8ec <__sfmoreglue+0x28>
 800d8da:	2100      	movs	r1, #0
 800d8dc:	002a      	movs	r2, r5
 800d8de:	6001      	str	r1, [r0, #0]
 800d8e0:	6046      	str	r6, [r0, #4]
 800d8e2:	300c      	adds	r0, #12
 800d8e4:	60a0      	str	r0, [r4, #8]
 800d8e6:	3268      	adds	r2, #104	; 0x68
 800d8e8:	f7fb fadc 	bl	8008ea4 <memset>
 800d8ec:	0020      	movs	r0, r4
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}

0800d8f0 <__sfp_lock_acquire>:
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	4802      	ldr	r0, [pc, #8]	; (800d8fc <__sfp_lock_acquire+0xc>)
 800d8f4:	f000 f8cd 	bl	800da92 <__retarget_lock_acquire_recursive>
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	46c0      	nop			; (mov r8, r8)
 800d8fc:	20000620 	.word	0x20000620

0800d900 <__sfp_lock_release>:
 800d900:	b510      	push	{r4, lr}
 800d902:	4802      	ldr	r0, [pc, #8]	; (800d90c <__sfp_lock_release+0xc>)
 800d904:	f000 f8c6 	bl	800da94 <__retarget_lock_release_recursive>
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	46c0      	nop			; (mov r8, r8)
 800d90c:	20000620 	.word	0x20000620

0800d910 <__sinit_lock_acquire>:
 800d910:	b510      	push	{r4, lr}
 800d912:	4802      	ldr	r0, [pc, #8]	; (800d91c <__sinit_lock_acquire+0xc>)
 800d914:	f000 f8bd 	bl	800da92 <__retarget_lock_acquire_recursive>
 800d918:	bd10      	pop	{r4, pc}
 800d91a:	46c0      	nop			; (mov r8, r8)
 800d91c:	2000061b 	.word	0x2000061b

0800d920 <__sinit_lock_release>:
 800d920:	b510      	push	{r4, lr}
 800d922:	4802      	ldr	r0, [pc, #8]	; (800d92c <__sinit_lock_release+0xc>)
 800d924:	f000 f8b6 	bl	800da94 <__retarget_lock_release_recursive>
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	46c0      	nop			; (mov r8, r8)
 800d92c:	2000061b 	.word	0x2000061b

0800d930 <__sinit>:
 800d930:	b513      	push	{r0, r1, r4, lr}
 800d932:	0004      	movs	r4, r0
 800d934:	f7ff ffec 	bl	800d910 <__sinit_lock_acquire>
 800d938:	69a3      	ldr	r3, [r4, #24]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <__sinit+0x14>
 800d93e:	f7ff ffef 	bl	800d920 <__sinit_lock_release>
 800d942:	bd13      	pop	{r0, r1, r4, pc}
 800d944:	64a3      	str	r3, [r4, #72]	; 0x48
 800d946:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d948:	6523      	str	r3, [r4, #80]	; 0x50
 800d94a:	4b13      	ldr	r3, [pc, #76]	; (800d998 <__sinit+0x68>)
 800d94c:	4a13      	ldr	r2, [pc, #76]	; (800d99c <__sinit+0x6c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	62a2      	str	r2, [r4, #40]	; 0x28
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	42a3      	cmp	r3, r4
 800d956:	d101      	bne.n	800d95c <__sinit+0x2c>
 800d958:	2301      	movs	r3, #1
 800d95a:	61a3      	str	r3, [r4, #24]
 800d95c:	0020      	movs	r0, r4
 800d95e:	f000 f81f 	bl	800d9a0 <__sfp>
 800d962:	6060      	str	r0, [r4, #4]
 800d964:	0020      	movs	r0, r4
 800d966:	f000 f81b 	bl	800d9a0 <__sfp>
 800d96a:	60a0      	str	r0, [r4, #8]
 800d96c:	0020      	movs	r0, r4
 800d96e:	f000 f817 	bl	800d9a0 <__sfp>
 800d972:	2200      	movs	r2, #0
 800d974:	2104      	movs	r1, #4
 800d976:	60e0      	str	r0, [r4, #12]
 800d978:	6860      	ldr	r0, [r4, #4]
 800d97a:	f7ff ff77 	bl	800d86c <std>
 800d97e:	2201      	movs	r2, #1
 800d980:	2109      	movs	r1, #9
 800d982:	68a0      	ldr	r0, [r4, #8]
 800d984:	f7ff ff72 	bl	800d86c <std>
 800d988:	2202      	movs	r2, #2
 800d98a:	2112      	movs	r1, #18
 800d98c:	68e0      	ldr	r0, [r4, #12]
 800d98e:	f7ff ff6d 	bl	800d86c <std>
 800d992:	2301      	movs	r3, #1
 800d994:	61a3      	str	r3, [r4, #24]
 800d996:	e7d2      	b.n	800d93e <__sinit+0xe>
 800d998:	0800e350 	.word	0x0800e350
 800d99c:	0800d8b5 	.word	0x0800d8b5

0800d9a0 <__sfp>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	0007      	movs	r7, r0
 800d9a4:	f7ff ffa4 	bl	800d8f0 <__sfp_lock_acquire>
 800d9a8:	4b1f      	ldr	r3, [pc, #124]	; (800da28 <__sfp+0x88>)
 800d9aa:	681e      	ldr	r6, [r3, #0]
 800d9ac:	69b3      	ldr	r3, [r6, #24]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d102      	bne.n	800d9b8 <__sfp+0x18>
 800d9b2:	0030      	movs	r0, r6
 800d9b4:	f7ff ffbc 	bl	800d930 <__sinit>
 800d9b8:	3648      	adds	r6, #72	; 0x48
 800d9ba:	68b4      	ldr	r4, [r6, #8]
 800d9bc:	6873      	ldr	r3, [r6, #4]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	d504      	bpl.n	800d9cc <__sfp+0x2c>
 800d9c2:	6833      	ldr	r3, [r6, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d022      	beq.n	800da0e <__sfp+0x6e>
 800d9c8:	6836      	ldr	r6, [r6, #0]
 800d9ca:	e7f6      	b.n	800d9ba <__sfp+0x1a>
 800d9cc:	220c      	movs	r2, #12
 800d9ce:	5ea5      	ldrsh	r5, [r4, r2]
 800d9d0:	2d00      	cmp	r5, #0
 800d9d2:	d11a      	bne.n	800da0a <__sfp+0x6a>
 800d9d4:	0020      	movs	r0, r4
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <__sfp+0x8c>)
 800d9d8:	3058      	adds	r0, #88	; 0x58
 800d9da:	60e3      	str	r3, [r4, #12]
 800d9dc:	6665      	str	r5, [r4, #100]	; 0x64
 800d9de:	f000 f857 	bl	800da90 <__retarget_lock_init_recursive>
 800d9e2:	f7ff ff8d 	bl	800d900 <__sfp_lock_release>
 800d9e6:	0020      	movs	r0, r4
 800d9e8:	2208      	movs	r2, #8
 800d9ea:	0029      	movs	r1, r5
 800d9ec:	6025      	str	r5, [r4, #0]
 800d9ee:	60a5      	str	r5, [r4, #8]
 800d9f0:	6065      	str	r5, [r4, #4]
 800d9f2:	6125      	str	r5, [r4, #16]
 800d9f4:	6165      	str	r5, [r4, #20]
 800d9f6:	61a5      	str	r5, [r4, #24]
 800d9f8:	305c      	adds	r0, #92	; 0x5c
 800d9fa:	f7fb fa53 	bl	8008ea4 <memset>
 800d9fe:	6365      	str	r5, [r4, #52]	; 0x34
 800da00:	63a5      	str	r5, [r4, #56]	; 0x38
 800da02:	64a5      	str	r5, [r4, #72]	; 0x48
 800da04:	64e5      	str	r5, [r4, #76]	; 0x4c
 800da06:	0020      	movs	r0, r4
 800da08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da0a:	3468      	adds	r4, #104	; 0x68
 800da0c:	e7d7      	b.n	800d9be <__sfp+0x1e>
 800da0e:	2104      	movs	r1, #4
 800da10:	0038      	movs	r0, r7
 800da12:	f7ff ff57 	bl	800d8c4 <__sfmoreglue>
 800da16:	1e04      	subs	r4, r0, #0
 800da18:	6030      	str	r0, [r6, #0]
 800da1a:	d1d5      	bne.n	800d9c8 <__sfp+0x28>
 800da1c:	f7ff ff70 	bl	800d900 <__sfp_lock_release>
 800da20:	230c      	movs	r3, #12
 800da22:	603b      	str	r3, [r7, #0]
 800da24:	e7ef      	b.n	800da06 <__sfp+0x66>
 800da26:	46c0      	nop			; (mov r8, r8)
 800da28:	0800e350 	.word	0x0800e350
 800da2c:	ffff0001 	.word	0xffff0001

0800da30 <fiprintf>:
 800da30:	b40e      	push	{r1, r2, r3}
 800da32:	b503      	push	{r0, r1, lr}
 800da34:	0001      	movs	r1, r0
 800da36:	ab03      	add	r3, sp, #12
 800da38:	4804      	ldr	r0, [pc, #16]	; (800da4c <fiprintf+0x1c>)
 800da3a:	cb04      	ldmia	r3!, {r2}
 800da3c:	6800      	ldr	r0, [r0, #0]
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	f000 f89a 	bl	800db78 <_vfiprintf_r>
 800da44:	b002      	add	sp, #8
 800da46:	bc08      	pop	{r3}
 800da48:	b003      	add	sp, #12
 800da4a:	4718      	bx	r3
 800da4c:	2000000c 	.word	0x2000000c

0800da50 <_fwalk_reent>:
 800da50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da52:	0004      	movs	r4, r0
 800da54:	0006      	movs	r6, r0
 800da56:	2700      	movs	r7, #0
 800da58:	9101      	str	r1, [sp, #4]
 800da5a:	3448      	adds	r4, #72	; 0x48
 800da5c:	6863      	ldr	r3, [r4, #4]
 800da5e:	68a5      	ldr	r5, [r4, #8]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	9b00      	ldr	r3, [sp, #0]
 800da64:	3b01      	subs	r3, #1
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	d504      	bpl.n	800da74 <_fwalk_reent+0x24>
 800da6a:	6824      	ldr	r4, [r4, #0]
 800da6c:	2c00      	cmp	r4, #0
 800da6e:	d1f5      	bne.n	800da5c <_fwalk_reent+0xc>
 800da70:	0038      	movs	r0, r7
 800da72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da74:	89ab      	ldrh	r3, [r5, #12]
 800da76:	2b01      	cmp	r3, #1
 800da78:	d908      	bls.n	800da8c <_fwalk_reent+0x3c>
 800da7a:	220e      	movs	r2, #14
 800da7c:	5eab      	ldrsh	r3, [r5, r2]
 800da7e:	3301      	adds	r3, #1
 800da80:	d004      	beq.n	800da8c <_fwalk_reent+0x3c>
 800da82:	0029      	movs	r1, r5
 800da84:	0030      	movs	r0, r6
 800da86:	9b01      	ldr	r3, [sp, #4]
 800da88:	4798      	blx	r3
 800da8a:	4307      	orrs	r7, r0
 800da8c:	3568      	adds	r5, #104	; 0x68
 800da8e:	e7e8      	b.n	800da62 <_fwalk_reent+0x12>

0800da90 <__retarget_lock_init_recursive>:
 800da90:	4770      	bx	lr

0800da92 <__retarget_lock_acquire_recursive>:
 800da92:	4770      	bx	lr

0800da94 <__retarget_lock_release_recursive>:
 800da94:	4770      	bx	lr

0800da96 <memmove>:
 800da96:	b510      	push	{r4, lr}
 800da98:	4288      	cmp	r0, r1
 800da9a:	d902      	bls.n	800daa2 <memmove+0xc>
 800da9c:	188b      	adds	r3, r1, r2
 800da9e:	4298      	cmp	r0, r3
 800daa0:	d303      	bcc.n	800daaa <memmove+0x14>
 800daa2:	2300      	movs	r3, #0
 800daa4:	e007      	b.n	800dab6 <memmove+0x20>
 800daa6:	5c8b      	ldrb	r3, [r1, r2]
 800daa8:	5483      	strb	r3, [r0, r2]
 800daaa:	3a01      	subs	r2, #1
 800daac:	d2fb      	bcs.n	800daa6 <memmove+0x10>
 800daae:	bd10      	pop	{r4, pc}
 800dab0:	5ccc      	ldrb	r4, [r1, r3]
 800dab2:	54c4      	strb	r4, [r0, r3]
 800dab4:	3301      	adds	r3, #1
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d1fa      	bne.n	800dab0 <memmove+0x1a>
 800daba:	e7f8      	b.n	800daae <memmove+0x18>

0800dabc <__malloc_lock>:
 800dabc:	b510      	push	{r4, lr}
 800dabe:	4802      	ldr	r0, [pc, #8]	; (800dac8 <__malloc_lock+0xc>)
 800dac0:	f7ff ffe7 	bl	800da92 <__retarget_lock_acquire_recursive>
 800dac4:	bd10      	pop	{r4, pc}
 800dac6:	46c0      	nop			; (mov r8, r8)
 800dac8:	2000061c 	.word	0x2000061c

0800dacc <__malloc_unlock>:
 800dacc:	b510      	push	{r4, lr}
 800dace:	4802      	ldr	r0, [pc, #8]	; (800dad8 <__malloc_unlock+0xc>)
 800dad0:	f7ff ffe0 	bl	800da94 <__retarget_lock_release_recursive>
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	46c0      	nop			; (mov r8, r8)
 800dad8:	2000061c 	.word	0x2000061c

0800dadc <_realloc_r>:
 800dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dade:	0007      	movs	r7, r0
 800dae0:	000d      	movs	r5, r1
 800dae2:	0016      	movs	r6, r2
 800dae4:	2900      	cmp	r1, #0
 800dae6:	d105      	bne.n	800daf4 <_realloc_r+0x18>
 800dae8:	0011      	movs	r1, r2
 800daea:	f7fe ff89 	bl	800ca00 <_malloc_r>
 800daee:	0004      	movs	r4, r0
 800daf0:	0020      	movs	r0, r4
 800daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf4:	2a00      	cmp	r2, #0
 800daf6:	d103      	bne.n	800db00 <_realloc_r+0x24>
 800daf8:	f7fe ff38 	bl	800c96c <_free_r>
 800dafc:	0034      	movs	r4, r6
 800dafe:	e7f7      	b.n	800daf0 <_realloc_r+0x14>
 800db00:	f000 fab6 	bl	800e070 <_malloc_usable_size_r>
 800db04:	002c      	movs	r4, r5
 800db06:	42b0      	cmp	r0, r6
 800db08:	d2f2      	bcs.n	800daf0 <_realloc_r+0x14>
 800db0a:	0031      	movs	r1, r6
 800db0c:	0038      	movs	r0, r7
 800db0e:	f7fe ff77 	bl	800ca00 <_malloc_r>
 800db12:	1e04      	subs	r4, r0, #0
 800db14:	d0ec      	beq.n	800daf0 <_realloc_r+0x14>
 800db16:	0029      	movs	r1, r5
 800db18:	0032      	movs	r2, r6
 800db1a:	f7fe fa46 	bl	800bfaa <memcpy>
 800db1e:	0029      	movs	r1, r5
 800db20:	0038      	movs	r0, r7
 800db22:	f7fe ff23 	bl	800c96c <_free_r>
 800db26:	e7e3      	b.n	800daf0 <_realloc_r+0x14>

0800db28 <__sfputc_r>:
 800db28:	6893      	ldr	r3, [r2, #8]
 800db2a:	b510      	push	{r4, lr}
 800db2c:	3b01      	subs	r3, #1
 800db2e:	6093      	str	r3, [r2, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	da04      	bge.n	800db3e <__sfputc_r+0x16>
 800db34:	6994      	ldr	r4, [r2, #24]
 800db36:	42a3      	cmp	r3, r4
 800db38:	db07      	blt.n	800db4a <__sfputc_r+0x22>
 800db3a:	290a      	cmp	r1, #10
 800db3c:	d005      	beq.n	800db4a <__sfputc_r+0x22>
 800db3e:	6813      	ldr	r3, [r2, #0]
 800db40:	1c58      	adds	r0, r3, #1
 800db42:	6010      	str	r0, [r2, #0]
 800db44:	7019      	strb	r1, [r3, #0]
 800db46:	0008      	movs	r0, r1
 800db48:	bd10      	pop	{r4, pc}
 800db4a:	f000 f94f 	bl	800ddec <__swbuf_r>
 800db4e:	0001      	movs	r1, r0
 800db50:	e7f9      	b.n	800db46 <__sfputc_r+0x1e>

0800db52 <__sfputs_r>:
 800db52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db54:	0006      	movs	r6, r0
 800db56:	000f      	movs	r7, r1
 800db58:	0014      	movs	r4, r2
 800db5a:	18d5      	adds	r5, r2, r3
 800db5c:	42ac      	cmp	r4, r5
 800db5e:	d101      	bne.n	800db64 <__sfputs_r+0x12>
 800db60:	2000      	movs	r0, #0
 800db62:	e007      	b.n	800db74 <__sfputs_r+0x22>
 800db64:	7821      	ldrb	r1, [r4, #0]
 800db66:	003a      	movs	r2, r7
 800db68:	0030      	movs	r0, r6
 800db6a:	f7ff ffdd 	bl	800db28 <__sfputc_r>
 800db6e:	3401      	adds	r4, #1
 800db70:	1c43      	adds	r3, r0, #1
 800db72:	d1f3      	bne.n	800db5c <__sfputs_r+0xa>
 800db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db78 <_vfiprintf_r>:
 800db78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db7a:	b0a1      	sub	sp, #132	; 0x84
 800db7c:	0006      	movs	r6, r0
 800db7e:	000c      	movs	r4, r1
 800db80:	001f      	movs	r7, r3
 800db82:	9203      	str	r2, [sp, #12]
 800db84:	2800      	cmp	r0, #0
 800db86:	d004      	beq.n	800db92 <_vfiprintf_r+0x1a>
 800db88:	6983      	ldr	r3, [r0, #24]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <_vfiprintf_r+0x1a>
 800db8e:	f7ff fecf 	bl	800d930 <__sinit>
 800db92:	4b8e      	ldr	r3, [pc, #568]	; (800ddcc <_vfiprintf_r+0x254>)
 800db94:	429c      	cmp	r4, r3
 800db96:	d11c      	bne.n	800dbd2 <_vfiprintf_r+0x5a>
 800db98:	6874      	ldr	r4, [r6, #4]
 800db9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9c:	07db      	lsls	r3, r3, #31
 800db9e:	d405      	bmi.n	800dbac <_vfiprintf_r+0x34>
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	059b      	lsls	r3, r3, #22
 800dba4:	d402      	bmi.n	800dbac <_vfiprintf_r+0x34>
 800dba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba8:	f7ff ff73 	bl	800da92 <__retarget_lock_acquire_recursive>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	071b      	lsls	r3, r3, #28
 800dbb0:	d502      	bpl.n	800dbb8 <_vfiprintf_r+0x40>
 800dbb2:	6923      	ldr	r3, [r4, #16]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11d      	bne.n	800dbf4 <_vfiprintf_r+0x7c>
 800dbb8:	0021      	movs	r1, r4
 800dbba:	0030      	movs	r0, r6
 800dbbc:	f000 f96c 	bl	800de98 <__swsetup_r>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d017      	beq.n	800dbf4 <_vfiprintf_r+0x7c>
 800dbc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbc6:	07db      	lsls	r3, r3, #31
 800dbc8:	d50d      	bpl.n	800dbe6 <_vfiprintf_r+0x6e>
 800dbca:	2001      	movs	r0, #1
 800dbcc:	4240      	negs	r0, r0
 800dbce:	b021      	add	sp, #132	; 0x84
 800dbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd2:	4b7f      	ldr	r3, [pc, #508]	; (800ddd0 <_vfiprintf_r+0x258>)
 800dbd4:	429c      	cmp	r4, r3
 800dbd6:	d101      	bne.n	800dbdc <_vfiprintf_r+0x64>
 800dbd8:	68b4      	ldr	r4, [r6, #8]
 800dbda:	e7de      	b.n	800db9a <_vfiprintf_r+0x22>
 800dbdc:	4b7d      	ldr	r3, [pc, #500]	; (800ddd4 <_vfiprintf_r+0x25c>)
 800dbde:	429c      	cmp	r4, r3
 800dbe0:	d1db      	bne.n	800db9a <_vfiprintf_r+0x22>
 800dbe2:	68f4      	ldr	r4, [r6, #12]
 800dbe4:	e7d9      	b.n	800db9a <_vfiprintf_r+0x22>
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	059b      	lsls	r3, r3, #22
 800dbea:	d4ee      	bmi.n	800dbca <_vfiprintf_r+0x52>
 800dbec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbee:	f7ff ff51 	bl	800da94 <__retarget_lock_release_recursive>
 800dbf2:	e7ea      	b.n	800dbca <_vfiprintf_r+0x52>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	ad08      	add	r5, sp, #32
 800dbf8:	616b      	str	r3, [r5, #20]
 800dbfa:	3320      	adds	r3, #32
 800dbfc:	766b      	strb	r3, [r5, #25]
 800dbfe:	3310      	adds	r3, #16
 800dc00:	76ab      	strb	r3, [r5, #26]
 800dc02:	9707      	str	r7, [sp, #28]
 800dc04:	9f03      	ldr	r7, [sp, #12]
 800dc06:	783b      	ldrb	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <_vfiprintf_r+0x98>
 800dc0c:	2b25      	cmp	r3, #37	; 0x25
 800dc0e:	d14e      	bne.n	800dcae <_vfiprintf_r+0x136>
 800dc10:	9b03      	ldr	r3, [sp, #12]
 800dc12:	1afb      	subs	r3, r7, r3
 800dc14:	9305      	str	r3, [sp, #20]
 800dc16:	9b03      	ldr	r3, [sp, #12]
 800dc18:	429f      	cmp	r7, r3
 800dc1a:	d00d      	beq.n	800dc38 <_vfiprintf_r+0xc0>
 800dc1c:	9b05      	ldr	r3, [sp, #20]
 800dc1e:	0021      	movs	r1, r4
 800dc20:	0030      	movs	r0, r6
 800dc22:	9a03      	ldr	r2, [sp, #12]
 800dc24:	f7ff ff95 	bl	800db52 <__sfputs_r>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d100      	bne.n	800dc2e <_vfiprintf_r+0xb6>
 800dc2c:	e0b5      	b.n	800dd9a <_vfiprintf_r+0x222>
 800dc2e:	696a      	ldr	r2, [r5, #20]
 800dc30:	9b05      	ldr	r3, [sp, #20]
 800dc32:	4694      	mov	ip, r2
 800dc34:	4463      	add	r3, ip
 800dc36:	616b      	str	r3, [r5, #20]
 800dc38:	783b      	ldrb	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d100      	bne.n	800dc40 <_vfiprintf_r+0xc8>
 800dc3e:	e0ac      	b.n	800dd9a <_vfiprintf_r+0x222>
 800dc40:	2201      	movs	r2, #1
 800dc42:	1c7b      	adds	r3, r7, #1
 800dc44:	9303      	str	r3, [sp, #12]
 800dc46:	2300      	movs	r3, #0
 800dc48:	4252      	negs	r2, r2
 800dc4a:	606a      	str	r2, [r5, #4]
 800dc4c:	a904      	add	r1, sp, #16
 800dc4e:	3254      	adds	r2, #84	; 0x54
 800dc50:	1852      	adds	r2, r2, r1
 800dc52:	602b      	str	r3, [r5, #0]
 800dc54:	60eb      	str	r3, [r5, #12]
 800dc56:	60ab      	str	r3, [r5, #8]
 800dc58:	7013      	strb	r3, [r2, #0]
 800dc5a:	65ab      	str	r3, [r5, #88]	; 0x58
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	2205      	movs	r2, #5
 800dc60:	7819      	ldrb	r1, [r3, #0]
 800dc62:	485d      	ldr	r0, [pc, #372]	; (800ddd8 <_vfiprintf_r+0x260>)
 800dc64:	f7fe f996 	bl	800bf94 <memchr>
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	1c5f      	adds	r7, r3, #1
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d120      	bne.n	800dcb2 <_vfiprintf_r+0x13a>
 800dc70:	682a      	ldr	r2, [r5, #0]
 800dc72:	06d3      	lsls	r3, r2, #27
 800dc74:	d504      	bpl.n	800dc80 <_vfiprintf_r+0x108>
 800dc76:	2353      	movs	r3, #83	; 0x53
 800dc78:	a904      	add	r1, sp, #16
 800dc7a:	185b      	adds	r3, r3, r1
 800dc7c:	2120      	movs	r1, #32
 800dc7e:	7019      	strb	r1, [r3, #0]
 800dc80:	0713      	lsls	r3, r2, #28
 800dc82:	d504      	bpl.n	800dc8e <_vfiprintf_r+0x116>
 800dc84:	2353      	movs	r3, #83	; 0x53
 800dc86:	a904      	add	r1, sp, #16
 800dc88:	185b      	adds	r3, r3, r1
 800dc8a:	212b      	movs	r1, #43	; 0x2b
 800dc8c:	7019      	strb	r1, [r3, #0]
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b2a      	cmp	r3, #42	; 0x2a
 800dc94:	d016      	beq.n	800dcc4 <_vfiprintf_r+0x14c>
 800dc96:	2100      	movs	r1, #0
 800dc98:	68eb      	ldr	r3, [r5, #12]
 800dc9a:	9f03      	ldr	r7, [sp, #12]
 800dc9c:	783a      	ldrb	r2, [r7, #0]
 800dc9e:	1c78      	adds	r0, r7, #1
 800dca0:	3a30      	subs	r2, #48	; 0x30
 800dca2:	4684      	mov	ip, r0
 800dca4:	2a09      	cmp	r2, #9
 800dca6:	d94f      	bls.n	800dd48 <_vfiprintf_r+0x1d0>
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d111      	bne.n	800dcd0 <_vfiprintf_r+0x158>
 800dcac:	e017      	b.n	800dcde <_vfiprintf_r+0x166>
 800dcae:	3701      	adds	r7, #1
 800dcb0:	e7a9      	b.n	800dc06 <_vfiprintf_r+0x8e>
 800dcb2:	4b49      	ldr	r3, [pc, #292]	; (800ddd8 <_vfiprintf_r+0x260>)
 800dcb4:	682a      	ldr	r2, [r5, #0]
 800dcb6:	1ac0      	subs	r0, r0, r3
 800dcb8:	2301      	movs	r3, #1
 800dcba:	4083      	lsls	r3, r0
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	602b      	str	r3, [r5, #0]
 800dcc0:	9703      	str	r7, [sp, #12]
 800dcc2:	e7cb      	b.n	800dc5c <_vfiprintf_r+0xe4>
 800dcc4:	9b07      	ldr	r3, [sp, #28]
 800dcc6:	1d19      	adds	r1, r3, #4
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	9107      	str	r1, [sp, #28]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	db01      	blt.n	800dcd4 <_vfiprintf_r+0x15c>
 800dcd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd2:	e004      	b.n	800dcde <_vfiprintf_r+0x166>
 800dcd4:	425b      	negs	r3, r3
 800dcd6:	60eb      	str	r3, [r5, #12]
 800dcd8:	2302      	movs	r3, #2
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	783b      	ldrb	r3, [r7, #0]
 800dce0:	2b2e      	cmp	r3, #46	; 0x2e
 800dce2:	d10a      	bne.n	800dcfa <_vfiprintf_r+0x182>
 800dce4:	787b      	ldrb	r3, [r7, #1]
 800dce6:	2b2a      	cmp	r3, #42	; 0x2a
 800dce8:	d137      	bne.n	800dd5a <_vfiprintf_r+0x1e2>
 800dcea:	9b07      	ldr	r3, [sp, #28]
 800dcec:	3702      	adds	r7, #2
 800dcee:	1d1a      	adds	r2, r3, #4
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	9207      	str	r2, [sp, #28]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	db2d      	blt.n	800dd54 <_vfiprintf_r+0x1dc>
 800dcf8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcfa:	2203      	movs	r2, #3
 800dcfc:	7839      	ldrb	r1, [r7, #0]
 800dcfe:	4837      	ldr	r0, [pc, #220]	; (800dddc <_vfiprintf_r+0x264>)
 800dd00:	f7fe f948 	bl	800bf94 <memchr>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d007      	beq.n	800dd18 <_vfiprintf_r+0x1a0>
 800dd08:	4b34      	ldr	r3, [pc, #208]	; (800dddc <_vfiprintf_r+0x264>)
 800dd0a:	682a      	ldr	r2, [r5, #0]
 800dd0c:	1ac0      	subs	r0, r0, r3
 800dd0e:	2340      	movs	r3, #64	; 0x40
 800dd10:	4083      	lsls	r3, r0
 800dd12:	4313      	orrs	r3, r2
 800dd14:	3701      	adds	r7, #1
 800dd16:	602b      	str	r3, [r5, #0]
 800dd18:	7839      	ldrb	r1, [r7, #0]
 800dd1a:	1c7b      	adds	r3, r7, #1
 800dd1c:	2206      	movs	r2, #6
 800dd1e:	4830      	ldr	r0, [pc, #192]	; (800dde0 <_vfiprintf_r+0x268>)
 800dd20:	9303      	str	r3, [sp, #12]
 800dd22:	7629      	strb	r1, [r5, #24]
 800dd24:	f7fe f936 	bl	800bf94 <memchr>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d045      	beq.n	800ddb8 <_vfiprintf_r+0x240>
 800dd2c:	4b2d      	ldr	r3, [pc, #180]	; (800dde4 <_vfiprintf_r+0x26c>)
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d127      	bne.n	800dd82 <_vfiprintf_r+0x20a>
 800dd32:	2207      	movs	r2, #7
 800dd34:	9b07      	ldr	r3, [sp, #28]
 800dd36:	3307      	adds	r3, #7
 800dd38:	4393      	bics	r3, r2
 800dd3a:	3308      	adds	r3, #8
 800dd3c:	9307      	str	r3, [sp, #28]
 800dd3e:	696b      	ldr	r3, [r5, #20]
 800dd40:	9a04      	ldr	r2, [sp, #16]
 800dd42:	189b      	adds	r3, r3, r2
 800dd44:	616b      	str	r3, [r5, #20]
 800dd46:	e75d      	b.n	800dc04 <_vfiprintf_r+0x8c>
 800dd48:	210a      	movs	r1, #10
 800dd4a:	434b      	muls	r3, r1
 800dd4c:	4667      	mov	r7, ip
 800dd4e:	189b      	adds	r3, r3, r2
 800dd50:	3909      	subs	r1, #9
 800dd52:	e7a3      	b.n	800dc9c <_vfiprintf_r+0x124>
 800dd54:	2301      	movs	r3, #1
 800dd56:	425b      	negs	r3, r3
 800dd58:	e7ce      	b.n	800dcf8 <_vfiprintf_r+0x180>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	001a      	movs	r2, r3
 800dd5e:	3701      	adds	r7, #1
 800dd60:	606b      	str	r3, [r5, #4]
 800dd62:	7839      	ldrb	r1, [r7, #0]
 800dd64:	1c78      	adds	r0, r7, #1
 800dd66:	3930      	subs	r1, #48	; 0x30
 800dd68:	4684      	mov	ip, r0
 800dd6a:	2909      	cmp	r1, #9
 800dd6c:	d903      	bls.n	800dd76 <_vfiprintf_r+0x1fe>
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d0c3      	beq.n	800dcfa <_vfiprintf_r+0x182>
 800dd72:	9209      	str	r2, [sp, #36]	; 0x24
 800dd74:	e7c1      	b.n	800dcfa <_vfiprintf_r+0x182>
 800dd76:	230a      	movs	r3, #10
 800dd78:	435a      	muls	r2, r3
 800dd7a:	4667      	mov	r7, ip
 800dd7c:	1852      	adds	r2, r2, r1
 800dd7e:	3b09      	subs	r3, #9
 800dd80:	e7ef      	b.n	800dd62 <_vfiprintf_r+0x1ea>
 800dd82:	ab07      	add	r3, sp, #28
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	0022      	movs	r2, r4
 800dd88:	0029      	movs	r1, r5
 800dd8a:	0030      	movs	r0, r6
 800dd8c:	4b16      	ldr	r3, [pc, #88]	; (800dde8 <_vfiprintf_r+0x270>)
 800dd8e:	f7fb f93b 	bl	8009008 <_printf_float>
 800dd92:	9004      	str	r0, [sp, #16]
 800dd94:	9b04      	ldr	r3, [sp, #16]
 800dd96:	3301      	adds	r3, #1
 800dd98:	d1d1      	bne.n	800dd3e <_vfiprintf_r+0x1c6>
 800dd9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd9c:	07db      	lsls	r3, r3, #31
 800dd9e:	d405      	bmi.n	800ddac <_vfiprintf_r+0x234>
 800dda0:	89a3      	ldrh	r3, [r4, #12]
 800dda2:	059b      	lsls	r3, r3, #22
 800dda4:	d402      	bmi.n	800ddac <_vfiprintf_r+0x234>
 800dda6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dda8:	f7ff fe74 	bl	800da94 <__retarget_lock_release_recursive>
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	065b      	lsls	r3, r3, #25
 800ddb0:	d500      	bpl.n	800ddb4 <_vfiprintf_r+0x23c>
 800ddb2:	e70a      	b.n	800dbca <_vfiprintf_r+0x52>
 800ddb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ddb6:	e70a      	b.n	800dbce <_vfiprintf_r+0x56>
 800ddb8:	ab07      	add	r3, sp, #28
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	0022      	movs	r2, r4
 800ddbe:	0029      	movs	r1, r5
 800ddc0:	0030      	movs	r0, r6
 800ddc2:	4b09      	ldr	r3, [pc, #36]	; (800dde8 <_vfiprintf_r+0x270>)
 800ddc4:	f7fb fbde 	bl	8009584 <_printf_i>
 800ddc8:	e7e3      	b.n	800dd92 <_vfiprintf_r+0x21a>
 800ddca:	46c0      	nop			; (mov r8, r8)
 800ddcc:	0800e7dc 	.word	0x0800e7dc
 800ddd0:	0800e7fc 	.word	0x0800e7fc
 800ddd4:	0800e7bc 	.word	0x0800e7bc
 800ddd8:	0800e754 	.word	0x0800e754
 800dddc:	0800e75a 	.word	0x0800e75a
 800dde0:	0800e75e 	.word	0x0800e75e
 800dde4:	08009009 	.word	0x08009009
 800dde8:	0800db53 	.word	0x0800db53

0800ddec <__swbuf_r>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	0005      	movs	r5, r0
 800ddf0:	000e      	movs	r6, r1
 800ddf2:	0014      	movs	r4, r2
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d004      	beq.n	800de02 <__swbuf_r+0x16>
 800ddf8:	6983      	ldr	r3, [r0, #24]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <__swbuf_r+0x16>
 800ddfe:	f7ff fd97 	bl	800d930 <__sinit>
 800de02:	4b22      	ldr	r3, [pc, #136]	; (800de8c <__swbuf_r+0xa0>)
 800de04:	429c      	cmp	r4, r3
 800de06:	d12e      	bne.n	800de66 <__swbuf_r+0x7a>
 800de08:	686c      	ldr	r4, [r5, #4]
 800de0a:	69a3      	ldr	r3, [r4, #24]
 800de0c:	60a3      	str	r3, [r4, #8]
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	071b      	lsls	r3, r3, #28
 800de12:	d532      	bpl.n	800de7a <__swbuf_r+0x8e>
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d02f      	beq.n	800de7a <__swbuf_r+0x8e>
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	6922      	ldr	r2, [r4, #16]
 800de1e:	b2f7      	uxtb	r7, r6
 800de20:	1a98      	subs	r0, r3, r2
 800de22:	6963      	ldr	r3, [r4, #20]
 800de24:	b2f6      	uxtb	r6, r6
 800de26:	4283      	cmp	r3, r0
 800de28:	dc05      	bgt.n	800de36 <__swbuf_r+0x4a>
 800de2a:	0021      	movs	r1, r4
 800de2c:	0028      	movs	r0, r5
 800de2e:	f7ff fcdd 	bl	800d7ec <_fflush_r>
 800de32:	2800      	cmp	r0, #0
 800de34:	d127      	bne.n	800de86 <__swbuf_r+0x9a>
 800de36:	68a3      	ldr	r3, [r4, #8]
 800de38:	3001      	adds	r0, #1
 800de3a:	3b01      	subs	r3, #1
 800de3c:	60a3      	str	r3, [r4, #8]
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	6022      	str	r2, [r4, #0]
 800de44:	701f      	strb	r7, [r3, #0]
 800de46:	6963      	ldr	r3, [r4, #20]
 800de48:	4283      	cmp	r3, r0
 800de4a:	d004      	beq.n	800de56 <__swbuf_r+0x6a>
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	07db      	lsls	r3, r3, #31
 800de50:	d507      	bpl.n	800de62 <__swbuf_r+0x76>
 800de52:	2e0a      	cmp	r6, #10
 800de54:	d105      	bne.n	800de62 <__swbuf_r+0x76>
 800de56:	0021      	movs	r1, r4
 800de58:	0028      	movs	r0, r5
 800de5a:	f7ff fcc7 	bl	800d7ec <_fflush_r>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d111      	bne.n	800de86 <__swbuf_r+0x9a>
 800de62:	0030      	movs	r0, r6
 800de64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de66:	4b0a      	ldr	r3, [pc, #40]	; (800de90 <__swbuf_r+0xa4>)
 800de68:	429c      	cmp	r4, r3
 800de6a:	d101      	bne.n	800de70 <__swbuf_r+0x84>
 800de6c:	68ac      	ldr	r4, [r5, #8]
 800de6e:	e7cc      	b.n	800de0a <__swbuf_r+0x1e>
 800de70:	4b08      	ldr	r3, [pc, #32]	; (800de94 <__swbuf_r+0xa8>)
 800de72:	429c      	cmp	r4, r3
 800de74:	d1c9      	bne.n	800de0a <__swbuf_r+0x1e>
 800de76:	68ec      	ldr	r4, [r5, #12]
 800de78:	e7c7      	b.n	800de0a <__swbuf_r+0x1e>
 800de7a:	0021      	movs	r1, r4
 800de7c:	0028      	movs	r0, r5
 800de7e:	f000 f80b 	bl	800de98 <__swsetup_r>
 800de82:	2800      	cmp	r0, #0
 800de84:	d0c9      	beq.n	800de1a <__swbuf_r+0x2e>
 800de86:	2601      	movs	r6, #1
 800de88:	4276      	negs	r6, r6
 800de8a:	e7ea      	b.n	800de62 <__swbuf_r+0x76>
 800de8c:	0800e7dc 	.word	0x0800e7dc
 800de90:	0800e7fc 	.word	0x0800e7fc
 800de94:	0800e7bc 	.word	0x0800e7bc

0800de98 <__swsetup_r>:
 800de98:	4b37      	ldr	r3, [pc, #220]	; (800df78 <__swsetup_r+0xe0>)
 800de9a:	b570      	push	{r4, r5, r6, lr}
 800de9c:	681d      	ldr	r5, [r3, #0]
 800de9e:	0006      	movs	r6, r0
 800dea0:	000c      	movs	r4, r1
 800dea2:	2d00      	cmp	r5, #0
 800dea4:	d005      	beq.n	800deb2 <__swsetup_r+0x1a>
 800dea6:	69ab      	ldr	r3, [r5, #24]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d102      	bne.n	800deb2 <__swsetup_r+0x1a>
 800deac:	0028      	movs	r0, r5
 800deae:	f7ff fd3f 	bl	800d930 <__sinit>
 800deb2:	4b32      	ldr	r3, [pc, #200]	; (800df7c <__swsetup_r+0xe4>)
 800deb4:	429c      	cmp	r4, r3
 800deb6:	d10f      	bne.n	800ded8 <__swsetup_r+0x40>
 800deb8:	686c      	ldr	r4, [r5, #4]
 800deba:	230c      	movs	r3, #12
 800debc:	5ee2      	ldrsh	r2, [r4, r3]
 800debe:	b293      	uxth	r3, r2
 800dec0:	0711      	lsls	r1, r2, #28
 800dec2:	d42d      	bmi.n	800df20 <__swsetup_r+0x88>
 800dec4:	06d9      	lsls	r1, r3, #27
 800dec6:	d411      	bmi.n	800deec <__swsetup_r+0x54>
 800dec8:	2309      	movs	r3, #9
 800deca:	2001      	movs	r0, #1
 800decc:	6033      	str	r3, [r6, #0]
 800dece:	3337      	adds	r3, #55	; 0x37
 800ded0:	4313      	orrs	r3, r2
 800ded2:	81a3      	strh	r3, [r4, #12]
 800ded4:	4240      	negs	r0, r0
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	4b29      	ldr	r3, [pc, #164]	; (800df80 <__swsetup_r+0xe8>)
 800deda:	429c      	cmp	r4, r3
 800dedc:	d101      	bne.n	800dee2 <__swsetup_r+0x4a>
 800dede:	68ac      	ldr	r4, [r5, #8]
 800dee0:	e7eb      	b.n	800deba <__swsetup_r+0x22>
 800dee2:	4b28      	ldr	r3, [pc, #160]	; (800df84 <__swsetup_r+0xec>)
 800dee4:	429c      	cmp	r4, r3
 800dee6:	d1e8      	bne.n	800deba <__swsetup_r+0x22>
 800dee8:	68ec      	ldr	r4, [r5, #12]
 800deea:	e7e6      	b.n	800deba <__swsetup_r+0x22>
 800deec:	075b      	lsls	r3, r3, #29
 800deee:	d513      	bpl.n	800df18 <__swsetup_r+0x80>
 800def0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800def2:	2900      	cmp	r1, #0
 800def4:	d008      	beq.n	800df08 <__swsetup_r+0x70>
 800def6:	0023      	movs	r3, r4
 800def8:	3344      	adds	r3, #68	; 0x44
 800defa:	4299      	cmp	r1, r3
 800defc:	d002      	beq.n	800df04 <__swsetup_r+0x6c>
 800defe:	0030      	movs	r0, r6
 800df00:	f7fe fd34 	bl	800c96c <_free_r>
 800df04:	2300      	movs	r3, #0
 800df06:	6363      	str	r3, [r4, #52]	; 0x34
 800df08:	2224      	movs	r2, #36	; 0x24
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	4393      	bics	r3, r2
 800df0e:	81a3      	strh	r3, [r4, #12]
 800df10:	2300      	movs	r3, #0
 800df12:	6063      	str	r3, [r4, #4]
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	2308      	movs	r3, #8
 800df1a:	89a2      	ldrh	r2, [r4, #12]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	81a3      	strh	r3, [r4, #12]
 800df20:	6923      	ldr	r3, [r4, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10b      	bne.n	800df3e <__swsetup_r+0xa6>
 800df26:	21a0      	movs	r1, #160	; 0xa0
 800df28:	2280      	movs	r2, #128	; 0x80
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	0089      	lsls	r1, r1, #2
 800df2e:	0092      	lsls	r2, r2, #2
 800df30:	400b      	ands	r3, r1
 800df32:	4293      	cmp	r3, r2
 800df34:	d003      	beq.n	800df3e <__swsetup_r+0xa6>
 800df36:	0021      	movs	r1, r4
 800df38:	0030      	movs	r0, r6
 800df3a:	f000 f855 	bl	800dfe8 <__smakebuf_r>
 800df3e:	220c      	movs	r2, #12
 800df40:	5ea3      	ldrsh	r3, [r4, r2]
 800df42:	2001      	movs	r0, #1
 800df44:	001a      	movs	r2, r3
 800df46:	b299      	uxth	r1, r3
 800df48:	4002      	ands	r2, r0
 800df4a:	4203      	tst	r3, r0
 800df4c:	d00f      	beq.n	800df6e <__swsetup_r+0xd6>
 800df4e:	2200      	movs	r2, #0
 800df50:	60a2      	str	r2, [r4, #8]
 800df52:	6962      	ldr	r2, [r4, #20]
 800df54:	4252      	negs	r2, r2
 800df56:	61a2      	str	r2, [r4, #24]
 800df58:	2000      	movs	r0, #0
 800df5a:	6922      	ldr	r2, [r4, #16]
 800df5c:	4282      	cmp	r2, r0
 800df5e:	d1ba      	bne.n	800ded6 <__swsetup_r+0x3e>
 800df60:	060a      	lsls	r2, r1, #24
 800df62:	d5b8      	bpl.n	800ded6 <__swsetup_r+0x3e>
 800df64:	2240      	movs	r2, #64	; 0x40
 800df66:	4313      	orrs	r3, r2
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	3801      	subs	r0, #1
 800df6c:	e7b3      	b.n	800ded6 <__swsetup_r+0x3e>
 800df6e:	0788      	lsls	r0, r1, #30
 800df70:	d400      	bmi.n	800df74 <__swsetup_r+0xdc>
 800df72:	6962      	ldr	r2, [r4, #20]
 800df74:	60a2      	str	r2, [r4, #8]
 800df76:	e7ef      	b.n	800df58 <__swsetup_r+0xc0>
 800df78:	2000000c 	.word	0x2000000c
 800df7c:	0800e7dc 	.word	0x0800e7dc
 800df80:	0800e7fc 	.word	0x0800e7fc
 800df84:	0800e7bc 	.word	0x0800e7bc

0800df88 <abort>:
 800df88:	2006      	movs	r0, #6
 800df8a:	b510      	push	{r4, lr}
 800df8c:	f000 f8a2 	bl	800e0d4 <raise>
 800df90:	2001      	movs	r0, #1
 800df92:	f7f6 fd13 	bl	80049bc <_exit>
	...

0800df98 <__swhatbuf_r>:
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	000e      	movs	r6, r1
 800df9c:	001d      	movs	r5, r3
 800df9e:	230e      	movs	r3, #14
 800dfa0:	5ec9      	ldrsh	r1, [r1, r3]
 800dfa2:	0014      	movs	r4, r2
 800dfa4:	b096      	sub	sp, #88	; 0x58
 800dfa6:	2900      	cmp	r1, #0
 800dfa8:	da07      	bge.n	800dfba <__swhatbuf_r+0x22>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	602b      	str	r3, [r5, #0]
 800dfae:	89b3      	ldrh	r3, [r6, #12]
 800dfb0:	061b      	lsls	r3, r3, #24
 800dfb2:	d411      	bmi.n	800dfd8 <__swhatbuf_r+0x40>
 800dfb4:	2380      	movs	r3, #128	; 0x80
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	e00f      	b.n	800dfda <__swhatbuf_r+0x42>
 800dfba:	466a      	mov	r2, sp
 800dfbc:	f000 f8aa 	bl	800e114 <_fstat_r>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	dbf2      	blt.n	800dfaa <__swhatbuf_r+0x12>
 800dfc4:	23f0      	movs	r3, #240	; 0xf0
 800dfc6:	9901      	ldr	r1, [sp, #4]
 800dfc8:	021b      	lsls	r3, r3, #8
 800dfca:	4019      	ands	r1, r3
 800dfcc:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <__swhatbuf_r+0x4c>)
 800dfce:	18c9      	adds	r1, r1, r3
 800dfd0:	424b      	negs	r3, r1
 800dfd2:	4159      	adcs	r1, r3
 800dfd4:	6029      	str	r1, [r5, #0]
 800dfd6:	e7ed      	b.n	800dfb4 <__swhatbuf_r+0x1c>
 800dfd8:	2340      	movs	r3, #64	; 0x40
 800dfda:	2000      	movs	r0, #0
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	b016      	add	sp, #88	; 0x58
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}
 800dfe2:	46c0      	nop			; (mov r8, r8)
 800dfe4:	ffffe000 	.word	0xffffe000

0800dfe8 <__smakebuf_r>:
 800dfe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfea:	2602      	movs	r6, #2
 800dfec:	898b      	ldrh	r3, [r1, #12]
 800dfee:	0005      	movs	r5, r0
 800dff0:	000c      	movs	r4, r1
 800dff2:	4233      	tst	r3, r6
 800dff4:	d006      	beq.n	800e004 <__smakebuf_r+0x1c>
 800dff6:	0023      	movs	r3, r4
 800dff8:	3347      	adds	r3, #71	; 0x47
 800dffa:	6023      	str	r3, [r4, #0]
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	2301      	movs	r3, #1
 800e000:	6163      	str	r3, [r4, #20]
 800e002:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e004:	466a      	mov	r2, sp
 800e006:	ab01      	add	r3, sp, #4
 800e008:	f7ff ffc6 	bl	800df98 <__swhatbuf_r>
 800e00c:	9900      	ldr	r1, [sp, #0]
 800e00e:	0007      	movs	r7, r0
 800e010:	0028      	movs	r0, r5
 800e012:	f7fe fcf5 	bl	800ca00 <_malloc_r>
 800e016:	2800      	cmp	r0, #0
 800e018:	d108      	bne.n	800e02c <__smakebuf_r+0x44>
 800e01a:	220c      	movs	r2, #12
 800e01c:	5ea3      	ldrsh	r3, [r4, r2]
 800e01e:	059a      	lsls	r2, r3, #22
 800e020:	d4ef      	bmi.n	800e002 <__smakebuf_r+0x1a>
 800e022:	2203      	movs	r2, #3
 800e024:	4393      	bics	r3, r2
 800e026:	431e      	orrs	r6, r3
 800e028:	81a6      	strh	r6, [r4, #12]
 800e02a:	e7e4      	b.n	800dff6 <__smakebuf_r+0xe>
 800e02c:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <__smakebuf_r+0x84>)
 800e02e:	62ab      	str	r3, [r5, #40]	; 0x28
 800e030:	2380      	movs	r3, #128	; 0x80
 800e032:	89a2      	ldrh	r2, [r4, #12]
 800e034:	6020      	str	r0, [r4, #0]
 800e036:	4313      	orrs	r3, r2
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	9b00      	ldr	r3, [sp, #0]
 800e03c:	6120      	str	r0, [r4, #16]
 800e03e:	6163      	str	r3, [r4, #20]
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00d      	beq.n	800e062 <__smakebuf_r+0x7a>
 800e046:	0028      	movs	r0, r5
 800e048:	230e      	movs	r3, #14
 800e04a:	5ee1      	ldrsh	r1, [r4, r3]
 800e04c:	f000 f874 	bl	800e138 <_isatty_r>
 800e050:	2800      	cmp	r0, #0
 800e052:	d006      	beq.n	800e062 <__smakebuf_r+0x7a>
 800e054:	2203      	movs	r2, #3
 800e056:	89a3      	ldrh	r3, [r4, #12]
 800e058:	4393      	bics	r3, r2
 800e05a:	001a      	movs	r2, r3
 800e05c:	2301      	movs	r3, #1
 800e05e:	4313      	orrs	r3, r2
 800e060:	81a3      	strh	r3, [r4, #12]
 800e062:	89a0      	ldrh	r0, [r4, #12]
 800e064:	4307      	orrs	r7, r0
 800e066:	81a7      	strh	r7, [r4, #12]
 800e068:	e7cb      	b.n	800e002 <__smakebuf_r+0x1a>
 800e06a:	46c0      	nop			; (mov r8, r8)
 800e06c:	0800d8b5 	.word	0x0800d8b5

0800e070 <_malloc_usable_size_r>:
 800e070:	1f0b      	subs	r3, r1, #4
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	1f18      	subs	r0, r3, #4
 800e076:	2b00      	cmp	r3, #0
 800e078:	da01      	bge.n	800e07e <_malloc_usable_size_r+0xe>
 800e07a:	580b      	ldr	r3, [r1, r0]
 800e07c:	18c0      	adds	r0, r0, r3
 800e07e:	4770      	bx	lr

0800e080 <_raise_r>:
 800e080:	b570      	push	{r4, r5, r6, lr}
 800e082:	0004      	movs	r4, r0
 800e084:	000d      	movs	r5, r1
 800e086:	291f      	cmp	r1, #31
 800e088:	d904      	bls.n	800e094 <_raise_r+0x14>
 800e08a:	2316      	movs	r3, #22
 800e08c:	6003      	str	r3, [r0, #0]
 800e08e:	2001      	movs	r0, #1
 800e090:	4240      	negs	r0, r0
 800e092:	bd70      	pop	{r4, r5, r6, pc}
 800e094:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e096:	2b00      	cmp	r3, #0
 800e098:	d004      	beq.n	800e0a4 <_raise_r+0x24>
 800e09a:	008a      	lsls	r2, r1, #2
 800e09c:	189b      	adds	r3, r3, r2
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	2a00      	cmp	r2, #0
 800e0a2:	d108      	bne.n	800e0b6 <_raise_r+0x36>
 800e0a4:	0020      	movs	r0, r4
 800e0a6:	f000 f831 	bl	800e10c <_getpid_r>
 800e0aa:	002a      	movs	r2, r5
 800e0ac:	0001      	movs	r1, r0
 800e0ae:	0020      	movs	r0, r4
 800e0b0:	f000 f81a 	bl	800e0e8 <_kill_r>
 800e0b4:	e7ed      	b.n	800e092 <_raise_r+0x12>
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	2a01      	cmp	r2, #1
 800e0ba:	d0ea      	beq.n	800e092 <_raise_r+0x12>
 800e0bc:	1c51      	adds	r1, r2, #1
 800e0be:	d103      	bne.n	800e0c8 <_raise_r+0x48>
 800e0c0:	2316      	movs	r3, #22
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	e7e4      	b.n	800e092 <_raise_r+0x12>
 800e0c8:	2400      	movs	r4, #0
 800e0ca:	0028      	movs	r0, r5
 800e0cc:	601c      	str	r4, [r3, #0]
 800e0ce:	4790      	blx	r2
 800e0d0:	0020      	movs	r0, r4
 800e0d2:	e7de      	b.n	800e092 <_raise_r+0x12>

0800e0d4 <raise>:
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	4b03      	ldr	r3, [pc, #12]	; (800e0e4 <raise+0x10>)
 800e0d8:	0001      	movs	r1, r0
 800e0da:	6818      	ldr	r0, [r3, #0]
 800e0dc:	f7ff ffd0 	bl	800e080 <_raise_r>
 800e0e0:	bd10      	pop	{r4, pc}
 800e0e2:	46c0      	nop			; (mov r8, r8)
 800e0e4:	2000000c 	.word	0x2000000c

0800e0e8 <_kill_r>:
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	b570      	push	{r4, r5, r6, lr}
 800e0ec:	4d06      	ldr	r5, [pc, #24]	; (800e108 <_kill_r+0x20>)
 800e0ee:	0004      	movs	r4, r0
 800e0f0:	0008      	movs	r0, r1
 800e0f2:	0011      	movs	r1, r2
 800e0f4:	602b      	str	r3, [r5, #0]
 800e0f6:	f7f6 fc51 	bl	800499c <_kill>
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	d103      	bne.n	800e106 <_kill_r+0x1e>
 800e0fe:	682b      	ldr	r3, [r5, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d000      	beq.n	800e106 <_kill_r+0x1e>
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	20000614 	.word	0x20000614

0800e10c <_getpid_r>:
 800e10c:	b510      	push	{r4, lr}
 800e10e:	f7f6 fc3f 	bl	8004990 <_getpid>
 800e112:	bd10      	pop	{r4, pc}

0800e114 <_fstat_r>:
 800e114:	2300      	movs	r3, #0
 800e116:	b570      	push	{r4, r5, r6, lr}
 800e118:	4d06      	ldr	r5, [pc, #24]	; (800e134 <_fstat_r+0x20>)
 800e11a:	0004      	movs	r4, r0
 800e11c:	0008      	movs	r0, r1
 800e11e:	0011      	movs	r1, r2
 800e120:	602b      	str	r3, [r5, #0]
 800e122:	f7f6 fc9a 	bl	8004a5a <_fstat>
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	d103      	bne.n	800e132 <_fstat_r+0x1e>
 800e12a:	682b      	ldr	r3, [r5, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d000      	beq.n	800e132 <_fstat_r+0x1e>
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	bd70      	pop	{r4, r5, r6, pc}
 800e134:	20000614 	.word	0x20000614

0800e138 <_isatty_r>:
 800e138:	2300      	movs	r3, #0
 800e13a:	b570      	push	{r4, r5, r6, lr}
 800e13c:	4d06      	ldr	r5, [pc, #24]	; (800e158 <_isatty_r+0x20>)
 800e13e:	0004      	movs	r4, r0
 800e140:	0008      	movs	r0, r1
 800e142:	602b      	str	r3, [r5, #0]
 800e144:	f7f6 fc97 	bl	8004a76 <_isatty>
 800e148:	1c43      	adds	r3, r0, #1
 800e14a:	d103      	bne.n	800e154 <_isatty_r+0x1c>
 800e14c:	682b      	ldr	r3, [r5, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d000      	beq.n	800e154 <_isatty_r+0x1c>
 800e152:	6023      	str	r3, [r4, #0]
 800e154:	bd70      	pop	{r4, r5, r6, pc}
 800e156:	46c0      	nop			; (mov r8, r8)
 800e158:	20000614 	.word	0x20000614

0800e15c <_init>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	46c0      	nop			; (mov r8, r8)
 800e160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e162:	bc08      	pop	{r3}
 800e164:	469e      	mov	lr, r3
 800e166:	4770      	bx	lr

0800e168 <_fini>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	46c0      	nop			; (mov r8, r8)
 800e16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16e:	bc08      	pop	{r3}
 800e170:	469e      	mov	lr, r3
 800e172:	4770      	bx	lr
