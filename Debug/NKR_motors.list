
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800ddd0  0800ddd0  0001ddd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4ac  0800e4ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4ac  0800e4ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4ac  0800e4ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4ac  0800e4ac  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4b0  0800e4b0  0001e4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e4b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001e0  0800e694  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800e694  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e982  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dad  00000000  00000000  0002eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00031668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118d7  00000000  00000000  00032318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eba0  00000000  00000000  00043bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a836  00000000  00000000  0005278f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bcfc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  000bd018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ddb4 	.word	0x0800ddb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800ddb4 	.word	0x0800ddb4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ff7d 	bl	8001350 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fecd 	bl	8001200 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6f 	bl	8001350 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff65 	bl	8001350 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fef5 	bl	8001284 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 feeb 	bl	8001284 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f001 fdbd 	bl	8002050 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fa06 	bl	80018f0 <__aeabi_dsub>
 80004e4:	f001 fdb4 	bl	8002050 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f000 ff6b 	bl	8001418 <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f001 fde8 	bl	800211c <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f000 ff62 	bl	8001418 <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 f9c8 	bl	80018f0 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f001 fda1 	bl	80020bc <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f000 ff4b 	bl	8001418 <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f001 fdc8 	bl	800211c <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 f804 	bl	800059c <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_dadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	464f      	mov	r7, r9
 80005a0:	4646      	mov	r6, r8
 80005a2:	46d6      	mov	lr, sl
 80005a4:	000d      	movs	r5, r1
 80005a6:	0004      	movs	r4, r0
 80005a8:	b5c0      	push	{r6, r7, lr}
 80005aa:	001f      	movs	r7, r3
 80005ac:	0011      	movs	r1, r2
 80005ae:	0328      	lsls	r0, r5, #12
 80005b0:	0f62      	lsrs	r2, r4, #29
 80005b2:	0a40      	lsrs	r0, r0, #9
 80005b4:	4310      	orrs	r0, r2
 80005b6:	007a      	lsls	r2, r7, #1
 80005b8:	0d52      	lsrs	r2, r2, #21
 80005ba:	00e3      	lsls	r3, r4, #3
 80005bc:	033c      	lsls	r4, r7, #12
 80005be:	4691      	mov	r9, r2
 80005c0:	0a64      	lsrs	r4, r4, #9
 80005c2:	0ffa      	lsrs	r2, r7, #31
 80005c4:	0f4f      	lsrs	r7, r1, #29
 80005c6:	006e      	lsls	r6, r5, #1
 80005c8:	4327      	orrs	r7, r4
 80005ca:	4692      	mov	sl, r2
 80005cc:	46b8      	mov	r8, r7
 80005ce:	0d76      	lsrs	r6, r6, #21
 80005d0:	0fed      	lsrs	r5, r5, #31
 80005d2:	00c9      	lsls	r1, r1, #3
 80005d4:	4295      	cmp	r5, r2
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x3e>
 80005d8:	e099      	b.n	800070e <__aeabi_dadd+0x172>
 80005da:	464c      	mov	r4, r9
 80005dc:	1b34      	subs	r4, r6, r4
 80005de:	46a4      	mov	ip, r4
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_dadd+0x4a>
 80005e4:	e07c      	b.n	80006e0 <__aeabi_dadd+0x144>
 80005e6:	464a      	mov	r2, r9
 80005e8:	2a00      	cmp	r2, #0
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x52>
 80005ec:	e0b8      	b.n	8000760 <__aeabi_dadd+0x1c4>
 80005ee:	4ac5      	ldr	r2, [pc, #788]	; (8000904 <__aeabi_dadd+0x368>)
 80005f0:	4296      	cmp	r6, r2
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x5a>
 80005f4:	e11c      	b.n	8000830 <__aeabi_dadd+0x294>
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	003c      	movs	r4, r7
 80005fa:	0412      	lsls	r2, r2, #16
 80005fc:	4314      	orrs	r4, r2
 80005fe:	46a0      	mov	r8, r4
 8000600:	4662      	mov	r2, ip
 8000602:	2a38      	cmp	r2, #56	; 0x38
 8000604:	dd00      	ble.n	8000608 <__aeabi_dadd+0x6c>
 8000606:	e161      	b.n	80008cc <__aeabi_dadd+0x330>
 8000608:	2a1f      	cmp	r2, #31
 800060a:	dd00      	ble.n	800060e <__aeabi_dadd+0x72>
 800060c:	e1cc      	b.n	80009a8 <__aeabi_dadd+0x40c>
 800060e:	4664      	mov	r4, ip
 8000610:	2220      	movs	r2, #32
 8000612:	1b12      	subs	r2, r2, r4
 8000614:	4644      	mov	r4, r8
 8000616:	4094      	lsls	r4, r2
 8000618:	000f      	movs	r7, r1
 800061a:	46a1      	mov	r9, r4
 800061c:	4664      	mov	r4, ip
 800061e:	4091      	lsls	r1, r2
 8000620:	40e7      	lsrs	r7, r4
 8000622:	464c      	mov	r4, r9
 8000624:	1e4a      	subs	r2, r1, #1
 8000626:	4191      	sbcs	r1, r2
 8000628:	433c      	orrs	r4, r7
 800062a:	4642      	mov	r2, r8
 800062c:	4321      	orrs	r1, r4
 800062e:	4664      	mov	r4, ip
 8000630:	40e2      	lsrs	r2, r4
 8000632:	1a80      	subs	r0, r0, r2
 8000634:	1a5c      	subs	r4, r3, r1
 8000636:	42a3      	cmp	r3, r4
 8000638:	419b      	sbcs	r3, r3
 800063a:	425f      	negs	r7, r3
 800063c:	1bc7      	subs	r7, r0, r7
 800063e:	023b      	lsls	r3, r7, #8
 8000640:	d400      	bmi.n	8000644 <__aeabi_dadd+0xa8>
 8000642:	e0d0      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000644:	027f      	lsls	r7, r7, #9
 8000646:	0a7f      	lsrs	r7, r7, #9
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0xb2>
 800064c:	e0ff      	b.n	800084e <__aeabi_dadd+0x2b2>
 800064e:	0038      	movs	r0, r7
 8000650:	f001 fe5a 	bl	8002308 <__clzsi2>
 8000654:	0001      	movs	r1, r0
 8000656:	3908      	subs	r1, #8
 8000658:	2320      	movs	r3, #32
 800065a:	0022      	movs	r2, r4
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	408f      	lsls	r7, r1
 8000660:	40da      	lsrs	r2, r3
 8000662:	408c      	lsls	r4, r1
 8000664:	4317      	orrs	r7, r2
 8000666:	42b1      	cmp	r1, r6
 8000668:	da00      	bge.n	800066c <__aeabi_dadd+0xd0>
 800066a:	e0ff      	b.n	800086c <__aeabi_dadd+0x2d0>
 800066c:	1b89      	subs	r1, r1, r6
 800066e:	1c4b      	adds	r3, r1, #1
 8000670:	2b1f      	cmp	r3, #31
 8000672:	dd00      	ble.n	8000676 <__aeabi_dadd+0xda>
 8000674:	e0a8      	b.n	80007c8 <__aeabi_dadd+0x22c>
 8000676:	2220      	movs	r2, #32
 8000678:	0039      	movs	r1, r7
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	0020      	movs	r0, r4
 800067e:	4094      	lsls	r4, r2
 8000680:	4091      	lsls	r1, r2
 8000682:	40d8      	lsrs	r0, r3
 8000684:	1e62      	subs	r2, r4, #1
 8000686:	4194      	sbcs	r4, r2
 8000688:	40df      	lsrs	r7, r3
 800068a:	2600      	movs	r6, #0
 800068c:	4301      	orrs	r1, r0
 800068e:	430c      	orrs	r4, r1
 8000690:	0763      	lsls	r3, r4, #29
 8000692:	d009      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 8000694:	230f      	movs	r3, #15
 8000696:	4023      	ands	r3, r4
 8000698:	2b04      	cmp	r3, #4
 800069a:	d005      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 800069c:	1d23      	adds	r3, r4, #4
 800069e:	42a3      	cmp	r3, r4
 80006a0:	41a4      	sbcs	r4, r4
 80006a2:	4264      	negs	r4, r4
 80006a4:	193f      	adds	r7, r7, r4
 80006a6:	001c      	movs	r4, r3
 80006a8:	023b      	lsls	r3, r7, #8
 80006aa:	d400      	bmi.n	80006ae <__aeabi_dadd+0x112>
 80006ac:	e09e      	b.n	80007ec <__aeabi_dadd+0x250>
 80006ae:	4b95      	ldr	r3, [pc, #596]	; (8000904 <__aeabi_dadd+0x368>)
 80006b0:	3601      	adds	r6, #1
 80006b2:	429e      	cmp	r6, r3
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x11c>
 80006b6:	e0b7      	b.n	8000828 <__aeabi_dadd+0x28c>
 80006b8:	4a93      	ldr	r2, [pc, #588]	; (8000908 <__aeabi_dadd+0x36c>)
 80006ba:	08e4      	lsrs	r4, r4, #3
 80006bc:	4017      	ands	r7, r2
 80006be:	077b      	lsls	r3, r7, #29
 80006c0:	0571      	lsls	r1, r6, #21
 80006c2:	027f      	lsls	r7, r7, #9
 80006c4:	4323      	orrs	r3, r4
 80006c6:	0b3f      	lsrs	r7, r7, #12
 80006c8:	0d4a      	lsrs	r2, r1, #21
 80006ca:	0512      	lsls	r2, r2, #20
 80006cc:	433a      	orrs	r2, r7
 80006ce:	07ed      	lsls	r5, r5, #31
 80006d0:	432a      	orrs	r2, r5
 80006d2:	0018      	movs	r0, r3
 80006d4:	0011      	movs	r1, r2
 80006d6:	bce0      	pop	{r5, r6, r7}
 80006d8:	46ba      	mov	sl, r7
 80006da:	46b1      	mov	r9, r6
 80006dc:	46a8      	mov	r8, r5
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	2c00      	cmp	r4, #0
 80006e2:	d04b      	beq.n	800077c <__aeabi_dadd+0x1e0>
 80006e4:	464c      	mov	r4, r9
 80006e6:	1ba4      	subs	r4, r4, r6
 80006e8:	46a4      	mov	ip, r4
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d000      	beq.n	80006f0 <__aeabi_dadd+0x154>
 80006ee:	e123      	b.n	8000938 <__aeabi_dadd+0x39c>
 80006f0:	0004      	movs	r4, r0
 80006f2:	431c      	orrs	r4, r3
 80006f4:	d100      	bne.n	80006f8 <__aeabi_dadd+0x15c>
 80006f6:	e1af      	b.n	8000a58 <__aeabi_dadd+0x4bc>
 80006f8:	4662      	mov	r2, ip
 80006fa:	1e54      	subs	r4, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x166>
 8000700:	e215      	b.n	8000b2e <__aeabi_dadd+0x592>
 8000702:	4d80      	ldr	r5, [pc, #512]	; (8000904 <__aeabi_dadd+0x368>)
 8000704:	45ac      	cmp	ip, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x16e>
 8000708:	e1c8      	b.n	8000a9c <__aeabi_dadd+0x500>
 800070a:	46a4      	mov	ip, r4
 800070c:	e11b      	b.n	8000946 <__aeabi_dadd+0x3aa>
 800070e:	464a      	mov	r2, r9
 8000710:	1ab2      	subs	r2, r6, r2
 8000712:	4694      	mov	ip, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	dc00      	bgt.n	800071a <__aeabi_dadd+0x17e>
 8000718:	e0ac      	b.n	8000874 <__aeabi_dadd+0x2d8>
 800071a:	464a      	mov	r2, r9
 800071c:	2a00      	cmp	r2, #0
 800071e:	d043      	beq.n	80007a8 <__aeabi_dadd+0x20c>
 8000720:	4a78      	ldr	r2, [pc, #480]	; (8000904 <__aeabi_dadd+0x368>)
 8000722:	4296      	cmp	r6, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x18c>
 8000726:	e1af      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	003c      	movs	r4, r7
 800072c:	0412      	lsls	r2, r2, #16
 800072e:	4314      	orrs	r4, r2
 8000730:	46a0      	mov	r8, r4
 8000732:	4662      	mov	r2, ip
 8000734:	2a38      	cmp	r2, #56	; 0x38
 8000736:	dc67      	bgt.n	8000808 <__aeabi_dadd+0x26c>
 8000738:	2a1f      	cmp	r2, #31
 800073a:	dc00      	bgt.n	800073e <__aeabi_dadd+0x1a2>
 800073c:	e15f      	b.n	80009fe <__aeabi_dadd+0x462>
 800073e:	4647      	mov	r7, r8
 8000740:	3a20      	subs	r2, #32
 8000742:	40d7      	lsrs	r7, r2
 8000744:	4662      	mov	r2, ip
 8000746:	2a20      	cmp	r2, #32
 8000748:	d005      	beq.n	8000756 <__aeabi_dadd+0x1ba>
 800074a:	4664      	mov	r4, ip
 800074c:	2240      	movs	r2, #64	; 0x40
 800074e:	1b12      	subs	r2, r2, r4
 8000750:	4644      	mov	r4, r8
 8000752:	4094      	lsls	r4, r2
 8000754:	4321      	orrs	r1, r4
 8000756:	1e4a      	subs	r2, r1, #1
 8000758:	4191      	sbcs	r1, r2
 800075a:	000c      	movs	r4, r1
 800075c:	433c      	orrs	r4, r7
 800075e:	e057      	b.n	8000810 <__aeabi_dadd+0x274>
 8000760:	003a      	movs	r2, r7
 8000762:	430a      	orrs	r2, r1
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x1cc>
 8000766:	e105      	b.n	8000974 <__aeabi_dadd+0x3d8>
 8000768:	0022      	movs	r2, r4
 800076a:	3a01      	subs	r2, #1
 800076c:	2c01      	cmp	r4, #1
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x1d6>
 8000770:	e182      	b.n	8000a78 <__aeabi_dadd+0x4dc>
 8000772:	4c64      	ldr	r4, [pc, #400]	; (8000904 <__aeabi_dadd+0x368>)
 8000774:	45a4      	cmp	ip, r4
 8000776:	d05b      	beq.n	8000830 <__aeabi_dadd+0x294>
 8000778:	4694      	mov	ip, r2
 800077a:	e741      	b.n	8000600 <__aeabi_dadd+0x64>
 800077c:	4c63      	ldr	r4, [pc, #396]	; (800090c <__aeabi_dadd+0x370>)
 800077e:	1c77      	adds	r7, r6, #1
 8000780:	4227      	tst	r7, r4
 8000782:	d000      	beq.n	8000786 <__aeabi_dadd+0x1ea>
 8000784:	e0c4      	b.n	8000910 <__aeabi_dadd+0x374>
 8000786:	0004      	movs	r4, r0
 8000788:	431c      	orrs	r4, r3
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_dadd+0x1f4>
 800078e:	e169      	b.n	8000a64 <__aeabi_dadd+0x4c8>
 8000790:	2c00      	cmp	r4, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x1fa>
 8000794:	e1bf      	b.n	8000b16 <__aeabi_dadd+0x57a>
 8000796:	4644      	mov	r4, r8
 8000798:	430c      	orrs	r4, r1
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x202>
 800079c:	e1d0      	b.n	8000b40 <__aeabi_dadd+0x5a4>
 800079e:	0742      	lsls	r2, r0, #29
 80007a0:	08db      	lsrs	r3, r3, #3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	08c0      	lsrs	r0, r0, #3
 80007a6:	e029      	b.n	80007fc <__aeabi_dadd+0x260>
 80007a8:	003a      	movs	r2, r7
 80007aa:	430a      	orrs	r2, r1
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x214>
 80007ae:	e170      	b.n	8000a92 <__aeabi_dadd+0x4f6>
 80007b0:	4662      	mov	r2, ip
 80007b2:	4664      	mov	r4, ip
 80007b4:	3a01      	subs	r2, #1
 80007b6:	2c01      	cmp	r4, #1
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x220>
 80007ba:	e0e0      	b.n	800097e <__aeabi_dadd+0x3e2>
 80007bc:	4c51      	ldr	r4, [pc, #324]	; (8000904 <__aeabi_dadd+0x368>)
 80007be:	45a4      	cmp	ip, r4
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x228>
 80007c2:	e161      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 80007c4:	4694      	mov	ip, r2
 80007c6:	e7b4      	b.n	8000732 <__aeabi_dadd+0x196>
 80007c8:	003a      	movs	r2, r7
 80007ca:	391f      	subs	r1, #31
 80007cc:	40ca      	lsrs	r2, r1
 80007ce:	0011      	movs	r1, r2
 80007d0:	2b20      	cmp	r3, #32
 80007d2:	d003      	beq.n	80007dc <__aeabi_dadd+0x240>
 80007d4:	2240      	movs	r2, #64	; 0x40
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	409f      	lsls	r7, r3
 80007da:	433c      	orrs	r4, r7
 80007dc:	1e63      	subs	r3, r4, #1
 80007de:	419c      	sbcs	r4, r3
 80007e0:	2700      	movs	r7, #0
 80007e2:	2600      	movs	r6, #0
 80007e4:	430c      	orrs	r4, r1
 80007e6:	0763      	lsls	r3, r4, #29
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x250>
 80007ea:	e753      	b.n	8000694 <__aeabi_dadd+0xf8>
 80007ec:	46b4      	mov	ip, r6
 80007ee:	08e4      	lsrs	r4, r4, #3
 80007f0:	077b      	lsls	r3, r7, #29
 80007f2:	4323      	orrs	r3, r4
 80007f4:	08f8      	lsrs	r0, r7, #3
 80007f6:	4a43      	ldr	r2, [pc, #268]	; (8000904 <__aeabi_dadd+0x368>)
 80007f8:	4594      	cmp	ip, r2
 80007fa:	d01d      	beq.n	8000838 <__aeabi_dadd+0x29c>
 80007fc:	4662      	mov	r2, ip
 80007fe:	0307      	lsls	r7, r0, #12
 8000800:	0552      	lsls	r2, r2, #21
 8000802:	0b3f      	lsrs	r7, r7, #12
 8000804:	0d52      	lsrs	r2, r2, #21
 8000806:	e760      	b.n	80006ca <__aeabi_dadd+0x12e>
 8000808:	4644      	mov	r4, r8
 800080a:	430c      	orrs	r4, r1
 800080c:	1e62      	subs	r2, r4, #1
 800080e:	4194      	sbcs	r4, r2
 8000810:	18e4      	adds	r4, r4, r3
 8000812:	429c      	cmp	r4, r3
 8000814:	419b      	sbcs	r3, r3
 8000816:	425f      	negs	r7, r3
 8000818:	183f      	adds	r7, r7, r0
 800081a:	023b      	lsls	r3, r7, #8
 800081c:	d5e3      	bpl.n	80007e6 <__aeabi_dadd+0x24a>
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <__aeabi_dadd+0x368>)
 8000820:	3601      	adds	r6, #1
 8000822:	429e      	cmp	r6, r3
 8000824:	d000      	beq.n	8000828 <__aeabi_dadd+0x28c>
 8000826:	e0b5      	b.n	8000994 <__aeabi_dadd+0x3f8>
 8000828:	0032      	movs	r2, r6
 800082a:	2700      	movs	r7, #0
 800082c:	2300      	movs	r3, #0
 800082e:	e74c      	b.n	80006ca <__aeabi_dadd+0x12e>
 8000830:	0742      	lsls	r2, r0, #29
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	4313      	orrs	r3, r2
 8000836:	08c0      	lsrs	r0, r0, #3
 8000838:	001a      	movs	r2, r3
 800083a:	4302      	orrs	r2, r0
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x2a4>
 800083e:	e1e1      	b.n	8000c04 <__aeabi_dadd+0x668>
 8000840:	2780      	movs	r7, #128	; 0x80
 8000842:	033f      	lsls	r7, r7, #12
 8000844:	4307      	orrs	r7, r0
 8000846:	033f      	lsls	r7, r7, #12
 8000848:	4a2e      	ldr	r2, [pc, #184]	; (8000904 <__aeabi_dadd+0x368>)
 800084a:	0b3f      	lsrs	r7, r7, #12
 800084c:	e73d      	b.n	80006ca <__aeabi_dadd+0x12e>
 800084e:	0020      	movs	r0, r4
 8000850:	f001 fd5a 	bl	8002308 <__clzsi2>
 8000854:	0001      	movs	r1, r0
 8000856:	3118      	adds	r1, #24
 8000858:	291f      	cmp	r1, #31
 800085a:	dc00      	bgt.n	800085e <__aeabi_dadd+0x2c2>
 800085c:	e6fc      	b.n	8000658 <__aeabi_dadd+0xbc>
 800085e:	3808      	subs	r0, #8
 8000860:	4084      	lsls	r4, r0
 8000862:	0027      	movs	r7, r4
 8000864:	2400      	movs	r4, #0
 8000866:	42b1      	cmp	r1, r6
 8000868:	db00      	blt.n	800086c <__aeabi_dadd+0x2d0>
 800086a:	e6ff      	b.n	800066c <__aeabi_dadd+0xd0>
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <__aeabi_dadd+0x36c>)
 800086e:	1a76      	subs	r6, r6, r1
 8000870:	4017      	ands	r7, r2
 8000872:	e70d      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d02f      	beq.n	80008d8 <__aeabi_dadd+0x33c>
 8000878:	464a      	mov	r2, r9
 800087a:	1b92      	subs	r2, r2, r6
 800087c:	4694      	mov	ip, r2
 800087e:	2e00      	cmp	r6, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x2e8>
 8000882:	e0ad      	b.n	80009e0 <__aeabi_dadd+0x444>
 8000884:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <__aeabi_dadd+0x368>)
 8000886:	4591      	cmp	r9, r2
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x2f0>
 800088a:	e10f      	b.n	8000aac <__aeabi_dadd+0x510>
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	0412      	lsls	r2, r2, #16
 8000890:	4310      	orrs	r0, r2
 8000892:	4662      	mov	r2, ip
 8000894:	2a38      	cmp	r2, #56	; 0x38
 8000896:	dd00      	ble.n	800089a <__aeabi_dadd+0x2fe>
 8000898:	e10f      	b.n	8000aba <__aeabi_dadd+0x51e>
 800089a:	2a1f      	cmp	r2, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x304>
 800089e:	e180      	b.n	8000ba2 <__aeabi_dadd+0x606>
 80008a0:	4664      	mov	r4, ip
 80008a2:	2220      	movs	r2, #32
 80008a4:	001e      	movs	r6, r3
 80008a6:	1b12      	subs	r2, r2, r4
 80008a8:	4667      	mov	r7, ip
 80008aa:	0004      	movs	r4, r0
 80008ac:	4093      	lsls	r3, r2
 80008ae:	4094      	lsls	r4, r2
 80008b0:	40fe      	lsrs	r6, r7
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	4193      	sbcs	r3, r2
 80008b6:	40f8      	lsrs	r0, r7
 80008b8:	4334      	orrs	r4, r6
 80008ba:	431c      	orrs	r4, r3
 80008bc:	4480      	add	r8, r0
 80008be:	1864      	adds	r4, r4, r1
 80008c0:	428c      	cmp	r4, r1
 80008c2:	41bf      	sbcs	r7, r7
 80008c4:	427f      	negs	r7, r7
 80008c6:	464e      	mov	r6, r9
 80008c8:	4447      	add	r7, r8
 80008ca:	e7a6      	b.n	800081a <__aeabi_dadd+0x27e>
 80008cc:	4642      	mov	r2, r8
 80008ce:	430a      	orrs	r2, r1
 80008d0:	0011      	movs	r1, r2
 80008d2:	1e4a      	subs	r2, r1, #1
 80008d4:	4191      	sbcs	r1, r2
 80008d6:	e6ad      	b.n	8000634 <__aeabi_dadd+0x98>
 80008d8:	4c0c      	ldr	r4, [pc, #48]	; (800090c <__aeabi_dadd+0x370>)
 80008da:	1c72      	adds	r2, r6, #1
 80008dc:	4222      	tst	r2, r4
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x346>
 80008e0:	e0a1      	b.n	8000a26 <__aeabi_dadd+0x48a>
 80008e2:	0002      	movs	r2, r0
 80008e4:	431a      	orrs	r2, r3
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x350>
 80008ea:	e0fa      	b.n	8000ae2 <__aeabi_dadd+0x546>
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x356>
 80008f0:	e145      	b.n	8000b7e <__aeabi_dadd+0x5e2>
 80008f2:	003a      	movs	r2, r7
 80008f4:	430a      	orrs	r2, r1
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x35e>
 80008f8:	e146      	b.n	8000b88 <__aeabi_dadd+0x5ec>
 80008fa:	0742      	lsls	r2, r0, #29
 80008fc:	08db      	lsrs	r3, r3, #3
 80008fe:	4313      	orrs	r3, r2
 8000900:	08c0      	lsrs	r0, r0, #3
 8000902:	e77b      	b.n	80007fc <__aeabi_dadd+0x260>
 8000904:	000007ff 	.word	0x000007ff
 8000908:	ff7fffff 	.word	0xff7fffff
 800090c:	000007fe 	.word	0x000007fe
 8000910:	4647      	mov	r7, r8
 8000912:	1a5c      	subs	r4, r3, r1
 8000914:	1bc2      	subs	r2, r0, r7
 8000916:	42a3      	cmp	r3, r4
 8000918:	41bf      	sbcs	r7, r7
 800091a:	427f      	negs	r7, r7
 800091c:	46b9      	mov	r9, r7
 800091e:	0017      	movs	r7, r2
 8000920:	464a      	mov	r2, r9
 8000922:	1abf      	subs	r7, r7, r2
 8000924:	023a      	lsls	r2, r7, #8
 8000926:	d500      	bpl.n	800092a <__aeabi_dadd+0x38e>
 8000928:	e08d      	b.n	8000a46 <__aeabi_dadd+0x4aa>
 800092a:	0023      	movs	r3, r4
 800092c:	433b      	orrs	r3, r7
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x396>
 8000930:	e68a      	b.n	8000648 <__aeabi_dadd+0xac>
 8000932:	2000      	movs	r0, #0
 8000934:	2500      	movs	r5, #0
 8000936:	e761      	b.n	80007fc <__aeabi_dadd+0x260>
 8000938:	4cb4      	ldr	r4, [pc, #720]	; (8000c0c <__aeabi_dadd+0x670>)
 800093a:	45a1      	cmp	r9, r4
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x3a4>
 800093e:	e0ad      	b.n	8000a9c <__aeabi_dadd+0x500>
 8000940:	2480      	movs	r4, #128	; 0x80
 8000942:	0424      	lsls	r4, r4, #16
 8000944:	4320      	orrs	r0, r4
 8000946:	4664      	mov	r4, ip
 8000948:	2c38      	cmp	r4, #56	; 0x38
 800094a:	dc3d      	bgt.n	80009c8 <__aeabi_dadd+0x42c>
 800094c:	4662      	mov	r2, ip
 800094e:	2c1f      	cmp	r4, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0x3b8>
 8000952:	e0b7      	b.n	8000ac4 <__aeabi_dadd+0x528>
 8000954:	2520      	movs	r5, #32
 8000956:	001e      	movs	r6, r3
 8000958:	1b2d      	subs	r5, r5, r4
 800095a:	0004      	movs	r4, r0
 800095c:	40ab      	lsls	r3, r5
 800095e:	40ac      	lsls	r4, r5
 8000960:	40d6      	lsrs	r6, r2
 8000962:	40d0      	lsrs	r0, r2
 8000964:	4642      	mov	r2, r8
 8000966:	1e5d      	subs	r5, r3, #1
 8000968:	41ab      	sbcs	r3, r5
 800096a:	4334      	orrs	r4, r6
 800096c:	1a12      	subs	r2, r2, r0
 800096e:	4690      	mov	r8, r2
 8000970:	4323      	orrs	r3, r4
 8000972:	e02c      	b.n	80009ce <__aeabi_dadd+0x432>
 8000974:	0742      	lsls	r2, r0, #29
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	4313      	orrs	r3, r2
 800097a:	08c0      	lsrs	r0, r0, #3
 800097c:	e73b      	b.n	80007f6 <__aeabi_dadd+0x25a>
 800097e:	185c      	adds	r4, r3, r1
 8000980:	429c      	cmp	r4, r3
 8000982:	419b      	sbcs	r3, r3
 8000984:	4440      	add	r0, r8
 8000986:	425b      	negs	r3, r3
 8000988:	18c7      	adds	r7, r0, r3
 800098a:	2601      	movs	r6, #1
 800098c:	023b      	lsls	r3, r7, #8
 800098e:	d400      	bmi.n	8000992 <__aeabi_dadd+0x3f6>
 8000990:	e729      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000992:	2602      	movs	r6, #2
 8000994:	4a9e      	ldr	r2, [pc, #632]	; (8000c10 <__aeabi_dadd+0x674>)
 8000996:	0863      	lsrs	r3, r4, #1
 8000998:	4017      	ands	r7, r2
 800099a:	2201      	movs	r2, #1
 800099c:	4014      	ands	r4, r2
 800099e:	431c      	orrs	r4, r3
 80009a0:	07fb      	lsls	r3, r7, #31
 80009a2:	431c      	orrs	r4, r3
 80009a4:	087f      	lsrs	r7, r7, #1
 80009a6:	e673      	b.n	8000690 <__aeabi_dadd+0xf4>
 80009a8:	4644      	mov	r4, r8
 80009aa:	3a20      	subs	r2, #32
 80009ac:	40d4      	lsrs	r4, r2
 80009ae:	4662      	mov	r2, ip
 80009b0:	2a20      	cmp	r2, #32
 80009b2:	d005      	beq.n	80009c0 <__aeabi_dadd+0x424>
 80009b4:	4667      	mov	r7, ip
 80009b6:	2240      	movs	r2, #64	; 0x40
 80009b8:	1bd2      	subs	r2, r2, r7
 80009ba:	4647      	mov	r7, r8
 80009bc:	4097      	lsls	r7, r2
 80009be:	4339      	orrs	r1, r7
 80009c0:	1e4a      	subs	r2, r1, #1
 80009c2:	4191      	sbcs	r1, r2
 80009c4:	4321      	orrs	r1, r4
 80009c6:	e635      	b.n	8000634 <__aeabi_dadd+0x98>
 80009c8:	4303      	orrs	r3, r0
 80009ca:	1e58      	subs	r0, r3, #1
 80009cc:	4183      	sbcs	r3, r0
 80009ce:	1acc      	subs	r4, r1, r3
 80009d0:	42a1      	cmp	r1, r4
 80009d2:	41bf      	sbcs	r7, r7
 80009d4:	4643      	mov	r3, r8
 80009d6:	427f      	negs	r7, r7
 80009d8:	4655      	mov	r5, sl
 80009da:	464e      	mov	r6, r9
 80009dc:	1bdf      	subs	r7, r3, r7
 80009de:	e62e      	b.n	800063e <__aeabi_dadd+0xa2>
 80009e0:	0002      	movs	r2, r0
 80009e2:	431a      	orrs	r2, r3
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x44c>
 80009e6:	e0bd      	b.n	8000b64 <__aeabi_dadd+0x5c8>
 80009e8:	4662      	mov	r2, ip
 80009ea:	4664      	mov	r4, ip
 80009ec:	3a01      	subs	r2, #1
 80009ee:	2c01      	cmp	r4, #1
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x458>
 80009f2:	e0e5      	b.n	8000bc0 <__aeabi_dadd+0x624>
 80009f4:	4c85      	ldr	r4, [pc, #532]	; (8000c0c <__aeabi_dadd+0x670>)
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d058      	beq.n	8000aac <__aeabi_dadd+0x510>
 80009fa:	4694      	mov	ip, r2
 80009fc:	e749      	b.n	8000892 <__aeabi_dadd+0x2f6>
 80009fe:	4664      	mov	r4, ip
 8000a00:	2220      	movs	r2, #32
 8000a02:	1b12      	subs	r2, r2, r4
 8000a04:	4644      	mov	r4, r8
 8000a06:	4094      	lsls	r4, r2
 8000a08:	000f      	movs	r7, r1
 8000a0a:	46a1      	mov	r9, r4
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	4091      	lsls	r1, r2
 8000a10:	40e7      	lsrs	r7, r4
 8000a12:	464c      	mov	r4, r9
 8000a14:	1e4a      	subs	r2, r1, #1
 8000a16:	4191      	sbcs	r1, r2
 8000a18:	433c      	orrs	r4, r7
 8000a1a:	4642      	mov	r2, r8
 8000a1c:	430c      	orrs	r4, r1
 8000a1e:	4661      	mov	r1, ip
 8000a20:	40ca      	lsrs	r2, r1
 8000a22:	1880      	adds	r0, r0, r2
 8000a24:	e6f4      	b.n	8000810 <__aeabi_dadd+0x274>
 8000a26:	4c79      	ldr	r4, [pc, #484]	; (8000c0c <__aeabi_dadd+0x670>)
 8000a28:	42a2      	cmp	r2, r4
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x492>
 8000a2c:	e6fd      	b.n	800082a <__aeabi_dadd+0x28e>
 8000a2e:	1859      	adds	r1, r3, r1
 8000a30:	4299      	cmp	r1, r3
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	4440      	add	r0, r8
 8000a36:	425f      	negs	r7, r3
 8000a38:	19c7      	adds	r7, r0, r7
 8000a3a:	07fc      	lsls	r4, r7, #31
 8000a3c:	0849      	lsrs	r1, r1, #1
 8000a3e:	0016      	movs	r6, r2
 8000a40:	430c      	orrs	r4, r1
 8000a42:	087f      	lsrs	r7, r7, #1
 8000a44:	e6cf      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000a46:	1acc      	subs	r4, r1, r3
 8000a48:	42a1      	cmp	r1, r4
 8000a4a:	41bf      	sbcs	r7, r7
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	427f      	negs	r7, r7
 8000a50:	1a18      	subs	r0, r3, r0
 8000a52:	4655      	mov	r5, sl
 8000a54:	1bc7      	subs	r7, r0, r7
 8000a56:	e5f7      	b.n	8000648 <__aeabi_dadd+0xac>
 8000a58:	08c9      	lsrs	r1, r1, #3
 8000a5a:	077b      	lsls	r3, r7, #29
 8000a5c:	4655      	mov	r5, sl
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	08f8      	lsrs	r0, r7, #3
 8000a62:	e6c8      	b.n	80007f6 <__aeabi_dadd+0x25a>
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x4ce>
 8000a68:	e081      	b.n	8000b6e <__aeabi_dadd+0x5d2>
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	d115      	bne.n	8000a9c <__aeabi_dadd+0x500>
 8000a70:	2080      	movs	r0, #128	; 0x80
 8000a72:	2500      	movs	r5, #0
 8000a74:	0300      	lsls	r0, r0, #12
 8000a76:	e6e3      	b.n	8000840 <__aeabi_dadd+0x2a4>
 8000a78:	1a5c      	subs	r4, r3, r1
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	419b      	sbcs	r3, r3
 8000a7e:	1bc7      	subs	r7, r0, r7
 8000a80:	425b      	negs	r3, r3
 8000a82:	2601      	movs	r6, #1
 8000a84:	1aff      	subs	r7, r7, r3
 8000a86:	e5da      	b.n	800063e <__aeabi_dadd+0xa2>
 8000a88:	0742      	lsls	r2, r0, #29
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	08c0      	lsrs	r0, r0, #3
 8000a90:	e6d2      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000a92:	0742      	lsls	r2, r0, #29
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	08c0      	lsrs	r0, r0, #3
 8000a9a:	e6ac      	b.n	80007f6 <__aeabi_dadd+0x25a>
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	08c9      	lsrs	r1, r1, #3
 8000aa2:	075b      	lsls	r3, r3, #29
 8000aa4:	4655      	mov	r5, sl
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	08d0      	lsrs	r0, r2, #3
 8000aaa:	e6c5      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000aac:	4643      	mov	r3, r8
 8000aae:	4642      	mov	r2, r8
 8000ab0:	075b      	lsls	r3, r3, #29
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	08d0      	lsrs	r0, r2, #3
 8000ab8:	e6be      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000aba:	4303      	orrs	r3, r0
 8000abc:	001c      	movs	r4, r3
 8000abe:	1e63      	subs	r3, r4, #1
 8000ac0:	419c      	sbcs	r4, r3
 8000ac2:	e6fc      	b.n	80008be <__aeabi_dadd+0x322>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	3c20      	subs	r4, #32
 8000ac8:	40e2      	lsrs	r2, r4
 8000aca:	0014      	movs	r4, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	2a20      	cmp	r2, #32
 8000ad0:	d003      	beq.n	8000ada <__aeabi_dadd+0x53e>
 8000ad2:	2540      	movs	r5, #64	; 0x40
 8000ad4:	1aad      	subs	r5, r5, r2
 8000ad6:	40a8      	lsls	r0, r5
 8000ad8:	4303      	orrs	r3, r0
 8000ada:	1e58      	subs	r0, r3, #1
 8000adc:	4183      	sbcs	r3, r0
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	e775      	b.n	80009ce <__aeabi_dadd+0x432>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d0e2      	beq.n	8000aac <__aeabi_dadd+0x510>
 8000ae6:	003a      	movs	r2, r7
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	d0cd      	beq.n	8000a88 <__aeabi_dadd+0x4ec>
 8000aec:	0742      	lsls	r2, r0, #29
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	08c0      	lsrs	r0, r0, #3
 8000af6:	0312      	lsls	r2, r2, #12
 8000af8:	4210      	tst	r0, r2
 8000afa:	d006      	beq.n	8000b0a <__aeabi_dadd+0x56e>
 8000afc:	08fc      	lsrs	r4, r7, #3
 8000afe:	4214      	tst	r4, r2
 8000b00:	d103      	bne.n	8000b0a <__aeabi_dadd+0x56e>
 8000b02:	0020      	movs	r0, r4
 8000b04:	08cb      	lsrs	r3, r1, #3
 8000b06:	077a      	lsls	r2, r7, #29
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	0f5a      	lsrs	r2, r3, #29
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	0752      	lsls	r2, r2, #29
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	e690      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000b16:	4643      	mov	r3, r8
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x582>
 8000b1c:	e709      	b.n	8000932 <__aeabi_dadd+0x396>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	4642      	mov	r2, r8
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	075b      	lsls	r3, r3, #29
 8000b26:	4655      	mov	r5, sl
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	08d0      	lsrs	r0, r2, #3
 8000b2c:	e666      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b2e:	1acc      	subs	r4, r1, r3
 8000b30:	42a1      	cmp	r1, r4
 8000b32:	4189      	sbcs	r1, r1
 8000b34:	1a3f      	subs	r7, r7, r0
 8000b36:	4249      	negs	r1, r1
 8000b38:	4655      	mov	r5, sl
 8000b3a:	2601      	movs	r6, #1
 8000b3c:	1a7f      	subs	r7, r7, r1
 8000b3e:	e57e      	b.n	800063e <__aeabi_dadd+0xa2>
 8000b40:	4642      	mov	r2, r8
 8000b42:	1a5c      	subs	r4, r3, r1
 8000b44:	1a87      	subs	r7, r0, r2
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	4192      	sbcs	r2, r2
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	1abf      	subs	r7, r7, r2
 8000b4e:	023a      	lsls	r2, r7, #8
 8000b50:	d53d      	bpl.n	8000bce <__aeabi_dadd+0x632>
 8000b52:	1acc      	subs	r4, r1, r3
 8000b54:	42a1      	cmp	r1, r4
 8000b56:	4189      	sbcs	r1, r1
 8000b58:	4643      	mov	r3, r8
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	1a1f      	subs	r7, r3, r0
 8000b5e:	4655      	mov	r5, sl
 8000b60:	1a7f      	subs	r7, r7, r1
 8000b62:	e595      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000b64:	077b      	lsls	r3, r7, #29
 8000b66:	08c9      	lsrs	r1, r1, #3
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	08f8      	lsrs	r0, r7, #3
 8000b6c:	e643      	b.n	80007f6 <__aeabi_dadd+0x25a>
 8000b6e:	4644      	mov	r4, r8
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	430c      	orrs	r4, r1
 8000b74:	d130      	bne.n	8000bd8 <__aeabi_dadd+0x63c>
 8000b76:	0742      	lsls	r2, r0, #29
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	e65c      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000b7e:	077b      	lsls	r3, r7, #29
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	430b      	orrs	r3, r1
 8000b84:	08f8      	lsrs	r0, r7, #3
 8000b86:	e639      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b88:	185c      	adds	r4, r3, r1
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	419b      	sbcs	r3, r3
 8000b8e:	4440      	add	r0, r8
 8000b90:	425b      	negs	r3, r3
 8000b92:	18c7      	adds	r7, r0, r3
 8000b94:	023b      	lsls	r3, r7, #8
 8000b96:	d400      	bmi.n	8000b9a <__aeabi_dadd+0x5fe>
 8000b98:	e625      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <__aeabi_dadd+0x674>)
 8000b9c:	2601      	movs	r6, #1
 8000b9e:	401f      	ands	r7, r3
 8000ba0:	e621      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	3a20      	subs	r2, #32
 8000ba6:	40d4      	lsrs	r4, r2
 8000ba8:	4662      	mov	r2, ip
 8000baa:	2a20      	cmp	r2, #32
 8000bac:	d004      	beq.n	8000bb8 <__aeabi_dadd+0x61c>
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	4666      	mov	r6, ip
 8000bb2:	1b92      	subs	r2, r2, r6
 8000bb4:	4090      	lsls	r0, r2
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	4193      	sbcs	r3, r2
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	e67e      	b.n	80008be <__aeabi_dadd+0x322>
 8000bc0:	185c      	adds	r4, r3, r1
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	4189      	sbcs	r1, r1
 8000bc6:	4440      	add	r0, r8
 8000bc8:	4249      	negs	r1, r1
 8000bca:	1847      	adds	r7, r0, r1
 8000bcc:	e6dd      	b.n	800098a <__aeabi_dadd+0x3ee>
 8000bce:	0023      	movs	r3, r4
 8000bd0:	433b      	orrs	r3, r7
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x63a>
 8000bd4:	e6ad      	b.n	8000932 <__aeabi_dadd+0x396>
 8000bd6:	e606      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000bd8:	0744      	lsls	r4, r0, #29
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	2480      	movs	r4, #128	; 0x80
 8000bde:	08c0      	lsrs	r0, r0, #3
 8000be0:	0324      	lsls	r4, r4, #12
 8000be2:	4220      	tst	r0, r4
 8000be4:	d008      	beq.n	8000bf8 <__aeabi_dadd+0x65c>
 8000be6:	4642      	mov	r2, r8
 8000be8:	08d6      	lsrs	r6, r2, #3
 8000bea:	4226      	tst	r6, r4
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_dadd+0x65c>
 8000bee:	4655      	mov	r5, sl
 8000bf0:	0030      	movs	r0, r6
 8000bf2:	08cb      	lsrs	r3, r1, #3
 8000bf4:	0751      	lsls	r1, r2, #29
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	0f5a      	lsrs	r2, r3, #29
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	0752      	lsls	r2, r2, #29
 8000c00:	4313      	orrs	r3, r2
 8000c02:	e619      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000c04:	2300      	movs	r3, #0
 8000c06:	4a01      	ldr	r2, [pc, #4]	; (8000c0c <__aeabi_dadd+0x670>)
 8000c08:	001f      	movs	r7, r3
 8000c0a:	e55e      	b.n	80006ca <__aeabi_dadd+0x12e>
 8000c0c:	000007ff 	.word	0x000007ff
 8000c10:	ff7fffff 	.word	0xff7fffff

08000c14 <__aeabi_ddiv>:
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	4657      	mov	r7, sl
 8000c18:	464e      	mov	r6, r9
 8000c1a:	4645      	mov	r5, r8
 8000c1c:	46de      	mov	lr, fp
 8000c1e:	b5e0      	push	{r5, r6, r7, lr}
 8000c20:	4681      	mov	r9, r0
 8000c22:	0005      	movs	r5, r0
 8000c24:	030c      	lsls	r4, r1, #12
 8000c26:	0048      	lsls	r0, r1, #1
 8000c28:	4692      	mov	sl, r2
 8000c2a:	001f      	movs	r7, r3
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	0b24      	lsrs	r4, r4, #12
 8000c30:	0d40      	lsrs	r0, r0, #21
 8000c32:	0fce      	lsrs	r6, r1, #31
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_ddiv+0x26>
 8000c38:	e156      	b.n	8000ee8 <__aeabi_ddiv+0x2d4>
 8000c3a:	4bd4      	ldr	r3, [pc, #848]	; (8000f8c <__aeabi_ddiv+0x378>)
 8000c3c:	4298      	cmp	r0, r3
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0x2e>
 8000c40:	e172      	b.n	8000f28 <__aeabi_ddiv+0x314>
 8000c42:	0f6b      	lsrs	r3, r5, #29
 8000c44:	00e4      	lsls	r4, r4, #3
 8000c46:	431c      	orrs	r4, r3
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	041b      	lsls	r3, r3, #16
 8000c4c:	4323      	orrs	r3, r4
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4bcf      	ldr	r3, [pc, #828]	; (8000f90 <__aeabi_ddiv+0x37c>)
 8000c52:	00ed      	lsls	r5, r5, #3
 8000c54:	469b      	mov	fp, r3
 8000c56:	2300      	movs	r3, #0
 8000c58:	4699      	mov	r9, r3
 8000c5a:	4483      	add	fp, r0
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	033c      	lsls	r4, r7, #12
 8000c60:	007b      	lsls	r3, r7, #1
 8000c62:	4650      	mov	r0, sl
 8000c64:	0b24      	lsrs	r4, r4, #12
 8000c66:	0d5b      	lsrs	r3, r3, #21
 8000c68:	0fff      	lsrs	r7, r7, #31
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x5c>
 8000c6e:	e11f      	b.n	8000eb0 <__aeabi_ddiv+0x29c>
 8000c70:	4ac6      	ldr	r2, [pc, #792]	; (8000f8c <__aeabi_ddiv+0x378>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x64>
 8000c76:	e162      	b.n	8000f3e <__aeabi_ddiv+0x32a>
 8000c78:	49c5      	ldr	r1, [pc, #788]	; (8000f90 <__aeabi_ddiv+0x37c>)
 8000c7a:	0f42      	lsrs	r2, r0, #29
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	00e4      	lsls	r4, r4, #3
 8000c80:	4659      	mov	r1, fp
 8000c82:	4314      	orrs	r4, r2
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	4463      	add	r3, ip
 8000c88:	0412      	lsls	r2, r2, #16
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	4314      	orrs	r4, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	00c2      	lsls	r2, r0, #3
 8000c92:	2000      	movs	r0, #0
 8000c94:	0033      	movs	r3, r6
 8000c96:	407b      	eors	r3, r7
 8000c98:	469a      	mov	sl, r3
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d827      	bhi.n	8000cf0 <__aeabi_ddiv+0xdc>
 8000ca0:	49bc      	ldr	r1, [pc, #752]	; (8000f94 <__aeabi_ddiv+0x380>)
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	58cb      	ldr	r3, [r1, r3]
 8000ca6:	469f      	mov	pc, r3
 8000ca8:	46b2      	mov	sl, r6
 8000caa:	9b00      	ldr	r3, [sp, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d016      	beq.n	8000cde <__aeabi_ddiv+0xca>
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_ddiv+0xa2>
 8000cb4:	e28e      	b.n	80011d4 <__aeabi_ddiv+0x5c0>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_ddiv+0xa8>
 8000cba:	e0d9      	b.n	8000e70 <__aeabi_ddiv+0x25c>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	4652      	mov	r2, sl
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	07d2      	lsls	r2, r2, #31
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	0028      	movs	r0, r5
 8000cce:	0019      	movs	r1, r3
 8000cd0:	b005      	add	sp, #20
 8000cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd4:	46bb      	mov	fp, r7
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	46a9      	mov	r9, r5
 8000cda:	46a0      	mov	r8, r4
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	4baa      	ldr	r3, [pc, #680]	; (8000f8c <__aeabi_ddiv+0x378>)
 8000ce4:	e7ed      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8000ce6:	46ba      	mov	sl, r7
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	0015      	movs	r5, r2
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	e7dc      	b.n	8000caa <__aeabi_ddiv+0x96>
 8000cf0:	4544      	cmp	r4, r8
 8000cf2:	d200      	bcs.n	8000cf6 <__aeabi_ddiv+0xe2>
 8000cf4:	e1c7      	b.n	8001086 <__aeabi_ddiv+0x472>
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_ddiv+0xe6>
 8000cf8:	e1c2      	b.n	8001080 <__aeabi_ddiv+0x46c>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	469c      	mov	ip, r3
 8000d00:	002e      	movs	r6, r5
 8000d02:	4640      	mov	r0, r8
 8000d04:	2500      	movs	r5, #0
 8000d06:	44e3      	add	fp, ip
 8000d08:	0223      	lsls	r3, r4, #8
 8000d0a:	0e14      	lsrs	r4, r2, #24
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	4699      	mov	r9, r3
 8000d12:	0423      	lsls	r3, r4, #16
 8000d14:	0c1f      	lsrs	r7, r3, #16
 8000d16:	0212      	lsls	r2, r2, #8
 8000d18:	4649      	mov	r1, r9
 8000d1a:	9200      	str	r2, [sp, #0]
 8000d1c:	9701      	str	r7, [sp, #4]
 8000d1e:	f7ff fa9f 	bl	8000260 <__aeabi_uidivmod>
 8000d22:	0002      	movs	r2, r0
 8000d24:	437a      	muls	r2, r7
 8000d26:	040b      	lsls	r3, r1, #16
 8000d28:	0c31      	lsrs	r1, r6, #16
 8000d2a:	4680      	mov	r8, r0
 8000d2c:	4319      	orrs	r1, r3
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d907      	bls.n	8000d42 <__aeabi_ddiv+0x12e>
 8000d32:	2301      	movs	r3, #1
 8000d34:	425b      	negs	r3, r3
 8000d36:	469c      	mov	ip, r3
 8000d38:	1909      	adds	r1, r1, r4
 8000d3a:	44e0      	add	r8, ip
 8000d3c:	428c      	cmp	r4, r1
 8000d3e:	d800      	bhi.n	8000d42 <__aeabi_ddiv+0x12e>
 8000d40:	e207      	b.n	8001152 <__aeabi_ddiv+0x53e>
 8000d42:	1a88      	subs	r0, r1, r2
 8000d44:	4649      	mov	r1, r9
 8000d46:	f7ff fa8b 	bl	8000260 <__aeabi_uidivmod>
 8000d4a:	0409      	lsls	r1, r1, #16
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	0431      	lsls	r1, r6, #16
 8000d50:	4666      	mov	r6, ip
 8000d52:	9a01      	ldr	r2, [sp, #4]
 8000d54:	0c09      	lsrs	r1, r1, #16
 8000d56:	4342      	muls	r2, r0
 8000d58:	0003      	movs	r3, r0
 8000d5a:	4331      	orrs	r1, r6
 8000d5c:	428a      	cmp	r2, r1
 8000d5e:	d904      	bls.n	8000d6a <__aeabi_ddiv+0x156>
 8000d60:	1909      	adds	r1, r1, r4
 8000d62:	3b01      	subs	r3, #1
 8000d64:	428c      	cmp	r4, r1
 8000d66:	d800      	bhi.n	8000d6a <__aeabi_ddiv+0x156>
 8000d68:	e1ed      	b.n	8001146 <__aeabi_ddiv+0x532>
 8000d6a:	1a88      	subs	r0, r1, r2
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	431a      	orrs	r2, r3
 8000d72:	4690      	mov	r8, r2
 8000d74:	4641      	mov	r1, r8
 8000d76:	9b00      	ldr	r3, [sp, #0]
 8000d78:	040e      	lsls	r6, r1, #16
 8000d7a:	0c1b      	lsrs	r3, r3, #16
 8000d7c:	001f      	movs	r7, r3
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	0c36      	lsrs	r6, r6, #16
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	0c19      	lsrs	r1, r3, #16
 8000d88:	000b      	movs	r3, r1
 8000d8a:	4373      	muls	r3, r6
 8000d8c:	0c12      	lsrs	r2, r2, #16
 8000d8e:	437e      	muls	r6, r7
 8000d90:	9103      	str	r1, [sp, #12]
 8000d92:	4351      	muls	r1, r2
 8000d94:	437a      	muls	r2, r7
 8000d96:	0c1f      	lsrs	r7, r3, #16
 8000d98:	46bc      	mov	ip, r7
 8000d9a:	1876      	adds	r6, r6, r1
 8000d9c:	4466      	add	r6, ip
 8000d9e:	42b1      	cmp	r1, r6
 8000da0:	d903      	bls.n	8000daa <__aeabi_ddiv+0x196>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0249      	lsls	r1, r1, #9
 8000da6:	468c      	mov	ip, r1
 8000da8:	4462      	add	r2, ip
 8000daa:	0c31      	lsrs	r1, r6, #16
 8000dac:	188a      	adds	r2, r1, r2
 8000dae:	0431      	lsls	r1, r6, #16
 8000db0:	041e      	lsls	r6, r3, #16
 8000db2:	0c36      	lsrs	r6, r6, #16
 8000db4:	198e      	adds	r6, r1, r6
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d302      	bcc.n	8000dc0 <__aeabi_ddiv+0x1ac>
 8000dba:	d112      	bne.n	8000de2 <__aeabi_ddiv+0x1ce>
 8000dbc:	42b5      	cmp	r5, r6
 8000dbe:	d210      	bcs.n	8000de2 <__aeabi_ddiv+0x1ce>
 8000dc0:	4643      	mov	r3, r8
 8000dc2:	1e59      	subs	r1, r3, #1
 8000dc4:	9b00      	ldr	r3, [sp, #0]
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	4465      	add	r5, ip
 8000dca:	001f      	movs	r7, r3
 8000dcc:	429d      	cmp	r5, r3
 8000dce:	419b      	sbcs	r3, r3
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	191b      	adds	r3, r3, r4
 8000dd4:	18c0      	adds	r0, r0, r3
 8000dd6:	4284      	cmp	r4, r0
 8000dd8:	d200      	bcs.n	8000ddc <__aeabi_ddiv+0x1c8>
 8000dda:	e1a0      	b.n	800111e <__aeabi_ddiv+0x50a>
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1cc>
 8000dde:	e19b      	b.n	8001118 <__aeabi_ddiv+0x504>
 8000de0:	4688      	mov	r8, r1
 8000de2:	1bae      	subs	r6, r5, r6
 8000de4:	42b5      	cmp	r5, r6
 8000de6:	41ad      	sbcs	r5, r5
 8000de8:	1a80      	subs	r0, r0, r2
 8000dea:	426d      	negs	r5, r5
 8000dec:	1b40      	subs	r0, r0, r5
 8000dee:	4284      	cmp	r4, r0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x1e0>
 8000df2:	e1d5      	b.n	80011a0 <__aeabi_ddiv+0x58c>
 8000df4:	4649      	mov	r1, r9
 8000df6:	f7ff fa33 	bl	8000260 <__aeabi_uidivmod>
 8000dfa:	9a01      	ldr	r2, [sp, #4]
 8000dfc:	040b      	lsls	r3, r1, #16
 8000dfe:	4342      	muls	r2, r0
 8000e00:	0c31      	lsrs	r1, r6, #16
 8000e02:	0005      	movs	r5, r0
 8000e04:	4319      	orrs	r1, r3
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d900      	bls.n	8000e0c <__aeabi_ddiv+0x1f8>
 8000e0a:	e16c      	b.n	80010e6 <__aeabi_ddiv+0x4d2>
 8000e0c:	1a88      	subs	r0, r1, r2
 8000e0e:	4649      	mov	r1, r9
 8000e10:	f7ff fa26 	bl	8000260 <__aeabi_uidivmod>
 8000e14:	9a01      	ldr	r2, [sp, #4]
 8000e16:	0436      	lsls	r6, r6, #16
 8000e18:	4342      	muls	r2, r0
 8000e1a:	0409      	lsls	r1, r1, #16
 8000e1c:	0c36      	lsrs	r6, r6, #16
 8000e1e:	0003      	movs	r3, r0
 8000e20:	430e      	orrs	r6, r1
 8000e22:	42b2      	cmp	r2, r6
 8000e24:	d900      	bls.n	8000e28 <__aeabi_ddiv+0x214>
 8000e26:	e153      	b.n	80010d0 <__aeabi_ddiv+0x4bc>
 8000e28:	9803      	ldr	r0, [sp, #12]
 8000e2a:	1ab6      	subs	r6, r6, r2
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	042d      	lsls	r5, r5, #16
 8000e30:	431d      	orrs	r5, r3
 8000e32:	9f02      	ldr	r7, [sp, #8]
 8000e34:	042b      	lsls	r3, r5, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	435a      	muls	r2, r3
 8000e3a:	437b      	muls	r3, r7
 8000e3c:	469c      	mov	ip, r3
 8000e3e:	0c29      	lsrs	r1, r5, #16
 8000e40:	4348      	muls	r0, r1
 8000e42:	0c13      	lsrs	r3, r2, #16
 8000e44:	4484      	add	ip, r0
 8000e46:	4463      	add	r3, ip
 8000e48:	4379      	muls	r1, r7
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d903      	bls.n	8000e56 <__aeabi_ddiv+0x242>
 8000e4e:	2080      	movs	r0, #128	; 0x80
 8000e50:	0240      	lsls	r0, r0, #9
 8000e52:	4684      	mov	ip, r0
 8000e54:	4461      	add	r1, ip
 8000e56:	0c18      	lsrs	r0, r3, #16
 8000e58:	0412      	lsls	r2, r2, #16
 8000e5a:	041b      	lsls	r3, r3, #16
 8000e5c:	0c12      	lsrs	r2, r2, #16
 8000e5e:	1841      	adds	r1, r0, r1
 8000e60:	189b      	adds	r3, r3, r2
 8000e62:	428e      	cmp	r6, r1
 8000e64:	d200      	bcs.n	8000e68 <__aeabi_ddiv+0x254>
 8000e66:	e0ff      	b.n	8001068 <__aeabi_ddiv+0x454>
 8000e68:	d100      	bne.n	8000e6c <__aeabi_ddiv+0x258>
 8000e6a:	e0fa      	b.n	8001062 <__aeabi_ddiv+0x44e>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	431d      	orrs	r5, r3
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <__aeabi_ddiv+0x384>)
 8000e72:	445a      	add	r2, fp
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_ddiv+0x266>
 8000e78:	e0aa      	b.n	8000fd0 <__aeabi_ddiv+0x3bc>
 8000e7a:	076b      	lsls	r3, r5, #29
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_ddiv+0x26c>
 8000e7e:	e13d      	b.n	80010fc <__aeabi_ddiv+0x4e8>
 8000e80:	08ed      	lsrs	r5, r5, #3
 8000e82:	4643      	mov	r3, r8
 8000e84:	01db      	lsls	r3, r3, #7
 8000e86:	d506      	bpl.n	8000e96 <__aeabi_ddiv+0x282>
 8000e88:	4642      	mov	r2, r8
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <__aeabi_ddiv+0x388>)
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	4690      	mov	r8, r2
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	00d2      	lsls	r2, r2, #3
 8000e94:	445a      	add	r2, fp
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <__aeabi_ddiv+0x38c>)
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dd00      	ble.n	8000e9e <__aeabi_ddiv+0x28a>
 8000e9c:	e71f      	b.n	8000cde <__aeabi_ddiv+0xca>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	075b      	lsls	r3, r3, #29
 8000ea2:	431d      	orrs	r5, r3
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	0552      	lsls	r2, r2, #21
 8000ea8:	025c      	lsls	r4, r3, #9
 8000eaa:	0b24      	lsrs	r4, r4, #12
 8000eac:	0d53      	lsrs	r3, r2, #21
 8000eae:	e708      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	4322      	orrs	r2, r4
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x2a4>
 8000eb6:	e07b      	b.n	8000fb0 <__aeabi_ddiv+0x39c>
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0x2aa>
 8000ebc:	e0fa      	b.n	80010b4 <__aeabi_ddiv+0x4a0>
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f001 fa22 	bl	8002308 <__clzsi2>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	3a0b      	subs	r2, #11
 8000ec8:	231d      	movs	r3, #29
 8000eca:	0001      	movs	r1, r0
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	3908      	subs	r1, #8
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	408c      	lsls	r4, r1
 8000ed6:	4314      	orrs	r4, r2
 8000ed8:	4652      	mov	r2, sl
 8000eda:	408a      	lsls	r2, r1
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <__aeabi_ddiv+0x390>)
 8000ede:	4458      	add	r0, fp
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	4483      	add	fp, r0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e6d5      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000ee8:	464b      	mov	r3, r9
 8000eea:	4323      	orrs	r3, r4
 8000eec:	4698      	mov	r8, r3
 8000eee:	d044      	beq.n	8000f7a <__aeabi_ddiv+0x366>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x2e2>
 8000ef4:	e0ce      	b.n	8001094 <__aeabi_ddiv+0x480>
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	f001 fa06 	bl	8002308 <__clzsi2>
 8000efc:	0001      	movs	r1, r0
 8000efe:	0002      	movs	r2, r0
 8000f00:	390b      	subs	r1, #11
 8000f02:	231d      	movs	r3, #29
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	4649      	mov	r1, r9
 8000f08:	0010      	movs	r0, r2
 8000f0a:	40d9      	lsrs	r1, r3
 8000f0c:	3808      	subs	r0, #8
 8000f0e:	4084      	lsls	r4, r0
 8000f10:	000b      	movs	r3, r1
 8000f12:	464d      	mov	r5, r9
 8000f14:	4323      	orrs	r3, r4
 8000f16:	4698      	mov	r8, r3
 8000f18:	4085      	lsls	r5, r0
 8000f1a:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <__aeabi_ddiv+0x394>)
 8000f1c:	1a83      	subs	r3, r0, r2
 8000f1e:	469b      	mov	fp, r3
 8000f20:	2300      	movs	r3, #0
 8000f22:	4699      	mov	r9, r3
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	e69a      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f28:	464b      	mov	r3, r9
 8000f2a:	4323      	orrs	r3, r4
 8000f2c:	4698      	mov	r8, r3
 8000f2e:	d11d      	bne.n	8000f6c <__aeabi_ddiv+0x358>
 8000f30:	2308      	movs	r3, #8
 8000f32:	4699      	mov	r9, r3
 8000f34:	3b06      	subs	r3, #6
 8000f36:	2500      	movs	r5, #0
 8000f38:	4683      	mov	fp, r0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	e68f      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f3e:	4652      	mov	r2, sl
 8000f40:	4322      	orrs	r2, r4
 8000f42:	d109      	bne.n	8000f58 <__aeabi_ddiv+0x344>
 8000f44:	2302      	movs	r3, #2
 8000f46:	4649      	mov	r1, r9
 8000f48:	4319      	orrs	r1, r3
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <__aeabi_ddiv+0x398>)
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	469c      	mov	ip, r3
 8000f50:	2400      	movs	r4, #0
 8000f52:	2002      	movs	r0, #2
 8000f54:	44e3      	add	fp, ip
 8000f56:	e69d      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	464a      	mov	r2, r9
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <__aeabi_ddiv+0x398>)
 8000f60:	4691      	mov	r9, r2
 8000f62:	469c      	mov	ip, r3
 8000f64:	4652      	mov	r2, sl
 8000f66:	2003      	movs	r0, #3
 8000f68:	44e3      	add	fp, ip
 8000f6a:	e693      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	4699      	mov	r9, r3
 8000f70:	3b09      	subs	r3, #9
 8000f72:	46a0      	mov	r8, r4
 8000f74:	4683      	mov	fp, r0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	e671      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	2300      	movs	r3, #0
 8000f80:	469b      	mov	fp, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	2500      	movs	r5, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	e669      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	000007ff 	.word	0x000007ff
 8000f90:	fffffc01 	.word	0xfffffc01
 8000f94:	0800df58 	.word	0x0800df58
 8000f98:	000003ff 	.word	0x000003ff
 8000f9c:	feffffff 	.word	0xfeffffff
 8000fa0:	000007fe 	.word	0x000007fe
 8000fa4:	000003f3 	.word	0x000003f3
 8000fa8:	fffffc0d 	.word	0xfffffc0d
 8000fac:	fffff801 	.word	0xfffff801
 8000fb0:	4649      	mov	r1, r9
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	4689      	mov	r9, r1
 8000fb8:	2400      	movs	r4, #0
 8000fba:	2001      	movs	r0, #1
 8000fbc:	e66a      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2480      	movs	r4, #128	; 0x80
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	e67a      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8000fcc:	2501      	movs	r5, #1
 8000fce:	426d      	negs	r5, r5
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	2b38      	cmp	r3, #56	; 0x38
 8000fd6:	dd00      	ble.n	8000fda <__aeabi_ddiv+0x3c6>
 8000fd8:	e670      	b.n	8000cbc <__aeabi_ddiv+0xa8>
 8000fda:	2b1f      	cmp	r3, #31
 8000fdc:	dc00      	bgt.n	8000fe0 <__aeabi_ddiv+0x3cc>
 8000fde:	e0bf      	b.n	8001160 <__aeabi_ddiv+0x54c>
 8000fe0:	211f      	movs	r1, #31
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	1a8a      	subs	r2, r1, r2
 8000fe6:	4641      	mov	r1, r8
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d004      	beq.n	8000ffa <__aeabi_ddiv+0x3e6>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	4b80      	ldr	r3, [pc, #512]	; (80011f4 <__aeabi_ddiv+0x5e0>)
 8000ff4:	445b      	add	r3, fp
 8000ff6:	4099      	lsls	r1, r3
 8000ff8:	430d      	orrs	r5, r1
 8000ffa:	1e6b      	subs	r3, r5, #1
 8000ffc:	419d      	sbcs	r5, r3
 8000ffe:	2307      	movs	r3, #7
 8001000:	432a      	orrs	r2, r5
 8001002:	001d      	movs	r5, r3
 8001004:	2400      	movs	r4, #0
 8001006:	4015      	ands	r5, r2
 8001008:	4213      	tst	r3, r2
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x3fa>
 800100c:	e0d4      	b.n	80011b8 <__aeabi_ddiv+0x5a4>
 800100e:	210f      	movs	r1, #15
 8001010:	2300      	movs	r3, #0
 8001012:	4011      	ands	r1, r2
 8001014:	2904      	cmp	r1, #4
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0x406>
 8001018:	e0cb      	b.n	80011b2 <__aeabi_ddiv+0x59e>
 800101a:	1d11      	adds	r1, r2, #4
 800101c:	4291      	cmp	r1, r2
 800101e:	4192      	sbcs	r2, r2
 8001020:	4252      	negs	r2, r2
 8001022:	189b      	adds	r3, r3, r2
 8001024:	000a      	movs	r2, r1
 8001026:	0219      	lsls	r1, r3, #8
 8001028:	d400      	bmi.n	800102c <__aeabi_ddiv+0x418>
 800102a:	e0c2      	b.n	80011b2 <__aeabi_ddiv+0x59e>
 800102c:	2301      	movs	r3, #1
 800102e:	2400      	movs	r4, #0
 8001030:	2500      	movs	r5, #0
 8001032:	e646      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	4641      	mov	r1, r8
 8001038:	031b      	lsls	r3, r3, #12
 800103a:	4219      	tst	r1, r3
 800103c:	d008      	beq.n	8001050 <__aeabi_ddiv+0x43c>
 800103e:	421c      	tst	r4, r3
 8001040:	d106      	bne.n	8001050 <__aeabi_ddiv+0x43c>
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46ba      	mov	sl, r7
 8001048:	0015      	movs	r5, r2
 800104a:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	e638      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8001050:	2480      	movs	r4, #128	; 0x80
 8001052:	4643      	mov	r3, r8
 8001054:	0324      	lsls	r4, r4, #12
 8001056:	431c      	orrs	r4, r3
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	46b2      	mov	sl, r6
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 800105e:	0b24      	lsrs	r4, r4, #12
 8001060:	e62f      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x454>
 8001066:	e703      	b.n	8000e70 <__aeabi_ddiv+0x25c>
 8001068:	19a6      	adds	r6, r4, r6
 800106a:	1e68      	subs	r0, r5, #1
 800106c:	42a6      	cmp	r6, r4
 800106e:	d200      	bcs.n	8001072 <__aeabi_ddiv+0x45e>
 8001070:	e08d      	b.n	800118e <__aeabi_ddiv+0x57a>
 8001072:	428e      	cmp	r6, r1
 8001074:	d200      	bcs.n	8001078 <__aeabi_ddiv+0x464>
 8001076:	e0a3      	b.n	80011c0 <__aeabi_ddiv+0x5ac>
 8001078:	d100      	bne.n	800107c <__aeabi_ddiv+0x468>
 800107a:	e0b3      	b.n	80011e4 <__aeabi_ddiv+0x5d0>
 800107c:	0005      	movs	r5, r0
 800107e:	e6f5      	b.n	8000e6c <__aeabi_ddiv+0x258>
 8001080:	42aa      	cmp	r2, r5
 8001082:	d900      	bls.n	8001086 <__aeabi_ddiv+0x472>
 8001084:	e639      	b.n	8000cfa <__aeabi_ddiv+0xe6>
 8001086:	4643      	mov	r3, r8
 8001088:	07de      	lsls	r6, r3, #31
 800108a:	0858      	lsrs	r0, r3, #1
 800108c:	086b      	lsrs	r3, r5, #1
 800108e:	431e      	orrs	r6, r3
 8001090:	07ed      	lsls	r5, r5, #31
 8001092:	e639      	b.n	8000d08 <__aeabi_ddiv+0xf4>
 8001094:	4648      	mov	r0, r9
 8001096:	f001 f937 	bl	8002308 <__clzsi2>
 800109a:	0001      	movs	r1, r0
 800109c:	0002      	movs	r2, r0
 800109e:	3115      	adds	r1, #21
 80010a0:	3220      	adds	r2, #32
 80010a2:	291c      	cmp	r1, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_ddiv+0x494>
 80010a6:	e72c      	b.n	8000f02 <__aeabi_ddiv+0x2ee>
 80010a8:	464b      	mov	r3, r9
 80010aa:	3808      	subs	r0, #8
 80010ac:	4083      	lsls	r3, r0
 80010ae:	2500      	movs	r5, #0
 80010b0:	4698      	mov	r8, r3
 80010b2:	e732      	b.n	8000f1a <__aeabi_ddiv+0x306>
 80010b4:	f001 f928 	bl	8002308 <__clzsi2>
 80010b8:	0003      	movs	r3, r0
 80010ba:	001a      	movs	r2, r3
 80010bc:	3215      	adds	r2, #21
 80010be:	3020      	adds	r0, #32
 80010c0:	2a1c      	cmp	r2, #28
 80010c2:	dc00      	bgt.n	80010c6 <__aeabi_ddiv+0x4b2>
 80010c4:	e700      	b.n	8000ec8 <__aeabi_ddiv+0x2b4>
 80010c6:	4654      	mov	r4, sl
 80010c8:	3b08      	subs	r3, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	409c      	lsls	r4, r3
 80010ce:	e705      	b.n	8000edc <__aeabi_ddiv+0x2c8>
 80010d0:	1936      	adds	r6, r6, r4
 80010d2:	3b01      	subs	r3, #1
 80010d4:	42b4      	cmp	r4, r6
 80010d6:	d900      	bls.n	80010da <__aeabi_ddiv+0x4c6>
 80010d8:	e6a6      	b.n	8000e28 <__aeabi_ddiv+0x214>
 80010da:	42b2      	cmp	r2, r6
 80010dc:	d800      	bhi.n	80010e0 <__aeabi_ddiv+0x4cc>
 80010de:	e6a3      	b.n	8000e28 <__aeabi_ddiv+0x214>
 80010e0:	1e83      	subs	r3, r0, #2
 80010e2:	1936      	adds	r6, r6, r4
 80010e4:	e6a0      	b.n	8000e28 <__aeabi_ddiv+0x214>
 80010e6:	1909      	adds	r1, r1, r4
 80010e8:	3d01      	subs	r5, #1
 80010ea:	428c      	cmp	r4, r1
 80010ec:	d900      	bls.n	80010f0 <__aeabi_ddiv+0x4dc>
 80010ee:	e68d      	b.n	8000e0c <__aeabi_ddiv+0x1f8>
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d800      	bhi.n	80010f6 <__aeabi_ddiv+0x4e2>
 80010f4:	e68a      	b.n	8000e0c <__aeabi_ddiv+0x1f8>
 80010f6:	1e85      	subs	r5, r0, #2
 80010f8:	1909      	adds	r1, r1, r4
 80010fa:	e687      	b.n	8000e0c <__aeabi_ddiv+0x1f8>
 80010fc:	230f      	movs	r3, #15
 80010fe:	402b      	ands	r3, r5
 8001100:	2b04      	cmp	r3, #4
 8001102:	d100      	bne.n	8001106 <__aeabi_ddiv+0x4f2>
 8001104:	e6bc      	b.n	8000e80 <__aeabi_ddiv+0x26c>
 8001106:	2305      	movs	r3, #5
 8001108:	425b      	negs	r3, r3
 800110a:	42ab      	cmp	r3, r5
 800110c:	419b      	sbcs	r3, r3
 800110e:	3504      	adds	r5, #4
 8001110:	425b      	negs	r3, r3
 8001112:	08ed      	lsrs	r5, r5, #3
 8001114:	4498      	add	r8, r3
 8001116:	e6b4      	b.n	8000e82 <__aeabi_ddiv+0x26e>
 8001118:	42af      	cmp	r7, r5
 800111a:	d900      	bls.n	800111e <__aeabi_ddiv+0x50a>
 800111c:	e660      	b.n	8000de0 <__aeabi_ddiv+0x1cc>
 800111e:	4282      	cmp	r2, r0
 8001120:	d804      	bhi.n	800112c <__aeabi_ddiv+0x518>
 8001122:	d000      	beq.n	8001126 <__aeabi_ddiv+0x512>
 8001124:	e65c      	b.n	8000de0 <__aeabi_ddiv+0x1cc>
 8001126:	42ae      	cmp	r6, r5
 8001128:	d800      	bhi.n	800112c <__aeabi_ddiv+0x518>
 800112a:	e659      	b.n	8000de0 <__aeabi_ddiv+0x1cc>
 800112c:	2302      	movs	r3, #2
 800112e:	425b      	negs	r3, r3
 8001130:	469c      	mov	ip, r3
 8001132:	9b00      	ldr	r3, [sp, #0]
 8001134:	44e0      	add	r8, ip
 8001136:	469c      	mov	ip, r3
 8001138:	4465      	add	r5, ip
 800113a:	429d      	cmp	r5, r3
 800113c:	419b      	sbcs	r3, r3
 800113e:	425b      	negs	r3, r3
 8001140:	191b      	adds	r3, r3, r4
 8001142:	18c0      	adds	r0, r0, r3
 8001144:	e64d      	b.n	8000de2 <__aeabi_ddiv+0x1ce>
 8001146:	428a      	cmp	r2, r1
 8001148:	d800      	bhi.n	800114c <__aeabi_ddiv+0x538>
 800114a:	e60e      	b.n	8000d6a <__aeabi_ddiv+0x156>
 800114c:	1e83      	subs	r3, r0, #2
 800114e:	1909      	adds	r1, r1, r4
 8001150:	e60b      	b.n	8000d6a <__aeabi_ddiv+0x156>
 8001152:	428a      	cmp	r2, r1
 8001154:	d800      	bhi.n	8001158 <__aeabi_ddiv+0x544>
 8001156:	e5f4      	b.n	8000d42 <__aeabi_ddiv+0x12e>
 8001158:	1e83      	subs	r3, r0, #2
 800115a:	4698      	mov	r8, r3
 800115c:	1909      	adds	r1, r1, r4
 800115e:	e5f0      	b.n	8000d42 <__aeabi_ddiv+0x12e>
 8001160:	4925      	ldr	r1, [pc, #148]	; (80011f8 <__aeabi_ddiv+0x5e4>)
 8001162:	0028      	movs	r0, r5
 8001164:	4459      	add	r1, fp
 8001166:	408d      	lsls	r5, r1
 8001168:	4642      	mov	r2, r8
 800116a:	408a      	lsls	r2, r1
 800116c:	1e69      	subs	r1, r5, #1
 800116e:	418d      	sbcs	r5, r1
 8001170:	4641      	mov	r1, r8
 8001172:	40d8      	lsrs	r0, r3
 8001174:	40d9      	lsrs	r1, r3
 8001176:	4302      	orrs	r2, r0
 8001178:	432a      	orrs	r2, r5
 800117a:	000b      	movs	r3, r1
 800117c:	0751      	lsls	r1, r2, #29
 800117e:	d100      	bne.n	8001182 <__aeabi_ddiv+0x56e>
 8001180:	e751      	b.n	8001026 <__aeabi_ddiv+0x412>
 8001182:	210f      	movs	r1, #15
 8001184:	4011      	ands	r1, r2
 8001186:	2904      	cmp	r1, #4
 8001188:	d000      	beq.n	800118c <__aeabi_ddiv+0x578>
 800118a:	e746      	b.n	800101a <__aeabi_ddiv+0x406>
 800118c:	e74b      	b.n	8001026 <__aeabi_ddiv+0x412>
 800118e:	0005      	movs	r5, r0
 8001190:	428e      	cmp	r6, r1
 8001192:	d000      	beq.n	8001196 <__aeabi_ddiv+0x582>
 8001194:	e66a      	b.n	8000e6c <__aeabi_ddiv+0x258>
 8001196:	9a00      	ldr	r2, [sp, #0]
 8001198:	4293      	cmp	r3, r2
 800119a:	d000      	beq.n	800119e <__aeabi_ddiv+0x58a>
 800119c:	e666      	b.n	8000e6c <__aeabi_ddiv+0x258>
 800119e:	e667      	b.n	8000e70 <__aeabi_ddiv+0x25c>
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <__aeabi_ddiv+0x5e8>)
 80011a2:	445a      	add	r2, fp
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_ddiv+0x596>
 80011a8:	e710      	b.n	8000fcc <__aeabi_ddiv+0x3b8>
 80011aa:	2301      	movs	r3, #1
 80011ac:	2500      	movs	r5, #0
 80011ae:	4498      	add	r8, r3
 80011b0:	e667      	b.n	8000e82 <__aeabi_ddiv+0x26e>
 80011b2:	075d      	lsls	r5, r3, #29
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	0b1c      	lsrs	r4, r3, #12
 80011b8:	08d2      	lsrs	r2, r2, #3
 80011ba:	2300      	movs	r3, #0
 80011bc:	4315      	orrs	r5, r2
 80011be:	e580      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 80011c0:	9800      	ldr	r0, [sp, #0]
 80011c2:	3d02      	subs	r5, #2
 80011c4:	0042      	lsls	r2, r0, #1
 80011c6:	4282      	cmp	r2, r0
 80011c8:	41bf      	sbcs	r7, r7
 80011ca:	427f      	negs	r7, r7
 80011cc:	193c      	adds	r4, r7, r4
 80011ce:	1936      	adds	r6, r6, r4
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	e7dd      	b.n	8001190 <__aeabi_ddiv+0x57c>
 80011d4:	2480      	movs	r4, #128	; 0x80
 80011d6:	4643      	mov	r3, r8
 80011d8:	0324      	lsls	r4, r4, #12
 80011da:	431c      	orrs	r4, r3
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 80011e0:	0b24      	lsrs	r4, r4, #12
 80011e2:	e56e      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 80011e4:	9a00      	ldr	r2, [sp, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3ea      	bcc.n	80011c0 <__aeabi_ddiv+0x5ac>
 80011ea:	0005      	movs	r5, r0
 80011ec:	e7d3      	b.n	8001196 <__aeabi_ddiv+0x582>
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	000007ff 	.word	0x000007ff
 80011f4:	0000043e 	.word	0x0000043e
 80011f8:	0000041e 	.word	0x0000041e
 80011fc:	000003ff 	.word	0x000003ff

08001200 <__eqdf2>:
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	464e      	mov	r6, r9
 8001204:	4645      	mov	r5, r8
 8001206:	46de      	mov	lr, fp
 8001208:	4657      	mov	r7, sl
 800120a:	4690      	mov	r8, r2
 800120c:	b5e0      	push	{r5, r6, r7, lr}
 800120e:	0017      	movs	r7, r2
 8001210:	031a      	lsls	r2, r3, #12
 8001212:	0b12      	lsrs	r2, r2, #12
 8001214:	0005      	movs	r5, r0
 8001216:	4684      	mov	ip, r0
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <__eqdf2+0x80>)
 800121a:	030e      	lsls	r6, r1, #12
 800121c:	004c      	lsls	r4, r1, #1
 800121e:	4691      	mov	r9, r2
 8001220:	005a      	lsls	r2, r3, #1
 8001222:	0fdb      	lsrs	r3, r3, #31
 8001224:	469b      	mov	fp, r3
 8001226:	0b36      	lsrs	r6, r6, #12
 8001228:	0d64      	lsrs	r4, r4, #21
 800122a:	0fc9      	lsrs	r1, r1, #31
 800122c:	0d52      	lsrs	r2, r2, #21
 800122e:	4284      	cmp	r4, r0
 8001230:	d019      	beq.n	8001266 <__eqdf2+0x66>
 8001232:	4282      	cmp	r2, r0
 8001234:	d010      	beq.n	8001258 <__eqdf2+0x58>
 8001236:	2001      	movs	r0, #1
 8001238:	4294      	cmp	r4, r2
 800123a:	d10e      	bne.n	800125a <__eqdf2+0x5a>
 800123c:	454e      	cmp	r6, r9
 800123e:	d10c      	bne.n	800125a <__eqdf2+0x5a>
 8001240:	2001      	movs	r0, #1
 8001242:	45c4      	cmp	ip, r8
 8001244:	d109      	bne.n	800125a <__eqdf2+0x5a>
 8001246:	4559      	cmp	r1, fp
 8001248:	d017      	beq.n	800127a <__eqdf2+0x7a>
 800124a:	2c00      	cmp	r4, #0
 800124c:	d105      	bne.n	800125a <__eqdf2+0x5a>
 800124e:	0030      	movs	r0, r6
 8001250:	4328      	orrs	r0, r5
 8001252:	1e43      	subs	r3, r0, #1
 8001254:	4198      	sbcs	r0, r3
 8001256:	e000      	b.n	800125a <__eqdf2+0x5a>
 8001258:	2001      	movs	r0, #1
 800125a:	bcf0      	pop	{r4, r5, r6, r7}
 800125c:	46bb      	mov	fp, r7
 800125e:	46b2      	mov	sl, r6
 8001260:	46a9      	mov	r9, r5
 8001262:	46a0      	mov	r8, r4
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	0033      	movs	r3, r6
 8001268:	2001      	movs	r0, #1
 800126a:	432b      	orrs	r3, r5
 800126c:	d1f5      	bne.n	800125a <__eqdf2+0x5a>
 800126e:	42a2      	cmp	r2, r4
 8001270:	d1f3      	bne.n	800125a <__eqdf2+0x5a>
 8001272:	464b      	mov	r3, r9
 8001274:	433b      	orrs	r3, r7
 8001276:	d1f0      	bne.n	800125a <__eqdf2+0x5a>
 8001278:	e7e2      	b.n	8001240 <__eqdf2+0x40>
 800127a:	2000      	movs	r0, #0
 800127c:	e7ed      	b.n	800125a <__eqdf2+0x5a>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff

08001284 <__gedf2>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	4647      	mov	r7, r8
 8001288:	46ce      	mov	lr, r9
 800128a:	0004      	movs	r4, r0
 800128c:	0018      	movs	r0, r3
 800128e:	0016      	movs	r6, r2
 8001290:	031b      	lsls	r3, r3, #12
 8001292:	0b1b      	lsrs	r3, r3, #12
 8001294:	4d2d      	ldr	r5, [pc, #180]	; (800134c <__gedf2+0xc8>)
 8001296:	004a      	lsls	r2, r1, #1
 8001298:	4699      	mov	r9, r3
 800129a:	b580      	push	{r7, lr}
 800129c:	0043      	lsls	r3, r0, #1
 800129e:	030f      	lsls	r7, r1, #12
 80012a0:	46a4      	mov	ip, r4
 80012a2:	46b0      	mov	r8, r6
 80012a4:	0b3f      	lsrs	r7, r7, #12
 80012a6:	0d52      	lsrs	r2, r2, #21
 80012a8:	0fc9      	lsrs	r1, r1, #31
 80012aa:	0d5b      	lsrs	r3, r3, #21
 80012ac:	0fc0      	lsrs	r0, r0, #31
 80012ae:	42aa      	cmp	r2, r5
 80012b0:	d021      	beq.n	80012f6 <__gedf2+0x72>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d013      	beq.n	80012de <__gedf2+0x5a>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d122      	bne.n	8001300 <__gedf2+0x7c>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <__gedf2+0x42>
 80012c0:	464d      	mov	r5, r9
 80012c2:	432e      	orrs	r6, r5
 80012c4:	d022      	beq.n	800130c <__gedf2+0x88>
 80012c6:	2c00      	cmp	r4, #0
 80012c8:	d010      	beq.n	80012ec <__gedf2+0x68>
 80012ca:	4281      	cmp	r1, r0
 80012cc:	d022      	beq.n	8001314 <__gedf2+0x90>
 80012ce:	2002      	movs	r0, #2
 80012d0:	3901      	subs	r1, #1
 80012d2:	4008      	ands	r0, r1
 80012d4:	3801      	subs	r0, #1
 80012d6:	bcc0      	pop	{r6, r7}
 80012d8:	46b9      	mov	r9, r7
 80012da:	46b0      	mov	r8, r6
 80012dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012de:	464d      	mov	r5, r9
 80012e0:	432e      	orrs	r6, r5
 80012e2:	d129      	bne.n	8001338 <__gedf2+0xb4>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d1f0      	bne.n	80012ca <__gedf2+0x46>
 80012e8:	433c      	orrs	r4, r7
 80012ea:	d1ee      	bne.n	80012ca <__gedf2+0x46>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d1f2      	bne.n	80012d6 <__gedf2+0x52>
 80012f0:	2001      	movs	r0, #1
 80012f2:	4240      	negs	r0, r0
 80012f4:	e7ef      	b.n	80012d6 <__gedf2+0x52>
 80012f6:	003d      	movs	r5, r7
 80012f8:	4325      	orrs	r5, r4
 80012fa:	d11d      	bne.n	8001338 <__gedf2+0xb4>
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d0ee      	beq.n	80012de <__gedf2+0x5a>
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e2      	bne.n	80012ca <__gedf2+0x46>
 8001304:	464c      	mov	r4, r9
 8001306:	4326      	orrs	r6, r4
 8001308:	d1df      	bne.n	80012ca <__gedf2+0x46>
 800130a:	e7e0      	b.n	80012ce <__gedf2+0x4a>
 800130c:	2000      	movs	r0, #0
 800130e:	2c00      	cmp	r4, #0
 8001310:	d0e1      	beq.n	80012d6 <__gedf2+0x52>
 8001312:	e7dc      	b.n	80012ce <__gedf2+0x4a>
 8001314:	429a      	cmp	r2, r3
 8001316:	dc0a      	bgt.n	800132e <__gedf2+0xaa>
 8001318:	dbe8      	blt.n	80012ec <__gedf2+0x68>
 800131a:	454f      	cmp	r7, r9
 800131c:	d8d7      	bhi.n	80012ce <__gedf2+0x4a>
 800131e:	d00e      	beq.n	800133e <__gedf2+0xba>
 8001320:	2000      	movs	r0, #0
 8001322:	454f      	cmp	r7, r9
 8001324:	d2d7      	bcs.n	80012d6 <__gedf2+0x52>
 8001326:	2900      	cmp	r1, #0
 8001328:	d0e2      	beq.n	80012f0 <__gedf2+0x6c>
 800132a:	0008      	movs	r0, r1
 800132c:	e7d3      	b.n	80012d6 <__gedf2+0x52>
 800132e:	4243      	negs	r3, r0
 8001330:	4158      	adcs	r0, r3
 8001332:	0040      	lsls	r0, r0, #1
 8001334:	3801      	subs	r0, #1
 8001336:	e7ce      	b.n	80012d6 <__gedf2+0x52>
 8001338:	2002      	movs	r0, #2
 800133a:	4240      	negs	r0, r0
 800133c:	e7cb      	b.n	80012d6 <__gedf2+0x52>
 800133e:	45c4      	cmp	ip, r8
 8001340:	d8c5      	bhi.n	80012ce <__gedf2+0x4a>
 8001342:	2000      	movs	r0, #0
 8001344:	45c4      	cmp	ip, r8
 8001346:	d2c6      	bcs.n	80012d6 <__gedf2+0x52>
 8001348:	e7ed      	b.n	8001326 <__gedf2+0xa2>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	000007ff 	.word	0x000007ff

08001350 <__ledf2>:
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	4647      	mov	r7, r8
 8001354:	46ce      	mov	lr, r9
 8001356:	0004      	movs	r4, r0
 8001358:	0018      	movs	r0, r3
 800135a:	0016      	movs	r6, r2
 800135c:	031b      	lsls	r3, r3, #12
 800135e:	0b1b      	lsrs	r3, r3, #12
 8001360:	4d2c      	ldr	r5, [pc, #176]	; (8001414 <__ledf2+0xc4>)
 8001362:	004a      	lsls	r2, r1, #1
 8001364:	4699      	mov	r9, r3
 8001366:	b580      	push	{r7, lr}
 8001368:	0043      	lsls	r3, r0, #1
 800136a:	030f      	lsls	r7, r1, #12
 800136c:	46a4      	mov	ip, r4
 800136e:	46b0      	mov	r8, r6
 8001370:	0b3f      	lsrs	r7, r7, #12
 8001372:	0d52      	lsrs	r2, r2, #21
 8001374:	0fc9      	lsrs	r1, r1, #31
 8001376:	0d5b      	lsrs	r3, r3, #21
 8001378:	0fc0      	lsrs	r0, r0, #31
 800137a:	42aa      	cmp	r2, r5
 800137c:	d00d      	beq.n	800139a <__ledf2+0x4a>
 800137e:	42ab      	cmp	r3, r5
 8001380:	d010      	beq.n	80013a4 <__ledf2+0x54>
 8001382:	2a00      	cmp	r2, #0
 8001384:	d127      	bne.n	80013d6 <__ledf2+0x86>
 8001386:	433c      	orrs	r4, r7
 8001388:	2b00      	cmp	r3, #0
 800138a:	d111      	bne.n	80013b0 <__ledf2+0x60>
 800138c:	464d      	mov	r5, r9
 800138e:	432e      	orrs	r6, r5
 8001390:	d10e      	bne.n	80013b0 <__ledf2+0x60>
 8001392:	2000      	movs	r0, #0
 8001394:	2c00      	cmp	r4, #0
 8001396:	d015      	beq.n	80013c4 <__ledf2+0x74>
 8001398:	e00e      	b.n	80013b8 <__ledf2+0x68>
 800139a:	003d      	movs	r5, r7
 800139c:	4325      	orrs	r5, r4
 800139e:	d110      	bne.n	80013c2 <__ledf2+0x72>
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d118      	bne.n	80013d6 <__ledf2+0x86>
 80013a4:	464d      	mov	r5, r9
 80013a6:	432e      	orrs	r6, r5
 80013a8:	d10b      	bne.n	80013c2 <__ledf2+0x72>
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d102      	bne.n	80013b4 <__ledf2+0x64>
 80013ae:	433c      	orrs	r4, r7
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d00b      	beq.n	80013cc <__ledf2+0x7c>
 80013b4:	4281      	cmp	r1, r0
 80013b6:	d014      	beq.n	80013e2 <__ledf2+0x92>
 80013b8:	2002      	movs	r0, #2
 80013ba:	3901      	subs	r1, #1
 80013bc:	4008      	ands	r0, r1
 80013be:	3801      	subs	r0, #1
 80013c0:	e000      	b.n	80013c4 <__ledf2+0x74>
 80013c2:	2002      	movs	r0, #2
 80013c4:	bcc0      	pop	{r6, r7}
 80013c6:	46b9      	mov	r9, r7
 80013c8:	46b0      	mov	r8, r6
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f9      	bne.n	80013c4 <__ledf2+0x74>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7f6      	b.n	80013c4 <__ledf2+0x74>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ec      	bne.n	80013b4 <__ledf2+0x64>
 80013da:	464c      	mov	r4, r9
 80013dc:	4326      	orrs	r6, r4
 80013de:	d1e9      	bne.n	80013b4 <__ledf2+0x64>
 80013e0:	e7ea      	b.n	80013b8 <__ledf2+0x68>
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dd04      	ble.n	80013f0 <__ledf2+0xa0>
 80013e6:	4243      	negs	r3, r0
 80013e8:	4158      	adcs	r0, r3
 80013ea:	0040      	lsls	r0, r0, #1
 80013ec:	3801      	subs	r0, #1
 80013ee:	e7e9      	b.n	80013c4 <__ledf2+0x74>
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbeb      	blt.n	80013cc <__ledf2+0x7c>
 80013f4:	454f      	cmp	r7, r9
 80013f6:	d8df      	bhi.n	80013b8 <__ledf2+0x68>
 80013f8:	d006      	beq.n	8001408 <__ledf2+0xb8>
 80013fa:	2000      	movs	r0, #0
 80013fc:	454f      	cmp	r7, r9
 80013fe:	d2e1      	bcs.n	80013c4 <__ledf2+0x74>
 8001400:	2900      	cmp	r1, #0
 8001402:	d0e5      	beq.n	80013d0 <__ledf2+0x80>
 8001404:	0008      	movs	r0, r1
 8001406:	e7dd      	b.n	80013c4 <__ledf2+0x74>
 8001408:	45c4      	cmp	ip, r8
 800140a:	d8d5      	bhi.n	80013b8 <__ledf2+0x68>
 800140c:	2000      	movs	r0, #0
 800140e:	45c4      	cmp	ip, r8
 8001410:	d2d8      	bcs.n	80013c4 <__ledf2+0x74>
 8001412:	e7f5      	b.n	8001400 <__ledf2+0xb0>
 8001414:	000007ff 	.word	0x000007ff

08001418 <__aeabi_dmul>:
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	4657      	mov	r7, sl
 800141c:	464e      	mov	r6, r9
 800141e:	4645      	mov	r5, r8
 8001420:	46de      	mov	lr, fp
 8001422:	b5e0      	push	{r5, r6, r7, lr}
 8001424:	4698      	mov	r8, r3
 8001426:	030c      	lsls	r4, r1, #12
 8001428:	004b      	lsls	r3, r1, #1
 800142a:	0006      	movs	r6, r0
 800142c:	4692      	mov	sl, r2
 800142e:	b087      	sub	sp, #28
 8001430:	0b24      	lsrs	r4, r4, #12
 8001432:	0d5b      	lsrs	r3, r3, #21
 8001434:	0fcf      	lsrs	r7, r1, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <__aeabi_dmul+0x24>
 800143a:	e15c      	b.n	80016f6 <__aeabi_dmul+0x2de>
 800143c:	4ad9      	ldr	r2, [pc, #868]	; (80017a4 <__aeabi_dmul+0x38c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d100      	bne.n	8001444 <__aeabi_dmul+0x2c>
 8001442:	e175      	b.n	8001730 <__aeabi_dmul+0x318>
 8001444:	0f42      	lsrs	r2, r0, #29
 8001446:	00e4      	lsls	r4, r4, #3
 8001448:	4314      	orrs	r4, r2
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	0412      	lsls	r2, r2, #16
 800144e:	4314      	orrs	r4, r2
 8001450:	4ad5      	ldr	r2, [pc, #852]	; (80017a8 <__aeabi_dmul+0x390>)
 8001452:	00c5      	lsls	r5, r0, #3
 8001454:	4694      	mov	ip, r2
 8001456:	4463      	add	r3, ip
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	4699      	mov	r9, r3
 800145e:	469b      	mov	fp, r3
 8001460:	4643      	mov	r3, r8
 8001462:	4642      	mov	r2, r8
 8001464:	031e      	lsls	r6, r3, #12
 8001466:	0fd2      	lsrs	r2, r2, #31
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4650      	mov	r0, sl
 800146c:	4690      	mov	r8, r2
 800146e:	0b36      	lsrs	r6, r6, #12
 8001470:	0d5b      	lsrs	r3, r3, #21
 8001472:	d100      	bne.n	8001476 <__aeabi_dmul+0x5e>
 8001474:	e120      	b.n	80016b8 <__aeabi_dmul+0x2a0>
 8001476:	4acb      	ldr	r2, [pc, #812]	; (80017a4 <__aeabi_dmul+0x38c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d100      	bne.n	800147e <__aeabi_dmul+0x66>
 800147c:	e162      	b.n	8001744 <__aeabi_dmul+0x32c>
 800147e:	49ca      	ldr	r1, [pc, #808]	; (80017a8 <__aeabi_dmul+0x390>)
 8001480:	0f42      	lsrs	r2, r0, #29
 8001482:	468c      	mov	ip, r1
 8001484:	9900      	ldr	r1, [sp, #0]
 8001486:	4463      	add	r3, ip
 8001488:	00f6      	lsls	r6, r6, #3
 800148a:	468c      	mov	ip, r1
 800148c:	4316      	orrs	r6, r2
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	449c      	add	ip, r3
 8001492:	0412      	lsls	r2, r2, #16
 8001494:	4663      	mov	r3, ip
 8001496:	4316      	orrs	r6, r2
 8001498:	00c2      	lsls	r2, r0, #3
 800149a:	2000      	movs	r0, #0
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	9900      	ldr	r1, [sp, #0]
 80014a0:	4643      	mov	r3, r8
 80014a2:	3101      	adds	r1, #1
 80014a4:	468c      	mov	ip, r1
 80014a6:	4649      	mov	r1, r9
 80014a8:	407b      	eors	r3, r7
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	290f      	cmp	r1, #15
 80014ae:	d826      	bhi.n	80014fe <__aeabi_dmul+0xe6>
 80014b0:	4bbe      	ldr	r3, [pc, #760]	; (80017ac <__aeabi_dmul+0x394>)
 80014b2:	0089      	lsls	r1, r1, #2
 80014b4:	5859      	ldr	r1, [r3, r1]
 80014b6:	468f      	mov	pc, r1
 80014b8:	4643      	mov	r3, r8
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	0034      	movs	r4, r6
 80014be:	0015      	movs	r5, r2
 80014c0:	4683      	mov	fp, r0
 80014c2:	465b      	mov	r3, fp
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d016      	beq.n	80014f6 <__aeabi_dmul+0xde>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d100      	bne.n	80014ce <__aeabi_dmul+0xb6>
 80014cc:	e203      	b.n	80018d6 <__aeabi_dmul+0x4be>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0xbc>
 80014d2:	e0cd      	b.n	8001670 <__aeabi_dmul+0x258>
 80014d4:	2200      	movs	r2, #0
 80014d6:	2400      	movs	r4, #0
 80014d8:	2500      	movs	r5, #0
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	0512      	lsls	r2, r2, #20
 80014de:	4322      	orrs	r2, r4
 80014e0:	07db      	lsls	r3, r3, #31
 80014e2:	431a      	orrs	r2, r3
 80014e4:	0028      	movs	r0, r5
 80014e6:	0011      	movs	r1, r2
 80014e8:	b007      	add	sp, #28
 80014ea:	bcf0      	pop	{r4, r5, r6, r7}
 80014ec:	46bb      	mov	fp, r7
 80014ee:	46b2      	mov	sl, r6
 80014f0:	46a9      	mov	r9, r5
 80014f2:	46a0      	mov	r8, r4
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f6:	2400      	movs	r4, #0
 80014f8:	2500      	movs	r5, #0
 80014fa:	4aaa      	ldr	r2, [pc, #680]	; (80017a4 <__aeabi_dmul+0x38c>)
 80014fc:	e7ed      	b.n	80014da <__aeabi_dmul+0xc2>
 80014fe:	0c28      	lsrs	r0, r5, #16
 8001500:	042d      	lsls	r5, r5, #16
 8001502:	0c2d      	lsrs	r5, r5, #16
 8001504:	002b      	movs	r3, r5
 8001506:	0c11      	lsrs	r1, r2, #16
 8001508:	0412      	lsls	r2, r2, #16
 800150a:	0c12      	lsrs	r2, r2, #16
 800150c:	4353      	muls	r3, r2
 800150e:	4698      	mov	r8, r3
 8001510:	0013      	movs	r3, r2
 8001512:	002f      	movs	r7, r5
 8001514:	4343      	muls	r3, r0
 8001516:	4699      	mov	r9, r3
 8001518:	434f      	muls	r7, r1
 800151a:	444f      	add	r7, r9
 800151c:	46bb      	mov	fp, r7
 800151e:	4647      	mov	r7, r8
 8001520:	000b      	movs	r3, r1
 8001522:	0c3f      	lsrs	r7, r7, #16
 8001524:	46ba      	mov	sl, r7
 8001526:	4343      	muls	r3, r0
 8001528:	44da      	add	sl, fp
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	45d1      	cmp	r9, sl
 800152e:	d904      	bls.n	800153a <__aeabi_dmul+0x122>
 8001530:	2780      	movs	r7, #128	; 0x80
 8001532:	027f      	lsls	r7, r7, #9
 8001534:	46b9      	mov	r9, r7
 8001536:	444b      	add	r3, r9
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	4653      	mov	r3, sl
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	469b      	mov	fp, r3
 8001540:	4653      	mov	r3, sl
 8001542:	041f      	lsls	r7, r3, #16
 8001544:	4643      	mov	r3, r8
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	0c1b      	lsrs	r3, r3, #16
 800154a:	4698      	mov	r8, r3
 800154c:	003b      	movs	r3, r7
 800154e:	4443      	add	r3, r8
 8001550:	9304      	str	r3, [sp, #16]
 8001552:	0c33      	lsrs	r3, r6, #16
 8001554:	0436      	lsls	r6, r6, #16
 8001556:	0c36      	lsrs	r6, r6, #16
 8001558:	4698      	mov	r8, r3
 800155a:	0033      	movs	r3, r6
 800155c:	4343      	muls	r3, r0
 800155e:	4699      	mov	r9, r3
 8001560:	4643      	mov	r3, r8
 8001562:	4343      	muls	r3, r0
 8001564:	002f      	movs	r7, r5
 8001566:	469a      	mov	sl, r3
 8001568:	4643      	mov	r3, r8
 800156a:	4377      	muls	r7, r6
 800156c:	435d      	muls	r5, r3
 800156e:	0c38      	lsrs	r0, r7, #16
 8001570:	444d      	add	r5, r9
 8001572:	1945      	adds	r5, r0, r5
 8001574:	45a9      	cmp	r9, r5
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x168>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4699      	mov	r9, r3
 800157e:	44ca      	add	sl, r9
 8001580:	043f      	lsls	r7, r7, #16
 8001582:	0c28      	lsrs	r0, r5, #16
 8001584:	0c3f      	lsrs	r7, r7, #16
 8001586:	042d      	lsls	r5, r5, #16
 8001588:	19ed      	adds	r5, r5, r7
 800158a:	0c27      	lsrs	r7, r4, #16
 800158c:	0424      	lsls	r4, r4, #16
 800158e:	0c24      	lsrs	r4, r4, #16
 8001590:	0003      	movs	r3, r0
 8001592:	0020      	movs	r0, r4
 8001594:	4350      	muls	r0, r2
 8001596:	437a      	muls	r2, r7
 8001598:	4691      	mov	r9, r2
 800159a:	003a      	movs	r2, r7
 800159c:	4453      	add	r3, sl
 800159e:	9305      	str	r3, [sp, #20]
 80015a0:	0c03      	lsrs	r3, r0, #16
 80015a2:	469a      	mov	sl, r3
 80015a4:	434a      	muls	r2, r1
 80015a6:	4361      	muls	r1, r4
 80015a8:	4449      	add	r1, r9
 80015aa:	4451      	add	r1, sl
 80015ac:	44ab      	add	fp, r5
 80015ae:	4589      	cmp	r9, r1
 80015b0:	d903      	bls.n	80015ba <__aeabi_dmul+0x1a2>
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4699      	mov	r9, r3
 80015b8:	444a      	add	r2, r9
 80015ba:	0400      	lsls	r0, r0, #16
 80015bc:	0c0b      	lsrs	r3, r1, #16
 80015be:	0c00      	lsrs	r0, r0, #16
 80015c0:	0409      	lsls	r1, r1, #16
 80015c2:	1809      	adds	r1, r1, r0
 80015c4:	0020      	movs	r0, r4
 80015c6:	4699      	mov	r9, r3
 80015c8:	4643      	mov	r3, r8
 80015ca:	4370      	muls	r0, r6
 80015cc:	435c      	muls	r4, r3
 80015ce:	437e      	muls	r6, r7
 80015d0:	435f      	muls	r7, r3
 80015d2:	0c03      	lsrs	r3, r0, #16
 80015d4:	4698      	mov	r8, r3
 80015d6:	19a4      	adds	r4, r4, r6
 80015d8:	4444      	add	r4, r8
 80015da:	444a      	add	r2, r9
 80015dc:	9703      	str	r7, [sp, #12]
 80015de:	42a6      	cmp	r6, r4
 80015e0:	d904      	bls.n	80015ec <__aeabi_dmul+0x1d4>
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4698      	mov	r8, r3
 80015e8:	4447      	add	r7, r8
 80015ea:	9703      	str	r7, [sp, #12]
 80015ec:	0423      	lsls	r3, r4, #16
 80015ee:	9e02      	ldr	r6, [sp, #8]
 80015f0:	469a      	mov	sl, r3
 80015f2:	9b05      	ldr	r3, [sp, #20]
 80015f4:	445e      	add	r6, fp
 80015f6:	4698      	mov	r8, r3
 80015f8:	42ae      	cmp	r6, r5
 80015fa:	41ad      	sbcs	r5, r5
 80015fc:	1876      	adds	r6, r6, r1
 80015fe:	428e      	cmp	r6, r1
 8001600:	4189      	sbcs	r1, r1
 8001602:	0400      	lsls	r0, r0, #16
 8001604:	0c00      	lsrs	r0, r0, #16
 8001606:	4450      	add	r0, sl
 8001608:	4440      	add	r0, r8
 800160a:	426d      	negs	r5, r5
 800160c:	1947      	adds	r7, r0, r5
 800160e:	46b8      	mov	r8, r7
 8001610:	4693      	mov	fp, r2
 8001612:	4249      	negs	r1, r1
 8001614:	4689      	mov	r9, r1
 8001616:	44c3      	add	fp, r8
 8001618:	44d9      	add	r9, fp
 800161a:	4298      	cmp	r0, r3
 800161c:	4180      	sbcs	r0, r0
 800161e:	45a8      	cmp	r8, r5
 8001620:	41ad      	sbcs	r5, r5
 8001622:	4593      	cmp	fp, r2
 8001624:	4192      	sbcs	r2, r2
 8001626:	4589      	cmp	r9, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	426d      	negs	r5, r5
 800162c:	4240      	negs	r0, r0
 800162e:	4328      	orrs	r0, r5
 8001630:	0c24      	lsrs	r4, r4, #16
 8001632:	4252      	negs	r2, r2
 8001634:	4249      	negs	r1, r1
 8001636:	430a      	orrs	r2, r1
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	1900      	adds	r0, r0, r4
 800163c:	1880      	adds	r0, r0, r2
 800163e:	18c7      	adds	r7, r0, r3
 8001640:	464b      	mov	r3, r9
 8001642:	0ddc      	lsrs	r4, r3, #23
 8001644:	9b04      	ldr	r3, [sp, #16]
 8001646:	0275      	lsls	r5, r6, #9
 8001648:	431d      	orrs	r5, r3
 800164a:	1e6a      	subs	r2, r5, #1
 800164c:	4195      	sbcs	r5, r2
 800164e:	464b      	mov	r3, r9
 8001650:	0df6      	lsrs	r6, r6, #23
 8001652:	027f      	lsls	r7, r7, #9
 8001654:	4335      	orrs	r5, r6
 8001656:	025a      	lsls	r2, r3, #9
 8001658:	433c      	orrs	r4, r7
 800165a:	4315      	orrs	r5, r2
 800165c:	01fb      	lsls	r3, r7, #7
 800165e:	d400      	bmi.n	8001662 <__aeabi_dmul+0x24a>
 8001660:	e11c      	b.n	800189c <__aeabi_dmul+0x484>
 8001662:	2101      	movs	r1, #1
 8001664:	086a      	lsrs	r2, r5, #1
 8001666:	400d      	ands	r5, r1
 8001668:	4315      	orrs	r5, r2
 800166a:	07e2      	lsls	r2, r4, #31
 800166c:	4315      	orrs	r5, r2
 800166e:	0864      	lsrs	r4, r4, #1
 8001670:	494f      	ldr	r1, [pc, #316]	; (80017b0 <__aeabi_dmul+0x398>)
 8001672:	4461      	add	r1, ip
 8001674:	2900      	cmp	r1, #0
 8001676:	dc00      	bgt.n	800167a <__aeabi_dmul+0x262>
 8001678:	e0b0      	b.n	80017dc <__aeabi_dmul+0x3c4>
 800167a:	076b      	lsls	r3, r5, #29
 800167c:	d009      	beq.n	8001692 <__aeabi_dmul+0x27a>
 800167e:	220f      	movs	r2, #15
 8001680:	402a      	ands	r2, r5
 8001682:	2a04      	cmp	r2, #4
 8001684:	d005      	beq.n	8001692 <__aeabi_dmul+0x27a>
 8001686:	1d2a      	adds	r2, r5, #4
 8001688:	42aa      	cmp	r2, r5
 800168a:	41ad      	sbcs	r5, r5
 800168c:	426d      	negs	r5, r5
 800168e:	1964      	adds	r4, r4, r5
 8001690:	0015      	movs	r5, r2
 8001692:	01e3      	lsls	r3, r4, #7
 8001694:	d504      	bpl.n	80016a0 <__aeabi_dmul+0x288>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	4a46      	ldr	r2, [pc, #280]	; (80017b4 <__aeabi_dmul+0x39c>)
 800169a:	00c9      	lsls	r1, r1, #3
 800169c:	4014      	ands	r4, r2
 800169e:	4461      	add	r1, ip
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <__aeabi_dmul+0x3a0>)
 80016a2:	4291      	cmp	r1, r2
 80016a4:	dd00      	ble.n	80016a8 <__aeabi_dmul+0x290>
 80016a6:	e726      	b.n	80014f6 <__aeabi_dmul+0xde>
 80016a8:	0762      	lsls	r2, r4, #29
 80016aa:	08ed      	lsrs	r5, r5, #3
 80016ac:	0264      	lsls	r4, r4, #9
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	4315      	orrs	r5, r2
 80016b2:	0b24      	lsrs	r4, r4, #12
 80016b4:	0d4a      	lsrs	r2, r1, #21
 80016b6:	e710      	b.n	80014da <__aeabi_dmul+0xc2>
 80016b8:	4652      	mov	r2, sl
 80016ba:	4332      	orrs	r2, r6
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dmul+0x2a8>
 80016be:	e07f      	b.n	80017c0 <__aeabi_dmul+0x3a8>
 80016c0:	2e00      	cmp	r6, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dmul+0x2ae>
 80016c4:	e0dc      	b.n	8001880 <__aeabi_dmul+0x468>
 80016c6:	0030      	movs	r0, r6
 80016c8:	f000 fe1e 	bl	8002308 <__clzsi2>
 80016cc:	0002      	movs	r2, r0
 80016ce:	3a0b      	subs	r2, #11
 80016d0:	231d      	movs	r3, #29
 80016d2:	0001      	movs	r1, r0
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	3908      	subs	r1, #8
 80016da:	40da      	lsrs	r2, r3
 80016dc:	408e      	lsls	r6, r1
 80016de:	4316      	orrs	r6, r2
 80016e0:	4652      	mov	r2, sl
 80016e2:	408a      	lsls	r2, r1
 80016e4:	9b00      	ldr	r3, [sp, #0]
 80016e6:	4935      	ldr	r1, [pc, #212]	; (80017bc <__aeabi_dmul+0x3a4>)
 80016e8:	1a18      	subs	r0, r3, r0
 80016ea:	0003      	movs	r3, r0
 80016ec:	468c      	mov	ip, r1
 80016ee:	4463      	add	r3, ip
 80016f0:	2000      	movs	r0, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	e6d3      	b.n	800149e <__aeabi_dmul+0x86>
 80016f6:	0025      	movs	r5, r4
 80016f8:	4305      	orrs	r5, r0
 80016fa:	d04a      	beq.n	8001792 <__aeabi_dmul+0x37a>
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_dmul+0x2ea>
 8001700:	e0b0      	b.n	8001864 <__aeabi_dmul+0x44c>
 8001702:	0020      	movs	r0, r4
 8001704:	f000 fe00 	bl	8002308 <__clzsi2>
 8001708:	0001      	movs	r1, r0
 800170a:	0002      	movs	r2, r0
 800170c:	390b      	subs	r1, #11
 800170e:	231d      	movs	r3, #29
 8001710:	0010      	movs	r0, r2
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	0031      	movs	r1, r6
 8001716:	0035      	movs	r5, r6
 8001718:	3808      	subs	r0, #8
 800171a:	4084      	lsls	r4, r0
 800171c:	40d9      	lsrs	r1, r3
 800171e:	4085      	lsls	r5, r0
 8001720:	430c      	orrs	r4, r1
 8001722:	4826      	ldr	r0, [pc, #152]	; (80017bc <__aeabi_dmul+0x3a4>)
 8001724:	1a83      	subs	r3, r0, r2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	4699      	mov	r9, r3
 800172c:	469b      	mov	fp, r3
 800172e:	e697      	b.n	8001460 <__aeabi_dmul+0x48>
 8001730:	0005      	movs	r5, r0
 8001732:	4325      	orrs	r5, r4
 8001734:	d126      	bne.n	8001784 <__aeabi_dmul+0x36c>
 8001736:	2208      	movs	r2, #8
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	2400      	movs	r4, #0
 800173e:	4691      	mov	r9, r2
 8001740:	469b      	mov	fp, r3
 8001742:	e68d      	b.n	8001460 <__aeabi_dmul+0x48>
 8001744:	4652      	mov	r2, sl
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	4332      	orrs	r2, r6
 800174a:	d110      	bne.n	800176e <__aeabi_dmul+0x356>
 800174c:	4915      	ldr	r1, [pc, #84]	; (80017a4 <__aeabi_dmul+0x38c>)
 800174e:	2600      	movs	r6, #0
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	4649      	mov	r1, r9
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	4319      	orrs	r1, r3
 800175c:	4689      	mov	r9, r1
 800175e:	2002      	movs	r0, #2
 8001760:	e69d      	b.n	800149e <__aeabi_dmul+0x86>
 8001762:	465b      	mov	r3, fp
 8001764:	9701      	str	r7, [sp, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d000      	beq.n	800176c <__aeabi_dmul+0x354>
 800176a:	e6ad      	b.n	80014c8 <__aeabi_dmul+0xb0>
 800176c:	e6c3      	b.n	80014f6 <__aeabi_dmul+0xde>
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <__aeabi_dmul+0x38c>)
 8001770:	2003      	movs	r0, #3
 8001772:	4694      	mov	ip, r2
 8001774:	4463      	add	r3, ip
 8001776:	464a      	mov	r2, r9
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2303      	movs	r3, #3
 800177c:	431a      	orrs	r2, r3
 800177e:	4691      	mov	r9, r2
 8001780:	4652      	mov	r2, sl
 8001782:	e68c      	b.n	800149e <__aeabi_dmul+0x86>
 8001784:	220c      	movs	r2, #12
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2303      	movs	r3, #3
 800178a:	0005      	movs	r5, r0
 800178c:	4691      	mov	r9, r2
 800178e:	469b      	mov	fp, r3
 8001790:	e666      	b.n	8001460 <__aeabi_dmul+0x48>
 8001792:	2304      	movs	r3, #4
 8001794:	4699      	mov	r9, r3
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	2400      	movs	r4, #0
 800179e:	469b      	mov	fp, r3
 80017a0:	e65e      	b.n	8001460 <__aeabi_dmul+0x48>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	fffffc01 	.word	0xfffffc01
 80017ac:	0800df98 	.word	0x0800df98
 80017b0:	000003ff 	.word	0x000003ff
 80017b4:	feffffff 	.word	0xfeffffff
 80017b8:	000007fe 	.word	0x000007fe
 80017bc:	fffffc0d 	.word	0xfffffc0d
 80017c0:	4649      	mov	r1, r9
 80017c2:	2301      	movs	r3, #1
 80017c4:	4319      	orrs	r1, r3
 80017c6:	4689      	mov	r9, r1
 80017c8:	2600      	movs	r6, #0
 80017ca:	2001      	movs	r0, #1
 80017cc:	e667      	b.n	800149e <__aeabi_dmul+0x86>
 80017ce:	2300      	movs	r3, #0
 80017d0:	2480      	movs	r4, #128	; 0x80
 80017d2:	2500      	movs	r5, #0
 80017d4:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <__aeabi_dmul+0x4cc>)
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	0324      	lsls	r4, r4, #12
 80017da:	e67e      	b.n	80014da <__aeabi_dmul+0xc2>
 80017dc:	2001      	movs	r0, #1
 80017de:	1a40      	subs	r0, r0, r1
 80017e0:	2838      	cmp	r0, #56	; 0x38
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dmul+0x3ce>
 80017e4:	e676      	b.n	80014d4 <__aeabi_dmul+0xbc>
 80017e6:	281f      	cmp	r0, #31
 80017e8:	dd5b      	ble.n	80018a2 <__aeabi_dmul+0x48a>
 80017ea:	221f      	movs	r2, #31
 80017ec:	0023      	movs	r3, r4
 80017ee:	4252      	negs	r2, r2
 80017f0:	1a51      	subs	r1, r2, r1
 80017f2:	40cb      	lsrs	r3, r1
 80017f4:	0019      	movs	r1, r3
 80017f6:	2820      	cmp	r0, #32
 80017f8:	d003      	beq.n	8001802 <__aeabi_dmul+0x3ea>
 80017fa:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <__aeabi_dmul+0x4d0>)
 80017fc:	4462      	add	r2, ip
 80017fe:	4094      	lsls	r4, r2
 8001800:	4325      	orrs	r5, r4
 8001802:	1e6a      	subs	r2, r5, #1
 8001804:	4195      	sbcs	r5, r2
 8001806:	002a      	movs	r2, r5
 8001808:	430a      	orrs	r2, r1
 800180a:	2107      	movs	r1, #7
 800180c:	000d      	movs	r5, r1
 800180e:	2400      	movs	r4, #0
 8001810:	4015      	ands	r5, r2
 8001812:	4211      	tst	r1, r2
 8001814:	d05b      	beq.n	80018ce <__aeabi_dmul+0x4b6>
 8001816:	210f      	movs	r1, #15
 8001818:	2400      	movs	r4, #0
 800181a:	4011      	ands	r1, r2
 800181c:	2904      	cmp	r1, #4
 800181e:	d053      	beq.n	80018c8 <__aeabi_dmul+0x4b0>
 8001820:	1d11      	adds	r1, r2, #4
 8001822:	4291      	cmp	r1, r2
 8001824:	4192      	sbcs	r2, r2
 8001826:	4252      	negs	r2, r2
 8001828:	18a4      	adds	r4, r4, r2
 800182a:	000a      	movs	r2, r1
 800182c:	0223      	lsls	r3, r4, #8
 800182e:	d54b      	bpl.n	80018c8 <__aeabi_dmul+0x4b0>
 8001830:	2201      	movs	r2, #1
 8001832:	2400      	movs	r4, #0
 8001834:	2500      	movs	r5, #0
 8001836:	e650      	b.n	80014da <__aeabi_dmul+0xc2>
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	031b      	lsls	r3, r3, #12
 800183c:	421c      	tst	r4, r3
 800183e:	d009      	beq.n	8001854 <__aeabi_dmul+0x43c>
 8001840:	421e      	tst	r6, r3
 8001842:	d107      	bne.n	8001854 <__aeabi_dmul+0x43c>
 8001844:	4333      	orrs	r3, r6
 8001846:	031c      	lsls	r4, r3, #12
 8001848:	4643      	mov	r3, r8
 800184a:	0015      	movs	r5, r2
 800184c:	0b24      	lsrs	r4, r4, #12
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <__aeabi_dmul+0x4cc>)
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	e642      	b.n	80014da <__aeabi_dmul+0xc2>
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	0312      	lsls	r2, r2, #12
 8001858:	4314      	orrs	r4, r2
 800185a:	0324      	lsls	r4, r4, #12
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <__aeabi_dmul+0x4cc>)
 800185e:	0b24      	lsrs	r4, r4, #12
 8001860:	9701      	str	r7, [sp, #4]
 8001862:	e63a      	b.n	80014da <__aeabi_dmul+0xc2>
 8001864:	f000 fd50 	bl	8002308 <__clzsi2>
 8001868:	0001      	movs	r1, r0
 800186a:	0002      	movs	r2, r0
 800186c:	3115      	adds	r1, #21
 800186e:	3220      	adds	r2, #32
 8001870:	291c      	cmp	r1, #28
 8001872:	dc00      	bgt.n	8001876 <__aeabi_dmul+0x45e>
 8001874:	e74b      	b.n	800170e <__aeabi_dmul+0x2f6>
 8001876:	0034      	movs	r4, r6
 8001878:	3808      	subs	r0, #8
 800187a:	2500      	movs	r5, #0
 800187c:	4084      	lsls	r4, r0
 800187e:	e750      	b.n	8001722 <__aeabi_dmul+0x30a>
 8001880:	f000 fd42 	bl	8002308 <__clzsi2>
 8001884:	0003      	movs	r3, r0
 8001886:	001a      	movs	r2, r3
 8001888:	3215      	adds	r2, #21
 800188a:	3020      	adds	r0, #32
 800188c:	2a1c      	cmp	r2, #28
 800188e:	dc00      	bgt.n	8001892 <__aeabi_dmul+0x47a>
 8001890:	e71e      	b.n	80016d0 <__aeabi_dmul+0x2b8>
 8001892:	4656      	mov	r6, sl
 8001894:	3b08      	subs	r3, #8
 8001896:	2200      	movs	r2, #0
 8001898:	409e      	lsls	r6, r3
 800189a:	e723      	b.n	80016e4 <__aeabi_dmul+0x2cc>
 800189c:	9b00      	ldr	r3, [sp, #0]
 800189e:	469c      	mov	ip, r3
 80018a0:	e6e6      	b.n	8001670 <__aeabi_dmul+0x258>
 80018a2:	4912      	ldr	r1, [pc, #72]	; (80018ec <__aeabi_dmul+0x4d4>)
 80018a4:	0022      	movs	r2, r4
 80018a6:	4461      	add	r1, ip
 80018a8:	002e      	movs	r6, r5
 80018aa:	408d      	lsls	r5, r1
 80018ac:	408a      	lsls	r2, r1
 80018ae:	40c6      	lsrs	r6, r0
 80018b0:	1e69      	subs	r1, r5, #1
 80018b2:	418d      	sbcs	r5, r1
 80018b4:	4332      	orrs	r2, r6
 80018b6:	432a      	orrs	r2, r5
 80018b8:	40c4      	lsrs	r4, r0
 80018ba:	0753      	lsls	r3, r2, #29
 80018bc:	d0b6      	beq.n	800182c <__aeabi_dmul+0x414>
 80018be:	210f      	movs	r1, #15
 80018c0:	4011      	ands	r1, r2
 80018c2:	2904      	cmp	r1, #4
 80018c4:	d1ac      	bne.n	8001820 <__aeabi_dmul+0x408>
 80018c6:	e7b1      	b.n	800182c <__aeabi_dmul+0x414>
 80018c8:	0765      	lsls	r5, r4, #29
 80018ca:	0264      	lsls	r4, r4, #9
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	08d2      	lsrs	r2, r2, #3
 80018d0:	4315      	orrs	r5, r2
 80018d2:	2200      	movs	r2, #0
 80018d4:	e601      	b.n	80014da <__aeabi_dmul+0xc2>
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	0312      	lsls	r2, r2, #12
 80018da:	4314      	orrs	r4, r2
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	4a01      	ldr	r2, [pc, #4]	; (80018e4 <__aeabi_dmul+0x4cc>)
 80018e0:	0b24      	lsrs	r4, r4, #12
 80018e2:	e5fa      	b.n	80014da <__aeabi_dmul+0xc2>
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	0000043e 	.word	0x0000043e
 80018ec:	0000041e 	.word	0x0000041e

080018f0 <__aeabi_dsub>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	4657      	mov	r7, sl
 80018f4:	464e      	mov	r6, r9
 80018f6:	4645      	mov	r5, r8
 80018f8:	46de      	mov	lr, fp
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	001e      	movs	r6, r3
 80018fe:	0017      	movs	r7, r2
 8001900:	004a      	lsls	r2, r1, #1
 8001902:	030b      	lsls	r3, r1, #12
 8001904:	0d52      	lsrs	r2, r2, #21
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	4690      	mov	r8, r2
 800190a:	0f42      	lsrs	r2, r0, #29
 800190c:	431a      	orrs	r2, r3
 800190e:	0fcd      	lsrs	r5, r1, #31
 8001910:	4ccd      	ldr	r4, [pc, #820]	; (8001c48 <__aeabi_dsub+0x358>)
 8001912:	0331      	lsls	r1, r6, #12
 8001914:	00c3      	lsls	r3, r0, #3
 8001916:	4694      	mov	ip, r2
 8001918:	0070      	lsls	r0, r6, #1
 800191a:	0f7a      	lsrs	r2, r7, #29
 800191c:	0a49      	lsrs	r1, r1, #9
 800191e:	00ff      	lsls	r7, r7, #3
 8001920:	469a      	mov	sl, r3
 8001922:	46b9      	mov	r9, r7
 8001924:	0d40      	lsrs	r0, r0, #21
 8001926:	0ff6      	lsrs	r6, r6, #31
 8001928:	4311      	orrs	r1, r2
 800192a:	42a0      	cmp	r0, r4
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x40>
 800192e:	e0b1      	b.n	8001a94 <__aeabi_dsub+0x1a4>
 8001930:	2201      	movs	r2, #1
 8001932:	4056      	eors	r6, r2
 8001934:	46b3      	mov	fp, r6
 8001936:	42b5      	cmp	r5, r6
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x4c>
 800193a:	e088      	b.n	8001a4e <__aeabi_dsub+0x15e>
 800193c:	4642      	mov	r2, r8
 800193e:	1a12      	subs	r2, r2, r0
 8001940:	2a00      	cmp	r2, #0
 8001942:	dc00      	bgt.n	8001946 <__aeabi_dsub+0x56>
 8001944:	e0ae      	b.n	8001aa4 <__aeabi_dsub+0x1b4>
 8001946:	2800      	cmp	r0, #0
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x5c>
 800194a:	e0c1      	b.n	8001ad0 <__aeabi_dsub+0x1e0>
 800194c:	48be      	ldr	r0, [pc, #760]	; (8001c48 <__aeabi_dsub+0x358>)
 800194e:	4580      	cmp	r8, r0
 8001950:	d100      	bne.n	8001954 <__aeabi_dsub+0x64>
 8001952:	e151      	b.n	8001bf8 <__aeabi_dsub+0x308>
 8001954:	2080      	movs	r0, #128	; 0x80
 8001956:	0400      	lsls	r0, r0, #16
 8001958:	4301      	orrs	r1, r0
 800195a:	2a38      	cmp	r2, #56	; 0x38
 800195c:	dd00      	ble.n	8001960 <__aeabi_dsub+0x70>
 800195e:	e17b      	b.n	8001c58 <__aeabi_dsub+0x368>
 8001960:	2a1f      	cmp	r2, #31
 8001962:	dd00      	ble.n	8001966 <__aeabi_dsub+0x76>
 8001964:	e1ee      	b.n	8001d44 <__aeabi_dsub+0x454>
 8001966:	2020      	movs	r0, #32
 8001968:	003e      	movs	r6, r7
 800196a:	1a80      	subs	r0, r0, r2
 800196c:	000c      	movs	r4, r1
 800196e:	40d6      	lsrs	r6, r2
 8001970:	40d1      	lsrs	r1, r2
 8001972:	4087      	lsls	r7, r0
 8001974:	4662      	mov	r2, ip
 8001976:	4084      	lsls	r4, r0
 8001978:	1a52      	subs	r2, r2, r1
 800197a:	1e78      	subs	r0, r7, #1
 800197c:	4187      	sbcs	r7, r0
 800197e:	4694      	mov	ip, r2
 8001980:	4334      	orrs	r4, r6
 8001982:	4327      	orrs	r7, r4
 8001984:	1bdc      	subs	r4, r3, r7
 8001986:	42a3      	cmp	r3, r4
 8001988:	419b      	sbcs	r3, r3
 800198a:	4662      	mov	r2, ip
 800198c:	425b      	negs	r3, r3
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4699      	mov	r9, r3
 8001992:	464b      	mov	r3, r9
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	d400      	bmi.n	800199a <__aeabi_dsub+0xaa>
 8001998:	e118      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 800199a:	464b      	mov	r3, r9
 800199c:	0258      	lsls	r0, r3, #9
 800199e:	0a43      	lsrs	r3, r0, #9
 80019a0:	4699      	mov	r9, r3
 80019a2:	464b      	mov	r3, r9
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dsub+0xba>
 80019a8:	e137      	b.n	8001c1a <__aeabi_dsub+0x32a>
 80019aa:	4648      	mov	r0, r9
 80019ac:	f000 fcac 	bl	8002308 <__clzsi2>
 80019b0:	0001      	movs	r1, r0
 80019b2:	3908      	subs	r1, #8
 80019b4:	2320      	movs	r3, #32
 80019b6:	0022      	movs	r2, r4
 80019b8:	4648      	mov	r0, r9
 80019ba:	1a5b      	subs	r3, r3, r1
 80019bc:	40da      	lsrs	r2, r3
 80019be:	4088      	lsls	r0, r1
 80019c0:	408c      	lsls	r4, r1
 80019c2:	4643      	mov	r3, r8
 80019c4:	4310      	orrs	r0, r2
 80019c6:	4588      	cmp	r8, r1
 80019c8:	dd00      	ble.n	80019cc <__aeabi_dsub+0xdc>
 80019ca:	e136      	b.n	8001c3a <__aeabi_dsub+0x34a>
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	1c4b      	adds	r3, r1, #1
 80019d0:	2b1f      	cmp	r3, #31
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dsub+0xe6>
 80019d4:	e0ea      	b.n	8001bac <__aeabi_dsub+0x2bc>
 80019d6:	2220      	movs	r2, #32
 80019d8:	0026      	movs	r6, r4
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	0001      	movs	r1, r0
 80019de:	4094      	lsls	r4, r2
 80019e0:	40de      	lsrs	r6, r3
 80019e2:	40d8      	lsrs	r0, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	4091      	lsls	r1, r2
 80019e8:	1e62      	subs	r2, r4, #1
 80019ea:	4194      	sbcs	r4, r2
 80019ec:	4681      	mov	r9, r0
 80019ee:	4698      	mov	r8, r3
 80019f0:	4331      	orrs	r1, r6
 80019f2:	430c      	orrs	r4, r1
 80019f4:	0763      	lsls	r3, r4, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dsub+0x11c>
 80019f8:	230f      	movs	r3, #15
 80019fa:	4023      	ands	r3, r4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dsub+0x11c>
 8001a00:	1d23      	adds	r3, r4, #4
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	41a4      	sbcs	r4, r4
 8001a06:	4264      	negs	r4, r4
 8001a08:	44a1      	add	r9, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_dsub+0x124>
 8001a12:	e0de      	b.n	8001bd2 <__aeabi_dsub+0x2e2>
 8001a14:	4641      	mov	r1, r8
 8001a16:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <__aeabi_dsub+0x358>)
 8001a18:	3101      	adds	r1, #1
 8001a1a:	4299      	cmp	r1, r3
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x130>
 8001a1e:	e0e7      	b.n	8001bf0 <__aeabi_dsub+0x300>
 8001a20:	464b      	mov	r3, r9
 8001a22:	488a      	ldr	r0, [pc, #552]	; (8001c4c <__aeabi_dsub+0x35c>)
 8001a24:	08e4      	lsrs	r4, r4, #3
 8001a26:	4003      	ands	r3, r0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	0549      	lsls	r1, r1, #21
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	0240      	lsls	r0, r0, #9
 8001a30:	4323      	orrs	r3, r4
 8001a32:	0d4a      	lsrs	r2, r1, #21
 8001a34:	0b04      	lsrs	r4, r0, #12
 8001a36:	0512      	lsls	r2, r2, #20
 8001a38:	07ed      	lsls	r5, r5, #31
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	432a      	orrs	r2, r5
 8001a3e:	0018      	movs	r0, r3
 8001a40:	0011      	movs	r1, r2
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a4e:	4642      	mov	r2, r8
 8001a50:	1a12      	subs	r2, r2, r0
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	dd52      	ble.n	8001afc <__aeabi_dsub+0x20c>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x16c>
 8001a5a:	e09c      	b.n	8001b96 <__aeabi_dsub+0x2a6>
 8001a5c:	45a0      	cmp	r8, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x172>
 8001a60:	e0ca      	b.n	8001bf8 <__aeabi_dsub+0x308>
 8001a62:	2080      	movs	r0, #128	; 0x80
 8001a64:	0400      	lsls	r0, r0, #16
 8001a66:	4301      	orrs	r1, r0
 8001a68:	2a38      	cmp	r2, #56	; 0x38
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_dsub+0x17e>
 8001a6c:	e149      	b.n	8001d02 <__aeabi_dsub+0x412>
 8001a6e:	2a1f      	cmp	r2, #31
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_dsub+0x184>
 8001a72:	e197      	b.n	8001da4 <__aeabi_dsub+0x4b4>
 8001a74:	0010      	movs	r0, r2
 8001a76:	000e      	movs	r6, r1
 8001a78:	3820      	subs	r0, #32
 8001a7a:	40c6      	lsrs	r6, r0
 8001a7c:	2a20      	cmp	r2, #32
 8001a7e:	d004      	beq.n	8001a8a <__aeabi_dsub+0x19a>
 8001a80:	2040      	movs	r0, #64	; 0x40
 8001a82:	1a82      	subs	r2, r0, r2
 8001a84:	4091      	lsls	r1, r2
 8001a86:	430f      	orrs	r7, r1
 8001a88:	46b9      	mov	r9, r7
 8001a8a:	464c      	mov	r4, r9
 8001a8c:	1e62      	subs	r2, r4, #1
 8001a8e:	4194      	sbcs	r4, r2
 8001a90:	4334      	orrs	r4, r6
 8001a92:	e13a      	b.n	8001d0a <__aeabi_dsub+0x41a>
 8001a94:	000a      	movs	r2, r1
 8001a96:	433a      	orrs	r2, r7
 8001a98:	d028      	beq.n	8001aec <__aeabi_dsub+0x1fc>
 8001a9a:	46b3      	mov	fp, r6
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	d02b      	beq.n	8001af8 <__aeabi_dsub+0x208>
 8001aa0:	4a6b      	ldr	r2, [pc, #428]	; (8001c50 <__aeabi_dsub+0x360>)
 8001aa2:	4442      	add	r2, r8
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d05d      	beq.n	8001b64 <__aeabi_dsub+0x274>
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	4644      	mov	r4, r8
 8001aac:	1a82      	subs	r2, r0, r2
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dsub+0x1c4>
 8001ab2:	e0f5      	b.n	8001ca0 <__aeabi_dsub+0x3b0>
 8001ab4:	4665      	mov	r5, ip
 8001ab6:	431d      	orrs	r5, r3
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x1cc>
 8001aba:	e19c      	b.n	8001df6 <__aeabi_dsub+0x506>
 8001abc:	1e55      	subs	r5, r2, #1
 8001abe:	2a01      	cmp	r2, #1
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1d4>
 8001ac2:	e1fb      	b.n	8001ebc <__aeabi_dsub+0x5cc>
 8001ac4:	4c60      	ldr	r4, [pc, #384]	; (8001c48 <__aeabi_dsub+0x358>)
 8001ac6:	42a2      	cmp	r2, r4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1dc>
 8001aca:	e1bd      	b.n	8001e48 <__aeabi_dsub+0x558>
 8001acc:	002a      	movs	r2, r5
 8001ace:	e0f0      	b.n	8001cb2 <__aeabi_dsub+0x3c2>
 8001ad0:	0008      	movs	r0, r1
 8001ad2:	4338      	orrs	r0, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x1e8>
 8001ad6:	e0c3      	b.n	8001c60 <__aeabi_dsub+0x370>
 8001ad8:	1e50      	subs	r0, r2, #1
 8001ada:	2a01      	cmp	r2, #1
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x1f0>
 8001ade:	e1a8      	b.n	8001e32 <__aeabi_dsub+0x542>
 8001ae0:	4c59      	ldr	r4, [pc, #356]	; (8001c48 <__aeabi_dsub+0x358>)
 8001ae2:	42a2      	cmp	r2, r4
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x1f8>
 8001ae6:	e087      	b.n	8001bf8 <__aeabi_dsub+0x308>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	e736      	b.n	800195a <__aeabi_dsub+0x6a>
 8001aec:	2201      	movs	r2, #1
 8001aee:	4056      	eors	r6, r2
 8001af0:	46b3      	mov	fp, r6
 8001af2:	42b5      	cmp	r5, r6
 8001af4:	d000      	beq.n	8001af8 <__aeabi_dsub+0x208>
 8001af6:	e721      	b.n	800193c <__aeabi_dsub+0x4c>
 8001af8:	4a55      	ldr	r2, [pc, #340]	; (8001c50 <__aeabi_dsub+0x360>)
 8001afa:	4442      	add	r2, r8
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x212>
 8001b00:	e0b5      	b.n	8001c6e <__aeabi_dsub+0x37e>
 8001b02:	4642      	mov	r2, r8
 8001b04:	4644      	mov	r4, r8
 8001b06:	1a82      	subs	r2, r0, r2
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x21e>
 8001b0c:	e138      	b.n	8001d80 <__aeabi_dsub+0x490>
 8001b0e:	4e4e      	ldr	r6, [pc, #312]	; (8001c48 <__aeabi_dsub+0x358>)
 8001b10:	42b0      	cmp	r0, r6
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x226>
 8001b14:	e1de      	b.n	8001ed4 <__aeabi_dsub+0x5e4>
 8001b16:	2680      	movs	r6, #128	; 0x80
 8001b18:	4664      	mov	r4, ip
 8001b1a:	0436      	lsls	r6, r6, #16
 8001b1c:	4334      	orrs	r4, r6
 8001b1e:	46a4      	mov	ip, r4
 8001b20:	2a38      	cmp	r2, #56	; 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x236>
 8001b24:	e196      	b.n	8001e54 <__aeabi_dsub+0x564>
 8001b26:	2a1f      	cmp	r2, #31
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x23c>
 8001b2a:	e224      	b.n	8001f76 <__aeabi_dsub+0x686>
 8001b2c:	2620      	movs	r6, #32
 8001b2e:	1ab4      	subs	r4, r6, r2
 8001b30:	46a2      	mov	sl, r4
 8001b32:	4664      	mov	r4, ip
 8001b34:	4656      	mov	r6, sl
 8001b36:	40b4      	lsls	r4, r6
 8001b38:	46a1      	mov	r9, r4
 8001b3a:	001c      	movs	r4, r3
 8001b3c:	464e      	mov	r6, r9
 8001b3e:	40d4      	lsrs	r4, r2
 8001b40:	4326      	orrs	r6, r4
 8001b42:	0034      	movs	r4, r6
 8001b44:	4656      	mov	r6, sl
 8001b46:	40b3      	lsls	r3, r6
 8001b48:	1e5e      	subs	r6, r3, #1
 8001b4a:	41b3      	sbcs	r3, r6
 8001b4c:	431c      	orrs	r4, r3
 8001b4e:	4663      	mov	r3, ip
 8001b50:	40d3      	lsrs	r3, r2
 8001b52:	18c9      	adds	r1, r1, r3
 8001b54:	19e4      	adds	r4, r4, r7
 8001b56:	42bc      	cmp	r4, r7
 8001b58:	41bf      	sbcs	r7, r7
 8001b5a:	427f      	negs	r7, r7
 8001b5c:	46b9      	mov	r9, r7
 8001b5e:	4680      	mov	r8, r0
 8001b60:	4489      	add	r9, r1
 8001b62:	e0d8      	b.n	8001d16 <__aeabi_dsub+0x426>
 8001b64:	4640      	mov	r0, r8
 8001b66:	4c3b      	ldr	r4, [pc, #236]	; (8001c54 <__aeabi_dsub+0x364>)
 8001b68:	3001      	adds	r0, #1
 8001b6a:	4220      	tst	r0, r4
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dsub+0x280>
 8001b6e:	e0b4      	b.n	8001cda <__aeabi_dsub+0x3ea>
 8001b70:	4640      	mov	r0, r8
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_dsub+0x288>
 8001b76:	e144      	b.n	8001e02 <__aeabi_dsub+0x512>
 8001b78:	4660      	mov	r0, ip
 8001b7a:	4318      	orrs	r0, r3
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x290>
 8001b7e:	e190      	b.n	8001ea2 <__aeabi_dsub+0x5b2>
 8001b80:	0008      	movs	r0, r1
 8001b82:	4338      	orrs	r0, r7
 8001b84:	d000      	beq.n	8001b88 <__aeabi_dsub+0x298>
 8001b86:	e1aa      	b.n	8001ede <__aeabi_dsub+0x5ee>
 8001b88:	4661      	mov	r1, ip
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	0749      	lsls	r1, r1, #29
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	4661      	mov	r1, ip
 8001b92:	08cc      	lsrs	r4, r1, #3
 8001b94:	e027      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d061      	beq.n	8001c60 <__aeabi_dsub+0x370>
 8001b9c:	1e50      	subs	r0, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x2b4>
 8001ba2:	e139      	b.n	8001e18 <__aeabi_dsub+0x528>
 8001ba4:	42a2      	cmp	r2, r4
 8001ba6:	d027      	beq.n	8001bf8 <__aeabi_dsub+0x308>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	e75d      	b.n	8001a68 <__aeabi_dsub+0x178>
 8001bac:	0002      	movs	r2, r0
 8001bae:	391f      	subs	r1, #31
 8001bb0:	40ca      	lsrs	r2, r1
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x2d0>
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4098      	lsls	r0, r3
 8001bbe:	4304      	orrs	r4, r0
 8001bc0:	1e63      	subs	r3, r4, #1
 8001bc2:	419c      	sbcs	r4, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	4698      	mov	r8, r3
 8001bca:	430c      	orrs	r4, r1
 8001bcc:	0763      	lsls	r3, r4, #29
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_dsub+0x2e2>
 8001bd0:	e712      	b.n	80019f8 <__aeabi_dsub+0x108>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	464a      	mov	r2, r9
 8001bd6:	08e4      	lsrs	r4, r4, #3
 8001bd8:	075b      	lsls	r3, r3, #29
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	08d4      	lsrs	r4, r2, #3
 8001bde:	4642      	mov	r2, r8
 8001be0:	4919      	ldr	r1, [pc, #100]	; (8001c48 <__aeabi_dsub+0x358>)
 8001be2:	428a      	cmp	r2, r1
 8001be4:	d00e      	beq.n	8001c04 <__aeabi_dsub+0x314>
 8001be6:	0324      	lsls	r4, r4, #12
 8001be8:	0552      	lsls	r2, r2, #21
 8001bea:	0b24      	lsrs	r4, r4, #12
 8001bec:	0d52      	lsrs	r2, r2, #21
 8001bee:	e722      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e71e      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	4662      	mov	r2, ip
 8001bfc:	0752      	lsls	r2, r2, #29
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	4662      	mov	r2, ip
 8001c02:	08d4      	lsrs	r4, r2, #3
 8001c04:	001a      	movs	r2, r3
 8001c06:	4322      	orrs	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x31c>
 8001c0a:	e1fc      	b.n	8002006 <__aeabi_dsub+0x716>
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	4314      	orrs	r4, r2
 8001c12:	0324      	lsls	r4, r4, #12
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <__aeabi_dsub+0x358>)
 8001c16:	0b24      	lsrs	r4, r4, #12
 8001c18:	e70d      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001c1a:	0020      	movs	r0, r4
 8001c1c:	f000 fb74 	bl	8002308 <__clzsi2>
 8001c20:	0001      	movs	r1, r0
 8001c22:	3118      	adds	r1, #24
 8001c24:	291f      	cmp	r1, #31
 8001c26:	dc00      	bgt.n	8001c2a <__aeabi_dsub+0x33a>
 8001c28:	e6c4      	b.n	80019b4 <__aeabi_dsub+0xc4>
 8001c2a:	3808      	subs	r0, #8
 8001c2c:	4084      	lsls	r4, r0
 8001c2e:	4643      	mov	r3, r8
 8001c30:	0020      	movs	r0, r4
 8001c32:	2400      	movs	r4, #0
 8001c34:	4588      	cmp	r8, r1
 8001c36:	dc00      	bgt.n	8001c3a <__aeabi_dsub+0x34a>
 8001c38:	e6c8      	b.n	80019cc <__aeabi_dsub+0xdc>
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__aeabi_dsub+0x35c>)
 8001c3c:	1a5b      	subs	r3, r3, r1
 8001c3e:	4010      	ands	r0, r2
 8001c40:	4698      	mov	r8, r3
 8001c42:	4681      	mov	r9, r0
 8001c44:	e6d6      	b.n	80019f4 <__aeabi_dsub+0x104>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	ff7fffff 	.word	0xff7fffff
 8001c50:	fffff801 	.word	0xfffff801
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	430f      	orrs	r7, r1
 8001c5a:	1e7a      	subs	r2, r7, #1
 8001c5c:	4197      	sbcs	r7, r2
 8001c5e:	e691      	b.n	8001984 <__aeabi_dsub+0x94>
 8001c60:	4661      	mov	r1, ip
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	0749      	lsls	r1, r1, #29
 8001c66:	430b      	orrs	r3, r1
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08cc      	lsrs	r4, r1, #3
 8001c6c:	e7b8      	b.n	8001be0 <__aeabi_dsub+0x2f0>
 8001c6e:	4640      	mov	r0, r8
 8001c70:	4cd3      	ldr	r4, [pc, #844]	; (8001fc0 <__aeabi_dsub+0x6d0>)
 8001c72:	3001      	adds	r0, #1
 8001c74:	4220      	tst	r0, r4
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dsub+0x38a>
 8001c78:	e0a2      	b.n	8001dc0 <__aeabi_dsub+0x4d0>
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x392>
 8001c80:	e101      	b.n	8001e86 <__aeabi_dsub+0x596>
 8001c82:	4660      	mov	r0, ip
 8001c84:	4318      	orrs	r0, r3
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x39a>
 8001c88:	e15e      	b.n	8001f48 <__aeabi_dsub+0x658>
 8001c8a:	0008      	movs	r0, r1
 8001c8c:	4338      	orrs	r0, r7
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_dsub+0x3a2>
 8001c90:	e15f      	b.n	8001f52 <__aeabi_dsub+0x662>
 8001c92:	4661      	mov	r1, ip
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	0749      	lsls	r1, r1, #29
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	4661      	mov	r1, ip
 8001c9c:	08cc      	lsrs	r4, r1, #3
 8001c9e:	e7a2      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001ca0:	4dc8      	ldr	r5, [pc, #800]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x3b8>
 8001ca6:	e0cf      	b.n	8001e48 <__aeabi_dsub+0x558>
 8001ca8:	2580      	movs	r5, #128	; 0x80
 8001caa:	4664      	mov	r4, ip
 8001cac:	042d      	lsls	r5, r5, #16
 8001cae:	432c      	orrs	r4, r5
 8001cb0:	46a4      	mov	ip, r4
 8001cb2:	2a38      	cmp	r2, #56	; 0x38
 8001cb4:	dc56      	bgt.n	8001d64 <__aeabi_dsub+0x474>
 8001cb6:	2a1f      	cmp	r2, #31
 8001cb8:	dd00      	ble.n	8001cbc <__aeabi_dsub+0x3cc>
 8001cba:	e0d1      	b.n	8001e60 <__aeabi_dsub+0x570>
 8001cbc:	2520      	movs	r5, #32
 8001cbe:	001e      	movs	r6, r3
 8001cc0:	1aad      	subs	r5, r5, r2
 8001cc2:	4664      	mov	r4, ip
 8001cc4:	40ab      	lsls	r3, r5
 8001cc6:	40ac      	lsls	r4, r5
 8001cc8:	40d6      	lsrs	r6, r2
 8001cca:	1e5d      	subs	r5, r3, #1
 8001ccc:	41ab      	sbcs	r3, r5
 8001cce:	4334      	orrs	r4, r6
 8001cd0:	4323      	orrs	r3, r4
 8001cd2:	4664      	mov	r4, ip
 8001cd4:	40d4      	lsrs	r4, r2
 8001cd6:	1b09      	subs	r1, r1, r4
 8001cd8:	e049      	b.n	8001d6e <__aeabi_dsub+0x47e>
 8001cda:	4660      	mov	r0, ip
 8001cdc:	1bdc      	subs	r4, r3, r7
 8001cde:	1a46      	subs	r6, r0, r1
 8001ce0:	42a3      	cmp	r3, r4
 8001ce2:	4180      	sbcs	r0, r0
 8001ce4:	4240      	negs	r0, r0
 8001ce6:	4681      	mov	r9, r0
 8001ce8:	0030      	movs	r0, r6
 8001cea:	464e      	mov	r6, r9
 8001cec:	1b80      	subs	r0, r0, r6
 8001cee:	4681      	mov	r9, r0
 8001cf0:	0200      	lsls	r0, r0, #8
 8001cf2:	d476      	bmi.n	8001de2 <__aeabi_dsub+0x4f2>
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_dsub+0x40c>
 8001cfa:	e652      	b.n	80019a2 <__aeabi_dsub+0xb2>
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	2500      	movs	r5, #0
 8001d00:	e771      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001d02:	4339      	orrs	r1, r7
 8001d04:	000c      	movs	r4, r1
 8001d06:	1e62      	subs	r2, r4, #1
 8001d08:	4194      	sbcs	r4, r2
 8001d0a:	18e4      	adds	r4, r4, r3
 8001d0c:	429c      	cmp	r4, r3
 8001d0e:	419b      	sbcs	r3, r3
 8001d10:	425b      	negs	r3, r3
 8001d12:	4463      	add	r3, ip
 8001d14:	4699      	mov	r9, r3
 8001d16:	464b      	mov	r3, r9
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	d400      	bmi.n	8001d1e <__aeabi_dsub+0x42e>
 8001d1c:	e756      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	469c      	mov	ip, r3
 8001d22:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001d24:	44e0      	add	r8, ip
 8001d26:	4598      	cmp	r8, r3
 8001d28:	d038      	beq.n	8001d9c <__aeabi_dsub+0x4ac>
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	48a6      	ldr	r0, [pc, #664]	; (8001fc8 <__aeabi_dsub+0x6d8>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4003      	ands	r3, r0
 8001d32:	0018      	movs	r0, r3
 8001d34:	0863      	lsrs	r3, r4, #1
 8001d36:	4014      	ands	r4, r2
 8001d38:	431c      	orrs	r4, r3
 8001d3a:	07c3      	lsls	r3, r0, #31
 8001d3c:	431c      	orrs	r4, r3
 8001d3e:	0843      	lsrs	r3, r0, #1
 8001d40:	4699      	mov	r9, r3
 8001d42:	e657      	b.n	80019f4 <__aeabi_dsub+0x104>
 8001d44:	0010      	movs	r0, r2
 8001d46:	000e      	movs	r6, r1
 8001d48:	3820      	subs	r0, #32
 8001d4a:	40c6      	lsrs	r6, r0
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d004      	beq.n	8001d5a <__aeabi_dsub+0x46a>
 8001d50:	2040      	movs	r0, #64	; 0x40
 8001d52:	1a82      	subs	r2, r0, r2
 8001d54:	4091      	lsls	r1, r2
 8001d56:	430f      	orrs	r7, r1
 8001d58:	46b9      	mov	r9, r7
 8001d5a:	464f      	mov	r7, r9
 8001d5c:	1e7a      	subs	r2, r7, #1
 8001d5e:	4197      	sbcs	r7, r2
 8001d60:	4337      	orrs	r7, r6
 8001d62:	e60f      	b.n	8001984 <__aeabi_dsub+0x94>
 8001d64:	4662      	mov	r2, ip
 8001d66:	431a      	orrs	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	4193      	sbcs	r3, r2
 8001d6e:	1afc      	subs	r4, r7, r3
 8001d70:	42a7      	cmp	r7, r4
 8001d72:	41bf      	sbcs	r7, r7
 8001d74:	427f      	negs	r7, r7
 8001d76:	1bcb      	subs	r3, r1, r7
 8001d78:	4699      	mov	r9, r3
 8001d7a:	465d      	mov	r5, fp
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	e608      	b.n	8001992 <__aeabi_dsub+0xa2>
 8001d80:	4666      	mov	r6, ip
 8001d82:	431e      	orrs	r6, r3
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x498>
 8001d86:	e0be      	b.n	8001f06 <__aeabi_dsub+0x616>
 8001d88:	1e56      	subs	r6, r2, #1
 8001d8a:	2a01      	cmp	r2, #1
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x4a0>
 8001d8e:	e109      	b.n	8001fa4 <__aeabi_dsub+0x6b4>
 8001d90:	4c8c      	ldr	r4, [pc, #560]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001d92:	42a2      	cmp	r2, r4
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x4a8>
 8001d96:	e119      	b.n	8001fcc <__aeabi_dsub+0x6dc>
 8001d98:	0032      	movs	r2, r6
 8001d9a:	e6c1      	b.n	8001b20 <__aeabi_dsub+0x230>
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	2400      	movs	r4, #0
 8001da0:	2300      	movs	r3, #0
 8001da2:	e648      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001da4:	2020      	movs	r0, #32
 8001da6:	000c      	movs	r4, r1
 8001da8:	1a80      	subs	r0, r0, r2
 8001daa:	003e      	movs	r6, r7
 8001dac:	4087      	lsls	r7, r0
 8001dae:	4084      	lsls	r4, r0
 8001db0:	40d6      	lsrs	r6, r2
 8001db2:	1e78      	subs	r0, r7, #1
 8001db4:	4187      	sbcs	r7, r0
 8001db6:	40d1      	lsrs	r1, r2
 8001db8:	4334      	orrs	r4, r6
 8001dba:	433c      	orrs	r4, r7
 8001dbc:	448c      	add	ip, r1
 8001dbe:	e7a4      	b.n	8001d0a <__aeabi_dsub+0x41a>
 8001dc0:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001dc2:	4290      	cmp	r0, r2
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x4d8>
 8001dc6:	e0e9      	b.n	8001f9c <__aeabi_dsub+0x6ac>
 8001dc8:	19df      	adds	r7, r3, r7
 8001dca:	429f      	cmp	r7, r3
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	4461      	add	r1, ip
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	18c9      	adds	r1, r1, r3
 8001dd4:	07cc      	lsls	r4, r1, #31
 8001dd6:	087f      	lsrs	r7, r7, #1
 8001dd8:	084b      	lsrs	r3, r1, #1
 8001dda:	4699      	mov	r9, r3
 8001ddc:	4680      	mov	r8, r0
 8001dde:	433c      	orrs	r4, r7
 8001de0:	e6f4      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001de2:	1afc      	subs	r4, r7, r3
 8001de4:	42a7      	cmp	r7, r4
 8001de6:	41bf      	sbcs	r7, r7
 8001de8:	4663      	mov	r3, ip
 8001dea:	427f      	negs	r7, r7
 8001dec:	1ac9      	subs	r1, r1, r3
 8001dee:	1bcb      	subs	r3, r1, r7
 8001df0:	4699      	mov	r9, r3
 8001df2:	465d      	mov	r5, fp
 8001df4:	e5d5      	b.n	80019a2 <__aeabi_dsub+0xb2>
 8001df6:	08ff      	lsrs	r7, r7, #3
 8001df8:	074b      	lsls	r3, r1, #29
 8001dfa:	465d      	mov	r5, fp
 8001dfc:	433b      	orrs	r3, r7
 8001dfe:	08cc      	lsrs	r4, r1, #3
 8001e00:	e6ee      	b.n	8001be0 <__aeabi_dsub+0x2f0>
 8001e02:	4662      	mov	r2, ip
 8001e04:	431a      	orrs	r2, r3
 8001e06:	d000      	beq.n	8001e0a <__aeabi_dsub+0x51a>
 8001e08:	e082      	b.n	8001f10 <__aeabi_dsub+0x620>
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	433b      	orrs	r3, r7
 8001e0e:	d11b      	bne.n	8001e48 <__aeabi_dsub+0x558>
 8001e10:	2480      	movs	r4, #128	; 0x80
 8001e12:	2500      	movs	r5, #0
 8001e14:	0324      	lsls	r4, r4, #12
 8001e16:	e6f9      	b.n	8001c0c <__aeabi_dsub+0x31c>
 8001e18:	19dc      	adds	r4, r3, r7
 8001e1a:	429c      	cmp	r4, r3
 8001e1c:	419b      	sbcs	r3, r3
 8001e1e:	4461      	add	r1, ip
 8001e20:	4689      	mov	r9, r1
 8001e22:	425b      	negs	r3, r3
 8001e24:	4499      	add	r9, r3
 8001e26:	464b      	mov	r3, r9
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	d444      	bmi.n	8001eb6 <__aeabi_dsub+0x5c6>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4698      	mov	r8, r3
 8001e30:	e6cc      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001e32:	1bdc      	subs	r4, r3, r7
 8001e34:	4662      	mov	r2, ip
 8001e36:	42a3      	cmp	r3, r4
 8001e38:	419b      	sbcs	r3, r3
 8001e3a:	1a51      	subs	r1, r2, r1
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	4699      	mov	r9, r3
 8001e42:	2301      	movs	r3, #1
 8001e44:	4698      	mov	r8, r3
 8001e46:	e5a4      	b.n	8001992 <__aeabi_dsub+0xa2>
 8001e48:	08ff      	lsrs	r7, r7, #3
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	465d      	mov	r5, fp
 8001e4e:	433b      	orrs	r3, r7
 8001e50:	08cc      	lsrs	r4, r1, #3
 8001e52:	e6d7      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001e54:	4662      	mov	r2, ip
 8001e56:	431a      	orrs	r2, r3
 8001e58:	0014      	movs	r4, r2
 8001e5a:	1e63      	subs	r3, r4, #1
 8001e5c:	419c      	sbcs	r4, r3
 8001e5e:	e679      	b.n	8001b54 <__aeabi_dsub+0x264>
 8001e60:	0015      	movs	r5, r2
 8001e62:	4664      	mov	r4, ip
 8001e64:	3d20      	subs	r5, #32
 8001e66:	40ec      	lsrs	r4, r5
 8001e68:	46a0      	mov	r8, r4
 8001e6a:	2a20      	cmp	r2, #32
 8001e6c:	d005      	beq.n	8001e7a <__aeabi_dsub+0x58a>
 8001e6e:	2540      	movs	r5, #64	; 0x40
 8001e70:	4664      	mov	r4, ip
 8001e72:	1aaa      	subs	r2, r5, r2
 8001e74:	4094      	lsls	r4, r2
 8001e76:	4323      	orrs	r3, r4
 8001e78:	469a      	mov	sl, r3
 8001e7a:	4654      	mov	r4, sl
 8001e7c:	1e63      	subs	r3, r4, #1
 8001e7e:	419c      	sbcs	r4, r3
 8001e80:	4643      	mov	r3, r8
 8001e82:	4323      	orrs	r3, r4
 8001e84:	e773      	b.n	8001d6e <__aeabi_dsub+0x47e>
 8001e86:	4662      	mov	r2, ip
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	d023      	beq.n	8001ed4 <__aeabi_dsub+0x5e4>
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	433a      	orrs	r2, r7
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x5a4>
 8001e92:	e0a0      	b.n	8001fd6 <__aeabi_dsub+0x6e6>
 8001e94:	4662      	mov	r2, ip
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	4662      	mov	r2, ip
 8001e9e:	08d4      	lsrs	r4, r2, #3
 8001ea0:	e6b0      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x5ba>
 8001ea8:	e728      	b.n	8001cfc <__aeabi_dsub+0x40c>
 8001eaa:	08ff      	lsrs	r7, r7, #3
 8001eac:	074b      	lsls	r3, r1, #29
 8001eae:	465d      	mov	r5, fp
 8001eb0:	433b      	orrs	r3, r7
 8001eb2:	08cc      	lsrs	r4, r1, #3
 8001eb4:	e697      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	4698      	mov	r8, r3
 8001eba:	e736      	b.n	8001d2a <__aeabi_dsub+0x43a>
 8001ebc:	1afc      	subs	r4, r7, r3
 8001ebe:	42a7      	cmp	r7, r4
 8001ec0:	41bf      	sbcs	r7, r7
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	427f      	negs	r7, r7
 8001ec6:	1ac9      	subs	r1, r1, r3
 8001ec8:	1bcb      	subs	r3, r1, r7
 8001eca:	4699      	mov	r9, r3
 8001ecc:	2301      	movs	r3, #1
 8001ece:	465d      	mov	r5, fp
 8001ed0:	4698      	mov	r8, r3
 8001ed2:	e55e      	b.n	8001992 <__aeabi_dsub+0xa2>
 8001ed4:	074b      	lsls	r3, r1, #29
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	433b      	orrs	r3, r7
 8001eda:	08cc      	lsrs	r4, r1, #3
 8001edc:	e692      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001ede:	1bdc      	subs	r4, r3, r7
 8001ee0:	4660      	mov	r0, ip
 8001ee2:	42a3      	cmp	r3, r4
 8001ee4:	41b6      	sbcs	r6, r6
 8001ee6:	1a40      	subs	r0, r0, r1
 8001ee8:	4276      	negs	r6, r6
 8001eea:	1b80      	subs	r0, r0, r6
 8001eec:	4681      	mov	r9, r0
 8001eee:	0200      	lsls	r0, r0, #8
 8001ef0:	d560      	bpl.n	8001fb4 <__aeabi_dsub+0x6c4>
 8001ef2:	1afc      	subs	r4, r7, r3
 8001ef4:	42a7      	cmp	r7, r4
 8001ef6:	41bf      	sbcs	r7, r7
 8001ef8:	4663      	mov	r3, ip
 8001efa:	427f      	negs	r7, r7
 8001efc:	1ac9      	subs	r1, r1, r3
 8001efe:	1bcb      	subs	r3, r1, r7
 8001f00:	4699      	mov	r9, r3
 8001f02:	465d      	mov	r5, fp
 8001f04:	e576      	b.n	80019f4 <__aeabi_dsub+0x104>
 8001f06:	08ff      	lsrs	r7, r7, #3
 8001f08:	074b      	lsls	r3, r1, #29
 8001f0a:	433b      	orrs	r3, r7
 8001f0c:	08cc      	lsrs	r4, r1, #3
 8001f0e:	e667      	b.n	8001be0 <__aeabi_dsub+0x2f0>
 8001f10:	000a      	movs	r2, r1
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	433a      	orrs	r2, r7
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x62a>
 8001f18:	e66f      	b.n	8001bfa <__aeabi_dsub+0x30a>
 8001f1a:	4662      	mov	r2, ip
 8001f1c:	0752      	lsls	r2, r2, #29
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	4662      	mov	r2, ip
 8001f22:	08d4      	lsrs	r4, r2, #3
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	0312      	lsls	r2, r2, #12
 8001f28:	4214      	tst	r4, r2
 8001f2a:	d007      	beq.n	8001f3c <__aeabi_dsub+0x64c>
 8001f2c:	08c8      	lsrs	r0, r1, #3
 8001f2e:	4210      	tst	r0, r2
 8001f30:	d104      	bne.n	8001f3c <__aeabi_dsub+0x64c>
 8001f32:	465d      	mov	r5, fp
 8001f34:	0004      	movs	r4, r0
 8001f36:	08fb      	lsrs	r3, r7, #3
 8001f38:	0749      	lsls	r1, r1, #29
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	0f5a      	lsrs	r2, r3, #29
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	0752      	lsls	r2, r2, #29
 8001f44:	4313      	orrs	r3, r2
 8001f46:	e65d      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001f48:	074b      	lsls	r3, r1, #29
 8001f4a:	08ff      	lsrs	r7, r7, #3
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	08cc      	lsrs	r4, r1, #3
 8001f50:	e649      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001f52:	19dc      	adds	r4, r3, r7
 8001f54:	429c      	cmp	r4, r3
 8001f56:	419b      	sbcs	r3, r3
 8001f58:	4461      	add	r1, ip
 8001f5a:	4689      	mov	r9, r1
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	4499      	add	r9, r3
 8001f60:	464b      	mov	r3, r9
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	d400      	bmi.n	8001f68 <__aeabi_dsub+0x678>
 8001f66:	e631      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001f68:	464a      	mov	r2, r9
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <__aeabi_dsub+0x6d8>)
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	2301      	movs	r3, #1
 8001f70:	4691      	mov	r9, r2
 8001f72:	4698      	mov	r8, r3
 8001f74:	e62a      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001f76:	0016      	movs	r6, r2
 8001f78:	4664      	mov	r4, ip
 8001f7a:	3e20      	subs	r6, #32
 8001f7c:	40f4      	lsrs	r4, r6
 8001f7e:	46a0      	mov	r8, r4
 8001f80:	2a20      	cmp	r2, #32
 8001f82:	d005      	beq.n	8001f90 <__aeabi_dsub+0x6a0>
 8001f84:	2640      	movs	r6, #64	; 0x40
 8001f86:	4664      	mov	r4, ip
 8001f88:	1ab2      	subs	r2, r6, r2
 8001f8a:	4094      	lsls	r4, r2
 8001f8c:	4323      	orrs	r3, r4
 8001f8e:	469a      	mov	sl, r3
 8001f90:	4654      	mov	r4, sl
 8001f92:	1e63      	subs	r3, r4, #1
 8001f94:	419c      	sbcs	r4, r3
 8001f96:	4643      	mov	r3, r8
 8001f98:	431c      	orrs	r4, r3
 8001f9a:	e5db      	b.n	8001b54 <__aeabi_dsub+0x264>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e548      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001fa4:	19dc      	adds	r4, r3, r7
 8001fa6:	42bc      	cmp	r4, r7
 8001fa8:	41bf      	sbcs	r7, r7
 8001faa:	4461      	add	r1, ip
 8001fac:	4689      	mov	r9, r1
 8001fae:	427f      	negs	r7, r7
 8001fb0:	44b9      	add	r9, r7
 8001fb2:	e738      	b.n	8001e26 <__aeabi_dsub+0x536>
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x6cc>
 8001fba:	e69f      	b.n	8001cfc <__aeabi_dsub+0x40c>
 8001fbc:	e606      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	000007fe 	.word	0x000007fe
 8001fc4:	000007ff 	.word	0x000007ff
 8001fc8:	ff7fffff 	.word	0xff7fffff
 8001fcc:	08ff      	lsrs	r7, r7, #3
 8001fce:	074b      	lsls	r3, r1, #29
 8001fd0:	433b      	orrs	r3, r7
 8001fd2:	08cc      	lsrs	r4, r1, #3
 8001fd4:	e616      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001fd6:	4662      	mov	r2, ip
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	0752      	lsls	r2, r2, #29
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	4662      	mov	r2, ip
 8001fe0:	08d4      	lsrs	r4, r2, #3
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d007      	beq.n	8001ffa <__aeabi_dsub+0x70a>
 8001fea:	08c8      	lsrs	r0, r1, #3
 8001fec:	4210      	tst	r0, r2
 8001fee:	d104      	bne.n	8001ffa <__aeabi_dsub+0x70a>
 8001ff0:	465d      	mov	r5, fp
 8001ff2:	0004      	movs	r4, r0
 8001ff4:	08fb      	lsrs	r3, r7, #3
 8001ff6:	0749      	lsls	r1, r1, #29
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	0f5a      	lsrs	r2, r3, #29
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	0752      	lsls	r2, r2, #29
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	4313      	orrs	r3, r2
 8002004:	e5fe      	b.n	8001c04 <__aeabi_dsub+0x314>
 8002006:	2300      	movs	r3, #0
 8002008:	4a01      	ldr	r2, [pc, #4]	; (8002010 <__aeabi_dsub+0x720>)
 800200a:	001c      	movs	r4, r3
 800200c:	e513      	b.n	8001a36 <__aeabi_dsub+0x146>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	000007ff 	.word	0x000007ff

08002014 <__aeabi_dcmpun>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	0005      	movs	r5, r0
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <__aeabi_dcmpun+0x38>)
 800201a:	031c      	lsls	r4, r3, #12
 800201c:	0016      	movs	r6, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	030a      	lsls	r2, r1, #12
 8002022:	0049      	lsls	r1, r1, #1
 8002024:	0b12      	lsrs	r2, r2, #12
 8002026:	0d49      	lsrs	r1, r1, #21
 8002028:	0b24      	lsrs	r4, r4, #12
 800202a:	0d5b      	lsrs	r3, r3, #21
 800202c:	4281      	cmp	r1, r0
 800202e:	d008      	beq.n	8002042 <__aeabi_dcmpun+0x2e>
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <__aeabi_dcmpun+0x38>)
 8002032:	2000      	movs	r0, #0
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <__aeabi_dcmpun+0x2c>
 8002038:	0020      	movs	r0, r4
 800203a:	4330      	orrs	r0, r6
 800203c:	1e43      	subs	r3, r0, #1
 800203e:	4198      	sbcs	r0, r3
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	2001      	movs	r0, #1
 8002044:	432a      	orrs	r2, r5
 8002046:	d1fb      	bne.n	8002040 <__aeabi_dcmpun+0x2c>
 8002048:	e7f2      	b.n	8002030 <__aeabi_dcmpun+0x1c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff

08002050 <__aeabi_d2iz>:
 8002050:	000a      	movs	r2, r1
 8002052:	b530      	push	{r4, r5, lr}
 8002054:	4c13      	ldr	r4, [pc, #76]	; (80020a4 <__aeabi_d2iz+0x54>)
 8002056:	0053      	lsls	r3, r2, #1
 8002058:	0309      	lsls	r1, r1, #12
 800205a:	0005      	movs	r5, r0
 800205c:	0b09      	lsrs	r1, r1, #12
 800205e:	2000      	movs	r0, #0
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	0fd2      	lsrs	r2, r2, #31
 8002064:	42a3      	cmp	r3, r4
 8002066:	dd04      	ble.n	8002072 <__aeabi_d2iz+0x22>
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <__aeabi_d2iz+0x58>)
 800206a:	4283      	cmp	r3, r0
 800206c:	dd02      	ble.n	8002074 <__aeabi_d2iz+0x24>
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <__aeabi_d2iz+0x5c>)
 8002070:	18d0      	adds	r0, r2, r3
 8002072:	bd30      	pop	{r4, r5, pc}
 8002074:	2080      	movs	r0, #128	; 0x80
 8002076:	0340      	lsls	r0, r0, #13
 8002078:	4301      	orrs	r1, r0
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <__aeabi_d2iz+0x60>)
 800207c:	1ac0      	subs	r0, r0, r3
 800207e:	281f      	cmp	r0, #31
 8002080:	dd08      	ble.n	8002094 <__aeabi_d2iz+0x44>
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <__aeabi_d2iz+0x64>)
 8002084:	1ac3      	subs	r3, r0, r3
 8002086:	40d9      	lsrs	r1, r3
 8002088:	000b      	movs	r3, r1
 800208a:	4258      	negs	r0, r3
 800208c:	2a00      	cmp	r2, #0
 800208e:	d1f0      	bne.n	8002072 <__aeabi_d2iz+0x22>
 8002090:	0018      	movs	r0, r3
 8002092:	e7ee      	b.n	8002072 <__aeabi_d2iz+0x22>
 8002094:	4c08      	ldr	r4, [pc, #32]	; (80020b8 <__aeabi_d2iz+0x68>)
 8002096:	40c5      	lsrs	r5, r0
 8002098:	46a4      	mov	ip, r4
 800209a:	4463      	add	r3, ip
 800209c:	4099      	lsls	r1, r3
 800209e:	000b      	movs	r3, r1
 80020a0:	432b      	orrs	r3, r5
 80020a2:	e7f2      	b.n	800208a <__aeabi_d2iz+0x3a>
 80020a4:	000003fe 	.word	0x000003fe
 80020a8:	0000041d 	.word	0x0000041d
 80020ac:	7fffffff 	.word	0x7fffffff
 80020b0:	00000433 	.word	0x00000433
 80020b4:	00000413 	.word	0x00000413
 80020b8:	fffffbed 	.word	0xfffffbed

080020bc <__aeabi_i2d>:
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	2800      	cmp	r0, #0
 80020c0:	d016      	beq.n	80020f0 <__aeabi_i2d+0x34>
 80020c2:	17c3      	asrs	r3, r0, #31
 80020c4:	18c5      	adds	r5, r0, r3
 80020c6:	405d      	eors	r5, r3
 80020c8:	0fc4      	lsrs	r4, r0, #31
 80020ca:	0028      	movs	r0, r5
 80020cc:	f000 f91c 	bl	8002308 <__clzsi2>
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <__aeabi_i2d+0x5c>)
 80020d2:	1a12      	subs	r2, r2, r0
 80020d4:	280a      	cmp	r0, #10
 80020d6:	dc16      	bgt.n	8002106 <__aeabi_i2d+0x4a>
 80020d8:	0003      	movs	r3, r0
 80020da:	002e      	movs	r6, r5
 80020dc:	3315      	adds	r3, #21
 80020de:	409e      	lsls	r6, r3
 80020e0:	230b      	movs	r3, #11
 80020e2:	1a18      	subs	r0, r3, r0
 80020e4:	40c5      	lsrs	r5, r0
 80020e6:	0552      	lsls	r2, r2, #21
 80020e8:	032d      	lsls	r5, r5, #12
 80020ea:	0b2d      	lsrs	r5, r5, #12
 80020ec:	0d53      	lsrs	r3, r2, #21
 80020ee:	e003      	b.n	80020f8 <__aeabi_i2d+0x3c>
 80020f0:	2400      	movs	r4, #0
 80020f2:	2300      	movs	r3, #0
 80020f4:	2500      	movs	r5, #0
 80020f6:	2600      	movs	r6, #0
 80020f8:	051b      	lsls	r3, r3, #20
 80020fa:	432b      	orrs	r3, r5
 80020fc:	07e4      	lsls	r4, r4, #31
 80020fe:	4323      	orrs	r3, r4
 8002100:	0030      	movs	r0, r6
 8002102:	0019      	movs	r1, r3
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	380b      	subs	r0, #11
 8002108:	4085      	lsls	r5, r0
 800210a:	0552      	lsls	r2, r2, #21
 800210c:	032d      	lsls	r5, r5, #12
 800210e:	2600      	movs	r6, #0
 8002110:	0b2d      	lsrs	r5, r5, #12
 8002112:	0d53      	lsrs	r3, r2, #21
 8002114:	e7f0      	b.n	80020f8 <__aeabi_i2d+0x3c>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	0000041e 	.word	0x0000041e

0800211c <__aeabi_ui2d>:
 800211c:	b510      	push	{r4, lr}
 800211e:	1e04      	subs	r4, r0, #0
 8002120:	d010      	beq.n	8002144 <__aeabi_ui2d+0x28>
 8002122:	f000 f8f1 	bl	8002308 <__clzsi2>
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <__aeabi_ui2d+0x48>)
 8002128:	1a1b      	subs	r3, r3, r0
 800212a:	280a      	cmp	r0, #10
 800212c:	dc11      	bgt.n	8002152 <__aeabi_ui2d+0x36>
 800212e:	220b      	movs	r2, #11
 8002130:	0021      	movs	r1, r4
 8002132:	1a12      	subs	r2, r2, r0
 8002134:	40d1      	lsrs	r1, r2
 8002136:	3015      	adds	r0, #21
 8002138:	030a      	lsls	r2, r1, #12
 800213a:	055b      	lsls	r3, r3, #21
 800213c:	4084      	lsls	r4, r0
 800213e:	0b12      	lsrs	r2, r2, #12
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	e001      	b.n	8002148 <__aeabi_ui2d+0x2c>
 8002144:	2300      	movs	r3, #0
 8002146:	2200      	movs	r2, #0
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	4313      	orrs	r3, r2
 800214c:	0020      	movs	r0, r4
 800214e:	0019      	movs	r1, r3
 8002150:	bd10      	pop	{r4, pc}
 8002152:	0022      	movs	r2, r4
 8002154:	380b      	subs	r0, #11
 8002156:	4082      	lsls	r2, r0
 8002158:	055b      	lsls	r3, r3, #21
 800215a:	0312      	lsls	r2, r2, #12
 800215c:	2400      	movs	r4, #0
 800215e:	0b12      	lsrs	r2, r2, #12
 8002160:	0d5b      	lsrs	r3, r3, #21
 8002162:	e7f1      	b.n	8002148 <__aeabi_ui2d+0x2c>
 8002164:	0000041e 	.word	0x0000041e

08002168 <__aeabi_f2d>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	0043      	lsls	r3, r0, #1
 800216c:	0246      	lsls	r6, r0, #9
 800216e:	0fc4      	lsrs	r4, r0, #31
 8002170:	20fe      	movs	r0, #254	; 0xfe
 8002172:	0e1b      	lsrs	r3, r3, #24
 8002174:	1c59      	adds	r1, r3, #1
 8002176:	0a75      	lsrs	r5, r6, #9
 8002178:	4208      	tst	r0, r1
 800217a:	d00c      	beq.n	8002196 <__aeabi_f2d+0x2e>
 800217c:	22e0      	movs	r2, #224	; 0xe0
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4694      	mov	ip, r2
 8002182:	076d      	lsls	r5, r5, #29
 8002184:	0b36      	lsrs	r6, r6, #12
 8002186:	4463      	add	r3, ip
 8002188:	051b      	lsls	r3, r3, #20
 800218a:	4333      	orrs	r3, r6
 800218c:	07e4      	lsls	r4, r4, #31
 800218e:	4323      	orrs	r3, r4
 8002190:	0028      	movs	r0, r5
 8002192:	0019      	movs	r1, r3
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	2b00      	cmp	r3, #0
 8002198:	d114      	bne.n	80021c4 <__aeabi_f2d+0x5c>
 800219a:	2d00      	cmp	r5, #0
 800219c:	d01b      	beq.n	80021d6 <__aeabi_f2d+0x6e>
 800219e:	0028      	movs	r0, r5
 80021a0:	f000 f8b2 	bl	8002308 <__clzsi2>
 80021a4:	280a      	cmp	r0, #10
 80021a6:	dc1c      	bgt.n	80021e2 <__aeabi_f2d+0x7a>
 80021a8:	230b      	movs	r3, #11
 80021aa:	002e      	movs	r6, r5
 80021ac:	1a1b      	subs	r3, r3, r0
 80021ae:	40de      	lsrs	r6, r3
 80021b0:	0003      	movs	r3, r0
 80021b2:	3315      	adds	r3, #21
 80021b4:	409d      	lsls	r5, r3
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <__aeabi_f2d+0x88>)
 80021b8:	0336      	lsls	r6, r6, #12
 80021ba:	1a12      	subs	r2, r2, r0
 80021bc:	0552      	lsls	r2, r2, #21
 80021be:	0b36      	lsrs	r6, r6, #12
 80021c0:	0d53      	lsrs	r3, r2, #21
 80021c2:	e7e1      	b.n	8002188 <__aeabi_f2d+0x20>
 80021c4:	2d00      	cmp	r5, #0
 80021c6:	d009      	beq.n	80021dc <__aeabi_f2d+0x74>
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	0b36      	lsrs	r6, r6, #12
 80021cc:	0312      	lsls	r2, r2, #12
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <__aeabi_f2d+0x8c>)
 80021d0:	076d      	lsls	r5, r5, #29
 80021d2:	4316      	orrs	r6, r2
 80021d4:	e7d8      	b.n	8002188 <__aeabi_f2d+0x20>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2600      	movs	r6, #0
 80021da:	e7d5      	b.n	8002188 <__aeabi_f2d+0x20>
 80021dc:	2600      	movs	r6, #0
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <__aeabi_f2d+0x8c>)
 80021e0:	e7d2      	b.n	8002188 <__aeabi_f2d+0x20>
 80021e2:	0003      	movs	r3, r0
 80021e4:	3b0b      	subs	r3, #11
 80021e6:	409d      	lsls	r5, r3
 80021e8:	002e      	movs	r6, r5
 80021ea:	2500      	movs	r5, #0
 80021ec:	e7e3      	b.n	80021b6 <__aeabi_f2d+0x4e>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	00000389 	.word	0x00000389
 80021f4:	000007ff 	.word	0x000007ff

080021f8 <__aeabi_d2f>:
 80021f8:	0002      	movs	r2, r0
 80021fa:	004b      	lsls	r3, r1, #1
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	0d5b      	lsrs	r3, r3, #21
 8002200:	030c      	lsls	r4, r1, #12
 8002202:	4e3d      	ldr	r6, [pc, #244]	; (80022f8 <__aeabi_d2f+0x100>)
 8002204:	0a64      	lsrs	r4, r4, #9
 8002206:	0f40      	lsrs	r0, r0, #29
 8002208:	1c5f      	adds	r7, r3, #1
 800220a:	0fc9      	lsrs	r1, r1, #31
 800220c:	4304      	orrs	r4, r0
 800220e:	00d5      	lsls	r5, r2, #3
 8002210:	4237      	tst	r7, r6
 8002212:	d00a      	beq.n	800222a <__aeabi_d2f+0x32>
 8002214:	4839      	ldr	r0, [pc, #228]	; (80022fc <__aeabi_d2f+0x104>)
 8002216:	181e      	adds	r6, r3, r0
 8002218:	2efe      	cmp	r6, #254	; 0xfe
 800221a:	dd16      	ble.n	800224a <__aeabi_d2f+0x52>
 800221c:	20ff      	movs	r0, #255	; 0xff
 800221e:	2400      	movs	r4, #0
 8002220:	05c0      	lsls	r0, r0, #23
 8002222:	4320      	orrs	r0, r4
 8002224:	07c9      	lsls	r1, r1, #31
 8002226:	4308      	orrs	r0, r1
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <__aeabi_d2f+0x44>
 800222e:	432c      	orrs	r4, r5
 8002230:	d026      	beq.n	8002280 <__aeabi_d2f+0x88>
 8002232:	2205      	movs	r2, #5
 8002234:	0192      	lsls	r2, r2, #6
 8002236:	0a54      	lsrs	r4, r2, #9
 8002238:	b2d8      	uxtb	r0, r3
 800223a:	e7f1      	b.n	8002220 <__aeabi_d2f+0x28>
 800223c:	4325      	orrs	r5, r4
 800223e:	d0ed      	beq.n	800221c <__aeabi_d2f+0x24>
 8002240:	2080      	movs	r0, #128	; 0x80
 8002242:	03c0      	lsls	r0, r0, #15
 8002244:	4304      	orrs	r4, r0
 8002246:	20ff      	movs	r0, #255	; 0xff
 8002248:	e7ea      	b.n	8002220 <__aeabi_d2f+0x28>
 800224a:	2e00      	cmp	r6, #0
 800224c:	dd1b      	ble.n	8002286 <__aeabi_d2f+0x8e>
 800224e:	0192      	lsls	r2, r2, #6
 8002250:	1e53      	subs	r3, r2, #1
 8002252:	419a      	sbcs	r2, r3
 8002254:	00e4      	lsls	r4, r4, #3
 8002256:	0f6d      	lsrs	r5, r5, #29
 8002258:	4322      	orrs	r2, r4
 800225a:	432a      	orrs	r2, r5
 800225c:	0753      	lsls	r3, r2, #29
 800225e:	d048      	beq.n	80022f2 <__aeabi_d2f+0xfa>
 8002260:	230f      	movs	r3, #15
 8002262:	4013      	ands	r3, r2
 8002264:	2b04      	cmp	r3, #4
 8002266:	d000      	beq.n	800226a <__aeabi_d2f+0x72>
 8002268:	3204      	adds	r2, #4
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	04db      	lsls	r3, r3, #19
 800226e:	4013      	ands	r3, r2
 8002270:	d03f      	beq.n	80022f2 <__aeabi_d2f+0xfa>
 8002272:	1c70      	adds	r0, r6, #1
 8002274:	2efe      	cmp	r6, #254	; 0xfe
 8002276:	d0d1      	beq.n	800221c <__aeabi_d2f+0x24>
 8002278:	0192      	lsls	r2, r2, #6
 800227a:	0a54      	lsrs	r4, r2, #9
 800227c:	b2c0      	uxtb	r0, r0
 800227e:	e7cf      	b.n	8002220 <__aeabi_d2f+0x28>
 8002280:	2000      	movs	r0, #0
 8002282:	2400      	movs	r4, #0
 8002284:	e7cc      	b.n	8002220 <__aeabi_d2f+0x28>
 8002286:	0032      	movs	r2, r6
 8002288:	3217      	adds	r2, #23
 800228a:	db22      	blt.n	80022d2 <__aeabi_d2f+0xda>
 800228c:	2080      	movs	r0, #128	; 0x80
 800228e:	0400      	lsls	r0, r0, #16
 8002290:	4320      	orrs	r0, r4
 8002292:	241e      	movs	r4, #30
 8002294:	1ba4      	subs	r4, r4, r6
 8002296:	2c1f      	cmp	r4, #31
 8002298:	dd1d      	ble.n	80022d6 <__aeabi_d2f+0xde>
 800229a:	2202      	movs	r2, #2
 800229c:	4252      	negs	r2, r2
 800229e:	1b96      	subs	r6, r2, r6
 80022a0:	0002      	movs	r2, r0
 80022a2:	40f2      	lsrs	r2, r6
 80022a4:	0016      	movs	r6, r2
 80022a6:	2c20      	cmp	r4, #32
 80022a8:	d004      	beq.n	80022b4 <__aeabi_d2f+0xbc>
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <__aeabi_d2f+0x108>)
 80022ac:	4694      	mov	ip, r2
 80022ae:	4463      	add	r3, ip
 80022b0:	4098      	lsls	r0, r3
 80022b2:	4305      	orrs	r5, r0
 80022b4:	002a      	movs	r2, r5
 80022b6:	1e53      	subs	r3, r2, #1
 80022b8:	419a      	sbcs	r2, r3
 80022ba:	4332      	orrs	r2, r6
 80022bc:	2600      	movs	r6, #0
 80022be:	0753      	lsls	r3, r2, #29
 80022c0:	d1ce      	bne.n	8002260 <__aeabi_d2f+0x68>
 80022c2:	2480      	movs	r4, #128	; 0x80
 80022c4:	0013      	movs	r3, r2
 80022c6:	04e4      	lsls	r4, r4, #19
 80022c8:	2001      	movs	r0, #1
 80022ca:	4023      	ands	r3, r4
 80022cc:	4222      	tst	r2, r4
 80022ce:	d1d3      	bne.n	8002278 <__aeabi_d2f+0x80>
 80022d0:	e7b0      	b.n	8002234 <__aeabi_d2f+0x3c>
 80022d2:	2300      	movs	r3, #0
 80022d4:	e7ad      	b.n	8002232 <__aeabi_d2f+0x3a>
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <__aeabi_d2f+0x10c>)
 80022d8:	4694      	mov	ip, r2
 80022da:	002a      	movs	r2, r5
 80022dc:	40e2      	lsrs	r2, r4
 80022de:	0014      	movs	r4, r2
 80022e0:	002a      	movs	r2, r5
 80022e2:	4463      	add	r3, ip
 80022e4:	409a      	lsls	r2, r3
 80022e6:	4098      	lsls	r0, r3
 80022e8:	1e55      	subs	r5, r2, #1
 80022ea:	41aa      	sbcs	r2, r5
 80022ec:	4302      	orrs	r2, r0
 80022ee:	4322      	orrs	r2, r4
 80022f0:	e7e4      	b.n	80022bc <__aeabi_d2f+0xc4>
 80022f2:	0033      	movs	r3, r6
 80022f4:	e79e      	b.n	8002234 <__aeabi_d2f+0x3c>
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	000007fe 	.word	0x000007fe
 80022fc:	fffffc80 	.word	0xfffffc80
 8002300:	fffffca2 	.word	0xfffffca2
 8002304:	fffffc82 	.word	0xfffffc82

08002308 <__clzsi2>:
 8002308:	211c      	movs	r1, #28
 800230a:	2301      	movs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4298      	cmp	r0, r3
 8002310:	d301      	bcc.n	8002316 <__clzsi2+0xe>
 8002312:	0c00      	lsrs	r0, r0, #16
 8002314:	3910      	subs	r1, #16
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	4298      	cmp	r0, r3
 800231a:	d301      	bcc.n	8002320 <__clzsi2+0x18>
 800231c:	0a00      	lsrs	r0, r0, #8
 800231e:	3908      	subs	r1, #8
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	4298      	cmp	r0, r3
 8002324:	d301      	bcc.n	800232a <__clzsi2+0x22>
 8002326:	0900      	lsrs	r0, r0, #4
 8002328:	3904      	subs	r1, #4
 800232a:	a202      	add	r2, pc, #8	; (adr r2, 8002334 <__clzsi2+0x2c>)
 800232c:	5c10      	ldrb	r0, [r2, r0]
 800232e:	1840      	adds	r0, r0, r1
 8002330:	4770      	bx	lr
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	02020304 	.word	0x02020304
 8002338:	01010101 	.word	0x01010101
	...

08002344 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	000a      	movs	r2, r1
 800234e:	1cfb      	adds	r3, r7, #3
 8002350:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	1cfa      	adds	r2, r7, #3
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set HIGH
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	481b      	ldr	r0, [pc, #108]	; (80023e4 <motor_wheel_init+0xa0>)
 8002378:	2200      	movs	r2, #0
 800237a:	0019      	movs	r1, r3
 800237c:	f002 fe97 	bl	80050ae <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <motor_wheel_init+0xa0>)
 800238a:	2201      	movs	r2, #1
 800238c:	2101      	movs	r1, #1
 800238e:	0018      	movs	r0, r3
 8002390:	f002 fe8d 	bl	80050ae <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
		str->inverse_q = 1;
	}
}
 8002394:	e021      	b.n	80023da <motor_wheel_init+0x96>
	else if (str->id == 2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d109      	bne.n	80023b2 <motor_wheel_init+0x6e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <motor_wheel_init+0xa0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	2102      	movs	r1, #2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f002 fe82 	bl	80050ae <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	70da      	strb	r2, [r3, #3]
}
 80023b0:	e013      	b.n	80023da <motor_wheel_init+0x96>
	else if (str->id == 3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d106      	bne.n	80023c8 <motor_wheel_init+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <motor_wheel_init+0xa0>)
 80023bc:	2201      	movs	r2, #1
 80023be:	2101      	movs	r1, #1
 80023c0:	0018      	movs	r0, r3
 80023c2:	f002 fe74 	bl	80050ae <HAL_GPIO_WritePin>
}
 80023c6:	e008      	b.n	80023da <motor_wheel_init+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <motor_wheel_init+0xa0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	2102      	movs	r1, #2
 80023ce:	0018      	movs	r0, r3
 80023d0:	f002 fe6d 	bl	80050ae <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	70da      	strb	r2, [r3, #3]
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	48000800 	.word	0x48000800

080023e8 <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, int LPU) // PWM Velocity Control
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]

	uint8_t throttle = abs(LPU);//fabs(LPU) * 100;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	17d9      	asrs	r1, r3, #31
 80023f8:	185a      	adds	r2, r3, r1
 80023fa:	404a      	eors	r2, r1
 80023fc:	2117      	movs	r1, #23
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	701a      	strb	r2, [r3, #0]
	if (abs(LPU) > 100)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	17da      	asrs	r2, r3, #31
 8002406:	189b      	adds	r3, r3, r2
 8002408:	4053      	eors	r3, r2
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	dc2a      	bgt.n	8002464 <motorPWM_pulse+0x7c>
	{
		return;
	}

	if (str->id == 1)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <motorPWM_pulse+0x3a>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	187a      	adds	r2, r7, r1
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
 8002420:	e021      	b.n	8002466 <motorPWM_pulse+0x7e>
	else if (str->id == 2)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d106      	bne.n	8002438 <motorPWM_pulse+0x50>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2217      	movs	r2, #23
 8002430:	18ba      	adds	r2, r7, r2
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
 8002436:	e016      	b.n	8002466 <motorPWM_pulse+0x7e>
	else if (str->id == 3)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d106      	bne.n	800244e <motorPWM_pulse+0x66>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2217      	movs	r2, #23
 8002446:	18ba      	adds	r2, r7, r2
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	63da      	str	r2, [r3, #60]	; 0x3c
 800244c:	e00b      	b.n	8002466 <motorPWM_pulse+0x7e>
	else if (str->id == 4)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d107      	bne.n	8002466 <motorPWM_pulse+0x7e>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2217      	movs	r2, #23
 800245c:	18ba      	adds	r2, r7, r2
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
 8002462:	e000      	b.n	8002466 <motorPWM_pulse+0x7e>
		return;
 8002464:	46c0      	nop			; (mov r8, r8)
};
 8002466:	46bd      	mov	sp, r7
 8002468:	b006      	add	sp, #24
 800246a:	bd80      	pop	{r7, pc}

0800246c <motor_DIR>:
  else if (str->id == 4)
	  __HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};

void motor_DIR(Motor_Wheel *str, const uint8_t Direction) // Send direction change command
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	000a      	movs	r2, r1
 8002476:	1cfb      	adds	r3, r7, #3
 8002478:	701a      	strb	r2, [r3, #0]

	str->dir_q = Direction;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1cfa      	adds	r2, r7, #3
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	705a      	strb	r2, [r3, #1]
	// 0 = Forward
	// 1 = backward


  // DIRECTION PIN
  if (str->dir_q == 1) // Backward
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d115      	bne.n	80024b6 <motor_DIR+0x4a>
  {
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <motor_DIR+0x2e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d106      	bne.n	80024a8 <motor_DIR+0x3c>
	  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <motor_DIR+0x80>)
 800249c:	2200      	movs	r2, #0
 800249e:	2101      	movs	r1, #1
 80024a0:	0018      	movs	r0, r3
 80024a2:	f002 fe04 	bl	80050ae <HAL_GPIO_WritePin>
 80024a6:	e01c      	b.n	80024e2 <motor_DIR+0x76>
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set HIGH
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <motor_DIR+0x80>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	2102      	movs	r1, #2
 80024ae:	0018      	movs	r0, r3
 80024b0:	f002 fdfd 	bl	80050ae <HAL_GPIO_WritePin>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
  }
}
 80024b4:	e015      	b.n	80024e2 <motor_DIR+0x76>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d003      	beq.n	80024c6 <motor_DIR+0x5a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d106      	bne.n	80024d4 <motor_DIR+0x68>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <motor_DIR+0x80>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	2101      	movs	r1, #1
 80024cc:	0018      	movs	r0, r3
 80024ce:	f002 fdee 	bl	80050ae <HAL_GPIO_WritePin>
 80024d2:	e006      	b.n	80024e2 <motor_DIR+0x76>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <motor_DIR+0x80>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	2102      	movs	r1, #2
 80024da:	0018      	movs	r0, r3
 80024dc:	f002 fde7 	bl	80050ae <HAL_GPIO_WritePin>
}
 80024e0:	e7ff      	b.n	80024e2 <motor_DIR+0x76>
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	48000800 	.word	0x48000800

080024f0 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	000a      	movs	r2, r1
 80024fa:	1cfb      	adds	r3, r7, #3
 80024fc:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	1cfa      	adds	r2, r7, #3
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	789b      	ldrb	r3, [r3, #2]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10a      	bne.n	8002524 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <motor_break+0x4c>)
 8002514:	2201      	movs	r2, #1
 8002516:	0019      	movs	r1, r3
 8002518:	f002 fdc9 	bl	80050ae <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 8002522:	e006      	b.n	8002532 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <motor_break+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	0019      	movs	r1, r3
 800252e:	f002 fdbe 	bl	80050ae <HAL_GPIO_WritePin>
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	48000800 	.word	0x48000800

08002540 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	0008      	movs	r0, r1
 800254a:	0011      	movs	r1, r2
 800254c:	1cfb      	adds	r3, r7, #3
 800254e:	1c02      	adds	r2, r0, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	1cbb      	adds	r3, r7, #2
 8002554:	1c0a      	adds	r2, r1, #0
 8002556:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1cfa      	adds	r2, r7, #3
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1cba      	adds	r2, r7, #2
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	705a      	strb	r2, [r3, #1]
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <linear_motor_set_target>:


void linear_motor_set_target(Linear_Motor *str, int32_t target)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	if (target > POSITION_MAX)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <linear_motor_set_target+0x34>)
 8002592:	4293      	cmp	r3, r2
 8002594:	dd02      	ble.n	800259c <linear_motor_set_target+0x18>
	{
		target = POSITION_MAX;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <linear_motor_set_target+0x34>)
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	e005      	b.n	80025a8 <linear_motor_set_target+0x24>
	}
	else if (target < POSITION_MIN)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <linear_motor_set_target+0x38>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	da01      	bge.n	80025a8 <linear_motor_set_target+0x24>
	{
		target = POSITION_MIN;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <linear_motor_set_target+0x38>)
 80025a6:	603b      	str	r3, [r7, #0]
	}
	str->target_position = target;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	609a      	str	r2, [r3, #8]
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	0000280a 	.word	0x0000280a
 80025bc:	ffffd7f6 	.word	0xffffd7f6

080025c0 <linear_motor_get_position>:


int32_t linear_motor_get_position(Linear_Motor *str)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	return str->current_position;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <linear_motor_pulse>:
  * @param  timer_handle timer handle associated with linear motors
  * @param  counter_handle counter pointer to track number of pulses sent via interupt callback
  * @retval if(errors_occurred)
  */
uint8_t linear_motor_pulse(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	if (str->id == 1 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <linear_motor_pulse+0x24>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	223e      	movs	r2, #62	; 0x3e
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d101      	bne.n	80025f8 <linear_motor_pulse+0x24>
	{
		return 1; // error occurred
 80025f4:	2301      	movs	r3, #1
 80025f6:	e075      	b.n	80026e4 <linear_motor_pulse+0x110>
	}
	else if (str->id == 2 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d107      	bne.n	8002610 <linear_motor_pulse+0x3c>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	223f      	movs	r2, #63	; 0x3f
 8002604:	5c9b      	ldrb	r3, [r3, r2]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d101      	bne.n	8002610 <linear_motor_pulse+0x3c>
	{
		return 1; // error occurred
 800260c:	2301      	movs	r3, #1
 800260e:	e069      	b.n	80026e4 <linear_motor_pulse+0x110>
	}
	uint32_t shift = abs(str->target_position - str->current_position);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	17da      	asrs	r2, r3, #31
 800261c:	189b      	adds	r3, r3, r2
 800261e:	4053      	eors	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
	if (shift == 0)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <linear_motor_pulse+0x58>
	{
		return 1;
 8002628:	2301      	movs	r3, #1
 800262a:	e05b      	b.n	80026e4 <linear_motor_pulse+0x110>
	}
	if (str->target_position - str->current_position > 0)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	dd03      	ble.n	8002642 <linear_motor_pulse+0x6e>
	{
		str->dir_q = 1;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	705a      	strb	r2, [r3, #1]
 8002640:	e002      	b.n	8002648 <linear_motor_pulse+0x74>
	}
	else
	{
		str->dir_q = 0;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	705a      	strb	r2, [r3, #1]
	}
	if (str->id == 1)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d120      	bne.n	8002692 <linear_motor_pulse+0xbe>
	{
		*counter_handle = shift;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
		// TODO: SET DIRECTION GPIO
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	001a      	movs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	789b      	ldrb	r3, [r3, #2]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	17da      	asrs	r2, r3, #31
 8002664:	189b      	adds	r3, r3, r2
 8002666:	4053      	eors	r3, r2
 8002668:	2b01      	cmp	r3, #1
 800266a:	d106      	bne.n	800267a <linear_motor_pulse+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <linear_motor_pulse+0x118>)
 800266e:	2201      	movs	r2, #1
 8002670:	2104      	movs	r1, #4
 8002672:	0018      	movs	r0, r3
 8002674:	f002 fd1b 	bl	80050ae <HAL_GPIO_WritePin>
 8002678:	e005      	b.n	8002686 <linear_motor_pulse+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <linear_motor_pulse+0x118>)
 800267c:	2200      	movs	r2, #0
 800267e:	2104      	movs	r1, #4
 8002680:	0018      	movs	r0, r3
 8002682:	f002 fd14 	bl	80050ae <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2100      	movs	r1, #0
 800268a:	0018      	movs	r0, r3
 800268c:	f003 faf8 	bl	8005c80 <HAL_TIM_PWM_Start_IT>
 8002690:	e023      	b.n	80026da <linear_motor_pulse+0x106>
	}
	else if (str->id == 2)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d11f      	bne.n	80026da <linear_motor_pulse+0x106>
	{
		*counter_handle = shift;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]
		if (abs(str->dir_q - str->inverse_q) == 1)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	001a      	movs	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	789b      	ldrb	r3, [r3, #2]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	17da      	asrs	r2, r3, #31
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	4053      	eors	r3, r2
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <linear_motor_pulse+0xf0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <linear_motor_pulse+0x118>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	2108      	movs	r1, #8
 80026bc:	0018      	movs	r0, r3
 80026be:	f002 fcf6 	bl	80050ae <HAL_GPIO_WritePin>
 80026c2:	e005      	b.n	80026d0 <linear_motor_pulse+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <linear_motor_pulse+0x118>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	2108      	movs	r1, #8
 80026ca:	0018      	movs	r0, r3
 80026cc:	f002 fcef 	bl	80050ae <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2104      	movs	r1, #4
 80026d4:	0018      	movs	r0, r3
 80026d6:	f003 fad3 	bl	8005c80 <HAL_TIM_PWM_Start_IT>
	}
	str->current_position = str->target_position;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]
	return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b006      	add	sp, #24
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	48000800 	.word	0x48000800

080026f0 <linear_motor_calibrate>:


uint32_t linear_motor_calibrate(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
	uint32_t stepSize = 100;
 80026fc:	2364      	movs	r3, #100	; 0x64
 80026fe:	61bb      	str	r3, [r7, #24]
	uint32_t distanceTraveled = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t edgeReached1 = 0;
 8002704:	2323      	movs	r3, #35	; 0x23
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
	uint8_t edgeReached2 = 0;
 800270c:	2317      	movs	r3, #23
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
	uint32_t hard_limit = 20000;
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <linear_motor_calibrate+0x174>)
 8002716:	613b      	str	r3, [r7, #16]
	uint32_t cnt = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
	if (str->id == 1)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <linear_motor_calibrate+0x42>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set HIGH
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <linear_motor_calibrate+0x178>)
 8002726:	2200      	movs	r2, #0
 8002728:	2104      	movs	r1, #4
 800272a:	0018      	movs	r0, r3
 800272c:	f002 fcbf 	bl	80050ae <HAL_GPIO_WritePin>
 8002730:	e05d      	b.n	80027ee <linear_motor_calibrate+0xfe>
	}
	else if (str->id == 2)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d159      	bne.n	80027ee <linear_motor_calibrate+0xfe>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set HIGH
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <linear_motor_calibrate+0x178>)
 800273c:	2200      	movs	r2, #0
 800273e:	2108      	movs	r1, #8
 8002740:	0018      	movs	r0, r3
 8002742:	f002 fcb4 	bl	80050ae <HAL_GPIO_WritePin>
	}
	while (edgeReached1 == 0)
 8002746:	e052      	b.n	80027ee <linear_motor_calibrate+0xfe>
	{
		*counter_handle = stepSize;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	601a      	str	r2, [r3, #0]
		cnt++;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
		if (str->id == 1)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d11c      	bne.n	8002796 <linear_motor_calibrate+0xa6>
		{
			while((TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY))
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	223e      	movs	r2, #62	; 0x3e
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d0f9      	beq.n	800275e <linear_motor_calibrate+0x6e>
			{

			}
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2100      	movs	r1, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f003 fa86 	bl	8005c80 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0)
 8002774:	4b3d      	ldr	r3, [pc, #244]	; (800286c <linear_motor_calibrate+0x17c>)
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	0018      	movs	r0, r3
 800277a:	f002 fc7b 	bl	8005074 <HAL_GPIO_ReadPin>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d104      	bne.n	800278c <linear_motor_calibrate+0x9c>
			{
				edgeReached1 = 1;
 8002782:	2323      	movs	r3, #35	; 0x23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e026      	b.n	80027da <linear_motor_calibrate+0xea>
			}
			else
			{
				distanceTraveled += stepSize;
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e021      	b.n	80027da <linear_motor_calibrate+0xea>
			}
			// TODO: add timeout
		}
		else if (str->id == 2)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11d      	bne.n	80027da <linear_motor_calibrate+0xea>
		{
			while((TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY))
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	223f      	movs	r2, #63	; 0x3f
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d0f9      	beq.n	80027a0 <linear_motor_calibrate+0xb0>
			{

			}
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2104      	movs	r1, #4
 80027b0:	0018      	movs	r0, r3
 80027b2:	f003 fa65 	bl	8005c80 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <linear_motor_calibrate+0x178>)
 80027bc:	0019      	movs	r1, r3
 80027be:	0010      	movs	r0, r2
 80027c0:	f002 fc58 	bl	8005074 <HAL_GPIO_ReadPin>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d104      	bne.n	80027d2 <linear_motor_calibrate+0xe2>
			{
				edgeReached1 = 1;
 80027c8:	2323      	movs	r3, #35	; 0x23
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e003      	b.n	80027da <linear_motor_calibrate+0xea>
			}
			else
			{
				distanceTraveled += stepSize;
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	18d3      	adds	r3, r2, r3
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
			}
			// TODO: add timeout
		}
		if (distanceTraveled > hard_limit)
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d905      	bls.n	80027ee <linear_motor_calibrate+0xfe>
		{
			edgeReached1 = 1;
 80027e2:	2323      	movs	r3, #35	; 0x23
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
			return 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e035      	b.n	800285a <linear_motor_calibrate+0x16a>
	while (edgeReached1 == 0)
 80027ee:	2323      	movs	r3, #35	; 0x23
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0a7      	beq.n	8002748 <linear_motor_calibrate+0x58>
		}

	}
	if (str->id == 1)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d113      	bne.n	8002828 <linear_motor_calibrate+0x138>
	{
		// Change direction of the front motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set LOW
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <linear_motor_calibrate+0x178>)
 8002802:	2201      	movs	r2, #1
 8002804:	2104      	movs	r1, #4
 8002806:	0018      	movs	r0, r3
 8002808:	f002 fc51 	bl	80050ae <HAL_GPIO_WritePin>
		*counter_handle = 9600;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2296      	movs	r2, #150	; 0x96
 8002810:	0192      	lsls	r2, r2, #6
 8002812:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2100      	movs	r1, #0
 8002818:	0018      	movs	r0, r3
 800281a:	f003 fa31 	bl	8005c80 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	e018      	b.n	800285a <linear_motor_calibrate+0x16a>
	}
	else if (str->id == 2)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d113      	bne.n	8002858 <linear_motor_calibrate+0x168>
	{
		// Change direction of the rear motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set LOW
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <linear_motor_calibrate+0x178>)
 8002832:	2201      	movs	r2, #1
 8002834:	2108      	movs	r1, #8
 8002836:	0018      	movs	r0, r3
 8002838:	f002 fc39 	bl	80050ae <HAL_GPIO_WritePin>
		*counter_handle = 9600;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2296      	movs	r2, #150	; 0x96
 8002840:	0192      	lsls	r2, r2, #6
 8002842:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2104      	movs	r1, #4
 8002848:	0018      	movs	r0, r3
 800284a:	f003 fa19 	bl	8005c80 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	e000      	b.n	800285a <linear_motor_calibrate+0x16a>
	}
	return 0;
 8002858:	2300      	movs	r3, #0

}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b00a      	add	sp, #40	; 0x28
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	00004e20 	.word	0x00004e20
 8002868:	48000800 	.word	0x48000800
 800286c:	48000400 	.word	0x48000400

08002870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b0c5      	sub	sp, #276	; 0x114
 8002874:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002876:	f001 ff11 	bl	800469c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800287a:	f000 fbdf 	bl	800303c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800287e:	f000 fe79 	bl	8003574 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002882:	f000 fcef 	bl	8003264 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002886:	f000 fc19 	bl	80030bc <MX_TIM1_Init>
  MX_TIM15_Init();
 800288a:	f000 fd67 	bl	800335c <MX_TIM15_Init>
  MX_DMA_Init();
 800288e:	f000 fe53 	bl	8003538 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002892:	f000 fe21 	bl	80034d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8002896:	23fa      	movs	r3, #250	; 0xfa
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	0018      	movs	r0, r3
 800289c:	f001 ff62 	bl	8004764 <HAL_Delay>

  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80028a0:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <main+0x1c0>)
 80028a2:	2100      	movs	r1, #0
 80028a4:	0018      	movs	r0, r3
 80028a6:	f003 fbf9 	bl	800609c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80028aa:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <main+0x1c0>)
 80028ac:	2104      	movs	r1, #4
 80028ae:	0018      	movs	r0, r3
 80028b0:	f003 fbf4 	bl	800609c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <main+0x1c0>)
 80028b6:	2108      	movs	r1, #8
 80028b8:	0018      	movs	r0, r3
 80028ba:	f003 fbef 	bl	800609c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80028be:	4b5c      	ldr	r3, [pc, #368]	; (8002a30 <main+0x1c0>)
 80028c0:	210c      	movs	r1, #12
 80028c2:	0018      	movs	r0, r3
 80028c4:	f003 fbea 	bl	800609c <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 80028c8:	235c      	movs	r3, #92	; 0x5c
 80028ca:	2420      	movs	r4, #32
 80028cc:	191b      	adds	r3, r3, r4
 80028ce:	19db      	adds	r3, r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	3304      	adds	r3, #4
 80028d6:	223d      	movs	r2, #61	; 0x3d
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f006 f87a 	bl	80089d4 <memset>
  float speed1 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	22c4      	movs	r2, #196	; 0xc4
 80028e4:	1912      	adds	r2, r2, r4
 80028e6:	19d2      	adds	r2, r2, r7
 80028e8:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	22c0      	movs	r2, #192	; 0xc0
 80028ee:	1912      	adds	r2, r2, r4
 80028f0:	19d2      	adds	r2, r2, r7
 80028f2:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	22bc      	movs	r2, #188	; 0xbc
 80028f8:	1912      	adds	r2, r2, r4
 80028fa:	19d2      	adds	r2, r2, r7
 80028fc:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	22b8      	movs	r2, #184	; 0xb8
 8002902:	1912      	adds	r2, r2, r4
 8002904:	19d2      	adds	r2, r2, r7
 8002906:	6013      	str	r3, [r2, #0]
  float gamma1 = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	67bb      	str	r3, [r7, #120]	; 0x78
  float gamma2 = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t cycleCounter = 0;
 8002910:	23b7      	movs	r3, #183	; 0xb7
 8002912:	191b      	adds	r3, r3, r4
 8002914:	19db      	adds	r3, r3, r7
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 800291a:	2300      	movs	r3, #0
 800291c:	22b0      	movs	r2, #176	; 0xb0
 800291e:	1912      	adds	r2, r2, r4
 8002920:	19d2      	adds	r2, r2, r7
 8002922:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 8002924:	2324      	movs	r3, #36	; 0x24
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	0018      	movs	r0, r3
 800292a:	2350      	movs	r3, #80	; 0x50
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f006 f850 	bl	80089d4 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002934:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <main+0x1c4>)
 8002936:	2100      	movs	r1, #0
 8002938:	0018      	movs	r0, r3
 800293a:	f003 f8ef 	bl	8005b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <main+0x1c4>)
 8002940:	2104      	movs	r1, #4
 8002942:	0018      	movs	r0, r3
 8002944:	f003 f8ea 	bl	8005b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <main+0x1c4>)
 800294a:	2108      	movs	r1, #8
 800294c:	0018      	movs	r0, r3
 800294e:	f003 f8e5 	bl	8005b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <main+0x1c4>)
 8002954:	210c      	movs	r1, #12
 8002956:	0018      	movs	r0, r3
 8002958:	f003 f8e0 	bl	8005b1c <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <main+0x1c8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2202      	movs	r2, #2
 8002962:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <main+0x1c8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2202      	movs	r2, #2
 800296a:	639a      	str	r2, [r3, #56]	; 0x38

  // SETUP
  for (int i = 0; i < 4; i++)
 800296c:	2300      	movs	r3, #0
 800296e:	22ac      	movs	r2, #172	; 0xac
 8002970:	1912      	adds	r2, r2, r4
 8002972:	19d2      	adds	r2, r2, r7
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e039      	b.n	80029ec <main+0x17c>
  {
	  pMW[i] = &MW[i];
 8002978:	24ac      	movs	r4, #172	; 0xac
 800297a:	2520      	movs	r5, #32
 800297c:	1963      	adds	r3, r4, r5
 800297e:	19db      	adds	r3, r3, r7
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	00da      	lsls	r2, r3, #3
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <main+0x1cc>)
 8002986:	18d1      	adds	r1, r2, r3
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <main+0x1d0>)
 800298a:	1962      	adds	r2, r4, r5
 800298c:	19d2      	adds	r2, r2, r7
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <main+0x1d0>)
 8002996:	1962      	adds	r2, r4, r5
 8002998:	19d2      	adds	r2, r2, r7
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	58d2      	ldr	r2, [r2, r3]
 80029a0:	1963      	adds	r3, r4, r5
 80029a2:	19db      	adds	r3, r3, r7
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	0019      	movs	r1, r3
 80029ae:	0010      	movs	r0, r2
 80029b0:	f7ff fcc8 	bl	8002344 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <main+0x1d0>)
 80029b6:	1962      	adds	r2, r4, r5
 80029b8:	19d2      	adds	r2, r2, r7
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	58d1      	ldr	r1, [r2, r3]
 80029c0:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <main+0x1c4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7ff fd0f 	bl	80023e8 <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <main+0x1d0>)
 80029cc:	1962      	adds	r2, r4, r5
 80029ce:	19d2      	adds	r2, r2, r7
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	58d3      	ldr	r3, [r2, r3]
 80029d6:	2100      	movs	r1, #0
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fd89 	bl	80024f0 <motor_break>
  for (int i = 0; i < 4; i++)
 80029de:	1963      	adds	r3, r4, r5
 80029e0:	19db      	adds	r3, r3, r7
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	1962      	adds	r2, r4, r5
 80029e8:	19d2      	adds	r2, r2, r7
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	23ac      	movs	r3, #172	; 0xac
 80029ee:	2520      	movs	r5, #32
 80029f0:	195b      	adds	r3, r3, r5
 80029f2:	19db      	adds	r3, r3, r7
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	ddbe      	ble.n	8002978 <main+0x108>
  }


  // basicly - clear all uart queues
  HAL_UART_Receive_DMA(&huart3, &UART2_rxBuffer, 1);
 80029fa:	4912      	ldr	r1, [pc, #72]	; (8002a44 <main+0x1d4>)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <main+0x1d8>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	0018      	movs	r0, r3
 8002a02:	f004 fea9 	bl	8007758 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart3, MSG, strlen(MSG), 50);
 8002a06:	245c      	movs	r4, #92	; 0x5c
 8002a08:	1963      	adds	r3, r4, r5
 8002a0a:	19db      	adds	r3, r3, r7
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fd fb85 	bl	800011c <strlen>
 8002a12:	0003      	movs	r3, r0
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	1963      	adds	r3, r4, r5
 8002a18:	19d9      	adds	r1, r3, r7
 8002a1a:	480b      	ldr	r0, [pc, #44]	; (8002a48 <main+0x1d8>)
 8002a1c:	2332      	movs	r3, #50	; 0x32
 8002a1e:	f004 fd4f 	bl	80074c0 <HAL_UART_Transmit>


  for (int i = 0; i < 2; i++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	22a8      	movs	r2, #168	; 0xa8
 8002a26:	1952      	adds	r2, r2, r5
 8002a28:	19d2      	adds	r2, r2, r7
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	e03e      	b.n	8002aac <main+0x23c>
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	20000244 	.word	0x20000244
 8002a34:	200001fc 	.word	0x200001fc
 8002a38:	2000028c 	.word	0x2000028c
 8002a3c:	200004dc 	.word	0x200004dc
 8002a40:	200004fc 	.word	0x200004fc
 8002a44:	20000470 	.word	0x20000470
 8002a48:	200002d4 	.word	0x200002d4
  {
	  pLM[i] = &LM[i];
 8002a4c:	20a8      	movs	r0, #168	; 0xa8
 8002a4e:	2420      	movs	r4, #32
 8002a50:	1903      	adds	r3, r0, r4
 8002a52:	19db      	adds	r3, r3, r7
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	0013      	movs	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4aea      	ldr	r2, [pc, #936]	; (8002e08 <main+0x598>)
 8002a60:	1899      	adds	r1, r3, r2
 8002a62:	4bea      	ldr	r3, [pc, #936]	; (8002e0c <main+0x59c>)
 8002a64:	1902      	adds	r2, r0, r4
 8002a66:	19d2      	adds	r2, r2, r7
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	50d1      	str	r1, [r2, r3]
	  linear_motor_init(pLM[i], i+1, i); // init structure
 8002a6e:	4be7      	ldr	r3, [pc, #924]	; (8002e0c <main+0x59c>)
 8002a70:	0001      	movs	r1, r0
 8002a72:	190a      	adds	r2, r1, r4
 8002a74:	19d2      	adds	r2, r2, r7
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	58d0      	ldr	r0, [r2, r3]
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	0021      	movs	r1, r4
 8002a80:	1913      	adds	r3, r2, r4
 8002a82:	19db      	adds	r3, r3, r7
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	0014      	movs	r4, r2
 8002a8e:	000d      	movs	r5, r1
 8002a90:	1852      	adds	r2, r2, r1
 8002a92:	19d2      	adds	r2, r2, r7
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	f7ff fd51 	bl	8002540 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 8002a9e:	1963      	adds	r3, r4, r5
 8002aa0:	19db      	adds	r3, r3, r7
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	1962      	adds	r2, r4, r5
 8002aa8:	19d2      	adds	r2, r2, r7
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	23a8      	movs	r3, #168	; 0xa8
 8002aae:	2220      	movs	r2, #32
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	ddc8      	ble.n	8002a4c <main+0x1dc>




  // No incoming processing should be done before it is set
  Init_Done = 1;
 8002aba:	4bd5      	ldr	r3, [pc, #852]	; (8002e10 <main+0x5a0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 8002ac0:	21b7      	movs	r1, #183	; 0xb7
 8002ac2:	2020      	movs	r0, #32
 8002ac4:	180b      	adds	r3, r1, r0
 8002ac6:	19db      	adds	r3, r3, r7
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	180b      	adds	r3, r1, r0
 8002acc:	19db      	adds	r3, r3, r7
 8002ace:	3201      	adds	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 8002ad2:	180b      	adds	r3, r1, r0
 8002ad4:	19db      	adds	r3, r3, r7
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2bff      	cmp	r3, #255	; 0xff
 8002ada:	d103      	bne.n	8002ae4 <main+0x274>
	{
		cycleCounter = 1;
 8002adc:	180b      	adds	r3, r1, r0
 8002ade:	19db      	adds	r3, r3, r7
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	24c4      	movs	r4, #196	; 0xc4
 8002ae8:	2520      	movs	r5, #32
 8002aea:	1962      	adds	r2, r4, r5
 8002aec:	19d2      	adds	r2, r2, r7
 8002aee:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	22c0      	movs	r2, #192	; 0xc0
 8002af4:	1952      	adds	r2, r2, r5
 8002af6:	19d2      	adds	r2, r2, r7
 8002af8:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	22bc      	movs	r2, #188	; 0xbc
 8002afe:	1952      	adds	r2, r2, r5
 8002b00:	19d2      	adds	r2, r2, r7
 8002b02:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	22b8      	movs	r2, #184	; 0xb8
 8002b08:	1952      	adds	r2, r2, r5
 8002b0a:	19d2      	adds	r2, r2, r7
 8002b0c:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 8002b0e:	4bc1      	ldr	r3, [pc, #772]	; (8002e14 <main+0x5a4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4ac1      	ldr	r2, [pc, #772]	; (8002e18 <main+0x5a8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d818      	bhi.n	8002b4a <main+0x2da>
 8002b18:	4bbe      	ldr	r3, [pc, #760]	; (8002e14 <main+0x5a4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d014      	beq.n	8002b4a <main+0x2da>
		 {
			 speed1 = 13900.0 / T31pulseWidth;
 8002b20:	4bbc      	ldr	r3, [pc, #752]	; (8002e14 <main+0x5a4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff faf9 	bl	800211c <__aeabi_ui2d>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	2000      	movs	r0, #0
 8002b30:	49ba      	ldr	r1, [pc, #744]	; (8002e1c <main+0x5ac>)
 8002b32:	f7fe f86f 	bl	8000c14 <__aeabi_ddiv>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	f7ff fb5b 	bl	80021f8 <__aeabi_d2f>
 8002b42:	1c03      	adds	r3, r0, #0
 8002b44:	1962      	adds	r2, r4, r5
 8002b46:	19d2      	adds	r2, r2, r7
 8002b48:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 8002b4a:	4bb5      	ldr	r3, [pc, #724]	; (8002e20 <main+0x5b0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4ab2      	ldr	r2, [pc, #712]	; (8002e18 <main+0x5a8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d81a      	bhi.n	8002b8a <main+0x31a>
 8002b54:	4bb2      	ldr	r3, [pc, #712]	; (8002e20 <main+0x5b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <main+0x31a>
		 {
			 speed2 = 13900.0 / T32pulseWidth;
 8002b5c:	4bb0      	ldr	r3, [pc, #704]	; (8002e20 <main+0x5b0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fadb 	bl	800211c <__aeabi_ui2d>
 8002b66:	0002      	movs	r2, r0
 8002b68:	000b      	movs	r3, r1
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	49ab      	ldr	r1, [pc, #684]	; (8002e1c <main+0x5ac>)
 8002b6e:	f7fe f851 	bl	8000c14 <__aeabi_ddiv>
 8002b72:	0002      	movs	r2, r0
 8002b74:	000b      	movs	r3, r1
 8002b76:	0010      	movs	r0, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	f7ff fb3d 	bl	80021f8 <__aeabi_d2f>
 8002b7e:	1c03      	adds	r3, r0, #0
 8002b80:	22c0      	movs	r2, #192	; 0xc0
 8002b82:	2120      	movs	r1, #32
 8002b84:	1852      	adds	r2, r2, r1
 8002b86:	19d2      	adds	r2, r2, r7
 8002b88:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 8002b8a:	4ba6      	ldr	r3, [pc, #664]	; (8002e24 <main+0x5b4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4aa2      	ldr	r2, [pc, #648]	; (8002e18 <main+0x5a8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d81a      	bhi.n	8002bca <main+0x35a>
 8002b94:	4ba3      	ldr	r3, [pc, #652]	; (8002e24 <main+0x5b4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <main+0x35a>
		 {
			 speed3 = 13900.0 / T33pulseWidth;
 8002b9c:	4ba1      	ldr	r3, [pc, #644]	; (8002e24 <main+0x5b4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff fabb 	bl	800211c <__aeabi_ui2d>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	000b      	movs	r3, r1
 8002baa:	2000      	movs	r0, #0
 8002bac:	499b      	ldr	r1, [pc, #620]	; (8002e1c <main+0x5ac>)
 8002bae:	f7fe f831 	bl	8000c14 <__aeabi_ddiv>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	000b      	movs	r3, r1
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	f7ff fb1d 	bl	80021f8 <__aeabi_d2f>
 8002bbe:	1c03      	adds	r3, r0, #0
 8002bc0:	22bc      	movs	r2, #188	; 0xbc
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	1852      	adds	r2, r2, r1
 8002bc6:	19d2      	adds	r2, r2, r7
 8002bc8:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 8002bca:	4b97      	ldr	r3, [pc, #604]	; (8002e28 <main+0x5b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a92      	ldr	r2, [pc, #584]	; (8002e18 <main+0x5a8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d81a      	bhi.n	8002c0a <main+0x39a>
 8002bd4:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <main+0x5b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <main+0x39a>
		 {
			 speed4 = 13900.0 / T34pulseWidth;
 8002bdc:	4b92      	ldr	r3, [pc, #584]	; (8002e28 <main+0x5b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7ff fa9b 	bl	800211c <__aeabi_ui2d>
 8002be6:	0002      	movs	r2, r0
 8002be8:	000b      	movs	r3, r1
 8002bea:	2000      	movs	r0, #0
 8002bec:	498b      	ldr	r1, [pc, #556]	; (8002e1c <main+0x5ac>)
 8002bee:	f7fe f811 	bl	8000c14 <__aeabi_ddiv>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	000b      	movs	r3, r1
 8002bf6:	0010      	movs	r0, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	f7ff fafd 	bl	80021f8 <__aeabi_d2f>
 8002bfe:	1c03      	adds	r3, r0, #0
 8002c00:	22b8      	movs	r2, #184	; 0xb8
 8002c02:	2120      	movs	r1, #32
 8002c04:	1852      	adds	r2, r2, r1
 8002c06:	19d2      	adds	r2, r2, r7
 8002c08:	6013      	str	r3, [r2, #0]
		 }
		 calculate_angles(&gamma1, &gamma2);
 8002c0a:	2354      	movs	r3, #84	; 0x54
 8002c0c:	2420      	movs	r4, #32
 8002c0e:	191b      	adds	r3, r3, r4
 8002c10:	19da      	adds	r2, r3, r7
 8002c12:	2358      	movs	r3, #88	; 0x58
 8002c14:	191b      	adds	r3, r3, r4
 8002c16:	19db      	adds	r3, r3, r7
 8002c18:	0011      	movs	r1, r2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fe86 	bl	800392c <calculate_angles>
		 memset(MSG, 0, sizeof(MSG));
 8002c20:	265c      	movs	r6, #92	; 0x5c
 8002c22:	1933      	adds	r3, r6, r4
 8002c24:	19db      	adds	r3, r3, r7
 8002c26:	2241      	movs	r2, #65	; 0x41
 8002c28:	2100      	movs	r1, #0
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f005 fed2 	bl	80089d4 <memset>
		 sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f %.2f %.2f\n", speed1, speed2, speed3, speed4, gamma1, gamma2);
 8002c30:	23c4      	movs	r3, #196	; 0xc4
 8002c32:	191b      	adds	r3, r3, r4
 8002c34:	19db      	adds	r3, r3, r7
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	f7ff fa96 	bl	8002168 <__aeabi_f2d>
 8002c3c:	61b8      	str	r0, [r7, #24]
 8002c3e:	61f9      	str	r1, [r7, #28]
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	191b      	adds	r3, r3, r4
 8002c44:	19db      	adds	r3, r3, r7
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	f7ff fa8e 	bl	8002168 <__aeabi_f2d>
 8002c4c:	0004      	movs	r4, r0
 8002c4e:	000d      	movs	r5, r1
 8002c50:	23bc      	movs	r3, #188	; 0xbc
 8002c52:	2220      	movs	r2, #32
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	19db      	adds	r3, r3, r7
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	f7ff fa85 	bl	8002168 <__aeabi_f2d>
 8002c5e:	6138      	str	r0, [r7, #16]
 8002c60:	6179      	str	r1, [r7, #20]
 8002c62:	23b8      	movs	r3, #184	; 0xb8
 8002c64:	2220      	movs	r2, #32
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	f7ff fa7c 	bl	8002168 <__aeabi_f2d>
 8002c70:	60b8      	str	r0, [r7, #8]
 8002c72:	60f9      	str	r1, [r7, #12]
 8002c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c76:	1c18      	adds	r0, r3, #0
 8002c78:	f7ff fa76 	bl	8002168 <__aeabi_f2d>
 8002c7c:	6038      	str	r0, [r7, #0]
 8002c7e:	6079      	str	r1, [r7, #4]
 8002c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c82:	1c18      	adds	r0, r3, #0
 8002c84:	f7ff fa70 	bl	8002168 <__aeabi_f2d>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	000b      	movs	r3, r1
 8002c8c:	4967      	ldr	r1, [pc, #412]	; (8002e2c <main+0x5bc>)
 8002c8e:	2020      	movs	r0, #32
 8002c90:	1830      	adds	r0, r6, r0
 8002c92:	19c0      	adds	r0, r0, r7
 8002c94:	9208      	str	r2, [sp, #32]
 8002c96:	9309      	str	r3, [sp, #36]	; 0x24
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9206      	str	r2, [sp, #24]
 8002c9e:	9307      	str	r3, [sp, #28]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	9204      	str	r2, [sp, #16]
 8002ca6:	9305      	str	r3, [sp, #20]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	9303      	str	r3, [sp, #12]
 8002cb0:	9400      	str	r4, [sp, #0]
 8002cb2:	9501      	str	r5, [sp, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f006 fd0e 	bl	80096d8 <siprintf>
		 //sprintf(MSG, "[enc] %d %d %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		 UART_Send(MSG);
 8002cbc:	2420      	movs	r4, #32
 8002cbe:	1933      	adds	r3, r6, r4
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 fcde 	bl	8003684 <UART_Send>
		 //memset(MSG, 0, sizeof(MSG));
		 //sprintf(MSG, "status: %d %d\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		 //UART_Send(MSG);
	 }

	 for (int i=0; i < 4; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	22a4      	movs	r2, #164	; 0xa4
 8002ccc:	1912      	adds	r2, r2, r4
 8002cce:	19d2      	adds	r2, r2, r7
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e17d      	b.n	8002fd0 <main+0x760>
	 {
		 sumVect = 0.0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	22b0      	movs	r2, #176	; 0xb0
 8002cd8:	2120      	movs	r1, #32
 8002cda:	1852      	adds	r2, r2, r1
 8002cdc:	19d2      	adds	r2, r2, r7
 8002cde:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	22a0      	movs	r2, #160	; 0xa0
 8002ce4:	1852      	adds	r2, r2, r1
 8002ce6:	19d2      	adds	r2, r2, r7
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e043      	b.n	8002d74 <main+0x504>
		 {
			 vect[i][j] = vect[i][j+1];
 8002cec:	24a0      	movs	r4, #160	; 0xa0
 8002cee:	2620      	movs	r6, #32
 8002cf0:	19a3      	adds	r3, r4, r6
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1c58      	adds	r0, r3, #1
 8002cf8:	2324      	movs	r3, #36	; 0x24
 8002cfa:	18f9      	adds	r1, r7, r3
 8002cfc:	25a4      	movs	r5, #164	; 0xa4
 8002cfe:	19aa      	adds	r2, r5, r6
 8002d00:	19d3      	adds	r3, r2, r7
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	0013      	movs	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	189b      	adds	r3, r3, r2
 8002d0a:	181b      	adds	r3, r3, r0
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	5858      	ldr	r0, [r3, r1]
 8002d10:	2324      	movs	r3, #36	; 0x24
 8002d12:	18f9      	adds	r1, r7, r3
 8002d14:	19aa      	adds	r2, r5, r6
 8002d16:	19d3      	adds	r3, r2, r7
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	0013      	movs	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	19a2      	adds	r2, r4, r6
 8002d22:	19d2      	adds	r2, r2, r7
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8002d2c:	2324      	movs	r3, #36	; 0x24
 8002d2e:	18f9      	adds	r1, r7, r3
 8002d30:	19ab      	adds	r3, r5, r6
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	0013      	movs	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	0035      	movs	r5, r6
 8002d3e:	19a2      	adds	r2, r4, r6
 8002d40:	19d2      	adds	r2, r2, r7
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	585b      	ldr	r3, [r3, r1]
 8002d4a:	2105      	movs	r1, #5
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fd fa01 	bl	8000154 <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	001a      	movs	r2, r3
 8002d56:	21b0      	movs	r1, #176	; 0xb0
 8002d58:	194b      	adds	r3, r1, r5
 8002d5a:	19db      	adds	r3, r3, r7
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	194a      	adds	r2, r1, r5
 8002d62:	19d2      	adds	r2, r2, r7
 8002d64:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002d66:	1963      	adds	r3, r4, r5
 8002d68:	19db      	adds	r3, r3, r7
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	1962      	adds	r2, r4, r5
 8002d70:	19d2      	adds	r2, r2, r7
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	23a0      	movs	r3, #160	; 0xa0
 8002d76:	2520      	movs	r5, #32
 8002d78:	195b      	adds	r3, r3, r5
 8002d7a:	19db      	adds	r3, r3, r7
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	ddb4      	ble.n	8002cec <main+0x47c>
		 }
		 if (i==0)
 8002d82:	24a4      	movs	r4, #164	; 0xa4
 8002d84:	1963      	adds	r3, r4, r5
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d150      	bne.n	8002e30 <main+0x5c0>
		 {
			 vect[i][4] = T31pulseWidth;
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <main+0x5a4>)
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	2624      	movs	r6, #36	; 0x24
 8002d94:	19b8      	adds	r0, r7, r6
 8002d96:	1963      	adds	r3, r4, r5
 8002d98:	19db      	adds	r3, r3, r7
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	189b      	adds	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	18c3      	adds	r3, r0, r3
 8002da6:	3310      	adds	r3, #16
 8002da8:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002daa:	19b9      	adds	r1, r7, r6
 8002dac:	1963      	adds	r3, r4, r5
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	0013      	movs	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	18cb      	adds	r3, r1, r3
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7fd f9c6 	bl	8000154 <__udivsi3>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	001a      	movs	r2, r3
 8002dcc:	21b0      	movs	r1, #176	; 0xb0
 8002dce:	194b      	adds	r3, r1, r5
 8002dd0:	19db      	adds	r3, r3, r7
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	194a      	adds	r2, r1, r5
 8002dd8:	19d2      	adds	r2, r2, r7
 8002dda:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <main+0x5a4>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	194b      	adds	r3, r1, r5
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	3305      	adds	r3, #5
 8002dea:	da00      	bge.n	8002dee <main+0x57e>
 8002dec:	e0e7      	b.n	8002fbe <main+0x74e>
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <main+0x5a4>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	194b      	adds	r3, r1, r5
 8002df4:	19db      	adds	r3, r3, r7
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	dd00      	ble.n	8002e00 <main+0x590>
 8002dfe:	e0de      	b.n	8002fbe <main+0x74e>
				 T31pulseWidth = 0;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <main+0x5a4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e0da      	b.n	8002fbe <main+0x74e>
 8002e08:	2000050c 	.word	0x2000050c
 8002e0c:	20000524 	.word	0x20000524
 8002e10:	20000534 	.word	0x20000534
 8002e14:	200003e0 	.word	0x200003e0
 8002e18:	0000752f 	.word	0x0000752f
 8002e1c:	40cb2600 	.word	0x40cb2600
 8002e20:	20000404 	.word	0x20000404
 8002e24:	20000428 	.word	0x20000428
 8002e28:	2000044c 	.word	0x2000044c
 8002e2c:	0800dde4 	.word	0x0800dde4
		 }
		 else if (i==1)
 8002e30:	24a4      	movs	r4, #164	; 0xa4
 8002e32:	2520      	movs	r5, #32
 8002e34:	1963      	adds	r3, r4, r5
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d13c      	bne.n	8002eb8 <main+0x648>
		 {
			 vect[i][4] = T32pulseWidth;
 8002e3e:	4b7a      	ldr	r3, [pc, #488]	; (8003028 <main+0x7b8>)
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	2624      	movs	r6, #36	; 0x24
 8002e44:	19b8      	adds	r0, r7, r6
 8002e46:	1963      	adds	r3, r4, r5
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	18c3      	adds	r3, r0, r3
 8002e56:	3310      	adds	r3, #16
 8002e58:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002e5a:	19b9      	adds	r1, r7, r6
 8002e5c:	1963      	adds	r3, r4, r5
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	0013      	movs	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	18cb      	adds	r3, r1, r3
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2105      	movs	r1, #5
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd f96e 	bl	8000154 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	21b0      	movs	r1, #176	; 0xb0
 8002e7e:	194b      	adds	r3, r1, r5
 8002e80:	19db      	adds	r3, r3, r7
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	194a      	adds	r2, r1, r5
 8002e88:	19d2      	adds	r2, r2, r7
 8002e8a:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 8002e8c:	4b66      	ldr	r3, [pc, #408]	; (8003028 <main+0x7b8>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	194b      	adds	r3, r1, r5
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	3305      	adds	r3, #5
 8002e9a:	da00      	bge.n	8002e9e <main+0x62e>
 8002e9c:	e08f      	b.n	8002fbe <main+0x74e>
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <main+0x7b8>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	194b      	adds	r3, r1, r5
 8002ea4:	19db      	adds	r3, r3, r7
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	dd00      	ble.n	8002eb0 <main+0x640>
 8002eae:	e086      	b.n	8002fbe <main+0x74e>
				 T32pulseWidth = 0;
 8002eb0:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <main+0x7b8>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e082      	b.n	8002fbe <main+0x74e>
		 }
		 else if (i==2)
 8002eb8:	24a4      	movs	r4, #164	; 0xa4
 8002eba:	2520      	movs	r5, #32
 8002ebc:	1963      	adds	r3, r4, r5
 8002ebe:	19db      	adds	r3, r3, r7
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d13a      	bne.n	8002f3c <main+0x6cc>
		 {
			 vect[i][4] = T33pulseWidth;
 8002ec6:	4b59      	ldr	r3, [pc, #356]	; (800302c <main+0x7bc>)
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	2624      	movs	r6, #36	; 0x24
 8002ecc:	19b8      	adds	r0, r7, r6
 8002ece:	1963      	adds	r3, r4, r5
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	0013      	movs	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	189b      	adds	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	18c3      	adds	r3, r0, r3
 8002ede:	3310      	adds	r3, #16
 8002ee0:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002ee2:	19b9      	adds	r1, r7, r6
 8002ee4:	1963      	adds	r3, r4, r5
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	0013      	movs	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18cb      	adds	r3, r1, r3
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2105      	movs	r1, #5
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7fd f92a 	bl	8000154 <__udivsi3>
 8002f00:	0003      	movs	r3, r0
 8002f02:	001a      	movs	r2, r3
 8002f04:	21b0      	movs	r1, #176	; 0xb0
 8002f06:	194b      	adds	r3, r1, r5
 8002f08:	19db      	adds	r3, r3, r7
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	194a      	adds	r2, r1, r5
 8002f10:	19d2      	adds	r2, r2, r7
 8002f12:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 8002f14:	4b45      	ldr	r3, [pc, #276]	; (800302c <main+0x7bc>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	194b      	adds	r3, r1, r5
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	3305      	adds	r3, #5
 8002f22:	db4c      	blt.n	8002fbe <main+0x74e>
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <main+0x7bc>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	194b      	adds	r3, r1, r5
 8002f2a:	19db      	adds	r3, r3, r7
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	dc44      	bgt.n	8002fbe <main+0x74e>
				 T33pulseWidth = 0;
 8002f34:	4b3d      	ldr	r3, [pc, #244]	; (800302c <main+0x7bc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e040      	b.n	8002fbe <main+0x74e>
		 }
		 else if (i==3)
 8002f3c:	24a4      	movs	r4, #164	; 0xa4
 8002f3e:	2520      	movs	r5, #32
 8002f40:	1963      	adds	r3, r4, r5
 8002f42:	19db      	adds	r3, r3, r7
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d139      	bne.n	8002fbe <main+0x74e>
		 {
			 vect[i][4] = T34pulseWidth;
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <main+0x7c0>)
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	2624      	movs	r6, #36	; 0x24
 8002f50:	19b8      	adds	r0, r7, r6
 8002f52:	1963      	adds	r3, r4, r5
 8002f54:	19db      	adds	r3, r3, r7
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	0013      	movs	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	18c3      	adds	r3, r0, r3
 8002f62:	3310      	adds	r3, #16
 8002f64:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002f66:	19b9      	adds	r1, r7, r6
 8002f68:	1963      	adds	r3, r4, r5
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	0013      	movs	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	18cb      	adds	r3, r1, r3
 8002f78:	3310      	adds	r3, #16
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2105      	movs	r1, #5
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7fd f8e8 	bl	8000154 <__udivsi3>
 8002f84:	0003      	movs	r3, r0
 8002f86:	001a      	movs	r2, r3
 8002f88:	21b0      	movs	r1, #176	; 0xb0
 8002f8a:	194b      	adds	r3, r1, r5
 8002f8c:	19db      	adds	r3, r3, r7
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	189b      	adds	r3, r3, r2
 8002f92:	194a      	adds	r2, r1, r5
 8002f94:	19d2      	adds	r2, r2, r7
 8002f96:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <main+0x7c0>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	194b      	adds	r3, r1, r5
 8002f9e:	19db      	adds	r3, r3, r7
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	3305      	adds	r3, #5
 8002fa6:	db0a      	blt.n	8002fbe <main+0x74e>
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <main+0x7c0>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	194b      	adds	r3, r1, r5
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	dc02      	bgt.n	8002fbe <main+0x74e>
				 T34pulseWidth = 0;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <main+0x7c0>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8002fbe:	22a4      	movs	r2, #164	; 0xa4
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	1853      	adds	r3, r2, r1
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	1852      	adds	r2, r2, r1
 8002fcc:	19d2      	adds	r2, r2, r7
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	23a4      	movs	r3, #164	; 0xa4
 8002fd2:	2420      	movs	r4, #32
 8002fd4:	191b      	adds	r3, r3, r4
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	dc00      	bgt.n	8002fe0 <main+0x770>
 8002fde:	e679      	b.n	8002cd4 <main+0x464>
		 }
	 }

	 HAL_Delay(50);
 8002fe0:	2032      	movs	r0, #50	; 0x32
 8002fe2:	f001 fbbf 	bl	8004764 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 if ((UART_newMessage == 1) && (cycleCounter % 2 == 0))
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <main+0x7c4>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d000      	beq.n	8002ff0 <main+0x780>
 8002fee:	e567      	b.n	8002ac0 <main+0x250>
 8002ff0:	23b7      	movs	r3, #183	; 0xb7
 8002ff2:	191b      	adds	r3, r3, r4
 8002ff4:	19db      	adds	r3, r3, r7
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d000      	beq.n	8003004 <main+0x794>
 8003002:	e55d      	b.n	8002ac0 <main+0x250>
	 {
		 // check if received string contains [drv] message and parse it
		 drv_messageCheck(rxString);
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <main+0x7c8>)
 8003006:	0018      	movs	r0, r3
 8003008:	f000 fb5c 	bl	80036c4 <drv_messageCheck>
		 cal_messageCheck(rxString);
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <main+0x7c8>)
 800300e:	0018      	movs	r0, r3
 8003010:	f000 fc26 	bl	8003860 <cal_messageCheck>
		 // clear received b
		 memset(rxString, 0, sizeof(rxString));
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <main+0x7c8>)
 8003016:	2264      	movs	r2, #100	; 0x64
 8003018:	2100      	movs	r1, #0
 800301a:	0018      	movs	r0, r3
 800301c:	f005 fcda 	bl	80089d4 <memset>
		 // set newMessage flag to 0 to begin new string receive
		 UART_newMessage = 0;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <main+0x7c4>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
	cycleCounter++;
 8003026:	e54b      	b.n	8002ac0 <main+0x250>
 8003028:	20000404 	.word	0x20000404
 800302c:	20000428 	.word	0x20000428
 8003030:	2000044c 	.word	0x2000044c
 8003034:	20000471 	.word	0x20000471
 8003038:	20000474 	.word	0x20000474

0800303c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b091      	sub	sp, #68	; 0x44
 8003040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003042:	2410      	movs	r4, #16
 8003044:	193b      	adds	r3, r7, r4
 8003046:	0018      	movs	r0, r3
 8003048:	2330      	movs	r3, #48	; 0x30
 800304a:	001a      	movs	r2, r3
 800304c:	2100      	movs	r1, #0
 800304e:	f005 fcc1 	bl	80089d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003052:	003b      	movs	r3, r7
 8003054:	0018      	movs	r0, r3
 8003056:	2310      	movs	r3, #16
 8003058:	001a      	movs	r2, r3
 800305a:	2100      	movs	r1, #0
 800305c:	f005 fcba 	bl	80089d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003060:	0021      	movs	r1, r4
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003068:	187b      	adds	r3, r7, r1
 800306a:	2201      	movs	r2, #1
 800306c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800306e:	187b      	adds	r3, r7, r1
 8003070:	2210      	movs	r2, #16
 8003072:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2200      	movs	r2, #0
 8003078:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800307a:	187b      	adds	r3, r7, r1
 800307c:	0018      	movs	r0, r3
 800307e:	f002 f833 	bl	80050e8 <HAL_RCC_OscConfig>
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	d001      	beq.n	800308a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8003086:	f000 ffc1 	bl	800400c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800308a:	003b      	movs	r3, r7
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003090:	003b      	movs	r3, r7
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003096:	003b      	movs	r3, r7
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800309c:	003b      	movs	r3, r7
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030a2:	003b      	movs	r3, r7
 80030a4:	2100      	movs	r1, #0
 80030a6:	0018      	movs	r0, r3
 80030a8:	f002 fb3c 	bl	8005724 <HAL_RCC_ClockConfig>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d001      	beq.n	80030b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80030b0:	f000 ffac 	bl	800400c <Error_Handler>
  }
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b011      	add	sp, #68	; 0x44
 80030ba:	bd90      	pop	{r4, r7, pc}

080030bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b096      	sub	sp, #88	; 0x58
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030c2:	2348      	movs	r3, #72	; 0x48
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	0018      	movs	r0, r3
 80030c8:	2310      	movs	r3, #16
 80030ca:	001a      	movs	r2, r3
 80030cc:	2100      	movs	r1, #0
 80030ce:	f005 fc81 	bl	80089d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	0018      	movs	r0, r3
 80030d8:	2308      	movs	r3, #8
 80030da:	001a      	movs	r2, r3
 80030dc:	2100      	movs	r1, #0
 80030de:	f005 fc79 	bl	80089d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030e2:	2324      	movs	r3, #36	; 0x24
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	0018      	movs	r0, r3
 80030e8:	231c      	movs	r3, #28
 80030ea:	001a      	movs	r2, r3
 80030ec:	2100      	movs	r1, #0
 80030ee:	f005 fc71 	bl	80089d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	0018      	movs	r0, r3
 80030f6:	2320      	movs	r3, #32
 80030f8:	001a      	movs	r2, r3
 80030fa:	2100      	movs	r1, #0
 80030fc:	f005 fc6a 	bl	80089d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003100:	4b56      	ldr	r3, [pc, #344]	; (800325c <MX_TIM1_Init+0x1a0>)
 8003102:	4a57      	ldr	r2, [pc, #348]	; (8003260 <MX_TIM1_Init+0x1a4>)
 8003104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8003106:	4b55      	ldr	r3, [pc, #340]	; (800325c <MX_TIM1_Init+0x1a0>)
 8003108:	229f      	movs	r2, #159	; 0x9f
 800310a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <MX_TIM1_Init+0x1a0>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003112:	4b52      	ldr	r3, [pc, #328]	; (800325c <MX_TIM1_Init+0x1a0>)
 8003114:	2263      	movs	r2, #99	; 0x63
 8003116:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <MX_TIM1_Init+0x1a0>)
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800311e:	4b4f      	ldr	r3, [pc, #316]	; (800325c <MX_TIM1_Init+0x1a0>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <MX_TIM1_Init+0x1a0>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800312a:	4b4c      	ldr	r3, [pc, #304]	; (800325c <MX_TIM1_Init+0x1a0>)
 800312c:	0018      	movs	r0, r3
 800312e:	f002 fc4d 	bl	80059cc <HAL_TIM_Base_Init>
 8003132:	1e03      	subs	r3, r0, #0
 8003134:	d001      	beq.n	800313a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003136:	f000 ff69 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313a:	2148      	movs	r1, #72	; 0x48
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0152      	lsls	r2, r2, #5
 8003142:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003144:	187a      	adds	r2, r7, r1
 8003146:	4b45      	ldr	r3, [pc, #276]	; (800325c <MX_TIM1_Init+0x1a0>)
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f003 fb2e 	bl	80067ac <HAL_TIM_ConfigClockSource>
 8003150:	1e03      	subs	r3, r0, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003154:	f000 ff5a 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <MX_TIM1_Init+0x1a0>)
 800315a:	0018      	movs	r0, r3
 800315c:	f002 fc86 	bl	8005a6c <HAL_TIM_PWM_Init>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003164:	f000 ff52 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003168:	2140      	movs	r1, #64	; 0x40
 800316a:	187b      	adds	r3, r7, r1
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003170:	187b      	adds	r3, r7, r1
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003176:	187a      	adds	r2, r7, r1
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <MX_TIM1_Init+0x1a0>)
 800317a:	0011      	movs	r1, r2
 800317c:	0018      	movs	r0, r3
 800317e:	f004 f885 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d001      	beq.n	800318a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8003186:	f000 ff41 	bl	800400c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800318a:	2124      	movs	r1, #36	; 0x24
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2260      	movs	r2, #96	; 0x60
 8003190:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003192:	187b      	adds	r3, r7, r1
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003198:	187b      	adds	r3, r7, r1
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031b6:	1879      	adds	r1, r7, r1
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <MX_TIM1_Init+0x1a0>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	0018      	movs	r0, r3
 80031be:	f003 fa2f 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80031c6:	f000 ff21 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031ca:	2324      	movs	r3, #36	; 0x24
 80031cc:	18f9      	adds	r1, r7, r3
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <MX_TIM1_Init+0x1a0>)
 80031d0:	2204      	movs	r2, #4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f003 fa24 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80031dc:	f000 ff16 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031e0:	2324      	movs	r3, #36	; 0x24
 80031e2:	18f9      	adds	r1, r7, r3
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <MX_TIM1_Init+0x1a0>)
 80031e6:	2208      	movs	r2, #8
 80031e8:	0018      	movs	r0, r3
 80031ea:	f003 fa19 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80031f2:	f000 ff0b 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031f6:	2324      	movs	r3, #36	; 0x24
 80031f8:	18f9      	adds	r1, r7, r3
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <MX_TIM1_Init+0x1a0>)
 80031fc:	220c      	movs	r2, #12
 80031fe:	0018      	movs	r0, r3
 8003200:	f003 fa0e 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003208:	f000 ff00 	bl	800400c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	2200      	movs	r2, #0
 8003216:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	2200      	movs	r2, #0
 8003222:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	0192      	lsls	r2, r2, #6
 8003230:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003238:	1d3a      	adds	r2, r7, #4
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <MX_TIM1_Init+0x1a0>)
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f004 f87c 	bl	800733c <HAL_TIMEx_ConfigBreakDeadTime>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d001      	beq.n	800324c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8003248:	f000 fee0 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <MX_TIM1_Init+0x1a0>)
 800324e:	0018      	movs	r0, r3
 8003250:	f000 ffbe 	bl	80041d0 <HAL_TIM_MspPostInit>

}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b016      	add	sp, #88	; 0x58
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200001fc 	.word	0x200001fc
 8003260:	40012c00 	.word	0x40012c00

08003264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326a:	2310      	movs	r3, #16
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	0018      	movs	r0, r3
 8003270:	2308      	movs	r3, #8
 8003272:	001a      	movs	r2, r3
 8003274:	2100      	movs	r1, #0
 8003276:	f005 fbad 	bl	80089d4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800327a:	003b      	movs	r3, r7
 800327c:	0018      	movs	r0, r3
 800327e:	2310      	movs	r3, #16
 8003280:	001a      	movs	r2, r3
 8003282:	2100      	movs	r1, #0
 8003284:	f005 fba6 	bl	80089d4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003288:	4b31      	ldr	r3, [pc, #196]	; (8003350 <MX_TIM3_Init+0xec>)
 800328a:	4a32      	ldr	r2, [pc, #200]	; (8003354 <MX_TIM3_Init+0xf0>)
 800328c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800328e:	4b30      	ldr	r3, [pc, #192]	; (8003350 <MX_TIM3_Init+0xec>)
 8003290:	224f      	movs	r2, #79	; 0x4f
 8003292:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003294:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <MX_TIM3_Init+0xec>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <MX_TIM3_Init+0xec>)
 800329c:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <MX_TIM3_Init+0xf4>)
 800329e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <MX_TIM3_Init+0xec>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a6:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <MX_TIM3_Init+0xec>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <MX_TIM3_Init+0xec>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f002 fea4 	bl	8005ffc <HAL_TIM_IC_Init>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80032b8:	f000 fea8 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032bc:	2110      	movs	r1, #16
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ca:	187a      	adds	r2, r7, r1
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <MX_TIM3_Init+0xec>)
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f003 ffdb 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80032da:	f000 fe97 	bl	800400c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032de:	003b      	movs	r3, r7
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032e4:	003b      	movs	r3, r7
 80032e6:	2201      	movs	r2, #1
 80032e8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032ea:	003b      	movs	r3, r7
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 80032f0:	003b      	movs	r3, r7
 80032f2:	2203      	movs	r2, #3
 80032f4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032f6:	0039      	movs	r1, r7
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <MX_TIM3_Init+0xec>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	0018      	movs	r0, r3
 80032fe:	f003 f8eb 	bl	80064d8 <HAL_TIM_IC_ConfigChannel>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003306:	f000 fe81 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800330a:	0039      	movs	r1, r7
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <MX_TIM3_Init+0xec>)
 800330e:	2204      	movs	r2, #4
 8003310:	0018      	movs	r0, r3
 8003312:	f003 f8e1 	bl	80064d8 <HAL_TIM_IC_ConfigChannel>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d001      	beq.n	800331e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800331a:	f000 fe77 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800331e:	0039      	movs	r1, r7
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <MX_TIM3_Init+0xec>)
 8003322:	2208      	movs	r2, #8
 8003324:	0018      	movs	r0, r3
 8003326:	f003 f8d7 	bl	80064d8 <HAL_TIM_IC_ConfigChannel>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800332e:	f000 fe6d 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003332:	0039      	movs	r1, r7
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <MX_TIM3_Init+0xec>)
 8003336:	220c      	movs	r2, #12
 8003338:	0018      	movs	r0, r3
 800333a:	f003 f8cd 	bl	80064d8 <HAL_TIM_IC_ConfigChannel>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8003342:	f000 fe63 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b006      	add	sp, #24
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	20000244 	.word	0x20000244
 8003354:	40000400 	.word	0x40000400
 8003358:	0000c34f 	.word	0x0000c34f

0800335c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b096      	sub	sp, #88	; 0x58
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003362:	2348      	movs	r3, #72	; 0x48
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	0018      	movs	r0, r3
 8003368:	2310      	movs	r3, #16
 800336a:	001a      	movs	r2, r3
 800336c:	2100      	movs	r1, #0
 800336e:	f005 fb31 	bl	80089d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	0018      	movs	r0, r3
 8003378:	2308      	movs	r3, #8
 800337a:	001a      	movs	r2, r3
 800337c:	2100      	movs	r1, #0
 800337e:	f005 fb29 	bl	80089d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003382:	2324      	movs	r3, #36	; 0x24
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	0018      	movs	r0, r3
 8003388:	231c      	movs	r3, #28
 800338a:	001a      	movs	r2, r3
 800338c:	2100      	movs	r1, #0
 800338e:	f005 fb21 	bl	80089d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	0018      	movs	r0, r3
 8003396:	2320      	movs	r3, #32
 8003398:	001a      	movs	r2, r3
 800339a:	2100      	movs	r1, #0
 800339c:	f005 fb1a 	bl	80089d4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80033a0:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033a2:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <MX_TIM15_Init+0x178>)
 80033a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 160-1;
 80033a6:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033a8:	229f      	movs	r2, #159	; 0x9f
 80033aa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ac:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033b4:	2204      	movs	r2, #4
 80033b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b8:	4b45      	ldr	r3, [pc, #276]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 80033be:	4b44      	ldr	r3, [pc, #272]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c4:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033cc:	0018      	movs	r0, r3
 80033ce:	f002 fafd 	bl	80059cc <HAL_TIM_Base_Init>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d001      	beq.n	80033da <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80033d6:	f000 fe19 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033da:	2148      	movs	r1, #72	; 0x48
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	0152      	lsls	r2, r2, #5
 80033e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80033e4:	187a      	adds	r2, r7, r1
 80033e6:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f003 f9de 	bl	80067ac <HAL_TIM_ConfigClockSource>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80033f4:	f000 fe0a 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <MX_TIM15_Init+0x174>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f002 fb36 	bl	8005a6c <HAL_TIM_PWM_Init>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003404:	f000 fe02 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2200      	movs	r2, #0
 8003414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003416:	187a      	adds	r2, r7, r1
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <MX_TIM15_Init+0x174>)
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f003 ff35 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d001      	beq.n	800342a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8003426:	f000 fdf1 	bl	800400c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800342a:	2124      	movs	r1, #36	; 0x24
 800342c:	187b      	adds	r3, r7, r1
 800342e:	2260      	movs	r2, #96	; 0x60
 8003430:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003432:	187b      	adds	r3, r7, r1
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003456:	1879      	adds	r1, r7, r1
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <MX_TIM15_Init+0x174>)
 800345a:	2200      	movs	r2, #0
 800345c:	0018      	movs	r0, r3
 800345e:	f003 f8df 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d001      	beq.n	800346a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8003466:	f000 fdd1 	bl	800400c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800346a:	2324      	movs	r3, #36	; 0x24
 800346c:	18f9      	adds	r1, r7, r3
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <MX_TIM15_Init+0x174>)
 8003470:	2204      	movs	r2, #4
 8003472:	0018      	movs	r0, r3
 8003474:	f003 f8d4 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 800347c:	f000 fdc6 	bl	800400c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	2200      	movs	r2, #0
 800348a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	0192      	lsls	r2, r2, #6
 80034a4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	2200      	movs	r2, #0
 80034aa:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80034ac:	1d3a      	adds	r2, r7, #4
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <MX_TIM15_Init+0x174>)
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f003 ff42 	bl	800733c <HAL_TIMEx_ConfigBreakDeadTime>
 80034b8:	1e03      	subs	r3, r0, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 80034bc:	f000 fda6 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <MX_TIM15_Init+0x174>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 fe84 	bl	80041d0 <HAL_TIM_MspPostInit>

}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b016      	add	sp, #88	; 0x58
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	2000028c 	.word	0x2000028c
 80034d4:	40014000 	.word	0x40014000

080034d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <MX_USART3_UART_Init+0x5c>)
 80034e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034e4:	22e1      	movs	r2, #225	; 0xe1
 80034e6:	0252      	lsls	r2, r2, #9
 80034e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034fe:	220c      	movs	r2, #12
 8003500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <MX_USART3_UART_Init+0x58>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_USART3_UART_Init+0x58>)
 800350a:	2200      	movs	r2, #0
 800350c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <MX_USART3_UART_Init+0x58>)
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <MX_USART3_UART_Init+0x58>)
 8003516:	2200      	movs	r2, #0
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <MX_USART3_UART_Init+0x58>)
 800351c:	0018      	movs	r0, r3
 800351e:	f003 ff7b 	bl	8007418 <HAL_UART_Init>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003526:	f000 fd71 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	200002d4 	.word	0x200002d4
 8003534:	40004800 	.word	0x40004800

08003538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <MX_DMA_Init+0x38>)
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <MX_DMA_Init+0x38>)
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <MX_DMA_Init+0x38>)
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	200a      	movs	r0, #10
 800355c:	f001 f9d2 	bl	8004904 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003560:	200a      	movs	r0, #10
 8003562:	f001 f9e4 	bl	800492e <HAL_NVIC_EnableIRQ>

}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	40021000 	.word	0x40021000

08003574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b08b      	sub	sp, #44	; 0x2c
 8003578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357a:	2414      	movs	r4, #20
 800357c:	193b      	adds	r3, r7, r4
 800357e:	0018      	movs	r0, r3
 8003580:	2314      	movs	r3, #20
 8003582:	001a      	movs	r2, r3
 8003584:	2100      	movs	r1, #0
 8003586:	f005 fa25 	bl	80089d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800358a:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <MX_GPIO_Init+0x100>)
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <MX_GPIO_Init+0x100>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0309      	lsls	r1, r1, #12
 8003594:	430a      	orrs	r2, r1
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <MX_GPIO_Init+0x100>)
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	031b      	lsls	r3, r3, #12
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <MX_GPIO_Init+0x100>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	4b32      	ldr	r3, [pc, #200]	; (8003674 <MX_GPIO_Init+0x100>)
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	03c9      	lsls	r1, r1, #15
 80035b0:	430a      	orrs	r2, r1
 80035b2:	615a      	str	r2, [r3, #20]
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <MX_GPIO_Init+0x100>)
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	03db      	lsls	r3, r3, #15
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <MX_GPIO_Init+0x100>)
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <MX_GPIO_Init+0x100>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	02c9      	lsls	r1, r1, #11
 80035cc:	430a      	orrs	r2, r1
 80035ce:	615a      	str	r2, [r3, #20]
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <MX_GPIO_Init+0x100>)
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	02db      	lsls	r3, r3, #11
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b25      	ldr	r3, [pc, #148]	; (8003674 <MX_GPIO_Init+0x100>)
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <MX_GPIO_Init+0x100>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0289      	lsls	r1, r1, #10
 80035e8:	430a      	orrs	r2, r1
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <MX_GPIO_Init+0x100>)
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	4013      	ands	r3, r2
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 80035fa:	491f      	ldr	r1, [pc, #124]	; (8003678 <MX_GPIO_Init+0x104>)
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <MX_GPIO_Init+0x108>)
 80035fe:	2200      	movs	r2, #0
 8003600:	0018      	movs	r0, r3
 8003602:	f001 fd54 	bl	80050ae <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003606:	193b      	adds	r3, r7, r4
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	0192      	lsls	r2, r2, #6
 800360c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800360e:	193b      	adds	r3, r7, r4
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003614:	193b      	adds	r3, r7, r4
 8003616:	2201      	movs	r2, #1
 8003618:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361a:	193b      	adds	r3, r7, r4
 800361c:	4a17      	ldr	r2, [pc, #92]	; (800367c <MX_GPIO_Init+0x108>)
 800361e:	0019      	movs	r1, r3
 8003620:	0010      	movs	r0, r2
 8003622:	f001 fbb7 	bl	8004d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 8003626:	193b      	adds	r3, r7, r4
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <MX_GPIO_Init+0x104>)
 800362a:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362c:	193b      	adds	r3, r7, r4
 800362e:	2201      	movs	r2, #1
 8003630:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	193b      	adds	r3, r7, r4
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	193b      	adds	r3, r7, r4
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800363e:	193b      	adds	r3, r7, r4
 8003640:	4a0e      	ldr	r2, [pc, #56]	; (800367c <MX_GPIO_Init+0x108>)
 8003642:	0019      	movs	r1, r3
 8003644:	0010      	movs	r0, r2
 8003646:	f001 fba5 	bl	8004d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800364a:	0021      	movs	r1, r4
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2200      	movs	r2, #0
 8003656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2201      	movs	r2, #1
 800365c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	187b      	adds	r3, r7, r1
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <MX_GPIO_Init+0x10c>)
 8003662:	0019      	movs	r1, r3
 8003664:	0010      	movs	r0, r2
 8003666:	f001 fb95 	bl	8004d94 <HAL_GPIO_Init>

}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b00b      	add	sp, #44	; 0x2c
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40021000 	.word	0x40021000
 8003678:	0000040f 	.word	0x0000040f
 800367c:	48000800 	.word	0x48000800
 8003680:	48000400 	.word	0x48000400

08003684 <UART_Send>:

/* USER CODE BEGIN 4 */

void UART_Send(const uint8_t message[])
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	while(UART_TX_Busy){};
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <UART_Send+0x38>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1fa      	bne.n	800368e <UART_Send+0xa>
	UART_TX_Busy = 1;
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <UART_Send+0x38>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)message, strlen(message));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fc fd3b 	bl	800011c <strlen>
 80036a6:	0003      	movs	r3, r0
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <UART_Send+0x3c>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f003 ffb0 	bl	8007614 <HAL_UART_Transmit_DMA>
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	200004d8 	.word	0x200004d8
 80036c0:	200002d4 	.word	0x200002d4

080036c4 <drv_messageCheck>:

void drv_messageCheck(const char message[])
{
 80036c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c6:	b09b      	sub	sp, #108	; 0x6c
 80036c8:	af06      	add	r7, sp, #24
 80036ca:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <drv_messageCheck+0x184>)
 80036d0:	0011      	movs	r1, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f006 f896 	bl	8009804 <strcpy>

	uint8_t MSG[5] = {'\0'};
 80036d8:	2548      	movs	r5, #72	; 0x48
 80036da:	197b      	adds	r3, r7, r5
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	711a      	strb	r2, [r3, #4]
	int arw1=0, arw2=0, arw3=0, arw4=0, motor_brk=0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	647b      	str	r3, [r7, #68]	; 0x44
 80036e8:	2300      	movs	r3, #0
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
 80036ec:	2300      	movs	r3, #0
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f0:	2300      	movs	r3, #0
 80036f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f4:	2300      	movs	r3, #0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
	int turn = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
	sscanf(cmd_buf, "%s %d %d %d %d %d %d", &MSG, &arw1, &arw2, &arw3, &arw4, &turn, &motor_brk);
 80036fc:	2344      	movs	r3, #68	; 0x44
 80036fe:	18fc      	adds	r4, r7, r3
 8003700:	197a      	adds	r2, r7, r5
 8003702:	4952      	ldr	r1, [pc, #328]	; (800384c <drv_messageCheck+0x188>)
 8003704:	4850      	ldr	r0, [pc, #320]	; (8003848 <drv_messageCheck+0x184>)
 8003706:	2334      	movs	r3, #52	; 0x34
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	9304      	str	r3, [sp, #16]
 800370c:	2330      	movs	r3, #48	; 0x30
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	2338      	movs	r3, #56	; 0x38
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	233c      	movs	r3, #60	; 0x3c
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	0023      	movs	r3, r4
 8003726:	f005 fff7 	bl	8009718 <siscanf>
	if (!strcmp(MSG, "[drv]")) // returns 0 if strings are equal
 800372a:	4a49      	ldr	r2, [pc, #292]	; (8003850 <drv_messageCheck+0x18c>)
 800372c:	197b      	adds	r3, r7, r5
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f7fc fce9 	bl	8000108 <strcmp>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d000      	beq.n	800373c <drv_messageCheck+0x78>
 800373a:	e080      	b.n	800383e <drv_messageCheck+0x17a>
	{
		uint8_t reply[40] = {'\0'};
 800373c:	2408      	movs	r4, #8
 800373e:	193b      	adds	r3, r7, r4
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	3304      	adds	r3, #4
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	2100      	movs	r1, #0
 800374a:	0018      	movs	r0, r3
 800374c:	f005 f942 	bl	80089d4 <memset>
		sprintf(reply, "received: %d %d %d %d %d %d \n", arw1, arw2, arw3, arw4, turn, motor_brk);
 8003750:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	469c      	mov	ip, r3
 8003756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800375c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800375e:	4d3d      	ldr	r5, [pc, #244]	; (8003854 <drv_messageCheck+0x190>)
 8003760:	193c      	adds	r4, r7, r4
 8003762:	9003      	str	r0, [sp, #12]
 8003764:	9102      	str	r1, [sp, #8]
 8003766:	9201      	str	r2, [sp, #4]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4663      	mov	r3, ip
 800376c:	0032      	movs	r2, r6
 800376e:	0029      	movs	r1, r5
 8003770:	0020      	movs	r0, r4
 8003772:	f005 ffb1 	bl	80096d8 <siprintf>
		UART_Send(reply);
 8003776:	2408      	movs	r4, #8
 8003778:	193b      	adds	r3, r7, r4
 800377a:	0018      	movs	r0, r3
 800377c:	f7ff ff82 	bl	8003684 <UART_Send>

		// Since only 1 break pin is used, it is enough to call this function for only 1 wheel
		motor_break(pMW[0], motor_brk);
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <drv_messageCheck+0x194>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f7fe feb0 	bl	80024f0 <motor_break>

		// Direction is set separately for left and right sided wheels
		if (arw1 < 0 && arw3 < 0)
 8003790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003792:	2b00      	cmp	r3, #0
 8003794:	da09      	bge.n	80037aa <drv_messageCheck+0xe6>
 8003796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	da06      	bge.n	80037aa <drv_messageCheck+0xe6>
		{
			motor_DIR(pMW[0], 1); // set direction to backward
 800379c:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <drv_messageCheck+0x194>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2101      	movs	r1, #1
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fe fe62 	bl	800246c <motor_DIR>
 80037a8:	e005      	b.n	80037b6 <drv_messageCheck+0xf2>
		}
		else
		{
			motor_DIR(pMW[0], 0); // set direction to forward
 80037aa:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <drv_messageCheck+0x194>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2100      	movs	r1, #0
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fe fe5b 	bl	800246c <motor_DIR>
		}
		if (arw2 < 0 && arw4 < 0)
 80037b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da09      	bge.n	80037d0 <drv_messageCheck+0x10c>
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da06      	bge.n	80037d0 <drv_messageCheck+0x10c>
		{
			motor_DIR(pMW[1], 1); // set direction to backward
 80037c2:	4b25      	ldr	r3, [pc, #148]	; (8003858 <drv_messageCheck+0x194>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2101      	movs	r1, #1
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fe fe4f 	bl	800246c <motor_DIR>
 80037ce:	e005      	b.n	80037dc <drv_messageCheck+0x118>
		}
		else
		{
			motor_DIR(pMW[1], 0); // set direction to forward
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <drv_messageCheck+0x194>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2100      	movs	r1, #0
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7fe fe48 	bl	800246c <motor_DIR>
		}

		motorPWM_pulse(&htim1, pMW[0], arw1 );
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <drv_messageCheck+0x194>)
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <drv_messageCheck+0x198>)
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fe fdff 	bl	80023e8 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[1], arw2 );
 80037ea:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <drv_messageCheck+0x194>)
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <drv_messageCheck+0x198>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7fe fdf8 	bl	80023e8 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[2], arw3 );
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <drv_messageCheck+0x194>)
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <drv_messageCheck+0x198>)
 8003800:	0018      	movs	r0, r3
 8003802:	f7fe fdf1 	bl	80023e8 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[3], arw4 );
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <drv_messageCheck+0x194>)
 8003808:	68d9      	ldr	r1, [r3, #12]
 800380a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <drv_messageCheck+0x198>)
 800380e:	0018      	movs	r0, r3
 8003810:	f7fe fdea 	bl	80023e8 <motorPWM_pulse>

		// Positive turn direction is RIGHT
		if (abs(turn) > 25)
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	17da      	asrs	r2, r3, #31
 8003818:	189b      	adds	r3, r3, r2
 800381a:	4053      	eors	r3, r2
 800381c:	2b19      	cmp	r3, #25
 800381e:	dd07      	ble.n	8003830 <drv_messageCheck+0x16c>
		{
			turn = turn / abs(turn) * 25;
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	2b00      	cmp	r3, #0
 8003824:	da02      	bge.n	800382c <drv_messageCheck+0x168>
 8003826:	2319      	movs	r3, #25
 8003828:	425b      	negs	r3, r3
 800382a:	e000      	b.n	800382e <drv_messageCheck+0x16a>
 800382c:	2319      	movs	r3, #25
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
		}
		calculate_pulses(turn, -turn);
 8003830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	425b      	negs	r3, r3
 8003836:	0019      	movs	r1, r3
 8003838:	0010      	movs	r0, r2
 800383a:	f000 f90f 	bl	8003a5c <calculate_pulses>
		//linear_motor_set_target(pLM[0], turn);
		//linear_motor_set_target(pLM[1], turn);
		//linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
		//linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
	}
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b015      	add	sp, #84	; 0x54
 8003844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	20000538 	.word	0x20000538
 800384c:	0800de0c 	.word	0x0800de0c
 8003850:	0800de24 	.word	0x0800de24
 8003854:	0800de2c 	.word	0x0800de2c
 8003858:	200004fc 	.word	0x200004fc
 800385c:	200001fc 	.word	0x200001fc

08003860 <cal_messageCheck>:

void cal_messageCheck(const char message[])
{
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <cal_messageCheck+0xa4>)
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f005 ffc8 	bl	8009804 <strcpy>

	uint8_t MSG[5] = {'\0'};
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	711a      	strb	r2, [r3, #4]
	sscanf(cmd_buf, "%s", &MSG);
 8003880:	000c      	movs	r4, r1
 8003882:	187a      	adds	r2, r7, r1
 8003884:	4920      	ldr	r1, [pc, #128]	; (8003908 <cal_messageCheck+0xa8>)
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <cal_messageCheck+0xa4>)
 8003888:	0018      	movs	r0, r3
 800388a:	f005 ff45 	bl	8009718 <siscanf>
	if (!strcmp(MSG, "[cal]")) // returns 0 if strings are equal
 800388e:	4a1f      	ldr	r2, [pc, #124]	; (800390c <cal_messageCheck+0xac>)
 8003890:	193b      	adds	r3, r7, r4
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f7fc fc37 	bl	8000108 <strcmp>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d12e      	bne.n	80038fc <cal_messageCheck+0x9c>
	{
		uint8_t reply[] = "received calibration command\n";
 800389e:	200c      	movs	r0, #12
 80038a0:	183b      	adds	r3, r7, r0
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <cal_messageCheck+0xb0>)
 80038a4:	ca32      	ldmia	r2!, {r1, r4, r5}
 80038a6:	c332      	stmia	r3!, {r1, r4, r5}
 80038a8:	ca32      	ldmia	r2!, {r1, r4, r5}
 80038aa:	c332      	stmia	r3!, {r1, r4, r5}
 80038ac:	6811      	ldr	r1, [r2, #0]
 80038ae:	6019      	str	r1, [r3, #0]
 80038b0:	8892      	ldrh	r2, [r2, #4]
 80038b2:	809a      	strh	r2, [r3, #4]
		UART_Send(reply);
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff fee4 	bl	8003684 <UART_Send>
		uint32_t flag = linear_motor_calibrate(pLM[0], &htim15, &linearPulse_1);
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <cal_messageCheck+0xb4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <cal_messageCheck+0xb8>)
 80038c2:	4916      	ldr	r1, [pc, #88]	; (800391c <cal_messageCheck+0xbc>)
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fe ff13 	bl	80026f0 <linear_motor_calibrate>
 80038ca:	0003      	movs	r3, r0
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
		if (flag == 0)
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <cal_messageCheck+0x7c>
		{
			UART_Send("Front motor calibration timed out! Check for mechanical problems and repeat calibration.");
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <cal_messageCheck+0xc0>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7ff fed4 	bl	8003684 <UART_Send>
		}
		flag = linear_motor_calibrate(pLM[1], &htim15, &linearPulse_2);
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <cal_messageCheck+0xb4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a10      	ldr	r2, [pc, #64]	; (8003924 <cal_messageCheck+0xc4>)
 80038e2:	490e      	ldr	r1, [pc, #56]	; (800391c <cal_messageCheck+0xbc>)
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fe ff03 	bl	80026f0 <linear_motor_calibrate>
 80038ea:	0003      	movs	r3, r0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
		if (flag == 0)
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <cal_messageCheck+0x9c>
		{
			UART_Send("Rear motor calibration timed out! Check for mechanical problems and repeat calibration.");
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <cal_messageCheck+0xc8>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7ff fec4 	bl	8003684 <UART_Send>
		}
	}
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b00e      	add	sp, #56	; 0x38
 8003902:	bdb0      	pop	{r4, r5, r7, pc}
 8003904:	2000059c 	.word	0x2000059c
 8003908:	0800de4c 	.word	0x0800de4c
 800390c:	0800de50 	.word	0x0800de50
 8003910:	0800df0c 	.word	0x0800df0c
 8003914:	20000524 	.word	0x20000524
 8003918:	2000052c 	.word	0x2000052c
 800391c:	2000028c 	.word	0x2000028c
 8003920:	0800de58 	.word	0x0800de58
 8003924:	20000530 	.word	0x20000530
 8003928:	0800deb4 	.word	0x0800deb4

0800392c <calculate_angles>:

void calculate_angles(float *frontAngle, float *rearAngle)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	int32_t posFront = linear_motor_get_position(pLM[0]);
 8003936:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <calculate_angles+0xfc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0018      	movs	r0, r3
 800393c:	f7fe fe40 	bl	80025c0 <linear_motor_get_position>
 8003940:	0003      	movs	r3, r0
 8003942:	60fb      	str	r3, [r7, #12]
	int32_t posRear = linear_motor_get_position(pLM[1]);
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <calculate_angles+0xfc>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f7fe fe39 	bl	80025c0 <linear_motor_get_position>
 800394e:	0003      	movs	r3, r0
 8003950:	60bb      	str	r3, [r7, #8]

	*frontAngle = round((posFront - 75.5498) / (- 253.6124));
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7fe fbb2 	bl	80020bc <__aeabi_i2d>
 8003958:	4a34      	ldr	r2, [pc, #208]	; (8003a2c <calculate_angles+0x100>)
 800395a:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <calculate_angles+0x104>)
 800395c:	f7fd ffc8 	bl	80018f0 <__aeabi_dsub>
 8003960:	0002      	movs	r2, r0
 8003962:	000b      	movs	r3, r1
 8003964:	0010      	movs	r0, r2
 8003966:	0019      	movs	r1, r3
 8003968:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <calculate_angles+0x108>)
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <calculate_angles+0x10c>)
 800396c:	f7fd f952 	bl	8000c14 <__aeabi_ddiv>
 8003970:	0002      	movs	r2, r0
 8003972:	000b      	movs	r3, r1
 8003974:	0010      	movs	r0, r2
 8003976:	0019      	movs	r1, r3
 8003978:	f00a f9ce 	bl	800dd18 <round>
 800397c:	0002      	movs	r2, r0
 800397e:	000b      	movs	r3, r1
 8003980:	0010      	movs	r0, r2
 8003982:	0019      	movs	r1, r3
 8003984:	f7fe fc38 	bl	80021f8 <__aeabi_d2f>
 8003988:	1c02      	adds	r2, r0, #0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	601a      	str	r2, [r3, #0]
	if (posRear > 0)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	dd1e      	ble.n	80039d2 <calculate_angles+0xa6>
	{
		*rearAngle = round((posRear + 159.8128) / (242.2376));
 8003994:	68b8      	ldr	r0, [r7, #8]
 8003996:	f7fe fb91 	bl	80020bc <__aeabi_i2d>
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <calculate_angles+0x110>)
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <calculate_angles+0x114>)
 800399e:	f7fc fdfd 	bl	800059c <__aeabi_dadd>
 80039a2:	0002      	movs	r2, r0
 80039a4:	000b      	movs	r3, r1
 80039a6:	0010      	movs	r0, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <calculate_angles+0x118>)
 80039ac:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <calculate_angles+0x11c>)
 80039ae:	f7fd f931 	bl	8000c14 <__aeabi_ddiv>
 80039b2:	0002      	movs	r2, r0
 80039b4:	000b      	movs	r3, r1
 80039b6:	0010      	movs	r0, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	f00a f9ad 	bl	800dd18 <round>
 80039be:	0002      	movs	r2, r0
 80039c0:	000b      	movs	r3, r1
 80039c2:	0010      	movs	r0, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	f7fe fc17 	bl	80021f8 <__aeabi_d2f>
 80039ca:	1c02      	adds	r2, r0, #0
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e020      	b.n	8003a14 <calculate_angles+0xe8>
	}
	else if (posRear < 0)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da1d      	bge.n	8003a14 <calculate_angles+0xe8>
	{
		*rearAngle = round((posRear + 332.1803) / (314.4046));
 80039d8:	68b8      	ldr	r0, [r7, #8]
 80039da:	f7fe fb6f 	bl	80020bc <__aeabi_i2d>
 80039de:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <calculate_angles+0x120>)
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <calculate_angles+0x124>)
 80039e2:	f7fc fddb 	bl	800059c <__aeabi_dadd>
 80039e6:	0002      	movs	r2, r0
 80039e8:	000b      	movs	r3, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <calculate_angles+0x128>)
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <calculate_angles+0x12c>)
 80039f2:	f7fd f90f 	bl	8000c14 <__aeabi_ddiv>
 80039f6:	0002      	movs	r2, r0
 80039f8:	000b      	movs	r3, r1
 80039fa:	0010      	movs	r0, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	f00a f98b 	bl	800dd18 <round>
 8003a02:	0002      	movs	r2, r0
 8003a04:	000b      	movs	r3, r1
 8003a06:	0010      	movs	r0, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	f7fe fbf5 	bl	80021f8 <__aeabi_d2f>
 8003a0e:	1c02      	adds	r2, r0, #0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	601a      	str	r2, [r3, #0]
	}
	if (posRear == 0)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <calculate_angles+0xf4>
	{
		*rearAngle = 0;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
	}

}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000524 	.word	0x20000524
 8003a2c:	ec56d5d0 	.word	0xec56d5d0
 8003a30:	4052e32f 	.word	0x4052e32f
 8003a34:	c7e28241 	.word	0xc7e28241
 8003a38:	c06fb398 	.word	0xc06fb398
 8003a3c:	7525460b 	.word	0x7525460b
 8003a40:	4063fa02 	.word	0x4063fa02
 8003a44:	6b50b0f2 	.word	0x6b50b0f2
 8003a48:	406e479a 	.word	0x406e479a
 8003a4c:	8240b780 	.word	0x8240b780
 8003a50:	4074c2e2 	.word	0x4074c2e2
 8003a54:	3dd97f63 	.word	0x3dd97f63
 8003a58:	4073a679 	.word	0x4073a679

08003a5c <calculate_pulses>:

void calculate_pulses(int32_t frontAngle, int32_t rearAngle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	int32_t pulses_front = -253.6124 * frontAngle + 75.5498;
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fb28 	bl	80020bc <__aeabi_i2d>
 8003a6c:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <calculate_pulses+0xe8>)
 8003a6e:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <calculate_pulses+0xec>)
 8003a70:	f7fd fcd2 	bl	8001418 <__aeabi_dmul>
 8003a74:	0002      	movs	r2, r0
 8003a76:	000b      	movs	r3, r1
 8003a78:	0010      	movs	r0, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	4a33      	ldr	r2, [pc, #204]	; (8003b4c <calculate_pulses+0xf0>)
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <calculate_pulses+0xf4>)
 8003a80:	f7fc fd8c 	bl	800059c <__aeabi_dadd>
 8003a84:	0002      	movs	r2, r0
 8003a86:	000b      	movs	r3, r1
 8003a88:	0010      	movs	r0, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	f7fe fae0 	bl	8002050 <__aeabi_d2iz>
 8003a90:	0003      	movs	r3, r0
 8003a92:	60bb      	str	r3, [r7, #8]
	int32_t pulses_rear = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
	if (rearAngle > 0)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	dd17      	ble.n	8003ace <calculate_pulses+0x72>
	{
		pulses_rear = 242.2376 * rearAngle - 159.8128;
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f7fe fb0c 	bl	80020bc <__aeabi_i2d>
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <calculate_pulses+0xf8>)
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <calculate_pulses+0xfc>)
 8003aa8:	f7fd fcb6 	bl	8001418 <__aeabi_dmul>
 8003aac:	0002      	movs	r2, r0
 8003aae:	000b      	movs	r3, r1
 8003ab0:	0010      	movs	r0, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	4a29      	ldr	r2, [pc, #164]	; (8003b5c <calculate_pulses+0x100>)
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <calculate_pulses+0x104>)
 8003ab8:	f7fd ff1a 	bl	80018f0 <__aeabi_dsub>
 8003abc:	0002      	movs	r2, r0
 8003abe:	000b      	movs	r3, r1
 8003ac0:	0010      	movs	r0, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f7fe fac4 	bl	8002050 <__aeabi_d2iz>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e019      	b.n	8003b02 <calculate_pulses+0xa6>
	}
	else if (rearAngle < 0)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da16      	bge.n	8003b02 <calculate_pulses+0xa6>
	{
		pulses_rear = 314.4046 * rearAngle - 332.1803;
 8003ad4:	6838      	ldr	r0, [r7, #0]
 8003ad6:	f7fe faf1 	bl	80020bc <__aeabi_i2d>
 8003ada:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <calculate_pulses+0x108>)
 8003adc:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <calculate_pulses+0x10c>)
 8003ade:	f7fd fc9b 	bl	8001418 <__aeabi_dmul>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	000b      	movs	r3, r1
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <calculate_pulses+0x110>)
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <calculate_pulses+0x114>)
 8003aee:	f7fd feff 	bl	80018f0 <__aeabi_dsub>
 8003af2:	0002      	movs	r2, r0
 8003af4:	000b      	movs	r3, r1
 8003af6:	0010      	movs	r0, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	f7fe faa9 	bl	8002050 <__aeabi_d2iz>
 8003afe:	0003      	movs	r3, r0
 8003b00:	60fb      	str	r3, [r7, #12]
	}

	// Positive turn direction is RIGHT
	linear_motor_set_target(pLM[0], pulses_front);
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <calculate_pulses+0x118>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	0011      	movs	r1, r2
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7fe fd3a 	bl	8002584 <linear_motor_set_target>
	linear_motor_set_target(pLM[1], pulses_rear);
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <calculate_pulses+0x118>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7fe fd33 	bl	8002584 <linear_motor_set_target>
	linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <calculate_pulses+0x118>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <calculate_pulses+0x11c>)
 8003b24:	4915      	ldr	r1, [pc, #84]	; (8003b7c <calculate_pulses+0x120>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fe fd54 	bl	80025d4 <linear_motor_pulse>
	linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <calculate_pulses+0x118>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <calculate_pulses+0x124>)
 8003b32:	4912      	ldr	r1, [pc, #72]	; (8003b7c <calculate_pulses+0x120>)
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7fe fd4d 	bl	80025d4 <linear_motor_pulse>
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	c7e28241 	.word	0xc7e28241
 8003b48:	c06fb398 	.word	0xc06fb398
 8003b4c:	ec56d5d0 	.word	0xec56d5d0
 8003b50:	4052e32f 	.word	0x4052e32f
 8003b54:	6b50b0f2 	.word	0x6b50b0f2
 8003b58:	406e479a 	.word	0x406e479a
 8003b5c:	7525460b 	.word	0x7525460b
 8003b60:	4063fa02 	.word	0x4063fa02
 8003b64:	3dd97f63 	.word	0x3dd97f63
 8003b68:	4073a679 	.word	0x4073a679
 8003b6c:	8240b780 	.word	0x8240b780
 8003b70:	4074c2e2 	.word	0x4074c2e2
 8003b74:	20000524 	.word	0x20000524
 8003b78:	2000052c 	.word	0x2000052c
 8003b7c:	2000028c 	.word	0x2000028c
 8003b80:	20000530 	.word	0x20000530

08003b84 <HAL_TIM_PWM_PulseFinishedCallback>:

// Linear Motors Timers
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d12e      	bne.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7f1b      	ldrb	r3, [r3, #28]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d113      	bne.n	8003bc4 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 8003b9c:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	1e5a      	subs	r2, r3, #1
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003bac:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 8003bae:	e020      	b.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003bba:	2100      	movs	r1, #0
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f002 f959 	bl	8005e74 <HAL_TIM_PWM_Stop_IT>
}
 8003bc2:	e016      	b.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7f1b      	ldrb	r3, [r3, #28]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d112      	bne.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	e008      	b.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003bea:	2104      	movs	r1, #4
 8003bec:	0018      	movs	r0, r3
 8003bee:	f002 f941 	bl	8005e74 <HAL_TIM_PWM_Stop_IT>
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	2000028c 	.word	0x2000028c
 8003c00:	2000052c 	.word	0x2000052c
 8003c04:	20000530 	.word	0x20000530

08003c08 <HAL_TIM_IC_CaptureCallback>:

// ENCODERS READING
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4aa9      	ldr	r2, [pc, #676]	; (8003ebc <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d000      	beq.n	8003c1c <HAL_TIM_IC_CaptureCallback+0x14>
 8003c1a:	e14a      	b.n	8003eb2 <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7f1b      	ldrb	r3, [r3, #28]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d14e      	bne.n	8003cc2 <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8003c24:	4ba6      	ldr	r3, [pc, #664]	; (8003ec0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003c26:	2100      	movs	r1, #0
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f002 fe93 	bl	8006954 <HAL_TIM_ReadCapturedValue>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	4ba4      	ldr	r3, [pc, #656]	; (8003ec4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003c32:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 8003c34:	4ba3      	ldr	r3, [pc, #652]	; (8003ec4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4ba3      	ldr	r3, [pc, #652]	; (8003ec8 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d93b      	bls.n	8003cb8 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 8003c40:	4ba2      	ldr	r3, [pc, #648]	; (8003ecc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e01a      	b.n	8003c82 <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	4b9f      	ldr	r3, [pc, #636]	; (8003ed0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	58d1      	ldr	r1, [r2, r3]
 8003c56:	4b9e      	ldr	r3, [pc, #632]	; (8003ed0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	0092      	lsls	r2, r2, #2
 8003c5c:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 8003c5e:	4b9c      	ldr	r3, [pc, #624]	; (8003ed0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	58d3      	ldr	r3, [r2, r3]
 8003c66:	2105      	movs	r1, #5
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7fc fa73 	bl	8000154 <__udivsi3>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	001a      	movs	r2, r3
 8003c72:	4b96      	ldr	r3, [pc, #600]	; (8003ecc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	18d2      	adds	r2, r2, r3
 8003c78:	4b94      	ldr	r3, [pc, #592]	; (8003ecc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003c7a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	dde1      	ble.n	8003c4c <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 8003c88:	4b8e      	ldr	r3, [pc, #568]	; (8003ec4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b8e      	ldr	r3, [pc, #568]	; (8003ec8 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1ad2      	subs	r2, r2, r3
 8003c92:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003c94:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 8003c96:	4b8e      	ldr	r3, [pc, #568]	; (8003ed0 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2105      	movs	r1, #5
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fc fa59 	bl	8000154 <__udivsi3>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	4b89      	ldr	r3, [pc, #548]	; (8003ecc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	18d2      	adds	r2, r2, r3
 8003cac:	4b87      	ldr	r3, [pc, #540]	; (8003ecc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003cae:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 8003cb0:	4b86      	ldr	r3, [pc, #536]	; (8003ecc <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b87      	ldr	r3, [pc, #540]	; (8003ed4 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8003cb6:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 8003cb8:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003cbe:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 8003cc0:	e0f7      	b.n	8003eb2 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7f1b      	ldrb	r3, [r3, #28]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d14e      	bne.n	8003d68 <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8003cca:	4b7d      	ldr	r3, [pc, #500]	; (8003ec0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003ccc:	2104      	movs	r1, #4
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f002 fe40 	bl	8006954 <HAL_TIM_ReadCapturedValue>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003cd8:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 8003cda:	4b7f      	ldr	r3, [pc, #508]	; (8003ed8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d93b      	bls.n	8003d5e <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e01a      	b.n	8003d28 <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	58d1      	ldr	r1, [r2, r3]
 8003cfc:	4b79      	ldr	r3, [pc, #484]	; (8003ee4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 8003d04:	4b77      	ldr	r3, [pc, #476]	; (8003ee4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	58d3      	ldr	r3, [r2, r3]
 8003d0c:	2105      	movs	r1, #5
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7fc fa20 	bl	8000154 <__udivsi3>
 8003d14:	0003      	movs	r3, r0
 8003d16:	001a      	movs	r2, r3
 8003d18:	4b71      	ldr	r3, [pc, #452]	; (8003ee0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	18d2      	adds	r2, r2, r3
 8003d1e:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d20:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	3301      	adds	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	dde1      	ble.n	8003cf2 <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d3a:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 8003d3c:	4b69      	ldr	r3, [pc, #420]	; (8003ee4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2105      	movs	r1, #5
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fc fa06 	bl	8000154 <__udivsi3>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	18d2      	adds	r2, r2, r3
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d54:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 8003d56:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8003d5c:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 8003d5e:	4b5e      	ldr	r3, [pc, #376]	; (8003ed8 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003d64:	601a      	str	r2, [r3, #0]
}
 8003d66:	e0a4      	b.n	8003eb2 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7f1b      	ldrb	r3, [r3, #28]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d14e      	bne.n	8003e0e <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003d72:	2108      	movs	r1, #8
 8003d74:	0018      	movs	r0, r3
 8003d76:	f002 fded 	bl	8006954 <HAL_TIM_ReadCapturedValue>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	4b5b      	ldr	r3, [pc, #364]	; (8003eec <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003d7e:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 8003d80:	4b5a      	ldr	r3, [pc, #360]	; (8003eec <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b5a      	ldr	r3, [pc, #360]	; (8003ef0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d93b      	bls.n	8003e04 <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e01a      	b.n	8003dce <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	58d1      	ldr	r1, [r2, r3]
 8003da2:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	0092      	lsls	r2, r2, #2
 8003da8:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	58d3      	ldr	r3, [r2, r3]
 8003db2:	2105      	movs	r1, #5
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7fc f9cd 	bl	8000154 <__udivsi3>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	18d2      	adds	r2, r2, r3
 8003dc4:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003dc6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	dde1      	ble.n	8003d98 <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003de0:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 8003de2:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2105      	movs	r1, #5
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc f9b3 	bl	8000154 <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	001a      	movs	r2, r3
 8003df2:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	18d2      	adds	r2, r2, r3
 8003df8:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003dfa:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8003e02:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 8003e04:	4b39      	ldr	r3, [pc, #228]	; (8003eec <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003e0a:	601a      	str	r2, [r3, #0]
}
 8003e0c:	e051      	b.n	8003eb2 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7f1b      	ldrb	r3, [r3, #28]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d14d      	bne.n	8003eb2 <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8003e16:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003e18:	210c      	movs	r1, #12
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f002 fd9a 	bl	8006954 <HAL_TIM_ReadCapturedValue>
 8003e20:	0002      	movs	r2, r0
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003e24:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d93b      	bls.n	8003eaa <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 8003e32:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e01a      	b.n	8003e74 <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	58d1      	ldr	r1, [r2, r3]
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	0092      	lsls	r2, r2, #2
 8003e4e:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 8003e50:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	0092      	lsls	r2, r2, #2
 8003e56:	58d3      	ldr	r3, [r2, r3]
 8003e58:	2105      	movs	r1, #5
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fc f97a 	bl	8000154 <__udivsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	001a      	movs	r2, r3
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	18d2      	adds	r2, r2, r3
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003e6c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	dde1      	ble.n	8003e3e <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	1ad2      	subs	r2, r2, r3
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e86:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2105      	movs	r1, #5
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fc f960 	bl	8000154 <__udivsi3>
 8003e94:	0003      	movs	r3, r0
 8003e96:	001a      	movs	r2, r3
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	18d2      	adds	r2, r2, r3
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003ea0:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_TIM_IC_CaptureCallback+0x308>)
 8003ea8:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b006      	add	sp, #24
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	20000244 	.word	0x20000244
 8003ec4:	200003e8 	.word	0x200003e8
 8003ec8:	200003e4 	.word	0x200003e4
 8003ecc:	200003ec 	.word	0x200003ec
 8003ed0:	200003f0 	.word	0x200003f0
 8003ed4:	200003e0 	.word	0x200003e0
 8003ed8:	2000040c 	.word	0x2000040c
 8003edc:	20000408 	.word	0x20000408
 8003ee0:	20000410 	.word	0x20000410
 8003ee4:	20000414 	.word	0x20000414
 8003ee8:	20000404 	.word	0x20000404
 8003eec:	20000430 	.word	0x20000430
 8003ef0:	2000042c 	.word	0x2000042c
 8003ef4:	20000434 	.word	0x20000434
 8003ef8:	20000438 	.word	0x20000438
 8003efc:	20000428 	.word	0x20000428
 8003f00:	20000454 	.word	0x20000454
 8003f04:	20000450 	.word	0x20000450
 8003f08:	20000458 	.word	0x20000458
 8003f0c:	2000045c 	.word	0x2000045c
 8003f10:	2000044c 	.word	0x2000044c

08003f14 <HAL_UART_TxCpltCallback>:

// --------------------------------------

// UART Processing
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	UART_TX_Busy = 0;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <HAL_UART_TxCpltCallback+0x18>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b002      	add	sp, #8
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	200004d8 	.word	0x200004d8

08003f30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3 && UART_newMessage != 1 && Init_Done == 1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ff0 <HAL_UART_RxCpltCallback+0xc0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d151      	bne.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
 8003f42:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <HAL_UART_RxCpltCallback+0xc4>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d04d      	beq.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_UART_RxCpltCallback+0xc8>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d149      	bne.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_UART_RxCpltCallback+0xcc>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b0a      	cmp	r3, #10
 8003f58:	d11a      	bne.n	8003f90 <HAL_UART_RxCpltCallback+0x60>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_UART_RxCpltCallback+0xd0>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d112      	bne.n	8003f88 <HAL_UART_RxCpltCallback+0x58>
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	5e9b      	ldrsh	r3, [r3, r2]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <HAL_UART_RxCpltCallback+0x58>
			{
				rxString[UART2_rxindex] = 0;
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	5e9b      	ldrsh	r3, [r3, r2]
 8003f72:	001a      	movs	r2, r3
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_UART_RxCpltCallback+0xd8>)
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 8003f80:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <HAL_UART_RxCpltCallback+0xc4>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]



	}

}
 8003f86:	e02e      	b.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_UART_RxCpltCallback+0xd0>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
}
 8003f8e:	e02a      	b.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_UART_RxCpltCallback+0xcc>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b0d      	cmp	r3, #13
 8003f96:	d026      	beq.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_UART_RxCpltCallback+0xd0>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d122      	bne.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 8003fa0:	4b18      	ldr	r3, [pc, #96]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <HAL_UART_RxCpltCallback+0xcc>)
 8003faa:	7819      	ldrb	r1, [r3, #0]
 8003fac:	4b16      	ldr	r3, [pc, #88]	; (8004008 <HAL_UART_RxCpltCallback+0xd8>)
 8003fae:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	b21a      	sxth	r2, r3
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003fc0:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	5e9b      	ldrsh	r3, [r3, r2]
 8003fc8:	2b63      	cmp	r3, #99	; 0x63
 8003fca:	dd0c      	ble.n	8003fe6 <HAL_UART_RxCpltCallback+0xb6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_UART_RxCpltCallback+0xd0>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_UART_RxCpltCallback+0xd4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	5e9b      	ldrsh	r3, [r3, r2]
 8003fde:	001a      	movs	r2, r3
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_UART_RxCpltCallback+0xd8>)
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b002      	add	sp, #8
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	40004800 	.word	0x40004800
 8003ff4:	20000471 	.word	0x20000471
 8003ff8:	20000534 	.word	0x20000534
 8003ffc:	20000470 	.word	0x20000470
 8004000:	20000600 	.word	0x20000600
 8004004:	20000602 	.word	0x20000602
 8004008:	20000474 	.word	0x20000474

0800400c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004010:	b672      	cpsid	i
}
 8004012:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004014:	e7fe      	b.n	8004014 <Error_Handler+0x8>
	...

08004018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_MspInit+0x44>)
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_MspInit+0x44>)
 8004024:	2101      	movs	r1, #1
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_MspInit+0x44>)
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2201      	movs	r2, #1
 8004030:	4013      	ands	r3, r2
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_MspInit+0x44>)
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_MspInit+0x44>)
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0549      	lsls	r1, r1, #21
 8004040:	430a      	orrs	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_MspInit+0x44>)
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	055b      	lsls	r3, r3, #21
 800404c:	4013      	ands	r3, r2
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_TIM_Base_MspInit+0x70>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10e      	bne.n	8004090 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_TIM_Base_MspInit+0x74>)
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_TIM_Base_MspInit+0x74>)
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	0109      	lsls	r1, r1, #4
 800407c:	430a      	orrs	r2, r1
 800407e:	619a      	str	r2, [r3, #24]
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_TIM_Base_MspInit+0x74>)
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800408e:	e01a      	b.n	80040c6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <HAL_TIM_Base_MspInit+0x78>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d115      	bne.n	80040c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_TIM_Base_MspInit+0x74>)
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_TIM_Base_MspInit+0x74>)
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	0249      	lsls	r1, r1, #9
 80040a4:	430a      	orrs	r2, r1
 80040a6:	619a      	str	r2, [r3, #24]
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_TIM_Base_MspInit+0x74>)
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	4013      	ands	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80040b6:	2200      	movs	r2, #0
 80040b8:	2100      	movs	r1, #0
 80040ba:	2014      	movs	r0, #20
 80040bc:	f000 fc22 	bl	8004904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80040c0:	2014      	movs	r0, #20
 80040c2:	f000 fc34 	bl	800492e <HAL_NVIC_EnableIRQ>
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40014000 	.word	0x40014000

080040dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b08b      	sub	sp, #44	; 0x2c
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e4:	2414      	movs	r4, #20
 80040e6:	193b      	adds	r3, r7, r4
 80040e8:	0018      	movs	r0, r3
 80040ea:	2314      	movs	r3, #20
 80040ec:	001a      	movs	r2, r3
 80040ee:	2100      	movs	r1, #0
 80040f0:	f004 fc70 	bl	80089d4 <memset>
  if(htim_ic->Instance==TIM3)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a31      	ldr	r2, [pc, #196]	; (80041c0 <HAL_TIM_IC_MspInit+0xe4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d15b      	bne.n	80041b6 <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004104:	2102      	movs	r1, #2
 8004106:	430a      	orrs	r2, r1
 8004108:	61da      	str	r2, [r3, #28]
 800410a:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004116:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 800411c:	2180      	movs	r1, #128	; 0x80
 800411e:	02c9      	lsls	r1, r1, #11
 8004120:	430a      	orrs	r2, r1
 8004122:	615a      	str	r2, [r3, #20]
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	02db      	lsls	r3, r3, #11
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0309      	lsls	r1, r1, #12
 800413c:	430a      	orrs	r2, r1
 800413e:	615a      	str	r2, [r3, #20]
 8004140:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_TIM_IC_MspInit+0xe8>)
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	031b      	lsls	r3, r3, #12
 8004148:	4013      	ands	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800414e:	193b      	adds	r3, r7, r4
 8004150:	2221      	movs	r2, #33	; 0x21
 8004152:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	193b      	adds	r3, r7, r4
 8004156:	2202      	movs	r2, #2
 8004158:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800415a:	193b      	adds	r3, r7, r4
 800415c:	2201      	movs	r2, #1
 800415e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004160:	193b      	adds	r3, r7, r4
 8004162:	2200      	movs	r2, #0
 8004164:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004166:	193b      	adds	r3, r7, r4
 8004168:	2201      	movs	r2, #1
 800416a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416c:	193b      	adds	r3, r7, r4
 800416e:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <HAL_TIM_IC_MspInit+0xec>)
 8004170:	0019      	movs	r1, r3
 8004172:	0010      	movs	r0, r2
 8004174:	f000 fe0e 	bl	8004d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004178:	0021      	movs	r1, r4
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2290      	movs	r2, #144	; 0x90
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	187b      	adds	r3, r7, r1
 8004184:	2202      	movs	r2, #2
 8004186:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004188:	187b      	adds	r3, r7, r1
 800418a:	2201      	movs	r2, #1
 800418c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418e:	187b      	adds	r3, r7, r1
 8004190:	2200      	movs	r2, #0
 8004192:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004194:	187b      	adds	r3, r7, r1
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	187b      	adds	r3, r7, r1
 800419c:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <HAL_TIM_IC_MspInit+0xf0>)
 800419e:	0019      	movs	r1, r3
 80041a0:	0010      	movs	r0, r2
 80041a2:	f000 fdf7 	bl	8004d94 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2101      	movs	r1, #1
 80041aa:	2010      	movs	r0, #16
 80041ac:	f000 fbaa 	bl	8004904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041b0:	2010      	movs	r0, #16
 80041b2:	f000 fbbc 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b00b      	add	sp, #44	; 0x2c
 80041bc:	bd90      	pop	{r4, r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40021000 	.word	0x40021000
 80041c8:	48000400 	.word	0x48000400
 80041cc:	48000800 	.word	0x48000800

080041d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b08b      	sub	sp, #44	; 0x2c
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	2414      	movs	r4, #20
 80041da:	193b      	adds	r3, r7, r4
 80041dc:	0018      	movs	r0, r3
 80041de:	2314      	movs	r3, #20
 80041e0:	001a      	movs	r2, r3
 80041e2:	2100      	movs	r1, #0
 80041e4:	f004 fbf6 	bl	80089d4 <memset>
  if(htim->Instance==TIM1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2b      	ldr	r2, [pc, #172]	; (800429c <HAL_TIM_MspPostInit+0xcc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d126      	bne.n	8004240 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_TIM_MspPostInit+0xd0>)
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_TIM_MspPostInit+0xd0>)
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	0289      	lsls	r1, r1, #10
 80041fc:	430a      	orrs	r2, r1
 80041fe:	615a      	str	r2, [r3, #20]
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_TIM_MspPostInit+0xd0>)
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800420e:	193b      	adds	r3, r7, r4
 8004210:	22f0      	movs	r2, #240	; 0xf0
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004216:	0021      	movs	r1, r4
 8004218:	187b      	adds	r3, r7, r1
 800421a:	2202      	movs	r2, #2
 800421c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	187b      	adds	r3, r7, r1
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004224:	187b      	adds	r3, r7, r1
 8004226:	2200      	movs	r2, #0
 8004228:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800422a:	187b      	adds	r3, r7, r1
 800422c:	2202      	movs	r2, #2
 800422e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004230:	187a      	adds	r2, r7, r1
 8004232:	2390      	movs	r3, #144	; 0x90
 8004234:	05db      	lsls	r3, r3, #23
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f000 fdab 	bl	8004d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800423e:	e029      	b.n	8004294 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_TIM_MspPostInit+0xd4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d124      	bne.n	8004294 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_TIM_MspPostInit+0xd0>)
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <HAL_TIM_MspPostInit+0xd0>)
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	02c9      	lsls	r1, r1, #11
 8004254:	430a      	orrs	r2, r1
 8004256:	615a      	str	r2, [r3, #20]
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_TIM_MspPostInit+0xd0>)
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	02db      	lsls	r3, r3, #11
 8004260:	4013      	ands	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004266:	2114      	movs	r1, #20
 8004268:	187b      	adds	r3, r7, r1
 800426a:	22c0      	movs	r2, #192	; 0xc0
 800426c:	0212      	lsls	r2, r2, #8
 800426e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2202      	movs	r2, #2
 8004274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427c:	187b      	adds	r3, r7, r1
 800427e:	2200      	movs	r2, #0
 8004280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2201      	movs	r2, #1
 8004286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004288:	187b      	adds	r3, r7, r1
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <HAL_TIM_MspPostInit+0xd8>)
 800428c:	0019      	movs	r1, r3
 800428e:	0010      	movs	r0, r2
 8004290:	f000 fd80 	bl	8004d94 <HAL_GPIO_Init>
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b00b      	add	sp, #44	; 0x2c
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40014000 	.word	0x40014000
 80042a8:	48000400 	.word	0x48000400

080042ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b08b      	sub	sp, #44	; 0x2c
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	2414      	movs	r4, #20
 80042b6:	193b      	adds	r3, r7, r4
 80042b8:	0018      	movs	r0, r3
 80042ba:	2314      	movs	r3, #20
 80042bc:	001a      	movs	r2, r3
 80042be:	2100      	movs	r1, #0
 80042c0:	f004 fb88 	bl	80089d4 <memset>
  if(huart->Instance==USART3)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_UART_MspInit+0x158>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d000      	beq.n	80042d0 <HAL_UART_MspInit+0x24>
 80042ce:	e094      	b.n	80043fa <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80042d0:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <HAL_UART_MspInit+0x15c>)
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_UART_MspInit+0x15c>)
 80042d6:	2180      	movs	r1, #128	; 0x80
 80042d8:	02c9      	lsls	r1, r1, #11
 80042da:	430a      	orrs	r2, r1
 80042dc:	61da      	str	r2, [r3, #28]
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_UART_MspInit+0x15c>)
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	02db      	lsls	r3, r3, #11
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_UART_MspInit+0x15c>)
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	4b45      	ldr	r3, [pc, #276]	; (8004408 <HAL_UART_MspInit+0x15c>)
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	0309      	lsls	r1, r1, #12
 80042f6:	430a      	orrs	r2, r1
 80042f8:	615a      	str	r2, [r3, #20]
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_UART_MspInit+0x15c>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	4013      	ands	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8004308:	193b      	adds	r3, r7, r4
 800430a:	2281      	movs	r2, #129	; 0x81
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	0021      	movs	r1, r4
 8004312:	187b      	adds	r3, r7, r1
 8004314:	2202      	movs	r2, #2
 8004316:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	187b      	adds	r3, r7, r1
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800431e:	187b      	adds	r3, r7, r1
 8004320:	2203      	movs	r2, #3
 8004322:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8004324:	187b      	adds	r3, r7, r1
 8004326:	2201      	movs	r2, #1
 8004328:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800432a:	187b      	adds	r3, r7, r1
 800432c:	4a37      	ldr	r2, [pc, #220]	; (800440c <HAL_UART_MspInit+0x160>)
 800432e:	0019      	movs	r1, r3
 8004330:	0010      	movs	r0, r2
 8004332:	f000 fd2f 	bl	8004d94 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004336:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004338:	4a36      	ldr	r2, [pc, #216]	; (8004414 <HAL_UART_MspInit+0x168>)
 800433a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800433c:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_UART_MspInit+0x164>)
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004348:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_UART_MspInit+0x164>)
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004354:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004356:	2200      	movs	r2, #0
 8004358:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_UART_MspInit+0x164>)
 800435c:	2220      	movs	r2, #32
 800435e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004366:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004368:	0018      	movs	r0, r3
 800436a:	f000 fafd 	bl	8004968 <HAL_DMA_Init>
 800436e:	1e03      	subs	r3, r0, #0
 8004370:	d001      	beq.n	8004376 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004372:	f7ff fe4b 	bl	800400c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_UART_MspInit+0x16c>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_UART_MspInit+0x16c>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	04c9      	lsls	r1, r1, #19
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a22      	ldr	r2, [pc, #136]	; (8004410 <HAL_UART_MspInit+0x164>)
 8004388:	671a      	str	r2, [r3, #112]	; 0x70
 800438a:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_UART_MspInit+0x164>)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_UART_MspInit+0x170>)
 8004392:	4a23      	ldr	r2, [pc, #140]	; (8004420 <HAL_UART_MspInit+0x174>)
 8004394:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_UART_MspInit+0x170>)
 8004398:	2210      	movs	r2, #16
 800439a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <HAL_UART_MspInit+0x170>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_UART_MspInit+0x170>)
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <HAL_UART_MspInit+0x170>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_UART_MspInit+0x170>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_UART_MspInit+0x170>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_UART_MspInit+0x170>)
 80043bc:	2200      	movs	r2, #0
 80043be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_UART_MspInit+0x170>)
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 fad0 	bl	8004968 <HAL_DMA_Init>
 80043c8:	1e03      	subs	r3, r0, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80043cc:	f7ff fe1e 	bl	800400c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_UART_MspInit+0x16c>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_UART_MspInit+0x16c>)
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	04c9      	lsls	r1, r1, #19
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a0e      	ldr	r2, [pc, #56]	; (800441c <HAL_UART_MspInit+0x170>)
 80043e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_UART_MspInit+0x170>)
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	201d      	movs	r0, #29
 80043f0:	f000 fa88 	bl	8004904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80043f4:	201d      	movs	r0, #29
 80043f6:	f000 fa9a 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b00b      	add	sp, #44	; 0x2c
 8004400:	bd90      	pop	{r4, r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40004800 	.word	0x40004800
 8004408:	40021000 	.word	0x40021000
 800440c:	48000800 	.word	0x48000800
 8004410:	20000358 	.word	0x20000358
 8004414:	40020030 	.word	0x40020030
 8004418:	40010000 	.word	0x40010000
 800441c:	2000039c 	.word	0x2000039c
 8004420:	4002001c 	.word	0x4002001c

08004424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004428:	e7fe      	b.n	8004428 <NMI_Handler+0x4>

0800442a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800442e:	e7fe      	b.n	800442e <HardFault_Handler+0x4>

08004430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004448:	f000 f970 	bl	800472c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800445a:	0018      	movs	r0, r3
 800445c:	f000 fbaf 	bl	8004bbe <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fbab 	bl	8004bbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	2000039c 	.word	0x2000039c
 8004474:	20000358 	.word	0x20000358

08004478 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <TIM3_IRQHandler+0x14>)
 800447e:	0018      	movs	r0, r3
 8004480:	f001 ff14 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	20000244 	.word	0x20000244

08004490 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <TIM15_IRQHandler+0x14>)
 8004496:	0018      	movs	r0, r3
 8004498:	f001 ff08 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	2000028c 	.word	0x2000028c

080044a8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <USART3_4_IRQHandler+0x14>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f003 f9b4 	bl	800781c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	200002d4 	.word	0x200002d4

080044c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	return 1;
 80044c4:	2301      	movs	r3, #1
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <_kill>:

int _kill(int pid, int sig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044d6:	f004 fa53 	bl	8008980 <__errno>
 80044da:	0003      	movs	r3, r0
 80044dc:	2216      	movs	r2, #22
 80044de:	601a      	str	r2, [r3, #0]
	return -1;
 80044e0:	2301      	movs	r3, #1
 80044e2:	425b      	negs	r3, r3
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <_exit>:

void _exit (int status)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044f4:	2301      	movs	r3, #1
 80044f6:	425a      	negs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff ffe5 	bl	80044cc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004502:	e7fe      	b.n	8004502 <_exit+0x16>

08004504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e00a      	b.n	800452c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004516:	e000      	b.n	800451a <_read+0x16>
 8004518:	bf00      	nop
 800451a:	0001      	movs	r1, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	60ba      	str	r2, [r7, #8]
 8004522:	b2ca      	uxtb	r2, r1
 8004524:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	3301      	adds	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	dbf0      	blt.n	8004516 <_read+0x12>
	}

return len;
 8004534:	687b      	ldr	r3, [r7, #4]
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b006      	add	sp, #24
 800453c:	bd80      	pop	{r7, pc}

0800453e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e009      	b.n	8004564 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	60ba      	str	r2, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	0018      	movs	r0, r3
 800455a:	e000      	b.n	800455e <_write+0x20>
 800455c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	3301      	adds	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	429a      	cmp	r2, r3
 800456a:	dbf1      	blt.n	8004550 <_write+0x12>
	}
	return len;
 800456c:	687b      	ldr	r3, [r7, #4]
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b006      	add	sp, #24
 8004574:	bd80      	pop	{r7, pc}

08004576 <_close>:

int _close(int file)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
	return -1;
 800457e:	2301      	movs	r3, #1
 8004580:	425b      	negs	r3, r3
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b002      	add	sp, #8
 8004588:	bd80      	pop	{r7, pc}

0800458a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	0192      	lsls	r2, r2, #6
 800459a:	605a      	str	r2, [r3, #4]
	return 0;
 800459c:	2300      	movs	r3, #0
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_isatty>:

int _isatty(int file)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
	return 1;
 80045ae:	2301      	movs	r3, #1
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	return 0;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <_sbrk+0x5c>)
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <_sbrk+0x60>)
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <_sbrk+0x64>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <_sbrk+0x64>)
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <_sbrk+0x68>)
 80045f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <_sbrk+0x64>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	18d3      	adds	r3, r2, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d207      	bcs.n	8004610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004600:	f004 f9be 	bl	8008980 <__errno>
 8004604:	0003      	movs	r3, r0
 8004606:	220c      	movs	r2, #12
 8004608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800460a:	2301      	movs	r3, #1
 800460c:	425b      	negs	r3, r3
 800460e:	e009      	b.n	8004624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <_sbrk+0x64>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <_sbrk+0x64>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	18d2      	adds	r2, r2, r3
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <_sbrk+0x64>)
 8004620:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b006      	add	sp, #24
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20004000 	.word	0x20004000
 8004630:	00000400 	.word	0x00000400
 8004634:	20000604 	.word	0x20000604
 8004638:	20000620 	.word	0x20000620

0800463c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004648:	480d      	ldr	r0, [pc, #52]	; (8004680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800464a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800464c:	480d      	ldr	r0, [pc, #52]	; (8004684 <LoopForever+0x6>)
  ldr r1, =_edata
 800464e:	490e      	ldr	r1, [pc, #56]	; (8004688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <LoopForever+0xe>)
  movs r3, #0
 8004652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004654:	e002      	b.n	800465c <LoopCopyDataInit>

08004656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800465a:	3304      	adds	r3, #4

0800465c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800465c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800465e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004660:	d3f9      	bcc.n	8004656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004662:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004664:	4c0b      	ldr	r4, [pc, #44]	; (8004694 <LoopForever+0x16>)
  movs r3, #0
 8004666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004668:	e001      	b.n	800466e <LoopFillZerobss>

0800466a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800466a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800466c:	3204      	adds	r2, #4

0800466e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800466e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004670:	d3fb      	bcc.n	800466a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004672:	f7ff ffe3 	bl	800463c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004676:	f004 f989 	bl	800898c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800467a:	f7fe f8f9 	bl	8002870 <main>

0800467e <LoopForever>:

LoopForever:
    b LoopForever
 800467e:	e7fe      	b.n	800467e <LoopForever>
  ldr   r0, =_estack
 8004680:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004688:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800468c:	0800e4b4 	.word	0x0800e4b4
  ldr r2, =_sbss
 8004690:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004694:	2000061c 	.word	0x2000061c

08004698 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004698:	e7fe      	b.n	8004698 <ADC1_IRQHandler>
	...

0800469c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_Init+0x24>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_Init+0x24>)
 80046a6:	2110      	movs	r1, #16
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f000 f809 	bl	80046c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046b2:	f7ff fcb1 	bl	8004018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	40022000 	.word	0x40022000

080046c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_InitTick+0x5c>)
 80046ce:	681c      	ldr	r4, [r3, #0]
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <HAL_InitTick+0x60>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	0019      	movs	r1, r3
 80046d6:	23fa      	movs	r3, #250	; 0xfa
 80046d8:	0098      	lsls	r0, r3, #2
 80046da:	f7fb fd3b 	bl	8000154 <__udivsi3>
 80046de:	0003      	movs	r3, r0
 80046e0:	0019      	movs	r1, r3
 80046e2:	0020      	movs	r0, r4
 80046e4:	f7fb fd36 	bl	8000154 <__udivsi3>
 80046e8:	0003      	movs	r3, r0
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 f92f 	bl	800494e <HAL_SYSTICK_Config>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e00f      	b.n	8004718 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d80b      	bhi.n	8004716 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	2301      	movs	r3, #1
 8004702:	425b      	negs	r3, r3
 8004704:	2200      	movs	r2, #0
 8004706:	0018      	movs	r0, r3
 8004708:	f000 f8fc 	bl	8004904 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_InitTick+0x64>)
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b003      	add	sp, #12
 800471e:	bd90      	pop	{r4, r7, pc}
 8004720:	20000000 	.word	0x20000000
 8004724:	20000008 	.word	0x20000008
 8004728:	20000004 	.word	0x20000004

0800472c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_IncTick+0x1c>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	001a      	movs	r2, r3
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_IncTick+0x20>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	18d2      	adds	r2, r2, r3
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_IncTick+0x20>)
 800473e:	601a      	str	r2, [r3, #0]
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	20000008 	.word	0x20000008
 800474c:	20000608 	.word	0x20000608

08004750 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  return uwTick;
 8004754:	4b02      	ldr	r3, [pc, #8]	; (8004760 <HAL_GetTick+0x10>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	20000608 	.word	0x20000608

08004764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800476c:	f7ff fff0 	bl	8004750 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	d005      	beq.n	800478a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <HAL_Delay+0x44>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	001a      	movs	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	189b      	adds	r3, r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	f7ff ffe0 	bl	8004750 <HAL_GetTick>
 8004790:	0002      	movs	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	429a      	cmp	r2, r3
 800479a:	d8f7      	bhi.n	800478c <HAL_Delay+0x28>
  {
  }
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	20000008 	.word	0x20000008

080047ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	0002      	movs	r2, r0
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b7f      	cmp	r3, #127	; 0x7f
 80047be:	d809      	bhi.n	80047d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	001a      	movs	r2, r3
 80047c6:	231f      	movs	r3, #31
 80047c8:	401a      	ands	r2, r3
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <__NVIC_EnableIRQ+0x30>)
 80047cc:	2101      	movs	r1, #1
 80047ce:	4091      	lsls	r1, r2
 80047d0:	000a      	movs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
  }
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	e000e100 	.word	0xe000e100

080047e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	0002      	movs	r2, r0
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	1dfb      	adds	r3, r7, #7
 80047ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047ee:	1dfb      	adds	r3, r7, #7
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b7f      	cmp	r3, #127	; 0x7f
 80047f4:	d828      	bhi.n	8004848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047f6:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <__NVIC_SetPriority+0xd4>)
 80047f8:	1dfb      	adds	r3, r7, #7
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	33c0      	adds	r3, #192	; 0xc0
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	589b      	ldr	r3, [r3, r2]
 8004806:	1dfa      	adds	r2, r7, #7
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	0011      	movs	r1, r2
 800480c:	2203      	movs	r2, #3
 800480e:	400a      	ands	r2, r1
 8004810:	00d2      	lsls	r2, r2, #3
 8004812:	21ff      	movs	r1, #255	; 0xff
 8004814:	4091      	lsls	r1, r2
 8004816:	000a      	movs	r2, r1
 8004818:	43d2      	mvns	r2, r2
 800481a:	401a      	ands	r2, r3
 800481c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	22ff      	movs	r2, #255	; 0xff
 8004824:	401a      	ands	r2, r3
 8004826:	1dfb      	adds	r3, r7, #7
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	0018      	movs	r0, r3
 800482c:	2303      	movs	r3, #3
 800482e:	4003      	ands	r3, r0
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004834:	481f      	ldr	r0, [pc, #124]	; (80048b4 <__NVIC_SetPriority+0xd4>)
 8004836:	1dfb      	adds	r3, r7, #7
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b25b      	sxtb	r3, r3
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	430a      	orrs	r2, r1
 8004840:	33c0      	adds	r3, #192	; 0xc0
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004846:	e031      	b.n	80048ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <__NVIC_SetPriority+0xd8>)
 800484a:	1dfb      	adds	r3, r7, #7
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	0019      	movs	r1, r3
 8004850:	230f      	movs	r3, #15
 8004852:	400b      	ands	r3, r1
 8004854:	3b08      	subs	r3, #8
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3306      	adds	r3, #6
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	18d3      	adds	r3, r2, r3
 800485e:	3304      	adds	r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1dfa      	adds	r2, r7, #7
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	0011      	movs	r1, r2
 8004868:	2203      	movs	r2, #3
 800486a:	400a      	ands	r2, r1
 800486c:	00d2      	lsls	r2, r2, #3
 800486e:	21ff      	movs	r1, #255	; 0xff
 8004870:	4091      	lsls	r1, r2
 8004872:	000a      	movs	r2, r1
 8004874:	43d2      	mvns	r2, r2
 8004876:	401a      	ands	r2, r3
 8004878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	019b      	lsls	r3, r3, #6
 800487e:	22ff      	movs	r2, #255	; 0xff
 8004880:	401a      	ands	r2, r3
 8004882:	1dfb      	adds	r3, r7, #7
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	0018      	movs	r0, r3
 8004888:	2303      	movs	r3, #3
 800488a:	4003      	ands	r3, r0
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004890:	4809      	ldr	r0, [pc, #36]	; (80048b8 <__NVIC_SetPriority+0xd8>)
 8004892:	1dfb      	adds	r3, r7, #7
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	001c      	movs	r4, r3
 8004898:	230f      	movs	r3, #15
 800489a:	4023      	ands	r3, r4
 800489c:	3b08      	subs	r3, #8
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	430a      	orrs	r2, r1
 80048a2:	3306      	adds	r3, #6
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	18c3      	adds	r3, r0, r3
 80048a8:	3304      	adds	r3, #4
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b003      	add	sp, #12
 80048b2:	bd90      	pop	{r4, r7, pc}
 80048b4:	e000e100 	.word	0xe000e100
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1e5a      	subs	r2, r3, #1
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	045b      	lsls	r3, r3, #17
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d301      	bcc.n	80048d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d0:	2301      	movs	r3, #1
 80048d2:	e010      	b.n	80048f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <SysTick_Config+0x44>)
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	3a01      	subs	r2, #1
 80048da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048dc:	2301      	movs	r3, #1
 80048de:	425b      	negs	r3, r3
 80048e0:	2103      	movs	r1, #3
 80048e2:	0018      	movs	r0, r3
 80048e4:	f7ff ff7c 	bl	80047e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <SysTick_Config+0x44>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <SysTick_Config+0x44>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	210f      	movs	r1, #15
 8004910:	187b      	adds	r3, r7, r1
 8004912:	1c02      	adds	r2, r0, #0
 8004914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	187b      	adds	r3, r7, r1
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b25b      	sxtb	r3, r3
 800491e:	0011      	movs	r1, r2
 8004920:	0018      	movs	r0, r3
 8004922:	f7ff ff5d 	bl	80047e0 <__NVIC_SetPriority>
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	0002      	movs	r2, r0
 8004936:	1dfb      	adds	r3, r7, #7
 8004938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800493a:	1dfb      	adds	r3, r7, #7
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b25b      	sxtb	r3, r3
 8004940:	0018      	movs	r0, r3
 8004942:	f7ff ff33 	bl	80047ac <__NVIC_EnableIRQ>
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff ffaf 	bl	80048bc <SysTick_Config>
 800495e:	0003      	movs	r3, r0
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e036      	b.n	80049ec <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2221      	movs	r2, #33	; 0x21
 8004982:	2102      	movs	r1, #2
 8004984:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_DMA_Init+0x8c>)
 8004992:	4013      	ands	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800499e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 f9c4 	bl	8004d5c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2221      	movs	r2, #33	; 0x21
 80049de:	2101      	movs	r1, #1
 80049e0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}  
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b004      	add	sp, #16
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	ffffc00f 	.word	0xffffc00f

080049f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2317      	movs	r3, #23
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	5c9b      	ldrb	r3, [r3, r2]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_DMA_Start_IT+0x24>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e04f      	b.n	8004abc <HAL_DMA_Start_IT+0xc4>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	2101      	movs	r1, #1
 8004a22:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2221      	movs	r2, #33	; 0x21
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d13a      	bne.n	8004aa6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2221      	movs	r2, #33	; 0x21
 8004a34:	2102      	movs	r1, #2
 8004a36:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	438a      	bics	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f954 	bl	8004d02 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	210e      	movs	r1, #14
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e00f      	b.n	8004a94 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	210a      	movs	r1, #10
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2104      	movs	r1, #4
 8004a90:	438a      	bics	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e007      	b.n	8004ab6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	2100      	movs	r1, #0
 8004aac:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004aae:	2317      	movs	r3, #23
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004ab6:	2317      	movs	r3, #23
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	781b      	ldrb	r3, [r3, #0]
} 
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b006      	add	sp, #24
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	5c9b      	ldrb	r3, [r3, r2]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d008      	beq.n	8004aea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2204      	movs	r2, #4
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e020      	b.n	8004b2c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	210e      	movs	r1, #14
 8004af6:	438a      	bics	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	438a      	bics	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	2101      	movs	r1, #1
 8004b14:	4091      	lsls	r1, r2
 8004b16:	000a      	movs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2221      	movs	r2, #33	; 0x21
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	210f      	movs	r1, #15
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2221      	movs	r2, #33	; 0x21
 8004b48:	5c9b      	ldrb	r3, [r3, r2]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d006      	beq.n	8004b5e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2204      	movs	r2, #4
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b56:	187b      	adds	r3, r7, r1
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e028      	b.n	8004bb0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	210e      	movs	r1, #14
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2101      	movs	r1, #1
 8004b88:	4091      	lsls	r1, r2
 8004b8a:	000a      	movs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	0010      	movs	r0, r2
 8004bae:	4798      	blx	r3
    } 
  }
  return status;
 8004bb0:	230f      	movs	r3, #15
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2204      	movs	r2, #4
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	0013      	movs	r3, r2
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	d024      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x72>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2204      	movs	r2, #4
 8004bea:	4013      	ands	r3, r2
 8004bec:	d020      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d107      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2104      	movs	r1, #4
 8004c06:	438a      	bics	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	2104      	movs	r1, #4
 8004c14:	4091      	lsls	r1, r2
 8004c16:	000a      	movs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d100      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x66>
 8004c22:	e06a      	b.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	0010      	movs	r0, r2
 8004c2c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c2e:	e064      	b.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2202      	movs	r2, #2
 8004c36:	409a      	lsls	r2, r3
 8004c38:	0013      	movs	r3, r2
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d02b      	beq.n	8004c98 <HAL_DMA_IRQHandler+0xda>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2202      	movs	r2, #2
 8004c44:	4013      	ands	r3, r2
 8004c46:	d027      	beq.n	8004c98 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	4013      	ands	r3, r2
 8004c52:	d10b      	bne.n	8004c6c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	210a      	movs	r1, #10
 8004c60:	438a      	bics	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2221      	movs	r2, #33	; 0x21
 8004c68:	2101      	movs	r1, #1
 8004c6a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	2102      	movs	r1, #2
 8004c76:	4091      	lsls	r1, r2
 8004c78:	000a      	movs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	2100      	movs	r1, #0
 8004c82:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d036      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	0010      	movs	r0, r2
 8004c94:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004c96:	e030      	b.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d028      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2208      	movs	r2, #8
 8004cac:	4013      	ands	r3, r2
 8004cae:	d024      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	210e      	movs	r1, #14
 8004cbc:	438a      	bics	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	2101      	movs	r1, #1
 8004cca:	4091      	lsls	r1, r2
 8004ccc:	000a      	movs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2221      	movs	r2, #33	; 0x21
 8004cda:	2101      	movs	r1, #1
 8004cdc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	0010      	movs	r0, r2
 8004cf6:	4798      	blx	r3
    }
   }
}  
 8004cf8:	e7ff      	b.n	8004cfa <HAL_DMA_IRQHandler+0x13c>
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4091      	lsls	r1, r2
 8004d1c:	000a      	movs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d108      	bne.n	8004d42 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d40:	e007      	b.n	8004d52 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <DMA_CalcBaseAndBitshift+0x30>)
 8004d6a:	4694      	mov	ip, r2
 8004d6c:	4463      	add	r3, ip
 8004d6e:	2114      	movs	r1, #20
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fb f9ef 	bl	8000154 <__udivsi3>
 8004d76:	0003      	movs	r3, r0
 8004d78:	009a      	lsls	r2, r3, #2
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a03      	ldr	r2, [pc, #12]	; (8004d90 <DMA_CalcBaseAndBitshift+0x34>)
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	bffdfff8 	.word	0xbffdfff8
 8004d90:	40020000 	.word	0x40020000

08004d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004da2:	e14f      	b.n	8005044 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4091      	lsls	r1, r2
 8004dae:	000a      	movs	r2, r1
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d100      	bne.n	8004dbc <HAL_GPIO_Init+0x28>
 8004dba:	e140      	b.n	800503e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d005      	beq.n	8004dd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d130      	bne.n	8004e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	2203      	movs	r2, #3
 8004de0:	409a      	lsls	r2, r3
 8004de2:	0013      	movs	r3, r2
 8004de4:	43da      	mvns	r2, r3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4013      	ands	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	409a      	lsls	r2, r3
 8004df6:	0013      	movs	r3, r2
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	0013      	movs	r3, r2
 8004e12:	43da      	mvns	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4013      	ands	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	2201      	movs	r2, #1
 8004e22:	401a      	ands	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	409a      	lsls	r2, r3
 8004e28:	0013      	movs	r3, r2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d017      	beq.n	8004e72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	0013      	movs	r3, r2
 8004e52:	43da      	mvns	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4013      	ands	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	0013      	movs	r3, r2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2203      	movs	r2, #3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d123      	bne.n	8004ec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	0092      	lsls	r2, r2, #2
 8004e88:	58d3      	ldr	r3, [r2, r3]
 8004e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2207      	movs	r2, #7
 8004e90:	4013      	ands	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	409a      	lsls	r2, r3
 8004e98:	0013      	movs	r3, r2
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2107      	movs	r1, #7
 8004eaa:	400b      	ands	r3, r1
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	0013      	movs	r3, r2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	08da      	lsrs	r2, r3, #3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3208      	adds	r2, #8
 8004ec0:	0092      	lsls	r2, r2, #2
 8004ec2:	6939      	ldr	r1, [r7, #16]
 8004ec4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	0013      	movs	r3, r2
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	401a      	ands	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	409a      	lsls	r2, r3
 8004eec:	0013      	movs	r3, r2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	23c0      	movs	r3, #192	; 0xc0
 8004f00:	029b      	lsls	r3, r3, #10
 8004f02:	4013      	ands	r3, r2
 8004f04:	d100      	bne.n	8004f08 <HAL_GPIO_Init+0x174>
 8004f06:	e09a      	b.n	800503e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f08:	4b54      	ldr	r3, [pc, #336]	; (800505c <HAL_GPIO_Init+0x2c8>)
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_GPIO_Init+0x2c8>)
 8004f0e:	2101      	movs	r1, #1
 8004f10:	430a      	orrs	r2, r1
 8004f12:	619a      	str	r2, [r3, #24]
 8004f14:	4b51      	ldr	r3, [pc, #324]	; (800505c <HAL_GPIO_Init+0x2c8>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f20:	4a4f      	ldr	r2, [pc, #316]	; (8005060 <HAL_GPIO_Init+0x2cc>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	3302      	adds	r3, #2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	589b      	ldr	r3, [r3, r2]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2203      	movs	r2, #3
 8004f32:	4013      	ands	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	220f      	movs	r2, #15
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	0013      	movs	r3, r2
 8004f3c:	43da      	mvns	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	2390      	movs	r3, #144	; 0x90
 8004f48:	05db      	lsls	r3, r3, #23
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d013      	beq.n	8004f76 <HAL_GPIO_Init+0x1e2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a44      	ldr	r2, [pc, #272]	; (8005064 <HAL_GPIO_Init+0x2d0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00d      	beq.n	8004f72 <HAL_GPIO_Init+0x1de>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a43      	ldr	r2, [pc, #268]	; (8005068 <HAL_GPIO_Init+0x2d4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <HAL_GPIO_Init+0x1da>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a42      	ldr	r2, [pc, #264]	; (800506c <HAL_GPIO_Init+0x2d8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_GPIO_Init+0x1d6>
 8004f66:	2303      	movs	r3, #3
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x1e4>
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	e004      	b.n	8004f78 <HAL_GPIO_Init+0x1e4>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e002      	b.n	8004f78 <HAL_GPIO_Init+0x1e4>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_GPIO_Init+0x1e4>
 8004f76:	2300      	movs	r3, #0
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	2103      	movs	r1, #3
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	4093      	lsls	r3, r2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f88:	4935      	ldr	r1, [pc, #212]	; (8005060 <HAL_GPIO_Init+0x2cc>)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	3302      	adds	r3, #2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fba:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	43da      	mvns	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	029b      	lsls	r3, r3, #10
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004fe4:	4b22      	ldr	r3, [pc, #136]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fea:	4b21      	ldr	r3, [pc, #132]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	035b      	lsls	r3, r3, #13
 8005002:	4013      	ands	r3, r2
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800500e:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	43da      	mvns	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4013      	ands	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	039b      	lsls	r3, r3, #14
 800502c:	4013      	ands	r3, r2
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <HAL_GPIO_Init+0x2dc>)
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3301      	adds	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	40da      	lsrs	r2, r3
 800504c:	1e13      	subs	r3, r2, #0
 800504e:	d000      	beq.n	8005052 <HAL_GPIO_Init+0x2be>
 8005050:	e6a8      	b.n	8004da4 <HAL_GPIO_Init+0x10>
  } 
}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b006      	add	sp, #24
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40021000 	.word	0x40021000
 8005060:	40010000 	.word	0x40010000
 8005064:	48000400 	.word	0x48000400
 8005068:	48000800 	.word	0x48000800
 800506c:	48000c00 	.word	0x48000c00
 8005070:	40010400 	.word	0x40010400

08005074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	000a      	movs	r2, r1
 800507e:	1cbb      	adds	r3, r7, #2
 8005080:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	1cba      	adds	r2, r7, #2
 8005088:	8812      	ldrh	r2, [r2, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800508e:	230f      	movs	r3, #15
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e003      	b.n	80050a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005098:	230f      	movs	r3, #15
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80050a0:	230f      	movs	r3, #15
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	781b      	ldrb	r3, [r3, #0]
  }
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	0008      	movs	r0, r1
 80050b8:	0011      	movs	r1, r2
 80050ba:	1cbb      	adds	r3, r7, #2
 80050bc:	1c02      	adds	r2, r0, #0
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	1c7b      	adds	r3, r7, #1
 80050c2:	1c0a      	adds	r2, r1, #0
 80050c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050c6:	1c7b      	adds	r3, r7, #1
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ce:	1cbb      	adds	r3, r7, #2
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050d6:	e003      	b.n	80050e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050d8:	1cbb      	adds	r3, r7, #2
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b002      	add	sp, #8
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e305      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d100      	bne.n	8005106 <HAL_RCC_OscConfig+0x1e>
 8005104:	e08d      	b.n	8005222 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005106:	4bc5      	ldr	r3, [pc, #788]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	220c      	movs	r2, #12
 800510c:	4013      	ands	r3, r2
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00e      	beq.n	8005130 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005112:	4bc2      	ldr	r3, [pc, #776]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	220c      	movs	r2, #12
 8005118:	4013      	ands	r3, r2
 800511a:	2b08      	cmp	r3, #8
 800511c:	d116      	bne.n	800514c <HAL_RCC_OscConfig+0x64>
 800511e:	4bbf      	ldr	r3, [pc, #764]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	23c0      	movs	r3, #192	; 0xc0
 8005124:	025b      	lsls	r3, r3, #9
 8005126:	401a      	ands	r2, r3
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	025b      	lsls	r3, r3, #9
 800512c:	429a      	cmp	r2, r3
 800512e:	d10d      	bne.n	800514c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4bba      	ldr	r3, [pc, #744]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	029b      	lsls	r3, r3, #10
 8005138:	4013      	ands	r3, r2
 800513a:	d100      	bne.n	800513e <HAL_RCC_OscConfig+0x56>
 800513c:	e070      	b.n	8005220 <HAL_RCC_OscConfig+0x138>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d000      	beq.n	8005148 <HAL_RCC_OscConfig+0x60>
 8005146:	e06b      	b.n	8005220 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e2dc      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <HAL_RCC_OscConfig+0x7c>
 8005154:	4bb1      	ldr	r3, [pc, #708]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4bb0      	ldr	r3, [pc, #704]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	0249      	lsls	r1, r1, #9
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e02f      	b.n	80051c4 <HAL_RCC_OscConfig+0xdc>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10c      	bne.n	8005186 <HAL_RCC_OscConfig+0x9e>
 800516c:	4bab      	ldr	r3, [pc, #684]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4baa      	ldr	r3, [pc, #680]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005172:	49ab      	ldr	r1, [pc, #684]	; (8005420 <HAL_RCC_OscConfig+0x338>)
 8005174:	400a      	ands	r2, r1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	4ba8      	ldr	r3, [pc, #672]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4ba7      	ldr	r3, [pc, #668]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800517e:	49a9      	ldr	r1, [pc, #676]	; (8005424 <HAL_RCC_OscConfig+0x33c>)
 8005180:	400a      	ands	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e01e      	b.n	80051c4 <HAL_RCC_OscConfig+0xdc>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b05      	cmp	r3, #5
 800518c:	d10e      	bne.n	80051ac <HAL_RCC_OscConfig+0xc4>
 800518e:	4ba3      	ldr	r3, [pc, #652]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4ba2      	ldr	r3, [pc, #648]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005194:	2180      	movs	r1, #128	; 0x80
 8005196:	02c9      	lsls	r1, r1, #11
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	4b9f      	ldr	r3, [pc, #636]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b9e      	ldr	r3, [pc, #632]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80051a2:	2180      	movs	r1, #128	; 0x80
 80051a4:	0249      	lsls	r1, r1, #9
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0xdc>
 80051ac:	4b9b      	ldr	r3, [pc, #620]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b9a      	ldr	r3, [pc, #616]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80051b2:	499b      	ldr	r1, [pc, #620]	; (8005420 <HAL_RCC_OscConfig+0x338>)
 80051b4:	400a      	ands	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	4b98      	ldr	r3, [pc, #608]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b97      	ldr	r3, [pc, #604]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80051be:	4999      	ldr	r1, [pc, #612]	; (8005424 <HAL_RCC_OscConfig+0x33c>)
 80051c0:	400a      	ands	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d014      	beq.n	80051f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7ff fac0 	bl	8004750 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d6:	f7ff fabb 	bl	8004750 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b64      	cmp	r3, #100	; 0x64
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e28e      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e8:	4b8c      	ldr	r3, [pc, #560]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	029b      	lsls	r3, r3, #10
 80051f0:	4013      	ands	r3, r2
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0xee>
 80051f4:	e015      	b.n	8005222 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7ff faab 	bl	8004750 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005200:	f7ff faa6 	bl	8004750 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e279      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005212:	4b82      	ldr	r3, [pc, #520]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	029b      	lsls	r3, r3, #10
 800521a:	4013      	ands	r3, r2
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x118>
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2202      	movs	r2, #2
 8005228:	4013      	ands	r3, r2
 800522a:	d100      	bne.n	800522e <HAL_RCC_OscConfig+0x146>
 800522c:	e06c      	b.n	8005308 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800522e:	4b7b      	ldr	r3, [pc, #492]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	220c      	movs	r2, #12
 8005234:	4013      	ands	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005238:	4b78      	ldr	r3, [pc, #480]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	220c      	movs	r2, #12
 800523e:	4013      	ands	r3, r2
 8005240:	2b08      	cmp	r3, #8
 8005242:	d11f      	bne.n	8005284 <HAL_RCC_OscConfig+0x19c>
 8005244:	4b75      	ldr	r3, [pc, #468]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	23c0      	movs	r3, #192	; 0xc0
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	401a      	ands	r2, r3
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	429a      	cmp	r2, r3
 8005254:	d116      	bne.n	8005284 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	4b71      	ldr	r3, [pc, #452]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	d005      	beq.n	800526c <HAL_RCC_OscConfig+0x184>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e24c      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526c:	4b6b      	ldr	r3, [pc, #428]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	22f8      	movs	r2, #248	; 0xf8
 8005272:	4393      	bics	r3, r2
 8005274:	0019      	movs	r1, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	00da      	lsls	r2, r3, #3
 800527c:	4b67      	ldr	r3, [pc, #412]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005282:	e041      	b.n	8005308 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d024      	beq.n	80052d6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800528c:	4b63      	ldr	r3, [pc, #396]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b62      	ldr	r3, [pc, #392]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005292:	2101      	movs	r1, #1
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7ff fa5a 	bl	8004750 <HAL_GetTick>
 800529c:	0003      	movs	r3, r0
 800529e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a2:	f7ff fa55 	bl	8004750 <HAL_GetTick>
 80052a6:	0002      	movs	r2, r0
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e228      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2202      	movs	r2, #2
 80052ba:	4013      	ands	r3, r2
 80052bc:	d0f1      	beq.n	80052a2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052be:	4b57      	ldr	r3, [pc, #348]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	22f8      	movs	r2, #248	; 0xf8
 80052c4:	4393      	bics	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	00da      	lsls	r2, r3, #3
 80052ce:	4b53      	ldr	r3, [pc, #332]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e018      	b.n	8005308 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d6:	4b51      	ldr	r3, [pc, #324]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80052dc:	2101      	movs	r1, #1
 80052de:	438a      	bics	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e2:	f7ff fa35 	bl	8004750 <HAL_GetTick>
 80052e6:	0003      	movs	r3, r0
 80052e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ec:	f7ff fa30 	bl	8004750 <HAL_GetTick>
 80052f0:	0002      	movs	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e203      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fe:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	4013      	ands	r3, r2
 8005306:	d1f1      	bne.n	80052ec <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2208      	movs	r2, #8
 800530e:	4013      	ands	r3, r2
 8005310:	d036      	beq.n	8005380 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d019      	beq.n	800534e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800531c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531e:	4b3f      	ldr	r3, [pc, #252]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005320:	2101      	movs	r1, #1
 8005322:	430a      	orrs	r2, r1
 8005324:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005326:	f7ff fa13 	bl	8004750 <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005330:	f7ff fa0e 	bl	8004750 <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1e1      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005342:	4b36      	ldr	r3, [pc, #216]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d0f1      	beq.n	8005330 <HAL_RCC_OscConfig+0x248>
 800534c:	e018      	b.n	8005380 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534e:	4b33      	ldr	r3, [pc, #204]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005352:	4b32      	ldr	r3, [pc, #200]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005354:	2101      	movs	r1, #1
 8005356:	438a      	bics	r2, r1
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7ff f9f9 	bl	8004750 <HAL_GetTick>
 800535e:	0003      	movs	r3, r0
 8005360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005364:	f7ff f9f4 	bl	8004750 <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1c7      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005376:	4b29      	ldr	r3, [pc, #164]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2202      	movs	r2, #2
 800537c:	4013      	ands	r3, r2
 800537e:	d1f1      	bne.n	8005364 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2204      	movs	r2, #4
 8005386:	4013      	ands	r3, r2
 8005388:	d100      	bne.n	800538c <HAL_RCC_OscConfig+0x2a4>
 800538a:	e0b5      	b.n	80054f8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800538c:	201f      	movs	r0, #31
 800538e:	183b      	adds	r3, r7, r0
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	055b      	lsls	r3, r3, #21
 800539c:	4013      	ands	r3, r2
 800539e:	d110      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a0:	4b1e      	ldr	r3, [pc, #120]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	0549      	lsls	r1, r1, #21
 80053aa:	430a      	orrs	r2, r1
 80053ac:	61da      	str	r2, [r3, #28]
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <HAL_RCC_OscConfig+0x334>)
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	055b      	lsls	r3, r3, #21
 80053b6:	4013      	ands	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053bc:	183b      	adds	r3, r7, r0
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <HAL_RCC_OscConfig+0x340>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	d11a      	bne.n	8005404 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCC_OscConfig+0x340>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <HAL_RCC_OscConfig+0x340>)
 80053d4:	2180      	movs	r1, #128	; 0x80
 80053d6:	0049      	lsls	r1, r1, #1
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053dc:	f7ff f9b8 	bl	8004750 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e6:	f7ff f9b3 	bl	8004750 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b64      	cmp	r3, #100	; 0x64
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e186      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_OscConfig+0x340>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4013      	ands	r3, r2
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10f      	bne.n	800542c <HAL_RCC_OscConfig+0x344>
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <HAL_RCC_OscConfig+0x334>)
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <HAL_RCC_OscConfig+0x334>)
 8005412:	2101      	movs	r1, #1
 8005414:	430a      	orrs	r2, r1
 8005416:	621a      	str	r2, [r3, #32]
 8005418:	e036      	b.n	8005488 <HAL_RCC_OscConfig+0x3a0>
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	40021000 	.word	0x40021000
 8005420:	fffeffff 	.word	0xfffeffff
 8005424:	fffbffff 	.word	0xfffbffff
 8005428:	40007000 	.word	0x40007000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10c      	bne.n	800544e <HAL_RCC_OscConfig+0x366>
 8005434:	4bb6      	ldr	r3, [pc, #728]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	4bb5      	ldr	r3, [pc, #724]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800543a:	2101      	movs	r1, #1
 800543c:	438a      	bics	r2, r1
 800543e:	621a      	str	r2, [r3, #32]
 8005440:	4bb3      	ldr	r3, [pc, #716]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	4bb2      	ldr	r3, [pc, #712]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005446:	2104      	movs	r1, #4
 8005448:	438a      	bics	r2, r1
 800544a:	621a      	str	r2, [r3, #32]
 800544c:	e01c      	b.n	8005488 <HAL_RCC_OscConfig+0x3a0>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b05      	cmp	r3, #5
 8005454:	d10c      	bne.n	8005470 <HAL_RCC_OscConfig+0x388>
 8005456:	4bae      	ldr	r3, [pc, #696]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005458:	6a1a      	ldr	r2, [r3, #32]
 800545a:	4bad      	ldr	r3, [pc, #692]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800545c:	2104      	movs	r1, #4
 800545e:	430a      	orrs	r2, r1
 8005460:	621a      	str	r2, [r3, #32]
 8005462:	4bab      	ldr	r3, [pc, #684]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	4baa      	ldr	r3, [pc, #680]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005468:	2101      	movs	r1, #1
 800546a:	430a      	orrs	r2, r1
 800546c:	621a      	str	r2, [r3, #32]
 800546e:	e00b      	b.n	8005488 <HAL_RCC_OscConfig+0x3a0>
 8005470:	4ba7      	ldr	r3, [pc, #668]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	4ba6      	ldr	r3, [pc, #664]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005476:	2101      	movs	r1, #1
 8005478:	438a      	bics	r2, r1
 800547a:	621a      	str	r2, [r3, #32]
 800547c:	4ba4      	ldr	r3, [pc, #656]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	4ba3      	ldr	r3, [pc, #652]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005482:	2104      	movs	r1, #4
 8005484:	438a      	bics	r2, r1
 8005486:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d014      	beq.n	80054ba <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005490:	f7ff f95e 	bl	8004750 <HAL_GetTick>
 8005494:	0003      	movs	r3, r0
 8005496:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	e009      	b.n	80054ae <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800549a:	f7ff f959 	bl	8004750 <HAL_GetTick>
 800549e:	0002      	movs	r2, r0
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	4a9b      	ldr	r2, [pc, #620]	; (8005714 <HAL_RCC_OscConfig+0x62c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e12b      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ae:	4b98      	ldr	r3, [pc, #608]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x3b2>
 80054b8:	e013      	b.n	80054e2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ba:	f7ff f949 	bl	8004750 <HAL_GetTick>
 80054be:	0003      	movs	r3, r0
 80054c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c2:	e009      	b.n	80054d8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7ff f944 	bl	8004750 <HAL_GetTick>
 80054c8:	0002      	movs	r2, r0
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	4a91      	ldr	r2, [pc, #580]	; (8005714 <HAL_RCC_OscConfig+0x62c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e116      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d8:	4b8d      	ldr	r3, [pc, #564]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	2202      	movs	r2, #2
 80054de:	4013      	ands	r3, r2
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054e2:	231f      	movs	r3, #31
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d105      	bne.n	80054f8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ec:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	4b87      	ldr	r3, [pc, #540]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80054f2:	4989      	ldr	r1, [pc, #548]	; (8005718 <HAL_RCC_OscConfig+0x630>)
 80054f4:	400a      	ands	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2210      	movs	r2, #16
 80054fe:	4013      	ands	r3, r2
 8005500:	d063      	beq.n	80055ca <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d12a      	bne.n	8005560 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800550a:	4b81      	ldr	r3, [pc, #516]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800550c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800550e:	4b80      	ldr	r3, [pc, #512]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005510:	2104      	movs	r1, #4
 8005512:	430a      	orrs	r2, r1
 8005514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005516:	4b7e      	ldr	r3, [pc, #504]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551a:	4b7d      	ldr	r3, [pc, #500]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800551c:	2101      	movs	r1, #1
 800551e:	430a      	orrs	r2, r1
 8005520:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005522:	f7ff f915 	bl	8004750 <HAL_GetTick>
 8005526:	0003      	movs	r3, r0
 8005528:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800552c:	f7ff f910 	bl	8004750 <HAL_GetTick>
 8005530:	0002      	movs	r2, r0
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0e3      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800553e:	4b74      	ldr	r3, [pc, #464]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	2202      	movs	r2, #2
 8005544:	4013      	ands	r3, r2
 8005546:	d0f1      	beq.n	800552c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005548:	4b71      	ldr	r3, [pc, #452]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	22f8      	movs	r2, #248	; 0xf8
 800554e:	4393      	bics	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	00da      	lsls	r2, r3, #3
 8005558:	4b6d      	ldr	r3, [pc, #436]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800555a:	430a      	orrs	r2, r1
 800555c:	635a      	str	r2, [r3, #52]	; 0x34
 800555e:	e034      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	3305      	adds	r3, #5
 8005566:	d111      	bne.n	800558c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005568:	4b69      	ldr	r3, [pc, #420]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800556a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800556e:	2104      	movs	r1, #4
 8005570:	438a      	bics	r2, r1
 8005572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005574:	4b66      	ldr	r3, [pc, #408]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005578:	22f8      	movs	r2, #248	; 0xf8
 800557a:	4393      	bics	r3, r2
 800557c:	0019      	movs	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	00da      	lsls	r2, r3, #3
 8005584:	4b62      	ldr	r3, [pc, #392]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005586:	430a      	orrs	r2, r1
 8005588:	635a      	str	r2, [r3, #52]	; 0x34
 800558a:	e01e      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800558c:	4b60      	ldr	r3, [pc, #384]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800558e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005590:	4b5f      	ldr	r3, [pc, #380]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005592:	2104      	movs	r1, #4
 8005594:	430a      	orrs	r2, r1
 8005596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005598:	4b5d      	ldr	r3, [pc, #372]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800559a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800559c:	4b5c      	ldr	r3, [pc, #368]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800559e:	2101      	movs	r1, #1
 80055a0:	438a      	bics	r2, r1
 80055a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a4:	f7ff f8d4 	bl	8004750 <HAL_GetTick>
 80055a8:	0003      	movs	r3, r0
 80055aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80055ae:	f7ff f8cf 	bl	8004750 <HAL_GetTick>
 80055b2:	0002      	movs	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0a2      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80055c0:	4b53      	ldr	r3, [pc, #332]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	2202      	movs	r2, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d1f1      	bne.n	80055ae <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d100      	bne.n	80055d4 <HAL_RCC_OscConfig+0x4ec>
 80055d2:	e097      	b.n	8005704 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d4:	4b4e      	ldr	r3, [pc, #312]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	220c      	movs	r2, #12
 80055da:	4013      	ands	r3, r2
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d100      	bne.n	80055e2 <HAL_RCC_OscConfig+0x4fa>
 80055e0:	e06b      	b.n	80056ba <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d14c      	bne.n	8005684 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ea:	4b49      	ldr	r3, [pc, #292]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b48      	ldr	r3, [pc, #288]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80055f0:	494a      	ldr	r1, [pc, #296]	; (800571c <HAL_RCC_OscConfig+0x634>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f6:	f7ff f8ab 	bl	8004750 <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005600:	f7ff f8a6 	bl	8004750 <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e079      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005612:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	049b      	lsls	r3, r3, #18
 800561a:	4013      	ands	r3, r2
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800561e:	4b3c      	ldr	r3, [pc, #240]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	220f      	movs	r2, #15
 8005624:	4393      	bics	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4b38      	ldr	r3, [pc, #224]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800562e:	430a      	orrs	r2, r1
 8005630:	62da      	str	r2, [r3, #44]	; 0x2c
 8005632:	4b37      	ldr	r3, [pc, #220]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a3a      	ldr	r2, [pc, #232]	; (8005720 <HAL_RCC_OscConfig+0x638>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	431a      	orrs	r2, r3
 8005646:	4b32      	ldr	r3, [pc, #200]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b30      	ldr	r3, [pc, #192]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4b2f      	ldr	r3, [pc, #188]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	0449      	lsls	r1, r1, #17
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565a:	f7ff f879 	bl	8004750 <HAL_GetTick>
 800565e:	0003      	movs	r3, r0
 8005660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005664:	f7ff f874 	bl	8004750 <HAL_GetTick>
 8005668:	0002      	movs	r2, r0
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e047      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005676:	4b26      	ldr	r3, [pc, #152]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	049b      	lsls	r3, r3, #18
 800567e:	4013      	ands	r3, r2
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x57c>
 8005682:	e03f      	b.n	8005704 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005684:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 800568a:	4924      	ldr	r1, [pc, #144]	; (800571c <HAL_RCC_OscConfig+0x634>)
 800568c:	400a      	ands	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7ff f85e 	bl	8004750 <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800569a:	f7ff f859 	bl	8004750 <HAL_GetTick>
 800569e:	0002      	movs	r2, r0
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e02c      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ac:	4b18      	ldr	r3, [pc, #96]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	049b      	lsls	r3, r3, #18
 80056b4:	4013      	ands	r3, r2
 80056b6:	d1f0      	bne.n	800569a <HAL_RCC_OscConfig+0x5b2>
 80056b8:	e024      	b.n	8005704 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e01f      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCC_OscConfig+0x628>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	23c0      	movs	r3, #192	; 0xc0
 80056d6:	025b      	lsls	r3, r3, #9
 80056d8:	401a      	ands	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	429a      	cmp	r2, r3
 80056e0:	d10e      	bne.n	8005700 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	220f      	movs	r2, #15
 80056e6:	401a      	ands	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	23f0      	movs	r3, #240	; 0xf0
 80056f4:	039b      	lsls	r3, r3, #14
 80056f6:	401a      	ands	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b008      	add	sp, #32
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	40021000 	.word	0x40021000
 8005714:	00001388 	.word	0x00001388
 8005718:	efffffff 	.word	0xefffffff
 800571c:	feffffff 	.word	0xfeffffff
 8005720:	ffc27fff 	.word	0xffc27fff

08005724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0b3      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2201      	movs	r2, #1
 800573e:	4013      	ands	r3, r2
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d911      	bls.n	800576a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005746:	4b58      	ldr	r3, [pc, #352]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	4393      	bics	r3, r2
 800574e:	0019      	movs	r1, r3
 8005750:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005758:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2201      	movs	r2, #1
 800575e:	4013      	ands	r3, r2
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d001      	beq.n	800576a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e09a      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2202      	movs	r2, #2
 8005770:	4013      	ands	r3, r2
 8005772:	d015      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2204      	movs	r2, #4
 800577a:	4013      	ands	r3, r2
 800577c:	d006      	beq.n	800578c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800577e:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 8005784:	21e0      	movs	r1, #224	; 0xe0
 8005786:	00c9      	lsls	r1, r1, #3
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800578c:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	22f0      	movs	r2, #240	; 0xf0
 8005792:	4393      	bics	r3, r2
 8005794:	0019      	movs	r1, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	4b44      	ldr	r3, [pc, #272]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	4013      	ands	r3, r2
 80057a8:	d040      	beq.n	800582c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	4013      	ands	r3, r2
 80057bc:	d114      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06e      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d107      	bne.n	80057da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	049b      	lsls	r3, r3, #18
 80057d2:	4013      	ands	r3, r2
 80057d4:	d108      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e062      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057da:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2202      	movs	r2, #2
 80057e0:	4013      	ands	r3, r2
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e05b      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2203      	movs	r2, #3
 80057ee:	4393      	bics	r3, r2
 80057f0:	0019      	movs	r1, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057fc:	f7fe ffa8 	bl	8004750 <HAL_GetTick>
 8005800:	0003      	movs	r3, r0
 8005802:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005804:	e009      	b.n	800581a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005806:	f7fe ffa3 	bl	8004750 <HAL_GetTick>
 800580a:	0002      	movs	r2, r0
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <HAL_RCC_ClockConfig+0x18c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e042      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581a:	4b24      	ldr	r3, [pc, #144]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	220c      	movs	r2, #12
 8005820:	401a      	ands	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	429a      	cmp	r2, r3
 800582a:	d1ec      	bne.n	8005806 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800582c:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2201      	movs	r2, #1
 8005832:	4013      	ands	r3, r2
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d211      	bcs.n	800585e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2201      	movs	r2, #1
 8005840:	4393      	bics	r3, r2
 8005842:	0019      	movs	r1, r3
 8005844:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584c:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <HAL_RCC_ClockConfig+0x184>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2201      	movs	r2, #1
 8005852:	4013      	ands	r3, r2
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e020      	b.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2204      	movs	r2, #4
 8005864:	4013      	ands	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a11      	ldr	r2, [pc, #68]	; (80058b4 <HAL_RCC_ClockConfig+0x190>)
 800586e:	4013      	ands	r3, r2
 8005870:	0019      	movs	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800587c:	f000 f820 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 8005880:	0001      	movs	r1, r0
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCC_ClockConfig+0x188>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	220f      	movs	r2, #15
 800588a:	4013      	ands	r3, r2
 800588c:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <HAL_RCC_ClockConfig+0x194>)
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	000a      	movs	r2, r1
 8005892:	40da      	lsrs	r2, r3
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCC_ClockConfig+0x198>)
 8005896:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005898:	2003      	movs	r0, #3
 800589a:	f7fe ff13 	bl	80046c4 <HAL_InitTick>
  
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	0018      	movs	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b004      	add	sp, #16
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40021000 	.word	0x40021000
 80058b0:	00001388 	.word	0x00001388
 80058b4:	fffff8ff 	.word	0xfffff8ff
 80058b8:	0800dfd8 	.word	0x0800dfd8
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b08f      	sub	sp, #60	; 0x3c
 80058c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80058c6:	2314      	movs	r3, #20
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_RCC_GetSysClockFreq+0xbc>)
 80058cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058ce:	c313      	stmia	r3!, {r0, r1, r4}
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058da:	c313      	stmia	r3!, {r0, r1, r4}
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e4:	2300      	movs	r3, #0
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e8:	2300      	movs	r3, #0
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
 80058ec:	2300      	movs	r3, #0
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80058f4:	4b23      	ldr	r3, [pc, #140]	; (8005984 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	220c      	movs	r2, #12
 80058fe:	4013      	ands	r3, r2
 8005900:	2b04      	cmp	r3, #4
 8005902:	d002      	beq.n	800590a <HAL_RCC_GetSysClockFreq+0x4a>
 8005904:	2b08      	cmp	r3, #8
 8005906:	d003      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0x50>
 8005908:	e02f      	b.n	800596a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800590a:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <HAL_RCC_GetSysClockFreq+0xc8>)
 800590c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800590e:	e02f      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	0c9b      	lsrs	r3, r3, #18
 8005914:	220f      	movs	r2, #15
 8005916:	4013      	ands	r3, r2
 8005918:	2214      	movs	r2, #20
 800591a:	18ba      	adds	r2, r7, r2
 800591c:	5cd3      	ldrb	r3, [r2, r3]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	220f      	movs	r2, #15
 8005926:	4013      	ands	r3, r2
 8005928:	1d3a      	adds	r2, r7, #4
 800592a:	5cd3      	ldrb	r3, [r2, r3]
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800592e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005930:	23c0      	movs	r3, #192	; 0xc0
 8005932:	025b      	lsls	r3, r3, #9
 8005934:	401a      	ands	r2, r3
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	025b      	lsls	r3, r3, #9
 800593a:	429a      	cmp	r2, r3
 800593c:	d109      	bne.n	8005952 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800593e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005940:	4811      	ldr	r0, [pc, #68]	; (8005988 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005942:	f7fa fc07 	bl	8000154 <__udivsi3>
 8005946:	0003      	movs	r3, r0
 8005948:	001a      	movs	r2, r3
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	4353      	muls	r3, r2
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
 8005950:	e008      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005954:	480c      	ldr	r0, [pc, #48]	; (8005988 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005956:	f7fa fbfd 	bl	8000154 <__udivsi3>
 800595a:	0003      	movs	r3, r0
 800595c:	001a      	movs	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	4353      	muls	r3, r2
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005968:	e002      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800596a:	4b07      	ldr	r3, [pc, #28]	; (8005988 <HAL_RCC_GetSysClockFreq+0xc8>)
 800596c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800596e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b00f      	add	sp, #60	; 0x3c
 8005978:	bd90      	pop	{r4, r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	0800df2c 	.word	0x0800df2c
 8005980:	0800df3c 	.word	0x0800df3c
 8005984:	40021000 	.word	0x40021000
 8005988:	007a1200 	.word	0x007a1200

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <HAL_RCC_GetHCLKFreq+0x10>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	20000000 	.word	0x20000000

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80059a4:	f7ff fff2 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059a8:	0001      	movs	r1, r0
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	2207      	movs	r2, #7
 80059b2:	4013      	ands	r3, r2
 80059b4:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
 80059b8:	40d9      	lsrs	r1, r3
 80059ba:	000b      	movs	r3, r1
}    
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	40021000 	.word	0x40021000
 80059c8:	0800dfe8 	.word	0x0800dfe8

080059cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e042      	b.n	8005a64 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	223d      	movs	r2, #61	; 0x3d
 80059e2:	5c9b      	ldrb	r3, [r3, r2]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	223c      	movs	r2, #60	; 0x3c
 80059ee:	2100      	movs	r1, #0
 80059f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7fe fb33 	bl	8004060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	223d      	movs	r2, #61	; 0x3d
 80059fe:	2102      	movs	r1, #2
 8005a00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	0010      	movs	r0, r2
 8005a0e:	f000 ffed 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2246      	movs	r2, #70	; 0x46
 8005a16:	2101      	movs	r1, #1
 8005a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	223e      	movs	r2, #62	; 0x3e
 8005a1e:	2101      	movs	r1, #1
 8005a20:	5499      	strb	r1, [r3, r2]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	223f      	movs	r2, #63	; 0x3f
 8005a26:	2101      	movs	r1, #1
 8005a28:	5499      	strb	r1, [r3, r2]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2240      	movs	r2, #64	; 0x40
 8005a2e:	2101      	movs	r1, #1
 8005a30:	5499      	strb	r1, [r3, r2]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2241      	movs	r2, #65	; 0x41
 8005a36:	2101      	movs	r1, #1
 8005a38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2242      	movs	r2, #66	; 0x42
 8005a3e:	2101      	movs	r1, #1
 8005a40:	5499      	strb	r1, [r3, r2]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2243      	movs	r2, #67	; 0x43
 8005a46:	2101      	movs	r1, #1
 8005a48:	5499      	strb	r1, [r3, r2]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2244      	movs	r2, #68	; 0x44
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5499      	strb	r1, [r3, r2]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2245      	movs	r2, #69	; 0x45
 8005a56:	2101      	movs	r1, #1
 8005a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	223d      	movs	r2, #61	; 0x3d
 8005a5e:	2101      	movs	r1, #1
 8005a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	0018      	movs	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e042      	b.n	8005b04 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	223d      	movs	r2, #61	; 0x3d
 8005a82:	5c9b      	ldrb	r3, [r3, r2]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	223c      	movs	r2, #60	; 0x3c
 8005a8e:	2100      	movs	r1, #0
 8005a90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 f839 	bl	8005b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	223d      	movs	r2, #61	; 0x3d
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	0019      	movs	r1, r3
 8005aac:	0010      	movs	r0, r2
 8005aae:	f000 ff9d 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2246      	movs	r2, #70	; 0x46
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	223e      	movs	r2, #62	; 0x3e
 8005abe:	2101      	movs	r1, #1
 8005ac0:	5499      	strb	r1, [r3, r2]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	223f      	movs	r2, #63	; 0x3f
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	5499      	strb	r1, [r3, r2]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2240      	movs	r2, #64	; 0x40
 8005ace:	2101      	movs	r1, #1
 8005ad0:	5499      	strb	r1, [r3, r2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2241      	movs	r2, #65	; 0x41
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2242      	movs	r2, #66	; 0x42
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2243      	movs	r2, #67	; 0x43
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5499      	strb	r1, [r3, r2]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2244      	movs	r2, #68	; 0x44
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2245      	movs	r2, #69	; 0x45
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	223d      	movs	r2, #61	; 0x3d
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d108      	bne.n	8005b3e <HAL_TIM_PWM_Start+0x22>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	223e      	movs	r2, #62	; 0x3e
 8005b30:	5c9b      	ldrb	r3, [r3, r2]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	1e5a      	subs	r2, r3, #1
 8005b38:	4193      	sbcs	r3, r2
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	e01f      	b.n	8005b7e <HAL_TIM_PWM_Start+0x62>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d108      	bne.n	8005b56 <HAL_TIM_PWM_Start+0x3a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	223f      	movs	r2, #63	; 0x3f
 8005b48:	5c9b      	ldrb	r3, [r3, r2]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	1e5a      	subs	r2, r3, #1
 8005b50:	4193      	sbcs	r3, r2
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	e013      	b.n	8005b7e <HAL_TIM_PWM_Start+0x62>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d108      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x52>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2240      	movs	r2, #64	; 0x40
 8005b60:	5c9b      	ldrb	r3, [r3, r2]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	4193      	sbcs	r3, r2
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e007      	b.n	8005b7e <HAL_TIM_PWM_Start+0x62>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2241      	movs	r2, #65	; 0x41
 8005b72:	5c9b      	ldrb	r3, [r3, r2]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	1e5a      	subs	r2, r3, #1
 8005b7a:	4193      	sbcs	r3, r2
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e06e      	b.n	8005c64 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x7a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	223e      	movs	r2, #62	; 0x3e
 8005b90:	2102      	movs	r1, #2
 8005b92:	5499      	strb	r1, [r3, r2]
 8005b94:	e013      	b.n	8005bbe <HAL_TIM_PWM_Start+0xa2>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x8a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	223f      	movs	r2, #63	; 0x3f
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	5499      	strb	r1, [r3, r2]
 8005ba4:	e00b      	b.n	8005bbe <HAL_TIM_PWM_Start+0xa2>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0x9a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	5499      	strb	r1, [r3, r2]
 8005bb4:	e003      	b.n	8005bbe <HAL_TIM_PWM_Start+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2241      	movs	r2, #65	; 0x41
 8005bba:	2102      	movs	r1, #2
 8005bbc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f001 fb3c 	bl	8007244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <HAL_TIM_PWM_Start+0x150>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0xd8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_TIM_PWM_Start+0x154>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d009      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0xd8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <HAL_TIM_PWM_Start+0x158>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0xd8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <HAL_TIM_PWM_Start+0x15c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_PWM_Start+0xdc>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <HAL_TIM_PWM_Start+0xde>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	0209      	lsls	r1, r1, #8
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <HAL_TIM_PWM_Start+0x150>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x112>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <HAL_TIM_PWM_Start+0x160>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x112>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <HAL_TIM_PWM_Start+0x154>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2207      	movs	r2, #7
 8005c36:	4013      	ands	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	d010      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	e007      	b.n	8005c62 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b004      	add	sp, #16
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800
 8005c7c:	40000400 	.word	0x40000400

08005c80 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	230f      	movs	r3, #15
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d108      	bne.n	8005caa <HAL_TIM_PWM_Start_IT+0x2a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	223e      	movs	r2, #62	; 0x3e
 8005c9c:	5c9b      	ldrb	r3, [r3, r2]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	1e5a      	subs	r2, r3, #1
 8005ca4:	4193      	sbcs	r3, r2
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	e01f      	b.n	8005cea <HAL_TIM_PWM_Start_IT+0x6a>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d108      	bne.n	8005cc2 <HAL_TIM_PWM_Start_IT+0x42>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	223f      	movs	r2, #63	; 0x3f
 8005cb4:	5c9b      	ldrb	r3, [r3, r2]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	4193      	sbcs	r3, r2
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	e013      	b.n	8005cea <HAL_TIM_PWM_Start_IT+0x6a>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d108      	bne.n	8005cda <HAL_TIM_PWM_Start_IT+0x5a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2240      	movs	r2, #64	; 0x40
 8005ccc:	5c9b      	ldrb	r3, [r3, r2]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	4193      	sbcs	r3, r2
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	e007      	b.n	8005cea <HAL_TIM_PWM_Start_IT+0x6a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2241      	movs	r2, #65	; 0x41
 8005cde:	5c9b      	ldrb	r3, [r3, r2]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	4193      	sbcs	r3, r2
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0b1      	b.n	8005e56 <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start_IT+0x82>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	223e      	movs	r2, #62	; 0x3e
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	5499      	strb	r1, [r3, r2]
 8005d00:	e013      	b.n	8005d2a <HAL_TIM_PWM_Start_IT+0xaa>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start_IT+0x92>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	223f      	movs	r2, #63	; 0x3f
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	5499      	strb	r1, [r3, r2]
 8005d10:	e00b      	b.n	8005d2a <HAL_TIM_PWM_Start_IT+0xaa>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_PWM_Start_IT+0xa2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	5499      	strb	r1, [r3, r2]
 8005d20:	e003      	b.n	8005d2a <HAL_TIM_PWM_Start_IT+0xaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2241      	movs	r2, #65	; 0x41
 8005d26:	2102      	movs	r1, #2
 8005d28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d02a      	beq.n	8005d86 <HAL_TIM_PWM_Start_IT+0x106>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b0c      	cmp	r3, #12
 8005d34:	d830      	bhi.n	8005d98 <HAL_TIM_PWM_Start_IT+0x118>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d01b      	beq.n	8005d74 <HAL_TIM_PWM_Start_IT+0xf4>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d82a      	bhi.n	8005d98 <HAL_TIM_PWM_Start_IT+0x118>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_PWM_Start_IT+0xd0>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIM_PWM_Start_IT+0xe2>
 8005d4e:	e023      	b.n	8005d98 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	60da      	str	r2, [r3, #12]
      break;
 8005d60:	e01f      	b.n	8005da2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2104      	movs	r1, #4
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	60da      	str	r2, [r3, #12]
      break;
 8005d72:	e016      	b.n	8005da2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2108      	movs	r1, #8
 8005d80:	430a      	orrs	r2, r1
 8005d82:	60da      	str	r2, [r3, #12]
      break;
 8005d84:	e00d      	b.n	8005da2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2110      	movs	r1, #16
 8005d92:	430a      	orrs	r2, r1
 8005d94:	60da      	str	r2, [r3, #12]
      break;
 8005d96:	e004      	b.n	8005da2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005d98:	230f      	movs	r3, #15
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
      break;
 8005da0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005da2:	230f      	movs	r3, #15
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d151      	bne.n	8005e50 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	2201      	movs	r2, #1
 8005db4:	0018      	movs	r0, r3
 8005db6:	f001 fa45 	bl	8007244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a28      	ldr	r2, [pc, #160]	; (8005e60 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00e      	beq.n	8005de2 <HAL_TIM_PWM_Start_IT+0x162>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <HAL_TIM_PWM_Start_IT+0x162>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a25      	ldr	r2, [pc, #148]	; (8005e68 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <HAL_TIM_PWM_Start_IT+0x162>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_PWM_Start_IT+0x166>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <HAL_TIM_PWM_Start_IT+0x168>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2180      	movs	r1, #128	; 0x80
 8005df8:	0209      	lsls	r1, r1, #8
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_TIM_PWM_Start_IT+0x19c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a18      	ldr	r2, [pc, #96]	; (8005e70 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_PWM_Start_IT+0x19c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d111      	bne.n	8005e40 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2207      	movs	r2, #7
 8005e24:	4013      	ands	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d010      	beq.n	8005e50 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2101      	movs	r1, #1
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	e007      	b.n	8005e50 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e50:	230f      	movs	r3, #15
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	781b      	ldrb	r3, [r3, #0]
}
 8005e56:	0018      	movs	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b004      	add	sp, #16
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800
 8005e70:	40000400 	.word	0x40000400

08005e74 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7e:	230f      	movs	r3, #15
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b0c      	cmp	r3, #12
 8005e8a:	d02a      	beq.n	8005ee2 <HAL_TIM_PWM_Stop_IT+0x6e>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d830      	bhi.n	8005ef4 <HAL_TIM_PWM_Stop_IT+0x80>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_PWM_Stop_IT+0x5c>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d82a      	bhi.n	8005ef4 <HAL_TIM_PWM_Stop_IT+0x80>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_PWM_Stop_IT+0x38>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d009      	beq.n	8005ebe <HAL_TIM_PWM_Stop_IT+0x4a>
 8005eaa:	e023      	b.n	8005ef4 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	438a      	bics	r2, r1
 8005eba:	60da      	str	r2, [r3, #12]
      break;
 8005ebc:	e01f      	b.n	8005efe <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2104      	movs	r1, #4
 8005eca:	438a      	bics	r2, r1
 8005ecc:	60da      	str	r2, [r3, #12]
      break;
 8005ece:	e016      	b.n	8005efe <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2108      	movs	r1, #8
 8005edc:	438a      	bics	r2, r1
 8005ede:	60da      	str	r2, [r3, #12]
      break;
 8005ee0:	e00d      	b.n	8005efe <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2110      	movs	r1, #16
 8005eee:	438a      	bics	r2, r1
 8005ef0:	60da      	str	r2, [r3, #12]
      break;
 8005ef2:	e004      	b.n	8005efe <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005ef4:	230f      	movs	r3, #15
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
      break;
 8005efc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005efe:	230f      	movs	r3, #15
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d000      	beq.n	8005f0a <HAL_TIM_PWM_Stop_IT+0x96>
 8005f08:	e063      	b.n	8005fd2 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	2200      	movs	r2, #0
 8005f12:	0018      	movs	r0, r3
 8005f14:	f001 f996 	bl	8007244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a30      	ldr	r2, [pc, #192]	; (8005fe0 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a2f      	ldr	r2, [pc, #188]	; (8005fe4 <HAL_TIM_PWM_Stop_IT+0x170>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <HAL_TIM_PWM_Stop_IT+0x174>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a2c      	ldr	r2, [pc, #176]	; (8005fec <HAL_TIM_PWM_Stop_IT+0x178>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_PWM_Stop_IT+0xd0>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_TIM_PWM_Stop_IT+0xd2>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d013      	beq.n	8005f72 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	d10d      	bne.n	8005f72 <HAL_TIM_PWM_Stop_IT+0xfe>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4a25      	ldr	r2, [pc, #148]	; (8005ff4 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d107      	bne.n	8005f72 <HAL_TIM_PWM_Stop_IT+0xfe>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4922      	ldr	r1, [pc, #136]	; (8005ff8 <HAL_TIM_PWM_Stop_IT+0x184>)
 8005f6e:	400a      	ands	r2, r1
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d10d      	bne.n	8005f9a <HAL_TIM_PWM_Stop_IT+0x126>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	d107      	bne.n	8005f9a <HAL_TIM_PWM_Stop_IT+0x126>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2101      	movs	r1, #1
 8005f96:	438a      	bics	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_PWM_Stop_IT+0x136>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	223e      	movs	r2, #62	; 0x3e
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	5499      	strb	r1, [r3, r2]
 8005fa8:	e013      	b.n	8005fd2 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Stop_IT+0x146>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	223f      	movs	r2, #63	; 0x3f
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	5499      	strb	r1, [r3, r2]
 8005fb8:	e00b      	b.n	8005fd2 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Stop_IT+0x156>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	5499      	strb	r1, [r3, r2]
 8005fc8:	e003      	b.n	8005fd2 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2241      	movs	r2, #65	; 0x41
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b004      	add	sp, #16
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800
 8005ff0:	00001111 	.word	0x00001111
 8005ff4:	00000444 	.word	0x00000444
 8005ff8:	ffff7fff 	.word	0xffff7fff

08005ffc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e042      	b.n	8006094 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	223d      	movs	r2, #61	; 0x3d
 8006012:	5c9b      	ldrb	r3, [r3, r2]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	223c      	movs	r2, #60	; 0x3c
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	0018      	movs	r0, r3
 8006026:	f7fe f859 	bl	80040dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	223d      	movs	r2, #61	; 0x3d
 800602e:	2102      	movs	r1, #2
 8006030:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	0019      	movs	r1, r3
 800603c:	0010      	movs	r0, r2
 800603e:	f000 fcd5 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2246      	movs	r2, #70	; 0x46
 8006046:	2101      	movs	r1, #1
 8006048:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	223e      	movs	r2, #62	; 0x3e
 800604e:	2101      	movs	r1, #1
 8006050:	5499      	strb	r1, [r3, r2]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	223f      	movs	r2, #63	; 0x3f
 8006056:	2101      	movs	r1, #1
 8006058:	5499      	strb	r1, [r3, r2]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2240      	movs	r2, #64	; 0x40
 800605e:	2101      	movs	r1, #1
 8006060:	5499      	strb	r1, [r3, r2]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2241      	movs	r2, #65	; 0x41
 8006066:	2101      	movs	r1, #1
 8006068:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2242      	movs	r2, #66	; 0x42
 800606e:	2101      	movs	r1, #1
 8006070:	5499      	strb	r1, [r3, r2]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2243      	movs	r2, #67	; 0x43
 8006076:	2101      	movs	r1, #1
 8006078:	5499      	strb	r1, [r3, r2]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2244      	movs	r2, #68	; 0x44
 800607e:	2101      	movs	r1, #1
 8006080:	5499      	strb	r1, [r3, r2]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2245      	movs	r2, #69	; 0x45
 8006086:	2101      	movs	r1, #1
 8006088:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	223d      	movs	r2, #61	; 0x3d
 800608e:	2101      	movs	r1, #1
 8006090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	0018      	movs	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	b002      	add	sp, #8
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	230f      	movs	r3, #15
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <HAL_TIM_IC_Start_IT+0x22>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	223e      	movs	r2, #62	; 0x3e
 80060b8:	5c9b      	ldrb	r3, [r3, r2]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e013      	b.n	80060e6 <HAL_TIM_IC_Start_IT+0x4a>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_IC_Start_IT+0x32>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	223f      	movs	r2, #63	; 0x3f
 80060c8:	5c9b      	ldrb	r3, [r3, r2]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e00b      	b.n	80060e6 <HAL_TIM_IC_Start_IT+0x4a>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d104      	bne.n	80060de <HAL_TIM_IC_Start_IT+0x42>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	5c9b      	ldrb	r3, [r3, r2]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	e003      	b.n	80060e6 <HAL_TIM_IC_Start_IT+0x4a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2241      	movs	r2, #65	; 0x41
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	220e      	movs	r2, #14
 80060e8:	18ba      	adds	r2, r7, r2
 80060ea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <HAL_TIM_IC_Start_IT+0x60>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2242      	movs	r2, #66	; 0x42
 80060f6:	5c9b      	ldrb	r3, [r3, r2]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e013      	b.n	8006124 <HAL_TIM_IC_Start_IT+0x88>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d104      	bne.n	800610c <HAL_TIM_IC_Start_IT+0x70>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2243      	movs	r2, #67	; 0x43
 8006106:	5c9b      	ldrb	r3, [r3, r2]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e00b      	b.n	8006124 <HAL_TIM_IC_Start_IT+0x88>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b08      	cmp	r3, #8
 8006110:	d104      	bne.n	800611c <HAL_TIM_IC_Start_IT+0x80>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2244      	movs	r2, #68	; 0x44
 8006116:	5c9b      	ldrb	r3, [r3, r2]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e003      	b.n	8006124 <HAL_TIM_IC_Start_IT+0x88>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2245      	movs	r2, #69	; 0x45
 8006120:	5c9b      	ldrb	r3, [r3, r2]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	210d      	movs	r1, #13
 8006126:	187a      	adds	r2, r7, r1
 8006128:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800612a:	230e      	movs	r3, #14
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d103      	bne.n	800613c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006134:	187b      	adds	r3, r7, r1
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d001      	beq.n	8006140 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0ab      	b.n	8006298 <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <HAL_TIM_IC_Start_IT+0xb4>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	223e      	movs	r2, #62	; 0x3e
 800614a:	2102      	movs	r1, #2
 800614c:	5499      	strb	r1, [r3, r2]
 800614e:	e013      	b.n	8006178 <HAL_TIM_IC_Start_IT+0xdc>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d104      	bne.n	8006160 <HAL_TIM_IC_Start_IT+0xc4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	223f      	movs	r2, #63	; 0x3f
 800615a:	2102      	movs	r1, #2
 800615c:	5499      	strb	r1, [r3, r2]
 800615e:	e00b      	b.n	8006178 <HAL_TIM_IC_Start_IT+0xdc>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d104      	bne.n	8006170 <HAL_TIM_IC_Start_IT+0xd4>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2240      	movs	r2, #64	; 0x40
 800616a:	2102      	movs	r1, #2
 800616c:	5499      	strb	r1, [r3, r2]
 800616e:	e003      	b.n	8006178 <HAL_TIM_IC_Start_IT+0xdc>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2241      	movs	r2, #65	; 0x41
 8006174:	2102      	movs	r1, #2
 8006176:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <HAL_TIM_IC_Start_IT+0xec>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2242      	movs	r2, #66	; 0x42
 8006182:	2102      	movs	r1, #2
 8006184:	5499      	strb	r1, [r3, r2]
 8006186:	e013      	b.n	80061b0 <HAL_TIM_IC_Start_IT+0x114>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b04      	cmp	r3, #4
 800618c:	d104      	bne.n	8006198 <HAL_TIM_IC_Start_IT+0xfc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2243      	movs	r2, #67	; 0x43
 8006192:	2102      	movs	r1, #2
 8006194:	5499      	strb	r1, [r3, r2]
 8006196:	e00b      	b.n	80061b0 <HAL_TIM_IC_Start_IT+0x114>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b08      	cmp	r3, #8
 800619c:	d104      	bne.n	80061a8 <HAL_TIM_IC_Start_IT+0x10c>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2244      	movs	r2, #68	; 0x44
 80061a2:	2102      	movs	r1, #2
 80061a4:	5499      	strb	r1, [r3, r2]
 80061a6:	e003      	b.n	80061b0 <HAL_TIM_IC_Start_IT+0x114>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2245      	movs	r2, #69	; 0x45
 80061ac:	2102      	movs	r1, #2
 80061ae:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	d02a      	beq.n	800620c <HAL_TIM_IC_Start_IT+0x170>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b0c      	cmp	r3, #12
 80061ba:	d830      	bhi.n	800621e <HAL_TIM_IC_Start_IT+0x182>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d01b      	beq.n	80061fa <HAL_TIM_IC_Start_IT+0x15e>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d82a      	bhi.n	800621e <HAL_TIM_IC_Start_IT+0x182>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IC_Start_IT+0x13a>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d009      	beq.n	80061e8 <HAL_TIM_IC_Start_IT+0x14c>
 80061d4:	e023      	b.n	800621e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2102      	movs	r1, #2
 80061e2:	430a      	orrs	r2, r1
 80061e4:	60da      	str	r2, [r3, #12]
      break;
 80061e6:	e01f      	b.n	8006228 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2104      	movs	r1, #4
 80061f4:	430a      	orrs	r2, r1
 80061f6:	60da      	str	r2, [r3, #12]
      break;
 80061f8:	e016      	b.n	8006228 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2108      	movs	r1, #8
 8006206:	430a      	orrs	r2, r1
 8006208:	60da      	str	r2, [r3, #12]
      break;
 800620a:	e00d      	b.n	8006228 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2110      	movs	r1, #16
 8006218:	430a      	orrs	r2, r1
 800621a:	60da      	str	r2, [r3, #12]
      break;
 800621c:	e004      	b.n	8006228 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800621e:	230f      	movs	r3, #15
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006228:	230f      	movs	r3, #15
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d12f      	bne.n	8006292 <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	0018      	movs	r0, r3
 800623c:	f001 f802 	bl	8007244 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_TIM_IC_Start_IT+0x204>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIM_IC_Start_IT+0x1c2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <HAL_TIM_IC_Start_IT+0x208>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIM_IC_Start_IT+0x1c2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <HAL_TIM_IC_Start_IT+0x20c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d111      	bne.n	8006282 <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2207      	movs	r2, #7
 8006266:	4013      	ands	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b06      	cmp	r3, #6
 800626e:	d010      	beq.n	8006292 <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	430a      	orrs	r2, r1
 800627e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006280:	e007      	b.n	8006292 <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2101      	movs	r1, #1
 800628e:	430a      	orrs	r2, r1
 8006290:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006292:	230f      	movs	r3, #15
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	781b      	ldrb	r3, [r3, #0]
}
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	b004      	add	sp, #16
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40014000 	.word	0x40014000

080062ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2202      	movs	r2, #2
 80062bc:	4013      	ands	r3, r2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d124      	bne.n	800630c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2202      	movs	r2, #2
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d11d      	bne.n	800630c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2203      	movs	r2, #3
 80062d6:	4252      	negs	r2, r2
 80062d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2203      	movs	r2, #3
 80062e8:	4013      	ands	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7fd fc8a 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e007      	b.n	8006306 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f000 fb67 	bl	80069cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0018      	movs	r0, r3
 8006302:	f7fd fc3f 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2204      	movs	r2, #4
 8006314:	4013      	ands	r3, r2
 8006316:	2b04      	cmp	r3, #4
 8006318:	d125      	bne.n	8006366 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2204      	movs	r2, #4
 8006322:	4013      	ands	r3, r2
 8006324:	2b04      	cmp	r3, #4
 8006326:	d11e      	bne.n	8006366 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2205      	movs	r2, #5
 800632e:	4252      	negs	r2, r2
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	23c0      	movs	r3, #192	; 0xc0
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4013      	ands	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f7fd fc5d 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 800634e:	e007      	b.n	8006360 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0018      	movs	r0, r3
 8006354:	f000 fb3a 	bl	80069cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	0018      	movs	r0, r3
 800635c:	f7fd fc12 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2208      	movs	r2, #8
 800636e:	4013      	ands	r3, r2
 8006370:	2b08      	cmp	r3, #8
 8006372:	d124      	bne.n	80063be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2208      	movs	r2, #8
 800637c:	4013      	ands	r3, r2
 800637e:	2b08      	cmp	r3, #8
 8006380:	d11d      	bne.n	80063be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2209      	movs	r2, #9
 8006388:	4252      	negs	r2, r2
 800638a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2204      	movs	r2, #4
 8006390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	2203      	movs	r2, #3
 800639a:	4013      	ands	r3, r2
 800639c:	d004      	beq.n	80063a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7fd fc31 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80063a6:	e007      	b.n	80063b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0018      	movs	r0, r3
 80063ac:	f000 fb0e 	bl	80069cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	0018      	movs	r0, r3
 80063b4:	f7fd fbe6 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2210      	movs	r2, #16
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d125      	bne.n	8006418 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2210      	movs	r2, #16
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	d11e      	bne.n	8006418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2211      	movs	r2, #17
 80063e0:	4252      	negs	r2, r2
 80063e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2208      	movs	r2, #8
 80063e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	23c0      	movs	r3, #192	; 0xc0
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4013      	ands	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7fd fc04 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8006400:	e007      	b.n	8006412 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0018      	movs	r0, r3
 8006406:	f000 fae1 	bl	80069cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0018      	movs	r0, r3
 800640e:	f7fd fbb9 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2201      	movs	r2, #1
 8006420:	4013      	ands	r3, r2
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10f      	bne.n	8006446 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	4013      	ands	r3, r2
 8006430:	2b01      	cmp	r3, #1
 8006432:	d108      	bne.n	8006446 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2202      	movs	r2, #2
 800643a:	4252      	negs	r2, r2
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0018      	movs	r0, r3
 8006442:	f000 fabb 	bl	80069bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2280      	movs	r2, #128	; 0x80
 800644e:	4013      	ands	r3, r2
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d10f      	bne.n	8006474 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2280      	movs	r2, #128	; 0x80
 800645c:	4013      	ands	r3, r2
 800645e:	2b80      	cmp	r3, #128	; 0x80
 8006460:	d108      	bne.n	8006474 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2281      	movs	r2, #129	; 0x81
 8006468:	4252      	negs	r2, r2
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 ffca 	bl	8007408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	4013      	ands	r3, r2
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d10f      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2240      	movs	r2, #64	; 0x40
 800648a:	4013      	ands	r3, r2
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d108      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2241      	movs	r2, #65	; 0x41
 8006496:	4252      	negs	r2, r2
 8006498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	0018      	movs	r0, r3
 800649e:	f000 fa9d 	bl	80069dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2220      	movs	r2, #32
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d10f      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d108      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2221      	movs	r2, #33	; 0x21
 80064c4:	4252      	negs	r2, r2
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 ff94 	bl	80073f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e4:	2317      	movs	r3, #23
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	223c      	movs	r2, #60	; 0x3c
 80064f0:	5c9b      	ldrb	r3, [r3, r2]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_IC_ConfigChannel+0x22>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e08c      	b.n	8006614 <HAL_TIM_IC_ConfigChannel+0x13c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	223c      	movs	r2, #60	; 0x3c
 80064fe:	2101      	movs	r1, #1
 8006500:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11b      	bne.n	8006540 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f000 fcda 	bl	8006ed0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	210c      	movs	r1, #12
 8006528:	438a      	bics	r2, r1
 800652a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6999      	ldr	r1, [r3, #24]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	619a      	str	r2, [r3, #24]
 800653e:	e062      	b.n	8006606 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b04      	cmp	r3, #4
 8006544:	d11c      	bne.n	8006580 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f000 fd41 	bl	8006fdc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	492d      	ldr	r1, [pc, #180]	; (800661c <HAL_TIM_IC_ConfigChannel+0x144>)
 8006566:	400a      	ands	r2, r1
 8006568:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6999      	ldr	r1, [r3, #24]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	021a      	lsls	r2, r3, #8
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	619a      	str	r2, [r3, #24]
 800657e:	e042      	b.n	8006606 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b08      	cmp	r3, #8
 8006584:	d11b      	bne.n	80065be <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6819      	ldr	r1, [r3, #0]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f000 fd95 	bl	80070c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	210c      	movs	r1, #12
 80065a6:	438a      	bics	r2, r1
 80065a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	61da      	str	r2, [r3, #28]
 80065bc:	e023      	b.n	8006606 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d11c      	bne.n	80065fe <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6819      	ldr	r1, [r3, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f000 fdb6 	bl	8007144 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_TIM_IC_ConfigChannel+0x144>)
 80065e4:	400a      	ands	r2, r1
 80065e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69d9      	ldr	r1, [r3, #28]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	021a      	lsls	r2, r3, #8
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	e003      	b.n	8006606 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80065fe:	2317      	movs	r3, #23
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	223c      	movs	r2, #60	; 0x3c
 800660a:	2100      	movs	r1, #0
 800660c:	5499      	strb	r1, [r3, r2]

  return status;
 800660e:	2317      	movs	r3, #23
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	781b      	ldrb	r3, [r3, #0]
}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	b006      	add	sp, #24
 800661a:	bd80      	pop	{r7, pc}
 800661c:	fffff3ff 	.word	0xfffff3ff

08006620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2317      	movs	r3, #23
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	223c      	movs	r2, #60	; 0x3c
 8006638:	5c9b      	ldrb	r3, [r3, r2]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x22>
 800663e:	2302      	movs	r3, #2
 8006640:	e0ad      	b.n	800679e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	223c      	movs	r2, #60	; 0x3c
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d100      	bne.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006650:	e076      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b0c      	cmp	r3, #12
 8006656:	d900      	bls.n	800665a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006658:	e095      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x166>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d04e      	beq.n	80066fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b08      	cmp	r3, #8
 8006664:	d900      	bls.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006666:	e08e      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_PWM_ConfigChannel+0x56>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b04      	cmp	r3, #4
 8006672:	d021      	beq.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006674:	e087      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f000 fa2a 	bl	8006ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2108      	movs	r1, #8
 8006690:	430a      	orrs	r2, r1
 8006692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2104      	movs	r1, #4
 80066a0:	438a      	bics	r2, r1
 80066a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6999      	ldr	r1, [r3, #24]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	619a      	str	r2, [r3, #24]
      break;
 80066b6:	e06b      	b.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 fa91 	bl	8006be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	0109      	lsls	r1, r1, #4
 80066d4:	430a      	orrs	r2, r1
 80066d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4931      	ldr	r1, [pc, #196]	; (80067a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80066e4:	400a      	ands	r2, r1
 80066e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6999      	ldr	r1, [r3, #24]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	619a      	str	r2, [r3, #24]
      break;
 80066fc:	e048      	b.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	0011      	movs	r1, r2
 8006706:	0018      	movs	r0, r3
 8006708:	f000 faf2 	bl	8006cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2108      	movs	r1, #8
 8006718:	430a      	orrs	r2, r1
 800671a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	69da      	ldr	r2, [r3, #28]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2104      	movs	r1, #4
 8006728:	438a      	bics	r2, r1
 800672a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69d9      	ldr	r1, [r3, #28]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	61da      	str	r2, [r3, #28]
      break;
 800673e:	e027      	b.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	0011      	movs	r1, r2
 8006748:	0018      	movs	r0, r3
 800674a:	f000 fb57 	bl	8006dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	0109      	lsls	r1, r1, #4
 800675c:	430a      	orrs	r2, r1
 800675e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	490f      	ldr	r1, [pc, #60]	; (80067a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800676c:	400a      	ands	r2, r1
 800676e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69d9      	ldr	r1, [r3, #28]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	021a      	lsls	r2, r3, #8
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	61da      	str	r2, [r3, #28]
      break;
 8006784:	e004      	b.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006786:	2317      	movs	r3, #23
 8006788:	18fb      	adds	r3, r7, r3
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
      break;
 800678e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	223c      	movs	r2, #60	; 0x3c
 8006794:	2100      	movs	r1, #0
 8006796:	5499      	strb	r1, [r3, r2]

  return status;
 8006798:	2317      	movs	r3, #23
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	781b      	ldrb	r3, [r3, #0]
}
 800679e:	0018      	movs	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b006      	add	sp, #24
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	fffffbff 	.word	0xfffffbff

080067ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	230f      	movs	r3, #15
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	223c      	movs	r2, #60	; 0x3c
 80067c2:	5c9b      	ldrb	r3, [r3, r2]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIM_ConfigClockSource+0x20>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e0bc      	b.n	8006946 <HAL_TIM_ConfigClockSource+0x19a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	223c      	movs	r2, #60	; 0x3c
 80067d0:	2101      	movs	r1, #1
 80067d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	223d      	movs	r2, #61	; 0x3d
 80067d8:	2102      	movs	r1, #2
 80067da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2277      	movs	r2, #119	; 0x77
 80067e8:	4393      	bics	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a58      	ldr	r2, [pc, #352]	; (8006950 <HAL_TIM_ConfigClockSource+0x1a4>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	0192      	lsls	r2, r2, #6
 8006804:	4293      	cmp	r3, r2
 8006806:	d040      	beq.n	800688a <HAL_TIM_ConfigClockSource+0xde>
 8006808:	2280      	movs	r2, #128	; 0x80
 800680a:	0192      	lsls	r2, r2, #6
 800680c:	4293      	cmp	r3, r2
 800680e:	d900      	bls.n	8006812 <HAL_TIM_ConfigClockSource+0x66>
 8006810:	e088      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 8006812:	2280      	movs	r2, #128	; 0x80
 8006814:	0152      	lsls	r2, r2, #5
 8006816:	4293      	cmp	r3, r2
 8006818:	d100      	bne.n	800681c <HAL_TIM_ConfigClockSource+0x70>
 800681a:	e088      	b.n	800692e <HAL_TIM_ConfigClockSource+0x182>
 800681c:	2280      	movs	r2, #128	; 0x80
 800681e:	0152      	lsls	r2, r2, #5
 8006820:	4293      	cmp	r3, r2
 8006822:	d900      	bls.n	8006826 <HAL_TIM_ConfigClockSource+0x7a>
 8006824:	e07e      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 8006826:	2b70      	cmp	r3, #112	; 0x70
 8006828:	d018      	beq.n	800685c <HAL_TIM_ConfigClockSource+0xb0>
 800682a:	d900      	bls.n	800682e <HAL_TIM_ConfigClockSource+0x82>
 800682c:	e07a      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 800682e:	2b60      	cmp	r3, #96	; 0x60
 8006830:	d04f      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x126>
 8006832:	d900      	bls.n	8006836 <HAL_TIM_ConfigClockSource+0x8a>
 8006834:	e076      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 8006836:	2b50      	cmp	r3, #80	; 0x50
 8006838:	d03b      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x106>
 800683a:	d900      	bls.n	800683e <HAL_TIM_ConfigClockSource+0x92>
 800683c:	e072      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d057      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x146>
 8006842:	d900      	bls.n	8006846 <HAL_TIM_ConfigClockSource+0x9a>
 8006844:	e06e      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 8006846:	2b30      	cmp	r3, #48	; 0x30
 8006848:	d063      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x166>
 800684a:	d86b      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 800684c:	2b20      	cmp	r3, #32
 800684e:	d060      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x166>
 8006850:	d868      	bhi.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d05d      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x166>
 8006856:	2b10      	cmp	r3, #16
 8006858:	d05b      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x166>
 800685a:	e063      	b.n	8006924 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6899      	ldr	r1, [r3, #8]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f000 fcca 	bl	8007204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2277      	movs	r2, #119	; 0x77
 800687c:	4313      	orrs	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]
      break;
 8006888:	e052      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f000 fcb3 	bl	8007204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2180      	movs	r1, #128	; 0x80
 80068aa:	01c9      	lsls	r1, r1, #7
 80068ac:	430a      	orrs	r2, r1
 80068ae:	609a      	str	r2, [r3, #8]
      break;
 80068b0:	e03e      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	001a      	movs	r2, r3
 80068c0:	f000 fb5e 	bl	8006f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2150      	movs	r1, #80	; 0x50
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 fc80 	bl	80071d0 <TIM_ITRx_SetConfig>
      break;
 80068d0:	e02e      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	001a      	movs	r2, r3
 80068e0:	f000 fbbe 	bl	8007060 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2160      	movs	r1, #96	; 0x60
 80068ea:	0018      	movs	r0, r3
 80068ec:	f000 fc70 	bl	80071d0 <TIM_ITRx_SetConfig>
      break;
 80068f0:	e01e      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	001a      	movs	r2, r3
 8006900:	f000 fb3e 	bl	8006f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2140      	movs	r1, #64	; 0x40
 800690a:	0018      	movs	r0, r3
 800690c:	f000 fc60 	bl	80071d0 <TIM_ITRx_SetConfig>
      break;
 8006910:	e00e      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	0019      	movs	r1, r3
 800691c:	0010      	movs	r0, r2
 800691e:	f000 fc57 	bl	80071d0 <TIM_ITRx_SetConfig>
      break;
 8006922:	e005      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006924:	230f      	movs	r3, #15
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]
      break;
 800692c:	e000      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800692e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	223d      	movs	r2, #61	; 0x3d
 8006934:	2101      	movs	r1, #1
 8006936:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	223c      	movs	r2, #60	; 0x3c
 800693c:	2100      	movs	r1, #0
 800693e:	5499      	strb	r1, [r3, r2]

  return status;
 8006940:	230f      	movs	r3, #15
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	781b      	ldrb	r3, [r3, #0]
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b004      	add	sp, #16
 800694c:	bd80      	pop	{r7, pc}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	ffff00ff 	.word	0xffff00ff

08006954 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b0c      	cmp	r3, #12
 8006966:	d01e      	beq.n	80069a6 <HAL_TIM_ReadCapturedValue+0x52>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b0c      	cmp	r3, #12
 800696c:	d820      	bhi.n	80069b0 <HAL_TIM_ReadCapturedValue+0x5c>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d013      	beq.n	800699c <HAL_TIM_ReadCapturedValue+0x48>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d81a      	bhi.n	80069b0 <HAL_TIM_ReadCapturedValue+0x5c>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_TIM_ReadCapturedValue+0x34>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b04      	cmp	r3, #4
 8006984:	d005      	beq.n	8006992 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8006986:	e013      	b.n	80069b0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	60fb      	str	r3, [r7, #12]
      break;
 8006990:	e00f      	b.n	80069b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	60fb      	str	r3, [r7, #12]
      break;
 800699a:	e00a      	b.n	80069b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	60fb      	str	r3, [r7, #12]
      break;
 80069a4:	e005      	b.n	80069b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	60fb      	str	r3, [r7, #12]
      break;
 80069ae:	e000      	b.n	80069b2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80069b0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b004      	add	sp, #16
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b002      	add	sp, #8
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b002      	add	sp, #8
 80069ea:	bd80      	pop	{r7, pc}

080069ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a2f      	ldr	r2, [pc, #188]	; (8006abc <TIM_Base_SetConfig+0xd0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_Base_SetConfig+0x20>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a2e      	ldr	r2, [pc, #184]	; (8006ac0 <TIM_Base_SetConfig+0xd4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2270      	movs	r2, #112	; 0x70
 8006a10:	4393      	bics	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a26      	ldr	r2, [pc, #152]	; (8006abc <TIM_Base_SetConfig+0xd0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <TIM_Base_SetConfig+0x62>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a25      	ldr	r2, [pc, #148]	; (8006ac0 <TIM_Base_SetConfig+0xd4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_Base_SetConfig+0x62>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <TIM_Base_SetConfig+0xd8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_Base_SetConfig+0x62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a23      	ldr	r2, [pc, #140]	; (8006ac8 <TIM_Base_SetConfig+0xdc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_Base_SetConfig+0x62>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a22      	ldr	r2, [pc, #136]	; (8006acc <TIM_Base_SetConfig+0xe0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_Base_SetConfig+0x62>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <TIM_Base_SetConfig+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <TIM_Base_SetConfig+0xe8>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2280      	movs	r2, #128	; 0x80
 8006a64:	4393      	bics	r3, r2
 8006a66:	001a      	movs	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <TIM_Base_SetConfig+0xd0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00b      	beq.n	8006aa6 <TIM_Base_SetConfig+0xba>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a0d      	ldr	r2, [pc, #52]	; (8006ac8 <TIM_Base_SetConfig+0xdc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d007      	beq.n	8006aa6 <TIM_Base_SetConfig+0xba>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <TIM_Base_SetConfig+0xe0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_Base_SetConfig+0xba>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	; (8006ad0 <TIM_Base_SetConfig+0xe4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d103      	bne.n	8006aae <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	615a      	str	r2, [r3, #20]
}
 8006ab4:	46c0      	nop			; (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b004      	add	sp, #16
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40012c00 	.word	0x40012c00
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40002000 	.word	0x40002000
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800
 8006ad4:	fffffcff 	.word	0xfffffcff

08006ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4393      	bics	r3, r2
 8006aea:	001a      	movs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2270      	movs	r2, #112	; 0x70
 8006b06:	4393      	bics	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	4393      	bics	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	4393      	bics	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a27      	ldr	r2, [pc, #156]	; (8006bd0 <TIM_OC1_SetConfig+0xf8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00b      	beq.n	8006b4e <TIM_OC1_SetConfig+0x76>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <TIM_OC1_SetConfig+0xfc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d007      	beq.n	8006b4e <TIM_OC1_SetConfig+0x76>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a25      	ldr	r2, [pc, #148]	; (8006bd8 <TIM_OC1_SetConfig+0x100>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <TIM_OC1_SetConfig+0x76>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a24      	ldr	r2, [pc, #144]	; (8006bdc <TIM_OC1_SetConfig+0x104>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10c      	bne.n	8006b68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2208      	movs	r2, #8
 8006b52:	4393      	bics	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4393      	bics	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <TIM_OC1_SetConfig+0xf8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00b      	beq.n	8006b88 <TIM_OC1_SetConfig+0xb0>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <TIM_OC1_SetConfig+0xfc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_OC1_SetConfig+0xb0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <TIM_OC1_SetConfig+0x100>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_OC1_SetConfig+0xb0>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <TIM_OC1_SetConfig+0x104>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d111      	bne.n	8006bac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <TIM_OC1_SetConfig+0x108>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <TIM_OC1_SetConfig+0x10c>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b006      	add	sp, #24
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40014400 	.word	0x40014400
 8006bdc:	40014800 	.word	0x40014800
 8006be0:	fffffeff 	.word	0xfffffeff
 8006be4:	fffffdff 	.word	0xfffffdff

08006be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	4393      	bics	r3, r2
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a2e      	ldr	r2, [pc, #184]	; (8006cd0 <TIM_OC2_SetConfig+0xe8>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a2d      	ldr	r2, [pc, #180]	; (8006cd4 <TIM_OC2_SetConfig+0xec>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2220      	movs	r2, #32
 8006c32:	4393      	bics	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <TIM_OC2_SetConfig+0xf0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d10d      	bne.n	8006c66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2280      	movs	r2, #128	; 0x80
 8006c4e:	4393      	bics	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2240      	movs	r2, #64	; 0x40
 8006c62:	4393      	bics	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <TIM_OC2_SetConfig+0xf0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <TIM_OC2_SetConfig+0x9e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a1a      	ldr	r2, [pc, #104]	; (8006cdc <TIM_OC2_SetConfig+0xf4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <TIM_OC2_SetConfig+0x9e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a19      	ldr	r2, [pc, #100]	; (8006ce0 <TIM_OC2_SetConfig+0xf8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_OC2_SetConfig+0x9e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a18      	ldr	r2, [pc, #96]	; (8006ce4 <TIM_OC2_SetConfig+0xfc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d113      	bne.n	8006cae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <TIM_OC2_SetConfig+0x100>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4a16      	ldr	r2, [pc, #88]	; (8006cec <TIM_OC2_SetConfig+0x104>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	621a      	str	r2, [r3, #32]
}
 8006cc8:	46c0      	nop			; (mov r8, r8)
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b006      	add	sp, #24
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	ffff8fff 	.word	0xffff8fff
 8006cd4:	fffffcff 	.word	0xfffffcff
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400
 8006ce4:	40014800 	.word	0x40014800
 8006ce8:	fffffbff 	.word	0xfffffbff
 8006cec:	fffff7ff 	.word	0xfffff7ff

08006cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	; (8006dd4 <TIM_OC3_SetConfig+0xe4>)
 8006d00:	401a      	ands	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2270      	movs	r2, #112	; 0x70
 8006d1c:	4393      	bics	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2203      	movs	r2, #3
 8006d24:	4393      	bics	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <TIM_OC3_SetConfig+0xe8>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a24      	ldr	r2, [pc, #144]	; (8006ddc <TIM_OC3_SetConfig+0xec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10d      	bne.n	8006d6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	4a23      	ldr	r2, [pc, #140]	; (8006de0 <TIM_OC3_SetConfig+0xf0>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <TIM_OC3_SetConfig+0xf4>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <TIM_OC3_SetConfig+0xec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00b      	beq.n	8006d8a <TIM_OC3_SetConfig+0x9a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <TIM_OC3_SetConfig+0xf8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d007      	beq.n	8006d8a <TIM_OC3_SetConfig+0x9a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <TIM_OC3_SetConfig+0xfc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_OC3_SetConfig+0x9a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1a      	ldr	r2, [pc, #104]	; (8006df0 <TIM_OC3_SetConfig+0x100>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d113      	bne.n	8006db2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <TIM_OC3_SetConfig+0x104>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <TIM_OC3_SetConfig+0x108>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	46c0      	nop			; (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b006      	add	sp, #24
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	fffffeff 	.word	0xfffffeff
 8006dd8:	fffffdff 	.word	0xfffffdff
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	fffff7ff 	.word	0xfffff7ff
 8006de4:	fffffbff 	.word	0xfffffbff
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800
 8006df4:	ffffefff 	.word	0xffffefff
 8006df8:	ffffdfff 	.word	0xffffdfff

08006dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	4a28      	ldr	r2, [pc, #160]	; (8006eac <TIM_OC4_SetConfig+0xb0>)
 8006e0c:	401a      	ands	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <TIM_OC4_SetConfig+0xb4>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <TIM_OC4_SetConfig+0xb8>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <TIM_OC4_SetConfig+0xbc>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	031b      	lsls	r3, r3, #12
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <TIM_OC4_SetConfig+0xc0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_OC4_SetConfig+0x78>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <TIM_OC4_SetConfig+0xc4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_OC4_SetConfig+0x78>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <TIM_OC4_SetConfig+0xc8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_OC4_SetConfig+0x78>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <TIM_OC4_SetConfig+0xcc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d109      	bne.n	8006e88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <TIM_OC4_SetConfig+0xd0>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b006      	add	sp, #24
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	ffffefff 	.word	0xffffefff
 8006eb0:	ffff8fff 	.word	0xffff8fff
 8006eb4:	fffffcff 	.word	0xfffffcff
 8006eb8:	ffffdfff 	.word	0xffffdfff
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800
 8006ecc:	ffffbfff 	.word	0xffffbfff

08006ed0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4393      	bics	r3, r2
 8006ee6:	001a      	movs	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <TIM_TI1_SetConfig+0xa4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <TIM_TI1_SetConfig+0x40>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <TIM_TI1_SetConfig+0xa8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_TI1_SetConfig+0x40>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4a1c      	ldr	r2, [pc, #112]	; (8006f7c <TIM_TI1_SetConfig+0xac>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d101      	bne.n	8006f14 <TIM_TI1_SetConfig+0x44>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <TIM_TI1_SetConfig+0x46>
 8006f14:	2300      	movs	r3, #0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	4393      	bics	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	e003      	b.n	8006f34 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	22f0      	movs	r2, #240	; 0xf0
 8006f38:	4393      	bics	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	22ff      	movs	r2, #255	; 0xff
 8006f42:	4013      	ands	r3, r2
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	4393      	bics	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	220a      	movs	r2, #10
 8006f56:	4013      	ands	r3, r2
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	b006      	add	sp, #24
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40014000 	.word	0x40014000

08006f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	2201      	movs	r2, #1
 8006f98:	4393      	bics	r3, r2
 8006f9a:	001a      	movs	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	22f0      	movs	r2, #240	; 0xf0
 8006faa:	4393      	bics	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	220a      	movs	r2, #10
 8006fbc:	4393      	bics	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b006      	add	sp, #24
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	2210      	movs	r2, #16
 8006ff0:	4393      	bics	r3, r2
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4a14      	ldr	r2, [pc, #80]	; (8007058 <TIM_TI2_SetConfig+0x7c>)
 8007008:	4013      	ands	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4a10      	ldr	r2, [pc, #64]	; (800705c <TIM_TI2_SetConfig+0x80>)
 800701a:	4013      	ands	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	22a0      	movs	r2, #160	; 0xa0
 8007030:	4393      	bics	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	22a0      	movs	r2, #160	; 0xa0
 800703a:	4013      	ands	r3, r2
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	46bd      	mov	sp, r7
 8007052:	b006      	add	sp, #24
 8007054:	bd80      	pop	{r7, pc}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	fffffcff 	.word	0xfffffcff
 800705c:	ffff0fff 	.word	0xffff0fff

08007060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	2210      	movs	r2, #16
 8007072:	4393      	bics	r3, r2
 8007074:	001a      	movs	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <TIM_TI2_ConfigInputStage+0x60>)
 800708a:	4013      	ands	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	22a0      	movs	r2, #160	; 0xa0
 800709c:	4393      	bics	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b006      	add	sp, #24
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	ffff0fff 	.word	0xffff0fff

080070c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	4a19      	ldr	r2, [pc, #100]	; (800713c <TIM_TI3_SetConfig+0x78>)
 80070d8:	401a      	ands	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2203      	movs	r2, #3
 80070ee:	4393      	bics	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	22f0      	movs	r2, #240	; 0xf0
 80070fe:	4393      	bics	r3, r2
 8007100:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	4013      	ands	r3, r2
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4a0b      	ldr	r2, [pc, #44]	; (8007140 <TIM_TI3_SetConfig+0x7c>)
 8007114:	4013      	ands	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	23a0      	movs	r3, #160	; 0xa0
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	4013      	ands	r3, r2
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b006      	add	sp, #24
 800713a:	bd80      	pop	{r7, pc}
 800713c:	fffffeff 	.word	0xfffffeff
 8007140:	fffff5ff 	.word	0xfffff5ff

08007144 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <TIM_TI4_SetConfig+0x7c>)
 8007158:	401a      	ands	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4a15      	ldr	r2, [pc, #84]	; (80071c4 <TIM_TI4_SetConfig+0x80>)
 800716e:	4013      	ands	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <TIM_TI4_SetConfig+0x84>)
 8007180:	4013      	ands	r3, r2
 8007182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	031b      	lsls	r3, r3, #12
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4a0d      	ldr	r2, [pc, #52]	; (80071cc <TIM_TI4_SetConfig+0x88>)
 8007196:	4013      	ands	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	031a      	lsls	r2, r3, #12
 800719e:	23a0      	movs	r3, #160	; 0xa0
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	4013      	ands	r3, r2
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b006      	add	sp, #24
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	ffffefff 	.word	0xffffefff
 80071c4:	fffffcff 	.word	0xfffffcff
 80071c8:	ffff0fff 	.word	0xffff0fff
 80071cc:	ffff5fff 	.word	0xffff5fff

080071d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2270      	movs	r2, #112	; 0x70
 80071e4:	4393      	bics	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	2207      	movs	r2, #7
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	609a      	str	r2, [r3, #8]
}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b004      	add	sp, #16
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4a09      	ldr	r2, [pc, #36]	; (8007240 <TIM_ETR_SetConfig+0x3c>)
 800721c:	4013      	ands	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	021a      	lsls	r2, r3, #8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	431a      	orrs	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	609a      	str	r2, [r3, #8]
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b006      	add	sp, #24
 800723e:	bd80      	pop	{r7, pc}
 8007240:	ffff00ff 	.word	0xffff00ff

08007244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	221f      	movs	r2, #31
 8007254:	4013      	ands	r3, r2
 8007256:	2201      	movs	r2, #1
 8007258:	409a      	lsls	r2, r3
 800725a:	0013      	movs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	43d2      	mvns	r2, r2
 8007266:	401a      	ands	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	211f      	movs	r1, #31
 8007274:	400b      	ands	r3, r1
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4099      	lsls	r1, r3
 800727a:	000b      	movs	r3, r1
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	46bd      	mov	sp, r7
 8007286:	b006      	add	sp, #24
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	223c      	movs	r2, #60	; 0x3c
 800729a:	5c9b      	ldrb	r3, [r3, r2]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e041      	b.n	8007328 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	223c      	movs	r2, #60	; 0x3c
 80072a8:	2101      	movs	r1, #1
 80072aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	223d      	movs	r2, #61	; 0x3d
 80072b0:	2102      	movs	r1, #2
 80072b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2270      	movs	r2, #112	; 0x70
 80072c8:	4393      	bics	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a13      	ldr	r2, [pc, #76]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d009      	beq.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a11      	ldr	r2, [pc, #68]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a10      	ldr	r2, [pc, #64]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d10c      	bne.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2280      	movs	r2, #128	; 0x80
 8007300:	4393      	bics	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4313      	orrs	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	223d      	movs	r2, #61	; 0x3d
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	223c      	movs	r2, #60	; 0x3c
 8007322:	2100      	movs	r1, #0
 8007324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	0018      	movs	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	b004      	add	sp, #16
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40000400 	.word	0x40000400
 8007338:	40014000 	.word	0x40014000

0800733c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	223c      	movs	r2, #60	; 0x3c
 800734e:	5c9b      	ldrb	r3, [r3, r2]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007354:	2302      	movs	r3, #2
 8007356:	e03e      	b.n	80073d6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	223c      	movs	r2, #60	; 0x3c
 800735c:	2101      	movs	r1, #1
 800735e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	22ff      	movs	r2, #255	; 0xff
 8007364:	4393      	bics	r3, r2
 8007366:	001a      	movs	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007374:	401a      	ands	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007382:	401a      	ands	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007390:	401a      	ands	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a13      	ldr	r2, [pc, #76]	; (80073ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800739e:	401a      	ands	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80073ac:	401a      	ands	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a0e      	ldr	r2, [pc, #56]	; (80073f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80073ba:	401a      	ands	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	223c      	movs	r2, #60	; 0x3c
 80073d0:	2100      	movs	r1, #0
 80073d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b004      	add	sp, #16
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	fffffcff 	.word	0xfffffcff
 80073e4:	fffffbff 	.word	0xfffffbff
 80073e8:	fffff7ff 	.word	0xfffff7ff
 80073ec:	ffffefff 	.word	0xffffefff
 80073f0:	ffffdfff 	.word	0xffffdfff
 80073f4:	ffffbfff 	.word	0xffffbfff

080073f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007410:	46c0      	nop			; (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	b002      	add	sp, #8
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e044      	b.n	80074b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2274      	movs	r2, #116	; 0x74
 8007436:	2100      	movs	r1, #0
 8007438:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f7fc ff35 	bl	80042ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	; 0x24
 8007446:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2101      	movs	r1, #1
 8007454:	438a      	bics	r2, r1
 8007456:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	0018      	movs	r0, r3
 800745c:	f000 fcc2 	bl	8007de4 <UART_SetConfig>
 8007460:	0003      	movs	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e024      	b.n	80074b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	0018      	movs	r0, r3
 8007476:	f000 fe0d 	bl	8008094 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	490d      	ldr	r1, [pc, #52]	; (80074bc <HAL_UART_Init+0xa4>)
 8007486:	400a      	ands	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2108      	movs	r1, #8
 8007496:	438a      	bics	r2, r1
 8007498:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2101      	movs	r1, #1
 80074a6:	430a      	orrs	r2, r1
 80074a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	0018      	movs	r0, r3
 80074ae:	f000 fea5 	bl	80081fc <UART_CheckIdleState>
 80074b2:	0003      	movs	r3, r0
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b002      	add	sp, #8
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	fffff7ff 	.word	0xfffff7ff

080074c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08a      	sub	sp, #40	; 0x28
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	1dbb      	adds	r3, r7, #6
 80074ce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d000      	beq.n	80074da <HAL_UART_Transmit+0x1a>
 80074d8:	e096      	b.n	8007608 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_UART_Transmit+0x28>
 80074e0:	1dbb      	adds	r3, r7, #6
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e08e      	b.n	800760a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	015b      	lsls	r3, r3, #5
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d109      	bne.n	800750c <HAL_UART_Transmit+0x4c>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2201      	movs	r2, #1
 8007504:	4013      	ands	r3, r2
 8007506:	d001      	beq.n	800750c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e07e      	b.n	800760a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2274      	movs	r2, #116	; 0x74
 8007510:	5c9b      	ldrb	r3, [r3, r2]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_UART_Transmit+0x5a>
 8007516:	2302      	movs	r3, #2
 8007518:	e077      	b.n	800760a <HAL_UART_Transmit+0x14a>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2274      	movs	r2, #116	; 0x74
 800751e:	2101      	movs	r1, #1
 8007520:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2280      	movs	r2, #128	; 0x80
 8007526:	2100      	movs	r1, #0
 8007528:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007530:	f7fd f90e 	bl	8004750 <HAL_GetTick>
 8007534:	0003      	movs	r3, r0
 8007536:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	1dba      	adds	r2, r7, #6
 800753c:	2150      	movs	r1, #80	; 0x50
 800753e:	8812      	ldrh	r2, [r2, #0]
 8007540:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1dba      	adds	r2, r7, #6
 8007546:	2152      	movs	r1, #82	; 0x52
 8007548:	8812      	ldrh	r2, [r2, #0]
 800754a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	015b      	lsls	r3, r3, #5
 8007554:	429a      	cmp	r2, r3
 8007556:	d108      	bne.n	800756a <HAL_UART_Transmit+0xaa>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	e003      	b.n	8007572 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800756e:	2300      	movs	r3, #0
 8007570:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2274      	movs	r2, #116	; 0x74
 8007576:	2100      	movs	r1, #0
 8007578:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800757a:	e02d      	b.n	80075d8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	0013      	movs	r3, r2
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	f000 fe7f 	bl	800828c <UART_WaitOnFlagUntilTimeout>
 800758e:	1e03      	subs	r3, r0, #0
 8007590:	d001      	beq.n	8007596 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e039      	b.n	800760a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	881a      	ldrh	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	05d2      	lsls	r2, r2, #23
 80075a6:	0dd2      	lsrs	r2, r2, #23
 80075a8:	b292      	uxth	r2, r2
 80075aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3302      	adds	r3, #2
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e008      	b.n	80075c6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	b292      	uxth	r2, r2
 80075be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	3301      	adds	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2252      	movs	r2, #82	; 0x52
 80075ca:	5a9b      	ldrh	r3, [r3, r2]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b299      	uxth	r1, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2252      	movs	r2, #82	; 0x52
 80075d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2252      	movs	r2, #82	; 0x52
 80075dc:	5a9b      	ldrh	r3, [r3, r2]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1cb      	bne.n	800757c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	0013      	movs	r3, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	2140      	movs	r1, #64	; 0x40
 80075f2:	f000 fe4b 	bl	800828c <UART_WaitOnFlagUntilTimeout>
 80075f6:	1e03      	subs	r3, r0, #0
 80075f8:	d001      	beq.n	80075fe <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e005      	b.n	800760a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	e000      	b.n	800760a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
  }
}
 800760a:	0018      	movs	r0, r3
 800760c:	46bd      	mov	sp, r7
 800760e:	b008      	add	sp, #32
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	1dbb      	adds	r3, r7, #6
 8007620:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007626:	2b20      	cmp	r3, #32
 8007628:	d000      	beq.n	800762c <HAL_UART_Transmit_DMA+0x18>
 800762a:	e08a      	b.n	8007742 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_UART_Transmit_DMA+0x26>
 8007632:	1dbb      	adds	r3, r7, #6
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e082      	b.n	8007744 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	2380      	movs	r3, #128	; 0x80
 8007644:	015b      	lsls	r3, r3, #5
 8007646:	429a      	cmp	r2, r3
 8007648:	d109      	bne.n	800765e <HAL_UART_Transmit_DMA+0x4a>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d105      	bne.n	800765e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2201      	movs	r2, #1
 8007656:	4013      	ands	r3, r2
 8007658:	d001      	beq.n	800765e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e072      	b.n	8007744 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2274      	movs	r2, #116	; 0x74
 8007662:	5c9b      	ldrb	r3, [r3, r2]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_UART_Transmit_DMA+0x58>
 8007668:	2302      	movs	r3, #2
 800766a:	e06b      	b.n	8007744 <HAL_UART_Transmit_DMA+0x130>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2274      	movs	r2, #116	; 0x74
 8007670:	2101      	movs	r1, #1
 8007672:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1dba      	adds	r2, r7, #6
 800767e:	2150      	movs	r1, #80	; 0x50
 8007680:	8812      	ldrh	r2, [r2, #0]
 8007682:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	1dba      	adds	r2, r7, #6
 8007688:	2152      	movs	r1, #82	; 0x52
 800768a:	8812      	ldrh	r2, [r2, #0]
 800768c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2280      	movs	r2, #128	; 0x80
 8007692:	2100      	movs	r1, #0
 8007694:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2221      	movs	r2, #33	; 0x21
 800769a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02b      	beq.n	80076fc <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	4a28      	ldr	r2, [pc, #160]	; (800774c <HAL_UART_Transmit_DMA+0x138>)
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b0:	4a27      	ldr	r2, [pc, #156]	; (8007750 <HAL_UART_Transmit_DMA+0x13c>)
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	4a26      	ldr	r2, [pc, #152]	; (8007754 <HAL_UART_Transmit_DMA+0x140>)
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c0:	2200      	movs	r2, #0
 80076c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076cc:	0019      	movs	r1, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3328      	adds	r3, #40	; 0x28
 80076d4:	001a      	movs	r2, r3
 80076d6:	1dbb      	adds	r3, r7, #6
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	f7fd f98d 	bl	80049f8 <HAL_DMA_Start_IT>
 80076de:	1e03      	subs	r3, r0, #0
 80076e0:	d00c      	beq.n	80076fc <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2280      	movs	r2, #128	; 0x80
 80076e6:	2110      	movs	r1, #16
 80076e8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2274      	movs	r2, #116	; 0x74
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2220      	movs	r2, #32
 80076f6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e023      	b.n	8007744 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2240      	movs	r2, #64	; 0x40
 8007702:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2274      	movs	r2, #116	; 0x74
 8007708:	2100      	movs	r1, #0
 800770a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770c:	f3ef 8310 	mrs	r3, PRIMASK
 8007710:	613b      	str	r3, [r7, #16]
  return(result);
 8007712:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007714:	61fb      	str	r3, [r7, #28]
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f383 8810 	msr	PRIMASK, r3
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2180      	movs	r1, #128	; 0x80
 800772e:	430a      	orrs	r2, r1
 8007730:	609a      	str	r2, [r3, #8]
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007742:	2302      	movs	r3, #2
  }
}
 8007744:	0018      	movs	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	b008      	add	sp, #32
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08008665 	.word	0x08008665
 8007750:	080086f9 	.word	0x080086f9
 8007754:	08008879 	.word	0x08008879

08007758 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	1dbb      	adds	r3, r7, #6
 8007764:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800776a:	2b20      	cmp	r3, #32
 800776c:	d150      	bne.n	8007810 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_UART_Receive_DMA+0x24>
 8007774:	1dbb      	adds	r3, r7, #6
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e048      	b.n	8007812 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	015b      	lsls	r3, r3, #5
 8007788:	429a      	cmp	r2, r3
 800778a:	d109      	bne.n	80077a0 <HAL_UART_Receive_DMA+0x48>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2201      	movs	r2, #1
 8007798:	4013      	ands	r3, r2
 800779a:	d001      	beq.n	80077a0 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e038      	b.n	8007812 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2274      	movs	r2, #116	; 0x74
 80077a4:	5c9b      	ldrb	r3, [r3, r2]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Receive_DMA+0x56>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e031      	b.n	8007812 <HAL_UART_Receive_DMA+0xba>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2274      	movs	r2, #116	; 0x74
 80077b2:	2101      	movs	r1, #1
 80077b4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	2380      	movs	r3, #128	; 0x80
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	4013      	ands	r3, r2
 80077c8:	d019      	beq.n	80077fe <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ca:	f3ef 8310 	mrs	r3, PRIMASK
 80077ce:	613b      	str	r3, [r7, #16]
  return(result);
 80077d0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f383 8810 	msr	PRIMASK, r3
}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2180      	movs	r1, #128	; 0x80
 80077ec:	04c9      	lsls	r1, r1, #19
 80077ee:	430a      	orrs	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f383 8810 	msr	PRIMASK, r3
}
 80077fc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80077fe:	1dbb      	adds	r3, r7, #6
 8007800:	881a      	ldrh	r2, [r3, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	0018      	movs	r0, r3
 8007808:	f000 fe04 	bl	8008414 <UART_Start_Receive_DMA>
 800780c:	0003      	movs	r3, r0
 800780e:	e000      	b.n	8007812 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	0018      	movs	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	b008      	add	sp, #32
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b0ab      	sub	sp, #172	; 0xac
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	22a4      	movs	r2, #164	; 0xa4
 800782c:	18b9      	adds	r1, r7, r2
 800782e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	20a0      	movs	r0, #160	; 0xa0
 8007838:	1839      	adds	r1, r7, r0
 800783a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	219c      	movs	r1, #156	; 0x9c
 8007844:	1879      	adds	r1, r7, r1
 8007846:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007848:	0011      	movs	r1, r2
 800784a:	18bb      	adds	r3, r7, r2
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a99      	ldr	r2, [pc, #612]	; (8007ab4 <HAL_UART_IRQHandler+0x298>)
 8007850:	4013      	ands	r3, r2
 8007852:	2298      	movs	r2, #152	; 0x98
 8007854:	18bc      	adds	r4, r7, r2
 8007856:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007858:	18bb      	adds	r3, r7, r2
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d114      	bne.n	800788a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007860:	187b      	adds	r3, r7, r1
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2220      	movs	r2, #32
 8007866:	4013      	ands	r3, r2
 8007868:	d00f      	beq.n	800788a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800786a:	183b      	adds	r3, r7, r0
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2220      	movs	r2, #32
 8007870:	4013      	ands	r3, r2
 8007872:	d00a      	beq.n	800788a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007878:	2b00      	cmp	r3, #0
 800787a:	d100      	bne.n	800787e <HAL_UART_IRQHandler+0x62>
 800787c:	e27e      	b.n	8007d7c <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	0010      	movs	r0, r2
 8007886:	4798      	blx	r3
      }
      return;
 8007888:	e278      	b.n	8007d7c <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800788a:	2398      	movs	r3, #152	; 0x98
 800788c:	18fb      	adds	r3, r7, r3
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d100      	bne.n	8007896 <HAL_UART_IRQHandler+0x7a>
 8007894:	e114      	b.n	8007ac0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007896:	239c      	movs	r3, #156	; 0x9c
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2201      	movs	r2, #1
 800789e:	4013      	ands	r3, r2
 80078a0:	d106      	bne.n	80078b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80078a2:	23a0      	movs	r3, #160	; 0xa0
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a83      	ldr	r2, [pc, #524]	; (8007ab8 <HAL_UART_IRQHandler+0x29c>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	d100      	bne.n	80078b0 <HAL_UART_IRQHandler+0x94>
 80078ae:	e107      	b.n	8007ac0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078b0:	23a4      	movs	r3, #164	; 0xa4
 80078b2:	18fb      	adds	r3, r7, r3
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2201      	movs	r2, #1
 80078b8:	4013      	ands	r3, r2
 80078ba:	d012      	beq.n	80078e2 <HAL_UART_IRQHandler+0xc6>
 80078bc:	23a0      	movs	r3, #160	; 0xa0
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	2380      	movs	r3, #128	; 0x80
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4013      	ands	r3, r2
 80078c8:	d00b      	beq.n	80078e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2201      	movs	r2, #1
 80078d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2280      	movs	r2, #128	; 0x80
 80078d6:	589b      	ldr	r3, [r3, r2]
 80078d8:	2201      	movs	r2, #1
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078e2:	23a4      	movs	r3, #164	; 0xa4
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2202      	movs	r2, #2
 80078ea:	4013      	ands	r3, r2
 80078ec:	d011      	beq.n	8007912 <HAL_UART_IRQHandler+0xf6>
 80078ee:	239c      	movs	r3, #156	; 0x9c
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2201      	movs	r2, #1
 80078f6:	4013      	ands	r3, r2
 80078f8:	d00b      	beq.n	8007912 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2202      	movs	r2, #2
 8007900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2280      	movs	r2, #128	; 0x80
 8007906:	589b      	ldr	r3, [r3, r2]
 8007908:	2204      	movs	r2, #4
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007912:	23a4      	movs	r3, #164	; 0xa4
 8007914:	18fb      	adds	r3, r7, r3
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2204      	movs	r2, #4
 800791a:	4013      	ands	r3, r2
 800791c:	d011      	beq.n	8007942 <HAL_UART_IRQHandler+0x126>
 800791e:	239c      	movs	r3, #156	; 0x9c
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	4013      	ands	r3, r2
 8007928:	d00b      	beq.n	8007942 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2204      	movs	r2, #4
 8007930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	589b      	ldr	r3, [r3, r2]
 8007938:	2202      	movs	r2, #2
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2180      	movs	r1, #128	; 0x80
 8007940:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007942:	23a4      	movs	r3, #164	; 0xa4
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2208      	movs	r2, #8
 800794a:	4013      	ands	r3, r2
 800794c:	d017      	beq.n	800797e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800794e:	23a0      	movs	r3, #160	; 0xa0
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2220      	movs	r2, #32
 8007956:	4013      	ands	r3, r2
 8007958:	d105      	bne.n	8007966 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800795a:	239c      	movs	r3, #156	; 0x9c
 800795c:	18fb      	adds	r3, r7, r3
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2201      	movs	r2, #1
 8007962:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007964:	d00b      	beq.n	800797e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2208      	movs	r2, #8
 800796c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2280      	movs	r2, #128	; 0x80
 8007972:	589b      	ldr	r3, [r3, r2]
 8007974:	2208      	movs	r2, #8
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800797e:	23a4      	movs	r3, #164	; 0xa4
 8007980:	18fb      	adds	r3, r7, r3
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4013      	ands	r3, r2
 800798a:	d013      	beq.n	80079b4 <HAL_UART_IRQHandler+0x198>
 800798c:	23a0      	movs	r3, #160	; 0xa0
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	2380      	movs	r3, #128	; 0x80
 8007994:	04db      	lsls	r3, r3, #19
 8007996:	4013      	ands	r3, r2
 8007998:	d00c      	beq.n	80079b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2280      	movs	r2, #128	; 0x80
 80079a0:	0112      	lsls	r2, r2, #4
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	589b      	ldr	r3, [r3, r2]
 80079aa:	2220      	movs	r2, #32
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2280      	movs	r2, #128	; 0x80
 80079b8:	589b      	ldr	r3, [r3, r2]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d100      	bne.n	80079c0 <HAL_UART_IRQHandler+0x1a4>
 80079be:	e1df      	b.n	8007d80 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80079c0:	23a4      	movs	r3, #164	; 0xa4
 80079c2:	18fb      	adds	r3, r7, r3
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2220      	movs	r2, #32
 80079c8:	4013      	ands	r3, r2
 80079ca:	d00e      	beq.n	80079ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079cc:	23a0      	movs	r3, #160	; 0xa0
 80079ce:	18fb      	adds	r3, r7, r3
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2220      	movs	r2, #32
 80079d4:	4013      	ands	r3, r2
 80079d6:	d008      	beq.n	80079ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	0010      	movs	r0, r2
 80079e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2280      	movs	r2, #128	; 0x80
 80079ee:	589b      	ldr	r3, [r3, r2]
 80079f0:	2194      	movs	r1, #148	; 0x94
 80079f2:	187a      	adds	r2, r7, r1
 80079f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2240      	movs	r2, #64	; 0x40
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d004      	beq.n	8007a0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a04:	187b      	adds	r3, r7, r1
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2228      	movs	r2, #40	; 0x28
 8007a0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a0c:	d047      	beq.n	8007a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	0018      	movs	r0, r3
 8007a12:	f000 fdc5 	bl	80085a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2240      	movs	r2, #64	; 0x40
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d137      	bne.n	8007a94 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a24:	f3ef 8310 	mrs	r3, PRIMASK
 8007a28:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2c:	2090      	movs	r0, #144	; 0x90
 8007a2e:	183a      	adds	r2, r7, r0
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	2301      	movs	r3, #1
 8007a34:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a38:	f383 8810 	msr	PRIMASK, r3
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2140      	movs	r1, #64	; 0x40
 8007a4a:	438a      	bics	r2, r1
 8007a4c:	609a      	str	r2, [r3, #8]
 8007a4e:	183b      	adds	r3, r7, r0
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a56:	f383 8810 	msr	PRIMASK, r3
}
 8007a5a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d012      	beq.n	8007a8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	4a14      	ldr	r2, [pc, #80]	; (8007abc <HAL_UART_IRQHandler+0x2a0>)
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	0018      	movs	r0, r3
 8007a72:	f7fd f85f 	bl	8004b34 <HAL_DMA_Abort_IT>
 8007a76:	1e03      	subs	r3, r0, #0
 8007a78:	d01a      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a84:	0018      	movs	r0, r3
 8007a86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a88:	e012      	b.n	8007ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f000 f995 	bl	8007dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a92:	e00d      	b.n	8007ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	0018      	movs	r0, r3
 8007a98:	f000 f990 	bl	8007dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9c:	e008      	b.n	8007ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f000 f98b 	bl	8007dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2280      	movs	r2, #128	; 0x80
 8007aaa:	2100      	movs	r1, #0
 8007aac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007aae:	e167      	b.n	8007d80 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab0:	46c0      	nop			; (mov r8, r8)
    return;
 8007ab2:	e165      	b.n	8007d80 <HAL_UART_IRQHandler+0x564>
 8007ab4:	0000080f 	.word	0x0000080f
 8007ab8:	04000120 	.word	0x04000120
 8007abc:	080088fb 	.word	0x080088fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d000      	beq.n	8007aca <HAL_UART_IRQHandler+0x2ae>
 8007ac8:	e131      	b.n	8007d2e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007aca:	23a4      	movs	r3, #164	; 0xa4
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2210      	movs	r2, #16
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d100      	bne.n	8007ad8 <HAL_UART_IRQHandler+0x2bc>
 8007ad6:	e12a      	b.n	8007d2e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ad8:	23a0      	movs	r3, #160	; 0xa0
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x2ca>
 8007ae4:	e123      	b.n	8007d2e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2210      	movs	r2, #16
 8007aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2240      	movs	r2, #64	; 0x40
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	d000      	beq.n	8007afe <HAL_UART_IRQHandler+0x2e2>
 8007afc:	e09b      	b.n	8007c36 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	217e      	movs	r1, #126	; 0x7e
 8007b08:	187b      	adds	r3, r7, r1
 8007b0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d100      	bne.n	8007b16 <HAL_UART_IRQHandler+0x2fa>
 8007b14:	e136      	b.n	8007d84 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2258      	movs	r2, #88	; 0x58
 8007b1a:	5a9b      	ldrh	r3, [r3, r2]
 8007b1c:	187a      	adds	r2, r7, r1
 8007b1e:	8812      	ldrh	r2, [r2, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d300      	bcc.n	8007b26 <HAL_UART_IRQHandler+0x30a>
 8007b24:	e12e      	b.n	8007d84 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	187a      	adds	r2, r7, r1
 8007b2a:	215a      	movs	r1, #90	; 0x5a
 8007b2c:	8812      	ldrh	r2, [r2, #0]
 8007b2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d06e      	beq.n	8007c18 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b44:	2301      	movs	r3, #1
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4a:	f383 8810 	msr	PRIMASK, r3
}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	498e      	ldr	r1, [pc, #568]	; (8007d94 <HAL_UART_IRQHandler+0x578>)
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	f383 8810 	msr	PRIMASK, r3
}
 8007b6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b74:	677b      	str	r3, [r7, #116]	; 0x74
 8007b76:	2301      	movs	r3, #1
 8007b78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7c:	f383 8810 	msr	PRIMASK, r3
}
 8007b80:	46c0      	nop			; (mov r8, r8)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	438a      	bics	r2, r1
 8007b90:	609a      	str	r2, [r3, #8]
 8007b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b98:	f383 8810 	msr	PRIMASK, r3
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ba8:	2301      	movs	r3, #1
 8007baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	f383 8810 	msr	PRIMASK, r3
}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2140      	movs	r1, #64	; 0x40
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]
 8007bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bc6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bca:	f383 8810 	msr	PRIMASK, r3
}
 8007bce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007be0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007be6:	2301      	movs	r3, #1
 8007be8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bec:	f383 8810 	msr	PRIMASK, r3
}
 8007bf0:	46c0      	nop			; (mov r8, r8)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2110      	movs	r1, #16
 8007bfe:	438a      	bics	r2, r1
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c08:	f383 8810 	msr	PRIMASK, r3
}
 8007c0c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7fc ff56 	bl	8004ac4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2258      	movs	r2, #88	; 0x58
 8007c1c:	5a9a      	ldrh	r2, [r3, r2]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	215a      	movs	r1, #90	; 0x5a
 8007c22:	5a5b      	ldrh	r3, [r3, r1]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	0011      	movs	r1, r2
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 f8cc 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c34:	e0a6      	b.n	8007d84 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2258      	movs	r2, #88	; 0x58
 8007c3a:	5a99      	ldrh	r1, [r3, r2]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	225a      	movs	r2, #90	; 0x5a
 8007c40:	5a9b      	ldrh	r3, [r3, r2]
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	208e      	movs	r0, #142	; 0x8e
 8007c46:	183b      	adds	r3, r7, r0
 8007c48:	1a8a      	subs	r2, r1, r2
 8007c4a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	225a      	movs	r2, #90	; 0x5a
 8007c50:	5a9b      	ldrh	r3, [r3, r2]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d100      	bne.n	8007c5a <HAL_UART_IRQHandler+0x43e>
 8007c58:	e096      	b.n	8007d88 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8007c5a:	183b      	adds	r3, r7, r0
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d100      	bne.n	8007c64 <HAL_UART_IRQHandler+0x448>
 8007c62:	e091      	b.n	8007d88 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c64:	f3ef 8310 	mrs	r3, PRIMASK
 8007c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c6c:	2488      	movs	r4, #136	; 0x88
 8007c6e:	193a      	adds	r2, r7, r4
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	2301      	movs	r3, #1
 8007c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f383 8810 	msr	PRIMASK, r3
}
 8007c7c:	46c0      	nop			; (mov r8, r8)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4943      	ldr	r1, [pc, #268]	; (8007d98 <HAL_UART_IRQHandler+0x57c>)
 8007c8a:	400a      	ands	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	193b      	adds	r3, r7, r4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f383 8810 	msr	PRIMASK, r3
}
 8007c9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ca2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	2484      	movs	r4, #132	; 0x84
 8007ca6:	193a      	adds	r2, r7, r4
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	2301      	movs	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f383 8810 	msr	PRIMASK, r3
}
 8007cb4:	46c0      	nop			; (mov r8, r8)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	438a      	bics	r2, r1
 8007cc4:	609a      	str	r2, [r3, #8]
 8007cc6:	193b      	adds	r3, r7, r4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	f383 8810 	msr	PRIMASK, r3
}
 8007cd2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cee:	2480      	movs	r4, #128	; 0x80
 8007cf0:	193a      	adds	r2, r7, r4
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	f383 8810 	msr	PRIMASK, r3
}
 8007cfe:	46c0      	nop			; (mov r8, r8)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	438a      	bics	r2, r1
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	193b      	adds	r3, r7, r4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	f383 8810 	msr	PRIMASK, r3
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d1e:	183b      	adds	r3, r7, r0
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	0011      	movs	r1, r2
 8007d26:	0018      	movs	r0, r3
 8007d28:	f000 f850 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d2c:	e02c      	b.n	8007d88 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d2e:	23a4      	movs	r3, #164	; 0xa4
 8007d30:	18fb      	adds	r3, r7, r3
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2280      	movs	r2, #128	; 0x80
 8007d36:	4013      	ands	r3, r2
 8007d38:	d00f      	beq.n	8007d5a <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d3a:	23a0      	movs	r3, #160	; 0xa0
 8007d3c:	18fb      	adds	r3, r7, r3
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2280      	movs	r2, #128	; 0x80
 8007d42:	4013      	ands	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01e      	beq.n	8007d8c <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	0010      	movs	r0, r2
 8007d56:	4798      	blx	r3
    }
    return;
 8007d58:	e018      	b.n	8007d8c <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d5a:	23a4      	movs	r3, #164	; 0xa4
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2240      	movs	r2, #64	; 0x40
 8007d62:	4013      	ands	r3, r2
 8007d64:	d013      	beq.n	8007d8e <HAL_UART_IRQHandler+0x572>
 8007d66:	23a0      	movs	r3, #160	; 0xa0
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2240      	movs	r2, #64	; 0x40
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d00d      	beq.n	8007d8e <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	0018      	movs	r0, r3
 8007d76:	f000 fdd7 	bl	8008928 <UART_EndTransmit_IT>
    return;
 8007d7a:	e008      	b.n	8007d8e <HAL_UART_IRQHandler+0x572>
      return;
 8007d7c:	46c0      	nop			; (mov r8, r8)
 8007d7e:	e006      	b.n	8007d8e <HAL_UART_IRQHandler+0x572>
    return;
 8007d80:	46c0      	nop			; (mov r8, r8)
 8007d82:	e004      	b.n	8007d8e <HAL_UART_IRQHandler+0x572>
      return;
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	e002      	b.n	8007d8e <HAL_UART_IRQHandler+0x572>
      return;
 8007d88:	46c0      	nop			; (mov r8, r8)
 8007d8a:	e000      	b.n	8007d8e <HAL_UART_IRQHandler+0x572>
    return;
 8007d8c:	46c0      	nop			; (mov r8, r8)
  }

}
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	b02b      	add	sp, #172	; 0xac
 8007d92:	bd90      	pop	{r4, r7, pc}
 8007d94:	fffffeff 	.word	0xfffffeff
 8007d98:	fffffedf 	.word	0xfffffedf

08007d9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007da4:	46c0      	nop			; (mov r8, r8)
 8007da6:	46bd      	mov	sp, r7
 8007da8:	b002      	add	sp, #8
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007db4:	46c0      	nop			; (mov r8, r8)
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b002      	add	sp, #8
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dc4:	46c0      	nop			; (mov r8, r8)
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	000a      	movs	r2, r1
 8007dd6:	1cbb      	adds	r3, r7, #2
 8007dd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b002      	add	sp, #8
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dec:	231e      	movs	r3, #30
 8007dee:	18fb      	adds	r3, r7, r3
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a97      	ldr	r2, [pc, #604]	; (8008070 <UART_SetConfig+0x28c>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	0019      	movs	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a92      	ldr	r2, [pc, #584]	; (8008074 <UART_SetConfig+0x290>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	0019      	movs	r1, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	4a89      	ldr	r2, [pc, #548]	; (8008078 <UART_SetConfig+0x294>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	0019      	movs	r1, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a85      	ldr	r2, [pc, #532]	; (800807c <UART_SetConfig+0x298>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d127      	bne.n	8007eba <UART_SetConfig+0xd6>
 8007e6a:	4b85      	ldr	r3, [pc, #532]	; (8008080 <UART_SetConfig+0x29c>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	2203      	movs	r2, #3
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d00d      	beq.n	8007e92 <UART_SetConfig+0xae>
 8007e76:	d81b      	bhi.n	8007eb0 <UART_SetConfig+0xcc>
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d014      	beq.n	8007ea6 <UART_SetConfig+0xc2>
 8007e7c:	d818      	bhi.n	8007eb0 <UART_SetConfig+0xcc>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <UART_SetConfig+0xa4>
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d00a      	beq.n	8007e9c <UART_SetConfig+0xb8>
 8007e86:	e013      	b.n	8007eb0 <UART_SetConfig+0xcc>
 8007e88:	231f      	movs	r3, #31
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e035      	b.n	8007efe <UART_SetConfig+0x11a>
 8007e92:	231f      	movs	r3, #31
 8007e94:	18fb      	adds	r3, r7, r3
 8007e96:	2202      	movs	r2, #2
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e030      	b.n	8007efe <UART_SetConfig+0x11a>
 8007e9c:	231f      	movs	r3, #31
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e02b      	b.n	8007efe <UART_SetConfig+0x11a>
 8007ea6:	231f      	movs	r3, #31
 8007ea8:	18fb      	adds	r3, r7, r3
 8007eaa:	2208      	movs	r2, #8
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e026      	b.n	8007efe <UART_SetConfig+0x11a>
 8007eb0:	231f      	movs	r3, #31
 8007eb2:	18fb      	adds	r3, r7, r3
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e021      	b.n	8007efe <UART_SetConfig+0x11a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a71      	ldr	r2, [pc, #452]	; (8008084 <UART_SetConfig+0x2a0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d104      	bne.n	8007ece <UART_SetConfig+0xea>
 8007ec4:	231f      	movs	r3, #31
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e017      	b.n	8007efe <UART_SetConfig+0x11a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a6d      	ldr	r2, [pc, #436]	; (8008088 <UART_SetConfig+0x2a4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d104      	bne.n	8007ee2 <UART_SetConfig+0xfe>
 8007ed8:	231f      	movs	r3, #31
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
 8007ee0:	e00d      	b.n	8007efe <UART_SetConfig+0x11a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a69      	ldr	r2, [pc, #420]	; (800808c <UART_SetConfig+0x2a8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d104      	bne.n	8007ef6 <UART_SetConfig+0x112>
 8007eec:	231f      	movs	r3, #31
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e003      	b.n	8007efe <UART_SetConfig+0x11a>
 8007ef6:	231f      	movs	r3, #31
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	2210      	movs	r2, #16
 8007efc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69da      	ldr	r2, [r3, #28]
 8007f02:	2380      	movs	r3, #128	; 0x80
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d15d      	bne.n	8007fc6 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8007f0a:	231f      	movs	r3, #31
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d015      	beq.n	8007f40 <UART_SetConfig+0x15c>
 8007f14:	dc18      	bgt.n	8007f48 <UART_SetConfig+0x164>
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d00d      	beq.n	8007f36 <UART_SetConfig+0x152>
 8007f1a:	dc15      	bgt.n	8007f48 <UART_SetConfig+0x164>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <UART_SetConfig+0x142>
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d005      	beq.n	8007f30 <UART_SetConfig+0x14c>
 8007f24:	e010      	b.n	8007f48 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f26:	f7fd fd3b 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8007f2a:	0003      	movs	r3, r0
 8007f2c:	61bb      	str	r3, [r7, #24]
        break;
 8007f2e:	e012      	b.n	8007f56 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f30:	4b57      	ldr	r3, [pc, #348]	; (8008090 <UART_SetConfig+0x2ac>)
 8007f32:	61bb      	str	r3, [r7, #24]
        break;
 8007f34:	e00f      	b.n	8007f56 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f36:	f7fd fcc3 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 8007f3a:	0003      	movs	r3, r0
 8007f3c:	61bb      	str	r3, [r7, #24]
        break;
 8007f3e:	e00a      	b.n	8007f56 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	61bb      	str	r3, [r7, #24]
        break;
 8007f46:	e006      	b.n	8007f56 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f4c:	231e      	movs	r3, #30
 8007f4e:	18fb      	adds	r3, r7, r3
 8007f50:	2201      	movs	r2, #1
 8007f52:	701a      	strb	r2, [r3, #0]
        break;
 8007f54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d100      	bne.n	8007f5e <UART_SetConfig+0x17a>
 8007f5c:	e07b      	b.n	8008056 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	005a      	lsls	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	18d2      	adds	r2, r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	0019      	movs	r1, r3
 8007f70:	0010      	movs	r0, r2
 8007f72:	f7f8 f8ef 	bl	8000154 <__udivsi3>
 8007f76:	0003      	movs	r3, r0
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b0f      	cmp	r3, #15
 8007f80:	d91c      	bls.n	8007fbc <UART_SetConfig+0x1d8>
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	025b      	lsls	r3, r3, #9
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d217      	bcs.n	8007fbc <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	200e      	movs	r0, #14
 8007f92:	183b      	adds	r3, r7, r0
 8007f94:	210f      	movs	r1, #15
 8007f96:	438a      	bics	r2, r1
 8007f98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	b299      	uxth	r1, r3
 8007fa6:	183b      	adds	r3, r7, r0
 8007fa8:	183a      	adds	r2, r7, r0
 8007faa:	8812      	ldrh	r2, [r2, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	183a      	adds	r2, r7, r0
 8007fb6:	8812      	ldrh	r2, [r2, #0]
 8007fb8:	60da      	str	r2, [r3, #12]
 8007fba:	e04c      	b.n	8008056 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007fbc:	231e      	movs	r3, #30
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	e047      	b.n	8008056 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fc6:	231f      	movs	r3, #31
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d015      	beq.n	8007ffc <UART_SetConfig+0x218>
 8007fd0:	dc18      	bgt.n	8008004 <UART_SetConfig+0x220>
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d00d      	beq.n	8007ff2 <UART_SetConfig+0x20e>
 8007fd6:	dc15      	bgt.n	8008004 <UART_SetConfig+0x220>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <UART_SetConfig+0x1fe>
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d005      	beq.n	8007fec <UART_SetConfig+0x208>
 8007fe0:	e010      	b.n	8008004 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe2:	f7fd fcdd 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	61bb      	str	r3, [r7, #24]
        break;
 8007fea:	e012      	b.n	8008012 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fec:	4b28      	ldr	r3, [pc, #160]	; (8008090 <UART_SetConfig+0x2ac>)
 8007fee:	61bb      	str	r3, [r7, #24]
        break;
 8007ff0:	e00f      	b.n	8008012 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff2:	f7fd fc65 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 8007ff6:	0003      	movs	r3, r0
 8007ff8:	61bb      	str	r3, [r7, #24]
        break;
 8007ffa:	e00a      	b.n	8008012 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	61bb      	str	r3, [r7, #24]
        break;
 8008002:	e006      	b.n	8008012 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008008:	231e      	movs	r3, #30
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
        break;
 8008010:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01e      	beq.n	8008056 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	085a      	lsrs	r2, r3, #1
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	18d2      	adds	r2, r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	0019      	movs	r1, r3
 8008028:	0010      	movs	r0, r2
 800802a:	f7f8 f893 	bl	8000154 <__udivsi3>
 800802e:	0003      	movs	r3, r0
 8008030:	b29b      	uxth	r3, r3
 8008032:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b0f      	cmp	r3, #15
 8008038:	d909      	bls.n	800804e <UART_SetConfig+0x26a>
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	429a      	cmp	r2, r3
 8008042:	d204      	bcs.n	800804e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	60da      	str	r2, [r3, #12]
 800804c:	e003      	b.n	8008056 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800804e:	231e      	movs	r3, #30
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	2201      	movs	r2, #1
 8008054:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008062:	231e      	movs	r3, #30
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	781b      	ldrb	r3, [r3, #0]
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b008      	add	sp, #32
 800806e:	bd80      	pop	{r7, pc}
 8008070:	efff69f3 	.word	0xefff69f3
 8008074:	ffffcfff 	.word	0xffffcfff
 8008078:	fffff4ff 	.word	0xfffff4ff
 800807c:	40013800 	.word	0x40013800
 8008080:	40021000 	.word	0x40021000
 8008084:	40004400 	.word	0x40004400
 8008088:	40004800 	.word	0x40004800
 800808c:	40004c00 	.word	0x40004c00
 8008090:	007a1200 	.word	0x007a1200

08008094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2201      	movs	r2, #1
 80080a2:	4013      	ands	r3, r2
 80080a4:	d00b      	beq.n	80080be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4a4a      	ldr	r2, [pc, #296]	; (80081d8 <UART_AdvFeatureConfig+0x144>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	0019      	movs	r1, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2202      	movs	r2, #2
 80080c4:	4013      	ands	r3, r2
 80080c6:	d00b      	beq.n	80080e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4a43      	ldr	r2, [pc, #268]	; (80081dc <UART_AdvFeatureConfig+0x148>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	0019      	movs	r1, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	2204      	movs	r2, #4
 80080e6:	4013      	ands	r3, r2
 80080e8:	d00b      	beq.n	8008102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4a3b      	ldr	r2, [pc, #236]	; (80081e0 <UART_AdvFeatureConfig+0x14c>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	0019      	movs	r1, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2208      	movs	r2, #8
 8008108:	4013      	ands	r3, r2
 800810a:	d00b      	beq.n	8008124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4a34      	ldr	r2, [pc, #208]	; (80081e4 <UART_AdvFeatureConfig+0x150>)
 8008114:	4013      	ands	r3, r2
 8008116:	0019      	movs	r1, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2210      	movs	r2, #16
 800812a:	4013      	ands	r3, r2
 800812c:	d00b      	beq.n	8008146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4a2c      	ldr	r2, [pc, #176]	; (80081e8 <UART_AdvFeatureConfig+0x154>)
 8008136:	4013      	ands	r3, r2
 8008138:	0019      	movs	r1, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2220      	movs	r2, #32
 800814c:	4013      	ands	r3, r2
 800814e:	d00b      	beq.n	8008168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	4a25      	ldr	r2, [pc, #148]	; (80081ec <UART_AdvFeatureConfig+0x158>)
 8008158:	4013      	ands	r3, r2
 800815a:	0019      	movs	r1, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	2240      	movs	r2, #64	; 0x40
 800816e:	4013      	ands	r3, r2
 8008170:	d01d      	beq.n	80081ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	4a1d      	ldr	r2, [pc, #116]	; (80081f0 <UART_AdvFeatureConfig+0x15c>)
 800817a:	4013      	ands	r3, r2
 800817c:	0019      	movs	r1, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818e:	2380      	movs	r3, #128	; 0x80
 8008190:	035b      	lsls	r3, r3, #13
 8008192:	429a      	cmp	r2, r3
 8008194:	d10b      	bne.n	80081ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4a15      	ldr	r2, [pc, #84]	; (80081f4 <UART_AdvFeatureConfig+0x160>)
 800819e:	4013      	ands	r3, r2
 80081a0:	0019      	movs	r1, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2280      	movs	r2, #128	; 0x80
 80081b4:	4013      	ands	r3, r2
 80081b6:	d00b      	beq.n	80081d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	4a0e      	ldr	r2, [pc, #56]	; (80081f8 <UART_AdvFeatureConfig+0x164>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	0019      	movs	r1, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }
}
 80081d0:	46c0      	nop			; (mov r8, r8)
 80081d2:	46bd      	mov	sp, r7
 80081d4:	b002      	add	sp, #8
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	fffdffff 	.word	0xfffdffff
 80081dc:	fffeffff 	.word	0xfffeffff
 80081e0:	fffbffff 	.word	0xfffbffff
 80081e4:	ffff7fff 	.word	0xffff7fff
 80081e8:	ffffefff 	.word	0xffffefff
 80081ec:	ffffdfff 	.word	0xffffdfff
 80081f0:	ffefffff 	.word	0xffefffff
 80081f4:	ff9fffff 	.word	0xff9fffff
 80081f8:	fff7ffff 	.word	0xfff7ffff

080081fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af02      	add	r7, sp, #8
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2280      	movs	r2, #128	; 0x80
 8008208:	2100      	movs	r1, #0
 800820a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800820c:	f7fc faa0 	bl	8004750 <HAL_GetTick>
 8008210:	0003      	movs	r3, r0
 8008212:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2208      	movs	r2, #8
 800821c:	4013      	ands	r3, r2
 800821e:	2b08      	cmp	r3, #8
 8008220:	d10c      	bne.n	800823c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2280      	movs	r2, #128	; 0x80
 8008226:	0391      	lsls	r1, r2, #14
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4a17      	ldr	r2, [pc, #92]	; (8008288 <UART_CheckIdleState+0x8c>)
 800822c:	9200      	str	r2, [sp, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	f000 f82c 	bl	800828c <UART_WaitOnFlagUntilTimeout>
 8008234:	1e03      	subs	r3, r0, #0
 8008236:	d001      	beq.n	800823c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e021      	b.n	8008280 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2204      	movs	r2, #4
 8008244:	4013      	ands	r3, r2
 8008246:	2b04      	cmp	r3, #4
 8008248:	d10c      	bne.n	8008264 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2280      	movs	r2, #128	; 0x80
 800824e:	03d1      	lsls	r1, r2, #15
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4a0d      	ldr	r2, [pc, #52]	; (8008288 <UART_CheckIdleState+0x8c>)
 8008254:	9200      	str	r2, [sp, #0]
 8008256:	2200      	movs	r2, #0
 8008258:	f000 f818 	bl	800828c <UART_WaitOnFlagUntilTimeout>
 800825c:	1e03      	subs	r3, r0, #0
 800825e:	d001      	beq.n	8008264 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e00d      	b.n	8008280 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2274      	movs	r2, #116	; 0x74
 800827a:	2100      	movs	r1, #0
 800827c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	0018      	movs	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	b004      	add	sp, #16
 8008286:	bd80      	pop	{r7, pc}
 8008288:	01ffffff 	.word	0x01ffffff

0800828c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b094      	sub	sp, #80	; 0x50
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	603b      	str	r3, [r7, #0]
 8008298:	1dfb      	adds	r3, r7, #7
 800829a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829c:	e0a3      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082a0:	3301      	adds	r3, #1
 80082a2:	d100      	bne.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80082a4:	e09f      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a6:	f7fc fa53 	bl	8004750 <HAL_GetTick>
 80082aa:	0002      	movs	r2, r0
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <UART_WaitOnFlagUntilTimeout+0x30>
 80082b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d13d      	bne.n	8008338 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082bc:	f3ef 8310 	mrs	r3, PRIMASK
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082c4:	647b      	str	r3, [r7, #68]	; 0x44
 80082c6:	2301      	movs	r3, #1
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	f383 8810 	msr	PRIMASK, r3
}
 80082d0:	46c0      	nop			; (mov r8, r8)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	494c      	ldr	r1, [pc, #304]	; (8008410 <UART_WaitOnFlagUntilTimeout+0x184>)
 80082de:	400a      	ands	r2, r1
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	f383 8810 	msr	PRIMASK, r3
}
 80082ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ee:	f3ef 8310 	mrs	r3, PRIMASK
 80082f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f6:	643b      	str	r3, [r7, #64]	; 0x40
 80082f8:	2301      	movs	r3, #1
 80082fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	f383 8810 	msr	PRIMASK, r3
}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2101      	movs	r1, #1
 8008310:	438a      	bics	r2, r1
 8008312:	609a      	str	r2, [r3, #8]
 8008314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831a:	f383 8810 	msr	PRIMASK, r3
}
 800831e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2274      	movs	r2, #116	; 0x74
 8008330:	2100      	movs	r1, #0
 8008332:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e067      	b.n	8008408 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2204      	movs	r2, #4
 8008340:	4013      	ands	r3, r2
 8008342:	d050      	beq.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69da      	ldr	r2, [r3, #28]
 800834a:	2380      	movs	r3, #128	; 0x80
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	401a      	ands	r2, r3
 8008350:	2380      	movs	r3, #128	; 0x80
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	429a      	cmp	r2, r3
 8008356:	d146      	bne.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2280      	movs	r2, #128	; 0x80
 800835e:	0112      	lsls	r2, r2, #4
 8008360:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008362:	f3ef 8310 	mrs	r3, PRIMASK
 8008366:	613b      	str	r3, [r7, #16]
  return(result);
 8008368:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800836a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f383 8810 	msr	PRIMASK, r3
}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4923      	ldr	r1, [pc, #140]	; (8008410 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008384:	400a      	ands	r2, r1
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	f383 8810 	msr	PRIMASK, r3
}
 8008392:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008394:	f3ef 8310 	mrs	r3, PRIMASK
 8008398:	61fb      	str	r3, [r7, #28]
  return(result);
 800839a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839c:	64bb      	str	r3, [r7, #72]	; 0x48
 800839e:	2301      	movs	r3, #1
 80083a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	f383 8810 	msr	PRIMASK, r3
}
 80083a8:	46c0      	nop			; (mov r8, r8)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2101      	movs	r1, #1
 80083b6:	438a      	bics	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
 80083ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	f383 8810 	msr	PRIMASK, r3
}
 80083c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2280      	movs	r2, #128	; 0x80
 80083d6:	2120      	movs	r1, #32
 80083d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2274      	movs	r2, #116	; 0x74
 80083de:	2100      	movs	r1, #0
 80083e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e010      	b.n	8008408 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	4013      	ands	r3, r2
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	425a      	negs	r2, r3
 80083f6:	4153      	adcs	r3, r2
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	001a      	movs	r2, r3
 80083fc:	1dfb      	adds	r3, r7, #7
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d100      	bne.n	8008406 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008404:	e74b      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	b014      	add	sp, #80	; 0x50
 800840e:	bd80      	pop	{r7, pc}
 8008410:	fffffe5f 	.word	0xfffffe5f

08008414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b090      	sub	sp, #64	; 0x40
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	1dbb      	adds	r3, r7, #6
 8008420:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	1dba      	adds	r2, r7, #6
 800842c:	2158      	movs	r1, #88	; 0x58
 800842e:	8812      	ldrh	r2, [r2, #0]
 8008430:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2280      	movs	r2, #128	; 0x80
 8008436:	2100      	movs	r1, #0
 8008438:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2222      	movs	r2, #34	; 0x22
 800843e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02b      	beq.n	80084a0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844c:	4a3f      	ldr	r2, [pc, #252]	; (800854c <UART_Start_Receive_DMA+0x138>)
 800844e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008454:	4a3e      	ldr	r2, [pc, #248]	; (8008550 <UART_Start_Receive_DMA+0x13c>)
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845c:	4a3d      	ldr	r2, [pc, #244]	; (8008554 <UART_Start_Receive_DMA+0x140>)
 800845e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008464:	2200      	movs	r2, #0
 8008466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3324      	adds	r3, #36	; 0x24
 8008472:	0019      	movs	r1, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008478:	001a      	movs	r2, r3
 800847a:	1dbb      	adds	r3, r7, #6
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	f7fc fabb 	bl	80049f8 <HAL_DMA_Start_IT>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d00c      	beq.n	80084a0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2280      	movs	r2, #128	; 0x80
 800848a:	2110      	movs	r1, #16
 800848c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2274      	movs	r2, #116	; 0x74
 8008492:	2100      	movs	r1, #0
 8008494:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e050      	b.n	8008542 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2274      	movs	r2, #116	; 0x74
 80084a4:	2100      	movs	r1, #0
 80084a6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a8:	f3ef 8310 	mrs	r3, PRIMASK
 80084ac:	613b      	str	r3, [r7, #16]
  return(result);
 80084ae:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b2:	2301      	movs	r3, #1
 80084b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f383 8810 	msr	PRIMASK, r3
}
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2180      	movs	r1, #128	; 0x80
 80084ca:	0049      	lsls	r1, r1, #1
 80084cc:	430a      	orrs	r2, r1
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084dc:	f3ef 8310 	mrs	r3, PRIMASK
 80084e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80084e2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80084e6:	2301      	movs	r3, #1
 80084e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f383 8810 	msr	PRIMASK, r3
}
 80084f0:	46c0      	nop			; (mov r8, r8)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2101      	movs	r1, #1
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	f383 8810 	msr	PRIMASK, r3
}
 800850c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800850e:	f3ef 8310 	mrs	r3, PRIMASK
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	2301      	movs	r3, #1
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	f383 8810 	msr	PRIMASK, r3
}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2140      	movs	r1, #64	; 0x40
 8008530:	430a      	orrs	r2, r1
 8008532:	609a      	str	r2, [r3, #8]
 8008534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008536:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f383 8810 	msr	PRIMASK, r3
}
 800853e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	0018      	movs	r0, r3
 8008544:	46bd      	mov	sp, r7
 8008546:	b010      	add	sp, #64	; 0x40
 8008548:	bd80      	pop	{r7, pc}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	08008719 	.word	0x08008719
 8008550:	0800883d 	.word	0x0800883d
 8008554:	08008879 	.word	0x08008879

08008558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
 8008564:	60bb      	str	r3, [r7, #8]
  return(result);
 8008566:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	2301      	movs	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f383 8810 	msr	PRIMASK, r3
}
 8008574:	46c0      	nop			; (mov r8, r8)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	21c0      	movs	r1, #192	; 0xc0
 8008582:	438a      	bics	r2, r1
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f383 8810 	msr	PRIMASK, r3
}
 8008590:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008598:	46c0      	nop			; (mov r8, r8)
 800859a:	46bd      	mov	sp, r7
 800859c:	b006      	add	sp, #24
 800859e:	bd80      	pop	{r7, pc}

080085a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08e      	sub	sp, #56	; 0x38
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a8:	f3ef 8310 	mrs	r3, PRIMASK
 80085ac:	617b      	str	r3, [r7, #20]
  return(result);
 80085ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
 80085b2:	2301      	movs	r3, #1
 80085b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f383 8810 	msr	PRIMASK, r3
}
 80085bc:	46c0      	nop			; (mov r8, r8)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4925      	ldr	r1, [pc, #148]	; (8008660 <UART_EndRxTransfer+0xc0>)
 80085ca:	400a      	ands	r2, r1
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f383 8810 	msr	PRIMASK, r3
}
 80085d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085da:	f3ef 8310 	mrs	r3, PRIMASK
 80085de:	623b      	str	r3, [r7, #32]
  return(result);
 80085e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30
 80085e4:	2301      	movs	r3, #1
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	f383 8810 	msr	PRIMASK, r3
}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2101      	movs	r1, #1
 80085fc:	438a      	bics	r2, r1
 80085fe:	609a      	str	r2, [r3, #8]
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	f383 8810 	msr	PRIMASK, r3
}
 800860a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008610:	2b01      	cmp	r3, #1
 8008612:	d118      	bne.n	8008646 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008614:	f3ef 8310 	mrs	r3, PRIMASK
 8008618:	60bb      	str	r3, [r7, #8]
  return(result);
 800861a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861e:	2301      	movs	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f383 8810 	msr	PRIMASK, r3
}
 8008628:	46c0      	nop			; (mov r8, r8)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2110      	movs	r1, #16
 8008636:	438a      	bics	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f383 8810 	msr	PRIMASK, r3
}
 8008644:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008658:	46c0      	nop			; (mov r8, r8)
 800865a:	46bd      	mov	sp, r7
 800865c:	b00e      	add	sp, #56	; 0x38
 800865e:	bd80      	pop	{r7, pc}
 8008660:	fffffedf 	.word	0xfffffedf

08008664 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08c      	sub	sp, #48	; 0x30
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2b20      	cmp	r3, #32
 8008678:	d035      	beq.n	80086e6 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	2252      	movs	r2, #82	; 0x52
 800867e:	2100      	movs	r1, #0
 8008680:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008682:	f3ef 8310 	mrs	r3, PRIMASK
 8008686:	60fb      	str	r3, [r7, #12]
  return(result);
 8008688:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800868a:	62bb      	str	r3, [r7, #40]	; 0x28
 800868c:	2301      	movs	r3, #1
 800868e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f383 8810 	msr	PRIMASK, r3
}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2180      	movs	r1, #128	; 0x80
 80086a4:	438a      	bics	r2, r1
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f383 8810 	msr	PRIMASK, r3
}
 80086b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b4:	f3ef 8310 	mrs	r3, PRIMASK
 80086b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80086ba:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
 80086be:	2301      	movs	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	f383 8810 	msr	PRIMASK, r3
}
 80086c8:	46c0      	nop			; (mov r8, r8)
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2140      	movs	r1, #64	; 0x40
 80086d6:	430a      	orrs	r2, r1
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f383 8810 	msr	PRIMASK, r3
}
 80086e4:	e004      	b.n	80086f0 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	0018      	movs	r0, r3
 80086ea:	f7fb fc13 	bl	8003f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ee:	46c0      	nop			; (mov r8, r8)
 80086f0:	46c0      	nop			; (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b00c      	add	sp, #48	; 0x30
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	0018      	movs	r0, r3
 800870a:	f7ff fb47 	bl	8007d9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800870e:	46c0      	nop			; (mov r8, r8)
 8008710:	46bd      	mov	sp, r7
 8008712:	b004      	add	sp, #16
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b094      	sub	sp, #80	; 0x50
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	2b20      	cmp	r3, #32
 800872c:	d06e      	beq.n	800880c <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 800872e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008730:	225a      	movs	r2, #90	; 0x5a
 8008732:	2100      	movs	r1, #0
 8008734:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008736:	f3ef 8310 	mrs	r3, PRIMASK
 800873a:	61bb      	str	r3, [r7, #24]
  return(result);
 800873c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800873e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008740:	2301      	movs	r3, #1
 8008742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4938      	ldr	r1, [pc, #224]	; (8008838 <UART_DMAReceiveCplt+0x120>)
 8008758:	400a      	ands	r2, r1
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	f383 8810 	msr	PRIMASK, r3
}
 8008766:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008768:	f3ef 8310 	mrs	r3, PRIMASK
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	647b      	str	r3, [r7, #68]	; 0x44
 8008772:	2301      	movs	r3, #1
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	f383 8810 	msr	PRIMASK, r3
}
 800877c:	46c0      	nop			; (mov r8, r8)
 800877e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2101      	movs	r1, #1
 800878a:	438a      	bics	r2, r1
 800878c:	609a      	str	r2, [r3, #8]
 800878e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	f383 8810 	msr	PRIMASK, r3
}
 8008798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800879a:	f3ef 8310 	mrs	r3, PRIMASK
 800879e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a2:	643b      	str	r3, [r7, #64]	; 0x40
 80087a4:	2301      	movs	r3, #1
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	f383 8810 	msr	PRIMASK, r3
}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2140      	movs	r1, #64	; 0x40
 80087bc:	438a      	bics	r2, r1
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	f383 8810 	msr	PRIMASK, r3
}
 80087ca:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ce:	2220      	movs	r2, #32
 80087d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d118      	bne.n	800880c <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087da:	f3ef 8310 	mrs	r3, PRIMASK
 80087de:	60fb      	str	r3, [r7, #12]
  return(result);
 80087e0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e4:	2301      	movs	r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f383 8810 	msr	PRIMASK, r3
}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2110      	movs	r1, #16
 80087fc:	438a      	bics	r2, r1
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f383 8810 	msr	PRIMASK, r3
}
 800880a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800880e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008810:	2b01      	cmp	r3, #1
 8008812:	d108      	bne.n	8008826 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008816:	2258      	movs	r2, #88	; 0x58
 8008818:	5a9a      	ldrh	r2, [r3, r2]
 800881a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881c:	0011      	movs	r1, r2
 800881e:	0018      	movs	r0, r3
 8008820:	f7ff fad4 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008824:	e003      	b.n	800882e <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	0018      	movs	r0, r3
 800882a:	f7fb fb81 	bl	8003f30 <HAL_UART_RxCpltCallback>
}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	46bd      	mov	sp, r7
 8008832:	b014      	add	sp, #80	; 0x50
 8008834:	bd80      	pop	{r7, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	fffffeff 	.word	0xfffffeff

0800883c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10a      	bne.n	8008868 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2258      	movs	r2, #88	; 0x58
 8008856:	5a9b      	ldrh	r3, [r3, r2]
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	0011      	movs	r1, r2
 8008860:	0018      	movs	r0, r3
 8008862:	f7ff fab3 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008866:	e003      	b.n	8008870 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	0018      	movs	r0, r3
 800886c:	f7ff fa9e 	bl	8007dac <HAL_UART_RxHalfCpltCallback>
}
 8008870:	46c0      	nop			; (mov r8, r8)
 8008872:	46bd      	mov	sp, r7
 8008874:	b004      	add	sp, #16
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800888a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008890:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2280      	movs	r2, #128	; 0x80
 800889a:	4013      	ands	r3, r2
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d10a      	bne.n	80088b6 <UART_DMAError+0x3e>
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b21      	cmp	r3, #33	; 0x21
 80088a4:	d107      	bne.n	80088b6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2252      	movs	r2, #82	; 0x52
 80088aa:	2100      	movs	r1, #0
 80088ac:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7ff fe51 	bl	8008558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2240      	movs	r2, #64	; 0x40
 80088be:	4013      	ands	r3, r2
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d10a      	bne.n	80088da <UART_DMAError+0x62>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b22      	cmp	r3, #34	; 0x22
 80088c8:	d107      	bne.n	80088da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	225a      	movs	r2, #90	; 0x5a
 80088ce:	2100      	movs	r1, #0
 80088d0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	0018      	movs	r0, r3
 80088d6:	f7ff fe63 	bl	80085a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2280      	movs	r2, #128	; 0x80
 80088de:	589b      	ldr	r3, [r3, r2]
 80088e0:	2210      	movs	r2, #16
 80088e2:	431a      	orrs	r2, r3
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f7ff fa65 	bl	8007dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b006      	add	sp, #24
 80088f8:	bd80      	pop	{r7, pc}

080088fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	225a      	movs	r2, #90	; 0x5a
 800890c:	2100      	movs	r1, #0
 800890e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2252      	movs	r2, #82	; 0x52
 8008914:	2100      	movs	r1, #0
 8008916:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	0018      	movs	r0, r3
 800891c:	f7ff fa4e 	bl	8007dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	b004      	add	sp, #16
 8008926:	bd80      	pop	{r7, pc}

08008928 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008930:	f3ef 8310 	mrs	r3, PRIMASK
 8008934:	60bb      	str	r3, [r7, #8]
  return(result);
 8008936:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	2301      	movs	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f383 8810 	msr	PRIMASK, r3
}
 8008944:	46c0      	nop			; (mov r8, r8)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2140      	movs	r1, #64	; 0x40
 8008952:	438a      	bics	r2, r1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f383 8810 	msr	PRIMASK, r3
}
 8008960:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	0018      	movs	r0, r3
 8008972:	f7fb facf 	bl	8003f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008976:	46c0      	nop			; (mov r8, r8)
 8008978:	46bd      	mov	sp, r7
 800897a:	b006      	add	sp, #24
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <__errno>:
 8008980:	4b01      	ldr	r3, [pc, #4]	; (8008988 <__errno+0x8>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4770      	bx	lr
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	2000000c 	.word	0x2000000c

0800898c <__libc_init_array>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	2600      	movs	r6, #0
 8008990:	4d0c      	ldr	r5, [pc, #48]	; (80089c4 <__libc_init_array+0x38>)
 8008992:	4c0d      	ldr	r4, [pc, #52]	; (80089c8 <__libc_init_array+0x3c>)
 8008994:	1b64      	subs	r4, r4, r5
 8008996:	10a4      	asrs	r4, r4, #2
 8008998:	42a6      	cmp	r6, r4
 800899a:	d109      	bne.n	80089b0 <__libc_init_array+0x24>
 800899c:	2600      	movs	r6, #0
 800899e:	f005 fa09 	bl	800ddb4 <_init>
 80089a2:	4d0a      	ldr	r5, [pc, #40]	; (80089cc <__libc_init_array+0x40>)
 80089a4:	4c0a      	ldr	r4, [pc, #40]	; (80089d0 <__libc_init_array+0x44>)
 80089a6:	1b64      	subs	r4, r4, r5
 80089a8:	10a4      	asrs	r4, r4, #2
 80089aa:	42a6      	cmp	r6, r4
 80089ac:	d105      	bne.n	80089ba <__libc_init_array+0x2e>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	00b3      	lsls	r3, r6, #2
 80089b2:	58eb      	ldr	r3, [r5, r3]
 80089b4:	4798      	blx	r3
 80089b6:	3601      	adds	r6, #1
 80089b8:	e7ee      	b.n	8008998 <__libc_init_array+0xc>
 80089ba:	00b3      	lsls	r3, r6, #2
 80089bc:	58eb      	ldr	r3, [r5, r3]
 80089be:	4798      	blx	r3
 80089c0:	3601      	adds	r6, #1
 80089c2:	e7f2      	b.n	80089aa <__libc_init_array+0x1e>
 80089c4:	0800e4ac 	.word	0x0800e4ac
 80089c8:	0800e4ac 	.word	0x0800e4ac
 80089cc:	0800e4ac 	.word	0x0800e4ac
 80089d0:	0800e4b0 	.word	0x0800e4b0

080089d4 <memset>:
 80089d4:	0003      	movs	r3, r0
 80089d6:	1882      	adds	r2, r0, r2
 80089d8:	4293      	cmp	r3, r2
 80089da:	d100      	bne.n	80089de <memset+0xa>
 80089dc:	4770      	bx	lr
 80089de:	7019      	strb	r1, [r3, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	e7f9      	b.n	80089d8 <memset+0x4>

080089e4 <__cvt>:
 80089e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e6:	001e      	movs	r6, r3
 80089e8:	2300      	movs	r3, #0
 80089ea:	0014      	movs	r4, r2
 80089ec:	b08b      	sub	sp, #44	; 0x2c
 80089ee:	429e      	cmp	r6, r3
 80089f0:	da04      	bge.n	80089fc <__cvt+0x18>
 80089f2:	2180      	movs	r1, #128	; 0x80
 80089f4:	0609      	lsls	r1, r1, #24
 80089f6:	1873      	adds	r3, r6, r1
 80089f8:	001e      	movs	r6, r3
 80089fa:	232d      	movs	r3, #45	; 0x2d
 80089fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a00:	7013      	strb	r3, [r2, #0]
 8008a02:	2320      	movs	r3, #32
 8008a04:	2203      	movs	r2, #3
 8008a06:	439f      	bics	r7, r3
 8008a08:	2f46      	cmp	r7, #70	; 0x46
 8008a0a:	d007      	beq.n	8008a1c <__cvt+0x38>
 8008a0c:	003b      	movs	r3, r7
 8008a0e:	3b45      	subs	r3, #69	; 0x45
 8008a10:	4259      	negs	r1, r3
 8008a12:	414b      	adcs	r3, r1
 8008a14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a16:	3a01      	subs	r2, #1
 8008a18:	18cb      	adds	r3, r1, r3
 8008a1a:	9310      	str	r3, [sp, #64]	; 0x40
 8008a1c:	ab09      	add	r3, sp, #36	; 0x24
 8008a1e:	9304      	str	r3, [sp, #16]
 8008a20:	ab08      	add	r3, sp, #32
 8008a22:	9303      	str	r3, [sp, #12]
 8008a24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a26:	9200      	str	r2, [sp, #0]
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a2c:	0022      	movs	r2, r4
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	0033      	movs	r3, r6
 8008a32:	f001 fe67 	bl	800a704 <_dtoa_r>
 8008a36:	0005      	movs	r5, r0
 8008a38:	2f47      	cmp	r7, #71	; 0x47
 8008a3a:	d102      	bne.n	8008a42 <__cvt+0x5e>
 8008a3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a3e:	07db      	lsls	r3, r3, #31
 8008a40:	d528      	bpl.n	8008a94 <__cvt+0xb0>
 8008a42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a44:	18eb      	adds	r3, r5, r3
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	2f46      	cmp	r7, #70	; 0x46
 8008a4a:	d114      	bne.n	8008a76 <__cvt+0x92>
 8008a4c:	782b      	ldrb	r3, [r5, #0]
 8008a4e:	2b30      	cmp	r3, #48	; 0x30
 8008a50:	d10c      	bne.n	8008a6c <__cvt+0x88>
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	0020      	movs	r0, r4
 8008a58:	0031      	movs	r1, r6
 8008a5a:	f7f7 fd01 	bl	8000460 <__aeabi_dcmpeq>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d104      	bne.n	8008a6c <__cvt+0x88>
 8008a62:	2301      	movs	r3, #1
 8008a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a6e:	9a07      	ldr	r2, [sp, #28]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	18d3      	adds	r3, r2, r3
 8008a74:	9307      	str	r3, [sp, #28]
 8008a76:	2200      	movs	r2, #0
 8008a78:	2300      	movs	r3, #0
 8008a7a:	0020      	movs	r0, r4
 8008a7c:	0031      	movs	r1, r6
 8008a7e:	f7f7 fcef 	bl	8000460 <__aeabi_dcmpeq>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d001      	beq.n	8008a8a <__cvt+0xa6>
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8a:	2230      	movs	r2, #48	; 0x30
 8008a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8e:	9907      	ldr	r1, [sp, #28]
 8008a90:	428b      	cmp	r3, r1
 8008a92:	d306      	bcc.n	8008aa2 <__cvt+0xbe>
 8008a94:	0028      	movs	r0, r5
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a9a:	1b5b      	subs	r3, r3, r5
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	b00b      	add	sp, #44	; 0x2c
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	9109      	str	r1, [sp, #36]	; 0x24
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e7f0      	b.n	8008a8c <__cvt+0xa8>

08008aaa <__exponent>:
 8008aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aac:	1c83      	adds	r3, r0, #2
 8008aae:	b087      	sub	sp, #28
 8008ab0:	9303      	str	r3, [sp, #12]
 8008ab2:	0005      	movs	r5, r0
 8008ab4:	000c      	movs	r4, r1
 8008ab6:	232b      	movs	r3, #43	; 0x2b
 8008ab8:	7002      	strb	r2, [r0, #0]
 8008aba:	2900      	cmp	r1, #0
 8008abc:	da01      	bge.n	8008ac2 <__exponent+0x18>
 8008abe:	424c      	negs	r4, r1
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	706b      	strb	r3, [r5, #1]
 8008ac4:	2c09      	cmp	r4, #9
 8008ac6:	dd31      	ble.n	8008b2c <__exponent+0x82>
 8008ac8:	270a      	movs	r7, #10
 8008aca:	ab04      	add	r3, sp, #16
 8008acc:	1dde      	adds	r6, r3, #7
 8008ace:	0020      	movs	r0, r4
 8008ad0:	0039      	movs	r1, r7
 8008ad2:	9601      	str	r6, [sp, #4]
 8008ad4:	f7f7 fcae 	bl	8000434 <__aeabi_idivmod>
 8008ad8:	3e01      	subs	r6, #1
 8008ada:	3130      	adds	r1, #48	; 0x30
 8008adc:	0020      	movs	r0, r4
 8008ade:	7031      	strb	r1, [r6, #0]
 8008ae0:	0039      	movs	r1, r7
 8008ae2:	9402      	str	r4, [sp, #8]
 8008ae4:	f7f7 fbc0 	bl	8000268 <__divsi3>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	0004      	movs	r4, r0
 8008aec:	2b63      	cmp	r3, #99	; 0x63
 8008aee:	dcee      	bgt.n	8008ace <__exponent+0x24>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	3430      	adds	r4, #48	; 0x30
 8008af4:	1e9a      	subs	r2, r3, #2
 8008af6:	0013      	movs	r3, r2
 8008af8:	9903      	ldr	r1, [sp, #12]
 8008afa:	7014      	strb	r4, [r2, #0]
 8008afc:	a804      	add	r0, sp, #16
 8008afe:	3007      	adds	r0, #7
 8008b00:	4298      	cmp	r0, r3
 8008b02:	d80e      	bhi.n	8008b22 <__exponent+0x78>
 8008b04:	ab04      	add	r3, sp, #16
 8008b06:	3307      	adds	r3, #7
 8008b08:	2000      	movs	r0, #0
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d804      	bhi.n	8008b18 <__exponent+0x6e>
 8008b0e:	ab04      	add	r3, sp, #16
 8008b10:	3009      	adds	r0, #9
 8008b12:	18c0      	adds	r0, r0, r3
 8008b14:	9b01      	ldr	r3, [sp, #4]
 8008b16:	1ac0      	subs	r0, r0, r3
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1818      	adds	r0, r3, r0
 8008b1c:	1b40      	subs	r0, r0, r5
 8008b1e:	b007      	add	sp, #28
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b22:	7818      	ldrb	r0, [r3, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	7008      	strb	r0, [r1, #0]
 8008b28:	3101      	adds	r1, #1
 8008b2a:	e7e7      	b.n	8008afc <__exponent+0x52>
 8008b2c:	2330      	movs	r3, #48	; 0x30
 8008b2e:	18e4      	adds	r4, r4, r3
 8008b30:	70ab      	strb	r3, [r5, #2]
 8008b32:	1d28      	adds	r0, r5, #4
 8008b34:	70ec      	strb	r4, [r5, #3]
 8008b36:	e7f1      	b.n	8008b1c <__exponent+0x72>

08008b38 <_printf_float>:
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b095      	sub	sp, #84	; 0x54
 8008b3c:	000c      	movs	r4, r1
 8008b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b40:	001e      	movs	r6, r3
 8008b42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008b44:	0007      	movs	r7, r0
 8008b46:	f002 ff6b 	bl	800ba20 <_localeconv_r>
 8008b4a:	6803      	ldr	r3, [r0, #0]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b50:	f7f7 fae4 	bl	800011c <strlen>
 8008b54:	2300      	movs	r3, #0
 8008b56:	9312      	str	r3, [sp, #72]	; 0x48
 8008b58:	7e23      	ldrb	r3, [r4, #24]
 8008b5a:	2207      	movs	r2, #7
 8008b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	900e      	str	r0, [sp, #56]	; 0x38
 8008b62:	930d      	str	r3, [sp, #52]	; 0x34
 8008b64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b66:	682b      	ldr	r3, [r5, #0]
 8008b68:	05c9      	lsls	r1, r1, #23
 8008b6a:	d547      	bpl.n	8008bfc <_printf_float+0xc4>
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	4393      	bics	r3, r2
 8008b70:	001a      	movs	r2, r3
 8008b72:	3208      	adds	r2, #8
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	64a2      	str	r2, [r4, #72]	; 0x48
 8008b7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008b7e:	2201      	movs	r2, #1
 8008b80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008b82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b86:	006b      	lsls	r3, r5, #1
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008b8e:	4ba7      	ldr	r3, [pc, #668]	; (8008e2c <_printf_float+0x2f4>)
 8008b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b92:	4252      	negs	r2, r2
 8008b94:	f7f9 fa3e 	bl	8002014 <__aeabi_dcmpun>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d131      	bne.n	8008c00 <_printf_float+0xc8>
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	4ba3      	ldr	r3, [pc, #652]	; (8008e2c <_printf_float+0x2f4>)
 8008ba0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ba2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008ba4:	4252      	negs	r2, r2
 8008ba6:	f7f7 fc6b 	bl	8000480 <__aeabi_dcmple>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d128      	bne.n	8008c00 <_printf_float+0xc8>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	0029      	movs	r1, r5
 8008bb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008bb6:	f7f7 fc59 	bl	800046c <__aeabi_dcmplt>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d003      	beq.n	8008bc6 <_printf_float+0x8e>
 8008bbe:	0023      	movs	r3, r4
 8008bc0:	222d      	movs	r2, #45	; 0x2d
 8008bc2:	3343      	adds	r3, #67	; 0x43
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc8:	4d99      	ldr	r5, [pc, #612]	; (8008e30 <_printf_float+0x2f8>)
 8008bca:	2b47      	cmp	r3, #71	; 0x47
 8008bcc:	d900      	bls.n	8008bd0 <_printf_float+0x98>
 8008bce:	4d99      	ldr	r5, [pc, #612]	; (8008e34 <_printf_float+0x2fc>)
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	439a      	bics	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6022      	str	r2, [r4, #0]
 8008bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be2:	0021      	movs	r1, r4
 8008be4:	0038      	movs	r0, r7
 8008be6:	9600      	str	r6, [sp, #0]
 8008be8:	aa13      	add	r2, sp, #76	; 0x4c
 8008bea:	f000 f9e7 	bl	8008fbc <_printf_common>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d000      	beq.n	8008bf4 <_printf_float+0xbc>
 8008bf2:	e0a2      	b.n	8008d3a <_printf_float+0x202>
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	4240      	negs	r0, r0
 8008bf8:	b015      	add	sp, #84	; 0x54
 8008bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bfc:	3307      	adds	r3, #7
 8008bfe:	e7b6      	b.n	8008b6e <_printf_float+0x36>
 8008c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c02:	002b      	movs	r3, r5
 8008c04:	0010      	movs	r0, r2
 8008c06:	0029      	movs	r1, r5
 8008c08:	f7f9 fa04 	bl	8002014 <__aeabi_dcmpun>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d00b      	beq.n	8008c28 <_printf_float+0xf0>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	da03      	bge.n	8008c1c <_printf_float+0xe4>
 8008c14:	0023      	movs	r3, r4
 8008c16:	222d      	movs	r2, #45	; 0x2d
 8008c18:	3343      	adds	r3, #67	; 0x43
 8008c1a:	701a      	strb	r2, [r3, #0]
 8008c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1e:	4d86      	ldr	r5, [pc, #536]	; (8008e38 <_printf_float+0x300>)
 8008c20:	2b47      	cmp	r3, #71	; 0x47
 8008c22:	d9d5      	bls.n	8008bd0 <_printf_float+0x98>
 8008c24:	4d85      	ldr	r5, [pc, #532]	; (8008e3c <_printf_float+0x304>)
 8008c26:	e7d3      	b.n	8008bd0 <_printf_float+0x98>
 8008c28:	2220      	movs	r2, #32
 8008c2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	4391      	bics	r1, r2
 8008c30:	910f      	str	r1, [sp, #60]	; 0x3c
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	d149      	bne.n	8008cca <_printf_float+0x192>
 8008c36:	3307      	adds	r3, #7
 8008c38:	6063      	str	r3, [r4, #4]
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4313      	orrs	r3, r2
 8008c42:	2200      	movs	r2, #0
 8008c44:	9206      	str	r2, [sp, #24]
 8008c46:	aa12      	add	r2, sp, #72	; 0x48
 8008c48:	9205      	str	r2, [sp, #20]
 8008c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c4c:	a908      	add	r1, sp, #32
 8008c4e:	9204      	str	r2, [sp, #16]
 8008c50:	aa11      	add	r2, sp, #68	; 0x44
 8008c52:	9203      	str	r2, [sp, #12]
 8008c54:	2223      	movs	r2, #35	; 0x23
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	6863      	ldr	r3, [r4, #4]
 8008c5c:	1852      	adds	r2, r2, r1
 8008c5e:	9202      	str	r2, [sp, #8]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	0038      	movs	r0, r7
 8008c64:	002b      	movs	r3, r5
 8008c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c68:	f7ff febc 	bl	80089e4 <__cvt>
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c6e:	0005      	movs	r5, r0
 8008c70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c72:	2b47      	cmp	r3, #71	; 0x47
 8008c74:	d108      	bne.n	8008c88 <_printf_float+0x150>
 8008c76:	1ccb      	adds	r3, r1, #3
 8008c78:	db02      	blt.n	8008c80 <_printf_float+0x148>
 8008c7a:	6863      	ldr	r3, [r4, #4]
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	dd48      	ble.n	8008d12 <_printf_float+0x1da>
 8008c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c82:	3b02      	subs	r3, #2
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	930a      	str	r3, [sp, #40]	; 0x28
 8008c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8a:	2b65      	cmp	r3, #101	; 0x65
 8008c8c:	d824      	bhi.n	8008cd8 <_printf_float+0x1a0>
 8008c8e:	0020      	movs	r0, r4
 8008c90:	001a      	movs	r2, r3
 8008c92:	3901      	subs	r1, #1
 8008c94:	3050      	adds	r0, #80	; 0x50
 8008c96:	9111      	str	r1, [sp, #68]	; 0x44
 8008c98:	f7ff ff07 	bl	8008aaa <__exponent>
 8008c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ca0:	1813      	adds	r3, r2, r0
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	2a01      	cmp	r2, #1
 8008ca6:	dc02      	bgt.n	8008cae <_printf_float+0x176>
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	07d2      	lsls	r2, r2, #31
 8008cac:	d501      	bpl.n	8008cb2 <_printf_float+0x17a>
 8008cae:	3301      	adds	r3, #1
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	2323      	movs	r3, #35	; 0x23
 8008cb4:	aa08      	add	r2, sp, #32
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d100      	bne.n	8008cc0 <_printf_float+0x188>
 8008cbe:	e78f      	b.n	8008be0 <_printf_float+0xa8>
 8008cc0:	0023      	movs	r3, r4
 8008cc2:	222d      	movs	r2, #45	; 0x2d
 8008cc4:	3343      	adds	r3, #67	; 0x43
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e78a      	b.n	8008be0 <_printf_float+0xa8>
 8008cca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ccc:	2a47      	cmp	r2, #71	; 0x47
 8008cce:	d1b4      	bne.n	8008c3a <_printf_float+0x102>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1b2      	bne.n	8008c3a <_printf_float+0x102>
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	e7af      	b.n	8008c38 <_printf_float+0x100>
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cda:	2b66      	cmp	r3, #102	; 0x66
 8008cdc:	d11b      	bne.n	8008d16 <_printf_float+0x1de>
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	dd0d      	ble.n	8008d00 <_printf_float+0x1c8>
 8008ce4:	6121      	str	r1, [r4, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <_printf_float+0x1b8>
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	07d2      	lsls	r2, r2, #31
 8008cee:	d502      	bpl.n	8008cf6 <_printf_float+0x1be>
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	1859      	adds	r1, r3, r1
 8008cf4:	6121      	str	r1, [r4, #16]
 8008cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cf8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cfe:	e7d8      	b.n	8008cb2 <_printf_float+0x17a>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <_printf_float+0x1d4>
 8008d04:	2201      	movs	r2, #1
 8008d06:	6821      	ldr	r1, [r4, #0]
 8008d08:	4211      	tst	r1, r2
 8008d0a:	d000      	beq.n	8008d0e <_printf_float+0x1d6>
 8008d0c:	1c9a      	adds	r2, r3, #2
 8008d0e:	6122      	str	r2, [r4, #16]
 8008d10:	e7f1      	b.n	8008cf6 <_printf_float+0x1be>
 8008d12:	2367      	movs	r3, #103	; 0x67
 8008d14:	930a      	str	r3, [sp, #40]	; 0x28
 8008d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	db06      	blt.n	8008d2c <_printf_float+0x1f4>
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	07d2      	lsls	r2, r2, #31
 8008d24:	d5e7      	bpl.n	8008cf6 <_printf_float+0x1be>
 8008d26:	3301      	adds	r3, #1
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	e7e4      	b.n	8008cf6 <_printf_float+0x1be>
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dc01      	bgt.n	8008d36 <_printf_float+0x1fe>
 8008d32:	1849      	adds	r1, r1, r1
 8008d34:	1ac9      	subs	r1, r1, r3
 8008d36:	1852      	adds	r2, r2, r1
 8008d38:	e7e9      	b.n	8008d0e <_printf_float+0x1d6>
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	0553      	lsls	r3, r2, #21
 8008d3e:	d407      	bmi.n	8008d50 <_printf_float+0x218>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	002a      	movs	r2, r5
 8008d44:	0038      	movs	r0, r7
 8008d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d48:	47b0      	blx	r6
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d128      	bne.n	8008da0 <_printf_float+0x268>
 8008d4e:	e751      	b.n	8008bf4 <_printf_float+0xbc>
 8008d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d52:	2b65      	cmp	r3, #101	; 0x65
 8008d54:	d800      	bhi.n	8008d58 <_printf_float+0x220>
 8008d56:	e0e1      	b.n	8008f1c <_printf_float+0x3e4>
 8008d58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f7f7 fb7e 	bl	8000460 <__aeabi_dcmpeq>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d031      	beq.n	8008dcc <_printf_float+0x294>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	0038      	movs	r0, r7
 8008d6c:	4a34      	ldr	r2, [pc, #208]	; (8008e40 <_printf_float+0x308>)
 8008d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d70:	47b0      	blx	r6
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d100      	bne.n	8008d78 <_printf_float+0x240>
 8008d76:	e73d      	b.n	8008bf4 <_printf_float+0xbc>
 8008d78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	db02      	blt.n	8008d86 <_printf_float+0x24e>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	07db      	lsls	r3, r3, #31
 8008d84:	d50c      	bpl.n	8008da0 <_printf_float+0x268>
 8008d86:	0038      	movs	r0, r7
 8008d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d8e:	47b0      	blx	r6
 8008d90:	2500      	movs	r5, #0
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d100      	bne.n	8008d98 <_printf_float+0x260>
 8008d96:	e72d      	b.n	8008bf4 <_printf_float+0xbc>
 8008d98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	42ab      	cmp	r3, r5
 8008d9e:	dc0a      	bgt.n	8008db6 <_printf_float+0x27e>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	079b      	lsls	r3, r3, #30
 8008da4:	d500      	bpl.n	8008da8 <_printf_float+0x270>
 8008da6:	e106      	b.n	8008fb6 <_printf_float+0x47e>
 8008da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008daa:	68e0      	ldr	r0, [r4, #12]
 8008dac:	4298      	cmp	r0, r3
 8008dae:	db00      	blt.n	8008db2 <_printf_float+0x27a>
 8008db0:	e722      	b.n	8008bf8 <_printf_float+0xc0>
 8008db2:	0018      	movs	r0, r3
 8008db4:	e720      	b.n	8008bf8 <_printf_float+0xc0>
 8008db6:	0022      	movs	r2, r4
 8008db8:	2301      	movs	r3, #1
 8008dba:	0038      	movs	r0, r7
 8008dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dbe:	321a      	adds	r2, #26
 8008dc0:	47b0      	blx	r6
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	d100      	bne.n	8008dc8 <_printf_float+0x290>
 8008dc6:	e715      	b.n	8008bf4 <_printf_float+0xbc>
 8008dc8:	3501      	adds	r5, #1
 8008dca:	e7e5      	b.n	8008d98 <_printf_float+0x260>
 8008dcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dc38      	bgt.n	8008e44 <_printf_float+0x30c>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	0038      	movs	r0, r7
 8008dd6:	4a1a      	ldr	r2, [pc, #104]	; (8008e40 <_printf_float+0x308>)
 8008dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dda:	47b0      	blx	r6
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d100      	bne.n	8008de2 <_printf_float+0x2aa>
 8008de0:	e708      	b.n	8008bf4 <_printf_float+0xbc>
 8008de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008de6:	4313      	orrs	r3, r2
 8008de8:	d102      	bne.n	8008df0 <_printf_float+0x2b8>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	07db      	lsls	r3, r3, #31
 8008dee:	d5d7      	bpl.n	8008da0 <_printf_float+0x268>
 8008df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df2:	0038      	movs	r0, r7
 8008df4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df8:	47b0      	blx	r6
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d100      	bne.n	8008e00 <_printf_float+0x2c8>
 8008dfe:	e6f9      	b.n	8008bf4 <_printf_float+0xbc>
 8008e00:	2300      	movs	r3, #0
 8008e02:	930a      	str	r3, [sp, #40]	; 0x28
 8008e04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e08:	425b      	negs	r3, r3
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	dc01      	bgt.n	8008e12 <_printf_float+0x2da>
 8008e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e10:	e797      	b.n	8008d42 <_printf_float+0x20a>
 8008e12:	0022      	movs	r2, r4
 8008e14:	2301      	movs	r3, #1
 8008e16:	0038      	movs	r0, r7
 8008e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1a:	321a      	adds	r2, #26
 8008e1c:	47b0      	blx	r6
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d100      	bne.n	8008e24 <_printf_float+0x2ec>
 8008e22:	e6e7      	b.n	8008bf4 <_printf_float+0xbc>
 8008e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e26:	3301      	adds	r3, #1
 8008e28:	e7eb      	b.n	8008e02 <_printf_float+0x2ca>
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	7fefffff 	.word	0x7fefffff
 8008e30:	0800dff4 	.word	0x0800dff4
 8008e34:	0800dff8 	.word	0x0800dff8
 8008e38:	0800dffc 	.word	0x0800dffc
 8008e3c:	0800e000 	.word	0x0800e000
 8008e40:	0800e3f9 	.word	0x0800e3f9
 8008e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e48:	920a      	str	r2, [sp, #40]	; 0x28
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	dd00      	ble.n	8008e50 <_printf_float+0x318>
 8008e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc3c      	bgt.n	8008ed0 <_printf_float+0x398>
 8008e56:	2300      	movs	r3, #0
 8008e58:	930d      	str	r3, [sp, #52]	; 0x34
 8008e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5c:	43db      	mvns	r3, r3
 8008e5e:	17db      	asrs	r3, r3, #31
 8008e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e72:	4293      	cmp	r3, r2
 8008e74:	dc34      	bgt.n	8008ee0 <_printf_float+0x3a8>
 8008e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	db3d      	blt.n	8008efa <_printf_float+0x3c2>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	07db      	lsls	r3, r3, #31
 8008e82:	d43a      	bmi.n	8008efa <_printf_float+0x3c2>
 8008e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	1a52      	subs	r2, r2, r1
 8008e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8008e90:	429a      	cmp	r2, r3
 8008e92:	dd00      	ble.n	8008e96 <_printf_float+0x35e>
 8008e94:	930a      	str	r3, [sp, #40]	; 0x28
 8008e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dc36      	bgt.n	8008f0a <_printf_float+0x3d2>
 8008e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	17db      	asrs	r3, r3, #31
 8008ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb0:	400a      	ands	r2, r1
 8008eb2:	1a9b      	subs	r3, r3, r2
 8008eb4:	42ab      	cmp	r3, r5
 8008eb6:	dc00      	bgt.n	8008eba <_printf_float+0x382>
 8008eb8:	e772      	b.n	8008da0 <_printf_float+0x268>
 8008eba:	0022      	movs	r2, r4
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	0038      	movs	r0, r7
 8008ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ec2:	321a      	adds	r2, #26
 8008ec4:	47b0      	blx	r6
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d100      	bne.n	8008ecc <_printf_float+0x394>
 8008eca:	e693      	b.n	8008bf4 <_printf_float+0xbc>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	e7ea      	b.n	8008ea6 <_printf_float+0x36e>
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed2:	002a      	movs	r2, r5
 8008ed4:	0038      	movs	r0, r7
 8008ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ed8:	47b0      	blx	r6
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d1bb      	bne.n	8008e56 <_printf_float+0x31e>
 8008ede:	e689      	b.n	8008bf4 <_printf_float+0xbc>
 8008ee0:	0022      	movs	r2, r4
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	0038      	movs	r0, r7
 8008ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee8:	321a      	adds	r2, #26
 8008eea:	47b0      	blx	r6
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d100      	bne.n	8008ef2 <_printf_float+0x3ba>
 8008ef0:	e680      	b.n	8008bf4 <_printf_float+0xbc>
 8008ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef8:	e7b3      	b.n	8008e62 <_printf_float+0x32a>
 8008efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008efc:	0038      	movs	r0, r7
 8008efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f02:	47b0      	blx	r6
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d1bd      	bne.n	8008e84 <_printf_float+0x34c>
 8008f08:	e674      	b.n	8008bf4 <_printf_float+0xbc>
 8008f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f0c:	0038      	movs	r0, r7
 8008f0e:	18ea      	adds	r2, r5, r3
 8008f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f14:	47b0      	blx	r6
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d1c0      	bne.n	8008e9c <_printf_float+0x364>
 8008f1a:	e66b      	b.n	8008bf4 <_printf_float+0xbc>
 8008f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	dc02      	bgt.n	8008f28 <_printf_float+0x3f0>
 8008f22:	2301      	movs	r3, #1
 8008f24:	421a      	tst	r2, r3
 8008f26:	d034      	beq.n	8008f92 <_printf_float+0x45a>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	002a      	movs	r2, r5
 8008f2c:	0038      	movs	r0, r7
 8008f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f30:	47b0      	blx	r6
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d100      	bne.n	8008f38 <_printf_float+0x400>
 8008f36:	e65d      	b.n	8008bf4 <_printf_float+0xbc>
 8008f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f3a:	0038      	movs	r0, r7
 8008f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f40:	47b0      	blx	r6
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d100      	bne.n	8008f48 <_printf_float+0x410>
 8008f46:	e655      	b.n	8008bf4 <_printf_float+0xbc>
 8008f48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f7f7 fa86 	bl	8000460 <__aeabi_dcmpeq>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d11a      	bne.n	8008f8e <_printf_float+0x456>
 8008f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f5a:	1c6a      	adds	r2, r5, #1
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	0038      	movs	r0, r7
 8008f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f62:	47b0      	blx	r6
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d10e      	bne.n	8008f86 <_printf_float+0x44e>
 8008f68:	e644      	b.n	8008bf4 <_printf_float+0xbc>
 8008f6a:	0022      	movs	r2, r4
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	0038      	movs	r0, r7
 8008f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f72:	321a      	adds	r2, #26
 8008f74:	47b0      	blx	r6
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d100      	bne.n	8008f7c <_printf_float+0x444>
 8008f7a:	e63b      	b.n	8008bf4 <_printf_float+0xbc>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f80:	3b01      	subs	r3, #1
 8008f82:	42ab      	cmp	r3, r5
 8008f84:	dcf1      	bgt.n	8008f6a <_printf_float+0x432>
 8008f86:	0022      	movs	r2, r4
 8008f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f8a:	3250      	adds	r2, #80	; 0x50
 8008f8c:	e6da      	b.n	8008d44 <_printf_float+0x20c>
 8008f8e:	2500      	movs	r5, #0
 8008f90:	e7f5      	b.n	8008f7e <_printf_float+0x446>
 8008f92:	002a      	movs	r2, r5
 8008f94:	e7e3      	b.n	8008f5e <_printf_float+0x426>
 8008f96:	0022      	movs	r2, r4
 8008f98:	2301      	movs	r3, #1
 8008f9a:	0038      	movs	r0, r7
 8008f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f9e:	3219      	adds	r2, #25
 8008fa0:	47b0      	blx	r6
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	d100      	bne.n	8008fa8 <_printf_float+0x470>
 8008fa6:	e625      	b.n	8008bf4 <_printf_float+0xbc>
 8008fa8:	3501      	adds	r5, #1
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dcf0      	bgt.n	8008f96 <_printf_float+0x45e>
 8008fb4:	e6f8      	b.n	8008da8 <_printf_float+0x270>
 8008fb6:	2500      	movs	r5, #0
 8008fb8:	e7f7      	b.n	8008faa <_printf_float+0x472>
 8008fba:	46c0      	nop			; (mov r8, r8)

08008fbc <_printf_common>:
 8008fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fbe:	0015      	movs	r5, r2
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	688a      	ldr	r2, [r1, #8]
 8008fc4:	690b      	ldr	r3, [r1, #16]
 8008fc6:	000c      	movs	r4, r1
 8008fc8:	9000      	str	r0, [sp, #0]
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	da00      	bge.n	8008fd0 <_printf_common+0x14>
 8008fce:	0013      	movs	r3, r2
 8008fd0:	0022      	movs	r2, r4
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	3243      	adds	r2, #67	; 0x43
 8008fd6:	7812      	ldrb	r2, [r2, #0]
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	d001      	beq.n	8008fe0 <_printf_common+0x24>
 8008fdc:	3301      	adds	r3, #1
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	069b      	lsls	r3, r3, #26
 8008fe4:	d502      	bpl.n	8008fec <_printf_common+0x30>
 8008fe6:	682b      	ldr	r3, [r5, #0]
 8008fe8:	3302      	adds	r3, #2
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	2306      	movs	r3, #6
 8008ff0:	0017      	movs	r7, r2
 8008ff2:	401f      	ands	r7, r3
 8008ff4:	421a      	tst	r2, r3
 8008ff6:	d027      	beq.n	8009048 <_printf_common+0x8c>
 8008ff8:	0023      	movs	r3, r4
 8008ffa:	3343      	adds	r3, #67	; 0x43
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	1e5a      	subs	r2, r3, #1
 8009000:	4193      	sbcs	r3, r2
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	0692      	lsls	r2, r2, #26
 8009006:	d430      	bmi.n	800906a <_printf_common+0xae>
 8009008:	0022      	movs	r2, r4
 800900a:	9901      	ldr	r1, [sp, #4]
 800900c:	9800      	ldr	r0, [sp, #0]
 800900e:	9e08      	ldr	r6, [sp, #32]
 8009010:	3243      	adds	r2, #67	; 0x43
 8009012:	47b0      	blx	r6
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d025      	beq.n	8009064 <_printf_common+0xa8>
 8009018:	2306      	movs	r3, #6
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	682a      	ldr	r2, [r5, #0]
 800901e:	68e1      	ldr	r1, [r4, #12]
 8009020:	2500      	movs	r5, #0
 8009022:	4003      	ands	r3, r0
 8009024:	2b04      	cmp	r3, #4
 8009026:	d103      	bne.n	8009030 <_printf_common+0x74>
 8009028:	1a8d      	subs	r5, r1, r2
 800902a:	43eb      	mvns	r3, r5
 800902c:	17db      	asrs	r3, r3, #31
 800902e:	401d      	ands	r5, r3
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	6922      	ldr	r2, [r4, #16]
 8009034:	4293      	cmp	r3, r2
 8009036:	dd01      	ble.n	800903c <_printf_common+0x80>
 8009038:	1a9b      	subs	r3, r3, r2
 800903a:	18ed      	adds	r5, r5, r3
 800903c:	2700      	movs	r7, #0
 800903e:	42bd      	cmp	r5, r7
 8009040:	d120      	bne.n	8009084 <_printf_common+0xc8>
 8009042:	2000      	movs	r0, #0
 8009044:	e010      	b.n	8009068 <_printf_common+0xac>
 8009046:	3701      	adds	r7, #1
 8009048:	68e3      	ldr	r3, [r4, #12]
 800904a:	682a      	ldr	r2, [r5, #0]
 800904c:	1a9b      	subs	r3, r3, r2
 800904e:	42bb      	cmp	r3, r7
 8009050:	ddd2      	ble.n	8008ff8 <_printf_common+0x3c>
 8009052:	0022      	movs	r2, r4
 8009054:	2301      	movs	r3, #1
 8009056:	9901      	ldr	r1, [sp, #4]
 8009058:	9800      	ldr	r0, [sp, #0]
 800905a:	9e08      	ldr	r6, [sp, #32]
 800905c:	3219      	adds	r2, #25
 800905e:	47b0      	blx	r6
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d1f0      	bne.n	8009046 <_printf_common+0x8a>
 8009064:	2001      	movs	r0, #1
 8009066:	4240      	negs	r0, r0
 8009068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800906a:	2030      	movs	r0, #48	; 0x30
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	3143      	adds	r1, #67	; 0x43
 8009070:	7008      	strb	r0, [r1, #0]
 8009072:	0021      	movs	r1, r4
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	3145      	adds	r1, #69	; 0x45
 8009078:	7809      	ldrb	r1, [r1, #0]
 800907a:	18a2      	adds	r2, r4, r2
 800907c:	3243      	adds	r2, #67	; 0x43
 800907e:	3302      	adds	r3, #2
 8009080:	7011      	strb	r1, [r2, #0]
 8009082:	e7c1      	b.n	8009008 <_printf_common+0x4c>
 8009084:	0022      	movs	r2, r4
 8009086:	2301      	movs	r3, #1
 8009088:	9901      	ldr	r1, [sp, #4]
 800908a:	9800      	ldr	r0, [sp, #0]
 800908c:	9e08      	ldr	r6, [sp, #32]
 800908e:	321a      	adds	r2, #26
 8009090:	47b0      	blx	r6
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d0e6      	beq.n	8009064 <_printf_common+0xa8>
 8009096:	3701      	adds	r7, #1
 8009098:	e7d1      	b.n	800903e <_printf_common+0x82>
	...

0800909c <_printf_i>:
 800909c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800909e:	b08b      	sub	sp, #44	; 0x2c
 80090a0:	9206      	str	r2, [sp, #24]
 80090a2:	000a      	movs	r2, r1
 80090a4:	3243      	adds	r2, #67	; 0x43
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	9005      	str	r0, [sp, #20]
 80090aa:	9204      	str	r2, [sp, #16]
 80090ac:	7e0a      	ldrb	r2, [r1, #24]
 80090ae:	000c      	movs	r4, r1
 80090b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090b2:	2a78      	cmp	r2, #120	; 0x78
 80090b4:	d807      	bhi.n	80090c6 <_printf_i+0x2a>
 80090b6:	2a62      	cmp	r2, #98	; 0x62
 80090b8:	d809      	bhi.n	80090ce <_printf_i+0x32>
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d100      	bne.n	80090c0 <_printf_i+0x24>
 80090be:	e0c1      	b.n	8009244 <_printf_i+0x1a8>
 80090c0:	2a58      	cmp	r2, #88	; 0x58
 80090c2:	d100      	bne.n	80090c6 <_printf_i+0x2a>
 80090c4:	e08c      	b.n	80091e0 <_printf_i+0x144>
 80090c6:	0026      	movs	r6, r4
 80090c8:	3642      	adds	r6, #66	; 0x42
 80090ca:	7032      	strb	r2, [r6, #0]
 80090cc:	e022      	b.n	8009114 <_printf_i+0x78>
 80090ce:	0010      	movs	r0, r2
 80090d0:	3863      	subs	r0, #99	; 0x63
 80090d2:	2815      	cmp	r0, #21
 80090d4:	d8f7      	bhi.n	80090c6 <_printf_i+0x2a>
 80090d6:	f7f7 f833 	bl	8000140 <__gnu_thumb1_case_shi>
 80090da:	0016      	.short	0x0016
 80090dc:	fff6001f 	.word	0xfff6001f
 80090e0:	fff6fff6 	.word	0xfff6fff6
 80090e4:	001ffff6 	.word	0x001ffff6
 80090e8:	fff6fff6 	.word	0xfff6fff6
 80090ec:	fff6fff6 	.word	0xfff6fff6
 80090f0:	003600a8 	.word	0x003600a8
 80090f4:	fff6009a 	.word	0xfff6009a
 80090f8:	00b9fff6 	.word	0x00b9fff6
 80090fc:	0036fff6 	.word	0x0036fff6
 8009100:	fff6fff6 	.word	0xfff6fff6
 8009104:	009e      	.short	0x009e
 8009106:	0026      	movs	r6, r4
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	3642      	adds	r6, #66	; 0x42
 800910c:	1d11      	adds	r1, r2, #4
 800910e:	6019      	str	r1, [r3, #0]
 8009110:	6813      	ldr	r3, [r2, #0]
 8009112:	7033      	strb	r3, [r6, #0]
 8009114:	2301      	movs	r3, #1
 8009116:	e0a7      	b.n	8009268 <_printf_i+0x1cc>
 8009118:	6808      	ldr	r0, [r1, #0]
 800911a:	6819      	ldr	r1, [r3, #0]
 800911c:	1d0a      	adds	r2, r1, #4
 800911e:	0605      	lsls	r5, r0, #24
 8009120:	d50b      	bpl.n	800913a <_printf_i+0x9e>
 8009122:	680d      	ldr	r5, [r1, #0]
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	2d00      	cmp	r5, #0
 8009128:	da03      	bge.n	8009132 <_printf_i+0x96>
 800912a:	232d      	movs	r3, #45	; 0x2d
 800912c:	9a04      	ldr	r2, [sp, #16]
 800912e:	426d      	negs	r5, r5
 8009130:	7013      	strb	r3, [r2, #0]
 8009132:	4b61      	ldr	r3, [pc, #388]	; (80092b8 <_printf_i+0x21c>)
 8009134:	270a      	movs	r7, #10
 8009136:	9303      	str	r3, [sp, #12]
 8009138:	e01b      	b.n	8009172 <_printf_i+0xd6>
 800913a:	680d      	ldr	r5, [r1, #0]
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	0641      	lsls	r1, r0, #25
 8009140:	d5f1      	bpl.n	8009126 <_printf_i+0x8a>
 8009142:	b22d      	sxth	r5, r5
 8009144:	e7ef      	b.n	8009126 <_printf_i+0x8a>
 8009146:	680d      	ldr	r5, [r1, #0]
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	1d08      	adds	r0, r1, #4
 800914c:	6018      	str	r0, [r3, #0]
 800914e:	062e      	lsls	r6, r5, #24
 8009150:	d501      	bpl.n	8009156 <_printf_i+0xba>
 8009152:	680d      	ldr	r5, [r1, #0]
 8009154:	e003      	b.n	800915e <_printf_i+0xc2>
 8009156:	066d      	lsls	r5, r5, #25
 8009158:	d5fb      	bpl.n	8009152 <_printf_i+0xb6>
 800915a:	680d      	ldr	r5, [r1, #0]
 800915c:	b2ad      	uxth	r5, r5
 800915e:	4b56      	ldr	r3, [pc, #344]	; (80092b8 <_printf_i+0x21c>)
 8009160:	2708      	movs	r7, #8
 8009162:	9303      	str	r3, [sp, #12]
 8009164:	2a6f      	cmp	r2, #111	; 0x6f
 8009166:	d000      	beq.n	800916a <_printf_i+0xce>
 8009168:	3702      	adds	r7, #2
 800916a:	0023      	movs	r3, r4
 800916c:	2200      	movs	r2, #0
 800916e:	3343      	adds	r3, #67	; 0x43
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	6863      	ldr	r3, [r4, #4]
 8009174:	60a3      	str	r3, [r4, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	db03      	blt.n	8009182 <_printf_i+0xe6>
 800917a:	2204      	movs	r2, #4
 800917c:	6821      	ldr	r1, [r4, #0]
 800917e:	4391      	bics	r1, r2
 8009180:	6021      	str	r1, [r4, #0]
 8009182:	2d00      	cmp	r5, #0
 8009184:	d102      	bne.n	800918c <_printf_i+0xf0>
 8009186:	9e04      	ldr	r6, [sp, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00c      	beq.n	80091a6 <_printf_i+0x10a>
 800918c:	9e04      	ldr	r6, [sp, #16]
 800918e:	0028      	movs	r0, r5
 8009190:	0039      	movs	r1, r7
 8009192:	f7f7 f865 	bl	8000260 <__aeabi_uidivmod>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	3e01      	subs	r6, #1
 800919a:	5c5b      	ldrb	r3, [r3, r1]
 800919c:	7033      	strb	r3, [r6, #0]
 800919e:	002b      	movs	r3, r5
 80091a0:	0005      	movs	r5, r0
 80091a2:	429f      	cmp	r7, r3
 80091a4:	d9f3      	bls.n	800918e <_printf_i+0xf2>
 80091a6:	2f08      	cmp	r7, #8
 80091a8:	d109      	bne.n	80091be <_printf_i+0x122>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	07db      	lsls	r3, r3, #31
 80091ae:	d506      	bpl.n	80091be <_printf_i+0x122>
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	6922      	ldr	r2, [r4, #16]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	dc02      	bgt.n	80091be <_printf_i+0x122>
 80091b8:	2330      	movs	r3, #48	; 0x30
 80091ba:	3e01      	subs	r6, #1
 80091bc:	7033      	strb	r3, [r6, #0]
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	1b9b      	subs	r3, r3, r6
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	9b07      	ldr	r3, [sp, #28]
 80091c6:	0021      	movs	r1, r4
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	9805      	ldr	r0, [sp, #20]
 80091cc:	9b06      	ldr	r3, [sp, #24]
 80091ce:	aa09      	add	r2, sp, #36	; 0x24
 80091d0:	f7ff fef4 	bl	8008fbc <_printf_common>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d14c      	bne.n	8009272 <_printf_i+0x1d6>
 80091d8:	2001      	movs	r0, #1
 80091da:	4240      	negs	r0, r0
 80091dc:	b00b      	add	sp, #44	; 0x2c
 80091de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e0:	3145      	adds	r1, #69	; 0x45
 80091e2:	700a      	strb	r2, [r1, #0]
 80091e4:	4a34      	ldr	r2, [pc, #208]	; (80092b8 <_printf_i+0x21c>)
 80091e6:	9203      	str	r2, [sp, #12]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	6821      	ldr	r1, [r4, #0]
 80091ec:	ca20      	ldmia	r2!, {r5}
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	0608      	lsls	r0, r1, #24
 80091f2:	d516      	bpl.n	8009222 <_printf_i+0x186>
 80091f4:	07cb      	lsls	r3, r1, #31
 80091f6:	d502      	bpl.n	80091fe <_printf_i+0x162>
 80091f8:	2320      	movs	r3, #32
 80091fa:	4319      	orrs	r1, r3
 80091fc:	6021      	str	r1, [r4, #0]
 80091fe:	2710      	movs	r7, #16
 8009200:	2d00      	cmp	r5, #0
 8009202:	d1b2      	bne.n	800916a <_printf_i+0xce>
 8009204:	2320      	movs	r3, #32
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	439a      	bics	r2, r3
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	e7ad      	b.n	800916a <_printf_i+0xce>
 800920e:	2220      	movs	r2, #32
 8009210:	6809      	ldr	r1, [r1, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	6022      	str	r2, [r4, #0]
 8009216:	0022      	movs	r2, r4
 8009218:	2178      	movs	r1, #120	; 0x78
 800921a:	3245      	adds	r2, #69	; 0x45
 800921c:	7011      	strb	r1, [r2, #0]
 800921e:	4a27      	ldr	r2, [pc, #156]	; (80092bc <_printf_i+0x220>)
 8009220:	e7e1      	b.n	80091e6 <_printf_i+0x14a>
 8009222:	0648      	lsls	r0, r1, #25
 8009224:	d5e6      	bpl.n	80091f4 <_printf_i+0x158>
 8009226:	b2ad      	uxth	r5, r5
 8009228:	e7e4      	b.n	80091f4 <_printf_i+0x158>
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	680d      	ldr	r5, [r1, #0]
 800922e:	1d10      	adds	r0, r2, #4
 8009230:	6949      	ldr	r1, [r1, #20]
 8009232:	6018      	str	r0, [r3, #0]
 8009234:	6813      	ldr	r3, [r2, #0]
 8009236:	062e      	lsls	r6, r5, #24
 8009238:	d501      	bpl.n	800923e <_printf_i+0x1a2>
 800923a:	6019      	str	r1, [r3, #0]
 800923c:	e002      	b.n	8009244 <_printf_i+0x1a8>
 800923e:	066d      	lsls	r5, r5, #25
 8009240:	d5fb      	bpl.n	800923a <_printf_i+0x19e>
 8009242:	8019      	strh	r1, [r3, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	9e04      	ldr	r6, [sp, #16]
 8009248:	6123      	str	r3, [r4, #16]
 800924a:	e7bb      	b.n	80091c4 <_printf_i+0x128>
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	1d11      	adds	r1, r2, #4
 8009250:	6019      	str	r1, [r3, #0]
 8009252:	6816      	ldr	r6, [r2, #0]
 8009254:	2100      	movs	r1, #0
 8009256:	0030      	movs	r0, r6
 8009258:	6862      	ldr	r2, [r4, #4]
 800925a:	f002 fc15 	bl	800ba88 <memchr>
 800925e:	2800      	cmp	r0, #0
 8009260:	d001      	beq.n	8009266 <_printf_i+0x1ca>
 8009262:	1b80      	subs	r0, r0, r6
 8009264:	6060      	str	r0, [r4, #4]
 8009266:	6863      	ldr	r3, [r4, #4]
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	2300      	movs	r3, #0
 800926c:	9a04      	ldr	r2, [sp, #16]
 800926e:	7013      	strb	r3, [r2, #0]
 8009270:	e7a8      	b.n	80091c4 <_printf_i+0x128>
 8009272:	6923      	ldr	r3, [r4, #16]
 8009274:	0032      	movs	r2, r6
 8009276:	9906      	ldr	r1, [sp, #24]
 8009278:	9805      	ldr	r0, [sp, #20]
 800927a:	9d07      	ldr	r5, [sp, #28]
 800927c:	47a8      	blx	r5
 800927e:	1c43      	adds	r3, r0, #1
 8009280:	d0aa      	beq.n	80091d8 <_printf_i+0x13c>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	079b      	lsls	r3, r3, #30
 8009286:	d415      	bmi.n	80092b4 <_printf_i+0x218>
 8009288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928a:	68e0      	ldr	r0, [r4, #12]
 800928c:	4298      	cmp	r0, r3
 800928e:	daa5      	bge.n	80091dc <_printf_i+0x140>
 8009290:	0018      	movs	r0, r3
 8009292:	e7a3      	b.n	80091dc <_printf_i+0x140>
 8009294:	0022      	movs	r2, r4
 8009296:	2301      	movs	r3, #1
 8009298:	9906      	ldr	r1, [sp, #24]
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	9e07      	ldr	r6, [sp, #28]
 800929e:	3219      	adds	r2, #25
 80092a0:	47b0      	blx	r6
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d098      	beq.n	80091d8 <_printf_i+0x13c>
 80092a6:	3501      	adds	r5, #1
 80092a8:	68e3      	ldr	r3, [r4, #12]
 80092aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ac:	1a9b      	subs	r3, r3, r2
 80092ae:	42ab      	cmp	r3, r5
 80092b0:	dcf0      	bgt.n	8009294 <_printf_i+0x1f8>
 80092b2:	e7e9      	b.n	8009288 <_printf_i+0x1ec>
 80092b4:	2500      	movs	r5, #0
 80092b6:	e7f7      	b.n	80092a8 <_printf_i+0x20c>
 80092b8:	0800e004 	.word	0x0800e004
 80092bc:	0800e015 	.word	0x0800e015

080092c0 <_scanf_float>:
 80092c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c2:	b08b      	sub	sp, #44	; 0x2c
 80092c4:	0015      	movs	r5, r2
 80092c6:	9001      	str	r0, [sp, #4]
 80092c8:	22ae      	movs	r2, #174	; 0xae
 80092ca:	2000      	movs	r0, #0
 80092cc:	9306      	str	r3, [sp, #24]
 80092ce:	688b      	ldr	r3, [r1, #8]
 80092d0:	000e      	movs	r6, r1
 80092d2:	1e59      	subs	r1, r3, #1
 80092d4:	0052      	lsls	r2, r2, #1
 80092d6:	9005      	str	r0, [sp, #20]
 80092d8:	4291      	cmp	r1, r2
 80092da:	d905      	bls.n	80092e8 <_scanf_float+0x28>
 80092dc:	3b5e      	subs	r3, #94	; 0x5e
 80092de:	3bff      	subs	r3, #255	; 0xff
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	235e      	movs	r3, #94	; 0x5e
 80092e4:	33ff      	adds	r3, #255	; 0xff
 80092e6:	60b3      	str	r3, [r6, #8]
 80092e8:	23f0      	movs	r3, #240	; 0xf0
 80092ea:	6832      	ldr	r2, [r6, #0]
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	4313      	orrs	r3, r2
 80092f0:	6033      	str	r3, [r6, #0]
 80092f2:	0033      	movs	r3, r6
 80092f4:	2400      	movs	r4, #0
 80092f6:	331c      	adds	r3, #28
 80092f8:	001f      	movs	r7, r3
 80092fa:	9303      	str	r3, [sp, #12]
 80092fc:	9402      	str	r4, [sp, #8]
 80092fe:	9408      	str	r4, [sp, #32]
 8009300:	9407      	str	r4, [sp, #28]
 8009302:	9400      	str	r4, [sp, #0]
 8009304:	9404      	str	r4, [sp, #16]
 8009306:	68b2      	ldr	r2, [r6, #8]
 8009308:	2a00      	cmp	r2, #0
 800930a:	d00a      	beq.n	8009322 <_scanf_float+0x62>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b4e      	cmp	r3, #78	; 0x4e
 8009312:	d844      	bhi.n	800939e <_scanf_float+0xde>
 8009314:	0018      	movs	r0, r3
 8009316:	2b40      	cmp	r3, #64	; 0x40
 8009318:	d82c      	bhi.n	8009374 <_scanf_float+0xb4>
 800931a:	382b      	subs	r0, #43	; 0x2b
 800931c:	b2c1      	uxtb	r1, r0
 800931e:	290e      	cmp	r1, #14
 8009320:	d92a      	bls.n	8009378 <_scanf_float+0xb8>
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <_scanf_float+0x70>
 8009328:	6832      	ldr	r2, [r6, #0]
 800932a:	4ba4      	ldr	r3, [pc, #656]	; (80095bc <_scanf_float+0x2fc>)
 800932c:	4013      	ands	r3, r2
 800932e:	6033      	str	r3, [r6, #0]
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	3b01      	subs	r3, #1
 8009334:	2b01      	cmp	r3, #1
 8009336:	d900      	bls.n	800933a <_scanf_float+0x7a>
 8009338:	e0f9      	b.n	800952e <_scanf_float+0x26e>
 800933a:	24be      	movs	r4, #190	; 0xbe
 800933c:	0064      	lsls	r4, r4, #1
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	429f      	cmp	r7, r3
 8009342:	d900      	bls.n	8009346 <_scanf_float+0x86>
 8009344:	e0e9      	b.n	800951a <_scanf_float+0x25a>
 8009346:	2301      	movs	r3, #1
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	e185      	b.n	8009658 <_scanf_float+0x398>
 800934c:	0018      	movs	r0, r3
 800934e:	3861      	subs	r0, #97	; 0x61
 8009350:	280d      	cmp	r0, #13
 8009352:	d8e6      	bhi.n	8009322 <_scanf_float+0x62>
 8009354:	f7f6 fef4 	bl	8000140 <__gnu_thumb1_case_shi>
 8009358:	ffe50083 	.word	0xffe50083
 800935c:	ffe5ffe5 	.word	0xffe5ffe5
 8009360:	00a200b6 	.word	0x00a200b6
 8009364:	ffe5ffe5 	.word	0xffe5ffe5
 8009368:	ffe50089 	.word	0xffe50089
 800936c:	ffe5ffe5 	.word	0xffe5ffe5
 8009370:	0065ffe5 	.word	0x0065ffe5
 8009374:	3841      	subs	r0, #65	; 0x41
 8009376:	e7eb      	b.n	8009350 <_scanf_float+0x90>
 8009378:	280e      	cmp	r0, #14
 800937a:	d8d2      	bhi.n	8009322 <_scanf_float+0x62>
 800937c:	f7f6 fee0 	bl	8000140 <__gnu_thumb1_case_shi>
 8009380:	ffd1004b 	.word	0xffd1004b
 8009384:	0098004b 	.word	0x0098004b
 8009388:	0020ffd1 	.word	0x0020ffd1
 800938c:	00400040 	.word	0x00400040
 8009390:	00400040 	.word	0x00400040
 8009394:	00400040 	.word	0x00400040
 8009398:	00400040 	.word	0x00400040
 800939c:	0040      	.short	0x0040
 800939e:	2b6e      	cmp	r3, #110	; 0x6e
 80093a0:	d809      	bhi.n	80093b6 <_scanf_float+0xf6>
 80093a2:	2b60      	cmp	r3, #96	; 0x60
 80093a4:	d8d2      	bhi.n	800934c <_scanf_float+0x8c>
 80093a6:	2b54      	cmp	r3, #84	; 0x54
 80093a8:	d07d      	beq.n	80094a6 <_scanf_float+0x1e6>
 80093aa:	2b59      	cmp	r3, #89	; 0x59
 80093ac:	d1b9      	bne.n	8009322 <_scanf_float+0x62>
 80093ae:	2c07      	cmp	r4, #7
 80093b0:	d1b7      	bne.n	8009322 <_scanf_float+0x62>
 80093b2:	2408      	movs	r4, #8
 80093b4:	e02c      	b.n	8009410 <_scanf_float+0x150>
 80093b6:	2b74      	cmp	r3, #116	; 0x74
 80093b8:	d075      	beq.n	80094a6 <_scanf_float+0x1e6>
 80093ba:	2b79      	cmp	r3, #121	; 0x79
 80093bc:	d0f7      	beq.n	80093ae <_scanf_float+0xee>
 80093be:	e7b0      	b.n	8009322 <_scanf_float+0x62>
 80093c0:	6831      	ldr	r1, [r6, #0]
 80093c2:	05c8      	lsls	r0, r1, #23
 80093c4:	d51c      	bpl.n	8009400 <_scanf_float+0x140>
 80093c6:	2380      	movs	r3, #128	; 0x80
 80093c8:	4399      	bics	r1, r3
 80093ca:	9b00      	ldr	r3, [sp, #0]
 80093cc:	6031      	str	r1, [r6, #0]
 80093ce:	3301      	adds	r3, #1
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <_scanf_float+0x120>
 80093d8:	3b01      	subs	r3, #1
 80093da:	3201      	adds	r2, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	60b2      	str	r2, [r6, #8]
 80093e0:	68b3      	ldr	r3, [r6, #8]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	60b3      	str	r3, [r6, #8]
 80093e6:	6933      	ldr	r3, [r6, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	6133      	str	r3, [r6, #16]
 80093ec:	686b      	ldr	r3, [r5, #4]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	606b      	str	r3, [r5, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dc00      	bgt.n	80093f8 <_scanf_float+0x138>
 80093f6:	e086      	b.n	8009506 <_scanf_float+0x246>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	602b      	str	r3, [r5, #0]
 80093fe:	e782      	b.n	8009306 <_scanf_float+0x46>
 8009400:	9a02      	ldr	r2, [sp, #8]
 8009402:	1912      	adds	r2, r2, r4
 8009404:	2a00      	cmp	r2, #0
 8009406:	d18c      	bne.n	8009322 <_scanf_float+0x62>
 8009408:	4a6d      	ldr	r2, [pc, #436]	; (80095c0 <_scanf_float+0x300>)
 800940a:	6831      	ldr	r1, [r6, #0]
 800940c:	400a      	ands	r2, r1
 800940e:	6032      	str	r2, [r6, #0]
 8009410:	703b      	strb	r3, [r7, #0]
 8009412:	3701      	adds	r7, #1
 8009414:	e7e4      	b.n	80093e0 <_scanf_float+0x120>
 8009416:	2180      	movs	r1, #128	; 0x80
 8009418:	6832      	ldr	r2, [r6, #0]
 800941a:	420a      	tst	r2, r1
 800941c:	d081      	beq.n	8009322 <_scanf_float+0x62>
 800941e:	438a      	bics	r2, r1
 8009420:	e7f5      	b.n	800940e <_scanf_float+0x14e>
 8009422:	9a02      	ldr	r2, [sp, #8]
 8009424:	2a00      	cmp	r2, #0
 8009426:	d10f      	bne.n	8009448 <_scanf_float+0x188>
 8009428:	9a00      	ldr	r2, [sp, #0]
 800942a:	2a00      	cmp	r2, #0
 800942c:	d10f      	bne.n	800944e <_scanf_float+0x18e>
 800942e:	6832      	ldr	r2, [r6, #0]
 8009430:	21e0      	movs	r1, #224	; 0xe0
 8009432:	0010      	movs	r0, r2
 8009434:	00c9      	lsls	r1, r1, #3
 8009436:	4008      	ands	r0, r1
 8009438:	4288      	cmp	r0, r1
 800943a:	d108      	bne.n	800944e <_scanf_float+0x18e>
 800943c:	4961      	ldr	r1, [pc, #388]	; (80095c4 <_scanf_float+0x304>)
 800943e:	400a      	ands	r2, r1
 8009440:	6032      	str	r2, [r6, #0]
 8009442:	2201      	movs	r2, #1
 8009444:	9202      	str	r2, [sp, #8]
 8009446:	e7e3      	b.n	8009410 <_scanf_float+0x150>
 8009448:	9a02      	ldr	r2, [sp, #8]
 800944a:	2a02      	cmp	r2, #2
 800944c:	d059      	beq.n	8009502 <_scanf_float+0x242>
 800944e:	2c01      	cmp	r4, #1
 8009450:	d002      	beq.n	8009458 <_scanf_float+0x198>
 8009452:	2c04      	cmp	r4, #4
 8009454:	d000      	beq.n	8009458 <_scanf_float+0x198>
 8009456:	e764      	b.n	8009322 <_scanf_float+0x62>
 8009458:	3401      	adds	r4, #1
 800945a:	b2e4      	uxtb	r4, r4
 800945c:	e7d8      	b.n	8009410 <_scanf_float+0x150>
 800945e:	9a02      	ldr	r2, [sp, #8]
 8009460:	2a01      	cmp	r2, #1
 8009462:	d000      	beq.n	8009466 <_scanf_float+0x1a6>
 8009464:	e75d      	b.n	8009322 <_scanf_float+0x62>
 8009466:	2202      	movs	r2, #2
 8009468:	e7ec      	b.n	8009444 <_scanf_float+0x184>
 800946a:	2c00      	cmp	r4, #0
 800946c:	d110      	bne.n	8009490 <_scanf_float+0x1d0>
 800946e:	9a00      	ldr	r2, [sp, #0]
 8009470:	2a00      	cmp	r2, #0
 8009472:	d000      	beq.n	8009476 <_scanf_float+0x1b6>
 8009474:	e758      	b.n	8009328 <_scanf_float+0x68>
 8009476:	6832      	ldr	r2, [r6, #0]
 8009478:	21e0      	movs	r1, #224	; 0xe0
 800947a:	0010      	movs	r0, r2
 800947c:	00c9      	lsls	r1, r1, #3
 800947e:	4008      	ands	r0, r1
 8009480:	4288      	cmp	r0, r1
 8009482:	d000      	beq.n	8009486 <_scanf_float+0x1c6>
 8009484:	e754      	b.n	8009330 <_scanf_float+0x70>
 8009486:	494f      	ldr	r1, [pc, #316]	; (80095c4 <_scanf_float+0x304>)
 8009488:	3401      	adds	r4, #1
 800948a:	400a      	ands	r2, r1
 800948c:	6032      	str	r2, [r6, #0]
 800948e:	e7bf      	b.n	8009410 <_scanf_float+0x150>
 8009490:	21fd      	movs	r1, #253	; 0xfd
 8009492:	1ee2      	subs	r2, r4, #3
 8009494:	420a      	tst	r2, r1
 8009496:	d000      	beq.n	800949a <_scanf_float+0x1da>
 8009498:	e743      	b.n	8009322 <_scanf_float+0x62>
 800949a:	e7dd      	b.n	8009458 <_scanf_float+0x198>
 800949c:	2c02      	cmp	r4, #2
 800949e:	d000      	beq.n	80094a2 <_scanf_float+0x1e2>
 80094a0:	e73f      	b.n	8009322 <_scanf_float+0x62>
 80094a2:	2403      	movs	r4, #3
 80094a4:	e7b4      	b.n	8009410 <_scanf_float+0x150>
 80094a6:	2c06      	cmp	r4, #6
 80094a8:	d000      	beq.n	80094ac <_scanf_float+0x1ec>
 80094aa:	e73a      	b.n	8009322 <_scanf_float+0x62>
 80094ac:	2407      	movs	r4, #7
 80094ae:	e7af      	b.n	8009410 <_scanf_float+0x150>
 80094b0:	6832      	ldr	r2, [r6, #0]
 80094b2:	0591      	lsls	r1, r2, #22
 80094b4:	d400      	bmi.n	80094b8 <_scanf_float+0x1f8>
 80094b6:	e734      	b.n	8009322 <_scanf_float+0x62>
 80094b8:	4943      	ldr	r1, [pc, #268]	; (80095c8 <_scanf_float+0x308>)
 80094ba:	400a      	ands	r2, r1
 80094bc:	6032      	str	r2, [r6, #0]
 80094be:	9a00      	ldr	r2, [sp, #0]
 80094c0:	9204      	str	r2, [sp, #16]
 80094c2:	e7a5      	b.n	8009410 <_scanf_float+0x150>
 80094c4:	21a0      	movs	r1, #160	; 0xa0
 80094c6:	2080      	movs	r0, #128	; 0x80
 80094c8:	6832      	ldr	r2, [r6, #0]
 80094ca:	00c9      	lsls	r1, r1, #3
 80094cc:	4011      	ands	r1, r2
 80094ce:	00c0      	lsls	r0, r0, #3
 80094d0:	4281      	cmp	r1, r0
 80094d2:	d006      	beq.n	80094e2 <_scanf_float+0x222>
 80094d4:	4202      	tst	r2, r0
 80094d6:	d100      	bne.n	80094da <_scanf_float+0x21a>
 80094d8:	e723      	b.n	8009322 <_scanf_float+0x62>
 80094da:	9900      	ldr	r1, [sp, #0]
 80094dc:	2900      	cmp	r1, #0
 80094de:	d100      	bne.n	80094e2 <_scanf_float+0x222>
 80094e0:	e726      	b.n	8009330 <_scanf_float+0x70>
 80094e2:	0591      	lsls	r1, r2, #22
 80094e4:	d404      	bmi.n	80094f0 <_scanf_float+0x230>
 80094e6:	9900      	ldr	r1, [sp, #0]
 80094e8:	9804      	ldr	r0, [sp, #16]
 80094ea:	9708      	str	r7, [sp, #32]
 80094ec:	1a09      	subs	r1, r1, r0
 80094ee:	9107      	str	r1, [sp, #28]
 80094f0:	4934      	ldr	r1, [pc, #208]	; (80095c4 <_scanf_float+0x304>)
 80094f2:	400a      	ands	r2, r1
 80094f4:	21c0      	movs	r1, #192	; 0xc0
 80094f6:	0049      	lsls	r1, r1, #1
 80094f8:	430a      	orrs	r2, r1
 80094fa:	6032      	str	r2, [r6, #0]
 80094fc:	2200      	movs	r2, #0
 80094fe:	9200      	str	r2, [sp, #0]
 8009500:	e786      	b.n	8009410 <_scanf_float+0x150>
 8009502:	2203      	movs	r2, #3
 8009504:	e79e      	b.n	8009444 <_scanf_float+0x184>
 8009506:	23c0      	movs	r3, #192	; 0xc0
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	0029      	movs	r1, r5
 800950c:	58f3      	ldr	r3, [r6, r3]
 800950e:	9801      	ldr	r0, [sp, #4]
 8009510:	4798      	blx	r3
 8009512:	2800      	cmp	r0, #0
 8009514:	d100      	bne.n	8009518 <_scanf_float+0x258>
 8009516:	e6f6      	b.n	8009306 <_scanf_float+0x46>
 8009518:	e703      	b.n	8009322 <_scanf_float+0x62>
 800951a:	3f01      	subs	r7, #1
 800951c:	5933      	ldr	r3, [r6, r4]
 800951e:	002a      	movs	r2, r5
 8009520:	7839      	ldrb	r1, [r7, #0]
 8009522:	9801      	ldr	r0, [sp, #4]
 8009524:	4798      	blx	r3
 8009526:	6933      	ldr	r3, [r6, #16]
 8009528:	3b01      	subs	r3, #1
 800952a:	6133      	str	r3, [r6, #16]
 800952c:	e707      	b.n	800933e <_scanf_float+0x7e>
 800952e:	1e63      	subs	r3, r4, #1
 8009530:	2b06      	cmp	r3, #6
 8009532:	d80e      	bhi.n	8009552 <_scanf_float+0x292>
 8009534:	9702      	str	r7, [sp, #8]
 8009536:	2c02      	cmp	r4, #2
 8009538:	d920      	bls.n	800957c <_scanf_float+0x2bc>
 800953a:	1be3      	subs	r3, r4, r7
 800953c:	b2db      	uxtb	r3, r3
 800953e:	9305      	str	r3, [sp, #20]
 8009540:	9b02      	ldr	r3, [sp, #8]
 8009542:	9a05      	ldr	r2, [sp, #20]
 8009544:	189b      	adds	r3, r3, r2
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b03      	cmp	r3, #3
 800954a:	d827      	bhi.n	800959c <_scanf_float+0x2dc>
 800954c:	3c03      	subs	r4, #3
 800954e:	b2e4      	uxtb	r4, r4
 8009550:	1b3f      	subs	r7, r7, r4
 8009552:	6833      	ldr	r3, [r6, #0]
 8009554:	05da      	lsls	r2, r3, #23
 8009556:	d554      	bpl.n	8009602 <_scanf_float+0x342>
 8009558:	055b      	lsls	r3, r3, #21
 800955a:	d537      	bpl.n	80095cc <_scanf_float+0x30c>
 800955c:	24be      	movs	r4, #190	; 0xbe
 800955e:	0064      	lsls	r4, r4, #1
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	429f      	cmp	r7, r3
 8009564:	d800      	bhi.n	8009568 <_scanf_float+0x2a8>
 8009566:	e6ee      	b.n	8009346 <_scanf_float+0x86>
 8009568:	3f01      	subs	r7, #1
 800956a:	5933      	ldr	r3, [r6, r4]
 800956c:	002a      	movs	r2, r5
 800956e:	7839      	ldrb	r1, [r7, #0]
 8009570:	9801      	ldr	r0, [sp, #4]
 8009572:	4798      	blx	r3
 8009574:	6933      	ldr	r3, [r6, #16]
 8009576:	3b01      	subs	r3, #1
 8009578:	6133      	str	r3, [r6, #16]
 800957a:	e7f1      	b.n	8009560 <_scanf_float+0x2a0>
 800957c:	24be      	movs	r4, #190	; 0xbe
 800957e:	0064      	lsls	r4, r4, #1
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	429f      	cmp	r7, r3
 8009584:	d800      	bhi.n	8009588 <_scanf_float+0x2c8>
 8009586:	e6de      	b.n	8009346 <_scanf_float+0x86>
 8009588:	3f01      	subs	r7, #1
 800958a:	5933      	ldr	r3, [r6, r4]
 800958c:	002a      	movs	r2, r5
 800958e:	7839      	ldrb	r1, [r7, #0]
 8009590:	9801      	ldr	r0, [sp, #4]
 8009592:	4798      	blx	r3
 8009594:	6933      	ldr	r3, [r6, #16]
 8009596:	3b01      	subs	r3, #1
 8009598:	6133      	str	r3, [r6, #16]
 800959a:	e7f1      	b.n	8009580 <_scanf_float+0x2c0>
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	002a      	movs	r2, r5
 80095a0:	3b01      	subs	r3, #1
 80095a2:	7819      	ldrb	r1, [r3, #0]
 80095a4:	9302      	str	r3, [sp, #8]
 80095a6:	23be      	movs	r3, #190	; 0xbe
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	58f3      	ldr	r3, [r6, r3]
 80095ac:	9801      	ldr	r0, [sp, #4]
 80095ae:	9309      	str	r3, [sp, #36]	; 0x24
 80095b0:	4798      	blx	r3
 80095b2:	6933      	ldr	r3, [r6, #16]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	6133      	str	r3, [r6, #16]
 80095b8:	e7c2      	b.n	8009540 <_scanf_float+0x280>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	fffffeff 	.word	0xfffffeff
 80095c0:	fffffe7f 	.word	0xfffffe7f
 80095c4:	fffff87f 	.word	0xfffff87f
 80095c8:	fffffd7f 	.word	0xfffffd7f
 80095cc:	6933      	ldr	r3, [r6, #16]
 80095ce:	1e7c      	subs	r4, r7, #1
 80095d0:	7821      	ldrb	r1, [r4, #0]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	6133      	str	r3, [r6, #16]
 80095d6:	2965      	cmp	r1, #101	; 0x65
 80095d8:	d00c      	beq.n	80095f4 <_scanf_float+0x334>
 80095da:	2945      	cmp	r1, #69	; 0x45
 80095dc:	d00a      	beq.n	80095f4 <_scanf_float+0x334>
 80095de:	23be      	movs	r3, #190	; 0xbe
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	58f3      	ldr	r3, [r6, r3]
 80095e4:	002a      	movs	r2, r5
 80095e6:	9801      	ldr	r0, [sp, #4]
 80095e8:	4798      	blx	r3
 80095ea:	6933      	ldr	r3, [r6, #16]
 80095ec:	1ebc      	subs	r4, r7, #2
 80095ee:	3b01      	subs	r3, #1
 80095f0:	7821      	ldrb	r1, [r4, #0]
 80095f2:	6133      	str	r3, [r6, #16]
 80095f4:	23be      	movs	r3, #190	; 0xbe
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	002a      	movs	r2, r5
 80095fa:	58f3      	ldr	r3, [r6, r3]
 80095fc:	9801      	ldr	r0, [sp, #4]
 80095fe:	4798      	blx	r3
 8009600:	0027      	movs	r7, r4
 8009602:	6832      	ldr	r2, [r6, #0]
 8009604:	2310      	movs	r3, #16
 8009606:	0011      	movs	r1, r2
 8009608:	4019      	ands	r1, r3
 800960a:	9102      	str	r1, [sp, #8]
 800960c:	421a      	tst	r2, r3
 800960e:	d158      	bne.n	80096c2 <_scanf_float+0x402>
 8009610:	23c0      	movs	r3, #192	; 0xc0
 8009612:	7039      	strb	r1, [r7, #0]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4013      	ands	r3, r2
 800961a:	2280      	movs	r2, #128	; 0x80
 800961c:	00d2      	lsls	r2, r2, #3
 800961e:	4293      	cmp	r3, r2
 8009620:	d11d      	bne.n	800965e <_scanf_float+0x39e>
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	9a00      	ldr	r2, [sp, #0]
 8009626:	9900      	ldr	r1, [sp, #0]
 8009628:	1a9a      	subs	r2, r3, r2
 800962a:	428b      	cmp	r3, r1
 800962c:	d124      	bne.n	8009678 <_scanf_float+0x3b8>
 800962e:	2200      	movs	r2, #0
 8009630:	9903      	ldr	r1, [sp, #12]
 8009632:	9801      	ldr	r0, [sp, #4]
 8009634:	f000 ff1a 	bl	800a46c <_strtod_r>
 8009638:	9b06      	ldr	r3, [sp, #24]
 800963a:	000d      	movs	r5, r1
 800963c:	6831      	ldr	r1, [r6, #0]
 800963e:	0004      	movs	r4, r0
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	078a      	lsls	r2, r1, #30
 8009644:	d525      	bpl.n	8009692 <_scanf_float+0x3d2>
 8009646:	1d1a      	adds	r2, r3, #4
 8009648:	9906      	ldr	r1, [sp, #24]
 800964a:	600a      	str	r2, [r1, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	601c      	str	r4, [r3, #0]
 8009650:	605d      	str	r5, [r3, #4]
 8009652:	68f3      	ldr	r3, [r6, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60f3      	str	r3, [r6, #12]
 8009658:	9802      	ldr	r0, [sp, #8]
 800965a:	b00b      	add	sp, #44	; 0x2c
 800965c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0e4      	beq.n	800962e <_scanf_float+0x36e>
 8009664:	9b08      	ldr	r3, [sp, #32]
 8009666:	9a02      	ldr	r2, [sp, #8]
 8009668:	1c59      	adds	r1, r3, #1
 800966a:	9801      	ldr	r0, [sp, #4]
 800966c:	230a      	movs	r3, #10
 800966e:	f000 ff93 	bl	800a598 <_strtol_r>
 8009672:	9b07      	ldr	r3, [sp, #28]
 8009674:	9f08      	ldr	r7, [sp, #32]
 8009676:	1ac2      	subs	r2, r0, r3
 8009678:	0033      	movs	r3, r6
 800967a:	3370      	adds	r3, #112	; 0x70
 800967c:	33ff      	adds	r3, #255	; 0xff
 800967e:	429f      	cmp	r7, r3
 8009680:	d302      	bcc.n	8009688 <_scanf_float+0x3c8>
 8009682:	0037      	movs	r7, r6
 8009684:	376f      	adds	r7, #111	; 0x6f
 8009686:	37ff      	adds	r7, #255	; 0xff
 8009688:	0038      	movs	r0, r7
 800968a:	490f      	ldr	r1, [pc, #60]	; (80096c8 <_scanf_float+0x408>)
 800968c:	f000 f824 	bl	80096d8 <siprintf>
 8009690:	e7cd      	b.n	800962e <_scanf_float+0x36e>
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	0749      	lsls	r1, r1, #29
 8009696:	d4d7      	bmi.n	8009648 <_scanf_float+0x388>
 8009698:	9906      	ldr	r1, [sp, #24]
 800969a:	0020      	movs	r0, r4
 800969c:	600a      	str	r2, [r1, #0]
 800969e:	681f      	ldr	r7, [r3, #0]
 80096a0:	0022      	movs	r2, r4
 80096a2:	002b      	movs	r3, r5
 80096a4:	0029      	movs	r1, r5
 80096a6:	f7f8 fcb5 	bl	8002014 <__aeabi_dcmpun>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d004      	beq.n	80096b8 <_scanf_float+0x3f8>
 80096ae:	4807      	ldr	r0, [pc, #28]	; (80096cc <_scanf_float+0x40c>)
 80096b0:	f000 f80e 	bl	80096d0 <nanf>
 80096b4:	6038      	str	r0, [r7, #0]
 80096b6:	e7cc      	b.n	8009652 <_scanf_float+0x392>
 80096b8:	0020      	movs	r0, r4
 80096ba:	0029      	movs	r1, r5
 80096bc:	f7f8 fd9c 	bl	80021f8 <__aeabi_d2f>
 80096c0:	e7f8      	b.n	80096b4 <_scanf_float+0x3f4>
 80096c2:	2300      	movs	r3, #0
 80096c4:	e640      	b.n	8009348 <_scanf_float+0x88>
 80096c6:	46c0      	nop			; (mov r8, r8)
 80096c8:	0800e026 	.word	0x0800e026
 80096cc:	0800e44b 	.word	0x0800e44b

080096d0 <nanf>:
 80096d0:	4800      	ldr	r0, [pc, #0]	; (80096d4 <nanf+0x4>)
 80096d2:	4770      	bx	lr
 80096d4:	7fc00000 	.word	0x7fc00000

080096d8 <siprintf>:
 80096d8:	b40e      	push	{r1, r2, r3}
 80096da:	b500      	push	{lr}
 80096dc:	490b      	ldr	r1, [pc, #44]	; (800970c <siprintf+0x34>)
 80096de:	b09c      	sub	sp, #112	; 0x70
 80096e0:	ab1d      	add	r3, sp, #116	; 0x74
 80096e2:	9002      	str	r0, [sp, #8]
 80096e4:	9006      	str	r0, [sp, #24]
 80096e6:	9107      	str	r1, [sp, #28]
 80096e8:	9104      	str	r1, [sp, #16]
 80096ea:	4809      	ldr	r0, [pc, #36]	; (8009710 <siprintf+0x38>)
 80096ec:	4909      	ldr	r1, [pc, #36]	; (8009714 <siprintf+0x3c>)
 80096ee:	cb04      	ldmia	r3!, {r2}
 80096f0:	9105      	str	r1, [sp, #20]
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	a902      	add	r1, sp, #8
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	f003 f814 	bl	800c724 <_svfiprintf_r>
 80096fc:	2300      	movs	r3, #0
 80096fe:	9a02      	ldr	r2, [sp, #8]
 8009700:	7013      	strb	r3, [r2, #0]
 8009702:	b01c      	add	sp, #112	; 0x70
 8009704:	bc08      	pop	{r3}
 8009706:	b003      	add	sp, #12
 8009708:	4718      	bx	r3
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	7fffffff 	.word	0x7fffffff
 8009710:	2000000c 	.word	0x2000000c
 8009714:	ffff0208 	.word	0xffff0208

08009718 <siscanf>:
 8009718:	b40e      	push	{r1, r2, r3}
 800971a:	b530      	push	{r4, r5, lr}
 800971c:	2381      	movs	r3, #129	; 0x81
 800971e:	b09c      	sub	sp, #112	; 0x70
 8009720:	466a      	mov	r2, sp
 8009722:	ac1f      	add	r4, sp, #124	; 0x7c
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	cc20      	ldmia	r4!, {r5}
 8009728:	8293      	strh	r3, [r2, #20]
 800972a:	9002      	str	r0, [sp, #8]
 800972c:	9006      	str	r0, [sp, #24]
 800972e:	f7f6 fcf5 	bl	800011c <strlen>
 8009732:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <siscanf+0x48>)
 8009734:	466a      	mov	r2, sp
 8009736:	930b      	str	r3, [sp, #44]	; 0x2c
 8009738:	2300      	movs	r3, #0
 800973a:	9003      	str	r0, [sp, #12]
 800973c:	9007      	str	r0, [sp, #28]
 800973e:	4809      	ldr	r0, [pc, #36]	; (8009764 <siscanf+0x4c>)
 8009740:	930f      	str	r3, [sp, #60]	; 0x3c
 8009742:	9314      	str	r3, [sp, #80]	; 0x50
 8009744:	3b01      	subs	r3, #1
 8009746:	82d3      	strh	r3, [r2, #22]
 8009748:	a902      	add	r1, sp, #8
 800974a:	0023      	movs	r3, r4
 800974c:	002a      	movs	r2, r5
 800974e:	6800      	ldr	r0, [r0, #0]
 8009750:	9401      	str	r4, [sp, #4]
 8009752:	f003 f943 	bl	800c9dc <__ssvfiscanf_r>
 8009756:	b01c      	add	sp, #112	; 0x70
 8009758:	bc30      	pop	{r4, r5}
 800975a:	bc08      	pop	{r3}
 800975c:	b003      	add	sp, #12
 800975e:	4718      	bx	r3
 8009760:	08009791 	.word	0x08009791
 8009764:	2000000c 	.word	0x2000000c

08009768 <__sread>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	000c      	movs	r4, r1
 800976c:	250e      	movs	r5, #14
 800976e:	5f49      	ldrsh	r1, [r1, r5]
 8009770:	f003 fc14 	bl	800cf9c <_read_r>
 8009774:	2800      	cmp	r0, #0
 8009776:	db03      	blt.n	8009780 <__sread+0x18>
 8009778:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800977a:	181b      	adds	r3, r3, r0
 800977c:	6563      	str	r3, [r4, #84]	; 0x54
 800977e:	bd70      	pop	{r4, r5, r6, pc}
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	4a02      	ldr	r2, [pc, #8]	; (800978c <__sread+0x24>)
 8009784:	4013      	ands	r3, r2
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	e7f9      	b.n	800977e <__sread+0x16>
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	ffffefff 	.word	0xffffefff

08009790 <__seofread>:
 8009790:	2000      	movs	r0, #0
 8009792:	4770      	bx	lr

08009794 <__swrite>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	001f      	movs	r7, r3
 8009798:	898b      	ldrh	r3, [r1, #12]
 800979a:	0005      	movs	r5, r0
 800979c:	000c      	movs	r4, r1
 800979e:	0016      	movs	r6, r2
 80097a0:	05db      	lsls	r3, r3, #23
 80097a2:	d505      	bpl.n	80097b0 <__swrite+0x1c>
 80097a4:	230e      	movs	r3, #14
 80097a6:	5ec9      	ldrsh	r1, [r1, r3]
 80097a8:	2200      	movs	r2, #0
 80097aa:	2302      	movs	r3, #2
 80097ac:	f002 f93c 	bl	800ba28 <_lseek_r>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	4a05      	ldr	r2, [pc, #20]	; (80097c8 <__swrite+0x34>)
 80097b4:	0028      	movs	r0, r5
 80097b6:	4013      	ands	r3, r2
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	0032      	movs	r2, r6
 80097bc:	230e      	movs	r3, #14
 80097be:	5ee1      	ldrsh	r1, [r4, r3]
 80097c0:	003b      	movs	r3, r7
 80097c2:	f000 feed 	bl	800a5a0 <_write_r>
 80097c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c8:	ffffefff 	.word	0xffffefff

080097cc <__sseek>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	000c      	movs	r4, r1
 80097d0:	250e      	movs	r5, #14
 80097d2:	5f49      	ldrsh	r1, [r1, r5]
 80097d4:	f002 f928 	bl	800ba28 <_lseek_r>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	1c42      	adds	r2, r0, #1
 80097dc:	d103      	bne.n	80097e6 <__sseek+0x1a>
 80097de:	4a05      	ldr	r2, [pc, #20]	; (80097f4 <__sseek+0x28>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
 80097e6:	2280      	movs	r2, #128	; 0x80
 80097e8:	0152      	lsls	r2, r2, #5
 80097ea:	4313      	orrs	r3, r2
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	6560      	str	r0, [r4, #84]	; 0x54
 80097f0:	e7f8      	b.n	80097e4 <__sseek+0x18>
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	ffffefff 	.word	0xffffefff

080097f8 <__sclose>:
 80097f8:	b510      	push	{r4, lr}
 80097fa:	230e      	movs	r3, #14
 80097fc:	5ec9      	ldrsh	r1, [r1, r3]
 80097fe:	f000 fee3 	bl	800a5c8 <_close_r>
 8009802:	bd10      	pop	{r4, pc}

08009804 <strcpy>:
 8009804:	0003      	movs	r3, r0
 8009806:	780a      	ldrb	r2, [r1, #0]
 8009808:	3101      	adds	r1, #1
 800980a:	701a      	strb	r2, [r3, #0]
 800980c:	3301      	adds	r3, #1
 800980e:	2a00      	cmp	r2, #0
 8009810:	d1f9      	bne.n	8009806 <strcpy+0x2>
 8009812:	4770      	bx	lr

08009814 <sulp>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	0016      	movs	r6, r2
 8009818:	000d      	movs	r5, r1
 800981a:	f002 fccd 	bl	800c1b8 <__ulp>
 800981e:	2e00      	cmp	r6, #0
 8009820:	d00d      	beq.n	800983e <sulp+0x2a>
 8009822:	236b      	movs	r3, #107	; 0x6b
 8009824:	006a      	lsls	r2, r5, #1
 8009826:	0d52      	lsrs	r2, r2, #21
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd07      	ble.n	800983e <sulp+0x2a>
 800982e:	2400      	movs	r4, #0
 8009830:	4a03      	ldr	r2, [pc, #12]	; (8009840 <sulp+0x2c>)
 8009832:	051b      	lsls	r3, r3, #20
 8009834:	189d      	adds	r5, r3, r2
 8009836:	002b      	movs	r3, r5
 8009838:	0022      	movs	r2, r4
 800983a:	f7f7 fded 	bl	8001418 <__aeabi_dmul>
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	3ff00000 	.word	0x3ff00000

08009844 <_strtod_l>:
 8009844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009846:	001d      	movs	r5, r3
 8009848:	2300      	movs	r3, #0
 800984a:	b0a5      	sub	sp, #148	; 0x94
 800984c:	9320      	str	r3, [sp, #128]	; 0x80
 800984e:	4bac      	ldr	r3, [pc, #688]	; (8009b00 <_strtod_l+0x2bc>)
 8009850:	9005      	str	r0, [sp, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	9108      	str	r1, [sp, #32]
 8009856:	0018      	movs	r0, r3
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	921b      	str	r2, [sp, #108]	; 0x6c
 800985c:	f7f6 fc5e 	bl	800011c <strlen>
 8009860:	2600      	movs	r6, #0
 8009862:	0004      	movs	r4, r0
 8009864:	2700      	movs	r7, #0
 8009866:	9b08      	ldr	r3, [sp, #32]
 8009868:	931f      	str	r3, [sp, #124]	; 0x7c
 800986a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800986c:	7813      	ldrb	r3, [r2, #0]
 800986e:	2b2b      	cmp	r3, #43	; 0x2b
 8009870:	d058      	beq.n	8009924 <_strtod_l+0xe0>
 8009872:	d844      	bhi.n	80098fe <_strtod_l+0xba>
 8009874:	2b0d      	cmp	r3, #13
 8009876:	d83d      	bhi.n	80098f4 <_strtod_l+0xb0>
 8009878:	2b08      	cmp	r3, #8
 800987a:	d83d      	bhi.n	80098f8 <_strtod_l+0xb4>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d047      	beq.n	8009910 <_strtod_l+0xcc>
 8009880:	2300      	movs	r3, #0
 8009882:	930e      	str	r3, [sp, #56]	; 0x38
 8009884:	2200      	movs	r2, #0
 8009886:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009888:	920a      	str	r2, [sp, #40]	; 0x28
 800988a:	9306      	str	r3, [sp, #24]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b30      	cmp	r3, #48	; 0x30
 8009890:	d000      	beq.n	8009894 <_strtod_l+0x50>
 8009892:	e07f      	b.n	8009994 <_strtod_l+0x150>
 8009894:	9b06      	ldr	r3, [sp, #24]
 8009896:	3220      	adds	r2, #32
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	4393      	bics	r3, r2
 800989c:	2b58      	cmp	r3, #88	; 0x58
 800989e:	d000      	beq.n	80098a2 <_strtod_l+0x5e>
 80098a0:	e06e      	b.n	8009980 <_strtod_l+0x13c>
 80098a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098a4:	9502      	str	r5, [sp, #8]
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	ab20      	add	r3, sp, #128	; 0x80
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	4a95      	ldr	r2, [pc, #596]	; (8009b04 <_strtod_l+0x2c0>)
 80098ae:	ab21      	add	r3, sp, #132	; 0x84
 80098b0:	9805      	ldr	r0, [sp, #20]
 80098b2:	a91f      	add	r1, sp, #124	; 0x7c
 80098b4:	f001 fdaa 	bl	800b40c <__gethex>
 80098b8:	2307      	movs	r3, #7
 80098ba:	0005      	movs	r5, r0
 80098bc:	0004      	movs	r4, r0
 80098be:	401d      	ands	r5, r3
 80098c0:	4218      	tst	r0, r3
 80098c2:	d006      	beq.n	80098d2 <_strtod_l+0x8e>
 80098c4:	2d06      	cmp	r5, #6
 80098c6:	d12f      	bne.n	8009928 <_strtod_l+0xe4>
 80098c8:	9b06      	ldr	r3, [sp, #24]
 80098ca:	3301      	adds	r3, #1
 80098cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80098ce:	2300      	movs	r3, #0
 80098d0:	930e      	str	r3, [sp, #56]	; 0x38
 80098d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <_strtod_l+0x9a>
 80098d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01c      	beq.n	800991e <_strtod_l+0xda>
 80098e4:	2380      	movs	r3, #128	; 0x80
 80098e6:	0032      	movs	r2, r6
 80098e8:	061b      	lsls	r3, r3, #24
 80098ea:	18fb      	adds	r3, r7, r3
 80098ec:	0010      	movs	r0, r2
 80098ee:	0019      	movs	r1, r3
 80098f0:	b025      	add	sp, #148	; 0x94
 80098f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d1c3      	bne.n	8009880 <_strtod_l+0x3c>
 80098f8:	3201      	adds	r2, #1
 80098fa:	921f      	str	r2, [sp, #124]	; 0x7c
 80098fc:	e7b5      	b.n	800986a <_strtod_l+0x26>
 80098fe:	2b2d      	cmp	r3, #45	; 0x2d
 8009900:	d1be      	bne.n	8009880 <_strtod_l+0x3c>
 8009902:	3b2c      	subs	r3, #44	; 0x2c
 8009904:	930e      	str	r3, [sp, #56]	; 0x38
 8009906:	1c53      	adds	r3, r2, #1
 8009908:	931f      	str	r3, [sp, #124]	; 0x7c
 800990a:	7853      	ldrb	r3, [r2, #1]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1b9      	bne.n	8009884 <_strtod_l+0x40>
 8009910:	9b08      	ldr	r3, [sp, #32]
 8009912:	931f      	str	r3, [sp, #124]	; 0x7c
 8009914:	2300      	movs	r3, #0
 8009916:	930e      	str	r3, [sp, #56]	; 0x38
 8009918:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1dc      	bne.n	80098d8 <_strtod_l+0x94>
 800991e:	0032      	movs	r2, r6
 8009920:	003b      	movs	r3, r7
 8009922:	e7e3      	b.n	80098ec <_strtod_l+0xa8>
 8009924:	2300      	movs	r3, #0
 8009926:	e7ed      	b.n	8009904 <_strtod_l+0xc0>
 8009928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800992a:	2a00      	cmp	r2, #0
 800992c:	d007      	beq.n	800993e <_strtod_l+0xfa>
 800992e:	2135      	movs	r1, #53	; 0x35
 8009930:	a822      	add	r0, sp, #136	; 0x88
 8009932:	f002 fd42 	bl	800c3ba <__copybits>
 8009936:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009938:	9805      	ldr	r0, [sp, #20]
 800993a:	f002 f8fd 	bl	800bb38 <_Bfree>
 800993e:	1e68      	subs	r0, r5, #1
 8009940:	2804      	cmp	r0, #4
 8009942:	d806      	bhi.n	8009952 <_strtod_l+0x10e>
 8009944:	f7f6 fbf2 	bl	800012c <__gnu_thumb1_case_uqi>
 8009948:	1816030b 	.word	0x1816030b
 800994c:	0b          	.byte	0x0b
 800994d:	00          	.byte	0x00
 800994e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009950:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8009952:	0723      	lsls	r3, r4, #28
 8009954:	d5bd      	bpl.n	80098d2 <_strtod_l+0x8e>
 8009956:	2380      	movs	r3, #128	; 0x80
 8009958:	061b      	lsls	r3, r3, #24
 800995a:	431f      	orrs	r7, r3
 800995c:	e7b9      	b.n	80098d2 <_strtod_l+0x8e>
 800995e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009960:	4a69      	ldr	r2, [pc, #420]	; (8009b08 <_strtod_l+0x2c4>)
 8009962:	496a      	ldr	r1, [pc, #424]	; (8009b0c <_strtod_l+0x2c8>)
 8009964:	401a      	ands	r2, r3
 8009966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009968:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800996a:	185b      	adds	r3, r3, r1
 800996c:	051b      	lsls	r3, r3, #20
 800996e:	431a      	orrs	r2, r3
 8009970:	0017      	movs	r7, r2
 8009972:	e7ee      	b.n	8009952 <_strtod_l+0x10e>
 8009974:	4f66      	ldr	r7, [pc, #408]	; (8009b10 <_strtod_l+0x2cc>)
 8009976:	e7ec      	b.n	8009952 <_strtod_l+0x10e>
 8009978:	2601      	movs	r6, #1
 800997a:	4f66      	ldr	r7, [pc, #408]	; (8009b14 <_strtod_l+0x2d0>)
 800997c:	4276      	negs	r6, r6
 800997e:	e7e8      	b.n	8009952 <_strtod_l+0x10e>
 8009980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	921f      	str	r2, [sp, #124]	; 0x7c
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	2b30      	cmp	r3, #48	; 0x30
 800998a:	d0f9      	beq.n	8009980 <_strtod_l+0x13c>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0a0      	beq.n	80098d2 <_strtod_l+0x8e>
 8009990:	2301      	movs	r3, #1
 8009992:	930a      	str	r3, [sp, #40]	; 0x28
 8009994:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009996:	220a      	movs	r2, #10
 8009998:	9310      	str	r3, [sp, #64]	; 0x40
 800999a:	2300      	movs	r3, #0
 800999c:	930f      	str	r3, [sp, #60]	; 0x3c
 800999e:	930b      	str	r3, [sp, #44]	; 0x2c
 80099a0:	9309      	str	r3, [sp, #36]	; 0x24
 80099a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80099a4:	7805      	ldrb	r5, [r0, #0]
 80099a6:	002b      	movs	r3, r5
 80099a8:	3b30      	subs	r3, #48	; 0x30
 80099aa:	b2d9      	uxtb	r1, r3
 80099ac:	2909      	cmp	r1, #9
 80099ae:	d927      	bls.n	8009a00 <_strtod_l+0x1bc>
 80099b0:	0022      	movs	r2, r4
 80099b2:	9907      	ldr	r1, [sp, #28]
 80099b4:	f003 fb5a 	bl	800d06c <strncmp>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d033      	beq.n	8009a24 <_strtod_l+0x1e0>
 80099bc:	2000      	movs	r0, #0
 80099be:	002b      	movs	r3, r5
 80099c0:	4684      	mov	ip, r0
 80099c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c4:	900c      	str	r0, [sp, #48]	; 0x30
 80099c6:	9206      	str	r2, [sp, #24]
 80099c8:	2220      	movs	r2, #32
 80099ca:	0019      	movs	r1, r3
 80099cc:	4391      	bics	r1, r2
 80099ce:	000a      	movs	r2, r1
 80099d0:	2100      	movs	r1, #0
 80099d2:	9107      	str	r1, [sp, #28]
 80099d4:	2a45      	cmp	r2, #69	; 0x45
 80099d6:	d000      	beq.n	80099da <_strtod_l+0x196>
 80099d8:	e0c5      	b.n	8009b66 <_strtod_l+0x322>
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099de:	4303      	orrs	r3, r0
 80099e0:	4313      	orrs	r3, r2
 80099e2:	428b      	cmp	r3, r1
 80099e4:	d094      	beq.n	8009910 <_strtod_l+0xcc>
 80099e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	3301      	adds	r3, #1
 80099ec:	931f      	str	r3, [sp, #124]	; 0x7c
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b2b      	cmp	r3, #43	; 0x2b
 80099f4:	d076      	beq.n	8009ae4 <_strtod_l+0x2a0>
 80099f6:	000c      	movs	r4, r1
 80099f8:	2b2d      	cmp	r3, #45	; 0x2d
 80099fa:	d179      	bne.n	8009af0 <_strtod_l+0x2ac>
 80099fc:	2401      	movs	r4, #1
 80099fe:	e072      	b.n	8009ae6 <_strtod_l+0x2a2>
 8009a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a02:	2908      	cmp	r1, #8
 8009a04:	dc09      	bgt.n	8009a1a <_strtod_l+0x1d6>
 8009a06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a08:	4351      	muls	r1, r2
 8009a0a:	185b      	adds	r3, r3, r1
 8009a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	3001      	adds	r0, #1
 8009a12:	3301      	adds	r3, #1
 8009a14:	9309      	str	r3, [sp, #36]	; 0x24
 8009a16:	901f      	str	r0, [sp, #124]	; 0x7c
 8009a18:	e7c3      	b.n	80099a2 <_strtod_l+0x15e>
 8009a1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a1c:	4351      	muls	r1, r2
 8009a1e:	185b      	adds	r3, r3, r1
 8009a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a22:	e7f4      	b.n	8009a0e <_strtod_l+0x1ca>
 8009a24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a28:	191c      	adds	r4, r3, r4
 8009a2a:	941f      	str	r4, [sp, #124]	; 0x7c
 8009a2c:	7823      	ldrb	r3, [r4, #0]
 8009a2e:	2a00      	cmp	r2, #0
 8009a30:	d039      	beq.n	8009aa6 <_strtod_l+0x262>
 8009a32:	900c      	str	r0, [sp, #48]	; 0x30
 8009a34:	9206      	str	r2, [sp, #24]
 8009a36:	001a      	movs	r2, r3
 8009a38:	3a30      	subs	r2, #48	; 0x30
 8009a3a:	2a09      	cmp	r2, #9
 8009a3c:	d912      	bls.n	8009a64 <_strtod_l+0x220>
 8009a3e:	2201      	movs	r2, #1
 8009a40:	4694      	mov	ip, r2
 8009a42:	e7c1      	b.n	80099c8 <_strtod_l+0x184>
 8009a44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a46:	3001      	adds	r0, #1
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	921f      	str	r2, [sp, #124]	; 0x7c
 8009a4c:	785b      	ldrb	r3, [r3, #1]
 8009a4e:	2b30      	cmp	r3, #48	; 0x30
 8009a50:	d0f8      	beq.n	8009a44 <_strtod_l+0x200>
 8009a52:	001a      	movs	r2, r3
 8009a54:	3a31      	subs	r2, #49	; 0x31
 8009a56:	2a08      	cmp	r2, #8
 8009a58:	d83f      	bhi.n	8009ada <_strtod_l+0x296>
 8009a5a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009a60:	9006      	str	r0, [sp, #24]
 8009a62:	9210      	str	r2, [sp, #64]	; 0x40
 8009a64:	001a      	movs	r2, r3
 8009a66:	1c41      	adds	r1, r0, #1
 8009a68:	3a30      	subs	r2, #48	; 0x30
 8009a6a:	2b30      	cmp	r3, #48	; 0x30
 8009a6c:	d015      	beq.n	8009a9a <_strtod_l+0x256>
 8009a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a70:	185b      	adds	r3, r3, r1
 8009a72:	210a      	movs	r1, #10
 8009a74:	930c      	str	r3, [sp, #48]	; 0x30
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	18c4      	adds	r4, r0, r3
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	d115      	bne.n	8009aaa <_strtod_l+0x266>
 8009a7e:	9906      	ldr	r1, [sp, #24]
 8009a80:	9b06      	ldr	r3, [sp, #24]
 8009a82:	3101      	adds	r1, #1
 8009a84:	1809      	adds	r1, r1, r0
 8009a86:	181b      	adds	r3, r3, r0
 8009a88:	9106      	str	r1, [sp, #24]
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	dc1b      	bgt.n	8009ac6 <_strtod_l+0x282>
 8009a8e:	230a      	movs	r3, #10
 8009a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a92:	434b      	muls	r3, r1
 8009a94:	2100      	movs	r1, #0
 8009a96:	18d3      	adds	r3, r2, r3
 8009a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a9c:	0008      	movs	r0, r1
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	921f      	str	r2, [sp, #124]	; 0x7c
 8009aa2:	785b      	ldrb	r3, [r3, #1]
 8009aa4:	e7c7      	b.n	8009a36 <_strtod_l+0x1f2>
 8009aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa8:	e7d1      	b.n	8009a4e <_strtod_l+0x20a>
 8009aaa:	2b08      	cmp	r3, #8
 8009aac:	dc04      	bgt.n	8009ab8 <_strtod_l+0x274>
 8009aae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009ab0:	434d      	muls	r5, r1
 8009ab2:	950b      	str	r5, [sp, #44]	; 0x2c
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	e7e0      	b.n	8009a7a <_strtod_l+0x236>
 8009ab8:	1c5d      	adds	r5, r3, #1
 8009aba:	2d10      	cmp	r5, #16
 8009abc:	dcfa      	bgt.n	8009ab4 <_strtod_l+0x270>
 8009abe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ac0:	434d      	muls	r5, r1
 8009ac2:	950f      	str	r5, [sp, #60]	; 0x3c
 8009ac4:	e7f6      	b.n	8009ab4 <_strtod_l+0x270>
 8009ac6:	9b06      	ldr	r3, [sp, #24]
 8009ac8:	2100      	movs	r1, #0
 8009aca:	2b10      	cmp	r3, #16
 8009acc:	dce5      	bgt.n	8009a9a <_strtod_l+0x256>
 8009ace:	230a      	movs	r3, #10
 8009ad0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009ad2:	4343      	muls	r3, r0
 8009ad4:	18d3      	adds	r3, r2, r3
 8009ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ad8:	e7df      	b.n	8009a9a <_strtod_l+0x256>
 8009ada:	2200      	movs	r2, #0
 8009adc:	920c      	str	r2, [sp, #48]	; 0x30
 8009ade:	9206      	str	r2, [sp, #24]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	e7ad      	b.n	8009a40 <_strtod_l+0x1fc>
 8009ae4:	2400      	movs	r4, #0
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	3302      	adds	r3, #2
 8009aea:	931f      	str	r3, [sp, #124]	; 0x7c
 8009aec:	9b08      	ldr	r3, [sp, #32]
 8009aee:	789b      	ldrb	r3, [r3, #2]
 8009af0:	001a      	movs	r2, r3
 8009af2:	3a30      	subs	r2, #48	; 0x30
 8009af4:	2a09      	cmp	r2, #9
 8009af6:	d913      	bls.n	8009b20 <_strtod_l+0x2dc>
 8009af8:	9a08      	ldr	r2, [sp, #32]
 8009afa:	921f      	str	r2, [sp, #124]	; 0x7c
 8009afc:	2200      	movs	r2, #0
 8009afe:	e031      	b.n	8009b64 <_strtod_l+0x320>
 8009b00:	0800e278 	.word	0x0800e278
 8009b04:	0800e02c 	.word	0x0800e02c
 8009b08:	ffefffff 	.word	0xffefffff
 8009b0c:	00000433 	.word	0x00000433
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	7fffffff 	.word	0x7fffffff
 8009b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b30      	cmp	r3, #48	; 0x30
 8009b22:	d0f9      	beq.n	8009b18 <_strtod_l+0x2d4>
 8009b24:	2200      	movs	r2, #0
 8009b26:	9207      	str	r2, [sp, #28]
 8009b28:	001a      	movs	r2, r3
 8009b2a:	3a31      	subs	r2, #49	; 0x31
 8009b2c:	2a08      	cmp	r2, #8
 8009b2e:	d81a      	bhi.n	8009b66 <_strtod_l+0x322>
 8009b30:	3b30      	subs	r3, #48	; 0x30
 8009b32:	001a      	movs	r2, r3
 8009b34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	911f      	str	r1, [sp, #124]	; 0x7c
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	001d      	movs	r5, r3
 8009b42:	3d30      	subs	r5, #48	; 0x30
 8009b44:	2d09      	cmp	r5, #9
 8009b46:	d939      	bls.n	8009bbc <_strtod_l+0x378>
 8009b48:	9d07      	ldr	r5, [sp, #28]
 8009b4a:	1b49      	subs	r1, r1, r5
 8009b4c:	4db0      	ldr	r5, [pc, #704]	; (8009e10 <_strtod_l+0x5cc>)
 8009b4e:	9507      	str	r5, [sp, #28]
 8009b50:	2908      	cmp	r1, #8
 8009b52:	dc03      	bgt.n	8009b5c <_strtod_l+0x318>
 8009b54:	9207      	str	r2, [sp, #28]
 8009b56:	42aa      	cmp	r2, r5
 8009b58:	dd00      	ble.n	8009b5c <_strtod_l+0x318>
 8009b5a:	9507      	str	r5, [sp, #28]
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	d002      	beq.n	8009b66 <_strtod_l+0x322>
 8009b60:	9a07      	ldr	r2, [sp, #28]
 8009b62:	4252      	negs	r2, r2
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	9a06      	ldr	r2, [sp, #24]
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	d14b      	bne.n	8009c04 <_strtod_l+0x3c0>
 8009b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b6e:	4310      	orrs	r0, r2
 8009b70:	d000      	beq.n	8009b74 <_strtod_l+0x330>
 8009b72:	e6ae      	b.n	80098d2 <_strtod_l+0x8e>
 8009b74:	4662      	mov	r2, ip
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	d000      	beq.n	8009b7c <_strtod_l+0x338>
 8009b7a:	e6c9      	b.n	8009910 <_strtod_l+0xcc>
 8009b7c:	2b69      	cmp	r3, #105	; 0x69
 8009b7e:	d025      	beq.n	8009bcc <_strtod_l+0x388>
 8009b80:	dc21      	bgt.n	8009bc6 <_strtod_l+0x382>
 8009b82:	2b49      	cmp	r3, #73	; 0x49
 8009b84:	d022      	beq.n	8009bcc <_strtod_l+0x388>
 8009b86:	2b4e      	cmp	r3, #78	; 0x4e
 8009b88:	d000      	beq.n	8009b8c <_strtod_l+0x348>
 8009b8a:	e6c1      	b.n	8009910 <_strtod_l+0xcc>
 8009b8c:	49a1      	ldr	r1, [pc, #644]	; (8009e14 <_strtod_l+0x5d0>)
 8009b8e:	a81f      	add	r0, sp, #124	; 0x7c
 8009b90:	f001 fe8a 	bl	800b8a8 <__match>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d100      	bne.n	8009b9a <_strtod_l+0x356>
 8009b98:	e6ba      	b.n	8009910 <_strtod_l+0xcc>
 8009b9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b28      	cmp	r3, #40	; 0x28
 8009ba0:	d12a      	bne.n	8009bf8 <_strtod_l+0x3b4>
 8009ba2:	499d      	ldr	r1, [pc, #628]	; (8009e18 <_strtod_l+0x5d4>)
 8009ba4:	aa22      	add	r2, sp, #136	; 0x88
 8009ba6:	a81f      	add	r0, sp, #124	; 0x7c
 8009ba8:	f001 fe92 	bl	800b8d0 <__hexnan>
 8009bac:	2805      	cmp	r0, #5
 8009bae:	d123      	bne.n	8009bf8 <_strtod_l+0x3b4>
 8009bb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bb2:	4a9a      	ldr	r2, [pc, #616]	; (8009e1c <_strtod_l+0x5d8>)
 8009bb4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	0017      	movs	r7, r2
 8009bba:	e68a      	b.n	80098d2 <_strtod_l+0x8e>
 8009bbc:	210a      	movs	r1, #10
 8009bbe:	434a      	muls	r2, r1
 8009bc0:	18d2      	adds	r2, r2, r3
 8009bc2:	3a30      	subs	r2, #48	; 0x30
 8009bc4:	e7b8      	b.n	8009b38 <_strtod_l+0x2f4>
 8009bc6:	2b6e      	cmp	r3, #110	; 0x6e
 8009bc8:	d0e0      	beq.n	8009b8c <_strtod_l+0x348>
 8009bca:	e6a1      	b.n	8009910 <_strtod_l+0xcc>
 8009bcc:	4994      	ldr	r1, [pc, #592]	; (8009e20 <_strtod_l+0x5dc>)
 8009bce:	a81f      	add	r0, sp, #124	; 0x7c
 8009bd0:	f001 fe6a 	bl	800b8a8 <__match>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d100      	bne.n	8009bda <_strtod_l+0x396>
 8009bd8:	e69a      	b.n	8009910 <_strtod_l+0xcc>
 8009bda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bdc:	4991      	ldr	r1, [pc, #580]	; (8009e24 <_strtod_l+0x5e0>)
 8009bde:	3b01      	subs	r3, #1
 8009be0:	a81f      	add	r0, sp, #124	; 0x7c
 8009be2:	931f      	str	r3, [sp, #124]	; 0x7c
 8009be4:	f001 fe60 	bl	800b8a8 <__match>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d102      	bne.n	8009bf2 <_strtod_l+0x3ae>
 8009bec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bee:	3301      	adds	r3, #1
 8009bf0:	931f      	str	r3, [sp, #124]	; 0x7c
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	4f89      	ldr	r7, [pc, #548]	; (8009e1c <_strtod_l+0x5d8>)
 8009bf6:	e66c      	b.n	80098d2 <_strtod_l+0x8e>
 8009bf8:	488b      	ldr	r0, [pc, #556]	; (8009e28 <_strtod_l+0x5e4>)
 8009bfa:	f003 f9e3 	bl	800cfc4 <nan>
 8009bfe:	0006      	movs	r6, r0
 8009c00:	000f      	movs	r7, r1
 8009c02:	e666      	b.n	80098d2 <_strtod_l+0x8e>
 8009c04:	9b07      	ldr	r3, [sp, #28]
 8009c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <_strtod_l+0x3d2>
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	9309      	str	r3, [sp, #36]	; 0x24
 8009c16:	9c06      	ldr	r4, [sp, #24]
 8009c18:	2c10      	cmp	r4, #16
 8009c1a:	dd00      	ble.n	8009c1e <_strtod_l+0x3da>
 8009c1c:	2410      	movs	r4, #16
 8009c1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c20:	f7f8 fa7c 	bl	800211c <__aeabi_ui2d>
 8009c24:	9b06      	ldr	r3, [sp, #24]
 8009c26:	0006      	movs	r6, r0
 8009c28:	000f      	movs	r7, r1
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	dd15      	ble.n	8009c5a <_strtod_l+0x416>
 8009c2e:	0022      	movs	r2, r4
 8009c30:	4b7e      	ldr	r3, [pc, #504]	; (8009e2c <_strtod_l+0x5e8>)
 8009c32:	3a09      	subs	r2, #9
 8009c34:	00d2      	lsls	r2, r2, #3
 8009c36:	189b      	adds	r3, r3, r2
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f7f7 fbec 	bl	8001418 <__aeabi_dmul>
 8009c40:	0006      	movs	r6, r0
 8009c42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009c44:	000f      	movs	r7, r1
 8009c46:	f7f8 fa69 	bl	800211c <__aeabi_ui2d>
 8009c4a:	0002      	movs	r2, r0
 8009c4c:	000b      	movs	r3, r1
 8009c4e:	0030      	movs	r0, r6
 8009c50:	0039      	movs	r1, r7
 8009c52:	f7f6 fca3 	bl	800059c <__aeabi_dadd>
 8009c56:	0006      	movs	r6, r0
 8009c58:	000f      	movs	r7, r1
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	2b0f      	cmp	r3, #15
 8009c5e:	dc39      	bgt.n	8009cd4 <_strtod_l+0x490>
 8009c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d100      	bne.n	8009c68 <_strtod_l+0x424>
 8009c66:	e634      	b.n	80098d2 <_strtod_l+0x8e>
 8009c68:	dd24      	ble.n	8009cb4 <_strtod_l+0x470>
 8009c6a:	2b16      	cmp	r3, #22
 8009c6c:	dc09      	bgt.n	8009c82 <_strtod_l+0x43e>
 8009c6e:	496f      	ldr	r1, [pc, #444]	; (8009e2c <_strtod_l+0x5e8>)
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	18c9      	adds	r1, r1, r3
 8009c74:	0032      	movs	r2, r6
 8009c76:	6808      	ldr	r0, [r1, #0]
 8009c78:	6849      	ldr	r1, [r1, #4]
 8009c7a:	003b      	movs	r3, r7
 8009c7c:	f7f7 fbcc 	bl	8001418 <__aeabi_dmul>
 8009c80:	e7bd      	b.n	8009bfe <_strtod_l+0x3ba>
 8009c82:	2325      	movs	r3, #37	; 0x25
 8009c84:	9a06      	ldr	r2, [sp, #24]
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	db22      	blt.n	8009cd4 <_strtod_l+0x490>
 8009c8e:	240f      	movs	r4, #15
 8009c90:	9b06      	ldr	r3, [sp, #24]
 8009c92:	4d66      	ldr	r5, [pc, #408]	; (8009e2c <_strtod_l+0x5e8>)
 8009c94:	1ae4      	subs	r4, r4, r3
 8009c96:	00e1      	lsls	r1, r4, #3
 8009c98:	1869      	adds	r1, r5, r1
 8009c9a:	0032      	movs	r2, r6
 8009c9c:	6808      	ldr	r0, [r1, #0]
 8009c9e:	6849      	ldr	r1, [r1, #4]
 8009ca0:	003b      	movs	r3, r7
 8009ca2:	f7f7 fbb9 	bl	8001418 <__aeabi_dmul>
 8009ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca8:	1b1c      	subs	r4, r3, r4
 8009caa:	00e4      	lsls	r4, r4, #3
 8009cac:	192c      	adds	r4, r5, r4
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	6863      	ldr	r3, [r4, #4]
 8009cb2:	e7e3      	b.n	8009c7c <_strtod_l+0x438>
 8009cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb6:	3316      	adds	r3, #22
 8009cb8:	db0c      	blt.n	8009cd4 <_strtod_l+0x490>
 8009cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	0030      	movs	r0, r6
 8009cc0:	1a9a      	subs	r2, r3, r2
 8009cc2:	4b5a      	ldr	r3, [pc, #360]	; (8009e2c <_strtod_l+0x5e8>)
 8009cc4:	00d2      	lsls	r2, r2, #3
 8009cc6:	189b      	adds	r3, r3, r2
 8009cc8:	0039      	movs	r1, r7
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f7f6 ffa1 	bl	8000c14 <__aeabi_ddiv>
 8009cd2:	e794      	b.n	8009bfe <_strtod_l+0x3ba>
 8009cd4:	9b06      	ldr	r3, [sp, #24]
 8009cd6:	1b1c      	subs	r4, r3, r4
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cda:	18e4      	adds	r4, r4, r3
 8009cdc:	2c00      	cmp	r4, #0
 8009cde:	dd72      	ble.n	8009dc6 <_strtod_l+0x582>
 8009ce0:	230f      	movs	r3, #15
 8009ce2:	0021      	movs	r1, r4
 8009ce4:	4019      	ands	r1, r3
 8009ce6:	421c      	tst	r4, r3
 8009ce8:	d00a      	beq.n	8009d00 <_strtod_l+0x4bc>
 8009cea:	00cb      	lsls	r3, r1, #3
 8009cec:	494f      	ldr	r1, [pc, #316]	; (8009e2c <_strtod_l+0x5e8>)
 8009cee:	0032      	movs	r2, r6
 8009cf0:	18c9      	adds	r1, r1, r3
 8009cf2:	6808      	ldr	r0, [r1, #0]
 8009cf4:	6849      	ldr	r1, [r1, #4]
 8009cf6:	003b      	movs	r3, r7
 8009cf8:	f7f7 fb8e 	bl	8001418 <__aeabi_dmul>
 8009cfc:	0006      	movs	r6, r0
 8009cfe:	000f      	movs	r7, r1
 8009d00:	230f      	movs	r3, #15
 8009d02:	439c      	bics	r4, r3
 8009d04:	d04a      	beq.n	8009d9c <_strtod_l+0x558>
 8009d06:	3326      	adds	r3, #38	; 0x26
 8009d08:	33ff      	adds	r3, #255	; 0xff
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	dd22      	ble.n	8009d54 <_strtod_l+0x510>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9306      	str	r3, [sp, #24]
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	2322      	movs	r3, #34	; 0x22
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	9a05      	ldr	r2, [sp, #20]
 8009d1e:	4f3f      	ldr	r7, [pc, #252]	; (8009e1c <_strtod_l+0x5d8>)
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d24:	42b3      	cmp	r3, r6
 8009d26:	d100      	bne.n	8009d2a <_strtod_l+0x4e6>
 8009d28:	e5d3      	b.n	80098d2 <_strtod_l+0x8e>
 8009d2a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	f001 ff03 	bl	800bb38 <_Bfree>
 8009d32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d34:	9805      	ldr	r0, [sp, #20]
 8009d36:	f001 feff 	bl	800bb38 <_Bfree>
 8009d3a:	9907      	ldr	r1, [sp, #28]
 8009d3c:	9805      	ldr	r0, [sp, #20]
 8009d3e:	f001 fefb 	bl	800bb38 <_Bfree>
 8009d42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d44:	9805      	ldr	r0, [sp, #20]
 8009d46:	f001 fef7 	bl	800bb38 <_Bfree>
 8009d4a:	9906      	ldr	r1, [sp, #24]
 8009d4c:	9805      	ldr	r0, [sp, #20]
 8009d4e:	f001 fef3 	bl	800bb38 <_Bfree>
 8009d52:	e5be      	b.n	80098d2 <_strtod_l+0x8e>
 8009d54:	2300      	movs	r3, #0
 8009d56:	0030      	movs	r0, r6
 8009d58:	0039      	movs	r1, r7
 8009d5a:	4d35      	ldr	r5, [pc, #212]	; (8009e30 <_strtod_l+0x5ec>)
 8009d5c:	1124      	asrs	r4, r4, #4
 8009d5e:	9308      	str	r3, [sp, #32]
 8009d60:	2c01      	cmp	r4, #1
 8009d62:	dc1e      	bgt.n	8009da2 <_strtod_l+0x55e>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <_strtod_l+0x528>
 8009d68:	0006      	movs	r6, r0
 8009d6a:	000f      	movs	r7, r1
 8009d6c:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <_strtod_l+0x5f0>)
 8009d6e:	0032      	movs	r2, r6
 8009d70:	18ff      	adds	r7, r7, r3
 8009d72:	9b08      	ldr	r3, [sp, #32]
 8009d74:	00dd      	lsls	r5, r3, #3
 8009d76:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <_strtod_l+0x5ec>)
 8009d78:	195d      	adds	r5, r3, r5
 8009d7a:	6828      	ldr	r0, [r5, #0]
 8009d7c:	6869      	ldr	r1, [r5, #4]
 8009d7e:	003b      	movs	r3, r7
 8009d80:	f7f7 fb4a 	bl	8001418 <__aeabi_dmul>
 8009d84:	4b25      	ldr	r3, [pc, #148]	; (8009e1c <_strtod_l+0x5d8>)
 8009d86:	4a2c      	ldr	r2, [pc, #176]	; (8009e38 <_strtod_l+0x5f4>)
 8009d88:	0006      	movs	r6, r0
 8009d8a:	400b      	ands	r3, r1
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d8be      	bhi.n	8009d0e <_strtod_l+0x4ca>
 8009d90:	4a2a      	ldr	r2, [pc, #168]	; (8009e3c <_strtod_l+0x5f8>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d913      	bls.n	8009dbe <_strtod_l+0x57a>
 8009d96:	2601      	movs	r6, #1
 8009d98:	4f29      	ldr	r7, [pc, #164]	; (8009e40 <_strtod_l+0x5fc>)
 8009d9a:	4276      	negs	r6, r6
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9308      	str	r3, [sp, #32]
 8009da0:	e087      	b.n	8009eb2 <_strtod_l+0x66e>
 8009da2:	2201      	movs	r2, #1
 8009da4:	4214      	tst	r4, r2
 8009da6:	d004      	beq.n	8009db2 <_strtod_l+0x56e>
 8009da8:	682a      	ldr	r2, [r5, #0]
 8009daa:	686b      	ldr	r3, [r5, #4]
 8009dac:	f7f7 fb34 	bl	8001418 <__aeabi_dmul>
 8009db0:	2301      	movs	r3, #1
 8009db2:	9a08      	ldr	r2, [sp, #32]
 8009db4:	1064      	asrs	r4, r4, #1
 8009db6:	3201      	adds	r2, #1
 8009db8:	9208      	str	r2, [sp, #32]
 8009dba:	3508      	adds	r5, #8
 8009dbc:	e7d0      	b.n	8009d60 <_strtod_l+0x51c>
 8009dbe:	23d4      	movs	r3, #212	; 0xd4
 8009dc0:	049b      	lsls	r3, r3, #18
 8009dc2:	18cf      	adds	r7, r1, r3
 8009dc4:	e7ea      	b.n	8009d9c <_strtod_l+0x558>
 8009dc6:	2c00      	cmp	r4, #0
 8009dc8:	d0e8      	beq.n	8009d9c <_strtod_l+0x558>
 8009dca:	4264      	negs	r4, r4
 8009dcc:	220f      	movs	r2, #15
 8009dce:	0023      	movs	r3, r4
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	4214      	tst	r4, r2
 8009dd4:	d00a      	beq.n	8009dec <_strtod_l+0x5a8>
 8009dd6:	00da      	lsls	r2, r3, #3
 8009dd8:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <_strtod_l+0x5e8>)
 8009dda:	0030      	movs	r0, r6
 8009ddc:	189b      	adds	r3, r3, r2
 8009dde:	0039      	movs	r1, r7
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f7f6 ff16 	bl	8000c14 <__aeabi_ddiv>
 8009de8:	0006      	movs	r6, r0
 8009dea:	000f      	movs	r7, r1
 8009dec:	1124      	asrs	r4, r4, #4
 8009dee:	d0d5      	beq.n	8009d9c <_strtod_l+0x558>
 8009df0:	2c1f      	cmp	r4, #31
 8009df2:	dd27      	ble.n	8009e44 <_strtod_l+0x600>
 8009df4:	2300      	movs	r3, #0
 8009df6:	9306      	str	r3, [sp, #24]
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfe:	2322      	movs	r3, #34	; 0x22
 8009e00:	9a05      	ldr	r2, [sp, #20]
 8009e02:	2600      	movs	r6, #0
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e08:	2700      	movs	r7, #0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d18d      	bne.n	8009d2a <_strtod_l+0x4e6>
 8009e0e:	e560      	b.n	80098d2 <_strtod_l+0x8e>
 8009e10:	00004e1f 	.word	0x00004e1f
 8009e14:	0800e001 	.word	0x0800e001
 8009e18:	0800e040 	.word	0x0800e040
 8009e1c:	7ff00000 	.word	0x7ff00000
 8009e20:	0800dff9 	.word	0x0800dff9
 8009e24:	0800e184 	.word	0x0800e184
 8009e28:	0800e44b 	.word	0x0800e44b
 8009e2c:	0800e310 	.word	0x0800e310
 8009e30:	0800e2e8 	.word	0x0800e2e8
 8009e34:	fcb00000 	.word	0xfcb00000
 8009e38:	7ca00000 	.word	0x7ca00000
 8009e3c:	7c900000 	.word	0x7c900000
 8009e40:	7fefffff 	.word	0x7fefffff
 8009e44:	2310      	movs	r3, #16
 8009e46:	0022      	movs	r2, r4
 8009e48:	401a      	ands	r2, r3
 8009e4a:	9208      	str	r2, [sp, #32]
 8009e4c:	421c      	tst	r4, r3
 8009e4e:	d001      	beq.n	8009e54 <_strtod_l+0x610>
 8009e50:	335a      	adds	r3, #90	; 0x5a
 8009e52:	9308      	str	r3, [sp, #32]
 8009e54:	0030      	movs	r0, r6
 8009e56:	0039      	movs	r1, r7
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4dc5      	ldr	r5, [pc, #788]	; (800a170 <_strtod_l+0x92c>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	4214      	tst	r4, r2
 8009e60:	d004      	beq.n	8009e6c <_strtod_l+0x628>
 8009e62:	682a      	ldr	r2, [r5, #0]
 8009e64:	686b      	ldr	r3, [r5, #4]
 8009e66:	f7f7 fad7 	bl	8001418 <__aeabi_dmul>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	1064      	asrs	r4, r4, #1
 8009e6e:	3508      	adds	r5, #8
 8009e70:	2c00      	cmp	r4, #0
 8009e72:	d1f3      	bne.n	8009e5c <_strtod_l+0x618>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <_strtod_l+0x638>
 8009e78:	0006      	movs	r6, r0
 8009e7a:	000f      	movs	r7, r1
 8009e7c:	9b08      	ldr	r3, [sp, #32]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00f      	beq.n	8009ea2 <_strtod_l+0x65e>
 8009e82:	236b      	movs	r3, #107	; 0x6b
 8009e84:	007a      	lsls	r2, r7, #1
 8009e86:	0d52      	lsrs	r2, r2, #21
 8009e88:	0039      	movs	r1, r7
 8009e8a:	1a9b      	subs	r3, r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dd08      	ble.n	8009ea2 <_strtod_l+0x65e>
 8009e90:	2b1f      	cmp	r3, #31
 8009e92:	dc00      	bgt.n	8009e96 <_strtod_l+0x652>
 8009e94:	e124      	b.n	800a0e0 <_strtod_l+0x89c>
 8009e96:	2600      	movs	r6, #0
 8009e98:	2b34      	cmp	r3, #52	; 0x34
 8009e9a:	dc00      	bgt.n	8009e9e <_strtod_l+0x65a>
 8009e9c:	e119      	b.n	800a0d2 <_strtod_l+0x88e>
 8009e9e:	27dc      	movs	r7, #220	; 0xdc
 8009ea0:	04bf      	lsls	r7, r7, #18
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	0030      	movs	r0, r6
 8009ea8:	0039      	movs	r1, r7
 8009eaa:	f7f6 fad9 	bl	8000460 <__aeabi_dcmpeq>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d1a0      	bne.n	8009df4 <_strtod_l+0x5b0>
 8009eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009eba:	9b06      	ldr	r3, [sp, #24]
 8009ebc:	9805      	ldr	r0, [sp, #20]
 8009ebe:	f001 fea3 	bl	800bc08 <__s2b>
 8009ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d100      	bne.n	8009eca <_strtod_l+0x686>
 8009ec8:	e721      	b.n	8009d0e <_strtod_l+0x4ca>
 8009eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ecc:	9907      	ldr	r1, [sp, #28]
 8009ece:	17da      	asrs	r2, r3, #31
 8009ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ed2:	1a5b      	subs	r3, r3, r1
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed8:	9215      	str	r2, [sp, #84]	; 0x54
 8009eda:	43db      	mvns	r3, r3
 8009edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ede:	17db      	asrs	r3, r3, #31
 8009ee0:	401a      	ands	r2, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	921a      	str	r2, [sp, #104]	; 0x68
 8009ee6:	9306      	str	r3, [sp, #24]
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eec:	9805      	ldr	r0, [sp, #20]
 8009eee:	6859      	ldr	r1, [r3, #4]
 8009ef0:	f001 fdde 	bl	800bab0 <_Balloc>
 8009ef4:	9009      	str	r0, [sp, #36]	; 0x24
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d100      	bne.n	8009efc <_strtod_l+0x6b8>
 8009efa:	e70d      	b.n	8009d18 <_strtod_l+0x4d4>
 8009efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009efe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	310c      	adds	r1, #12
 8009f04:	1c9a      	adds	r2, r3, #2
 8009f06:	0092      	lsls	r2, r2, #2
 8009f08:	300c      	adds	r0, #12
 8009f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f0c:	f001 fdc7 	bl	800ba9e <memcpy>
 8009f10:	ab22      	add	r3, sp, #136	; 0x88
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	ab21      	add	r3, sp, #132	; 0x84
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	0032      	movs	r2, r6
 8009f1a:	003b      	movs	r3, r7
 8009f1c:	9805      	ldr	r0, [sp, #20]
 8009f1e:	9612      	str	r6, [sp, #72]	; 0x48
 8009f20:	9713      	str	r7, [sp, #76]	; 0x4c
 8009f22:	f002 f9bd 	bl	800c2a0 <__d2b>
 8009f26:	9020      	str	r0, [sp, #128]	; 0x80
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d100      	bne.n	8009f2e <_strtod_l+0x6ea>
 8009f2c:	e6f4      	b.n	8009d18 <_strtod_l+0x4d4>
 8009f2e:	2101      	movs	r1, #1
 8009f30:	9805      	ldr	r0, [sp, #20]
 8009f32:	f001 fefd 	bl	800bd30 <__i2b>
 8009f36:	9007      	str	r0, [sp, #28]
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d100      	bne.n	8009f3e <_strtod_l+0x6fa>
 8009f3c:	e6ec      	b.n	8009d18 <_strtod_l+0x4d4>
 8009f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f42:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009f44:	1ad4      	subs	r4, r2, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	db01      	blt.n	8009f4e <_strtod_l+0x70a>
 8009f4a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009f4c:	195d      	adds	r5, r3, r5
 8009f4e:	9908      	ldr	r1, [sp, #32]
 8009f50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f52:	1a5b      	subs	r3, r3, r1
 8009f54:	2136      	movs	r1, #54	; 0x36
 8009f56:	189b      	adds	r3, r3, r2
 8009f58:	1a8a      	subs	r2, r1, r2
 8009f5a:	4986      	ldr	r1, [pc, #536]	; (800a174 <_strtod_l+0x930>)
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	468c      	mov	ip, r1
 8009f60:	2100      	movs	r1, #0
 8009f62:	3b01      	subs	r3, #1
 8009f64:	9110      	str	r1, [sp, #64]	; 0x40
 8009f66:	9014      	str	r0, [sp, #80]	; 0x50
 8009f68:	4563      	cmp	r3, ip
 8009f6a:	da07      	bge.n	8009f7c <_strtod_l+0x738>
 8009f6c:	4661      	mov	r1, ip
 8009f6e:	1ac9      	subs	r1, r1, r3
 8009f70:	1a52      	subs	r2, r2, r1
 8009f72:	291f      	cmp	r1, #31
 8009f74:	dd00      	ble.n	8009f78 <_strtod_l+0x734>
 8009f76:	e0b8      	b.n	800a0ea <_strtod_l+0x8a6>
 8009f78:	4088      	lsls	r0, r1
 8009f7a:	9014      	str	r0, [sp, #80]	; 0x50
 8009f7c:	18ab      	adds	r3, r5, r2
 8009f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f80:	18a4      	adds	r4, r4, r2
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f86:	191c      	adds	r4, r3, r4
 8009f88:	002b      	movs	r3, r5
 8009f8a:	4295      	cmp	r5, r2
 8009f8c:	dd00      	ble.n	8009f90 <_strtod_l+0x74c>
 8009f8e:	0013      	movs	r3, r2
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	dd00      	ble.n	8009f96 <_strtod_l+0x752>
 8009f94:	0023      	movs	r3, r4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dd04      	ble.n	8009fa4 <_strtod_l+0x760>
 8009f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f9c:	1ae4      	subs	r4, r4, r3
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	920c      	str	r2, [sp, #48]	; 0x30
 8009fa2:	1aed      	subs	r5, r5, r3
 8009fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	dd17      	ble.n	8009fda <_strtod_l+0x796>
 8009faa:	001a      	movs	r2, r3
 8009fac:	9907      	ldr	r1, [sp, #28]
 8009fae:	9805      	ldr	r0, [sp, #20]
 8009fb0:	f001 ff84 	bl	800bebc <__pow5mult>
 8009fb4:	9007      	str	r0, [sp, #28]
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d100      	bne.n	8009fbc <_strtod_l+0x778>
 8009fba:	e6ad      	b.n	8009d18 <_strtod_l+0x4d4>
 8009fbc:	0001      	movs	r1, r0
 8009fbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fc0:	9805      	ldr	r0, [sp, #20]
 8009fc2:	f001 fecb 	bl	800bd5c <__multiply>
 8009fc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d100      	bne.n	8009fce <_strtod_l+0x78a>
 8009fcc:	e6a4      	b.n	8009d18 <_strtod_l+0x4d4>
 8009fce:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009fd0:	9805      	ldr	r0, [sp, #20]
 8009fd2:	f001 fdb1 	bl	800bb38 <_Bfree>
 8009fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd8:	9320      	str	r3, [sp, #128]	; 0x80
 8009fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dd00      	ble.n	8009fe2 <_strtod_l+0x79e>
 8009fe0:	e089      	b.n	800a0f6 <_strtod_l+0x8b2>
 8009fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd08      	ble.n	8009ffa <_strtod_l+0x7b6>
 8009fe8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fec:	9805      	ldr	r0, [sp, #20]
 8009fee:	f001 ff65 	bl	800bebc <__pow5mult>
 8009ff2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d100      	bne.n	8009ffa <_strtod_l+0x7b6>
 8009ff8:	e68e      	b.n	8009d18 <_strtod_l+0x4d4>
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	dd08      	ble.n	800a010 <_strtod_l+0x7cc>
 8009ffe:	0022      	movs	r2, r4
 800a000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	f001 ffb6 	bl	800bf74 <__lshift>
 800a008:	9009      	str	r0, [sp, #36]	; 0x24
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d100      	bne.n	800a010 <_strtod_l+0x7cc>
 800a00e:	e683      	b.n	8009d18 <_strtod_l+0x4d4>
 800a010:	2d00      	cmp	r5, #0
 800a012:	dd08      	ble.n	800a026 <_strtod_l+0x7e2>
 800a014:	002a      	movs	r2, r5
 800a016:	9907      	ldr	r1, [sp, #28]
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	f001 ffab 	bl	800bf74 <__lshift>
 800a01e:	9007      	str	r0, [sp, #28]
 800a020:	2800      	cmp	r0, #0
 800a022:	d100      	bne.n	800a026 <_strtod_l+0x7e2>
 800a024:	e678      	b.n	8009d18 <_strtod_l+0x4d4>
 800a026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a028:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a02a:	9805      	ldr	r0, [sp, #20]
 800a02c:	f002 f82c 	bl	800c088 <__mdiff>
 800a030:	9006      	str	r0, [sp, #24]
 800a032:	2800      	cmp	r0, #0
 800a034:	d100      	bne.n	800a038 <_strtod_l+0x7f4>
 800a036:	e66f      	b.n	8009d18 <_strtod_l+0x4d4>
 800a038:	2200      	movs	r2, #0
 800a03a:	68c3      	ldr	r3, [r0, #12]
 800a03c:	9907      	ldr	r1, [sp, #28]
 800a03e:	60c2      	str	r2, [r0, #12]
 800a040:	930f      	str	r3, [sp, #60]	; 0x3c
 800a042:	f002 f805 	bl	800c050 <__mcmp>
 800a046:	2800      	cmp	r0, #0
 800a048:	da5f      	bge.n	800a10a <_strtod_l+0x8c6>
 800a04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a04c:	4333      	orrs	r3, r6
 800a04e:	d000      	beq.n	800a052 <_strtod_l+0x80e>
 800a050:	e08a      	b.n	800a168 <_strtod_l+0x924>
 800a052:	033b      	lsls	r3, r7, #12
 800a054:	d000      	beq.n	800a058 <_strtod_l+0x814>
 800a056:	e087      	b.n	800a168 <_strtod_l+0x924>
 800a058:	22d6      	movs	r2, #214	; 0xd6
 800a05a:	4b47      	ldr	r3, [pc, #284]	; (800a178 <_strtod_l+0x934>)
 800a05c:	04d2      	lsls	r2, r2, #19
 800a05e:	403b      	ands	r3, r7
 800a060:	4293      	cmp	r3, r2
 800a062:	d800      	bhi.n	800a066 <_strtod_l+0x822>
 800a064:	e080      	b.n	800a168 <_strtod_l+0x924>
 800a066:	9b06      	ldr	r3, [sp, #24]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	930a      	str	r3, [sp, #40]	; 0x28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <_strtod_l+0x836>
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	930a      	str	r3, [sp, #40]	; 0x28
 800a076:	2b01      	cmp	r3, #1
 800a078:	dd76      	ble.n	800a168 <_strtod_l+0x924>
 800a07a:	9906      	ldr	r1, [sp, #24]
 800a07c:	2201      	movs	r2, #1
 800a07e:	9805      	ldr	r0, [sp, #20]
 800a080:	f001 ff78 	bl	800bf74 <__lshift>
 800a084:	9907      	ldr	r1, [sp, #28]
 800a086:	9006      	str	r0, [sp, #24]
 800a088:	f001 ffe2 	bl	800c050 <__mcmp>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	dd6b      	ble.n	800a168 <_strtod_l+0x924>
 800a090:	9908      	ldr	r1, [sp, #32]
 800a092:	003b      	movs	r3, r7
 800a094:	4a38      	ldr	r2, [pc, #224]	; (800a178 <_strtod_l+0x934>)
 800a096:	2900      	cmp	r1, #0
 800a098:	d100      	bne.n	800a09c <_strtod_l+0x858>
 800a09a:	e092      	b.n	800a1c2 <_strtod_l+0x97e>
 800a09c:	0011      	movs	r1, r2
 800a09e:	20d6      	movs	r0, #214	; 0xd6
 800a0a0:	4039      	ands	r1, r7
 800a0a2:	04c0      	lsls	r0, r0, #19
 800a0a4:	4281      	cmp	r1, r0
 800a0a6:	dd00      	ble.n	800a0aa <_strtod_l+0x866>
 800a0a8:	e08b      	b.n	800a1c2 <_strtod_l+0x97e>
 800a0aa:	23dc      	movs	r3, #220	; 0xdc
 800a0ac:	049b      	lsls	r3, r3, #18
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	dc00      	bgt.n	800a0b4 <_strtod_l+0x870>
 800a0b2:	e6a4      	b.n	8009dfe <_strtod_l+0x5ba>
 800a0b4:	0030      	movs	r0, r6
 800a0b6:	0039      	movs	r1, r7
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4b30      	ldr	r3, [pc, #192]	; (800a17c <_strtod_l+0x938>)
 800a0bc:	f7f7 f9ac 	bl	8001418 <__aeabi_dmul>
 800a0c0:	0006      	movs	r6, r0
 800a0c2:	000f      	movs	r7, r1
 800a0c4:	4308      	orrs	r0, r1
 800a0c6:	d000      	beq.n	800a0ca <_strtod_l+0x886>
 800a0c8:	e62f      	b.n	8009d2a <_strtod_l+0x4e6>
 800a0ca:	2322      	movs	r3, #34	; 0x22
 800a0cc:	9a05      	ldr	r2, [sp, #20]
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	e62b      	b.n	8009d2a <_strtod_l+0x4e6>
 800a0d2:	234b      	movs	r3, #75	; 0x4b
 800a0d4:	1a9a      	subs	r2, r3, r2
 800a0d6:	3b4c      	subs	r3, #76	; 0x4c
 800a0d8:	4093      	lsls	r3, r2
 800a0da:	4019      	ands	r1, r3
 800a0dc:	000f      	movs	r7, r1
 800a0de:	e6e0      	b.n	8009ea2 <_strtod_l+0x65e>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	4252      	negs	r2, r2
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	4016      	ands	r6, r2
 800a0e8:	e6db      	b.n	8009ea2 <_strtod_l+0x65e>
 800a0ea:	4925      	ldr	r1, [pc, #148]	; (800a180 <_strtod_l+0x93c>)
 800a0ec:	1acb      	subs	r3, r1, r3
 800a0ee:	0001      	movs	r1, r0
 800a0f0:	4099      	lsls	r1, r3
 800a0f2:	9110      	str	r1, [sp, #64]	; 0x40
 800a0f4:	e741      	b.n	8009f7a <_strtod_l+0x736>
 800a0f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0f8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a0fa:	9805      	ldr	r0, [sp, #20]
 800a0fc:	f001 ff3a 	bl	800bf74 <__lshift>
 800a100:	9020      	str	r0, [sp, #128]	; 0x80
 800a102:	2800      	cmp	r0, #0
 800a104:	d000      	beq.n	800a108 <_strtod_l+0x8c4>
 800a106:	e76c      	b.n	8009fe2 <_strtod_l+0x79e>
 800a108:	e606      	b.n	8009d18 <_strtod_l+0x4d4>
 800a10a:	970c      	str	r7, [sp, #48]	; 0x30
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d176      	bne.n	800a1fe <_strtod_l+0x9ba>
 800a110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a112:	033b      	lsls	r3, r7, #12
 800a114:	0b1b      	lsrs	r3, r3, #12
 800a116:	2a00      	cmp	r2, #0
 800a118:	d038      	beq.n	800a18c <_strtod_l+0x948>
 800a11a:	4a1a      	ldr	r2, [pc, #104]	; (800a184 <_strtod_l+0x940>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d138      	bne.n	800a192 <_strtod_l+0x94e>
 800a120:	2201      	movs	r2, #1
 800a122:	9b08      	ldr	r3, [sp, #32]
 800a124:	4252      	negs	r2, r2
 800a126:	0031      	movs	r1, r6
 800a128:	0010      	movs	r0, r2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <_strtod_l+0x902>
 800a12e:	24d4      	movs	r4, #212	; 0xd4
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <_strtod_l+0x934>)
 800a132:	0010      	movs	r0, r2
 800a134:	403b      	ands	r3, r7
 800a136:	04e4      	lsls	r4, r4, #19
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d804      	bhi.n	800a146 <_strtod_l+0x902>
 800a13c:	306c      	adds	r0, #108	; 0x6c
 800a13e:	0d1b      	lsrs	r3, r3, #20
 800a140:	1ac3      	subs	r3, r0, r3
 800a142:	409a      	lsls	r2, r3
 800a144:	0010      	movs	r0, r2
 800a146:	4281      	cmp	r1, r0
 800a148:	d123      	bne.n	800a192 <_strtod_l+0x94e>
 800a14a:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <_strtod_l+0x944>)
 800a14c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a14e:	429a      	cmp	r2, r3
 800a150:	d102      	bne.n	800a158 <_strtod_l+0x914>
 800a152:	1c4b      	adds	r3, r1, #1
 800a154:	d100      	bne.n	800a158 <_strtod_l+0x914>
 800a156:	e5df      	b.n	8009d18 <_strtod_l+0x4d4>
 800a158:	4b07      	ldr	r3, [pc, #28]	; (800a178 <_strtod_l+0x934>)
 800a15a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a15c:	2600      	movs	r6, #0
 800a15e:	401a      	ands	r2, r3
 800a160:	0013      	movs	r3, r2
 800a162:	2280      	movs	r2, #128	; 0x80
 800a164:	0352      	lsls	r2, r2, #13
 800a166:	189f      	adds	r7, r3, r2
 800a168:	9b08      	ldr	r3, [sp, #32]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1a2      	bne.n	800a0b4 <_strtod_l+0x870>
 800a16e:	e5dc      	b.n	8009d2a <_strtod_l+0x4e6>
 800a170:	0800e058 	.word	0x0800e058
 800a174:	fffffc02 	.word	0xfffffc02
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	39500000 	.word	0x39500000
 800a180:	fffffbe2 	.word	0xfffffbe2
 800a184:	000fffff 	.word	0x000fffff
 800a188:	7fefffff 	.word	0x7fefffff
 800a18c:	4333      	orrs	r3, r6
 800a18e:	d100      	bne.n	800a192 <_strtod_l+0x94e>
 800a190:	e77e      	b.n	800a090 <_strtod_l+0x84c>
 800a192:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01d      	beq.n	800a1d4 <_strtod_l+0x990>
 800a198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a19a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a19c:	4213      	tst	r3, r2
 800a19e:	d0e3      	beq.n	800a168 <_strtod_l+0x924>
 800a1a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a2:	0030      	movs	r0, r6
 800a1a4:	0039      	movs	r1, r7
 800a1a6:	9a08      	ldr	r2, [sp, #32]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d017      	beq.n	800a1dc <_strtod_l+0x998>
 800a1ac:	f7ff fb32 	bl	8009814 <sulp>
 800a1b0:	0002      	movs	r2, r0
 800a1b2:	000b      	movs	r3, r1
 800a1b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a1b8:	f7f6 f9f0 	bl	800059c <__aeabi_dadd>
 800a1bc:	0006      	movs	r6, r0
 800a1be:	000f      	movs	r7, r1
 800a1c0:	e7d2      	b.n	800a168 <_strtod_l+0x924>
 800a1c2:	2601      	movs	r6, #1
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	4a99      	ldr	r2, [pc, #612]	; (800a42c <_strtod_l+0xbe8>)
 800a1c8:	4276      	negs	r6, r6
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	4a98      	ldr	r2, [pc, #608]	; (800a430 <_strtod_l+0xbec>)
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	0017      	movs	r7, r2
 800a1d2:	e7c9      	b.n	800a168 <_strtod_l+0x924>
 800a1d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1d6:	4233      	tst	r3, r6
 800a1d8:	d0c6      	beq.n	800a168 <_strtod_l+0x924>
 800a1da:	e7e1      	b.n	800a1a0 <_strtod_l+0x95c>
 800a1dc:	f7ff fb1a 	bl	8009814 <sulp>
 800a1e0:	0002      	movs	r2, r0
 800a1e2:	000b      	movs	r3, r1
 800a1e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a1e8:	f7f7 fb82 	bl	80018f0 <__aeabi_dsub>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	0006      	movs	r6, r0
 800a1f2:	000f      	movs	r7, r1
 800a1f4:	f7f6 f934 	bl	8000460 <__aeabi_dcmpeq>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d0b5      	beq.n	800a168 <_strtod_l+0x924>
 800a1fc:	e5ff      	b.n	8009dfe <_strtod_l+0x5ba>
 800a1fe:	9907      	ldr	r1, [sp, #28]
 800a200:	9806      	ldr	r0, [sp, #24]
 800a202:	f002 f8b1 	bl	800c368 <__ratio>
 800a206:	2380      	movs	r3, #128	; 0x80
 800a208:	2200      	movs	r2, #0
 800a20a:	05db      	lsls	r3, r3, #23
 800a20c:	0004      	movs	r4, r0
 800a20e:	000d      	movs	r5, r1
 800a210:	f7f6 f936 	bl	8000480 <__aeabi_dcmple>
 800a214:	2800      	cmp	r0, #0
 800a216:	d075      	beq.n	800a304 <_strtod_l+0xac0>
 800a218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d047      	beq.n	800a2ae <_strtod_l+0xa6a>
 800a21e:	2300      	movs	r3, #0
 800a220:	4c84      	ldr	r4, [pc, #528]	; (800a434 <_strtod_l+0xbf0>)
 800a222:	2500      	movs	r5, #0
 800a224:	9310      	str	r3, [sp, #64]	; 0x40
 800a226:	9411      	str	r4, [sp, #68]	; 0x44
 800a228:	4c82      	ldr	r4, [pc, #520]	; (800a434 <_strtod_l+0xbf0>)
 800a22a:	4a83      	ldr	r2, [pc, #524]	; (800a438 <_strtod_l+0xbf4>)
 800a22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a22e:	4013      	ands	r3, r2
 800a230:	9314      	str	r3, [sp, #80]	; 0x50
 800a232:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a234:	4b81      	ldr	r3, [pc, #516]	; (800a43c <_strtod_l+0xbf8>)
 800a236:	429a      	cmp	r2, r3
 800a238:	d000      	beq.n	800a23c <_strtod_l+0x9f8>
 800a23a:	e0ac      	b.n	800a396 <_strtod_l+0xb52>
 800a23c:	4a80      	ldr	r2, [pc, #512]	; (800a440 <_strtod_l+0xbfc>)
 800a23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a240:	4694      	mov	ip, r2
 800a242:	4463      	add	r3, ip
 800a244:	001f      	movs	r7, r3
 800a246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a24a:	0030      	movs	r0, r6
 800a24c:	0039      	movs	r1, r7
 800a24e:	920c      	str	r2, [sp, #48]	; 0x30
 800a250:	930d      	str	r3, [sp, #52]	; 0x34
 800a252:	f001 ffb1 	bl	800c1b8 <__ulp>
 800a256:	0002      	movs	r2, r0
 800a258:	000b      	movs	r3, r1
 800a25a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a25c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a25e:	f7f7 f8db 	bl	8001418 <__aeabi_dmul>
 800a262:	0032      	movs	r2, r6
 800a264:	003b      	movs	r3, r7
 800a266:	f7f6 f999 	bl	800059c <__aeabi_dadd>
 800a26a:	4a73      	ldr	r2, [pc, #460]	; (800a438 <_strtod_l+0xbf4>)
 800a26c:	4b75      	ldr	r3, [pc, #468]	; (800a444 <_strtod_l+0xc00>)
 800a26e:	0006      	movs	r6, r0
 800a270:	400a      	ands	r2, r1
 800a272:	429a      	cmp	r2, r3
 800a274:	d95e      	bls.n	800a334 <_strtod_l+0xaf0>
 800a276:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a278:	4b73      	ldr	r3, [pc, #460]	; (800a448 <_strtod_l+0xc04>)
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d103      	bne.n	800a286 <_strtod_l+0xa42>
 800a27e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a280:	3301      	adds	r3, #1
 800a282:	d100      	bne.n	800a286 <_strtod_l+0xa42>
 800a284:	e548      	b.n	8009d18 <_strtod_l+0x4d4>
 800a286:	2601      	movs	r6, #1
 800a288:	4f6f      	ldr	r7, [pc, #444]	; (800a448 <_strtod_l+0xc04>)
 800a28a:	4276      	negs	r6, r6
 800a28c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a28e:	9805      	ldr	r0, [sp, #20]
 800a290:	f001 fc52 	bl	800bb38 <_Bfree>
 800a294:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a296:	9805      	ldr	r0, [sp, #20]
 800a298:	f001 fc4e 	bl	800bb38 <_Bfree>
 800a29c:	9907      	ldr	r1, [sp, #28]
 800a29e:	9805      	ldr	r0, [sp, #20]
 800a2a0:	f001 fc4a 	bl	800bb38 <_Bfree>
 800a2a4:	9906      	ldr	r1, [sp, #24]
 800a2a6:	9805      	ldr	r0, [sp, #20]
 800a2a8:	f001 fc46 	bl	800bb38 <_Bfree>
 800a2ac:	e61d      	b.n	8009eea <_strtod_l+0x6a6>
 800a2ae:	2e00      	cmp	r6, #0
 800a2b0:	d11c      	bne.n	800a2ec <_strtod_l+0xaa8>
 800a2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b4:	031b      	lsls	r3, r3, #12
 800a2b6:	d11f      	bne.n	800a2f8 <_strtod_l+0xab4>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	0020      	movs	r0, r4
 800a2bc:	0029      	movs	r1, r5
 800a2be:	4b5d      	ldr	r3, [pc, #372]	; (800a434 <_strtod_l+0xbf0>)
 800a2c0:	f7f6 f8d4 	bl	800046c <__aeabi_dcmplt>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d11a      	bne.n	800a2fe <_strtod_l+0xaba>
 800a2c8:	0020      	movs	r0, r4
 800a2ca:	0029      	movs	r1, r5
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4b5f      	ldr	r3, [pc, #380]	; (800a44c <_strtod_l+0xc08>)
 800a2d0:	f7f7 f8a2 	bl	8001418 <__aeabi_dmul>
 800a2d4:	0005      	movs	r5, r0
 800a2d6:	000c      	movs	r4, r1
 800a2d8:	2380      	movs	r3, #128	; 0x80
 800a2da:	061b      	lsls	r3, r3, #24
 800a2dc:	18e3      	adds	r3, r4, r3
 800a2de:	951c      	str	r5, [sp, #112]	; 0x70
 800a2e0:	931d      	str	r3, [sp, #116]	; 0x74
 800a2e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a2e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2e6:	9210      	str	r2, [sp, #64]	; 0x40
 800a2e8:	9311      	str	r3, [sp, #68]	; 0x44
 800a2ea:	e79e      	b.n	800a22a <_strtod_l+0x9e6>
 800a2ec:	2e01      	cmp	r6, #1
 800a2ee:	d103      	bne.n	800a2f8 <_strtod_l+0xab4>
 800a2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d100      	bne.n	800a2f8 <_strtod_l+0xab4>
 800a2f6:	e582      	b.n	8009dfe <_strtod_l+0x5ba>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4c55      	ldr	r4, [pc, #340]	; (800a450 <_strtod_l+0xc0c>)
 800a2fc:	e791      	b.n	800a222 <_strtod_l+0x9de>
 800a2fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a300:	4c52      	ldr	r4, [pc, #328]	; (800a44c <_strtod_l+0xc08>)
 800a302:	e7e9      	b.n	800a2d8 <_strtod_l+0xa94>
 800a304:	2200      	movs	r2, #0
 800a306:	0020      	movs	r0, r4
 800a308:	0029      	movs	r1, r5
 800a30a:	4b50      	ldr	r3, [pc, #320]	; (800a44c <_strtod_l+0xc08>)
 800a30c:	f7f7 f884 	bl	8001418 <__aeabi_dmul>
 800a310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a312:	0005      	movs	r5, r0
 800a314:	000b      	movs	r3, r1
 800a316:	000c      	movs	r4, r1
 800a318:	2a00      	cmp	r2, #0
 800a31a:	d107      	bne.n	800a32c <_strtod_l+0xae8>
 800a31c:	2280      	movs	r2, #128	; 0x80
 800a31e:	0612      	lsls	r2, r2, #24
 800a320:	188b      	adds	r3, r1, r2
 800a322:	9016      	str	r0, [sp, #88]	; 0x58
 800a324:	9317      	str	r3, [sp, #92]	; 0x5c
 800a326:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a32a:	e7dc      	b.n	800a2e6 <_strtod_l+0xaa2>
 800a32c:	0002      	movs	r2, r0
 800a32e:	9216      	str	r2, [sp, #88]	; 0x58
 800a330:	9317      	str	r3, [sp, #92]	; 0x5c
 800a332:	e7f8      	b.n	800a326 <_strtod_l+0xae2>
 800a334:	23d4      	movs	r3, #212	; 0xd4
 800a336:	049b      	lsls	r3, r3, #18
 800a338:	18cf      	adds	r7, r1, r3
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1a5      	bne.n	800a28c <_strtod_l+0xa48>
 800a340:	4b3d      	ldr	r3, [pc, #244]	; (800a438 <_strtod_l+0xbf4>)
 800a342:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a344:	403b      	ands	r3, r7
 800a346:	429a      	cmp	r2, r3
 800a348:	d1a0      	bne.n	800a28c <_strtod_l+0xa48>
 800a34a:	0028      	movs	r0, r5
 800a34c:	0021      	movs	r1, r4
 800a34e:	f7f6 f8d3 	bl	80004f8 <__aeabi_d2lz>
 800a352:	f7f6 f90d 	bl	8000570 <__aeabi_l2d>
 800a356:	0002      	movs	r2, r0
 800a358:	000b      	movs	r3, r1
 800a35a:	0028      	movs	r0, r5
 800a35c:	0021      	movs	r1, r4
 800a35e:	f7f7 fac7 	bl	80018f0 <__aeabi_dsub>
 800a362:	033b      	lsls	r3, r7, #12
 800a364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a366:	0b1b      	lsrs	r3, r3, #12
 800a368:	4333      	orrs	r3, r6
 800a36a:	4313      	orrs	r3, r2
 800a36c:	0004      	movs	r4, r0
 800a36e:	000d      	movs	r5, r1
 800a370:	4a38      	ldr	r2, [pc, #224]	; (800a454 <_strtod_l+0xc10>)
 800a372:	2b00      	cmp	r3, #0
 800a374:	d055      	beq.n	800a422 <_strtod_l+0xbde>
 800a376:	4b38      	ldr	r3, [pc, #224]	; (800a458 <_strtod_l+0xc14>)
 800a378:	f7f6 f878 	bl	800046c <__aeabi_dcmplt>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d000      	beq.n	800a382 <_strtod_l+0xb3e>
 800a380:	e4d3      	b.n	8009d2a <_strtod_l+0x4e6>
 800a382:	0020      	movs	r0, r4
 800a384:	0029      	movs	r1, r5
 800a386:	4a35      	ldr	r2, [pc, #212]	; (800a45c <_strtod_l+0xc18>)
 800a388:	4b30      	ldr	r3, [pc, #192]	; (800a44c <_strtod_l+0xc08>)
 800a38a:	f7f6 f883 	bl	8000494 <__aeabi_dcmpgt>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d100      	bne.n	800a394 <_strtod_l+0xb50>
 800a392:	e77b      	b.n	800a28c <_strtod_l+0xa48>
 800a394:	e4c9      	b.n	8009d2a <_strtod_l+0x4e6>
 800a396:	9b08      	ldr	r3, [sp, #32]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d02b      	beq.n	800a3f4 <_strtod_l+0xbb0>
 800a39c:	23d4      	movs	r3, #212	; 0xd4
 800a39e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3a0:	04db      	lsls	r3, r3, #19
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d826      	bhi.n	800a3f4 <_strtod_l+0xbb0>
 800a3a6:	0028      	movs	r0, r5
 800a3a8:	0021      	movs	r1, r4
 800a3aa:	4a2d      	ldr	r2, [pc, #180]	; (800a460 <_strtod_l+0xc1c>)
 800a3ac:	4b2d      	ldr	r3, [pc, #180]	; (800a464 <_strtod_l+0xc20>)
 800a3ae:	f7f6 f867 	bl	8000480 <__aeabi_dcmple>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d017      	beq.n	800a3e6 <_strtod_l+0xba2>
 800a3b6:	0028      	movs	r0, r5
 800a3b8:	0021      	movs	r1, r4
 800a3ba:	f7f6 f87f 	bl	80004bc <__aeabi_d2uiz>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d100      	bne.n	800a3c4 <_strtod_l+0xb80>
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f7f7 feaa 	bl	800211c <__aeabi_ui2d>
 800a3c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3ca:	0005      	movs	r5, r0
 800a3cc:	000b      	movs	r3, r1
 800a3ce:	000c      	movs	r4, r1
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	d122      	bne.n	800a41a <_strtod_l+0xbd6>
 800a3d4:	2280      	movs	r2, #128	; 0x80
 800a3d6:	0612      	lsls	r2, r2, #24
 800a3d8:	188b      	adds	r3, r1, r2
 800a3da:	9018      	str	r0, [sp, #96]	; 0x60
 800a3dc:	9319      	str	r3, [sp, #100]	; 0x64
 800a3de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3e2:	9210      	str	r2, [sp, #64]	; 0x40
 800a3e4:	9311      	str	r3, [sp, #68]	; 0x44
 800a3e6:	22d6      	movs	r2, #214	; 0xd6
 800a3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3ea:	04d2      	lsls	r2, r2, #19
 800a3ec:	189b      	adds	r3, r3, r2
 800a3ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a3f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a3f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a3f8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a3fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a3fc:	f001 fedc 	bl	800c1b8 <__ulp>
 800a400:	0002      	movs	r2, r0
 800a402:	000b      	movs	r3, r1
 800a404:	0030      	movs	r0, r6
 800a406:	0039      	movs	r1, r7
 800a408:	f7f7 f806 	bl	8001418 <__aeabi_dmul>
 800a40c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a40e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a410:	f7f6 f8c4 	bl	800059c <__aeabi_dadd>
 800a414:	0006      	movs	r6, r0
 800a416:	000f      	movs	r7, r1
 800a418:	e78f      	b.n	800a33a <_strtod_l+0xaf6>
 800a41a:	0002      	movs	r2, r0
 800a41c:	9218      	str	r2, [sp, #96]	; 0x60
 800a41e:	9319      	str	r3, [sp, #100]	; 0x64
 800a420:	e7dd      	b.n	800a3de <_strtod_l+0xb9a>
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <_strtod_l+0xc24>)
 800a424:	f7f6 f822 	bl	800046c <__aeabi_dcmplt>
 800a428:	e7b1      	b.n	800a38e <_strtod_l+0xb4a>
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	fff00000 	.word	0xfff00000
 800a430:	000fffff 	.word	0x000fffff
 800a434:	3ff00000 	.word	0x3ff00000
 800a438:	7ff00000 	.word	0x7ff00000
 800a43c:	7fe00000 	.word	0x7fe00000
 800a440:	fcb00000 	.word	0xfcb00000
 800a444:	7c9fffff 	.word	0x7c9fffff
 800a448:	7fefffff 	.word	0x7fefffff
 800a44c:	3fe00000 	.word	0x3fe00000
 800a450:	bff00000 	.word	0xbff00000
 800a454:	94a03595 	.word	0x94a03595
 800a458:	3fdfffff 	.word	0x3fdfffff
 800a45c:	35afe535 	.word	0x35afe535
 800a460:	ffc00000 	.word	0xffc00000
 800a464:	41dfffff 	.word	0x41dfffff
 800a468:	3fcfffff 	.word	0x3fcfffff

0800a46c <_strtod_r>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4b02      	ldr	r3, [pc, #8]	; (800a478 <_strtod_r+0xc>)
 800a470:	f7ff f9e8 	bl	8009844 <_strtod_l>
 800a474:	bd10      	pop	{r4, pc}
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	20000074 	.word	0x20000074

0800a47c <_strtol_l.constprop.0>:
 800a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47e:	b087      	sub	sp, #28
 800a480:	001e      	movs	r6, r3
 800a482:	9005      	str	r0, [sp, #20]
 800a484:	9101      	str	r1, [sp, #4]
 800a486:	9202      	str	r2, [sp, #8]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d045      	beq.n	800a518 <_strtol_l.constprop.0+0x9c>
 800a48c:	000b      	movs	r3, r1
 800a48e:	2e24      	cmp	r6, #36	; 0x24
 800a490:	d842      	bhi.n	800a518 <_strtol_l.constprop.0+0x9c>
 800a492:	4a3f      	ldr	r2, [pc, #252]	; (800a590 <_strtol_l.constprop.0+0x114>)
 800a494:	2108      	movs	r1, #8
 800a496:	4694      	mov	ip, r2
 800a498:	001a      	movs	r2, r3
 800a49a:	4660      	mov	r0, ip
 800a49c:	7814      	ldrb	r4, [r2, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	5d00      	ldrb	r0, [r0, r4]
 800a4a2:	001d      	movs	r5, r3
 800a4a4:	0007      	movs	r7, r0
 800a4a6:	400f      	ands	r7, r1
 800a4a8:	4208      	tst	r0, r1
 800a4aa:	d1f5      	bne.n	800a498 <_strtol_l.constprop.0+0x1c>
 800a4ac:	2c2d      	cmp	r4, #45	; 0x2d
 800a4ae:	d13a      	bne.n	800a526 <_strtol_l.constprop.0+0xaa>
 800a4b0:	2701      	movs	r7, #1
 800a4b2:	781c      	ldrb	r4, [r3, #0]
 800a4b4:	1c95      	adds	r5, r2, #2
 800a4b6:	2e00      	cmp	r6, #0
 800a4b8:	d065      	beq.n	800a586 <_strtol_l.constprop.0+0x10a>
 800a4ba:	2e10      	cmp	r6, #16
 800a4bc:	d109      	bne.n	800a4d2 <_strtol_l.constprop.0+0x56>
 800a4be:	2c30      	cmp	r4, #48	; 0x30
 800a4c0:	d107      	bne.n	800a4d2 <_strtol_l.constprop.0+0x56>
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	782b      	ldrb	r3, [r5, #0]
 800a4c6:	4393      	bics	r3, r2
 800a4c8:	2b58      	cmp	r3, #88	; 0x58
 800a4ca:	d157      	bne.n	800a57c <_strtol_l.constprop.0+0x100>
 800a4cc:	2610      	movs	r6, #16
 800a4ce:	786c      	ldrb	r4, [r5, #1]
 800a4d0:	3502      	adds	r5, #2
 800a4d2:	4b30      	ldr	r3, [pc, #192]	; (800a594 <_strtol_l.constprop.0+0x118>)
 800a4d4:	0031      	movs	r1, r6
 800a4d6:	18fb      	adds	r3, r7, r3
 800a4d8:	0018      	movs	r0, r3
 800a4da:	9303      	str	r3, [sp, #12]
 800a4dc:	f7f5 fec0 	bl	8000260 <__aeabi_uidivmod>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	4684      	mov	ip, r0
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	9104      	str	r1, [sp, #16]
 800a4ea:	4252      	negs	r2, r2
 800a4ec:	0021      	movs	r1, r4
 800a4ee:	3930      	subs	r1, #48	; 0x30
 800a4f0:	2909      	cmp	r1, #9
 800a4f2:	d81d      	bhi.n	800a530 <_strtol_l.constprop.0+0xb4>
 800a4f4:	000c      	movs	r4, r1
 800a4f6:	42a6      	cmp	r6, r4
 800a4f8:	dd28      	ble.n	800a54c <_strtol_l.constprop.0+0xd0>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	db24      	blt.n	800a548 <_strtol_l.constprop.0+0xcc>
 800a4fe:	0013      	movs	r3, r2
 800a500:	4584      	cmp	ip, r0
 800a502:	d306      	bcc.n	800a512 <_strtol_l.constprop.0+0x96>
 800a504:	d102      	bne.n	800a50c <_strtol_l.constprop.0+0x90>
 800a506:	9904      	ldr	r1, [sp, #16]
 800a508:	42a1      	cmp	r1, r4
 800a50a:	db02      	blt.n	800a512 <_strtol_l.constprop.0+0x96>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4370      	muls	r0, r6
 800a510:	1820      	adds	r0, r4, r0
 800a512:	782c      	ldrb	r4, [r5, #0]
 800a514:	3501      	adds	r5, #1
 800a516:	e7e9      	b.n	800a4ec <_strtol_l.constprop.0+0x70>
 800a518:	f7fe fa32 	bl	8008980 <__errno>
 800a51c:	2316      	movs	r3, #22
 800a51e:	6003      	str	r3, [r0, #0]
 800a520:	2000      	movs	r0, #0
 800a522:	b007      	add	sp, #28
 800a524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a526:	2c2b      	cmp	r4, #43	; 0x2b
 800a528:	d1c5      	bne.n	800a4b6 <_strtol_l.constprop.0+0x3a>
 800a52a:	781c      	ldrb	r4, [r3, #0]
 800a52c:	1c95      	adds	r5, r2, #2
 800a52e:	e7c2      	b.n	800a4b6 <_strtol_l.constprop.0+0x3a>
 800a530:	0021      	movs	r1, r4
 800a532:	3941      	subs	r1, #65	; 0x41
 800a534:	2919      	cmp	r1, #25
 800a536:	d801      	bhi.n	800a53c <_strtol_l.constprop.0+0xc0>
 800a538:	3c37      	subs	r4, #55	; 0x37
 800a53a:	e7dc      	b.n	800a4f6 <_strtol_l.constprop.0+0x7a>
 800a53c:	0021      	movs	r1, r4
 800a53e:	3961      	subs	r1, #97	; 0x61
 800a540:	2919      	cmp	r1, #25
 800a542:	d803      	bhi.n	800a54c <_strtol_l.constprop.0+0xd0>
 800a544:	3c57      	subs	r4, #87	; 0x57
 800a546:	e7d6      	b.n	800a4f6 <_strtol_l.constprop.0+0x7a>
 800a548:	0013      	movs	r3, r2
 800a54a:	e7e2      	b.n	800a512 <_strtol_l.constprop.0+0x96>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	da09      	bge.n	800a564 <_strtol_l.constprop.0+0xe8>
 800a550:	2322      	movs	r3, #34	; 0x22
 800a552:	9a05      	ldr	r2, [sp, #20]
 800a554:	9803      	ldr	r0, [sp, #12]
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0e1      	beq.n	800a522 <_strtol_l.constprop.0+0xa6>
 800a55e:	1e6b      	subs	r3, r5, #1
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	e007      	b.n	800a574 <_strtol_l.constprop.0+0xf8>
 800a564:	2f00      	cmp	r7, #0
 800a566:	d000      	beq.n	800a56a <_strtol_l.constprop.0+0xee>
 800a568:	4240      	negs	r0, r0
 800a56a:	9a02      	ldr	r2, [sp, #8]
 800a56c:	2a00      	cmp	r2, #0
 800a56e:	d0d8      	beq.n	800a522 <_strtol_l.constprop.0+0xa6>
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1f4      	bne.n	800a55e <_strtol_l.constprop.0+0xe2>
 800a574:	9b02      	ldr	r3, [sp, #8]
 800a576:	9a01      	ldr	r2, [sp, #4]
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	e7d2      	b.n	800a522 <_strtol_l.constprop.0+0xa6>
 800a57c:	2430      	movs	r4, #48	; 0x30
 800a57e:	2e00      	cmp	r6, #0
 800a580:	d1a7      	bne.n	800a4d2 <_strtol_l.constprop.0+0x56>
 800a582:	3608      	adds	r6, #8
 800a584:	e7a5      	b.n	800a4d2 <_strtol_l.constprop.0+0x56>
 800a586:	2c30      	cmp	r4, #48	; 0x30
 800a588:	d09b      	beq.n	800a4c2 <_strtol_l.constprop.0+0x46>
 800a58a:	260a      	movs	r6, #10
 800a58c:	e7a1      	b.n	800a4d2 <_strtol_l.constprop.0+0x56>
 800a58e:	46c0      	nop			; (mov r8, r8)
 800a590:	0800e081 	.word	0x0800e081
 800a594:	7fffffff 	.word	0x7fffffff

0800a598 <_strtol_r>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	f7ff ff6f 	bl	800a47c <_strtol_l.constprop.0>
 800a59e:	bd10      	pop	{r4, pc}

0800a5a0 <_write_r>:
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	0004      	movs	r4, r0
 800a5a4:	0008      	movs	r0, r1
 800a5a6:	0011      	movs	r1, r2
 800a5a8:	001a      	movs	r2, r3
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4d05      	ldr	r5, [pc, #20]	; (800a5c4 <_write_r+0x24>)
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	f7f9 ffc5 	bl	800453e <_write>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d103      	bne.n	800a5c0 <_write_r+0x20>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d000      	beq.n	800a5c0 <_write_r+0x20>
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
 800a5c2:	46c0      	nop			; (mov r8, r8)
 800a5c4:	20000614 	.word	0x20000614

0800a5c8 <_close_r>:
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	b570      	push	{r4, r5, r6, lr}
 800a5cc:	4d06      	ldr	r5, [pc, #24]	; (800a5e8 <_close_r+0x20>)
 800a5ce:	0004      	movs	r4, r0
 800a5d0:	0008      	movs	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f9 ffcf 	bl	8004576 <_close>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d103      	bne.n	800a5e4 <_close_r+0x1c>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d000      	beq.n	800a5e4 <_close_r+0x1c>
 800a5e2:	6023      	str	r3, [r4, #0]
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	20000614 	.word	0x20000614

0800a5ec <quorem>:
 800a5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ee:	0006      	movs	r6, r0
 800a5f0:	690b      	ldr	r3, [r1, #16]
 800a5f2:	6932      	ldr	r2, [r6, #16]
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	9103      	str	r1, [sp, #12]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	db65      	blt.n	800a6ca <quorem+0xde>
 800a5fe:	3b01      	subs	r3, #1
 800a600:	009c      	lsls	r4, r3, #2
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	000b      	movs	r3, r1
 800a606:	3314      	adds	r3, #20
 800a608:	9305      	str	r3, [sp, #20]
 800a60a:	191b      	adds	r3, r3, r4
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	0033      	movs	r3, r6
 800a610:	3314      	adds	r3, #20
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	191c      	adds	r4, r3, r4
 800a616:	9b04      	ldr	r3, [sp, #16]
 800a618:	6827      	ldr	r7, [r4, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	0038      	movs	r0, r7
 800a61e:	1c5d      	adds	r5, r3, #1
 800a620:	0029      	movs	r1, r5
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	f7f5 fd96 	bl	8000154 <__udivsi3>
 800a628:	9001      	str	r0, [sp, #4]
 800a62a:	42af      	cmp	r7, r5
 800a62c:	d324      	bcc.n	800a678 <quorem+0x8c>
 800a62e:	2500      	movs	r5, #0
 800a630:	46ac      	mov	ip, r5
 800a632:	9802      	ldr	r0, [sp, #8]
 800a634:	9f05      	ldr	r7, [sp, #20]
 800a636:	cf08      	ldmia	r7!, {r3}
 800a638:	9a01      	ldr	r2, [sp, #4]
 800a63a:	b299      	uxth	r1, r3
 800a63c:	4351      	muls	r1, r2
 800a63e:	0c1b      	lsrs	r3, r3, #16
 800a640:	4353      	muls	r3, r2
 800a642:	1949      	adds	r1, r1, r5
 800a644:	0c0a      	lsrs	r2, r1, #16
 800a646:	189b      	adds	r3, r3, r2
 800a648:	6802      	ldr	r2, [r0, #0]
 800a64a:	b289      	uxth	r1, r1
 800a64c:	b292      	uxth	r2, r2
 800a64e:	4462      	add	r2, ip
 800a650:	1a52      	subs	r2, r2, r1
 800a652:	6801      	ldr	r1, [r0, #0]
 800a654:	0c1d      	lsrs	r5, r3, #16
 800a656:	0c09      	lsrs	r1, r1, #16
 800a658:	b29b      	uxth	r3, r3
 800a65a:	1acb      	subs	r3, r1, r3
 800a65c:	1411      	asrs	r1, r2, #16
 800a65e:	185b      	adds	r3, r3, r1
 800a660:	1419      	asrs	r1, r3, #16
 800a662:	b292      	uxth	r2, r2
 800a664:	041b      	lsls	r3, r3, #16
 800a666:	431a      	orrs	r2, r3
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	468c      	mov	ip, r1
 800a66c:	c004      	stmia	r0!, {r2}
 800a66e:	42bb      	cmp	r3, r7
 800a670:	d2e1      	bcs.n	800a636 <quorem+0x4a>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d030      	beq.n	800a6da <quorem+0xee>
 800a678:	0030      	movs	r0, r6
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	f001 fce8 	bl	800c050 <__mcmp>
 800a680:	2800      	cmp	r0, #0
 800a682:	db21      	blt.n	800a6c8 <quorem+0xdc>
 800a684:	0030      	movs	r0, r6
 800a686:	2400      	movs	r4, #0
 800a688:	9b01      	ldr	r3, [sp, #4]
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	3014      	adds	r0, #20
 800a692:	3114      	adds	r1, #20
 800a694:	6803      	ldr	r3, [r0, #0]
 800a696:	c920      	ldmia	r1!, {r5}
 800a698:	b29a      	uxth	r2, r3
 800a69a:	1914      	adds	r4, r2, r4
 800a69c:	b2aa      	uxth	r2, r5
 800a69e:	1aa2      	subs	r2, r4, r2
 800a6a0:	0c1b      	lsrs	r3, r3, #16
 800a6a2:	0c2d      	lsrs	r5, r5, #16
 800a6a4:	1414      	asrs	r4, r2, #16
 800a6a6:	1b5b      	subs	r3, r3, r5
 800a6a8:	191b      	adds	r3, r3, r4
 800a6aa:	141c      	asrs	r4, r3, #16
 800a6ac:	b292      	uxth	r2, r2
 800a6ae:	041b      	lsls	r3, r3, #16
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	c008      	stmia	r0!, {r3}
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	428b      	cmp	r3, r1
 800a6b8:	d2ec      	bcs.n	800a694 <quorem+0xa8>
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	9a02      	ldr	r2, [sp, #8]
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	18d3      	adds	r3, r2, r3
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	d015      	beq.n	800a6f4 <quorem+0x108>
 800a6c8:	9801      	ldr	r0, [sp, #4]
 800a6ca:	b007      	add	sp, #28
 800a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d106      	bne.n	800a6e2 <quorem+0xf6>
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	9b02      	ldr	r3, [sp, #8]
 800a6dc:	3c04      	subs	r4, #4
 800a6de:	42a3      	cmp	r3, r4
 800a6e0:	d3f5      	bcc.n	800a6ce <quorem+0xe2>
 800a6e2:	9b00      	ldr	r3, [sp, #0]
 800a6e4:	6133      	str	r3, [r6, #16]
 800a6e6:	e7c7      	b.n	800a678 <quorem+0x8c>
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	d106      	bne.n	800a6fc <quorem+0x110>
 800a6ee:	9a00      	ldr	r2, [sp, #0]
 800a6f0:	3a01      	subs	r2, #1
 800a6f2:	9200      	str	r2, [sp, #0]
 800a6f4:	9a02      	ldr	r2, [sp, #8]
 800a6f6:	3b04      	subs	r3, #4
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d3f5      	bcc.n	800a6e8 <quorem+0xfc>
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	6133      	str	r3, [r6, #16]
 800a700:	e7e2      	b.n	800a6c8 <quorem+0xdc>
	...

0800a704 <_dtoa_r>:
 800a704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a706:	b09d      	sub	sp, #116	; 0x74
 800a708:	9202      	str	r2, [sp, #8]
 800a70a:	9303      	str	r3, [sp, #12]
 800a70c:	9b02      	ldr	r3, [sp, #8]
 800a70e:	9c03      	ldr	r4, [sp, #12]
 800a710:	9308      	str	r3, [sp, #32]
 800a712:	9409      	str	r4, [sp, #36]	; 0x24
 800a714:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a716:	0007      	movs	r7, r0
 800a718:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a71a:	2c00      	cmp	r4, #0
 800a71c:	d10e      	bne.n	800a73c <_dtoa_r+0x38>
 800a71e:	2010      	movs	r0, #16
 800a720:	f001 f996 	bl	800ba50 <malloc>
 800a724:	1e02      	subs	r2, r0, #0
 800a726:	6278      	str	r0, [r7, #36]	; 0x24
 800a728:	d104      	bne.n	800a734 <_dtoa_r+0x30>
 800a72a:	21ea      	movs	r1, #234	; 0xea
 800a72c:	4bc7      	ldr	r3, [pc, #796]	; (800aa4c <_dtoa_r+0x348>)
 800a72e:	48c8      	ldr	r0, [pc, #800]	; (800aa50 <_dtoa_r+0x34c>)
 800a730:	f002 fd88 	bl	800d244 <__assert_func>
 800a734:	6044      	str	r4, [r0, #4]
 800a736:	6084      	str	r4, [r0, #8]
 800a738:	6004      	str	r4, [r0, #0]
 800a73a:	60c4      	str	r4, [r0, #12]
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	6819      	ldr	r1, [r3, #0]
 800a740:	2900      	cmp	r1, #0
 800a742:	d00a      	beq.n	800a75a <_dtoa_r+0x56>
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	2301      	movs	r3, #1
 800a748:	4093      	lsls	r3, r2
 800a74a:	604a      	str	r2, [r1, #4]
 800a74c:	608b      	str	r3, [r1, #8]
 800a74e:	0038      	movs	r0, r7
 800a750:	f001 f9f2 	bl	800bb38 <_Bfree>
 800a754:	2200      	movs	r2, #0
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da20      	bge.n	800a7a2 <_dtoa_r+0x9e>
 800a760:	2301      	movs	r3, #1
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	085b      	lsrs	r3, r3, #1
 800a76a:	9309      	str	r3, [sp, #36]	; 0x24
 800a76c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a76e:	4bb9      	ldr	r3, [pc, #740]	; (800aa54 <_dtoa_r+0x350>)
 800a770:	4ab8      	ldr	r2, [pc, #736]	; (800aa54 <_dtoa_r+0x350>)
 800a772:	402b      	ands	r3, r5
 800a774:	4293      	cmp	r3, r2
 800a776:	d117      	bne.n	800a7a8 <_dtoa_r+0xa4>
 800a778:	4bb7      	ldr	r3, [pc, #732]	; (800aa58 <_dtoa_r+0x354>)
 800a77a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a77c:	0328      	lsls	r0, r5, #12
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	0b00      	lsrs	r0, r0, #12
 800a784:	4318      	orrs	r0, r3
 800a786:	d101      	bne.n	800a78c <_dtoa_r+0x88>
 800a788:	f000 fdbf 	bl	800b30a <_dtoa_r+0xc06>
 800a78c:	48b3      	ldr	r0, [pc, #716]	; (800aa5c <_dtoa_r+0x358>)
 800a78e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a790:	9006      	str	r0, [sp, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <_dtoa_r+0x98>
 800a796:	4bb2      	ldr	r3, [pc, #712]	; (800aa60 <_dtoa_r+0x35c>)
 800a798:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	9806      	ldr	r0, [sp, #24]
 800a79e:	b01d      	add	sp, #116	; 0x74
 800a7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	e7e1      	b.n	800a76c <_dtoa_r+0x68>
 800a7a8:	9b08      	ldr	r3, [sp, #32]
 800a7aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a7ac:	9312      	str	r3, [sp, #72]	; 0x48
 800a7ae:	9413      	str	r4, [sp, #76]	; 0x4c
 800a7b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f7f5 fe52 	bl	8000460 <__aeabi_dcmpeq>
 800a7bc:	1e04      	subs	r4, r0, #0
 800a7be:	d009      	beq.n	800a7d4 <_dtoa_r+0xd0>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	4ba7      	ldr	r3, [pc, #668]	; (800aa64 <_dtoa_r+0x360>)
 800a7c8:	9306      	str	r3, [sp, #24]
 800a7ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0e5      	beq.n	800a79c <_dtoa_r+0x98>
 800a7d0:	4ba5      	ldr	r3, [pc, #660]	; (800aa68 <_dtoa_r+0x364>)
 800a7d2:	e7e1      	b.n	800a798 <_dtoa_r+0x94>
 800a7d4:	ab1a      	add	r3, sp, #104	; 0x68
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	ab1b      	add	r3, sp, #108	; 0x6c
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	0038      	movs	r0, r7
 800a7de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7e2:	f001 fd5d 	bl	800c2a0 <__d2b>
 800a7e6:	006e      	lsls	r6, r5, #1
 800a7e8:	9005      	str	r0, [sp, #20]
 800a7ea:	0d76      	lsrs	r6, r6, #21
 800a7ec:	d100      	bne.n	800a7f0 <_dtoa_r+0xec>
 800a7ee:	e07c      	b.n	800a8ea <_dtoa_r+0x1e6>
 800a7f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7f6:	4a9d      	ldr	r2, [pc, #628]	; (800aa6c <_dtoa_r+0x368>)
 800a7f8:	031b      	lsls	r3, r3, #12
 800a7fa:	0b1b      	lsrs	r3, r3, #12
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	0011      	movs	r1, r2
 800a800:	4b9b      	ldr	r3, [pc, #620]	; (800aa70 <_dtoa_r+0x36c>)
 800a802:	9418      	str	r4, [sp, #96]	; 0x60
 800a804:	18f6      	adds	r6, r6, r3
 800a806:	2200      	movs	r2, #0
 800a808:	4b9a      	ldr	r3, [pc, #616]	; (800aa74 <_dtoa_r+0x370>)
 800a80a:	f7f7 f871 	bl	80018f0 <__aeabi_dsub>
 800a80e:	4a9a      	ldr	r2, [pc, #616]	; (800aa78 <_dtoa_r+0x374>)
 800a810:	4b9a      	ldr	r3, [pc, #616]	; (800aa7c <_dtoa_r+0x378>)
 800a812:	f7f6 fe01 	bl	8001418 <__aeabi_dmul>
 800a816:	4a9a      	ldr	r2, [pc, #616]	; (800aa80 <_dtoa_r+0x37c>)
 800a818:	4b9a      	ldr	r3, [pc, #616]	; (800aa84 <_dtoa_r+0x380>)
 800a81a:	f7f5 febf 	bl	800059c <__aeabi_dadd>
 800a81e:	0004      	movs	r4, r0
 800a820:	0030      	movs	r0, r6
 800a822:	000d      	movs	r5, r1
 800a824:	f7f7 fc4a 	bl	80020bc <__aeabi_i2d>
 800a828:	4a97      	ldr	r2, [pc, #604]	; (800aa88 <_dtoa_r+0x384>)
 800a82a:	4b98      	ldr	r3, [pc, #608]	; (800aa8c <_dtoa_r+0x388>)
 800a82c:	f7f6 fdf4 	bl	8001418 <__aeabi_dmul>
 800a830:	0002      	movs	r2, r0
 800a832:	000b      	movs	r3, r1
 800a834:	0020      	movs	r0, r4
 800a836:	0029      	movs	r1, r5
 800a838:	f7f5 feb0 	bl	800059c <__aeabi_dadd>
 800a83c:	0004      	movs	r4, r0
 800a83e:	000d      	movs	r5, r1
 800a840:	f7f7 fc06 	bl	8002050 <__aeabi_d2iz>
 800a844:	2200      	movs	r2, #0
 800a846:	9002      	str	r0, [sp, #8]
 800a848:	2300      	movs	r3, #0
 800a84a:	0020      	movs	r0, r4
 800a84c:	0029      	movs	r1, r5
 800a84e:	f7f5 fe0d 	bl	800046c <__aeabi_dcmplt>
 800a852:	2800      	cmp	r0, #0
 800a854:	d00b      	beq.n	800a86e <_dtoa_r+0x16a>
 800a856:	9802      	ldr	r0, [sp, #8]
 800a858:	f7f7 fc30 	bl	80020bc <__aeabi_i2d>
 800a85c:	002b      	movs	r3, r5
 800a85e:	0022      	movs	r2, r4
 800a860:	f7f5 fdfe 	bl	8000460 <__aeabi_dcmpeq>
 800a864:	4243      	negs	r3, r0
 800a866:	4158      	adcs	r0, r3
 800a868:	9b02      	ldr	r3, [sp, #8]
 800a86a:	1a1b      	subs	r3, r3, r0
 800a86c:	9302      	str	r3, [sp, #8]
 800a86e:	2301      	movs	r3, #1
 800a870:	9316      	str	r3, [sp, #88]	; 0x58
 800a872:	9b02      	ldr	r3, [sp, #8]
 800a874:	2b16      	cmp	r3, #22
 800a876:	d80f      	bhi.n	800a898 <_dtoa_r+0x194>
 800a878:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a87a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a87c:	00da      	lsls	r2, r3, #3
 800a87e:	4b84      	ldr	r3, [pc, #528]	; (800aa90 <_dtoa_r+0x38c>)
 800a880:	189b      	adds	r3, r3, r2
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f7f5 fdf1 	bl	800046c <__aeabi_dcmplt>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d049      	beq.n	800a922 <_dtoa_r+0x21e>
 800a88e:	9b02      	ldr	r3, [sp, #8]
 800a890:	3b01      	subs	r3, #1
 800a892:	9302      	str	r3, [sp, #8]
 800a894:	2300      	movs	r3, #0
 800a896:	9316      	str	r3, [sp, #88]	; 0x58
 800a898:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a89a:	1b9e      	subs	r6, r3, r6
 800a89c:	2300      	movs	r3, #0
 800a89e:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a0:	0033      	movs	r3, r6
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a8a6:	d504      	bpl.n	800a8b2 <_dtoa_r+0x1ae>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	1b9b      	subs	r3, r3, r6
 800a8ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b2:	9b02      	ldr	r3, [sp, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	db36      	blt.n	800a926 <_dtoa_r+0x222>
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8bc:	4694      	mov	ip, r2
 800a8be:	4463      	add	r3, ip
 800a8c0:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9215      	str	r2, [sp, #84]	; 0x54
 800a8c6:	930e      	str	r3, [sp, #56]	; 0x38
 800a8c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8ca:	2401      	movs	r4, #1
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d864      	bhi.n	800a99a <_dtoa_r+0x296>
 800a8d0:	2b05      	cmp	r3, #5
 800a8d2:	dd02      	ble.n	800a8da <_dtoa_r+0x1d6>
 800a8d4:	2400      	movs	r4, #0
 800a8d6:	3b04      	subs	r3, #4
 800a8d8:	9322      	str	r3, [sp, #136]	; 0x88
 800a8da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8dc:	1e98      	subs	r0, r3, #2
 800a8de:	2803      	cmp	r0, #3
 800a8e0:	d864      	bhi.n	800a9ac <_dtoa_r+0x2a8>
 800a8e2:	f7f5 fc23 	bl	800012c <__gnu_thumb1_case_uqi>
 800a8e6:	3829      	.short	0x3829
 800a8e8:	5836      	.short	0x5836
 800a8ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a8ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a8ee:	189e      	adds	r6, r3, r2
 800a8f0:	4b68      	ldr	r3, [pc, #416]	; (800aa94 <_dtoa_r+0x390>)
 800a8f2:	18f2      	adds	r2, r6, r3
 800a8f4:	2a20      	cmp	r2, #32
 800a8f6:	dd0f      	ble.n	800a918 <_dtoa_r+0x214>
 800a8f8:	2340      	movs	r3, #64	; 0x40
 800a8fa:	1a9b      	subs	r3, r3, r2
 800a8fc:	409d      	lsls	r5, r3
 800a8fe:	4b66      	ldr	r3, [pc, #408]	; (800aa98 <_dtoa_r+0x394>)
 800a900:	9802      	ldr	r0, [sp, #8]
 800a902:	18f3      	adds	r3, r6, r3
 800a904:	40d8      	lsrs	r0, r3
 800a906:	4328      	orrs	r0, r5
 800a908:	f7f7 fc08 	bl	800211c <__aeabi_ui2d>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4c63      	ldr	r4, [pc, #396]	; (800aa9c <_dtoa_r+0x398>)
 800a910:	3e01      	subs	r6, #1
 800a912:	1909      	adds	r1, r1, r4
 800a914:	9318      	str	r3, [sp, #96]	; 0x60
 800a916:	e776      	b.n	800a806 <_dtoa_r+0x102>
 800a918:	2320      	movs	r3, #32
 800a91a:	9802      	ldr	r0, [sp, #8]
 800a91c:	1a9b      	subs	r3, r3, r2
 800a91e:	4098      	lsls	r0, r3
 800a920:	e7f2      	b.n	800a908 <_dtoa_r+0x204>
 800a922:	9016      	str	r0, [sp, #88]	; 0x58
 800a924:	e7b8      	b.n	800a898 <_dtoa_r+0x194>
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	9a02      	ldr	r2, [sp, #8]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	930a      	str	r3, [sp, #40]	; 0x28
 800a92e:	4253      	negs	r3, r2
 800a930:	930e      	str	r3, [sp, #56]	; 0x38
 800a932:	2300      	movs	r3, #0
 800a934:	9315      	str	r3, [sp, #84]	; 0x54
 800a936:	e7c7      	b.n	800a8c8 <_dtoa_r+0x1c4>
 800a938:	2300      	movs	r3, #0
 800a93a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a93c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a93e:	930c      	str	r3, [sp, #48]	; 0x30
 800a940:	9307      	str	r3, [sp, #28]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dc13      	bgt.n	800a96e <_dtoa_r+0x26a>
 800a946:	2301      	movs	r3, #1
 800a948:	001a      	movs	r2, r3
 800a94a:	930c      	str	r3, [sp, #48]	; 0x30
 800a94c:	9307      	str	r3, [sp, #28]
 800a94e:	9223      	str	r2, [sp, #140]	; 0x8c
 800a950:	e00d      	b.n	800a96e <_dtoa_r+0x26a>
 800a952:	2301      	movs	r3, #1
 800a954:	e7f1      	b.n	800a93a <_dtoa_r+0x236>
 800a956:	2300      	movs	r3, #0
 800a958:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a95a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a95c:	4694      	mov	ip, r2
 800a95e:	9b02      	ldr	r3, [sp, #8]
 800a960:	4463      	add	r3, ip
 800a962:	930c      	str	r3, [sp, #48]	; 0x30
 800a964:	3301      	adds	r3, #1
 800a966:	9307      	str	r3, [sp, #28]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc00      	bgt.n	800a96e <_dtoa_r+0x26a>
 800a96c:	2301      	movs	r3, #1
 800a96e:	2200      	movs	r2, #0
 800a970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a972:	6042      	str	r2, [r0, #4]
 800a974:	3204      	adds	r2, #4
 800a976:	0015      	movs	r5, r2
 800a978:	3514      	adds	r5, #20
 800a97a:	6841      	ldr	r1, [r0, #4]
 800a97c:	429d      	cmp	r5, r3
 800a97e:	d919      	bls.n	800a9b4 <_dtoa_r+0x2b0>
 800a980:	0038      	movs	r0, r7
 800a982:	f001 f895 	bl	800bab0 <_Balloc>
 800a986:	9006      	str	r0, [sp, #24]
 800a988:	2800      	cmp	r0, #0
 800a98a:	d117      	bne.n	800a9bc <_dtoa_r+0x2b8>
 800a98c:	21d5      	movs	r1, #213	; 0xd5
 800a98e:	0002      	movs	r2, r0
 800a990:	4b43      	ldr	r3, [pc, #268]	; (800aaa0 <_dtoa_r+0x39c>)
 800a992:	0049      	lsls	r1, r1, #1
 800a994:	e6cb      	b.n	800a72e <_dtoa_r+0x2a>
 800a996:	2301      	movs	r3, #1
 800a998:	e7de      	b.n	800a958 <_dtoa_r+0x254>
 800a99a:	2300      	movs	r3, #0
 800a99c:	940f      	str	r4, [sp, #60]	; 0x3c
 800a99e:	9322      	str	r3, [sp, #136]	; 0x88
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9a4:	9307      	str	r3, [sp, #28]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	3313      	adds	r3, #19
 800a9aa:	e7d0      	b.n	800a94e <_dtoa_r+0x24a>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9b0:	3b02      	subs	r3, #2
 800a9b2:	e7f6      	b.n	800a9a2 <_dtoa_r+0x29e>
 800a9b4:	3101      	adds	r1, #1
 800a9b6:	6041      	str	r1, [r0, #4]
 800a9b8:	0052      	lsls	r2, r2, #1
 800a9ba:	e7dc      	b.n	800a976 <_dtoa_r+0x272>
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	9a06      	ldr	r2, [sp, #24]
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	9b07      	ldr	r3, [sp, #28]
 800a9c4:	2b0e      	cmp	r3, #14
 800a9c6:	d900      	bls.n	800a9ca <_dtoa_r+0x2c6>
 800a9c8:	e0eb      	b.n	800aba2 <_dtoa_r+0x49e>
 800a9ca:	2c00      	cmp	r4, #0
 800a9cc:	d100      	bne.n	800a9d0 <_dtoa_r+0x2cc>
 800a9ce:	e0e8      	b.n	800aba2 <_dtoa_r+0x49e>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd68      	ble.n	800aaa8 <_dtoa_r+0x3a4>
 800a9d6:	001a      	movs	r2, r3
 800a9d8:	210f      	movs	r1, #15
 800a9da:	4b2d      	ldr	r3, [pc, #180]	; (800aa90 <_dtoa_r+0x38c>)
 800a9dc:	400a      	ands	r2, r1
 800a9de:	00d2      	lsls	r2, r2, #3
 800a9e0:	189b      	adds	r3, r3, r2
 800a9e2:	681d      	ldr	r5, [r3, #0]
 800a9e4:	685e      	ldr	r6, [r3, #4]
 800a9e6:	9b02      	ldr	r3, [sp, #8]
 800a9e8:	111c      	asrs	r4, r3, #4
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	9310      	str	r3, [sp, #64]	; 0x40
 800a9ee:	9b02      	ldr	r3, [sp, #8]
 800a9f0:	05db      	lsls	r3, r3, #23
 800a9f2:	d50b      	bpl.n	800aa0c <_dtoa_r+0x308>
 800a9f4:	4b2b      	ldr	r3, [pc, #172]	; (800aaa4 <_dtoa_r+0x3a0>)
 800a9f6:	400c      	ands	r4, r1
 800a9f8:	6a1a      	ldr	r2, [r3, #32]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a9fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa00:	f7f6 f908 	bl	8000c14 <__aeabi_ddiv>
 800aa04:	2303      	movs	r3, #3
 800aa06:	9008      	str	r0, [sp, #32]
 800aa08:	9109      	str	r1, [sp, #36]	; 0x24
 800aa0a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa0c:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <_dtoa_r+0x3a0>)
 800aa0e:	9314      	str	r3, [sp, #80]	; 0x50
 800aa10:	2c00      	cmp	r4, #0
 800aa12:	d108      	bne.n	800aa26 <_dtoa_r+0x322>
 800aa14:	9808      	ldr	r0, [sp, #32]
 800aa16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa18:	002a      	movs	r2, r5
 800aa1a:	0033      	movs	r3, r6
 800aa1c:	f7f6 f8fa 	bl	8000c14 <__aeabi_ddiv>
 800aa20:	9008      	str	r0, [sp, #32]
 800aa22:	9109      	str	r1, [sp, #36]	; 0x24
 800aa24:	e05c      	b.n	800aae0 <_dtoa_r+0x3dc>
 800aa26:	2301      	movs	r3, #1
 800aa28:	421c      	tst	r4, r3
 800aa2a:	d00b      	beq.n	800aa44 <_dtoa_r+0x340>
 800aa2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa2e:	0028      	movs	r0, r5
 800aa30:	3301      	adds	r3, #1
 800aa32:	9310      	str	r3, [sp, #64]	; 0x40
 800aa34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa36:	0031      	movs	r1, r6
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f7f6 fcec 	bl	8001418 <__aeabi_dmul>
 800aa40:	0005      	movs	r5, r0
 800aa42:	000e      	movs	r6, r1
 800aa44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa46:	1064      	asrs	r4, r4, #1
 800aa48:	3308      	adds	r3, #8
 800aa4a:	e7e0      	b.n	800aa0e <_dtoa_r+0x30a>
 800aa4c:	0800e18e 	.word	0x0800e18e
 800aa50:	0800e1a5 	.word	0x0800e1a5
 800aa54:	7ff00000 	.word	0x7ff00000
 800aa58:	0000270f 	.word	0x0000270f
 800aa5c:	0800e18a 	.word	0x0800e18a
 800aa60:	0800e18d 	.word	0x0800e18d
 800aa64:	0800e3f9 	.word	0x0800e3f9
 800aa68:	0800e3fa 	.word	0x0800e3fa
 800aa6c:	3ff00000 	.word	0x3ff00000
 800aa70:	fffffc01 	.word	0xfffffc01
 800aa74:	3ff80000 	.word	0x3ff80000
 800aa78:	636f4361 	.word	0x636f4361
 800aa7c:	3fd287a7 	.word	0x3fd287a7
 800aa80:	8b60c8b3 	.word	0x8b60c8b3
 800aa84:	3fc68a28 	.word	0x3fc68a28
 800aa88:	509f79fb 	.word	0x509f79fb
 800aa8c:	3fd34413 	.word	0x3fd34413
 800aa90:	0800e310 	.word	0x0800e310
 800aa94:	00000432 	.word	0x00000432
 800aa98:	00000412 	.word	0x00000412
 800aa9c:	fe100000 	.word	0xfe100000
 800aaa0:	0800e200 	.word	0x0800e200
 800aaa4:	0800e2e8 	.word	0x0800e2e8
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	9310      	str	r3, [sp, #64]	; 0x40
 800aaac:	9b02      	ldr	r3, [sp, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d016      	beq.n	800aae0 <_dtoa_r+0x3dc>
 800aab2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aab4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aab6:	425c      	negs	r4, r3
 800aab8:	230f      	movs	r3, #15
 800aaba:	4ab6      	ldr	r2, [pc, #728]	; (800ad94 <_dtoa_r+0x690>)
 800aabc:	4023      	ands	r3, r4
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	18d3      	adds	r3, r2, r3
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f7f6 fca7 	bl	8001418 <__aeabi_dmul>
 800aaca:	2601      	movs	r6, #1
 800aacc:	2300      	movs	r3, #0
 800aace:	9008      	str	r0, [sp, #32]
 800aad0:	9109      	str	r1, [sp, #36]	; 0x24
 800aad2:	4db1      	ldr	r5, [pc, #708]	; (800ad98 <_dtoa_r+0x694>)
 800aad4:	1124      	asrs	r4, r4, #4
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	d000      	beq.n	800aadc <_dtoa_r+0x3d8>
 800aada:	e094      	b.n	800ac06 <_dtoa_r+0x502>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d19f      	bne.n	800aa20 <_dtoa_r+0x31c>
 800aae0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d100      	bne.n	800aae8 <_dtoa_r+0x3e4>
 800aae6:	e09b      	b.n	800ac20 <_dtoa_r+0x51c>
 800aae8:	9c08      	ldr	r4, [sp, #32]
 800aaea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aaec:	2200      	movs	r2, #0
 800aaee:	0020      	movs	r0, r4
 800aaf0:	0029      	movs	r1, r5
 800aaf2:	4baa      	ldr	r3, [pc, #680]	; (800ad9c <_dtoa_r+0x698>)
 800aaf4:	f7f5 fcba 	bl	800046c <__aeabi_dcmplt>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d100      	bne.n	800aafe <_dtoa_r+0x3fa>
 800aafc:	e090      	b.n	800ac20 <_dtoa_r+0x51c>
 800aafe:	9b07      	ldr	r3, [sp, #28]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d100      	bne.n	800ab06 <_dtoa_r+0x402>
 800ab04:	e08c      	b.n	800ac20 <_dtoa_r+0x51c>
 800ab06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dd46      	ble.n	800ab9a <_dtoa_r+0x496>
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	0020      	movs	r0, r4
 800ab12:	0029      	movs	r1, r5
 800ab14:	1e5e      	subs	r6, r3, #1
 800ab16:	4ba2      	ldr	r3, [pc, #648]	; (800ada0 <_dtoa_r+0x69c>)
 800ab18:	f7f6 fc7e 	bl	8001418 <__aeabi_dmul>
 800ab1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab1e:	9008      	str	r0, [sp, #32]
 800ab20:	9109      	str	r1, [sp, #36]	; 0x24
 800ab22:	3301      	adds	r3, #1
 800ab24:	9310      	str	r3, [sp, #64]	; 0x40
 800ab26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab28:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab2a:	9c08      	ldr	r4, [sp, #32]
 800ab2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab2e:	9314      	str	r3, [sp, #80]	; 0x50
 800ab30:	f7f7 fac4 	bl	80020bc <__aeabi_i2d>
 800ab34:	0022      	movs	r2, r4
 800ab36:	002b      	movs	r3, r5
 800ab38:	f7f6 fc6e 	bl	8001418 <__aeabi_dmul>
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	4b99      	ldr	r3, [pc, #612]	; (800ada4 <_dtoa_r+0x6a0>)
 800ab40:	f7f5 fd2c 	bl	800059c <__aeabi_dadd>
 800ab44:	9010      	str	r0, [sp, #64]	; 0x40
 800ab46:	9111      	str	r1, [sp, #68]	; 0x44
 800ab48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab4c:	9208      	str	r2, [sp, #32]
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	4a95      	ldr	r2, [pc, #596]	; (800ada8 <_dtoa_r+0x6a4>)
 800ab52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab54:	4694      	mov	ip, r2
 800ab56:	4463      	add	r3, ip
 800ab58:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d161      	bne.n	800ac26 <_dtoa_r+0x522>
 800ab62:	2200      	movs	r2, #0
 800ab64:	0020      	movs	r0, r4
 800ab66:	0029      	movs	r1, r5
 800ab68:	4b90      	ldr	r3, [pc, #576]	; (800adac <_dtoa_r+0x6a8>)
 800ab6a:	f7f6 fec1 	bl	80018f0 <__aeabi_dsub>
 800ab6e:	9a08      	ldr	r2, [sp, #32]
 800ab70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab72:	0004      	movs	r4, r0
 800ab74:	000d      	movs	r5, r1
 800ab76:	f7f5 fc8d 	bl	8000494 <__aeabi_dcmpgt>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d000      	beq.n	800ab80 <_dtoa_r+0x47c>
 800ab7e:	e2af      	b.n	800b0e0 <_dtoa_r+0x9dc>
 800ab80:	488b      	ldr	r0, [pc, #556]	; (800adb0 <_dtoa_r+0x6ac>)
 800ab82:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab84:	4684      	mov	ip, r0
 800ab86:	4461      	add	r1, ip
 800ab88:	000b      	movs	r3, r1
 800ab8a:	0020      	movs	r0, r4
 800ab8c:	0029      	movs	r1, r5
 800ab8e:	9a08      	ldr	r2, [sp, #32]
 800ab90:	f7f5 fc6c 	bl	800046c <__aeabi_dcmplt>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d000      	beq.n	800ab9a <_dtoa_r+0x496>
 800ab98:	e29f      	b.n	800b0da <_dtoa_r+0x9d6>
 800ab9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ab9e:	9308      	str	r3, [sp, #32]
 800aba0:	9409      	str	r4, [sp, #36]	; 0x24
 800aba2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	da00      	bge.n	800abaa <_dtoa_r+0x4a6>
 800aba8:	e172      	b.n	800ae90 <_dtoa_r+0x78c>
 800abaa:	9a02      	ldr	r2, [sp, #8]
 800abac:	2a0e      	cmp	r2, #14
 800abae:	dd00      	ble.n	800abb2 <_dtoa_r+0x4ae>
 800abb0:	e16e      	b.n	800ae90 <_dtoa_r+0x78c>
 800abb2:	4b78      	ldr	r3, [pc, #480]	; (800ad94 <_dtoa_r+0x690>)
 800abb4:	00d2      	lsls	r2, r2, #3
 800abb6:	189b      	adds	r3, r3, r2
 800abb8:	685c      	ldr	r4, [r3, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	930a      	str	r3, [sp, #40]	; 0x28
 800abbe:	940b      	str	r4, [sp, #44]	; 0x2c
 800abc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	db00      	blt.n	800abc8 <_dtoa_r+0x4c4>
 800abc6:	e0f7      	b.n	800adb8 <_dtoa_r+0x6b4>
 800abc8:	9b07      	ldr	r3, [sp, #28]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dd00      	ble.n	800abd0 <_dtoa_r+0x4cc>
 800abce:	e0f3      	b.n	800adb8 <_dtoa_r+0x6b4>
 800abd0:	d000      	beq.n	800abd4 <_dtoa_r+0x4d0>
 800abd2:	e282      	b.n	800b0da <_dtoa_r+0x9d6>
 800abd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abd8:	2200      	movs	r2, #0
 800abda:	4b74      	ldr	r3, [pc, #464]	; (800adac <_dtoa_r+0x6a8>)
 800abdc:	f7f6 fc1c 	bl	8001418 <__aeabi_dmul>
 800abe0:	9a08      	ldr	r2, [sp, #32]
 800abe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe4:	f7f5 fc60 	bl	80004a8 <__aeabi_dcmpge>
 800abe8:	9e07      	ldr	r6, [sp, #28]
 800abea:	0035      	movs	r5, r6
 800abec:	2800      	cmp	r0, #0
 800abee:	d000      	beq.n	800abf2 <_dtoa_r+0x4ee>
 800abf0:	e259      	b.n	800b0a6 <_dtoa_r+0x9a2>
 800abf2:	9b06      	ldr	r3, [sp, #24]
 800abf4:	9a06      	ldr	r2, [sp, #24]
 800abf6:	3301      	adds	r3, #1
 800abf8:	9308      	str	r3, [sp, #32]
 800abfa:	2331      	movs	r3, #49	; 0x31
 800abfc:	7013      	strb	r3, [r2, #0]
 800abfe:	9b02      	ldr	r3, [sp, #8]
 800ac00:	3301      	adds	r3, #1
 800ac02:	9302      	str	r3, [sp, #8]
 800ac04:	e254      	b.n	800b0b0 <_dtoa_r+0x9ac>
 800ac06:	4234      	tst	r4, r6
 800ac08:	d007      	beq.n	800ac1a <_dtoa_r+0x516>
 800ac0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9310      	str	r3, [sp, #64]	; 0x40
 800ac10:	682a      	ldr	r2, [r5, #0]
 800ac12:	686b      	ldr	r3, [r5, #4]
 800ac14:	f7f6 fc00 	bl	8001418 <__aeabi_dmul>
 800ac18:	0033      	movs	r3, r6
 800ac1a:	1064      	asrs	r4, r4, #1
 800ac1c:	3508      	adds	r5, #8
 800ac1e:	e75a      	b.n	800aad6 <_dtoa_r+0x3d2>
 800ac20:	9e02      	ldr	r6, [sp, #8]
 800ac22:	9b07      	ldr	r3, [sp, #28]
 800ac24:	e780      	b.n	800ab28 <_dtoa_r+0x424>
 800ac26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac2a:	1e5a      	subs	r2, r3, #1
 800ac2c:	4b59      	ldr	r3, [pc, #356]	; (800ad94 <_dtoa_r+0x690>)
 800ac2e:	00d2      	lsls	r2, r2, #3
 800ac30:	189b      	adds	r3, r3, r2
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d051      	beq.n	800acde <_dtoa_r+0x5da>
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	495d      	ldr	r1, [pc, #372]	; (800adb4 <_dtoa_r+0x6b0>)
 800ac3e:	f7f5 ffe9 	bl	8000c14 <__aeabi_ddiv>
 800ac42:	9a08      	ldr	r2, [sp, #32]
 800ac44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac46:	f7f6 fe53 	bl	80018f0 <__aeabi_dsub>
 800ac4a:	9a06      	ldr	r2, [sp, #24]
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	4694      	mov	ip, r2
 800ac50:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac54:	9010      	str	r0, [sp, #64]	; 0x40
 800ac56:	9111      	str	r1, [sp, #68]	; 0x44
 800ac58:	4463      	add	r3, ip
 800ac5a:	9319      	str	r3, [sp, #100]	; 0x64
 800ac5c:	0029      	movs	r1, r5
 800ac5e:	0020      	movs	r0, r4
 800ac60:	f7f7 f9f6 	bl	8002050 <__aeabi_d2iz>
 800ac64:	9014      	str	r0, [sp, #80]	; 0x50
 800ac66:	f7f7 fa29 	bl	80020bc <__aeabi_i2d>
 800ac6a:	0002      	movs	r2, r0
 800ac6c:	000b      	movs	r3, r1
 800ac6e:	0020      	movs	r0, r4
 800ac70:	0029      	movs	r1, r5
 800ac72:	f7f6 fe3d 	bl	80018f0 <__aeabi_dsub>
 800ac76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	9308      	str	r3, [sp, #32]
 800ac7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac80:	0004      	movs	r4, r0
 800ac82:	3330      	adds	r3, #48	; 0x30
 800ac84:	7013      	strb	r3, [r2, #0]
 800ac86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac8a:	000d      	movs	r5, r1
 800ac8c:	f7f5 fbee 	bl	800046c <__aeabi_dcmplt>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d175      	bne.n	800ad80 <_dtoa_r+0x67c>
 800ac94:	0022      	movs	r2, r4
 800ac96:	002b      	movs	r3, r5
 800ac98:	2000      	movs	r0, #0
 800ac9a:	4940      	ldr	r1, [pc, #256]	; (800ad9c <_dtoa_r+0x698>)
 800ac9c:	f7f6 fe28 	bl	80018f0 <__aeabi_dsub>
 800aca0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aca4:	f7f5 fbe2 	bl	800046c <__aeabi_dcmplt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d000      	beq.n	800acae <_dtoa_r+0x5aa>
 800acac:	e0d2      	b.n	800ae54 <_dtoa_r+0x750>
 800acae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acb0:	9a08      	ldr	r2, [sp, #32]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d100      	bne.n	800acb8 <_dtoa_r+0x5b4>
 800acb6:	e770      	b.n	800ab9a <_dtoa_r+0x496>
 800acb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800acbc:	2200      	movs	r2, #0
 800acbe:	4b38      	ldr	r3, [pc, #224]	; (800ada0 <_dtoa_r+0x69c>)
 800acc0:	f7f6 fbaa 	bl	8001418 <__aeabi_dmul>
 800acc4:	4b36      	ldr	r3, [pc, #216]	; (800ada0 <_dtoa_r+0x69c>)
 800acc6:	9010      	str	r0, [sp, #64]	; 0x40
 800acc8:	9111      	str	r1, [sp, #68]	; 0x44
 800acca:	2200      	movs	r2, #0
 800accc:	0020      	movs	r0, r4
 800acce:	0029      	movs	r1, r5
 800acd0:	f7f6 fba2 	bl	8001418 <__aeabi_dmul>
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	0004      	movs	r4, r0
 800acd8:	000d      	movs	r5, r1
 800acda:	9317      	str	r3, [sp, #92]	; 0x5c
 800acdc:	e7be      	b.n	800ac5c <_dtoa_r+0x558>
 800acde:	9808      	ldr	r0, [sp, #32]
 800ace0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ace2:	f7f6 fb99 	bl	8001418 <__aeabi_dmul>
 800ace6:	9a06      	ldr	r2, [sp, #24]
 800ace8:	9b06      	ldr	r3, [sp, #24]
 800acea:	4694      	mov	ip, r2
 800acec:	9308      	str	r3, [sp, #32]
 800acee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acf0:	9010      	str	r0, [sp, #64]	; 0x40
 800acf2:	9111      	str	r1, [sp, #68]	; 0x44
 800acf4:	4463      	add	r3, ip
 800acf6:	9319      	str	r3, [sp, #100]	; 0x64
 800acf8:	0029      	movs	r1, r5
 800acfa:	0020      	movs	r0, r4
 800acfc:	f7f7 f9a8 	bl	8002050 <__aeabi_d2iz>
 800ad00:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad02:	f7f7 f9db 	bl	80020bc <__aeabi_i2d>
 800ad06:	0002      	movs	r2, r0
 800ad08:	000b      	movs	r3, r1
 800ad0a:	0020      	movs	r0, r4
 800ad0c:	0029      	movs	r1, r5
 800ad0e:	f7f6 fdef 	bl	80018f0 <__aeabi_dsub>
 800ad12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad14:	9a08      	ldr	r2, [sp, #32]
 800ad16:	3330      	adds	r3, #48	; 0x30
 800ad18:	7013      	strb	r3, [r2, #0]
 800ad1a:	0013      	movs	r3, r2
 800ad1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad1e:	3301      	adds	r3, #1
 800ad20:	0004      	movs	r4, r0
 800ad22:	000d      	movs	r5, r1
 800ad24:	9308      	str	r3, [sp, #32]
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d12c      	bne.n	800ad84 <_dtoa_r+0x680>
 800ad2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad2e:	9a06      	ldr	r2, [sp, #24]
 800ad30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad32:	4694      	mov	ip, r2
 800ad34:	4463      	add	r3, ip
 800ad36:	2200      	movs	r2, #0
 800ad38:	9308      	str	r3, [sp, #32]
 800ad3a:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <_dtoa_r+0x6b0>)
 800ad3c:	f7f5 fc2e 	bl	800059c <__aeabi_dadd>
 800ad40:	0002      	movs	r2, r0
 800ad42:	000b      	movs	r3, r1
 800ad44:	0020      	movs	r0, r4
 800ad46:	0029      	movs	r1, r5
 800ad48:	f7f5 fba4 	bl	8000494 <__aeabi_dcmpgt>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d000      	beq.n	800ad52 <_dtoa_r+0x64e>
 800ad50:	e080      	b.n	800ae54 <_dtoa_r+0x750>
 800ad52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad56:	2000      	movs	r0, #0
 800ad58:	4916      	ldr	r1, [pc, #88]	; (800adb4 <_dtoa_r+0x6b0>)
 800ad5a:	f7f6 fdc9 	bl	80018f0 <__aeabi_dsub>
 800ad5e:	0002      	movs	r2, r0
 800ad60:	000b      	movs	r3, r1
 800ad62:	0020      	movs	r0, r4
 800ad64:	0029      	movs	r1, r5
 800ad66:	f7f5 fb81 	bl	800046c <__aeabi_dcmplt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d100      	bne.n	800ad70 <_dtoa_r+0x66c>
 800ad6e:	e714      	b.n	800ab9a <_dtoa_r+0x496>
 800ad70:	9b08      	ldr	r3, [sp, #32]
 800ad72:	001a      	movs	r2, r3
 800ad74:	3a01      	subs	r2, #1
 800ad76:	9208      	str	r2, [sp, #32]
 800ad78:	7812      	ldrb	r2, [r2, #0]
 800ad7a:	2a30      	cmp	r2, #48	; 0x30
 800ad7c:	d0f8      	beq.n	800ad70 <_dtoa_r+0x66c>
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	9602      	str	r6, [sp, #8]
 800ad82:	e055      	b.n	800ae30 <_dtoa_r+0x72c>
 800ad84:	2200      	movs	r2, #0
 800ad86:	4b06      	ldr	r3, [pc, #24]	; (800ada0 <_dtoa_r+0x69c>)
 800ad88:	f7f6 fb46 	bl	8001418 <__aeabi_dmul>
 800ad8c:	0004      	movs	r4, r0
 800ad8e:	000d      	movs	r5, r1
 800ad90:	e7b2      	b.n	800acf8 <_dtoa_r+0x5f4>
 800ad92:	46c0      	nop			; (mov r8, r8)
 800ad94:	0800e310 	.word	0x0800e310
 800ad98:	0800e2e8 	.word	0x0800e2e8
 800ad9c:	3ff00000 	.word	0x3ff00000
 800ada0:	40240000 	.word	0x40240000
 800ada4:	401c0000 	.word	0x401c0000
 800ada8:	fcc00000 	.word	0xfcc00000
 800adac:	40140000 	.word	0x40140000
 800adb0:	7cc00000 	.word	0x7cc00000
 800adb4:	3fe00000 	.word	0x3fe00000
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	9e06      	ldr	r6, [sp, #24]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	199b      	adds	r3, r3, r6
 800adc0:	930c      	str	r3, [sp, #48]	; 0x30
 800adc2:	9c08      	ldr	r4, [sp, #32]
 800adc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800adc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adca:	0020      	movs	r0, r4
 800adcc:	0029      	movs	r1, r5
 800adce:	f7f5 ff21 	bl	8000c14 <__aeabi_ddiv>
 800add2:	f7f7 f93d 	bl	8002050 <__aeabi_d2iz>
 800add6:	9007      	str	r0, [sp, #28]
 800add8:	f7f7 f970 	bl	80020bc <__aeabi_i2d>
 800addc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade0:	f7f6 fb1a 	bl	8001418 <__aeabi_dmul>
 800ade4:	0002      	movs	r2, r0
 800ade6:	000b      	movs	r3, r1
 800ade8:	0020      	movs	r0, r4
 800adea:	0029      	movs	r1, r5
 800adec:	f7f6 fd80 	bl	80018f0 <__aeabi_dsub>
 800adf0:	0033      	movs	r3, r6
 800adf2:	9a07      	ldr	r2, [sp, #28]
 800adf4:	3601      	adds	r6, #1
 800adf6:	3230      	adds	r2, #48	; 0x30
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adfc:	9608      	str	r6, [sp, #32]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d139      	bne.n	800ae76 <_dtoa_r+0x772>
 800ae02:	0002      	movs	r2, r0
 800ae04:	000b      	movs	r3, r1
 800ae06:	f7f5 fbc9 	bl	800059c <__aeabi_dadd>
 800ae0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae0e:	0004      	movs	r4, r0
 800ae10:	000d      	movs	r5, r1
 800ae12:	f7f5 fb3f 	bl	8000494 <__aeabi_dcmpgt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d11b      	bne.n	800ae52 <_dtoa_r+0x74e>
 800ae1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1e:	0020      	movs	r0, r4
 800ae20:	0029      	movs	r1, r5
 800ae22:	f7f5 fb1d 	bl	8000460 <__aeabi_dcmpeq>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d002      	beq.n	800ae30 <_dtoa_r+0x72c>
 800ae2a:	9b07      	ldr	r3, [sp, #28]
 800ae2c:	07db      	lsls	r3, r3, #31
 800ae2e:	d410      	bmi.n	800ae52 <_dtoa_r+0x74e>
 800ae30:	0038      	movs	r0, r7
 800ae32:	9905      	ldr	r1, [sp, #20]
 800ae34:	f000 fe80 	bl	800bb38 <_Bfree>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9a08      	ldr	r2, [sp, #32]
 800ae3c:	9802      	ldr	r0, [sp, #8]
 800ae3e:	7013      	strb	r3, [r2, #0]
 800ae40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae42:	3001      	adds	r0, #1
 800ae44:	6018      	str	r0, [r3, #0]
 800ae46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d100      	bne.n	800ae4e <_dtoa_r+0x74a>
 800ae4c:	e4a6      	b.n	800a79c <_dtoa_r+0x98>
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	e4a4      	b.n	800a79c <_dtoa_r+0x98>
 800ae52:	9e02      	ldr	r6, [sp, #8]
 800ae54:	9b08      	ldr	r3, [sp, #32]
 800ae56:	9308      	str	r3, [sp, #32]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	2a39      	cmp	r2, #57	; 0x39
 800ae5e:	d106      	bne.n	800ae6e <_dtoa_r+0x76a>
 800ae60:	9a06      	ldr	r2, [sp, #24]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d1f7      	bne.n	800ae56 <_dtoa_r+0x752>
 800ae66:	2230      	movs	r2, #48	; 0x30
 800ae68:	9906      	ldr	r1, [sp, #24]
 800ae6a:	3601      	adds	r6, #1
 800ae6c:	700a      	strb	r2, [r1, #0]
 800ae6e:	781a      	ldrb	r2, [r3, #0]
 800ae70:	3201      	adds	r2, #1
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e784      	b.n	800ad80 <_dtoa_r+0x67c>
 800ae76:	2200      	movs	r2, #0
 800ae78:	4baa      	ldr	r3, [pc, #680]	; (800b124 <_dtoa_r+0xa20>)
 800ae7a:	f7f6 facd 	bl	8001418 <__aeabi_dmul>
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2300      	movs	r3, #0
 800ae82:	0004      	movs	r4, r0
 800ae84:	000d      	movs	r5, r1
 800ae86:	f7f5 faeb 	bl	8000460 <__aeabi_dcmpeq>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d09b      	beq.n	800adc6 <_dtoa_r+0x6c2>
 800ae8e:	e7cf      	b.n	800ae30 <_dtoa_r+0x72c>
 800ae90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae92:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ae94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	d012      	beq.n	800aec0 <_dtoa_r+0x7bc>
 800ae9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae9c:	2a01      	cmp	r2, #1
 800ae9e:	dc66      	bgt.n	800af6e <_dtoa_r+0x86a>
 800aea0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	d05d      	beq.n	800af62 <_dtoa_r+0x85e>
 800aea6:	4aa0      	ldr	r2, [pc, #640]	; (800b128 <_dtoa_r+0xa24>)
 800aea8:	189b      	adds	r3, r3, r2
 800aeaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeac:	2101      	movs	r1, #1
 800aeae:	18d2      	adds	r2, r2, r3
 800aeb0:	920a      	str	r2, [sp, #40]	; 0x28
 800aeb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeb4:	0038      	movs	r0, r7
 800aeb6:	18d3      	adds	r3, r2, r3
 800aeb8:	930d      	str	r3, [sp, #52]	; 0x34
 800aeba:	f000 ff39 	bl	800bd30 <__i2b>
 800aebe:	0005      	movs	r5, r0
 800aec0:	2c00      	cmp	r4, #0
 800aec2:	dd0e      	ble.n	800aee2 <_dtoa_r+0x7de>
 800aec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dd0b      	ble.n	800aee2 <_dtoa_r+0x7de>
 800aeca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aecc:	0023      	movs	r3, r4
 800aece:	4294      	cmp	r4, r2
 800aed0:	dd00      	ble.n	800aed4 <_dtoa_r+0x7d0>
 800aed2:	0013      	movs	r3, r2
 800aed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aed6:	1ae4      	subs	r4, r4, r3
 800aed8:	1ad2      	subs	r2, r2, r3
 800aeda:	920a      	str	r2, [sp, #40]	; 0x28
 800aedc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	930d      	str	r3, [sp, #52]	; 0x34
 800aee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d01f      	beq.n	800af28 <_dtoa_r+0x824>
 800aee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d054      	beq.n	800af98 <_dtoa_r+0x894>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	dd11      	ble.n	800af16 <_dtoa_r+0x812>
 800aef2:	0029      	movs	r1, r5
 800aef4:	0032      	movs	r2, r6
 800aef6:	0038      	movs	r0, r7
 800aef8:	f000 ffe0 	bl	800bebc <__pow5mult>
 800aefc:	9a05      	ldr	r2, [sp, #20]
 800aefe:	0001      	movs	r1, r0
 800af00:	0005      	movs	r5, r0
 800af02:	0038      	movs	r0, r7
 800af04:	f000 ff2a 	bl	800bd5c <__multiply>
 800af08:	9905      	ldr	r1, [sp, #20]
 800af0a:	9014      	str	r0, [sp, #80]	; 0x50
 800af0c:	0038      	movs	r0, r7
 800af0e:	f000 fe13 	bl	800bb38 <_Bfree>
 800af12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af18:	1b9a      	subs	r2, r3, r6
 800af1a:	42b3      	cmp	r3, r6
 800af1c:	d004      	beq.n	800af28 <_dtoa_r+0x824>
 800af1e:	0038      	movs	r0, r7
 800af20:	9905      	ldr	r1, [sp, #20]
 800af22:	f000 ffcb 	bl	800bebc <__pow5mult>
 800af26:	9005      	str	r0, [sp, #20]
 800af28:	2101      	movs	r1, #1
 800af2a:	0038      	movs	r0, r7
 800af2c:	f000 ff00 	bl	800bd30 <__i2b>
 800af30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af32:	0006      	movs	r6, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd31      	ble.n	800af9c <_dtoa_r+0x898>
 800af38:	001a      	movs	r2, r3
 800af3a:	0001      	movs	r1, r0
 800af3c:	0038      	movs	r0, r7
 800af3e:	f000 ffbd 	bl	800bebc <__pow5mult>
 800af42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af44:	0006      	movs	r6, r0
 800af46:	2b01      	cmp	r3, #1
 800af48:	dd2d      	ble.n	800afa6 <_dtoa_r+0x8a2>
 800af4a:	2300      	movs	r3, #0
 800af4c:	930e      	str	r3, [sp, #56]	; 0x38
 800af4e:	6933      	ldr	r3, [r6, #16]
 800af50:	3303      	adds	r3, #3
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	18f3      	adds	r3, r6, r3
 800af56:	6858      	ldr	r0, [r3, #4]
 800af58:	f000 fea2 	bl	800bca0 <__hi0bits>
 800af5c:	2320      	movs	r3, #32
 800af5e:	1a18      	subs	r0, r3, r0
 800af60:	e039      	b.n	800afd6 <_dtoa_r+0x8d2>
 800af62:	2336      	movs	r3, #54	; 0x36
 800af64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af6a:	1a9b      	subs	r3, r3, r2
 800af6c:	e79d      	b.n	800aeaa <_dtoa_r+0x7a6>
 800af6e:	9b07      	ldr	r3, [sp, #28]
 800af70:	1e5e      	subs	r6, r3, #1
 800af72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af74:	42b3      	cmp	r3, r6
 800af76:	db07      	blt.n	800af88 <_dtoa_r+0x884>
 800af78:	1b9e      	subs	r6, r3, r6
 800af7a:	9b07      	ldr	r3, [sp, #28]
 800af7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da93      	bge.n	800aeaa <_dtoa_r+0x7a6>
 800af82:	1ae4      	subs	r4, r4, r3
 800af84:	2300      	movs	r3, #0
 800af86:	e790      	b.n	800aeaa <_dtoa_r+0x7a6>
 800af88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af8c:	1af3      	subs	r3, r6, r3
 800af8e:	18d3      	adds	r3, r2, r3
 800af90:	960e      	str	r6, [sp, #56]	; 0x38
 800af92:	9315      	str	r3, [sp, #84]	; 0x54
 800af94:	2600      	movs	r6, #0
 800af96:	e7f0      	b.n	800af7a <_dtoa_r+0x876>
 800af98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af9a:	e7c0      	b.n	800af1e <_dtoa_r+0x81a>
 800af9c:	2300      	movs	r3, #0
 800af9e:	930e      	str	r3, [sp, #56]	; 0x38
 800afa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	dc13      	bgt.n	800afce <_dtoa_r+0x8ca>
 800afa6:	2300      	movs	r3, #0
 800afa8:	930e      	str	r3, [sp, #56]	; 0x38
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10e      	bne.n	800afce <_dtoa_r+0x8ca>
 800afb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb2:	031b      	lsls	r3, r3, #12
 800afb4:	d10b      	bne.n	800afce <_dtoa_r+0x8ca>
 800afb6:	4b5d      	ldr	r3, [pc, #372]	; (800b12c <_dtoa_r+0xa28>)
 800afb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afba:	4213      	tst	r3, r2
 800afbc:	d007      	beq.n	800afce <_dtoa_r+0x8ca>
 800afbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc0:	3301      	adds	r3, #1
 800afc2:	930a      	str	r3, [sp, #40]	; 0x28
 800afc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc6:	3301      	adds	r3, #1
 800afc8:	930d      	str	r3, [sp, #52]	; 0x34
 800afca:	2301      	movs	r3, #1
 800afcc:	930e      	str	r3, [sp, #56]	; 0x38
 800afce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afd0:	2001      	movs	r0, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1bb      	bne.n	800af4e <_dtoa_r+0x84a>
 800afd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd8:	221f      	movs	r2, #31
 800afda:	1818      	adds	r0, r3, r0
 800afdc:	0003      	movs	r3, r0
 800afde:	4013      	ands	r3, r2
 800afe0:	4210      	tst	r0, r2
 800afe2:	d046      	beq.n	800b072 <_dtoa_r+0x96e>
 800afe4:	3201      	adds	r2, #1
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	2a04      	cmp	r2, #4
 800afea:	dd3f      	ble.n	800b06c <_dtoa_r+0x968>
 800afec:	221c      	movs	r2, #28
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff2:	18e4      	adds	r4, r4, r3
 800aff4:	18d2      	adds	r2, r2, r3
 800aff6:	920a      	str	r2, [sp, #40]	; 0x28
 800aff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800affa:	18d3      	adds	r3, r2, r3
 800affc:	930d      	str	r3, [sp, #52]	; 0x34
 800affe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b000:	2b00      	cmp	r3, #0
 800b002:	dd05      	ble.n	800b010 <_dtoa_r+0x90c>
 800b004:	001a      	movs	r2, r3
 800b006:	0038      	movs	r0, r7
 800b008:	9905      	ldr	r1, [sp, #20]
 800b00a:	f000 ffb3 	bl	800bf74 <__lshift>
 800b00e:	9005      	str	r0, [sp, #20]
 800b010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b012:	2b00      	cmp	r3, #0
 800b014:	dd05      	ble.n	800b022 <_dtoa_r+0x91e>
 800b016:	0031      	movs	r1, r6
 800b018:	001a      	movs	r2, r3
 800b01a:	0038      	movs	r0, r7
 800b01c:	f000 ffaa 	bl	800bf74 <__lshift>
 800b020:	0006      	movs	r6, r0
 800b022:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b024:	2b00      	cmp	r3, #0
 800b026:	d026      	beq.n	800b076 <_dtoa_r+0x972>
 800b028:	0031      	movs	r1, r6
 800b02a:	9805      	ldr	r0, [sp, #20]
 800b02c:	f001 f810 	bl	800c050 <__mcmp>
 800b030:	2800      	cmp	r0, #0
 800b032:	da20      	bge.n	800b076 <_dtoa_r+0x972>
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	220a      	movs	r2, #10
 800b038:	3b01      	subs	r3, #1
 800b03a:	9302      	str	r3, [sp, #8]
 800b03c:	0038      	movs	r0, r7
 800b03e:	2300      	movs	r3, #0
 800b040:	9905      	ldr	r1, [sp, #20]
 800b042:	f000 fd9d 	bl	800bb80 <__multadd>
 800b046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b048:	9005      	str	r0, [sp, #20]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d100      	bne.n	800b050 <_dtoa_r+0x94c>
 800b04e:	e166      	b.n	800b31e <_dtoa_r+0xc1a>
 800b050:	2300      	movs	r3, #0
 800b052:	0029      	movs	r1, r5
 800b054:	220a      	movs	r2, #10
 800b056:	0038      	movs	r0, r7
 800b058:	f000 fd92 	bl	800bb80 <__multadd>
 800b05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b05e:	0005      	movs	r5, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	dc47      	bgt.n	800b0f4 <_dtoa_r+0x9f0>
 800b064:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b066:	2b02      	cmp	r3, #2
 800b068:	dc0d      	bgt.n	800b086 <_dtoa_r+0x982>
 800b06a:	e043      	b.n	800b0f4 <_dtoa_r+0x9f0>
 800b06c:	2a04      	cmp	r2, #4
 800b06e:	d0c6      	beq.n	800affe <_dtoa_r+0x8fa>
 800b070:	0013      	movs	r3, r2
 800b072:	331c      	adds	r3, #28
 800b074:	e7bc      	b.n	800aff0 <_dtoa_r+0x8ec>
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dc35      	bgt.n	800b0e8 <_dtoa_r+0x9e4>
 800b07c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b07e:	2b02      	cmp	r3, #2
 800b080:	dd32      	ble.n	800b0e8 <_dtoa_r+0x9e4>
 800b082:	9b07      	ldr	r3, [sp, #28]
 800b084:	930c      	str	r3, [sp, #48]	; 0x30
 800b086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10c      	bne.n	800b0a6 <_dtoa_r+0x9a2>
 800b08c:	0031      	movs	r1, r6
 800b08e:	2205      	movs	r2, #5
 800b090:	0038      	movs	r0, r7
 800b092:	f000 fd75 	bl	800bb80 <__multadd>
 800b096:	0006      	movs	r6, r0
 800b098:	0001      	movs	r1, r0
 800b09a:	9805      	ldr	r0, [sp, #20]
 800b09c:	f000 ffd8 	bl	800c050 <__mcmp>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	dd00      	ble.n	800b0a6 <_dtoa_r+0x9a2>
 800b0a4:	e5a5      	b.n	800abf2 <_dtoa_r+0x4ee>
 800b0a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0a8:	43db      	mvns	r3, r3
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	9b06      	ldr	r3, [sp, #24]
 800b0ae:	9308      	str	r3, [sp, #32]
 800b0b0:	2400      	movs	r4, #0
 800b0b2:	0031      	movs	r1, r6
 800b0b4:	0038      	movs	r0, r7
 800b0b6:	f000 fd3f 	bl	800bb38 <_Bfree>
 800b0ba:	2d00      	cmp	r5, #0
 800b0bc:	d100      	bne.n	800b0c0 <_dtoa_r+0x9bc>
 800b0be:	e6b7      	b.n	800ae30 <_dtoa_r+0x72c>
 800b0c0:	2c00      	cmp	r4, #0
 800b0c2:	d005      	beq.n	800b0d0 <_dtoa_r+0x9cc>
 800b0c4:	42ac      	cmp	r4, r5
 800b0c6:	d003      	beq.n	800b0d0 <_dtoa_r+0x9cc>
 800b0c8:	0021      	movs	r1, r4
 800b0ca:	0038      	movs	r0, r7
 800b0cc:	f000 fd34 	bl	800bb38 <_Bfree>
 800b0d0:	0029      	movs	r1, r5
 800b0d2:	0038      	movs	r0, r7
 800b0d4:	f000 fd30 	bl	800bb38 <_Bfree>
 800b0d8:	e6aa      	b.n	800ae30 <_dtoa_r+0x72c>
 800b0da:	2600      	movs	r6, #0
 800b0dc:	0035      	movs	r5, r6
 800b0de:	e7e2      	b.n	800b0a6 <_dtoa_r+0x9a2>
 800b0e0:	9602      	str	r6, [sp, #8]
 800b0e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b0e4:	0035      	movs	r5, r6
 800b0e6:	e584      	b.n	800abf2 <_dtoa_r+0x4ee>
 800b0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d100      	bne.n	800b0f0 <_dtoa_r+0x9ec>
 800b0ee:	e0ce      	b.n	800b28e <_dtoa_r+0xb8a>
 800b0f0:	9b07      	ldr	r3, [sp, #28]
 800b0f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	dd05      	ble.n	800b104 <_dtoa_r+0xa00>
 800b0f8:	0029      	movs	r1, r5
 800b0fa:	0022      	movs	r2, r4
 800b0fc:	0038      	movs	r0, r7
 800b0fe:	f000 ff39 	bl	800bf74 <__lshift>
 800b102:	0005      	movs	r5, r0
 800b104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b106:	0028      	movs	r0, r5
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d022      	beq.n	800b152 <_dtoa_r+0xa4e>
 800b10c:	0038      	movs	r0, r7
 800b10e:	6869      	ldr	r1, [r5, #4]
 800b110:	f000 fcce 	bl	800bab0 <_Balloc>
 800b114:	1e04      	subs	r4, r0, #0
 800b116:	d10f      	bne.n	800b138 <_dtoa_r+0xa34>
 800b118:	0002      	movs	r2, r0
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <_dtoa_r+0xa2c>)
 800b11c:	4905      	ldr	r1, [pc, #20]	; (800b134 <_dtoa_r+0xa30>)
 800b11e:	f7ff fb06 	bl	800a72e <_dtoa_r+0x2a>
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	40240000 	.word	0x40240000
 800b128:	00000433 	.word	0x00000433
 800b12c:	7ff00000 	.word	0x7ff00000
 800b130:	0800e200 	.word	0x0800e200
 800b134:	000002ea 	.word	0x000002ea
 800b138:	0029      	movs	r1, r5
 800b13a:	692b      	ldr	r3, [r5, #16]
 800b13c:	310c      	adds	r1, #12
 800b13e:	1c9a      	adds	r2, r3, #2
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	300c      	adds	r0, #12
 800b144:	f000 fcab 	bl	800ba9e <memcpy>
 800b148:	2201      	movs	r2, #1
 800b14a:	0021      	movs	r1, r4
 800b14c:	0038      	movs	r0, r7
 800b14e:	f000 ff11 	bl	800bf74 <__lshift>
 800b152:	9b06      	ldr	r3, [sp, #24]
 800b154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b156:	930a      	str	r3, [sp, #40]	; 0x28
 800b158:	3b01      	subs	r3, #1
 800b15a:	189b      	adds	r3, r3, r2
 800b15c:	2201      	movs	r2, #1
 800b15e:	002c      	movs	r4, r5
 800b160:	0005      	movs	r5, r0
 800b162:	9314      	str	r3, [sp, #80]	; 0x50
 800b164:	9b08      	ldr	r3, [sp, #32]
 800b166:	4013      	ands	r3, r2
 800b168:	930f      	str	r3, [sp, #60]	; 0x3c
 800b16a:	0031      	movs	r1, r6
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	f7ff fa3d 	bl	800a5ec <quorem>
 800b172:	0003      	movs	r3, r0
 800b174:	0021      	movs	r1, r4
 800b176:	3330      	adds	r3, #48	; 0x30
 800b178:	900d      	str	r0, [sp, #52]	; 0x34
 800b17a:	9805      	ldr	r0, [sp, #20]
 800b17c:	9307      	str	r3, [sp, #28]
 800b17e:	f000 ff67 	bl	800c050 <__mcmp>
 800b182:	002a      	movs	r2, r5
 800b184:	900e      	str	r0, [sp, #56]	; 0x38
 800b186:	0031      	movs	r1, r6
 800b188:	0038      	movs	r0, r7
 800b18a:	f000 ff7d 	bl	800c088 <__mdiff>
 800b18e:	68c3      	ldr	r3, [r0, #12]
 800b190:	9008      	str	r0, [sp, #32]
 800b192:	9310      	str	r3, [sp, #64]	; 0x40
 800b194:	2301      	movs	r3, #1
 800b196:	930c      	str	r3, [sp, #48]	; 0x30
 800b198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d104      	bne.n	800b1a8 <_dtoa_r+0xaa4>
 800b19e:	0001      	movs	r1, r0
 800b1a0:	9805      	ldr	r0, [sp, #20]
 800b1a2:	f000 ff55 	bl	800c050 <__mcmp>
 800b1a6:	900c      	str	r0, [sp, #48]	; 0x30
 800b1a8:	0038      	movs	r0, r7
 800b1aa:	9908      	ldr	r1, [sp, #32]
 800b1ac:	f000 fcc4 	bl	800bb38 <_Bfree>
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	9308      	str	r3, [sp, #32]
 800b1b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	d10c      	bne.n	800b1dc <_dtoa_r+0xad8>
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	2b39      	cmp	r3, #57	; 0x39
 800b1c6:	d026      	beq.n	800b216 <_dtoa_r+0xb12>
 800b1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dd02      	ble.n	800b1d4 <_dtoa_r+0xad0>
 800b1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d0:	3331      	adds	r3, #49	; 0x31
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d6:	9a07      	ldr	r2, [sp, #28]
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	e76a      	b.n	800b0b2 <_dtoa_r+0x9ae>
 800b1dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	db04      	blt.n	800b1ec <_dtoa_r+0xae8>
 800b1e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	d11f      	bne.n	800b22c <_dtoa_r+0xb28>
 800b1ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	ddf0      	ble.n	800b1d4 <_dtoa_r+0xad0>
 800b1f2:	9905      	ldr	r1, [sp, #20]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	0038      	movs	r0, r7
 800b1f8:	f000 febc 	bl	800bf74 <__lshift>
 800b1fc:	0031      	movs	r1, r6
 800b1fe:	9005      	str	r0, [sp, #20]
 800b200:	f000 ff26 	bl	800c050 <__mcmp>
 800b204:	2800      	cmp	r0, #0
 800b206:	dc03      	bgt.n	800b210 <_dtoa_r+0xb0c>
 800b208:	d1e4      	bne.n	800b1d4 <_dtoa_r+0xad0>
 800b20a:	9b07      	ldr	r3, [sp, #28]
 800b20c:	07db      	lsls	r3, r3, #31
 800b20e:	d5e1      	bpl.n	800b1d4 <_dtoa_r+0xad0>
 800b210:	9b07      	ldr	r3, [sp, #28]
 800b212:	2b39      	cmp	r3, #57	; 0x39
 800b214:	d1db      	bne.n	800b1ce <_dtoa_r+0xaca>
 800b216:	2339      	movs	r3, #57	; 0x39
 800b218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b21a:	7013      	strb	r3, [r2, #0]
 800b21c:	9b08      	ldr	r3, [sp, #32]
 800b21e:	9308      	str	r3, [sp, #32]
 800b220:	3b01      	subs	r3, #1
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	2a39      	cmp	r2, #57	; 0x39
 800b226:	d068      	beq.n	800b2fa <_dtoa_r+0xbf6>
 800b228:	3201      	adds	r2, #1
 800b22a:	e7d5      	b.n	800b1d8 <_dtoa_r+0xad4>
 800b22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b22e:	2b00      	cmp	r3, #0
 800b230:	dd07      	ble.n	800b242 <_dtoa_r+0xb3e>
 800b232:	9b07      	ldr	r3, [sp, #28]
 800b234:	2b39      	cmp	r3, #57	; 0x39
 800b236:	d0ee      	beq.n	800b216 <_dtoa_r+0xb12>
 800b238:	9b07      	ldr	r3, [sp, #28]
 800b23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b23c:	3301      	adds	r3, #1
 800b23e:	7013      	strb	r3, [r2, #0]
 800b240:	e737      	b.n	800b0b2 <_dtoa_r+0x9ae>
 800b242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b244:	9a07      	ldr	r2, [sp, #28]
 800b246:	701a      	strb	r2, [r3, #0]
 800b248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d03e      	beq.n	800b2ce <_dtoa_r+0xbca>
 800b250:	2300      	movs	r3, #0
 800b252:	220a      	movs	r2, #10
 800b254:	9905      	ldr	r1, [sp, #20]
 800b256:	0038      	movs	r0, r7
 800b258:	f000 fc92 	bl	800bb80 <__multadd>
 800b25c:	2300      	movs	r3, #0
 800b25e:	9005      	str	r0, [sp, #20]
 800b260:	220a      	movs	r2, #10
 800b262:	0021      	movs	r1, r4
 800b264:	0038      	movs	r0, r7
 800b266:	42ac      	cmp	r4, r5
 800b268:	d106      	bne.n	800b278 <_dtoa_r+0xb74>
 800b26a:	f000 fc89 	bl	800bb80 <__multadd>
 800b26e:	0004      	movs	r4, r0
 800b270:	0005      	movs	r5, r0
 800b272:	9b08      	ldr	r3, [sp, #32]
 800b274:	930a      	str	r3, [sp, #40]	; 0x28
 800b276:	e778      	b.n	800b16a <_dtoa_r+0xa66>
 800b278:	f000 fc82 	bl	800bb80 <__multadd>
 800b27c:	0029      	movs	r1, r5
 800b27e:	0004      	movs	r4, r0
 800b280:	2300      	movs	r3, #0
 800b282:	220a      	movs	r2, #10
 800b284:	0038      	movs	r0, r7
 800b286:	f000 fc7b 	bl	800bb80 <__multadd>
 800b28a:	0005      	movs	r5, r0
 800b28c:	e7f1      	b.n	800b272 <_dtoa_r+0xb6e>
 800b28e:	9b07      	ldr	r3, [sp, #28]
 800b290:	930c      	str	r3, [sp, #48]	; 0x30
 800b292:	2400      	movs	r4, #0
 800b294:	0031      	movs	r1, r6
 800b296:	9805      	ldr	r0, [sp, #20]
 800b298:	f7ff f9a8 	bl	800a5ec <quorem>
 800b29c:	9b06      	ldr	r3, [sp, #24]
 800b29e:	3030      	adds	r0, #48	; 0x30
 800b2a0:	5518      	strb	r0, [r3, r4]
 800b2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2a4:	3401      	adds	r4, #1
 800b2a6:	9007      	str	r0, [sp, #28]
 800b2a8:	42a3      	cmp	r3, r4
 800b2aa:	dd07      	ble.n	800b2bc <_dtoa_r+0xbb8>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	220a      	movs	r2, #10
 800b2b0:	0038      	movs	r0, r7
 800b2b2:	9905      	ldr	r1, [sp, #20]
 800b2b4:	f000 fc64 	bl	800bb80 <__multadd>
 800b2b8:	9005      	str	r0, [sp, #20]
 800b2ba:	e7eb      	b.n	800b294 <_dtoa_r+0xb90>
 800b2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2be:	2001      	movs	r0, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dd00      	ble.n	800b2c6 <_dtoa_r+0xbc2>
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	2400      	movs	r4, #0
 800b2c8:	9b06      	ldr	r3, [sp, #24]
 800b2ca:	181b      	adds	r3, r3, r0
 800b2cc:	9308      	str	r3, [sp, #32]
 800b2ce:	9905      	ldr	r1, [sp, #20]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	0038      	movs	r0, r7
 800b2d4:	f000 fe4e 	bl	800bf74 <__lshift>
 800b2d8:	0031      	movs	r1, r6
 800b2da:	9005      	str	r0, [sp, #20]
 800b2dc:	f000 feb8 	bl	800c050 <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	dc9b      	bgt.n	800b21c <_dtoa_r+0xb18>
 800b2e4:	d102      	bne.n	800b2ec <_dtoa_r+0xbe8>
 800b2e6:	9b07      	ldr	r3, [sp, #28]
 800b2e8:	07db      	lsls	r3, r3, #31
 800b2ea:	d497      	bmi.n	800b21c <_dtoa_r+0xb18>
 800b2ec:	9b08      	ldr	r3, [sp, #32]
 800b2ee:	9308      	str	r3, [sp, #32]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	2a30      	cmp	r2, #48	; 0x30
 800b2f6:	d0fa      	beq.n	800b2ee <_dtoa_r+0xbea>
 800b2f8:	e6db      	b.n	800b0b2 <_dtoa_r+0x9ae>
 800b2fa:	9a06      	ldr	r2, [sp, #24]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d18e      	bne.n	800b21e <_dtoa_r+0xb1a>
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	3301      	adds	r3, #1
 800b304:	9302      	str	r3, [sp, #8]
 800b306:	2331      	movs	r3, #49	; 0x31
 800b308:	e799      	b.n	800b23e <_dtoa_r+0xb3a>
 800b30a:	4b09      	ldr	r3, [pc, #36]	; (800b330 <_dtoa_r+0xc2c>)
 800b30c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b30e:	9306      	str	r3, [sp, #24]
 800b310:	4b08      	ldr	r3, [pc, #32]	; (800b334 <_dtoa_r+0xc30>)
 800b312:	2a00      	cmp	r2, #0
 800b314:	d001      	beq.n	800b31a <_dtoa_r+0xc16>
 800b316:	f7ff fa3f 	bl	800a798 <_dtoa_r+0x94>
 800b31a:	f7ff fa3f 	bl	800a79c <_dtoa_r+0x98>
 800b31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b320:	2b00      	cmp	r3, #0
 800b322:	dcb6      	bgt.n	800b292 <_dtoa_r+0xb8e>
 800b324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b326:	2b02      	cmp	r3, #2
 800b328:	dd00      	ble.n	800b32c <_dtoa_r+0xc28>
 800b32a:	e6ac      	b.n	800b086 <_dtoa_r+0x982>
 800b32c:	e7b1      	b.n	800b292 <_dtoa_r+0xb8e>
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	0800e181 	.word	0x0800e181
 800b334:	0800e189 	.word	0x0800e189

0800b338 <rshift>:
 800b338:	0002      	movs	r2, r0
 800b33a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33c:	6904      	ldr	r4, [r0, #16]
 800b33e:	3214      	adds	r2, #20
 800b340:	0013      	movs	r3, r2
 800b342:	b085      	sub	sp, #20
 800b344:	114f      	asrs	r7, r1, #5
 800b346:	42bc      	cmp	r4, r7
 800b348:	dd31      	ble.n	800b3ae <rshift+0x76>
 800b34a:	00bb      	lsls	r3, r7, #2
 800b34c:	18d3      	adds	r3, r2, r3
 800b34e:	261f      	movs	r6, #31
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	000b      	movs	r3, r1
 800b354:	00a5      	lsls	r5, r4, #2
 800b356:	4033      	ands	r3, r6
 800b358:	1955      	adds	r5, r2, r5
 800b35a:	9302      	str	r3, [sp, #8]
 800b35c:	4231      	tst	r1, r6
 800b35e:	d10c      	bne.n	800b37a <rshift+0x42>
 800b360:	0016      	movs	r6, r2
 800b362:	9901      	ldr	r1, [sp, #4]
 800b364:	428d      	cmp	r5, r1
 800b366:	d838      	bhi.n	800b3da <rshift+0xa2>
 800b368:	9901      	ldr	r1, [sp, #4]
 800b36a:	2300      	movs	r3, #0
 800b36c:	3903      	subs	r1, #3
 800b36e:	428d      	cmp	r5, r1
 800b370:	d301      	bcc.n	800b376 <rshift+0x3e>
 800b372:	1be3      	subs	r3, r4, r7
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	18d3      	adds	r3, r2, r3
 800b378:	e019      	b.n	800b3ae <rshift+0x76>
 800b37a:	2120      	movs	r1, #32
 800b37c:	9b02      	ldr	r3, [sp, #8]
 800b37e:	9e01      	ldr	r6, [sp, #4]
 800b380:	1acb      	subs	r3, r1, r3
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	ce02      	ldmia	r6!, {r1}
 800b386:	9b02      	ldr	r3, [sp, #8]
 800b388:	4694      	mov	ip, r2
 800b38a:	40d9      	lsrs	r1, r3
 800b38c:	9100      	str	r1, [sp, #0]
 800b38e:	42b5      	cmp	r5, r6
 800b390:	d816      	bhi.n	800b3c0 <rshift+0x88>
 800b392:	9e01      	ldr	r6, [sp, #4]
 800b394:	2300      	movs	r3, #0
 800b396:	3601      	adds	r6, #1
 800b398:	42b5      	cmp	r5, r6
 800b39a:	d302      	bcc.n	800b3a2 <rshift+0x6a>
 800b39c:	1be3      	subs	r3, r4, r7
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	3b04      	subs	r3, #4
 800b3a2:	9900      	ldr	r1, [sp, #0]
 800b3a4:	18d3      	adds	r3, r2, r3
 800b3a6:	6019      	str	r1, [r3, #0]
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	d000      	beq.n	800b3ae <rshift+0x76>
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	1a99      	subs	r1, r3, r2
 800b3b0:	1089      	asrs	r1, r1, #2
 800b3b2:	6101      	str	r1, [r0, #16]
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d101      	bne.n	800b3bc <rshift+0x84>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	6143      	str	r3, [r0, #20]
 800b3bc:	b005      	add	sp, #20
 800b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	9903      	ldr	r1, [sp, #12]
 800b3c4:	408b      	lsls	r3, r1
 800b3c6:	9900      	ldr	r1, [sp, #0]
 800b3c8:	4319      	orrs	r1, r3
 800b3ca:	4663      	mov	r3, ip
 800b3cc:	c302      	stmia	r3!, {r1}
 800b3ce:	469c      	mov	ip, r3
 800b3d0:	ce02      	ldmia	r6!, {r1}
 800b3d2:	9b02      	ldr	r3, [sp, #8]
 800b3d4:	40d9      	lsrs	r1, r3
 800b3d6:	9100      	str	r1, [sp, #0]
 800b3d8:	e7d9      	b.n	800b38e <rshift+0x56>
 800b3da:	c908      	ldmia	r1!, {r3}
 800b3dc:	c608      	stmia	r6!, {r3}
 800b3de:	e7c1      	b.n	800b364 <rshift+0x2c>

0800b3e0 <__hexdig_fun>:
 800b3e0:	0002      	movs	r2, r0
 800b3e2:	3a30      	subs	r2, #48	; 0x30
 800b3e4:	0003      	movs	r3, r0
 800b3e6:	2a09      	cmp	r2, #9
 800b3e8:	d802      	bhi.n	800b3f0 <__hexdig_fun+0x10>
 800b3ea:	3b20      	subs	r3, #32
 800b3ec:	b2d8      	uxtb	r0, r3
 800b3ee:	4770      	bx	lr
 800b3f0:	0002      	movs	r2, r0
 800b3f2:	3a61      	subs	r2, #97	; 0x61
 800b3f4:	2a05      	cmp	r2, #5
 800b3f6:	d801      	bhi.n	800b3fc <__hexdig_fun+0x1c>
 800b3f8:	3b47      	subs	r3, #71	; 0x47
 800b3fa:	e7f7      	b.n	800b3ec <__hexdig_fun+0xc>
 800b3fc:	001a      	movs	r2, r3
 800b3fe:	3a41      	subs	r2, #65	; 0x41
 800b400:	2000      	movs	r0, #0
 800b402:	2a05      	cmp	r2, #5
 800b404:	d8f3      	bhi.n	800b3ee <__hexdig_fun+0xe>
 800b406:	3b27      	subs	r3, #39	; 0x27
 800b408:	e7f0      	b.n	800b3ec <__hexdig_fun+0xc>
	...

0800b40c <__gethex>:
 800b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b40e:	b08d      	sub	sp, #52	; 0x34
 800b410:	930a      	str	r3, [sp, #40]	; 0x28
 800b412:	4bbf      	ldr	r3, [pc, #764]	; (800b710 <__gethex+0x304>)
 800b414:	9005      	str	r0, [sp, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	9109      	str	r1, [sp, #36]	; 0x24
 800b41a:	0018      	movs	r0, r3
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	9307      	str	r3, [sp, #28]
 800b420:	f7f4 fe7c 	bl	800011c <strlen>
 800b424:	2202      	movs	r2, #2
 800b426:	9b07      	ldr	r3, [sp, #28]
 800b428:	4252      	negs	r2, r2
 800b42a:	181b      	adds	r3, r3, r0
 800b42c:	3b01      	subs	r3, #1
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	9003      	str	r0, [sp, #12]
 800b432:	930b      	str	r3, [sp, #44]	; 0x2c
 800b434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b436:	6819      	ldr	r1, [r3, #0]
 800b438:	1c8b      	adds	r3, r1, #2
 800b43a:	1a52      	subs	r2, r2, r1
 800b43c:	18d1      	adds	r1, r2, r3
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	9108      	str	r1, [sp, #32]
 800b442:	9901      	ldr	r1, [sp, #4]
 800b444:	3301      	adds	r3, #1
 800b446:	7808      	ldrb	r0, [r1, #0]
 800b448:	2830      	cmp	r0, #48	; 0x30
 800b44a:	d0f7      	beq.n	800b43c <__gethex+0x30>
 800b44c:	f7ff ffc8 	bl	800b3e0 <__hexdig_fun>
 800b450:	2300      	movs	r3, #0
 800b452:	001c      	movs	r4, r3
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	4298      	cmp	r0, r3
 800b458:	d11f      	bne.n	800b49a <__gethex+0x8e>
 800b45a:	9a03      	ldr	r2, [sp, #12]
 800b45c:	9907      	ldr	r1, [sp, #28]
 800b45e:	9801      	ldr	r0, [sp, #4]
 800b460:	f001 fe04 	bl	800d06c <strncmp>
 800b464:	0007      	movs	r7, r0
 800b466:	42a0      	cmp	r0, r4
 800b468:	d000      	beq.n	800b46c <__gethex+0x60>
 800b46a:	e06b      	b.n	800b544 <__gethex+0x138>
 800b46c:	9b01      	ldr	r3, [sp, #4]
 800b46e:	9a03      	ldr	r2, [sp, #12]
 800b470:	5c98      	ldrb	r0, [r3, r2]
 800b472:	189d      	adds	r5, r3, r2
 800b474:	f7ff ffb4 	bl	800b3e0 <__hexdig_fun>
 800b478:	2301      	movs	r3, #1
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	42a0      	cmp	r0, r4
 800b47e:	d030      	beq.n	800b4e2 <__gethex+0xd6>
 800b480:	9501      	str	r5, [sp, #4]
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	7818      	ldrb	r0, [r3, #0]
 800b486:	2830      	cmp	r0, #48	; 0x30
 800b488:	d009      	beq.n	800b49e <__gethex+0x92>
 800b48a:	f7ff ffa9 	bl	800b3e0 <__hexdig_fun>
 800b48e:	4242      	negs	r2, r0
 800b490:	4142      	adcs	r2, r0
 800b492:	2301      	movs	r3, #1
 800b494:	002c      	movs	r4, r5
 800b496:	9204      	str	r2, [sp, #16]
 800b498:	9308      	str	r3, [sp, #32]
 800b49a:	9d01      	ldr	r5, [sp, #4]
 800b49c:	e004      	b.n	800b4a8 <__gethex+0x9c>
 800b49e:	9b01      	ldr	r3, [sp, #4]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	e7ed      	b.n	800b482 <__gethex+0x76>
 800b4a6:	3501      	adds	r5, #1
 800b4a8:	7828      	ldrb	r0, [r5, #0]
 800b4aa:	f7ff ff99 	bl	800b3e0 <__hexdig_fun>
 800b4ae:	1e07      	subs	r7, r0, #0
 800b4b0:	d1f9      	bne.n	800b4a6 <__gethex+0x9a>
 800b4b2:	0028      	movs	r0, r5
 800b4b4:	9a03      	ldr	r2, [sp, #12]
 800b4b6:	9907      	ldr	r1, [sp, #28]
 800b4b8:	f001 fdd8 	bl	800d06c <strncmp>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d10e      	bne.n	800b4de <__gethex+0xd2>
 800b4c0:	2c00      	cmp	r4, #0
 800b4c2:	d107      	bne.n	800b4d4 <__gethex+0xc8>
 800b4c4:	9b03      	ldr	r3, [sp, #12]
 800b4c6:	18ed      	adds	r5, r5, r3
 800b4c8:	002c      	movs	r4, r5
 800b4ca:	7828      	ldrb	r0, [r5, #0]
 800b4cc:	f7ff ff88 	bl	800b3e0 <__hexdig_fun>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d102      	bne.n	800b4da <__gethex+0xce>
 800b4d4:	1b64      	subs	r4, r4, r5
 800b4d6:	00a7      	lsls	r7, r4, #2
 800b4d8:	e003      	b.n	800b4e2 <__gethex+0xd6>
 800b4da:	3501      	adds	r5, #1
 800b4dc:	e7f5      	b.n	800b4ca <__gethex+0xbe>
 800b4de:	2c00      	cmp	r4, #0
 800b4e0:	d1f8      	bne.n	800b4d4 <__gethex+0xc8>
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	782b      	ldrb	r3, [r5, #0]
 800b4e6:	002e      	movs	r6, r5
 800b4e8:	4393      	bics	r3, r2
 800b4ea:	2b50      	cmp	r3, #80	; 0x50
 800b4ec:	d11d      	bne.n	800b52a <__gethex+0x11e>
 800b4ee:	786b      	ldrb	r3, [r5, #1]
 800b4f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b4f2:	d02c      	beq.n	800b54e <__gethex+0x142>
 800b4f4:	2b2d      	cmp	r3, #45	; 0x2d
 800b4f6:	d02e      	beq.n	800b556 <__gethex+0x14a>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	1c6e      	adds	r6, r5, #1
 800b4fc:	9306      	str	r3, [sp, #24]
 800b4fe:	7830      	ldrb	r0, [r6, #0]
 800b500:	f7ff ff6e 	bl	800b3e0 <__hexdig_fun>
 800b504:	1e43      	subs	r3, r0, #1
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2b18      	cmp	r3, #24
 800b50a:	d82b      	bhi.n	800b564 <__gethex+0x158>
 800b50c:	3810      	subs	r0, #16
 800b50e:	0004      	movs	r4, r0
 800b510:	7870      	ldrb	r0, [r6, #1]
 800b512:	f7ff ff65 	bl	800b3e0 <__hexdig_fun>
 800b516:	1e43      	subs	r3, r0, #1
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	3601      	adds	r6, #1
 800b51c:	2b18      	cmp	r3, #24
 800b51e:	d91c      	bls.n	800b55a <__gethex+0x14e>
 800b520:	9b06      	ldr	r3, [sp, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d000      	beq.n	800b528 <__gethex+0x11c>
 800b526:	4264      	negs	r4, r4
 800b528:	193f      	adds	r7, r7, r4
 800b52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52c:	601e      	str	r6, [r3, #0]
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d019      	beq.n	800b568 <__gethex+0x15c>
 800b534:	2600      	movs	r6, #0
 800b536:	9b08      	ldr	r3, [sp, #32]
 800b538:	42b3      	cmp	r3, r6
 800b53a:	d100      	bne.n	800b53e <__gethex+0x132>
 800b53c:	3606      	adds	r6, #6
 800b53e:	0030      	movs	r0, r6
 800b540:	b00d      	add	sp, #52	; 0x34
 800b542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b544:	2301      	movs	r3, #1
 800b546:	2700      	movs	r7, #0
 800b548:	9d01      	ldr	r5, [sp, #4]
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	e7c9      	b.n	800b4e2 <__gethex+0xd6>
 800b54e:	2300      	movs	r3, #0
 800b550:	9306      	str	r3, [sp, #24]
 800b552:	1cae      	adds	r6, r5, #2
 800b554:	e7d3      	b.n	800b4fe <__gethex+0xf2>
 800b556:	2301      	movs	r3, #1
 800b558:	e7fa      	b.n	800b550 <__gethex+0x144>
 800b55a:	230a      	movs	r3, #10
 800b55c:	435c      	muls	r4, r3
 800b55e:	1824      	adds	r4, r4, r0
 800b560:	3c10      	subs	r4, #16
 800b562:	e7d5      	b.n	800b510 <__gethex+0x104>
 800b564:	002e      	movs	r6, r5
 800b566:	e7e0      	b.n	800b52a <__gethex+0x11e>
 800b568:	9b01      	ldr	r3, [sp, #4]
 800b56a:	9904      	ldr	r1, [sp, #16]
 800b56c:	1aeb      	subs	r3, r5, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	2b07      	cmp	r3, #7
 800b572:	dc0a      	bgt.n	800b58a <__gethex+0x17e>
 800b574:	9805      	ldr	r0, [sp, #20]
 800b576:	f000 fa9b 	bl	800bab0 <_Balloc>
 800b57a:	1e04      	subs	r4, r0, #0
 800b57c:	d108      	bne.n	800b590 <__gethex+0x184>
 800b57e:	0002      	movs	r2, r0
 800b580:	21de      	movs	r1, #222	; 0xde
 800b582:	4b64      	ldr	r3, [pc, #400]	; (800b714 <__gethex+0x308>)
 800b584:	4864      	ldr	r0, [pc, #400]	; (800b718 <__gethex+0x30c>)
 800b586:	f001 fe5d 	bl	800d244 <__assert_func>
 800b58a:	3101      	adds	r1, #1
 800b58c:	105b      	asrs	r3, r3, #1
 800b58e:	e7ef      	b.n	800b570 <__gethex+0x164>
 800b590:	0003      	movs	r3, r0
 800b592:	3314      	adds	r3, #20
 800b594:	9304      	str	r3, [sp, #16]
 800b596:	9309      	str	r3, [sp, #36]	; 0x24
 800b598:	2300      	movs	r3, #0
 800b59a:	001e      	movs	r6, r3
 800b59c:	9306      	str	r3, [sp, #24]
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	d340      	bcc.n	800b626 <__gethex+0x21a>
 800b5a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	c540      	stmia	r5!, {r6}
 800b5aa:	1aed      	subs	r5, r5, r3
 800b5ac:	10ad      	asrs	r5, r5, #2
 800b5ae:	0030      	movs	r0, r6
 800b5b0:	6125      	str	r5, [r4, #16]
 800b5b2:	f000 fb75 	bl	800bca0 <__hi0bits>
 800b5b6:	9b02      	ldr	r3, [sp, #8]
 800b5b8:	016d      	lsls	r5, r5, #5
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	1a2e      	subs	r6, r5, r0
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	429e      	cmp	r6, r3
 800b5c2:	dd5a      	ble.n	800b67a <__gethex+0x26e>
 800b5c4:	1af6      	subs	r6, r6, r3
 800b5c6:	0031      	movs	r1, r6
 800b5c8:	0020      	movs	r0, r4
 800b5ca:	f000 ff17 	bl	800c3fc <__any_on>
 800b5ce:	1e05      	subs	r5, r0, #0
 800b5d0:	d016      	beq.n	800b600 <__gethex+0x1f4>
 800b5d2:	2501      	movs	r5, #1
 800b5d4:	211f      	movs	r1, #31
 800b5d6:	0028      	movs	r0, r5
 800b5d8:	1e73      	subs	r3, r6, #1
 800b5da:	4019      	ands	r1, r3
 800b5dc:	4088      	lsls	r0, r1
 800b5de:	0001      	movs	r1, r0
 800b5e0:	115a      	asrs	r2, r3, #5
 800b5e2:	9804      	ldr	r0, [sp, #16]
 800b5e4:	0092      	lsls	r2, r2, #2
 800b5e6:	5812      	ldr	r2, [r2, r0]
 800b5e8:	420a      	tst	r2, r1
 800b5ea:	d009      	beq.n	800b600 <__gethex+0x1f4>
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	dd06      	ble.n	800b5fe <__gethex+0x1f2>
 800b5f0:	0020      	movs	r0, r4
 800b5f2:	1eb1      	subs	r1, r6, #2
 800b5f4:	f000 ff02 	bl	800c3fc <__any_on>
 800b5f8:	3502      	adds	r5, #2
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d100      	bne.n	800b600 <__gethex+0x1f4>
 800b5fe:	2502      	movs	r5, #2
 800b600:	0031      	movs	r1, r6
 800b602:	0020      	movs	r0, r4
 800b604:	f7ff fe98 	bl	800b338 <rshift>
 800b608:	19bf      	adds	r7, r7, r6
 800b60a:	9b02      	ldr	r3, [sp, #8]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	42bb      	cmp	r3, r7
 800b612:	da42      	bge.n	800b69a <__gethex+0x28e>
 800b614:	0021      	movs	r1, r4
 800b616:	9805      	ldr	r0, [sp, #20]
 800b618:	f000 fa8e 	bl	800bb38 <_Bfree>
 800b61c:	2300      	movs	r3, #0
 800b61e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b620:	26a3      	movs	r6, #163	; 0xa3
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	e78b      	b.n	800b53e <__gethex+0x132>
 800b626:	1e6b      	subs	r3, r5, #1
 800b628:	9308      	str	r3, [sp, #32]
 800b62a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	4293      	cmp	r3, r2
 800b630:	d014      	beq.n	800b65c <__gethex+0x250>
 800b632:	9b06      	ldr	r3, [sp, #24]
 800b634:	2b20      	cmp	r3, #32
 800b636:	d104      	bne.n	800b642 <__gethex+0x236>
 800b638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63a:	c340      	stmia	r3!, {r6}
 800b63c:	2600      	movs	r6, #0
 800b63e:	9309      	str	r3, [sp, #36]	; 0x24
 800b640:	9606      	str	r6, [sp, #24]
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	7818      	ldrb	r0, [r3, #0]
 800b646:	f7ff fecb 	bl	800b3e0 <__hexdig_fun>
 800b64a:	230f      	movs	r3, #15
 800b64c:	4018      	ands	r0, r3
 800b64e:	9b06      	ldr	r3, [sp, #24]
 800b650:	9d08      	ldr	r5, [sp, #32]
 800b652:	4098      	lsls	r0, r3
 800b654:	3304      	adds	r3, #4
 800b656:	4306      	orrs	r6, r0
 800b658:	9306      	str	r3, [sp, #24]
 800b65a:	e7a0      	b.n	800b59e <__gethex+0x192>
 800b65c:	2301      	movs	r3, #1
 800b65e:	9a03      	ldr	r2, [sp, #12]
 800b660:	1a9d      	subs	r5, r3, r2
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	195d      	adds	r5, r3, r5
 800b666:	9b01      	ldr	r3, [sp, #4]
 800b668:	429d      	cmp	r5, r3
 800b66a:	d3e2      	bcc.n	800b632 <__gethex+0x226>
 800b66c:	0028      	movs	r0, r5
 800b66e:	9907      	ldr	r1, [sp, #28]
 800b670:	f001 fcfc 	bl	800d06c <strncmp>
 800b674:	2800      	cmp	r0, #0
 800b676:	d1dc      	bne.n	800b632 <__gethex+0x226>
 800b678:	e791      	b.n	800b59e <__gethex+0x192>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	2500      	movs	r5, #0
 800b67e:	429e      	cmp	r6, r3
 800b680:	dac3      	bge.n	800b60a <__gethex+0x1fe>
 800b682:	1b9e      	subs	r6, r3, r6
 800b684:	0021      	movs	r1, r4
 800b686:	0032      	movs	r2, r6
 800b688:	9805      	ldr	r0, [sp, #20]
 800b68a:	f000 fc73 	bl	800bf74 <__lshift>
 800b68e:	0003      	movs	r3, r0
 800b690:	3314      	adds	r3, #20
 800b692:	0004      	movs	r4, r0
 800b694:	1bbf      	subs	r7, r7, r6
 800b696:	9304      	str	r3, [sp, #16]
 800b698:	e7b7      	b.n	800b60a <__gethex+0x1fe>
 800b69a:	9b02      	ldr	r3, [sp, #8]
 800b69c:	685e      	ldr	r6, [r3, #4]
 800b69e:	42be      	cmp	r6, r7
 800b6a0:	dd71      	ble.n	800b786 <__gethex+0x37a>
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	1bf6      	subs	r6, r6, r7
 800b6a6:	42b3      	cmp	r3, r6
 800b6a8:	dc38      	bgt.n	800b71c <__gethex+0x310>
 800b6aa:	9b02      	ldr	r3, [sp, #8]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d026      	beq.n	800b700 <__gethex+0x2f4>
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d028      	beq.n	800b708 <__gethex+0x2fc>
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d119      	bne.n	800b6ee <__gethex+0x2e2>
 800b6ba:	9b01      	ldr	r3, [sp, #4]
 800b6bc:	42b3      	cmp	r3, r6
 800b6be:	d116      	bne.n	800b6ee <__gethex+0x2e2>
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10d      	bne.n	800b6e0 <__gethex+0x2d4>
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	2662      	movs	r6, #98	; 0x62
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	9a01      	ldr	r2, [sp, #4]
 800b6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	9a04      	ldr	r2, [sp, #16]
 800b6d6:	6123      	str	r3, [r4, #16]
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6dc:	601c      	str	r4, [r3, #0]
 800b6de:	e72e      	b.n	800b53e <__gethex+0x132>
 800b6e0:	9901      	ldr	r1, [sp, #4]
 800b6e2:	0020      	movs	r0, r4
 800b6e4:	3901      	subs	r1, #1
 800b6e6:	f000 fe89 	bl	800c3fc <__any_on>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d1ea      	bne.n	800b6c4 <__gethex+0x2b8>
 800b6ee:	0021      	movs	r1, r4
 800b6f0:	9805      	ldr	r0, [sp, #20]
 800b6f2:	f000 fa21 	bl	800bb38 <_Bfree>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6fa:	2650      	movs	r6, #80	; 0x50
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	e71e      	b.n	800b53e <__gethex+0x132>
 800b700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1f3      	bne.n	800b6ee <__gethex+0x2e2>
 800b706:	e7dd      	b.n	800b6c4 <__gethex+0x2b8>
 800b708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1da      	bne.n	800b6c4 <__gethex+0x2b8>
 800b70e:	e7ee      	b.n	800b6ee <__gethex+0x2e2>
 800b710:	0800e278 	.word	0x0800e278
 800b714:	0800e200 	.word	0x0800e200
 800b718:	0800e211 	.word	0x0800e211
 800b71c:	1e77      	subs	r7, r6, #1
 800b71e:	2d00      	cmp	r5, #0
 800b720:	d12f      	bne.n	800b782 <__gethex+0x376>
 800b722:	2f00      	cmp	r7, #0
 800b724:	d004      	beq.n	800b730 <__gethex+0x324>
 800b726:	0039      	movs	r1, r7
 800b728:	0020      	movs	r0, r4
 800b72a:	f000 fe67 	bl	800c3fc <__any_on>
 800b72e:	0005      	movs	r5, r0
 800b730:	231f      	movs	r3, #31
 800b732:	117a      	asrs	r2, r7, #5
 800b734:	401f      	ands	r7, r3
 800b736:	3b1e      	subs	r3, #30
 800b738:	40bb      	lsls	r3, r7
 800b73a:	9904      	ldr	r1, [sp, #16]
 800b73c:	0092      	lsls	r2, r2, #2
 800b73e:	5852      	ldr	r2, [r2, r1]
 800b740:	421a      	tst	r2, r3
 800b742:	d001      	beq.n	800b748 <__gethex+0x33c>
 800b744:	2302      	movs	r3, #2
 800b746:	431d      	orrs	r5, r3
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	0031      	movs	r1, r6
 800b74c:	1b9b      	subs	r3, r3, r6
 800b74e:	2602      	movs	r6, #2
 800b750:	0020      	movs	r0, r4
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	f7ff fdf0 	bl	800b338 <rshift>
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	685f      	ldr	r7, [r3, #4]
 800b75c:	2d00      	cmp	r5, #0
 800b75e:	d041      	beq.n	800b7e4 <__gethex+0x3d8>
 800b760:	9b02      	ldr	r3, [sp, #8]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d010      	beq.n	800b78a <__gethex+0x37e>
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d012      	beq.n	800b792 <__gethex+0x386>
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d106      	bne.n	800b77e <__gethex+0x372>
 800b770:	07aa      	lsls	r2, r5, #30
 800b772:	d504      	bpl.n	800b77e <__gethex+0x372>
 800b774:	9a04      	ldr	r2, [sp, #16]
 800b776:	6810      	ldr	r0, [r2, #0]
 800b778:	4305      	orrs	r5, r0
 800b77a:	421d      	tst	r5, r3
 800b77c:	d10c      	bne.n	800b798 <__gethex+0x38c>
 800b77e:	2310      	movs	r3, #16
 800b780:	e02f      	b.n	800b7e2 <__gethex+0x3d6>
 800b782:	2501      	movs	r5, #1
 800b784:	e7d4      	b.n	800b730 <__gethex+0x324>
 800b786:	2601      	movs	r6, #1
 800b788:	e7e8      	b.n	800b75c <__gethex+0x350>
 800b78a:	2301      	movs	r3, #1
 800b78c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	9313      	str	r3, [sp, #76]	; 0x4c
 800b792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0f2      	beq.n	800b77e <__gethex+0x372>
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	2000      	movs	r0, #0
 800b79c:	9303      	str	r3, [sp, #12]
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	0023      	movs	r3, r4
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	3314      	adds	r3, #20
 800b7a8:	1899      	adds	r1, r3, r2
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	1c55      	adds	r5, r2, #1
 800b7ae:	d01e      	beq.n	800b7ee <__gethex+0x3e2>
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	0023      	movs	r3, r4
 800b7b6:	3314      	adds	r3, #20
 800b7b8:	2e02      	cmp	r6, #2
 800b7ba:	d140      	bne.n	800b83e <__gethex+0x432>
 800b7bc:	9a02      	ldr	r2, [sp, #8]
 800b7be:	9901      	ldr	r1, [sp, #4]
 800b7c0:	6812      	ldr	r2, [r2, #0]
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	428a      	cmp	r2, r1
 800b7c6:	d10b      	bne.n	800b7e0 <__gethex+0x3d4>
 800b7c8:	114a      	asrs	r2, r1, #5
 800b7ca:	211f      	movs	r1, #31
 800b7cc:	9801      	ldr	r0, [sp, #4]
 800b7ce:	0092      	lsls	r2, r2, #2
 800b7d0:	4001      	ands	r1, r0
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	0005      	movs	r5, r0
 800b7d6:	408d      	lsls	r5, r1
 800b7d8:	58d3      	ldr	r3, [r2, r3]
 800b7da:	422b      	tst	r3, r5
 800b7dc:	d000      	beq.n	800b7e0 <__gethex+0x3d4>
 800b7de:	2601      	movs	r6, #1
 800b7e0:	2320      	movs	r3, #32
 800b7e2:	431e      	orrs	r6, r3
 800b7e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7e6:	601c      	str	r4, [r3, #0]
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ea:	601f      	str	r7, [r3, #0]
 800b7ec:	e6a7      	b.n	800b53e <__gethex+0x132>
 800b7ee:	c301      	stmia	r3!, {r0}
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	d8da      	bhi.n	800b7aa <__gethex+0x39e>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	68a2      	ldr	r2, [r4, #8]
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	db17      	blt.n	800b82c <__gethex+0x420>
 800b7fc:	6863      	ldr	r3, [r4, #4]
 800b7fe:	9805      	ldr	r0, [sp, #20]
 800b800:	1c59      	adds	r1, r3, #1
 800b802:	f000 f955 	bl	800bab0 <_Balloc>
 800b806:	1e05      	subs	r5, r0, #0
 800b808:	d103      	bne.n	800b812 <__gethex+0x406>
 800b80a:	0002      	movs	r2, r0
 800b80c:	2184      	movs	r1, #132	; 0x84
 800b80e:	4b1c      	ldr	r3, [pc, #112]	; (800b880 <__gethex+0x474>)
 800b810:	e6b8      	b.n	800b584 <__gethex+0x178>
 800b812:	0021      	movs	r1, r4
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	310c      	adds	r1, #12
 800b818:	1c9a      	adds	r2, r3, #2
 800b81a:	0092      	lsls	r2, r2, #2
 800b81c:	300c      	adds	r0, #12
 800b81e:	f000 f93e 	bl	800ba9e <memcpy>
 800b822:	0021      	movs	r1, r4
 800b824:	9805      	ldr	r0, [sp, #20]
 800b826:	f000 f987 	bl	800bb38 <_Bfree>
 800b82a:	002c      	movs	r4, r5
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	6122      	str	r2, [r4, #16]
 800b832:	2201      	movs	r2, #1
 800b834:	3304      	adds	r3, #4
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	18e3      	adds	r3, r4, r3
 800b83a:	605a      	str	r2, [r3, #4]
 800b83c:	e7ba      	b.n	800b7b4 <__gethex+0x3a8>
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	9903      	ldr	r1, [sp, #12]
 800b842:	428a      	cmp	r2, r1
 800b844:	dd09      	ble.n	800b85a <__gethex+0x44e>
 800b846:	2101      	movs	r1, #1
 800b848:	0020      	movs	r0, r4
 800b84a:	f7ff fd75 	bl	800b338 <rshift>
 800b84e:	9b02      	ldr	r3, [sp, #8]
 800b850:	3701      	adds	r7, #1
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	42bb      	cmp	r3, r7
 800b856:	dac2      	bge.n	800b7de <__gethex+0x3d2>
 800b858:	e6dc      	b.n	800b614 <__gethex+0x208>
 800b85a:	221f      	movs	r2, #31
 800b85c:	9d01      	ldr	r5, [sp, #4]
 800b85e:	9901      	ldr	r1, [sp, #4]
 800b860:	2601      	movs	r6, #1
 800b862:	4015      	ands	r5, r2
 800b864:	4211      	tst	r1, r2
 800b866:	d0bb      	beq.n	800b7e0 <__gethex+0x3d4>
 800b868:	9a04      	ldr	r2, [sp, #16]
 800b86a:	189b      	adds	r3, r3, r2
 800b86c:	3b04      	subs	r3, #4
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	f000 fa16 	bl	800bca0 <__hi0bits>
 800b874:	2320      	movs	r3, #32
 800b876:	1b5d      	subs	r5, r3, r5
 800b878:	42a8      	cmp	r0, r5
 800b87a:	dbe4      	blt.n	800b846 <__gethex+0x43a>
 800b87c:	e7b0      	b.n	800b7e0 <__gethex+0x3d4>
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	0800e200 	.word	0x0800e200

0800b884 <L_shift>:
 800b884:	2308      	movs	r3, #8
 800b886:	b570      	push	{r4, r5, r6, lr}
 800b888:	2520      	movs	r5, #32
 800b88a:	1a9a      	subs	r2, r3, r2
 800b88c:	0092      	lsls	r2, r2, #2
 800b88e:	1aad      	subs	r5, r5, r2
 800b890:	6843      	ldr	r3, [r0, #4]
 800b892:	6806      	ldr	r6, [r0, #0]
 800b894:	001c      	movs	r4, r3
 800b896:	40ac      	lsls	r4, r5
 800b898:	40d3      	lsrs	r3, r2
 800b89a:	4334      	orrs	r4, r6
 800b89c:	6004      	str	r4, [r0, #0]
 800b89e:	6043      	str	r3, [r0, #4]
 800b8a0:	3004      	adds	r0, #4
 800b8a2:	4288      	cmp	r0, r1
 800b8a4:	d3f4      	bcc.n	800b890 <L_shift+0xc>
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}

0800b8a8 <__match>:
 800b8a8:	b530      	push	{r4, r5, lr}
 800b8aa:	6803      	ldr	r3, [r0, #0]
 800b8ac:	780c      	ldrb	r4, [r1, #0]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	2c00      	cmp	r4, #0
 800b8b2:	d102      	bne.n	800b8ba <__match+0x12>
 800b8b4:	6003      	str	r3, [r0, #0]
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	bd30      	pop	{r4, r5, pc}
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	0015      	movs	r5, r2
 800b8be:	3d41      	subs	r5, #65	; 0x41
 800b8c0:	2d19      	cmp	r5, #25
 800b8c2:	d800      	bhi.n	800b8c6 <__match+0x1e>
 800b8c4:	3220      	adds	r2, #32
 800b8c6:	3101      	adds	r1, #1
 800b8c8:	42a2      	cmp	r2, r4
 800b8ca:	d0ef      	beq.n	800b8ac <__match+0x4>
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	e7f3      	b.n	800b8b8 <__match+0x10>

0800b8d0 <__hexnan>:
 800b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8d2:	680b      	ldr	r3, [r1, #0]
 800b8d4:	b08b      	sub	sp, #44	; 0x2c
 800b8d6:	9201      	str	r2, [sp, #4]
 800b8d8:	9901      	ldr	r1, [sp, #4]
 800b8da:	115a      	asrs	r2, r3, #5
 800b8dc:	0092      	lsls	r2, r2, #2
 800b8de:	188a      	adds	r2, r1, r2
 800b8e0:	9202      	str	r2, [sp, #8]
 800b8e2:	0019      	movs	r1, r3
 800b8e4:	221f      	movs	r2, #31
 800b8e6:	4011      	ands	r1, r2
 800b8e8:	9008      	str	r0, [sp, #32]
 800b8ea:	9106      	str	r1, [sp, #24]
 800b8ec:	4213      	tst	r3, r2
 800b8ee:	d002      	beq.n	800b8f6 <__hexnan+0x26>
 800b8f0:	9b02      	ldr	r3, [sp, #8]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	9302      	str	r3, [sp, #8]
 800b8f6:	9b02      	ldr	r3, [sp, #8]
 800b8f8:	2500      	movs	r5, #0
 800b8fa:	1f1e      	subs	r6, r3, #4
 800b8fc:	0037      	movs	r7, r6
 800b8fe:	0034      	movs	r4, r6
 800b900:	9b08      	ldr	r3, [sp, #32]
 800b902:	6035      	str	r5, [r6, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	9507      	str	r5, [sp, #28]
 800b908:	9305      	str	r3, [sp, #20]
 800b90a:	9503      	str	r5, [sp, #12]
 800b90c:	9b05      	ldr	r3, [sp, #20]
 800b90e:	3301      	adds	r3, #1
 800b910:	9309      	str	r3, [sp, #36]	; 0x24
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	9304      	str	r3, [sp, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d028      	beq.n	800b96e <__hexnan+0x9e>
 800b91c:	9804      	ldr	r0, [sp, #16]
 800b91e:	f7ff fd5f 	bl	800b3e0 <__hexdig_fun>
 800b922:	2800      	cmp	r0, #0
 800b924:	d154      	bne.n	800b9d0 <__hexnan+0x100>
 800b926:	9b04      	ldr	r3, [sp, #16]
 800b928:	2b20      	cmp	r3, #32
 800b92a:	d819      	bhi.n	800b960 <__hexnan+0x90>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	9a07      	ldr	r2, [sp, #28]
 800b930:	4293      	cmp	r3, r2
 800b932:	dd12      	ble.n	800b95a <__hexnan+0x8a>
 800b934:	42bc      	cmp	r4, r7
 800b936:	d206      	bcs.n	800b946 <__hexnan+0x76>
 800b938:	2d07      	cmp	r5, #7
 800b93a:	dc04      	bgt.n	800b946 <__hexnan+0x76>
 800b93c:	002a      	movs	r2, r5
 800b93e:	0039      	movs	r1, r7
 800b940:	0020      	movs	r0, r4
 800b942:	f7ff ff9f 	bl	800b884 <L_shift>
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	2508      	movs	r5, #8
 800b94a:	429c      	cmp	r4, r3
 800b94c:	d905      	bls.n	800b95a <__hexnan+0x8a>
 800b94e:	1f27      	subs	r7, r4, #4
 800b950:	2500      	movs	r5, #0
 800b952:	003c      	movs	r4, r7
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	603d      	str	r5, [r7, #0]
 800b958:	9307      	str	r3, [sp, #28]
 800b95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	e7d5      	b.n	800b90c <__hexnan+0x3c>
 800b960:	9b04      	ldr	r3, [sp, #16]
 800b962:	2b29      	cmp	r3, #41	; 0x29
 800b964:	d159      	bne.n	800ba1a <__hexnan+0x14a>
 800b966:	9b05      	ldr	r3, [sp, #20]
 800b968:	9a08      	ldr	r2, [sp, #32]
 800b96a:	3302      	adds	r3, #2
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d052      	beq.n	800ba1a <__hexnan+0x14a>
 800b974:	42bc      	cmp	r4, r7
 800b976:	d206      	bcs.n	800b986 <__hexnan+0xb6>
 800b978:	2d07      	cmp	r5, #7
 800b97a:	dc04      	bgt.n	800b986 <__hexnan+0xb6>
 800b97c:	002a      	movs	r2, r5
 800b97e:	0039      	movs	r1, r7
 800b980:	0020      	movs	r0, r4
 800b982:	f7ff ff7f 	bl	800b884 <L_shift>
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	429c      	cmp	r4, r3
 800b98a:	d935      	bls.n	800b9f8 <__hexnan+0x128>
 800b98c:	001a      	movs	r2, r3
 800b98e:	0023      	movs	r3, r4
 800b990:	cb02      	ldmia	r3!, {r1}
 800b992:	c202      	stmia	r2!, {r1}
 800b994:	429e      	cmp	r6, r3
 800b996:	d2fb      	bcs.n	800b990 <__hexnan+0xc0>
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	1c61      	adds	r1, r4, #1
 800b99c:	1eda      	subs	r2, r3, #3
 800b99e:	2304      	movs	r3, #4
 800b9a0:	4291      	cmp	r1, r2
 800b9a2:	d805      	bhi.n	800b9b0 <__hexnan+0xe0>
 800b9a4:	9b02      	ldr	r3, [sp, #8]
 800b9a6:	3b04      	subs	r3, #4
 800b9a8:	1b1b      	subs	r3, r3, r4
 800b9aa:	089b      	lsrs	r3, r3, #2
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	9a01      	ldr	r2, [sp, #4]
 800b9b2:	18d3      	adds	r3, r2, r3
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	c304      	stmia	r3!, {r2}
 800b9b8:	429e      	cmp	r6, r3
 800b9ba:	d2fc      	bcs.n	800b9b6 <__hexnan+0xe6>
 800b9bc:	6833      	ldr	r3, [r6, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d104      	bne.n	800b9cc <__hexnan+0xfc>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	429e      	cmp	r6, r3
 800b9c6:	d126      	bne.n	800ba16 <__hexnan+0x146>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	6033      	str	r3, [r6, #0]
 800b9cc:	2005      	movs	r0, #5
 800b9ce:	e025      	b.n	800ba1c <__hexnan+0x14c>
 800b9d0:	9b03      	ldr	r3, [sp, #12]
 800b9d2:	3501      	adds	r5, #1
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	9303      	str	r3, [sp, #12]
 800b9d8:	2d08      	cmp	r5, #8
 800b9da:	dd06      	ble.n	800b9ea <__hexnan+0x11a>
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	429c      	cmp	r4, r3
 800b9e0:	d9bb      	bls.n	800b95a <__hexnan+0x8a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2501      	movs	r5, #1
 800b9e6:	3c04      	subs	r4, #4
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	220f      	movs	r2, #15
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	4010      	ands	r0, r2
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4318      	orrs	r0, r3
 800b9f4:	6020      	str	r0, [r4, #0]
 800b9f6:	e7b0      	b.n	800b95a <__hexnan+0x8a>
 800b9f8:	9b06      	ldr	r3, [sp, #24]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0de      	beq.n	800b9bc <__hexnan+0xec>
 800b9fe:	2120      	movs	r1, #32
 800ba00:	9a06      	ldr	r2, [sp, #24]
 800ba02:	9b02      	ldr	r3, [sp, #8]
 800ba04:	1a89      	subs	r1, r1, r2
 800ba06:	2201      	movs	r2, #1
 800ba08:	4252      	negs	r2, r2
 800ba0a:	40ca      	lsrs	r2, r1
 800ba0c:	3b04      	subs	r3, #4
 800ba0e:	6819      	ldr	r1, [r3, #0]
 800ba10:	400a      	ands	r2, r1
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e7d2      	b.n	800b9bc <__hexnan+0xec>
 800ba16:	3e04      	subs	r6, #4
 800ba18:	e7d0      	b.n	800b9bc <__hexnan+0xec>
 800ba1a:	2004      	movs	r0, #4
 800ba1c:	b00b      	add	sp, #44	; 0x2c
 800ba1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba20 <_localeconv_r>:
 800ba20:	4800      	ldr	r0, [pc, #0]	; (800ba24 <_localeconv_r+0x4>)
 800ba22:	4770      	bx	lr
 800ba24:	20000164 	.word	0x20000164

0800ba28 <_lseek_r>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	0004      	movs	r4, r0
 800ba2c:	0008      	movs	r0, r1
 800ba2e:	0011      	movs	r1, r2
 800ba30:	001a      	movs	r2, r3
 800ba32:	2300      	movs	r3, #0
 800ba34:	4d05      	ldr	r5, [pc, #20]	; (800ba4c <_lseek_r+0x24>)
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f8 fdbe 	bl	80045b8 <_lseek>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d103      	bne.n	800ba48 <_lseek_r+0x20>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d000      	beq.n	800ba48 <_lseek_r+0x20>
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	20000614 	.word	0x20000614

0800ba50 <malloc>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	4b03      	ldr	r3, [pc, #12]	; (800ba60 <malloc+0x10>)
 800ba54:	0001      	movs	r1, r0
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	f000 fd8c 	bl	800c574 <_malloc_r>
 800ba5c:	bd10      	pop	{r4, pc}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	2000000c 	.word	0x2000000c

0800ba64 <__ascii_mbtowc>:
 800ba64:	b082      	sub	sp, #8
 800ba66:	2900      	cmp	r1, #0
 800ba68:	d100      	bne.n	800ba6c <__ascii_mbtowc+0x8>
 800ba6a:	a901      	add	r1, sp, #4
 800ba6c:	1e10      	subs	r0, r2, #0
 800ba6e:	d006      	beq.n	800ba7e <__ascii_mbtowc+0x1a>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d006      	beq.n	800ba82 <__ascii_mbtowc+0x1e>
 800ba74:	7813      	ldrb	r3, [r2, #0]
 800ba76:	600b      	str	r3, [r1, #0]
 800ba78:	7810      	ldrb	r0, [r2, #0]
 800ba7a:	1e43      	subs	r3, r0, #1
 800ba7c:	4198      	sbcs	r0, r3
 800ba7e:	b002      	add	sp, #8
 800ba80:	4770      	bx	lr
 800ba82:	2002      	movs	r0, #2
 800ba84:	4240      	negs	r0, r0
 800ba86:	e7fa      	b.n	800ba7e <__ascii_mbtowc+0x1a>

0800ba88 <memchr>:
 800ba88:	b2c9      	uxtb	r1, r1
 800ba8a:	1882      	adds	r2, r0, r2
 800ba8c:	4290      	cmp	r0, r2
 800ba8e:	d101      	bne.n	800ba94 <memchr+0xc>
 800ba90:	2000      	movs	r0, #0
 800ba92:	4770      	bx	lr
 800ba94:	7803      	ldrb	r3, [r0, #0]
 800ba96:	428b      	cmp	r3, r1
 800ba98:	d0fb      	beq.n	800ba92 <memchr+0xa>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	e7f6      	b.n	800ba8c <memchr+0x4>

0800ba9e <memcpy>:
 800ba9e:	2300      	movs	r3, #0
 800baa0:	b510      	push	{r4, lr}
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d100      	bne.n	800baa8 <memcpy+0xa>
 800baa6:	bd10      	pop	{r4, pc}
 800baa8:	5ccc      	ldrb	r4, [r1, r3]
 800baaa:	54c4      	strb	r4, [r0, r3]
 800baac:	3301      	adds	r3, #1
 800baae:	e7f8      	b.n	800baa2 <memcpy+0x4>

0800bab0 <_Balloc>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bab4:	0006      	movs	r6, r0
 800bab6:	000c      	movs	r4, r1
 800bab8:	2d00      	cmp	r5, #0
 800baba:	d10e      	bne.n	800bada <_Balloc+0x2a>
 800babc:	2010      	movs	r0, #16
 800babe:	f7ff ffc7 	bl	800ba50 <malloc>
 800bac2:	1e02      	subs	r2, r0, #0
 800bac4:	6270      	str	r0, [r6, #36]	; 0x24
 800bac6:	d104      	bne.n	800bad2 <_Balloc+0x22>
 800bac8:	2166      	movs	r1, #102	; 0x66
 800baca:	4b19      	ldr	r3, [pc, #100]	; (800bb30 <_Balloc+0x80>)
 800bacc:	4819      	ldr	r0, [pc, #100]	; (800bb34 <_Balloc+0x84>)
 800bace:	f001 fbb9 	bl	800d244 <__assert_func>
 800bad2:	6045      	str	r5, [r0, #4]
 800bad4:	6085      	str	r5, [r0, #8]
 800bad6:	6005      	str	r5, [r0, #0]
 800bad8:	60c5      	str	r5, [r0, #12]
 800bada:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800badc:	68eb      	ldr	r3, [r5, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d013      	beq.n	800bb0a <_Balloc+0x5a>
 800bae2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bae4:	00a2      	lsls	r2, r4, #2
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	189b      	adds	r3, r3, r2
 800baea:	6818      	ldr	r0, [r3, #0]
 800baec:	2800      	cmp	r0, #0
 800baee:	d118      	bne.n	800bb22 <_Balloc+0x72>
 800baf0:	2101      	movs	r1, #1
 800baf2:	000d      	movs	r5, r1
 800baf4:	40a5      	lsls	r5, r4
 800baf6:	1d6a      	adds	r2, r5, #5
 800baf8:	0030      	movs	r0, r6
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	f000 fca1 	bl	800c442 <_calloc_r>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d00c      	beq.n	800bb1e <_Balloc+0x6e>
 800bb04:	6044      	str	r4, [r0, #4]
 800bb06:	6085      	str	r5, [r0, #8]
 800bb08:	e00d      	b.n	800bb26 <_Balloc+0x76>
 800bb0a:	2221      	movs	r2, #33	; 0x21
 800bb0c:	2104      	movs	r1, #4
 800bb0e:	0030      	movs	r0, r6
 800bb10:	f000 fc97 	bl	800c442 <_calloc_r>
 800bb14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb16:	60e8      	str	r0, [r5, #12]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1e1      	bne.n	800bae2 <_Balloc+0x32>
 800bb1e:	2000      	movs	r0, #0
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	6802      	ldr	r2, [r0, #0]
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	6103      	str	r3, [r0, #16]
 800bb2a:	60c3      	str	r3, [r0, #12]
 800bb2c:	e7f8      	b.n	800bb20 <_Balloc+0x70>
 800bb2e:	46c0      	nop			; (mov r8, r8)
 800bb30:	0800e18e 	.word	0x0800e18e
 800bb34:	0800e28c 	.word	0x0800e28c

0800bb38 <_Bfree>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb3c:	0005      	movs	r5, r0
 800bb3e:	000c      	movs	r4, r1
 800bb40:	2e00      	cmp	r6, #0
 800bb42:	d10e      	bne.n	800bb62 <_Bfree+0x2a>
 800bb44:	2010      	movs	r0, #16
 800bb46:	f7ff ff83 	bl	800ba50 <malloc>
 800bb4a:	1e02      	subs	r2, r0, #0
 800bb4c:	6268      	str	r0, [r5, #36]	; 0x24
 800bb4e:	d104      	bne.n	800bb5a <_Bfree+0x22>
 800bb50:	218a      	movs	r1, #138	; 0x8a
 800bb52:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <_Bfree+0x40>)
 800bb54:	4809      	ldr	r0, [pc, #36]	; (800bb7c <_Bfree+0x44>)
 800bb56:	f001 fb75 	bl	800d244 <__assert_func>
 800bb5a:	6046      	str	r6, [r0, #4]
 800bb5c:	6086      	str	r6, [r0, #8]
 800bb5e:	6006      	str	r6, [r0, #0]
 800bb60:	60c6      	str	r6, [r0, #12]
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	d007      	beq.n	800bb76 <_Bfree+0x3e>
 800bb66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb68:	6862      	ldr	r2, [r4, #4]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	189b      	adds	r3, r3, r2
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	601c      	str	r4, [r3, #0]
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	0800e18e 	.word	0x0800e18e
 800bb7c:	0800e28c 	.word	0x0800e28c

0800bb80 <__multadd>:
 800bb80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb82:	000e      	movs	r6, r1
 800bb84:	9001      	str	r0, [sp, #4]
 800bb86:	000c      	movs	r4, r1
 800bb88:	001d      	movs	r5, r3
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	690f      	ldr	r7, [r1, #16]
 800bb8e:	3614      	adds	r6, #20
 800bb90:	6833      	ldr	r3, [r6, #0]
 800bb92:	3001      	adds	r0, #1
 800bb94:	b299      	uxth	r1, r3
 800bb96:	4351      	muls	r1, r2
 800bb98:	0c1b      	lsrs	r3, r3, #16
 800bb9a:	4353      	muls	r3, r2
 800bb9c:	1949      	adds	r1, r1, r5
 800bb9e:	0c0d      	lsrs	r5, r1, #16
 800bba0:	195b      	adds	r3, r3, r5
 800bba2:	0c1d      	lsrs	r5, r3, #16
 800bba4:	b289      	uxth	r1, r1
 800bba6:	041b      	lsls	r3, r3, #16
 800bba8:	185b      	adds	r3, r3, r1
 800bbaa:	c608      	stmia	r6!, {r3}
 800bbac:	4287      	cmp	r7, r0
 800bbae:	dcef      	bgt.n	800bb90 <__multadd+0x10>
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	d022      	beq.n	800bbfa <__multadd+0x7a>
 800bbb4:	68a3      	ldr	r3, [r4, #8]
 800bbb6:	42bb      	cmp	r3, r7
 800bbb8:	dc19      	bgt.n	800bbee <__multadd+0x6e>
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	9801      	ldr	r0, [sp, #4]
 800bbbe:	1c59      	adds	r1, r3, #1
 800bbc0:	f7ff ff76 	bl	800bab0 <_Balloc>
 800bbc4:	1e06      	subs	r6, r0, #0
 800bbc6:	d105      	bne.n	800bbd4 <__multadd+0x54>
 800bbc8:	0002      	movs	r2, r0
 800bbca:	21b5      	movs	r1, #181	; 0xb5
 800bbcc:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <__multadd+0x80>)
 800bbce:	480d      	ldr	r0, [pc, #52]	; (800bc04 <__multadd+0x84>)
 800bbd0:	f001 fb38 	bl	800d244 <__assert_func>
 800bbd4:	0021      	movs	r1, r4
 800bbd6:	6923      	ldr	r3, [r4, #16]
 800bbd8:	310c      	adds	r1, #12
 800bbda:	1c9a      	adds	r2, r3, #2
 800bbdc:	0092      	lsls	r2, r2, #2
 800bbde:	300c      	adds	r0, #12
 800bbe0:	f7ff ff5d 	bl	800ba9e <memcpy>
 800bbe4:	0021      	movs	r1, r4
 800bbe6:	9801      	ldr	r0, [sp, #4]
 800bbe8:	f7ff ffa6 	bl	800bb38 <_Bfree>
 800bbec:	0034      	movs	r4, r6
 800bbee:	1d3b      	adds	r3, r7, #4
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	18e3      	adds	r3, r4, r3
 800bbf4:	605d      	str	r5, [r3, #4]
 800bbf6:	1c7b      	adds	r3, r7, #1
 800bbf8:	6123      	str	r3, [r4, #16]
 800bbfa:	0020      	movs	r0, r4
 800bbfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbfe:	46c0      	nop			; (mov r8, r8)
 800bc00:	0800e200 	.word	0x0800e200
 800bc04:	0800e28c 	.word	0x0800e28c

0800bc08 <__s2b>:
 800bc08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc0a:	0006      	movs	r6, r0
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	000c      	movs	r4, r1
 800bc10:	3008      	adds	r0, #8
 800bc12:	2109      	movs	r1, #9
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	0015      	movs	r5, r2
 800bc18:	f7f4 fb26 	bl	8000268 <__divsi3>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	2100      	movs	r1, #0
 800bc20:	4283      	cmp	r3, r0
 800bc22:	db0a      	blt.n	800bc3a <__s2b+0x32>
 800bc24:	0030      	movs	r0, r6
 800bc26:	f7ff ff43 	bl	800bab0 <_Balloc>
 800bc2a:	1e01      	subs	r1, r0, #0
 800bc2c:	d108      	bne.n	800bc40 <__s2b+0x38>
 800bc2e:	0002      	movs	r2, r0
 800bc30:	4b19      	ldr	r3, [pc, #100]	; (800bc98 <__s2b+0x90>)
 800bc32:	481a      	ldr	r0, [pc, #104]	; (800bc9c <__s2b+0x94>)
 800bc34:	31ce      	adds	r1, #206	; 0xce
 800bc36:	f001 fb05 	bl	800d244 <__assert_func>
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	3101      	adds	r1, #1
 800bc3e:	e7ef      	b.n	800bc20 <__s2b+0x18>
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	6143      	str	r3, [r0, #20]
 800bc44:	2301      	movs	r3, #1
 800bc46:	6103      	str	r3, [r0, #16]
 800bc48:	2d09      	cmp	r5, #9
 800bc4a:	dd18      	ble.n	800bc7e <__s2b+0x76>
 800bc4c:	0023      	movs	r3, r4
 800bc4e:	3309      	adds	r3, #9
 800bc50:	001f      	movs	r7, r3
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	1964      	adds	r4, r4, r5
 800bc56:	783b      	ldrb	r3, [r7, #0]
 800bc58:	220a      	movs	r2, #10
 800bc5a:	0030      	movs	r0, r6
 800bc5c:	3b30      	subs	r3, #48	; 0x30
 800bc5e:	f7ff ff8f 	bl	800bb80 <__multadd>
 800bc62:	3701      	adds	r7, #1
 800bc64:	0001      	movs	r1, r0
 800bc66:	42a7      	cmp	r7, r4
 800bc68:	d1f5      	bne.n	800bc56 <__s2b+0x4e>
 800bc6a:	002c      	movs	r4, r5
 800bc6c:	9b00      	ldr	r3, [sp, #0]
 800bc6e:	3c08      	subs	r4, #8
 800bc70:	191c      	adds	r4, r3, r4
 800bc72:	002f      	movs	r7, r5
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	429f      	cmp	r7, r3
 800bc78:	db04      	blt.n	800bc84 <__s2b+0x7c>
 800bc7a:	0008      	movs	r0, r1
 800bc7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc7e:	2509      	movs	r5, #9
 800bc80:	340a      	adds	r4, #10
 800bc82:	e7f6      	b.n	800bc72 <__s2b+0x6a>
 800bc84:	1b63      	subs	r3, r4, r5
 800bc86:	5ddb      	ldrb	r3, [r3, r7]
 800bc88:	220a      	movs	r2, #10
 800bc8a:	0030      	movs	r0, r6
 800bc8c:	3b30      	subs	r3, #48	; 0x30
 800bc8e:	f7ff ff77 	bl	800bb80 <__multadd>
 800bc92:	3701      	adds	r7, #1
 800bc94:	0001      	movs	r1, r0
 800bc96:	e7ed      	b.n	800bc74 <__s2b+0x6c>
 800bc98:	0800e200 	.word	0x0800e200
 800bc9c:	0800e28c 	.word	0x0800e28c

0800bca0 <__hi0bits>:
 800bca0:	0003      	movs	r3, r0
 800bca2:	0c02      	lsrs	r2, r0, #16
 800bca4:	2000      	movs	r0, #0
 800bca6:	4282      	cmp	r2, r0
 800bca8:	d101      	bne.n	800bcae <__hi0bits+0xe>
 800bcaa:	041b      	lsls	r3, r3, #16
 800bcac:	3010      	adds	r0, #16
 800bcae:	0e1a      	lsrs	r2, r3, #24
 800bcb0:	d101      	bne.n	800bcb6 <__hi0bits+0x16>
 800bcb2:	3008      	adds	r0, #8
 800bcb4:	021b      	lsls	r3, r3, #8
 800bcb6:	0f1a      	lsrs	r2, r3, #28
 800bcb8:	d101      	bne.n	800bcbe <__hi0bits+0x1e>
 800bcba:	3004      	adds	r0, #4
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	0f9a      	lsrs	r2, r3, #30
 800bcc0:	d101      	bne.n	800bcc6 <__hi0bits+0x26>
 800bcc2:	3002      	adds	r0, #2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	db03      	blt.n	800bcd2 <__hi0bits+0x32>
 800bcca:	3001      	adds	r0, #1
 800bccc:	005b      	lsls	r3, r3, #1
 800bcce:	d400      	bmi.n	800bcd2 <__hi0bits+0x32>
 800bcd0:	2020      	movs	r0, #32
 800bcd2:	4770      	bx	lr

0800bcd4 <__lo0bits>:
 800bcd4:	6803      	ldr	r3, [r0, #0]
 800bcd6:	0002      	movs	r2, r0
 800bcd8:	2107      	movs	r1, #7
 800bcda:	0018      	movs	r0, r3
 800bcdc:	4008      	ands	r0, r1
 800bcde:	420b      	tst	r3, r1
 800bce0:	d00d      	beq.n	800bcfe <__lo0bits+0x2a>
 800bce2:	3906      	subs	r1, #6
 800bce4:	2000      	movs	r0, #0
 800bce6:	420b      	tst	r3, r1
 800bce8:	d105      	bne.n	800bcf6 <__lo0bits+0x22>
 800bcea:	3002      	adds	r0, #2
 800bcec:	4203      	tst	r3, r0
 800bcee:	d003      	beq.n	800bcf8 <__lo0bits+0x24>
 800bcf0:	40cb      	lsrs	r3, r1
 800bcf2:	0008      	movs	r0, r1
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	4770      	bx	lr
 800bcf8:	089b      	lsrs	r3, r3, #2
 800bcfa:	6013      	str	r3, [r2, #0]
 800bcfc:	e7fb      	b.n	800bcf6 <__lo0bits+0x22>
 800bcfe:	b299      	uxth	r1, r3
 800bd00:	2900      	cmp	r1, #0
 800bd02:	d101      	bne.n	800bd08 <__lo0bits+0x34>
 800bd04:	2010      	movs	r0, #16
 800bd06:	0c1b      	lsrs	r3, r3, #16
 800bd08:	b2d9      	uxtb	r1, r3
 800bd0a:	2900      	cmp	r1, #0
 800bd0c:	d101      	bne.n	800bd12 <__lo0bits+0x3e>
 800bd0e:	3008      	adds	r0, #8
 800bd10:	0a1b      	lsrs	r3, r3, #8
 800bd12:	0719      	lsls	r1, r3, #28
 800bd14:	d101      	bne.n	800bd1a <__lo0bits+0x46>
 800bd16:	3004      	adds	r0, #4
 800bd18:	091b      	lsrs	r3, r3, #4
 800bd1a:	0799      	lsls	r1, r3, #30
 800bd1c:	d101      	bne.n	800bd22 <__lo0bits+0x4e>
 800bd1e:	3002      	adds	r0, #2
 800bd20:	089b      	lsrs	r3, r3, #2
 800bd22:	07d9      	lsls	r1, r3, #31
 800bd24:	d4e9      	bmi.n	800bcfa <__lo0bits+0x26>
 800bd26:	3001      	adds	r0, #1
 800bd28:	085b      	lsrs	r3, r3, #1
 800bd2a:	d1e6      	bne.n	800bcfa <__lo0bits+0x26>
 800bd2c:	2020      	movs	r0, #32
 800bd2e:	e7e2      	b.n	800bcf6 <__lo0bits+0x22>

0800bd30 <__i2b>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	000c      	movs	r4, r1
 800bd34:	2101      	movs	r1, #1
 800bd36:	f7ff febb 	bl	800bab0 <_Balloc>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d106      	bne.n	800bd4c <__i2b+0x1c>
 800bd3e:	21a0      	movs	r1, #160	; 0xa0
 800bd40:	0002      	movs	r2, r0
 800bd42:	4b04      	ldr	r3, [pc, #16]	; (800bd54 <__i2b+0x24>)
 800bd44:	4804      	ldr	r0, [pc, #16]	; (800bd58 <__i2b+0x28>)
 800bd46:	0049      	lsls	r1, r1, #1
 800bd48:	f001 fa7c 	bl	800d244 <__assert_func>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	6144      	str	r4, [r0, #20]
 800bd50:	6103      	str	r3, [r0, #16]
 800bd52:	bd10      	pop	{r4, pc}
 800bd54:	0800e200 	.word	0x0800e200
 800bd58:	0800e28c 	.word	0x0800e28c

0800bd5c <__multiply>:
 800bd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd5e:	690b      	ldr	r3, [r1, #16]
 800bd60:	0014      	movs	r4, r2
 800bd62:	6912      	ldr	r2, [r2, #16]
 800bd64:	000d      	movs	r5, r1
 800bd66:	b089      	sub	sp, #36	; 0x24
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	da01      	bge.n	800bd70 <__multiply+0x14>
 800bd6c:	0025      	movs	r5, r4
 800bd6e:	000c      	movs	r4, r1
 800bd70:	692f      	ldr	r7, [r5, #16]
 800bd72:	6926      	ldr	r6, [r4, #16]
 800bd74:	6869      	ldr	r1, [r5, #4]
 800bd76:	19bb      	adds	r3, r7, r6
 800bd78:	9302      	str	r3, [sp, #8]
 800bd7a:	68ab      	ldr	r3, [r5, #8]
 800bd7c:	19ba      	adds	r2, r7, r6
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	da00      	bge.n	800bd84 <__multiply+0x28>
 800bd82:	3101      	adds	r1, #1
 800bd84:	f7ff fe94 	bl	800bab0 <_Balloc>
 800bd88:	9001      	str	r0, [sp, #4]
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d106      	bne.n	800bd9c <__multiply+0x40>
 800bd8e:	215e      	movs	r1, #94	; 0x5e
 800bd90:	0002      	movs	r2, r0
 800bd92:	4b48      	ldr	r3, [pc, #288]	; (800beb4 <__multiply+0x158>)
 800bd94:	4848      	ldr	r0, [pc, #288]	; (800beb8 <__multiply+0x15c>)
 800bd96:	31ff      	adds	r1, #255	; 0xff
 800bd98:	f001 fa54 	bl	800d244 <__assert_func>
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	3314      	adds	r3, #20
 800bda2:	469c      	mov	ip, r3
 800bda4:	19bb      	adds	r3, r7, r6
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4463      	add	r3, ip
 800bdaa:	9303      	str	r3, [sp, #12]
 800bdac:	4663      	mov	r3, ip
 800bdae:	9903      	ldr	r1, [sp, #12]
 800bdb0:	428b      	cmp	r3, r1
 800bdb2:	d32c      	bcc.n	800be0e <__multiply+0xb2>
 800bdb4:	002b      	movs	r3, r5
 800bdb6:	0022      	movs	r2, r4
 800bdb8:	3314      	adds	r3, #20
 800bdba:	00bf      	lsls	r7, r7, #2
 800bdbc:	3214      	adds	r2, #20
 800bdbe:	9306      	str	r3, [sp, #24]
 800bdc0:	00b6      	lsls	r6, r6, #2
 800bdc2:	19db      	adds	r3, r3, r7
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	1993      	adds	r3, r2, r6
 800bdc8:	9307      	str	r3, [sp, #28]
 800bdca:	2304      	movs	r3, #4
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	002b      	movs	r3, r5
 800bdd0:	9904      	ldr	r1, [sp, #16]
 800bdd2:	3315      	adds	r3, #21
 800bdd4:	9200      	str	r2, [sp, #0]
 800bdd6:	4299      	cmp	r1, r3
 800bdd8:	d305      	bcc.n	800bde6 <__multiply+0x8a>
 800bdda:	1b4b      	subs	r3, r1, r5
 800bddc:	3b15      	subs	r3, #21
 800bdde:	089b      	lsrs	r3, r3, #2
 800bde0:	3301      	adds	r3, #1
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	9b07      	ldr	r3, [sp, #28]
 800bde8:	9a00      	ldr	r2, [sp, #0]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d311      	bcc.n	800be12 <__multiply+0xb6>
 800bdee:	9b02      	ldr	r3, [sp, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dd06      	ble.n	800be02 <__multiply+0xa6>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	3b04      	subs	r3, #4
 800bdf8:	9303      	str	r3, [sp, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d053      	beq.n	800beaa <__multiply+0x14e>
 800be02:	9b01      	ldr	r3, [sp, #4]
 800be04:	9a02      	ldr	r2, [sp, #8]
 800be06:	0018      	movs	r0, r3
 800be08:	611a      	str	r2, [r3, #16]
 800be0a:	b009      	add	sp, #36	; 0x24
 800be0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be0e:	c304      	stmia	r3!, {r2}
 800be10:	e7cd      	b.n	800bdae <__multiply+0x52>
 800be12:	9b00      	ldr	r3, [sp, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	b298      	uxth	r0, r3
 800be18:	2800      	cmp	r0, #0
 800be1a:	d01b      	beq.n	800be54 <__multiply+0xf8>
 800be1c:	4667      	mov	r7, ip
 800be1e:	2400      	movs	r4, #0
 800be20:	9e06      	ldr	r6, [sp, #24]
 800be22:	ce02      	ldmia	r6!, {r1}
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	b28b      	uxth	r3, r1
 800be28:	4343      	muls	r3, r0
 800be2a:	b292      	uxth	r2, r2
 800be2c:	189b      	adds	r3, r3, r2
 800be2e:	191b      	adds	r3, r3, r4
 800be30:	0c0c      	lsrs	r4, r1, #16
 800be32:	4344      	muls	r4, r0
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	0c11      	lsrs	r1, r2, #16
 800be38:	1861      	adds	r1, r4, r1
 800be3a:	0c1c      	lsrs	r4, r3, #16
 800be3c:	1909      	adds	r1, r1, r4
 800be3e:	0c0c      	lsrs	r4, r1, #16
 800be40:	b29b      	uxth	r3, r3
 800be42:	0409      	lsls	r1, r1, #16
 800be44:	430b      	orrs	r3, r1
 800be46:	c708      	stmia	r7!, {r3}
 800be48:	9b04      	ldr	r3, [sp, #16]
 800be4a:	42b3      	cmp	r3, r6
 800be4c:	d8e9      	bhi.n	800be22 <__multiply+0xc6>
 800be4e:	4663      	mov	r3, ip
 800be50:	9a05      	ldr	r2, [sp, #20]
 800be52:	509c      	str	r4, [r3, r2]
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	0c1e      	lsrs	r6, r3, #16
 800be5a:	d020      	beq.n	800be9e <__multiply+0x142>
 800be5c:	4663      	mov	r3, ip
 800be5e:	002c      	movs	r4, r5
 800be60:	4660      	mov	r0, ip
 800be62:	2700      	movs	r7, #0
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3414      	adds	r4, #20
 800be68:	6822      	ldr	r2, [r4, #0]
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	b291      	uxth	r1, r2
 800be6e:	4371      	muls	r1, r6
 800be70:	6802      	ldr	r2, [r0, #0]
 800be72:	0c12      	lsrs	r2, r2, #16
 800be74:	1889      	adds	r1, r1, r2
 800be76:	19cf      	adds	r7, r1, r7
 800be78:	0439      	lsls	r1, r7, #16
 800be7a:	430b      	orrs	r3, r1
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	cc02      	ldmia	r4!, {r1}
 800be80:	6843      	ldr	r3, [r0, #4]
 800be82:	0c09      	lsrs	r1, r1, #16
 800be84:	4371      	muls	r1, r6
 800be86:	b29b      	uxth	r3, r3
 800be88:	0c3f      	lsrs	r7, r7, #16
 800be8a:	18cb      	adds	r3, r1, r3
 800be8c:	9a04      	ldr	r2, [sp, #16]
 800be8e:	19db      	adds	r3, r3, r7
 800be90:	0c1f      	lsrs	r7, r3, #16
 800be92:	3004      	adds	r0, #4
 800be94:	42a2      	cmp	r2, r4
 800be96:	d8e7      	bhi.n	800be68 <__multiply+0x10c>
 800be98:	4662      	mov	r2, ip
 800be9a:	9905      	ldr	r1, [sp, #20]
 800be9c:	5053      	str	r3, [r2, r1]
 800be9e:	9b00      	ldr	r3, [sp, #0]
 800bea0:	3304      	adds	r3, #4
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	2304      	movs	r3, #4
 800bea6:	449c      	add	ip, r3
 800bea8:	e79d      	b.n	800bde6 <__multiply+0x8a>
 800beaa:	9b02      	ldr	r3, [sp, #8]
 800beac:	3b01      	subs	r3, #1
 800beae:	9302      	str	r3, [sp, #8]
 800beb0:	e79d      	b.n	800bdee <__multiply+0x92>
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	0800e200 	.word	0x0800e200
 800beb8:	0800e28c 	.word	0x0800e28c

0800bebc <__pow5mult>:
 800bebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bebe:	2303      	movs	r3, #3
 800bec0:	0015      	movs	r5, r2
 800bec2:	0007      	movs	r7, r0
 800bec4:	000e      	movs	r6, r1
 800bec6:	401a      	ands	r2, r3
 800bec8:	421d      	tst	r5, r3
 800beca:	d008      	beq.n	800bede <__pow5mult+0x22>
 800becc:	4925      	ldr	r1, [pc, #148]	; (800bf64 <__pow5mult+0xa8>)
 800bece:	3a01      	subs	r2, #1
 800bed0:	0092      	lsls	r2, r2, #2
 800bed2:	5852      	ldr	r2, [r2, r1]
 800bed4:	2300      	movs	r3, #0
 800bed6:	0031      	movs	r1, r6
 800bed8:	f7ff fe52 	bl	800bb80 <__multadd>
 800bedc:	0006      	movs	r6, r0
 800bede:	10ad      	asrs	r5, r5, #2
 800bee0:	d03d      	beq.n	800bf5e <__pow5mult+0xa2>
 800bee2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	d10f      	bne.n	800bf08 <__pow5mult+0x4c>
 800bee8:	2010      	movs	r0, #16
 800beea:	f7ff fdb1 	bl	800ba50 <malloc>
 800beee:	1e02      	subs	r2, r0, #0
 800bef0:	6278      	str	r0, [r7, #36]	; 0x24
 800bef2:	d105      	bne.n	800bf00 <__pow5mult+0x44>
 800bef4:	21d7      	movs	r1, #215	; 0xd7
 800bef6:	4b1c      	ldr	r3, [pc, #112]	; (800bf68 <__pow5mult+0xac>)
 800bef8:	481c      	ldr	r0, [pc, #112]	; (800bf6c <__pow5mult+0xb0>)
 800befa:	0049      	lsls	r1, r1, #1
 800befc:	f001 f9a2 	bl	800d244 <__assert_func>
 800bf00:	6044      	str	r4, [r0, #4]
 800bf02:	6084      	str	r4, [r0, #8]
 800bf04:	6004      	str	r4, [r0, #0]
 800bf06:	60c4      	str	r4, [r0, #12]
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	689c      	ldr	r4, [r3, #8]
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	d108      	bne.n	800bf24 <__pow5mult+0x68>
 800bf12:	0038      	movs	r0, r7
 800bf14:	4916      	ldr	r1, [pc, #88]	; (800bf70 <__pow5mult+0xb4>)
 800bf16:	f7ff ff0b 	bl	800bd30 <__i2b>
 800bf1a:	9b01      	ldr	r3, [sp, #4]
 800bf1c:	0004      	movs	r4, r0
 800bf1e:	6098      	str	r0, [r3, #8]
 800bf20:	2300      	movs	r3, #0
 800bf22:	6003      	str	r3, [r0, #0]
 800bf24:	2301      	movs	r3, #1
 800bf26:	421d      	tst	r5, r3
 800bf28:	d00a      	beq.n	800bf40 <__pow5mult+0x84>
 800bf2a:	0031      	movs	r1, r6
 800bf2c:	0022      	movs	r2, r4
 800bf2e:	0038      	movs	r0, r7
 800bf30:	f7ff ff14 	bl	800bd5c <__multiply>
 800bf34:	0031      	movs	r1, r6
 800bf36:	9001      	str	r0, [sp, #4]
 800bf38:	0038      	movs	r0, r7
 800bf3a:	f7ff fdfd 	bl	800bb38 <_Bfree>
 800bf3e:	9e01      	ldr	r6, [sp, #4]
 800bf40:	106d      	asrs	r5, r5, #1
 800bf42:	d00c      	beq.n	800bf5e <__pow5mult+0xa2>
 800bf44:	6820      	ldr	r0, [r4, #0]
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d107      	bne.n	800bf5a <__pow5mult+0x9e>
 800bf4a:	0022      	movs	r2, r4
 800bf4c:	0021      	movs	r1, r4
 800bf4e:	0038      	movs	r0, r7
 800bf50:	f7ff ff04 	bl	800bd5c <__multiply>
 800bf54:	2300      	movs	r3, #0
 800bf56:	6020      	str	r0, [r4, #0]
 800bf58:	6003      	str	r3, [r0, #0]
 800bf5a:	0004      	movs	r4, r0
 800bf5c:	e7e2      	b.n	800bf24 <__pow5mult+0x68>
 800bf5e:	0030      	movs	r0, r6
 800bf60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	0800e3d8 	.word	0x0800e3d8
 800bf68:	0800e18e 	.word	0x0800e18e
 800bf6c:	0800e28c 	.word	0x0800e28c
 800bf70:	00000271 	.word	0x00000271

0800bf74 <__lshift>:
 800bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf76:	000c      	movs	r4, r1
 800bf78:	0017      	movs	r7, r2
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	1155      	asrs	r5, r2, #5
 800bf7e:	b087      	sub	sp, #28
 800bf80:	18eb      	adds	r3, r5, r3
 800bf82:	9302      	str	r3, [sp, #8]
 800bf84:	3301      	adds	r3, #1
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	6849      	ldr	r1, [r1, #4]
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	9004      	str	r0, [sp, #16]
 800bf8e:	9a01      	ldr	r2, [sp, #4]
 800bf90:	4293      	cmp	r3, r2
 800bf92:	db10      	blt.n	800bfb6 <__lshift+0x42>
 800bf94:	9804      	ldr	r0, [sp, #16]
 800bf96:	f7ff fd8b 	bl	800bab0 <_Balloc>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	0002      	movs	r2, r0
 800bf9e:	0006      	movs	r6, r0
 800bfa0:	0019      	movs	r1, r3
 800bfa2:	3214      	adds	r2, #20
 800bfa4:	4298      	cmp	r0, r3
 800bfa6:	d10c      	bne.n	800bfc2 <__lshift+0x4e>
 800bfa8:	21da      	movs	r1, #218	; 0xda
 800bfaa:	0002      	movs	r2, r0
 800bfac:	4b26      	ldr	r3, [pc, #152]	; (800c048 <__lshift+0xd4>)
 800bfae:	4827      	ldr	r0, [pc, #156]	; (800c04c <__lshift+0xd8>)
 800bfb0:	31ff      	adds	r1, #255	; 0xff
 800bfb2:	f001 f947 	bl	800d244 <__assert_func>
 800bfb6:	3101      	adds	r1, #1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	e7e8      	b.n	800bf8e <__lshift+0x1a>
 800bfbc:	0098      	lsls	r0, r3, #2
 800bfbe:	5011      	str	r1, [r2, r0]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	42ab      	cmp	r3, r5
 800bfc4:	dbfa      	blt.n	800bfbc <__lshift+0x48>
 800bfc6:	43eb      	mvns	r3, r5
 800bfc8:	17db      	asrs	r3, r3, #31
 800bfca:	401d      	ands	r5, r3
 800bfcc:	211f      	movs	r1, #31
 800bfce:	0023      	movs	r3, r4
 800bfd0:	0038      	movs	r0, r7
 800bfd2:	00ad      	lsls	r5, r5, #2
 800bfd4:	1955      	adds	r5, r2, r5
 800bfd6:	6922      	ldr	r2, [r4, #16]
 800bfd8:	3314      	adds	r3, #20
 800bfda:	0092      	lsls	r2, r2, #2
 800bfdc:	4008      	ands	r0, r1
 800bfde:	4684      	mov	ip, r0
 800bfe0:	189a      	adds	r2, r3, r2
 800bfe2:	420f      	tst	r7, r1
 800bfe4:	d02a      	beq.n	800c03c <__lshift+0xc8>
 800bfe6:	3101      	adds	r1, #1
 800bfe8:	1a09      	subs	r1, r1, r0
 800bfea:	9105      	str	r1, [sp, #20]
 800bfec:	2100      	movs	r1, #0
 800bfee:	9503      	str	r5, [sp, #12]
 800bff0:	4667      	mov	r7, ip
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	40b8      	lsls	r0, r7
 800bff6:	4301      	orrs	r1, r0
 800bff8:	9803      	ldr	r0, [sp, #12]
 800bffa:	c002      	stmia	r0!, {r1}
 800bffc:	cb02      	ldmia	r3!, {r1}
 800bffe:	9003      	str	r0, [sp, #12]
 800c000:	9805      	ldr	r0, [sp, #20]
 800c002:	40c1      	lsrs	r1, r0
 800c004:	429a      	cmp	r2, r3
 800c006:	d8f3      	bhi.n	800bff0 <__lshift+0x7c>
 800c008:	0020      	movs	r0, r4
 800c00a:	3015      	adds	r0, #21
 800c00c:	2304      	movs	r3, #4
 800c00e:	4282      	cmp	r2, r0
 800c010:	d304      	bcc.n	800c01c <__lshift+0xa8>
 800c012:	1b13      	subs	r3, r2, r4
 800c014:	3b15      	subs	r3, #21
 800c016:	089b      	lsrs	r3, r3, #2
 800c018:	3301      	adds	r3, #1
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	50e9      	str	r1, [r5, r3]
 800c01e:	2900      	cmp	r1, #0
 800c020:	d002      	beq.n	800c028 <__lshift+0xb4>
 800c022:	9b02      	ldr	r3, [sp, #8]
 800c024:	3302      	adds	r3, #2
 800c026:	9301      	str	r3, [sp, #4]
 800c028:	9b01      	ldr	r3, [sp, #4]
 800c02a:	9804      	ldr	r0, [sp, #16]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	0021      	movs	r1, r4
 800c030:	6133      	str	r3, [r6, #16]
 800c032:	f7ff fd81 	bl	800bb38 <_Bfree>
 800c036:	0030      	movs	r0, r6
 800c038:	b007      	add	sp, #28
 800c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03c:	cb02      	ldmia	r3!, {r1}
 800c03e:	c502      	stmia	r5!, {r1}
 800c040:	429a      	cmp	r2, r3
 800c042:	d8fb      	bhi.n	800c03c <__lshift+0xc8>
 800c044:	e7f0      	b.n	800c028 <__lshift+0xb4>
 800c046:	46c0      	nop			; (mov r8, r8)
 800c048:	0800e200 	.word	0x0800e200
 800c04c:	0800e28c 	.word	0x0800e28c

0800c050 <__mcmp>:
 800c050:	6902      	ldr	r2, [r0, #16]
 800c052:	690b      	ldr	r3, [r1, #16]
 800c054:	b530      	push	{r4, r5, lr}
 800c056:	0004      	movs	r4, r0
 800c058:	1ad0      	subs	r0, r2, r3
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d10d      	bne.n	800c07a <__mcmp+0x2a>
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	3414      	adds	r4, #20
 800c062:	3114      	adds	r1, #20
 800c064:	18e2      	adds	r2, r4, r3
 800c066:	18c9      	adds	r1, r1, r3
 800c068:	3a04      	subs	r2, #4
 800c06a:	3904      	subs	r1, #4
 800c06c:	6815      	ldr	r5, [r2, #0]
 800c06e:	680b      	ldr	r3, [r1, #0]
 800c070:	429d      	cmp	r5, r3
 800c072:	d003      	beq.n	800c07c <__mcmp+0x2c>
 800c074:	2001      	movs	r0, #1
 800c076:	429d      	cmp	r5, r3
 800c078:	d303      	bcc.n	800c082 <__mcmp+0x32>
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	4294      	cmp	r4, r2
 800c07e:	d3f3      	bcc.n	800c068 <__mcmp+0x18>
 800c080:	e7fb      	b.n	800c07a <__mcmp+0x2a>
 800c082:	4240      	negs	r0, r0
 800c084:	e7f9      	b.n	800c07a <__mcmp+0x2a>
	...

0800c088 <__mdiff>:
 800c088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c08a:	000e      	movs	r6, r1
 800c08c:	0007      	movs	r7, r0
 800c08e:	0011      	movs	r1, r2
 800c090:	0030      	movs	r0, r6
 800c092:	b087      	sub	sp, #28
 800c094:	0014      	movs	r4, r2
 800c096:	f7ff ffdb 	bl	800c050 <__mcmp>
 800c09a:	1e05      	subs	r5, r0, #0
 800c09c:	d110      	bne.n	800c0c0 <__mdiff+0x38>
 800c09e:	0001      	movs	r1, r0
 800c0a0:	0038      	movs	r0, r7
 800c0a2:	f7ff fd05 	bl	800bab0 <_Balloc>
 800c0a6:	1e02      	subs	r2, r0, #0
 800c0a8:	d104      	bne.n	800c0b4 <__mdiff+0x2c>
 800c0aa:	4b40      	ldr	r3, [pc, #256]	; (800c1ac <__mdiff+0x124>)
 800c0ac:	4940      	ldr	r1, [pc, #256]	; (800c1b0 <__mdiff+0x128>)
 800c0ae:	4841      	ldr	r0, [pc, #260]	; (800c1b4 <__mdiff+0x12c>)
 800c0b0:	f001 f8c8 	bl	800d244 <__assert_func>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	6145      	str	r5, [r0, #20]
 800c0b8:	6103      	str	r3, [r0, #16]
 800c0ba:	0010      	movs	r0, r2
 800c0bc:	b007      	add	sp, #28
 800c0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	9301      	str	r3, [sp, #4]
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	db04      	blt.n	800c0d2 <__mdiff+0x4a>
 800c0c8:	0023      	movs	r3, r4
 800c0ca:	0034      	movs	r4, r6
 800c0cc:	001e      	movs	r6, r3
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	0038      	movs	r0, r7
 800c0d4:	6861      	ldr	r1, [r4, #4]
 800c0d6:	f7ff fceb 	bl	800bab0 <_Balloc>
 800c0da:	1e02      	subs	r2, r0, #0
 800c0dc:	d103      	bne.n	800c0e6 <__mdiff+0x5e>
 800c0de:	2190      	movs	r1, #144	; 0x90
 800c0e0:	4b32      	ldr	r3, [pc, #200]	; (800c1ac <__mdiff+0x124>)
 800c0e2:	0089      	lsls	r1, r1, #2
 800c0e4:	e7e3      	b.n	800c0ae <__mdiff+0x26>
 800c0e6:	9b01      	ldr	r3, [sp, #4]
 800c0e8:	2700      	movs	r7, #0
 800c0ea:	60c3      	str	r3, [r0, #12]
 800c0ec:	6920      	ldr	r0, [r4, #16]
 800c0ee:	3414      	adds	r4, #20
 800c0f0:	9401      	str	r4, [sp, #4]
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	0084      	lsls	r4, r0, #2
 800c0f6:	191b      	adds	r3, r3, r4
 800c0f8:	0034      	movs	r4, r6
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	6933      	ldr	r3, [r6, #16]
 800c0fe:	3414      	adds	r4, #20
 800c100:	0099      	lsls	r1, r3, #2
 800c102:	1863      	adds	r3, r4, r1
 800c104:	9303      	str	r3, [sp, #12]
 800c106:	0013      	movs	r3, r2
 800c108:	3314      	adds	r3, #20
 800c10a:	469c      	mov	ip, r3
 800c10c:	9305      	str	r3, [sp, #20]
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	9b04      	ldr	r3, [sp, #16]
 800c114:	cc02      	ldmia	r4!, {r1}
 800c116:	cb20      	ldmia	r3!, {r5}
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	b2ab      	uxth	r3, r5
 800c11c:	19df      	adds	r7, r3, r7
 800c11e:	b28b      	uxth	r3, r1
 800c120:	1afb      	subs	r3, r7, r3
 800c122:	0c09      	lsrs	r1, r1, #16
 800c124:	0c2d      	lsrs	r5, r5, #16
 800c126:	1a6d      	subs	r5, r5, r1
 800c128:	1419      	asrs	r1, r3, #16
 800c12a:	186d      	adds	r5, r5, r1
 800c12c:	4661      	mov	r1, ip
 800c12e:	142f      	asrs	r7, r5, #16
 800c130:	b29b      	uxth	r3, r3
 800c132:	042d      	lsls	r5, r5, #16
 800c134:	432b      	orrs	r3, r5
 800c136:	c108      	stmia	r1!, {r3}
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	468c      	mov	ip, r1
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	d8e8      	bhi.n	800c112 <__mdiff+0x8a>
 800c140:	0031      	movs	r1, r6
 800c142:	9c03      	ldr	r4, [sp, #12]
 800c144:	3115      	adds	r1, #21
 800c146:	2304      	movs	r3, #4
 800c148:	428c      	cmp	r4, r1
 800c14a:	d304      	bcc.n	800c156 <__mdiff+0xce>
 800c14c:	1ba3      	subs	r3, r4, r6
 800c14e:	3b15      	subs	r3, #21
 800c150:	089b      	lsrs	r3, r3, #2
 800c152:	3301      	adds	r3, #1
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	9901      	ldr	r1, [sp, #4]
 800c158:	18cc      	adds	r4, r1, r3
 800c15a:	9905      	ldr	r1, [sp, #20]
 800c15c:	0026      	movs	r6, r4
 800c15e:	18cb      	adds	r3, r1, r3
 800c160:	469c      	mov	ip, r3
 800c162:	9902      	ldr	r1, [sp, #8]
 800c164:	428e      	cmp	r6, r1
 800c166:	d310      	bcc.n	800c18a <__mdiff+0x102>
 800c168:	9e02      	ldr	r6, [sp, #8]
 800c16a:	1ee1      	subs	r1, r4, #3
 800c16c:	2500      	movs	r5, #0
 800c16e:	428e      	cmp	r6, r1
 800c170:	d304      	bcc.n	800c17c <__mdiff+0xf4>
 800c172:	0031      	movs	r1, r6
 800c174:	3103      	adds	r1, #3
 800c176:	1b0c      	subs	r4, r1, r4
 800c178:	08a4      	lsrs	r4, r4, #2
 800c17a:	00a5      	lsls	r5, r4, #2
 800c17c:	195b      	adds	r3, r3, r5
 800c17e:	3b04      	subs	r3, #4
 800c180:	6819      	ldr	r1, [r3, #0]
 800c182:	2900      	cmp	r1, #0
 800c184:	d00f      	beq.n	800c1a6 <__mdiff+0x11e>
 800c186:	6110      	str	r0, [r2, #16]
 800c188:	e797      	b.n	800c0ba <__mdiff+0x32>
 800c18a:	ce02      	ldmia	r6!, {r1}
 800c18c:	b28d      	uxth	r5, r1
 800c18e:	19ed      	adds	r5, r5, r7
 800c190:	0c0f      	lsrs	r7, r1, #16
 800c192:	1429      	asrs	r1, r5, #16
 800c194:	1879      	adds	r1, r7, r1
 800c196:	140f      	asrs	r7, r1, #16
 800c198:	b2ad      	uxth	r5, r5
 800c19a:	0409      	lsls	r1, r1, #16
 800c19c:	430d      	orrs	r5, r1
 800c19e:	4661      	mov	r1, ip
 800c1a0:	c120      	stmia	r1!, {r5}
 800c1a2:	468c      	mov	ip, r1
 800c1a4:	e7dd      	b.n	800c162 <__mdiff+0xda>
 800c1a6:	3801      	subs	r0, #1
 800c1a8:	e7e9      	b.n	800c17e <__mdiff+0xf6>
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	0800e200 	.word	0x0800e200
 800c1b0:	00000232 	.word	0x00000232
 800c1b4:	0800e28c 	.word	0x0800e28c

0800c1b8 <__ulp>:
 800c1b8:	4b0f      	ldr	r3, [pc, #60]	; (800c1f8 <__ulp+0x40>)
 800c1ba:	4019      	ands	r1, r3
 800c1bc:	4b0f      	ldr	r3, [pc, #60]	; (800c1fc <__ulp+0x44>)
 800c1be:	18c9      	adds	r1, r1, r3
 800c1c0:	2900      	cmp	r1, #0
 800c1c2:	dd04      	ble.n	800c1ce <__ulp+0x16>
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	000b      	movs	r3, r1
 800c1c8:	0010      	movs	r0, r2
 800c1ca:	0019      	movs	r1, r3
 800c1cc:	4770      	bx	lr
 800c1ce:	4249      	negs	r1, r1
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	1509      	asrs	r1, r1, #20
 800c1d6:	2913      	cmp	r1, #19
 800c1d8:	dc04      	bgt.n	800c1e4 <__ulp+0x2c>
 800c1da:	2080      	movs	r0, #128	; 0x80
 800c1dc:	0300      	lsls	r0, r0, #12
 800c1de:	4108      	asrs	r0, r1
 800c1e0:	0003      	movs	r3, r0
 800c1e2:	e7f1      	b.n	800c1c8 <__ulp+0x10>
 800c1e4:	3914      	subs	r1, #20
 800c1e6:	2001      	movs	r0, #1
 800c1e8:	291e      	cmp	r1, #30
 800c1ea:	dc02      	bgt.n	800c1f2 <__ulp+0x3a>
 800c1ec:	2080      	movs	r0, #128	; 0x80
 800c1ee:	0600      	lsls	r0, r0, #24
 800c1f0:	40c8      	lsrs	r0, r1
 800c1f2:	0002      	movs	r2, r0
 800c1f4:	e7e8      	b.n	800c1c8 <__ulp+0x10>
 800c1f6:	46c0      	nop			; (mov r8, r8)
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	fcc00000 	.word	0xfcc00000

0800c200 <__b2d>:
 800c200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c202:	0006      	movs	r6, r0
 800c204:	6903      	ldr	r3, [r0, #16]
 800c206:	3614      	adds	r6, #20
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	18f3      	adds	r3, r6, r3
 800c20c:	1f1d      	subs	r5, r3, #4
 800c20e:	682c      	ldr	r4, [r5, #0]
 800c210:	000f      	movs	r7, r1
 800c212:	0020      	movs	r0, r4
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	f7ff fd43 	bl	800bca0 <__hi0bits>
 800c21a:	2320      	movs	r3, #32
 800c21c:	1a1b      	subs	r3, r3, r0
 800c21e:	491f      	ldr	r1, [pc, #124]	; (800c29c <__b2d+0x9c>)
 800c220:	603b      	str	r3, [r7, #0]
 800c222:	280a      	cmp	r0, #10
 800c224:	dc16      	bgt.n	800c254 <__b2d+0x54>
 800c226:	230b      	movs	r3, #11
 800c228:	0027      	movs	r7, r4
 800c22a:	1a1b      	subs	r3, r3, r0
 800c22c:	40df      	lsrs	r7, r3
 800c22e:	4339      	orrs	r1, r7
 800c230:	469c      	mov	ip, r3
 800c232:	000b      	movs	r3, r1
 800c234:	2100      	movs	r1, #0
 800c236:	42ae      	cmp	r6, r5
 800c238:	d202      	bcs.n	800c240 <__b2d+0x40>
 800c23a:	9901      	ldr	r1, [sp, #4]
 800c23c:	3908      	subs	r1, #8
 800c23e:	6809      	ldr	r1, [r1, #0]
 800c240:	3015      	adds	r0, #21
 800c242:	4084      	lsls	r4, r0
 800c244:	4660      	mov	r0, ip
 800c246:	40c1      	lsrs	r1, r0
 800c248:	430c      	orrs	r4, r1
 800c24a:	0022      	movs	r2, r4
 800c24c:	0010      	movs	r0, r2
 800c24e:	0019      	movs	r1, r3
 800c250:	b003      	add	sp, #12
 800c252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c254:	2700      	movs	r7, #0
 800c256:	42ae      	cmp	r6, r5
 800c258:	d202      	bcs.n	800c260 <__b2d+0x60>
 800c25a:	9d01      	ldr	r5, [sp, #4]
 800c25c:	3d08      	subs	r5, #8
 800c25e:	682f      	ldr	r7, [r5, #0]
 800c260:	230b      	movs	r3, #11
 800c262:	425b      	negs	r3, r3
 800c264:	469c      	mov	ip, r3
 800c266:	4484      	add	ip, r0
 800c268:	280b      	cmp	r0, #11
 800c26a:	d013      	beq.n	800c294 <__b2d+0x94>
 800c26c:	4663      	mov	r3, ip
 800c26e:	2020      	movs	r0, #32
 800c270:	409c      	lsls	r4, r3
 800c272:	1ac0      	subs	r0, r0, r3
 800c274:	003b      	movs	r3, r7
 800c276:	40c3      	lsrs	r3, r0
 800c278:	431c      	orrs	r4, r3
 800c27a:	4321      	orrs	r1, r4
 800c27c:	000b      	movs	r3, r1
 800c27e:	2100      	movs	r1, #0
 800c280:	42b5      	cmp	r5, r6
 800c282:	d901      	bls.n	800c288 <__b2d+0x88>
 800c284:	3d04      	subs	r5, #4
 800c286:	6829      	ldr	r1, [r5, #0]
 800c288:	4664      	mov	r4, ip
 800c28a:	40c1      	lsrs	r1, r0
 800c28c:	40a7      	lsls	r7, r4
 800c28e:	430f      	orrs	r7, r1
 800c290:	003a      	movs	r2, r7
 800c292:	e7db      	b.n	800c24c <__b2d+0x4c>
 800c294:	4321      	orrs	r1, r4
 800c296:	000b      	movs	r3, r1
 800c298:	e7fa      	b.n	800c290 <__b2d+0x90>
 800c29a:	46c0      	nop			; (mov r8, r8)
 800c29c:	3ff00000 	.word	0x3ff00000

0800c2a0 <__d2b>:
 800c2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	0014      	movs	r4, r2
 800c2a6:	001e      	movs	r6, r3
 800c2a8:	9f08      	ldr	r7, [sp, #32]
 800c2aa:	f7ff fc01 	bl	800bab0 <_Balloc>
 800c2ae:	1e05      	subs	r5, r0, #0
 800c2b0:	d105      	bne.n	800c2be <__d2b+0x1e>
 800c2b2:	0002      	movs	r2, r0
 800c2b4:	4b26      	ldr	r3, [pc, #152]	; (800c350 <__d2b+0xb0>)
 800c2b6:	4927      	ldr	r1, [pc, #156]	; (800c354 <__d2b+0xb4>)
 800c2b8:	4827      	ldr	r0, [pc, #156]	; (800c358 <__d2b+0xb8>)
 800c2ba:	f000 ffc3 	bl	800d244 <__assert_func>
 800c2be:	0333      	lsls	r3, r6, #12
 800c2c0:	0076      	lsls	r6, r6, #1
 800c2c2:	0b1b      	lsrs	r3, r3, #12
 800c2c4:	0d76      	lsrs	r6, r6, #21
 800c2c6:	d124      	bne.n	800c312 <__d2b+0x72>
 800c2c8:	9301      	str	r3, [sp, #4]
 800c2ca:	2c00      	cmp	r4, #0
 800c2cc:	d027      	beq.n	800c31e <__d2b+0x7e>
 800c2ce:	4668      	mov	r0, sp
 800c2d0:	9400      	str	r4, [sp, #0]
 800c2d2:	f7ff fcff 	bl	800bcd4 <__lo0bits>
 800c2d6:	9c00      	ldr	r4, [sp, #0]
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d01e      	beq.n	800c31a <__d2b+0x7a>
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	2120      	movs	r1, #32
 800c2e0:	001a      	movs	r2, r3
 800c2e2:	1a09      	subs	r1, r1, r0
 800c2e4:	408a      	lsls	r2, r1
 800c2e6:	40c3      	lsrs	r3, r0
 800c2e8:	4322      	orrs	r2, r4
 800c2ea:	616a      	str	r2, [r5, #20]
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	9c01      	ldr	r4, [sp, #4]
 800c2f0:	61ac      	str	r4, [r5, #24]
 800c2f2:	1e63      	subs	r3, r4, #1
 800c2f4:	419c      	sbcs	r4, r3
 800c2f6:	3401      	adds	r4, #1
 800c2f8:	612c      	str	r4, [r5, #16]
 800c2fa:	2e00      	cmp	r6, #0
 800c2fc:	d018      	beq.n	800c330 <__d2b+0x90>
 800c2fe:	4b17      	ldr	r3, [pc, #92]	; (800c35c <__d2b+0xbc>)
 800c300:	18f6      	adds	r6, r6, r3
 800c302:	2335      	movs	r3, #53	; 0x35
 800c304:	1836      	adds	r6, r6, r0
 800c306:	1a18      	subs	r0, r3, r0
 800c308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30a:	603e      	str	r6, [r7, #0]
 800c30c:	6018      	str	r0, [r3, #0]
 800c30e:	0028      	movs	r0, r5
 800c310:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c312:	2280      	movs	r2, #128	; 0x80
 800c314:	0352      	lsls	r2, r2, #13
 800c316:	4313      	orrs	r3, r2
 800c318:	e7d6      	b.n	800c2c8 <__d2b+0x28>
 800c31a:	616c      	str	r4, [r5, #20]
 800c31c:	e7e7      	b.n	800c2ee <__d2b+0x4e>
 800c31e:	a801      	add	r0, sp, #4
 800c320:	f7ff fcd8 	bl	800bcd4 <__lo0bits>
 800c324:	2401      	movs	r4, #1
 800c326:	9b01      	ldr	r3, [sp, #4]
 800c328:	612c      	str	r4, [r5, #16]
 800c32a:	616b      	str	r3, [r5, #20]
 800c32c:	3020      	adds	r0, #32
 800c32e:	e7e4      	b.n	800c2fa <__d2b+0x5a>
 800c330:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <__d2b+0xc0>)
 800c332:	18c0      	adds	r0, r0, r3
 800c334:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <__d2b+0xc4>)
 800c336:	6038      	str	r0, [r7, #0]
 800c338:	18e3      	adds	r3, r4, r3
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	18eb      	adds	r3, r5, r3
 800c33e:	6958      	ldr	r0, [r3, #20]
 800c340:	f7ff fcae 	bl	800bca0 <__hi0bits>
 800c344:	0164      	lsls	r4, r4, #5
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	1a24      	subs	r4, r4, r0
 800c34a:	601c      	str	r4, [r3, #0]
 800c34c:	e7df      	b.n	800c30e <__d2b+0x6e>
 800c34e:	46c0      	nop			; (mov r8, r8)
 800c350:	0800e200 	.word	0x0800e200
 800c354:	0000030a 	.word	0x0000030a
 800c358:	0800e28c 	.word	0x0800e28c
 800c35c:	fffffbcd 	.word	0xfffffbcd
 800c360:	fffffbce 	.word	0xfffffbce
 800c364:	3fffffff 	.word	0x3fffffff

0800c368 <__ratio>:
 800c368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c36a:	b087      	sub	sp, #28
 800c36c:	000f      	movs	r7, r1
 800c36e:	a904      	add	r1, sp, #16
 800c370:	0006      	movs	r6, r0
 800c372:	f7ff ff45 	bl	800c200 <__b2d>
 800c376:	9000      	str	r0, [sp, #0]
 800c378:	9101      	str	r1, [sp, #4]
 800c37a:	9c00      	ldr	r4, [sp, #0]
 800c37c:	9d01      	ldr	r5, [sp, #4]
 800c37e:	0038      	movs	r0, r7
 800c380:	a905      	add	r1, sp, #20
 800c382:	f7ff ff3d 	bl	800c200 <__b2d>
 800c386:	9002      	str	r0, [sp, #8]
 800c388:	9103      	str	r1, [sp, #12]
 800c38a:	9a02      	ldr	r2, [sp, #8]
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	6931      	ldr	r1, [r6, #16]
 800c390:	6938      	ldr	r0, [r7, #16]
 800c392:	9e05      	ldr	r6, [sp, #20]
 800c394:	1a08      	subs	r0, r1, r0
 800c396:	9904      	ldr	r1, [sp, #16]
 800c398:	0140      	lsls	r0, r0, #5
 800c39a:	1b89      	subs	r1, r1, r6
 800c39c:	1841      	adds	r1, r0, r1
 800c39e:	0508      	lsls	r0, r1, #20
 800c3a0:	2900      	cmp	r1, #0
 800c3a2:	dd07      	ble.n	800c3b4 <__ratio+0x4c>
 800c3a4:	9901      	ldr	r1, [sp, #4]
 800c3a6:	1845      	adds	r5, r0, r1
 800c3a8:	0020      	movs	r0, r4
 800c3aa:	0029      	movs	r1, r5
 800c3ac:	f7f4 fc32 	bl	8000c14 <__aeabi_ddiv>
 800c3b0:	b007      	add	sp, #28
 800c3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b4:	9903      	ldr	r1, [sp, #12]
 800c3b6:	1a0b      	subs	r3, r1, r0
 800c3b8:	e7f6      	b.n	800c3a8 <__ratio+0x40>

0800c3ba <__copybits>:
 800c3ba:	b570      	push	{r4, r5, r6, lr}
 800c3bc:	0014      	movs	r4, r2
 800c3be:	0005      	movs	r5, r0
 800c3c0:	3901      	subs	r1, #1
 800c3c2:	6913      	ldr	r3, [r2, #16]
 800c3c4:	1149      	asrs	r1, r1, #5
 800c3c6:	3101      	adds	r1, #1
 800c3c8:	0089      	lsls	r1, r1, #2
 800c3ca:	3414      	adds	r4, #20
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	1841      	adds	r1, r0, r1
 800c3d0:	18e3      	adds	r3, r4, r3
 800c3d2:	42a3      	cmp	r3, r4
 800c3d4:	d80d      	bhi.n	800c3f2 <__copybits+0x38>
 800c3d6:	0014      	movs	r4, r2
 800c3d8:	3411      	adds	r4, #17
 800c3da:	2500      	movs	r5, #0
 800c3dc:	429c      	cmp	r4, r3
 800c3de:	d803      	bhi.n	800c3e8 <__copybits+0x2e>
 800c3e0:	1a9b      	subs	r3, r3, r2
 800c3e2:	3b11      	subs	r3, #17
 800c3e4:	089b      	lsrs	r3, r3, #2
 800c3e6:	009d      	lsls	r5, r3, #2
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	1940      	adds	r0, r0, r5
 800c3ec:	4281      	cmp	r1, r0
 800c3ee:	d803      	bhi.n	800c3f8 <__copybits+0x3e>
 800c3f0:	bd70      	pop	{r4, r5, r6, pc}
 800c3f2:	cc40      	ldmia	r4!, {r6}
 800c3f4:	c540      	stmia	r5!, {r6}
 800c3f6:	e7ec      	b.n	800c3d2 <__copybits+0x18>
 800c3f8:	c008      	stmia	r0!, {r3}
 800c3fa:	e7f7      	b.n	800c3ec <__copybits+0x32>

0800c3fc <__any_on>:
 800c3fc:	0002      	movs	r2, r0
 800c3fe:	6900      	ldr	r0, [r0, #16]
 800c400:	b510      	push	{r4, lr}
 800c402:	3214      	adds	r2, #20
 800c404:	114b      	asrs	r3, r1, #5
 800c406:	4298      	cmp	r0, r3
 800c408:	db13      	blt.n	800c432 <__any_on+0x36>
 800c40a:	dd0c      	ble.n	800c426 <__any_on+0x2a>
 800c40c:	241f      	movs	r4, #31
 800c40e:	0008      	movs	r0, r1
 800c410:	4020      	ands	r0, r4
 800c412:	4221      	tst	r1, r4
 800c414:	d007      	beq.n	800c426 <__any_on+0x2a>
 800c416:	0099      	lsls	r1, r3, #2
 800c418:	588c      	ldr	r4, [r1, r2]
 800c41a:	0021      	movs	r1, r4
 800c41c:	40c1      	lsrs	r1, r0
 800c41e:	4081      	lsls	r1, r0
 800c420:	2001      	movs	r0, #1
 800c422:	428c      	cmp	r4, r1
 800c424:	d104      	bne.n	800c430 <__any_on+0x34>
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	18d3      	adds	r3, r2, r3
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d803      	bhi.n	800c436 <__any_on+0x3a>
 800c42e:	2000      	movs	r0, #0
 800c430:	bd10      	pop	{r4, pc}
 800c432:	0003      	movs	r3, r0
 800c434:	e7f7      	b.n	800c426 <__any_on+0x2a>
 800c436:	3b04      	subs	r3, #4
 800c438:	6819      	ldr	r1, [r3, #0]
 800c43a:	2900      	cmp	r1, #0
 800c43c:	d0f5      	beq.n	800c42a <__any_on+0x2e>
 800c43e:	2001      	movs	r0, #1
 800c440:	e7f6      	b.n	800c430 <__any_on+0x34>

0800c442 <_calloc_r>:
 800c442:	b570      	push	{r4, r5, r6, lr}
 800c444:	0c13      	lsrs	r3, r2, #16
 800c446:	0c0d      	lsrs	r5, r1, #16
 800c448:	d11e      	bne.n	800c488 <_calloc_r+0x46>
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10c      	bne.n	800c468 <_calloc_r+0x26>
 800c44e:	b289      	uxth	r1, r1
 800c450:	b294      	uxth	r4, r2
 800c452:	434c      	muls	r4, r1
 800c454:	0021      	movs	r1, r4
 800c456:	f000 f88d 	bl	800c574 <_malloc_r>
 800c45a:	1e05      	subs	r5, r0, #0
 800c45c:	d01b      	beq.n	800c496 <_calloc_r+0x54>
 800c45e:	0022      	movs	r2, r4
 800c460:	2100      	movs	r1, #0
 800c462:	f7fc fab7 	bl	80089d4 <memset>
 800c466:	e016      	b.n	800c496 <_calloc_r+0x54>
 800c468:	1c1d      	adds	r5, r3, #0
 800c46a:	1c0b      	adds	r3, r1, #0
 800c46c:	b292      	uxth	r2, r2
 800c46e:	b289      	uxth	r1, r1
 800c470:	b29c      	uxth	r4, r3
 800c472:	4351      	muls	r1, r2
 800c474:	b2ab      	uxth	r3, r5
 800c476:	4363      	muls	r3, r4
 800c478:	0c0c      	lsrs	r4, r1, #16
 800c47a:	191c      	adds	r4, r3, r4
 800c47c:	0c22      	lsrs	r2, r4, #16
 800c47e:	d107      	bne.n	800c490 <_calloc_r+0x4e>
 800c480:	0424      	lsls	r4, r4, #16
 800c482:	b289      	uxth	r1, r1
 800c484:	430c      	orrs	r4, r1
 800c486:	e7e5      	b.n	800c454 <_calloc_r+0x12>
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <_calloc_r+0x4e>
 800c48c:	1c13      	adds	r3, r2, #0
 800c48e:	e7ed      	b.n	800c46c <_calloc_r+0x2a>
 800c490:	230c      	movs	r3, #12
 800c492:	2500      	movs	r5, #0
 800c494:	6003      	str	r3, [r0, #0]
 800c496:	0028      	movs	r0, r5
 800c498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c49c <_free_r>:
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	0005      	movs	r5, r0
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	d010      	beq.n	800c4c6 <_free_r+0x2a>
 800c4a4:	1f0c      	subs	r4, r1, #4
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	da00      	bge.n	800c4ae <_free_r+0x12>
 800c4ac:	18e4      	adds	r4, r4, r3
 800c4ae:	0028      	movs	r0, r5
 800c4b0:	f001 f8da 	bl	800d668 <__malloc_lock>
 800c4b4:	4a1d      	ldr	r2, [pc, #116]	; (800c52c <_free_r+0x90>)
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d105      	bne.n	800c4c8 <_free_r+0x2c>
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	6014      	str	r4, [r2, #0]
 800c4c0:	0028      	movs	r0, r5
 800c4c2:	f001 f8d9 	bl	800d678 <__malloc_unlock>
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d908      	bls.n	800c4de <_free_r+0x42>
 800c4cc:	6821      	ldr	r1, [r4, #0]
 800c4ce:	1860      	adds	r0, r4, r1
 800c4d0:	4283      	cmp	r3, r0
 800c4d2:	d1f3      	bne.n	800c4bc <_free_r+0x20>
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	1841      	adds	r1, r0, r1
 800c4da:	6021      	str	r1, [r4, #0]
 800c4dc:	e7ee      	b.n	800c4bc <_free_r+0x20>
 800c4de:	001a      	movs	r2, r3
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <_free_r+0x4e>
 800c4e6:	42a3      	cmp	r3, r4
 800c4e8:	d9f9      	bls.n	800c4de <_free_r+0x42>
 800c4ea:	6811      	ldr	r1, [r2, #0]
 800c4ec:	1850      	adds	r0, r2, r1
 800c4ee:	42a0      	cmp	r0, r4
 800c4f0:	d10b      	bne.n	800c50a <_free_r+0x6e>
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	1809      	adds	r1, r1, r0
 800c4f6:	1850      	adds	r0, r2, r1
 800c4f8:	6011      	str	r1, [r2, #0]
 800c4fa:	4283      	cmp	r3, r0
 800c4fc:	d1e0      	bne.n	800c4c0 <_free_r+0x24>
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	1841      	adds	r1, r0, r1
 800c504:	6011      	str	r1, [r2, #0]
 800c506:	6053      	str	r3, [r2, #4]
 800c508:	e7da      	b.n	800c4c0 <_free_r+0x24>
 800c50a:	42a0      	cmp	r0, r4
 800c50c:	d902      	bls.n	800c514 <_free_r+0x78>
 800c50e:	230c      	movs	r3, #12
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	e7d5      	b.n	800c4c0 <_free_r+0x24>
 800c514:	6821      	ldr	r1, [r4, #0]
 800c516:	1860      	adds	r0, r4, r1
 800c518:	4283      	cmp	r3, r0
 800c51a:	d103      	bne.n	800c524 <_free_r+0x88>
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	1841      	adds	r1, r0, r1
 800c522:	6021      	str	r1, [r4, #0]
 800c524:	6063      	str	r3, [r4, #4]
 800c526:	6054      	str	r4, [r2, #4]
 800c528:	e7ca      	b.n	800c4c0 <_free_r+0x24>
 800c52a:	46c0      	nop			; (mov r8, r8)
 800c52c:	2000060c 	.word	0x2000060c

0800c530 <sbrk_aligned>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	4e0f      	ldr	r6, [pc, #60]	; (800c570 <sbrk_aligned+0x40>)
 800c534:	000d      	movs	r5, r1
 800c536:	6831      	ldr	r1, [r6, #0]
 800c538:	0004      	movs	r4, r0
 800c53a:	2900      	cmp	r1, #0
 800c53c:	d102      	bne.n	800c544 <sbrk_aligned+0x14>
 800c53e:	f000 fd47 	bl	800cfd0 <_sbrk_r>
 800c542:	6030      	str	r0, [r6, #0]
 800c544:	0029      	movs	r1, r5
 800c546:	0020      	movs	r0, r4
 800c548:	f000 fd42 	bl	800cfd0 <_sbrk_r>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	d00a      	beq.n	800c566 <sbrk_aligned+0x36>
 800c550:	2303      	movs	r3, #3
 800c552:	1cc5      	adds	r5, r0, #3
 800c554:	439d      	bics	r5, r3
 800c556:	42a8      	cmp	r0, r5
 800c558:	d007      	beq.n	800c56a <sbrk_aligned+0x3a>
 800c55a:	1a29      	subs	r1, r5, r0
 800c55c:	0020      	movs	r0, r4
 800c55e:	f000 fd37 	bl	800cfd0 <_sbrk_r>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d101      	bne.n	800c56a <sbrk_aligned+0x3a>
 800c566:	2501      	movs	r5, #1
 800c568:	426d      	negs	r5, r5
 800c56a:	0028      	movs	r0, r5
 800c56c:	bd70      	pop	{r4, r5, r6, pc}
 800c56e:	46c0      	nop			; (mov r8, r8)
 800c570:	20000610 	.word	0x20000610

0800c574 <_malloc_r>:
 800c574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c576:	2203      	movs	r2, #3
 800c578:	1ccb      	adds	r3, r1, #3
 800c57a:	4393      	bics	r3, r2
 800c57c:	3308      	adds	r3, #8
 800c57e:	0006      	movs	r6, r0
 800c580:	001f      	movs	r7, r3
 800c582:	2b0c      	cmp	r3, #12
 800c584:	d232      	bcs.n	800c5ec <_malloc_r+0x78>
 800c586:	270c      	movs	r7, #12
 800c588:	42b9      	cmp	r1, r7
 800c58a:	d831      	bhi.n	800c5f0 <_malloc_r+0x7c>
 800c58c:	0030      	movs	r0, r6
 800c58e:	f001 f86b 	bl	800d668 <__malloc_lock>
 800c592:	4d32      	ldr	r5, [pc, #200]	; (800c65c <_malloc_r+0xe8>)
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	001c      	movs	r4, r3
 800c598:	2c00      	cmp	r4, #0
 800c59a:	d12e      	bne.n	800c5fa <_malloc_r+0x86>
 800c59c:	0039      	movs	r1, r7
 800c59e:	0030      	movs	r0, r6
 800c5a0:	f7ff ffc6 	bl	800c530 <sbrk_aligned>
 800c5a4:	0004      	movs	r4, r0
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	d11e      	bne.n	800c5e8 <_malloc_r+0x74>
 800c5aa:	682c      	ldr	r4, [r5, #0]
 800c5ac:	0025      	movs	r5, r4
 800c5ae:	2d00      	cmp	r5, #0
 800c5b0:	d14a      	bne.n	800c648 <_malloc_r+0xd4>
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	0029      	movs	r1, r5
 800c5b6:	18e3      	adds	r3, r4, r3
 800c5b8:	0030      	movs	r0, r6
 800c5ba:	9301      	str	r3, [sp, #4]
 800c5bc:	f000 fd08 	bl	800cfd0 <_sbrk_r>
 800c5c0:	9b01      	ldr	r3, [sp, #4]
 800c5c2:	4283      	cmp	r3, r0
 800c5c4:	d143      	bne.n	800c64e <_malloc_r+0xda>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	3703      	adds	r7, #3
 800c5ca:	1aff      	subs	r7, r7, r3
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	439f      	bics	r7, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	2f0c      	cmp	r7, #12
 800c5d4:	d200      	bcs.n	800c5d8 <_malloc_r+0x64>
 800c5d6:	270c      	movs	r7, #12
 800c5d8:	0039      	movs	r1, r7
 800c5da:	0030      	movs	r0, r6
 800c5dc:	f7ff ffa8 	bl	800c530 <sbrk_aligned>
 800c5e0:	1c43      	adds	r3, r0, #1
 800c5e2:	d034      	beq.n	800c64e <_malloc_r+0xda>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	19df      	adds	r7, r3, r7
 800c5e8:	6027      	str	r7, [r4, #0]
 800c5ea:	e013      	b.n	800c614 <_malloc_r+0xa0>
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	dacb      	bge.n	800c588 <_malloc_r+0x14>
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	2500      	movs	r5, #0
 800c5f4:	6033      	str	r3, [r6, #0]
 800c5f6:	0028      	movs	r0, r5
 800c5f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5fa:	6822      	ldr	r2, [r4, #0]
 800c5fc:	1bd1      	subs	r1, r2, r7
 800c5fe:	d420      	bmi.n	800c642 <_malloc_r+0xce>
 800c600:	290b      	cmp	r1, #11
 800c602:	d917      	bls.n	800c634 <_malloc_r+0xc0>
 800c604:	19e2      	adds	r2, r4, r7
 800c606:	6027      	str	r7, [r4, #0]
 800c608:	42a3      	cmp	r3, r4
 800c60a:	d111      	bne.n	800c630 <_malloc_r+0xbc>
 800c60c:	602a      	str	r2, [r5, #0]
 800c60e:	6863      	ldr	r3, [r4, #4]
 800c610:	6011      	str	r1, [r2, #0]
 800c612:	6053      	str	r3, [r2, #4]
 800c614:	0030      	movs	r0, r6
 800c616:	0025      	movs	r5, r4
 800c618:	f001 f82e 	bl	800d678 <__malloc_unlock>
 800c61c:	2207      	movs	r2, #7
 800c61e:	350b      	adds	r5, #11
 800c620:	1d23      	adds	r3, r4, #4
 800c622:	4395      	bics	r5, r2
 800c624:	1aea      	subs	r2, r5, r3
 800c626:	429d      	cmp	r5, r3
 800c628:	d0e5      	beq.n	800c5f6 <_malloc_r+0x82>
 800c62a:	1b5b      	subs	r3, r3, r5
 800c62c:	50a3      	str	r3, [r4, r2]
 800c62e:	e7e2      	b.n	800c5f6 <_malloc_r+0x82>
 800c630:	605a      	str	r2, [r3, #4]
 800c632:	e7ec      	b.n	800c60e <_malloc_r+0x9a>
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	42a3      	cmp	r3, r4
 800c638:	d101      	bne.n	800c63e <_malloc_r+0xca>
 800c63a:	602a      	str	r2, [r5, #0]
 800c63c:	e7ea      	b.n	800c614 <_malloc_r+0xa0>
 800c63e:	605a      	str	r2, [r3, #4]
 800c640:	e7e8      	b.n	800c614 <_malloc_r+0xa0>
 800c642:	0023      	movs	r3, r4
 800c644:	6864      	ldr	r4, [r4, #4]
 800c646:	e7a7      	b.n	800c598 <_malloc_r+0x24>
 800c648:	002c      	movs	r4, r5
 800c64a:	686d      	ldr	r5, [r5, #4]
 800c64c:	e7af      	b.n	800c5ae <_malloc_r+0x3a>
 800c64e:	230c      	movs	r3, #12
 800c650:	0030      	movs	r0, r6
 800c652:	6033      	str	r3, [r6, #0]
 800c654:	f001 f810 	bl	800d678 <__malloc_unlock>
 800c658:	e7cd      	b.n	800c5f6 <_malloc_r+0x82>
 800c65a:	46c0      	nop			; (mov r8, r8)
 800c65c:	2000060c 	.word	0x2000060c

0800c660 <__ssputs_r>:
 800c660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c662:	688e      	ldr	r6, [r1, #8]
 800c664:	b085      	sub	sp, #20
 800c666:	0007      	movs	r7, r0
 800c668:	000c      	movs	r4, r1
 800c66a:	9203      	str	r2, [sp, #12]
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	429e      	cmp	r6, r3
 800c670:	d83c      	bhi.n	800c6ec <__ssputs_r+0x8c>
 800c672:	2390      	movs	r3, #144	; 0x90
 800c674:	898a      	ldrh	r2, [r1, #12]
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	421a      	tst	r2, r3
 800c67a:	d034      	beq.n	800c6e6 <__ssputs_r+0x86>
 800c67c:	6909      	ldr	r1, [r1, #16]
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	6960      	ldr	r0, [r4, #20]
 800c682:	1a5b      	subs	r3, r3, r1
 800c684:	9302      	str	r3, [sp, #8]
 800c686:	2303      	movs	r3, #3
 800c688:	4343      	muls	r3, r0
 800c68a:	0fdd      	lsrs	r5, r3, #31
 800c68c:	18ed      	adds	r5, r5, r3
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	9802      	ldr	r0, [sp, #8]
 800c692:	3301      	adds	r3, #1
 800c694:	181b      	adds	r3, r3, r0
 800c696:	106d      	asrs	r5, r5, #1
 800c698:	42ab      	cmp	r3, r5
 800c69a:	d900      	bls.n	800c69e <__ssputs_r+0x3e>
 800c69c:	001d      	movs	r5, r3
 800c69e:	0553      	lsls	r3, r2, #21
 800c6a0:	d532      	bpl.n	800c708 <__ssputs_r+0xa8>
 800c6a2:	0029      	movs	r1, r5
 800c6a4:	0038      	movs	r0, r7
 800c6a6:	f7ff ff65 	bl	800c574 <_malloc_r>
 800c6aa:	1e06      	subs	r6, r0, #0
 800c6ac:	d109      	bne.n	800c6c2 <__ssputs_r+0x62>
 800c6ae:	230c      	movs	r3, #12
 800c6b0:	603b      	str	r3, [r7, #0]
 800c6b2:	2340      	movs	r3, #64	; 0x40
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	89a2      	ldrh	r2, [r4, #12]
 800c6b8:	4240      	negs	r0, r0
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	81a3      	strh	r3, [r4, #12]
 800c6be:	b005      	add	sp, #20
 800c6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c2:	9a02      	ldr	r2, [sp, #8]
 800c6c4:	6921      	ldr	r1, [r4, #16]
 800c6c6:	f7ff f9ea 	bl	800ba9e <memcpy>
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	4a14      	ldr	r2, [pc, #80]	; (800c720 <__ssputs_r+0xc0>)
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	2380      	movs	r3, #128	; 0x80
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	9b02      	ldr	r3, [sp, #8]
 800c6d8:	6126      	str	r6, [r4, #16]
 800c6da:	18f6      	adds	r6, r6, r3
 800c6dc:	6026      	str	r6, [r4, #0]
 800c6de:	6165      	str	r5, [r4, #20]
 800c6e0:	9e01      	ldr	r6, [sp, #4]
 800c6e2:	1aed      	subs	r5, r5, r3
 800c6e4:	60a5      	str	r5, [r4, #8]
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	429e      	cmp	r6, r3
 800c6ea:	d900      	bls.n	800c6ee <__ssputs_r+0x8e>
 800c6ec:	9e01      	ldr	r6, [sp, #4]
 800c6ee:	0032      	movs	r2, r6
 800c6f0:	9903      	ldr	r1, [sp, #12]
 800c6f2:	6820      	ldr	r0, [r4, #0]
 800c6f4:	f000 ffa5 	bl	800d642 <memmove>
 800c6f8:	68a3      	ldr	r3, [r4, #8]
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	1b9b      	subs	r3, r3, r6
 800c6fe:	60a3      	str	r3, [r4, #8]
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	199e      	adds	r6, r3, r6
 800c704:	6026      	str	r6, [r4, #0]
 800c706:	e7da      	b.n	800c6be <__ssputs_r+0x5e>
 800c708:	002a      	movs	r2, r5
 800c70a:	0038      	movs	r0, r7
 800c70c:	f000 ffbc 	bl	800d688 <_realloc_r>
 800c710:	1e06      	subs	r6, r0, #0
 800c712:	d1e0      	bne.n	800c6d6 <__ssputs_r+0x76>
 800c714:	0038      	movs	r0, r7
 800c716:	6921      	ldr	r1, [r4, #16]
 800c718:	f7ff fec0 	bl	800c49c <_free_r>
 800c71c:	e7c7      	b.n	800c6ae <__ssputs_r+0x4e>
 800c71e:	46c0      	nop			; (mov r8, r8)
 800c720:	fffffb7f 	.word	0xfffffb7f

0800c724 <_svfiprintf_r>:
 800c724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c726:	b0a1      	sub	sp, #132	; 0x84
 800c728:	9003      	str	r0, [sp, #12]
 800c72a:	001d      	movs	r5, r3
 800c72c:	898b      	ldrh	r3, [r1, #12]
 800c72e:	000f      	movs	r7, r1
 800c730:	0016      	movs	r6, r2
 800c732:	061b      	lsls	r3, r3, #24
 800c734:	d511      	bpl.n	800c75a <_svfiprintf_r+0x36>
 800c736:	690b      	ldr	r3, [r1, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10e      	bne.n	800c75a <_svfiprintf_r+0x36>
 800c73c:	2140      	movs	r1, #64	; 0x40
 800c73e:	f7ff ff19 	bl	800c574 <_malloc_r>
 800c742:	6038      	str	r0, [r7, #0]
 800c744:	6138      	str	r0, [r7, #16]
 800c746:	2800      	cmp	r0, #0
 800c748:	d105      	bne.n	800c756 <_svfiprintf_r+0x32>
 800c74a:	230c      	movs	r3, #12
 800c74c:	9a03      	ldr	r2, [sp, #12]
 800c74e:	3801      	subs	r0, #1
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	b021      	add	sp, #132	; 0x84
 800c754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c756:	2340      	movs	r3, #64	; 0x40
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	2300      	movs	r3, #0
 800c75c:	ac08      	add	r4, sp, #32
 800c75e:	6163      	str	r3, [r4, #20]
 800c760:	3320      	adds	r3, #32
 800c762:	7663      	strb	r3, [r4, #25]
 800c764:	3310      	adds	r3, #16
 800c766:	76a3      	strb	r3, [r4, #26]
 800c768:	9507      	str	r5, [sp, #28]
 800c76a:	0035      	movs	r5, r6
 800c76c:	782b      	ldrb	r3, [r5, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <_svfiprintf_r+0x52>
 800c772:	2b25      	cmp	r3, #37	; 0x25
 800c774:	d147      	bne.n	800c806 <_svfiprintf_r+0xe2>
 800c776:	1bab      	subs	r3, r5, r6
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	42b5      	cmp	r5, r6
 800c77c:	d00c      	beq.n	800c798 <_svfiprintf_r+0x74>
 800c77e:	0032      	movs	r2, r6
 800c780:	0039      	movs	r1, r7
 800c782:	9803      	ldr	r0, [sp, #12]
 800c784:	f7ff ff6c 	bl	800c660 <__ssputs_r>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d100      	bne.n	800c78e <_svfiprintf_r+0x6a>
 800c78c:	e0ae      	b.n	800c8ec <_svfiprintf_r+0x1c8>
 800c78e:	6962      	ldr	r2, [r4, #20]
 800c790:	9b05      	ldr	r3, [sp, #20]
 800c792:	4694      	mov	ip, r2
 800c794:	4463      	add	r3, ip
 800c796:	6163      	str	r3, [r4, #20]
 800c798:	782b      	ldrb	r3, [r5, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d100      	bne.n	800c7a0 <_svfiprintf_r+0x7c>
 800c79e:	e0a5      	b.n	800c8ec <_svfiprintf_r+0x1c8>
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4252      	negs	r2, r2
 800c7a6:	6062      	str	r2, [r4, #4]
 800c7a8:	a904      	add	r1, sp, #16
 800c7aa:	3254      	adds	r2, #84	; 0x54
 800c7ac:	1852      	adds	r2, r2, r1
 800c7ae:	1c6e      	adds	r6, r5, #1
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	60e3      	str	r3, [r4, #12]
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	7013      	strb	r3, [r2, #0]
 800c7b8:	65a3      	str	r3, [r4, #88]	; 0x58
 800c7ba:	2205      	movs	r2, #5
 800c7bc:	7831      	ldrb	r1, [r6, #0]
 800c7be:	4854      	ldr	r0, [pc, #336]	; (800c910 <_svfiprintf_r+0x1ec>)
 800c7c0:	f7ff f962 	bl	800ba88 <memchr>
 800c7c4:	1c75      	adds	r5, r6, #1
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d11f      	bne.n	800c80a <_svfiprintf_r+0xe6>
 800c7ca:	6822      	ldr	r2, [r4, #0]
 800c7cc:	06d3      	lsls	r3, r2, #27
 800c7ce:	d504      	bpl.n	800c7da <_svfiprintf_r+0xb6>
 800c7d0:	2353      	movs	r3, #83	; 0x53
 800c7d2:	a904      	add	r1, sp, #16
 800c7d4:	185b      	adds	r3, r3, r1
 800c7d6:	2120      	movs	r1, #32
 800c7d8:	7019      	strb	r1, [r3, #0]
 800c7da:	0713      	lsls	r3, r2, #28
 800c7dc:	d504      	bpl.n	800c7e8 <_svfiprintf_r+0xc4>
 800c7de:	2353      	movs	r3, #83	; 0x53
 800c7e0:	a904      	add	r1, sp, #16
 800c7e2:	185b      	adds	r3, r3, r1
 800c7e4:	212b      	movs	r1, #43	; 0x2b
 800c7e6:	7019      	strb	r1, [r3, #0]
 800c7e8:	7833      	ldrb	r3, [r6, #0]
 800c7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ec:	d016      	beq.n	800c81c <_svfiprintf_r+0xf8>
 800c7ee:	0035      	movs	r5, r6
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	200a      	movs	r0, #10
 800c7f4:	68e3      	ldr	r3, [r4, #12]
 800c7f6:	782a      	ldrb	r2, [r5, #0]
 800c7f8:	1c6e      	adds	r6, r5, #1
 800c7fa:	3a30      	subs	r2, #48	; 0x30
 800c7fc:	2a09      	cmp	r2, #9
 800c7fe:	d94e      	bls.n	800c89e <_svfiprintf_r+0x17a>
 800c800:	2900      	cmp	r1, #0
 800c802:	d111      	bne.n	800c828 <_svfiprintf_r+0x104>
 800c804:	e017      	b.n	800c836 <_svfiprintf_r+0x112>
 800c806:	3501      	adds	r5, #1
 800c808:	e7b0      	b.n	800c76c <_svfiprintf_r+0x48>
 800c80a:	4b41      	ldr	r3, [pc, #260]	; (800c910 <_svfiprintf_r+0x1ec>)
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	1ac0      	subs	r0, r0, r3
 800c810:	2301      	movs	r3, #1
 800c812:	4083      	lsls	r3, r0
 800c814:	4313      	orrs	r3, r2
 800c816:	002e      	movs	r6, r5
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	e7ce      	b.n	800c7ba <_svfiprintf_r+0x96>
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	1d19      	adds	r1, r3, #4
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	9107      	str	r1, [sp, #28]
 800c824:	2b00      	cmp	r3, #0
 800c826:	db01      	blt.n	800c82c <_svfiprintf_r+0x108>
 800c828:	930b      	str	r3, [sp, #44]	; 0x2c
 800c82a:	e004      	b.n	800c836 <_svfiprintf_r+0x112>
 800c82c:	425b      	negs	r3, r3
 800c82e:	60e3      	str	r3, [r4, #12]
 800c830:	2302      	movs	r3, #2
 800c832:	4313      	orrs	r3, r2
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	782b      	ldrb	r3, [r5, #0]
 800c838:	2b2e      	cmp	r3, #46	; 0x2e
 800c83a:	d10a      	bne.n	800c852 <_svfiprintf_r+0x12e>
 800c83c:	786b      	ldrb	r3, [r5, #1]
 800c83e:	2b2a      	cmp	r3, #42	; 0x2a
 800c840:	d135      	bne.n	800c8ae <_svfiprintf_r+0x18a>
 800c842:	9b07      	ldr	r3, [sp, #28]
 800c844:	3502      	adds	r5, #2
 800c846:	1d1a      	adds	r2, r3, #4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	9207      	str	r2, [sp, #28]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	db2b      	blt.n	800c8a8 <_svfiprintf_r+0x184>
 800c850:	9309      	str	r3, [sp, #36]	; 0x24
 800c852:	4e30      	ldr	r6, [pc, #192]	; (800c914 <_svfiprintf_r+0x1f0>)
 800c854:	2203      	movs	r2, #3
 800c856:	0030      	movs	r0, r6
 800c858:	7829      	ldrb	r1, [r5, #0]
 800c85a:	f7ff f915 	bl	800ba88 <memchr>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d006      	beq.n	800c870 <_svfiprintf_r+0x14c>
 800c862:	2340      	movs	r3, #64	; 0x40
 800c864:	1b80      	subs	r0, r0, r6
 800c866:	4083      	lsls	r3, r0
 800c868:	6822      	ldr	r2, [r4, #0]
 800c86a:	3501      	adds	r5, #1
 800c86c:	4313      	orrs	r3, r2
 800c86e:	6023      	str	r3, [r4, #0]
 800c870:	7829      	ldrb	r1, [r5, #0]
 800c872:	2206      	movs	r2, #6
 800c874:	4828      	ldr	r0, [pc, #160]	; (800c918 <_svfiprintf_r+0x1f4>)
 800c876:	1c6e      	adds	r6, r5, #1
 800c878:	7621      	strb	r1, [r4, #24]
 800c87a:	f7ff f905 	bl	800ba88 <memchr>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d03c      	beq.n	800c8fc <_svfiprintf_r+0x1d8>
 800c882:	4b26      	ldr	r3, [pc, #152]	; (800c91c <_svfiprintf_r+0x1f8>)
 800c884:	2b00      	cmp	r3, #0
 800c886:	d125      	bne.n	800c8d4 <_svfiprintf_r+0x1b0>
 800c888:	2207      	movs	r2, #7
 800c88a:	9b07      	ldr	r3, [sp, #28]
 800c88c:	3307      	adds	r3, #7
 800c88e:	4393      	bics	r3, r2
 800c890:	3308      	adds	r3, #8
 800c892:	9307      	str	r3, [sp, #28]
 800c894:	6963      	ldr	r3, [r4, #20]
 800c896:	9a04      	ldr	r2, [sp, #16]
 800c898:	189b      	adds	r3, r3, r2
 800c89a:	6163      	str	r3, [r4, #20]
 800c89c:	e765      	b.n	800c76a <_svfiprintf_r+0x46>
 800c89e:	4343      	muls	r3, r0
 800c8a0:	0035      	movs	r5, r6
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	189b      	adds	r3, r3, r2
 800c8a6:	e7a6      	b.n	800c7f6 <_svfiprintf_r+0xd2>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	425b      	negs	r3, r3
 800c8ac:	e7d0      	b.n	800c850 <_svfiprintf_r+0x12c>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	200a      	movs	r0, #10
 800c8b2:	001a      	movs	r2, r3
 800c8b4:	3501      	adds	r5, #1
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	7829      	ldrb	r1, [r5, #0]
 800c8ba:	1c6e      	adds	r6, r5, #1
 800c8bc:	3930      	subs	r1, #48	; 0x30
 800c8be:	2909      	cmp	r1, #9
 800c8c0:	d903      	bls.n	800c8ca <_svfiprintf_r+0x1a6>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0c5      	beq.n	800c852 <_svfiprintf_r+0x12e>
 800c8c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c8:	e7c3      	b.n	800c852 <_svfiprintf_r+0x12e>
 800c8ca:	4342      	muls	r2, r0
 800c8cc:	0035      	movs	r5, r6
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	1852      	adds	r2, r2, r1
 800c8d2:	e7f1      	b.n	800c8b8 <_svfiprintf_r+0x194>
 800c8d4:	ab07      	add	r3, sp, #28
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	003a      	movs	r2, r7
 800c8da:	0021      	movs	r1, r4
 800c8dc:	4b10      	ldr	r3, [pc, #64]	; (800c920 <_svfiprintf_r+0x1fc>)
 800c8de:	9803      	ldr	r0, [sp, #12]
 800c8e0:	f7fc f92a 	bl	8008b38 <_printf_float>
 800c8e4:	9004      	str	r0, [sp, #16]
 800c8e6:	9b04      	ldr	r3, [sp, #16]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	d1d3      	bne.n	800c894 <_svfiprintf_r+0x170>
 800c8ec:	89bb      	ldrh	r3, [r7, #12]
 800c8ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c8f0:	065b      	lsls	r3, r3, #25
 800c8f2:	d400      	bmi.n	800c8f6 <_svfiprintf_r+0x1d2>
 800c8f4:	e72d      	b.n	800c752 <_svfiprintf_r+0x2e>
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	4240      	negs	r0, r0
 800c8fa:	e72a      	b.n	800c752 <_svfiprintf_r+0x2e>
 800c8fc:	ab07      	add	r3, sp, #28
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	003a      	movs	r2, r7
 800c902:	0021      	movs	r1, r4
 800c904:	4b06      	ldr	r3, [pc, #24]	; (800c920 <_svfiprintf_r+0x1fc>)
 800c906:	9803      	ldr	r0, [sp, #12]
 800c908:	f7fc fbc8 	bl	800909c <_printf_i>
 800c90c:	e7ea      	b.n	800c8e4 <_svfiprintf_r+0x1c0>
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	0800e3e4 	.word	0x0800e3e4
 800c914:	0800e3ea 	.word	0x0800e3ea
 800c918:	0800e3ee 	.word	0x0800e3ee
 800c91c:	08008b39 	.word	0x08008b39
 800c920:	0800c661 	.word	0x0800c661

0800c924 <_sungetc_r>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	0014      	movs	r4, r2
 800c928:	1c4b      	adds	r3, r1, #1
 800c92a:	d103      	bne.n	800c934 <_sungetc_r+0x10>
 800c92c:	2501      	movs	r5, #1
 800c92e:	426d      	negs	r5, r5
 800c930:	0028      	movs	r0, r5
 800c932:	bd70      	pop	{r4, r5, r6, pc}
 800c934:	8993      	ldrh	r3, [r2, #12]
 800c936:	2220      	movs	r2, #32
 800c938:	4393      	bics	r3, r2
 800c93a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	b2ce      	uxtb	r6, r1
 800c940:	6863      	ldr	r3, [r4, #4]
 800c942:	b2cd      	uxtb	r5, r1
 800c944:	2a00      	cmp	r2, #0
 800c946:	d010      	beq.n	800c96a <_sungetc_r+0x46>
 800c948:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c94a:	429a      	cmp	r2, r3
 800c94c:	dd07      	ble.n	800c95e <_sungetc_r+0x3a>
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	3b01      	subs	r3, #1
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	701e      	strb	r6, [r3, #0]
 800c956:	6863      	ldr	r3, [r4, #4]
 800c958:	3301      	adds	r3, #1
 800c95a:	6063      	str	r3, [r4, #4]
 800c95c:	e7e8      	b.n	800c930 <_sungetc_r+0xc>
 800c95e:	0021      	movs	r1, r4
 800c960:	f000 fc24 	bl	800d1ac <__submore>
 800c964:	2800      	cmp	r0, #0
 800c966:	d0f2      	beq.n	800c94e <_sungetc_r+0x2a>
 800c968:	e7e0      	b.n	800c92c <_sungetc_r+0x8>
 800c96a:	6921      	ldr	r1, [r4, #16]
 800c96c:	6822      	ldr	r2, [r4, #0]
 800c96e:	2900      	cmp	r1, #0
 800c970:	d007      	beq.n	800c982 <_sungetc_r+0x5e>
 800c972:	4291      	cmp	r1, r2
 800c974:	d205      	bcs.n	800c982 <_sungetc_r+0x5e>
 800c976:	1e51      	subs	r1, r2, #1
 800c978:	7808      	ldrb	r0, [r1, #0]
 800c97a:	42a8      	cmp	r0, r5
 800c97c:	d101      	bne.n	800c982 <_sungetc_r+0x5e>
 800c97e:	6021      	str	r1, [r4, #0]
 800c980:	e7ea      	b.n	800c958 <_sungetc_r+0x34>
 800c982:	6423      	str	r3, [r4, #64]	; 0x40
 800c984:	0023      	movs	r3, r4
 800c986:	3344      	adds	r3, #68	; 0x44
 800c988:	6363      	str	r3, [r4, #52]	; 0x34
 800c98a:	2303      	movs	r3, #3
 800c98c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c98e:	0023      	movs	r3, r4
 800c990:	3346      	adds	r3, #70	; 0x46
 800c992:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c994:	701e      	strb	r6, [r3, #0]
 800c996:	6023      	str	r3, [r4, #0]
 800c998:	2301      	movs	r3, #1
 800c99a:	e7de      	b.n	800c95a <_sungetc_r+0x36>

0800c99c <__ssrefill_r>:
 800c99c:	b510      	push	{r4, lr}
 800c99e:	000c      	movs	r4, r1
 800c9a0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c9a2:	2900      	cmp	r1, #0
 800c9a4:	d00e      	beq.n	800c9c4 <__ssrefill_r+0x28>
 800c9a6:	0023      	movs	r3, r4
 800c9a8:	3344      	adds	r3, #68	; 0x44
 800c9aa:	4299      	cmp	r1, r3
 800c9ac:	d001      	beq.n	800c9b2 <__ssrefill_r+0x16>
 800c9ae:	f7ff fd75 	bl	800c49c <_free_r>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9b6:	6360      	str	r0, [r4, #52]	; 0x34
 800c9b8:	6063      	str	r3, [r4, #4]
 800c9ba:	4283      	cmp	r3, r0
 800c9bc:	d002      	beq.n	800c9c4 <__ssrefill_r+0x28>
 800c9be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	bd10      	pop	{r4, pc}
 800c9c4:	6923      	ldr	r3, [r4, #16]
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	89a2      	ldrh	r2, [r4, #12]
 800c9ce:	6063      	str	r3, [r4, #4]
 800c9d0:	3320      	adds	r3, #32
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	4240      	negs	r0, r0
 800c9d8:	e7f3      	b.n	800c9c2 <__ssrefill_r+0x26>
	...

0800c9dc <__ssvfiscanf_r>:
 800c9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9de:	4cb8      	ldr	r4, [pc, #736]	; (800ccc0 <__ssvfiscanf_r+0x2e4>)
 800c9e0:	0006      	movs	r6, r0
 800c9e2:	44a5      	add	sp, r4
 800c9e4:	000c      	movs	r4, r1
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	9146      	str	r1, [sp, #280]	; 0x118
 800c9ea:	9147      	str	r1, [sp, #284]	; 0x11c
 800c9ec:	a903      	add	r1, sp, #12
 800c9ee:	9148      	str	r1, [sp, #288]	; 0x120
 800c9f0:	21be      	movs	r1, #190	; 0xbe
 800c9f2:	48b4      	ldr	r0, [pc, #720]	; (800ccc4 <__ssvfiscanf_r+0x2e8>)
 800c9f4:	0049      	lsls	r1, r1, #1
 800c9f6:	ad43      	add	r5, sp, #268	; 0x10c
 800c9f8:	5068      	str	r0, [r5, r1]
 800c9fa:	25c0      	movs	r5, #192	; 0xc0
 800c9fc:	49b2      	ldr	r1, [pc, #712]	; (800ccc8 <__ssvfiscanf_r+0x2ec>)
 800c9fe:	006d      	lsls	r5, r5, #1
 800ca00:	a843      	add	r0, sp, #268	; 0x10c
 800ca02:	5141      	str	r1, [r0, r5]
 800ca04:	9302      	str	r3, [sp, #8]
 800ca06:	7813      	ldrb	r3, [r2, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d100      	bne.n	800ca0e <__ssvfiscanf_r+0x32>
 800ca0c:	e155      	b.n	800ccba <__ssvfiscanf_r+0x2de>
 800ca0e:	49af      	ldr	r1, [pc, #700]	; (800cccc <__ssvfiscanf_r+0x2f0>)
 800ca10:	2508      	movs	r5, #8
 800ca12:	5cc8      	ldrb	r0, [r1, r3]
 800ca14:	2108      	movs	r1, #8
 800ca16:	1c57      	adds	r7, r2, #1
 800ca18:	4001      	ands	r1, r0
 800ca1a:	4228      	tst	r0, r5
 800ca1c:	d020      	beq.n	800ca60 <__ssvfiscanf_r+0x84>
 800ca1e:	6863      	ldr	r3, [r4, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	dd12      	ble.n	800ca4a <__ssvfiscanf_r+0x6e>
 800ca24:	6823      	ldr	r3, [r4, #0]
 800ca26:	49a9      	ldr	r1, [pc, #676]	; (800cccc <__ssvfiscanf_r+0x2f0>)
 800ca28:	781a      	ldrb	r2, [r3, #0]
 800ca2a:	5c8a      	ldrb	r2, [r1, r2]
 800ca2c:	2108      	movs	r1, #8
 800ca2e:	420a      	tst	r2, r1
 800ca30:	d101      	bne.n	800ca36 <__ssvfiscanf_r+0x5a>
 800ca32:	003a      	movs	r2, r7
 800ca34:	e7e7      	b.n	800ca06 <__ssvfiscanf_r+0x2a>
 800ca36:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800ca38:	3301      	adds	r3, #1
 800ca3a:	9200      	str	r2, [sp, #0]
 800ca3c:	3201      	adds	r2, #1
 800ca3e:	9247      	str	r2, [sp, #284]	; 0x11c
 800ca40:	6862      	ldr	r2, [r4, #4]
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	3a01      	subs	r2, #1
 800ca46:	6062      	str	r2, [r4, #4]
 800ca48:	e7e9      	b.n	800ca1e <__ssvfiscanf_r+0x42>
 800ca4a:	22c0      	movs	r2, #192	; 0xc0
 800ca4c:	ab43      	add	r3, sp, #268	; 0x10c
 800ca4e:	0052      	lsls	r2, r2, #1
 800ca50:	589b      	ldr	r3, [r3, r2]
 800ca52:	0021      	movs	r1, r4
 800ca54:	0030      	movs	r0, r6
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	4798      	blx	r3
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d0e2      	beq.n	800ca24 <__ssvfiscanf_r+0x48>
 800ca5e:	e7e8      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800ca60:	001d      	movs	r5, r3
 800ca62:	2b25      	cmp	r3, #37	; 0x25
 800ca64:	d164      	bne.n	800cb30 <__ssvfiscanf_r+0x154>
 800ca66:	9145      	str	r1, [sp, #276]	; 0x114
 800ca68:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca6a:	7853      	ldrb	r3, [r2, #1]
 800ca6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6e:	d102      	bne.n	800ca76 <__ssvfiscanf_r+0x9a>
 800ca70:	3b1a      	subs	r3, #26
 800ca72:	9343      	str	r3, [sp, #268]	; 0x10c
 800ca74:	1c97      	adds	r7, r2, #2
 800ca76:	003d      	movs	r5, r7
 800ca78:	220a      	movs	r2, #10
 800ca7a:	7829      	ldrb	r1, [r5, #0]
 800ca7c:	1c6b      	adds	r3, r5, #1
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	000b      	movs	r3, r1
 800ca82:	3b30      	subs	r3, #48	; 0x30
 800ca84:	2b09      	cmp	r3, #9
 800ca86:	d91f      	bls.n	800cac8 <__ssvfiscanf_r+0xec>
 800ca88:	4f91      	ldr	r7, [pc, #580]	; (800ccd0 <__ssvfiscanf_r+0x2f4>)
 800ca8a:	2203      	movs	r2, #3
 800ca8c:	0038      	movs	r0, r7
 800ca8e:	f7fe fffb 	bl	800ba88 <memchr>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d007      	beq.n	800caa6 <__ssvfiscanf_r+0xca>
 800ca96:	2301      	movs	r3, #1
 800ca98:	1bc0      	subs	r0, r0, r7
 800ca9a:	4083      	lsls	r3, r0
 800ca9c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ca9e:	9d00      	ldr	r5, [sp, #0]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	9201      	str	r2, [sp, #4]
 800caa4:	9343      	str	r3, [sp, #268]	; 0x10c
 800caa6:	1c6f      	adds	r7, r5, #1
 800caa8:	782d      	ldrb	r5, [r5, #0]
 800caaa:	2d78      	cmp	r5, #120	; 0x78
 800caac:	d807      	bhi.n	800cabe <__ssvfiscanf_r+0xe2>
 800caae:	2d57      	cmp	r5, #87	; 0x57
 800cab0:	d812      	bhi.n	800cad8 <__ssvfiscanf_r+0xfc>
 800cab2:	2d25      	cmp	r5, #37	; 0x25
 800cab4:	d03c      	beq.n	800cb30 <__ssvfiscanf_r+0x154>
 800cab6:	d836      	bhi.n	800cb26 <__ssvfiscanf_r+0x14a>
 800cab8:	2d00      	cmp	r5, #0
 800caba:	d100      	bne.n	800cabe <__ssvfiscanf_r+0xe2>
 800cabc:	e0fa      	b.n	800ccb4 <__ssvfiscanf_r+0x2d8>
 800cabe:	2303      	movs	r3, #3
 800cac0:	9349      	str	r3, [sp, #292]	; 0x124
 800cac2:	3307      	adds	r3, #7
 800cac4:	9344      	str	r3, [sp, #272]	; 0x110
 800cac6:	e06d      	b.n	800cba4 <__ssvfiscanf_r+0x1c8>
 800cac8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800caca:	9d00      	ldr	r5, [sp, #0]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	4353      	muls	r3, r2
 800cad0:	3b30      	subs	r3, #48	; 0x30
 800cad2:	185b      	adds	r3, r3, r1
 800cad4:	9345      	str	r3, [sp, #276]	; 0x114
 800cad6:	e7d0      	b.n	800ca7a <__ssvfiscanf_r+0x9e>
 800cad8:	0028      	movs	r0, r5
 800cada:	3858      	subs	r0, #88	; 0x58
 800cadc:	2820      	cmp	r0, #32
 800cade:	d8ee      	bhi.n	800cabe <__ssvfiscanf_r+0xe2>
 800cae0:	f7f3 fb2e 	bl	8000140 <__gnu_thumb1_case_shi>
 800cae4:	ffed0051 	.word	0xffed0051
 800cae8:	0087ffed 	.word	0x0087ffed
 800caec:	ffedffed 	.word	0xffedffed
 800caf0:	ffedffed 	.word	0xffedffed
 800caf4:	ffedffed 	.word	0xffedffed
 800caf8:	0095ffed 	.word	0x0095ffed
 800cafc:	0024007d 	.word	0x0024007d
 800cb00:	00240024 	.word	0x00240024
 800cb04:	007fffed 	.word	0x007fffed
 800cb08:	ffedffed 	.word	0xffedffed
 800cb0c:	ffedffed 	.word	0xffedffed
 800cb10:	0083009f 	.word	0x0083009f
 800cb14:	ffed004b 	.word	0xffed004b
 800cb18:	009dffed 	.word	0x009dffed
 800cb1c:	007dffed 	.word	0x007dffed
 800cb20:	ffedffed 	.word	0xffedffed
 800cb24:	0051      	.short	0x0051
 800cb26:	3d45      	subs	r5, #69	; 0x45
 800cb28:	2d02      	cmp	r5, #2
 800cb2a:	d8c8      	bhi.n	800cabe <__ssvfiscanf_r+0xe2>
 800cb2c:	2305      	movs	r3, #5
 800cb2e:	e06c      	b.n	800cc0a <__ssvfiscanf_r+0x22e>
 800cb30:	6863      	ldr	r3, [r4, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	dd0e      	ble.n	800cb54 <__ssvfiscanf_r+0x178>
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	781a      	ldrb	r2, [r3, #0]
 800cb3a:	42aa      	cmp	r2, r5
 800cb3c:	d000      	beq.n	800cb40 <__ssvfiscanf_r+0x164>
 800cb3e:	e0bc      	b.n	800ccba <__ssvfiscanf_r+0x2de>
 800cb40:	3301      	adds	r3, #1
 800cb42:	6862      	ldr	r2, [r4, #4]
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cb48:	3a01      	subs	r2, #1
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	6062      	str	r2, [r4, #4]
 800cb50:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb52:	e76e      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800cb54:	22c0      	movs	r2, #192	; 0xc0
 800cb56:	ab43      	add	r3, sp, #268	; 0x10c
 800cb58:	0052      	lsls	r2, r2, #1
 800cb5a:	589b      	ldr	r3, [r3, r2]
 800cb5c:	0021      	movs	r1, r4
 800cb5e:	0030      	movs	r0, r6
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	4798      	blx	r3
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d0e6      	beq.n	800cb36 <__ssvfiscanf_r+0x15a>
 800cb68:	9846      	ldr	r0, [sp, #280]	; 0x118
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d000      	beq.n	800cb70 <__ssvfiscanf_r+0x194>
 800cb6e:	e09d      	b.n	800ccac <__ssvfiscanf_r+0x2d0>
 800cb70:	3801      	subs	r0, #1
 800cb72:	23a5      	movs	r3, #165	; 0xa5
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	449d      	add	sp, r3
 800cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	2320      	movs	r3, #32
 800cb80:	9a00      	ldr	r2, [sp, #0]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	9343      	str	r3, [sp, #268]	; 0x10c
 800cb86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	2380      	movs	r3, #128	; 0x80
 800cb8c:	9a00      	ldr	r2, [sp, #0]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4313      	orrs	r3, r2
 800cb92:	9343      	str	r3, [sp, #268]	; 0x10c
 800cb94:	2310      	movs	r3, #16
 800cb96:	9344      	str	r3, [sp, #272]	; 0x110
 800cb98:	236e      	movs	r3, #110	; 0x6e
 800cb9a:	42ab      	cmp	r3, r5
 800cb9c:	41ad      	sbcs	r5, r5
 800cb9e:	426d      	negs	r5, r5
 800cba0:	3503      	adds	r5, #3
 800cba2:	9549      	str	r5, [sp, #292]	; 0x124
 800cba4:	6863      	ldr	r3, [r4, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	dd4a      	ble.n	800cc40 <__ssvfiscanf_r+0x264>
 800cbaa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	065b      	lsls	r3, r3, #25
 800cbb0:	d406      	bmi.n	800cbc0 <__ssvfiscanf_r+0x1e4>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	4945      	ldr	r1, [pc, #276]	; (800cccc <__ssvfiscanf_r+0x2f0>)
 800cbb6:	781a      	ldrb	r2, [r3, #0]
 800cbb8:	5c8a      	ldrb	r2, [r1, r2]
 800cbba:	2108      	movs	r1, #8
 800cbbc:	420a      	tst	r2, r1
 800cbbe:	d14a      	bne.n	800cc56 <__ssvfiscanf_r+0x27a>
 800cbc0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	dc5e      	bgt.n	800cc84 <__ssvfiscanf_r+0x2a8>
 800cbc6:	0022      	movs	r2, r4
 800cbc8:	0030      	movs	r0, r6
 800cbca:	ab02      	add	r3, sp, #8
 800cbcc:	a943      	add	r1, sp, #268	; 0x10c
 800cbce:	f000 f883 	bl	800ccd8 <_scanf_chars>
 800cbd2:	2801      	cmp	r0, #1
 800cbd4:	d071      	beq.n	800ccba <__ssvfiscanf_r+0x2de>
 800cbd6:	2802      	cmp	r0, #2
 800cbd8:	d000      	beq.n	800cbdc <__ssvfiscanf_r+0x200>
 800cbda:	e72a      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800cbdc:	e7c4      	b.n	800cb68 <__ssvfiscanf_r+0x18c>
 800cbde:	230a      	movs	r3, #10
 800cbe0:	e7d9      	b.n	800cb96 <__ssvfiscanf_r+0x1ba>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	2503      	movs	r5, #3
 800cbe6:	9344      	str	r3, [sp, #272]	; 0x110
 800cbe8:	e7db      	b.n	800cba2 <__ssvfiscanf_r+0x1c6>
 800cbea:	2308      	movs	r3, #8
 800cbec:	2504      	movs	r5, #4
 800cbee:	9344      	str	r3, [sp, #272]	; 0x110
 800cbf0:	e7d7      	b.n	800cba2 <__ssvfiscanf_r+0x1c6>
 800cbf2:	0039      	movs	r1, r7
 800cbf4:	a803      	add	r0, sp, #12
 800cbf6:	f000 f9fd 	bl	800cff4 <__sccl>
 800cbfa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cbfc:	0007      	movs	r7, r0
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	2340      	movs	r3, #64	; 0x40
 800cc02:	9a00      	ldr	r2, [sp, #0]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	9343      	str	r3, [sp, #268]	; 0x10c
 800cc08:	2301      	movs	r3, #1
 800cc0a:	9349      	str	r3, [sp, #292]	; 0x124
 800cc0c:	e7ca      	b.n	800cba4 <__ssvfiscanf_r+0x1c8>
 800cc0e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	2340      	movs	r3, #64	; 0x40
 800cc14:	9a00      	ldr	r2, [sp, #0]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	9343      	str	r3, [sp, #268]	; 0x10c
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e7f5      	b.n	800cc0a <__ssvfiscanf_r+0x22e>
 800cc1e:	2302      	movs	r3, #2
 800cc20:	e7f3      	b.n	800cc0a <__ssvfiscanf_r+0x22e>
 800cc22:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800cc24:	06c3      	lsls	r3, r0, #27
 800cc26:	d500      	bpl.n	800cc2a <__ssvfiscanf_r+0x24e>
 800cc28:	e703      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800cc2a:	9b02      	ldr	r3, [sp, #8]
 800cc2c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800cc2e:	1d19      	adds	r1, r3, #4
 800cc30:	9102      	str	r1, [sp, #8]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	07c5      	lsls	r5, r0, #31
 800cc36:	d501      	bpl.n	800cc3c <__ssvfiscanf_r+0x260>
 800cc38:	801a      	strh	r2, [r3, #0]
 800cc3a:	e6fa      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e6f8      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800cc40:	22c0      	movs	r2, #192	; 0xc0
 800cc42:	ab43      	add	r3, sp, #268	; 0x10c
 800cc44:	0052      	lsls	r2, r2, #1
 800cc46:	589b      	ldr	r3, [r3, r2]
 800cc48:	0021      	movs	r1, r4
 800cc4a:	0030      	movs	r0, r6
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	4798      	blx	r3
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d0aa      	beq.n	800cbaa <__ssvfiscanf_r+0x1ce>
 800cc54:	e788      	b.n	800cb68 <__ssvfiscanf_r+0x18c>
 800cc56:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800cc58:	9200      	str	r2, [sp, #0]
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	9247      	str	r2, [sp, #284]	; 0x11c
 800cc5e:	6862      	ldr	r2, [r4, #4]
 800cc60:	3a01      	subs	r2, #1
 800cc62:	6062      	str	r2, [r4, #4]
 800cc64:	2a00      	cmp	r2, #0
 800cc66:	dd02      	ble.n	800cc6e <__ssvfiscanf_r+0x292>
 800cc68:	3301      	adds	r3, #1
 800cc6a:	6023      	str	r3, [r4, #0]
 800cc6c:	e7a1      	b.n	800cbb2 <__ssvfiscanf_r+0x1d6>
 800cc6e:	22c0      	movs	r2, #192	; 0xc0
 800cc70:	ab43      	add	r3, sp, #268	; 0x10c
 800cc72:	0052      	lsls	r2, r2, #1
 800cc74:	589b      	ldr	r3, [r3, r2]
 800cc76:	0021      	movs	r1, r4
 800cc78:	0030      	movs	r0, r6
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4798      	blx	r3
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d097      	beq.n	800cbb2 <__ssvfiscanf_r+0x1d6>
 800cc82:	e771      	b.n	800cb68 <__ssvfiscanf_r+0x18c>
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	dc06      	bgt.n	800cc96 <__ssvfiscanf_r+0x2ba>
 800cc88:	0022      	movs	r2, r4
 800cc8a:	0030      	movs	r0, r6
 800cc8c:	ab02      	add	r3, sp, #8
 800cc8e:	a943      	add	r1, sp, #268	; 0x10c
 800cc90:	f000 f880 	bl	800cd94 <_scanf_i>
 800cc94:	e79d      	b.n	800cbd2 <__ssvfiscanf_r+0x1f6>
 800cc96:	4b0f      	ldr	r3, [pc, #60]	; (800ccd4 <__ssvfiscanf_r+0x2f8>)
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d100      	bne.n	800cc9e <__ssvfiscanf_r+0x2c2>
 800cc9c:	e6c9      	b.n	800ca32 <__ssvfiscanf_r+0x56>
 800cc9e:	0022      	movs	r2, r4
 800cca0:	0030      	movs	r0, r6
 800cca2:	ab02      	add	r3, sp, #8
 800cca4:	a943      	add	r1, sp, #268	; 0x10c
 800cca6:	f7fc fb0b 	bl	80092c0 <_scanf_float>
 800ccaa:	e792      	b.n	800cbd2 <__ssvfiscanf_r+0x1f6>
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	065b      	lsls	r3, r3, #25
 800ccb0:	d400      	bmi.n	800ccb4 <__ssvfiscanf_r+0x2d8>
 800ccb2:	e75e      	b.n	800cb72 <__ssvfiscanf_r+0x196>
 800ccb4:	2001      	movs	r0, #1
 800ccb6:	4240      	negs	r0, r0
 800ccb8:	e75b      	b.n	800cb72 <__ssvfiscanf_r+0x196>
 800ccba:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ccbc:	e759      	b.n	800cb72 <__ssvfiscanf_r+0x196>
 800ccbe:	46c0      	nop			; (mov r8, r8)
 800ccc0:	fffffd6c 	.word	0xfffffd6c
 800ccc4:	0800c925 	.word	0x0800c925
 800ccc8:	0800c99d 	.word	0x0800c99d
 800cccc:	0800e081 	.word	0x0800e081
 800ccd0:	0800e3ea 	.word	0x0800e3ea
 800ccd4:	080092c1 	.word	0x080092c1

0800ccd8 <_scanf_chars>:
 800ccd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccda:	0015      	movs	r5, r2
 800ccdc:	688a      	ldr	r2, [r1, #8]
 800ccde:	000c      	movs	r4, r1
 800cce0:	9001      	str	r0, [sp, #4]
 800cce2:	2a00      	cmp	r2, #0
 800cce4:	d105      	bne.n	800ccf2 <_scanf_chars+0x1a>
 800cce6:	6989      	ldr	r1, [r1, #24]
 800cce8:	3201      	adds	r2, #1
 800ccea:	2900      	cmp	r1, #0
 800ccec:	d000      	beq.n	800ccf0 <_scanf_chars+0x18>
 800ccee:	3a02      	subs	r2, #2
 800ccf0:	60a2      	str	r2, [r4, #8]
 800ccf2:	6822      	ldr	r2, [r4, #0]
 800ccf4:	06d2      	lsls	r2, r2, #27
 800ccf6:	d403      	bmi.n	800cd00 <_scanf_chars+0x28>
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	1d11      	adds	r1, r2, #4
 800ccfc:	6019      	str	r1, [r3, #0]
 800ccfe:	6817      	ldr	r7, [r2, #0]
 800cd00:	2600      	movs	r6, #0
 800cd02:	69a0      	ldr	r0, [r4, #24]
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d013      	beq.n	800cd30 <_scanf_chars+0x58>
 800cd08:	2801      	cmp	r0, #1
 800cd0a:	d108      	bne.n	800cd1e <_scanf_chars+0x46>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	6962      	ldr	r2, [r4, #20]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	5cd3      	ldrb	r3, [r2, r3]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10b      	bne.n	800cd30 <_scanf_chars+0x58>
 800cd18:	2e00      	cmp	r6, #0
 800cd1a:	d038      	beq.n	800cd8e <_scanf_chars+0xb6>
 800cd1c:	e026      	b.n	800cd6c <_scanf_chars+0x94>
 800cd1e:	2802      	cmp	r0, #2
 800cd20:	d124      	bne.n	800cd6c <_scanf_chars+0x94>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	4a1a      	ldr	r2, [pc, #104]	; (800cd90 <_scanf_chars+0xb8>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	5cd3      	ldrb	r3, [r2, r3]
 800cd2a:	2208      	movs	r2, #8
 800cd2c:	4213      	tst	r3, r2
 800cd2e:	d11d      	bne.n	800cd6c <_scanf_chars+0x94>
 800cd30:	2210      	movs	r2, #16
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	3601      	adds	r6, #1
 800cd36:	4213      	tst	r3, r2
 800cd38:	d103      	bne.n	800cd42 <_scanf_chars+0x6a>
 800cd3a:	682b      	ldr	r3, [r5, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	703b      	strb	r3, [r7, #0]
 800cd40:	3701      	adds	r7, #1
 800cd42:	682a      	ldr	r2, [r5, #0]
 800cd44:	686b      	ldr	r3, [r5, #4]
 800cd46:	3201      	adds	r2, #1
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	68a2      	ldr	r2, [r4, #8]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	3a01      	subs	r2, #1
 800cd50:	606b      	str	r3, [r5, #4]
 800cd52:	60a2      	str	r2, [r4, #8]
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	d009      	beq.n	800cd6c <_scanf_chars+0x94>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	dcd2      	bgt.n	800cd02 <_scanf_chars+0x2a>
 800cd5c:	23c0      	movs	r3, #192	; 0xc0
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	0029      	movs	r1, r5
 800cd62:	58e3      	ldr	r3, [r4, r3]
 800cd64:	9801      	ldr	r0, [sp, #4]
 800cd66:	4798      	blx	r3
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0ca      	beq.n	800cd02 <_scanf_chars+0x2a>
 800cd6c:	6822      	ldr	r2, [r4, #0]
 800cd6e:	2310      	movs	r3, #16
 800cd70:	0011      	movs	r1, r2
 800cd72:	4019      	ands	r1, r3
 800cd74:	421a      	tst	r2, r3
 800cd76:	d106      	bne.n	800cd86 <_scanf_chars+0xae>
 800cd78:	68e3      	ldr	r3, [r4, #12]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	60e3      	str	r3, [r4, #12]
 800cd7e:	69a3      	ldr	r3, [r4, #24]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d000      	beq.n	800cd86 <_scanf_chars+0xae>
 800cd84:	7039      	strb	r1, [r7, #0]
 800cd86:	2000      	movs	r0, #0
 800cd88:	6923      	ldr	r3, [r4, #16]
 800cd8a:	199e      	adds	r6, r3, r6
 800cd8c:	6126      	str	r6, [r4, #16]
 800cd8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd90:	0800e081 	.word	0x0800e081

0800cd94 <_scanf_i>:
 800cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd96:	000c      	movs	r4, r1
 800cd98:	b08d      	sub	sp, #52	; 0x34
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	4b79      	ldr	r3, [pc, #484]	; (800cf84 <_scanf_i+0x1f0>)
 800cd9e:	0016      	movs	r6, r2
 800cda0:	9005      	str	r0, [sp, #20]
 800cda2:	aa09      	add	r2, sp, #36	; 0x24
 800cda4:	cb23      	ldmia	r3!, {r0, r1, r5}
 800cda6:	c223      	stmia	r2!, {r0, r1, r5}
 800cda8:	4b77      	ldr	r3, [pc, #476]	; (800cf88 <_scanf_i+0x1f4>)
 800cdaa:	9306      	str	r3, [sp, #24]
 800cdac:	69a3      	ldr	r3, [r4, #24]
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d001      	beq.n	800cdb6 <_scanf_i+0x22>
 800cdb2:	4b76      	ldr	r3, [pc, #472]	; (800cf8c <_scanf_i+0x1f8>)
 800cdb4:	9306      	str	r3, [sp, #24]
 800cdb6:	22ae      	movs	r2, #174	; 0xae
 800cdb8:	2000      	movs	r0, #0
 800cdba:	68a3      	ldr	r3, [r4, #8]
 800cdbc:	0052      	lsls	r2, r2, #1
 800cdbe:	1e59      	subs	r1, r3, #1
 800cdc0:	9004      	str	r0, [sp, #16]
 800cdc2:	4291      	cmp	r1, r2
 800cdc4:	d905      	bls.n	800cdd2 <_scanf_i+0x3e>
 800cdc6:	3b5e      	subs	r3, #94	; 0x5e
 800cdc8:	3bff      	subs	r3, #255	; 0xff
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	235e      	movs	r3, #94	; 0x5e
 800cdce:	33ff      	adds	r3, #255	; 0xff
 800cdd0:	60a3      	str	r3, [r4, #8]
 800cdd2:	0023      	movs	r3, r4
 800cdd4:	331c      	adds	r3, #28
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	23d0      	movs	r3, #208	; 0xd0
 800cdda:	2700      	movs	r7, #0
 800cddc:	6822      	ldr	r2, [r4, #0]
 800cdde:	011b      	lsls	r3, r3, #4
 800cde0:	4313      	orrs	r3, r2
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	9b01      	ldr	r3, [sp, #4]
 800cde6:	9303      	str	r3, [sp, #12]
 800cde8:	6833      	ldr	r3, [r6, #0]
 800cdea:	a809      	add	r0, sp, #36	; 0x24
 800cdec:	7819      	ldrb	r1, [r3, #0]
 800cdee:	00bb      	lsls	r3, r7, #2
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	5818      	ldr	r0, [r3, r0]
 800cdf4:	f7fe fe48 	bl	800ba88 <memchr>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d02b      	beq.n	800ce54 <_scanf_i+0xc0>
 800cdfc:	2f01      	cmp	r7, #1
 800cdfe:	d162      	bne.n	800cec6 <_scanf_i+0x132>
 800ce00:	6863      	ldr	r3, [r4, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <_scanf_i+0x80>
 800ce06:	3308      	adds	r3, #8
 800ce08:	6822      	ldr	r2, [r4, #0]
 800ce0a:	6063      	str	r3, [r4, #4]
 800ce0c:	33f9      	adds	r3, #249	; 0xf9
 800ce0e:	33ff      	adds	r3, #255	; 0xff
 800ce10:	4313      	orrs	r3, r2
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	4b5e      	ldr	r3, [pc, #376]	; (800cf90 <_scanf_i+0x1fc>)
 800ce16:	6822      	ldr	r2, [r4, #0]
 800ce18:	4013      	ands	r3, r2
 800ce1a:	6023      	str	r3, [r4, #0]
 800ce1c:	68a3      	ldr	r3, [r4, #8]
 800ce1e:	1e5a      	subs	r2, r3, #1
 800ce20:	60a2      	str	r2, [r4, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d016      	beq.n	800ce54 <_scanf_i+0xc0>
 800ce26:	6833      	ldr	r3, [r6, #0]
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	6032      	str	r2, [r6, #0]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	9a03      	ldr	r2, [sp, #12]
 800ce30:	7013      	strb	r3, [r2, #0]
 800ce32:	6873      	ldr	r3, [r6, #4]
 800ce34:	1c55      	adds	r5, r2, #1
 800ce36:	3b01      	subs	r3, #1
 800ce38:	6073      	str	r3, [r6, #4]
 800ce3a:	9503      	str	r5, [sp, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	dc09      	bgt.n	800ce54 <_scanf_i+0xc0>
 800ce40:	23c0      	movs	r3, #192	; 0xc0
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	58e3      	ldr	r3, [r4, r3]
 800ce46:	0031      	movs	r1, r6
 800ce48:	9805      	ldr	r0, [sp, #20]
 800ce4a:	9307      	str	r3, [sp, #28]
 800ce4c:	4798      	blx	r3
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d000      	beq.n	800ce54 <_scanf_i+0xc0>
 800ce52:	e081      	b.n	800cf58 <_scanf_i+0x1c4>
 800ce54:	3701      	adds	r7, #1
 800ce56:	2f03      	cmp	r7, #3
 800ce58:	d1c6      	bne.n	800cde8 <_scanf_i+0x54>
 800ce5a:	6863      	ldr	r3, [r4, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <_scanf_i+0xd0>
 800ce60:	330a      	adds	r3, #10
 800ce62:	6063      	str	r3, [r4, #4]
 800ce64:	2110      	movs	r1, #16
 800ce66:	2700      	movs	r7, #0
 800ce68:	6863      	ldr	r3, [r4, #4]
 800ce6a:	6960      	ldr	r0, [r4, #20]
 800ce6c:	1ac9      	subs	r1, r1, r3
 800ce6e:	4b49      	ldr	r3, [pc, #292]	; (800cf94 <_scanf_i+0x200>)
 800ce70:	18c9      	adds	r1, r1, r3
 800ce72:	f000 f8bf 	bl	800cff4 <__sccl>
 800ce76:	9d03      	ldr	r5, [sp, #12]
 800ce78:	68a3      	ldr	r3, [r4, #8]
 800ce7a:	6822      	ldr	r2, [r4, #0]
 800ce7c:	9303      	str	r3, [sp, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d041      	beq.n	800cf06 <_scanf_i+0x172>
 800ce82:	6831      	ldr	r1, [r6, #0]
 800ce84:	6963      	ldr	r3, [r4, #20]
 800ce86:	7808      	ldrb	r0, [r1, #0]
 800ce88:	5c1b      	ldrb	r3, [r3, r0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d03b      	beq.n	800cf06 <_scanf_i+0x172>
 800ce8e:	2830      	cmp	r0, #48	; 0x30
 800ce90:	d129      	bne.n	800cee6 <_scanf_i+0x152>
 800ce92:	2380      	movs	r3, #128	; 0x80
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	421a      	tst	r2, r3
 800ce98:	d025      	beq.n	800cee6 <_scanf_i+0x152>
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	3701      	adds	r7, #1
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d005      	beq.n	800ceae <_scanf_i+0x11a>
 800cea2:	001a      	movs	r2, r3
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	3a01      	subs	r2, #1
 800cea8:	3301      	adds	r3, #1
 800ceaa:	9204      	str	r2, [sp, #16]
 800ceac:	60a3      	str	r3, [r4, #8]
 800ceae:	6873      	ldr	r3, [r6, #4]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	6073      	str	r3, [r6, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dd1d      	ble.n	800cef4 <_scanf_i+0x160>
 800ceb8:	6833      	ldr	r3, [r6, #0]
 800ceba:	3301      	adds	r3, #1
 800cebc:	6033      	str	r3, [r6, #0]
 800cebe:	68a3      	ldr	r3, [r4, #8]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	60a3      	str	r3, [r4, #8]
 800cec4:	e7d8      	b.n	800ce78 <_scanf_i+0xe4>
 800cec6:	2f02      	cmp	r7, #2
 800cec8:	d1a8      	bne.n	800ce1c <_scanf_i+0x88>
 800ceca:	21c0      	movs	r1, #192	; 0xc0
 800cecc:	2380      	movs	r3, #128	; 0x80
 800cece:	6822      	ldr	r2, [r4, #0]
 800ced0:	00c9      	lsls	r1, r1, #3
 800ced2:	4011      	ands	r1, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4299      	cmp	r1, r3
 800ced8:	d1bf      	bne.n	800ce5a <_scanf_i+0xc6>
 800ceda:	3bf1      	subs	r3, #241	; 0xf1
 800cedc:	3bff      	subs	r3, #255	; 0xff
 800cede:	6063      	str	r3, [r4, #4]
 800cee0:	33f0      	adds	r3, #240	; 0xf0
 800cee2:	4313      	orrs	r3, r2
 800cee4:	e799      	b.n	800ce1a <_scanf_i+0x86>
 800cee6:	4b2c      	ldr	r3, [pc, #176]	; (800cf98 <_scanf_i+0x204>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	6023      	str	r3, [r4, #0]
 800ceec:	780b      	ldrb	r3, [r1, #0]
 800ceee:	702b      	strb	r3, [r5, #0]
 800cef0:	3501      	adds	r5, #1
 800cef2:	e7dc      	b.n	800ceae <_scanf_i+0x11a>
 800cef4:	23c0      	movs	r3, #192	; 0xc0
 800cef6:	005b      	lsls	r3, r3, #1
 800cef8:	58e3      	ldr	r3, [r4, r3]
 800cefa:	0031      	movs	r1, r6
 800cefc:	9805      	ldr	r0, [sp, #20]
 800cefe:	9303      	str	r3, [sp, #12]
 800cf00:	4798      	blx	r3
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d0db      	beq.n	800cebe <_scanf_i+0x12a>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	05db      	lsls	r3, r3, #23
 800cf0a:	d50e      	bpl.n	800cf2a <_scanf_i+0x196>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	429d      	cmp	r5, r3
 800cf10:	d907      	bls.n	800cf22 <_scanf_i+0x18e>
 800cf12:	23be      	movs	r3, #190	; 0xbe
 800cf14:	3d01      	subs	r5, #1
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	0032      	movs	r2, r6
 800cf1a:	7829      	ldrb	r1, [r5, #0]
 800cf1c:	58e3      	ldr	r3, [r4, r3]
 800cf1e:	9805      	ldr	r0, [sp, #20]
 800cf20:	4798      	blx	r3
 800cf22:	9b01      	ldr	r3, [sp, #4]
 800cf24:	2001      	movs	r0, #1
 800cf26:	429d      	cmp	r5, r3
 800cf28:	d029      	beq.n	800cf7e <_scanf_i+0x1ea>
 800cf2a:	6821      	ldr	r1, [r4, #0]
 800cf2c:	2310      	movs	r3, #16
 800cf2e:	000a      	movs	r2, r1
 800cf30:	401a      	ands	r2, r3
 800cf32:	4219      	tst	r1, r3
 800cf34:	d11c      	bne.n	800cf70 <_scanf_i+0x1dc>
 800cf36:	702a      	strb	r2, [r5, #0]
 800cf38:	6863      	ldr	r3, [r4, #4]
 800cf3a:	9901      	ldr	r1, [sp, #4]
 800cf3c:	9805      	ldr	r0, [sp, #20]
 800cf3e:	9e06      	ldr	r6, [sp, #24]
 800cf40:	47b0      	blx	r6
 800cf42:	9b02      	ldr	r3, [sp, #8]
 800cf44:	6821      	ldr	r1, [r4, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	068a      	lsls	r2, r1, #26
 800cf4a:	d507      	bpl.n	800cf5c <_scanf_i+0x1c8>
 800cf4c:	1d1a      	adds	r2, r3, #4
 800cf4e:	9902      	ldr	r1, [sp, #8]
 800cf50:	600a      	str	r2, [r1, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6018      	str	r0, [r3, #0]
 800cf56:	e008      	b.n	800cf6a <_scanf_i+0x1d6>
 800cf58:	2700      	movs	r7, #0
 800cf5a:	e7d4      	b.n	800cf06 <_scanf_i+0x172>
 800cf5c:	1d1a      	adds	r2, r3, #4
 800cf5e:	07ce      	lsls	r6, r1, #31
 800cf60:	d5f5      	bpl.n	800cf4e <_scanf_i+0x1ba>
 800cf62:	9902      	ldr	r1, [sp, #8]
 800cf64:	600a      	str	r2, [r1, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	8018      	strh	r0, [r3, #0]
 800cf6a:	68e3      	ldr	r3, [r4, #12]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	60e3      	str	r3, [r4, #12]
 800cf70:	2000      	movs	r0, #0
 800cf72:	9b01      	ldr	r3, [sp, #4]
 800cf74:	1aed      	subs	r5, r5, r3
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	19ef      	adds	r7, r5, r7
 800cf7a:	19df      	adds	r7, r3, r7
 800cf7c:	6127      	str	r7, [r4, #16]
 800cf7e:	b00d      	add	sp, #52	; 0x34
 800cf80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf82:	46c0      	nop			; (mov r8, r8)
 800cf84:	0800df4c 	.word	0x0800df4c
 800cf88:	0800a599 	.word	0x0800a599
 800cf8c:	0800d1a5 	.word	0x0800d1a5
 800cf90:	fffffaff 	.word	0xfffffaff
 800cf94:	0800e3fe 	.word	0x0800e3fe
 800cf98:	fffff6ff 	.word	0xfffff6ff

0800cf9c <_read_r>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	0004      	movs	r4, r0
 800cfa0:	0008      	movs	r0, r1
 800cfa2:	0011      	movs	r1, r2
 800cfa4:	001a      	movs	r2, r3
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	4d05      	ldr	r5, [pc, #20]	; (800cfc0 <_read_r+0x24>)
 800cfaa:	602b      	str	r3, [r5, #0]
 800cfac:	f7f7 faaa 	bl	8004504 <_read>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d103      	bne.n	800cfbc <_read_r+0x20>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d000      	beq.n	800cfbc <_read_r+0x20>
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	20000614 	.word	0x20000614

0800cfc4 <nan>:
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4901      	ldr	r1, [pc, #4]	; (800cfcc <nan+0x8>)
 800cfc8:	4770      	bx	lr
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	7ff80000 	.word	0x7ff80000

0800cfd0 <_sbrk_r>:
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	b570      	push	{r4, r5, r6, lr}
 800cfd4:	4d06      	ldr	r5, [pc, #24]	; (800cff0 <_sbrk_r+0x20>)
 800cfd6:	0004      	movs	r4, r0
 800cfd8:	0008      	movs	r0, r1
 800cfda:	602b      	str	r3, [r5, #0]
 800cfdc:	f7f7 faf8 	bl	80045d0 <_sbrk>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d103      	bne.n	800cfec <_sbrk_r+0x1c>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d000      	beq.n	800cfec <_sbrk_r+0x1c>
 800cfea:	6023      	str	r3, [r4, #0]
 800cfec:	bd70      	pop	{r4, r5, r6, pc}
 800cfee:	46c0      	nop			; (mov r8, r8)
 800cff0:	20000614 	.word	0x20000614

0800cff4 <__sccl>:
 800cff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cff6:	780b      	ldrb	r3, [r1, #0]
 800cff8:	0004      	movs	r4, r0
 800cffa:	2b5e      	cmp	r3, #94	; 0x5e
 800cffc:	d00c      	beq.n	800d018 <__sccl+0x24>
 800cffe:	1c48      	adds	r0, r1, #1
 800d000:	2100      	movs	r1, #0
 800d002:	0022      	movs	r2, r4
 800d004:	1c65      	adds	r5, r4, #1
 800d006:	35ff      	adds	r5, #255	; 0xff
 800d008:	7011      	strb	r1, [r2, #0]
 800d00a:	3201      	adds	r2, #1
 800d00c:	42aa      	cmp	r2, r5
 800d00e:	d1fb      	bne.n	800d008 <__sccl+0x14>
 800d010:	2b00      	cmp	r3, #0
 800d012:	d105      	bne.n	800d020 <__sccl+0x2c>
 800d014:	3801      	subs	r0, #1
 800d016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d018:	784b      	ldrb	r3, [r1, #1]
 800d01a:	1c88      	adds	r0, r1, #2
 800d01c:	2101      	movs	r1, #1
 800d01e:	e7f0      	b.n	800d002 <__sccl+0xe>
 800d020:	2201      	movs	r2, #1
 800d022:	262d      	movs	r6, #45	; 0x2d
 800d024:	4051      	eors	r1, r2
 800d026:	0002      	movs	r2, r0
 800d028:	54e1      	strb	r1, [r4, r3]
 800d02a:	7815      	ldrb	r5, [r2, #0]
 800d02c:	1c50      	adds	r0, r2, #1
 800d02e:	2d2d      	cmp	r5, #45	; 0x2d
 800d030:	d009      	beq.n	800d046 <__sccl+0x52>
 800d032:	2d5d      	cmp	r5, #93	; 0x5d
 800d034:	d0ef      	beq.n	800d016 <__sccl+0x22>
 800d036:	2d00      	cmp	r5, #0
 800d038:	d101      	bne.n	800d03e <__sccl+0x4a>
 800d03a:	0010      	movs	r0, r2
 800d03c:	e7eb      	b.n	800d016 <__sccl+0x22>
 800d03e:	002b      	movs	r3, r5
 800d040:	e7f1      	b.n	800d026 <__sccl+0x32>
 800d042:	0033      	movs	r3, r6
 800d044:	e7ef      	b.n	800d026 <__sccl+0x32>
 800d046:	7855      	ldrb	r5, [r2, #1]
 800d048:	2d5d      	cmp	r5, #93	; 0x5d
 800d04a:	d0fa      	beq.n	800d042 <__sccl+0x4e>
 800d04c:	42ab      	cmp	r3, r5
 800d04e:	dcf8      	bgt.n	800d042 <__sccl+0x4e>
 800d050:	0018      	movs	r0, r3
 800d052:	3202      	adds	r2, #2
 800d054:	3001      	adds	r0, #1
 800d056:	5421      	strb	r1, [r4, r0]
 800d058:	4285      	cmp	r5, r0
 800d05a:	dcfb      	bgt.n	800d054 <__sccl+0x60>
 800d05c:	2000      	movs	r0, #0
 800d05e:	1c5f      	adds	r7, r3, #1
 800d060:	42ab      	cmp	r3, r5
 800d062:	da01      	bge.n	800d068 <__sccl+0x74>
 800d064:	1ae8      	subs	r0, r5, r3
 800d066:	3801      	subs	r0, #1
 800d068:	183b      	adds	r3, r7, r0
 800d06a:	e7de      	b.n	800d02a <__sccl+0x36>

0800d06c <strncmp>:
 800d06c:	b530      	push	{r4, r5, lr}
 800d06e:	0005      	movs	r5, r0
 800d070:	1e10      	subs	r0, r2, #0
 800d072:	d008      	beq.n	800d086 <strncmp+0x1a>
 800d074:	2400      	movs	r4, #0
 800d076:	3a01      	subs	r2, #1
 800d078:	5d2b      	ldrb	r3, [r5, r4]
 800d07a:	5d08      	ldrb	r0, [r1, r4]
 800d07c:	4283      	cmp	r3, r0
 800d07e:	d101      	bne.n	800d084 <strncmp+0x18>
 800d080:	4294      	cmp	r4, r2
 800d082:	d101      	bne.n	800d088 <strncmp+0x1c>
 800d084:	1a18      	subs	r0, r3, r0
 800d086:	bd30      	pop	{r4, r5, pc}
 800d088:	3401      	adds	r4, #1
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1f4      	bne.n	800d078 <strncmp+0xc>
 800d08e:	e7f9      	b.n	800d084 <strncmp+0x18>

0800d090 <_strtoul_l.constprop.0>:
 800d090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d092:	b087      	sub	sp, #28
 800d094:	9202      	str	r2, [sp, #8]
 800d096:	4a42      	ldr	r2, [pc, #264]	; (800d1a0 <_strtoul_l.constprop.0+0x110>)
 800d098:	001e      	movs	r6, r3
 800d09a:	9101      	str	r1, [sp, #4]
 800d09c:	000b      	movs	r3, r1
 800d09e:	4694      	mov	ip, r2
 800d0a0:	2108      	movs	r1, #8
 800d0a2:	9005      	str	r0, [sp, #20]
 800d0a4:	001a      	movs	r2, r3
 800d0a6:	4660      	mov	r0, ip
 800d0a8:	7814      	ldrb	r4, [r2, #0]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	5d00      	ldrb	r0, [r0, r4]
 800d0ae:	001d      	movs	r5, r3
 800d0b0:	0007      	movs	r7, r0
 800d0b2:	400f      	ands	r7, r1
 800d0b4:	4208      	tst	r0, r1
 800d0b6:	d1f5      	bne.n	800d0a4 <_strtoul_l.constprop.0+0x14>
 800d0b8:	2c2d      	cmp	r4, #45	; 0x2d
 800d0ba:	d13a      	bne.n	800d132 <_strtoul_l.constprop.0+0xa2>
 800d0bc:	2701      	movs	r7, #1
 800d0be:	781c      	ldrb	r4, [r3, #0]
 800d0c0:	1c95      	adds	r5, r2, #2
 800d0c2:	2e00      	cmp	r6, #0
 800d0c4:	d067      	beq.n	800d196 <_strtoul_l.constprop.0+0x106>
 800d0c6:	2e10      	cmp	r6, #16
 800d0c8:	d109      	bne.n	800d0de <_strtoul_l.constprop.0+0x4e>
 800d0ca:	2c30      	cmp	r4, #48	; 0x30
 800d0cc:	d107      	bne.n	800d0de <_strtoul_l.constprop.0+0x4e>
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	782b      	ldrb	r3, [r5, #0]
 800d0d2:	4393      	bics	r3, r2
 800d0d4:	2b58      	cmp	r3, #88	; 0x58
 800d0d6:	d159      	bne.n	800d18c <_strtoul_l.constprop.0+0xfc>
 800d0d8:	2610      	movs	r6, #16
 800d0da:	786c      	ldrb	r4, [r5, #1]
 800d0dc:	3502      	adds	r5, #2
 800d0de:	2001      	movs	r0, #1
 800d0e0:	0031      	movs	r1, r6
 800d0e2:	4240      	negs	r0, r0
 800d0e4:	f7f3 f836 	bl	8000154 <__udivsi3>
 800d0e8:	9003      	str	r0, [sp, #12]
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	0031      	movs	r1, r6
 800d0ee:	4240      	negs	r0, r0
 800d0f0:	f7f3 f8b6 	bl	8000260 <__aeabi_uidivmod>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	9104      	str	r1, [sp, #16]
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	468c      	mov	ip, r1
 800d100:	4252      	negs	r2, r2
 800d102:	0021      	movs	r1, r4
 800d104:	3930      	subs	r1, #48	; 0x30
 800d106:	2909      	cmp	r1, #9
 800d108:	d818      	bhi.n	800d13c <_strtoul_l.constprop.0+0xac>
 800d10a:	000c      	movs	r4, r1
 800d10c:	42a6      	cmp	r6, r4
 800d10e:	dd23      	ble.n	800d158 <_strtoul_l.constprop.0+0xc8>
 800d110:	2b00      	cmp	r3, #0
 800d112:	db1f      	blt.n	800d154 <_strtoul_l.constprop.0+0xc4>
 800d114:	9903      	ldr	r1, [sp, #12]
 800d116:	0013      	movs	r3, r2
 800d118:	4281      	cmp	r1, r0
 800d11a:	d307      	bcc.n	800d12c <_strtoul_l.constprop.0+0x9c>
 800d11c:	d103      	bne.n	800d126 <_strtoul_l.constprop.0+0x96>
 800d11e:	9904      	ldr	r1, [sp, #16]
 800d120:	0013      	movs	r3, r2
 800d122:	42a1      	cmp	r1, r4
 800d124:	db02      	blt.n	800d12c <_strtoul_l.constprop.0+0x9c>
 800d126:	4663      	mov	r3, ip
 800d128:	4370      	muls	r0, r6
 800d12a:	1820      	adds	r0, r4, r0
 800d12c:	782c      	ldrb	r4, [r5, #0]
 800d12e:	3501      	adds	r5, #1
 800d130:	e7e7      	b.n	800d102 <_strtoul_l.constprop.0+0x72>
 800d132:	2c2b      	cmp	r4, #43	; 0x2b
 800d134:	d1c5      	bne.n	800d0c2 <_strtoul_l.constprop.0+0x32>
 800d136:	781c      	ldrb	r4, [r3, #0]
 800d138:	1c95      	adds	r5, r2, #2
 800d13a:	e7c2      	b.n	800d0c2 <_strtoul_l.constprop.0+0x32>
 800d13c:	0021      	movs	r1, r4
 800d13e:	3941      	subs	r1, #65	; 0x41
 800d140:	2919      	cmp	r1, #25
 800d142:	d801      	bhi.n	800d148 <_strtoul_l.constprop.0+0xb8>
 800d144:	3c37      	subs	r4, #55	; 0x37
 800d146:	e7e1      	b.n	800d10c <_strtoul_l.constprop.0+0x7c>
 800d148:	0021      	movs	r1, r4
 800d14a:	3961      	subs	r1, #97	; 0x61
 800d14c:	2919      	cmp	r1, #25
 800d14e:	d803      	bhi.n	800d158 <_strtoul_l.constprop.0+0xc8>
 800d150:	3c57      	subs	r4, #87	; 0x57
 800d152:	e7db      	b.n	800d10c <_strtoul_l.constprop.0+0x7c>
 800d154:	0013      	movs	r3, r2
 800d156:	e7e9      	b.n	800d12c <_strtoul_l.constprop.0+0x9c>
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da09      	bge.n	800d170 <_strtoul_l.constprop.0+0xe0>
 800d15c:	2322      	movs	r3, #34	; 0x22
 800d15e:	2001      	movs	r0, #1
 800d160:	9a05      	ldr	r2, [sp, #20]
 800d162:	4240      	negs	r0, r0
 800d164:	6013      	str	r3, [r2, #0]
 800d166:	9b02      	ldr	r3, [sp, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d109      	bne.n	800d180 <_strtoul_l.constprop.0+0xf0>
 800d16c:	b007      	add	sp, #28
 800d16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d170:	2f00      	cmp	r7, #0
 800d172:	d000      	beq.n	800d176 <_strtoul_l.constprop.0+0xe6>
 800d174:	4240      	negs	r0, r0
 800d176:	9a02      	ldr	r2, [sp, #8]
 800d178:	2a00      	cmp	r2, #0
 800d17a:	d0f7      	beq.n	800d16c <_strtoul_l.constprop.0+0xdc>
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <_strtoul_l.constprop.0+0xf4>
 800d180:	1e6b      	subs	r3, r5, #1
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	9a01      	ldr	r2, [sp, #4]
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	e7ef      	b.n	800d16c <_strtoul_l.constprop.0+0xdc>
 800d18c:	2430      	movs	r4, #48	; 0x30
 800d18e:	2e00      	cmp	r6, #0
 800d190:	d1a5      	bne.n	800d0de <_strtoul_l.constprop.0+0x4e>
 800d192:	3608      	adds	r6, #8
 800d194:	e7a3      	b.n	800d0de <_strtoul_l.constprop.0+0x4e>
 800d196:	2c30      	cmp	r4, #48	; 0x30
 800d198:	d099      	beq.n	800d0ce <_strtoul_l.constprop.0+0x3e>
 800d19a:	260a      	movs	r6, #10
 800d19c:	e79f      	b.n	800d0de <_strtoul_l.constprop.0+0x4e>
 800d19e:	46c0      	nop			; (mov r8, r8)
 800d1a0:	0800e081 	.word	0x0800e081

0800d1a4 <_strtoul_r>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	f7ff ff73 	bl	800d090 <_strtoul_l.constprop.0>
 800d1aa:	bd10      	pop	{r4, pc}

0800d1ac <__submore>:
 800d1ac:	000b      	movs	r3, r1
 800d1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1b0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d1b2:	3344      	adds	r3, #68	; 0x44
 800d1b4:	000c      	movs	r4, r1
 800d1b6:	429d      	cmp	r5, r3
 800d1b8:	d11c      	bne.n	800d1f4 <__submore+0x48>
 800d1ba:	2680      	movs	r6, #128	; 0x80
 800d1bc:	00f6      	lsls	r6, r6, #3
 800d1be:	0031      	movs	r1, r6
 800d1c0:	f7ff f9d8 	bl	800c574 <_malloc_r>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d102      	bne.n	800d1ce <__submore+0x22>
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	4240      	negs	r0, r0
 800d1cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1ce:	0023      	movs	r3, r4
 800d1d0:	6360      	str	r0, [r4, #52]	; 0x34
 800d1d2:	63a6      	str	r6, [r4, #56]	; 0x38
 800d1d4:	3346      	adds	r3, #70	; 0x46
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	4b10      	ldr	r3, [pc, #64]	; (800d21c <__submore+0x70>)
 800d1da:	54c2      	strb	r2, [r0, r3]
 800d1dc:	0023      	movs	r3, r4
 800d1de:	3345      	adds	r3, #69	; 0x45
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	4b0f      	ldr	r3, [pc, #60]	; (800d220 <__submore+0x74>)
 800d1e4:	54c2      	strb	r2, [r0, r3]
 800d1e6:	782a      	ldrb	r2, [r5, #0]
 800d1e8:	4b0e      	ldr	r3, [pc, #56]	; (800d224 <__submore+0x78>)
 800d1ea:	54c2      	strb	r2, [r0, r3]
 800d1ec:	18c0      	adds	r0, r0, r3
 800d1ee:	6020      	str	r0, [r4, #0]
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e7eb      	b.n	800d1cc <__submore+0x20>
 800d1f4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800d1f6:	0029      	movs	r1, r5
 800d1f8:	0073      	lsls	r3, r6, #1
 800d1fa:	001a      	movs	r2, r3
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	f000 fa43 	bl	800d688 <_realloc_r>
 800d202:	1e05      	subs	r5, r0, #0
 800d204:	d0e0      	beq.n	800d1c8 <__submore+0x1c>
 800d206:	1987      	adds	r7, r0, r6
 800d208:	0001      	movs	r1, r0
 800d20a:	0032      	movs	r2, r6
 800d20c:	0038      	movs	r0, r7
 800d20e:	f7fe fc46 	bl	800ba9e <memcpy>
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	6027      	str	r7, [r4, #0]
 800d216:	6365      	str	r5, [r4, #52]	; 0x34
 800d218:	63a3      	str	r3, [r4, #56]	; 0x38
 800d21a:	e7e9      	b.n	800d1f0 <__submore+0x44>
 800d21c:	000003ff 	.word	0x000003ff
 800d220:	000003fe 	.word	0x000003fe
 800d224:	000003fd 	.word	0x000003fd

0800d228 <__ascii_wctomb>:
 800d228:	0003      	movs	r3, r0
 800d22a:	1e08      	subs	r0, r1, #0
 800d22c:	d005      	beq.n	800d23a <__ascii_wctomb+0x12>
 800d22e:	2aff      	cmp	r2, #255	; 0xff
 800d230:	d904      	bls.n	800d23c <__ascii_wctomb+0x14>
 800d232:	228a      	movs	r2, #138	; 0x8a
 800d234:	2001      	movs	r0, #1
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	4240      	negs	r0, r0
 800d23a:	4770      	bx	lr
 800d23c:	2001      	movs	r0, #1
 800d23e:	700a      	strb	r2, [r1, #0]
 800d240:	e7fb      	b.n	800d23a <__ascii_wctomb+0x12>
	...

0800d244 <__assert_func>:
 800d244:	b530      	push	{r4, r5, lr}
 800d246:	0014      	movs	r4, r2
 800d248:	001a      	movs	r2, r3
 800d24a:	4b09      	ldr	r3, [pc, #36]	; (800d270 <__assert_func+0x2c>)
 800d24c:	0005      	movs	r5, r0
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	b085      	sub	sp, #20
 800d252:	68d8      	ldr	r0, [r3, #12]
 800d254:	4b07      	ldr	r3, [pc, #28]	; (800d274 <__assert_func+0x30>)
 800d256:	2c00      	cmp	r4, #0
 800d258:	d101      	bne.n	800d25e <__assert_func+0x1a>
 800d25a:	4b07      	ldr	r3, [pc, #28]	; (800d278 <__assert_func+0x34>)
 800d25c:	001c      	movs	r4, r3
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	9100      	str	r1, [sp, #0]
 800d262:	002b      	movs	r3, r5
 800d264:	4905      	ldr	r1, [pc, #20]	; (800d27c <__assert_func+0x38>)
 800d266:	9402      	str	r4, [sp, #8]
 800d268:	f000 f9b8 	bl	800d5dc <fiprintf>
 800d26c:	f000 fc6a 	bl	800db44 <abort>
 800d270:	2000000c 	.word	0x2000000c
 800d274:	0800e410 	.word	0x0800e410
 800d278:	0800e44b 	.word	0x0800e44b
 800d27c:	0800e41d 	.word	0x0800e41d

0800d280 <__sflush_r>:
 800d280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d282:	898b      	ldrh	r3, [r1, #12]
 800d284:	0005      	movs	r5, r0
 800d286:	000c      	movs	r4, r1
 800d288:	071a      	lsls	r2, r3, #28
 800d28a:	d45f      	bmi.n	800d34c <__sflush_r+0xcc>
 800d28c:	684a      	ldr	r2, [r1, #4]
 800d28e:	2a00      	cmp	r2, #0
 800d290:	dc04      	bgt.n	800d29c <__sflush_r+0x1c>
 800d292:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d294:	2a00      	cmp	r2, #0
 800d296:	dc01      	bgt.n	800d29c <__sflush_r+0x1c>
 800d298:	2000      	movs	r0, #0
 800d29a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d29c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d29e:	2f00      	cmp	r7, #0
 800d2a0:	d0fa      	beq.n	800d298 <__sflush_r+0x18>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2180      	movs	r1, #128	; 0x80
 800d2a6:	682e      	ldr	r6, [r5, #0]
 800d2a8:	602a      	str	r2, [r5, #0]
 800d2aa:	001a      	movs	r2, r3
 800d2ac:	0149      	lsls	r1, r1, #5
 800d2ae:	400a      	ands	r2, r1
 800d2b0:	420b      	tst	r3, r1
 800d2b2:	d034      	beq.n	800d31e <__sflush_r+0x9e>
 800d2b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2b6:	89a3      	ldrh	r3, [r4, #12]
 800d2b8:	075b      	lsls	r3, r3, #29
 800d2ba:	d506      	bpl.n	800d2ca <__sflush_r+0x4a>
 800d2bc:	6863      	ldr	r3, [r4, #4]
 800d2be:	1ac0      	subs	r0, r0, r3
 800d2c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <__sflush_r+0x4a>
 800d2c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2c8:	1ac0      	subs	r0, r0, r3
 800d2ca:	0002      	movs	r2, r0
 800d2cc:	6a21      	ldr	r1, [r4, #32]
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	0028      	movs	r0, r5
 800d2d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d2d4:	47b8      	blx	r7
 800d2d6:	89a1      	ldrh	r1, [r4, #12]
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d106      	bne.n	800d2ea <__sflush_r+0x6a>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	2b1d      	cmp	r3, #29
 800d2e0:	d831      	bhi.n	800d346 <__sflush_r+0xc6>
 800d2e2:	4a2c      	ldr	r2, [pc, #176]	; (800d394 <__sflush_r+0x114>)
 800d2e4:	40da      	lsrs	r2, r3
 800d2e6:	07d3      	lsls	r3, r2, #31
 800d2e8:	d52d      	bpl.n	800d346 <__sflush_r+0xc6>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	6063      	str	r3, [r4, #4]
 800d2ee:	6923      	ldr	r3, [r4, #16]
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	04cb      	lsls	r3, r1, #19
 800d2f4:	d505      	bpl.n	800d302 <__sflush_r+0x82>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	d102      	bne.n	800d300 <__sflush_r+0x80>
 800d2fa:	682b      	ldr	r3, [r5, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d100      	bne.n	800d302 <__sflush_r+0x82>
 800d300:	6560      	str	r0, [r4, #84]	; 0x54
 800d302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d304:	602e      	str	r6, [r5, #0]
 800d306:	2900      	cmp	r1, #0
 800d308:	d0c6      	beq.n	800d298 <__sflush_r+0x18>
 800d30a:	0023      	movs	r3, r4
 800d30c:	3344      	adds	r3, #68	; 0x44
 800d30e:	4299      	cmp	r1, r3
 800d310:	d002      	beq.n	800d318 <__sflush_r+0x98>
 800d312:	0028      	movs	r0, r5
 800d314:	f7ff f8c2 	bl	800c49c <_free_r>
 800d318:	2000      	movs	r0, #0
 800d31a:	6360      	str	r0, [r4, #52]	; 0x34
 800d31c:	e7bd      	b.n	800d29a <__sflush_r+0x1a>
 800d31e:	2301      	movs	r3, #1
 800d320:	0028      	movs	r0, r5
 800d322:	6a21      	ldr	r1, [r4, #32]
 800d324:	47b8      	blx	r7
 800d326:	1c43      	adds	r3, r0, #1
 800d328:	d1c5      	bne.n	800d2b6 <__sflush_r+0x36>
 800d32a:	682b      	ldr	r3, [r5, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0c2      	beq.n	800d2b6 <__sflush_r+0x36>
 800d330:	2b1d      	cmp	r3, #29
 800d332:	d001      	beq.n	800d338 <__sflush_r+0xb8>
 800d334:	2b16      	cmp	r3, #22
 800d336:	d101      	bne.n	800d33c <__sflush_r+0xbc>
 800d338:	602e      	str	r6, [r5, #0]
 800d33a:	e7ad      	b.n	800d298 <__sflush_r+0x18>
 800d33c:	2340      	movs	r3, #64	; 0x40
 800d33e:	89a2      	ldrh	r2, [r4, #12]
 800d340:	4313      	orrs	r3, r2
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	e7a9      	b.n	800d29a <__sflush_r+0x1a>
 800d346:	2340      	movs	r3, #64	; 0x40
 800d348:	430b      	orrs	r3, r1
 800d34a:	e7fa      	b.n	800d342 <__sflush_r+0xc2>
 800d34c:	690f      	ldr	r7, [r1, #16]
 800d34e:	2f00      	cmp	r7, #0
 800d350:	d0a2      	beq.n	800d298 <__sflush_r+0x18>
 800d352:	680a      	ldr	r2, [r1, #0]
 800d354:	600f      	str	r7, [r1, #0]
 800d356:	1bd2      	subs	r2, r2, r7
 800d358:	9201      	str	r2, [sp, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	079b      	lsls	r3, r3, #30
 800d35e:	d100      	bne.n	800d362 <__sflush_r+0xe2>
 800d360:	694a      	ldr	r2, [r1, #20]
 800d362:	60a2      	str	r2, [r4, #8]
 800d364:	9b01      	ldr	r3, [sp, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	dc00      	bgt.n	800d36c <__sflush_r+0xec>
 800d36a:	e795      	b.n	800d298 <__sflush_r+0x18>
 800d36c:	003a      	movs	r2, r7
 800d36e:	0028      	movs	r0, r5
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	6a21      	ldr	r1, [r4, #32]
 800d374:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d376:	47b0      	blx	r6
 800d378:	2800      	cmp	r0, #0
 800d37a:	dc06      	bgt.n	800d38a <__sflush_r+0x10a>
 800d37c:	2340      	movs	r3, #64	; 0x40
 800d37e:	2001      	movs	r0, #1
 800d380:	89a2      	ldrh	r2, [r4, #12]
 800d382:	4240      	negs	r0, r0
 800d384:	4313      	orrs	r3, r2
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	e787      	b.n	800d29a <__sflush_r+0x1a>
 800d38a:	9b01      	ldr	r3, [sp, #4]
 800d38c:	183f      	adds	r7, r7, r0
 800d38e:	1a1b      	subs	r3, r3, r0
 800d390:	9301      	str	r3, [sp, #4]
 800d392:	e7e7      	b.n	800d364 <__sflush_r+0xe4>
 800d394:	20400001 	.word	0x20400001

0800d398 <_fflush_r>:
 800d398:	690b      	ldr	r3, [r1, #16]
 800d39a:	b570      	push	{r4, r5, r6, lr}
 800d39c:	0005      	movs	r5, r0
 800d39e:	000c      	movs	r4, r1
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d102      	bne.n	800d3aa <_fflush_r+0x12>
 800d3a4:	2500      	movs	r5, #0
 800d3a6:	0028      	movs	r0, r5
 800d3a8:	bd70      	pop	{r4, r5, r6, pc}
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d004      	beq.n	800d3b8 <_fflush_r+0x20>
 800d3ae:	6983      	ldr	r3, [r0, #24]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <_fflush_r+0x20>
 800d3b4:	f000 f892 	bl	800d4dc <__sinit>
 800d3b8:	4b14      	ldr	r3, [pc, #80]	; (800d40c <_fflush_r+0x74>)
 800d3ba:	429c      	cmp	r4, r3
 800d3bc:	d11b      	bne.n	800d3f6 <_fflush_r+0x5e>
 800d3be:	686c      	ldr	r4, [r5, #4]
 800d3c0:	220c      	movs	r2, #12
 800d3c2:	5ea3      	ldrsh	r3, [r4, r2]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d0ed      	beq.n	800d3a4 <_fflush_r+0xc>
 800d3c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3ca:	07d2      	lsls	r2, r2, #31
 800d3cc:	d404      	bmi.n	800d3d8 <_fflush_r+0x40>
 800d3ce:	059b      	lsls	r3, r3, #22
 800d3d0:	d402      	bmi.n	800d3d8 <_fflush_r+0x40>
 800d3d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3d4:	f000 f933 	bl	800d63e <__retarget_lock_acquire_recursive>
 800d3d8:	0028      	movs	r0, r5
 800d3da:	0021      	movs	r1, r4
 800d3dc:	f7ff ff50 	bl	800d280 <__sflush_r>
 800d3e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3e2:	0005      	movs	r5, r0
 800d3e4:	07db      	lsls	r3, r3, #31
 800d3e6:	d4de      	bmi.n	800d3a6 <_fflush_r+0xe>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	059b      	lsls	r3, r3, #22
 800d3ec:	d4db      	bmi.n	800d3a6 <_fflush_r+0xe>
 800d3ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3f0:	f000 f926 	bl	800d640 <__retarget_lock_release_recursive>
 800d3f4:	e7d7      	b.n	800d3a6 <_fflush_r+0xe>
 800d3f6:	4b06      	ldr	r3, [pc, #24]	; (800d410 <_fflush_r+0x78>)
 800d3f8:	429c      	cmp	r4, r3
 800d3fa:	d101      	bne.n	800d400 <_fflush_r+0x68>
 800d3fc:	68ac      	ldr	r4, [r5, #8]
 800d3fe:	e7df      	b.n	800d3c0 <_fflush_r+0x28>
 800d400:	4b04      	ldr	r3, [pc, #16]	; (800d414 <_fflush_r+0x7c>)
 800d402:	429c      	cmp	r4, r3
 800d404:	d1dc      	bne.n	800d3c0 <_fflush_r+0x28>
 800d406:	68ec      	ldr	r4, [r5, #12]
 800d408:	e7da      	b.n	800d3c0 <_fflush_r+0x28>
 800d40a:	46c0      	nop			; (mov r8, r8)
 800d40c:	0800e46c 	.word	0x0800e46c
 800d410:	0800e48c 	.word	0x0800e48c
 800d414:	0800e44c 	.word	0x0800e44c

0800d418 <std>:
 800d418:	2300      	movs	r3, #0
 800d41a:	b510      	push	{r4, lr}
 800d41c:	0004      	movs	r4, r0
 800d41e:	6003      	str	r3, [r0, #0]
 800d420:	6043      	str	r3, [r0, #4]
 800d422:	6083      	str	r3, [r0, #8]
 800d424:	8181      	strh	r1, [r0, #12]
 800d426:	6643      	str	r3, [r0, #100]	; 0x64
 800d428:	0019      	movs	r1, r3
 800d42a:	81c2      	strh	r2, [r0, #14]
 800d42c:	6103      	str	r3, [r0, #16]
 800d42e:	6143      	str	r3, [r0, #20]
 800d430:	6183      	str	r3, [r0, #24]
 800d432:	2208      	movs	r2, #8
 800d434:	305c      	adds	r0, #92	; 0x5c
 800d436:	f7fb facd 	bl	80089d4 <memset>
 800d43a:	4b05      	ldr	r3, [pc, #20]	; (800d450 <std+0x38>)
 800d43c:	6224      	str	r4, [r4, #32]
 800d43e:	6263      	str	r3, [r4, #36]	; 0x24
 800d440:	4b04      	ldr	r3, [pc, #16]	; (800d454 <std+0x3c>)
 800d442:	62a3      	str	r3, [r4, #40]	; 0x28
 800d444:	4b04      	ldr	r3, [pc, #16]	; (800d458 <std+0x40>)
 800d446:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d448:	4b04      	ldr	r3, [pc, #16]	; (800d45c <std+0x44>)
 800d44a:	6323      	str	r3, [r4, #48]	; 0x30
 800d44c:	bd10      	pop	{r4, pc}
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	08009769 	.word	0x08009769
 800d454:	08009795 	.word	0x08009795
 800d458:	080097cd 	.word	0x080097cd
 800d45c:	080097f9 	.word	0x080097f9

0800d460 <_cleanup_r>:
 800d460:	b510      	push	{r4, lr}
 800d462:	4902      	ldr	r1, [pc, #8]	; (800d46c <_cleanup_r+0xc>)
 800d464:	f000 f8ca 	bl	800d5fc <_fwalk_reent>
 800d468:	bd10      	pop	{r4, pc}
 800d46a:	46c0      	nop			; (mov r8, r8)
 800d46c:	0800d399 	.word	0x0800d399

0800d470 <__sfmoreglue>:
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	2568      	movs	r5, #104	; 0x68
 800d474:	1e4a      	subs	r2, r1, #1
 800d476:	4355      	muls	r5, r2
 800d478:	000e      	movs	r6, r1
 800d47a:	0029      	movs	r1, r5
 800d47c:	3174      	adds	r1, #116	; 0x74
 800d47e:	f7ff f879 	bl	800c574 <_malloc_r>
 800d482:	1e04      	subs	r4, r0, #0
 800d484:	d008      	beq.n	800d498 <__sfmoreglue+0x28>
 800d486:	2100      	movs	r1, #0
 800d488:	002a      	movs	r2, r5
 800d48a:	6001      	str	r1, [r0, #0]
 800d48c:	6046      	str	r6, [r0, #4]
 800d48e:	300c      	adds	r0, #12
 800d490:	60a0      	str	r0, [r4, #8]
 800d492:	3268      	adds	r2, #104	; 0x68
 800d494:	f7fb fa9e 	bl	80089d4 <memset>
 800d498:	0020      	movs	r0, r4
 800d49a:	bd70      	pop	{r4, r5, r6, pc}

0800d49c <__sfp_lock_acquire>:
 800d49c:	b510      	push	{r4, lr}
 800d49e:	4802      	ldr	r0, [pc, #8]	; (800d4a8 <__sfp_lock_acquire+0xc>)
 800d4a0:	f000 f8cd 	bl	800d63e <__retarget_lock_acquire_recursive>
 800d4a4:	bd10      	pop	{r4, pc}
 800d4a6:	46c0      	nop			; (mov r8, r8)
 800d4a8:	20000619 	.word	0x20000619

0800d4ac <__sfp_lock_release>:
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	4802      	ldr	r0, [pc, #8]	; (800d4b8 <__sfp_lock_release+0xc>)
 800d4b0:	f000 f8c6 	bl	800d640 <__retarget_lock_release_recursive>
 800d4b4:	bd10      	pop	{r4, pc}
 800d4b6:	46c0      	nop			; (mov r8, r8)
 800d4b8:	20000619 	.word	0x20000619

0800d4bc <__sinit_lock_acquire>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	4802      	ldr	r0, [pc, #8]	; (800d4c8 <__sinit_lock_acquire+0xc>)
 800d4c0:	f000 f8bd 	bl	800d63e <__retarget_lock_acquire_recursive>
 800d4c4:	bd10      	pop	{r4, pc}
 800d4c6:	46c0      	nop			; (mov r8, r8)
 800d4c8:	2000061a 	.word	0x2000061a

0800d4cc <__sinit_lock_release>:
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	4802      	ldr	r0, [pc, #8]	; (800d4d8 <__sinit_lock_release+0xc>)
 800d4d0:	f000 f8b6 	bl	800d640 <__retarget_lock_release_recursive>
 800d4d4:	bd10      	pop	{r4, pc}
 800d4d6:	46c0      	nop			; (mov r8, r8)
 800d4d8:	2000061a 	.word	0x2000061a

0800d4dc <__sinit>:
 800d4dc:	b513      	push	{r0, r1, r4, lr}
 800d4de:	0004      	movs	r4, r0
 800d4e0:	f7ff ffec 	bl	800d4bc <__sinit_lock_acquire>
 800d4e4:	69a3      	ldr	r3, [r4, #24]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <__sinit+0x14>
 800d4ea:	f7ff ffef 	bl	800d4cc <__sinit_lock_release>
 800d4ee:	bd13      	pop	{r0, r1, r4, pc}
 800d4f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800d4f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d4f4:	6523      	str	r3, [r4, #80]	; 0x50
 800d4f6:	4b13      	ldr	r3, [pc, #76]	; (800d544 <__sinit+0x68>)
 800d4f8:	4a13      	ldr	r2, [pc, #76]	; (800d548 <__sinit+0x6c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	42a3      	cmp	r3, r4
 800d502:	d101      	bne.n	800d508 <__sinit+0x2c>
 800d504:	2301      	movs	r3, #1
 800d506:	61a3      	str	r3, [r4, #24]
 800d508:	0020      	movs	r0, r4
 800d50a:	f000 f81f 	bl	800d54c <__sfp>
 800d50e:	6060      	str	r0, [r4, #4]
 800d510:	0020      	movs	r0, r4
 800d512:	f000 f81b 	bl	800d54c <__sfp>
 800d516:	60a0      	str	r0, [r4, #8]
 800d518:	0020      	movs	r0, r4
 800d51a:	f000 f817 	bl	800d54c <__sfp>
 800d51e:	2200      	movs	r2, #0
 800d520:	2104      	movs	r1, #4
 800d522:	60e0      	str	r0, [r4, #12]
 800d524:	6860      	ldr	r0, [r4, #4]
 800d526:	f7ff ff77 	bl	800d418 <std>
 800d52a:	2201      	movs	r2, #1
 800d52c:	2109      	movs	r1, #9
 800d52e:	68a0      	ldr	r0, [r4, #8]
 800d530:	f7ff ff72 	bl	800d418 <std>
 800d534:	2202      	movs	r2, #2
 800d536:	2112      	movs	r1, #18
 800d538:	68e0      	ldr	r0, [r4, #12]
 800d53a:	f7ff ff6d 	bl	800d418 <std>
 800d53e:	2301      	movs	r3, #1
 800d540:	61a3      	str	r3, [r4, #24]
 800d542:	e7d2      	b.n	800d4ea <__sinit+0xe>
 800d544:	0800dff0 	.word	0x0800dff0
 800d548:	0800d461 	.word	0x0800d461

0800d54c <__sfp>:
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	0007      	movs	r7, r0
 800d550:	f7ff ffa4 	bl	800d49c <__sfp_lock_acquire>
 800d554:	4b1f      	ldr	r3, [pc, #124]	; (800d5d4 <__sfp+0x88>)
 800d556:	681e      	ldr	r6, [r3, #0]
 800d558:	69b3      	ldr	r3, [r6, #24]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d102      	bne.n	800d564 <__sfp+0x18>
 800d55e:	0030      	movs	r0, r6
 800d560:	f7ff ffbc 	bl	800d4dc <__sinit>
 800d564:	3648      	adds	r6, #72	; 0x48
 800d566:	68b4      	ldr	r4, [r6, #8]
 800d568:	6873      	ldr	r3, [r6, #4]
 800d56a:	3b01      	subs	r3, #1
 800d56c:	d504      	bpl.n	800d578 <__sfp+0x2c>
 800d56e:	6833      	ldr	r3, [r6, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d022      	beq.n	800d5ba <__sfp+0x6e>
 800d574:	6836      	ldr	r6, [r6, #0]
 800d576:	e7f6      	b.n	800d566 <__sfp+0x1a>
 800d578:	220c      	movs	r2, #12
 800d57a:	5ea5      	ldrsh	r5, [r4, r2]
 800d57c:	2d00      	cmp	r5, #0
 800d57e:	d11a      	bne.n	800d5b6 <__sfp+0x6a>
 800d580:	0020      	movs	r0, r4
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <__sfp+0x8c>)
 800d584:	3058      	adds	r0, #88	; 0x58
 800d586:	60e3      	str	r3, [r4, #12]
 800d588:	6665      	str	r5, [r4, #100]	; 0x64
 800d58a:	f000 f857 	bl	800d63c <__retarget_lock_init_recursive>
 800d58e:	f7ff ff8d 	bl	800d4ac <__sfp_lock_release>
 800d592:	0020      	movs	r0, r4
 800d594:	2208      	movs	r2, #8
 800d596:	0029      	movs	r1, r5
 800d598:	6025      	str	r5, [r4, #0]
 800d59a:	60a5      	str	r5, [r4, #8]
 800d59c:	6065      	str	r5, [r4, #4]
 800d59e:	6125      	str	r5, [r4, #16]
 800d5a0:	6165      	str	r5, [r4, #20]
 800d5a2:	61a5      	str	r5, [r4, #24]
 800d5a4:	305c      	adds	r0, #92	; 0x5c
 800d5a6:	f7fb fa15 	bl	80089d4 <memset>
 800d5aa:	6365      	str	r5, [r4, #52]	; 0x34
 800d5ac:	63a5      	str	r5, [r4, #56]	; 0x38
 800d5ae:	64a5      	str	r5, [r4, #72]	; 0x48
 800d5b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d5b2:	0020      	movs	r0, r4
 800d5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5b6:	3468      	adds	r4, #104	; 0x68
 800d5b8:	e7d7      	b.n	800d56a <__sfp+0x1e>
 800d5ba:	2104      	movs	r1, #4
 800d5bc:	0038      	movs	r0, r7
 800d5be:	f7ff ff57 	bl	800d470 <__sfmoreglue>
 800d5c2:	1e04      	subs	r4, r0, #0
 800d5c4:	6030      	str	r0, [r6, #0]
 800d5c6:	d1d5      	bne.n	800d574 <__sfp+0x28>
 800d5c8:	f7ff ff70 	bl	800d4ac <__sfp_lock_release>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	e7ef      	b.n	800d5b2 <__sfp+0x66>
 800d5d2:	46c0      	nop			; (mov r8, r8)
 800d5d4:	0800dff0 	.word	0x0800dff0
 800d5d8:	ffff0001 	.word	0xffff0001

0800d5dc <fiprintf>:
 800d5dc:	b40e      	push	{r1, r2, r3}
 800d5de:	b503      	push	{r0, r1, lr}
 800d5e0:	0001      	movs	r1, r0
 800d5e2:	ab03      	add	r3, sp, #12
 800d5e4:	4804      	ldr	r0, [pc, #16]	; (800d5f8 <fiprintf+0x1c>)
 800d5e6:	cb04      	ldmia	r3!, {r2}
 800d5e8:	6800      	ldr	r0, [r0, #0]
 800d5ea:	9301      	str	r3, [sp, #4]
 800d5ec:	f000 f8a2 	bl	800d734 <_vfiprintf_r>
 800d5f0:	b002      	add	sp, #8
 800d5f2:	bc08      	pop	{r3}
 800d5f4:	b003      	add	sp, #12
 800d5f6:	4718      	bx	r3
 800d5f8:	2000000c 	.word	0x2000000c

0800d5fc <_fwalk_reent>:
 800d5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5fe:	0004      	movs	r4, r0
 800d600:	0006      	movs	r6, r0
 800d602:	2700      	movs	r7, #0
 800d604:	9101      	str	r1, [sp, #4]
 800d606:	3448      	adds	r4, #72	; 0x48
 800d608:	6863      	ldr	r3, [r4, #4]
 800d60a:	68a5      	ldr	r5, [r4, #8]
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	9b00      	ldr	r3, [sp, #0]
 800d610:	3b01      	subs	r3, #1
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	d504      	bpl.n	800d620 <_fwalk_reent+0x24>
 800d616:	6824      	ldr	r4, [r4, #0]
 800d618:	2c00      	cmp	r4, #0
 800d61a:	d1f5      	bne.n	800d608 <_fwalk_reent+0xc>
 800d61c:	0038      	movs	r0, r7
 800d61e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d620:	89ab      	ldrh	r3, [r5, #12]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d908      	bls.n	800d638 <_fwalk_reent+0x3c>
 800d626:	220e      	movs	r2, #14
 800d628:	5eab      	ldrsh	r3, [r5, r2]
 800d62a:	3301      	adds	r3, #1
 800d62c:	d004      	beq.n	800d638 <_fwalk_reent+0x3c>
 800d62e:	0029      	movs	r1, r5
 800d630:	0030      	movs	r0, r6
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	4798      	blx	r3
 800d636:	4307      	orrs	r7, r0
 800d638:	3568      	adds	r5, #104	; 0x68
 800d63a:	e7e8      	b.n	800d60e <_fwalk_reent+0x12>

0800d63c <__retarget_lock_init_recursive>:
 800d63c:	4770      	bx	lr

0800d63e <__retarget_lock_acquire_recursive>:
 800d63e:	4770      	bx	lr

0800d640 <__retarget_lock_release_recursive>:
 800d640:	4770      	bx	lr

0800d642 <memmove>:
 800d642:	b510      	push	{r4, lr}
 800d644:	4288      	cmp	r0, r1
 800d646:	d902      	bls.n	800d64e <memmove+0xc>
 800d648:	188b      	adds	r3, r1, r2
 800d64a:	4298      	cmp	r0, r3
 800d64c:	d303      	bcc.n	800d656 <memmove+0x14>
 800d64e:	2300      	movs	r3, #0
 800d650:	e007      	b.n	800d662 <memmove+0x20>
 800d652:	5c8b      	ldrb	r3, [r1, r2]
 800d654:	5483      	strb	r3, [r0, r2]
 800d656:	3a01      	subs	r2, #1
 800d658:	d2fb      	bcs.n	800d652 <memmove+0x10>
 800d65a:	bd10      	pop	{r4, pc}
 800d65c:	5ccc      	ldrb	r4, [r1, r3]
 800d65e:	54c4      	strb	r4, [r0, r3]
 800d660:	3301      	adds	r3, #1
 800d662:	429a      	cmp	r2, r3
 800d664:	d1fa      	bne.n	800d65c <memmove+0x1a>
 800d666:	e7f8      	b.n	800d65a <memmove+0x18>

0800d668 <__malloc_lock>:
 800d668:	b510      	push	{r4, lr}
 800d66a:	4802      	ldr	r0, [pc, #8]	; (800d674 <__malloc_lock+0xc>)
 800d66c:	f7ff ffe7 	bl	800d63e <__retarget_lock_acquire_recursive>
 800d670:	bd10      	pop	{r4, pc}
 800d672:	46c0      	nop			; (mov r8, r8)
 800d674:	20000618 	.word	0x20000618

0800d678 <__malloc_unlock>:
 800d678:	b510      	push	{r4, lr}
 800d67a:	4802      	ldr	r0, [pc, #8]	; (800d684 <__malloc_unlock+0xc>)
 800d67c:	f7ff ffe0 	bl	800d640 <__retarget_lock_release_recursive>
 800d680:	bd10      	pop	{r4, pc}
 800d682:	46c0      	nop			; (mov r8, r8)
 800d684:	20000618 	.word	0x20000618

0800d688 <_realloc_r>:
 800d688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d68a:	0007      	movs	r7, r0
 800d68c:	000e      	movs	r6, r1
 800d68e:	0014      	movs	r4, r2
 800d690:	2900      	cmp	r1, #0
 800d692:	d105      	bne.n	800d6a0 <_realloc_r+0x18>
 800d694:	0011      	movs	r1, r2
 800d696:	f7fe ff6d 	bl	800c574 <_malloc_r>
 800d69a:	0005      	movs	r5, r0
 800d69c:	0028      	movs	r0, r5
 800d69e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6a0:	2a00      	cmp	r2, #0
 800d6a2:	d103      	bne.n	800d6ac <_realloc_r+0x24>
 800d6a4:	f7fe fefa 	bl	800c49c <_free_r>
 800d6a8:	0025      	movs	r5, r4
 800d6aa:	e7f7      	b.n	800d69c <_realloc_r+0x14>
 800d6ac:	f000 fabe 	bl	800dc2c <_malloc_usable_size_r>
 800d6b0:	9001      	str	r0, [sp, #4]
 800d6b2:	4284      	cmp	r4, r0
 800d6b4:	d803      	bhi.n	800d6be <_realloc_r+0x36>
 800d6b6:	0035      	movs	r5, r6
 800d6b8:	0843      	lsrs	r3, r0, #1
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	d3ee      	bcc.n	800d69c <_realloc_r+0x14>
 800d6be:	0021      	movs	r1, r4
 800d6c0:	0038      	movs	r0, r7
 800d6c2:	f7fe ff57 	bl	800c574 <_malloc_r>
 800d6c6:	1e05      	subs	r5, r0, #0
 800d6c8:	d0e8      	beq.n	800d69c <_realloc_r+0x14>
 800d6ca:	9b01      	ldr	r3, [sp, #4]
 800d6cc:	0022      	movs	r2, r4
 800d6ce:	429c      	cmp	r4, r3
 800d6d0:	d900      	bls.n	800d6d4 <_realloc_r+0x4c>
 800d6d2:	001a      	movs	r2, r3
 800d6d4:	0031      	movs	r1, r6
 800d6d6:	0028      	movs	r0, r5
 800d6d8:	f7fe f9e1 	bl	800ba9e <memcpy>
 800d6dc:	0031      	movs	r1, r6
 800d6de:	0038      	movs	r0, r7
 800d6e0:	f7fe fedc 	bl	800c49c <_free_r>
 800d6e4:	e7da      	b.n	800d69c <_realloc_r+0x14>

0800d6e6 <__sfputc_r>:
 800d6e6:	6893      	ldr	r3, [r2, #8]
 800d6e8:	b510      	push	{r4, lr}
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	6093      	str	r3, [r2, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	da04      	bge.n	800d6fc <__sfputc_r+0x16>
 800d6f2:	6994      	ldr	r4, [r2, #24]
 800d6f4:	42a3      	cmp	r3, r4
 800d6f6:	db07      	blt.n	800d708 <__sfputc_r+0x22>
 800d6f8:	290a      	cmp	r1, #10
 800d6fa:	d005      	beq.n	800d708 <__sfputc_r+0x22>
 800d6fc:	6813      	ldr	r3, [r2, #0]
 800d6fe:	1c58      	adds	r0, r3, #1
 800d700:	6010      	str	r0, [r2, #0]
 800d702:	7019      	strb	r1, [r3, #0]
 800d704:	0008      	movs	r0, r1
 800d706:	bd10      	pop	{r4, pc}
 800d708:	f000 f94e 	bl	800d9a8 <__swbuf_r>
 800d70c:	0001      	movs	r1, r0
 800d70e:	e7f9      	b.n	800d704 <__sfputc_r+0x1e>

0800d710 <__sfputs_r>:
 800d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d712:	0006      	movs	r6, r0
 800d714:	000f      	movs	r7, r1
 800d716:	0014      	movs	r4, r2
 800d718:	18d5      	adds	r5, r2, r3
 800d71a:	42ac      	cmp	r4, r5
 800d71c:	d101      	bne.n	800d722 <__sfputs_r+0x12>
 800d71e:	2000      	movs	r0, #0
 800d720:	e007      	b.n	800d732 <__sfputs_r+0x22>
 800d722:	7821      	ldrb	r1, [r4, #0]
 800d724:	003a      	movs	r2, r7
 800d726:	0030      	movs	r0, r6
 800d728:	f7ff ffdd 	bl	800d6e6 <__sfputc_r>
 800d72c:	3401      	adds	r4, #1
 800d72e:	1c43      	adds	r3, r0, #1
 800d730:	d1f3      	bne.n	800d71a <__sfputs_r+0xa>
 800d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d734 <_vfiprintf_r>:
 800d734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d736:	b0a1      	sub	sp, #132	; 0x84
 800d738:	0006      	movs	r6, r0
 800d73a:	000c      	movs	r4, r1
 800d73c:	001f      	movs	r7, r3
 800d73e:	9203      	str	r2, [sp, #12]
 800d740:	2800      	cmp	r0, #0
 800d742:	d004      	beq.n	800d74e <_vfiprintf_r+0x1a>
 800d744:	6983      	ldr	r3, [r0, #24]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d101      	bne.n	800d74e <_vfiprintf_r+0x1a>
 800d74a:	f7ff fec7 	bl	800d4dc <__sinit>
 800d74e:	4b8e      	ldr	r3, [pc, #568]	; (800d988 <_vfiprintf_r+0x254>)
 800d750:	429c      	cmp	r4, r3
 800d752:	d11c      	bne.n	800d78e <_vfiprintf_r+0x5a>
 800d754:	6874      	ldr	r4, [r6, #4]
 800d756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d758:	07db      	lsls	r3, r3, #31
 800d75a:	d405      	bmi.n	800d768 <_vfiprintf_r+0x34>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	059b      	lsls	r3, r3, #22
 800d760:	d402      	bmi.n	800d768 <_vfiprintf_r+0x34>
 800d762:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d764:	f7ff ff6b 	bl	800d63e <__retarget_lock_acquire_recursive>
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	071b      	lsls	r3, r3, #28
 800d76c:	d502      	bpl.n	800d774 <_vfiprintf_r+0x40>
 800d76e:	6923      	ldr	r3, [r4, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d11d      	bne.n	800d7b0 <_vfiprintf_r+0x7c>
 800d774:	0021      	movs	r1, r4
 800d776:	0030      	movs	r0, r6
 800d778:	f000 f96c 	bl	800da54 <__swsetup_r>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d017      	beq.n	800d7b0 <_vfiprintf_r+0x7c>
 800d780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d782:	07db      	lsls	r3, r3, #31
 800d784:	d50d      	bpl.n	800d7a2 <_vfiprintf_r+0x6e>
 800d786:	2001      	movs	r0, #1
 800d788:	4240      	negs	r0, r0
 800d78a:	b021      	add	sp, #132	; 0x84
 800d78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d78e:	4b7f      	ldr	r3, [pc, #508]	; (800d98c <_vfiprintf_r+0x258>)
 800d790:	429c      	cmp	r4, r3
 800d792:	d101      	bne.n	800d798 <_vfiprintf_r+0x64>
 800d794:	68b4      	ldr	r4, [r6, #8]
 800d796:	e7de      	b.n	800d756 <_vfiprintf_r+0x22>
 800d798:	4b7d      	ldr	r3, [pc, #500]	; (800d990 <_vfiprintf_r+0x25c>)
 800d79a:	429c      	cmp	r4, r3
 800d79c:	d1db      	bne.n	800d756 <_vfiprintf_r+0x22>
 800d79e:	68f4      	ldr	r4, [r6, #12]
 800d7a0:	e7d9      	b.n	800d756 <_vfiprintf_r+0x22>
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	059b      	lsls	r3, r3, #22
 800d7a6:	d4ee      	bmi.n	800d786 <_vfiprintf_r+0x52>
 800d7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7aa:	f7ff ff49 	bl	800d640 <__retarget_lock_release_recursive>
 800d7ae:	e7ea      	b.n	800d786 <_vfiprintf_r+0x52>
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	ad08      	add	r5, sp, #32
 800d7b4:	616b      	str	r3, [r5, #20]
 800d7b6:	3320      	adds	r3, #32
 800d7b8:	766b      	strb	r3, [r5, #25]
 800d7ba:	3310      	adds	r3, #16
 800d7bc:	76ab      	strb	r3, [r5, #26]
 800d7be:	9707      	str	r7, [sp, #28]
 800d7c0:	9f03      	ldr	r7, [sp, #12]
 800d7c2:	783b      	ldrb	r3, [r7, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <_vfiprintf_r+0x98>
 800d7c8:	2b25      	cmp	r3, #37	; 0x25
 800d7ca:	d14e      	bne.n	800d86a <_vfiprintf_r+0x136>
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	1afb      	subs	r3, r7, r3
 800d7d0:	9305      	str	r3, [sp, #20]
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	429f      	cmp	r7, r3
 800d7d6:	d00d      	beq.n	800d7f4 <_vfiprintf_r+0xc0>
 800d7d8:	9b05      	ldr	r3, [sp, #20]
 800d7da:	0021      	movs	r1, r4
 800d7dc:	0030      	movs	r0, r6
 800d7de:	9a03      	ldr	r2, [sp, #12]
 800d7e0:	f7ff ff96 	bl	800d710 <__sfputs_r>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d100      	bne.n	800d7ea <_vfiprintf_r+0xb6>
 800d7e8:	e0b5      	b.n	800d956 <_vfiprintf_r+0x222>
 800d7ea:	696a      	ldr	r2, [r5, #20]
 800d7ec:	9b05      	ldr	r3, [sp, #20]
 800d7ee:	4694      	mov	ip, r2
 800d7f0:	4463      	add	r3, ip
 800d7f2:	616b      	str	r3, [r5, #20]
 800d7f4:	783b      	ldrb	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d100      	bne.n	800d7fc <_vfiprintf_r+0xc8>
 800d7fa:	e0ac      	b.n	800d956 <_vfiprintf_r+0x222>
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	1c7b      	adds	r3, r7, #1
 800d800:	9303      	str	r3, [sp, #12]
 800d802:	2300      	movs	r3, #0
 800d804:	4252      	negs	r2, r2
 800d806:	606a      	str	r2, [r5, #4]
 800d808:	a904      	add	r1, sp, #16
 800d80a:	3254      	adds	r2, #84	; 0x54
 800d80c:	1852      	adds	r2, r2, r1
 800d80e:	602b      	str	r3, [r5, #0]
 800d810:	60eb      	str	r3, [r5, #12]
 800d812:	60ab      	str	r3, [r5, #8]
 800d814:	7013      	strb	r3, [r2, #0]
 800d816:	65ab      	str	r3, [r5, #88]	; 0x58
 800d818:	9b03      	ldr	r3, [sp, #12]
 800d81a:	2205      	movs	r2, #5
 800d81c:	7819      	ldrb	r1, [r3, #0]
 800d81e:	485d      	ldr	r0, [pc, #372]	; (800d994 <_vfiprintf_r+0x260>)
 800d820:	f7fe f932 	bl	800ba88 <memchr>
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	1c5f      	adds	r7, r3, #1
 800d828:	2800      	cmp	r0, #0
 800d82a:	d120      	bne.n	800d86e <_vfiprintf_r+0x13a>
 800d82c:	682a      	ldr	r2, [r5, #0]
 800d82e:	06d3      	lsls	r3, r2, #27
 800d830:	d504      	bpl.n	800d83c <_vfiprintf_r+0x108>
 800d832:	2353      	movs	r3, #83	; 0x53
 800d834:	a904      	add	r1, sp, #16
 800d836:	185b      	adds	r3, r3, r1
 800d838:	2120      	movs	r1, #32
 800d83a:	7019      	strb	r1, [r3, #0]
 800d83c:	0713      	lsls	r3, r2, #28
 800d83e:	d504      	bpl.n	800d84a <_vfiprintf_r+0x116>
 800d840:	2353      	movs	r3, #83	; 0x53
 800d842:	a904      	add	r1, sp, #16
 800d844:	185b      	adds	r3, r3, r1
 800d846:	212b      	movs	r1, #43	; 0x2b
 800d848:	7019      	strb	r1, [r3, #0]
 800d84a:	9b03      	ldr	r3, [sp, #12]
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	2b2a      	cmp	r3, #42	; 0x2a
 800d850:	d016      	beq.n	800d880 <_vfiprintf_r+0x14c>
 800d852:	2100      	movs	r1, #0
 800d854:	68eb      	ldr	r3, [r5, #12]
 800d856:	9f03      	ldr	r7, [sp, #12]
 800d858:	783a      	ldrb	r2, [r7, #0]
 800d85a:	1c78      	adds	r0, r7, #1
 800d85c:	3a30      	subs	r2, #48	; 0x30
 800d85e:	4684      	mov	ip, r0
 800d860:	2a09      	cmp	r2, #9
 800d862:	d94f      	bls.n	800d904 <_vfiprintf_r+0x1d0>
 800d864:	2900      	cmp	r1, #0
 800d866:	d111      	bne.n	800d88c <_vfiprintf_r+0x158>
 800d868:	e017      	b.n	800d89a <_vfiprintf_r+0x166>
 800d86a:	3701      	adds	r7, #1
 800d86c:	e7a9      	b.n	800d7c2 <_vfiprintf_r+0x8e>
 800d86e:	4b49      	ldr	r3, [pc, #292]	; (800d994 <_vfiprintf_r+0x260>)
 800d870:	682a      	ldr	r2, [r5, #0]
 800d872:	1ac0      	subs	r0, r0, r3
 800d874:	2301      	movs	r3, #1
 800d876:	4083      	lsls	r3, r0
 800d878:	4313      	orrs	r3, r2
 800d87a:	602b      	str	r3, [r5, #0]
 800d87c:	9703      	str	r7, [sp, #12]
 800d87e:	e7cb      	b.n	800d818 <_vfiprintf_r+0xe4>
 800d880:	9b07      	ldr	r3, [sp, #28]
 800d882:	1d19      	adds	r1, r3, #4
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	9107      	str	r1, [sp, #28]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	db01      	blt.n	800d890 <_vfiprintf_r+0x15c>
 800d88c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d88e:	e004      	b.n	800d89a <_vfiprintf_r+0x166>
 800d890:	425b      	negs	r3, r3
 800d892:	60eb      	str	r3, [r5, #12]
 800d894:	2302      	movs	r3, #2
 800d896:	4313      	orrs	r3, r2
 800d898:	602b      	str	r3, [r5, #0]
 800d89a:	783b      	ldrb	r3, [r7, #0]
 800d89c:	2b2e      	cmp	r3, #46	; 0x2e
 800d89e:	d10a      	bne.n	800d8b6 <_vfiprintf_r+0x182>
 800d8a0:	787b      	ldrb	r3, [r7, #1]
 800d8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a4:	d137      	bne.n	800d916 <_vfiprintf_r+0x1e2>
 800d8a6:	9b07      	ldr	r3, [sp, #28]
 800d8a8:	3702      	adds	r7, #2
 800d8aa:	1d1a      	adds	r2, r3, #4
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	9207      	str	r2, [sp, #28]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	db2d      	blt.n	800d910 <_vfiprintf_r+0x1dc>
 800d8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b6:	2203      	movs	r2, #3
 800d8b8:	7839      	ldrb	r1, [r7, #0]
 800d8ba:	4837      	ldr	r0, [pc, #220]	; (800d998 <_vfiprintf_r+0x264>)
 800d8bc:	f7fe f8e4 	bl	800ba88 <memchr>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d007      	beq.n	800d8d4 <_vfiprintf_r+0x1a0>
 800d8c4:	4b34      	ldr	r3, [pc, #208]	; (800d998 <_vfiprintf_r+0x264>)
 800d8c6:	682a      	ldr	r2, [r5, #0]
 800d8c8:	1ac0      	subs	r0, r0, r3
 800d8ca:	2340      	movs	r3, #64	; 0x40
 800d8cc:	4083      	lsls	r3, r0
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	3701      	adds	r7, #1
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	7839      	ldrb	r1, [r7, #0]
 800d8d6:	1c7b      	adds	r3, r7, #1
 800d8d8:	2206      	movs	r2, #6
 800d8da:	4830      	ldr	r0, [pc, #192]	; (800d99c <_vfiprintf_r+0x268>)
 800d8dc:	9303      	str	r3, [sp, #12]
 800d8de:	7629      	strb	r1, [r5, #24]
 800d8e0:	f7fe f8d2 	bl	800ba88 <memchr>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d045      	beq.n	800d974 <_vfiprintf_r+0x240>
 800d8e8:	4b2d      	ldr	r3, [pc, #180]	; (800d9a0 <_vfiprintf_r+0x26c>)
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d127      	bne.n	800d93e <_vfiprintf_r+0x20a>
 800d8ee:	2207      	movs	r2, #7
 800d8f0:	9b07      	ldr	r3, [sp, #28]
 800d8f2:	3307      	adds	r3, #7
 800d8f4:	4393      	bics	r3, r2
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	9307      	str	r3, [sp, #28]
 800d8fa:	696b      	ldr	r3, [r5, #20]
 800d8fc:	9a04      	ldr	r2, [sp, #16]
 800d8fe:	189b      	adds	r3, r3, r2
 800d900:	616b      	str	r3, [r5, #20]
 800d902:	e75d      	b.n	800d7c0 <_vfiprintf_r+0x8c>
 800d904:	210a      	movs	r1, #10
 800d906:	434b      	muls	r3, r1
 800d908:	4667      	mov	r7, ip
 800d90a:	189b      	adds	r3, r3, r2
 800d90c:	3909      	subs	r1, #9
 800d90e:	e7a3      	b.n	800d858 <_vfiprintf_r+0x124>
 800d910:	2301      	movs	r3, #1
 800d912:	425b      	negs	r3, r3
 800d914:	e7ce      	b.n	800d8b4 <_vfiprintf_r+0x180>
 800d916:	2300      	movs	r3, #0
 800d918:	001a      	movs	r2, r3
 800d91a:	3701      	adds	r7, #1
 800d91c:	606b      	str	r3, [r5, #4]
 800d91e:	7839      	ldrb	r1, [r7, #0]
 800d920:	1c78      	adds	r0, r7, #1
 800d922:	3930      	subs	r1, #48	; 0x30
 800d924:	4684      	mov	ip, r0
 800d926:	2909      	cmp	r1, #9
 800d928:	d903      	bls.n	800d932 <_vfiprintf_r+0x1fe>
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d0c3      	beq.n	800d8b6 <_vfiprintf_r+0x182>
 800d92e:	9209      	str	r2, [sp, #36]	; 0x24
 800d930:	e7c1      	b.n	800d8b6 <_vfiprintf_r+0x182>
 800d932:	230a      	movs	r3, #10
 800d934:	435a      	muls	r2, r3
 800d936:	4667      	mov	r7, ip
 800d938:	1852      	adds	r2, r2, r1
 800d93a:	3b09      	subs	r3, #9
 800d93c:	e7ef      	b.n	800d91e <_vfiprintf_r+0x1ea>
 800d93e:	ab07      	add	r3, sp, #28
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	0022      	movs	r2, r4
 800d944:	0029      	movs	r1, r5
 800d946:	0030      	movs	r0, r6
 800d948:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <_vfiprintf_r+0x270>)
 800d94a:	f7fb f8f5 	bl	8008b38 <_printf_float>
 800d94e:	9004      	str	r0, [sp, #16]
 800d950:	9b04      	ldr	r3, [sp, #16]
 800d952:	3301      	adds	r3, #1
 800d954:	d1d1      	bne.n	800d8fa <_vfiprintf_r+0x1c6>
 800d956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d958:	07db      	lsls	r3, r3, #31
 800d95a:	d405      	bmi.n	800d968 <_vfiprintf_r+0x234>
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	059b      	lsls	r3, r3, #22
 800d960:	d402      	bmi.n	800d968 <_vfiprintf_r+0x234>
 800d962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d964:	f7ff fe6c 	bl	800d640 <__retarget_lock_release_recursive>
 800d968:	89a3      	ldrh	r3, [r4, #12]
 800d96a:	065b      	lsls	r3, r3, #25
 800d96c:	d500      	bpl.n	800d970 <_vfiprintf_r+0x23c>
 800d96e:	e70a      	b.n	800d786 <_vfiprintf_r+0x52>
 800d970:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d972:	e70a      	b.n	800d78a <_vfiprintf_r+0x56>
 800d974:	ab07      	add	r3, sp, #28
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	0022      	movs	r2, r4
 800d97a:	0029      	movs	r1, r5
 800d97c:	0030      	movs	r0, r6
 800d97e:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <_vfiprintf_r+0x270>)
 800d980:	f7fb fb8c 	bl	800909c <_printf_i>
 800d984:	e7e3      	b.n	800d94e <_vfiprintf_r+0x21a>
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	0800e46c 	.word	0x0800e46c
 800d98c:	0800e48c 	.word	0x0800e48c
 800d990:	0800e44c 	.word	0x0800e44c
 800d994:	0800e3e4 	.word	0x0800e3e4
 800d998:	0800e3ea 	.word	0x0800e3ea
 800d99c:	0800e3ee 	.word	0x0800e3ee
 800d9a0:	08008b39 	.word	0x08008b39
 800d9a4:	0800d711 	.word	0x0800d711

0800d9a8 <__swbuf_r>:
 800d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9aa:	0005      	movs	r5, r0
 800d9ac:	000e      	movs	r6, r1
 800d9ae:	0014      	movs	r4, r2
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d004      	beq.n	800d9be <__swbuf_r+0x16>
 800d9b4:	6983      	ldr	r3, [r0, #24]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <__swbuf_r+0x16>
 800d9ba:	f7ff fd8f 	bl	800d4dc <__sinit>
 800d9be:	4b22      	ldr	r3, [pc, #136]	; (800da48 <__swbuf_r+0xa0>)
 800d9c0:	429c      	cmp	r4, r3
 800d9c2:	d12e      	bne.n	800da22 <__swbuf_r+0x7a>
 800d9c4:	686c      	ldr	r4, [r5, #4]
 800d9c6:	69a3      	ldr	r3, [r4, #24]
 800d9c8:	60a3      	str	r3, [r4, #8]
 800d9ca:	89a3      	ldrh	r3, [r4, #12]
 800d9cc:	071b      	lsls	r3, r3, #28
 800d9ce:	d532      	bpl.n	800da36 <__swbuf_r+0x8e>
 800d9d0:	6923      	ldr	r3, [r4, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d02f      	beq.n	800da36 <__swbuf_r+0x8e>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	6922      	ldr	r2, [r4, #16]
 800d9da:	b2f7      	uxtb	r7, r6
 800d9dc:	1a98      	subs	r0, r3, r2
 800d9de:	6963      	ldr	r3, [r4, #20]
 800d9e0:	b2f6      	uxtb	r6, r6
 800d9e2:	4283      	cmp	r3, r0
 800d9e4:	dc05      	bgt.n	800d9f2 <__swbuf_r+0x4a>
 800d9e6:	0021      	movs	r1, r4
 800d9e8:	0028      	movs	r0, r5
 800d9ea:	f7ff fcd5 	bl	800d398 <_fflush_r>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d127      	bne.n	800da42 <__swbuf_r+0x9a>
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	60a3      	str	r3, [r4, #8]
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	1c5a      	adds	r2, r3, #1
 800d9fe:	6022      	str	r2, [r4, #0]
 800da00:	701f      	strb	r7, [r3, #0]
 800da02:	6963      	ldr	r3, [r4, #20]
 800da04:	4283      	cmp	r3, r0
 800da06:	d004      	beq.n	800da12 <__swbuf_r+0x6a>
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	07db      	lsls	r3, r3, #31
 800da0c:	d507      	bpl.n	800da1e <__swbuf_r+0x76>
 800da0e:	2e0a      	cmp	r6, #10
 800da10:	d105      	bne.n	800da1e <__swbuf_r+0x76>
 800da12:	0021      	movs	r1, r4
 800da14:	0028      	movs	r0, r5
 800da16:	f7ff fcbf 	bl	800d398 <_fflush_r>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d111      	bne.n	800da42 <__swbuf_r+0x9a>
 800da1e:	0030      	movs	r0, r6
 800da20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da22:	4b0a      	ldr	r3, [pc, #40]	; (800da4c <__swbuf_r+0xa4>)
 800da24:	429c      	cmp	r4, r3
 800da26:	d101      	bne.n	800da2c <__swbuf_r+0x84>
 800da28:	68ac      	ldr	r4, [r5, #8]
 800da2a:	e7cc      	b.n	800d9c6 <__swbuf_r+0x1e>
 800da2c:	4b08      	ldr	r3, [pc, #32]	; (800da50 <__swbuf_r+0xa8>)
 800da2e:	429c      	cmp	r4, r3
 800da30:	d1c9      	bne.n	800d9c6 <__swbuf_r+0x1e>
 800da32:	68ec      	ldr	r4, [r5, #12]
 800da34:	e7c7      	b.n	800d9c6 <__swbuf_r+0x1e>
 800da36:	0021      	movs	r1, r4
 800da38:	0028      	movs	r0, r5
 800da3a:	f000 f80b 	bl	800da54 <__swsetup_r>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d0c9      	beq.n	800d9d6 <__swbuf_r+0x2e>
 800da42:	2601      	movs	r6, #1
 800da44:	4276      	negs	r6, r6
 800da46:	e7ea      	b.n	800da1e <__swbuf_r+0x76>
 800da48:	0800e46c 	.word	0x0800e46c
 800da4c:	0800e48c 	.word	0x0800e48c
 800da50:	0800e44c 	.word	0x0800e44c

0800da54 <__swsetup_r>:
 800da54:	4b37      	ldr	r3, [pc, #220]	; (800db34 <__swsetup_r+0xe0>)
 800da56:	b570      	push	{r4, r5, r6, lr}
 800da58:	681d      	ldr	r5, [r3, #0]
 800da5a:	0006      	movs	r6, r0
 800da5c:	000c      	movs	r4, r1
 800da5e:	2d00      	cmp	r5, #0
 800da60:	d005      	beq.n	800da6e <__swsetup_r+0x1a>
 800da62:	69ab      	ldr	r3, [r5, #24]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d102      	bne.n	800da6e <__swsetup_r+0x1a>
 800da68:	0028      	movs	r0, r5
 800da6a:	f7ff fd37 	bl	800d4dc <__sinit>
 800da6e:	4b32      	ldr	r3, [pc, #200]	; (800db38 <__swsetup_r+0xe4>)
 800da70:	429c      	cmp	r4, r3
 800da72:	d10f      	bne.n	800da94 <__swsetup_r+0x40>
 800da74:	686c      	ldr	r4, [r5, #4]
 800da76:	230c      	movs	r3, #12
 800da78:	5ee2      	ldrsh	r2, [r4, r3]
 800da7a:	b293      	uxth	r3, r2
 800da7c:	0711      	lsls	r1, r2, #28
 800da7e:	d42d      	bmi.n	800dadc <__swsetup_r+0x88>
 800da80:	06d9      	lsls	r1, r3, #27
 800da82:	d411      	bmi.n	800daa8 <__swsetup_r+0x54>
 800da84:	2309      	movs	r3, #9
 800da86:	2001      	movs	r0, #1
 800da88:	6033      	str	r3, [r6, #0]
 800da8a:	3337      	adds	r3, #55	; 0x37
 800da8c:	4313      	orrs	r3, r2
 800da8e:	81a3      	strh	r3, [r4, #12]
 800da90:	4240      	negs	r0, r0
 800da92:	bd70      	pop	{r4, r5, r6, pc}
 800da94:	4b29      	ldr	r3, [pc, #164]	; (800db3c <__swsetup_r+0xe8>)
 800da96:	429c      	cmp	r4, r3
 800da98:	d101      	bne.n	800da9e <__swsetup_r+0x4a>
 800da9a:	68ac      	ldr	r4, [r5, #8]
 800da9c:	e7eb      	b.n	800da76 <__swsetup_r+0x22>
 800da9e:	4b28      	ldr	r3, [pc, #160]	; (800db40 <__swsetup_r+0xec>)
 800daa0:	429c      	cmp	r4, r3
 800daa2:	d1e8      	bne.n	800da76 <__swsetup_r+0x22>
 800daa4:	68ec      	ldr	r4, [r5, #12]
 800daa6:	e7e6      	b.n	800da76 <__swsetup_r+0x22>
 800daa8:	075b      	lsls	r3, r3, #29
 800daaa:	d513      	bpl.n	800dad4 <__swsetup_r+0x80>
 800daac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daae:	2900      	cmp	r1, #0
 800dab0:	d008      	beq.n	800dac4 <__swsetup_r+0x70>
 800dab2:	0023      	movs	r3, r4
 800dab4:	3344      	adds	r3, #68	; 0x44
 800dab6:	4299      	cmp	r1, r3
 800dab8:	d002      	beq.n	800dac0 <__swsetup_r+0x6c>
 800daba:	0030      	movs	r0, r6
 800dabc:	f7fe fcee 	bl	800c49c <_free_r>
 800dac0:	2300      	movs	r3, #0
 800dac2:	6363      	str	r3, [r4, #52]	; 0x34
 800dac4:	2224      	movs	r2, #36	; 0x24
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	4393      	bics	r3, r2
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	2300      	movs	r3, #0
 800dace:	6063      	str	r3, [r4, #4]
 800dad0:	6923      	ldr	r3, [r4, #16]
 800dad2:	6023      	str	r3, [r4, #0]
 800dad4:	2308      	movs	r3, #8
 800dad6:	89a2      	ldrh	r2, [r4, #12]
 800dad8:	4313      	orrs	r3, r2
 800dada:	81a3      	strh	r3, [r4, #12]
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10b      	bne.n	800dafa <__swsetup_r+0xa6>
 800dae2:	21a0      	movs	r1, #160	; 0xa0
 800dae4:	2280      	movs	r2, #128	; 0x80
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	0089      	lsls	r1, r1, #2
 800daea:	0092      	lsls	r2, r2, #2
 800daec:	400b      	ands	r3, r1
 800daee:	4293      	cmp	r3, r2
 800daf0:	d003      	beq.n	800dafa <__swsetup_r+0xa6>
 800daf2:	0021      	movs	r1, r4
 800daf4:	0030      	movs	r0, r6
 800daf6:	f000 f855 	bl	800dba4 <__smakebuf_r>
 800dafa:	220c      	movs	r2, #12
 800dafc:	5ea3      	ldrsh	r3, [r4, r2]
 800dafe:	2001      	movs	r0, #1
 800db00:	001a      	movs	r2, r3
 800db02:	b299      	uxth	r1, r3
 800db04:	4002      	ands	r2, r0
 800db06:	4203      	tst	r3, r0
 800db08:	d00f      	beq.n	800db2a <__swsetup_r+0xd6>
 800db0a:	2200      	movs	r2, #0
 800db0c:	60a2      	str	r2, [r4, #8]
 800db0e:	6962      	ldr	r2, [r4, #20]
 800db10:	4252      	negs	r2, r2
 800db12:	61a2      	str	r2, [r4, #24]
 800db14:	2000      	movs	r0, #0
 800db16:	6922      	ldr	r2, [r4, #16]
 800db18:	4282      	cmp	r2, r0
 800db1a:	d1ba      	bne.n	800da92 <__swsetup_r+0x3e>
 800db1c:	060a      	lsls	r2, r1, #24
 800db1e:	d5b8      	bpl.n	800da92 <__swsetup_r+0x3e>
 800db20:	2240      	movs	r2, #64	; 0x40
 800db22:	4313      	orrs	r3, r2
 800db24:	81a3      	strh	r3, [r4, #12]
 800db26:	3801      	subs	r0, #1
 800db28:	e7b3      	b.n	800da92 <__swsetup_r+0x3e>
 800db2a:	0788      	lsls	r0, r1, #30
 800db2c:	d400      	bmi.n	800db30 <__swsetup_r+0xdc>
 800db2e:	6962      	ldr	r2, [r4, #20]
 800db30:	60a2      	str	r2, [r4, #8]
 800db32:	e7ef      	b.n	800db14 <__swsetup_r+0xc0>
 800db34:	2000000c 	.word	0x2000000c
 800db38:	0800e46c 	.word	0x0800e46c
 800db3c:	0800e48c 	.word	0x0800e48c
 800db40:	0800e44c 	.word	0x0800e44c

0800db44 <abort>:
 800db44:	2006      	movs	r0, #6
 800db46:	b510      	push	{r4, lr}
 800db48:	f000 f8a2 	bl	800dc90 <raise>
 800db4c:	2001      	movs	r0, #1
 800db4e:	f7f6 fccd 	bl	80044ec <_exit>
	...

0800db54 <__swhatbuf_r>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	000e      	movs	r6, r1
 800db58:	001d      	movs	r5, r3
 800db5a:	230e      	movs	r3, #14
 800db5c:	5ec9      	ldrsh	r1, [r1, r3]
 800db5e:	0014      	movs	r4, r2
 800db60:	b096      	sub	sp, #88	; 0x58
 800db62:	2900      	cmp	r1, #0
 800db64:	da08      	bge.n	800db78 <__swhatbuf_r+0x24>
 800db66:	220c      	movs	r2, #12
 800db68:	5eb3      	ldrsh	r3, [r6, r2]
 800db6a:	2200      	movs	r2, #0
 800db6c:	602a      	str	r2, [r5, #0]
 800db6e:	061b      	lsls	r3, r3, #24
 800db70:	d411      	bmi.n	800db96 <__swhatbuf_r+0x42>
 800db72:	2380      	movs	r3, #128	; 0x80
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	e00f      	b.n	800db98 <__swhatbuf_r+0x44>
 800db78:	466a      	mov	r2, sp
 800db7a:	f000 f8a9 	bl	800dcd0 <_fstat_r>
 800db7e:	2800      	cmp	r0, #0
 800db80:	dbf1      	blt.n	800db66 <__swhatbuf_r+0x12>
 800db82:	23f0      	movs	r3, #240	; 0xf0
 800db84:	9901      	ldr	r1, [sp, #4]
 800db86:	021b      	lsls	r3, r3, #8
 800db88:	4019      	ands	r1, r3
 800db8a:	4b05      	ldr	r3, [pc, #20]	; (800dba0 <__swhatbuf_r+0x4c>)
 800db8c:	18c9      	adds	r1, r1, r3
 800db8e:	424b      	negs	r3, r1
 800db90:	4159      	adcs	r1, r3
 800db92:	6029      	str	r1, [r5, #0]
 800db94:	e7ed      	b.n	800db72 <__swhatbuf_r+0x1e>
 800db96:	2340      	movs	r3, #64	; 0x40
 800db98:	2000      	movs	r0, #0
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	b016      	add	sp, #88	; 0x58
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	ffffe000 	.word	0xffffe000

0800dba4 <__smakebuf_r>:
 800dba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dba6:	2602      	movs	r6, #2
 800dba8:	898b      	ldrh	r3, [r1, #12]
 800dbaa:	0005      	movs	r5, r0
 800dbac:	000c      	movs	r4, r1
 800dbae:	4233      	tst	r3, r6
 800dbb0:	d006      	beq.n	800dbc0 <__smakebuf_r+0x1c>
 800dbb2:	0023      	movs	r3, r4
 800dbb4:	3347      	adds	r3, #71	; 0x47
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	6123      	str	r3, [r4, #16]
 800dbba:	2301      	movs	r3, #1
 800dbbc:	6163      	str	r3, [r4, #20]
 800dbbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dbc0:	466a      	mov	r2, sp
 800dbc2:	ab01      	add	r3, sp, #4
 800dbc4:	f7ff ffc6 	bl	800db54 <__swhatbuf_r>
 800dbc8:	9900      	ldr	r1, [sp, #0]
 800dbca:	0007      	movs	r7, r0
 800dbcc:	0028      	movs	r0, r5
 800dbce:	f7fe fcd1 	bl	800c574 <_malloc_r>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d108      	bne.n	800dbe8 <__smakebuf_r+0x44>
 800dbd6:	220c      	movs	r2, #12
 800dbd8:	5ea3      	ldrsh	r3, [r4, r2]
 800dbda:	059a      	lsls	r2, r3, #22
 800dbdc:	d4ef      	bmi.n	800dbbe <__smakebuf_r+0x1a>
 800dbde:	2203      	movs	r2, #3
 800dbe0:	4393      	bics	r3, r2
 800dbe2:	431e      	orrs	r6, r3
 800dbe4:	81a6      	strh	r6, [r4, #12]
 800dbe6:	e7e4      	b.n	800dbb2 <__smakebuf_r+0xe>
 800dbe8:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <__smakebuf_r+0x84>)
 800dbea:	62ab      	str	r3, [r5, #40]	; 0x28
 800dbec:	2380      	movs	r3, #128	; 0x80
 800dbee:	89a2      	ldrh	r2, [r4, #12]
 800dbf0:	6020      	str	r0, [r4, #0]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	6120      	str	r0, [r4, #16]
 800dbfa:	6163      	str	r3, [r4, #20]
 800dbfc:	9b01      	ldr	r3, [sp, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00d      	beq.n	800dc1e <__smakebuf_r+0x7a>
 800dc02:	0028      	movs	r0, r5
 800dc04:	230e      	movs	r3, #14
 800dc06:	5ee1      	ldrsh	r1, [r4, r3]
 800dc08:	f000 f874 	bl	800dcf4 <_isatty_r>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d006      	beq.n	800dc1e <__smakebuf_r+0x7a>
 800dc10:	2203      	movs	r2, #3
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	4393      	bics	r3, r2
 800dc16:	001a      	movs	r2, r3
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	89a0      	ldrh	r0, [r4, #12]
 800dc20:	4307      	orrs	r7, r0
 800dc22:	81a7      	strh	r7, [r4, #12]
 800dc24:	e7cb      	b.n	800dbbe <__smakebuf_r+0x1a>
 800dc26:	46c0      	nop			; (mov r8, r8)
 800dc28:	0800d461 	.word	0x0800d461

0800dc2c <_malloc_usable_size_r>:
 800dc2c:	1f0b      	subs	r3, r1, #4
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	1f18      	subs	r0, r3, #4
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	da01      	bge.n	800dc3a <_malloc_usable_size_r+0xe>
 800dc36:	580b      	ldr	r3, [r1, r0]
 800dc38:	18c0      	adds	r0, r0, r3
 800dc3a:	4770      	bx	lr

0800dc3c <_raise_r>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	0004      	movs	r4, r0
 800dc40:	000d      	movs	r5, r1
 800dc42:	291f      	cmp	r1, #31
 800dc44:	d904      	bls.n	800dc50 <_raise_r+0x14>
 800dc46:	2316      	movs	r3, #22
 800dc48:	6003      	str	r3, [r0, #0]
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	4240      	negs	r0, r0
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <_raise_r+0x24>
 800dc56:	008a      	lsls	r2, r1, #2
 800dc58:	189b      	adds	r3, r3, r2
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	2a00      	cmp	r2, #0
 800dc5e:	d108      	bne.n	800dc72 <_raise_r+0x36>
 800dc60:	0020      	movs	r0, r4
 800dc62:	f000 f831 	bl	800dcc8 <_getpid_r>
 800dc66:	002a      	movs	r2, r5
 800dc68:	0001      	movs	r1, r0
 800dc6a:	0020      	movs	r0, r4
 800dc6c:	f000 f81a 	bl	800dca4 <_kill_r>
 800dc70:	e7ed      	b.n	800dc4e <_raise_r+0x12>
 800dc72:	2000      	movs	r0, #0
 800dc74:	2a01      	cmp	r2, #1
 800dc76:	d0ea      	beq.n	800dc4e <_raise_r+0x12>
 800dc78:	1c51      	adds	r1, r2, #1
 800dc7a:	d103      	bne.n	800dc84 <_raise_r+0x48>
 800dc7c:	2316      	movs	r3, #22
 800dc7e:	3001      	adds	r0, #1
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	e7e4      	b.n	800dc4e <_raise_r+0x12>
 800dc84:	2400      	movs	r4, #0
 800dc86:	0028      	movs	r0, r5
 800dc88:	601c      	str	r4, [r3, #0]
 800dc8a:	4790      	blx	r2
 800dc8c:	0020      	movs	r0, r4
 800dc8e:	e7de      	b.n	800dc4e <_raise_r+0x12>

0800dc90 <raise>:
 800dc90:	b510      	push	{r4, lr}
 800dc92:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <raise+0x10>)
 800dc94:	0001      	movs	r1, r0
 800dc96:	6818      	ldr	r0, [r3, #0]
 800dc98:	f7ff ffd0 	bl	800dc3c <_raise_r>
 800dc9c:	bd10      	pop	{r4, pc}
 800dc9e:	46c0      	nop			; (mov r8, r8)
 800dca0:	2000000c 	.word	0x2000000c

0800dca4 <_kill_r>:
 800dca4:	2300      	movs	r3, #0
 800dca6:	b570      	push	{r4, r5, r6, lr}
 800dca8:	4d06      	ldr	r5, [pc, #24]	; (800dcc4 <_kill_r+0x20>)
 800dcaa:	0004      	movs	r4, r0
 800dcac:	0008      	movs	r0, r1
 800dcae:	0011      	movs	r1, r2
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	f7f6 fc0b 	bl	80044cc <_kill>
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	d103      	bne.n	800dcc2 <_kill_r+0x1e>
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d000      	beq.n	800dcc2 <_kill_r+0x1e>
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	20000614 	.word	0x20000614

0800dcc8 <_getpid_r>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	f7f6 fbf9 	bl	80044c0 <_getpid>
 800dcce:	bd10      	pop	{r4, pc}

0800dcd0 <_fstat_r>:
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	b570      	push	{r4, r5, r6, lr}
 800dcd4:	4d06      	ldr	r5, [pc, #24]	; (800dcf0 <_fstat_r+0x20>)
 800dcd6:	0004      	movs	r4, r0
 800dcd8:	0008      	movs	r0, r1
 800dcda:	0011      	movs	r1, r2
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	f7f6 fc54 	bl	800458a <_fstat>
 800dce2:	1c43      	adds	r3, r0, #1
 800dce4:	d103      	bne.n	800dcee <_fstat_r+0x1e>
 800dce6:	682b      	ldr	r3, [r5, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d000      	beq.n	800dcee <_fstat_r+0x1e>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
 800dcf0:	20000614 	.word	0x20000614

0800dcf4 <_isatty_r>:
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	b570      	push	{r4, r5, r6, lr}
 800dcf8:	4d06      	ldr	r5, [pc, #24]	; (800dd14 <_isatty_r+0x20>)
 800dcfa:	0004      	movs	r4, r0
 800dcfc:	0008      	movs	r0, r1
 800dcfe:	602b      	str	r3, [r5, #0]
 800dd00:	f7f6 fc51 	bl	80045a6 <_isatty>
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d103      	bne.n	800dd10 <_isatty_r+0x1c>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d000      	beq.n	800dd10 <_isatty_r+0x1c>
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	bd70      	pop	{r4, r5, r6, pc}
 800dd12:	46c0      	nop			; (mov r8, r8)
 800dd14:	20000614 	.word	0x20000614

0800dd18 <round>:
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	000d      	movs	r5, r1
 800dd1c:	0006      	movs	r6, r0
 800dd1e:	0001      	movs	r1, r0
 800dd20:	006a      	lsls	r2, r5, #1
 800dd22:	4820      	ldr	r0, [pc, #128]	; (800dda4 <round+0x8c>)
 800dd24:	0d52      	lsrs	r2, r2, #21
 800dd26:	1810      	adds	r0, r2, r0
 800dd28:	2813      	cmp	r0, #19
 800dd2a:	dc18      	bgt.n	800dd5e <round+0x46>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	da09      	bge.n	800dd44 <round+0x2c>
 800dd30:	0feb      	lsrs	r3, r5, #31
 800dd32:	2200      	movs	r2, #0
 800dd34:	07db      	lsls	r3, r3, #31
 800dd36:	1c41      	adds	r1, r0, #1
 800dd38:	d101      	bne.n	800dd3e <round+0x26>
 800dd3a:	491b      	ldr	r1, [pc, #108]	; (800dda8 <round+0x90>)
 800dd3c:	430b      	orrs	r3, r1
 800dd3e:	0019      	movs	r1, r3
 800dd40:	0010      	movs	r0, r2
 800dd42:	e018      	b.n	800dd76 <round+0x5e>
 800dd44:	4c19      	ldr	r4, [pc, #100]	; (800ddac <round+0x94>)
 800dd46:	4104      	asrs	r4, r0
 800dd48:	0022      	movs	r2, r4
 800dd4a:	402a      	ands	r2, r5
 800dd4c:	4311      	orrs	r1, r2
 800dd4e:	d014      	beq.n	800dd7a <round+0x62>
 800dd50:	2280      	movs	r2, #128	; 0x80
 800dd52:	0312      	lsls	r2, r2, #12
 800dd54:	4102      	asrs	r2, r0
 800dd56:	1953      	adds	r3, r2, r5
 800dd58:	43a3      	bics	r3, r4
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	e7ef      	b.n	800dd3e <round+0x26>
 800dd5e:	2833      	cmp	r0, #51	; 0x33
 800dd60:	dd0e      	ble.n	800dd80 <round+0x68>
 800dd62:	2380      	movs	r3, #128	; 0x80
 800dd64:	00db      	lsls	r3, r3, #3
 800dd66:	4298      	cmp	r0, r3
 800dd68:	d107      	bne.n	800dd7a <round+0x62>
 800dd6a:	0032      	movs	r2, r6
 800dd6c:	002b      	movs	r3, r5
 800dd6e:	0030      	movs	r0, r6
 800dd70:	0029      	movs	r1, r5
 800dd72:	f7f2 fc13 	bl	800059c <__aeabi_dadd>
 800dd76:	0006      	movs	r6, r0
 800dd78:	000d      	movs	r5, r1
 800dd7a:	0030      	movs	r0, r6
 800dd7c:	0029      	movs	r1, r5
 800dd7e:	bd70      	pop	{r4, r5, r6, pc}
 800dd80:	4c0b      	ldr	r4, [pc, #44]	; (800ddb0 <round+0x98>)
 800dd82:	1912      	adds	r2, r2, r4
 800dd84:	2401      	movs	r4, #1
 800dd86:	4264      	negs	r4, r4
 800dd88:	40d4      	lsrs	r4, r2
 800dd8a:	4234      	tst	r4, r6
 800dd8c:	d0f5      	beq.n	800dd7a <round+0x62>
 800dd8e:	2233      	movs	r2, #51	; 0x33
 800dd90:	1a10      	subs	r0, r2, r0
 800dd92:	3a32      	subs	r2, #50	; 0x32
 800dd94:	4082      	lsls	r2, r0
 800dd96:	1992      	adds	r2, r2, r6
 800dd98:	42b2      	cmp	r2, r6
 800dd9a:	4189      	sbcs	r1, r1
 800dd9c:	4249      	negs	r1, r1
 800dd9e:	186b      	adds	r3, r5, r1
 800dda0:	43a2      	bics	r2, r4
 800dda2:	e7cc      	b.n	800dd3e <round+0x26>
 800dda4:	fffffc01 	.word	0xfffffc01
 800dda8:	3ff00000 	.word	0x3ff00000
 800ddac:	000fffff 	.word	0x000fffff
 800ddb0:	fffffbed 	.word	0xfffffbed

0800ddb4 <_init>:
 800ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb6:	46c0      	nop			; (mov r8, r8)
 800ddb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddba:	bc08      	pop	{r3}
 800ddbc:	469e      	mov	lr, r3
 800ddbe:	4770      	bx	lr

0800ddc0 <_fini>:
 800ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc2:	46c0      	nop			; (mov r8, r8)
 800ddc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc6:	bc08      	pop	{r3}
 800ddc8:	469e      	mov	lr, r3
 800ddca:	4770      	bx	lr
