
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c824  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800c8e8  0800c8e8  0001c8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce84  0800ce84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce84  0800ce84  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce84  0800ce84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce84  0800ce84  0001ce84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce88  0800ce88  0001ce88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ce8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001e0  0800d06c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800d06c  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f629  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f42  00000000  00000000  0002f831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00031778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118ef  00000000  00000000  00033100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9af  00000000  00000000  000449ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006aac0  00000000  00000000  0005339e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bde5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000bdeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c8cc 	.word	0x0800c8cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c8cc 	.word	0x0800c8cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffa3 	bl	8001388 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feed 	bl	800122c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff95 	bl	8001388 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff8b 	bl	8001388 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff0f 	bl	80012a4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff05 	bl	80012a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdef 	bl	80020a0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa38 	bl	8001940 <__aeabi_dsub>
 80004d0:	f001 fde6 	bl	80020a0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff9d 	bl	8001468 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe1a 	bl	800216c <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff94 	bl	8001468 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9fa 	bl	8001940 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fdd3 	bl	800210c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff7d 	bl	8001468 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdfa 	bl	800216c <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	46d6      	mov	lr, sl
 800058e:	4646      	mov	r6, r8
 8000590:	000d      	movs	r5, r1
 8000592:	0001      	movs	r1, r0
 8000594:	0018      	movs	r0, r3
 8000596:	b5c0      	push	{r6, r7, lr}
 8000598:	0017      	movs	r7, r2
 800059a:	032b      	lsls	r3, r5, #12
 800059c:	0a5a      	lsrs	r2, r3, #9
 800059e:	0f4b      	lsrs	r3, r1, #29
 80005a0:	4313      	orrs	r3, r2
 80005a2:	00ca      	lsls	r2, r1, #3
 80005a4:	4691      	mov	r9, r2
 80005a6:	0302      	lsls	r2, r0, #12
 80005a8:	006e      	lsls	r6, r5, #1
 80005aa:	0041      	lsls	r1, r0, #1
 80005ac:	0a52      	lsrs	r2, r2, #9
 80005ae:	0fec      	lsrs	r4, r5, #31
 80005b0:	0f7d      	lsrs	r5, r7, #29
 80005b2:	4315      	orrs	r5, r2
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d49      	lsrs	r1, r1, #21
 80005b8:	0fc0      	lsrs	r0, r0, #31
 80005ba:	4682      	mov	sl, r0
 80005bc:	46ac      	mov	ip, r5
 80005be:	00ff      	lsls	r7, r7, #3
 80005c0:	1a72      	subs	r2, r6, r1
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x40>
 80005c6:	e098      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_dadd+0x46>
 80005cc:	e081      	b.n	80006d2 <__aeabi_dadd+0x14a>
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x4c>
 80005d2:	e0b6      	b.n	8000742 <__aeabi_dadd+0x1ba>
 80005d4:	49c9      	ldr	r1, [pc, #804]	; (80008fc <__aeabi_dadd+0x374>)
 80005d6:	428e      	cmp	r6, r1
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x54>
 80005da:	e172      	b.n	80008c2 <__aeabi_dadd+0x33a>
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0028      	movs	r0, r5
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	4308      	orrs	r0, r1
 80005e4:	4684      	mov	ip, r0
 80005e6:	2a38      	cmp	r2, #56	; 0x38
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x64>
 80005ea:	e15e      	b.n	80008aa <__aeabi_dadd+0x322>
 80005ec:	2a1f      	cmp	r2, #31
 80005ee:	dd00      	ble.n	80005f2 <__aeabi_dadd+0x6a>
 80005f0:	e1ee      	b.n	80009d0 <__aeabi_dadd+0x448>
 80005f2:	2020      	movs	r0, #32
 80005f4:	0039      	movs	r1, r7
 80005f6:	4665      	mov	r5, ip
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4087      	lsls	r7, r0
 80005fc:	40d1      	lsrs	r1, r2
 80005fe:	4085      	lsls	r5, r0
 8000600:	430d      	orrs	r5, r1
 8000602:	0039      	movs	r1, r7
 8000604:	1e4f      	subs	r7, r1, #1
 8000606:	41b9      	sbcs	r1, r7
 8000608:	4667      	mov	r7, ip
 800060a:	40d7      	lsrs	r7, r2
 800060c:	4329      	orrs	r1, r5
 800060e:	1bdb      	subs	r3, r3, r7
 8000610:	464a      	mov	r2, r9
 8000612:	1a55      	subs	r5, r2, r1
 8000614:	45a9      	cmp	r9, r5
 8000616:	4189      	sbcs	r1, r1
 8000618:	4249      	negs	r1, r1
 800061a:	1a5b      	subs	r3, r3, r1
 800061c:	4698      	mov	r8, r3
 800061e:	4643      	mov	r3, r8
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0x9e>
 8000624:	e0cc      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000626:	4643      	mov	r3, r8
 8000628:	025b      	lsls	r3, r3, #9
 800062a:	0a5b      	lsrs	r3, r3, #9
 800062c:	4698      	mov	r8, r3
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0xae>
 8000634:	e12c      	b.n	8000890 <__aeabi_dadd+0x308>
 8000636:	4640      	mov	r0, r8
 8000638:	f001 fe8e 	bl	8002358 <__clzsi2>
 800063c:	0001      	movs	r1, r0
 800063e:	3908      	subs	r1, #8
 8000640:	2220      	movs	r2, #32
 8000642:	0028      	movs	r0, r5
 8000644:	4643      	mov	r3, r8
 8000646:	1a52      	subs	r2, r2, r1
 8000648:	408b      	lsls	r3, r1
 800064a:	40d0      	lsrs	r0, r2
 800064c:	408d      	lsls	r5, r1
 800064e:	4303      	orrs	r3, r0
 8000650:	428e      	cmp	r6, r1
 8000652:	dd00      	ble.n	8000656 <__aeabi_dadd+0xce>
 8000654:	e117      	b.n	8000886 <__aeabi_dadd+0x2fe>
 8000656:	1b8e      	subs	r6, r1, r6
 8000658:	1c72      	adds	r2, r6, #1
 800065a:	2a1f      	cmp	r2, #31
 800065c:	dd00      	ble.n	8000660 <__aeabi_dadd+0xd8>
 800065e:	e1a7      	b.n	80009b0 <__aeabi_dadd+0x428>
 8000660:	2120      	movs	r1, #32
 8000662:	0018      	movs	r0, r3
 8000664:	002e      	movs	r6, r5
 8000666:	1a89      	subs	r1, r1, r2
 8000668:	408d      	lsls	r5, r1
 800066a:	4088      	lsls	r0, r1
 800066c:	40d6      	lsrs	r6, r2
 800066e:	40d3      	lsrs	r3, r2
 8000670:	1e69      	subs	r1, r5, #1
 8000672:	418d      	sbcs	r5, r1
 8000674:	4330      	orrs	r0, r6
 8000676:	4698      	mov	r8, r3
 8000678:	2600      	movs	r6, #0
 800067a:	4305      	orrs	r5, r0
 800067c:	076b      	lsls	r3, r5, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	402b      	ands	r3, r5
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d2b      	adds	r3, r5, #4
 800068a:	42ab      	cmp	r3, r5
 800068c:	41ad      	sbcs	r5, r5
 800068e:	426d      	negs	r5, r5
 8000690:	44a8      	add	r8, r5
 8000692:	001d      	movs	r5, r3
 8000694:	4643      	mov	r3, r8
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	d400      	bmi.n	800069c <__aeabi_dadd+0x114>
 800069a:	e094      	b.n	80007c6 <__aeabi_dadd+0x23e>
 800069c:	4b97      	ldr	r3, [pc, #604]	; (80008fc <__aeabi_dadd+0x374>)
 800069e:	1c72      	adds	r2, r6, #1
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x11e>
 80006a4:	e09d      	b.n	80007e2 <__aeabi_dadd+0x25a>
 80006a6:	4641      	mov	r1, r8
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <__aeabi_dadd+0x378>)
 80006aa:	08ed      	lsrs	r5, r5, #3
 80006ac:	4019      	ands	r1, r3
 80006ae:	000b      	movs	r3, r1
 80006b0:	0552      	lsls	r2, r2, #21
 80006b2:	0749      	lsls	r1, r1, #29
 80006b4:	025b      	lsls	r3, r3, #9
 80006b6:	4329      	orrs	r1, r5
 80006b8:	0b1b      	lsrs	r3, r3, #12
 80006ba:	0d52      	lsrs	r2, r2, #21
 80006bc:	0512      	lsls	r2, r2, #20
 80006be:	4313      	orrs	r3, r2
 80006c0:	07e4      	lsls	r4, r4, #31
 80006c2:	4323      	orrs	r3, r4
 80006c4:	0008      	movs	r0, r1
 80006c6:	0019      	movs	r1, r3
 80006c8:	bce0      	pop	{r5, r6, r7}
 80006ca:	46ba      	mov	sl, r7
 80006cc:	46b1      	mov	r9, r6
 80006ce:	46a8      	mov	r8, r5
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d043      	beq.n	800075e <__aeabi_dadd+0x1d6>
 80006d6:	1b8a      	subs	r2, r1, r6
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d000      	beq.n	80006de <__aeabi_dadd+0x156>
 80006dc:	e12a      	b.n	8000934 <__aeabi_dadd+0x3ac>
 80006de:	464c      	mov	r4, r9
 80006e0:	431c      	orrs	r4, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x15e>
 80006e4:	e1d1      	b.n	8000a8a <__aeabi_dadd+0x502>
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e21f      	b.n	8000b2e <__aeabi_dadd+0x5a6>
 80006ee:	4d83      	ldr	r5, [pc, #524]	; (80008fc <__aeabi_dadd+0x374>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e272      	b.n	8000bdc <__aeabi_dadd+0x654>
 80006f6:	0022      	movs	r2, r4
 80006f8:	e123      	b.n	8000942 <__aeabi_dadd+0x3ba>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	dc00      	bgt.n	8000700 <__aeabi_dadd+0x178>
 80006fe:	e098      	b.n	8000832 <__aeabi_dadd+0x2aa>
 8000700:	2900      	cmp	r1, #0
 8000702:	d042      	beq.n	800078a <__aeabi_dadd+0x202>
 8000704:	497d      	ldr	r1, [pc, #500]	; (80008fc <__aeabi_dadd+0x374>)
 8000706:	428e      	cmp	r6, r1
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x184>
 800070a:	e0da      	b.n	80008c2 <__aeabi_dadd+0x33a>
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0028      	movs	r0, r5
 8000710:	0409      	lsls	r1, r1, #16
 8000712:	4308      	orrs	r0, r1
 8000714:	4684      	mov	ip, r0
 8000716:	2a38      	cmp	r2, #56	; 0x38
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0x194>
 800071a:	e129      	b.n	8000970 <__aeabi_dadd+0x3e8>
 800071c:	2a1f      	cmp	r2, #31
 800071e:	dc00      	bgt.n	8000722 <__aeabi_dadd+0x19a>
 8000720:	e187      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000722:	0011      	movs	r1, r2
 8000724:	4665      	mov	r5, ip
 8000726:	3920      	subs	r1, #32
 8000728:	40cd      	lsrs	r5, r1
 800072a:	2a20      	cmp	r2, #32
 800072c:	d004      	beq.n	8000738 <__aeabi_dadd+0x1b0>
 800072e:	2040      	movs	r0, #64	; 0x40
 8000730:	4661      	mov	r1, ip
 8000732:	1a82      	subs	r2, r0, r2
 8000734:	4091      	lsls	r1, r2
 8000736:	430f      	orrs	r7, r1
 8000738:	0039      	movs	r1, r7
 800073a:	1e4f      	subs	r7, r1, #1
 800073c:	41b9      	sbcs	r1, r7
 800073e:	430d      	orrs	r5, r1
 8000740:	e11b      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000742:	0029      	movs	r1, r5
 8000744:	4339      	orrs	r1, r7
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x1c2>
 8000748:	e0b5      	b.n	80008b6 <__aeabi_dadd+0x32e>
 800074a:	1e51      	subs	r1, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x1ca>
 8000750:	e1ab      	b.n	8000aaa <__aeabi_dadd+0x522>
 8000752:	486a      	ldr	r0, [pc, #424]	; (80008fc <__aeabi_dadd+0x374>)
 8000754:	4282      	cmp	r2, r0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x1d2>
 8000758:	e1b2      	b.n	8000ac0 <__aeabi_dadd+0x538>
 800075a:	000a      	movs	r2, r1
 800075c:	e743      	b.n	80005e6 <__aeabi_dadd+0x5e>
 800075e:	4969      	ldr	r1, [pc, #420]	; (8000904 <__aeabi_dadd+0x37c>)
 8000760:	1c75      	adds	r5, r6, #1
 8000762:	420d      	tst	r5, r1
 8000764:	d000      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e0cf      	b.n	8000908 <__aeabi_dadd+0x380>
 8000768:	2e00      	cmp	r6, #0
 800076a:	d000      	beq.n	800076e <__aeabi_dadd+0x1e6>
 800076c:	e193      	b.n	8000a96 <__aeabi_dadd+0x50e>
 800076e:	4649      	mov	r1, r9
 8000770:	4319      	orrs	r1, r3
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e1d1      	b.n	8000b1a <__aeabi_dadd+0x592>
 8000776:	4661      	mov	r1, ip
 8000778:	4339      	orrs	r1, r7
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x1f6>
 800077c:	e1e3      	b.n	8000b46 <__aeabi_dadd+0x5be>
 800077e:	4649      	mov	r1, r9
 8000780:	0758      	lsls	r0, r3, #29
 8000782:	08c9      	lsrs	r1, r1, #3
 8000784:	4301      	orrs	r1, r0
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	e026      	b.n	80007d8 <__aeabi_dadd+0x250>
 800078a:	0029      	movs	r1, r5
 800078c:	4339      	orrs	r1, r7
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x20a>
 8000790:	e091      	b.n	80008b6 <__aeabi_dadd+0x32e>
 8000792:	1e51      	subs	r1, r2, #1
 8000794:	2a01      	cmp	r2, #1
 8000796:	d005      	beq.n	80007a4 <__aeabi_dadd+0x21c>
 8000798:	4858      	ldr	r0, [pc, #352]	; (80008fc <__aeabi_dadd+0x374>)
 800079a:	4282      	cmp	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e18f      	b.n	8000ac0 <__aeabi_dadd+0x538>
 80007a0:	000a      	movs	r2, r1
 80007a2:	e7b8      	b.n	8000716 <__aeabi_dadd+0x18e>
 80007a4:	003d      	movs	r5, r7
 80007a6:	444d      	add	r5, r9
 80007a8:	454d      	cmp	r5, r9
 80007aa:	4189      	sbcs	r1, r1
 80007ac:	4463      	add	r3, ip
 80007ae:	4698      	mov	r8, r3
 80007b0:	4249      	negs	r1, r1
 80007b2:	4488      	add	r8, r1
 80007b4:	4643      	mov	r3, r8
 80007b6:	2602      	movs	r6, #2
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	d500      	bpl.n	80007be <__aeabi_dadd+0x236>
 80007bc:	e0eb      	b.n	8000996 <__aeabi_dadd+0x40e>
 80007be:	3e01      	subs	r6, #1
 80007c0:	076b      	lsls	r3, r5, #29
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007c4:	e75c      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007c6:	4643      	mov	r3, r8
 80007c8:	08e9      	lsrs	r1, r5, #3
 80007ca:	075a      	lsls	r2, r3, #29
 80007cc:	4311      	orrs	r1, r2
 80007ce:	0032      	movs	r2, r6
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <__aeabi_dadd+0x374>)
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d021      	beq.n	800081c <__aeabi_dadd+0x294>
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	0552      	lsls	r2, r2, #21
 80007dc:	0b1b      	lsrs	r3, r3, #12
 80007de:	0d52      	lsrs	r2, r2, #21
 80007e0:	e76c      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	e769      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e8:	002a      	movs	r2, r5
 80007ea:	433a      	orrs	r2, r7
 80007ec:	d069      	beq.n	80008c2 <__aeabi_dadd+0x33a>
 80007ee:	464a      	mov	r2, r9
 80007f0:	0758      	lsls	r0, r3, #29
 80007f2:	08d1      	lsrs	r1, r2, #3
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	031b      	lsls	r3, r3, #12
 80007fa:	4308      	orrs	r0, r1
 80007fc:	421a      	tst	r2, r3
 80007fe:	d007      	beq.n	8000810 <__aeabi_dadd+0x288>
 8000800:	0029      	movs	r1, r5
 8000802:	08ed      	lsrs	r5, r5, #3
 8000804:	421d      	tst	r5, r3
 8000806:	d103      	bne.n	8000810 <__aeabi_dadd+0x288>
 8000808:	002a      	movs	r2, r5
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	0748      	lsls	r0, r1, #29
 800080e:	4338      	orrs	r0, r7
 8000810:	0f43      	lsrs	r3, r0, #29
 8000812:	00c1      	lsls	r1, r0, #3
 8000814:	075b      	lsls	r3, r3, #29
 8000816:	08c9      	lsrs	r1, r1, #3
 8000818:	4319      	orrs	r1, r3
 800081a:	0013      	movs	r3, r2
 800081c:	000a      	movs	r2, r1
 800081e:	431a      	orrs	r2, r3
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x29c>
 8000822:	e213      	b.n	8000c4c <__aeabi_dadd+0x6c4>
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0312      	lsls	r2, r2, #12
 8000828:	4313      	orrs	r3, r2
 800082a:	031b      	lsls	r3, r3, #12
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <__aeabi_dadd+0x374>)
 800082e:	0b1b      	lsrs	r3, r3, #12
 8000830:	e744      	b.n	80006bc <__aeabi_dadd+0x134>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d04b      	beq.n	80008ce <__aeabi_dadd+0x346>
 8000836:	1b8a      	subs	r2, r1, r6
 8000838:	2e00      	cmp	r6, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x2b6>
 800083c:	e0e7      	b.n	8000a0e <__aeabi_dadd+0x486>
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <__aeabi_dadd+0x374>)
 8000840:	4281      	cmp	r1, r0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x2be>
 8000844:	e195      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4303      	orrs	r3, r0
 800084c:	2a38      	cmp	r2, #56	; 0x38
 800084e:	dd00      	ble.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e143      	b.n	8000ada <__aeabi_dadd+0x552>
 8000852:	2a1f      	cmp	r2, #31
 8000854:	dd00      	ble.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e1db      	b.n	8000c10 <__aeabi_dadd+0x688>
 8000858:	2020      	movs	r0, #32
 800085a:	001d      	movs	r5, r3
 800085c:	464e      	mov	r6, r9
 800085e:	1a80      	subs	r0, r0, r2
 8000860:	4085      	lsls	r5, r0
 8000862:	40d6      	lsrs	r6, r2
 8000864:	4335      	orrs	r5, r6
 8000866:	464e      	mov	r6, r9
 8000868:	4086      	lsls	r6, r0
 800086a:	0030      	movs	r0, r6
 800086c:	40d3      	lsrs	r3, r2
 800086e:	1e46      	subs	r6, r0, #1
 8000870:	41b0      	sbcs	r0, r6
 8000872:	449c      	add	ip, r3
 8000874:	4305      	orrs	r5, r0
 8000876:	19ed      	adds	r5, r5, r7
 8000878:	42bd      	cmp	r5, r7
 800087a:	419b      	sbcs	r3, r3
 800087c:	425b      	negs	r3, r3
 800087e:	4463      	add	r3, ip
 8000880:	4698      	mov	r8, r3
 8000882:	000e      	movs	r6, r1
 8000884:	e07f      	b.n	8000986 <__aeabi_dadd+0x3fe>
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <__aeabi_dadd+0x378>)
 8000888:	1a76      	subs	r6, r6, r1
 800088a:	4013      	ands	r3, r2
 800088c:	4698      	mov	r8, r3
 800088e:	e6f5      	b.n	800067c <__aeabi_dadd+0xf4>
 8000890:	0028      	movs	r0, r5
 8000892:	f001 fd61 	bl	8002358 <__clzsi2>
 8000896:	0001      	movs	r1, r0
 8000898:	3118      	adds	r1, #24
 800089a:	291f      	cmp	r1, #31
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_dadd+0x318>
 800089e:	e6cf      	b.n	8000640 <__aeabi_dadd+0xb8>
 80008a0:	002b      	movs	r3, r5
 80008a2:	3808      	subs	r0, #8
 80008a4:	4083      	lsls	r3, r0
 80008a6:	2500      	movs	r5, #0
 80008a8:	e6d2      	b.n	8000650 <__aeabi_dadd+0xc8>
 80008aa:	4662      	mov	r2, ip
 80008ac:	433a      	orrs	r2, r7
 80008ae:	0011      	movs	r1, r2
 80008b0:	1e4f      	subs	r7, r1, #1
 80008b2:	41b9      	sbcs	r1, r7
 80008b4:	e6ac      	b.n	8000610 <__aeabi_dadd+0x88>
 80008b6:	4649      	mov	r1, r9
 80008b8:	0758      	lsls	r0, r3, #29
 80008ba:	08c9      	lsrs	r1, r1, #3
 80008bc:	4301      	orrs	r1, r0
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	e787      	b.n	80007d2 <__aeabi_dadd+0x24a>
 80008c2:	4649      	mov	r1, r9
 80008c4:	075a      	lsls	r2, r3, #29
 80008c6:	08c9      	lsrs	r1, r1, #3
 80008c8:	4311      	orrs	r1, r2
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	e7a6      	b.n	800081c <__aeabi_dadd+0x294>
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <__aeabi_dadd+0x37c>)
 80008d0:	1c70      	adds	r0, r6, #1
 80008d2:	4208      	tst	r0, r1
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0bb      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e114      	b.n	8000b08 <__aeabi_dadd+0x580>
 80008de:	4649      	mov	r1, r9
 80008e0:	4319      	orrs	r1, r3
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e175      	b.n	8000bd2 <__aeabi_dadd+0x64a>
 80008e6:	0029      	movs	r1, r5
 80008e8:	4339      	orrs	r1, r7
 80008ea:	d000      	beq.n	80008ee <__aeabi_dadd+0x366>
 80008ec:	e17e      	b.n	8000bec <__aeabi_dadd+0x664>
 80008ee:	4649      	mov	r1, r9
 80008f0:	0758      	lsls	r0, r3, #29
 80008f2:	08c9      	lsrs	r1, r1, #3
 80008f4:	4301      	orrs	r1, r0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	e76e      	b.n	80007d8 <__aeabi_dadd+0x250>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	000007ff 	.word	0x000007ff
 8000900:	ff7fffff 	.word	0xff7fffff
 8000904:	000007fe 	.word	0x000007fe
 8000908:	4649      	mov	r1, r9
 800090a:	1bcd      	subs	r5, r1, r7
 800090c:	4661      	mov	r1, ip
 800090e:	1a58      	subs	r0, r3, r1
 8000910:	45a9      	cmp	r9, r5
 8000912:	4189      	sbcs	r1, r1
 8000914:	4249      	negs	r1, r1
 8000916:	4688      	mov	r8, r1
 8000918:	0001      	movs	r1, r0
 800091a:	4640      	mov	r0, r8
 800091c:	1a09      	subs	r1, r1, r0
 800091e:	4688      	mov	r8, r1
 8000920:	0209      	lsls	r1, r1, #8
 8000922:	d500      	bpl.n	8000926 <__aeabi_dadd+0x39e>
 8000924:	e0a6      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000926:	4641      	mov	r1, r8
 8000928:	4329      	orrs	r1, r5
 800092a:	d000      	beq.n	800092e <__aeabi_dadd+0x3a6>
 800092c:	e67f      	b.n	800062e <__aeabi_dadd+0xa6>
 800092e:	2300      	movs	r3, #0
 8000930:	2400      	movs	r4, #0
 8000932:	e751      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000934:	4cc7      	ldr	r4, [pc, #796]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000936:	42a1      	cmp	r1, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x3b4>
 800093a:	e0c7      	b.n	8000acc <__aeabi_dadd+0x544>
 800093c:	2480      	movs	r4, #128	; 0x80
 800093e:	0424      	lsls	r4, r4, #16
 8000940:	4323      	orrs	r3, r4
 8000942:	2a38      	cmp	r2, #56	; 0x38
 8000944:	dc54      	bgt.n	80009f0 <__aeabi_dadd+0x468>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x3c4>
 800094a:	e0cc      	b.n	8000ae6 <__aeabi_dadd+0x55e>
 800094c:	2420      	movs	r4, #32
 800094e:	4648      	mov	r0, r9
 8000950:	1aa4      	subs	r4, r4, r2
 8000952:	001d      	movs	r5, r3
 8000954:	464e      	mov	r6, r9
 8000956:	40a0      	lsls	r0, r4
 8000958:	40d6      	lsrs	r6, r2
 800095a:	40a5      	lsls	r5, r4
 800095c:	0004      	movs	r4, r0
 800095e:	40d3      	lsrs	r3, r2
 8000960:	4662      	mov	r2, ip
 8000962:	4335      	orrs	r5, r6
 8000964:	1e66      	subs	r6, r4, #1
 8000966:	41b4      	sbcs	r4, r6
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	469c      	mov	ip, r3
 800096c:	4325      	orrs	r5, r4
 800096e:	e044      	b.n	80009fa <__aeabi_dadd+0x472>
 8000970:	4662      	mov	r2, ip
 8000972:	433a      	orrs	r2, r7
 8000974:	0015      	movs	r5, r2
 8000976:	1e6f      	subs	r7, r5, #1
 8000978:	41bd      	sbcs	r5, r7
 800097a:	444d      	add	r5, r9
 800097c:	454d      	cmp	r5, r9
 800097e:	4189      	sbcs	r1, r1
 8000980:	4249      	negs	r1, r1
 8000982:	4688      	mov	r8, r1
 8000984:	4498      	add	r8, r3
 8000986:	4643      	mov	r3, r8
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x406>
 800098c:	e718      	b.n	80007c0 <__aeabi_dadd+0x238>
 800098e:	4bb1      	ldr	r3, [pc, #708]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000990:	3601      	adds	r6, #1
 8000992:	429e      	cmp	r6, r3
 8000994:	d049      	beq.n	8000a2a <__aeabi_dadd+0x4a2>
 8000996:	4642      	mov	r2, r8
 8000998:	4baf      	ldr	r3, [pc, #700]	; (8000c58 <__aeabi_dadd+0x6d0>)
 800099a:	2101      	movs	r1, #1
 800099c:	401a      	ands	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	086a      	lsrs	r2, r5, #1
 80009a2:	400d      	ands	r5, r1
 80009a4:	4315      	orrs	r5, r2
 80009a6:	07d9      	lsls	r1, r3, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	4698      	mov	r8, r3
 80009ac:	430d      	orrs	r5, r1
 80009ae:	e665      	b.n	800067c <__aeabi_dadd+0xf4>
 80009b0:	0018      	movs	r0, r3
 80009b2:	3e1f      	subs	r6, #31
 80009b4:	40f0      	lsrs	r0, r6
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x43a>
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	4093      	lsls	r3, r2
 80009c0:	431d      	orrs	r5, r3
 80009c2:	1e69      	subs	r1, r5, #1
 80009c4:	418d      	sbcs	r5, r1
 80009c6:	2300      	movs	r3, #0
 80009c8:	2600      	movs	r6, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	4305      	orrs	r5, r0
 80009ce:	e6f7      	b.n	80007c0 <__aeabi_dadd+0x238>
 80009d0:	0011      	movs	r1, r2
 80009d2:	4665      	mov	r5, ip
 80009d4:	3920      	subs	r1, #32
 80009d6:	40cd      	lsrs	r5, r1
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d004      	beq.n	80009e6 <__aeabi_dadd+0x45e>
 80009dc:	2040      	movs	r0, #64	; 0x40
 80009de:	4661      	mov	r1, ip
 80009e0:	1a82      	subs	r2, r0, r2
 80009e2:	4091      	lsls	r1, r2
 80009e4:	430f      	orrs	r7, r1
 80009e6:	0039      	movs	r1, r7
 80009e8:	1e4f      	subs	r7, r1, #1
 80009ea:	41b9      	sbcs	r1, r7
 80009ec:	4329      	orrs	r1, r5
 80009ee:	e60f      	b.n	8000610 <__aeabi_dadd+0x88>
 80009f0:	464a      	mov	r2, r9
 80009f2:	4313      	orrs	r3, r2
 80009f4:	001d      	movs	r5, r3
 80009f6:	1e6b      	subs	r3, r5, #1
 80009f8:	419d      	sbcs	r5, r3
 80009fa:	1b7d      	subs	r5, r7, r5
 80009fc:	42af      	cmp	r7, r5
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	4662      	mov	r2, ip
 8000a02:	425b      	negs	r3, r3
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4698      	mov	r8, r3
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	e607      	b.n	800061e <__aeabi_dadd+0x96>
 8000a0e:	4648      	mov	r0, r9
 8000a10:	4318      	orrs	r0, r3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x48e>
 8000a14:	e0b3      	b.n	8000b7e <__aeabi_dadd+0x5f6>
 8000a16:	1e50      	subs	r0, r2, #1
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x496>
 8000a1c:	e10d      	b.n	8000c3a <__aeabi_dadd+0x6b2>
 8000a1e:	4d8d      	ldr	r5, [pc, #564]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a20:	42aa      	cmp	r2, r5
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x49e>
 8000a24:	e0a5      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000a26:	0002      	movs	r2, r0
 8000a28:	e710      	b.n	800084c <__aeabi_dadd+0x2c4>
 8000a2a:	0032      	movs	r2, r6
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e644      	b.n	80006bc <__aeabi_dadd+0x134>
 8000a32:	2120      	movs	r1, #32
 8000a34:	0038      	movs	r0, r7
 8000a36:	1a89      	subs	r1, r1, r2
 8000a38:	4665      	mov	r5, ip
 8000a3a:	408f      	lsls	r7, r1
 8000a3c:	408d      	lsls	r5, r1
 8000a3e:	40d0      	lsrs	r0, r2
 8000a40:	1e79      	subs	r1, r7, #1
 8000a42:	418f      	sbcs	r7, r1
 8000a44:	4305      	orrs	r5, r0
 8000a46:	433d      	orrs	r5, r7
 8000a48:	4667      	mov	r7, ip
 8000a4a:	40d7      	lsrs	r7, r2
 8000a4c:	19db      	adds	r3, r3, r7
 8000a4e:	e794      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000a50:	4a80      	ldr	r2, [pc, #512]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a52:	4290      	cmp	r0, r2
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x4d0>
 8000a56:	e0ec      	b.n	8000c32 <__aeabi_dadd+0x6aa>
 8000a58:	0039      	movs	r1, r7
 8000a5a:	4449      	add	r1, r9
 8000a5c:	4549      	cmp	r1, r9
 8000a5e:	4192      	sbcs	r2, r2
 8000a60:	4463      	add	r3, ip
 8000a62:	4252      	negs	r2, r2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	07dd      	lsls	r5, r3, #31
 8000a68:	0849      	lsrs	r1, r1, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	0006      	movs	r6, r0
 8000a70:	430d      	orrs	r5, r1
 8000a72:	e6a5      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000a74:	464a      	mov	r2, r9
 8000a76:	1abd      	subs	r5, r7, r2
 8000a78:	42af      	cmp	r7, r5
 8000a7a:	4189      	sbcs	r1, r1
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	4249      	negs	r1, r1
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	1a5b      	subs	r3, r3, r1
 8000a84:	4698      	mov	r8, r3
 8000a86:	4654      	mov	r4, sl
 8000a88:	e5d1      	b.n	800062e <__aeabi_dadd+0xa6>
 8000a8a:	076c      	lsls	r4, r5, #29
 8000a8c:	08f9      	lsrs	r1, r7, #3
 8000a8e:	4321      	orrs	r1, r4
 8000a90:	08eb      	lsrs	r3, r5, #3
 8000a92:	0004      	movs	r4, r0
 8000a94:	e69d      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	d175      	bne.n	8000b88 <__aeabi_dadd+0x600>
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	d114      	bne.n	8000acc <__aeabi_dadd+0x544>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	031b      	lsls	r3, r3, #12
 8000aa8:	e6bc      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	1bd5      	subs	r5, r2, r7
 8000aae:	45a9      	cmp	r9, r5
 8000ab0:	4189      	sbcs	r1, r1
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	4249      	negs	r1, r1
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	4698      	mov	r8, r3
 8000abc:	2601      	movs	r6, #1
 8000abe:	e5ae      	b.n	800061e <__aeabi_dadd+0x96>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08d1      	lsrs	r1, r2, #3
 8000ac4:	075a      	lsls	r2, r3, #29
 8000ac6:	4311      	orrs	r1, r2
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	e6a7      	b.n	800081c <__aeabi_dadd+0x294>
 8000acc:	4663      	mov	r3, ip
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	075a      	lsls	r2, r3, #29
 8000ad2:	4654      	mov	r4, sl
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	e6a0      	b.n	800081c <__aeabi_dadd+0x294>
 8000ada:	464a      	mov	r2, r9
 8000adc:	4313      	orrs	r3, r2
 8000ade:	001d      	movs	r5, r3
 8000ae0:	1e6b      	subs	r3, r5, #1
 8000ae2:	419d      	sbcs	r5, r3
 8000ae4:	e6c7      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000ae6:	0014      	movs	r4, r2
 8000ae8:	001e      	movs	r6, r3
 8000aea:	3c20      	subs	r4, #32
 8000aec:	40e6      	lsrs	r6, r4
 8000aee:	2a20      	cmp	r2, #32
 8000af0:	d005      	beq.n	8000afe <__aeabi_dadd+0x576>
 8000af2:	2440      	movs	r4, #64	; 0x40
 8000af4:	1aa2      	subs	r2, r4, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	464a      	mov	r2, r9
 8000afa:	431a      	orrs	r2, r3
 8000afc:	4691      	mov	r9, r2
 8000afe:	464d      	mov	r5, r9
 8000b00:	1e6b      	subs	r3, r5, #1
 8000b02:	419d      	sbcs	r5, r3
 8000b04:	4335      	orrs	r5, r6
 8000b06:	e778      	b.n	80009fa <__aeabi_dadd+0x472>
 8000b08:	464a      	mov	r2, r9
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dadd+0x588>
 8000b0e:	e66b      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b10:	076b      	lsls	r3, r5, #29
 8000b12:	08f9      	lsrs	r1, r7, #3
 8000b14:	4319      	orrs	r1, r3
 8000b16:	08eb      	lsrs	r3, r5, #3
 8000b18:	e680      	b.n	800081c <__aeabi_dadd+0x294>
 8000b1a:	4661      	mov	r1, ip
 8000b1c:	4339      	orrs	r1, r7
 8000b1e:	d054      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000b20:	4663      	mov	r3, ip
 8000b22:	08f9      	lsrs	r1, r7, #3
 8000b24:	075c      	lsls	r4, r3, #29
 8000b26:	4321      	orrs	r1, r4
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	0004      	movs	r4, r0
 8000b2c:	e654      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	1abd      	subs	r5, r7, r2
 8000b32:	42af      	cmp	r7, r5
 8000b34:	4189      	sbcs	r1, r1
 8000b36:	4662      	mov	r2, ip
 8000b38:	4249      	negs	r1, r1
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	4698      	mov	r8, r3
 8000b40:	0004      	movs	r4, r0
 8000b42:	2601      	movs	r6, #1
 8000b44:	e56b      	b.n	800061e <__aeabi_dadd+0x96>
 8000b46:	464a      	mov	r2, r9
 8000b48:	1bd5      	subs	r5, r2, r7
 8000b4a:	45a9      	cmp	r9, r5
 8000b4c:	4189      	sbcs	r1, r1
 8000b4e:	4662      	mov	r2, ip
 8000b50:	4249      	negs	r1, r1
 8000b52:	1a9a      	subs	r2, r3, r2
 8000b54:	1a52      	subs	r2, r2, r1
 8000b56:	4690      	mov	r8, r2
 8000b58:	0212      	lsls	r2, r2, #8
 8000b5a:	d532      	bpl.n	8000bc2 <__aeabi_dadd+0x63a>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	1abd      	subs	r5, r7, r2
 8000b60:	42af      	cmp	r7, r5
 8000b62:	4189      	sbcs	r1, r1
 8000b64:	4662      	mov	r2, ip
 8000b66:	4249      	negs	r1, r1
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	1a5b      	subs	r3, r3, r1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0004      	movs	r4, r0
 8000b70:	e584      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	08f9      	lsrs	r1, r7, #3
 8000b76:	075a      	lsls	r2, r3, #29
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	e64e      	b.n	800081c <__aeabi_dadd+0x294>
 8000b7e:	08f9      	lsrs	r1, r7, #3
 8000b80:	0768      	lsls	r0, r5, #29
 8000b82:	4301      	orrs	r1, r0
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	e624      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b88:	4662      	mov	r2, ip
 8000b8a:	433a      	orrs	r2, r7
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x608>
 8000b8e:	e698      	b.n	80008c2 <__aeabi_dadd+0x33a>
 8000b90:	464a      	mov	r2, r9
 8000b92:	08d1      	lsrs	r1, r2, #3
 8000b94:	075a      	lsls	r2, r3, #29
 8000b96:	4311      	orrs	r1, r2
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	031b      	lsls	r3, r3, #12
 8000b9e:	421a      	tst	r2, r3
 8000ba0:	d008      	beq.n	8000bb4 <__aeabi_dadd+0x62c>
 8000ba2:	4660      	mov	r0, ip
 8000ba4:	08c5      	lsrs	r5, r0, #3
 8000ba6:	421d      	tst	r5, r3
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_dadd+0x62c>
 8000baa:	4654      	mov	r4, sl
 8000bac:	002a      	movs	r2, r5
 8000bae:	08f9      	lsrs	r1, r7, #3
 8000bb0:	0743      	lsls	r3, r0, #29
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	0f4b      	lsrs	r3, r1, #29
 8000bb6:	00c9      	lsls	r1, r1, #3
 8000bb8:	075b      	lsls	r3, r3, #29
 8000bba:	08c9      	lsrs	r1, r1, #3
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	e62c      	b.n	800081c <__aeabi_dadd+0x294>
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	4329      	orrs	r1, r5
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000bc8:	e5fa      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	000a      	movs	r2, r1
 8000bce:	2400      	movs	r4, #0
 8000bd0:	e602      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	08f9      	lsrs	r1, r7, #3
 8000bd6:	4319      	orrs	r1, r3
 8000bd8:	08eb      	lsrs	r3, r5, #3
 8000bda:	e5fd      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	08f9      	lsrs	r1, r7, #3
 8000be0:	075b      	lsls	r3, r3, #29
 8000be2:	4319      	orrs	r1, r3
 8000be4:	4663      	mov	r3, ip
 8000be6:	0004      	movs	r4, r0
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	e617      	b.n	800081c <__aeabi_dadd+0x294>
 8000bec:	003d      	movs	r5, r7
 8000bee:	444d      	add	r5, r9
 8000bf0:	4463      	add	r3, ip
 8000bf2:	454d      	cmp	r5, r9
 8000bf4:	4189      	sbcs	r1, r1
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	4488      	add	r8, r1
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x67c>
 8000c02:	e5dd      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c04:	4642      	mov	r2, r8
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <__aeabi_dadd+0x6d0>)
 8000c08:	2601      	movs	r6, #1
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	e5d7      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c10:	0010      	movs	r0, r2
 8000c12:	001e      	movs	r6, r3
 8000c14:	3820      	subs	r0, #32
 8000c16:	40c6      	lsrs	r6, r0
 8000c18:	2a20      	cmp	r2, #32
 8000c1a:	d005      	beq.n	8000c28 <__aeabi_dadd+0x6a0>
 8000c1c:	2040      	movs	r0, #64	; 0x40
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	464a      	mov	r2, r9
 8000c24:	431a      	orrs	r2, r3
 8000c26:	4691      	mov	r9, r2
 8000c28:	464d      	mov	r5, r9
 8000c2a:	1e6b      	subs	r3, r5, #1
 8000c2c:	419d      	sbcs	r5, r3
 8000c2e:	4335      	orrs	r5, r6
 8000c30:	e621      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000c32:	0002      	movs	r2, r0
 8000c34:	2300      	movs	r3, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	e540      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	19d5      	adds	r5, r2, r7
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4463      	add	r3, ip
 8000c44:	4698      	mov	r8, r3
 8000c46:	4249      	negs	r1, r1
 8000c48:	4488      	add	r8, r1
 8000c4a:	e5b3      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4a01      	ldr	r2, [pc, #4]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000c50:	000b      	movs	r3, r1
 8000c52:	e533      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c54:	000007ff 	.word	0x000007ff
 8000c58:	ff7fffff 	.word	0xff7fffff

08000c5c <__aeabi_ddiv>:
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	4657      	mov	r7, sl
 8000c60:	464e      	mov	r6, r9
 8000c62:	4645      	mov	r5, r8
 8000c64:	46de      	mov	lr, fp
 8000c66:	b5e0      	push	{r5, r6, r7, lr}
 8000c68:	4681      	mov	r9, r0
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	030c      	lsls	r4, r1, #12
 8000c6e:	0048      	lsls	r0, r1, #1
 8000c70:	4692      	mov	sl, r2
 8000c72:	001f      	movs	r7, r3
 8000c74:	b085      	sub	sp, #20
 8000c76:	0b24      	lsrs	r4, r4, #12
 8000c78:	0d40      	lsrs	r0, r0, #21
 8000c7a:	0fce      	lsrs	r6, r1, #31
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d059      	beq.n	8000d34 <__aeabi_ddiv+0xd8>
 8000c80:	4b87      	ldr	r3, [pc, #540]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x2c>
 8000c86:	e098      	b.n	8000dba <__aeabi_ddiv+0x15e>
 8000c88:	0f6b      	lsrs	r3, r5, #29
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	4323      	orrs	r3, r4
 8000c94:	4698      	mov	r8, r3
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000c98:	00ed      	lsls	r5, r5, #3
 8000c9a:	469b      	mov	fp, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	4483      	add	fp, r0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	033c      	lsls	r4, r7, #12
 8000ca6:	007b      	lsls	r3, r7, #1
 8000ca8:	4650      	mov	r0, sl
 8000caa:	0b24      	lsrs	r4, r4, #12
 8000cac:	0d5b      	lsrs	r3, r3, #21
 8000cae:	0fff      	lsrs	r7, r7, #31
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d067      	beq.n	8000d84 <__aeabi_ddiv+0x128>
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d018      	beq.n	8000cec <__aeabi_ddiv+0x90>
 8000cba:	497a      	ldr	r1, [pc, #488]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000cbc:	0f42      	lsrs	r2, r0, #29
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	00e4      	lsls	r4, r4, #3
 8000cc2:	4659      	mov	r1, fp
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	4463      	add	r3, ip
 8000cca:	0412      	lsls	r2, r2, #16
 8000ccc:	1acb      	subs	r3, r1, r3
 8000cce:	4314      	orrs	r4, r2
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	00c2      	lsls	r2, r0, #3
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0033      	movs	r3, r6
 8000cd8:	407b      	eors	r3, r7
 8000cda:	469a      	mov	sl, r3
 8000cdc:	464b      	mov	r3, r9
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x88>
 8000ce2:	e0ef      	b.n	8000ec4 <__aeabi_ddiv+0x268>
 8000ce4:	4970      	ldr	r1, [pc, #448]	; (8000ea8 <__aeabi_ddiv+0x24c>)
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	58cb      	ldr	r3, [r1, r3]
 8000cea:	469f      	mov	pc, r3
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <__aeabi_ddiv+0x250>)
 8000cee:	4652      	mov	r2, sl
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	4322      	orrs	r2, r4
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_ddiv+0xa0>
 8000cfa:	e095      	b.n	8000e28 <__aeabi_ddiv+0x1cc>
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	2302      	movs	r3, #2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	4689      	mov	r9, r1
 8000d04:	2400      	movs	r4, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7e5      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	4652      	mov	r2, sl
 8000d12:	051b      	lsls	r3, r3, #20
 8000d14:	4323      	orrs	r3, r4
 8000d16:	07d2      	lsls	r2, r2, #31
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	b005      	add	sp, #20
 8000d20:	bcf0      	pop	{r4, r5, r6, r7}
 8000d22:	46bb      	mov	fp, r7
 8000d24:	46b2      	mov	sl, r6
 8000d26:	46a9      	mov	r9, r5
 8000d28:	46a0      	mov	r8, r4
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2400      	movs	r4, #0
 8000d2e:	2500      	movs	r5, #0
 8000d30:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000d32:	e7ed      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000d34:	464b      	mov	r3, r9
 8000d36:	4323      	orrs	r3, r4
 8000d38:	4698      	mov	r8, r3
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0xe2>
 8000d3c:	e089      	b.n	8000e52 <__aeabi_ddiv+0x1f6>
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0xe8>
 8000d42:	e1e0      	b.n	8001106 <__aeabi_ddiv+0x4aa>
 8000d44:	0020      	movs	r0, r4
 8000d46:	f001 fb07 	bl	8002358 <__clzsi2>
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	390b      	subs	r1, #11
 8000d50:	231d      	movs	r3, #29
 8000d52:	1a5b      	subs	r3, r3, r1
 8000d54:	4649      	mov	r1, r9
 8000d56:	0010      	movs	r0, r2
 8000d58:	40d9      	lsrs	r1, r3
 8000d5a:	3808      	subs	r0, #8
 8000d5c:	4084      	lsls	r4, r0
 8000d5e:	000b      	movs	r3, r1
 8000d60:	464d      	mov	r5, r9
 8000d62:	4323      	orrs	r3, r4
 8000d64:	4698      	mov	r8, r3
 8000d66:	4085      	lsls	r5, r0
 8000d68:	4851      	ldr	r0, [pc, #324]	; (8000eb0 <__aeabi_ddiv+0x254>)
 8000d6a:	033c      	lsls	r4, r7, #12
 8000d6c:	1a83      	subs	r3, r0, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	4699      	mov	r9, r3
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	4650      	mov	r0, sl
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	0d5b      	lsrs	r3, r3, #21
 8000d7e:	0fff      	lsrs	r7, r7, #31
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d197      	bne.n	8000cb4 <__aeabi_ddiv+0x58>
 8000d84:	4652      	mov	r2, sl
 8000d86:	4322      	orrs	r2, r4
 8000d88:	d055      	beq.n	8000e36 <__aeabi_ddiv+0x1da>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x134>
 8000d8e:	e1ca      	b.n	8001126 <__aeabi_ddiv+0x4ca>
 8000d90:	0020      	movs	r0, r4
 8000d92:	f001 fae1 	bl	8002358 <__clzsi2>
 8000d96:	0002      	movs	r2, r0
 8000d98:	3a0b      	subs	r2, #11
 8000d9a:	231d      	movs	r3, #29
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	4652      	mov	r2, sl
 8000da2:	3908      	subs	r1, #8
 8000da4:	40da      	lsrs	r2, r3
 8000da6:	408c      	lsls	r4, r1
 8000da8:	4314      	orrs	r4, r2
 8000daa:	4652      	mov	r2, sl
 8000dac:	408a      	lsls	r2, r1
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <__aeabi_ddiv+0x258>)
 8000db0:	4458      	add	r0, fp
 8000db2:	469b      	mov	fp, r3
 8000db4:	4483      	add	fp, r0
 8000db6:	2000      	movs	r0, #0
 8000db8:	e78d      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	d140      	bne.n	8000e44 <__aeabi_ddiv+0x1e8>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	3b06      	subs	r3, #6
 8000dc8:	2500      	movs	r5, #0
 8000dca:	4683      	mov	fp, r0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	e769      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0a9      	beq.n	8000d2c <__aeabi_ddiv+0xd0>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x182>
 8000ddc:	e211      	b.n	8001202 <__aeabi_ddiv+0x5a6>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d093      	beq.n	8000d0a <__aeabi_ddiv+0xae>
 8000de2:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <__aeabi_ddiv+0x25c>)
 8000de4:	445a      	add	r2, fp
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_ddiv+0x190>
 8000dea:	e13c      	b.n	8001066 <__aeabi_ddiv+0x40a>
 8000dec:	076b      	lsls	r3, r5, #29
 8000dee:	d000      	beq.n	8000df2 <__aeabi_ddiv+0x196>
 8000df0:	e1a7      	b.n	8001142 <__aeabi_ddiv+0x4e6>
 8000df2:	08ed      	lsrs	r5, r5, #3
 8000df4:	4643      	mov	r3, r8
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	d506      	bpl.n	8000e08 <__aeabi_ddiv+0x1ac>
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <__aeabi_ddiv+0x260>)
 8000dfe:	401a      	ands	r2, r3
 8000e00:	4690      	mov	r8, r2
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	445a      	add	r2, fp
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <__aeabi_ddiv+0x264>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc8e      	bgt.n	8000d2c <__aeabi_ddiv+0xd0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0758      	lsls	r0, r3, #29
 8000e14:	025c      	lsls	r4, r3, #9
 8000e16:	4305      	orrs	r5, r0
 8000e18:	0b24      	lsrs	r4, r4, #12
 8000e1a:	0d53      	lsrs	r3, r2, #21
 8000e1c:	e778      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e1e:	46ba      	mov	sl, r7
 8000e20:	46a0      	mov	r8, r4
 8000e22:	0015      	movs	r5, r2
 8000e24:	9000      	str	r0, [sp, #0]
 8000e26:	e7d4      	b.n	8000dd2 <__aeabi_ddiv+0x176>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4691      	mov	r9, r2
 8000e30:	2003      	movs	r0, #3
 8000e32:	4652      	mov	r2, sl
 8000e34:	e74f      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e36:	4649      	mov	r1, r9
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4319      	orrs	r1, r3
 8000e3c:	4689      	mov	r9, r1
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	e748      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e44:	230c      	movs	r3, #12
 8000e46:	4699      	mov	r9, r3
 8000e48:	3b09      	subs	r3, #9
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	4683      	mov	fp, r0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	e728      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e52:	2304      	movs	r3, #4
 8000e54:	4699      	mov	r9, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	469b      	mov	fp, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	e720      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e62:	2300      	movs	r3, #0
 8000e64:	2480      	movs	r4, #128	; 0x80
 8000e66:	469a      	mov	sl, r3
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e6c:	0324      	lsls	r4, r4, #12
 8000e6e:	e74f      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	4641      	mov	r1, r8
 8000e74:	031b      	lsls	r3, r3, #12
 8000e76:	4219      	tst	r1, r3
 8000e78:	d008      	beq.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7a:	421c      	tst	r4, r3
 8000e7c:	d106      	bne.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	46ba      	mov	sl, r7
 8000e84:	0015      	movs	r5, r2
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e88:	0b24      	lsrs	r4, r4, #12
 8000e8a:	e741      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e8c:	2480      	movs	r4, #128	; 0x80
 8000e8e:	4643      	mov	r3, r8
 8000e90:	0324      	lsls	r4, r4, #12
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46b2      	mov	sl, r6
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	e738      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	000007ff 	.word	0x000007ff
 8000ea4:	fffffc01 	.word	0xfffffc01
 8000ea8:	0800c938 	.word	0x0800c938
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	fffffc0d 	.word	0xfffffc0d
 8000eb4:	000003f3 	.word	0x000003f3
 8000eb8:	000003ff 	.word	0x000003ff
 8000ebc:	feffffff 	.word	0xfeffffff
 8000ec0:	000007fe 	.word	0x000007fe
 8000ec4:	4544      	cmp	r4, r8
 8000ec6:	d200      	bcs.n	8000eca <__aeabi_ddiv+0x26e>
 8000ec8:	e116      	b.n	80010f8 <__aeabi_ddiv+0x49c>
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0x272>
 8000ecc:	e111      	b.n	80010f2 <__aeabi_ddiv+0x496>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	002e      	movs	r6, r5
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	2500      	movs	r5, #0
 8000eda:	44e3      	add	fp, ip
 8000edc:	0223      	lsls	r3, r4, #8
 8000ede:	0e14      	lsrs	r4, r2, #24
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	0423      	lsls	r3, r4, #16
 8000ee8:	0c1f      	lsrs	r7, r3, #16
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	4649      	mov	r1, r9
 8000eee:	9200      	str	r2, [sp, #0]
 8000ef0:	9701      	str	r7, [sp, #4]
 8000ef2:	f7ff f9ab 	bl	800024c <__aeabi_uidivmod>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	437a      	muls	r2, r7
 8000efa:	040b      	lsls	r3, r1, #16
 8000efc:	0c31      	lsrs	r1, r6, #16
 8000efe:	4680      	mov	r8, r0
 8000f00:	4319      	orrs	r1, r3
 8000f02:	428a      	cmp	r2, r1
 8000f04:	d90b      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	44e0      	add	r8, ip
 8000f10:	428c      	cmp	r4, r1
 8000f12:	d804      	bhi.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	d902      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f18:	1e83      	subs	r3, r0, #2
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	1a88      	subs	r0, r1, r2
 8000f20:	4649      	mov	r1, r9
 8000f22:	f7ff f993 	bl	800024c <__aeabi_uidivmod>
 8000f26:	0409      	lsls	r1, r1, #16
 8000f28:	468c      	mov	ip, r1
 8000f2a:	0431      	lsls	r1, r6, #16
 8000f2c:	4666      	mov	r6, ip
 8000f2e:	9a01      	ldr	r2, [sp, #4]
 8000f30:	0c09      	lsrs	r1, r1, #16
 8000f32:	4342      	muls	r2, r0
 8000f34:	0003      	movs	r3, r0
 8000f36:	4331      	orrs	r1, r6
 8000f38:	428a      	cmp	r2, r1
 8000f3a:	d904      	bls.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f3c:	1909      	adds	r1, r1, r4
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	428c      	cmp	r4, r1
 8000f42:	d800      	bhi.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f44:	e111      	b.n	800116a <__aeabi_ddiv+0x50e>
 8000f46:	1a89      	subs	r1, r1, r2
 8000f48:	4642      	mov	r2, r8
 8000f4a:	9e00      	ldr	r6, [sp, #0]
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	0c33      	lsrs	r3, r6, #16
 8000f52:	001f      	movs	r7, r3
 8000f54:	0c10      	lsrs	r0, r2, #16
 8000f56:	4690      	mov	r8, r2
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	0413      	lsls	r3, r2, #16
 8000f5c:	0432      	lsls	r2, r6, #16
 8000f5e:	0c16      	lsrs	r6, r2, #16
 8000f60:	0032      	movs	r2, r6
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	435a      	muls	r2, r3
 8000f66:	9603      	str	r6, [sp, #12]
 8000f68:	437b      	muls	r3, r7
 8000f6a:	4346      	muls	r6, r0
 8000f6c:	4378      	muls	r0, r7
 8000f6e:	0c17      	lsrs	r7, r2, #16
 8000f70:	46bc      	mov	ip, r7
 8000f72:	199b      	adds	r3, r3, r6
 8000f74:	4463      	add	r3, ip
 8000f76:	429e      	cmp	r6, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_ddiv+0x326>
 8000f7a:	2680      	movs	r6, #128	; 0x80
 8000f7c:	0276      	lsls	r6, r6, #9
 8000f7e:	46b4      	mov	ip, r6
 8000f80:	4460      	add	r0, ip
 8000f82:	0c1e      	lsrs	r6, r3, #16
 8000f84:	1830      	adds	r0, r6, r0
 8000f86:	0416      	lsls	r6, r2, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	0c36      	lsrs	r6, r6, #16
 8000f8c:	199e      	adds	r6, r3, r6
 8000f8e:	4281      	cmp	r1, r0
 8000f90:	d200      	bcs.n	8000f94 <__aeabi_ddiv+0x338>
 8000f92:	e09c      	b.n	80010ce <__aeabi_ddiv+0x472>
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x33c>
 8000f96:	e097      	b.n	80010c8 <__aeabi_ddiv+0x46c>
 8000f98:	1bae      	subs	r6, r5, r6
 8000f9a:	1a09      	subs	r1, r1, r0
 8000f9c:	42b5      	cmp	r5, r6
 8000f9e:	4180      	sbcs	r0, r0
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	1a08      	subs	r0, r1, r0
 8000fa4:	4284      	cmp	r4, r0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x34e>
 8000fa8:	e111      	b.n	80011ce <__aeabi_ddiv+0x572>
 8000faa:	4649      	mov	r1, r9
 8000fac:	f7ff f94e 	bl	800024c <__aeabi_uidivmod>
 8000fb0:	9a01      	ldr	r2, [sp, #4]
 8000fb2:	040b      	lsls	r3, r1, #16
 8000fb4:	4342      	muls	r2, r0
 8000fb6:	0c31      	lsrs	r1, r6, #16
 8000fb8:	0005      	movs	r5, r0
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d907      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc0:	1909      	adds	r1, r1, r4
 8000fc2:	3d01      	subs	r5, #1
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d803      	bhi.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d901      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fcc:	1e85      	subs	r5, r0, #2
 8000fce:	1909      	adds	r1, r1, r4
 8000fd0:	1a88      	subs	r0, r1, r2
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	f7ff f93a 	bl	800024c <__aeabi_uidivmod>
 8000fd8:	0409      	lsls	r1, r1, #16
 8000fda:	468c      	mov	ip, r1
 8000fdc:	0431      	lsls	r1, r6, #16
 8000fde:	4666      	mov	r6, ip
 8000fe0:	9a01      	ldr	r2, [sp, #4]
 8000fe2:	0c09      	lsrs	r1, r1, #16
 8000fe4:	4342      	muls	r2, r0
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	4331      	orrs	r1, r6
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d907      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000fee:	1909      	adds	r1, r1, r4
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d803      	bhi.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d901      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ffa:	1e83      	subs	r3, r0, #2
 8000ffc:	1909      	adds	r1, r1, r4
 8000ffe:	9e03      	ldr	r6, [sp, #12]
 8001000:	1a89      	subs	r1, r1, r2
 8001002:	0032      	movs	r2, r6
 8001004:	042d      	lsls	r5, r5, #16
 8001006:	431d      	orrs	r5, r3
 8001008:	9f02      	ldr	r7, [sp, #8]
 800100a:	042b      	lsls	r3, r5, #16
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	435a      	muls	r2, r3
 8001010:	437b      	muls	r3, r7
 8001012:	469c      	mov	ip, r3
 8001014:	0c28      	lsrs	r0, r5, #16
 8001016:	4346      	muls	r6, r0
 8001018:	0c13      	lsrs	r3, r2, #16
 800101a:	44b4      	add	ip, r6
 800101c:	4463      	add	r3, ip
 800101e:	4378      	muls	r0, r7
 8001020:	429e      	cmp	r6, r3
 8001022:	d903      	bls.n	800102c <__aeabi_ddiv+0x3d0>
 8001024:	2680      	movs	r6, #128	; 0x80
 8001026:	0276      	lsls	r6, r6, #9
 8001028:	46b4      	mov	ip, r6
 800102a:	4460      	add	r0, ip
 800102c:	0c1e      	lsrs	r6, r3, #16
 800102e:	0412      	lsls	r2, r2, #16
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	0c12      	lsrs	r2, r2, #16
 8001034:	1830      	adds	r0, r6, r0
 8001036:	189b      	adds	r3, r3, r2
 8001038:	4281      	cmp	r1, r0
 800103a:	d306      	bcc.n	800104a <__aeabi_ddiv+0x3ee>
 800103c:	d002      	beq.n	8001044 <__aeabi_ddiv+0x3e8>
 800103e:	2301      	movs	r3, #1
 8001040:	431d      	orrs	r5, r3
 8001042:	e6ce      	b.n	8000de2 <__aeabi_ddiv+0x186>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x3ee>
 8001048:	e6cb      	b.n	8000de2 <__aeabi_ddiv+0x186>
 800104a:	1861      	adds	r1, r4, r1
 800104c:	1e6e      	subs	r6, r5, #1
 800104e:	42a1      	cmp	r1, r4
 8001050:	d200      	bcs.n	8001054 <__aeabi_ddiv+0x3f8>
 8001052:	e0a4      	b.n	800119e <__aeabi_ddiv+0x542>
 8001054:	4281      	cmp	r1, r0
 8001056:	d200      	bcs.n	800105a <__aeabi_ddiv+0x3fe>
 8001058:	e0c9      	b.n	80011ee <__aeabi_ddiv+0x592>
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x402>
 800105c:	e0d9      	b.n	8001212 <__aeabi_ddiv+0x5b6>
 800105e:	0035      	movs	r5, r6
 8001060:	e7ed      	b.n	800103e <__aeabi_ddiv+0x3e2>
 8001062:	2501      	movs	r5, #1
 8001064:	426d      	negs	r5, r5
 8001066:	2101      	movs	r1, #1
 8001068:	1a89      	subs	r1, r1, r2
 800106a:	2938      	cmp	r1, #56	; 0x38
 800106c:	dd00      	ble.n	8001070 <__aeabi_ddiv+0x414>
 800106e:	e64c      	b.n	8000d0a <__aeabi_ddiv+0xae>
 8001070:	291f      	cmp	r1, #31
 8001072:	dc00      	bgt.n	8001076 <__aeabi_ddiv+0x41a>
 8001074:	e07f      	b.n	8001176 <__aeabi_ddiv+0x51a>
 8001076:	231f      	movs	r3, #31
 8001078:	425b      	negs	r3, r3
 800107a:	1a9a      	subs	r2, r3, r2
 800107c:	4643      	mov	r3, r8
 800107e:	40d3      	lsrs	r3, r2
 8001080:	2920      	cmp	r1, #32
 8001082:	d004      	beq.n	800108e <__aeabi_ddiv+0x432>
 8001084:	4644      	mov	r4, r8
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <__aeabi_ddiv+0x5c0>)
 8001088:	445a      	add	r2, fp
 800108a:	4094      	lsls	r4, r2
 800108c:	4325      	orrs	r5, r4
 800108e:	1e6a      	subs	r2, r5, #1
 8001090:	4195      	sbcs	r5, r2
 8001092:	2207      	movs	r2, #7
 8001094:	432b      	orrs	r3, r5
 8001096:	0015      	movs	r5, r2
 8001098:	2400      	movs	r4, #0
 800109a:	401d      	ands	r5, r3
 800109c:	421a      	tst	r2, r3
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x446>
 80010a0:	e0a1      	b.n	80011e6 <__aeabi_ddiv+0x58a>
 80010a2:	220f      	movs	r2, #15
 80010a4:	2400      	movs	r4, #0
 80010a6:	401a      	ands	r2, r3
 80010a8:	2a04      	cmp	r2, #4
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x452>
 80010ac:	e098      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010ae:	1d1a      	adds	r2, r3, #4
 80010b0:	429a      	cmp	r2, r3
 80010b2:	419b      	sbcs	r3, r3
 80010b4:	425b      	negs	r3, r3
 80010b6:	18e4      	adds	r4, r4, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	0222      	lsls	r2, r4, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_ddiv+0x464>
 80010be:	e08f      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010c0:	2301      	movs	r3, #1
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	e623      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80010c8:	42b5      	cmp	r5, r6
 80010ca:	d300      	bcc.n	80010ce <__aeabi_ddiv+0x472>
 80010cc:	e764      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	469c      	mov	ip, r3
 80010d6:	4465      	add	r5, ip
 80010d8:	001f      	movs	r7, r3
 80010da:	429d      	cmp	r5, r3
 80010dc:	419b      	sbcs	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	191b      	adds	r3, r3, r4
 80010e2:	18c9      	adds	r1, r1, r3
 80010e4:	428c      	cmp	r4, r1
 80010e6:	d23a      	bcs.n	800115e <__aeabi_ddiv+0x502>
 80010e8:	4288      	cmp	r0, r1
 80010ea:	d863      	bhi.n	80011b4 <__aeabi_ddiv+0x558>
 80010ec:	d060      	beq.n	80011b0 <__aeabi_ddiv+0x554>
 80010ee:	4690      	mov	r8, r2
 80010f0:	e752      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010f2:	42aa      	cmp	r2, r5
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x49c>
 80010f6:	e6ea      	b.n	8000ece <__aeabi_ddiv+0x272>
 80010f8:	4643      	mov	r3, r8
 80010fa:	07de      	lsls	r6, r3, #31
 80010fc:	0858      	lsrs	r0, r3, #1
 80010fe:	086b      	lsrs	r3, r5, #1
 8001100:	431e      	orrs	r6, r3
 8001102:	07ed      	lsls	r5, r5, #31
 8001104:	e6ea      	b.n	8000edc <__aeabi_ddiv+0x280>
 8001106:	4648      	mov	r0, r9
 8001108:	f001 f926 	bl	8002358 <__clzsi2>
 800110c:	0001      	movs	r1, r0
 800110e:	0002      	movs	r2, r0
 8001110:	3115      	adds	r1, #21
 8001112:	3220      	adds	r2, #32
 8001114:	291c      	cmp	r1, #28
 8001116:	dc00      	bgt.n	800111a <__aeabi_ddiv+0x4be>
 8001118:	e61a      	b.n	8000d50 <__aeabi_ddiv+0xf4>
 800111a:	464b      	mov	r3, r9
 800111c:	3808      	subs	r0, #8
 800111e:	4083      	lsls	r3, r0
 8001120:	2500      	movs	r5, #0
 8001122:	4698      	mov	r8, r3
 8001124:	e620      	b.n	8000d68 <__aeabi_ddiv+0x10c>
 8001126:	f001 f917 	bl	8002358 <__clzsi2>
 800112a:	0003      	movs	r3, r0
 800112c:	001a      	movs	r2, r3
 800112e:	3215      	adds	r2, #21
 8001130:	3020      	adds	r0, #32
 8001132:	2a1c      	cmp	r2, #28
 8001134:	dc00      	bgt.n	8001138 <__aeabi_ddiv+0x4dc>
 8001136:	e630      	b.n	8000d9a <__aeabi_ddiv+0x13e>
 8001138:	4654      	mov	r4, sl
 800113a:	3b08      	subs	r3, #8
 800113c:	2200      	movs	r2, #0
 800113e:	409c      	lsls	r4, r3
 8001140:	e635      	b.n	8000dae <__aeabi_ddiv+0x152>
 8001142:	230f      	movs	r3, #15
 8001144:	402b      	ands	r3, r5
 8001146:	2b04      	cmp	r3, #4
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x4f0>
 800114a:	e652      	b.n	8000df2 <__aeabi_ddiv+0x196>
 800114c:	2305      	movs	r3, #5
 800114e:	425b      	negs	r3, r3
 8001150:	42ab      	cmp	r3, r5
 8001152:	419b      	sbcs	r3, r3
 8001154:	3504      	adds	r5, #4
 8001156:	425b      	negs	r3, r3
 8001158:	08ed      	lsrs	r5, r5, #3
 800115a:	4498      	add	r8, r3
 800115c:	e64a      	b.n	8000df4 <__aeabi_ddiv+0x198>
 800115e:	428c      	cmp	r4, r1
 8001160:	d1c5      	bne.n	80010ee <__aeabi_ddiv+0x492>
 8001162:	42af      	cmp	r7, r5
 8001164:	d9c0      	bls.n	80010e8 <__aeabi_ddiv+0x48c>
 8001166:	4690      	mov	r8, r2
 8001168:	e716      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 800116a:	428a      	cmp	r2, r1
 800116c:	d800      	bhi.n	8001170 <__aeabi_ddiv+0x514>
 800116e:	e6ea      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001170:	1e83      	subs	r3, r0, #2
 8001172:	1909      	adds	r1, r1, r4
 8001174:	e6e7      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <__aeabi_ddiv+0x5c4>)
 8001178:	0028      	movs	r0, r5
 800117a:	445a      	add	r2, fp
 800117c:	4643      	mov	r3, r8
 800117e:	4095      	lsls	r5, r2
 8001180:	4093      	lsls	r3, r2
 8001182:	40c8      	lsrs	r0, r1
 8001184:	1e6a      	subs	r2, r5, #1
 8001186:	4195      	sbcs	r5, r2
 8001188:	4644      	mov	r4, r8
 800118a:	4303      	orrs	r3, r0
 800118c:	432b      	orrs	r3, r5
 800118e:	40cc      	lsrs	r4, r1
 8001190:	075a      	lsls	r2, r3, #29
 8001192:	d092      	beq.n	80010ba <__aeabi_ddiv+0x45e>
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	2a04      	cmp	r2, #4
 800119a:	d188      	bne.n	80010ae <__aeabi_ddiv+0x452>
 800119c:	e78d      	b.n	80010ba <__aeabi_ddiv+0x45e>
 800119e:	0035      	movs	r5, r6
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d000      	beq.n	80011a6 <__aeabi_ddiv+0x54a>
 80011a4:	e74b      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011a6:	9a00      	ldr	r2, [sp, #0]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0x552>
 80011ac:	e747      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011ae:	e618      	b.n	8000de2 <__aeabi_ddiv+0x186>
 80011b0:	42ae      	cmp	r6, r5
 80011b2:	d99c      	bls.n	80010ee <__aeabi_ddiv+0x492>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	44e0      	add	r8, ip
 80011be:	469c      	mov	ip, r3
 80011c0:	4465      	add	r5, ip
 80011c2:	429d      	cmp	r5, r3
 80011c4:	419b      	sbcs	r3, r3
 80011c6:	425b      	negs	r3, r3
 80011c8:	191b      	adds	r3, r3, r4
 80011ca:	18c9      	adds	r1, r1, r3
 80011cc:	e6e4      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <__aeabi_ddiv+0x5c8>)
 80011d0:	445a      	add	r2, fp
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_ddiv+0x57c>
 80011d6:	e744      	b.n	8001062 <__aeabi_ddiv+0x406>
 80011d8:	2301      	movs	r3, #1
 80011da:	2500      	movs	r5, #0
 80011dc:	4498      	add	r8, r3
 80011de:	e609      	b.n	8000df4 <__aeabi_ddiv+0x198>
 80011e0:	0765      	lsls	r5, r4, #29
 80011e2:	0264      	lsls	r4, r4, #9
 80011e4:	0b24      	lsrs	r4, r4, #12
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	431d      	orrs	r5, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	e590      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80011ee:	9e00      	ldr	r6, [sp, #0]
 80011f0:	3d02      	subs	r5, #2
 80011f2:	0072      	lsls	r2, r6, #1
 80011f4:	42b2      	cmp	r2, r6
 80011f6:	41bf      	sbcs	r7, r7
 80011f8:	427f      	negs	r7, r7
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	1909      	adds	r1, r1, r4
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	e7ce      	b.n	80011a0 <__aeabi_ddiv+0x544>
 8001202:	2480      	movs	r4, #128	; 0x80
 8001204:	4643      	mov	r3, r8
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	431c      	orrs	r4, r3
 800120a:	0324      	lsls	r4, r4, #12
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <__aeabi_ddiv+0x5cc>)
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	e57e      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8001212:	9a00      	ldr	r2, [sp, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3ea      	bcc.n	80011ee <__aeabi_ddiv+0x592>
 8001218:	0035      	movs	r5, r6
 800121a:	e7c4      	b.n	80011a6 <__aeabi_ddiv+0x54a>
 800121c:	0000043e 	.word	0x0000043e
 8001220:	0000041e 	.word	0x0000041e
 8001224:	000003ff 	.word	0x000003ff
 8001228:	000007ff 	.word	0x000007ff

0800122c <__eqdf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	464f      	mov	r7, r9
 8001230:	4646      	mov	r6, r8
 8001232:	46d6      	mov	lr, sl
 8001234:	4694      	mov	ip, r2
 8001236:	4691      	mov	r9, r2
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	0b12      	lsrs	r2, r2, #12
 800123c:	4d18      	ldr	r5, [pc, #96]	; (80012a0 <__eqdf2+0x74>)
 800123e:	b5c0      	push	{r6, r7, lr}
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	030f      	lsls	r7, r1, #12
 8001244:	4692      	mov	sl, r2
 8001246:	005a      	lsls	r2, r3, #1
 8001248:	0006      	movs	r6, r0
 800124a:	4680      	mov	r8, r0
 800124c:	0b3f      	lsrs	r7, r7, #12
 800124e:	2001      	movs	r0, #1
 8001250:	0d64      	lsrs	r4, r4, #21
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	0d52      	lsrs	r2, r2, #21
 8001256:	0fdb      	lsrs	r3, r3, #31
 8001258:	42ac      	cmp	r4, r5
 800125a:	d00a      	beq.n	8001272 <__eqdf2+0x46>
 800125c:	42aa      	cmp	r2, r5
 800125e:	d003      	beq.n	8001268 <__eqdf2+0x3c>
 8001260:	4294      	cmp	r4, r2
 8001262:	d101      	bne.n	8001268 <__eqdf2+0x3c>
 8001264:	4557      	cmp	r7, sl
 8001266:	d00d      	beq.n	8001284 <__eqdf2+0x58>
 8001268:	bce0      	pop	{r5, r6, r7}
 800126a:	46ba      	mov	sl, r7
 800126c:	46b1      	mov	r9, r6
 800126e:	46a8      	mov	r8, r5
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001272:	003d      	movs	r5, r7
 8001274:	4335      	orrs	r5, r6
 8001276:	d1f7      	bne.n	8001268 <__eqdf2+0x3c>
 8001278:	42a2      	cmp	r2, r4
 800127a:	d1f5      	bne.n	8001268 <__eqdf2+0x3c>
 800127c:	4652      	mov	r2, sl
 800127e:	4665      	mov	r5, ip
 8001280:	432a      	orrs	r2, r5
 8001282:	d1f1      	bne.n	8001268 <__eqdf2+0x3c>
 8001284:	2001      	movs	r0, #1
 8001286:	45c8      	cmp	r8, r9
 8001288:	d1ee      	bne.n	8001268 <__eqdf2+0x3c>
 800128a:	4299      	cmp	r1, r3
 800128c:	d006      	beq.n	800129c <__eqdf2+0x70>
 800128e:	2c00      	cmp	r4, #0
 8001290:	d1ea      	bne.n	8001268 <__eqdf2+0x3c>
 8001292:	433e      	orrs	r6, r7
 8001294:	0030      	movs	r0, r6
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	e7e5      	b.n	8001268 <__eqdf2+0x3c>
 800129c:	2000      	movs	r0, #0
 800129e:	e7e3      	b.n	8001268 <__eqdf2+0x3c>
 80012a0:	000007ff 	.word	0x000007ff

080012a4 <__gedf2>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	464e      	mov	r6, r9
 80012a8:	4645      	mov	r5, r8
 80012aa:	4657      	mov	r7, sl
 80012ac:	46de      	mov	lr, fp
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	0016      	movs	r6, r2
 80012b6:	031b      	lsls	r3, r3, #12
 80012b8:	0b1b      	lsrs	r3, r3, #12
 80012ba:	4d32      	ldr	r5, [pc, #200]	; (8001384 <__gedf2+0xe0>)
 80012bc:	030f      	lsls	r7, r1, #12
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	0043      	lsls	r3, r0, #1
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d029      	beq.n	800132a <__gedf2+0x86>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d018      	beq.n	800130c <__gedf2+0x68>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d12a      	bne.n	8001334 <__gedf2+0x90>
 80012de:	433c      	orrs	r4, r7
 80012e0:	46a3      	mov	fp, r4
 80012e2:	4265      	negs	r5, r4
 80012e4:	4165      	adcs	r5, r4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <__gedf2+0x4c>
 80012ea:	464c      	mov	r4, r9
 80012ec:	4326      	orrs	r6, r4
 80012ee:	d027      	beq.n	8001340 <__gedf2+0x9c>
 80012f0:	2d00      	cmp	r5, #0
 80012f2:	d115      	bne.n	8001320 <__gedf2+0x7c>
 80012f4:	4281      	cmp	r1, r0
 80012f6:	d028      	beq.n	800134a <__gedf2+0xa6>
 80012f8:	2002      	movs	r0, #2
 80012fa:	3901      	subs	r1, #1
 80012fc:	4008      	ands	r0, r1
 80012fe:	3801      	subs	r0, #1
 8001300:	bcf0      	pop	{r4, r5, r6, r7}
 8001302:	46bb      	mov	fp, r7
 8001304:	46b2      	mov	sl, r6
 8001306:	46a9      	mov	r9, r5
 8001308:	46a0      	mov	r8, r4
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	464d      	mov	r5, r9
 800130e:	432e      	orrs	r6, r5
 8001310:	d12f      	bne.n	8001372 <__gedf2+0xce>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d1ee      	bne.n	80012f4 <__gedf2+0x50>
 8001316:	433c      	orrs	r4, r7
 8001318:	4265      	negs	r5, r4
 800131a:	4165      	adcs	r5, r4
 800131c:	2d00      	cmp	r5, #0
 800131e:	d0e9      	beq.n	80012f4 <__gedf2+0x50>
 8001320:	2800      	cmp	r0, #0
 8001322:	d1ed      	bne.n	8001300 <__gedf2+0x5c>
 8001324:	2001      	movs	r0, #1
 8001326:	4240      	negs	r0, r0
 8001328:	e7ea      	b.n	8001300 <__gedf2+0x5c>
 800132a:	003d      	movs	r5, r7
 800132c:	4325      	orrs	r5, r4
 800132e:	d120      	bne.n	8001372 <__gedf2+0xce>
 8001330:	4293      	cmp	r3, r2
 8001332:	d0eb      	beq.n	800130c <__gedf2+0x68>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1dd      	bne.n	80012f4 <__gedf2+0x50>
 8001338:	464c      	mov	r4, r9
 800133a:	4326      	orrs	r6, r4
 800133c:	d1da      	bne.n	80012f4 <__gedf2+0x50>
 800133e:	e7db      	b.n	80012f8 <__gedf2+0x54>
 8001340:	465b      	mov	r3, fp
 8001342:	2000      	movs	r0, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0db      	beq.n	8001300 <__gedf2+0x5c>
 8001348:	e7d6      	b.n	80012f8 <__gedf2+0x54>
 800134a:	429a      	cmp	r2, r3
 800134c:	dc0a      	bgt.n	8001364 <__gedf2+0xc0>
 800134e:	dbe7      	blt.n	8001320 <__gedf2+0x7c>
 8001350:	454f      	cmp	r7, r9
 8001352:	d8d1      	bhi.n	80012f8 <__gedf2+0x54>
 8001354:	d010      	beq.n	8001378 <__gedf2+0xd4>
 8001356:	2000      	movs	r0, #0
 8001358:	454f      	cmp	r7, r9
 800135a:	d2d1      	bcs.n	8001300 <__gedf2+0x5c>
 800135c:	2900      	cmp	r1, #0
 800135e:	d0e1      	beq.n	8001324 <__gedf2+0x80>
 8001360:	0008      	movs	r0, r1
 8001362:	e7cd      	b.n	8001300 <__gedf2+0x5c>
 8001364:	4243      	negs	r3, r0
 8001366:	4158      	adcs	r0, r3
 8001368:	2302      	movs	r3, #2
 800136a:	4240      	negs	r0, r0
 800136c:	4018      	ands	r0, r3
 800136e:	3801      	subs	r0, #1
 8001370:	e7c6      	b.n	8001300 <__gedf2+0x5c>
 8001372:	2002      	movs	r0, #2
 8001374:	4240      	negs	r0, r0
 8001376:	e7c3      	b.n	8001300 <__gedf2+0x5c>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8bd      	bhi.n	80012f8 <__gedf2+0x54>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2be      	bcs.n	8001300 <__gedf2+0x5c>
 8001382:	e7eb      	b.n	800135c <__gedf2+0xb8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__ledf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	464e      	mov	r6, r9
 800138c:	4645      	mov	r5, r8
 800138e:	4657      	mov	r7, sl
 8001390:	46de      	mov	lr, fp
 8001392:	0004      	movs	r4, r0
 8001394:	0018      	movs	r0, r3
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	0016      	movs	r6, r2
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	0b1b      	lsrs	r3, r3, #12
 800139e:	4d31      	ldr	r5, [pc, #196]	; (8001464 <__ledf2+0xdc>)
 80013a0:	030f      	lsls	r7, r1, #12
 80013a2:	004a      	lsls	r2, r1, #1
 80013a4:	4699      	mov	r9, r3
 80013a6:	0043      	lsls	r3, r0, #1
 80013a8:	46a4      	mov	ip, r4
 80013aa:	46b0      	mov	r8, r6
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d52      	lsrs	r2, r2, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fc0      	lsrs	r0, r0, #31
 80013b6:	42aa      	cmp	r2, r5
 80013b8:	d011      	beq.n	80013de <__ledf2+0x56>
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d014      	beq.n	80013e8 <__ledf2+0x60>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d12f      	bne.n	8001422 <__ledf2+0x9a>
 80013c2:	433c      	orrs	r4, r7
 80013c4:	46a3      	mov	fp, r4
 80013c6:	4265      	negs	r5, r4
 80013c8:	4165      	adcs	r5, r4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d114      	bne.n	80013f8 <__ledf2+0x70>
 80013ce:	464c      	mov	r4, r9
 80013d0:	4326      	orrs	r6, r4
 80013d2:	d111      	bne.n	80013f8 <__ledf2+0x70>
 80013d4:	465b      	mov	r3, fp
 80013d6:	2000      	movs	r0, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <__ledf2+0x84>
 80013dc:	e010      	b.n	8001400 <__ledf2+0x78>
 80013de:	003d      	movs	r5, r7
 80013e0:	4325      	orrs	r5, r4
 80013e2:	d112      	bne.n	800140a <__ledf2+0x82>
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d11c      	bne.n	8001422 <__ledf2+0x9a>
 80013e8:	464d      	mov	r5, r9
 80013ea:	432e      	orrs	r6, r5
 80013ec:	d10d      	bne.n	800140a <__ledf2+0x82>
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d104      	bne.n	80013fc <__ledf2+0x74>
 80013f2:	433c      	orrs	r4, r7
 80013f4:	4265      	negs	r5, r4
 80013f6:	4165      	adcs	r5, r4
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d10d      	bne.n	8001418 <__ledf2+0x90>
 80013fc:	4281      	cmp	r1, r0
 80013fe:	d016      	beq.n	800142e <__ledf2+0xa6>
 8001400:	2002      	movs	r0, #2
 8001402:	3901      	subs	r1, #1
 8001404:	4008      	ands	r0, r1
 8001406:	3801      	subs	r0, #1
 8001408:	e000      	b.n	800140c <__ledf2+0x84>
 800140a:	2002      	movs	r0, #2
 800140c:	bcf0      	pop	{r4, r5, r6, r7}
 800140e:	46bb      	mov	fp, r7
 8001410:	46b2      	mov	sl, r6
 8001412:	46a9      	mov	r9, r5
 8001414:	46a0      	mov	r8, r4
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	2800      	cmp	r0, #0
 800141a:	d1f7      	bne.n	800140c <__ledf2+0x84>
 800141c:	2001      	movs	r0, #1
 800141e:	4240      	negs	r0, r0
 8001420:	e7f4      	b.n	800140c <__ledf2+0x84>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ea      	bne.n	80013fc <__ledf2+0x74>
 8001426:	464c      	mov	r4, r9
 8001428:	4326      	orrs	r6, r4
 800142a:	d1e7      	bne.n	80013fc <__ledf2+0x74>
 800142c:	e7e8      	b.n	8001400 <__ledf2+0x78>
 800142e:	429a      	cmp	r2, r3
 8001430:	dd06      	ble.n	8001440 <__ledf2+0xb8>
 8001432:	4243      	negs	r3, r0
 8001434:	4158      	adcs	r0, r3
 8001436:	2302      	movs	r3, #2
 8001438:	4240      	negs	r0, r0
 800143a:	4018      	ands	r0, r3
 800143c:	3801      	subs	r0, #1
 800143e:	e7e5      	b.n	800140c <__ledf2+0x84>
 8001440:	429a      	cmp	r2, r3
 8001442:	dbe9      	blt.n	8001418 <__ledf2+0x90>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8db      	bhi.n	8001400 <__ledf2+0x78>
 8001448:	d006      	beq.n	8001458 <__ledf2+0xd0>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2dd      	bcs.n	800140c <__ledf2+0x84>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e3      	beq.n	800141c <__ledf2+0x94>
 8001454:	0008      	movs	r0, r1
 8001456:	e7d9      	b.n	800140c <__ledf2+0x84>
 8001458:	45c4      	cmp	ip, r8
 800145a:	d8d1      	bhi.n	8001400 <__ledf2+0x78>
 800145c:	2000      	movs	r0, #0
 800145e:	45c4      	cmp	ip, r8
 8001460:	d2d4      	bcs.n	800140c <__ledf2+0x84>
 8001462:	e7f5      	b.n	8001450 <__ledf2+0xc8>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__aeabi_dmul>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4657      	mov	r7, sl
 800146c:	464e      	mov	r6, r9
 800146e:	4645      	mov	r5, r8
 8001470:	46de      	mov	lr, fp
 8001472:	b5e0      	push	{r5, r6, r7, lr}
 8001474:	4698      	mov	r8, r3
 8001476:	030c      	lsls	r4, r1, #12
 8001478:	004b      	lsls	r3, r1, #1
 800147a:	0006      	movs	r6, r0
 800147c:	4692      	mov	sl, r2
 800147e:	b087      	sub	sp, #28
 8001480:	0b24      	lsrs	r4, r4, #12
 8001482:	0d5b      	lsrs	r3, r3, #21
 8001484:	0fcf      	lsrs	r7, r1, #31
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <__aeabi_dmul+0xfc>
 800148a:	4add      	ldr	r2, [pc, #884]	; (8001800 <__aeabi_dmul+0x398>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x2a>
 8001490:	e086      	b.n	80015a0 <__aeabi_dmul+0x138>
 8001492:	0f42      	lsrs	r2, r0, #29
 8001494:	00e4      	lsls	r4, r4, #3
 8001496:	4314      	orrs	r4, r2
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	4314      	orrs	r4, r2
 800149e:	4ad9      	ldr	r2, [pc, #868]	; (8001804 <__aeabi_dmul+0x39c>)
 80014a0:	00c5      	lsls	r5, r0, #3
 80014a2:	4694      	mov	ip, r2
 80014a4:	4463      	add	r3, ip
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	4699      	mov	r9, r3
 80014ac:	469b      	mov	fp, r3
 80014ae:	4643      	mov	r3, r8
 80014b0:	4642      	mov	r2, r8
 80014b2:	031e      	lsls	r6, r3, #12
 80014b4:	0fd2      	lsrs	r2, r2, #31
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4650      	mov	r0, sl
 80014ba:	4690      	mov	r8, r2
 80014bc:	0b36      	lsrs	r6, r6, #12
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0x5c>
 80014c2:	e078      	b.n	80015b6 <__aeabi_dmul+0x14e>
 80014c4:	4ace      	ldr	r2, [pc, #824]	; (8001800 <__aeabi_dmul+0x398>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <__aeabi_dmul+0x9e>
 80014ca:	49ce      	ldr	r1, [pc, #824]	; (8001804 <__aeabi_dmul+0x39c>)
 80014cc:	0f42      	lsrs	r2, r0, #29
 80014ce:	468c      	mov	ip, r1
 80014d0:	9900      	ldr	r1, [sp, #0]
 80014d2:	4463      	add	r3, ip
 80014d4:	00f6      	lsls	r6, r6, #3
 80014d6:	468c      	mov	ip, r1
 80014d8:	4316      	orrs	r6, r2
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	449c      	add	ip, r3
 80014de:	0412      	lsls	r2, r2, #16
 80014e0:	4663      	mov	r3, ip
 80014e2:	4316      	orrs	r6, r2
 80014e4:	00c2      	lsls	r2, r0, #3
 80014e6:	2000      	movs	r0, #0
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	9900      	ldr	r1, [sp, #0]
 80014ec:	4643      	mov	r3, r8
 80014ee:	3101      	adds	r1, #1
 80014f0:	468c      	mov	ip, r1
 80014f2:	4649      	mov	r1, r9
 80014f4:	407b      	eors	r3, r7
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	290f      	cmp	r1, #15
 80014fa:	d900      	bls.n	80014fe <__aeabi_dmul+0x96>
 80014fc:	e07e      	b.n	80015fc <__aeabi_dmul+0x194>
 80014fe:	4bc2      	ldr	r3, [pc, #776]	; (8001808 <__aeabi_dmul+0x3a0>)
 8001500:	0089      	lsls	r1, r1, #2
 8001502:	5859      	ldr	r1, [r3, r1]
 8001504:	468f      	mov	pc, r1
 8001506:	4652      	mov	r2, sl
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	4332      	orrs	r2, r6
 800150c:	d000      	beq.n	8001510 <__aeabi_dmul+0xa8>
 800150e:	e156      	b.n	80017be <__aeabi_dmul+0x356>
 8001510:	49bb      	ldr	r1, [pc, #748]	; (8001800 <__aeabi_dmul+0x398>)
 8001512:	2600      	movs	r6, #0
 8001514:	468c      	mov	ip, r1
 8001516:	4463      	add	r3, ip
 8001518:	4649      	mov	r1, r9
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	4319      	orrs	r1, r3
 8001520:	4689      	mov	r9, r1
 8001522:	2002      	movs	r0, #2
 8001524:	e7e1      	b.n	80014ea <__aeabi_dmul+0x82>
 8001526:	4643      	mov	r3, r8
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	0034      	movs	r4, r6
 800152c:	0015      	movs	r5, r2
 800152e:	4683      	mov	fp, r0
 8001530:	465b      	mov	r3, fp
 8001532:	2b02      	cmp	r3, #2
 8001534:	d05e      	beq.n	80015f4 <__aeabi_dmul+0x18c>
 8001536:	2b03      	cmp	r3, #3
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0xd4>
 800153a:	e1f3      	b.n	8001924 <__aeabi_dmul+0x4bc>
 800153c:	2b01      	cmp	r3, #1
 800153e:	d000      	beq.n	8001542 <__aeabi_dmul+0xda>
 8001540:	e118      	b.n	8001774 <__aeabi_dmul+0x30c>
 8001542:	2200      	movs	r2, #0
 8001544:	2400      	movs	r4, #0
 8001546:	2500      	movs	r5, #0
 8001548:	9b01      	ldr	r3, [sp, #4]
 800154a:	0512      	lsls	r2, r2, #20
 800154c:	4322      	orrs	r2, r4
 800154e:	07db      	lsls	r3, r3, #31
 8001550:	431a      	orrs	r2, r3
 8001552:	0028      	movs	r0, r5
 8001554:	0011      	movs	r1, r2
 8001556:	b007      	add	sp, #28
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
 800155a:	46bb      	mov	fp, r7
 800155c:	46b2      	mov	sl, r6
 800155e:	46a9      	mov	r9, r5
 8001560:	46a0      	mov	r8, r4
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0025      	movs	r5, r4
 8001566:	4305      	orrs	r5, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x104>
 800156a:	e141      	b.n	80017f0 <__aeabi_dmul+0x388>
 800156c:	2c00      	cmp	r4, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dmul+0x10a>
 8001570:	e1ad      	b.n	80018ce <__aeabi_dmul+0x466>
 8001572:	0020      	movs	r0, r4
 8001574:	f000 fef0 	bl	8002358 <__clzsi2>
 8001578:	0001      	movs	r1, r0
 800157a:	0002      	movs	r2, r0
 800157c:	390b      	subs	r1, #11
 800157e:	231d      	movs	r3, #29
 8001580:	0010      	movs	r0, r2
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	0031      	movs	r1, r6
 8001586:	0035      	movs	r5, r6
 8001588:	3808      	subs	r0, #8
 800158a:	4084      	lsls	r4, r0
 800158c:	40d9      	lsrs	r1, r3
 800158e:	4085      	lsls	r5, r0
 8001590:	430c      	orrs	r4, r1
 8001592:	489e      	ldr	r0, [pc, #632]	; (800180c <__aeabi_dmul+0x3a4>)
 8001594:	1a83      	subs	r3, r0, r2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	4699      	mov	r9, r3
 800159c:	469b      	mov	fp, r3
 800159e:	e786      	b.n	80014ae <__aeabi_dmul+0x46>
 80015a0:	0005      	movs	r5, r0
 80015a2:	4325      	orrs	r5, r4
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0x140>
 80015a6:	e11c      	b.n	80017e2 <__aeabi_dmul+0x37a>
 80015a8:	2208      	movs	r2, #8
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2400      	movs	r4, #0
 80015b0:	4691      	mov	r9, r2
 80015b2:	469b      	mov	fp, r3
 80015b4:	e77b      	b.n	80014ae <__aeabi_dmul+0x46>
 80015b6:	4652      	mov	r2, sl
 80015b8:	4332      	orrs	r2, r6
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x156>
 80015bc:	e10a      	b.n	80017d4 <__aeabi_dmul+0x36c>
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dmul+0x15c>
 80015c2:	e176      	b.n	80018b2 <__aeabi_dmul+0x44a>
 80015c4:	0030      	movs	r0, r6
 80015c6:	f000 fec7 	bl	8002358 <__clzsi2>
 80015ca:	0002      	movs	r2, r0
 80015cc:	3a0b      	subs	r2, #11
 80015ce:	231d      	movs	r3, #29
 80015d0:	0001      	movs	r1, r0
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	4652      	mov	r2, sl
 80015d6:	3908      	subs	r1, #8
 80015d8:	40da      	lsrs	r2, r3
 80015da:	408e      	lsls	r6, r1
 80015dc:	4316      	orrs	r6, r2
 80015de:	4652      	mov	r2, sl
 80015e0:	408a      	lsls	r2, r1
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	4989      	ldr	r1, [pc, #548]	; (800180c <__aeabi_dmul+0x3a4>)
 80015e6:	1a18      	subs	r0, r3, r0
 80015e8:	0003      	movs	r3, r0
 80015ea:	468c      	mov	ip, r1
 80015ec:	4463      	add	r3, ip
 80015ee:	2000      	movs	r0, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	e77a      	b.n	80014ea <__aeabi_dmul+0x82>
 80015f4:	2400      	movs	r4, #0
 80015f6:	2500      	movs	r5, #0
 80015f8:	4a81      	ldr	r2, [pc, #516]	; (8001800 <__aeabi_dmul+0x398>)
 80015fa:	e7a5      	b.n	8001548 <__aeabi_dmul+0xe0>
 80015fc:	0c2f      	lsrs	r7, r5, #16
 80015fe:	042d      	lsls	r5, r5, #16
 8001600:	0c2d      	lsrs	r5, r5, #16
 8001602:	002b      	movs	r3, r5
 8001604:	0c11      	lsrs	r1, r2, #16
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	0c12      	lsrs	r2, r2, #16
 800160a:	4353      	muls	r3, r2
 800160c:	4698      	mov	r8, r3
 800160e:	0013      	movs	r3, r2
 8001610:	0028      	movs	r0, r5
 8001612:	437b      	muls	r3, r7
 8001614:	4699      	mov	r9, r3
 8001616:	4348      	muls	r0, r1
 8001618:	4448      	add	r0, r9
 800161a:	4683      	mov	fp, r0
 800161c:	4640      	mov	r0, r8
 800161e:	000b      	movs	r3, r1
 8001620:	0c00      	lsrs	r0, r0, #16
 8001622:	4682      	mov	sl, r0
 8001624:	4658      	mov	r0, fp
 8001626:	437b      	muls	r3, r7
 8001628:	4450      	add	r0, sl
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	4581      	cmp	r9, r0
 800162e:	d906      	bls.n	800163e <__aeabi_dmul+0x1d6>
 8001630:	469a      	mov	sl, r3
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4699      	mov	r9, r3
 8001638:	44ca      	add	sl, r9
 800163a:	4653      	mov	r3, sl
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	0c03      	lsrs	r3, r0, #16
 8001640:	469b      	mov	fp, r3
 8001642:	4643      	mov	r3, r8
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0400      	lsls	r0, r0, #16
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	4698      	mov	r8, r3
 800164c:	0003      	movs	r3, r0
 800164e:	4443      	add	r3, r8
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	0c33      	lsrs	r3, r6, #16
 8001654:	4699      	mov	r9, r3
 8001656:	002b      	movs	r3, r5
 8001658:	0436      	lsls	r6, r6, #16
 800165a:	0c36      	lsrs	r6, r6, #16
 800165c:	4373      	muls	r3, r6
 800165e:	4698      	mov	r8, r3
 8001660:	0033      	movs	r3, r6
 8001662:	437b      	muls	r3, r7
 8001664:	469a      	mov	sl, r3
 8001666:	464b      	mov	r3, r9
 8001668:	435d      	muls	r5, r3
 800166a:	435f      	muls	r7, r3
 800166c:	4643      	mov	r3, r8
 800166e:	4455      	add	r5, sl
 8001670:	0c18      	lsrs	r0, r3, #16
 8001672:	1940      	adds	r0, r0, r5
 8001674:	4582      	cmp	sl, r0
 8001676:	d903      	bls.n	8001680 <__aeabi_dmul+0x218>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	469a      	mov	sl, r3
 800167e:	4457      	add	r7, sl
 8001680:	0c05      	lsrs	r5, r0, #16
 8001682:	19eb      	adds	r3, r5, r7
 8001684:	9305      	str	r3, [sp, #20]
 8001686:	4643      	mov	r3, r8
 8001688:	041d      	lsls	r5, r3, #16
 800168a:	0c2d      	lsrs	r5, r5, #16
 800168c:	0400      	lsls	r0, r0, #16
 800168e:	1940      	adds	r0, r0, r5
 8001690:	0c25      	lsrs	r5, r4, #16
 8001692:	0424      	lsls	r4, r4, #16
 8001694:	0c24      	lsrs	r4, r4, #16
 8001696:	0027      	movs	r7, r4
 8001698:	4357      	muls	r7, r2
 800169a:	436a      	muls	r2, r5
 800169c:	4690      	mov	r8, r2
 800169e:	002a      	movs	r2, r5
 80016a0:	0c3b      	lsrs	r3, r7, #16
 80016a2:	469a      	mov	sl, r3
 80016a4:	434a      	muls	r2, r1
 80016a6:	4361      	muls	r1, r4
 80016a8:	4441      	add	r1, r8
 80016aa:	4451      	add	r1, sl
 80016ac:	4483      	add	fp, r0
 80016ae:	4588      	cmp	r8, r1
 80016b0:	d903      	bls.n	80016ba <__aeabi_dmul+0x252>
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4698      	mov	r8, r3
 80016b8:	4442      	add	r2, r8
 80016ba:	043f      	lsls	r7, r7, #16
 80016bc:	0c0b      	lsrs	r3, r1, #16
 80016be:	0c3f      	lsrs	r7, r7, #16
 80016c0:	0409      	lsls	r1, r1, #16
 80016c2:	19c9      	adds	r1, r1, r7
 80016c4:	0027      	movs	r7, r4
 80016c6:	4698      	mov	r8, r3
 80016c8:	464b      	mov	r3, r9
 80016ca:	4377      	muls	r7, r6
 80016cc:	435c      	muls	r4, r3
 80016ce:	436e      	muls	r6, r5
 80016d0:	435d      	muls	r5, r3
 80016d2:	0c3b      	lsrs	r3, r7, #16
 80016d4:	4699      	mov	r9, r3
 80016d6:	19a4      	adds	r4, r4, r6
 80016d8:	444c      	add	r4, r9
 80016da:	4442      	add	r2, r8
 80016dc:	9503      	str	r5, [sp, #12]
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d904      	bls.n	80016ec <__aeabi_dmul+0x284>
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4698      	mov	r8, r3
 80016e8:	4445      	add	r5, r8
 80016ea:	9503      	str	r5, [sp, #12]
 80016ec:	9b02      	ldr	r3, [sp, #8]
 80016ee:	043f      	lsls	r7, r7, #16
 80016f0:	445b      	add	r3, fp
 80016f2:	001e      	movs	r6, r3
 80016f4:	4283      	cmp	r3, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	0423      	lsls	r3, r4, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	9b05      	ldr	r3, [sp, #20]
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	4447      	add	r7, r8
 8001702:	4698      	mov	r8, r3
 8001704:	1876      	adds	r6, r6, r1
 8001706:	428e      	cmp	r6, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	4447      	add	r7, r8
 800170c:	4240      	negs	r0, r0
 800170e:	183d      	adds	r5, r7, r0
 8001710:	46a8      	mov	r8, r5
 8001712:	4693      	mov	fp, r2
 8001714:	4249      	negs	r1, r1
 8001716:	468a      	mov	sl, r1
 8001718:	44c3      	add	fp, r8
 800171a:	429f      	cmp	r7, r3
 800171c:	41bf      	sbcs	r7, r7
 800171e:	4580      	cmp	r8, r0
 8001720:	4180      	sbcs	r0, r0
 8001722:	9b03      	ldr	r3, [sp, #12]
 8001724:	44da      	add	sl, fp
 8001726:	4698      	mov	r8, r3
 8001728:	4653      	mov	r3, sl
 800172a:	4240      	negs	r0, r0
 800172c:	427f      	negs	r7, r7
 800172e:	4307      	orrs	r7, r0
 8001730:	0c24      	lsrs	r4, r4, #16
 8001732:	4593      	cmp	fp, r2
 8001734:	4192      	sbcs	r2, r2
 8001736:	458a      	cmp	sl, r1
 8001738:	4189      	sbcs	r1, r1
 800173a:	193f      	adds	r7, r7, r4
 800173c:	0ddc      	lsrs	r4, r3, #23
 800173e:	9b04      	ldr	r3, [sp, #16]
 8001740:	0275      	lsls	r5, r6, #9
 8001742:	431d      	orrs	r5, r3
 8001744:	1e68      	subs	r0, r5, #1
 8001746:	4185      	sbcs	r5, r0
 8001748:	4653      	mov	r3, sl
 800174a:	4252      	negs	r2, r2
 800174c:	4249      	negs	r1, r1
 800174e:	430a      	orrs	r2, r1
 8001750:	18bf      	adds	r7, r7, r2
 8001752:	4447      	add	r7, r8
 8001754:	0df6      	lsrs	r6, r6, #23
 8001756:	027f      	lsls	r7, r7, #9
 8001758:	4335      	orrs	r5, r6
 800175a:	025a      	lsls	r2, r3, #9
 800175c:	433c      	orrs	r4, r7
 800175e:	4315      	orrs	r5, r2
 8001760:	01fb      	lsls	r3, r7, #7
 8001762:	d400      	bmi.n	8001766 <__aeabi_dmul+0x2fe>
 8001764:	e0c1      	b.n	80018ea <__aeabi_dmul+0x482>
 8001766:	2101      	movs	r1, #1
 8001768:	086a      	lsrs	r2, r5, #1
 800176a:	400d      	ands	r5, r1
 800176c:	4315      	orrs	r5, r2
 800176e:	07e2      	lsls	r2, r4, #31
 8001770:	4315      	orrs	r5, r2
 8001772:	0864      	lsrs	r4, r4, #1
 8001774:	4926      	ldr	r1, [pc, #152]	; (8001810 <__aeabi_dmul+0x3a8>)
 8001776:	4461      	add	r1, ip
 8001778:	2900      	cmp	r1, #0
 800177a:	dd56      	ble.n	800182a <__aeabi_dmul+0x3c2>
 800177c:	076b      	lsls	r3, r5, #29
 800177e:	d009      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001780:	220f      	movs	r2, #15
 8001782:	402a      	ands	r2, r5
 8001784:	2a04      	cmp	r2, #4
 8001786:	d005      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001788:	1d2a      	adds	r2, r5, #4
 800178a:	42aa      	cmp	r2, r5
 800178c:	41ad      	sbcs	r5, r5
 800178e:	426d      	negs	r5, r5
 8001790:	1964      	adds	r4, r4, r5
 8001792:	0015      	movs	r5, r2
 8001794:	01e3      	lsls	r3, r4, #7
 8001796:	d504      	bpl.n	80017a2 <__aeabi_dmul+0x33a>
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <__aeabi_dmul+0x3ac>)
 800179c:	00c9      	lsls	r1, r1, #3
 800179e:	4014      	ands	r4, r2
 80017a0:	4461      	add	r1, ip
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <__aeabi_dmul+0x3b0>)
 80017a4:	4291      	cmp	r1, r2
 80017a6:	dd00      	ble.n	80017aa <__aeabi_dmul+0x342>
 80017a8:	e724      	b.n	80015f4 <__aeabi_dmul+0x18c>
 80017aa:	0762      	lsls	r2, r4, #29
 80017ac:	08ed      	lsrs	r5, r5, #3
 80017ae:	0264      	lsls	r4, r4, #9
 80017b0:	0549      	lsls	r1, r1, #21
 80017b2:	4315      	orrs	r5, r2
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	0d4a      	lsrs	r2, r1, #21
 80017b8:	e6c6      	b.n	8001548 <__aeabi_dmul+0xe0>
 80017ba:	9701      	str	r7, [sp, #4]
 80017bc:	e6b8      	b.n	8001530 <__aeabi_dmul+0xc8>
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <__aeabi_dmul+0x398>)
 80017c0:	2003      	movs	r0, #3
 80017c2:	4694      	mov	ip, r2
 80017c4:	4463      	add	r3, ip
 80017c6:	464a      	mov	r2, r9
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2303      	movs	r3, #3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	4691      	mov	r9, r2
 80017d0:	4652      	mov	r2, sl
 80017d2:	e68a      	b.n	80014ea <__aeabi_dmul+0x82>
 80017d4:	4649      	mov	r1, r9
 80017d6:	2301      	movs	r3, #1
 80017d8:	4319      	orrs	r1, r3
 80017da:	4689      	mov	r9, r1
 80017dc:	2600      	movs	r6, #0
 80017de:	2001      	movs	r0, #1
 80017e0:	e683      	b.n	80014ea <__aeabi_dmul+0x82>
 80017e2:	220c      	movs	r2, #12
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2303      	movs	r3, #3
 80017e8:	0005      	movs	r5, r0
 80017ea:	4691      	mov	r9, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	e65e      	b.n	80014ae <__aeabi_dmul+0x46>
 80017f0:	2304      	movs	r3, #4
 80017f2:	4699      	mov	r9, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	2400      	movs	r4, #0
 80017fc:	469b      	mov	fp, r3
 80017fe:	e656      	b.n	80014ae <__aeabi_dmul+0x46>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	0800c978 	.word	0x0800c978
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	2300      	movs	r3, #0
 800181e:	2480      	movs	r4, #128	; 0x80
 8001820:	2500      	movs	r5, #0
 8001822:	4a44      	ldr	r2, [pc, #272]	; (8001934 <__aeabi_dmul+0x4cc>)
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	0324      	lsls	r4, r4, #12
 8001828:	e68e      	b.n	8001548 <__aeabi_dmul+0xe0>
 800182a:	2001      	movs	r0, #1
 800182c:	1a40      	subs	r0, r0, r1
 800182e:	2838      	cmp	r0, #56	; 0x38
 8001830:	dd00      	ble.n	8001834 <__aeabi_dmul+0x3cc>
 8001832:	e686      	b.n	8001542 <__aeabi_dmul+0xda>
 8001834:	281f      	cmp	r0, #31
 8001836:	dd5b      	ble.n	80018f0 <__aeabi_dmul+0x488>
 8001838:	221f      	movs	r2, #31
 800183a:	0023      	movs	r3, r4
 800183c:	4252      	negs	r2, r2
 800183e:	1a51      	subs	r1, r2, r1
 8001840:	40cb      	lsrs	r3, r1
 8001842:	0019      	movs	r1, r3
 8001844:	2820      	cmp	r0, #32
 8001846:	d003      	beq.n	8001850 <__aeabi_dmul+0x3e8>
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <__aeabi_dmul+0x4d0>)
 800184a:	4462      	add	r2, ip
 800184c:	4094      	lsls	r4, r2
 800184e:	4325      	orrs	r5, r4
 8001850:	1e6a      	subs	r2, r5, #1
 8001852:	4195      	sbcs	r5, r2
 8001854:	002a      	movs	r2, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	2107      	movs	r1, #7
 800185a:	000d      	movs	r5, r1
 800185c:	2400      	movs	r4, #0
 800185e:	4015      	ands	r5, r2
 8001860:	4211      	tst	r1, r2
 8001862:	d05b      	beq.n	800191c <__aeabi_dmul+0x4b4>
 8001864:	210f      	movs	r1, #15
 8001866:	2400      	movs	r4, #0
 8001868:	4011      	ands	r1, r2
 800186a:	2904      	cmp	r1, #4
 800186c:	d053      	beq.n	8001916 <__aeabi_dmul+0x4ae>
 800186e:	1d11      	adds	r1, r2, #4
 8001870:	4291      	cmp	r1, r2
 8001872:	4192      	sbcs	r2, r2
 8001874:	4252      	negs	r2, r2
 8001876:	18a4      	adds	r4, r4, r2
 8001878:	000a      	movs	r2, r1
 800187a:	0223      	lsls	r3, r4, #8
 800187c:	d54b      	bpl.n	8001916 <__aeabi_dmul+0x4ae>
 800187e:	2201      	movs	r2, #1
 8001880:	2400      	movs	r4, #0
 8001882:	2500      	movs	r5, #0
 8001884:	e660      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	031b      	lsls	r3, r3, #12
 800188a:	421c      	tst	r4, r3
 800188c:	d009      	beq.n	80018a2 <__aeabi_dmul+0x43a>
 800188e:	421e      	tst	r6, r3
 8001890:	d107      	bne.n	80018a2 <__aeabi_dmul+0x43a>
 8001892:	4333      	orrs	r3, r6
 8001894:	031c      	lsls	r4, r3, #12
 8001896:	4643      	mov	r3, r8
 8001898:	0015      	movs	r5, r2
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	4a25      	ldr	r2, [pc, #148]	; (8001934 <__aeabi_dmul+0x4cc>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	e652      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0312      	lsls	r2, r2, #12
 80018a6:	4314      	orrs	r4, r2
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <__aeabi_dmul+0x4cc>)
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e64a      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018b2:	f000 fd51 	bl	8002358 <__clzsi2>
 80018b6:	0003      	movs	r3, r0
 80018b8:	001a      	movs	r2, r3
 80018ba:	3215      	adds	r2, #21
 80018bc:	3020      	adds	r0, #32
 80018be:	2a1c      	cmp	r2, #28
 80018c0:	dc00      	bgt.n	80018c4 <__aeabi_dmul+0x45c>
 80018c2:	e684      	b.n	80015ce <__aeabi_dmul+0x166>
 80018c4:	4656      	mov	r6, sl
 80018c6:	3b08      	subs	r3, #8
 80018c8:	2200      	movs	r2, #0
 80018ca:	409e      	lsls	r6, r3
 80018cc:	e689      	b.n	80015e2 <__aeabi_dmul+0x17a>
 80018ce:	f000 fd43 	bl	8002358 <__clzsi2>
 80018d2:	0001      	movs	r1, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	3115      	adds	r1, #21
 80018d8:	3220      	adds	r2, #32
 80018da:	291c      	cmp	r1, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x478>
 80018de:	e64e      	b.n	800157e <__aeabi_dmul+0x116>
 80018e0:	0034      	movs	r4, r6
 80018e2:	3808      	subs	r0, #8
 80018e4:	2500      	movs	r5, #0
 80018e6:	4084      	lsls	r4, r0
 80018e8:	e653      	b.n	8001592 <__aeabi_dmul+0x12a>
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	469c      	mov	ip, r3
 80018ee:	e741      	b.n	8001774 <__aeabi_dmul+0x30c>
 80018f0:	4912      	ldr	r1, [pc, #72]	; (800193c <__aeabi_dmul+0x4d4>)
 80018f2:	0022      	movs	r2, r4
 80018f4:	4461      	add	r1, ip
 80018f6:	002e      	movs	r6, r5
 80018f8:	408d      	lsls	r5, r1
 80018fa:	408a      	lsls	r2, r1
 80018fc:	40c6      	lsrs	r6, r0
 80018fe:	1e69      	subs	r1, r5, #1
 8001900:	418d      	sbcs	r5, r1
 8001902:	4332      	orrs	r2, r6
 8001904:	432a      	orrs	r2, r5
 8001906:	40c4      	lsrs	r4, r0
 8001908:	0753      	lsls	r3, r2, #29
 800190a:	d0b6      	beq.n	800187a <__aeabi_dmul+0x412>
 800190c:	210f      	movs	r1, #15
 800190e:	4011      	ands	r1, r2
 8001910:	2904      	cmp	r1, #4
 8001912:	d1ac      	bne.n	800186e <__aeabi_dmul+0x406>
 8001914:	e7b1      	b.n	800187a <__aeabi_dmul+0x412>
 8001916:	0765      	lsls	r5, r4, #29
 8001918:	0264      	lsls	r4, r4, #9
 800191a:	0b24      	lsrs	r4, r4, #12
 800191c:	08d2      	lsrs	r2, r2, #3
 800191e:	4315      	orrs	r5, r2
 8001920:	2200      	movs	r2, #0
 8001922:	e611      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0312      	lsls	r2, r2, #12
 8001928:	4314      	orrs	r4, r2
 800192a:	0324      	lsls	r4, r4, #12
 800192c:	4a01      	ldr	r2, [pc, #4]	; (8001934 <__aeabi_dmul+0x4cc>)
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	e60a      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	0000043e 	.word	0x0000043e
 800193c:	0000041e 	.word	0x0000041e

08001940 <__aeabi_dsub>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	4657      	mov	r7, sl
 8001944:	464e      	mov	r6, r9
 8001946:	4645      	mov	r5, r8
 8001948:	46de      	mov	lr, fp
 800194a:	0004      	movs	r4, r0
 800194c:	b5e0      	push	{r5, r6, r7, lr}
 800194e:	001f      	movs	r7, r3
 8001950:	0010      	movs	r0, r2
 8001952:	030b      	lsls	r3, r1, #12
 8001954:	0f62      	lsrs	r2, r4, #29
 8001956:	004e      	lsls	r6, r1, #1
 8001958:	0fcd      	lsrs	r5, r1, #31
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	0339      	lsls	r1, r7, #12
 800195e:	4313      	orrs	r3, r2
 8001960:	0a49      	lsrs	r1, r1, #9
 8001962:	00e2      	lsls	r2, r4, #3
 8001964:	0f44      	lsrs	r4, r0, #29
 8001966:	4321      	orrs	r1, r4
 8001968:	4cc2      	ldr	r4, [pc, #776]	; (8001c74 <__aeabi_dsub+0x334>)
 800196a:	4691      	mov	r9, r2
 800196c:	4692      	mov	sl, r2
 800196e:	00c0      	lsls	r0, r0, #3
 8001970:	007a      	lsls	r2, r7, #1
 8001972:	4680      	mov	r8, r0
 8001974:	0d76      	lsrs	r6, r6, #21
 8001976:	0d52      	lsrs	r2, r2, #21
 8001978:	0fff      	lsrs	r7, r7, #31
 800197a:	42a2      	cmp	r2, r4
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x40>
 800197e:	e0b4      	b.n	8001aea <__aeabi_dsub+0x1aa>
 8001980:	2401      	movs	r4, #1
 8001982:	4067      	eors	r7, r4
 8001984:	46bb      	mov	fp, r7
 8001986:	42bd      	cmp	r5, r7
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x4c>
 800198a:	e088      	b.n	8001a9e <__aeabi_dsub+0x15e>
 800198c:	1ab4      	subs	r4, r6, r2
 800198e:	46a4      	mov	ip, r4
 8001990:	2c00      	cmp	r4, #0
 8001992:	dc00      	bgt.n	8001996 <__aeabi_dsub+0x56>
 8001994:	e0b2      	b.n	8001afc <__aeabi_dsub+0x1bc>
 8001996:	2a00      	cmp	r2, #0
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x5c>
 800199a:	e0c5      	b.n	8001b28 <__aeabi_dsub+0x1e8>
 800199c:	4ab5      	ldr	r2, [pc, #724]	; (8001c74 <__aeabi_dsub+0x334>)
 800199e:	4296      	cmp	r6, r2
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x64>
 80019a2:	e28b      	b.n	8001ebc <__aeabi_dsub+0x57c>
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	0412      	lsls	r2, r2, #16
 80019a8:	4311      	orrs	r1, r2
 80019aa:	4662      	mov	r2, ip
 80019ac:	2a38      	cmp	r2, #56	; 0x38
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dsub+0x72>
 80019b0:	e1a1      	b.n	8001cf6 <__aeabi_dsub+0x3b6>
 80019b2:	2a1f      	cmp	r2, #31
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0x78>
 80019b6:	e216      	b.n	8001de6 <__aeabi_dsub+0x4a6>
 80019b8:	2720      	movs	r7, #32
 80019ba:	000c      	movs	r4, r1
 80019bc:	1abf      	subs	r7, r7, r2
 80019be:	40bc      	lsls	r4, r7
 80019c0:	0002      	movs	r2, r0
 80019c2:	46a0      	mov	r8, r4
 80019c4:	4664      	mov	r4, ip
 80019c6:	40b8      	lsls	r0, r7
 80019c8:	40e2      	lsrs	r2, r4
 80019ca:	4644      	mov	r4, r8
 80019cc:	4314      	orrs	r4, r2
 80019ce:	0002      	movs	r2, r0
 80019d0:	1e50      	subs	r0, r2, #1
 80019d2:	4182      	sbcs	r2, r0
 80019d4:	4660      	mov	r0, ip
 80019d6:	40c1      	lsrs	r1, r0
 80019d8:	4322      	orrs	r2, r4
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	4649      	mov	r1, r9
 80019de:	1a8c      	subs	r4, r1, r2
 80019e0:	45a1      	cmp	r9, r4
 80019e2:	4192      	sbcs	r2, r2
 80019e4:	4252      	negs	r2, r2
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	4698      	mov	r8, r3
 80019ea:	4643      	mov	r3, r8
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	d400      	bmi.n	80019f2 <__aeabi_dsub+0xb2>
 80019f0:	e117      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 80019f2:	4643      	mov	r3, r8
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	4698      	mov	r8, r3
 80019fa:	4643      	mov	r3, r8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0xc2>
 8001a00:	e16c      	b.n	8001cdc <__aeabi_dsub+0x39c>
 8001a02:	4640      	mov	r0, r8
 8001a04:	f000 fca8 	bl	8002358 <__clzsi2>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	3a08      	subs	r2, #8
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	0020      	movs	r0, r4
 8001a10:	4643      	mov	r3, r8
 8001a12:	1a89      	subs	r1, r1, r2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	40c8      	lsrs	r0, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	4296      	cmp	r6, r2
 8001a1e:	dd00      	ble.n	8001a22 <__aeabi_dsub+0xe2>
 8001a20:	e157      	b.n	8001cd2 <__aeabi_dsub+0x392>
 8001a22:	1b96      	subs	r6, r2, r6
 8001a24:	1c71      	adds	r1, r6, #1
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0xec>
 8001a2a:	e1cb      	b.n	8001dc4 <__aeabi_dsub+0x484>
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	0018      	movs	r0, r3
 8001a30:	0026      	movs	r6, r4
 8001a32:	1a52      	subs	r2, r2, r1
 8001a34:	4094      	lsls	r4, r2
 8001a36:	4090      	lsls	r0, r2
 8001a38:	40ce      	lsrs	r6, r1
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e62      	subs	r2, r4, #1
 8001a3e:	4194      	sbcs	r4, r2
 8001a40:	4330      	orrs	r0, r6
 8001a42:	4698      	mov	r8, r3
 8001a44:	2600      	movs	r6, #0
 8001a46:	4304      	orrs	r4, r0
 8001a48:	0763      	lsls	r3, r4, #29
 8001a4a:	d009      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	4023      	ands	r3, r4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a54:	1d23      	adds	r3, r4, #4
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	41a4      	sbcs	r4, r4
 8001a5a:	4264      	negs	r4, r4
 8001a5c:	44a0      	add	r8, r4
 8001a5e:	001c      	movs	r4, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_dsub+0x128>
 8001a66:	e0df      	b.n	8001c28 <__aeabi_dsub+0x2e8>
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <__aeabi_dsub+0x334>)
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x132>
 8001a70:	e0fb      	b.n	8001c6a <__aeabi_dsub+0x32a>
 8001a72:	4642      	mov	r2, r8
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <__aeabi_dsub+0x338>)
 8001a76:	08e4      	lsrs	r4, r4, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	0571      	lsls	r1, r6, #21
 8001a7e:	0752      	lsls	r2, r2, #29
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	4322      	orrs	r2, r4
 8001a84:	0b1b      	lsrs	r3, r3, #12
 8001a86:	0d49      	lsrs	r1, r1, #21
 8001a88:	0509      	lsls	r1, r1, #20
 8001a8a:	07ed      	lsls	r5, r5, #31
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	4329      	orrs	r1, r5
 8001a90:	0010      	movs	r0, r2
 8001a92:	bcf0      	pop	{r4, r5, r6, r7}
 8001a94:	46bb      	mov	fp, r7
 8001a96:	46b2      	mov	sl, r6
 8001a98:	46a9      	mov	r9, r5
 8001a9a:	46a0      	mov	r8, r4
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	1ab4      	subs	r4, r6, r2
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	dd58      	ble.n	8001b58 <__aeabi_dsub+0x218>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x16c>
 8001aaa:	e09e      	b.n	8001bea <__aeabi_dsub+0x2aa>
 8001aac:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <__aeabi_dsub+0x334>)
 8001aae:	4296      	cmp	r6, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x174>
 8001ab2:	e13b      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	4662      	mov	r2, ip
 8001abc:	2a38      	cmp	r2, #56	; 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x182>
 8001ac0:	e0c1      	b.n	8001c46 <__aeabi_dsub+0x306>
 8001ac2:	2a1f      	cmp	r2, #31
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_dsub+0x188>
 8001ac6:	e1bb      	b.n	8001e40 <__aeabi_dsub+0x500>
 8001ac8:	000c      	movs	r4, r1
 8001aca:	3a20      	subs	r2, #32
 8001acc:	40d4      	lsrs	r4, r2
 8001ace:	0022      	movs	r2, r4
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	2c20      	cmp	r4, #32
 8001ad4:	d004      	beq.n	8001ae0 <__aeabi_dsub+0x1a0>
 8001ad6:	2740      	movs	r7, #64	; 0x40
 8001ad8:	1b3f      	subs	r7, r7, r4
 8001ada:	40b9      	lsls	r1, r7
 8001adc:	4308      	orrs	r0, r1
 8001ade:	4680      	mov	r8, r0
 8001ae0:	4644      	mov	r4, r8
 8001ae2:	1e61      	subs	r1, r4, #1
 8001ae4:	418c      	sbcs	r4, r1
 8001ae6:	4314      	orrs	r4, r2
 8001ae8:	e0b1      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001aea:	000c      	movs	r4, r1
 8001aec:	4304      	orrs	r4, r0
 8001aee:	d02a      	beq.n	8001b46 <__aeabi_dsub+0x206>
 8001af0:	46bb      	mov	fp, r7
 8001af2:	42bd      	cmp	r5, r7
 8001af4:	d02d      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001af6:	4c61      	ldr	r4, [pc, #388]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001af8:	46a4      	mov	ip, r4
 8001afa:	44b4      	add	ip, r6
 8001afc:	4664      	mov	r4, ip
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d05c      	beq.n	8001bbc <__aeabi_dsub+0x27c>
 8001b02:	1b94      	subs	r4, r2, r6
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dsub+0x1cc>
 8001b0a:	e115      	b.n	8001d38 <__aeabi_dsub+0x3f8>
 8001b0c:	464d      	mov	r5, r9
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1d4>
 8001b12:	e1c3      	b.n	8001e9c <__aeabi_dsub+0x55c>
 8001b14:	1e65      	subs	r5, r4, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x1dc>
 8001b1a:	e20c      	b.n	8001f36 <__aeabi_dsub+0x5f6>
 8001b1c:	4e55      	ldr	r6, [pc, #340]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b1e:	42b4      	cmp	r4, r6
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x1e4>
 8001b22:	e1f8      	b.n	8001f16 <__aeabi_dsub+0x5d6>
 8001b24:	46ac      	mov	ip, r5
 8001b26:	e10e      	b.n	8001d46 <__aeabi_dsub+0x406>
 8001b28:	000a      	movs	r2, r1
 8001b2a:	4302      	orrs	r2, r0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1f0>
 8001b2e:	e136      	b.n	8001d9e <__aeabi_dsub+0x45e>
 8001b30:	0022      	movs	r2, r4
 8001b32:	3a01      	subs	r2, #1
 8001b34:	2c01      	cmp	r4, #1
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x1fa>
 8001b38:	e1c6      	b.n	8001ec8 <__aeabi_dsub+0x588>
 8001b3a:	4c4e      	ldr	r4, [pc, #312]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b3c:	45a4      	cmp	ip, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x202>
 8001b40:	e0f4      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001b42:	4694      	mov	ip, r2
 8001b44:	e731      	b.n	80019aa <__aeabi_dsub+0x6a>
 8001b46:	2401      	movs	r4, #1
 8001b48:	4067      	eors	r7, r4
 8001b4a:	46bb      	mov	fp, r7
 8001b4c:	42bd      	cmp	r5, r7
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001b50:	e71c      	b.n	800198c <__aeabi_dsub+0x4c>
 8001b52:	4c4a      	ldr	r4, [pc, #296]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001b54:	46a4      	mov	ip, r4
 8001b56:	44b4      	add	ip, r6
 8001b58:	4664      	mov	r4, ip
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x220>
 8001b5e:	e0cf      	b.n	8001d00 <__aeabi_dsub+0x3c0>
 8001b60:	1b94      	subs	r4, r2, r6
 8001b62:	46a4      	mov	ip, r4
 8001b64:	2e00      	cmp	r6, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x22a>
 8001b68:	e15c      	b.n	8001e24 <__aeabi_dsub+0x4e4>
 8001b6a:	4e42      	ldr	r6, [pc, #264]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b6c:	42b2      	cmp	r2, r6
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x232>
 8001b70:	e1ec      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001b72:	2680      	movs	r6, #128	; 0x80
 8001b74:	0436      	lsls	r6, r6, #16
 8001b76:	4333      	orrs	r3, r6
 8001b78:	4664      	mov	r4, ip
 8001b7a:	2c38      	cmp	r4, #56	; 0x38
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0x240>
 8001b7e:	e1b3      	b.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001b80:	2c1f      	cmp	r4, #31
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dsub+0x246>
 8001b84:	e238      	b.n	8001ff8 <__aeabi_dsub+0x6b8>
 8001b86:	2620      	movs	r6, #32
 8001b88:	1b36      	subs	r6, r6, r4
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	40b4      	lsls	r4, r6
 8001b8e:	464f      	mov	r7, r9
 8001b90:	46a0      	mov	r8, r4
 8001b92:	4664      	mov	r4, ip
 8001b94:	40e7      	lsrs	r7, r4
 8001b96:	4644      	mov	r4, r8
 8001b98:	433c      	orrs	r4, r7
 8001b9a:	464f      	mov	r7, r9
 8001b9c:	40b7      	lsls	r7, r6
 8001b9e:	003e      	movs	r6, r7
 8001ba0:	1e77      	subs	r7, r6, #1
 8001ba2:	41be      	sbcs	r6, r7
 8001ba4:	4334      	orrs	r4, r6
 8001ba6:	4666      	mov	r6, ip
 8001ba8:	40f3      	lsrs	r3, r6
 8001baa:	18c9      	adds	r1, r1, r3
 8001bac:	1824      	adds	r4, r4, r0
 8001bae:	4284      	cmp	r4, r0
 8001bb0:	419b      	sbcs	r3, r3
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	4488      	add	r8, r1
 8001bba:	e04e      	b.n	8001c5a <__aeabi_dsub+0x31a>
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <__aeabi_dsub+0x340>)
 8001bbe:	1c74      	adds	r4, r6, #1
 8001bc0:	4214      	tst	r4, r2
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x286>
 8001bc4:	e0d6      	b.n	8001d74 <__aeabi_dsub+0x434>
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x290>
 8001bce:	e15b      	b.n	8001e88 <__aeabi_dsub+0x548>
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x296>
 8001bd4:	e1a5      	b.n	8001f22 <__aeabi_dsub+0x5e2>
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x29e>
 8001bdc:	e1bb      	b.n	8001f56 <__aeabi_dsub+0x616>
 8001bde:	464a      	mov	r2, r9
 8001be0:	0759      	lsls	r1, r3, #29
 8001be2:	08d2      	lsrs	r2, r2, #3
 8001be4:	430a      	orrs	r2, r1
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	e027      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x2b2>
 8001bf0:	e174      	b.n	8001edc <__aeabi_dsub+0x59c>
 8001bf2:	0022      	movs	r2, r4
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	2c01      	cmp	r4, #1
 8001bf8:	d005      	beq.n	8001c06 <__aeabi_dsub+0x2c6>
 8001bfa:	4c1e      	ldr	r4, [pc, #120]	; (8001c74 <__aeabi_dsub+0x334>)
 8001bfc:	45a4      	cmp	ip, r4
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x2c2>
 8001c00:	e094      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c02:	4694      	mov	ip, r2
 8001c04:	e759      	b.n	8001aba <__aeabi_dsub+0x17a>
 8001c06:	4448      	add	r0, r9
 8001c08:	4548      	cmp	r0, r9
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	185b      	adds	r3, r3, r1
 8001c0e:	4698      	mov	r8, r3
 8001c10:	0004      	movs	r4, r0
 8001c12:	4252      	negs	r2, r2
 8001c14:	4490      	add	r8, r2
 8001c16:	4643      	mov	r3, r8
 8001c18:	2602      	movs	r6, #2
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	d500      	bpl.n	8001c20 <__aeabi_dsub+0x2e0>
 8001c1e:	e0c4      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c20:	3e01      	subs	r6, #1
 8001c22:	0763      	lsls	r3, r4, #29
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x2e8>
 8001c26:	e711      	b.n	8001a4c <__aeabi_dsub+0x10c>
 8001c28:	4643      	mov	r3, r8
 8001c2a:	46b4      	mov	ip, r6
 8001c2c:	0759      	lsls	r1, r3, #29
 8001c2e:	08e2      	lsrs	r2, r4, #3
 8001c30:	430a      	orrs	r2, r1
 8001c32:	08db      	lsrs	r3, r3, #3
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c36:	458c      	cmp	ip, r1
 8001c38:	d040      	beq.n	8001cbc <__aeabi_dsub+0x37c>
 8001c3a:	4661      	mov	r1, ip
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	0b1b      	lsrs	r3, r3, #12
 8001c42:	0d49      	lsrs	r1, r1, #21
 8001c44:	e720      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c46:	4301      	orrs	r1, r0
 8001c48:	000c      	movs	r4, r1
 8001c4a:	1e61      	subs	r1, r4, #1
 8001c4c:	418c      	sbcs	r4, r1
 8001c4e:	444c      	add	r4, r9
 8001c50:	454c      	cmp	r4, r9
 8001c52:	4192      	sbcs	r2, r2
 8001c54:	4252      	negs	r2, r2
 8001c56:	4690      	mov	r8, r2
 8001c58:	4498      	add	r8, r3
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	d5e0      	bpl.n	8001c22 <__aeabi_dsub+0x2e2>
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c62:	3601      	adds	r6, #1
 8001c64:	429e      	cmp	r6, r3
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x32a>
 8001c68:	e09f      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c6a:	0031      	movs	r1, r6
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	e70a      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	ff7fffff 	.word	0xff7fffff
 8001c7c:	fffff801 	.word	0xfffff801
 8001c80:	000007fe 	.word	0x000007fe
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x34a>
 8001c88:	e160      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	d04d      	beq.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c90:	464a      	mov	r2, r9
 8001c92:	075c      	lsls	r4, r3, #29
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	4322      	orrs	r2, r4
 8001c98:	2480      	movs	r4, #128	; 0x80
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4223      	tst	r3, r4
 8001ca0:	d007      	beq.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca2:	08ce      	lsrs	r6, r1, #3
 8001ca4:	4226      	tst	r6, r4
 8001ca6:	d104      	bne.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca8:	465d      	mov	r5, fp
 8001caa:	0033      	movs	r3, r6
 8001cac:	08c2      	lsrs	r2, r0, #3
 8001cae:	0749      	lsls	r1, r1, #29
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	0f51      	lsrs	r1, r2, #29
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	0749      	lsls	r1, r1, #29
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	4319      	orrs	r1, r3
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x384>
 8001cc2:	e1c8      	b.n	8002056 <__aeabi_dsub+0x716>
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0309      	lsls	r1, r1, #12
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	031b      	lsls	r3, r3, #12
 8001ccc:	49d5      	ldr	r1, [pc, #852]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001cce:	0b1b      	lsrs	r3, r3, #12
 8001cd0:	e6da      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001cd2:	49d5      	ldr	r1, [pc, #852]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001cd4:	1ab6      	subs	r6, r6, r2
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	4698      	mov	r8, r3
 8001cda:	e6b5      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f000 fb3b 	bl	8002358 <__clzsi2>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	3218      	adds	r2, #24
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_dsub+0x3ac>
 8001cea:	e68f      	b.n	8001a0c <__aeabi_dsub+0xcc>
 8001cec:	0023      	movs	r3, r4
 8001cee:	3808      	subs	r0, #8
 8001cf0:	4083      	lsls	r3, r0
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	e692      	b.n	8001a1c <__aeabi_dsub+0xdc>
 8001cf6:	4308      	orrs	r0, r1
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	1e50      	subs	r0, r2, #1
 8001cfc:	4182      	sbcs	r2, r0
 8001cfe:	e66d      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001d00:	4cca      	ldr	r4, [pc, #808]	; (800202c <__aeabi_dsub+0x6ec>)
 8001d02:	1c72      	adds	r2, r6, #1
 8001d04:	4222      	tst	r2, r4
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x3ca>
 8001d08:	e0ad      	b.n	8001e66 <__aeabi_dsub+0x526>
 8001d0a:	464a      	mov	r2, r9
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d1b8      	bne.n	8001c84 <__aeabi_dsub+0x344>
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x3d8>
 8001d16:	e158      	b.n	8001fca <__aeabi_dsub+0x68a>
 8001d18:	000a      	movs	r2, r1
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x3e0>
 8001d1e:	e159      	b.n	8001fd4 <__aeabi_dsub+0x694>
 8001d20:	464a      	mov	r2, r9
 8001d22:	0759      	lsls	r1, r3, #29
 8001d24:	08d2      	lsrs	r2, r2, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	e786      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	0759      	lsls	r1, r3, #29
 8001d30:	08d2      	lsrs	r2, r2, #3
 8001d32:	430a      	orrs	r2, r1
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	e7c1      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001d38:	4dba      	ldr	r5, [pc, #744]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001d3a:	42aa      	cmp	r2, r5
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x400>
 8001d3e:	e11e      	b.n	8001f7e <__aeabi_dsub+0x63e>
 8001d40:	2580      	movs	r5, #128	; 0x80
 8001d42:	042d      	lsls	r5, r5, #16
 8001d44:	432b      	orrs	r3, r5
 8001d46:	4664      	mov	r4, ip
 8001d48:	2c38      	cmp	r4, #56	; 0x38
 8001d4a:	dc5d      	bgt.n	8001e08 <__aeabi_dsub+0x4c8>
 8001d4c:	2c1f      	cmp	r4, #31
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dsub+0x412>
 8001d50:	e0d0      	b.n	8001ef4 <__aeabi_dsub+0x5b4>
 8001d52:	2520      	movs	r5, #32
 8001d54:	4667      	mov	r7, ip
 8001d56:	1b2d      	subs	r5, r5, r4
 8001d58:	464e      	mov	r6, r9
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	40fe      	lsrs	r6, r7
 8001d5e:	40ac      	lsls	r4, r5
 8001d60:	4334      	orrs	r4, r6
 8001d62:	464e      	mov	r6, r9
 8001d64:	40ae      	lsls	r6, r5
 8001d66:	0035      	movs	r5, r6
 8001d68:	40fb      	lsrs	r3, r7
 8001d6a:	1e6e      	subs	r6, r5, #1
 8001d6c:	41b5      	sbcs	r5, r6
 8001d6e:	1ac9      	subs	r1, r1, r3
 8001d70:	432c      	orrs	r4, r5
 8001d72:	e04e      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001d74:	464a      	mov	r2, r9
 8001d76:	1a14      	subs	r4, r2, r0
 8001d78:	45a1      	cmp	r9, r4
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	4690      	mov	r8, r2
 8001d80:	1a5f      	subs	r7, r3, r1
 8001d82:	003a      	movs	r2, r7
 8001d84:	4647      	mov	r7, r8
 8001d86:	1bd2      	subs	r2, r2, r7
 8001d88:	4690      	mov	r8, r2
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	d500      	bpl.n	8001d90 <__aeabi_dsub+0x450>
 8001d8e:	e08b      	b.n	8001ea8 <__aeabi_dsub+0x568>
 8001d90:	4642      	mov	r2, r8
 8001d92:	4322      	orrs	r2, r4
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x458>
 8001d96:	e630      	b.n	80019fa <__aeabi_dsub+0xba>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2500      	movs	r5, #0
 8001d9c:	e74d      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d9e:	464a      	mov	r2, r9
 8001da0:	0759      	lsls	r1, r3, #29
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	e744      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001daa:	4642      	mov	r2, r8
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001dae:	0861      	lsrs	r1, r4, #1
 8001db0:	401a      	ands	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	2201      	movs	r2, #1
 8001db6:	4014      	ands	r4, r2
 8001db8:	430c      	orrs	r4, r1
 8001dba:	07da      	lsls	r2, r3, #31
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4314      	orrs	r4, r2
 8001dc2:	e641      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	3e1f      	subs	r6, #31
 8001dc8:	40f2      	lsrs	r2, r6
 8001dca:	0016      	movs	r6, r2
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d003      	beq.n	8001dd8 <__aeabi_dsub+0x498>
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	1a51      	subs	r1, r2, r1
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	431c      	orrs	r4, r3
 8001dd8:	1e62      	subs	r2, r4, #1
 8001dda:	4194      	sbcs	r4, r2
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4334      	orrs	r4, r6
 8001de0:	4698      	mov	r8, r3
 8001de2:	2600      	movs	r6, #0
 8001de4:	e71d      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001de6:	000c      	movs	r4, r1
 8001de8:	3a20      	subs	r2, #32
 8001dea:	40d4      	lsrs	r4, r2
 8001dec:	0022      	movs	r2, r4
 8001dee:	4664      	mov	r4, ip
 8001df0:	2c20      	cmp	r4, #32
 8001df2:	d004      	beq.n	8001dfe <__aeabi_dsub+0x4be>
 8001df4:	2740      	movs	r7, #64	; 0x40
 8001df6:	1b3f      	subs	r7, r7, r4
 8001df8:	40b9      	lsls	r1, r7
 8001dfa:	4308      	orrs	r0, r1
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4644      	mov	r4, r8
 8001e00:	1e61      	subs	r1, r4, #1
 8001e02:	418c      	sbcs	r4, r1
 8001e04:	4322      	orrs	r2, r4
 8001e06:	e5e9      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	1b04      	subs	r4, r0, r4
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	419b      	sbcs	r3, r3
 8001e18:	425b      	negs	r3, r3
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	0016      	movs	r6, r2
 8001e22:	e5e2      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001e24:	464e      	mov	r6, r9
 8001e26:	431e      	orrs	r6, r3
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x4ec>
 8001e2a:	e0ae      	b.n	8001f8a <__aeabi_dsub+0x64a>
 8001e2c:	1e66      	subs	r6, r4, #1
 8001e2e:	2c01      	cmp	r4, #1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x4f4>
 8001e32:	e0fd      	b.n	8002030 <__aeabi_dsub+0x6f0>
 8001e34:	4f7b      	ldr	r7, [pc, #492]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e36:	42bc      	cmp	r4, r7
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x4fc>
 8001e3a:	e107      	b.n	800204c <__aeabi_dsub+0x70c>
 8001e3c:	46b4      	mov	ip, r6
 8001e3e:	e69b      	b.n	8001b78 <__aeabi_dsub+0x238>
 8001e40:	4664      	mov	r4, ip
 8001e42:	2220      	movs	r2, #32
 8001e44:	1b12      	subs	r2, r2, r4
 8001e46:	000c      	movs	r4, r1
 8001e48:	4094      	lsls	r4, r2
 8001e4a:	0007      	movs	r7, r0
 8001e4c:	4090      	lsls	r0, r2
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	4664      	mov	r4, ip
 8001e52:	1e42      	subs	r2, r0, #1
 8001e54:	4190      	sbcs	r0, r2
 8001e56:	4662      	mov	r2, ip
 8001e58:	40e7      	lsrs	r7, r4
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	40d1      	lsrs	r1, r2
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	4304      	orrs	r4, r0
 8001e62:	185b      	adds	r3, r3, r1
 8001e64:	e6f3      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001e66:	4c6f      	ldr	r4, [pc, #444]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e68:	42a2      	cmp	r2, r4
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x52e>
 8001e6c:	e0d5      	b.n	800201a <__aeabi_dsub+0x6da>
 8001e6e:	4448      	add	r0, r9
 8001e70:	185b      	adds	r3, r3, r1
 8001e72:	4548      	cmp	r0, r9
 8001e74:	4189      	sbcs	r1, r1
 8001e76:	4249      	negs	r1, r1
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	07dc      	lsls	r4, r3, #31
 8001e7c:	0840      	lsrs	r0, r0, #1
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	4698      	mov	r8, r3
 8001e82:	0016      	movs	r6, r2
 8001e84:	4304      	orrs	r4, r0
 8001e86:	e6cc      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x54e>
 8001e8c:	e082      	b.n	8001f94 <__aeabi_dsub+0x654>
 8001e8e:	000a      	movs	r2, r1
 8001e90:	4302      	orrs	r2, r0
 8001e92:	d140      	bne.n	8001f16 <__aeabi_dsub+0x5d6>
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	2500      	movs	r5, #0
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	e713      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001e9c:	074b      	lsls	r3, r1, #29
 8001e9e:	08c2      	lsrs	r2, r0, #3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	465d      	mov	r5, fp
 8001ea4:	08cb      	lsrs	r3, r1, #3
 8001ea6:	e6c5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	1a84      	subs	r4, r0, r2
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	1acb      	subs	r3, r1, r3
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	465d      	mov	r5, fp
 8001eba:	e59e      	b.n	80019fa <__aeabi_dsub+0xba>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	0759      	lsls	r1, r3, #29
 8001ec0:	08d2      	lsrs	r2, r2, #3
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	e6f9      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001ec8:	464a      	mov	r2, r9
 8001eca:	1a14      	subs	r4, r2, r0
 8001ecc:	45a1      	cmp	r9, r4
 8001ece:	4192      	sbcs	r2, r2
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	4252      	negs	r2, r2
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	2601      	movs	r6, #1
 8001eda:	e586      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001edc:	464a      	mov	r2, r9
 8001ede:	0759      	lsls	r1, r3, #29
 8001ee0:	08d2      	lsrs	r2, r2, #3
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	e6a5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ee8:	464c      	mov	r4, r9
 8001eea:	4323      	orrs	r3, r4
 8001eec:	001c      	movs	r4, r3
 8001eee:	1e63      	subs	r3, r4, #1
 8001ef0:	419c      	sbcs	r4, r3
 8001ef2:	e65b      	b.n	8001bac <__aeabi_dsub+0x26c>
 8001ef4:	4665      	mov	r5, ip
 8001ef6:	001e      	movs	r6, r3
 8001ef8:	3d20      	subs	r5, #32
 8001efa:	40ee      	lsrs	r6, r5
 8001efc:	2c20      	cmp	r4, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x5cc>
 8001f00:	2540      	movs	r5, #64	; 0x40
 8001f02:	1b2d      	subs	r5, r5, r4
 8001f04:	40ab      	lsls	r3, r5
 8001f06:	464c      	mov	r4, r9
 8001f08:	431c      	orrs	r4, r3
 8001f0a:	46a2      	mov	sl, r4
 8001f0c:	4654      	mov	r4, sl
 8001f0e:	1e63      	subs	r3, r4, #1
 8001f10:	419c      	sbcs	r4, r3
 8001f12:	4334      	orrs	r4, r6
 8001f14:	e77d      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001f16:	074b      	lsls	r3, r1, #29
 8001f18:	08c2      	lsrs	r2, r0, #3
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	465d      	mov	r5, fp
 8001f1e:	08cb      	lsrs	r3, r1, #3
 8001f20:	e6cc      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f22:	000a      	movs	r2, r1
 8001f24:	4302      	orrs	r2, r0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x5ea>
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x458>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e681      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001f36:	464a      	mov	r2, r9
 8001f38:	1a84      	subs	r4, r0, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	4252      	negs	r2, r2
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	4698      	mov	r8, r3
 8001f46:	465d      	mov	r5, fp
 8001f48:	2601      	movs	r6, #1
 8001f4a:	e54e      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001f4c:	074b      	lsls	r3, r1, #29
 8001f4e:	08c2      	lsrs	r2, r0, #3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	08cb      	lsrs	r3, r1, #3
 8001f54:	e6b2      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f56:	464a      	mov	r2, r9
 8001f58:	1a14      	subs	r4, r2, r0
 8001f5a:	45a1      	cmp	r9, r4
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	1a5f      	subs	r7, r3, r1
 8001f60:	4252      	negs	r2, r2
 8001f62:	1aba      	subs	r2, r7, r2
 8001f64:	4690      	mov	r8, r2
 8001f66:	0212      	lsls	r2, r2, #8
 8001f68:	d56b      	bpl.n	8002042 <__aeabi_dsub+0x702>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a84      	subs	r4, r0, r2
 8001f6e:	42a0      	cmp	r0, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	4252      	negs	r2, r2
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	4698      	mov	r8, r3
 8001f7a:	465d      	mov	r5, fp
 8001f7c:	e564      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001f7e:	074b      	lsls	r3, r1, #29
 8001f80:	08c2      	lsrs	r2, r0, #3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	465d      	mov	r5, fp
 8001f86:	08cb      	lsrs	r3, r1, #3
 8001f88:	e698      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	08c2      	lsrs	r2, r0, #3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	08cb      	lsrs	r3, r1, #3
 8001f92:	e64f      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001f94:	000a      	movs	r2, r1
 8001f96:	4302      	orrs	r2, r0
 8001f98:	d090      	beq.n	8001ebc <__aeabi_dsub+0x57c>
 8001f9a:	464a      	mov	r2, r9
 8001f9c:	075c      	lsls	r4, r3, #29
 8001f9e:	08d2      	lsrs	r2, r2, #3
 8001fa0:	4314      	orrs	r4, r2
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	0312      	lsls	r2, r2, #12
 8001fa8:	4213      	tst	r3, r2
 8001faa:	d008      	beq.n	8001fbe <__aeabi_dsub+0x67e>
 8001fac:	08ce      	lsrs	r6, r1, #3
 8001fae:	4216      	tst	r6, r2
 8001fb0:	d105      	bne.n	8001fbe <__aeabi_dsub+0x67e>
 8001fb2:	08c0      	lsrs	r0, r0, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	4308      	orrs	r0, r1
 8001fb8:	0004      	movs	r4, r0
 8001fba:	465d      	mov	r5, fp
 8001fbc:	0033      	movs	r3, r6
 8001fbe:	0f61      	lsrs	r1, r4, #29
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	0749      	lsls	r1, r1, #29
 8001fc4:	08d2      	lsrs	r2, r2, #3
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	e678      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001fca:	074b      	lsls	r3, r1, #29
 8001fcc:	08c2      	lsrs	r2, r0, #3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	08cb      	lsrs	r3, r1, #3
 8001fd2:	e632      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001fd4:	4448      	add	r0, r9
 8001fd6:	185b      	adds	r3, r3, r1
 8001fd8:	4548      	cmp	r0, r9
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4698      	mov	r8, r3
 8001fde:	4252      	negs	r2, r2
 8001fe0:	4490      	add	r8, r2
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	0004      	movs	r4, r0
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_dsub+0x6ac>
 8001fea:	e61a      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001fec:	4642      	mov	r2, r8
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001ff0:	2601      	movs	r6, #1
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	4690      	mov	r8, r2
 8001ff6:	e614      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001ff8:	4666      	mov	r6, ip
 8001ffa:	001f      	movs	r7, r3
 8001ffc:	3e20      	subs	r6, #32
 8001ffe:	40f7      	lsrs	r7, r6
 8002000:	2c20      	cmp	r4, #32
 8002002:	d005      	beq.n	8002010 <__aeabi_dsub+0x6d0>
 8002004:	2640      	movs	r6, #64	; 0x40
 8002006:	1b36      	subs	r6, r6, r4
 8002008:	40b3      	lsls	r3, r6
 800200a:	464c      	mov	r4, r9
 800200c:	431c      	orrs	r4, r3
 800200e:	46a2      	mov	sl, r4
 8002010:	4654      	mov	r4, sl
 8002012:	1e63      	subs	r3, r4, #1
 8002014:	419c      	sbcs	r4, r3
 8002016:	433c      	orrs	r4, r7
 8002018:	e5c8      	b.n	8001bac <__aeabi_dsub+0x26c>
 800201a:	0011      	movs	r1, r2
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	e532      	b.n	8001a88 <__aeabi_dsub+0x148>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	000007fe 	.word	0x000007fe
 8002030:	464a      	mov	r2, r9
 8002032:	1814      	adds	r4, r2, r0
 8002034:	4284      	cmp	r4, r0
 8002036:	4192      	sbcs	r2, r2
 8002038:	185b      	adds	r3, r3, r1
 800203a:	4698      	mov	r8, r3
 800203c:	4252      	negs	r2, r2
 800203e:	4490      	add	r8, r2
 8002040:	e5e9      	b.n	8001c16 <__aeabi_dsub+0x2d6>
 8002042:	4642      	mov	r2, r8
 8002044:	4322      	orrs	r2, r4
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x70a>
 8002048:	e6a6      	b.n	8001d98 <__aeabi_dsub+0x458>
 800204a:	e5ea      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 800204c:	074b      	lsls	r3, r1, #29
 800204e:	08c2      	lsrs	r2, r0, #3
 8002050:	431a      	orrs	r2, r3
 8002052:	08cb      	lsrs	r3, r1, #3
 8002054:	e632      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8002056:	2200      	movs	r2, #0
 8002058:	4901      	ldr	r1, [pc, #4]	; (8002060 <__aeabi_dsub+0x720>)
 800205a:	0013      	movs	r3, r2
 800205c:	e514      	b.n	8001a88 <__aeabi_dsub+0x148>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__aeabi_dcmpun>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	0005      	movs	r5, r0
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <__aeabi_dcmpun+0x38>)
 800206a:	030c      	lsls	r4, r1, #12
 800206c:	0016      	movs	r6, r2
 800206e:	0049      	lsls	r1, r1, #1
 8002070:	031a      	lsls	r2, r3, #12
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	0d49      	lsrs	r1, r1, #21
 8002078:	0b12      	lsrs	r2, r2, #12
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	4281      	cmp	r1, r0
 800207e:	d008      	beq.n	8002092 <__aeabi_dcmpun+0x2e>
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__aeabi_dcmpun+0x38>)
 8002082:	2000      	movs	r0, #0
 8002084:	428b      	cmp	r3, r1
 8002086:	d103      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002088:	4332      	orrs	r2, r6
 800208a:	0010      	movs	r0, r2
 800208c:	1e42      	subs	r2, r0, #1
 800208e:	4190      	sbcs	r0, r2
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	2001      	movs	r0, #1
 8002094:	432c      	orrs	r4, r5
 8002096:	d1fb      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002098:	e7f2      	b.n	8002080 <__aeabi_dcmpun+0x1c>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_d2iz>:
 80020a0:	000a      	movs	r2, r1
 80020a2:	b530      	push	{r4, r5, lr}
 80020a4:	4c13      	ldr	r4, [pc, #76]	; (80020f4 <__aeabi_d2iz+0x54>)
 80020a6:	0053      	lsls	r3, r2, #1
 80020a8:	0309      	lsls	r1, r1, #12
 80020aa:	0005      	movs	r5, r0
 80020ac:	0b09      	lsrs	r1, r1, #12
 80020ae:	2000      	movs	r0, #0
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	0fd2      	lsrs	r2, r2, #31
 80020b4:	42a3      	cmp	r3, r4
 80020b6:	dd04      	ble.n	80020c2 <__aeabi_d2iz+0x22>
 80020b8:	480f      	ldr	r0, [pc, #60]	; (80020f8 <__aeabi_d2iz+0x58>)
 80020ba:	4283      	cmp	r3, r0
 80020bc:	dd02      	ble.n	80020c4 <__aeabi_d2iz+0x24>
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <__aeabi_d2iz+0x5c>)
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	bd30      	pop	{r4, r5, pc}
 80020c4:	2080      	movs	r0, #128	; 0x80
 80020c6:	0340      	lsls	r0, r0, #13
 80020c8:	4301      	orrs	r1, r0
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <__aeabi_d2iz+0x60>)
 80020cc:	1ac0      	subs	r0, r0, r3
 80020ce:	281f      	cmp	r0, #31
 80020d0:	dd08      	ble.n	80020e4 <__aeabi_d2iz+0x44>
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <__aeabi_d2iz+0x64>)
 80020d4:	1ac3      	subs	r3, r0, r3
 80020d6:	40d9      	lsrs	r1, r3
 80020d8:	000b      	movs	r3, r1
 80020da:	4258      	negs	r0, r3
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d1f0      	bne.n	80020c2 <__aeabi_d2iz+0x22>
 80020e0:	0018      	movs	r0, r3
 80020e2:	e7ee      	b.n	80020c2 <__aeabi_d2iz+0x22>
 80020e4:	4c08      	ldr	r4, [pc, #32]	; (8002108 <__aeabi_d2iz+0x68>)
 80020e6:	40c5      	lsrs	r5, r0
 80020e8:	46a4      	mov	ip, r4
 80020ea:	4463      	add	r3, ip
 80020ec:	4099      	lsls	r1, r3
 80020ee:	000b      	movs	r3, r1
 80020f0:	432b      	orrs	r3, r5
 80020f2:	e7f2      	b.n	80020da <__aeabi_d2iz+0x3a>
 80020f4:	000003fe 	.word	0x000003fe
 80020f8:	0000041d 	.word	0x0000041d
 80020fc:	7fffffff 	.word	0x7fffffff
 8002100:	00000433 	.word	0x00000433
 8002104:	00000413 	.word	0x00000413
 8002108:	fffffbed 	.word	0xfffffbed

0800210c <__aeabi_i2d>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	2800      	cmp	r0, #0
 8002110:	d016      	beq.n	8002140 <__aeabi_i2d+0x34>
 8002112:	17c3      	asrs	r3, r0, #31
 8002114:	18c5      	adds	r5, r0, r3
 8002116:	405d      	eors	r5, r3
 8002118:	0fc4      	lsrs	r4, r0, #31
 800211a:	0028      	movs	r0, r5
 800211c:	f000 f91c 	bl	8002358 <__clzsi2>
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <__aeabi_i2d+0x5c>)
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	280a      	cmp	r0, #10
 8002126:	dc16      	bgt.n	8002156 <__aeabi_i2d+0x4a>
 8002128:	0003      	movs	r3, r0
 800212a:	002e      	movs	r6, r5
 800212c:	3315      	adds	r3, #21
 800212e:	409e      	lsls	r6, r3
 8002130:	230b      	movs	r3, #11
 8002132:	1a18      	subs	r0, r3, r0
 8002134:	40c5      	lsrs	r5, r0
 8002136:	0553      	lsls	r3, r2, #21
 8002138:	032d      	lsls	r5, r5, #12
 800213a:	0b2d      	lsrs	r5, r5, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	e003      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002140:	2400      	movs	r4, #0
 8002142:	2300      	movs	r3, #0
 8002144:	2500      	movs	r5, #0
 8002146:	2600      	movs	r6, #0
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	432b      	orrs	r3, r5
 800214c:	07e4      	lsls	r4, r4, #31
 800214e:	4323      	orrs	r3, r4
 8002150:	0030      	movs	r0, r6
 8002152:	0019      	movs	r1, r3
 8002154:	bd70      	pop	{r4, r5, r6, pc}
 8002156:	380b      	subs	r0, #11
 8002158:	4085      	lsls	r5, r0
 800215a:	0553      	lsls	r3, r2, #21
 800215c:	032d      	lsls	r5, r5, #12
 800215e:	2600      	movs	r6, #0
 8002160:	0b2d      	lsrs	r5, r5, #12
 8002162:	0d5b      	lsrs	r3, r3, #21
 8002164:	e7f0      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	0000041e 	.word	0x0000041e

0800216c <__aeabi_ui2d>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e04      	subs	r4, r0, #0
 8002170:	d010      	beq.n	8002194 <__aeabi_ui2d+0x28>
 8002172:	f000 f8f1 	bl	8002358 <__clzsi2>
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <__aeabi_ui2d+0x48>)
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	280a      	cmp	r0, #10
 800217c:	dc11      	bgt.n	80021a2 <__aeabi_ui2d+0x36>
 800217e:	220b      	movs	r2, #11
 8002180:	0021      	movs	r1, r4
 8002182:	1a12      	subs	r2, r2, r0
 8002184:	40d1      	lsrs	r1, r2
 8002186:	3015      	adds	r0, #21
 8002188:	030a      	lsls	r2, r1, #12
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	4084      	lsls	r4, r0
 800218e:	0b12      	lsrs	r2, r2, #12
 8002190:	0d5b      	lsrs	r3, r3, #21
 8002192:	e001      	b.n	8002198 <__aeabi_ui2d+0x2c>
 8002194:	2300      	movs	r3, #0
 8002196:	2200      	movs	r2, #0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	4313      	orrs	r3, r2
 800219c:	0020      	movs	r0, r4
 800219e:	0019      	movs	r1, r3
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	0022      	movs	r2, r4
 80021a4:	380b      	subs	r0, #11
 80021a6:	4082      	lsls	r2, r0
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	0312      	lsls	r2, r2, #12
 80021ac:	2400      	movs	r4, #0
 80021ae:	0b12      	lsrs	r2, r2, #12
 80021b0:	0d5b      	lsrs	r3, r3, #21
 80021b2:	e7f1      	b.n	8002198 <__aeabi_ui2d+0x2c>
 80021b4:	0000041e 	.word	0x0000041e

080021b8 <__aeabi_f2d>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0043      	lsls	r3, r0, #1
 80021bc:	0246      	lsls	r6, r0, #9
 80021be:	0fc4      	lsrs	r4, r0, #31
 80021c0:	20fe      	movs	r0, #254	; 0xfe
 80021c2:	0e1b      	lsrs	r3, r3, #24
 80021c4:	1c59      	adds	r1, r3, #1
 80021c6:	0a75      	lsrs	r5, r6, #9
 80021c8:	4208      	tst	r0, r1
 80021ca:	d00c      	beq.n	80021e6 <__aeabi_f2d+0x2e>
 80021cc:	22e0      	movs	r2, #224	; 0xe0
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4694      	mov	ip, r2
 80021d2:	076d      	lsls	r5, r5, #29
 80021d4:	0b36      	lsrs	r6, r6, #12
 80021d6:	4463      	add	r3, ip
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	4333      	orrs	r3, r6
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0028      	movs	r0, r5
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <__aeabi_f2d+0x5c>
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	d01b      	beq.n	8002226 <__aeabi_f2d+0x6e>
 80021ee:	0028      	movs	r0, r5
 80021f0:	f000 f8b2 	bl	8002358 <__clzsi2>
 80021f4:	280a      	cmp	r0, #10
 80021f6:	dc1c      	bgt.n	8002232 <__aeabi_f2d+0x7a>
 80021f8:	230b      	movs	r3, #11
 80021fa:	002a      	movs	r2, r5
 80021fc:	1a1b      	subs	r3, r3, r0
 80021fe:	40da      	lsrs	r2, r3
 8002200:	0003      	movs	r3, r0
 8002202:	3315      	adds	r3, #21
 8002204:	409d      	lsls	r5, r3
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <__aeabi_f2d+0x88>)
 8002208:	0312      	lsls	r2, r2, #12
 800220a:	1a1b      	subs	r3, r3, r0
 800220c:	055b      	lsls	r3, r3, #21
 800220e:	0b16      	lsrs	r6, r2, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	e7e1      	b.n	80021d8 <__aeabi_f2d+0x20>
 8002214:	2d00      	cmp	r5, #0
 8002216:	d009      	beq.n	800222c <__aeabi_f2d+0x74>
 8002218:	0b32      	lsrs	r2, r6, #12
 800221a:	2680      	movs	r6, #128	; 0x80
 800221c:	0336      	lsls	r6, r6, #12
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <__aeabi_f2d+0x8c>)
 8002220:	076d      	lsls	r5, r5, #29
 8002222:	4316      	orrs	r6, r2
 8002224:	e7d8      	b.n	80021d8 <__aeabi_f2d+0x20>
 8002226:	2300      	movs	r3, #0
 8002228:	2600      	movs	r6, #0
 800222a:	e7d5      	b.n	80021d8 <__aeabi_f2d+0x20>
 800222c:	2600      	movs	r6, #0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <__aeabi_f2d+0x8c>)
 8002230:	e7d2      	b.n	80021d8 <__aeabi_f2d+0x20>
 8002232:	0003      	movs	r3, r0
 8002234:	002a      	movs	r2, r5
 8002236:	3b0b      	subs	r3, #11
 8002238:	409a      	lsls	r2, r3
 800223a:	2500      	movs	r5, #0
 800223c:	e7e3      	b.n	8002206 <__aeabi_f2d+0x4e>
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	00000389 	.word	0x00000389
 8002244:	000007ff 	.word	0x000007ff

08002248 <__aeabi_d2f>:
 8002248:	0002      	movs	r2, r0
 800224a:	004b      	lsls	r3, r1, #1
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	0308      	lsls	r0, r1, #12
 8002250:	0d5b      	lsrs	r3, r3, #21
 8002252:	4e3d      	ldr	r6, [pc, #244]	; (8002348 <__aeabi_d2f+0x100>)
 8002254:	0fcc      	lsrs	r4, r1, #31
 8002256:	0a40      	lsrs	r0, r0, #9
 8002258:	0f51      	lsrs	r1, r2, #29
 800225a:	1c5f      	adds	r7, r3, #1
 800225c:	4308      	orrs	r0, r1
 800225e:	00d5      	lsls	r5, r2, #3
 8002260:	4237      	tst	r7, r6
 8002262:	d00a      	beq.n	800227a <__aeabi_d2f+0x32>
 8002264:	4939      	ldr	r1, [pc, #228]	; (800234c <__aeabi_d2f+0x104>)
 8002266:	185e      	adds	r6, r3, r1
 8002268:	2efe      	cmp	r6, #254	; 0xfe
 800226a:	dd16      	ble.n	800229a <__aeabi_d2f+0x52>
 800226c:	23ff      	movs	r3, #255	; 0xff
 800226e:	2100      	movs	r1, #0
 8002270:	05db      	lsls	r3, r3, #23
 8002272:	430b      	orrs	r3, r1
 8002274:	07e0      	lsls	r0, r4, #31
 8002276:	4318      	orrs	r0, r3
 8002278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <__aeabi_d2f+0x44>
 800227e:	4328      	orrs	r0, r5
 8002280:	d027      	beq.n	80022d2 <__aeabi_d2f+0x8a>
 8002282:	2105      	movs	r1, #5
 8002284:	0189      	lsls	r1, r1, #6
 8002286:	0a49      	lsrs	r1, r1, #9
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e7f1      	b.n	8002270 <__aeabi_d2f+0x28>
 800228c:	4305      	orrs	r5, r0
 800228e:	d0ed      	beq.n	800226c <__aeabi_d2f+0x24>
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	03c9      	lsls	r1, r1, #15
 8002294:	23ff      	movs	r3, #255	; 0xff
 8002296:	4301      	orrs	r1, r0
 8002298:	e7ea      	b.n	8002270 <__aeabi_d2f+0x28>
 800229a:	2e00      	cmp	r6, #0
 800229c:	dd1c      	ble.n	80022d8 <__aeabi_d2f+0x90>
 800229e:	0192      	lsls	r2, r2, #6
 80022a0:	0011      	movs	r1, r2
 80022a2:	1e4a      	subs	r2, r1, #1
 80022a4:	4191      	sbcs	r1, r2
 80022a6:	00c0      	lsls	r0, r0, #3
 80022a8:	0f6d      	lsrs	r5, r5, #29
 80022aa:	4301      	orrs	r1, r0
 80022ac:	4329      	orrs	r1, r5
 80022ae:	074b      	lsls	r3, r1, #29
 80022b0:	d048      	beq.n	8002344 <__aeabi_d2f+0xfc>
 80022b2:	230f      	movs	r3, #15
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d000      	beq.n	80022bc <__aeabi_d2f+0x74>
 80022ba:	3104      	adds	r1, #4
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	04db      	lsls	r3, r3, #19
 80022c0:	400b      	ands	r3, r1
 80022c2:	d03f      	beq.n	8002344 <__aeabi_d2f+0xfc>
 80022c4:	1c72      	adds	r2, r6, #1
 80022c6:	2efe      	cmp	r6, #254	; 0xfe
 80022c8:	d0d0      	beq.n	800226c <__aeabi_d2f+0x24>
 80022ca:	0189      	lsls	r1, r1, #6
 80022cc:	0a49      	lsrs	r1, r1, #9
 80022ce:	b2d3      	uxtb	r3, r2
 80022d0:	e7ce      	b.n	8002270 <__aeabi_d2f+0x28>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	e7cb      	b.n	8002270 <__aeabi_d2f+0x28>
 80022d8:	0032      	movs	r2, r6
 80022da:	3217      	adds	r2, #23
 80022dc:	db22      	blt.n	8002324 <__aeabi_d2f+0xdc>
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	221e      	movs	r2, #30
 80022e2:	0409      	lsls	r1, r1, #16
 80022e4:	4308      	orrs	r0, r1
 80022e6:	1b92      	subs	r2, r2, r6
 80022e8:	2a1f      	cmp	r2, #31
 80022ea:	dd1d      	ble.n	8002328 <__aeabi_d2f+0xe0>
 80022ec:	2102      	movs	r1, #2
 80022ee:	4249      	negs	r1, r1
 80022f0:	1b8e      	subs	r6, r1, r6
 80022f2:	0001      	movs	r1, r0
 80022f4:	40f1      	lsrs	r1, r6
 80022f6:	000e      	movs	r6, r1
 80022f8:	2a20      	cmp	r2, #32
 80022fa:	d004      	beq.n	8002306 <__aeabi_d2f+0xbe>
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <__aeabi_d2f+0x108>)
 80022fe:	4694      	mov	ip, r2
 8002300:	4463      	add	r3, ip
 8002302:	4098      	lsls	r0, r3
 8002304:	4305      	orrs	r5, r0
 8002306:	0029      	movs	r1, r5
 8002308:	1e4d      	subs	r5, r1, #1
 800230a:	41a9      	sbcs	r1, r5
 800230c:	4331      	orrs	r1, r6
 800230e:	2600      	movs	r6, #0
 8002310:	074b      	lsls	r3, r1, #29
 8002312:	d1ce      	bne.n	80022b2 <__aeabi_d2f+0x6a>
 8002314:	2080      	movs	r0, #128	; 0x80
 8002316:	000b      	movs	r3, r1
 8002318:	04c0      	lsls	r0, r0, #19
 800231a:	2201      	movs	r2, #1
 800231c:	4003      	ands	r3, r0
 800231e:	4201      	tst	r1, r0
 8002320:	d1d3      	bne.n	80022ca <__aeabi_d2f+0x82>
 8002322:	e7af      	b.n	8002284 <__aeabi_d2f+0x3c>
 8002324:	2300      	movs	r3, #0
 8002326:	e7ac      	b.n	8002282 <__aeabi_d2f+0x3a>
 8002328:	490a      	ldr	r1, [pc, #40]	; (8002354 <__aeabi_d2f+0x10c>)
 800232a:	468c      	mov	ip, r1
 800232c:	0029      	movs	r1, r5
 800232e:	4463      	add	r3, ip
 8002330:	40d1      	lsrs	r1, r2
 8002332:	409d      	lsls	r5, r3
 8002334:	000a      	movs	r2, r1
 8002336:	0029      	movs	r1, r5
 8002338:	4098      	lsls	r0, r3
 800233a:	1e4d      	subs	r5, r1, #1
 800233c:	41a9      	sbcs	r1, r5
 800233e:	4301      	orrs	r1, r0
 8002340:	4311      	orrs	r1, r2
 8002342:	e7e4      	b.n	800230e <__aeabi_d2f+0xc6>
 8002344:	0033      	movs	r3, r6
 8002346:	e79d      	b.n	8002284 <__aeabi_d2f+0x3c>
 8002348:	000007fe 	.word	0x000007fe
 800234c:	fffffc80 	.word	0xfffffc80
 8002350:	fffffca2 	.word	0xfffffca2
 8002354:	fffffc82 	.word	0xfffffc82

08002358 <__clzsi2>:
 8002358:	211c      	movs	r1, #28
 800235a:	2301      	movs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	4298      	cmp	r0, r3
 8002360:	d301      	bcc.n	8002366 <__clzsi2+0xe>
 8002362:	0c00      	lsrs	r0, r0, #16
 8002364:	3910      	subs	r1, #16
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	4298      	cmp	r0, r3
 800236a:	d301      	bcc.n	8002370 <__clzsi2+0x18>
 800236c:	0a00      	lsrs	r0, r0, #8
 800236e:	3908      	subs	r1, #8
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0x22>
 8002376:	0900      	lsrs	r0, r0, #4
 8002378:	3904      	subs	r1, #4
 800237a:	a202      	add	r2, pc, #8	; (adr r2, 8002384 <__clzsi2+0x2c>)
 800237c:	5c10      	ldrb	r0, [r2, r0]
 800237e:	1840      	adds	r0, r0, r1
 8002380:	4770      	bx	lr
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	02020304 	.word	0x02020304
 8002388:	01010101 	.word	0x01010101
	...

08002394 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	000a      	movs	r2, r1
 800239e:	1cfb      	adds	r3, r7, #3
 80023a0:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1cfa      	adds	r2, r7, #3
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set LOW
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4818      	ldr	r0, [pc, #96]	; (8002428 <motor_wheel_init+0x94>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	0019      	movs	r1, r3
 80023cc:	f002 f87e 	bl	80044cc <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <motor_wheel_init+0x94>)
 80023da:	2200      	movs	r2, #0
 80023dc:	2101      	movs	r1, #1
 80023de:	0018      	movs	r0, r3
 80023e0:	f002 f874 	bl	80044cc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
	}
}
 80023e4:	e01b      	b.n	800241e <motor_wheel_init+0x8a>
	else if (str->id == 2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d106      	bne.n	80023fc <motor_wheel_init+0x68>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <motor_wheel_init+0x94>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	0018      	movs	r0, r3
 80023f6:	f002 f869 	bl	80044cc <HAL_GPIO_WritePin>
}
 80023fa:	e010      	b.n	800241e <motor_wheel_init+0x8a>
	else if (str->id == 3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d106      	bne.n	8002412 <motor_wheel_init+0x7e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <motor_wheel_init+0x94>)
 8002406:	2201      	movs	r2, #1
 8002408:	2101      	movs	r1, #1
 800240a:	0018      	movs	r0, r3
 800240c:	f002 f85e 	bl	80044cc <HAL_GPIO_WritePin>
}
 8002410:	e005      	b.n	800241e <motor_wheel_init+0x8a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <motor_wheel_init+0x94>)
 8002414:	2200      	movs	r2, #0
 8002416:	2102      	movs	r1, #2
 8002418:	0018      	movs	r0, r3
 800241a:	f002 f857 	bl	80044cc <HAL_GPIO_WritePin>
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	48000800 	.word	0x48000800

0800242c <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, uint8_t LPU) // PWM Velocity Control
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	701a      	strb	r2, [r3, #0]
	uint8_t throttle = LPU;//fabs(LPU) * 100;
 800243a:	2117      	movs	r1, #23
 800243c:	187b      	adds	r3, r7, r1
 800243e:	1dfa      	adds	r2, r7, #7
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	701a      	strb	r2, [r3, #0]
	if (str->id == 1)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <motorPWM_pulse+0x2c>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	187a      	adds	r2, r7, r1
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
	else if (str->id == 3)
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
	else if (str->id == 4)
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};
 8002456:	e01f      	b.n	8002498 <motorPWM_pulse+0x6c>
	else if (str->id == 2)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d106      	bne.n	800246e <motorPWM_pulse+0x42>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2217      	movs	r2, #23
 8002466:	18ba      	adds	r2, r7, r2
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
};
 800246c:	e014      	b.n	8002498 <motorPWM_pulse+0x6c>
	else if (str->id == 3)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d106      	bne.n	8002484 <motorPWM_pulse+0x58>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2217      	movs	r2, #23
 800247c:	18ba      	adds	r2, r7, r2
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c
};
 8002482:	e009      	b.n	8002498 <motorPWM_pulse+0x6c>
	else if (str->id == 4)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d105      	bne.n	8002498 <motorPWM_pulse+0x6c>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2217      	movs	r2, #23
 8002492:	18ba      	adds	r2, r7, r2
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
};
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b006      	add	sp, #24
 800249e:	bd80      	pop	{r7, pc}

080024a0 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	000a      	movs	r2, r1
 80024aa:	1cfb      	adds	r3, r7, #3
 80024ac:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	1cfa      	adds	r2, r7, #3
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	789b      	ldrb	r3, [r3, #2]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10a      	bne.n	80024d4 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	480a      	ldr	r0, [pc, #40]	; (80024ec <motor_break+0x4c>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	0019      	movs	r1, r3
 80024c8:	f002 f800 	bl	80044cc <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 80024d2:	e006      	b.n	80024e2 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <motor_break+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	0019      	movs	r1, r3
 80024de:	f001 fff5 	bl	80044cc <HAL_GPIO_WritePin>
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	48000800 	.word	0x48000800

080024f0 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	0008      	movs	r0, r1
 80024fa:	0011      	movs	r1, r2
 80024fc:	1cfb      	adds	r3, r7, #3
 80024fe:	1c02      	adds	r2, r0, #0
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	1cbb      	adds	r3, r7, #2
 8002504:	1c0a      	adds	r2, r1, #0
 8002506:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1cfa      	adds	r2, r7, #3
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1cba      	adds	r2, r7, #2
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	705a      	strb	r2, [r3, #1]
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002536:	46c6      	mov	lr, r8
 8002538:	b500      	push	{lr}
 800253a:	b0d4      	sub	sp, #336	; 0x150
 800253c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253e:	f001 fbdf 	bl	8003d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002542:	f000 fbff 	bl	8002d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002546:	f000 fe7b 	bl	8003240 <MX_GPIO_Init>
  MX_TIM3_Init();
 800254a:	f000 fd0f 	bl	8002f6c <MX_TIM3_Init>
  MX_TIM1_Init();
 800254e:	f000 fc39 	bl	8002dc4 <MX_TIM1_Init>
  MX_TIM15_Init();
 8002552:	f000 fd87 	bl	8003064 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002556:	f000 fe43 	bl	80031e0 <MX_USART2_UART_Init>
	  NVIC_SetPriority( TIM15_IRQn, my_priority + 1 );
	  }*/
  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <main+0x224>)
 800255c:	2100      	movs	r1, #0
 800255e:	0018      	movs	r0, r3
 8002560:	f002 feb2 	bl	80052c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002564:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <main+0x224>)
 8002566:	2104      	movs	r1, #4
 8002568:	0018      	movs	r0, r3
 800256a:	f002 fead 	bl	80052c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800256e:	4b7a      	ldr	r3, [pc, #488]	; (8002758 <main+0x224>)
 8002570:	2108      	movs	r1, #8
 8002572:	0018      	movs	r0, r3
 8002574:	f002 fea8 	bl	80052c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002578:	4b77      	ldr	r3, [pc, #476]	; (8002758 <main+0x224>)
 800257a:	210c      	movs	r1, #12
 800257c:	0018      	movs	r0, r3
 800257e:	f002 fea3 	bl	80052c8 <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 8002582:	23b4      	movs	r3, #180	; 0xb4
 8002584:	2210      	movs	r2, #16
 8002586:	4694      	mov	ip, r2
 8002588:	44bc      	add	ip, r7
 800258a:	4463      	add	r3, ip
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	3304      	adds	r3, #4
 8002592:	223d      	movs	r2, #61	; 0x3d
 8002594:	2100      	movs	r1, #0
 8002596:	0018      	movs	r0, r3
 8002598:	f005 fcae 	bl	8007ef8 <memset>
  //uint8_t number1[8] = {'\0'};
  //uint8_t number2[8] = {'\0'};
  //uint8_t number3[8] = {'\0'};
  //uint8_t number4[8] = {'\0'};
  float speed1 = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	2292      	movs	r2, #146	; 0x92
 80025a0:	0052      	lsls	r2, r2, #1
 80025a2:	2110      	movs	r1, #16
 80025a4:	468c      	mov	ip, r1
 80025a6:	44bc      	add	ip, r7
 80025a8:	4462      	add	r2, ip
 80025aa:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	2290      	movs	r2, #144	; 0x90
 80025b0:	0052      	lsls	r2, r2, #1
 80025b2:	2110      	movs	r1, #16
 80025b4:	468c      	mov	ip, r1
 80025b6:	44bc      	add	ip, r7
 80025b8:	4462      	add	r2, ip
 80025ba:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	228e      	movs	r2, #142	; 0x8e
 80025c0:	0052      	lsls	r2, r2, #1
 80025c2:	2110      	movs	r1, #16
 80025c4:	468c      	mov	ip, r1
 80025c6:	44bc      	add	ip, r7
 80025c8:	4462      	add	r2, ip
 80025ca:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	228c      	movs	r2, #140	; 0x8c
 80025d0:	0052      	lsls	r2, r2, #1
 80025d2:	2110      	movs	r1, #16
 80025d4:	468c      	mov	ip, r1
 80025d6:	44bc      	add	ip, r7
 80025d8:	4462      	add	r2, ip
 80025da:	6013      	str	r3, [r2, #0]
  uint8_t cycleCounter = 0;
 80025dc:	2318      	movs	r3, #24
 80025de:	33ff      	adds	r3, #255	; 0xff
 80025e0:	2210      	movs	r2, #16
 80025e2:	4694      	mov	ip, r2
 80025e4:	44bc      	add	ip, r7
 80025e6:	4463      	add	r3, ip
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	2288      	movs	r2, #136	; 0x88
 80025f0:	0052      	lsls	r2, r2, #1
 80025f2:	2110      	movs	r1, #16
 80025f4:	468c      	mov	ip, r1
 80025f6:	44bc      	add	ip, r7
 80025f8:	4462      	add	r2, ip
 80025fa:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 80025fc:	2364      	movs	r3, #100	; 0x64
 80025fe:	2210      	movs	r2, #16
 8002600:	4694      	mov	ip, r2
 8002602:	44bc      	add	ip, r7
 8002604:	4463      	add	r3, ip
 8002606:	0018      	movs	r0, r3
 8002608:	2350      	movs	r3, #80	; 0x50
 800260a:	001a      	movs	r2, r3
 800260c:	2100      	movs	r1, #0
 800260e:	f005 fc73 	bl	8007ef8 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  int pulse_counter = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	22fc      	movs	r2, #252	; 0xfc
 8002616:	2110      	movs	r1, #16
 8002618:	468c      	mov	ip, r1
 800261a:	44bc      	add	ip, r7
 800261c:	4462      	add	r2, ip
 800261e:	6013      	str	r3, [r2, #0]
  int stage = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	22f8      	movs	r2, #248	; 0xf8
 8002624:	2110      	movs	r1, #16
 8002626:	468c      	mov	ip, r1
 8002628:	44bc      	add	ip, r7
 800262a:	4462      	add	r2, ip
 800262c:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800262e:	4b4b      	ldr	r3, [pc, #300]	; (800275c <main+0x228>)
 8002630:	2100      	movs	r1, #0
 8002632:	0018      	movs	r0, r3
 8002634:	f002 fc82 	bl	8004f3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002638:	4b48      	ldr	r3, [pc, #288]	; (800275c <main+0x228>)
 800263a:	2104      	movs	r1, #4
 800263c:	0018      	movs	r0, r3
 800263e:	f002 fc7d 	bl	8004f3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002642:	4b46      	ldr	r3, [pc, #280]	; (800275c <main+0x228>)
 8002644:	2108      	movs	r1, #8
 8002646:	0018      	movs	r0, r3
 8002648:	f002 fc78 	bl	8004f3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800264c:	4b43      	ldr	r3, [pc, #268]	; (800275c <main+0x228>)
 800264e:	210c      	movs	r1, #12
 8002650:	0018      	movs	r0, r3
 8002652:	f002 fc73 	bl	8004f3c <HAL_TIM_PWM_Start>

  //HAL_TIM_Base_Start_IT(&htim15);
  //HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
  //HAL_TIM_OnePulse_Start(&htim15, TIM_CHANNEL_2);
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 8002656:	4b42      	ldr	r3, [pc, #264]	; (8002760 <main+0x22c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2202      	movs	r2, #2
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 800265e:	4b40      	ldr	r3, [pc, #256]	; (8002760 <main+0x22c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2202      	movs	r2, #2
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
  //HAL_TIM_Base_Start(&htim16);
  // Serial OUT temp string
  uint8_t info[100] = {'\0'};
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <main+0x230>)
 8002668:	2294      	movs	r2, #148	; 0x94
 800266a:	0052      	lsls	r2, r2, #1
 800266c:	4694      	mov	ip, r2
 800266e:	2210      	movs	r2, #16
 8002670:	4690      	mov	r8, r2
 8002672:	44b8      	add	r8, r7
 8002674:	44c4      	add	ip, r8
 8002676:	4463      	add	r3, ip
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	3304      	adds	r3, #4
 800267e:	2260      	movs	r2, #96	; 0x60
 8002680:	2100      	movs	r1, #0
 8002682:	0018      	movs	r0, r3
 8002684:	f005 fc38 	bl	8007ef8 <memset>

  // SETUP
  for (int i = 0; i < 4; i++)
 8002688:	2300      	movs	r3, #0
 800268a:	2286      	movs	r2, #134	; 0x86
 800268c:	0052      	lsls	r2, r2, #1
 800268e:	2110      	movs	r1, #16
 8002690:	468c      	mov	ip, r1
 8002692:	44bc      	add	ip, r7
 8002694:	4462      	add	r2, ip
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e03a      	b.n	8002710 <main+0x1dc>
  {
	  pMW[i] = &MW[i];
 800269a:	2486      	movs	r4, #134	; 0x86
 800269c:	0064      	lsls	r4, r4, #1
 800269e:	2510      	movs	r5, #16
 80026a0:	197b      	adds	r3, r7, r5
 80026a2:	191b      	adds	r3, r3, r4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	00da      	lsls	r2, r3, #3
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <main+0x234>)
 80026aa:	18d1      	adds	r1, r2, r3
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <main+0x238>)
 80026ae:	197a      	adds	r2, r7, r5
 80026b0:	1912      	adds	r2, r2, r4
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 80026b8:	4b2c      	ldr	r3, [pc, #176]	; (800276c <main+0x238>)
 80026ba:	197a      	adds	r2, r7, r5
 80026bc:	1912      	adds	r2, r2, r4
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	58d2      	ldr	r2, [r2, r3]
 80026c4:	197b      	adds	r3, r7, r5
 80026c6:	191b      	adds	r3, r3, r4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7ff fe5e 	bl	8002394 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 80026d8:	4b24      	ldr	r3, [pc, #144]	; (800276c <main+0x238>)
 80026da:	197a      	adds	r2, r7, r5
 80026dc:	1912      	adds	r2, r2, r4
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	58d1      	ldr	r1, [r2, r3]
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <main+0x228>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff fe9f 	bl	800242c <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <main+0x238>)
 80026f0:	197a      	adds	r2, r7, r5
 80026f2:	1912      	adds	r2, r2, r4
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	58d3      	ldr	r3, [r2, r3]
 80026fa:	2100      	movs	r1, #0
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fecf 	bl	80024a0 <motor_break>
  for (int i = 0; i < 4; i++)
 8002702:	197b      	adds	r3, r7, r5
 8002704:	191b      	adds	r3, r3, r4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	197a      	adds	r2, r7, r5
 800270c:	1912      	adds	r2, r2, r4
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	2386      	movs	r3, #134	; 0x86
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2210      	movs	r2, #16
 8002716:	4694      	mov	ip, r2
 8002718:	44bc      	add	ip, r7
 800271a:	4463      	add	r3, ip
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b03      	cmp	r3, #3
 8002720:	ddbb      	ble.n	800269a <main+0x166>
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);


  // basicly - clear all uart queues
  //__HAL_UART_FLUSH_DRREGISTER(&huart2);
  HAL_UART_Receive_DMA(&huart2, &UART2_rxBuffer, 1);
 8002722:	4913      	ldr	r1, [pc, #76]	; (8002770 <main+0x23c>)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <main+0x240>)
 8002726:	2201      	movs	r2, #1
 8002728:	0018      	movs	r0, r3
 800272a:	f004 f8e9 	bl	8006900 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, info, strlen(info), 100);
 800272e:	2410      	movs	r4, #16
 8002730:	193b      	adds	r3, r7, r4
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fce8 	bl	8000108 <strlen>
 8002738:	0003      	movs	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	1939      	adds	r1, r7, r4
 800273e:	480d      	ldr	r0, [pc, #52]	; (8002774 <main+0x240>)
 8002740:	2364      	movs	r3, #100	; 0x64
 8002742:	f003 ffd3 	bl	80066ec <HAL_UART_Transmit>

  //uint8_t UART1_rxBuffer[12] = {0};
  //HAL_UART_Receive (&huart1, UART1_rxBuffer, 12, 5000); // read 12 bytes, 5000 ms timeout
  //HAL_UART_Receive_IT(&huart2, &rxChar, 1);

  for (int i = 0; i < 2; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	2284      	movs	r2, #132	; 0x84
 800274a:	0052      	lsls	r2, r2, #1
 800274c:	2110      	movs	r1, #16
 800274e:	468c      	mov	ip, r1
 8002750:	44bc      	add	ip, r7
 8002752:	4462      	add	r2, ip
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e040      	b.n	80027da <main+0x2a6>
 8002758:	20000360 	.word	0x20000360
 800275c:	200003d8 	.word	0x200003d8
 8002760:	20000318 	.word	0x20000318
 8002764:	fffffed8 	.word	0xfffffed8
 8002768:	200003b8 	.word	0x200003b8
 800276c:	200003a8 	.word	0x200003a8
 8002770:	2000028c 	.word	0x2000028c
 8002774:	20000420 	.word	0x20000420
   {
 	  pLM[i] = &LM[i];
 8002778:	2084      	movs	r0, #132	; 0x84
 800277a:	0040      	lsls	r0, r0, #1
 800277c:	2510      	movs	r5, #16
 800277e:	197b      	adds	r3, r7, r5
 8002780:	181b      	adds	r3, r3, r0
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	0013      	movs	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	189b      	adds	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4aeb      	ldr	r2, [pc, #940]	; (8002b3c <main+0x608>)
 800278e:	1899      	adds	r1, r3, r2
 8002790:	4beb      	ldr	r3, [pc, #940]	; (8002b40 <main+0x60c>)
 8002792:	197a      	adds	r2, r7, r5
 8002794:	1812      	adds	r2, r2, r0
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	50d1      	str	r1, [r2, r3]
 	  linear_motor_init(pLM[i], i+1, i); // init structure
 800279c:	4be8      	ldr	r3, [pc, #928]	; (8002b40 <main+0x60c>)
 800279e:	0001      	movs	r1, r0
 80027a0:	197a      	adds	r2, r7, r5
 80027a2:	1852      	adds	r2, r2, r1
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	58d0      	ldr	r0, [r2, r3]
 80027aa:	000a      	movs	r2, r1
 80027ac:	197b      	adds	r3, r7, r5
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	0014      	movs	r4, r2
 80027ba:	2110      	movs	r1, #16
 80027bc:	468c      	mov	ip, r1
 80027be:	44bc      	add	ip, r7
 80027c0:	4462      	add	r2, ip
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	f7ff fe92 	bl	80024f0 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	191b      	adds	r3, r3, r4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	197a      	adds	r2, r7, r5
 80027d6:	1912      	adds	r2, r2, r4
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	2384      	movs	r3, #132	; 0x84
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2210      	movs	r2, #16
 80027e0:	4694      	mov	ip, r2
 80027e2:	44bc      	add	ip, r7
 80027e4:	4463      	add	r3, ip
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	ddc5      	ble.n	8002778 <main+0x244>
   }
  //linear_motor_set_target(pLM[1], 10000);
  //linear_motor_pulse(pLM[1], &htim15, &linearPulse_1);
  //set_linear_motor(10050, 0);
  Init_Done = 1;
 80027ec:	4bd5      	ldr	r3, [pc, #852]	; (8002b44 <main+0x610>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
	  //HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 30);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 80027f2:	2118      	movs	r1, #24
 80027f4:	31ff      	adds	r1, #255	; 0xff
 80027f6:	2010      	movs	r0, #16
 80027f8:	183b      	adds	r3, r7, r0
 80027fa:	185b      	adds	r3, r3, r1
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	185b      	adds	r3, r3, r1
 8002802:	3201      	adds	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 8002806:	183b      	adds	r3, r7, r0
 8002808:	185b      	adds	r3, r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2bff      	cmp	r3, #255	; 0xff
 800280e:	d103      	bne.n	8002818 <main+0x2e4>
	{
		cycleCounter = 1;
 8002810:	183b      	adds	r3, r7, r0
 8002812:	185b      	adds	r3, r3, r1
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 8002818:	2300      	movs	r3, #0
 800281a:	2492      	movs	r4, #146	; 0x92
 800281c:	0064      	lsls	r4, r4, #1
 800281e:	2510      	movs	r5, #16
 8002820:	197a      	adds	r2, r7, r5
 8002822:	1912      	adds	r2, r2, r4
 8002824:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 8002826:	2300      	movs	r3, #0
 8002828:	2290      	movs	r2, #144	; 0x90
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	2110      	movs	r1, #16
 800282e:	468c      	mov	ip, r1
 8002830:	44bc      	add	ip, r7
 8002832:	4462      	add	r2, ip
 8002834:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 8002836:	2300      	movs	r3, #0
 8002838:	228e      	movs	r2, #142	; 0x8e
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	2110      	movs	r1, #16
 800283e:	468c      	mov	ip, r1
 8002840:	44bc      	add	ip, r7
 8002842:	4462      	add	r2, ip
 8002844:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 8002846:	2300      	movs	r3, #0
 8002848:	228c      	movs	r2, #140	; 0x8c
 800284a:	0052      	lsls	r2, r2, #1
 800284c:	2110      	movs	r1, #16
 800284e:	468c      	mov	ip, r1
 8002850:	44bc      	add	ip, r7
 8002852:	4462      	add	r2, ip
 8002854:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 8002856:	4bbc      	ldr	r3, [pc, #752]	; (8002b48 <main+0x614>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4abc      	ldr	r2, [pc, #752]	; (8002b4c <main+0x618>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d818      	bhi.n	8002892 <main+0x35e>
 8002860:	4bb9      	ldr	r3, [pc, #740]	; (8002b48 <main+0x614>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d014      	beq.n	8002892 <main+0x35e>
		 {
			 speed1 = 13850.4 / T31pulseWidth;
 8002868:	4bb7      	ldr	r3, [pc, #732]	; (8002b48 <main+0x614>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff fc7d 	bl	800216c <__aeabi_ui2d>
 8002872:	0002      	movs	r2, r0
 8002874:	000b      	movs	r3, r1
 8002876:	48b6      	ldr	r0, [pc, #728]	; (8002b50 <main+0x61c>)
 8002878:	49b6      	ldr	r1, [pc, #728]	; (8002b54 <main+0x620>)
 800287a:	f7fe f9ef 	bl	8000c5c <__aeabi_ddiv>
 800287e:	0002      	movs	r2, r0
 8002880:	000b      	movs	r3, r1
 8002882:	0010      	movs	r0, r2
 8002884:	0019      	movs	r1, r3
 8002886:	f7ff fcdf 	bl	8002248 <__aeabi_d2f>
 800288a:	1c03      	adds	r3, r0, #0
 800288c:	197a      	adds	r2, r7, r5
 800288e:	1912      	adds	r2, r2, r4
 8002890:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 8002892:	4bb1      	ldr	r3, [pc, #708]	; (8002b58 <main+0x624>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4aad      	ldr	r2, [pc, #692]	; (8002b4c <main+0x618>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d81c      	bhi.n	80028d6 <main+0x3a2>
 800289c:	4bae      	ldr	r3, [pc, #696]	; (8002b58 <main+0x624>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <main+0x3a2>
		 {
			 speed2 = 13850.4 / T32pulseWidth;
 80028a4:	4bac      	ldr	r3, [pc, #688]	; (8002b58 <main+0x624>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fc5f 	bl	800216c <__aeabi_ui2d>
 80028ae:	0002      	movs	r2, r0
 80028b0:	000b      	movs	r3, r1
 80028b2:	48a7      	ldr	r0, [pc, #668]	; (8002b50 <main+0x61c>)
 80028b4:	49a7      	ldr	r1, [pc, #668]	; (8002b54 <main+0x620>)
 80028b6:	f7fe f9d1 	bl	8000c5c <__aeabi_ddiv>
 80028ba:	0002      	movs	r2, r0
 80028bc:	000b      	movs	r3, r1
 80028be:	0010      	movs	r0, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	f7ff fcc1 	bl	8002248 <__aeabi_d2f>
 80028c6:	1c03      	adds	r3, r0, #0
 80028c8:	2290      	movs	r2, #144	; 0x90
 80028ca:	0052      	lsls	r2, r2, #1
 80028cc:	2110      	movs	r1, #16
 80028ce:	468c      	mov	ip, r1
 80028d0:	44bc      	add	ip, r7
 80028d2:	4462      	add	r2, ip
 80028d4:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 80028d6:	4ba1      	ldr	r3, [pc, #644]	; (8002b5c <main+0x628>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a9c      	ldr	r2, [pc, #624]	; (8002b4c <main+0x618>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d81c      	bhi.n	800291a <main+0x3e6>
 80028e0:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <main+0x628>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <main+0x3e6>
		 {
			 speed3 = 13850.4 / T33pulseWidth;
 80028e8:	4b9c      	ldr	r3, [pc, #624]	; (8002b5c <main+0x628>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff fc3d 	bl	800216c <__aeabi_ui2d>
 80028f2:	0002      	movs	r2, r0
 80028f4:	000b      	movs	r3, r1
 80028f6:	4896      	ldr	r0, [pc, #600]	; (8002b50 <main+0x61c>)
 80028f8:	4996      	ldr	r1, [pc, #600]	; (8002b54 <main+0x620>)
 80028fa:	f7fe f9af 	bl	8000c5c <__aeabi_ddiv>
 80028fe:	0002      	movs	r2, r0
 8002900:	000b      	movs	r3, r1
 8002902:	0010      	movs	r0, r2
 8002904:	0019      	movs	r1, r3
 8002906:	f7ff fc9f 	bl	8002248 <__aeabi_d2f>
 800290a:	1c03      	adds	r3, r0, #0
 800290c:	228e      	movs	r2, #142	; 0x8e
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	2110      	movs	r1, #16
 8002912:	468c      	mov	ip, r1
 8002914:	44bc      	add	ip, r7
 8002916:	4462      	add	r2, ip
 8002918:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 800291a:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <main+0x62c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a8b      	ldr	r2, [pc, #556]	; (8002b4c <main+0x618>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d81c      	bhi.n	800295e <main+0x42a>
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <main+0x62c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <main+0x42a>
		 {
			 speed4 = 13850.4 / T34pulseWidth;
 800292c:	4b8c      	ldr	r3, [pc, #560]	; (8002b60 <main+0x62c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff fc1b 	bl	800216c <__aeabi_ui2d>
 8002936:	0002      	movs	r2, r0
 8002938:	000b      	movs	r3, r1
 800293a:	4885      	ldr	r0, [pc, #532]	; (8002b50 <main+0x61c>)
 800293c:	4985      	ldr	r1, [pc, #532]	; (8002b54 <main+0x620>)
 800293e:	f7fe f98d 	bl	8000c5c <__aeabi_ddiv>
 8002942:	0002      	movs	r2, r0
 8002944:	000b      	movs	r3, r1
 8002946:	0010      	movs	r0, r2
 8002948:	0019      	movs	r1, r3
 800294a:	f7ff fc7d 	bl	8002248 <__aeabi_d2f>
 800294e:	1c03      	adds	r3, r0, #0
 8002950:	228c      	movs	r2, #140	; 0x8c
 8002952:	0052      	lsls	r2, r2, #1
 8002954:	2110      	movs	r1, #16
 8002956:	468c      	mov	ip, r1
 8002958:	44bc      	add	ip, r7
 800295a:	4462      	add	r2, ip
 800295c:	6013      	str	r3, [r2, #0]
		 }
		 memset(MSG, 0, sizeof(MSG));
 800295e:	26b4      	movs	r6, #180	; 0xb4
 8002960:	2010      	movs	r0, #16
 8002962:	183a      	adds	r2, r7, r0
 8002964:	1993      	adds	r3, r2, r6
 8002966:	2241      	movs	r2, #65	; 0x41
 8002968:	2100      	movs	r1, #0
 800296a:	0018      	movs	r0, r3
 800296c:	f005 fac4 	bl	8007ef8 <memset>
		 sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f\n", speed1, speed2, speed3, speed4);
 8002970:	2392      	movs	r3, #146	; 0x92
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2210      	movs	r2, #16
 8002976:	4694      	mov	ip, r2
 8002978:	44bc      	add	ip, r7
 800297a:	4463      	add	r3, ip
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	f7ff fc1b 	bl	80021b8 <__aeabi_f2d>
 8002982:	60b8      	str	r0, [r7, #8]
 8002984:	60f9      	str	r1, [r7, #12]
 8002986:	2390      	movs	r3, #144	; 0x90
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2210      	movs	r2, #16
 800298c:	4694      	mov	ip, r2
 800298e:	44bc      	add	ip, r7
 8002990:	4463      	add	r3, ip
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	f7ff fc10 	bl	80021b8 <__aeabi_f2d>
 8002998:	0004      	movs	r4, r0
 800299a:	000d      	movs	r5, r1
 800299c:	238e      	movs	r3, #142	; 0x8e
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2210      	movs	r2, #16
 80029a2:	4694      	mov	ip, r2
 80029a4:	44bc      	add	ip, r7
 80029a6:	4463      	add	r3, ip
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	f7ff fc05 	bl	80021b8 <__aeabi_f2d>
 80029ae:	6038      	str	r0, [r7, #0]
 80029b0:	6079      	str	r1, [r7, #4]
 80029b2:	238c      	movs	r3, #140	; 0x8c
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2210      	movs	r2, #16
 80029b8:	4694      	mov	ip, r2
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	f7ff fbfa 	bl	80021b8 <__aeabi_f2d>
 80029c4:	0002      	movs	r2, r0
 80029c6:	000b      	movs	r3, r1
 80029c8:	4966      	ldr	r1, [pc, #408]	; (8002b64 <main+0x630>)
 80029ca:	2010      	movs	r0, #16
 80029cc:	1838      	adds	r0, r7, r0
 80029ce:	1980      	adds	r0, r0, r6
 80029d0:	9204      	str	r2, [sp, #16]
 80029d2:	9305      	str	r3, [sp, #20]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	9202      	str	r2, [sp, #8]
 80029da:	9303      	str	r3, [sp, #12]
 80029dc:	9400      	str	r4, [sp, #0]
 80029de:	9501      	str	r5, [sp, #4]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f006 f916 	bl	8008c14 <siprintf>
		 //sprintf(MSG, "[enc] %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth);
		 HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 30);
 80029e8:	2310      	movs	r3, #16
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	1999      	adds	r1, r3, r6
 80029ee:	485e      	ldr	r0, [pc, #376]	; (8002b68 <main+0x634>)
 80029f0:	231e      	movs	r3, #30
 80029f2:	2241      	movs	r2, #65	; 0x41
 80029f4:	f003 fe7a 	bl	80066ec <HAL_UART_Transmit>
	 }

	 for (int i=0; i < 4; i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	228a      	movs	r2, #138	; 0x8a
 80029fc:	0052      	lsls	r2, r2, #1
 80029fe:	18ba      	adds	r2, r7, r2
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e184      	b.n	8002d0e <main+0x7da>
	 {
		 sumVect = 0.0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	2288      	movs	r2, #136	; 0x88
 8002a08:	0052      	lsls	r2, r2, #1
 8002a0a:	2110      	movs	r1, #16
 8002a0c:	468c      	mov	ip, r1
 8002a0e:	44bc      	add	ip, r7
 8002a10:	4462      	add	r2, ip
 8002a12:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	2288      	movs	r2, #136	; 0x88
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	18ba      	adds	r2, r7, r2
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e042      	b.n	8002aa6 <main+0x572>
		 {
			 vect[i][j] = vect[i][j+1];
 8002a20:	2588      	movs	r5, #136	; 0x88
 8002a22:	006d      	lsls	r5, r5, #1
 8002a24:	197b      	adds	r3, r7, r5
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c58      	adds	r0, r3, #1
 8002a2a:	2464      	movs	r4, #100	; 0x64
 8002a2c:	2610      	movs	r6, #16
 8002a2e:	19bb      	adds	r3, r7, r6
 8002a30:	1919      	adds	r1, r3, r4
 8002a32:	238a      	movs	r3, #138	; 0x8a
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	181b      	adds	r3, r3, r0
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	5858      	ldr	r0, [r3, r1]
 8002a46:	19ba      	adds	r2, r7, r6
 8002a48:	1911      	adds	r1, r2, r4
 8002a4a:	238a      	movs	r3, #138	; 0x8a
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	0013      	movs	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	197a      	adds	r2, r7, r5
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8002a62:	19ba      	adds	r2, r7, r6
 8002a64:	1911      	adds	r1, r2, r4
 8002a66:	238a      	movs	r3, #138	; 0x8a
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	0013      	movs	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	197a      	adds	r2, r7, r5
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	585b      	ldr	r3, [r3, r1]
 8002a7e:	2105      	movs	r1, #5
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7fd fb5d 	bl	8000140 <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	001a      	movs	r2, r3
 8002a8a:	2188      	movs	r1, #136	; 0x88
 8002a8c:	0049      	lsls	r1, r1, #1
 8002a8e:	19bb      	adds	r3, r7, r6
 8002a90:	185b      	adds	r3, r3, r1
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	19ba      	adds	r2, r7, r6
 8002a98:	1852      	adds	r2, r2, r1
 8002a9a:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002a9c:	197b      	adds	r3, r7, r5
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	197a      	adds	r2, r7, r5
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	2388      	movs	r3, #136	; 0x88
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	ddb6      	ble.n	8002a20 <main+0x4ec>
		 }
		 if (i==0)
 8002ab2:	268a      	movs	r6, #138	; 0x8a
 8002ab4:	0076      	lsls	r6, r6, #1
 8002ab6:	19bb      	adds	r3, r7, r6
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d156      	bne.n	8002b6c <main+0x638>
		 {
			 vect[i][4] = T31pulseWidth;
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <main+0x614>)
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	2464      	movs	r4, #100	; 0x64
 8002ac4:	2510      	movs	r5, #16
 8002ac6:	197b      	adds	r3, r7, r5
 8002ac8:	1918      	adds	r0, r3, r4
 8002aca:	19bb      	adds	r3, r7, r6
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	0013      	movs	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	18c3      	adds	r3, r0, r3
 8002ad8:	3310      	adds	r3, #16
 8002ada:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	1919      	adds	r1, r3, r4
 8002ae0:	19bb      	adds	r3, r7, r6
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	18cb      	adds	r3, r1, r3
 8002aee:	3310      	adds	r3, #16
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2105      	movs	r1, #5
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fd fb23 	bl	8000140 <__udivsi3>
 8002afa:	0003      	movs	r3, r0
 8002afc:	001a      	movs	r2, r3
 8002afe:	2188      	movs	r1, #136	; 0x88
 8002b00:	0049      	lsls	r1, r1, #1
 8002b02:	197b      	adds	r3, r7, r5
 8002b04:	185b      	adds	r3, r3, r1
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	197a      	adds	r2, r7, r5
 8002b0c:	1852      	adds	r2, r2, r1
 8002b0e:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <main+0x614>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	197b      	adds	r3, r7, r5
 8002b16:	185b      	adds	r3, r3, r1
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	3305      	adds	r3, #5
 8002b1e:	da00      	bge.n	8002b22 <main+0x5ee>
 8002b20:	e0ee      	b.n	8002d00 <main+0x7cc>
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <main+0x614>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	197b      	adds	r3, r7, r5
 8002b28:	185b      	adds	r3, r3, r1
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	dd00      	ble.n	8002b34 <main+0x600>
 8002b32:	e0e5      	b.n	8002d00 <main+0x7cc>
				 T31pulseWidth = 0;
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <main+0x614>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e0e1      	b.n	8002d00 <main+0x7cc>
 8002b3c:	200004a4 	.word	0x200004a4
 8002b40:	20000310 	.word	0x20000310
 8002b44:	20000298 	.word	0x20000298
 8002b48:	200001fc 	.word	0x200001fc
 8002b4c:	0000752f 	.word	0x0000752f
 8002b50:	33333333 	.word	0x33333333
 8002b54:	40cb0d33 	.word	0x40cb0d33
 8002b58:	20000220 	.word	0x20000220
 8002b5c:	20000244 	.word	0x20000244
 8002b60:	20000268 	.word	0x20000268
 8002b64:	0800c8fc 	.word	0x0800c8fc
 8002b68:	20000420 	.word	0x20000420
		 }
		 else if (i==1)
 8002b6c:	268a      	movs	r6, #138	; 0x8a
 8002b6e:	0076      	lsls	r6, r6, #1
 8002b70:	19bb      	adds	r3, r7, r6
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d13e      	bne.n	8002bf6 <main+0x6c2>
		 {
			 vect[i][4] = T32pulseWidth;
 8002b78:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <main+0x7fc>)
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	2464      	movs	r4, #100	; 0x64
 8002b7e:	2510      	movs	r5, #16
 8002b80:	197b      	adds	r3, r7, r5
 8002b82:	1918      	adds	r0, r3, r4
 8002b84:	19bb      	adds	r3, r7, r6
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	18c3      	adds	r3, r0, r3
 8002b92:	3310      	adds	r3, #16
 8002b94:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002b96:	197b      	adds	r3, r7, r5
 8002b98:	1919      	adds	r1, r3, r4
 8002b9a:	19bb      	adds	r3, r7, r6
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	0013      	movs	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	18cb      	adds	r3, r1, r3
 8002ba8:	3310      	adds	r3, #16
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2105      	movs	r1, #5
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7fd fac6 	bl	8000140 <__udivsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	2188      	movs	r1, #136	; 0x88
 8002bba:	0049      	lsls	r1, r1, #1
 8002bbc:	197b      	adds	r3, r7, r5
 8002bbe:	185b      	adds	r3, r3, r1
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	197a      	adds	r2, r7, r5
 8002bc6:	1852      	adds	r2, r2, r1
 8002bc8:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 8002bca:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <main+0x7fc>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	197b      	adds	r3, r7, r5
 8002bd0:	185b      	adds	r3, r3, r1
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	3305      	adds	r3, #5
 8002bd8:	da00      	bge.n	8002bdc <main+0x6a8>
 8002bda:	e091      	b.n	8002d00 <main+0x7cc>
 8002bdc:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <main+0x7fc>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	197b      	adds	r3, r7, r5
 8002be2:	185b      	adds	r3, r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	dd00      	ble.n	8002bee <main+0x6ba>
 8002bec:	e088      	b.n	8002d00 <main+0x7cc>
				 T32pulseWidth = 0;
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <main+0x7fc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e084      	b.n	8002d00 <main+0x7cc>
		 }
		 else if (i==2)
 8002bf6:	268a      	movs	r6, #138	; 0x8a
 8002bf8:	0076      	lsls	r6, r6, #1
 8002bfa:	19bb      	adds	r3, r7, r6
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d13c      	bne.n	8002c7c <main+0x748>
		 {
			 vect[i][4] = T33pulseWidth;
 8002c02:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <main+0x800>)
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	2464      	movs	r4, #100	; 0x64
 8002c08:	2510      	movs	r5, #16
 8002c0a:	197b      	adds	r3, r7, r5
 8002c0c:	1918      	adds	r0, r3, r4
 8002c0e:	19bb      	adds	r3, r7, r6
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	0013      	movs	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	18c3      	adds	r3, r0, r3
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002c20:	197b      	adds	r3, r7, r5
 8002c22:	1919      	adds	r1, r3, r4
 8002c24:	19bb      	adds	r3, r7, r6
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	0013      	movs	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	18cb      	adds	r3, r1, r3
 8002c32:	3310      	adds	r3, #16
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2105      	movs	r1, #5
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fd fa81 	bl	8000140 <__udivsi3>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	001a      	movs	r2, r3
 8002c42:	2188      	movs	r1, #136	; 0x88
 8002c44:	0049      	lsls	r1, r1, #1
 8002c46:	197b      	adds	r3, r7, r5
 8002c48:	185b      	adds	r3, r3, r1
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	197a      	adds	r2, r7, r5
 8002c50:	1852      	adds	r2, r2, r1
 8002c52:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <main+0x800>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	197b      	adds	r3, r7, r5
 8002c5a:	185b      	adds	r3, r3, r1
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	3305      	adds	r3, #5
 8002c62:	db4d      	blt.n	8002d00 <main+0x7cc>
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <main+0x800>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	197b      	adds	r3, r7, r5
 8002c6a:	185b      	adds	r3, r3, r1
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	dc45      	bgt.n	8002d00 <main+0x7cc>
				 T33pulseWidth = 0;
 8002c74:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <main+0x800>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e041      	b.n	8002d00 <main+0x7cc>
		 }
		 else if (i==3)
 8002c7c:	268a      	movs	r6, #138	; 0x8a
 8002c7e:	0076      	lsls	r6, r6, #1
 8002c80:	19bb      	adds	r3, r7, r6
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d13b      	bne.n	8002d00 <main+0x7cc>
		 {
			 vect[i][4] = T34pulseWidth;
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <main+0x804>)
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	2464      	movs	r4, #100	; 0x64
 8002c8e:	2510      	movs	r5, #16
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	1918      	adds	r0, r3, r4
 8002c94:	19bb      	adds	r3, r7, r6
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	0013      	movs	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	18c3      	adds	r3, r0, r3
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002ca6:	197b      	adds	r3, r7, r5
 8002ca8:	1919      	adds	r1, r3, r4
 8002caa:	19bb      	adds	r3, r7, r6
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	0013      	movs	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	18cb      	adds	r3, r1, r3
 8002cb8:	3310      	adds	r3, #16
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7fd fa3e 	bl	8000140 <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	2188      	movs	r1, #136	; 0x88
 8002cca:	0049      	lsls	r1, r1, #1
 8002ccc:	197b      	adds	r3, r7, r5
 8002cce:	185b      	adds	r3, r3, r1
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	197a      	adds	r2, r7, r5
 8002cd6:	1852      	adds	r2, r2, r1
 8002cd8:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <main+0x804>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	185b      	adds	r3, r3, r1
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	3305      	adds	r3, #5
 8002ce8:	db0a      	blt.n	8002d00 <main+0x7cc>
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <main+0x804>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	197b      	adds	r3, r7, r5
 8002cf0:	185b      	adds	r3, r3, r1
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	dc02      	bgt.n	8002d00 <main+0x7cc>
				 T34pulseWidth = 0;
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <main+0x804>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8002d00:	228a      	movs	r2, #138	; 0x8a
 8002d02:	0052      	lsls	r2, r2, #1
 8002d04:	18bb      	adds	r3, r7, r2
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	18ba      	adds	r2, r7, r2
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	238a      	movs	r3, #138	; 0x8a
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	dc00      	bgt.n	8002d1c <main+0x7e8>
 8002d1a:	e673      	b.n	8002a04 <main+0x4d0>
		 }
	 }

	 HAL_Delay(100);
 8002d1c:	2064      	movs	r0, #100	; 0x64
 8002d1e:	f001 f853 	bl	8003dc8 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1);
 8002d22:	4906      	ldr	r1, [pc, #24]	; (8002d3c <main+0x808>)
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <main+0x80c>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f003 fd88 	bl	800683e <HAL_UART_Receive_IT>
	cycleCounter++;
 8002d2e:	e560      	b.n	80027f2 <main+0x2be>
 8002d30:	20000220 	.word	0x20000220
 8002d34:	20000244 	.word	0x20000244
 8002d38:	20000268 	.word	0x20000268
 8002d3c:	2000028c 	.word	0x2000028c
 8002d40:	20000420 	.word	0x20000420

08002d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b091      	sub	sp, #68	; 0x44
 8002d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d4a:	2410      	movs	r4, #16
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	0018      	movs	r0, r3
 8002d50:	2330      	movs	r3, #48	; 0x30
 8002d52:	001a      	movs	r2, r3
 8002d54:	2100      	movs	r1, #0
 8002d56:	f005 f8cf 	bl	8007ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d5a:	003b      	movs	r3, r7
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	2310      	movs	r3, #16
 8002d60:	001a      	movs	r2, r3
 8002d62:	2100      	movs	r1, #0
 8002d64:	f005 f8c8 	bl	8007ef8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d68:	0021      	movs	r1, r4
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2201      	movs	r2, #1
 8002d74:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2210      	movs	r2, #16
 8002d7a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	0018      	movs	r0, r3
 8002d86:	f001 fbbf 	bl	8004508 <HAL_RCC_OscConfig>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d001      	beq.n	8002d92 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002d8e:	f000 fce9 	bl	8003764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d92:	003b      	movs	r3, r7
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d98:	003b      	movs	r3, r7
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d9e:	003b      	movs	r3, r7
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002da4:	003b      	movs	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002daa:	003b      	movs	r3, r7
 8002dac:	2100      	movs	r1, #0
 8002dae:	0018      	movs	r0, r3
 8002db0:	f001 fec8 	bl	8004b44 <HAL_RCC_ClockConfig>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002db8:	f000 fcd4 	bl	8003764 <Error_Handler>
  }
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b011      	add	sp, #68	; 0x44
 8002dc2:	bd90      	pop	{r4, r7, pc}

08002dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b096      	sub	sp, #88	; 0x58
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dca:	2348      	movs	r3, #72	; 0x48
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	0018      	movs	r0, r3
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	f005 f88f 	bl	8007ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	0018      	movs	r0, r3
 8002de0:	2308      	movs	r3, #8
 8002de2:	001a      	movs	r2, r3
 8002de4:	2100      	movs	r1, #0
 8002de6:	f005 f887 	bl	8007ef8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dea:	2324      	movs	r3, #36	; 0x24
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	0018      	movs	r0, r3
 8002df0:	231c      	movs	r3, #28
 8002df2:	001a      	movs	r2, r3
 8002df4:	2100      	movs	r1, #0
 8002df6:	f005 f87f 	bl	8007ef8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	2320      	movs	r3, #32
 8002e00:	001a      	movs	r2, r3
 8002e02:	2100      	movs	r1, #0
 8002e04:	f005 f878 	bl	8007ef8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e08:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e0a:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <MX_TIM1_Init+0x1a4>)
 8002e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8002e0e:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e10:	229f      	movs	r2, #159	; 0x9f
 8002e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e1c:	2263      	movs	r2, #99	; 0x63
 8002e1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e26:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e32:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f001 ffd9 	bl	8004dec <HAL_TIM_Base_Init>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002e3e:	f000 fc91 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e42:	2148      	movs	r1, #72	; 0x48
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	0152      	lsls	r2, r2, #5
 8002e4a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e4c:	187a      	adds	r2, r7, r1
 8002e4e:	4b45      	ldr	r3, [pc, #276]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f002 fdc0 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002e5c:	f000 fc82 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f002 f812 	bl	8004e8c <HAL_TIM_PWM_Init>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002e6c:	f000 fc7a 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e7e:	187a      	adds	r2, r7, r1
 8002e80:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002e82:	0011      	movs	r1, r2
 8002e84:	0018      	movs	r0, r3
 8002e86:	f003 fb17 	bl	80064b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8a:	1e03      	subs	r3, r0, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002e8e:	f000 fc69 	bl	8003764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e92:	2124      	movs	r1, #36	; 0x24
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2260      	movs	r2, #96	; 0x60
 8002e98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ebe:	1879      	adds	r1, r7, r1
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f002 fcc1 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002ece:	f000 fc49 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ed2:	2324      	movs	r3, #36	; 0x24
 8002ed4:	18f9      	adds	r1, r7, r3
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002ed8:	2204      	movs	r2, #4
 8002eda:	0018      	movs	r0, r3
 8002edc:	f002 fcb6 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002ee4:	f000 fc3e 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ee8:	2324      	movs	r3, #36	; 0x24
 8002eea:	18f9      	adds	r1, r7, r3
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002eee:	2208      	movs	r2, #8
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f002 fcab 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002efa:	f000 fc33 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002efe:	2324      	movs	r3, #36	; 0x24
 8002f00:	18f9      	adds	r1, r7, r3
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002f04:	220c      	movs	r2, #12
 8002f06:	0018      	movs	r0, r3
 8002f08:	f002 fca0 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8002f10:	f000 fc28 	bl	8003764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0192      	lsls	r2, r2, #6
 8002f38:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f40:	1d3a      	adds	r2, r7, #4
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f003 fb0e 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8002f50:	f000 fc08 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <MX_TIM1_Init+0x1a0>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 fce6 	bl	8003928 <HAL_TIM_MspPostInit>

}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b016      	add	sp, #88	; 0x58
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200003d8 	.word	0x200003d8
 8002f68:	40012c00 	.word	0x40012c00

08002f6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f72:	2310      	movs	r3, #16
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	0018      	movs	r0, r3
 8002f78:	2308      	movs	r3, #8
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f004 ffbb 	bl	8007ef8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f82:	003b      	movs	r3, r7
 8002f84:	0018      	movs	r0, r3
 8002f86:	2310      	movs	r3, #16
 8002f88:	001a      	movs	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	f004 ffb4 	bl	8007ef8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <MX_TIM3_Init+0xec>)
 8002f92:	4a32      	ldr	r2, [pc, #200]	; (800305c <MX_TIM3_Init+0xf0>)
 8002f94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <MX_TIM3_Init+0xec>)
 8002f98:	224f      	movs	r2, #79	; 0x4f
 8002f9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <MX_TIM3_Init+0xec>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <MX_TIM3_Init+0xec>)
 8002fa4:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <MX_TIM3_Init+0xf4>)
 8002fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <MX_TIM3_Init+0xec>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <MX_TIM3_Init+0xec>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <MX_TIM3_Init+0xec>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f002 f936 	bl	8005228 <HAL_TIM_IC_Init>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002fc0:	f000 fbd0 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fd2:	187a      	adds	r2, r7, r1
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <MX_TIM3_Init+0xec>)
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f003 fa6d 	bl	80064b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002fe2:	f000 fbbf 	bl	8003764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fe6:	003b      	movs	r3, r7
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fec:	003b      	movs	r3, r7
 8002fee:	2201      	movs	r2, #1
 8002ff0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ff2:	003b      	movs	r3, r7
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 8002ff8:	003b      	movs	r3, r7
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ffe:	0039      	movs	r1, r7
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_TIM3_Init+0xec>)
 8003002:	2200      	movs	r2, #0
 8003004:	0018      	movs	r0, r3
 8003006:	f002 fb7d 	bl	8005704 <HAL_TIM_IC_ConfigChannel>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800300e:	f000 fba9 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003012:	0039      	movs	r1, r7
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <MX_TIM3_Init+0xec>)
 8003016:	2204      	movs	r2, #4
 8003018:	0018      	movs	r0, r3
 800301a:	f002 fb73 	bl	8005704 <HAL_TIM_IC_ConfigChannel>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8003022:	f000 fb9f 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003026:	0039      	movs	r1, r7
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_TIM3_Init+0xec>)
 800302a:	2208      	movs	r2, #8
 800302c:	0018      	movs	r0, r3
 800302e:	f002 fb69 	bl	8005704 <HAL_TIM_IC_ConfigChannel>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d001      	beq.n	800303a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8003036:	f000 fb95 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800303a:	0039      	movs	r1, r7
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_TIM3_Init+0xec>)
 800303e:	220c      	movs	r2, #12
 8003040:	0018      	movs	r0, r3
 8003042:	f002 fb5f 	bl	8005704 <HAL_TIM_IC_ConfigChannel>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d001      	beq.n	800304e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800304a:	f000 fb8b 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b006      	add	sp, #24
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000360 	.word	0x20000360
 800305c:	40000400 	.word	0x40000400
 8003060:	0000c34f 	.word	0x0000c34f

08003064 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b096      	sub	sp, #88	; 0x58
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	2348      	movs	r3, #72	; 0x48
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	0018      	movs	r0, r3
 8003070:	2310      	movs	r3, #16
 8003072:	001a      	movs	r2, r3
 8003074:	2100      	movs	r1, #0
 8003076:	f004 ff3f 	bl	8007ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800307a:	2340      	movs	r3, #64	; 0x40
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	0018      	movs	r0, r3
 8003080:	2308      	movs	r3, #8
 8003082:	001a      	movs	r2, r3
 8003084:	2100      	movs	r1, #0
 8003086:	f004 ff37 	bl	8007ef8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800308a:	2324      	movs	r3, #36	; 0x24
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	0018      	movs	r0, r3
 8003090:	231c      	movs	r3, #28
 8003092:	001a      	movs	r2, r3
 8003094:	2100      	movs	r1, #0
 8003096:	f004 ff2f 	bl	8007ef8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	0018      	movs	r0, r3
 800309e:	2320      	movs	r3, #32
 80030a0:	001a      	movs	r2, r3
 80030a2:	2100      	movs	r1, #0
 80030a4:	f004 ff28 	bl	8007ef8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030aa:	4a4c      	ldr	r2, [pc, #304]	; (80031dc <MX_TIM15_Init+0x178>)
 80030ac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 40-1;
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030b0:	2227      	movs	r2, #39	; 0x27
 80030b2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b4:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030bc:	2204      	movs	r2, #4
 80030be:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030c8:	2264      	movs	r2, #100	; 0x64
 80030ca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 fe89 	bl	8004dec <HAL_TIM_Base_Init>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d001      	beq.n	80030e2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80030de:	f000 fb41 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e2:	2148      	movs	r1, #72	; 0x48
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0152      	lsls	r2, r2, #5
 80030ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80030ec:	187a      	adds	r2, r7, r1
 80030ee:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <MX_TIM15_Init+0x174>)
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f002 fc70 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80030fc:	f000 fb32 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <MX_TIM15_Init+0x174>)
 8003102:	0018      	movs	r0, r3
 8003104:	f001 fec2 	bl	8004e8c <HAL_TIM_PWM_Init>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 800310c:	f000 fb2a 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2200      	movs	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800311e:	187a      	adds	r2, r7, r1
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <MX_TIM15_Init+0x174>)
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f003 f9c7 	bl	80064b8 <HAL_TIMEx_MasterConfigSynchronization>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800312e:	f000 fb19 	bl	8003764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003132:	2124      	movs	r1, #36	; 0x24
 8003134:	187b      	adds	r3, r7, r1
 8003136:	2260      	movs	r2, #96	; 0x60
 8003138:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2200      	movs	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314c:	187b      	adds	r3, r7, r1
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003152:	187b      	adds	r3, r7, r1
 8003154:	2200      	movs	r2, #0
 8003156:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003158:	187b      	adds	r3, r7, r1
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800315e:	1879      	adds	r1, r7, r1
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <MX_TIM15_Init+0x174>)
 8003162:	2200      	movs	r2, #0
 8003164:	0018      	movs	r0, r3
 8003166:	f002 fb71 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800316e:	f000 faf9 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003172:	2324      	movs	r3, #36	; 0x24
 8003174:	18f9      	adds	r1, r7, r3
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <MX_TIM15_Init+0x174>)
 8003178:	2204      	movs	r2, #4
 800317a:	0018      	movs	r0, r3
 800317c:	f002 fb66 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8003184:	f000 faee 	bl	8003764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2200      	movs	r2, #0
 8003192:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	2200      	movs	r2, #0
 800319e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0192      	lsls	r2, r2, #6
 80031ac:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	2200      	movs	r2, #0
 80031b2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80031b4:	1d3a      	adds	r2, r7, #4
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <MX_TIM15_Init+0x174>)
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f003 f9d4 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 80031c4:	f000 face 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <MX_TIM15_Init+0x174>)
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fbac 	bl	8003928 <HAL_TIM_MspPostInit>

}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b016      	add	sp, #88	; 0x58
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000318 	.word	0x20000318
 80031dc:	40014000 	.word	0x40014000

080031e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <MX_USART2_UART_Init+0x5c>)
 80031e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031ec:	22e1      	movs	r2, #225	; 0xe1
 80031ee:	0252      	lsls	r2, r2, #9
 80031f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003206:	220c      	movs	r2, #12
 8003208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <MX_USART2_UART_Init+0x58>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <MX_USART2_UART_Init+0x58>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003224:	0018      	movs	r0, r3
 8003226:	f003 fa0d 	bl	8006644 <HAL_UART_Init>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d001      	beq.n	8003232 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800322e:	f000 fa99 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000420 	.word	0x20000420
 800323c:	40004400 	.word	0x40004400

08003240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b08b      	sub	sp, #44	; 0x2c
 8003244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003246:	2414      	movs	r4, #20
 8003248:	193b      	adds	r3, r7, r4
 800324a:	0018      	movs	r0, r3
 800324c:	2314      	movs	r3, #20
 800324e:	001a      	movs	r2, r3
 8003250:	2100      	movs	r1, #0
 8003252:	f004 fe51 	bl	8007ef8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <MX_GPIO_Init+0xc0>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	03c9      	lsls	r1, r1, #15
 8003260:	430a      	orrs	r2, r1
 8003262:	615a      	str	r2, [r3, #20]
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	03db      	lsls	r3, r3, #15
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	0309      	lsls	r1, r1, #12
 800327c:	430a      	orrs	r2, r1
 800327e:	615a      	str	r2, [r3, #20]
 8003280:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	031b      	lsls	r3, r3, #12
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <MX_GPIO_Init+0xc0>)
 8003294:	2180      	movs	r1, #128	; 0x80
 8003296:	0289      	lsls	r1, r1, #10
 8003298:	430a      	orrs	r2, r1
 800329a:	615a      	str	r2, [r3, #20]
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <MX_GPIO_Init+0xc0>)
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	4013      	ands	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <MX_GPIO_Init+0xc0>)
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <MX_GPIO_Init+0xc0>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	02c9      	lsls	r1, r1, #11
 80032b4:	430a      	orrs	r2, r1
 80032b6:	615a      	str	r2, [r3, #20]
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <MX_GPIO_Init+0xc0>)
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	02db      	lsls	r3, r3, #11
 80032c0:	4013      	ands	r3, r2
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 80032c6:	490f      	ldr	r1, [pc, #60]	; (8003304 <MX_GPIO_Init+0xc4>)
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <MX_GPIO_Init+0xc8>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	0018      	movs	r0, r3
 80032ce:	f001 f8fd 	bl	80044cc <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 80032d2:	0021      	movs	r1, r4
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <MX_GPIO_Init+0xc4>)
 80032d8:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2201      	movs	r2, #1
 80032de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	2200      	movs	r2, #0
 80032ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	4a06      	ldr	r2, [pc, #24]	; (8003308 <MX_GPIO_Init+0xc8>)
 80032f0:	0019      	movs	r1, r3
 80032f2:	0010      	movs	r0, r2
 80032f4:	f000 ff7a 	bl	80041ec <HAL_GPIO_Init>

}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b00b      	add	sp, #44	; 0x2c
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	0000040f 	.word	0x0000040f
 8003308:	48000800 	.word	0x48000800

0800330c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
// --------------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d12e      	bne.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7f1b      	ldrb	r3, [r3, #28]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d113      	bne.n	800334c <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 800332c:	4b16      	ldr	r3, [pc, #88]	; (8003388 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1e5a      	subs	r2, r3, #1
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003334:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 8003336:	e020      	b.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11c      	bne.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8003340:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003342:	2100      	movs	r1, #0
 8003344:	0018      	movs	r0, r3
 8003346:	f001 feab 	bl	80050a0 <HAL_TIM_PWM_Stop_IT>
}
 800334a:	e016      	b.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7f1b      	ldrb	r3, [r3, #28]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d112      	bne.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	e008      	b.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003372:	2104      	movs	r1, #4
 8003374:	0018      	movs	r0, r3
 8003376:	f001 fe93 	bl	80050a0 <HAL_TIM_PWM_Stop_IT>
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	20000318 	.word	0x20000318
 8003388:	20000290 	.word	0x20000290
 800338c:	20000294 	.word	0x20000294

08003390 <HAL_TIM_IC_CaptureCallback>:
// ENCODERS READING
// --------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4aa9      	ldr	r2, [pc, #676]	; (8003644 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d000      	beq.n	80033a4 <HAL_TIM_IC_CaptureCallback+0x14>
 80033a2:	e14a      	b.n	800363a <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7f1b      	ldrb	r3, [r3, #28]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d14e      	bne.n	800344a <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80033ac:	4ba6      	ldr	r3, [pc, #664]	; (8003648 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80033ae:	2100      	movs	r1, #0
 80033b0:	0018      	movs	r0, r3
 80033b2:	f002 fbe5 	bl	8005b80 <HAL_TIM_ReadCapturedValue>
 80033b6:	0002      	movs	r2, r0
 80033b8:	4ba4      	ldr	r3, [pc, #656]	; (800364c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80033ba:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 80033bc:	4ba3      	ldr	r3, [pc, #652]	; (800364c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4ba3      	ldr	r3, [pc, #652]	; (8003650 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d93b      	bls.n	8003440 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 80033c8:	4ba2      	ldr	r3, [pc, #648]	; (8003654 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e01a      	b.n	800340a <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	4b9f      	ldr	r3, [pc, #636]	; (8003658 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	58d1      	ldr	r1, [r2, r3]
 80033de:	4b9e      	ldr	r3, [pc, #632]	; (8003658 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 80033e6:	4b9c      	ldr	r3, [pc, #624]	; (8003658 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	58d3      	ldr	r3, [r2, r3]
 80033ee:	2105      	movs	r1, #5
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fc fea5 	bl	8000140 <__udivsi3>
 80033f6:	0003      	movs	r3, r0
 80033f8:	001a      	movs	r2, r3
 80033fa:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	18d2      	adds	r2, r2, r3
 8003400:	4b94      	ldr	r3, [pc, #592]	; (8003654 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003402:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3301      	adds	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b03      	cmp	r3, #3
 800340e:	dde1      	ble.n	80033d4 <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 8003410:	4b8e      	ldr	r3, [pc, #568]	; (800364c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b8e      	ldr	r3, [pc, #568]	; (8003650 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	4b8f      	ldr	r3, [pc, #572]	; (8003658 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800341c:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 800341e:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2105      	movs	r1, #5
 8003424:	0018      	movs	r0, r3
 8003426:	f7fc fe8b 	bl	8000140 <__udivsi3>
 800342a:	0003      	movs	r3, r0
 800342c:	001a      	movs	r2, r3
 800342e:	4b89      	ldr	r3, [pc, #548]	; (8003654 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	18d2      	adds	r2, r2, r3
 8003434:	4b87      	ldr	r3, [pc, #540]	; (8003654 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003436:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 8003438:	4b86      	ldr	r3, [pc, #536]	; (8003654 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b87      	ldr	r3, [pc, #540]	; (800365c <HAL_TIM_IC_CaptureCallback+0x2cc>)
 800343e:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 8003440:	4b82      	ldr	r3, [pc, #520]	; (800364c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b82      	ldr	r3, [pc, #520]	; (8003650 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003446:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 8003448:	e0f7      	b.n	800363a <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7f1b      	ldrb	r3, [r3, #28]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d14e      	bne.n	80034f0 <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8003452:	4b7d      	ldr	r3, [pc, #500]	; (8003648 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003454:	2104      	movs	r1, #4
 8003456:	0018      	movs	r0, r3
 8003458:	f002 fb92 	bl	8005b80 <HAL_TIM_ReadCapturedValue>
 800345c:	0002      	movs	r2, r0
 800345e:	4b80      	ldr	r3, [pc, #512]	; (8003660 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003460:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 8003462:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d93b      	bls.n	80034e6 <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 800346e:	4b7e      	ldr	r3, [pc, #504]	; (8003668 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e01a      	b.n	80034b0 <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	4b7b      	ldr	r3, [pc, #492]	; (800366c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	58d1      	ldr	r1, [r2, r3]
 8003484:	4b79      	ldr	r3, [pc, #484]	; (800366c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 800348c:	4b77      	ldr	r3, [pc, #476]	; (800366c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	58d3      	ldr	r3, [r2, r3]
 8003494:	2105      	movs	r1, #5
 8003496:	0018      	movs	r0, r3
 8003498:	f7fc fe52 	bl	8000140 <__udivsi3>
 800349c:	0003      	movs	r3, r0
 800349e:	001a      	movs	r2, r3
 80034a0:	4b71      	ldr	r3, [pc, #452]	; (8003668 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	18d2      	adds	r2, r2, r3
 80034a6:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80034a8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3301      	adds	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	dde1      	ble.n	800347a <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 80034b6:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1ad2      	subs	r2, r2, r3
 80034c0:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80034c2:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 80034c4:	4b69      	ldr	r3, [pc, #420]	; (800366c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2105      	movs	r1, #5
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fc fe38 	bl	8000140 <__udivsi3>
 80034d0:	0003      	movs	r3, r0
 80034d2:	001a      	movs	r2, r3
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	18d2      	adds	r2, r2, r3
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80034dc:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 80034de:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80034e4:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80034ec:	601a      	str	r2, [r3, #0]
}
 80034ee:	e0a4      	b.n	800363a <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7f1b      	ldrb	r3, [r3, #28]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d14e      	bne.n	8003596 <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80034fa:	2108      	movs	r1, #8
 80034fc:	0018      	movs	r0, r3
 80034fe:	f002 fb3f 	bl	8005b80 <HAL_TIM_ReadCapturedValue>
 8003502:	0002      	movs	r2, r0
 8003504:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003506:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 8003508:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b5a      	ldr	r3, [pc, #360]	; (8003678 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d93b      	bls.n	800358c <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e01a      	b.n	8003556 <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	58d1      	ldr	r1, [r2, r3]
 800352a:	4b55      	ldr	r3, [pc, #340]	; (8003680 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	58d3      	ldr	r3, [r2, r3]
 800353a:	2105      	movs	r1, #5
 800353c:	0018      	movs	r0, r3
 800353e:	f7fc fdff 	bl	8000140 <__udivsi3>
 8003542:	0003      	movs	r3, r0
 8003544:	001a      	movs	r2, r3
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	18d2      	adds	r2, r2, r3
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800354e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b03      	cmp	r3, #3
 800355a:	dde1      	ble.n	8003520 <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 800355c:	4b45      	ldr	r3, [pc, #276]	; (8003674 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b45      	ldr	r3, [pc, #276]	; (8003678 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1ad2      	subs	r2, r2, r3
 8003566:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003568:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 800356a:	4b45      	ldr	r3, [pc, #276]	; (8003680 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2105      	movs	r1, #5
 8003570:	0018      	movs	r0, r3
 8003572:	f7fc fde5 	bl	8000140 <__udivsi3>
 8003576:	0003      	movs	r3, r0
 8003578:	001a      	movs	r2, r3
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	18d2      	adds	r2, r2, r3
 8003580:	4b3e      	ldr	r3, [pc, #248]	; (800367c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003582:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 8003584:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800358a:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	e051      	b.n	800363a <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7f1b      	ldrb	r3, [r3, #28]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d14d      	bne.n	800363a <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80035a0:	210c      	movs	r1, #12
 80035a2:	0018      	movs	r0, r3
 80035a4:	f002 faec 	bl	8005b80 <HAL_TIM_ReadCapturedValue>
 80035a8:	0002      	movs	r2, r0
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80035ac:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 80035ae:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d93b      	bls.n	8003632 <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x300>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	e01a      	b.n	80035fc <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_TIM_IC_CaptureCallback+0x304>)
 80035cc:	0092      	lsls	r2, r2, #2
 80035ce:	58d1      	ldr	r1, [r2, r3]
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_TIM_IC_CaptureCallback+0x304>)
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	0092      	lsls	r2, r2, #2
 80035d6:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 80035d8:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_TIM_IC_CaptureCallback+0x304>)
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	0092      	lsls	r2, r2, #2
 80035de:	58d3      	ldr	r3, [r2, r3]
 80035e0:	2105      	movs	r1, #5
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fc fdac 	bl	8000140 <__udivsi3>
 80035e8:	0003      	movs	r3, r0
 80035ea:	001a      	movs	r2, r3
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x300>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	18d2      	adds	r2, r2, r3
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x300>)
 80035f4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3301      	adds	r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	dde1      	ble.n	80035c6 <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1ad2      	subs	r2, r2, r3
 800360c:	4b21      	ldr	r3, [pc, #132]	; (8003694 <HAL_TIM_IC_CaptureCallback+0x304>)
 800360e:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2105      	movs	r1, #5
 8003616:	0018      	movs	r0, r3
 8003618:	f7fc fd92 	bl	8000140 <__udivsi3>
 800361c:	0003      	movs	r3, r0
 800361e:	001a      	movs	r2, r3
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	18d2      	adds	r2, r2, r3
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003628:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x300>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_TIM_IC_CaptureCallback+0x308>)
 8003630:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003638:	601a      	str	r2, [r3, #0]
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b006      	add	sp, #24
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	40000400 	.word	0x40000400
 8003648:	20000360 	.word	0x20000360
 800364c:	20000204 	.word	0x20000204
 8003650:	20000200 	.word	0x20000200
 8003654:	20000208 	.word	0x20000208
 8003658:	2000020c 	.word	0x2000020c
 800365c:	200001fc 	.word	0x200001fc
 8003660:	20000228 	.word	0x20000228
 8003664:	20000224 	.word	0x20000224
 8003668:	2000022c 	.word	0x2000022c
 800366c:	20000230 	.word	0x20000230
 8003670:	20000220 	.word	0x20000220
 8003674:	2000024c 	.word	0x2000024c
 8003678:	20000248 	.word	0x20000248
 800367c:	20000250 	.word	0x20000250
 8003680:	20000254 	.word	0x20000254
 8003684:	20000244 	.word	0x20000244
 8003688:	20000270 	.word	0x20000270
 800368c:	2000026c 	.word	0x2000026c
 8003690:	20000274 	.word	0x20000274
 8003694:	20000278 	.word	0x20000278
 8003698:	20000268 	.word	0x20000268

0800369c <HAL_UART_RxCpltCallback>:
char rxString[100] = { '\0' };
#define UART_PACKET_OK 0
#define UART_PACKET_TOO_LONG 1

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a28      	ldr	r2, [pc, #160]	; (800374c <HAL_UART_RxCpltCallback+0xb0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d149      	bne.n	8003742 <HAL_UART_RxCpltCallback+0xa6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_UART_RxCpltCallback+0xb4>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b0a      	cmp	r3, #10
 80036b4:	d11a      	bne.n	80036ec <HAL_UART_RxCpltCallback+0x50>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_UART_RxCpltCallback+0xb8>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d112      	bne.n	80036e4 <HAL_UART_RxCpltCallback+0x48>
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	5e9b      	ldrsh	r3, [r3, r2]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <HAL_UART_RxCpltCallback+0x48>
			{
				rxString[UART2_rxindex] = 0;
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	5e9b      	ldrsh	r3, [r3, r2]
 80036ce:	001a      	movs	r2, r3
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_UART_RxCpltCallback+0xc0>)
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 80036d8:	2200      	movs	r2, #0
 80036da:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_UART_RxCpltCallback+0xc4>)
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
		}



	}
}
 80036e2:	e02e      	b.n	8003742 <HAL_UART_RxCpltCallback+0xa6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_UART_RxCpltCallback+0xb8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
}
 80036ea:	e02a      	b.n	8003742 <HAL_UART_RxCpltCallback+0xa6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_UART_RxCpltCallback+0xb4>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b0d      	cmp	r3, #13
 80036f2:	d026      	beq.n	8003742 <HAL_UART_RxCpltCallback+0xa6>
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <HAL_UART_RxCpltCallback+0xb8>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d122      	bne.n	8003742 <HAL_UART_RxCpltCallback+0xa6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 80036fe:	2200      	movs	r2, #0
 8003700:	5e9b      	ldrsh	r3, [r3, r2]
 8003702:	001a      	movs	r2, r3
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_UART_RxCpltCallback+0xb4>)
 8003706:	7819      	ldrb	r1, [r3, #0]
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_UART_RxCpltCallback+0xc0>)
 800370a:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 800370e:	2200      	movs	r2, #0
 8003710:	5e9b      	ldrsh	r3, [r3, r2]
 8003712:	b29b      	uxth	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	b29b      	uxth	r3, r3
 8003718:	b21a      	sxth	r2, r3
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 800371c:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 8003720:	2200      	movs	r2, #0
 8003722:	5e9b      	ldrsh	r3, [r3, r2]
 8003724:	2b63      	cmp	r3, #99	; 0x63
 8003726:	dd0c      	ble.n	8003742 <HAL_UART_RxCpltCallback+0xa6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_UART_RxCpltCallback+0xb8>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 8003730:	2200      	movs	r2, #0
 8003732:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_UART_RxCpltCallback+0xbc>)
 8003736:	2200      	movs	r2, #0
 8003738:	5e9b      	ldrsh	r3, [r3, r2]
 800373a:	001a      	movs	r2, r3
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <HAL_UART_RxCpltCallback+0xc0>)
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b002      	add	sp, #8
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40004400 	.word	0x40004400
 8003750:	2000028c 	.word	0x2000028c
 8003754:	20000300 	.word	0x20000300
 8003758:	20000302 	.word	0x20000302
 800375c:	2000029c 	.word	0x2000029c
 8003760:	20000299 	.word	0x20000299

08003764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003768:	b672      	cpsid	i
}
 800376a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800376c:	e7fe      	b.n	800376c <Error_Handler+0x8>
	...

08003770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HAL_MspInit+0x44>)
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_MspInit+0x44>)
 800377c:	2101      	movs	r1, #1
 800377e:	430a      	orrs	r2, r1
 8003780:	619a      	str	r2, [r3, #24]
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_MspInit+0x44>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_MspInit+0x44>)
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_MspInit+0x44>)
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	0549      	lsls	r1, r1, #21
 8003798:	430a      	orrs	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_MspInit+0x44>)
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	055b      	lsls	r3, r3, #21
 80037a4:	4013      	ands	r3, r2
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	40021000 	.word	0x40021000

080037b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIM_Base_MspInit+0x70>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	0109      	lsls	r1, r1, #4
 80037d4:	430a      	orrs	r2, r1
 80037d6:	619a      	str	r2, [r3, #24]
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80037e6:	e01a      	b.n	800381e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a10      	ldr	r2, [pc, #64]	; (8003830 <HAL_TIM_Base_MspInit+0x78>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d115      	bne.n	800381e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	0249      	lsls	r1, r1, #9
 80037fc:	430a      	orrs	r2, r1
 80037fe:	619a      	str	r2, [r3, #24]
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_TIM_Base_MspInit+0x74>)
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	025b      	lsls	r3, r3, #9
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	2014      	movs	r0, #20
 8003814:	f000 fba8 	bl	8003f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003818:	2014      	movs	r0, #20
 800381a:	f000 fbba 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40021000 	.word	0x40021000
 8003830:	40014000 	.word	0x40014000

08003834 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b08b      	sub	sp, #44	; 0x2c
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	2414      	movs	r4, #20
 800383e:	193b      	adds	r3, r7, r4
 8003840:	0018      	movs	r0, r3
 8003842:	2314      	movs	r3, #20
 8003844:	001a      	movs	r2, r3
 8003846:	2100      	movs	r1, #0
 8003848:	f004 fb56 	bl	8007ef8 <memset>
  if(htim_ic->Instance==TIM3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a31      	ldr	r2, [pc, #196]	; (8003918 <HAL_TIM_IC_MspInit+0xe4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d15b      	bne.n	800390e <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	4b30      	ldr	r3, [pc, #192]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 800385c:	2102      	movs	r1, #2
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
 8003862:	4b2e      	ldr	r3, [pc, #184]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2202      	movs	r2, #2
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386e:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	02c9      	lsls	r1, r1, #11
 8003878:	430a      	orrs	r2, r1
 800387a:	615a      	str	r2, [r3, #20]
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	02db      	lsls	r3, r3, #11
 8003884:	4013      	ands	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	0309      	lsls	r1, r1, #12
 8003894:	430a      	orrs	r2, r1
 8003896:	615a      	str	r2, [r3, #20]
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_TIM_IC_MspInit+0xe8>)
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	031b      	lsls	r3, r3, #12
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	2221      	movs	r2, #33	; 0x21
 80038aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	193b      	adds	r3, r7, r4
 80038ae:	2202      	movs	r2, #2
 80038b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b2:	193b      	adds	r3, r7, r4
 80038b4:	2201      	movs	r2, #1
 80038b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	193b      	adds	r3, r7, r4
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	2201      	movs	r2, #1
 80038c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c4:	193b      	adds	r3, r7, r4
 80038c6:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_TIM_IC_MspInit+0xec>)
 80038c8:	0019      	movs	r1, r3
 80038ca:	0010      	movs	r0, r2
 80038cc:	f000 fc8e 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80038d0:	0021      	movs	r1, r4
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2290      	movs	r2, #144	; 0x90
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	2202      	movs	r2, #2
 80038de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	2201      	movs	r2, #1
 80038e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <HAL_TIM_IC_MspInit+0xf0>)
 80038f6:	0019      	movs	r1, r3
 80038f8:	0010      	movs	r0, r2
 80038fa:	f000 fc77 	bl	80041ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2101      	movs	r1, #1
 8003902:	2010      	movs	r0, #16
 8003904:	f000 fb30 	bl	8003f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003908:	2010      	movs	r0, #16
 800390a:	f000 fb42 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b00b      	add	sp, #44	; 0x2c
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40000400 	.word	0x40000400
 800391c:	40021000 	.word	0x40021000
 8003920:	48000400 	.word	0x48000400
 8003924:	48000800 	.word	0x48000800

08003928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b08b      	sub	sp, #44	; 0x2c
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	2414      	movs	r4, #20
 8003932:	193b      	adds	r3, r7, r4
 8003934:	0018      	movs	r0, r3
 8003936:	2314      	movs	r3, #20
 8003938:	001a      	movs	r2, r3
 800393a:	2100      	movs	r1, #0
 800393c:	f004 fadc 	bl	8007ef8 <memset>
  if(htim->Instance==TIM1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_TIM_MspPostInit+0xcc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d126      	bne.n	8003998 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_TIM_MspPostInit+0xd0>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <HAL_TIM_MspPostInit+0xd0>)
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0289      	lsls	r1, r1, #10
 8003954:	430a      	orrs	r2, r1
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_TIM_MspPostInit+0xd0>)
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	029b      	lsls	r3, r3, #10
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003966:	193b      	adds	r3, r7, r4
 8003968:	22f0      	movs	r2, #240	; 0xf0
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	0021      	movs	r1, r4
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2202      	movs	r2, #2
 8003974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	187b      	adds	r3, r7, r1
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	187b      	adds	r3, r7, r1
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2202      	movs	r2, #2
 8003986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	187a      	adds	r2, r7, r1
 800398a:	2390      	movs	r3, #144	; 0x90
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	0011      	movs	r1, r2
 8003990:	0018      	movs	r0, r3
 8003992:	f000 fc2b 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003996:	e029      	b.n	80039ec <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_TIM_MspPostInit+0xd4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d124      	bne.n	80039ec <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_TIM_MspPostInit+0xd0>)
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_TIM_MspPostInit+0xd0>)
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	02c9      	lsls	r1, r1, #11
 80039ac:	430a      	orrs	r2, r1
 80039ae:	615a      	str	r2, [r3, #20]
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_TIM_MspPostInit+0xd0>)
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	02db      	lsls	r3, r3, #11
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80039be:	2114      	movs	r1, #20
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	22c0      	movs	r2, #192	; 0xc0
 80039c4:	0212      	lsls	r2, r2, #8
 80039c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2202      	movs	r2, #2
 80039cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2201      	movs	r2, #1
 80039de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_TIM_MspPostInit+0xd8>)
 80039e4:	0019      	movs	r1, r3
 80039e6:	0010      	movs	r0, r2
 80039e8:	f000 fc00 	bl	80041ec <HAL_GPIO_Init>
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b00b      	add	sp, #44	; 0x2c
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40014000 	.word	0x40014000
 8003a00:	48000400 	.word	0x48000400

08003a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b08b      	sub	sp, #44	; 0x2c
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	2414      	movs	r4, #20
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	0018      	movs	r0, r3
 8003a12:	2314      	movs	r3, #20
 8003a14:	001a      	movs	r2, r3
 8003a16:	2100      	movs	r1, #0
 8003a18:	f004 fa6e 	bl	8007ef8 <memset>
  if(huart->Instance==USART2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d13a      	bne.n	8003a9c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	0289      	lsls	r1, r1, #10
 8003a30:	430a      	orrs	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	0289      	lsls	r1, r1, #10
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	615a      	str	r2, [r3, #20]
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	029b      	lsls	r3, r3, #10
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a5e:	0021      	movs	r1, r4
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	220c      	movs	r2, #12
 8003a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	187b      	adds	r3, r7, r1
 8003a68:	2202      	movs	r2, #2
 8003a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2203      	movs	r2, #3
 8003a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	187a      	adds	r2, r7, r1
 8003a80:	2390      	movs	r3, #144	; 0x90
 8003a82:	05db      	lsls	r3, r3, #23
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 fbb0 	bl	80041ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2100      	movs	r1, #0
 8003a90:	201c      	movs	r0, #28
 8003a92:	f000 fa69 	bl	8003f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a96:	201c      	movs	r0, #28
 8003a98:	f000 fa7b 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b00b      	add	sp, #44	; 0x2c
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	40021000 	.word	0x40021000

08003aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <NMI_Handler+0x4>

08003ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <HardFault_Handler+0x4>

08003ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad0:	f000 f95e 	bl	8003d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <TIM3_IRQHandler+0x14>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f001 fcf8 	bl	80054d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	20000360 	.word	0x20000360

08003af4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <TIM15_IRQHandler+0x14>)
 8003afa:	0018      	movs	r0, r3
 8003afc:	f001 fcec 	bl	80054d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	20000318 	.word	0x20000318

08003b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <USART2_IRQHandler+0x14>)
 8003b12:	0018      	movs	r0, r3
 8003b14:	f002 ff56 	bl	80069c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	20000420 	.word	0x20000420

08003b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
	return 1;
 8003b28:	2301      	movs	r3, #1
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_kill>:

int _kill(int pid, int sig)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b3a:	f004 f9b3 	bl	8007ea4 <__errno>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	2216      	movs	r2, #22
 8003b42:	601a      	str	r2, [r3, #0]
	return -1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	425b      	negs	r3, r3
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_exit>:

void _exit (int status)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b58:	2301      	movs	r3, #1
 8003b5a:	425a      	negs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7ff ffe5 	bl	8003b30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b66:	e7fe      	b.n	8003b66 <_exit+0x16>

08003b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e00a      	b.n	8003b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b7a:	e000      	b.n	8003b7e <_read+0x16>
 8003b7c:	bf00      	nop
 8003b7e:	0001      	movs	r1, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	60ba      	str	r2, [r7, #8]
 8003b86:	b2ca      	uxtb	r2, r1
 8003b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	dbf0      	blt.n	8003b7a <_read+0x12>
	}

return len;
 8003b98:	687b      	ldr	r3, [r7, #4]
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b006      	add	sp, #24
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e009      	b.n	8003bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	60ba      	str	r2, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	e000      	b.n	8003bc2 <_write+0x20>
 8003bc0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	dbf1      	blt.n	8003bb4 <_write+0x12>
	}
	return len;
 8003bd0:	687b      	ldr	r3, [r7, #4]
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b006      	add	sp, #24
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_close>:

int _close(int file)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	return -1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	425b      	negs	r3, r3
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b002      	add	sp, #8
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	0192      	lsls	r2, r2, #6
 8003bfe:	605a      	str	r2, [r3, #4]
	return 0;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_isatty>:

int _isatty(int file)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
	return 1;
 8003c12:	2301      	movs	r3, #1
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
	return 0;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <_sbrk+0x5c>)
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <_sbrk+0x60>)
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <_sbrk+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <_sbrk+0x64>)
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <_sbrk+0x68>)
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <_sbrk+0x64>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d207      	bcs.n	8003c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c64:	f004 f91e 	bl	8007ea4 <__errno>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	425b      	negs	r3, r3
 8003c72:	e009      	b.n	8003c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <_sbrk+0x64>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <_sbrk+0x64>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	18d2      	adds	r2, r2, r3
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <_sbrk+0x64>)
 8003c84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b006      	add	sp, #24
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20004000 	.word	0x20004000
 8003c94:	00000400 	.word	0x00000400
 8003c98:	20000304 	.word	0x20000304
 8003c9c:	200004d0 	.word	0x200004d0

08003ca0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cb0:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cb2:	490e      	ldr	r1, [pc, #56]	; (8003cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <LoopForever+0xe>)
  movs r3, #0
 8003cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb8:	e002      	b.n	8003cc0 <LoopCopyDataInit>

08003cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cbe:	3304      	adds	r3, #4

08003cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc4:	d3f9      	bcc.n	8003cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc6:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cc8:	4c0b      	ldr	r4, [pc, #44]	; (8003cf8 <LoopForever+0x16>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ccc:	e001      	b.n	8003cd2 <LoopFillZerobss>

08003cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd0:	3204      	adds	r2, #4

08003cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd4:	d3fb      	bcc.n	8003cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003cd6:	f7ff ffe3 	bl	8003ca0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003cda:	f004 f8e9 	bl	8007eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cde:	f7fe fc29 	bl	8002534 <main>

08003ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ce2:	e7fe      	b.n	8003ce2 <LoopForever>
  ldr   r0, =_estack
 8003ce4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003cf0:	0800ce8c 	.word	0x0800ce8c
  ldr r2, =_sbss
 8003cf4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003cf8:	200004d0 	.word	0x200004d0

08003cfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cfc:	e7fe      	b.n	8003cfc <ADC1_IRQHandler>
	...

08003d00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_Init+0x24>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_Init+0x24>)
 8003d0a:	2110      	movs	r1, #16
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003d10:	2003      	movs	r0, #3
 8003d12:	f000 f809 	bl	8003d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d16:	f7ff fd2b 	bl	8003770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40022000 	.word	0x40022000

08003d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d30:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <HAL_InitTick+0x5c>)
 8003d32:	681c      	ldr	r4, [r3, #0]
 8003d34:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_InitTick+0x60>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	0019      	movs	r1, r3
 8003d3a:	23fa      	movs	r3, #250	; 0xfa
 8003d3c:	0098      	lsls	r0, r3, #2
 8003d3e:	f7fc f9ff 	bl	8000140 <__udivsi3>
 8003d42:	0003      	movs	r3, r0
 8003d44:	0019      	movs	r1, r3
 8003d46:	0020      	movs	r0, r4
 8003d48:	f7fc f9fa 	bl	8000140 <__udivsi3>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 f92f 	bl	8003fb2 <HAL_SYSTICK_Config>
 8003d54:	1e03      	subs	r3, r0, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e00f      	b.n	8003d7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d80b      	bhi.n	8003d7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	2301      	movs	r3, #1
 8003d66:	425b      	negs	r3, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f000 f8fc 	bl	8003f68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_InitTick+0x64>)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b003      	add	sp, #12
 8003d82:	bd90      	pop	{r4, r7, pc}
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000008 	.word	0x20000008
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_IncTick+0x1c>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	001a      	movs	r2, r3
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_IncTick+0x20>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	18d2      	adds	r2, r2, r3
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_IncTick+0x20>)
 8003da2:	601a      	str	r2, [r3, #0]
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20000008 	.word	0x20000008
 8003db0:	200004bc 	.word	0x200004bc

08003db4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  return uwTick;
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <HAL_GetTick+0x10>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	200004bc 	.word	0x200004bc

08003dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_GetTick>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d005      	beq.n	8003dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_Delay+0x44>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	001a      	movs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	f7ff ffe0 	bl	8003db4 <HAL_GetTick>
 8003df4:	0002      	movs	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d8f7      	bhi.n	8003df0 <HAL_Delay+0x28>
  {
  }
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	20000008 	.word	0x20000008

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	0002      	movs	r2, r0
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b7f      	cmp	r3, #127	; 0x7f
 8003e22:	d809      	bhi.n	8003e38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	001a      	movs	r2, r3
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <__NVIC_EnableIRQ+0x30>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	4091      	lsls	r1, r2
 8003e34:	000a      	movs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
  }
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b7f      	cmp	r3, #127	; 0x7f
 8003e58:	d828      	bhi.n	8003eac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <__NVIC_SetPriority+0xd4>)
 8003e5c:	1dfb      	adds	r3, r7, #7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	33c0      	adds	r3, #192	; 0xc0
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	589b      	ldr	r3, [r3, r2]
 8003e6a:	1dfa      	adds	r2, r7, #7
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	0011      	movs	r1, r2
 8003e70:	2203      	movs	r2, #3
 8003e72:	400a      	ands	r2, r1
 8003e74:	00d2      	lsls	r2, r2, #3
 8003e76:	21ff      	movs	r1, #255	; 0xff
 8003e78:	4091      	lsls	r1, r2
 8003e7a:	000a      	movs	r2, r1
 8003e7c:	43d2      	mvns	r2, r2
 8003e7e:	401a      	ands	r2, r3
 8003e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	401a      	ands	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	2303      	movs	r3, #3
 8003e92:	4003      	ands	r3, r0
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e98:	481f      	ldr	r0, [pc, #124]	; (8003f18 <__NVIC_SetPriority+0xd4>)
 8003e9a:	1dfb      	adds	r3, r7, #7
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	33c0      	adds	r3, #192	; 0xc0
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003eaa:	e031      	b.n	8003f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <__NVIC_SetPriority+0xd8>)
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	3b08      	subs	r3, #8
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3306      	adds	r3, #6
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	18d3      	adds	r3, r2, r3
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1dfa      	adds	r2, r7, #7
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	0011      	movs	r1, r2
 8003ecc:	2203      	movs	r2, #3
 8003ece:	400a      	ands	r2, r1
 8003ed0:	00d2      	lsls	r2, r2, #3
 8003ed2:	21ff      	movs	r1, #255	; 0xff
 8003ed4:	4091      	lsls	r1, r2
 8003ed6:	000a      	movs	r2, r1
 8003ed8:	43d2      	mvns	r2, r2
 8003eda:	401a      	ands	r2, r3
 8003edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	0018      	movs	r0, r3
 8003eec:	2303      	movs	r3, #3
 8003eee:	4003      	ands	r3, r0
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ef4:	4809      	ldr	r0, [pc, #36]	; (8003f1c <__NVIC_SetPriority+0xd8>)
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	001c      	movs	r4, r3
 8003efc:	230f      	movs	r3, #15
 8003efe:	4023      	ands	r3, r4
 8003f00:	3b08      	subs	r3, #8
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	430a      	orrs	r2, r1
 8003f06:	3306      	adds	r3, #6
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	18c3      	adds	r3, r0, r3
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b003      	add	sp, #12
 8003f16:	bd90      	pop	{r4, r7, pc}
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	045b      	lsls	r3, r3, #17
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d301      	bcc.n	8003f38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f34:	2301      	movs	r3, #1
 8003f36:	e010      	b.n	8003f5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <SysTick_Config+0x44>)
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	3a01      	subs	r2, #1
 8003f3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f40:	2301      	movs	r3, #1
 8003f42:	425b      	negs	r3, r3
 8003f44:	2103      	movs	r1, #3
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff ff7c 	bl	8003e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <SysTick_Config+0x44>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <SysTick_Config+0x44>)
 8003f54:	2207      	movs	r2, #7
 8003f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	e000e010 	.word	0xe000e010

08003f68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	210f      	movs	r1, #15
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	1c02      	adds	r2, r0, #0
 8003f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff ff5d 	bl	8003e44 <__NVIC_SetPriority>
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	0002      	movs	r2, r0
 8003f9a:	1dfb      	adds	r3, r7, #7
 8003f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff ff33 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff ffaf 	bl	8003f20 <SysTick_Config>
 8003fc2:	0003      	movs	r3, r0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2317      	movs	r3, #23
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMA_Start_IT+0x24>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e04f      	b.n	8004090 <HAL_DMA_Start_IT+0xc4>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2221      	movs	r2, #33	; 0x21
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d13a      	bne.n	800407a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2221      	movs	r2, #33	; 0x21
 8004008:	2102      	movs	r1, #2
 800400a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	438a      	bics	r2, r1
 8004020:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f8b2 	bl	8004192 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	210e      	movs	r1, #14
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e00f      	b.n	8004068 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	210a      	movs	r1, #10
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2104      	movs	r1, #4
 8004064:	438a      	bics	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e007      	b.n	800408a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800408a:	2317      	movs	r3, #23
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
} 
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b006      	add	sp, #24
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2221      	movs	r2, #33	; 0x21
 80040a4:	5c9b      	ldrb	r3, [r3, r2]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2204      	movs	r2, #4
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e020      	b.n	8004100 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	210e      	movs	r1, #14
 80040ca:	438a      	bics	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	438a      	bics	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	2101      	movs	r1, #1
 80040e8:	4091      	lsls	r1, r2
 80040ea:	000a      	movs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2221      	movs	r2, #33	; 0x21
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	2100      	movs	r1, #0
 80040fc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	210f      	movs	r1, #15
 8004112:	187b      	adds	r3, r7, r1
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2221      	movs	r2, #33	; 0x21
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d006      	beq.n	8004132 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2204      	movs	r2, #4
 8004128:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800412a:	187b      	adds	r3, r7, r1
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e028      	b.n	8004184 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	210e      	movs	r1, #14
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	2101      	movs	r1, #1
 800415c:	4091      	lsls	r1, r2
 800415e:	000a      	movs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2221      	movs	r2, #33	; 0x21
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	0010      	movs	r0, r2
 8004182:	4798      	blx	r3
    } 
  }
  return status;
 8004184:	230f      	movs	r3, #15
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	781b      	ldrb	r3, [r3, #0]
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bd80      	pop	{r7, pc}

08004192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	2101      	movs	r1, #1
 80041aa:	4091      	lsls	r1, r2
 80041ac:	000a      	movs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d108      	bne.n	80041d2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041d0:	e007      	b.n	80041e2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	60da      	str	r2, [r3, #12]
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b004      	add	sp, #16
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fa:	e14f      	b.n	800449c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4091      	lsls	r1, r2
 8004206:	000a      	movs	r2, r1
 8004208:	4013      	ands	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d100      	bne.n	8004214 <HAL_GPIO_Init+0x28>
 8004212:	e140      	b.n	8004496 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2203      	movs	r2, #3
 800421a:	4013      	ands	r3, r2
 800421c:	2b01      	cmp	r3, #1
 800421e:	d005      	beq.n	800422c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004228:	2b02      	cmp	r3, #2
 800422a:	d130      	bne.n	800428e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2203      	movs	r2, #3
 8004238:	409a      	lsls	r2, r3
 800423a:	0013      	movs	r3, r2
 800423c:	43da      	mvns	r2, r3
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	0013      	movs	r3, r2
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004262:	2201      	movs	r2, #1
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	409a      	lsls	r2, r3
 8004268:	0013      	movs	r3, r2
 800426a:	43da      	mvns	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	2201      	movs	r2, #1
 800427a:	401a      	ands	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	409a      	lsls	r2, r3
 8004280:	0013      	movs	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2203      	movs	r2, #3
 8004294:	4013      	ands	r3, r2
 8004296:	2b03      	cmp	r3, #3
 8004298:	d017      	beq.n	80042ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	43da      	mvns	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	0013      	movs	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2203      	movs	r2, #3
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d123      	bne.n	800431e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	08da      	lsrs	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3208      	adds	r2, #8
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	58d3      	ldr	r3, [r2, r3]
 80042e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2207      	movs	r2, #7
 80042e8:	4013      	ands	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	220f      	movs	r2, #15
 80042ee:	409a      	lsls	r2, r3
 80042f0:	0013      	movs	r3, r2
 80042f2:	43da      	mvns	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2107      	movs	r1, #7
 8004302:	400b      	ands	r3, r1
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	409a      	lsls	r2, r3
 8004308:	0013      	movs	r3, r2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	0092      	lsls	r2, r2, #2
 800431a:	6939      	ldr	r1, [r7, #16]
 800431c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	2203      	movs	r2, #3
 800432a:	409a      	lsls	r2, r3
 800432c:	0013      	movs	r3, r2
 800432e:	43da      	mvns	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2203      	movs	r2, #3
 800433c:	401a      	ands	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	0013      	movs	r3, r2
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	23c0      	movs	r3, #192	; 0xc0
 8004358:	029b      	lsls	r3, r3, #10
 800435a:	4013      	ands	r3, r2
 800435c:	d100      	bne.n	8004360 <HAL_GPIO_Init+0x174>
 800435e:	e09a      	b.n	8004496 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004360:	4b54      	ldr	r3, [pc, #336]	; (80044b4 <HAL_GPIO_Init+0x2c8>)
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <HAL_GPIO_Init+0x2c8>)
 8004366:	2101      	movs	r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	619a      	str	r2, [r3, #24]
 800436c:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_GPIO_Init+0x2c8>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2201      	movs	r2, #1
 8004372:	4013      	ands	r3, r2
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004378:	4a4f      	ldr	r2, [pc, #316]	; (80044b8 <HAL_GPIO_Init+0x2cc>)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	3302      	adds	r3, #2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	589b      	ldr	r3, [r3, r2]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2203      	movs	r2, #3
 800438a:	4013      	ands	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	220f      	movs	r2, #15
 8004390:	409a      	lsls	r2, r3
 8004392:	0013      	movs	r3, r2
 8004394:	43da      	mvns	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	2390      	movs	r3, #144	; 0x90
 80043a0:	05db      	lsls	r3, r3, #23
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d013      	beq.n	80043ce <HAL_GPIO_Init+0x1e2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a44      	ldr	r2, [pc, #272]	; (80044bc <HAL_GPIO_Init+0x2d0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00d      	beq.n	80043ca <HAL_GPIO_Init+0x1de>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <HAL_GPIO_Init+0x2d4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <HAL_GPIO_Init+0x1da>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a42      	ldr	r2, [pc, #264]	; (80044c4 <HAL_GPIO_Init+0x2d8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <HAL_GPIO_Init+0x1d6>
 80043be:	2303      	movs	r3, #3
 80043c0:	e006      	b.n	80043d0 <HAL_GPIO_Init+0x1e4>
 80043c2:	2305      	movs	r3, #5
 80043c4:	e004      	b.n	80043d0 <HAL_GPIO_Init+0x1e4>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e002      	b.n	80043d0 <HAL_GPIO_Init+0x1e4>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_GPIO_Init+0x1e4>
 80043ce:	2300      	movs	r3, #0
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	2103      	movs	r1, #3
 80043d4:	400a      	ands	r2, r1
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	4093      	lsls	r3, r2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043e0:	4935      	ldr	r1, [pc, #212]	; (80044b8 <HAL_GPIO_Init+0x2cc>)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	3302      	adds	r3, #2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	025b      	lsls	r3, r3, #9
 8004406:	4013      	ands	r3, r2
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004412:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004418:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	43da      	mvns	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	4013      	ands	r3, r2
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004442:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	43da      	mvns	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	035b      	lsls	r3, r3, #13
 800445a:	4013      	ands	r3, r2
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	43da      	mvns	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	039b      	lsls	r3, r3, #14
 8004484:	4013      	ands	r3, r2
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_GPIO_Init+0x2dc>)
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3301      	adds	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	40da      	lsrs	r2, r3
 80044a4:	1e13      	subs	r3, r2, #0
 80044a6:	d000      	beq.n	80044aa <HAL_GPIO_Init+0x2be>
 80044a8:	e6a8      	b.n	80041fc <HAL_GPIO_Init+0x10>
  } 
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b006      	add	sp, #24
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40010000 	.word	0x40010000
 80044bc:	48000400 	.word	0x48000400
 80044c0:	48000800 	.word	0x48000800
 80044c4:	48000c00 	.word	0x48000c00
 80044c8:	40010400 	.word	0x40010400

080044cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	0008      	movs	r0, r1
 80044d6:	0011      	movs	r1, r2
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	1c02      	adds	r2, r0, #0
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	1c7b      	adds	r3, r7, #1
 80044e0:	1c0a      	adds	r2, r1, #0
 80044e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e4:	1c7b      	adds	r3, r7, #1
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ec:	1cbb      	adds	r3, r7, #2
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044f4:	e003      	b.n	80044fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044f6:	1cbb      	adds	r3, r7, #2
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e305      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	4013      	ands	r3, r2
 8004522:	d100      	bne.n	8004526 <HAL_RCC_OscConfig+0x1e>
 8004524:	e08d      	b.n	8004642 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004526:	4bc5      	ldr	r3, [pc, #788]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	220c      	movs	r2, #12
 800452c:	4013      	ands	r3, r2
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00e      	beq.n	8004550 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004532:	4bc2      	ldr	r3, [pc, #776]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	220c      	movs	r2, #12
 8004538:	4013      	ands	r3, r2
 800453a:	2b08      	cmp	r3, #8
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x64>
 800453e:	4bbf      	ldr	r3, [pc, #764]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	23c0      	movs	r3, #192	; 0xc0
 8004544:	025b      	lsls	r3, r3, #9
 8004546:	401a      	ands	r2, r3
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	025b      	lsls	r3, r3, #9
 800454c:	429a      	cmp	r2, r3
 800454e:	d10d      	bne.n	800456c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4bba      	ldr	r3, [pc, #744]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	029b      	lsls	r3, r3, #10
 8004558:	4013      	ands	r3, r2
 800455a:	d100      	bne.n	800455e <HAL_RCC_OscConfig+0x56>
 800455c:	e070      	b.n	8004640 <HAL_RCC_OscConfig+0x138>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d000      	beq.n	8004568 <HAL_RCC_OscConfig+0x60>
 8004566:	e06b      	b.n	8004640 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e2dc      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_RCC_OscConfig+0x7c>
 8004574:	4bb1      	ldr	r3, [pc, #708]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4bb0      	ldr	r3, [pc, #704]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	0249      	lsls	r1, r1, #9
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e02f      	b.n	80045e4 <HAL_RCC_OscConfig+0xdc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10c      	bne.n	80045a6 <HAL_RCC_OscConfig+0x9e>
 800458c:	4bab      	ldr	r3, [pc, #684]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4baa      	ldr	r3, [pc, #680]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004592:	49ab      	ldr	r1, [pc, #684]	; (8004840 <HAL_RCC_OscConfig+0x338>)
 8004594:	400a      	ands	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	4ba8      	ldr	r3, [pc, #672]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4ba7      	ldr	r3, [pc, #668]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800459e:	49a9      	ldr	r1, [pc, #676]	; (8004844 <HAL_RCC_OscConfig+0x33c>)
 80045a0:	400a      	ands	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e01e      	b.n	80045e4 <HAL_RCC_OscConfig+0xdc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10e      	bne.n	80045cc <HAL_RCC_OscConfig+0xc4>
 80045ae:	4ba3      	ldr	r3, [pc, #652]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4ba2      	ldr	r3, [pc, #648]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	02c9      	lsls	r1, r1, #11
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	4b9f      	ldr	r3, [pc, #636]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b9e      	ldr	r3, [pc, #632]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	0249      	lsls	r1, r1, #9
 80045c6:	430a      	orrs	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xdc>
 80045cc:	4b9b      	ldr	r3, [pc, #620]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b9a      	ldr	r3, [pc, #616]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045d2:	499b      	ldr	r1, [pc, #620]	; (8004840 <HAL_RCC_OscConfig+0x338>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	4b98      	ldr	r3, [pc, #608]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b97      	ldr	r3, [pc, #604]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045de:	4999      	ldr	r1, [pc, #612]	; (8004844 <HAL_RCC_OscConfig+0x33c>)
 80045e0:	400a      	ands	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d014      	beq.n	8004616 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7ff fbe2 	bl	8003db4 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f6:	f7ff fbdd 	bl	8003db4 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b64      	cmp	r3, #100	; 0x64
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e28e      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004608:	4b8c      	ldr	r3, [pc, #560]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	029b      	lsls	r3, r3, #10
 8004610:	4013      	ands	r3, r2
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0xee>
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7ff fbcd 	bl	8003db4 <HAL_GetTick>
 800461a:	0003      	movs	r3, r0
 800461c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7ff fbc8 	bl	8003db4 <HAL_GetTick>
 8004624:	0002      	movs	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e279      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	029b      	lsls	r3, r3, #10
 800463a:	4013      	ands	r3, r2
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x118>
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d100      	bne.n	800464e <HAL_RCC_OscConfig+0x146>
 800464c:	e06c      	b.n	8004728 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800464e:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	220c      	movs	r2, #12
 8004654:	4013      	ands	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004658:	4b78      	ldr	r3, [pc, #480]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	220c      	movs	r2, #12
 800465e:	4013      	ands	r3, r2
 8004660:	2b08      	cmp	r3, #8
 8004662:	d11f      	bne.n	80046a4 <HAL_RCC_OscConfig+0x19c>
 8004664:	4b75      	ldr	r3, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	23c0      	movs	r3, #192	; 0xc0
 800466a:	025b      	lsls	r3, r3, #9
 800466c:	401a      	ands	r2, r3
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	429a      	cmp	r2, r3
 8004674:	d116      	bne.n	80046a4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	4b71      	ldr	r3, [pc, #452]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2202      	movs	r2, #2
 800467c:	4013      	ands	r3, r2
 800467e:	d005      	beq.n	800468c <HAL_RCC_OscConfig+0x184>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e24c      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b6b      	ldr	r3, [pc, #428]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	22f8      	movs	r2, #248	; 0xf8
 8004692:	4393      	bics	r3, r2
 8004694:	0019      	movs	r1, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00da      	lsls	r2, r3, #3
 800469c:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a2:	e041      	b.n	8004728 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d024      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ac:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046b2:	2101      	movs	r1, #1
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7ff fb7c 	bl	8003db4 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7ff fb77 	bl	8003db4 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e228      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2202      	movs	r2, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d0f1      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	22f8      	movs	r2, #248	; 0xf8
 80046e4:	4393      	bics	r3, r2
 80046e6:	0019      	movs	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00da      	lsls	r2, r3, #3
 80046ee:	4b53      	ldr	r3, [pc, #332]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e018      	b.n	8004728 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b51      	ldr	r3, [pc, #324]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b50      	ldr	r3, [pc, #320]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	438a      	bics	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7ff fb57 	bl	8003db4 <HAL_GetTick>
 8004706:	0003      	movs	r3, r0
 8004708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470c:	f7ff fb52 	bl	8003db4 <HAL_GetTick>
 8004710:	0002      	movs	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e203      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	4013      	ands	r3, r2
 8004730:	d036      	beq.n	80047a0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d019      	beq.n	800476e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800473c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800473e:	4b3f      	ldr	r3, [pc, #252]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004740:	2101      	movs	r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004746:	f7ff fb35 	bl	8003db4 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004750:	f7ff fb30 	bl	8003db4 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1e1      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2202      	movs	r2, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d0f1      	beq.n	8004750 <HAL_RCC_OscConfig+0x248>
 800476c:	e018      	b.n	80047a0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476e:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004774:	2101      	movs	r1, #1
 8004776:	438a      	bics	r2, r1
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7ff fb1b 	bl	8003db4 <HAL_GetTick>
 800477e:	0003      	movs	r3, r0
 8004780:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004784:	f7ff fb16 	bl	8003db4 <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1c7      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2202      	movs	r2, #2
 800479c:	4013      	ands	r3, r2
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2204      	movs	r2, #4
 80047a6:	4013      	ands	r3, r2
 80047a8:	d100      	bne.n	80047ac <HAL_RCC_OscConfig+0x2a4>
 80047aa:	e0b5      	b.n	8004918 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ac:	201f      	movs	r0, #31
 80047ae:	183b      	adds	r3, r7, r0
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	055b      	lsls	r3, r3, #21
 80047bc:	4013      	ands	r3, r2
 80047be:	d110      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	0549      	lsls	r1, r1, #21
 80047ca:	430a      	orrs	r2, r1
 80047cc:	61da      	str	r2, [r3, #28]
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	055b      	lsls	r3, r3, #21
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047dc:	183b      	adds	r3, r7, r0
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d11a      	bne.n	8004824 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ee:	4b16      	ldr	r3, [pc, #88]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 80047f4:	2180      	movs	r1, #128	; 0x80
 80047f6:	0049      	lsls	r1, r1, #1
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fc:	f7ff fada 	bl	8003db4 <HAL_GetTick>
 8004800:	0003      	movs	r3, r0
 8004802:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7ff fad5 	bl	8003db4 <HAL_GetTick>
 800480a:	0002      	movs	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e186      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4013      	ands	r3, r2
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10f      	bne.n	800484c <HAL_RCC_OscConfig+0x344>
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004832:	2101      	movs	r1, #1
 8004834:	430a      	orrs	r2, r1
 8004836:	621a      	str	r2, [r3, #32]
 8004838:	e036      	b.n	80048a8 <HAL_RCC_OscConfig+0x3a0>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	40021000 	.word	0x40021000
 8004840:	fffeffff 	.word	0xfffeffff
 8004844:	fffbffff 	.word	0xfffbffff
 8004848:	40007000 	.word	0x40007000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x366>
 8004854:	4bb6      	ldr	r3, [pc, #728]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	4bb5      	ldr	r3, [pc, #724]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800485a:	2101      	movs	r1, #1
 800485c:	438a      	bics	r2, r1
 800485e:	621a      	str	r2, [r3, #32]
 8004860:	4bb3      	ldr	r3, [pc, #716]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	4bb2      	ldr	r3, [pc, #712]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004866:	2104      	movs	r1, #4
 8004868:	438a      	bics	r2, r1
 800486a:	621a      	str	r2, [r3, #32]
 800486c:	e01c      	b.n	80048a8 <HAL_RCC_OscConfig+0x3a0>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x388>
 8004876:	4bae      	ldr	r3, [pc, #696]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	4bad      	ldr	r3, [pc, #692]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800487c:	2104      	movs	r1, #4
 800487e:	430a      	orrs	r2, r1
 8004880:	621a      	str	r2, [r3, #32]
 8004882:	4bab      	ldr	r3, [pc, #684]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	4baa      	ldr	r3, [pc, #680]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004888:	2101      	movs	r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	621a      	str	r2, [r3, #32]
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0x3a0>
 8004890:	4ba7      	ldr	r3, [pc, #668]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	4ba6      	ldr	r3, [pc, #664]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004896:	2101      	movs	r1, #1
 8004898:	438a      	bics	r2, r1
 800489a:	621a      	str	r2, [r3, #32]
 800489c:	4ba4      	ldr	r3, [pc, #656]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	4ba3      	ldr	r3, [pc, #652]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80048a2:	2104      	movs	r1, #4
 80048a4:	438a      	bics	r2, r1
 80048a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d014      	beq.n	80048da <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b0:	f7ff fa80 	bl	8003db4 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	e009      	b.n	80048ce <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7ff fa7b 	bl	8003db4 <HAL_GetTick>
 80048be:	0002      	movs	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	4a9b      	ldr	r2, [pc, #620]	; (8004b34 <HAL_RCC_OscConfig+0x62c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e12b      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b98      	ldr	r3, [pc, #608]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	2202      	movs	r2, #2
 80048d4:	4013      	ands	r3, r2
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x3b2>
 80048d8:	e013      	b.n	8004902 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7ff fa6b 	bl	8003db4 <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	e009      	b.n	80048f8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7ff fa66 	bl	8003db4 <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	4a91      	ldr	r2, [pc, #580]	; (8004b34 <HAL_RCC_OscConfig+0x62c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e116      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	4b8d      	ldr	r3, [pc, #564]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004902:	231f      	movs	r3, #31
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	4b87      	ldr	r3, [pc, #540]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004912:	4989      	ldr	r1, [pc, #548]	; (8004b38 <HAL_RCC_OscConfig+0x630>)
 8004914:	400a      	ands	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	4013      	ands	r3, r2
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d12a      	bne.n	8004980 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800492a:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004930:	2104      	movs	r1, #4
 8004932:	430a      	orrs	r2, r1
 8004934:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004936:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7ff fa37 	bl	8003db4 <HAL_GetTick>
 8004946:	0003      	movs	r3, r0
 8004948:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800494c:	f7ff fa32 	bl	8003db4 <HAL_GetTick>
 8004950:	0002      	movs	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0e3      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800495e:	4b74      	ldr	r3, [pc, #464]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d0f1      	beq.n	800494c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004968:	4b71      	ldr	r3, [pc, #452]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	22f8      	movs	r2, #248	; 0xf8
 800496e:	4393      	bics	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	00da      	lsls	r2, r3, #3
 8004978:	4b6d      	ldr	r3, [pc, #436]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800497a:	430a      	orrs	r2, r1
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
 800497e:	e034      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	3305      	adds	r3, #5
 8004986:	d111      	bne.n	80049ac <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004988:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800498a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498c:	4b68      	ldr	r3, [pc, #416]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800498e:	2104      	movs	r1, #4
 8004990:	438a      	bics	r2, r1
 8004992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004994:	4b66      	ldr	r3, [pc, #408]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	22f8      	movs	r2, #248	; 0xf8
 800499a:	4393      	bics	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	00da      	lsls	r2, r3, #3
 80049a4:	4b62      	ldr	r3, [pc, #392]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34
 80049aa:	e01e      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049ac:	4b60      	ldr	r3, [pc, #384]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	4b5f      	ldr	r3, [pc, #380]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049b2:	2104      	movs	r1, #4
 80049b4:	430a      	orrs	r2, r1
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80049b8:	4b5d      	ldr	r3, [pc, #372]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049bc:	4b5c      	ldr	r3, [pc, #368]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049be:	2101      	movs	r1, #1
 80049c0:	438a      	bics	r2, r1
 80049c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7ff f9f6 	bl	8003db4 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049ce:	f7ff f9f1 	bl	8003db4 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0a2      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2202      	movs	r2, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	d1f1      	bne.n	80049ce <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d100      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
 80049f2:	e097      	b.n	8004b24 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f4:	4b4e      	ldr	r3, [pc, #312]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	220c      	movs	r2, #12
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d100      	bne.n	8004a02 <HAL_RCC_OscConfig+0x4fa>
 8004a00:	e06b      	b.n	8004ada <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d14c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a10:	494a      	ldr	r1, [pc, #296]	; (8004b3c <HAL_RCC_OscConfig+0x634>)
 8004a12:	400a      	ands	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7ff f9cd 	bl	8003db4 <HAL_GetTick>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7ff f9c8 	bl	8003db4 <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e079      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a32:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	049b      	lsls	r3, r3, #18
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3e:	4b3c      	ldr	r3, [pc, #240]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	220f      	movs	r2, #15
 8004a44:	4393      	bics	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <HAL_RCC_OscConfig+0x638>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	0449      	lsls	r1, r1, #17
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7ff f99b 	bl	8003db4 <HAL_GetTick>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a84:	f7ff f996 	bl	8003db4 <HAL_GetTick>
 8004a88:	0002      	movs	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e047      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	049b      	lsls	r3, r3, #18
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x57c>
 8004aa2:	e03f      	b.n	8004b24 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa4:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004aaa:	4924      	ldr	r1, [pc, #144]	; (8004b3c <HAL_RCC_OscConfig+0x634>)
 8004aac:	400a      	ands	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7ff f980 	bl	8003db4 <HAL_GetTick>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7ff f97b 	bl	8003db4 <HAL_GetTick>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e02c      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	049b      	lsls	r3, r3, #18
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x5b2>
 8004ad8:	e024      	b.n	8004b24 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e01f      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	23c0      	movs	r3, #192	; 0xc0
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	401a      	ands	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d10e      	bne.n	8004b20 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	220f      	movs	r2, #15
 8004b06:	401a      	ands	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	23f0      	movs	r3, #240	; 0xf0
 8004b14:	039b      	lsls	r3, r3, #14
 8004b16:	401a      	ands	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b008      	add	sp, #32
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40021000 	.word	0x40021000
 8004b34:	00001388 	.word	0x00001388
 8004b38:	efffffff 	.word	0xefffffff
 8004b3c:	feffffff 	.word	0xfeffffff
 8004b40:	ffc27fff 	.word	0xffc27fff

08004b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b3      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b5b      	ldr	r3, [pc, #364]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d911      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b58      	ldr	r3, [pc, #352]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	4b55      	ldr	r3, [pc, #340]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b78:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e09a      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	4013      	ands	r3, r2
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d006      	beq.n	8004bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b9e:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004ba4:	21e0      	movs	r1, #224	; 0xe0
 8004ba6:	00c9      	lsls	r1, r1, #3
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	22f0      	movs	r2, #240	; 0xf0
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	4b44      	ldr	r3, [pc, #272]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d040      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d114      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06e      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bea:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	049b      	lsls	r3, r3, #18
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e062      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	4013      	ands	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e05b      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c08:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	4393      	bics	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c1c:	f7ff f8ca 	bl	8003db4 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c24:	e009      	b.n	8004c3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c26:	f7ff f8c5 	bl	8003db4 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	4a27      	ldr	r2, [pc, #156]	; (8004cd0 <HAL_RCC_ClockConfig+0x18c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e042      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	220c      	movs	r2, #12
 8004c40:	401a      	ands	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d1ec      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d211      	bcs.n	8004c7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4393      	bics	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2201      	movs	r2, #1
 8004c72:	4013      	ands	r3, r2
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e020      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2204      	movs	r2, #4
 8004c84:	4013      	ands	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <HAL_RCC_ClockConfig+0x190>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c9c:	f000 f820 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004ca0:	0001      	movs	r1, r0
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	220f      	movs	r2, #15
 8004caa:	4013      	ands	r3, r2
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x194>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	000a      	movs	r2, r1
 8004cb2:	40da      	lsrs	r2, r3
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x198>)
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004cb8:	2003      	movs	r0, #3
 8004cba:	f7ff f835 	bl	8003d28 <HAL_InitTick>
  
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	00001388 	.word	0x00001388
 8004cd4:	fffff8ff 	.word	0xfffff8ff
 8004cd8:	0800c9b8 	.word	0x0800c9b8
 8004cdc:	20000000 	.word	0x20000000

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b08f      	sub	sp, #60	; 0x3c
 8004ce4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004ce6:	2314      	movs	r3, #20
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cee:	c313      	stmia	r3!, {r0, r1, r4}
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cfa:	c313      	stmia	r3!, {r0, r1, r4}
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d04:	2300      	movs	r3, #0
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004d14:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	220c      	movs	r2, #12
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d002      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x4a>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d003      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x50>
 8004d28:	e02f      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d2e:	e02f      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	0c9b      	lsrs	r3, r3, #18
 8004d34:	220f      	movs	r2, #15
 8004d36:	4013      	ands	r3, r2
 8004d38:	2214      	movs	r2, #20
 8004d3a:	18ba      	adds	r2, r7, r2
 8004d3c:	5cd3      	ldrb	r3, [r2, r3]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	220f      	movs	r2, #15
 8004d46:	4013      	ands	r3, r2
 8004d48:	1d3a      	adds	r2, r7, #4
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	23c0      	movs	r3, #192	; 0xc0
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	401a      	ands	r2, r3
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d60:	4811      	ldr	r0, [pc, #68]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d62:	f7fb f9ed 	bl	8000140 <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	001a      	movs	r2, r3
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	4353      	muls	r3, r2
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d74:	480c      	ldr	r0, [pc, #48]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d76:	f7fb f9e3 	bl	8000140 <__udivsi3>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	4353      	muls	r3, r2
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d88:	e002      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d8e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b00f      	add	sp, #60	; 0x3c
 8004d98:	bd90      	pop	{r4, r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	0800c918 	.word	0x0800c918
 8004da0:	0800c928 	.word	0x0800c928
 8004da4:	40021000 	.word	0x40021000
 8004da8:	007a1200 	.word	0x007a1200

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db0:	4b02      	ldr	r3, [pc, #8]	; (8004dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	20000000 	.word	0x20000000

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004dc4:	f7ff fff2 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004dc8:	0001      	movs	r1, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd6:	5cd3      	ldrb	r3, [r2, r3]
 8004dd8:	40d9      	lsrs	r1, r3
 8004dda:	000b      	movs	r3, r1
}    
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	40021000 	.word	0x40021000
 8004de8:	0800c9c8 	.word	0x0800c9c8

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e042      	b.n	8004e84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	223d      	movs	r2, #61	; 0x3d
 8004e02:	5c9b      	ldrb	r3, [r3, r2]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	223c      	movs	r2, #60	; 0x3c
 8004e0e:	2100      	movs	r1, #0
 8004e10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fe fccf 	bl	80037b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223d      	movs	r2, #61	; 0x3d
 8004e1e:	2102      	movs	r1, #2
 8004e20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	0010      	movs	r0, r2
 8004e2e:	f000 fef3 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2246      	movs	r2, #70	; 0x46
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	223e      	movs	r2, #62	; 0x3e
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	223f      	movs	r2, #63	; 0x3f
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2240      	movs	r2, #64	; 0x40
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2241      	movs	r2, #65	; 0x41
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2242      	movs	r2, #66	; 0x42
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2243      	movs	r2, #67	; 0x43
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2244      	movs	r2, #68	; 0x44
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2245      	movs	r2, #69	; 0x45
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	223d      	movs	r2, #61	; 0x3d
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e042      	b.n	8004f24 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	223d      	movs	r2, #61	; 0x3d
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223c      	movs	r2, #60	; 0x3c
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 f839 	bl	8004f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	223d      	movs	r2, #61	; 0x3d
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	0019      	movs	r1, r3
 8004ecc:	0010      	movs	r0, r2
 8004ece:	f000 fea3 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2246      	movs	r2, #70	; 0x46
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	223e      	movs	r2, #62	; 0x3e
 8004ede:	2101      	movs	r1, #1
 8004ee0:	5499      	strb	r1, [r3, r2]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	223f      	movs	r2, #63	; 0x3f
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	5499      	strb	r1, [r3, r2]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	2101      	movs	r1, #1
 8004ef0:	5499      	strb	r1, [r3, r2]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2241      	movs	r2, #65	; 0x41
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2242      	movs	r2, #66	; 0x42
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2243      	movs	r2, #67	; 0x43
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2244      	movs	r2, #68	; 0x44
 8004f0e:	2101      	movs	r1, #1
 8004f10:	5499      	strb	r1, [r3, r2]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2245      	movs	r2, #69	; 0x45
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	223d      	movs	r2, #61	; 0x3d
 8004f1e:	2101      	movs	r1, #1
 8004f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <HAL_TIM_PWM_Start+0x22>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	223e      	movs	r2, #62	; 0x3e
 8004f50:	5c9b      	ldrb	r3, [r3, r2]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	1e5a      	subs	r2, r3, #1
 8004f58:	4193      	sbcs	r3, r2
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	e01f      	b.n	8004f9e <HAL_TIM_PWM_Start+0x62>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d108      	bne.n	8004f76 <HAL_TIM_PWM_Start+0x3a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	223f      	movs	r2, #63	; 0x3f
 8004f68:	5c9b      	ldrb	r3, [r3, r2]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	1e5a      	subs	r2, r3, #1
 8004f70:	4193      	sbcs	r3, r2
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e013      	b.n	8004f9e <HAL_TIM_PWM_Start+0x62>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d108      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x52>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2240      	movs	r2, #64	; 0x40
 8004f80:	5c9b      	ldrb	r3, [r3, r2]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	4193      	sbcs	r3, r2
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	e007      	b.n	8004f9e <HAL_TIM_PWM_Start+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2241      	movs	r2, #65	; 0x41
 8004f92:	5c9b      	ldrb	r3, [r3, r2]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	1e5a      	subs	r2, r3, #1
 8004f9a:	4193      	sbcs	r3, r2
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06e      	b.n	8005084 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x7a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	223e      	movs	r2, #62	; 0x3e
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	5499      	strb	r1, [r3, r2]
 8004fb4:	e013      	b.n	8004fde <HAL_TIM_PWM_Start+0xa2>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x8a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	223f      	movs	r2, #63	; 0x3f
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	5499      	strb	r1, [r3, r2]
 8004fc4:	e00b      	b.n	8004fde <HAL_TIM_PWM_Start+0xa2>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x9a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	5499      	strb	r1, [r3, r2]
 8004fd4:	e003      	b.n	8004fde <HAL_TIM_PWM_Start+0xa2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2241      	movs	r2, #65	; 0x41
 8004fda:	2102      	movs	r1, #2
 8004fdc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f001 fa42 	bl	8006470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a26      	ldr	r2, [pc, #152]	; (800508c <HAL_TIM_PWM_Start+0x150>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_TIM_PWM_Start+0xd8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a25      	ldr	r2, [pc, #148]	; (8005090 <HAL_TIM_PWM_Start+0x154>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_TIM_PWM_Start+0xd8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_TIM_PWM_Start+0x158>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_TIM_PWM_Start+0xd8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_TIM_PWM_Start+0x15c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d101      	bne.n	8005018 <HAL_TIM_PWM_Start+0xdc>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_TIM_PWM_Start+0xde>
 8005018:	2300      	movs	r3, #0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	0209      	lsls	r1, r1, #8
 800502c:	430a      	orrs	r2, r1
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <HAL_TIM_PWM_Start+0x150>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_PWM_Start+0x112>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <HAL_TIM_PWM_Start+0x160>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_PWM_Start+0x112>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_TIM_PWM_Start+0x154>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2207      	movs	r2, #7
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b06      	cmp	r3, #6
 800505e:	d010      	beq.n	8005082 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005070:	e007      	b.n	8005082 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2101      	movs	r1, #1
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40000400 	.word	0x40000400

080050a0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	230f      	movs	r3, #15
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d02a      	beq.n	800510e <HAL_TIM_PWM_Stop_IT+0x6e>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d830      	bhi.n	8005120 <HAL_TIM_PWM_Stop_IT+0x80>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d01b      	beq.n	80050fc <HAL_TIM_PWM_Stop_IT+0x5c>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d82a      	bhi.n	8005120 <HAL_TIM_PWM_Stop_IT+0x80>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_TIM_PWM_Stop_IT+0x38>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d009      	beq.n	80050ea <HAL_TIM_PWM_Stop_IT+0x4a>
 80050d6:	e023      	b.n	8005120 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2102      	movs	r1, #2
 80050e4:	438a      	bics	r2, r1
 80050e6:	60da      	str	r2, [r3, #12]
      break;
 80050e8:	e01f      	b.n	800512a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2104      	movs	r1, #4
 80050f6:	438a      	bics	r2, r1
 80050f8:	60da      	str	r2, [r3, #12]
      break;
 80050fa:	e016      	b.n	800512a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2108      	movs	r1, #8
 8005108:	438a      	bics	r2, r1
 800510a:	60da      	str	r2, [r3, #12]
      break;
 800510c:	e00d      	b.n	800512a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2110      	movs	r1, #16
 800511a:	438a      	bics	r2, r1
 800511c:	60da      	str	r2, [r3, #12]
      break;
 800511e:	e004      	b.n	800512a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005120:	230f      	movs	r3, #15
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
      break;
 8005128:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800512a:	230f      	movs	r3, #15
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d000      	beq.n	8005136 <HAL_TIM_PWM_Stop_IT+0x96>
 8005134:	e063      	b.n	80051fe <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	0018      	movs	r0, r3
 8005140:	f001 f996 	bl	8006470 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a30      	ldr	r2, [pc, #192]	; (800520c <HAL_TIM_PWM_Stop_IT+0x16c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_TIM_PWM_Stop_IT+0xcc>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <HAL_TIM_PWM_Stop_IT+0x170>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_TIM_PWM_Stop_IT+0xcc>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2d      	ldr	r2, [pc, #180]	; (8005214 <HAL_TIM_PWM_Stop_IT+0x174>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_TIM_PWM_Stop_IT+0xcc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_TIM_PWM_Stop_IT+0xd0>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_TIM_PWM_Stop_IT+0xd2>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d013      	beq.n	800519e <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	4a27      	ldr	r2, [pc, #156]	; (800521c <HAL_TIM_PWM_Stop_IT+0x17c>)
 800517e:	4013      	ands	r3, r2
 8005180:	d10d      	bne.n	800519e <HAL_TIM_PWM_Stop_IT+0xfe>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4a25      	ldr	r2, [pc, #148]	; (8005220 <HAL_TIM_PWM_Stop_IT+0x180>)
 800518a:	4013      	ands	r3, r2
 800518c:	d107      	bne.n	800519e <HAL_TIM_PWM_Stop_IT+0xfe>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4922      	ldr	r1, [pc, #136]	; (8005224 <HAL_TIM_PWM_Stop_IT+0x184>)
 800519a:	400a      	ands	r2, r1
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <HAL_TIM_PWM_Stop_IT+0x17c>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <HAL_TIM_PWM_Stop_IT+0x126>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_TIM_PWM_Stop_IT+0x180>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_PWM_Stop_IT+0x126>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2101      	movs	r1, #1
 80051c2:	438a      	bics	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Stop_IT+0x136>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	223e      	movs	r2, #62	; 0x3e
 80051d0:	2101      	movs	r1, #1
 80051d2:	5499      	strb	r1, [r3, r2]
 80051d4:	e013      	b.n	80051fe <HAL_TIM_PWM_Stop_IT+0x15e>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Stop_IT+0x146>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	223f      	movs	r2, #63	; 0x3f
 80051e0:	2101      	movs	r1, #1
 80051e2:	5499      	strb	r1, [r3, r2]
 80051e4:	e00b      	b.n	80051fe <HAL_TIM_PWM_Stop_IT+0x15e>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Stop_IT+0x156>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2240      	movs	r2, #64	; 0x40
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]
 80051f4:	e003      	b.n	80051fe <HAL_TIM_PWM_Stop_IT+0x15e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2241      	movs	r2, #65	; 0x41
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80051fe:	230f      	movs	r3, #15
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	781b      	ldrb	r3, [r3, #0]
}
 8005204:	0018      	movs	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	b004      	add	sp, #16
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800
 800521c:	00001111 	.word	0x00001111
 8005220:	00000444 	.word	0x00000444
 8005224:	ffff7fff 	.word	0xffff7fff

08005228 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e042      	b.n	80052c0 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223d      	movs	r2, #61	; 0x3d
 800523e:	5c9b      	ldrb	r3, [r3, r2]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	223c      	movs	r2, #60	; 0x3c
 800524a:	2100      	movs	r1, #0
 800524c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0018      	movs	r0, r3
 8005252:	f7fe faef 	bl	8003834 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	223d      	movs	r2, #61	; 0x3d
 800525a:	2102      	movs	r1, #2
 800525c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	0019      	movs	r1, r3
 8005268:	0010      	movs	r0, r2
 800526a:	f000 fcd5 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2246      	movs	r2, #70	; 0x46
 8005272:	2101      	movs	r1, #1
 8005274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	223e      	movs	r2, #62	; 0x3e
 800527a:	2101      	movs	r1, #1
 800527c:	5499      	strb	r1, [r3, r2]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	223f      	movs	r2, #63	; 0x3f
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2240      	movs	r2, #64	; 0x40
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2241      	movs	r2, #65	; 0x41
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2242      	movs	r2, #66	; 0x42
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2243      	movs	r2, #67	; 0x43
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2244      	movs	r2, #68	; 0x44
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2245      	movs	r2, #69	; 0x45
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	223d      	movs	r2, #61	; 0x3d
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	230f      	movs	r3, #15
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <HAL_TIM_IC_Start_IT+0x22>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	223e      	movs	r2, #62	; 0x3e
 80052e4:	5c9b      	ldrb	r3, [r3, r2]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	e013      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x4a>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start_IT+0x32>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	223f      	movs	r2, #63	; 0x3f
 80052f4:	5c9b      	ldrb	r3, [r3, r2]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e00b      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x4a>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_IT+0x42>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2240      	movs	r2, #64	; 0x40
 8005304:	5c9b      	ldrb	r3, [r3, r2]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e003      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x4a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2241      	movs	r2, #65	; 0x41
 800530e:	5c9b      	ldrb	r3, [r3, r2]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	220e      	movs	r2, #14
 8005314:	18ba      	adds	r2, r7, r2
 8005316:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_TIM_IC_Start_IT+0x60>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2242      	movs	r2, #66	; 0x42
 8005322:	5c9b      	ldrb	r3, [r3, r2]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e013      	b.n	8005350 <HAL_TIM_IC_Start_IT+0x88>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d104      	bne.n	8005338 <HAL_TIM_IC_Start_IT+0x70>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2243      	movs	r2, #67	; 0x43
 8005332:	5c9b      	ldrb	r3, [r3, r2]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e00b      	b.n	8005350 <HAL_TIM_IC_Start_IT+0x88>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d104      	bne.n	8005348 <HAL_TIM_IC_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2244      	movs	r2, #68	; 0x44
 8005342:	5c9b      	ldrb	r3, [r3, r2]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e003      	b.n	8005350 <HAL_TIM_IC_Start_IT+0x88>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2245      	movs	r2, #69	; 0x45
 800534c:	5c9b      	ldrb	r3, [r3, r2]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	210d      	movs	r1, #13
 8005352:	187a      	adds	r2, r7, r1
 8005354:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	230e      	movs	r3, #14
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d103      	bne.n	8005368 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005360:	187b      	adds	r3, r7, r1
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0ab      	b.n	80054c4 <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_TIM_IC_Start_IT+0xb4>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	223e      	movs	r2, #62	; 0x3e
 8005376:	2102      	movs	r1, #2
 8005378:	5499      	strb	r1, [r3, r2]
 800537a:	e013      	b.n	80053a4 <HAL_TIM_IC_Start_IT+0xdc>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d104      	bne.n	800538c <HAL_TIM_IC_Start_IT+0xc4>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	223f      	movs	r2, #63	; 0x3f
 8005386:	2102      	movs	r1, #2
 8005388:	5499      	strb	r1, [r3, r2]
 800538a:	e00b      	b.n	80053a4 <HAL_TIM_IC_Start_IT+0xdc>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d104      	bne.n	800539c <HAL_TIM_IC_Start_IT+0xd4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	2102      	movs	r1, #2
 8005398:	5499      	strb	r1, [r3, r2]
 800539a:	e003      	b.n	80053a4 <HAL_TIM_IC_Start_IT+0xdc>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2241      	movs	r2, #65	; 0x41
 80053a0:	2102      	movs	r1, #2
 80053a2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <HAL_TIM_IC_Start_IT+0xec>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2242      	movs	r2, #66	; 0x42
 80053ae:	2102      	movs	r1, #2
 80053b0:	5499      	strb	r1, [r3, r2]
 80053b2:	e013      	b.n	80053dc <HAL_TIM_IC_Start_IT+0x114>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d104      	bne.n	80053c4 <HAL_TIM_IC_Start_IT+0xfc>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2243      	movs	r2, #67	; 0x43
 80053be:	2102      	movs	r1, #2
 80053c0:	5499      	strb	r1, [r3, r2]
 80053c2:	e00b      	b.n	80053dc <HAL_TIM_IC_Start_IT+0x114>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d104      	bne.n	80053d4 <HAL_TIM_IC_Start_IT+0x10c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2244      	movs	r2, #68	; 0x44
 80053ce:	2102      	movs	r1, #2
 80053d0:	5499      	strb	r1, [r3, r2]
 80053d2:	e003      	b.n	80053dc <HAL_TIM_IC_Start_IT+0x114>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2245      	movs	r2, #69	; 0x45
 80053d8:	2102      	movs	r1, #2
 80053da:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d02a      	beq.n	8005438 <HAL_TIM_IC_Start_IT+0x170>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d830      	bhi.n	800544a <HAL_TIM_IC_Start_IT+0x182>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d01b      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x15e>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d82a      	bhi.n	800544a <HAL_TIM_IC_Start_IT+0x182>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IC_Start_IT+0x13a>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_IC_Start_IT+0x14c>
 8005400:	e023      	b.n	800544a <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2102      	movs	r1, #2
 800540e:	430a      	orrs	r2, r1
 8005410:	60da      	str	r2, [r3, #12]
      break;
 8005412:	e01f      	b.n	8005454 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2104      	movs	r1, #4
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]
      break;
 8005424:	e016      	b.n	8005454 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2108      	movs	r1, #8
 8005432:	430a      	orrs	r2, r1
 8005434:	60da      	str	r2, [r3, #12]
      break;
 8005436:	e00d      	b.n	8005454 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2110      	movs	r1, #16
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]
      break;
 8005448:	e004      	b.n	8005454 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800544a:	230f      	movs	r3, #15
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
      break;
 8005452:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005454:	230f      	movs	r3, #15
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d12f      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	2201      	movs	r2, #1
 8005466:	0018      	movs	r0, r3
 8005468:	f001 f802 	bl	8006470 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIM_IC_Start_IT+0x204>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_TIM_IC_Start_IT+0x1c2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <HAL_TIM_IC_Start_IT+0x208>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_IC_Start_IT+0x1c2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <HAL_TIM_IC_Start_IT+0x20c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2207      	movs	r2, #7
 8005492:	4013      	ands	r3, r2
 8005494:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d010      	beq.n	80054be <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2101      	movs	r1, #1
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	e007      	b.n	80054be <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054be:	230f      	movs	r3, #15
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	781b      	ldrb	r3, [r3, #0]
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b004      	add	sp, #16
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40014000 	.word	0x40014000

080054d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2202      	movs	r2, #2
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d124      	bne.n	8005538 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2202      	movs	r2, #2
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d11d      	bne.n	8005538 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2203      	movs	r2, #3
 8005502:	4252      	negs	r2, r2
 8005504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2203      	movs	r2, #3
 8005514:	4013      	ands	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f7fd ff38 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 8005520:	e007      	b.n	8005532 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f000 fb67 	bl	8005bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f7fd feed 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2204      	movs	r2, #4
 8005540:	4013      	ands	r3, r2
 8005542:	2b04      	cmp	r3, #4
 8005544:	d125      	bne.n	8005592 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2204      	movs	r2, #4
 800554e:	4013      	ands	r3, r2
 8005550:	2b04      	cmp	r3, #4
 8005552:	d11e      	bne.n	8005592 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2205      	movs	r2, #5
 800555a:	4252      	negs	r2, r2
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	23c0      	movs	r3, #192	; 0xc0
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4013      	ands	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f7fd ff0b 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 800557a:	e007      	b.n	800558c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0018      	movs	r0, r3
 8005580:	f000 fb3a 	bl	8005bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	0018      	movs	r0, r3
 8005588:	f7fd fec0 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2208      	movs	r2, #8
 800559a:	4013      	ands	r3, r2
 800559c:	2b08      	cmp	r3, #8
 800559e:	d124      	bne.n	80055ea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2208      	movs	r2, #8
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d11d      	bne.n	80055ea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2209      	movs	r2, #9
 80055b4:	4252      	negs	r2, r2
 80055b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2204      	movs	r2, #4
 80055bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2203      	movs	r2, #3
 80055c6:	4013      	ands	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7fd fedf 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 80055d2:	e007      	b.n	80055e4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f000 fb0e 	bl	8005bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f7fd fe94 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2210      	movs	r2, #16
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d125      	bne.n	8005644 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2210      	movs	r2, #16
 8005600:	4013      	ands	r3, r2
 8005602:	2b10      	cmp	r3, #16
 8005604:	d11e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2211      	movs	r2, #17
 800560c:	4252      	negs	r2, r2
 800560e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2208      	movs	r2, #8
 8005614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	23c0      	movs	r3, #192	; 0xc0
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4013      	ands	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f7fd feb2 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 800562c:	e007      	b.n	800563e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	0018      	movs	r0, r3
 8005632:	f000 fae1 	bl	8005bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f7fd fe67 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2201      	movs	r2, #1
 800564c:	4013      	ands	r3, r2
 800564e:	2b01      	cmp	r3, #1
 8005650:	d10f      	bne.n	8005672 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	4013      	ands	r3, r2
 800565c:	2b01      	cmp	r3, #1
 800565e:	d108      	bne.n	8005672 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2202      	movs	r2, #2
 8005666:	4252      	negs	r2, r2
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 fabb 	bl	8005be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	4013      	ands	r3, r2
 800567c:	2b80      	cmp	r3, #128	; 0x80
 800567e:	d10f      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	4013      	ands	r3, r2
 800568a:	2b80      	cmp	r3, #128	; 0x80
 800568c:	d108      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2281      	movs	r2, #129	; 0x81
 8005694:	4252      	negs	r2, r2
 8005696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	0018      	movs	r0, r3
 800569c:	f000 ffca 	bl	8006634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d10f      	bne.n	80056ce <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2240      	movs	r2, #64	; 0x40
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d108      	bne.n	80056ce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2241      	movs	r2, #65	; 0x41
 80056c2:	4252      	negs	r2, r2
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f000 fa9d 	bl	8005c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2220      	movs	r2, #32
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d10f      	bne.n	80056fc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d108      	bne.n	80056fc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2221      	movs	r2, #33	; 0x21
 80056f0:	4252      	negs	r2, r2
 80056f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 ff94 	bl	8006624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b002      	add	sp, #8
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2317      	movs	r3, #23
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	223c      	movs	r2, #60	; 0x3c
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_TIM_IC_ConfigChannel+0x22>
 8005722:	2302      	movs	r3, #2
 8005724:	e08c      	b.n	8005840 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	223c      	movs	r2, #60	; 0x3c
 800572a:	2101      	movs	r1, #1
 800572c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f000 fcda 	bl	80060fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	210c      	movs	r1, #12
 8005754:	438a      	bics	r2, r1
 8005756:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6999      	ldr	r1, [r3, #24]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	619a      	str	r2, [r3, #24]
 800576a:	e062      	b.n	8005832 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b04      	cmp	r3, #4
 8005770:	d11c      	bne.n	80057ac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f000 fd41 	bl	8006208 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	492d      	ldr	r1, [pc, #180]	; (8005848 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005792:	400a      	ands	r2, r1
 8005794:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6999      	ldr	r1, [r3, #24]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	021a      	lsls	r2, r3, #8
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	619a      	str	r2, [r3, #24]
 80057aa:	e042      	b.n	8005832 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d11b      	bne.n	80057ea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6819      	ldr	r1, [r3, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f000 fd95 	bl	80062f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	210c      	movs	r1, #12
 80057d2:	438a      	bics	r2, r1
 80057d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69d9      	ldr	r1, [r3, #28]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	61da      	str	r2, [r3, #28]
 80057e8:	e023      	b.n	8005832 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d11c      	bne.n	800582a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f000 fdb6 	bl	8006370 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	490e      	ldr	r1, [pc, #56]	; (8005848 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005810:	400a      	ands	r2, r1
 8005812:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69d9      	ldr	r1, [r3, #28]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	61da      	str	r2, [r3, #28]
 8005828:	e003      	b.n	8005832 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800582a:	2317      	movs	r3, #23
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	2201      	movs	r2, #1
 8005830:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	223c      	movs	r2, #60	; 0x3c
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]

  return status;
 800583a:	2317      	movs	r3, #23
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	781b      	ldrb	r3, [r3, #0]
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b006      	add	sp, #24
 8005846:	bd80      	pop	{r7, pc}
 8005848:	fffff3ff 	.word	0xfffff3ff

0800584c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2317      	movs	r3, #23
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	223c      	movs	r2, #60	; 0x3c
 8005864:	5c9b      	ldrb	r3, [r3, r2]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_ConfigChannel+0x22>
 800586a:	2302      	movs	r3, #2
 800586c:	e0ad      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x17e>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	223c      	movs	r2, #60	; 0x3c
 8005872:	2101      	movs	r1, #1
 8005874:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b0c      	cmp	r3, #12
 800587a:	d100      	bne.n	800587e <HAL_TIM_PWM_ConfigChannel+0x32>
 800587c:	e076      	b.n	800596c <HAL_TIM_PWM_ConfigChannel+0x120>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d900      	bls.n	8005886 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005884:	e095      	b.n	80059b2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d04e      	beq.n	800592a <HAL_TIM_PWM_ConfigChannel+0xde>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b08      	cmp	r3, #8
 8005890:	d900      	bls.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005892:	e08e      	b.n	80059b2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d021      	beq.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80058a0:	e087      	b.n	80059b2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 fa2a 	bl	8005d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2108      	movs	r1, #8
 80058bc:	430a      	orrs	r2, r1
 80058be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2104      	movs	r1, #4
 80058cc:	438a      	bics	r2, r1
 80058ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	619a      	str	r2, [r3, #24]
      break;
 80058e2:	e06b      	b.n	80059bc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	0011      	movs	r1, r2
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 fa91 	bl	8005e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	0109      	lsls	r1, r1, #4
 8005900:	430a      	orrs	r2, r1
 8005902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4931      	ldr	r1, [pc, #196]	; (80059d4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005910:	400a      	ands	r2, r1
 8005912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6999      	ldr	r1, [r3, #24]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	021a      	lsls	r2, r3, #8
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	619a      	str	r2, [r3, #24]
      break;
 8005928:	e048      	b.n	80059bc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	0011      	movs	r1, r2
 8005932:	0018      	movs	r0, r3
 8005934:	f000 faf2 	bl	8005f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2108      	movs	r1, #8
 8005944:	430a      	orrs	r2, r1
 8005946:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69da      	ldr	r2, [r3, #28]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2104      	movs	r1, #4
 8005954:	438a      	bics	r2, r1
 8005956:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69d9      	ldr	r1, [r3, #28]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	61da      	str	r2, [r3, #28]
      break;
 800596a:	e027      	b.n	80059bc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	0011      	movs	r1, r2
 8005974:	0018      	movs	r0, r3
 8005976:	f000 fb57 	bl	8006028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	0109      	lsls	r1, r1, #4
 8005988:	430a      	orrs	r2, r1
 800598a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	490f      	ldr	r1, [pc, #60]	; (80059d4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005998:	400a      	ands	r2, r1
 800599a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69d9      	ldr	r1, [r3, #28]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	61da      	str	r2, [r3, #28]
      break;
 80059b0:	e004      	b.n	80059bc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80059b2:	2317      	movs	r3, #23
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
      break;
 80059ba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	223c      	movs	r2, #60	; 0x3c
 80059c0:	2100      	movs	r1, #0
 80059c2:	5499      	strb	r1, [r3, r2]

  return status;
 80059c4:	2317      	movs	r3, #23
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	781b      	ldrb	r3, [r3, #0]
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b006      	add	sp, #24
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	fffffbff 	.word	0xfffffbff

080059d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	230f      	movs	r3, #15
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	223c      	movs	r2, #60	; 0x3c
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_ConfigClockSource+0x20>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0bc      	b.n	8005b72 <HAL_TIM_ConfigClockSource+0x19a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	223c      	movs	r2, #60	; 0x3c
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	223d      	movs	r2, #61	; 0x3d
 8005a04:	2102      	movs	r1, #2
 8005a06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2277      	movs	r2, #119	; 0x77
 8005a14:	4393      	bics	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4a58      	ldr	r2, [pc, #352]	; (8005b7c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2280      	movs	r2, #128	; 0x80
 8005a2e:	0192      	lsls	r2, r2, #6
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d040      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xde>
 8005a34:	2280      	movs	r2, #128	; 0x80
 8005a36:	0192      	lsls	r2, r2, #6
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d900      	bls.n	8005a3e <HAL_TIM_ConfigClockSource+0x66>
 8005a3c:	e088      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	0152      	lsls	r2, r2, #5
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d100      	bne.n	8005a48 <HAL_TIM_ConfigClockSource+0x70>
 8005a46:	e088      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x182>
 8005a48:	2280      	movs	r2, #128	; 0x80
 8005a4a:	0152      	lsls	r2, r2, #5
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d900      	bls.n	8005a52 <HAL_TIM_ConfigClockSource+0x7a>
 8005a50:	e07e      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a52:	2b70      	cmp	r3, #112	; 0x70
 8005a54:	d018      	beq.n	8005a88 <HAL_TIM_ConfigClockSource+0xb0>
 8005a56:	d900      	bls.n	8005a5a <HAL_TIM_ConfigClockSource+0x82>
 8005a58:	e07a      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a5a:	2b60      	cmp	r3, #96	; 0x60
 8005a5c:	d04f      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x126>
 8005a5e:	d900      	bls.n	8005a62 <HAL_TIM_ConfigClockSource+0x8a>
 8005a60:	e076      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a62:	2b50      	cmp	r3, #80	; 0x50
 8005a64:	d03b      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x106>
 8005a66:	d900      	bls.n	8005a6a <HAL_TIM_ConfigClockSource+0x92>
 8005a68:	e072      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d057      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x146>
 8005a6e:	d900      	bls.n	8005a72 <HAL_TIM_ConfigClockSource+0x9a>
 8005a70:	e06e      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a72:	2b30      	cmp	r3, #48	; 0x30
 8005a74:	d063      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x166>
 8005a76:	d86b      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d060      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x166>
 8005a7c:	d868      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d05d      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x166>
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d05b      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x166>
 8005a86:	e063      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6899      	ldr	r1, [r3, #8]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f000 fcca 	bl	8006430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2277      	movs	r2, #119	; 0x77
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]
      break;
 8005ab4:	e052      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6899      	ldr	r1, [r3, #8]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f000 fcb3 	bl	8006430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2180      	movs	r1, #128	; 0x80
 8005ad6:	01c9      	lsls	r1, r1, #7
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
      break;
 8005adc:	e03e      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	001a      	movs	r2, r3
 8005aec:	f000 fb5e 	bl	80061ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2150      	movs	r1, #80	; 0x50
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 fc80 	bl	80063fc <TIM_ITRx_SetConfig>
      break;
 8005afc:	e02e      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	001a      	movs	r2, r3
 8005b0c:	f000 fbbe 	bl	800628c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2160      	movs	r1, #96	; 0x60
 8005b16:	0018      	movs	r0, r3
 8005b18:	f000 fc70 	bl	80063fc <TIM_ITRx_SetConfig>
      break;
 8005b1c:	e01e      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	f000 fb3e 	bl	80061ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2140      	movs	r1, #64	; 0x40
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 fc60 	bl	80063fc <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e00e      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	0019      	movs	r1, r3
 8005b48:	0010      	movs	r0, r2
 8005b4a:	f000 fc57 	bl	80063fc <TIM_ITRx_SetConfig>
      break;
 8005b4e:	e005      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005b50:	230f      	movs	r3, #15
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
      break;
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005b5a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	223d      	movs	r2, #61	; 0x3d
 8005b60:	2101      	movs	r1, #1
 8005b62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	223c      	movs	r2, #60	; 0x3c
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5499      	strb	r1, [r3, r2]

  return status;
 8005b6c:	230f      	movs	r3, #15
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	781b      	ldrb	r3, [r3, #0]
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b004      	add	sp, #16
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	ffff00ff 	.word	0xffff00ff

08005b80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d01e      	beq.n	8005bd2 <HAL_TIM_ReadCapturedValue+0x52>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b0c      	cmp	r3, #12
 8005b98:	d820      	bhi.n	8005bdc <HAL_TIM_ReadCapturedValue+0x5c>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d013      	beq.n	8005bc8 <HAL_TIM_ReadCapturedValue+0x48>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d81a      	bhi.n	8005bdc <HAL_TIM_ReadCapturedValue+0x5c>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_TIM_ReadCapturedValue+0x34>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d005      	beq.n	8005bbe <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005bb2:	e013      	b.n	8005bdc <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	60fb      	str	r3, [r7, #12]
      break;
 8005bbc:	e00f      	b.n	8005bde <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	60fb      	str	r3, [r7, #12]
      break;
 8005bc6:	e00a      	b.n	8005bde <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	60fb      	str	r3, [r7, #12]
      break;
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	60fb      	str	r3, [r7, #12]
      break;
 8005bda:	e000      	b.n	8005bde <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005bdc:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b002      	add	sp, #8
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c00:	46c0      	nop			; (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ce8 <TIM_Base_SetConfig+0xd0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0x20>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a2e      	ldr	r2, [pc, #184]	; (8005cec <TIM_Base_SetConfig+0xd4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d108      	bne.n	8005c4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2270      	movs	r2, #112	; 0x70
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <TIM_Base_SetConfig+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <TIM_Base_SetConfig+0xd4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a24      	ldr	r2, [pc, #144]	; (8005cf0 <TIM_Base_SetConfig+0xd8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <TIM_Base_SetConfig+0xdc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <TIM_Base_SetConfig+0xe0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <TIM_Base_SetConfig+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <TIM_Base_SetConfig+0xe8>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2280      	movs	r2, #128	; 0x80
 8005c90:	4393      	bics	r3, r2
 8005c92:	001a      	movs	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <TIM_Base_SetConfig+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xba>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a0d      	ldr	r2, [pc, #52]	; (8005cf4 <TIM_Base_SetConfig+0xdc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_Base_SetConfig+0xba>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <TIM_Base_SetConfig+0xe0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_Base_SetConfig+0xba>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a0b      	ldr	r2, [pc, #44]	; (8005cfc <TIM_Base_SetConfig+0xe4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d103      	bne.n	8005cda <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	615a      	str	r2, [r3, #20]
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b004      	add	sp, #16
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40002000 	.word	0x40002000
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40014400 	.word	0x40014400
 8005cfc:	40014800 	.word	0x40014800
 8005d00:	fffffcff 	.word	0xfffffcff

08005d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	2201      	movs	r2, #1
 8005d14:	4393      	bics	r3, r2
 8005d16:	001a      	movs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2270      	movs	r2, #112	; 0x70
 8005d32:	4393      	bics	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	4393      	bics	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <TIM_OC1_SetConfig+0xf8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_OC1_SetConfig+0x76>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <TIM_OC1_SetConfig+0xfc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_OC1_SetConfig+0x76>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a25      	ldr	r2, [pc, #148]	; (8005e04 <TIM_OC1_SetConfig+0x100>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_OC1_SetConfig+0x76>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a24      	ldr	r2, [pc, #144]	; (8005e08 <TIM_OC1_SetConfig+0x104>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10c      	bne.n	8005d94 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	4393      	bics	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4393      	bics	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <TIM_OC1_SetConfig+0xf8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_OC1_SetConfig+0xb0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a18      	ldr	r2, [pc, #96]	; (8005e00 <TIM_OC1_SetConfig+0xfc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC1_SetConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <TIM_OC1_SetConfig+0x100>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC1_SetConfig+0xb0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <TIM_OC1_SetConfig+0x104>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d111      	bne.n	8005dd8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <TIM_OC1_SetConfig+0x108>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <TIM_OC1_SetConfig+0x10c>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b006      	add	sp, #24
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800
 8005e0c:	fffffeff 	.word	0xfffffeff
 8005e10:	fffffdff 	.word	0xfffffdff

08005e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	2210      	movs	r2, #16
 8005e24:	4393      	bics	r3, r2
 8005e26:	001a      	movs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a2e      	ldr	r2, [pc, #184]	; (8005efc <TIM_OC2_SetConfig+0xe8>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a2d      	ldr	r2, [pc, #180]	; (8005f00 <TIM_OC2_SetConfig+0xec>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	4393      	bics	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a24      	ldr	r2, [pc, #144]	; (8005f04 <TIM_OC2_SetConfig+0xf0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d10d      	bne.n	8005e92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	4393      	bics	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2240      	movs	r2, #64	; 0x40
 8005e8e:	4393      	bics	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <TIM_OC2_SetConfig+0xf0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00b      	beq.n	8005eb2 <TIM_OC2_SetConfig+0x9e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <TIM_OC2_SetConfig+0xf4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <TIM_OC2_SetConfig+0x9e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a19      	ldr	r2, [pc, #100]	; (8005f0c <TIM_OC2_SetConfig+0xf8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_OC2_SetConfig+0x9e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <TIM_OC2_SetConfig+0xfc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d113      	bne.n	8005eda <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <TIM_OC2_SetConfig+0x100>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <TIM_OC2_SetConfig+0x104>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b006      	add	sp, #24
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	ffff8fff 	.word	0xffff8fff
 8005f00:	fffffcff 	.word	0xfffffcff
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800
 8005f14:	fffffbff 	.word	0xfffffbff
 8005f18:	fffff7ff 	.word	0xfffff7ff

08005f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	4a35      	ldr	r2, [pc, #212]	; (8006000 <TIM_OC3_SetConfig+0xe4>)
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2270      	movs	r2, #112	; 0x70
 8005f48:	4393      	bics	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	4393      	bics	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4a28      	ldr	r2, [pc, #160]	; (8006004 <TIM_OC3_SetConfig+0xe8>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a24      	ldr	r2, [pc, #144]	; (8006008 <TIM_OC3_SetConfig+0xec>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d10d      	bne.n	8005f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4a23      	ldr	r2, [pc, #140]	; (800600c <TIM_OC3_SetConfig+0xf0>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <TIM_OC3_SetConfig+0xf4>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <TIM_OC3_SetConfig+0xec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x9a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <TIM_OC3_SetConfig+0xf8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x9a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <TIM_OC3_SetConfig+0xfc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	; (800601c <TIM_OC3_SetConfig+0x100>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d113      	bne.n	8005fde <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <TIM_OC3_SetConfig+0x104>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <TIM_OC3_SetConfig+0x108>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b006      	add	sp, #24
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	fffffeff 	.word	0xfffffeff
 8006004:	fffffdff 	.word	0xfffffdff
 8006008:	40012c00 	.word	0x40012c00
 800600c:	fffff7ff 	.word	0xfffff7ff
 8006010:	fffffbff 	.word	0xfffffbff
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800
 8006020:	ffffefff 	.word	0xffffefff
 8006024:	ffffdfff 	.word	0xffffdfff

08006028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <TIM_OC4_SetConfig+0xb0>)
 8006038:	401a      	ands	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a22      	ldr	r2, [pc, #136]	; (80060dc <TIM_OC4_SetConfig+0xb4>)
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <TIM_OC4_SetConfig+0xb8>)
 800605c:	4013      	ands	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <TIM_OC4_SetConfig+0xbc>)
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <TIM_OC4_SetConfig+0xc0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_OC4_SetConfig+0x78>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <TIM_OC4_SetConfig+0xc4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_OC4_SetConfig+0x78>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a17      	ldr	r2, [pc, #92]	; (80060f0 <TIM_OC4_SetConfig+0xc8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC4_SetConfig+0x78>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <TIM_OC4_SetConfig+0xcc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d109      	bne.n	80060b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <TIM_OC4_SetConfig+0xd0>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b006      	add	sp, #24
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	ffffefff 	.word	0xffffefff
 80060dc:	ffff8fff 	.word	0xffff8fff
 80060e0:	fffffcff 	.word	0xfffffcff
 80060e4:	ffffdfff 	.word	0xffffdfff
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800
 80060f8:	ffffbfff 	.word	0xffffbfff

080060fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	2201      	movs	r2, #1
 8006110:	4393      	bics	r3, r2
 8006112:	001a      	movs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <TIM_TI1_SetConfig+0xa4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <TIM_TI1_SetConfig+0x40>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <TIM_TI1_SetConfig+0xa8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_TI1_SetConfig+0x40>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <TIM_TI1_SetConfig+0xac>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d101      	bne.n	8006140 <TIM_TI1_SetConfig+0x44>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <TIM_TI1_SetConfig+0x46>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2203      	movs	r2, #3
 800614a:	4393      	bics	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e003      	b.n	8006160 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2201      	movs	r2, #1
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	22f0      	movs	r2, #240	; 0xf0
 8006164:	4393      	bics	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	4013      	ands	r3, r2
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	220a      	movs	r2, #10
 800617a:	4393      	bics	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	220a      	movs	r2, #10
 8006182:	4013      	ands	r3, r2
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	46bd      	mov	sp, r7
 800619a:	b006      	add	sp, #24
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40014000 	.word	0x40014000

080061ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	2201      	movs	r2, #1
 80061c4:	4393      	bics	r3, r2
 80061c6:	001a      	movs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	22f0      	movs	r2, #240	; 0xf0
 80061d6:	4393      	bics	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	220a      	movs	r2, #10
 80061e8:	4393      	bics	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	b006      	add	sp, #24
 8006206:	bd80      	pop	{r7, pc}

08006208 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	2210      	movs	r2, #16
 800621c:	4393      	bics	r3, r2
 800621e:	001a      	movs	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4a14      	ldr	r2, [pc, #80]	; (8006284 <TIM_TI2_SetConfig+0x7c>)
 8006234:	4013      	ands	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4a10      	ldr	r2, [pc, #64]	; (8006288 <TIM_TI2_SetConfig+0x80>)
 8006246:	4013      	ands	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	031b      	lsls	r3, r3, #12
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	22a0      	movs	r2, #160	; 0xa0
 800625c:	4393      	bics	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	22a0      	movs	r2, #160	; 0xa0
 8006266:	4013      	ands	r3, r2
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	b006      	add	sp, #24
 8006280:	bd80      	pop	{r7, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	fffffcff 	.word	0xfffffcff
 8006288:	ffff0fff 	.word	0xffff0fff

0800628c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	2210      	movs	r2, #16
 800629e:	4393      	bics	r3, r2
 80062a0:	001a      	movs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <TIM_TI2_ConfigInputStage+0x60>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	031b      	lsls	r3, r3, #12
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	22a0      	movs	r2, #160	; 0xa0
 80062c8:	4393      	bics	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b006      	add	sp, #24
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	ffff0fff 	.word	0xffff0fff

080062f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	4a19      	ldr	r2, [pc, #100]	; (8006368 <TIM_TI3_SetConfig+0x78>)
 8006304:	401a      	ands	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2203      	movs	r2, #3
 800631a:	4393      	bics	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	22f0      	movs	r2, #240	; 0xf0
 800632a:	4393      	bics	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	22ff      	movs	r2, #255	; 0xff
 8006334:	4013      	ands	r3, r2
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4a0b      	ldr	r2, [pc, #44]	; (800636c <TIM_TI3_SetConfig+0x7c>)
 8006340:	4013      	ands	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	021a      	lsls	r2, r3, #8
 8006348:	23a0      	movs	r3, #160	; 0xa0
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	4013      	ands	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b006      	add	sp, #24
 8006366:	bd80      	pop	{r7, pc}
 8006368:	fffffeff 	.word	0xfffffeff
 800636c:	fffff5ff 	.word	0xfffff5ff

08006370 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4a1a      	ldr	r2, [pc, #104]	; (80063ec <TIM_TI4_SetConfig+0x7c>)
 8006384:	401a      	ands	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <TIM_TI4_SetConfig+0x80>)
 800639a:	4013      	ands	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4a12      	ldr	r2, [pc, #72]	; (80063f4 <TIM_TI4_SetConfig+0x84>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	031b      	lsls	r3, r3, #12
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4a0d      	ldr	r2, [pc, #52]	; (80063f8 <TIM_TI4_SetConfig+0x88>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	031a      	lsls	r2, r3, #12
 80063ca:	23a0      	movs	r3, #160	; 0xa0
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	4013      	ands	r3, r2
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b006      	add	sp, #24
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	ffffefff 	.word	0xffffefff
 80063f0:	fffffcff 	.word	0xfffffcff
 80063f4:	ffff0fff 	.word	0xffff0fff
 80063f8:	ffff5fff 	.word	0xffff5fff

080063fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2270      	movs	r2, #112	; 0x70
 8006410:	4393      	bics	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	2207      	movs	r2, #7
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	609a      	str	r2, [r3, #8]
}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	46bd      	mov	sp, r7
 800642a:	b004      	add	sp, #16
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <TIM_ETR_SetConfig+0x3c>)
 8006448:	4013      	ands	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	431a      	orrs	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	b006      	add	sp, #24
 800646a:	bd80      	pop	{r7, pc}
 800646c:	ffff00ff 	.word	0xffff00ff

08006470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	221f      	movs	r2, #31
 8006480:	4013      	ands	r3, r2
 8006482:	2201      	movs	r2, #1
 8006484:	409a      	lsls	r2, r3
 8006486:	0013      	movs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	43d2      	mvns	r2, r2
 8006492:	401a      	ands	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a1a      	ldr	r2, [r3, #32]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	211f      	movs	r1, #31
 80064a0:	400b      	ands	r3, r1
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	4099      	lsls	r1, r3
 80064a6:	000b      	movs	r3, r1
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b006      	add	sp, #24
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	223c      	movs	r2, #60	; 0x3c
 80064c6:	5c9b      	ldrb	r3, [r3, r2]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e041      	b.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	223c      	movs	r2, #60	; 0x3c
 80064d4:	2101      	movs	r1, #1
 80064d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	223d      	movs	r2, #61	; 0x3d
 80064dc:	2102      	movs	r1, #2
 80064de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2270      	movs	r2, #112	; 0x70
 80064f4:	4393      	bics	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a11      	ldr	r2, [pc, #68]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a10      	ldr	r2, [pc, #64]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10c      	bne.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2280      	movs	r2, #128	; 0x80
 800652c:	4393      	bics	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	4313      	orrs	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	223d      	movs	r2, #61	; 0x3d
 8006546:	2101      	movs	r1, #1
 8006548:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	223c      	movs	r2, #60	; 0x3c
 800654e:	2100      	movs	r1, #0
 8006550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	0018      	movs	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	b004      	add	sp, #16
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40012c00 	.word	0x40012c00
 8006560:	40000400 	.word	0x40000400
 8006564:	40014000 	.word	0x40014000

08006568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	223c      	movs	r2, #60	; 0x3c
 800657a:	5c9b      	ldrb	r3, [r3, r2]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006580:	2302      	movs	r3, #2
 8006582:	e03e      	b.n	8006602 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	223c      	movs	r2, #60	; 0x3c
 8006588:	2101      	movs	r1, #1
 800658a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	22ff      	movs	r2, #255	; 0xff
 8006590:	4393      	bics	r3, r2
 8006592:	001a      	movs	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80065a0:	401a      	ands	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80065ae:	401a      	ands	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a16      	ldr	r2, [pc, #88]	; (8006614 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80065bc:	401a      	ands	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80065ca:	401a      	ands	r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a11      	ldr	r2, [pc, #68]	; (800661c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80065d8:	401a      	ands	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a0e      	ldr	r2, [pc, #56]	; (8006620 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80065e6:	401a      	ands	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	223c      	movs	r2, #60	; 0x3c
 80065fc:	2100      	movs	r1, #0
 80065fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	0018      	movs	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	b004      	add	sp, #16
 8006608:	bd80      	pop	{r7, pc}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	fffffcff 	.word	0xfffffcff
 8006610:	fffffbff 	.word	0xfffffbff
 8006614:	fffff7ff 	.word	0xfffff7ff
 8006618:	ffffefff 	.word	0xffffefff
 800661c:	ffffdfff 	.word	0xffffdfff
 8006620:	ffffbfff 	.word	0xffffbfff

08006624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	b002      	add	sp, #8
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663c:	46c0      	nop			; (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e044      	b.n	80066e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800665a:	2b00      	cmp	r3, #0
 800665c:	d107      	bne.n	800666e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2274      	movs	r2, #116	; 0x74
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	0018      	movs	r0, r3
 800666a:	f7fd f9cb 	bl	8003a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2224      	movs	r2, #36	; 0x24
 8006672:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2101      	movs	r1, #1
 8006680:	438a      	bics	r2, r1
 8006682:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	0018      	movs	r0, r3
 8006688:	f000 fc80 	bl	8006f8c <UART_SetConfig>
 800668c:	0003      	movs	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e024      	b.n	80066e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 fdcb 	bl	800723c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	490d      	ldr	r1, [pc, #52]	; (80066e8 <HAL_UART_Init+0xa4>)
 80066b2:	400a      	ands	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2108      	movs	r1, #8
 80066c2:	438a      	bics	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2101      	movs	r1, #1
 80066d2:	430a      	orrs	r2, r1
 80066d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0018      	movs	r0, r3
 80066da:	f000 fe63 	bl	80073a4 <UART_CheckIdleState>
 80066de:	0003      	movs	r3, r0
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	fffff7ff 	.word	0xfffff7ff

080066ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	1dbb      	adds	r3, r7, #6
 80066fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006700:	2b20      	cmp	r3, #32
 8006702:	d000      	beq.n	8006706 <HAL_UART_Transmit+0x1a>
 8006704:	e096      	b.n	8006834 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_UART_Transmit+0x28>
 800670c:	1dbb      	adds	r3, r7, #6
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e08e      	b.n	8006836 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	015b      	lsls	r3, r3, #5
 8006720:	429a      	cmp	r2, r3
 8006722:	d109      	bne.n	8006738 <HAL_UART_Transmit+0x4c>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d105      	bne.n	8006738 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2201      	movs	r2, #1
 8006730:	4013      	ands	r3, r2
 8006732:	d001      	beq.n	8006738 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e07e      	b.n	8006836 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2274      	movs	r2, #116	; 0x74
 800673c:	5c9b      	ldrb	r3, [r3, r2]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_UART_Transmit+0x5a>
 8006742:	2302      	movs	r3, #2
 8006744:	e077      	b.n	8006836 <HAL_UART_Transmit+0x14a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2274      	movs	r2, #116	; 0x74
 800674a:	2101      	movs	r1, #1
 800674c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	2100      	movs	r1, #0
 8006754:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2221      	movs	r2, #33	; 0x21
 800675a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800675c:	f7fd fb2a 	bl	8003db4 <HAL_GetTick>
 8006760:	0003      	movs	r3, r0
 8006762:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1dba      	adds	r2, r7, #6
 8006768:	2150      	movs	r1, #80	; 0x50
 800676a:	8812      	ldrh	r2, [r2, #0]
 800676c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1dba      	adds	r2, r7, #6
 8006772:	2152      	movs	r1, #82	; 0x52
 8006774:	8812      	ldrh	r2, [r2, #0]
 8006776:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	015b      	lsls	r3, r3, #5
 8006780:	429a      	cmp	r2, r3
 8006782:	d108      	bne.n	8006796 <HAL_UART_Transmit+0xaa>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	e003      	b.n	800679e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2274      	movs	r2, #116	; 0x74
 80067a2:	2100      	movs	r1, #0
 80067a4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80067a6:	e02d      	b.n	8006804 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	0013      	movs	r3, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	2180      	movs	r1, #128	; 0x80
 80067b6:	f000 fe3d 	bl	8007434 <UART_WaitOnFlagUntilTimeout>
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e039      	b.n	8006836 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	05d2      	lsls	r2, r2, #23
 80067d2:	0dd2      	lsrs	r2, r2, #23
 80067d4:	b292      	uxth	r2, r2
 80067d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3302      	adds	r3, #2
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e008      	b.n	80067f2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	b292      	uxth	r2, r2
 80067ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2252      	movs	r2, #82	; 0x52
 80067f6:	5a9b      	ldrh	r3, [r3, r2]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b299      	uxth	r1, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2252      	movs	r2, #82	; 0x52
 8006802:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2252      	movs	r2, #82	; 0x52
 8006808:	5a9b      	ldrh	r3, [r3, r2]
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1cb      	bne.n	80067a8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	0013      	movs	r3, r2
 800681a:	2200      	movs	r2, #0
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	f000 fe09 	bl	8007434 <UART_WaitOnFlagUntilTimeout>
 8006822:	1e03      	subs	r3, r0, #0
 8006824:	d001      	beq.n	800682a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e005      	b.n	8006836 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	e000      	b.n	8006836 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006834:	2302      	movs	r3, #2
  }
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b008      	add	sp, #32
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b088      	sub	sp, #32
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	1dbb      	adds	r3, r7, #6
 800684a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006850:	2b20      	cmp	r3, #32
 8006852:	d150      	bne.n	80068f6 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_UART_Receive_IT+0x24>
 800685a:	1dbb      	adds	r3, r7, #6
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e048      	b.n	80068f8 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	015b      	lsls	r3, r3, #5
 800686e:	429a      	cmp	r2, r3
 8006870:	d109      	bne.n	8006886 <HAL_UART_Receive_IT+0x48>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2201      	movs	r2, #1
 800687e:	4013      	ands	r3, r2
 8006880:	d001      	beq.n	8006886 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e038      	b.n	80068f8 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2274      	movs	r2, #116	; 0x74
 800688a:	5c9b      	ldrb	r3, [r3, r2]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UART_Receive_IT+0x56>
 8006890:	2302      	movs	r3, #2
 8006892:	e031      	b.n	80068f8 <HAL_UART_Receive_IT+0xba>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2274      	movs	r2, #116	; 0x74
 8006898:	2101      	movs	r1, #1
 800689a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	4013      	ands	r3, r2
 80068ae:	d019      	beq.n	80068e4 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b0:	f3ef 8310 	mrs	r3, PRIMASK
 80068b4:	613b      	str	r3, [r7, #16]
  return(result);
 80068b6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	2301      	movs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f383 8810 	msr	PRIMASK, r3
}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2180      	movs	r1, #128	; 0x80
 80068d2:	04c9      	lsls	r1, r1, #19
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f383 8810 	msr	PRIMASK, r3
}
 80068e2:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068e4:	1dbb      	adds	r3, r7, #6
 80068e6:	881a      	ldrh	r2, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f000 fe65 	bl	80075bc <UART_Start_Receive_IT>
 80068f2:	0003      	movs	r3, r0
 80068f4:	e000      	b.n	80068f8 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
  }
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b008      	add	sp, #32
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	1dbb      	adds	r3, r7, #6
 800690c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006912:	2b20      	cmp	r3, #32
 8006914:	d150      	bne.n	80069b8 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_UART_Receive_DMA+0x24>
 800691c:	1dbb      	adds	r3, r7, #6
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e048      	b.n	80069ba <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	015b      	lsls	r3, r3, #5
 8006930:	429a      	cmp	r2, r3
 8006932:	d109      	bne.n	8006948 <HAL_UART_Receive_DMA+0x48>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2201      	movs	r2, #1
 8006940:	4013      	ands	r3, r2
 8006942:	d001      	beq.n	8006948 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e038      	b.n	80069ba <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2274      	movs	r2, #116	; 0x74
 800694c:	5c9b      	ldrb	r3, [r3, r2]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_UART_Receive_DMA+0x56>
 8006952:	2302      	movs	r3, #2
 8006954:	e031      	b.n	80069ba <HAL_UART_Receive_DMA+0xba>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2274      	movs	r2, #116	; 0x74
 800695a:	2101      	movs	r1, #1
 800695c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	2380      	movs	r3, #128	; 0x80
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	4013      	ands	r3, r2
 8006970:	d019      	beq.n	80069a6 <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006972:	f3ef 8310 	mrs	r3, PRIMASK
 8006976:	613b      	str	r3, [r7, #16]
  return(result);
 8006978:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f383 8810 	msr	PRIMASK, r3
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2180      	movs	r1, #128	; 0x80
 8006994:	04c9      	lsls	r1, r1, #19
 8006996:	430a      	orrs	r2, r1
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f383 8810 	msr	PRIMASK, r3
}
 80069a4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80069a6:	1dbb      	adds	r3, r7, #6
 80069a8:	881a      	ldrh	r2, [r3, #0]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f000 feb4 	bl	800771c <UART_Start_Receive_DMA>
 80069b4:	0003      	movs	r3, r0
 80069b6:	e000      	b.n	80069ba <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b008      	add	sp, #32
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069c4:	b590      	push	{r4, r7, lr}
 80069c6:	b0ab      	sub	sp, #172	; 0xac
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	22a4      	movs	r2, #164	; 0xa4
 80069d4:	18b9      	adds	r1, r7, r2
 80069d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	20a0      	movs	r0, #160	; 0xa0
 80069e0:	1839      	adds	r1, r7, r0
 80069e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	219c      	movs	r1, #156	; 0x9c
 80069ec:	1879      	adds	r1, r7, r1
 80069ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069f0:	0011      	movs	r1, r2
 80069f2:	18bb      	adds	r3, r7, r2
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a99      	ldr	r2, [pc, #612]	; (8006c5c <HAL_UART_IRQHandler+0x298>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	2298      	movs	r2, #152	; 0x98
 80069fc:	18bc      	adds	r4, r7, r2
 80069fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006a00:	18bb      	adds	r3, r7, r2
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d114      	bne.n	8006a32 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a12:	183b      	adds	r3, r7, r0
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2220      	movs	r2, #32
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d00a      	beq.n	8006a32 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d100      	bne.n	8006a26 <HAL_UART_IRQHandler+0x62>
 8006a24:	e27e      	b.n	8006f24 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	0010      	movs	r0, r2
 8006a2e:	4798      	blx	r3
      }
      return;
 8006a30:	e278      	b.n	8006f24 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a32:	2398      	movs	r3, #152	; 0x98
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d100      	bne.n	8006a3e <HAL_UART_IRQHandler+0x7a>
 8006a3c:	e114      	b.n	8006c68 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a3e:	239c      	movs	r3, #156	; 0x9c
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2201      	movs	r2, #1
 8006a46:	4013      	ands	r3, r2
 8006a48:	d106      	bne.n	8006a58 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a4a:	23a0      	movs	r3, #160	; 0xa0
 8006a4c:	18fb      	adds	r3, r7, r3
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a83      	ldr	r2, [pc, #524]	; (8006c60 <HAL_UART_IRQHandler+0x29c>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	d100      	bne.n	8006a58 <HAL_UART_IRQHandler+0x94>
 8006a56:	e107      	b.n	8006c68 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a58:	23a4      	movs	r3, #164	; 0xa4
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4013      	ands	r3, r2
 8006a62:	d012      	beq.n	8006a8a <HAL_UART_IRQHandler+0xc6>
 8006a64:	23a0      	movs	r3, #160	; 0xa0
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	2380      	movs	r3, #128	; 0x80
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	4013      	ands	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2201      	movs	r2, #1
 8006a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2280      	movs	r2, #128	; 0x80
 8006a7e:	589b      	ldr	r3, [r3, r2]
 8006a80:	2201      	movs	r2, #1
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a8a:	23a4      	movs	r3, #164	; 0xa4
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2202      	movs	r2, #2
 8006a92:	4013      	ands	r3, r2
 8006a94:	d011      	beq.n	8006aba <HAL_UART_IRQHandler+0xf6>
 8006a96:	239c      	movs	r3, #156	; 0x9c
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2280      	movs	r2, #128	; 0x80
 8006aae:	589b      	ldr	r3, [r3, r2]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aba:	23a4      	movs	r3, #164	; 0xa4
 8006abc:	18fb      	adds	r3, r7, r3
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d011      	beq.n	8006aea <HAL_UART_IRQHandler+0x126>
 8006ac6:	239c      	movs	r3, #156	; 0x9c
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2201      	movs	r2, #1
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d00b      	beq.n	8006aea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2280      	movs	r2, #128	; 0x80
 8006ade:	589b      	ldr	r3, [r3, r2]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2180      	movs	r1, #128	; 0x80
 8006ae8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006aea:	23a4      	movs	r3, #164	; 0xa4
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2208      	movs	r2, #8
 8006af2:	4013      	ands	r3, r2
 8006af4:	d017      	beq.n	8006b26 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006af6:	23a0      	movs	r3, #160	; 0xa0
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2220      	movs	r2, #32
 8006afe:	4013      	ands	r3, r2
 8006b00:	d105      	bne.n	8006b0e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b02:	239c      	movs	r3, #156	; 0x9c
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b0c:	d00b      	beq.n	8006b26 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2208      	movs	r2, #8
 8006b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	589b      	ldr	r3, [r3, r2]
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b26:	23a4      	movs	r3, #164	; 0xa4
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	4013      	ands	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_UART_IRQHandler+0x198>
 8006b34:	23a0      	movs	r3, #160	; 0xa0
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	04db      	lsls	r3, r3, #19
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d00c      	beq.n	8006b5c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	0112      	lsls	r2, r2, #4
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	589b      	ldr	r3, [r3, r2]
 8006b52:	2220      	movs	r2, #32
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2180      	movs	r1, #128	; 0x80
 8006b5a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2280      	movs	r2, #128	; 0x80
 8006b60:	589b      	ldr	r3, [r3, r2]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d100      	bne.n	8006b68 <HAL_UART_IRQHandler+0x1a4>
 8006b66:	e1df      	b.n	8006f28 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b68:	23a4      	movs	r3, #164	; 0xa4
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	4013      	ands	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b74:	23a0      	movs	r3, #160	; 0xa0
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d008      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	0010      	movs	r0, r2
 8006b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	589b      	ldr	r3, [r3, r2]
 8006b98:	2194      	movs	r1, #148	; 0x94
 8006b9a:	187a      	adds	r2, r7, r1
 8006b9c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2240      	movs	r2, #64	; 0x40
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d004      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2228      	movs	r2, #40	; 0x28
 8006bb2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb4:	d047      	beq.n	8006c46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f000 fe75 	bl	80078a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2240      	movs	r2, #64	; 0x40
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d137      	bne.n	8006c3c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd4:	2090      	movs	r0, #144	; 0x90
 8006bd6:	183a      	adds	r2, r7, r0
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	2301      	movs	r3, #1
 8006bdc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be0:	f383 8810 	msr	PRIMASK, r3
}
 8006be4:	46c0      	nop			; (mov r8, r8)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2140      	movs	r1, #64	; 0x40
 8006bf2:	438a      	bics	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
 8006bf6:	183b      	adds	r3, r7, r0
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bfe:	f383 8810 	msr	PRIMASK, r3
}
 8006c02:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d012      	beq.n	8006c32 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	4a14      	ldr	r2, [pc, #80]	; (8006c64 <HAL_UART_IRQHandler+0x2a0>)
 8006c12:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7fd fa75 	bl	8004108 <HAL_DMA_Abort_IT>
 8006c1e:	1e03      	subs	r3, r0, #0
 8006c20:	d01a      	beq.n	8006c58 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	e012      	b.n	8006c58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 f995 	bl	8006f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3a:	e00d      	b.n	8006c58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 f990 	bl	8006f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c44:	e008      	b.n	8006c58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f000 f98b 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2280      	movs	r2, #128	; 0x80
 8006c52:	2100      	movs	r1, #0
 8006c54:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006c56:	e167      	b.n	8006f28 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	46c0      	nop			; (mov r8, r8)
    return;
 8006c5a:	e165      	b.n	8006f28 <HAL_UART_IRQHandler+0x564>
 8006c5c:	0000080f 	.word	0x0000080f
 8006c60:	04000120 	.word	0x04000120
 8006c64:	08007b4f 	.word	0x08007b4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d000      	beq.n	8006c72 <HAL_UART_IRQHandler+0x2ae>
 8006c70:	e131      	b.n	8006ed6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c72:	23a4      	movs	r3, #164	; 0xa4
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2210      	movs	r2, #16
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d100      	bne.n	8006c80 <HAL_UART_IRQHandler+0x2bc>
 8006c7e:	e12a      	b.n	8006ed6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c80:	23a0      	movs	r3, #160	; 0xa0
 8006c82:	18fb      	adds	r3, r7, r3
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2210      	movs	r2, #16
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d100      	bne.n	8006c8e <HAL_UART_IRQHandler+0x2ca>
 8006c8c:	e123      	b.n	8006ed6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2210      	movs	r2, #16
 8006c94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d000      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x2e2>
 8006ca4:	e09b      	b.n	8006dde <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	217e      	movs	r1, #126	; 0x7e
 8006cb0:	187b      	adds	r3, r7, r1
 8006cb2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006cb4:	187b      	adds	r3, r7, r1
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d100      	bne.n	8006cbe <HAL_UART_IRQHandler+0x2fa>
 8006cbc:	e136      	b.n	8006f2c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2258      	movs	r2, #88	; 0x58
 8006cc2:	5a9b      	ldrh	r3, [r3, r2]
 8006cc4:	187a      	adds	r2, r7, r1
 8006cc6:	8812      	ldrh	r2, [r2, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d300      	bcc.n	8006cce <HAL_UART_IRQHandler+0x30a>
 8006ccc:	e12e      	b.n	8006f2c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	187a      	adds	r2, r7, r1
 8006cd2:	215a      	movs	r1, #90	; 0x5a
 8006cd4:	8812      	ldrh	r2, [r2, #0]
 8006cd6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d06e      	beq.n	8006dc0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cea:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cec:	2301      	movs	r3, #1
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	498e      	ldr	r1, [pc, #568]	; (8006f3c <HAL_UART_IRQHandler+0x578>)
 8006d04:	400a      	ands	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	f383 8810 	msr	PRIMASK, r3
}
 8006d12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d14:	f3ef 8310 	mrs	r3, PRIMASK
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	677b      	str	r3, [r7, #116]	; 0x74
 8006d1e:	2301      	movs	r3, #1
 8006d20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d24:	f383 8810 	msr	PRIMASK, r3
}
 8006d28:	46c0      	nop			; (mov r8, r8)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2101      	movs	r1, #1
 8006d36:	438a      	bics	r2, r1
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d3c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d40:	f383 8810 	msr	PRIMASK, r3
}
 8006d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d46:	f3ef 8310 	mrs	r3, PRIMASK
 8006d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d50:	2301      	movs	r3, #1
 8006d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d56:	f383 8810 	msr	PRIMASK, r3
}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2140      	movs	r1, #64	; 0x40
 8006d68:	438a      	bics	r2, r1
 8006d6a:	609a      	str	r2, [r3, #8]
 8006d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d6e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d84:	f3ef 8310 	mrs	r3, PRIMASK
 8006d88:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d8e:	2301      	movs	r3, #1
 8006d90:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2110      	movs	r1, #16
 8006da6:	438a      	bics	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db0:	f383 8810 	msr	PRIMASK, r3
}
 8006db4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f7fd f96c 	bl	8004098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2258      	movs	r2, #88	; 0x58
 8006dc4:	5a9a      	ldrh	r2, [r3, r2]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	215a      	movs	r1, #90	; 0x5a
 8006dca:	5a5b      	ldrh	r3, [r3, r1]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0011      	movs	r1, r2
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f000 f8cc 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ddc:	e0a6      	b.n	8006f2c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2258      	movs	r2, #88	; 0x58
 8006de2:	5a99      	ldrh	r1, [r3, r2]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	225a      	movs	r2, #90	; 0x5a
 8006de8:	5a9b      	ldrh	r3, [r3, r2]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	208e      	movs	r0, #142	; 0x8e
 8006dee:	183b      	adds	r3, r7, r0
 8006df0:	1a8a      	subs	r2, r1, r2
 8006df2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	225a      	movs	r2, #90	; 0x5a
 8006df8:	5a9b      	ldrh	r3, [r3, r2]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d100      	bne.n	8006e02 <HAL_UART_IRQHandler+0x43e>
 8006e00:	e096      	b.n	8006f30 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8006e02:	183b      	adds	r3, r7, r0
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d100      	bne.n	8006e0c <HAL_UART_IRQHandler+0x448>
 8006e0a:	e091      	b.n	8006f30 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e12:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e14:	2488      	movs	r4, #136	; 0x88
 8006e16:	193a      	adds	r2, r7, r4
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f383 8810 	msr	PRIMASK, r3
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4943      	ldr	r1, [pc, #268]	; (8006f40 <HAL_UART_IRQHandler+0x57c>)
 8006e32:	400a      	ands	r2, r1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	193b      	adds	r3, r7, r4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e44:	f3ef 8310 	mrs	r3, PRIMASK
 8006e48:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e4a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	2484      	movs	r4, #132	; 0x84
 8006e4e:	193a      	adds	r2, r7, r4
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	2301      	movs	r3, #1
 8006e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f383 8810 	msr	PRIMASK, r3
}
 8006e5c:	46c0      	nop			; (mov r8, r8)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	438a      	bics	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
 8006e6e:	193b      	adds	r3, r7, r4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	2480      	movs	r4, #128	; 0x80
 8006e98:	193a      	adds	r2, r7, r4
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	f383 8810 	msr	PRIMASK, r3
}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2110      	movs	r1, #16
 8006eb4:	438a      	bics	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	193b      	adds	r3, r7, r4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	f383 8810 	msr	PRIMASK, r3
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ec6:	183b      	adds	r3, r7, r0
 8006ec8:	881a      	ldrh	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0011      	movs	r1, r2
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f000 f850 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ed4:	e02c      	b.n	8006f30 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ed6:	23a4      	movs	r3, #164	; 0xa4
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d00f      	beq.n	8006f02 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ee2:	23a0      	movs	r3, #160	; 0xa0
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2280      	movs	r2, #128	; 0x80
 8006eea:	4013      	ands	r3, r2
 8006eec:	d009      	beq.n	8006f02 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01e      	beq.n	8006f34 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	0010      	movs	r0, r2
 8006efe:	4798      	blx	r3
    }
    return;
 8006f00:	e018      	b.n	8006f34 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f02:	23a4      	movs	r3, #164	; 0xa4
 8006f04:	18fb      	adds	r3, r7, r3
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2240      	movs	r2, #64	; 0x40
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <HAL_UART_IRQHandler+0x572>
 8006f0e:	23a0      	movs	r3, #160	; 0xa0
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2240      	movs	r2, #64	; 0x40
 8006f16:	4013      	ands	r3, r2
 8006f18:	d00d      	beq.n	8006f36 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 fe2d 	bl	8007b7c <UART_EndTransmit_IT>
    return;
 8006f22:	e008      	b.n	8006f36 <HAL_UART_IRQHandler+0x572>
      return;
 8006f24:	46c0      	nop			; (mov r8, r8)
 8006f26:	e006      	b.n	8006f36 <HAL_UART_IRQHandler+0x572>
    return;
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	e004      	b.n	8006f36 <HAL_UART_IRQHandler+0x572>
      return;
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	e002      	b.n	8006f36 <HAL_UART_IRQHandler+0x572>
      return;
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	e000      	b.n	8006f36 <HAL_UART_IRQHandler+0x572>
    return;
 8006f34:	46c0      	nop			; (mov r8, r8)
  }

}
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b02b      	add	sp, #172	; 0xac
 8006f3a:	bd90      	pop	{r4, r7, pc}
 8006f3c:	fffffeff 	.word	0xfffffeff
 8006f40:	fffffedf 	.word	0xfffffedf

08006f44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b002      	add	sp, #8
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b002      	add	sp, #8
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	000a      	movs	r2, r1
 8006f7e:	1cbb      	adds	r3, r7, #2
 8006f80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b002      	add	sp, #8
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f94:	231e      	movs	r3, #30
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a97      	ldr	r2, [pc, #604]	; (8007218 <UART_SetConfig+0x28c>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	4a92      	ldr	r2, [pc, #584]	; (800721c <UART_SetConfig+0x290>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	4a89      	ldr	r2, [pc, #548]	; (8007220 <UART_SetConfig+0x294>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	430a      	orrs	r2, r1
 8007006:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a85      	ldr	r2, [pc, #532]	; (8007224 <UART_SetConfig+0x298>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d127      	bne.n	8007062 <UART_SetConfig+0xd6>
 8007012:	4b85      	ldr	r3, [pc, #532]	; (8007228 <UART_SetConfig+0x29c>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	2203      	movs	r2, #3
 8007018:	4013      	ands	r3, r2
 800701a:	2b03      	cmp	r3, #3
 800701c:	d00d      	beq.n	800703a <UART_SetConfig+0xae>
 800701e:	d81b      	bhi.n	8007058 <UART_SetConfig+0xcc>
 8007020:	2b02      	cmp	r3, #2
 8007022:	d014      	beq.n	800704e <UART_SetConfig+0xc2>
 8007024:	d818      	bhi.n	8007058 <UART_SetConfig+0xcc>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <UART_SetConfig+0xa4>
 800702a:	2b01      	cmp	r3, #1
 800702c:	d00a      	beq.n	8007044 <UART_SetConfig+0xb8>
 800702e:	e013      	b.n	8007058 <UART_SetConfig+0xcc>
 8007030:	231f      	movs	r3, #31
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e035      	b.n	80070a6 <UART_SetConfig+0x11a>
 800703a:	231f      	movs	r3, #31
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	2202      	movs	r2, #2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e030      	b.n	80070a6 <UART_SetConfig+0x11a>
 8007044:	231f      	movs	r3, #31
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	2204      	movs	r2, #4
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e02b      	b.n	80070a6 <UART_SetConfig+0x11a>
 800704e:	231f      	movs	r3, #31
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	2208      	movs	r2, #8
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e026      	b.n	80070a6 <UART_SetConfig+0x11a>
 8007058:	231f      	movs	r3, #31
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	2210      	movs	r2, #16
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	e021      	b.n	80070a6 <UART_SetConfig+0x11a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a71      	ldr	r2, [pc, #452]	; (800722c <UART_SetConfig+0x2a0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d104      	bne.n	8007076 <UART_SetConfig+0xea>
 800706c:	231f      	movs	r3, #31
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e017      	b.n	80070a6 <UART_SetConfig+0x11a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a6d      	ldr	r2, [pc, #436]	; (8007230 <UART_SetConfig+0x2a4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d104      	bne.n	800708a <UART_SetConfig+0xfe>
 8007080:	231f      	movs	r3, #31
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e00d      	b.n	80070a6 <UART_SetConfig+0x11a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a69      	ldr	r2, [pc, #420]	; (8007234 <UART_SetConfig+0x2a8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d104      	bne.n	800709e <UART_SetConfig+0x112>
 8007094:	231f      	movs	r3, #31
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e003      	b.n	80070a6 <UART_SetConfig+0x11a>
 800709e:	231f      	movs	r3, #31
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	2210      	movs	r2, #16
 80070a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69da      	ldr	r2, [r3, #28]
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d15d      	bne.n	800716e <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80070b2:	231f      	movs	r3, #31
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d015      	beq.n	80070e8 <UART_SetConfig+0x15c>
 80070bc:	dc18      	bgt.n	80070f0 <UART_SetConfig+0x164>
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d00d      	beq.n	80070de <UART_SetConfig+0x152>
 80070c2:	dc15      	bgt.n	80070f0 <UART_SetConfig+0x164>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <UART_SetConfig+0x142>
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d005      	beq.n	80070d8 <UART_SetConfig+0x14c>
 80070cc:	e010      	b.n	80070f0 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ce:	f7fd fe77 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 80070d2:	0003      	movs	r3, r0
 80070d4:	61bb      	str	r3, [r7, #24]
        break;
 80070d6:	e012      	b.n	80070fe <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d8:	4b57      	ldr	r3, [pc, #348]	; (8007238 <UART_SetConfig+0x2ac>)
 80070da:	61bb      	str	r3, [r7, #24]
        break;
 80070dc:	e00f      	b.n	80070fe <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070de:	f7fd fdff 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 80070e2:	0003      	movs	r3, r0
 80070e4:	61bb      	str	r3, [r7, #24]
        break;
 80070e6:	e00a      	b.n	80070fe <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	61bb      	str	r3, [r7, #24]
        break;
 80070ee:	e006      	b.n	80070fe <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070f4:	231e      	movs	r3, #30
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	2201      	movs	r2, #1
 80070fa:	701a      	strb	r2, [r3, #0]
        break;
 80070fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d100      	bne.n	8007106 <UART_SetConfig+0x17a>
 8007104:	e07b      	b.n	80071fe <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	005a      	lsls	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	18d2      	adds	r2, r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	0019      	movs	r1, r3
 8007118:	0010      	movs	r0, r2
 800711a:	f7f9 f811 	bl	8000140 <__udivsi3>
 800711e:	0003      	movs	r3, r0
 8007120:	b29b      	uxth	r3, r3
 8007122:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d91c      	bls.n	8007164 <UART_SetConfig+0x1d8>
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	025b      	lsls	r3, r3, #9
 8007130:	429a      	cmp	r2, r3
 8007132:	d217      	bcs.n	8007164 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	b29a      	uxth	r2, r3
 8007138:	200e      	movs	r0, #14
 800713a:	183b      	adds	r3, r7, r0
 800713c:	210f      	movs	r1, #15
 800713e:	438a      	bics	r2, r1
 8007140:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	b29b      	uxth	r3, r3
 8007148:	2207      	movs	r2, #7
 800714a:	4013      	ands	r3, r2
 800714c:	b299      	uxth	r1, r3
 800714e:	183b      	adds	r3, r7, r0
 8007150:	183a      	adds	r2, r7, r0
 8007152:	8812      	ldrh	r2, [r2, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	183a      	adds	r2, r7, r0
 800715e:	8812      	ldrh	r2, [r2, #0]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	e04c      	b.n	80071fe <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007164:	231e      	movs	r3, #30
 8007166:	18fb      	adds	r3, r7, r3
 8007168:	2201      	movs	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e047      	b.n	80071fe <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800716e:	231f      	movs	r3, #31
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b08      	cmp	r3, #8
 8007176:	d015      	beq.n	80071a4 <UART_SetConfig+0x218>
 8007178:	dc18      	bgt.n	80071ac <UART_SetConfig+0x220>
 800717a:	2b04      	cmp	r3, #4
 800717c:	d00d      	beq.n	800719a <UART_SetConfig+0x20e>
 800717e:	dc15      	bgt.n	80071ac <UART_SetConfig+0x220>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <UART_SetConfig+0x1fe>
 8007184:	2b02      	cmp	r3, #2
 8007186:	d005      	beq.n	8007194 <UART_SetConfig+0x208>
 8007188:	e010      	b.n	80071ac <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718a:	f7fd fe19 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 800718e:	0003      	movs	r3, r0
 8007190:	61bb      	str	r3, [r7, #24]
        break;
 8007192:	e012      	b.n	80071ba <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007194:	4b28      	ldr	r3, [pc, #160]	; (8007238 <UART_SetConfig+0x2ac>)
 8007196:	61bb      	str	r3, [r7, #24]
        break;
 8007198:	e00f      	b.n	80071ba <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719a:	f7fd fda1 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 800719e:	0003      	movs	r3, r0
 80071a0:	61bb      	str	r3, [r7, #24]
        break;
 80071a2:	e00a      	b.n	80071ba <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a4:	2380      	movs	r3, #128	; 0x80
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	61bb      	str	r3, [r7, #24]
        break;
 80071aa:	e006      	b.n	80071ba <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071b0:	231e      	movs	r3, #30
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
        break;
 80071b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01e      	beq.n	80071fe <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	085a      	lsrs	r2, r3, #1
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	18d2      	adds	r2, r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	0019      	movs	r1, r3
 80071d0:	0010      	movs	r0, r2
 80071d2:	f7f8 ffb5 	bl	8000140 <__udivsi3>
 80071d6:	0003      	movs	r3, r0
 80071d8:	b29b      	uxth	r3, r3
 80071da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b0f      	cmp	r3, #15
 80071e0:	d909      	bls.n	80071f6 <UART_SetConfig+0x26a>
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	025b      	lsls	r3, r3, #9
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d204      	bcs.n	80071f6 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	60da      	str	r2, [r3, #12]
 80071f4:	e003      	b.n	80071fe <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80071f6:	231e      	movs	r3, #30
 80071f8:	18fb      	adds	r3, r7, r3
 80071fa:	2201      	movs	r2, #1
 80071fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800720a:	231e      	movs	r3, #30
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
}
 8007210:	0018      	movs	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	b008      	add	sp, #32
 8007216:	bd80      	pop	{r7, pc}
 8007218:	efff69f3 	.word	0xefff69f3
 800721c:	ffffcfff 	.word	0xffffcfff
 8007220:	fffff4ff 	.word	0xfffff4ff
 8007224:	40013800 	.word	0x40013800
 8007228:	40021000 	.word	0x40021000
 800722c:	40004400 	.word	0x40004400
 8007230:	40004800 	.word	0x40004800
 8007234:	40004c00 	.word	0x40004c00
 8007238:	007a1200 	.word	0x007a1200

0800723c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	2201      	movs	r2, #1
 800724a:	4013      	ands	r3, r2
 800724c:	d00b      	beq.n	8007266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4a4a      	ldr	r2, [pc, #296]	; (8007380 <UART_AdvFeatureConfig+0x144>)
 8007256:	4013      	ands	r3, r2
 8007258:	0019      	movs	r1, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2202      	movs	r2, #2
 800726c:	4013      	ands	r3, r2
 800726e:	d00b      	beq.n	8007288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4a43      	ldr	r2, [pc, #268]	; (8007384 <UART_AdvFeatureConfig+0x148>)
 8007278:	4013      	ands	r3, r2
 800727a:	0019      	movs	r1, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2204      	movs	r2, #4
 800728e:	4013      	ands	r3, r2
 8007290:	d00b      	beq.n	80072aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a3b      	ldr	r2, [pc, #236]	; (8007388 <UART_AdvFeatureConfig+0x14c>)
 800729a:	4013      	ands	r3, r2
 800729c:	0019      	movs	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2208      	movs	r2, #8
 80072b0:	4013      	ands	r3, r2
 80072b2:	d00b      	beq.n	80072cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4a34      	ldr	r2, [pc, #208]	; (800738c <UART_AdvFeatureConfig+0x150>)
 80072bc:	4013      	ands	r3, r2
 80072be:	0019      	movs	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2210      	movs	r2, #16
 80072d2:	4013      	ands	r3, r2
 80072d4:	d00b      	beq.n	80072ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4a2c      	ldr	r2, [pc, #176]	; (8007390 <UART_AdvFeatureConfig+0x154>)
 80072de:	4013      	ands	r3, r2
 80072e0:	0019      	movs	r1, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2220      	movs	r2, #32
 80072f4:	4013      	ands	r3, r2
 80072f6:	d00b      	beq.n	8007310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4a25      	ldr	r2, [pc, #148]	; (8007394 <UART_AdvFeatureConfig+0x158>)
 8007300:	4013      	ands	r3, r2
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2240      	movs	r2, #64	; 0x40
 8007316:	4013      	ands	r3, r2
 8007318:	d01d      	beq.n	8007356 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <UART_AdvFeatureConfig+0x15c>)
 8007322:	4013      	ands	r3, r2
 8007324:	0019      	movs	r1, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007336:	2380      	movs	r3, #128	; 0x80
 8007338:	035b      	lsls	r3, r3, #13
 800733a:	429a      	cmp	r2, r3
 800733c:	d10b      	bne.n	8007356 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4a15      	ldr	r2, [pc, #84]	; (800739c <UART_AdvFeatureConfig+0x160>)
 8007346:	4013      	ands	r3, r2
 8007348:	0019      	movs	r1, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	4013      	ands	r3, r2
 800735e:	d00b      	beq.n	8007378 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <UART_AdvFeatureConfig+0x164>)
 8007368:	4013      	ands	r3, r2
 800736a:	0019      	movs	r1, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	b002      	add	sp, #8
 800737e:	bd80      	pop	{r7, pc}
 8007380:	fffdffff 	.word	0xfffdffff
 8007384:	fffeffff 	.word	0xfffeffff
 8007388:	fffbffff 	.word	0xfffbffff
 800738c:	ffff7fff 	.word	0xffff7fff
 8007390:	ffffefff 	.word	0xffffefff
 8007394:	ffffdfff 	.word	0xffffdfff
 8007398:	ffefffff 	.word	0xffefffff
 800739c:	ff9fffff 	.word	0xff9fffff
 80073a0:	fff7ffff 	.word	0xfff7ffff

080073a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	2100      	movs	r1, #0
 80073b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b4:	f7fc fcfe 	bl	8003db4 <HAL_GetTick>
 80073b8:	0003      	movs	r3, r0
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2208      	movs	r2, #8
 80073c4:	4013      	ands	r3, r2
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d10c      	bne.n	80073e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2280      	movs	r2, #128	; 0x80
 80073ce:	0391      	lsls	r1, r2, #14
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4a17      	ldr	r2, [pc, #92]	; (8007430 <UART_CheckIdleState+0x8c>)
 80073d4:	9200      	str	r2, [sp, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f000 f82c 	bl	8007434 <UART_WaitOnFlagUntilTimeout>
 80073dc:	1e03      	subs	r3, r0, #0
 80073de:	d001      	beq.n	80073e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e021      	b.n	8007428 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2204      	movs	r2, #4
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d10c      	bne.n	800740c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2280      	movs	r2, #128	; 0x80
 80073f6:	03d1      	lsls	r1, r2, #15
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4a0d      	ldr	r2, [pc, #52]	; (8007430 <UART_CheckIdleState+0x8c>)
 80073fc:	9200      	str	r2, [sp, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	f000 f818 	bl	8007434 <UART_WaitOnFlagUntilTimeout>
 8007404:	1e03      	subs	r3, r0, #0
 8007406:	d001      	beq.n	800740c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e00d      	b.n	8007428 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2274      	movs	r2, #116	; 0x74
 8007422:	2100      	movs	r1, #0
 8007424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	0018      	movs	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	b004      	add	sp, #16
 800742e:	bd80      	pop	{r7, pc}
 8007430:	01ffffff 	.word	0x01ffffff

08007434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b094      	sub	sp, #80	; 0x50
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	1dfb      	adds	r3, r7, #7
 8007442:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007444:	e0a3      	b.n	800758e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007448:	3301      	adds	r3, #1
 800744a:	d100      	bne.n	800744e <UART_WaitOnFlagUntilTimeout+0x1a>
 800744c:	e09f      	b.n	800758e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fc fcb1 	bl	8003db4 <HAL_GetTick>
 8007452:	0002      	movs	r2, r0
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800745a:	429a      	cmp	r2, r3
 800745c:	d302      	bcc.n	8007464 <UART_WaitOnFlagUntilTimeout+0x30>
 800745e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007460:	2b00      	cmp	r3, #0
 8007462:	d13d      	bne.n	80074e0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007464:	f3ef 8310 	mrs	r3, PRIMASK
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746c:	647b      	str	r3, [r7, #68]	; 0x44
 800746e:	2301      	movs	r3, #1
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	f383 8810 	msr	PRIMASK, r3
}
 8007478:	46c0      	nop			; (mov r8, r8)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	494c      	ldr	r1, [pc, #304]	; (80075b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007486:	400a      	ands	r2, r1
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	f383 8810 	msr	PRIMASK, r3
}
 8007494:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007496:	f3ef 8310 	mrs	r3, PRIMASK
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	643b      	str	r3, [r7, #64]	; 0x40
 80074a0:	2301      	movs	r3, #1
 80074a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	f383 8810 	msr	PRIMASK, r3
}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2101      	movs	r1, #1
 80074b8:	438a      	bics	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2274      	movs	r2, #116	; 0x74
 80074d8:	2100      	movs	r1, #0
 80074da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e067      	b.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2204      	movs	r2, #4
 80074e8:	4013      	ands	r3, r2
 80074ea:	d050      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	401a      	ands	r2, r3
 80074f8:	2380      	movs	r3, #128	; 0x80
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d146      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2280      	movs	r2, #128	; 0x80
 8007506:	0112      	lsls	r2, r2, #4
 8007508:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750a:	f3ef 8310 	mrs	r3, PRIMASK
 800750e:	613b      	str	r3, [r7, #16]
  return(result);
 8007510:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f383 8810 	msr	PRIMASK, r3
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4923      	ldr	r1, [pc, #140]	; (80075b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800752c:	400a      	ands	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007532:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f383 8810 	msr	PRIMASK, r3
}
 800753a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753c:	f3ef 8310 	mrs	r3, PRIMASK
 8007540:	61fb      	str	r3, [r7, #28]
  return(result);
 8007542:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007544:	64bb      	str	r3, [r7, #72]	; 0x48
 8007546:	2301      	movs	r3, #1
 8007548:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	f383 8810 	msr	PRIMASK, r3
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2101      	movs	r1, #1
 800755e:	438a      	bics	r2, r1
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2280      	movs	r2, #128	; 0x80
 800757e:	2120      	movs	r1, #32
 8007580:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2274      	movs	r2, #116	; 0x74
 8007586:	2100      	movs	r1, #0
 8007588:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e010      	b.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	4013      	ands	r3, r2
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	425a      	negs	r2, r3
 800759e:	4153      	adcs	r3, r2
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	001a      	movs	r2, r3
 80075a4:	1dfb      	adds	r3, r7, #7
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d100      	bne.n	80075ae <UART_WaitOnFlagUntilTimeout+0x17a>
 80075ac:	e74b      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	0018      	movs	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	b014      	add	sp, #80	; 0x50
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	fffffe5f 	.word	0xfffffe5f

080075bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08c      	sub	sp, #48	; 0x30
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	1dbb      	adds	r3, r7, #6
 80075c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	1dba      	adds	r2, r7, #6
 80075d4:	2158      	movs	r1, #88	; 0x58
 80075d6:	8812      	ldrh	r2, [r2, #0]
 80075d8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1dba      	adds	r2, r7, #6
 80075de:	215a      	movs	r1, #90	; 0x5a
 80075e0:	8812      	ldrh	r2, [r2, #0]
 80075e2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	2380      	movs	r3, #128	; 0x80
 80075f0:	015b      	lsls	r3, r3, #5
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d10d      	bne.n	8007612 <UART_Start_Receive_IT+0x56>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d104      	bne.n	8007608 <UART_Start_Receive_IT+0x4c>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	225c      	movs	r2, #92	; 0x5c
 8007602:	4943      	ldr	r1, [pc, #268]	; (8007710 <UART_Start_Receive_IT+0x154>)
 8007604:	5299      	strh	r1, [r3, r2]
 8007606:	e02e      	b.n	8007666 <UART_Start_Receive_IT+0xaa>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	225c      	movs	r2, #92	; 0x5c
 800760c:	21ff      	movs	r1, #255	; 0xff
 800760e:	5299      	strh	r1, [r3, r2]
 8007610:	e029      	b.n	8007666 <UART_Start_Receive_IT+0xaa>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10d      	bne.n	8007636 <UART_Start_Receive_IT+0x7a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <UART_Start_Receive_IT+0x70>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	225c      	movs	r2, #92	; 0x5c
 8007626:	21ff      	movs	r1, #255	; 0xff
 8007628:	5299      	strh	r1, [r3, r2]
 800762a:	e01c      	b.n	8007666 <UART_Start_Receive_IT+0xaa>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	225c      	movs	r2, #92	; 0x5c
 8007630:	217f      	movs	r1, #127	; 0x7f
 8007632:	5299      	strh	r1, [r3, r2]
 8007634:	e017      	b.n	8007666 <UART_Start_Receive_IT+0xaa>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	2380      	movs	r3, #128	; 0x80
 800763c:	055b      	lsls	r3, r3, #21
 800763e:	429a      	cmp	r2, r3
 8007640:	d10d      	bne.n	800765e <UART_Start_Receive_IT+0xa2>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <UART_Start_Receive_IT+0x98>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	225c      	movs	r2, #92	; 0x5c
 800764e:	217f      	movs	r1, #127	; 0x7f
 8007650:	5299      	strh	r1, [r3, r2]
 8007652:	e008      	b.n	8007666 <UART_Start_Receive_IT+0xaa>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	225c      	movs	r2, #92	; 0x5c
 8007658:	213f      	movs	r1, #63	; 0x3f
 800765a:	5299      	strh	r1, [r3, r2]
 800765c:	e003      	b.n	8007666 <UART_Start_Receive_IT+0xaa>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	225c      	movs	r2, #92	; 0x5c
 8007662:	2100      	movs	r1, #0
 8007664:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2280      	movs	r2, #128	; 0x80
 800766a:	2100      	movs	r1, #0
 800766c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2222      	movs	r2, #34	; 0x22
 8007672:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007674:	f3ef 8310 	mrs	r3, PRIMASK
 8007678:	61fb      	str	r3, [r7, #28]
  return(result);
 800767a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800767e:	2301      	movs	r3, #1
 8007680:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f383 8810 	msr	PRIMASK, r3
}
 8007688:	46c0      	nop			; (mov r8, r8)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2101      	movs	r1, #1
 8007696:	430a      	orrs	r2, r1
 8007698:	609a      	str	r2, [r3, #8]
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	f383 8810 	msr	PRIMASK, r3
}
 80076a4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	015b      	lsls	r3, r3, #5
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d107      	bne.n	80076c2 <UART_Start_Receive_IT+0x106>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <UART_Start_Receive_IT+0x158>)
 80076be:	665a      	str	r2, [r3, #100]	; 0x64
 80076c0:	e002      	b.n	80076c8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <UART_Start_Receive_IT+0x15c>)
 80076c6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2274      	movs	r2, #116	; 0x74
 80076cc:	2100      	movs	r1, #0
 80076ce:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d0:	f3ef 8310 	mrs	r3, PRIMASK
 80076d4:	613b      	str	r3, [r7, #16]
  return(result);
 80076d6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076da:	2301      	movs	r3, #1
 80076dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f383 8810 	msr	PRIMASK, r3
}
 80076e4:	46c0      	nop			; (mov r8, r8)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2190      	movs	r1, #144	; 0x90
 80076f2:	0049      	lsls	r1, r1, #1
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f383 8810 	msr	PRIMASK, r3
}
 8007702:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	0018      	movs	r0, r3
 8007708:	46bd      	mov	sp, r7
 800770a:	b00c      	add	sp, #48	; 0x30
 800770c:	bd80      	pop	{r7, pc}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	000001ff 	.word	0x000001ff
 8007714:	08007d3d 	.word	0x08007d3d
 8007718:	08007bd5 	.word	0x08007bd5

0800771c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b090      	sub	sp, #64	; 0x40
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	1dbb      	adds	r3, r7, #6
 8007728:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	1dba      	adds	r2, r7, #6
 8007734:	2158      	movs	r1, #88	; 0x58
 8007736:	8812      	ldrh	r2, [r2, #0]
 8007738:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	2100      	movs	r1, #0
 8007740:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2222      	movs	r2, #34	; 0x22
 8007746:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02b      	beq.n	80077a8 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007754:	4a3f      	ldr	r2, [pc, #252]	; (8007854 <UART_Start_Receive_DMA+0x138>)
 8007756:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775c:	4a3e      	ldr	r2, [pc, #248]	; (8007858 <UART_Start_Receive_DMA+0x13c>)
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	4a3d      	ldr	r2, [pc, #244]	; (800785c <UART_Start_Receive_DMA+0x140>)
 8007766:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	2200      	movs	r2, #0
 800776e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3324      	adds	r3, #36	; 0x24
 800777a:	0019      	movs	r1, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007780:	001a      	movs	r2, r3
 8007782:	1dbb      	adds	r3, r7, #6
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	f7fc fc21 	bl	8003fcc <HAL_DMA_Start_IT>
 800778a:	1e03      	subs	r3, r0, #0
 800778c:	d00c      	beq.n	80077a8 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2280      	movs	r2, #128	; 0x80
 8007792:	2110      	movs	r1, #16
 8007794:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2274      	movs	r2, #116	; 0x74
 800779a:	2100      	movs	r1, #0
 800779c:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e050      	b.n	800784a <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2274      	movs	r2, #116	; 0x74
 80077ac:	2100      	movs	r1, #0
 80077ae:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b0:	f3ef 8310 	mrs	r3, PRIMASK
 80077b4:	613b      	str	r3, [r7, #16]
  return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f383 8810 	msr	PRIMASK, r3
}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2180      	movs	r1, #128	; 0x80
 80077d2:	0049      	lsls	r1, r1, #1
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f383 8810 	msr	PRIMASK, r3
}
 80077e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e4:	f3ef 8310 	mrs	r3, PRIMASK
 80077e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80077ea:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80077ee:	2301      	movs	r3, #1
 80077f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	f383 8810 	msr	PRIMASK, r3
}
 80077f8:	46c0      	nop			; (mov r8, r8)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2101      	movs	r1, #1
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	f383 8810 	msr	PRIMASK, r3
}
 8007814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007816:	f3ef 8310 	mrs	r3, PRIMASK
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
 8007820:	2301      	movs	r3, #1
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	f383 8810 	msr	PRIMASK, r3
}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2140      	movs	r1, #64	; 0x40
 8007838:	430a      	orrs	r2, r1
 800783a:	609a      	str	r2, [r3, #8]
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	f383 8810 	msr	PRIMASK, r3
}
 8007846:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	b010      	add	sp, #64	; 0x40
 8007850:	bd80      	pop	{r7, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	0800796d 	.word	0x0800796d
 8007858:	08007a91 	.word	0x08007a91
 800785c:	08007acd 	.word	0x08007acd

08007860 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007868:	f3ef 8310 	mrs	r3, PRIMASK
 800786c:	60bb      	str	r3, [r7, #8]
  return(result);
 800786e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	2301      	movs	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f383 8810 	msr	PRIMASK, r3
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	21c0      	movs	r1, #192	; 0xc0
 800788a:	438a      	bics	r2, r1
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f383 8810 	msr	PRIMASK, r3
}
 8007898:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	679a      	str	r2, [r3, #120]	; 0x78
}
 80078a0:	46c0      	nop			; (mov r8, r8)
 80078a2:	46bd      	mov	sp, r7
 80078a4:	b006      	add	sp, #24
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08e      	sub	sp, #56	; 0x38
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078b0:	f3ef 8310 	mrs	r3, PRIMASK
 80078b4:	617b      	str	r3, [r7, #20]
  return(result);
 80078b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ba:	2301      	movs	r3, #1
 80078bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	f383 8810 	msr	PRIMASK, r3
}
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4925      	ldr	r1, [pc, #148]	; (8007968 <UART_EndRxTransfer+0xc0>)
 80078d2:	400a      	ands	r2, r1
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f383 8810 	msr	PRIMASK, r3
}
 80078e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	623b      	str	r3, [r7, #32]
  return(result);
 80078e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ea:	633b      	str	r3, [r7, #48]	; 0x30
 80078ec:	2301      	movs	r3, #1
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	f383 8810 	msr	PRIMASK, r3
}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2101      	movs	r1, #1
 8007904:	438a      	bics	r2, r1
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	f383 8810 	msr	PRIMASK, r3
}
 8007912:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007918:	2b01      	cmp	r3, #1
 800791a:	d118      	bne.n	800794e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800791c:	f3ef 8310 	mrs	r3, PRIMASK
 8007920:	60bb      	str	r3, [r7, #8]
  return(result);
 8007922:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007926:	2301      	movs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f383 8810 	msr	PRIMASK, r3
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2110      	movs	r1, #16
 800793e:	438a      	bics	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f383 8810 	msr	PRIMASK, r3
}
 800794c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007960:	46c0      	nop			; (mov r8, r8)
 8007962:	46bd      	mov	sp, r7
 8007964:	b00e      	add	sp, #56	; 0x38
 8007966:	bd80      	pop	{r7, pc}
 8007968:	fffffedf 	.word	0xfffffedf

0800796c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b094      	sub	sp, #80	; 0x50
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b20      	cmp	r3, #32
 8007980:	d06e      	beq.n	8007a60 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8007982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007984:	225a      	movs	r2, #90	; 0x5a
 8007986:	2100      	movs	r1, #0
 8007988:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798a:	f3ef 8310 	mrs	r3, PRIMASK
 800798e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007990:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007992:	64bb      	str	r3, [r7, #72]	; 0x48
 8007994:	2301      	movs	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f383 8810 	msr	PRIMASK, r3
}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4938      	ldr	r1, [pc, #224]	; (8007a8c <UART_DMAReceiveCplt+0x120>)
 80079ac:	400a      	ands	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	f383 8810 	msr	PRIMASK, r3
}
 80079ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079bc:	f3ef 8310 	mrs	r3, PRIMASK
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c4:	647b      	str	r3, [r7, #68]	; 0x44
 80079c6:	2301      	movs	r3, #1
 80079c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	f383 8810 	msr	PRIMASK, r3
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2101      	movs	r1, #1
 80079de:	438a      	bics	r2, r1
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	f383 8810 	msr	PRIMASK, r3
}
 80079ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ee:	f3ef 8310 	mrs	r3, PRIMASK
 80079f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f6:	643b      	str	r3, [r7, #64]	; 0x40
 80079f8:	2301      	movs	r3, #1
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	f383 8810 	msr	PRIMASK, r3
}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2140      	movs	r1, #64	; 0x40
 8007a10:	438a      	bics	r2, r1
 8007a12:	609a      	str	r2, [r3, #8]
 8007a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	f383 8810 	msr	PRIMASK, r3
}
 8007a1e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a22:	2220      	movs	r2, #32
 8007a24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d118      	bne.n	8007a60 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a34:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a38:	2301      	movs	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f383 8810 	msr	PRIMASK, r3
}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2110      	movs	r1, #16
 8007a50:	438a      	bics	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f383 8810 	msr	PRIMASK, r3
}
 8007a5e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d108      	bne.n	8007a7a <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6a:	2258      	movs	r2, #88	; 0x58
 8007a6c:	5a9a      	ldrh	r2, [r3, r2]
 8007a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a70:	0011      	movs	r1, r2
 8007a72:	0018      	movs	r0, r3
 8007a74:	f7ff fa7e 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a78:	e003      	b.n	8007a82 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8007a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f7fb fe0d 	bl	800369c <HAL_UART_RxCpltCallback>
}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	46bd      	mov	sp, r7
 8007a86:	b014      	add	sp, #80	; 0x50
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	fffffeff 	.word	0xfffffeff

08007a90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d10a      	bne.n	8007abc <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2258      	movs	r2, #88	; 0x58
 8007aaa:	5a9b      	ldrh	r3, [r3, r2]
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7ff fa5d 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007aba:	e003      	b.n	8007ac4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7ff fa48 	bl	8006f54 <HAL_UART_RxHalfCpltCallback>
}
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b004      	add	sp, #16
 8007aca:	bd80      	pop	{r7, pc}

08007acc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ade:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2280      	movs	r2, #128	; 0x80
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d10a      	bne.n	8007b0a <UART_DMAError+0x3e>
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b21      	cmp	r3, #33	; 0x21
 8007af8:	d107      	bne.n	8007b0a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2252      	movs	r2, #82	; 0x52
 8007afe:	2100      	movs	r1, #0
 8007b00:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	0018      	movs	r0, r3
 8007b06:	f7ff feab 	bl	8007860 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2240      	movs	r2, #64	; 0x40
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d10a      	bne.n	8007b2e <UART_DMAError+0x62>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b22      	cmp	r3, #34	; 0x22
 8007b1c:	d107      	bne.n	8007b2e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	225a      	movs	r2, #90	; 0x5a
 8007b22:	2100      	movs	r1, #0
 8007b24:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f7ff febd 	bl	80078a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2280      	movs	r2, #128	; 0x80
 8007b32:	589b      	ldr	r3, [r3, r2]
 8007b34:	2210      	movs	r2, #16
 8007b36:	431a      	orrs	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	0018      	movs	r0, r3
 8007b42:	f7ff fa0f 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	b006      	add	sp, #24
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	225a      	movs	r2, #90	; 0x5a
 8007b60:	2100      	movs	r1, #0
 8007b62:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2252      	movs	r2, #82	; 0x52
 8007b68:	2100      	movs	r1, #0
 8007b6a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f7ff f9f8 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b004      	add	sp, #16
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b84:	f3ef 8310 	mrs	r3, PRIMASK
 8007b88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	2301      	movs	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f383 8810 	msr	PRIMASK, r3
}
 8007b98:	46c0      	nop			; (mov r8, r8)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2140      	movs	r1, #64	; 0x40
 8007ba6:	438a      	bics	r2, r1
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f383 8810 	msr	PRIMASK, r3
}
 8007bb4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f7ff f9bd 	bl	8006f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	b006      	add	sp, #24
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b090      	sub	sp, #64	; 0x40
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bdc:	203e      	movs	r0, #62	; 0x3e
 8007bde:	183b      	adds	r3, r7, r0
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	215c      	movs	r1, #92	; 0x5c
 8007be4:	5a52      	ldrh	r2, [r2, r1]
 8007be6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bec:	2b22      	cmp	r3, #34	; 0x22
 8007bee:	d000      	beq.n	8007bf2 <UART_RxISR_8BIT+0x1e>
 8007bf0:	e095      	b.n	8007d1e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	213c      	movs	r1, #60	; 0x3c
 8007bf8:	187b      	adds	r3, r7, r1
 8007bfa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007bfc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bfe:	187b      	adds	r3, r7, r1
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	183b      	adds	r3, r7, r0
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b2d9      	uxtb	r1, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	400a      	ands	r2, r1
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	225a      	movs	r2, #90	; 0x5a
 8007c22:	5a9b      	ldrh	r3, [r3, r2]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b299      	uxth	r1, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	225a      	movs	r2, #90	; 0x5a
 8007c2e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	225a      	movs	r2, #90	; 0x5a
 8007c34:	5a9b      	ldrh	r3, [r3, r2]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d178      	bne.n	8007d2e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c40:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c42:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	f383 8810 	msr	PRIMASK, r3
}
 8007c50:	46c0      	nop			; (mov r8, r8)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4936      	ldr	r1, [pc, #216]	; (8007d38 <UART_RxISR_8BIT+0x164>)
 8007c5e:	400a      	ands	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f383 8810 	msr	PRIMASK, r3
}
 8007c6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
 8007c78:	2301      	movs	r3, #1
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	f383 8810 	msr	PRIMASK, r3
}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	438a      	bics	r2, r1
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	f383 8810 	msr	PRIMASK, r3
}
 8007c9e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d12f      	bne.n	8007d14 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cba:	f3ef 8310 	mrs	r3, PRIMASK
 8007cbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cc0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f383 8810 	msr	PRIMASK, r3
}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2110      	movs	r1, #16
 8007cdc:	438a      	bics	r2, r1
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f383 8810 	msr	PRIMASK, r3
}
 8007cea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d103      	bne.n	8007d02 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2210      	movs	r2, #16
 8007d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2258      	movs	r2, #88	; 0x58
 8007d06:	5a9a      	ldrh	r2, [r3, r2]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f7ff f931 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d12:	e00c      	b.n	8007d2e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	0018      	movs	r0, r3
 8007d18:	f7fb fcc0 	bl	800369c <HAL_UART_RxCpltCallback>
}
 8007d1c:	e007      	b.n	8007d2e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	699a      	ldr	r2, [r3, #24]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2108      	movs	r1, #8
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	619a      	str	r2, [r3, #24]
}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b010      	add	sp, #64	; 0x40
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	46c0      	nop			; (mov r8, r8)
 8007d38:	fffffedf 	.word	0xfffffedf

08007d3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b090      	sub	sp, #64	; 0x40
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d44:	203e      	movs	r0, #62	; 0x3e
 8007d46:	183b      	adds	r3, r7, r0
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	215c      	movs	r1, #92	; 0x5c
 8007d4c:	5a52      	ldrh	r2, [r2, r1]
 8007d4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d54:	2b22      	cmp	r3, #34	; 0x22
 8007d56:	d000      	beq.n	8007d5a <UART_RxISR_16BIT+0x1e>
 8007d58:	e095      	b.n	8007e86 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	213c      	movs	r1, #60	; 0x3c
 8007d60:	187b      	adds	r3, r7, r1
 8007d62:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007d64:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	183a      	adds	r2, r7, r0
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	8812      	ldrh	r2, [r2, #0]
 8007d74:	4013      	ands	r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d80:	1c9a      	adds	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	225a      	movs	r2, #90	; 0x5a
 8007d8a:	5a9b      	ldrh	r3, [r3, r2]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b299      	uxth	r1, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	225a      	movs	r2, #90	; 0x5a
 8007d96:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	225a      	movs	r2, #90	; 0x5a
 8007d9c:	5a9b      	ldrh	r3, [r3, r2]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d178      	bne.n	8007e96 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da4:	f3ef 8310 	mrs	r3, PRIMASK
 8007da8:	617b      	str	r3, [r7, #20]
  return(result);
 8007daa:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
 8007dae:	2301      	movs	r3, #1
 8007db0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f383 8810 	msr	PRIMASK, r3
}
 8007db8:	46c0      	nop			; (mov r8, r8)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4936      	ldr	r1, [pc, #216]	; (8007ea0 <UART_RxISR_16BIT+0x164>)
 8007dc6:	400a      	ands	r2, r1
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f383 8810 	msr	PRIMASK, r3
}
 8007dd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dda:	623b      	str	r3, [r7, #32]
  return(result);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	633b      	str	r3, [r7, #48]	; 0x30
 8007de0:	2301      	movs	r3, #1
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	f383 8810 	msr	PRIMASK, r3
}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2101      	movs	r1, #1
 8007df8:	438a      	bics	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	f383 8810 	msr	PRIMASK, r3
}
 8007e06:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d12f      	bne.n	8007e7c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e22:	f3ef 8310 	mrs	r3, PRIMASK
 8007e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e28:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2110      	movs	r1, #16
 8007e44:	438a      	bics	r2, r1
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f383 8810 	msr	PRIMASK, r3
}
 8007e52:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	2210      	movs	r2, #16
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d103      	bne.n	8007e6a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2210      	movs	r2, #16
 8007e68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2258      	movs	r2, #88	; 0x58
 8007e6e:	5a9a      	ldrh	r2, [r3, r2]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	0011      	movs	r1, r2
 8007e74:	0018      	movs	r0, r3
 8007e76:	f7ff f87d 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e7a:	e00c      	b.n	8007e96 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f7fb fc0c 	bl	800369c <HAL_UART_RxCpltCallback>
}
 8007e84:	e007      	b.n	8007e96 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	699a      	ldr	r2, [r3, #24]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2108      	movs	r1, #8
 8007e92:	430a      	orrs	r2, r1
 8007e94:	619a      	str	r2, [r3, #24]
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b010      	add	sp, #64	; 0x40
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	fffffedf 	.word	0xfffffedf

08007ea4 <__errno>:
 8007ea4:	4b01      	ldr	r3, [pc, #4]	; (8007eac <__errno+0x8>)
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	4770      	bx	lr
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	2000000c 	.word	0x2000000c

08007eb0 <__libc_init_array>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	4d0c      	ldr	r5, [pc, #48]	; (8007ee8 <__libc_init_array+0x38>)
 8007eb6:	4c0d      	ldr	r4, [pc, #52]	; (8007eec <__libc_init_array+0x3c>)
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	d109      	bne.n	8007ed4 <__libc_init_array+0x24>
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	f004 fd03 	bl	800c8cc <_init>
 8007ec6:	4d0a      	ldr	r5, [pc, #40]	; (8007ef0 <__libc_init_array+0x40>)
 8007ec8:	4c0a      	ldr	r4, [pc, #40]	; (8007ef4 <__libc_init_array+0x44>)
 8007eca:	1b64      	subs	r4, r4, r5
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	42a6      	cmp	r6, r4
 8007ed0:	d105      	bne.n	8007ede <__libc_init_array+0x2e>
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	00b3      	lsls	r3, r6, #2
 8007ed6:	58eb      	ldr	r3, [r5, r3]
 8007ed8:	4798      	blx	r3
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7ee      	b.n	8007ebc <__libc_init_array+0xc>
 8007ede:	00b3      	lsls	r3, r6, #2
 8007ee0:	58eb      	ldr	r3, [r5, r3]
 8007ee2:	4798      	blx	r3
 8007ee4:	3601      	adds	r6, #1
 8007ee6:	e7f2      	b.n	8007ece <__libc_init_array+0x1e>
 8007ee8:	0800ce84 	.word	0x0800ce84
 8007eec:	0800ce84 	.word	0x0800ce84
 8007ef0:	0800ce84 	.word	0x0800ce84
 8007ef4:	0800ce88 	.word	0x0800ce88

08007ef8 <memset>:
 8007ef8:	0003      	movs	r3, r0
 8007efa:	1882      	adds	r2, r0, r2
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d100      	bne.n	8007f02 <memset+0xa>
 8007f00:	4770      	bx	lr
 8007f02:	7019      	strb	r1, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	e7f9      	b.n	8007efc <memset+0x4>

08007f08 <__cvt>:
 8007f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0a:	001e      	movs	r6, r3
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	0014      	movs	r4, r2
 8007f10:	b08b      	sub	sp, #44	; 0x2c
 8007f12:	429e      	cmp	r6, r3
 8007f14:	da04      	bge.n	8007f20 <__cvt+0x18>
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	0609      	lsls	r1, r1, #24
 8007f1a:	1873      	adds	r3, r6, r1
 8007f1c:	001e      	movs	r6, r3
 8007f1e:	232d      	movs	r3, #45	; 0x2d
 8007f20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f24:	7013      	strb	r3, [r2, #0]
 8007f26:	2320      	movs	r3, #32
 8007f28:	2203      	movs	r2, #3
 8007f2a:	439f      	bics	r7, r3
 8007f2c:	2f46      	cmp	r7, #70	; 0x46
 8007f2e:	d007      	beq.n	8007f40 <__cvt+0x38>
 8007f30:	003b      	movs	r3, r7
 8007f32:	3b45      	subs	r3, #69	; 0x45
 8007f34:	4259      	negs	r1, r3
 8007f36:	414b      	adcs	r3, r1
 8007f38:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	18cb      	adds	r3, r1, r3
 8007f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f40:	ab09      	add	r3, sp, #36	; 0x24
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	ab08      	add	r3, sp, #32
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f4a:	9200      	str	r2, [sp, #0]
 8007f4c:	9302      	str	r3, [sp, #8]
 8007f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f50:	0022      	movs	r2, r4
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	0033      	movs	r3, r6
 8007f56:	f001 fddf 	bl	8009b18 <_dtoa_r>
 8007f5a:	0005      	movs	r5, r0
 8007f5c:	2f47      	cmp	r7, #71	; 0x47
 8007f5e:	d102      	bne.n	8007f66 <__cvt+0x5e>
 8007f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f62:	07db      	lsls	r3, r3, #31
 8007f64:	d528      	bpl.n	8007fb8 <__cvt+0xb0>
 8007f66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f68:	18eb      	adds	r3, r5, r3
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	2f46      	cmp	r7, #70	; 0x46
 8007f6e:	d114      	bne.n	8007f9a <__cvt+0x92>
 8007f70:	782b      	ldrb	r3, [r5, #0]
 8007f72:	2b30      	cmp	r3, #48	; 0x30
 8007f74:	d10c      	bne.n	8007f90 <__cvt+0x88>
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	0020      	movs	r0, r4
 8007f7c:	0031      	movs	r1, r6
 8007f7e:	f7f8 fa65 	bl	800044c <__aeabi_dcmpeq>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d104      	bne.n	8007f90 <__cvt+0x88>
 8007f86:	2301      	movs	r3, #1
 8007f88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f92:	9a07      	ldr	r2, [sp, #28]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	9307      	str	r3, [sp, #28]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	0020      	movs	r0, r4
 8007fa0:	0031      	movs	r1, r6
 8007fa2:	f7f8 fa53 	bl	800044c <__aeabi_dcmpeq>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d001      	beq.n	8007fae <__cvt+0xa6>
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	2230      	movs	r2, #48	; 0x30
 8007fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb2:	9907      	ldr	r1, [sp, #28]
 8007fb4:	428b      	cmp	r3, r1
 8007fb6:	d306      	bcc.n	8007fc6 <__cvt+0xbe>
 8007fb8:	0028      	movs	r0, r5
 8007fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fbe:	1b5b      	subs	r3, r3, r5
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	b00b      	add	sp, #44	; 0x2c
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc6:	1c59      	adds	r1, r3, #1
 8007fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e7f0      	b.n	8007fb0 <__cvt+0xa8>

08007fce <__exponent>:
 8007fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd0:	1c83      	adds	r3, r0, #2
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	9303      	str	r3, [sp, #12]
 8007fd6:	0005      	movs	r5, r0
 8007fd8:	000c      	movs	r4, r1
 8007fda:	232b      	movs	r3, #43	; 0x2b
 8007fdc:	7002      	strb	r2, [r0, #0]
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	da01      	bge.n	8007fe6 <__exponent+0x18>
 8007fe2:	424c      	negs	r4, r1
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	706b      	strb	r3, [r5, #1]
 8007fe8:	2c09      	cmp	r4, #9
 8007fea:	dd31      	ble.n	8008050 <__exponent+0x82>
 8007fec:	270a      	movs	r7, #10
 8007fee:	ab04      	add	r3, sp, #16
 8007ff0:	1dde      	adds	r6, r3, #7
 8007ff2:	0020      	movs	r0, r4
 8007ff4:	0039      	movs	r1, r7
 8007ff6:	9601      	str	r6, [sp, #4]
 8007ff8:	f7f8 fa12 	bl	8000420 <__aeabi_idivmod>
 8007ffc:	3e01      	subs	r6, #1
 8007ffe:	3130      	adds	r1, #48	; 0x30
 8008000:	0020      	movs	r0, r4
 8008002:	7031      	strb	r1, [r6, #0]
 8008004:	0039      	movs	r1, r7
 8008006:	9402      	str	r4, [sp, #8]
 8008008:	f7f8 f924 	bl	8000254 <__divsi3>
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	0004      	movs	r4, r0
 8008010:	2b63      	cmp	r3, #99	; 0x63
 8008012:	dcee      	bgt.n	8007ff2 <__exponent+0x24>
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	3430      	adds	r4, #48	; 0x30
 8008018:	1e9a      	subs	r2, r3, #2
 800801a:	0013      	movs	r3, r2
 800801c:	9903      	ldr	r1, [sp, #12]
 800801e:	7014      	strb	r4, [r2, #0]
 8008020:	a804      	add	r0, sp, #16
 8008022:	3007      	adds	r0, #7
 8008024:	4298      	cmp	r0, r3
 8008026:	d80e      	bhi.n	8008046 <__exponent+0x78>
 8008028:	ab04      	add	r3, sp, #16
 800802a:	3307      	adds	r3, #7
 800802c:	2000      	movs	r0, #0
 800802e:	429a      	cmp	r2, r3
 8008030:	d804      	bhi.n	800803c <__exponent+0x6e>
 8008032:	ab04      	add	r3, sp, #16
 8008034:	3009      	adds	r0, #9
 8008036:	18c0      	adds	r0, r0, r3
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	1ac0      	subs	r0, r0, r3
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	1818      	adds	r0, r3, r0
 8008040:	1b40      	subs	r0, r0, r5
 8008042:	b007      	add	sp, #28
 8008044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008046:	7818      	ldrb	r0, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	7008      	strb	r0, [r1, #0]
 800804c:	3101      	adds	r1, #1
 800804e:	e7e7      	b.n	8008020 <__exponent+0x52>
 8008050:	2330      	movs	r3, #48	; 0x30
 8008052:	18e4      	adds	r4, r4, r3
 8008054:	70ab      	strb	r3, [r5, #2]
 8008056:	1d28      	adds	r0, r5, #4
 8008058:	70ec      	strb	r4, [r5, #3]
 800805a:	e7f1      	b.n	8008040 <__exponent+0x72>

0800805c <_printf_float>:
 800805c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805e:	b095      	sub	sp, #84	; 0x54
 8008060:	000c      	movs	r4, r1
 8008062:	9208      	str	r2, [sp, #32]
 8008064:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
 8008068:	0007      	movs	r7, r0
 800806a:	f002 fee5 	bl	800ae38 <_localeconv_r>
 800806e:	6803      	ldr	r3, [r0, #0]
 8008070:	0018      	movs	r0, r3
 8008072:	930b      	str	r3, [sp, #44]	; 0x2c
 8008074:	f7f8 f848 	bl	8000108 <strlen>
 8008078:	2300      	movs	r3, #0
 800807a:	9312      	str	r3, [sp, #72]	; 0x48
 800807c:	7e23      	ldrb	r3, [r4, #24]
 800807e:	2207      	movs	r2, #7
 8008080:	001e      	movs	r6, r3
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	900d      	str	r0, [sp, #52]	; 0x34
 8008086:	930c      	str	r3, [sp, #48]	; 0x30
 8008088:	990c      	ldr	r1, [sp, #48]	; 0x30
 800808a:	682b      	ldr	r3, [r5, #0]
 800808c:	05c9      	lsls	r1, r1, #23
 800808e:	d547      	bpl.n	8008120 <_printf_float+0xc4>
 8008090:	189b      	adds	r3, r3, r2
 8008092:	4393      	bics	r3, r2
 8008094:	001a      	movs	r2, r3
 8008096:	3208      	adds	r2, #8
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	64a2      	str	r2, [r4, #72]	; 0x48
 80080a0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80080a2:	2201      	movs	r2, #1
 80080a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80080a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80080a8:	930a      	str	r3, [sp, #40]	; 0x28
 80080aa:	006b      	lsls	r3, r5, #1
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	930e      	str	r3, [sp, #56]	; 0x38
 80080b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080b2:	4ba8      	ldr	r3, [pc, #672]	; (8008354 <_printf_float+0x2f8>)
 80080b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080b6:	4252      	negs	r2, r2
 80080b8:	f7f9 ffd4 	bl	8002064 <__aeabi_dcmpun>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d131      	bne.n	8008124 <_printf_float+0xc8>
 80080c0:	2201      	movs	r2, #1
 80080c2:	4ba4      	ldr	r3, [pc, #656]	; (8008354 <_printf_float+0x2f8>)
 80080c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080c8:	4252      	negs	r2, r2
 80080ca:	f7f8 f9cf 	bl	800046c <__aeabi_dcmple>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d128      	bne.n	8008124 <_printf_float+0xc8>
 80080d2:	2200      	movs	r2, #0
 80080d4:	2300      	movs	r3, #0
 80080d6:	0029      	movs	r1, r5
 80080d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080da:	f7f8 f9bd 	bl	8000458 <__aeabi_dcmplt>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d003      	beq.n	80080ea <_printf_float+0x8e>
 80080e2:	0023      	movs	r3, r4
 80080e4:	222d      	movs	r2, #45	; 0x2d
 80080e6:	3343      	adds	r3, #67	; 0x43
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	4d9b      	ldr	r5, [pc, #620]	; (8008358 <_printf_float+0x2fc>)
 80080ec:	2e47      	cmp	r6, #71	; 0x47
 80080ee:	d900      	bls.n	80080f2 <_printf_float+0x96>
 80080f0:	4d9a      	ldr	r5, [pc, #616]	; (800835c <_printf_float+0x300>)
 80080f2:	2303      	movs	r3, #3
 80080f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	3301      	adds	r3, #1
 80080fa:	439a      	bics	r2, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	930a      	str	r3, [sp, #40]	; 0x28
 8008102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008104:	0021      	movs	r1, r4
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	0038      	movs	r0, r7
 800810a:	9b08      	ldr	r3, [sp, #32]
 800810c:	aa13      	add	r2, sp, #76	; 0x4c
 800810e:	f000 f9f3 	bl	80084f8 <_printf_common>
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	d000      	beq.n	8008118 <_printf_float+0xbc>
 8008116:	e09e      	b.n	8008256 <_printf_float+0x1fa>
 8008118:	2001      	movs	r0, #1
 800811a:	4240      	negs	r0, r0
 800811c:	b015      	add	sp, #84	; 0x54
 800811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008120:	3307      	adds	r3, #7
 8008122:	e7b6      	b.n	8008092 <_printf_float+0x36>
 8008124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008126:	002b      	movs	r3, r5
 8008128:	0010      	movs	r0, r2
 800812a:	0029      	movs	r1, r5
 800812c:	f7f9 ff9a 	bl	8002064 <__aeabi_dcmpun>
 8008130:	2800      	cmp	r0, #0
 8008132:	d00a      	beq.n	800814a <_printf_float+0xee>
 8008134:	2d00      	cmp	r5, #0
 8008136:	da03      	bge.n	8008140 <_printf_float+0xe4>
 8008138:	0023      	movs	r3, r4
 800813a:	222d      	movs	r2, #45	; 0x2d
 800813c:	3343      	adds	r3, #67	; 0x43
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	4d87      	ldr	r5, [pc, #540]	; (8008360 <_printf_float+0x304>)
 8008142:	2e47      	cmp	r6, #71	; 0x47
 8008144:	d9d5      	bls.n	80080f2 <_printf_float+0x96>
 8008146:	4d87      	ldr	r5, [pc, #540]	; (8008364 <_printf_float+0x308>)
 8008148:	e7d3      	b.n	80080f2 <_printf_float+0x96>
 800814a:	2220      	movs	r2, #32
 800814c:	0031      	movs	r1, r6
 800814e:	6863      	ldr	r3, [r4, #4]
 8008150:	4391      	bics	r1, r2
 8008152:	910e      	str	r1, [sp, #56]	; 0x38
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	d147      	bne.n	80081e8 <_printf_float+0x18c>
 8008158:	3307      	adds	r3, #7
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	2380      	movs	r3, #128	; 0x80
 800815e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	4313      	orrs	r3, r2
 8008164:	2200      	movs	r2, #0
 8008166:	9206      	str	r2, [sp, #24]
 8008168:	aa12      	add	r2, sp, #72	; 0x48
 800816a:	9205      	str	r2, [sp, #20]
 800816c:	aa11      	add	r2, sp, #68	; 0x44
 800816e:	9203      	str	r2, [sp, #12]
 8008170:	2223      	movs	r2, #35	; 0x23
 8008172:	a908      	add	r1, sp, #32
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	1852      	adds	r2, r2, r1
 800817c:	9202      	str	r2, [sp, #8]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	0038      	movs	r0, r7
 8008182:	002b      	movs	r3, r5
 8008184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008186:	9604      	str	r6, [sp, #16]
 8008188:	f7ff febe 	bl	8007f08 <__cvt>
 800818c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800818e:	0005      	movs	r5, r0
 8008190:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008192:	2b47      	cmp	r3, #71	; 0x47
 8008194:	d108      	bne.n	80081a8 <_printf_float+0x14c>
 8008196:	1ccb      	adds	r3, r1, #3
 8008198:	db02      	blt.n	80081a0 <_printf_float+0x144>
 800819a:	6863      	ldr	r3, [r4, #4]
 800819c:	4299      	cmp	r1, r3
 800819e:	dd46      	ble.n	800822e <_printf_float+0x1d2>
 80081a0:	0033      	movs	r3, r6
 80081a2:	3b02      	subs	r3, #2
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	001e      	movs	r6, r3
 80081a8:	2e65      	cmp	r6, #101	; 0x65
 80081aa:	d824      	bhi.n	80081f6 <_printf_float+0x19a>
 80081ac:	0020      	movs	r0, r4
 80081ae:	0032      	movs	r2, r6
 80081b0:	3901      	subs	r1, #1
 80081b2:	3050      	adds	r0, #80	; 0x50
 80081b4:	9111      	str	r1, [sp, #68]	; 0x44
 80081b6:	f7ff ff0a 	bl	8007fce <__exponent>
 80081ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081bc:	900a      	str	r0, [sp, #40]	; 0x28
 80081be:	1813      	adds	r3, r2, r0
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	dc02      	bgt.n	80081cc <_printf_float+0x170>
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	07d2      	lsls	r2, r2, #31
 80081ca:	d501      	bpl.n	80081d0 <_printf_float+0x174>
 80081cc:	3301      	adds	r3, #1
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	2323      	movs	r3, #35	; 0x23
 80081d2:	aa08      	add	r2, sp, #32
 80081d4:	189b      	adds	r3, r3, r2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d100      	bne.n	80081de <_printf_float+0x182>
 80081dc:	e791      	b.n	8008102 <_printf_float+0xa6>
 80081de:	0023      	movs	r3, r4
 80081e0:	222d      	movs	r2, #45	; 0x2d
 80081e2:	3343      	adds	r3, #67	; 0x43
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e78c      	b.n	8008102 <_printf_float+0xa6>
 80081e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ea:	2a47      	cmp	r2, #71	; 0x47
 80081ec:	d1b6      	bne.n	800815c <_printf_float+0x100>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1b4      	bne.n	800815c <_printf_float+0x100>
 80081f2:	3301      	adds	r3, #1
 80081f4:	e7b1      	b.n	800815a <_printf_float+0xfe>
 80081f6:	2e66      	cmp	r6, #102	; 0x66
 80081f8:	d11b      	bne.n	8008232 <_printf_float+0x1d6>
 80081fa:	6863      	ldr	r3, [r4, #4]
 80081fc:	2900      	cmp	r1, #0
 80081fe:	dd0d      	ble.n	800821c <_printf_float+0x1c0>
 8008200:	6121      	str	r1, [r4, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <_printf_float+0x1b0>
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	07d2      	lsls	r2, r2, #31
 800820a:	d502      	bpl.n	8008212 <_printf_float+0x1b6>
 800820c:	3301      	adds	r3, #1
 800820e:	1859      	adds	r1, r3, r1
 8008210:	6121      	str	r1, [r4, #16]
 8008212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008214:	65a3      	str	r3, [r4, #88]	; 0x58
 8008216:	2300      	movs	r3, #0
 8008218:	930a      	str	r3, [sp, #40]	; 0x28
 800821a:	e7d9      	b.n	80081d0 <_printf_float+0x174>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d103      	bne.n	8008228 <_printf_float+0x1cc>
 8008220:	2201      	movs	r2, #1
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	4211      	tst	r1, r2
 8008226:	d000      	beq.n	800822a <_printf_float+0x1ce>
 8008228:	1c9a      	adds	r2, r3, #2
 800822a:	6122      	str	r2, [r4, #16]
 800822c:	e7f1      	b.n	8008212 <_printf_float+0x1b6>
 800822e:	2367      	movs	r3, #103	; 0x67
 8008230:	001e      	movs	r6, r3
 8008232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008236:	4293      	cmp	r3, r2
 8008238:	db06      	blt.n	8008248 <_printf_float+0x1ec>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	07d2      	lsls	r2, r2, #31
 8008240:	d5e7      	bpl.n	8008212 <_printf_float+0x1b6>
 8008242:	3301      	adds	r3, #1
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	e7e4      	b.n	8008212 <_printf_float+0x1b6>
 8008248:	2101      	movs	r1, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	dc01      	bgt.n	8008252 <_printf_float+0x1f6>
 800824e:	1849      	adds	r1, r1, r1
 8008250:	1ac9      	subs	r1, r1, r3
 8008252:	1852      	adds	r2, r2, r1
 8008254:	e7e9      	b.n	800822a <_printf_float+0x1ce>
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	0553      	lsls	r3, r2, #21
 800825a:	d408      	bmi.n	800826e <_printf_float+0x212>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	002a      	movs	r2, r5
 8008260:	0038      	movs	r0, r7
 8008262:	9908      	ldr	r1, [sp, #32]
 8008264:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008266:	47a8      	blx	r5
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d129      	bne.n	80082c0 <_printf_float+0x264>
 800826c:	e754      	b.n	8008118 <_printf_float+0xbc>
 800826e:	2e65      	cmp	r6, #101	; 0x65
 8008270:	d800      	bhi.n	8008274 <_printf_float+0x218>
 8008272:	e0ec      	b.n	800844e <_printf_float+0x3f2>
 8008274:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008276:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	f7f8 f8e6 	bl	800044c <__aeabi_dcmpeq>
 8008280:	2800      	cmp	r0, #0
 8008282:	d034      	beq.n	80082ee <_printf_float+0x292>
 8008284:	2301      	movs	r3, #1
 8008286:	0038      	movs	r0, r7
 8008288:	4a37      	ldr	r2, [pc, #220]	; (8008368 <_printf_float+0x30c>)
 800828a:	9908      	ldr	r1, [sp, #32]
 800828c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800828e:	47a8      	blx	r5
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d100      	bne.n	8008296 <_printf_float+0x23a>
 8008294:	e740      	b.n	8008118 <_printf_float+0xbc>
 8008296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800829a:	4293      	cmp	r3, r2
 800829c:	db02      	blt.n	80082a4 <_printf_float+0x248>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	07db      	lsls	r3, r3, #31
 80082a2:	d50d      	bpl.n	80082c0 <_printf_float+0x264>
 80082a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082a6:	0038      	movs	r0, r7
 80082a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ac:	9908      	ldr	r1, [sp, #32]
 80082ae:	47a8      	blx	r5
 80082b0:	2500      	movs	r5, #0
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d100      	bne.n	80082b8 <_printf_float+0x25c>
 80082b6:	e72f      	b.n	8008118 <_printf_float+0xbc>
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	3b01      	subs	r3, #1
 80082bc:	42ab      	cmp	r3, r5
 80082be:	dc0a      	bgt.n	80082d6 <_printf_float+0x27a>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	079b      	lsls	r3, r3, #30
 80082c4:	d500      	bpl.n	80082c8 <_printf_float+0x26c>
 80082c6:	e114      	b.n	80084f2 <_printf_float+0x496>
 80082c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082ca:	68e0      	ldr	r0, [r4, #12]
 80082cc:	4298      	cmp	r0, r3
 80082ce:	db00      	blt.n	80082d2 <_printf_float+0x276>
 80082d0:	e724      	b.n	800811c <_printf_float+0xc0>
 80082d2:	0018      	movs	r0, r3
 80082d4:	e722      	b.n	800811c <_printf_float+0xc0>
 80082d6:	0022      	movs	r2, r4
 80082d8:	2301      	movs	r3, #1
 80082da:	0038      	movs	r0, r7
 80082dc:	9908      	ldr	r1, [sp, #32]
 80082de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082e0:	321a      	adds	r2, #26
 80082e2:	47b0      	blx	r6
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d100      	bne.n	80082ea <_printf_float+0x28e>
 80082e8:	e716      	b.n	8008118 <_printf_float+0xbc>
 80082ea:	3501      	adds	r5, #1
 80082ec:	e7e4      	b.n	80082b8 <_printf_float+0x25c>
 80082ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dc3b      	bgt.n	800836c <_printf_float+0x310>
 80082f4:	2301      	movs	r3, #1
 80082f6:	0038      	movs	r0, r7
 80082f8:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <_printf_float+0x30c>)
 80082fa:	9908      	ldr	r1, [sp, #32]
 80082fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082fe:	47b0      	blx	r6
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d100      	bne.n	8008306 <_printf_float+0x2aa>
 8008304:	e708      	b.n	8008118 <_printf_float+0xbc>
 8008306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800830a:	4313      	orrs	r3, r2
 800830c:	d102      	bne.n	8008314 <_printf_float+0x2b8>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	07db      	lsls	r3, r3, #31
 8008312:	d5d5      	bpl.n	80082c0 <_printf_float+0x264>
 8008314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008316:	0038      	movs	r0, r7
 8008318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800831a:	9908      	ldr	r1, [sp, #32]
 800831c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800831e:	47b0      	blx	r6
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d100      	bne.n	8008326 <_printf_float+0x2ca>
 8008324:	e6f8      	b.n	8008118 <_printf_float+0xbc>
 8008326:	2300      	movs	r3, #0
 8008328:	930a      	str	r3, [sp, #40]	; 0x28
 800832a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800832c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832e:	425b      	negs	r3, r3
 8008330:	4293      	cmp	r3, r2
 8008332:	dc01      	bgt.n	8008338 <_printf_float+0x2dc>
 8008334:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008336:	e792      	b.n	800825e <_printf_float+0x202>
 8008338:	0022      	movs	r2, r4
 800833a:	2301      	movs	r3, #1
 800833c:	0038      	movs	r0, r7
 800833e:	9908      	ldr	r1, [sp, #32]
 8008340:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008342:	321a      	adds	r2, #26
 8008344:	47b0      	blx	r6
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d100      	bne.n	800834c <_printf_float+0x2f0>
 800834a:	e6e5      	b.n	8008118 <_printf_float+0xbc>
 800834c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834e:	3301      	adds	r3, #1
 8008350:	e7ea      	b.n	8008328 <_printf_float+0x2cc>
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	7fefffff 	.word	0x7fefffff
 8008358:	0800c9d4 	.word	0x0800c9d4
 800835c:	0800c9d8 	.word	0x0800c9d8
 8008360:	0800c9dc 	.word	0x0800c9dc
 8008364:	0800c9e0 	.word	0x0800c9e0
 8008368:	0800c9e4 	.word	0x0800c9e4
 800836c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800836e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008370:	920a      	str	r2, [sp, #40]	; 0x28
 8008372:	429a      	cmp	r2, r3
 8008374:	dd00      	ble.n	8008378 <_printf_float+0x31c>
 8008376:	930a      	str	r3, [sp, #40]	; 0x28
 8008378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc3d      	bgt.n	80083fa <_printf_float+0x39e>
 800837e:	2300      	movs	r3, #0
 8008380:	930e      	str	r3, [sp, #56]	; 0x38
 8008382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008384:	43db      	mvns	r3, r3
 8008386:	17db      	asrs	r3, r3, #31
 8008388:	930f      	str	r3, [sp, #60]	; 0x3c
 800838a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800838c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800838e:	930c      	str	r3, [sp, #48]	; 0x30
 8008390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008392:	4013      	ands	r3, r2
 8008394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800839a:	4293      	cmp	r3, r2
 800839c:	dc36      	bgt.n	800840c <_printf_float+0x3b0>
 800839e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083a2:	4293      	cmp	r3, r2
 80083a4:	db40      	blt.n	8008428 <_printf_float+0x3cc>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	07db      	lsls	r3, r3, #31
 80083aa:	d43d      	bmi.n	8008428 <_printf_float+0x3cc>
 80083ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	1a52      	subs	r2, r2, r1
 80083b6:	920a      	str	r2, [sp, #40]	; 0x28
 80083b8:	429a      	cmp	r2, r3
 80083ba:	dd00      	ble.n	80083be <_printf_float+0x362>
 80083bc:	930a      	str	r3, [sp, #40]	; 0x28
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dc3a      	bgt.n	800843a <_printf_float+0x3de>
 80083c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c6:	2500      	movs	r5, #0
 80083c8:	43db      	mvns	r3, r3
 80083ca:	17db      	asrs	r3, r3, #31
 80083cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80083ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083d8:	400a      	ands	r2, r1
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	42ab      	cmp	r3, r5
 80083de:	dc00      	bgt.n	80083e2 <_printf_float+0x386>
 80083e0:	e76e      	b.n	80082c0 <_printf_float+0x264>
 80083e2:	0022      	movs	r2, r4
 80083e4:	2301      	movs	r3, #1
 80083e6:	0038      	movs	r0, r7
 80083e8:	9908      	ldr	r1, [sp, #32]
 80083ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083ec:	321a      	adds	r2, #26
 80083ee:	47b0      	blx	r6
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d100      	bne.n	80083f6 <_printf_float+0x39a>
 80083f4:	e690      	b.n	8008118 <_printf_float+0xbc>
 80083f6:	3501      	adds	r5, #1
 80083f8:	e7e9      	b.n	80083ce <_printf_float+0x372>
 80083fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083fc:	002a      	movs	r2, r5
 80083fe:	0038      	movs	r0, r7
 8008400:	9908      	ldr	r1, [sp, #32]
 8008402:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008404:	47b0      	blx	r6
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d1b9      	bne.n	800837e <_printf_float+0x322>
 800840a:	e685      	b.n	8008118 <_printf_float+0xbc>
 800840c:	0022      	movs	r2, r4
 800840e:	2301      	movs	r3, #1
 8008410:	0038      	movs	r0, r7
 8008412:	9908      	ldr	r1, [sp, #32]
 8008414:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008416:	321a      	adds	r2, #26
 8008418:	47b0      	blx	r6
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d100      	bne.n	8008420 <_printf_float+0x3c4>
 800841e:	e67b      	b.n	8008118 <_printf_float+0xbc>
 8008420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008422:	3301      	adds	r3, #1
 8008424:	930e      	str	r3, [sp, #56]	; 0x38
 8008426:	e7b0      	b.n	800838a <_printf_float+0x32e>
 8008428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800842a:	0038      	movs	r0, r7
 800842c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800842e:	9908      	ldr	r1, [sp, #32]
 8008430:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008432:	47b0      	blx	r6
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d1b9      	bne.n	80083ac <_printf_float+0x350>
 8008438:	e66e      	b.n	8008118 <_printf_float+0xbc>
 800843a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800843c:	0038      	movs	r0, r7
 800843e:	18ea      	adds	r2, r5, r3
 8008440:	9908      	ldr	r1, [sp, #32]
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008444:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008446:	47a8      	blx	r5
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d1bb      	bne.n	80083c4 <_printf_float+0x368>
 800844c:	e664      	b.n	8008118 <_printf_float+0xbc>
 800844e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008450:	2b01      	cmp	r3, #1
 8008452:	dc02      	bgt.n	800845a <_printf_float+0x3fe>
 8008454:	2301      	movs	r3, #1
 8008456:	421a      	tst	r2, r3
 8008458:	d038      	beq.n	80084cc <_printf_float+0x470>
 800845a:	2301      	movs	r3, #1
 800845c:	002a      	movs	r2, r5
 800845e:	0038      	movs	r0, r7
 8008460:	9908      	ldr	r1, [sp, #32]
 8008462:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008464:	47b0      	blx	r6
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	d100      	bne.n	800846c <_printf_float+0x410>
 800846a:	e655      	b.n	8008118 <_printf_float+0xbc>
 800846c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800846e:	0038      	movs	r0, r7
 8008470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008472:	9908      	ldr	r1, [sp, #32]
 8008474:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008476:	47b0      	blx	r6
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d100      	bne.n	800847e <_printf_float+0x422>
 800847c:	e64c      	b.n	8008118 <_printf_float+0xbc>
 800847e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008480:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008482:	2200      	movs	r2, #0
 8008484:	2300      	movs	r3, #0
 8008486:	f7f7 ffe1 	bl	800044c <__aeabi_dcmpeq>
 800848a:	2800      	cmp	r0, #0
 800848c:	d11c      	bne.n	80084c8 <_printf_float+0x46c>
 800848e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008490:	1c6a      	adds	r2, r5, #1
 8008492:	3b01      	subs	r3, #1
 8008494:	0038      	movs	r0, r7
 8008496:	9908      	ldr	r1, [sp, #32]
 8008498:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800849a:	47a8      	blx	r5
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d10f      	bne.n	80084c0 <_printf_float+0x464>
 80084a0:	e63a      	b.n	8008118 <_printf_float+0xbc>
 80084a2:	0022      	movs	r2, r4
 80084a4:	2301      	movs	r3, #1
 80084a6:	0038      	movs	r0, r7
 80084a8:	9908      	ldr	r1, [sp, #32]
 80084aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084ac:	321a      	adds	r2, #26
 80084ae:	47b0      	blx	r6
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d100      	bne.n	80084b6 <_printf_float+0x45a>
 80084b4:	e630      	b.n	8008118 <_printf_float+0xbc>
 80084b6:	3501      	adds	r5, #1
 80084b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084ba:	3b01      	subs	r3, #1
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dcf0      	bgt.n	80084a2 <_printf_float+0x446>
 80084c0:	0022      	movs	r2, r4
 80084c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c4:	3250      	adds	r2, #80	; 0x50
 80084c6:	e6cb      	b.n	8008260 <_printf_float+0x204>
 80084c8:	2500      	movs	r5, #0
 80084ca:	e7f5      	b.n	80084b8 <_printf_float+0x45c>
 80084cc:	002a      	movs	r2, r5
 80084ce:	e7e1      	b.n	8008494 <_printf_float+0x438>
 80084d0:	0022      	movs	r2, r4
 80084d2:	2301      	movs	r3, #1
 80084d4:	0038      	movs	r0, r7
 80084d6:	9908      	ldr	r1, [sp, #32]
 80084d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084da:	3219      	adds	r2, #25
 80084dc:	47b0      	blx	r6
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d100      	bne.n	80084e4 <_printf_float+0x488>
 80084e2:	e619      	b.n	8008118 <_printf_float+0xbc>
 80084e4:	3501      	adds	r5, #1
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dcef      	bgt.n	80084d0 <_printf_float+0x474>
 80084f0:	e6ea      	b.n	80082c8 <_printf_float+0x26c>
 80084f2:	2500      	movs	r5, #0
 80084f4:	e7f7      	b.n	80084e6 <_printf_float+0x48a>
 80084f6:	46c0      	nop			; (mov r8, r8)

080084f8 <_printf_common>:
 80084f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fa:	0015      	movs	r5, r2
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	688a      	ldr	r2, [r1, #8]
 8008500:	690b      	ldr	r3, [r1, #16]
 8008502:	000c      	movs	r4, r1
 8008504:	9000      	str	r0, [sp, #0]
 8008506:	4293      	cmp	r3, r2
 8008508:	da00      	bge.n	800850c <_printf_common+0x14>
 800850a:	0013      	movs	r3, r2
 800850c:	0022      	movs	r2, r4
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	3243      	adds	r2, #67	; 0x43
 8008512:	7812      	ldrb	r2, [r2, #0]
 8008514:	2a00      	cmp	r2, #0
 8008516:	d001      	beq.n	800851c <_printf_common+0x24>
 8008518:	3301      	adds	r3, #1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	069b      	lsls	r3, r3, #26
 8008520:	d502      	bpl.n	8008528 <_printf_common+0x30>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	3302      	adds	r3, #2
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	2306      	movs	r3, #6
 800852c:	0017      	movs	r7, r2
 800852e:	401f      	ands	r7, r3
 8008530:	421a      	tst	r2, r3
 8008532:	d027      	beq.n	8008584 <_printf_common+0x8c>
 8008534:	0023      	movs	r3, r4
 8008536:	3343      	adds	r3, #67	; 0x43
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	1e5a      	subs	r2, r3, #1
 800853c:	4193      	sbcs	r3, r2
 800853e:	6822      	ldr	r2, [r4, #0]
 8008540:	0692      	lsls	r2, r2, #26
 8008542:	d430      	bmi.n	80085a6 <_printf_common+0xae>
 8008544:	0022      	movs	r2, r4
 8008546:	9901      	ldr	r1, [sp, #4]
 8008548:	9800      	ldr	r0, [sp, #0]
 800854a:	9e08      	ldr	r6, [sp, #32]
 800854c:	3243      	adds	r2, #67	; 0x43
 800854e:	47b0      	blx	r6
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d025      	beq.n	80085a0 <_printf_common+0xa8>
 8008554:	2306      	movs	r3, #6
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	682a      	ldr	r2, [r5, #0]
 800855a:	68e1      	ldr	r1, [r4, #12]
 800855c:	2500      	movs	r5, #0
 800855e:	4003      	ands	r3, r0
 8008560:	2b04      	cmp	r3, #4
 8008562:	d103      	bne.n	800856c <_printf_common+0x74>
 8008564:	1a8d      	subs	r5, r1, r2
 8008566:	43eb      	mvns	r3, r5
 8008568:	17db      	asrs	r3, r3, #31
 800856a:	401d      	ands	r5, r3
 800856c:	68a3      	ldr	r3, [r4, #8]
 800856e:	6922      	ldr	r2, [r4, #16]
 8008570:	4293      	cmp	r3, r2
 8008572:	dd01      	ble.n	8008578 <_printf_common+0x80>
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	18ed      	adds	r5, r5, r3
 8008578:	2700      	movs	r7, #0
 800857a:	42bd      	cmp	r5, r7
 800857c:	d120      	bne.n	80085c0 <_printf_common+0xc8>
 800857e:	2000      	movs	r0, #0
 8008580:	e010      	b.n	80085a4 <_printf_common+0xac>
 8008582:	3701      	adds	r7, #1
 8008584:	68e3      	ldr	r3, [r4, #12]
 8008586:	682a      	ldr	r2, [r5, #0]
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	42bb      	cmp	r3, r7
 800858c:	ddd2      	ble.n	8008534 <_printf_common+0x3c>
 800858e:	0022      	movs	r2, r4
 8008590:	2301      	movs	r3, #1
 8008592:	9901      	ldr	r1, [sp, #4]
 8008594:	9800      	ldr	r0, [sp, #0]
 8008596:	9e08      	ldr	r6, [sp, #32]
 8008598:	3219      	adds	r2, #25
 800859a:	47b0      	blx	r6
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d1f0      	bne.n	8008582 <_printf_common+0x8a>
 80085a0:	2001      	movs	r0, #1
 80085a2:	4240      	negs	r0, r0
 80085a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085a6:	2030      	movs	r0, #48	; 0x30
 80085a8:	18e1      	adds	r1, r4, r3
 80085aa:	3143      	adds	r1, #67	; 0x43
 80085ac:	7008      	strb	r0, [r1, #0]
 80085ae:	0021      	movs	r1, r4
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	3145      	adds	r1, #69	; 0x45
 80085b4:	7809      	ldrb	r1, [r1, #0]
 80085b6:	18a2      	adds	r2, r4, r2
 80085b8:	3243      	adds	r2, #67	; 0x43
 80085ba:	3302      	adds	r3, #2
 80085bc:	7011      	strb	r1, [r2, #0]
 80085be:	e7c1      	b.n	8008544 <_printf_common+0x4c>
 80085c0:	0022      	movs	r2, r4
 80085c2:	2301      	movs	r3, #1
 80085c4:	9901      	ldr	r1, [sp, #4]
 80085c6:	9800      	ldr	r0, [sp, #0]
 80085c8:	9e08      	ldr	r6, [sp, #32]
 80085ca:	321a      	adds	r2, #26
 80085cc:	47b0      	blx	r6
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	d0e6      	beq.n	80085a0 <_printf_common+0xa8>
 80085d2:	3701      	adds	r7, #1
 80085d4:	e7d1      	b.n	800857a <_printf_common+0x82>
	...

080085d8 <_printf_i>:
 80085d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085da:	b08b      	sub	sp, #44	; 0x2c
 80085dc:	9206      	str	r2, [sp, #24]
 80085de:	000a      	movs	r2, r1
 80085e0:	3243      	adds	r2, #67	; 0x43
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	9005      	str	r0, [sp, #20]
 80085e6:	9204      	str	r2, [sp, #16]
 80085e8:	7e0a      	ldrb	r2, [r1, #24]
 80085ea:	000c      	movs	r4, r1
 80085ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ee:	2a78      	cmp	r2, #120	; 0x78
 80085f0:	d806      	bhi.n	8008600 <_printf_i+0x28>
 80085f2:	2a62      	cmp	r2, #98	; 0x62
 80085f4:	d808      	bhi.n	8008608 <_printf_i+0x30>
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	d100      	bne.n	80085fc <_printf_i+0x24>
 80085fa:	e0c0      	b.n	800877e <_printf_i+0x1a6>
 80085fc:	2a58      	cmp	r2, #88	; 0x58
 80085fe:	d052      	beq.n	80086a6 <_printf_i+0xce>
 8008600:	0026      	movs	r6, r4
 8008602:	3642      	adds	r6, #66	; 0x42
 8008604:	7032      	strb	r2, [r6, #0]
 8008606:	e022      	b.n	800864e <_printf_i+0x76>
 8008608:	0010      	movs	r0, r2
 800860a:	3863      	subs	r0, #99	; 0x63
 800860c:	2815      	cmp	r0, #21
 800860e:	d8f7      	bhi.n	8008600 <_printf_i+0x28>
 8008610:	f7f7 fd8c 	bl	800012c <__gnu_thumb1_case_shi>
 8008614:	001f0016 	.word	0x001f0016
 8008618:	fff6fff6 	.word	0xfff6fff6
 800861c:	fff6fff6 	.word	0xfff6fff6
 8008620:	fff6001f 	.word	0xfff6001f
 8008624:	fff6fff6 	.word	0xfff6fff6
 8008628:	00a8fff6 	.word	0x00a8fff6
 800862c:	009a0036 	.word	0x009a0036
 8008630:	fff6fff6 	.word	0xfff6fff6
 8008634:	fff600b9 	.word	0xfff600b9
 8008638:	fff60036 	.word	0xfff60036
 800863c:	009efff6 	.word	0x009efff6
 8008640:	0026      	movs	r6, r4
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	3642      	adds	r6, #66	; 0x42
 8008646:	1d11      	adds	r1, r2, #4
 8008648:	6019      	str	r1, [r3, #0]
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	7033      	strb	r3, [r6, #0]
 800864e:	2301      	movs	r3, #1
 8008650:	e0a7      	b.n	80087a2 <_printf_i+0x1ca>
 8008652:	6808      	ldr	r0, [r1, #0]
 8008654:	6819      	ldr	r1, [r3, #0]
 8008656:	1d0a      	adds	r2, r1, #4
 8008658:	0605      	lsls	r5, r0, #24
 800865a:	d50b      	bpl.n	8008674 <_printf_i+0x9c>
 800865c:	680d      	ldr	r5, [r1, #0]
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	2d00      	cmp	r5, #0
 8008662:	da03      	bge.n	800866c <_printf_i+0x94>
 8008664:	232d      	movs	r3, #45	; 0x2d
 8008666:	9a04      	ldr	r2, [sp, #16]
 8008668:	426d      	negs	r5, r5
 800866a:	7013      	strb	r3, [r2, #0]
 800866c:	4b61      	ldr	r3, [pc, #388]	; (80087f4 <_printf_i+0x21c>)
 800866e:	270a      	movs	r7, #10
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	e032      	b.n	80086da <_printf_i+0x102>
 8008674:	680d      	ldr	r5, [r1, #0]
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	0641      	lsls	r1, r0, #25
 800867a:	d5f1      	bpl.n	8008660 <_printf_i+0x88>
 800867c:	b22d      	sxth	r5, r5
 800867e:	e7ef      	b.n	8008660 <_printf_i+0x88>
 8008680:	680d      	ldr	r5, [r1, #0]
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	1d08      	adds	r0, r1, #4
 8008686:	6018      	str	r0, [r3, #0]
 8008688:	062e      	lsls	r6, r5, #24
 800868a:	d501      	bpl.n	8008690 <_printf_i+0xb8>
 800868c:	680d      	ldr	r5, [r1, #0]
 800868e:	e003      	b.n	8008698 <_printf_i+0xc0>
 8008690:	066d      	lsls	r5, r5, #25
 8008692:	d5fb      	bpl.n	800868c <_printf_i+0xb4>
 8008694:	680d      	ldr	r5, [r1, #0]
 8008696:	b2ad      	uxth	r5, r5
 8008698:	4b56      	ldr	r3, [pc, #344]	; (80087f4 <_printf_i+0x21c>)
 800869a:	270a      	movs	r7, #10
 800869c:	9303      	str	r3, [sp, #12]
 800869e:	2a6f      	cmp	r2, #111	; 0x6f
 80086a0:	d117      	bne.n	80086d2 <_printf_i+0xfa>
 80086a2:	2708      	movs	r7, #8
 80086a4:	e015      	b.n	80086d2 <_printf_i+0xfa>
 80086a6:	3145      	adds	r1, #69	; 0x45
 80086a8:	700a      	strb	r2, [r1, #0]
 80086aa:	4a52      	ldr	r2, [pc, #328]	; (80087f4 <_printf_i+0x21c>)
 80086ac:	9203      	str	r2, [sp, #12]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	6821      	ldr	r1, [r4, #0]
 80086b2:	ca20      	ldmia	r2!, {r5}
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	0608      	lsls	r0, r1, #24
 80086b8:	d550      	bpl.n	800875c <_printf_i+0x184>
 80086ba:	07cb      	lsls	r3, r1, #31
 80086bc:	d502      	bpl.n	80086c4 <_printf_i+0xec>
 80086be:	2320      	movs	r3, #32
 80086c0:	4319      	orrs	r1, r3
 80086c2:	6021      	str	r1, [r4, #0]
 80086c4:	2710      	movs	r7, #16
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	d103      	bne.n	80086d2 <_printf_i+0xfa>
 80086ca:	2320      	movs	r3, #32
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	439a      	bics	r2, r3
 80086d0:	6022      	str	r2, [r4, #0]
 80086d2:	0023      	movs	r3, r4
 80086d4:	2200      	movs	r2, #0
 80086d6:	3343      	adds	r3, #67	; 0x43
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	6863      	ldr	r3, [r4, #4]
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db03      	blt.n	80086ea <_printf_i+0x112>
 80086e2:	2204      	movs	r2, #4
 80086e4:	6821      	ldr	r1, [r4, #0]
 80086e6:	4391      	bics	r1, r2
 80086e8:	6021      	str	r1, [r4, #0]
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	d102      	bne.n	80086f4 <_printf_i+0x11c>
 80086ee:	9e04      	ldr	r6, [sp, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00c      	beq.n	800870e <_printf_i+0x136>
 80086f4:	9e04      	ldr	r6, [sp, #16]
 80086f6:	0028      	movs	r0, r5
 80086f8:	0039      	movs	r1, r7
 80086fa:	f7f7 fda7 	bl	800024c <__aeabi_uidivmod>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	3e01      	subs	r6, #1
 8008702:	5c5b      	ldrb	r3, [r3, r1]
 8008704:	7033      	strb	r3, [r6, #0]
 8008706:	002b      	movs	r3, r5
 8008708:	0005      	movs	r5, r0
 800870a:	429f      	cmp	r7, r3
 800870c:	d9f3      	bls.n	80086f6 <_printf_i+0x11e>
 800870e:	2f08      	cmp	r7, #8
 8008710:	d109      	bne.n	8008726 <_printf_i+0x14e>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	d506      	bpl.n	8008726 <_printf_i+0x14e>
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	6922      	ldr	r2, [r4, #16]
 800871c:	4293      	cmp	r3, r2
 800871e:	dc02      	bgt.n	8008726 <_printf_i+0x14e>
 8008720:	2330      	movs	r3, #48	; 0x30
 8008722:	3e01      	subs	r6, #1
 8008724:	7033      	strb	r3, [r6, #0]
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	1b9b      	subs	r3, r3, r6
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	0021      	movs	r1, r4
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	9805      	ldr	r0, [sp, #20]
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	aa09      	add	r2, sp, #36	; 0x24
 8008738:	f7ff fede 	bl	80084f8 <_printf_common>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d135      	bne.n	80087ac <_printf_i+0x1d4>
 8008740:	2001      	movs	r0, #1
 8008742:	4240      	negs	r0, r0
 8008744:	b00b      	add	sp, #44	; 0x2c
 8008746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008748:	2220      	movs	r2, #32
 800874a:	6809      	ldr	r1, [r1, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	0022      	movs	r2, r4
 8008752:	2178      	movs	r1, #120	; 0x78
 8008754:	3245      	adds	r2, #69	; 0x45
 8008756:	7011      	strb	r1, [r2, #0]
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <_printf_i+0x220>)
 800875a:	e7a7      	b.n	80086ac <_printf_i+0xd4>
 800875c:	0648      	lsls	r0, r1, #25
 800875e:	d5ac      	bpl.n	80086ba <_printf_i+0xe2>
 8008760:	b2ad      	uxth	r5, r5
 8008762:	e7aa      	b.n	80086ba <_printf_i+0xe2>
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	680d      	ldr	r5, [r1, #0]
 8008768:	1d10      	adds	r0, r2, #4
 800876a:	6949      	ldr	r1, [r1, #20]
 800876c:	6018      	str	r0, [r3, #0]
 800876e:	6813      	ldr	r3, [r2, #0]
 8008770:	062e      	lsls	r6, r5, #24
 8008772:	d501      	bpl.n	8008778 <_printf_i+0x1a0>
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	e002      	b.n	800877e <_printf_i+0x1a6>
 8008778:	066d      	lsls	r5, r5, #25
 800877a:	d5fb      	bpl.n	8008774 <_printf_i+0x19c>
 800877c:	8019      	strh	r1, [r3, #0]
 800877e:	2300      	movs	r3, #0
 8008780:	9e04      	ldr	r6, [sp, #16]
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	e7d2      	b.n	800872c <_printf_i+0x154>
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	1d11      	adds	r1, r2, #4
 800878a:	6019      	str	r1, [r3, #0]
 800878c:	6816      	ldr	r6, [r2, #0]
 800878e:	2100      	movs	r1, #0
 8008790:	0030      	movs	r0, r6
 8008792:	6862      	ldr	r2, [r4, #4]
 8008794:	f002 fb70 	bl	800ae78 <memchr>
 8008798:	2800      	cmp	r0, #0
 800879a:	d001      	beq.n	80087a0 <_printf_i+0x1c8>
 800879c:	1b80      	subs	r0, r0, r6
 800879e:	6060      	str	r0, [r4, #4]
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	6123      	str	r3, [r4, #16]
 80087a4:	2300      	movs	r3, #0
 80087a6:	9a04      	ldr	r2, [sp, #16]
 80087a8:	7013      	strb	r3, [r2, #0]
 80087aa:	e7bf      	b.n	800872c <_printf_i+0x154>
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	0032      	movs	r2, r6
 80087b0:	9906      	ldr	r1, [sp, #24]
 80087b2:	9805      	ldr	r0, [sp, #20]
 80087b4:	9d07      	ldr	r5, [sp, #28]
 80087b6:	47a8      	blx	r5
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d0c1      	beq.n	8008740 <_printf_i+0x168>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	079b      	lsls	r3, r3, #30
 80087c0:	d415      	bmi.n	80087ee <_printf_i+0x216>
 80087c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c4:	68e0      	ldr	r0, [r4, #12]
 80087c6:	4298      	cmp	r0, r3
 80087c8:	dabc      	bge.n	8008744 <_printf_i+0x16c>
 80087ca:	0018      	movs	r0, r3
 80087cc:	e7ba      	b.n	8008744 <_printf_i+0x16c>
 80087ce:	0022      	movs	r2, r4
 80087d0:	2301      	movs	r3, #1
 80087d2:	9906      	ldr	r1, [sp, #24]
 80087d4:	9805      	ldr	r0, [sp, #20]
 80087d6:	9e07      	ldr	r6, [sp, #28]
 80087d8:	3219      	adds	r2, #25
 80087da:	47b0      	blx	r6
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d0af      	beq.n	8008740 <_printf_i+0x168>
 80087e0:	3501      	adds	r5, #1
 80087e2:	68e3      	ldr	r3, [r4, #12]
 80087e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	dcf0      	bgt.n	80087ce <_printf_i+0x1f6>
 80087ec:	e7e9      	b.n	80087c2 <_printf_i+0x1ea>
 80087ee:	2500      	movs	r5, #0
 80087f0:	e7f7      	b.n	80087e2 <_printf_i+0x20a>
 80087f2:	46c0      	nop			; (mov r8, r8)
 80087f4:	0800c9e6 	.word	0x0800c9e6
 80087f8:	0800c9f7 	.word	0x0800c9f7

080087fc <_scanf_float>:
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	b08b      	sub	sp, #44	; 0x2c
 8008800:	0015      	movs	r5, r2
 8008802:	9001      	str	r0, [sp, #4]
 8008804:	22ae      	movs	r2, #174	; 0xae
 8008806:	2000      	movs	r0, #0
 8008808:	9306      	str	r3, [sp, #24]
 800880a:	688b      	ldr	r3, [r1, #8]
 800880c:	000e      	movs	r6, r1
 800880e:	1e59      	subs	r1, r3, #1
 8008810:	0052      	lsls	r2, r2, #1
 8008812:	9005      	str	r0, [sp, #20]
 8008814:	4291      	cmp	r1, r2
 8008816:	d905      	bls.n	8008824 <_scanf_float+0x28>
 8008818:	3b5e      	subs	r3, #94	; 0x5e
 800881a:	3bff      	subs	r3, #255	; 0xff
 800881c:	9305      	str	r3, [sp, #20]
 800881e:	235e      	movs	r3, #94	; 0x5e
 8008820:	33ff      	adds	r3, #255	; 0xff
 8008822:	60b3      	str	r3, [r6, #8]
 8008824:	23f0      	movs	r3, #240	; 0xf0
 8008826:	6832      	ldr	r2, [r6, #0]
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	4313      	orrs	r3, r2
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	0033      	movs	r3, r6
 8008830:	2400      	movs	r4, #0
 8008832:	331c      	adds	r3, #28
 8008834:	001f      	movs	r7, r3
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	9402      	str	r4, [sp, #8]
 800883a:	9408      	str	r4, [sp, #32]
 800883c:	9407      	str	r4, [sp, #28]
 800883e:	9400      	str	r4, [sp, #0]
 8008840:	9404      	str	r4, [sp, #16]
 8008842:	68b2      	ldr	r2, [r6, #8]
 8008844:	2a00      	cmp	r2, #0
 8008846:	d00a      	beq.n	800885e <_scanf_float+0x62>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b4e      	cmp	r3, #78	; 0x4e
 800884e:	d844      	bhi.n	80088da <_scanf_float+0xde>
 8008850:	0018      	movs	r0, r3
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	d82c      	bhi.n	80088b0 <_scanf_float+0xb4>
 8008856:	382b      	subs	r0, #43	; 0x2b
 8008858:	b2c1      	uxtb	r1, r0
 800885a:	290e      	cmp	r1, #14
 800885c:	d92a      	bls.n	80088b4 <_scanf_float+0xb8>
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <_scanf_float+0x70>
 8008864:	6832      	ldr	r2, [r6, #0]
 8008866:	4ba4      	ldr	r3, [pc, #656]	; (8008af8 <_scanf_float+0x2fc>)
 8008868:	4013      	ands	r3, r2
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	3b01      	subs	r3, #1
 8008870:	2b01      	cmp	r3, #1
 8008872:	d900      	bls.n	8008876 <_scanf_float+0x7a>
 8008874:	e0f9      	b.n	8008a6a <_scanf_float+0x26e>
 8008876:	24be      	movs	r4, #190	; 0xbe
 8008878:	0064      	lsls	r4, r4, #1
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	429f      	cmp	r7, r3
 800887e:	d900      	bls.n	8008882 <_scanf_float+0x86>
 8008880:	e0e9      	b.n	8008a56 <_scanf_float+0x25a>
 8008882:	2301      	movs	r3, #1
 8008884:	9302      	str	r3, [sp, #8]
 8008886:	e185      	b.n	8008b94 <_scanf_float+0x398>
 8008888:	0018      	movs	r0, r3
 800888a:	3861      	subs	r0, #97	; 0x61
 800888c:	280d      	cmp	r0, #13
 800888e:	d8e6      	bhi.n	800885e <_scanf_float+0x62>
 8008890:	f7f7 fc4c 	bl	800012c <__gnu_thumb1_case_shi>
 8008894:	ffe50083 	.word	0xffe50083
 8008898:	ffe5ffe5 	.word	0xffe5ffe5
 800889c:	00a200b6 	.word	0x00a200b6
 80088a0:	ffe5ffe5 	.word	0xffe5ffe5
 80088a4:	ffe50089 	.word	0xffe50089
 80088a8:	ffe5ffe5 	.word	0xffe5ffe5
 80088ac:	0065ffe5 	.word	0x0065ffe5
 80088b0:	3841      	subs	r0, #65	; 0x41
 80088b2:	e7eb      	b.n	800888c <_scanf_float+0x90>
 80088b4:	280e      	cmp	r0, #14
 80088b6:	d8d2      	bhi.n	800885e <_scanf_float+0x62>
 80088b8:	f7f7 fc38 	bl	800012c <__gnu_thumb1_case_shi>
 80088bc:	ffd1004b 	.word	0xffd1004b
 80088c0:	0098004b 	.word	0x0098004b
 80088c4:	0020ffd1 	.word	0x0020ffd1
 80088c8:	00400040 	.word	0x00400040
 80088cc:	00400040 	.word	0x00400040
 80088d0:	00400040 	.word	0x00400040
 80088d4:	00400040 	.word	0x00400040
 80088d8:	0040      	.short	0x0040
 80088da:	2b6e      	cmp	r3, #110	; 0x6e
 80088dc:	d809      	bhi.n	80088f2 <_scanf_float+0xf6>
 80088de:	2b60      	cmp	r3, #96	; 0x60
 80088e0:	d8d2      	bhi.n	8008888 <_scanf_float+0x8c>
 80088e2:	2b54      	cmp	r3, #84	; 0x54
 80088e4:	d07d      	beq.n	80089e2 <_scanf_float+0x1e6>
 80088e6:	2b59      	cmp	r3, #89	; 0x59
 80088e8:	d1b9      	bne.n	800885e <_scanf_float+0x62>
 80088ea:	2c07      	cmp	r4, #7
 80088ec:	d1b7      	bne.n	800885e <_scanf_float+0x62>
 80088ee:	2408      	movs	r4, #8
 80088f0:	e02c      	b.n	800894c <_scanf_float+0x150>
 80088f2:	2b74      	cmp	r3, #116	; 0x74
 80088f4:	d075      	beq.n	80089e2 <_scanf_float+0x1e6>
 80088f6:	2b79      	cmp	r3, #121	; 0x79
 80088f8:	d0f7      	beq.n	80088ea <_scanf_float+0xee>
 80088fa:	e7b0      	b.n	800885e <_scanf_float+0x62>
 80088fc:	6831      	ldr	r1, [r6, #0]
 80088fe:	05c8      	lsls	r0, r1, #23
 8008900:	d51c      	bpl.n	800893c <_scanf_float+0x140>
 8008902:	2380      	movs	r3, #128	; 0x80
 8008904:	4399      	bics	r1, r3
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	6031      	str	r1, [r6, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	9b05      	ldr	r3, [sp, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <_scanf_float+0x120>
 8008914:	3b01      	subs	r3, #1
 8008916:	3201      	adds	r2, #1
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	60b2      	str	r2, [r6, #8]
 800891c:	68b3      	ldr	r3, [r6, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	60b3      	str	r3, [r6, #8]
 8008922:	6933      	ldr	r3, [r6, #16]
 8008924:	3301      	adds	r3, #1
 8008926:	6133      	str	r3, [r6, #16]
 8008928:	686b      	ldr	r3, [r5, #4]
 800892a:	3b01      	subs	r3, #1
 800892c:	606b      	str	r3, [r5, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	dc00      	bgt.n	8008934 <_scanf_float+0x138>
 8008932:	e086      	b.n	8008a42 <_scanf_float+0x246>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	602b      	str	r3, [r5, #0]
 800893a:	e782      	b.n	8008842 <_scanf_float+0x46>
 800893c:	9a02      	ldr	r2, [sp, #8]
 800893e:	1912      	adds	r2, r2, r4
 8008940:	2a00      	cmp	r2, #0
 8008942:	d18c      	bne.n	800885e <_scanf_float+0x62>
 8008944:	4a6d      	ldr	r2, [pc, #436]	; (8008afc <_scanf_float+0x300>)
 8008946:	6831      	ldr	r1, [r6, #0]
 8008948:	400a      	ands	r2, r1
 800894a:	6032      	str	r2, [r6, #0]
 800894c:	703b      	strb	r3, [r7, #0]
 800894e:	3701      	adds	r7, #1
 8008950:	e7e4      	b.n	800891c <_scanf_float+0x120>
 8008952:	2180      	movs	r1, #128	; 0x80
 8008954:	6832      	ldr	r2, [r6, #0]
 8008956:	420a      	tst	r2, r1
 8008958:	d081      	beq.n	800885e <_scanf_float+0x62>
 800895a:	438a      	bics	r2, r1
 800895c:	e7f5      	b.n	800894a <_scanf_float+0x14e>
 800895e:	9a02      	ldr	r2, [sp, #8]
 8008960:	2a00      	cmp	r2, #0
 8008962:	d10f      	bne.n	8008984 <_scanf_float+0x188>
 8008964:	9a00      	ldr	r2, [sp, #0]
 8008966:	2a00      	cmp	r2, #0
 8008968:	d10f      	bne.n	800898a <_scanf_float+0x18e>
 800896a:	6832      	ldr	r2, [r6, #0]
 800896c:	21e0      	movs	r1, #224	; 0xe0
 800896e:	0010      	movs	r0, r2
 8008970:	00c9      	lsls	r1, r1, #3
 8008972:	4008      	ands	r0, r1
 8008974:	4288      	cmp	r0, r1
 8008976:	d108      	bne.n	800898a <_scanf_float+0x18e>
 8008978:	4961      	ldr	r1, [pc, #388]	; (8008b00 <_scanf_float+0x304>)
 800897a:	400a      	ands	r2, r1
 800897c:	6032      	str	r2, [r6, #0]
 800897e:	2201      	movs	r2, #1
 8008980:	9202      	str	r2, [sp, #8]
 8008982:	e7e3      	b.n	800894c <_scanf_float+0x150>
 8008984:	9a02      	ldr	r2, [sp, #8]
 8008986:	2a02      	cmp	r2, #2
 8008988:	d059      	beq.n	8008a3e <_scanf_float+0x242>
 800898a:	2c01      	cmp	r4, #1
 800898c:	d002      	beq.n	8008994 <_scanf_float+0x198>
 800898e:	2c04      	cmp	r4, #4
 8008990:	d000      	beq.n	8008994 <_scanf_float+0x198>
 8008992:	e764      	b.n	800885e <_scanf_float+0x62>
 8008994:	3401      	adds	r4, #1
 8008996:	b2e4      	uxtb	r4, r4
 8008998:	e7d8      	b.n	800894c <_scanf_float+0x150>
 800899a:	9a02      	ldr	r2, [sp, #8]
 800899c:	2a01      	cmp	r2, #1
 800899e:	d000      	beq.n	80089a2 <_scanf_float+0x1a6>
 80089a0:	e75d      	b.n	800885e <_scanf_float+0x62>
 80089a2:	2202      	movs	r2, #2
 80089a4:	e7ec      	b.n	8008980 <_scanf_float+0x184>
 80089a6:	2c00      	cmp	r4, #0
 80089a8:	d110      	bne.n	80089cc <_scanf_float+0x1d0>
 80089aa:	9a00      	ldr	r2, [sp, #0]
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d000      	beq.n	80089b2 <_scanf_float+0x1b6>
 80089b0:	e758      	b.n	8008864 <_scanf_float+0x68>
 80089b2:	6832      	ldr	r2, [r6, #0]
 80089b4:	21e0      	movs	r1, #224	; 0xe0
 80089b6:	0010      	movs	r0, r2
 80089b8:	00c9      	lsls	r1, r1, #3
 80089ba:	4008      	ands	r0, r1
 80089bc:	4288      	cmp	r0, r1
 80089be:	d000      	beq.n	80089c2 <_scanf_float+0x1c6>
 80089c0:	e754      	b.n	800886c <_scanf_float+0x70>
 80089c2:	494f      	ldr	r1, [pc, #316]	; (8008b00 <_scanf_float+0x304>)
 80089c4:	3401      	adds	r4, #1
 80089c6:	400a      	ands	r2, r1
 80089c8:	6032      	str	r2, [r6, #0]
 80089ca:	e7bf      	b.n	800894c <_scanf_float+0x150>
 80089cc:	21fd      	movs	r1, #253	; 0xfd
 80089ce:	1ee2      	subs	r2, r4, #3
 80089d0:	420a      	tst	r2, r1
 80089d2:	d000      	beq.n	80089d6 <_scanf_float+0x1da>
 80089d4:	e743      	b.n	800885e <_scanf_float+0x62>
 80089d6:	e7dd      	b.n	8008994 <_scanf_float+0x198>
 80089d8:	2c02      	cmp	r4, #2
 80089da:	d000      	beq.n	80089de <_scanf_float+0x1e2>
 80089dc:	e73f      	b.n	800885e <_scanf_float+0x62>
 80089de:	2403      	movs	r4, #3
 80089e0:	e7b4      	b.n	800894c <_scanf_float+0x150>
 80089e2:	2c06      	cmp	r4, #6
 80089e4:	d000      	beq.n	80089e8 <_scanf_float+0x1ec>
 80089e6:	e73a      	b.n	800885e <_scanf_float+0x62>
 80089e8:	2407      	movs	r4, #7
 80089ea:	e7af      	b.n	800894c <_scanf_float+0x150>
 80089ec:	6832      	ldr	r2, [r6, #0]
 80089ee:	0591      	lsls	r1, r2, #22
 80089f0:	d400      	bmi.n	80089f4 <_scanf_float+0x1f8>
 80089f2:	e734      	b.n	800885e <_scanf_float+0x62>
 80089f4:	4943      	ldr	r1, [pc, #268]	; (8008b04 <_scanf_float+0x308>)
 80089f6:	400a      	ands	r2, r1
 80089f8:	6032      	str	r2, [r6, #0]
 80089fa:	9a00      	ldr	r2, [sp, #0]
 80089fc:	9204      	str	r2, [sp, #16]
 80089fe:	e7a5      	b.n	800894c <_scanf_float+0x150>
 8008a00:	21a0      	movs	r1, #160	; 0xa0
 8008a02:	2080      	movs	r0, #128	; 0x80
 8008a04:	6832      	ldr	r2, [r6, #0]
 8008a06:	00c9      	lsls	r1, r1, #3
 8008a08:	4011      	ands	r1, r2
 8008a0a:	00c0      	lsls	r0, r0, #3
 8008a0c:	4281      	cmp	r1, r0
 8008a0e:	d006      	beq.n	8008a1e <_scanf_float+0x222>
 8008a10:	4202      	tst	r2, r0
 8008a12:	d100      	bne.n	8008a16 <_scanf_float+0x21a>
 8008a14:	e723      	b.n	800885e <_scanf_float+0x62>
 8008a16:	9900      	ldr	r1, [sp, #0]
 8008a18:	2900      	cmp	r1, #0
 8008a1a:	d100      	bne.n	8008a1e <_scanf_float+0x222>
 8008a1c:	e726      	b.n	800886c <_scanf_float+0x70>
 8008a1e:	0591      	lsls	r1, r2, #22
 8008a20:	d404      	bmi.n	8008a2c <_scanf_float+0x230>
 8008a22:	9900      	ldr	r1, [sp, #0]
 8008a24:	9804      	ldr	r0, [sp, #16]
 8008a26:	9708      	str	r7, [sp, #32]
 8008a28:	1a09      	subs	r1, r1, r0
 8008a2a:	9107      	str	r1, [sp, #28]
 8008a2c:	4934      	ldr	r1, [pc, #208]	; (8008b00 <_scanf_float+0x304>)
 8008a2e:	400a      	ands	r2, r1
 8008a30:	21c0      	movs	r1, #192	; 0xc0
 8008a32:	0049      	lsls	r1, r1, #1
 8008a34:	430a      	orrs	r2, r1
 8008a36:	6032      	str	r2, [r6, #0]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9200      	str	r2, [sp, #0]
 8008a3c:	e786      	b.n	800894c <_scanf_float+0x150>
 8008a3e:	2203      	movs	r2, #3
 8008a40:	e79e      	b.n	8008980 <_scanf_float+0x184>
 8008a42:	23c0      	movs	r3, #192	; 0xc0
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	0029      	movs	r1, r5
 8008a48:	58f3      	ldr	r3, [r6, r3]
 8008a4a:	9801      	ldr	r0, [sp, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d100      	bne.n	8008a54 <_scanf_float+0x258>
 8008a52:	e6f6      	b.n	8008842 <_scanf_float+0x46>
 8008a54:	e703      	b.n	800885e <_scanf_float+0x62>
 8008a56:	3f01      	subs	r7, #1
 8008a58:	5933      	ldr	r3, [r6, r4]
 8008a5a:	002a      	movs	r2, r5
 8008a5c:	7839      	ldrb	r1, [r7, #0]
 8008a5e:	9801      	ldr	r0, [sp, #4]
 8008a60:	4798      	blx	r3
 8008a62:	6933      	ldr	r3, [r6, #16]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	6133      	str	r3, [r6, #16]
 8008a68:	e707      	b.n	800887a <_scanf_float+0x7e>
 8008a6a:	1e63      	subs	r3, r4, #1
 8008a6c:	2b06      	cmp	r3, #6
 8008a6e:	d80e      	bhi.n	8008a8e <_scanf_float+0x292>
 8008a70:	9702      	str	r7, [sp, #8]
 8008a72:	2c02      	cmp	r4, #2
 8008a74:	d920      	bls.n	8008ab8 <_scanf_float+0x2bc>
 8008a76:	1be3      	subs	r3, r4, r7
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	9b02      	ldr	r3, [sp, #8]
 8008a7e:	9a05      	ldr	r2, [sp, #20]
 8008a80:	189b      	adds	r3, r3, r2
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d827      	bhi.n	8008ad8 <_scanf_float+0x2dc>
 8008a88:	3c03      	subs	r4, #3
 8008a8a:	b2e4      	uxtb	r4, r4
 8008a8c:	1b3f      	subs	r7, r7, r4
 8008a8e:	6833      	ldr	r3, [r6, #0]
 8008a90:	05da      	lsls	r2, r3, #23
 8008a92:	d554      	bpl.n	8008b3e <_scanf_float+0x342>
 8008a94:	055b      	lsls	r3, r3, #21
 8008a96:	d537      	bpl.n	8008b08 <_scanf_float+0x30c>
 8008a98:	24be      	movs	r4, #190	; 0xbe
 8008a9a:	0064      	lsls	r4, r4, #1
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	429f      	cmp	r7, r3
 8008aa0:	d800      	bhi.n	8008aa4 <_scanf_float+0x2a8>
 8008aa2:	e6ee      	b.n	8008882 <_scanf_float+0x86>
 8008aa4:	3f01      	subs	r7, #1
 8008aa6:	5933      	ldr	r3, [r6, r4]
 8008aa8:	002a      	movs	r2, r5
 8008aaa:	7839      	ldrb	r1, [r7, #0]
 8008aac:	9801      	ldr	r0, [sp, #4]
 8008aae:	4798      	blx	r3
 8008ab0:	6933      	ldr	r3, [r6, #16]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	6133      	str	r3, [r6, #16]
 8008ab6:	e7f1      	b.n	8008a9c <_scanf_float+0x2a0>
 8008ab8:	24be      	movs	r4, #190	; 0xbe
 8008aba:	0064      	lsls	r4, r4, #1
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	429f      	cmp	r7, r3
 8008ac0:	d800      	bhi.n	8008ac4 <_scanf_float+0x2c8>
 8008ac2:	e6de      	b.n	8008882 <_scanf_float+0x86>
 8008ac4:	3f01      	subs	r7, #1
 8008ac6:	5933      	ldr	r3, [r6, r4]
 8008ac8:	002a      	movs	r2, r5
 8008aca:	7839      	ldrb	r1, [r7, #0]
 8008acc:	9801      	ldr	r0, [sp, #4]
 8008ace:	4798      	blx	r3
 8008ad0:	6933      	ldr	r3, [r6, #16]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	6133      	str	r3, [r6, #16]
 8008ad6:	e7f1      	b.n	8008abc <_scanf_float+0x2c0>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	002a      	movs	r2, r5
 8008adc:	3b01      	subs	r3, #1
 8008ade:	7819      	ldrb	r1, [r3, #0]
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	23be      	movs	r3, #190	; 0xbe
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	58f3      	ldr	r3, [r6, r3]
 8008ae8:	9801      	ldr	r0, [sp, #4]
 8008aea:	9309      	str	r3, [sp, #36]	; 0x24
 8008aec:	4798      	blx	r3
 8008aee:	6933      	ldr	r3, [r6, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	6133      	str	r3, [r6, #16]
 8008af4:	e7c2      	b.n	8008a7c <_scanf_float+0x280>
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	fffffeff 	.word	0xfffffeff
 8008afc:	fffffe7f 	.word	0xfffffe7f
 8008b00:	fffff87f 	.word	0xfffff87f
 8008b04:	fffffd7f 	.word	0xfffffd7f
 8008b08:	6933      	ldr	r3, [r6, #16]
 8008b0a:	1e7c      	subs	r4, r7, #1
 8008b0c:	7821      	ldrb	r1, [r4, #0]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	6133      	str	r3, [r6, #16]
 8008b12:	2965      	cmp	r1, #101	; 0x65
 8008b14:	d00c      	beq.n	8008b30 <_scanf_float+0x334>
 8008b16:	2945      	cmp	r1, #69	; 0x45
 8008b18:	d00a      	beq.n	8008b30 <_scanf_float+0x334>
 8008b1a:	23be      	movs	r3, #190	; 0xbe
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	58f3      	ldr	r3, [r6, r3]
 8008b20:	002a      	movs	r2, r5
 8008b22:	9801      	ldr	r0, [sp, #4]
 8008b24:	4798      	blx	r3
 8008b26:	6933      	ldr	r3, [r6, #16]
 8008b28:	1ebc      	subs	r4, r7, #2
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	7821      	ldrb	r1, [r4, #0]
 8008b2e:	6133      	str	r3, [r6, #16]
 8008b30:	23be      	movs	r3, #190	; 0xbe
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	002a      	movs	r2, r5
 8008b36:	58f3      	ldr	r3, [r6, r3]
 8008b38:	9801      	ldr	r0, [sp, #4]
 8008b3a:	4798      	blx	r3
 8008b3c:	0027      	movs	r7, r4
 8008b3e:	6832      	ldr	r2, [r6, #0]
 8008b40:	2310      	movs	r3, #16
 8008b42:	0011      	movs	r1, r2
 8008b44:	4019      	ands	r1, r3
 8008b46:	9102      	str	r1, [sp, #8]
 8008b48:	421a      	tst	r2, r3
 8008b4a:	d158      	bne.n	8008bfe <_scanf_float+0x402>
 8008b4c:	23c0      	movs	r3, #192	; 0xc0
 8008b4e:	7039      	strb	r1, [r7, #0]
 8008b50:	6832      	ldr	r2, [r6, #0]
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	4013      	ands	r3, r2
 8008b56:	2280      	movs	r2, #128	; 0x80
 8008b58:	00d2      	lsls	r2, r2, #3
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d11d      	bne.n	8008b9a <_scanf_float+0x39e>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	9a00      	ldr	r2, [sp, #0]
 8008b62:	9900      	ldr	r1, [sp, #0]
 8008b64:	1a9a      	subs	r2, r3, r2
 8008b66:	428b      	cmp	r3, r1
 8008b68:	d124      	bne.n	8008bb4 <_scanf_float+0x3b8>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	9903      	ldr	r1, [sp, #12]
 8008b6e:	9801      	ldr	r0, [sp, #4]
 8008b70:	f000 feac 	bl	80098cc <_strtod_r>
 8008b74:	9b06      	ldr	r3, [sp, #24]
 8008b76:	000d      	movs	r5, r1
 8008b78:	6831      	ldr	r1, [r6, #0]
 8008b7a:	0004      	movs	r4, r0
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	078a      	lsls	r2, r1, #30
 8008b80:	d525      	bpl.n	8008bce <_scanf_float+0x3d2>
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	9906      	ldr	r1, [sp, #24]
 8008b86:	600a      	str	r2, [r1, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	601c      	str	r4, [r3, #0]
 8008b8c:	605d      	str	r5, [r3, #4]
 8008b8e:	68f3      	ldr	r3, [r6, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60f3      	str	r3, [r6, #12]
 8008b94:	9802      	ldr	r0, [sp, #8]
 8008b96:	b00b      	add	sp, #44	; 0x2c
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	9b07      	ldr	r3, [sp, #28]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0e4      	beq.n	8008b6a <_scanf_float+0x36e>
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	9a02      	ldr	r2, [sp, #8]
 8008ba4:	1c59      	adds	r1, r3, #1
 8008ba6:	9801      	ldr	r0, [sp, #4]
 8008ba8:	230a      	movs	r3, #10
 8008baa:	f000 ff25 	bl	80099f8 <_strtol_r>
 8008bae:	9b07      	ldr	r3, [sp, #28]
 8008bb0:	9f08      	ldr	r7, [sp, #32]
 8008bb2:	1ac2      	subs	r2, r0, r3
 8008bb4:	0033      	movs	r3, r6
 8008bb6:	3370      	adds	r3, #112	; 0x70
 8008bb8:	33ff      	adds	r3, #255	; 0xff
 8008bba:	429f      	cmp	r7, r3
 8008bbc:	d302      	bcc.n	8008bc4 <_scanf_float+0x3c8>
 8008bbe:	0037      	movs	r7, r6
 8008bc0:	376f      	adds	r7, #111	; 0x6f
 8008bc2:	37ff      	adds	r7, #255	; 0xff
 8008bc4:	0038      	movs	r0, r7
 8008bc6:	490f      	ldr	r1, [pc, #60]	; (8008c04 <_scanf_float+0x408>)
 8008bc8:	f000 f824 	bl	8008c14 <siprintf>
 8008bcc:	e7cd      	b.n	8008b6a <_scanf_float+0x36e>
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	0749      	lsls	r1, r1, #29
 8008bd2:	d4d7      	bmi.n	8008b84 <_scanf_float+0x388>
 8008bd4:	9906      	ldr	r1, [sp, #24]
 8008bd6:	0020      	movs	r0, r4
 8008bd8:	600a      	str	r2, [r1, #0]
 8008bda:	681f      	ldr	r7, [r3, #0]
 8008bdc:	0022      	movs	r2, r4
 8008bde:	002b      	movs	r3, r5
 8008be0:	0029      	movs	r1, r5
 8008be2:	f7f9 fa3f 	bl	8002064 <__aeabi_dcmpun>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d004      	beq.n	8008bf4 <_scanf_float+0x3f8>
 8008bea:	4807      	ldr	r0, [pc, #28]	; (8008c08 <_scanf_float+0x40c>)
 8008bec:	f000 f80e 	bl	8008c0c <nanf>
 8008bf0:	6038      	str	r0, [r7, #0]
 8008bf2:	e7cc      	b.n	8008b8e <_scanf_float+0x392>
 8008bf4:	0020      	movs	r0, r4
 8008bf6:	0029      	movs	r1, r5
 8008bf8:	f7f9 fb26 	bl	8002248 <__aeabi_d2f>
 8008bfc:	e7f8      	b.n	8008bf0 <_scanf_float+0x3f4>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e640      	b.n	8008884 <_scanf_float+0x88>
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	0800ca08 	.word	0x0800ca08
 8008c08:	0800ce20 	.word	0x0800ce20

08008c0c <nanf>:
 8008c0c:	4800      	ldr	r0, [pc, #0]	; (8008c10 <nanf+0x4>)
 8008c0e:	4770      	bx	lr
 8008c10:	7fc00000 	.word	0x7fc00000

08008c14 <siprintf>:
 8008c14:	b40e      	push	{r1, r2, r3}
 8008c16:	b500      	push	{lr}
 8008c18:	490b      	ldr	r1, [pc, #44]	; (8008c48 <siprintf+0x34>)
 8008c1a:	b09c      	sub	sp, #112	; 0x70
 8008c1c:	ab1d      	add	r3, sp, #116	; 0x74
 8008c1e:	9002      	str	r0, [sp, #8]
 8008c20:	9006      	str	r0, [sp, #24]
 8008c22:	9107      	str	r1, [sp, #28]
 8008c24:	9104      	str	r1, [sp, #16]
 8008c26:	4809      	ldr	r0, [pc, #36]	; (8008c4c <siprintf+0x38>)
 8008c28:	4909      	ldr	r1, [pc, #36]	; (8008c50 <siprintf+0x3c>)
 8008c2a:	cb04      	ldmia	r3!, {r2}
 8008c2c:	9105      	str	r1, [sp, #20]
 8008c2e:	6800      	ldr	r0, [r0, #0]
 8008c30:	a902      	add	r1, sp, #8
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	f002 ff16 	bl	800ba64 <_svfiprintf_r>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9a02      	ldr	r2, [sp, #8]
 8008c3c:	7013      	strb	r3, [r2, #0]
 8008c3e:	b01c      	add	sp, #112	; 0x70
 8008c40:	bc08      	pop	{r3}
 8008c42:	b003      	add	sp, #12
 8008c44:	4718      	bx	r3
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	7fffffff 	.word	0x7fffffff
 8008c4c:	2000000c 	.word	0x2000000c
 8008c50:	ffff0208 	.word	0xffff0208

08008c54 <sulp>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	0016      	movs	r6, r2
 8008c58:	000d      	movs	r5, r1
 8008c5a:	f002 fca7 	bl	800b5ac <__ulp>
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	d00d      	beq.n	8008c7e <sulp+0x2a>
 8008c62:	236b      	movs	r3, #107	; 0x6b
 8008c64:	006a      	lsls	r2, r5, #1
 8008c66:	0d52      	lsrs	r2, r2, #21
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	dd07      	ble.n	8008c7e <sulp+0x2a>
 8008c6e:	2400      	movs	r4, #0
 8008c70:	4a03      	ldr	r2, [pc, #12]	; (8008c80 <sulp+0x2c>)
 8008c72:	051b      	lsls	r3, r3, #20
 8008c74:	189d      	adds	r5, r3, r2
 8008c76:	002b      	movs	r3, r5
 8008c78:	0022      	movs	r2, r4
 8008c7a:	f7f8 fbf5 	bl	8001468 <__aeabi_dmul>
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	3ff00000 	.word	0x3ff00000

08008c84 <_strtod_l>:
 8008c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c86:	001d      	movs	r5, r3
 8008c88:	2300      	movs	r3, #0
 8008c8a:	b0a7      	sub	sp, #156	; 0x9c
 8008c8c:	9322      	str	r3, [sp, #136]	; 0x88
 8008c8e:	4bae      	ldr	r3, [pc, #696]	; (8008f48 <_strtod_l+0x2c4>)
 8008c90:	9005      	str	r0, [sp, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	9108      	str	r1, [sp, #32]
 8008c96:	0018      	movs	r0, r3
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	921d      	str	r2, [sp, #116]	; 0x74
 8008c9c:	f7f7 fa34 	bl	8000108 <strlen>
 8008ca0:	2600      	movs	r6, #0
 8008ca2:	0004      	movs	r4, r0
 8008ca4:	2700      	movs	r7, #0
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	9321      	str	r3, [sp, #132]	; 0x84
 8008caa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cac:	7813      	ldrb	r3, [r2, #0]
 8008cae:	2b2b      	cmp	r3, #43	; 0x2b
 8008cb0:	d058      	beq.n	8008d64 <_strtod_l+0xe0>
 8008cb2:	d844      	bhi.n	8008d3e <_strtod_l+0xba>
 8008cb4:	2b0d      	cmp	r3, #13
 8008cb6:	d83d      	bhi.n	8008d34 <_strtod_l+0xb0>
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d83d      	bhi.n	8008d38 <_strtod_l+0xb4>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d047      	beq.n	8008d50 <_strtod_l+0xcc>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9310      	str	r3, [sp, #64]	; 0x40
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cca:	9306      	str	r3, [sp, #24]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b30      	cmp	r3, #48	; 0x30
 8008cd0:	d000      	beq.n	8008cd4 <_strtod_l+0x50>
 8008cd2:	e083      	b.n	8008ddc <_strtod_l+0x158>
 8008cd4:	9b06      	ldr	r3, [sp, #24]
 8008cd6:	3220      	adds	r2, #32
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	4393      	bics	r3, r2
 8008cdc:	2b58      	cmp	r3, #88	; 0x58
 8008cde:	d000      	beq.n	8008ce2 <_strtod_l+0x5e>
 8008ce0:	e072      	b.n	8008dc8 <_strtod_l+0x144>
 8008ce2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ce4:	9502      	str	r5, [sp, #8]
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	ab22      	add	r3, sp, #136	; 0x88
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4a97      	ldr	r2, [pc, #604]	; (8008f4c <_strtod_l+0x2c8>)
 8008cee:	ab23      	add	r3, sp, #140	; 0x8c
 8008cf0:	9805      	ldr	r0, [sp, #20]
 8008cf2:	a921      	add	r1, sp, #132	; 0x84
 8008cf4:	f001 fd98 	bl	800a828 <__gethex>
 8008cf8:	2307      	movs	r3, #7
 8008cfa:	0005      	movs	r5, r0
 8008cfc:	0004      	movs	r4, r0
 8008cfe:	401d      	ands	r5, r3
 8008d00:	4218      	tst	r0, r3
 8008d02:	d006      	beq.n	8008d12 <_strtod_l+0x8e>
 8008d04:	2d06      	cmp	r5, #6
 8008d06:	d12f      	bne.n	8008d68 <_strtod_l+0xe4>
 8008d08:	9b06      	ldr	r3, [sp, #24]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	9321      	str	r3, [sp, #132]	; 0x84
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9310      	str	r3, [sp, #64]	; 0x40
 8008d12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <_strtod_l+0x9a>
 8008d18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01c      	beq.n	8008d5e <_strtod_l+0xda>
 8008d24:	2380      	movs	r3, #128	; 0x80
 8008d26:	0032      	movs	r2, r6
 8008d28:	061b      	lsls	r3, r3, #24
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	0010      	movs	r0, r2
 8008d2e:	0019      	movs	r1, r3
 8008d30:	b027      	add	sp, #156	; 0x9c
 8008d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d1c3      	bne.n	8008cc0 <_strtod_l+0x3c>
 8008d38:	3201      	adds	r2, #1
 8008d3a:	9221      	str	r2, [sp, #132]	; 0x84
 8008d3c:	e7b5      	b.n	8008caa <_strtod_l+0x26>
 8008d3e:	2b2d      	cmp	r3, #45	; 0x2d
 8008d40:	d1be      	bne.n	8008cc0 <_strtod_l+0x3c>
 8008d42:	3b2c      	subs	r3, #44	; 0x2c
 8008d44:	9310      	str	r3, [sp, #64]	; 0x40
 8008d46:	1c53      	adds	r3, r2, #1
 8008d48:	9321      	str	r3, [sp, #132]	; 0x84
 8008d4a:	7853      	ldrb	r3, [r2, #1]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1b9      	bne.n	8008cc4 <_strtod_l+0x40>
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	9321      	str	r3, [sp, #132]	; 0x84
 8008d54:	2300      	movs	r3, #0
 8008d56:	9310      	str	r3, [sp, #64]	; 0x40
 8008d58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1dc      	bne.n	8008d18 <_strtod_l+0x94>
 8008d5e:	0032      	movs	r2, r6
 8008d60:	003b      	movs	r3, r7
 8008d62:	e7e3      	b.n	8008d2c <_strtod_l+0xa8>
 8008d64:	2300      	movs	r3, #0
 8008d66:	e7ed      	b.n	8008d44 <_strtod_l+0xc0>
 8008d68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d6a:	2a00      	cmp	r2, #0
 8008d6c:	d007      	beq.n	8008d7e <_strtod_l+0xfa>
 8008d6e:	2135      	movs	r1, #53	; 0x35
 8008d70:	a824      	add	r0, sp, #144	; 0x90
 8008d72:	f002 fd1a 	bl	800b7aa <__copybits>
 8008d76:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008d78:	9805      	ldr	r0, [sp, #20]
 8008d7a:	f002 f8d5 	bl	800af28 <_Bfree>
 8008d7e:	1e68      	subs	r0, r5, #1
 8008d80:	2805      	cmp	r0, #5
 8008d82:	d806      	bhi.n	8008d92 <_strtod_l+0x10e>
 8008d84:	f7f7 f9c8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008d88:	1c190b0e 	.word	0x1c190b0e
 8008d8c:	030e      	.short	0x030e
 8008d8e:	2700      	movs	r7, #0
 8008d90:	003e      	movs	r6, r7
 8008d92:	0723      	lsls	r3, r4, #28
 8008d94:	d5bd      	bpl.n	8008d12 <_strtod_l+0x8e>
 8008d96:	2380      	movs	r3, #128	; 0x80
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	431f      	orrs	r7, r3
 8008d9c:	e7b9      	b.n	8008d12 <_strtod_l+0x8e>
 8008d9e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008da0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008da2:	e7f6      	b.n	8008d92 <_strtod_l+0x10e>
 8008da4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008da6:	4a6a      	ldr	r2, [pc, #424]	; (8008f50 <_strtod_l+0x2cc>)
 8008da8:	496a      	ldr	r1, [pc, #424]	; (8008f54 <_strtod_l+0x2d0>)
 8008daa:	401a      	ands	r2, r3
 8008dac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008db0:	185b      	adds	r3, r3, r1
 8008db2:	051b      	lsls	r3, r3, #20
 8008db4:	431a      	orrs	r2, r3
 8008db6:	0017      	movs	r7, r2
 8008db8:	e7eb      	b.n	8008d92 <_strtod_l+0x10e>
 8008dba:	2600      	movs	r6, #0
 8008dbc:	4f66      	ldr	r7, [pc, #408]	; (8008f58 <_strtod_l+0x2d4>)
 8008dbe:	e7e8      	b.n	8008d92 <_strtod_l+0x10e>
 8008dc0:	2601      	movs	r6, #1
 8008dc2:	4f66      	ldr	r7, [pc, #408]	; (8008f5c <_strtod_l+0x2d8>)
 8008dc4:	4276      	negs	r6, r6
 8008dc6:	e7e4      	b.n	8008d92 <_strtod_l+0x10e>
 8008dc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	9221      	str	r2, [sp, #132]	; 0x84
 8008dce:	785b      	ldrb	r3, [r3, #1]
 8008dd0:	2b30      	cmp	r3, #48	; 0x30
 8008dd2:	d0f9      	beq.n	8008dc8 <_strtod_l+0x144>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d09c      	beq.n	8008d12 <_strtod_l+0x8e>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	930a      	str	r3, [sp, #40]	; 0x28
 8008ddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dde:	220a      	movs	r2, #10
 8008de0:	9311      	str	r3, [sp, #68]	; 0x44
 8008de2:	2300      	movs	r3, #0
 8008de4:	930e      	str	r3, [sp, #56]	; 0x38
 8008de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dea:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008dec:	7805      	ldrb	r5, [r0, #0]
 8008dee:	002b      	movs	r3, r5
 8008df0:	3b30      	subs	r3, #48	; 0x30
 8008df2:	b2d9      	uxtb	r1, r3
 8008df4:	2909      	cmp	r1, #9
 8008df6:	d927      	bls.n	8008e48 <_strtod_l+0x1c4>
 8008df8:	0022      	movs	r2, r4
 8008dfa:	9907      	ldr	r1, [sp, #28]
 8008dfc:	f002 ff4a 	bl	800bc94 <strncmp>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d033      	beq.n	8008e6c <_strtod_l+0x1e8>
 8008e04:	2000      	movs	r0, #0
 8008e06:	002b      	movs	r3, r5
 8008e08:	4684      	mov	ip, r0
 8008e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e0c:	900c      	str	r0, [sp, #48]	; 0x30
 8008e0e:	9206      	str	r2, [sp, #24]
 8008e10:	2220      	movs	r2, #32
 8008e12:	0019      	movs	r1, r3
 8008e14:	4391      	bics	r1, r2
 8008e16:	000a      	movs	r2, r1
 8008e18:	2100      	movs	r1, #0
 8008e1a:	9107      	str	r1, [sp, #28]
 8008e1c:	2a45      	cmp	r2, #69	; 0x45
 8008e1e:	d000      	beq.n	8008e22 <_strtod_l+0x19e>
 8008e20:	e0c5      	b.n	8008fae <_strtod_l+0x32a>
 8008e22:	9b06      	ldr	r3, [sp, #24]
 8008e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e26:	4303      	orrs	r3, r0
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	428b      	cmp	r3, r1
 8008e2c:	d090      	beq.n	8008d50 <_strtod_l+0xcc>
 8008e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	3301      	adds	r3, #1
 8008e34:	9321      	str	r3, [sp, #132]	; 0x84
 8008e36:	9b08      	ldr	r3, [sp, #32]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b2b      	cmp	r3, #43	; 0x2b
 8008e3c:	d075      	beq.n	8008f2a <_strtod_l+0x2a6>
 8008e3e:	000c      	movs	r4, r1
 8008e40:	2b2d      	cmp	r3, #45	; 0x2d
 8008e42:	d178      	bne.n	8008f36 <_strtod_l+0x2b2>
 8008e44:	2401      	movs	r4, #1
 8008e46:	e071      	b.n	8008f2c <_strtod_l+0x2a8>
 8008e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e4a:	2908      	cmp	r1, #8
 8008e4c:	dc09      	bgt.n	8008e62 <_strtod_l+0x1de>
 8008e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e50:	4351      	muls	r1, r2
 8008e52:	185b      	adds	r3, r3, r1
 8008e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e58:	3001      	adds	r0, #1
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5e:	9021      	str	r0, [sp, #132]	; 0x84
 8008e60:	e7c3      	b.n	8008dea <_strtod_l+0x166>
 8008e62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e64:	4351      	muls	r1, r2
 8008e66:	185b      	adds	r3, r3, r1
 8008e68:	930e      	str	r3, [sp, #56]	; 0x38
 8008e6a:	e7f4      	b.n	8008e56 <_strtod_l+0x1d2>
 8008e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e70:	191c      	adds	r4, r3, r4
 8008e72:	9421      	str	r4, [sp, #132]	; 0x84
 8008e74:	7823      	ldrb	r3, [r4, #0]
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	d039      	beq.n	8008eee <_strtod_l+0x26a>
 8008e7a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e7c:	9206      	str	r2, [sp, #24]
 8008e7e:	001a      	movs	r2, r3
 8008e80:	3a30      	subs	r2, #48	; 0x30
 8008e82:	2a09      	cmp	r2, #9
 8008e84:	d912      	bls.n	8008eac <_strtod_l+0x228>
 8008e86:	2201      	movs	r2, #1
 8008e88:	4694      	mov	ip, r2
 8008e8a:	e7c1      	b.n	8008e10 <_strtod_l+0x18c>
 8008e8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8e:	3001      	adds	r0, #1
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	9221      	str	r2, [sp, #132]	; 0x84
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	2b30      	cmp	r3, #48	; 0x30
 8008e98:	d0f8      	beq.n	8008e8c <_strtod_l+0x208>
 8008e9a:	001a      	movs	r2, r3
 8008e9c:	3a31      	subs	r2, #49	; 0x31
 8008e9e:	2a08      	cmp	r2, #8
 8008ea0:	d83e      	bhi.n	8008f20 <_strtod_l+0x29c>
 8008ea2:	900c      	str	r0, [sp, #48]	; 0x30
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ea8:	9006      	str	r0, [sp, #24]
 8008eaa:	9211      	str	r2, [sp, #68]	; 0x44
 8008eac:	001a      	movs	r2, r3
 8008eae:	9906      	ldr	r1, [sp, #24]
 8008eb0:	1c44      	adds	r4, r0, #1
 8008eb2:	3a30      	subs	r2, #48	; 0x30
 8008eb4:	2b30      	cmp	r3, #48	; 0x30
 8008eb6:	d013      	beq.n	8008ee0 <_strtod_l+0x25c>
 8008eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eba:	191b      	adds	r3, r3, r4
 8008ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8008ebe:	1844      	adds	r4, r0, r1
 8008ec0:	000b      	movs	r3, r1
 8008ec2:	210a      	movs	r1, #10
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	d114      	bne.n	8008ef2 <_strtod_l+0x26e>
 8008ec8:	9b06      	ldr	r3, [sp, #24]
 8008eca:	1c59      	adds	r1, r3, #1
 8008ecc:	1809      	adds	r1, r1, r0
 8008ece:	1818      	adds	r0, r3, r0
 8008ed0:	2808      	cmp	r0, #8
 8008ed2:	dc1c      	bgt.n	8008f0e <_strtod_l+0x28a>
 8008ed4:	230a      	movs	r3, #10
 8008ed6:	2400      	movs	r4, #0
 8008ed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008eda:	4343      	muls	r3, r0
 8008edc:	18d3      	adds	r3, r2, r3
 8008ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee2:	0020      	movs	r0, r4
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	9221      	str	r2, [sp, #132]	; 0x84
 8008ee8:	785b      	ldrb	r3, [r3, #1]
 8008eea:	9106      	str	r1, [sp, #24]
 8008eec:	e7c7      	b.n	8008e7e <_strtod_l+0x1fa>
 8008eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ef0:	e7d1      	b.n	8008e96 <_strtod_l+0x212>
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	dc04      	bgt.n	8008f00 <_strtod_l+0x27c>
 8008ef6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ef8:	434d      	muls	r5, r1
 8008efa:	950b      	str	r5, [sp, #44]	; 0x2c
 8008efc:	3301      	adds	r3, #1
 8008efe:	e7e1      	b.n	8008ec4 <_strtod_l+0x240>
 8008f00:	1c5d      	adds	r5, r3, #1
 8008f02:	2d10      	cmp	r5, #16
 8008f04:	dcfa      	bgt.n	8008efc <_strtod_l+0x278>
 8008f06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f08:	434d      	muls	r5, r1
 8008f0a:	950e      	str	r5, [sp, #56]	; 0x38
 8008f0c:	e7f6      	b.n	8008efc <_strtod_l+0x278>
 8008f0e:	2400      	movs	r4, #0
 8008f10:	2910      	cmp	r1, #16
 8008f12:	dce5      	bgt.n	8008ee0 <_strtod_l+0x25c>
 8008f14:	230a      	movs	r3, #10
 8008f16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f18:	4343      	muls	r3, r0
 8008f1a:	18d3      	adds	r3, r2, r3
 8008f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f1e:	e7df      	b.n	8008ee0 <_strtod_l+0x25c>
 8008f20:	2200      	movs	r2, #0
 8008f22:	920c      	str	r2, [sp, #48]	; 0x30
 8008f24:	9206      	str	r2, [sp, #24]
 8008f26:	3201      	adds	r2, #1
 8008f28:	e7ae      	b.n	8008e88 <_strtod_l+0x204>
 8008f2a:	2400      	movs	r4, #0
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	3302      	adds	r3, #2
 8008f30:	9321      	str	r3, [sp, #132]	; 0x84
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	789b      	ldrb	r3, [r3, #2]
 8008f36:	001a      	movs	r2, r3
 8008f38:	3a30      	subs	r2, #48	; 0x30
 8008f3a:	2a09      	cmp	r2, #9
 8008f3c:	d914      	bls.n	8008f68 <_strtod_l+0x2e4>
 8008f3e:	9a08      	ldr	r2, [sp, #32]
 8008f40:	9221      	str	r2, [sp, #132]	; 0x84
 8008f42:	2200      	movs	r2, #0
 8008f44:	e032      	b.n	8008fac <_strtod_l+0x328>
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	0800cc60 	.word	0x0800cc60
 8008f4c:	0800ca10 	.word	0x0800ca10
 8008f50:	ffefffff 	.word	0xffefffff
 8008f54:	00000433 	.word	0x00000433
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	7fffffff 	.word	0x7fffffff
 8008f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	9221      	str	r2, [sp, #132]	; 0x84
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	2b30      	cmp	r3, #48	; 0x30
 8008f6a:	d0f9      	beq.n	8008f60 <_strtod_l+0x2dc>
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	9207      	str	r2, [sp, #28]
 8008f70:	001a      	movs	r2, r3
 8008f72:	3a31      	subs	r2, #49	; 0x31
 8008f74:	2a08      	cmp	r2, #8
 8008f76:	d81a      	bhi.n	8008fae <_strtod_l+0x32a>
 8008f78:	3b30      	subs	r3, #48	; 0x30
 8008f7a:	001a      	movs	r2, r3
 8008f7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f82:	1c59      	adds	r1, r3, #1
 8008f84:	9121      	str	r1, [sp, #132]	; 0x84
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	001d      	movs	r5, r3
 8008f8a:	3d30      	subs	r5, #48	; 0x30
 8008f8c:	2d09      	cmp	r5, #9
 8008f8e:	d939      	bls.n	8009004 <_strtod_l+0x380>
 8008f90:	9d07      	ldr	r5, [sp, #28]
 8008f92:	1b49      	subs	r1, r1, r5
 8008f94:	4daf      	ldr	r5, [pc, #700]	; (8009254 <_strtod_l+0x5d0>)
 8008f96:	9507      	str	r5, [sp, #28]
 8008f98:	2908      	cmp	r1, #8
 8008f9a:	dc03      	bgt.n	8008fa4 <_strtod_l+0x320>
 8008f9c:	9207      	str	r2, [sp, #28]
 8008f9e:	42aa      	cmp	r2, r5
 8008fa0:	dd00      	ble.n	8008fa4 <_strtod_l+0x320>
 8008fa2:	9507      	str	r5, [sp, #28]
 8008fa4:	2c00      	cmp	r4, #0
 8008fa6:	d002      	beq.n	8008fae <_strtod_l+0x32a>
 8008fa8:	9a07      	ldr	r2, [sp, #28]
 8008faa:	4252      	negs	r2, r2
 8008fac:	9207      	str	r2, [sp, #28]
 8008fae:	9a06      	ldr	r2, [sp, #24]
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	d14b      	bne.n	800904c <_strtod_l+0x3c8>
 8008fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb6:	4310      	orrs	r0, r2
 8008fb8:	d000      	beq.n	8008fbc <_strtod_l+0x338>
 8008fba:	e6aa      	b.n	8008d12 <_strtod_l+0x8e>
 8008fbc:	4662      	mov	r2, ip
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	d000      	beq.n	8008fc4 <_strtod_l+0x340>
 8008fc2:	e6c5      	b.n	8008d50 <_strtod_l+0xcc>
 8008fc4:	2b69      	cmp	r3, #105	; 0x69
 8008fc6:	d025      	beq.n	8009014 <_strtod_l+0x390>
 8008fc8:	dc21      	bgt.n	800900e <_strtod_l+0x38a>
 8008fca:	2b49      	cmp	r3, #73	; 0x49
 8008fcc:	d022      	beq.n	8009014 <_strtod_l+0x390>
 8008fce:	2b4e      	cmp	r3, #78	; 0x4e
 8008fd0:	d000      	beq.n	8008fd4 <_strtod_l+0x350>
 8008fd2:	e6bd      	b.n	8008d50 <_strtod_l+0xcc>
 8008fd4:	49a0      	ldr	r1, [pc, #640]	; (8009258 <_strtod_l+0x5d4>)
 8008fd6:	a821      	add	r0, sp, #132	; 0x84
 8008fd8:	f001 fe74 	bl	800acc4 <__match>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d100      	bne.n	8008fe2 <_strtod_l+0x35e>
 8008fe0:	e6b6      	b.n	8008d50 <_strtod_l+0xcc>
 8008fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b28      	cmp	r3, #40	; 0x28
 8008fe8:	d12a      	bne.n	8009040 <_strtod_l+0x3bc>
 8008fea:	499c      	ldr	r1, [pc, #624]	; (800925c <_strtod_l+0x5d8>)
 8008fec:	aa24      	add	r2, sp, #144	; 0x90
 8008fee:	a821      	add	r0, sp, #132	; 0x84
 8008ff0:	f001 fe7c 	bl	800acec <__hexnan>
 8008ff4:	2805      	cmp	r0, #5
 8008ff6:	d123      	bne.n	8009040 <_strtod_l+0x3bc>
 8008ff8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008ffa:	4a99      	ldr	r2, [pc, #612]	; (8009260 <_strtod_l+0x5dc>)
 8008ffc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008ffe:	431a      	orrs	r2, r3
 8009000:	0017      	movs	r7, r2
 8009002:	e686      	b.n	8008d12 <_strtod_l+0x8e>
 8009004:	210a      	movs	r1, #10
 8009006:	434a      	muls	r2, r1
 8009008:	18d2      	adds	r2, r2, r3
 800900a:	3a30      	subs	r2, #48	; 0x30
 800900c:	e7b8      	b.n	8008f80 <_strtod_l+0x2fc>
 800900e:	2b6e      	cmp	r3, #110	; 0x6e
 8009010:	d0e0      	beq.n	8008fd4 <_strtod_l+0x350>
 8009012:	e69d      	b.n	8008d50 <_strtod_l+0xcc>
 8009014:	4993      	ldr	r1, [pc, #588]	; (8009264 <_strtod_l+0x5e0>)
 8009016:	a821      	add	r0, sp, #132	; 0x84
 8009018:	f001 fe54 	bl	800acc4 <__match>
 800901c:	2800      	cmp	r0, #0
 800901e:	d100      	bne.n	8009022 <_strtod_l+0x39e>
 8009020:	e696      	b.n	8008d50 <_strtod_l+0xcc>
 8009022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009024:	4990      	ldr	r1, [pc, #576]	; (8009268 <_strtod_l+0x5e4>)
 8009026:	3b01      	subs	r3, #1
 8009028:	a821      	add	r0, sp, #132	; 0x84
 800902a:	9321      	str	r3, [sp, #132]	; 0x84
 800902c:	f001 fe4a 	bl	800acc4 <__match>
 8009030:	2800      	cmp	r0, #0
 8009032:	d102      	bne.n	800903a <_strtod_l+0x3b6>
 8009034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009036:	3301      	adds	r3, #1
 8009038:	9321      	str	r3, [sp, #132]	; 0x84
 800903a:	2600      	movs	r6, #0
 800903c:	4f88      	ldr	r7, [pc, #544]	; (8009260 <_strtod_l+0x5dc>)
 800903e:	e668      	b.n	8008d12 <_strtod_l+0x8e>
 8009040:	488a      	ldr	r0, [pc, #552]	; (800926c <_strtod_l+0x5e8>)
 8009042:	f002 fe0f 	bl	800bc64 <nan>
 8009046:	0006      	movs	r6, r0
 8009048:	000f      	movs	r7, r1
 800904a:	e662      	b.n	8008d12 <_strtod_l+0x8e>
 800904c:	9b07      	ldr	r3, [sp, #28]
 800904e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	930a      	str	r3, [sp, #40]	; 0x28
 8009054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <_strtod_l+0x3da>
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	9309      	str	r3, [sp, #36]	; 0x24
 800905e:	9c06      	ldr	r4, [sp, #24]
 8009060:	2c10      	cmp	r4, #16
 8009062:	dd00      	ble.n	8009066 <_strtod_l+0x3e2>
 8009064:	2410      	movs	r4, #16
 8009066:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009068:	f7f9 f880 	bl	800216c <__aeabi_ui2d>
 800906c:	9b06      	ldr	r3, [sp, #24]
 800906e:	0006      	movs	r6, r0
 8009070:	000f      	movs	r7, r1
 8009072:	2b09      	cmp	r3, #9
 8009074:	dd15      	ble.n	80090a2 <_strtod_l+0x41e>
 8009076:	0022      	movs	r2, r4
 8009078:	4b7d      	ldr	r3, [pc, #500]	; (8009270 <_strtod_l+0x5ec>)
 800907a:	3a09      	subs	r2, #9
 800907c:	00d2      	lsls	r2, r2, #3
 800907e:	189b      	adds	r3, r3, r2
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f7f8 f9f0 	bl	8001468 <__aeabi_dmul>
 8009088:	0006      	movs	r6, r0
 800908a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800908c:	000f      	movs	r7, r1
 800908e:	f7f9 f86d 	bl	800216c <__aeabi_ui2d>
 8009092:	0002      	movs	r2, r0
 8009094:	000b      	movs	r3, r1
 8009096:	0030      	movs	r0, r6
 8009098:	0039      	movs	r1, r7
 800909a:	f7f7 fa75 	bl	8000588 <__aeabi_dadd>
 800909e:	0006      	movs	r6, r0
 80090a0:	000f      	movs	r7, r1
 80090a2:	9b06      	ldr	r3, [sp, #24]
 80090a4:	2b0f      	cmp	r3, #15
 80090a6:	dc39      	bgt.n	800911c <_strtod_l+0x498>
 80090a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d100      	bne.n	80090b0 <_strtod_l+0x42c>
 80090ae:	e630      	b.n	8008d12 <_strtod_l+0x8e>
 80090b0:	dd24      	ble.n	80090fc <_strtod_l+0x478>
 80090b2:	2b16      	cmp	r3, #22
 80090b4:	dc09      	bgt.n	80090ca <_strtod_l+0x446>
 80090b6:	00dd      	lsls	r5, r3, #3
 80090b8:	0032      	movs	r2, r6
 80090ba:	003b      	movs	r3, r7
 80090bc:	4c6c      	ldr	r4, [pc, #432]	; (8009270 <_strtod_l+0x5ec>)
 80090be:	1964      	adds	r4, r4, r5
 80090c0:	6820      	ldr	r0, [r4, #0]
 80090c2:	6861      	ldr	r1, [r4, #4]
 80090c4:	f7f8 f9d0 	bl	8001468 <__aeabi_dmul>
 80090c8:	e7bd      	b.n	8009046 <_strtod_l+0x3c2>
 80090ca:	2325      	movs	r3, #37	; 0x25
 80090cc:	9a06      	ldr	r2, [sp, #24]
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090d2:	4293      	cmp	r3, r2
 80090d4:	db22      	blt.n	800911c <_strtod_l+0x498>
 80090d6:	240f      	movs	r4, #15
 80090d8:	9b06      	ldr	r3, [sp, #24]
 80090da:	4d65      	ldr	r5, [pc, #404]	; (8009270 <_strtod_l+0x5ec>)
 80090dc:	1ae4      	subs	r4, r4, r3
 80090de:	00e1      	lsls	r1, r4, #3
 80090e0:	1869      	adds	r1, r5, r1
 80090e2:	0032      	movs	r2, r6
 80090e4:	6808      	ldr	r0, [r1, #0]
 80090e6:	6849      	ldr	r1, [r1, #4]
 80090e8:	003b      	movs	r3, r7
 80090ea:	f7f8 f9bd 	bl	8001468 <__aeabi_dmul>
 80090ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f0:	1b1c      	subs	r4, r3, r4
 80090f2:	00e4      	lsls	r4, r4, #3
 80090f4:	192c      	adds	r4, r5, r4
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	e7e3      	b.n	80090c4 <_strtod_l+0x440>
 80090fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fe:	3316      	adds	r3, #22
 8009100:	db0c      	blt.n	800911c <_strtod_l+0x498>
 8009102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009104:	9a07      	ldr	r2, [sp, #28]
 8009106:	0030      	movs	r0, r6
 8009108:	1a9a      	subs	r2, r3, r2
 800910a:	4b59      	ldr	r3, [pc, #356]	; (8009270 <_strtod_l+0x5ec>)
 800910c:	00d2      	lsls	r2, r2, #3
 800910e:	189b      	adds	r3, r3, r2
 8009110:	0039      	movs	r1, r7
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f7f7 fda1 	bl	8000c5c <__aeabi_ddiv>
 800911a:	e794      	b.n	8009046 <_strtod_l+0x3c2>
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	1b1c      	subs	r4, r3, r4
 8009120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009122:	18e4      	adds	r4, r4, r3
 8009124:	2c00      	cmp	r4, #0
 8009126:	dd70      	ble.n	800920a <_strtod_l+0x586>
 8009128:	230f      	movs	r3, #15
 800912a:	0021      	movs	r1, r4
 800912c:	4019      	ands	r1, r3
 800912e:	421c      	tst	r4, r3
 8009130:	d00a      	beq.n	8009148 <_strtod_l+0x4c4>
 8009132:	00cb      	lsls	r3, r1, #3
 8009134:	494e      	ldr	r1, [pc, #312]	; (8009270 <_strtod_l+0x5ec>)
 8009136:	0032      	movs	r2, r6
 8009138:	18c9      	adds	r1, r1, r3
 800913a:	6808      	ldr	r0, [r1, #0]
 800913c:	6849      	ldr	r1, [r1, #4]
 800913e:	003b      	movs	r3, r7
 8009140:	f7f8 f992 	bl	8001468 <__aeabi_dmul>
 8009144:	0006      	movs	r6, r0
 8009146:	000f      	movs	r7, r1
 8009148:	230f      	movs	r3, #15
 800914a:	439c      	bics	r4, r3
 800914c:	d048      	beq.n	80091e0 <_strtod_l+0x55c>
 800914e:	3326      	adds	r3, #38	; 0x26
 8009150:	33ff      	adds	r3, #255	; 0xff
 8009152:	429c      	cmp	r4, r3
 8009154:	dd22      	ble.n	800919c <_strtod_l+0x518>
 8009156:	2300      	movs	r3, #0
 8009158:	9306      	str	r3, [sp, #24]
 800915a:	9307      	str	r3, [sp, #28]
 800915c:	930b      	str	r3, [sp, #44]	; 0x2c
 800915e:	9309      	str	r3, [sp, #36]	; 0x24
 8009160:	2322      	movs	r3, #34	; 0x22
 8009162:	2600      	movs	r6, #0
 8009164:	9a05      	ldr	r2, [sp, #20]
 8009166:	4f3e      	ldr	r7, [pc, #248]	; (8009260 <_strtod_l+0x5dc>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800916c:	42b3      	cmp	r3, r6
 800916e:	d100      	bne.n	8009172 <_strtod_l+0x4ee>
 8009170:	e5cf      	b.n	8008d12 <_strtod_l+0x8e>
 8009172:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009174:	9805      	ldr	r0, [sp, #20]
 8009176:	f001 fed7 	bl	800af28 <_Bfree>
 800917a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	f001 fed3 	bl	800af28 <_Bfree>
 8009182:	9907      	ldr	r1, [sp, #28]
 8009184:	9805      	ldr	r0, [sp, #20]
 8009186:	f001 fecf 	bl	800af28 <_Bfree>
 800918a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800918c:	9805      	ldr	r0, [sp, #20]
 800918e:	f001 fecb 	bl	800af28 <_Bfree>
 8009192:	9906      	ldr	r1, [sp, #24]
 8009194:	9805      	ldr	r0, [sp, #20]
 8009196:	f001 fec7 	bl	800af28 <_Bfree>
 800919a:	e5ba      	b.n	8008d12 <_strtod_l+0x8e>
 800919c:	2300      	movs	r3, #0
 800919e:	0030      	movs	r0, r6
 80091a0:	0039      	movs	r1, r7
 80091a2:	001d      	movs	r5, r3
 80091a4:	1124      	asrs	r4, r4, #4
 80091a6:	2c01      	cmp	r4, #1
 80091a8:	dc1d      	bgt.n	80091e6 <_strtod_l+0x562>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <_strtod_l+0x52e>
 80091ae:	0006      	movs	r6, r0
 80091b0:	000f      	movs	r7, r1
 80091b2:	4b30      	ldr	r3, [pc, #192]	; (8009274 <_strtod_l+0x5f0>)
 80091b4:	00ed      	lsls	r5, r5, #3
 80091b6:	18ff      	adds	r7, r7, r3
 80091b8:	4b2f      	ldr	r3, [pc, #188]	; (8009278 <_strtod_l+0x5f4>)
 80091ba:	0032      	movs	r2, r6
 80091bc:	195d      	adds	r5, r3, r5
 80091be:	6828      	ldr	r0, [r5, #0]
 80091c0:	6869      	ldr	r1, [r5, #4]
 80091c2:	003b      	movs	r3, r7
 80091c4:	f7f8 f950 	bl	8001468 <__aeabi_dmul>
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <_strtod_l+0x5dc>)
 80091ca:	4a2c      	ldr	r2, [pc, #176]	; (800927c <_strtod_l+0x5f8>)
 80091cc:	0006      	movs	r6, r0
 80091ce:	400b      	ands	r3, r1
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d8c0      	bhi.n	8009156 <_strtod_l+0x4d2>
 80091d4:	4a2a      	ldr	r2, [pc, #168]	; (8009280 <_strtod_l+0x5fc>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d913      	bls.n	8009202 <_strtod_l+0x57e>
 80091da:	2601      	movs	r6, #1
 80091dc:	4f29      	ldr	r7, [pc, #164]	; (8009284 <_strtod_l+0x600>)
 80091de:	4276      	negs	r6, r6
 80091e0:	2300      	movs	r3, #0
 80091e2:	9308      	str	r3, [sp, #32]
 80091e4:	e087      	b.n	80092f6 <_strtod_l+0x672>
 80091e6:	2201      	movs	r2, #1
 80091e8:	4214      	tst	r4, r2
 80091ea:	d007      	beq.n	80091fc <_strtod_l+0x578>
 80091ec:	4a22      	ldr	r2, [pc, #136]	; (8009278 <_strtod_l+0x5f4>)
 80091ee:	00eb      	lsls	r3, r5, #3
 80091f0:	189b      	adds	r3, r3, r2
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f7f8 f937 	bl	8001468 <__aeabi_dmul>
 80091fa:	2301      	movs	r3, #1
 80091fc:	3501      	adds	r5, #1
 80091fe:	1064      	asrs	r4, r4, #1
 8009200:	e7d1      	b.n	80091a6 <_strtod_l+0x522>
 8009202:	23d4      	movs	r3, #212	; 0xd4
 8009204:	049b      	lsls	r3, r3, #18
 8009206:	18cf      	adds	r7, r1, r3
 8009208:	e7ea      	b.n	80091e0 <_strtod_l+0x55c>
 800920a:	2c00      	cmp	r4, #0
 800920c:	d0e8      	beq.n	80091e0 <_strtod_l+0x55c>
 800920e:	4264      	negs	r4, r4
 8009210:	220f      	movs	r2, #15
 8009212:	0023      	movs	r3, r4
 8009214:	4013      	ands	r3, r2
 8009216:	4214      	tst	r4, r2
 8009218:	d00a      	beq.n	8009230 <_strtod_l+0x5ac>
 800921a:	00da      	lsls	r2, r3, #3
 800921c:	4b14      	ldr	r3, [pc, #80]	; (8009270 <_strtod_l+0x5ec>)
 800921e:	0030      	movs	r0, r6
 8009220:	189b      	adds	r3, r3, r2
 8009222:	0039      	movs	r1, r7
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f7f7 fd18 	bl	8000c5c <__aeabi_ddiv>
 800922c:	0006      	movs	r6, r0
 800922e:	000f      	movs	r7, r1
 8009230:	1124      	asrs	r4, r4, #4
 8009232:	d0d5      	beq.n	80091e0 <_strtod_l+0x55c>
 8009234:	2c1f      	cmp	r4, #31
 8009236:	dd27      	ble.n	8009288 <_strtod_l+0x604>
 8009238:	2300      	movs	r3, #0
 800923a:	9306      	str	r3, [sp, #24]
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009240:	9309      	str	r3, [sp, #36]	; 0x24
 8009242:	2322      	movs	r3, #34	; 0x22
 8009244:	9a05      	ldr	r2, [sp, #20]
 8009246:	2600      	movs	r6, #0
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800924c:	2700      	movs	r7, #0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d18f      	bne.n	8009172 <_strtod_l+0x4ee>
 8009252:	e55e      	b.n	8008d12 <_strtod_l+0x8e>
 8009254:	00004e1f 	.word	0x00004e1f
 8009258:	0800c9e1 	.word	0x0800c9e1
 800925c:	0800ca24 	.word	0x0800ca24
 8009260:	7ff00000 	.word	0x7ff00000
 8009264:	0800c9d9 	.word	0x0800c9d9
 8009268:	0800cb64 	.word	0x0800cb64
 800926c:	0800ce20 	.word	0x0800ce20
 8009270:	0800cd00 	.word	0x0800cd00
 8009274:	fcb00000 	.word	0xfcb00000
 8009278:	0800ccd8 	.word	0x0800ccd8
 800927c:	7ca00000 	.word	0x7ca00000
 8009280:	7c900000 	.word	0x7c900000
 8009284:	7fefffff 	.word	0x7fefffff
 8009288:	2310      	movs	r3, #16
 800928a:	0022      	movs	r2, r4
 800928c:	401a      	ands	r2, r3
 800928e:	9208      	str	r2, [sp, #32]
 8009290:	421c      	tst	r4, r3
 8009292:	d001      	beq.n	8009298 <_strtod_l+0x614>
 8009294:	335a      	adds	r3, #90	; 0x5a
 8009296:	9308      	str	r3, [sp, #32]
 8009298:	0030      	movs	r0, r6
 800929a:	0039      	movs	r1, r7
 800929c:	2300      	movs	r3, #0
 800929e:	4dca      	ldr	r5, [pc, #808]	; (80095c8 <_strtod_l+0x944>)
 80092a0:	2201      	movs	r2, #1
 80092a2:	4214      	tst	r4, r2
 80092a4:	d004      	beq.n	80092b0 <_strtod_l+0x62c>
 80092a6:	682a      	ldr	r2, [r5, #0]
 80092a8:	686b      	ldr	r3, [r5, #4]
 80092aa:	f7f8 f8dd 	bl	8001468 <__aeabi_dmul>
 80092ae:	2301      	movs	r3, #1
 80092b0:	1064      	asrs	r4, r4, #1
 80092b2:	3508      	adds	r5, #8
 80092b4:	2c00      	cmp	r4, #0
 80092b6:	d1f3      	bne.n	80092a0 <_strtod_l+0x61c>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <_strtod_l+0x63c>
 80092bc:	0006      	movs	r6, r0
 80092be:	000f      	movs	r7, r1
 80092c0:	9b08      	ldr	r3, [sp, #32]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00f      	beq.n	80092e6 <_strtod_l+0x662>
 80092c6:	236b      	movs	r3, #107	; 0x6b
 80092c8:	0079      	lsls	r1, r7, #1
 80092ca:	0d49      	lsrs	r1, r1, #21
 80092cc:	003a      	movs	r2, r7
 80092ce:	1a5b      	subs	r3, r3, r1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dd08      	ble.n	80092e6 <_strtod_l+0x662>
 80092d4:	2b1f      	cmp	r3, #31
 80092d6:	dc00      	bgt.n	80092da <_strtod_l+0x656>
 80092d8:	e126      	b.n	8009528 <_strtod_l+0x8a4>
 80092da:	2600      	movs	r6, #0
 80092dc:	2b34      	cmp	r3, #52	; 0x34
 80092de:	dc00      	bgt.n	80092e2 <_strtod_l+0x65e>
 80092e0:	e11b      	b.n	800951a <_strtod_l+0x896>
 80092e2:	27dc      	movs	r7, #220	; 0xdc
 80092e4:	04bf      	lsls	r7, r7, #18
 80092e6:	2200      	movs	r2, #0
 80092e8:	2300      	movs	r3, #0
 80092ea:	0030      	movs	r0, r6
 80092ec:	0039      	movs	r1, r7
 80092ee:	f7f7 f8ad 	bl	800044c <__aeabi_dcmpeq>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d1a0      	bne.n	8009238 <_strtod_l+0x5b4>
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80092fe:	9b06      	ldr	r3, [sp, #24]
 8009300:	9805      	ldr	r0, [sp, #20]
 8009302:	f001 fe79 	bl	800aff8 <__s2b>
 8009306:	900b      	str	r0, [sp, #44]	; 0x2c
 8009308:	2800      	cmp	r0, #0
 800930a:	d100      	bne.n	800930e <_strtod_l+0x68a>
 800930c:	e723      	b.n	8009156 <_strtod_l+0x4d2>
 800930e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009310:	9907      	ldr	r1, [sp, #28]
 8009312:	17da      	asrs	r2, r3, #31
 8009314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009316:	1a5b      	subs	r3, r3, r1
 8009318:	401a      	ands	r2, r3
 800931a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931c:	9215      	str	r2, [sp, #84]	; 0x54
 800931e:	43db      	mvns	r3, r3
 8009320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009322:	17db      	asrs	r3, r3, #31
 8009324:	401a      	ands	r2, r3
 8009326:	2300      	movs	r3, #0
 8009328:	921c      	str	r2, [sp, #112]	; 0x70
 800932a:	9306      	str	r3, [sp, #24]
 800932c:	9307      	str	r3, [sp, #28]
 800932e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009330:	9805      	ldr	r0, [sp, #20]
 8009332:	6859      	ldr	r1, [r3, #4]
 8009334:	f001 fdb4 	bl	800aea0 <_Balloc>
 8009338:	9009      	str	r0, [sp, #36]	; 0x24
 800933a:	2800      	cmp	r0, #0
 800933c:	d100      	bne.n	8009340 <_strtod_l+0x6bc>
 800933e:	e70f      	b.n	8009160 <_strtod_l+0x4dc>
 8009340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	310c      	adds	r1, #12
 8009348:	1c9a      	adds	r2, r3, #2
 800934a:	0092      	lsls	r2, r2, #2
 800934c:	300c      	adds	r0, #12
 800934e:	930c      	str	r3, [sp, #48]	; 0x30
 8009350:	f001 fd9d 	bl	800ae8e <memcpy>
 8009354:	ab24      	add	r3, sp, #144	; 0x90
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	ab23      	add	r3, sp, #140	; 0x8c
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	0032      	movs	r2, r6
 800935e:	003b      	movs	r3, r7
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	960e      	str	r6, [sp, #56]	; 0x38
 8009364:	970f      	str	r7, [sp, #60]	; 0x3c
 8009366:	f002 f995 	bl	800b694 <__d2b>
 800936a:	9022      	str	r0, [sp, #136]	; 0x88
 800936c:	2800      	cmp	r0, #0
 800936e:	d100      	bne.n	8009372 <_strtod_l+0x6ee>
 8009370:	e6f6      	b.n	8009160 <_strtod_l+0x4dc>
 8009372:	2101      	movs	r1, #1
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	f001 fed3 	bl	800b120 <__i2b>
 800937a:	9007      	str	r0, [sp, #28]
 800937c:	2800      	cmp	r0, #0
 800937e:	d100      	bne.n	8009382 <_strtod_l+0x6fe>
 8009380:	e6ee      	b.n	8009160 <_strtod_l+0x4dc>
 8009382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009384:	2b00      	cmp	r3, #0
 8009386:	da00      	bge.n	800938a <_strtod_l+0x706>
 8009388:	e0d3      	b.n	8009532 <_strtod_l+0x8ae>
 800938a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800938c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800938e:	189d      	adds	r5, r3, r2
 8009390:	9908      	ldr	r1, [sp, #32]
 8009392:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009394:	1a5b      	subs	r3, r3, r1
 8009396:	2136      	movs	r1, #54	; 0x36
 8009398:	189b      	adds	r3, r3, r2
 800939a:	1a8a      	subs	r2, r1, r2
 800939c:	498b      	ldr	r1, [pc, #556]	; (80095cc <_strtod_l+0x948>)
 800939e:	3b01      	subs	r3, #1
 80093a0:	2001      	movs	r0, #1
 80093a2:	428b      	cmp	r3, r1
 80093a4:	db00      	blt.n	80093a8 <_strtod_l+0x724>
 80093a6:	e0cf      	b.n	8009548 <_strtod_l+0x8c4>
 80093a8:	1ac9      	subs	r1, r1, r3
 80093aa:	1a52      	subs	r2, r2, r1
 80093ac:	291f      	cmp	r1, #31
 80093ae:	dd00      	ble.n	80093b2 <_strtod_l+0x72e>
 80093b0:	e0c3      	b.n	800953a <_strtod_l+0x8b6>
 80093b2:	4088      	lsls	r0, r1
 80093b4:	2300      	movs	r3, #0
 80093b6:	9014      	str	r0, [sp, #80]	; 0x50
 80093b8:	9312      	str	r3, [sp, #72]	; 0x48
 80093ba:	18ab      	adds	r3, r5, r2
 80093bc:	930c      	str	r3, [sp, #48]	; 0x30
 80093be:	18a4      	adds	r4, r4, r2
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093c4:	191c      	adds	r4, r3, r4
 80093c6:	002b      	movs	r3, r5
 80093c8:	4295      	cmp	r5, r2
 80093ca:	dd00      	ble.n	80093ce <_strtod_l+0x74a>
 80093cc:	0013      	movs	r3, r2
 80093ce:	42a3      	cmp	r3, r4
 80093d0:	dd00      	ble.n	80093d4 <_strtod_l+0x750>
 80093d2:	0023      	movs	r3, r4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd04      	ble.n	80093e2 <_strtod_l+0x75e>
 80093d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093da:	1ae4      	subs	r4, r4, r3
 80093dc:	1ad2      	subs	r2, r2, r3
 80093de:	920c      	str	r2, [sp, #48]	; 0x30
 80093e0:	1aed      	subs	r5, r5, r3
 80093e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dd17      	ble.n	8009418 <_strtod_l+0x794>
 80093e8:	001a      	movs	r2, r3
 80093ea:	9907      	ldr	r1, [sp, #28]
 80093ec:	9805      	ldr	r0, [sp, #20]
 80093ee:	f001 ff5d 	bl	800b2ac <__pow5mult>
 80093f2:	9007      	str	r0, [sp, #28]
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d100      	bne.n	80093fa <_strtod_l+0x776>
 80093f8:	e6b2      	b.n	8009160 <_strtod_l+0x4dc>
 80093fa:	0001      	movs	r1, r0
 80093fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093fe:	9805      	ldr	r0, [sp, #20]
 8009400:	f001 fea4 	bl	800b14c <__multiply>
 8009404:	9011      	str	r0, [sp, #68]	; 0x44
 8009406:	2800      	cmp	r0, #0
 8009408:	d100      	bne.n	800940c <_strtod_l+0x788>
 800940a:	e6a9      	b.n	8009160 <_strtod_l+0x4dc>
 800940c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800940e:	9805      	ldr	r0, [sp, #20]
 8009410:	f001 fd8a 	bl	800af28 <_Bfree>
 8009414:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009416:	9322      	str	r3, [sp, #136]	; 0x88
 8009418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd00      	ble.n	8009420 <_strtod_l+0x79c>
 800941e:	e096      	b.n	800954e <_strtod_l+0x8ca>
 8009420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd08      	ble.n	8009438 <_strtod_l+0x7b4>
 8009426:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800942a:	9805      	ldr	r0, [sp, #20]
 800942c:	f001 ff3e 	bl	800b2ac <__pow5mult>
 8009430:	9009      	str	r0, [sp, #36]	; 0x24
 8009432:	2800      	cmp	r0, #0
 8009434:	d100      	bne.n	8009438 <_strtod_l+0x7b4>
 8009436:	e693      	b.n	8009160 <_strtod_l+0x4dc>
 8009438:	2c00      	cmp	r4, #0
 800943a:	dd08      	ble.n	800944e <_strtod_l+0x7ca>
 800943c:	0022      	movs	r2, r4
 800943e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009440:	9805      	ldr	r0, [sp, #20]
 8009442:	f001 ff8f 	bl	800b364 <__lshift>
 8009446:	9009      	str	r0, [sp, #36]	; 0x24
 8009448:	2800      	cmp	r0, #0
 800944a:	d100      	bne.n	800944e <_strtod_l+0x7ca>
 800944c:	e688      	b.n	8009160 <_strtod_l+0x4dc>
 800944e:	2d00      	cmp	r5, #0
 8009450:	dd08      	ble.n	8009464 <_strtod_l+0x7e0>
 8009452:	002a      	movs	r2, r5
 8009454:	9907      	ldr	r1, [sp, #28]
 8009456:	9805      	ldr	r0, [sp, #20]
 8009458:	f001 ff84 	bl	800b364 <__lshift>
 800945c:	9007      	str	r0, [sp, #28]
 800945e:	2800      	cmp	r0, #0
 8009460:	d100      	bne.n	8009464 <_strtod_l+0x7e0>
 8009462:	e67d      	b.n	8009160 <_strtod_l+0x4dc>
 8009464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009466:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009468:	9805      	ldr	r0, [sp, #20]
 800946a:	f002 f807 	bl	800b47c <__mdiff>
 800946e:	9006      	str	r0, [sp, #24]
 8009470:	2800      	cmp	r0, #0
 8009472:	d100      	bne.n	8009476 <_strtod_l+0x7f2>
 8009474:	e674      	b.n	8009160 <_strtod_l+0x4dc>
 8009476:	2200      	movs	r2, #0
 8009478:	68c3      	ldr	r3, [r0, #12]
 800947a:	9907      	ldr	r1, [sp, #28]
 800947c:	60c2      	str	r2, [r0, #12]
 800947e:	9311      	str	r3, [sp, #68]	; 0x44
 8009480:	f001 ffe0 	bl	800b444 <__mcmp>
 8009484:	2800      	cmp	r0, #0
 8009486:	da6c      	bge.n	8009562 <_strtod_l+0x8de>
 8009488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800948a:	4333      	orrs	r3, r6
 800948c:	d000      	beq.n	8009490 <_strtod_l+0x80c>
 800948e:	e097      	b.n	80095c0 <_strtod_l+0x93c>
 8009490:	033b      	lsls	r3, r7, #12
 8009492:	d000      	beq.n	8009496 <_strtod_l+0x812>
 8009494:	e094      	b.n	80095c0 <_strtod_l+0x93c>
 8009496:	22d6      	movs	r2, #214	; 0xd6
 8009498:	4b4d      	ldr	r3, [pc, #308]	; (80095d0 <_strtod_l+0x94c>)
 800949a:	04d2      	lsls	r2, r2, #19
 800949c:	403b      	ands	r3, r7
 800949e:	4293      	cmp	r3, r2
 80094a0:	d800      	bhi.n	80094a4 <_strtod_l+0x820>
 80094a2:	e08d      	b.n	80095c0 <_strtod_l+0x93c>
 80094a4:	9b06      	ldr	r3, [sp, #24]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	930a      	str	r3, [sp, #40]	; 0x28
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d105      	bne.n	80094ba <_strtod_l+0x836>
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	dc00      	bgt.n	80094ba <_strtod_l+0x836>
 80094b8:	e082      	b.n	80095c0 <_strtod_l+0x93c>
 80094ba:	9906      	ldr	r1, [sp, #24]
 80094bc:	2201      	movs	r2, #1
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	f001 ff50 	bl	800b364 <__lshift>
 80094c4:	9907      	ldr	r1, [sp, #28]
 80094c6:	9006      	str	r0, [sp, #24]
 80094c8:	f001 ffbc 	bl	800b444 <__mcmp>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	dd77      	ble.n	80095c0 <_strtod_l+0x93c>
 80094d0:	9908      	ldr	r1, [sp, #32]
 80094d2:	003b      	movs	r3, r7
 80094d4:	4a3e      	ldr	r2, [pc, #248]	; (80095d0 <_strtod_l+0x94c>)
 80094d6:	2900      	cmp	r1, #0
 80094d8:	d100      	bne.n	80094dc <_strtod_l+0x858>
 80094da:	e09e      	b.n	800961a <_strtod_l+0x996>
 80094dc:	0011      	movs	r1, r2
 80094de:	20d6      	movs	r0, #214	; 0xd6
 80094e0:	4039      	ands	r1, r7
 80094e2:	04c0      	lsls	r0, r0, #19
 80094e4:	4281      	cmp	r1, r0
 80094e6:	dd00      	ble.n	80094ea <_strtod_l+0x866>
 80094e8:	e097      	b.n	800961a <_strtod_l+0x996>
 80094ea:	23dc      	movs	r3, #220	; 0xdc
 80094ec:	049b      	lsls	r3, r3, #18
 80094ee:	4299      	cmp	r1, r3
 80094f0:	dc00      	bgt.n	80094f4 <_strtod_l+0x870>
 80094f2:	e6a6      	b.n	8009242 <_strtod_l+0x5be>
 80094f4:	4b37      	ldr	r3, [pc, #220]	; (80095d4 <_strtod_l+0x950>)
 80094f6:	0030      	movs	r0, r6
 80094f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80094fa:	2300      	movs	r3, #0
 80094fc:	931a      	str	r3, [sp, #104]	; 0x68
 80094fe:	0039      	movs	r1, r7
 8009500:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009502:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009504:	f7f7 ffb0 	bl	8001468 <__aeabi_dmul>
 8009508:	0006      	movs	r6, r0
 800950a:	000f      	movs	r7, r1
 800950c:	4308      	orrs	r0, r1
 800950e:	d000      	beq.n	8009512 <_strtod_l+0x88e>
 8009510:	e62f      	b.n	8009172 <_strtod_l+0x4ee>
 8009512:	2322      	movs	r3, #34	; 0x22
 8009514:	9a05      	ldr	r2, [sp, #20]
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	e62b      	b.n	8009172 <_strtod_l+0x4ee>
 800951a:	2101      	movs	r1, #1
 800951c:	3b20      	subs	r3, #32
 800951e:	4249      	negs	r1, r1
 8009520:	4099      	lsls	r1, r3
 8009522:	400a      	ands	r2, r1
 8009524:	0017      	movs	r7, r2
 8009526:	e6de      	b.n	80092e6 <_strtod_l+0x662>
 8009528:	2201      	movs	r2, #1
 800952a:	4252      	negs	r2, r2
 800952c:	409a      	lsls	r2, r3
 800952e:	4016      	ands	r6, r2
 8009530:	e6d9      	b.n	80092e6 <_strtod_l+0x662>
 8009532:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009534:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009536:	1ad4      	subs	r4, r2, r3
 8009538:	e72a      	b.n	8009390 <_strtod_l+0x70c>
 800953a:	4927      	ldr	r1, [pc, #156]	; (80095d8 <_strtod_l+0x954>)
 800953c:	1acb      	subs	r3, r1, r3
 800953e:	0001      	movs	r1, r0
 8009540:	4099      	lsls	r1, r3
 8009542:	9112      	str	r1, [sp, #72]	; 0x48
 8009544:	9014      	str	r0, [sp, #80]	; 0x50
 8009546:	e738      	b.n	80093ba <_strtod_l+0x736>
 8009548:	2300      	movs	r3, #0
 800954a:	9312      	str	r3, [sp, #72]	; 0x48
 800954c:	e7fa      	b.n	8009544 <_strtod_l+0x8c0>
 800954e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009550:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009552:	9805      	ldr	r0, [sp, #20]
 8009554:	f001 ff06 	bl	800b364 <__lshift>
 8009558:	9022      	str	r0, [sp, #136]	; 0x88
 800955a:	2800      	cmp	r0, #0
 800955c:	d000      	beq.n	8009560 <_strtod_l+0x8dc>
 800955e:	e75f      	b.n	8009420 <_strtod_l+0x79c>
 8009560:	e5fe      	b.n	8009160 <_strtod_l+0x4dc>
 8009562:	970c      	str	r7, [sp, #48]	; 0x30
 8009564:	2800      	cmp	r0, #0
 8009566:	d176      	bne.n	8009656 <_strtod_l+0x9d2>
 8009568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800956a:	033b      	lsls	r3, r7, #12
 800956c:	0b1b      	lsrs	r3, r3, #12
 800956e:	2a00      	cmp	r2, #0
 8009570:	d038      	beq.n	80095e4 <_strtod_l+0x960>
 8009572:	4a1a      	ldr	r2, [pc, #104]	; (80095dc <_strtod_l+0x958>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d138      	bne.n	80095ea <_strtod_l+0x966>
 8009578:	2201      	movs	r2, #1
 800957a:	9b08      	ldr	r3, [sp, #32]
 800957c:	4252      	negs	r2, r2
 800957e:	0031      	movs	r1, r6
 8009580:	0010      	movs	r0, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00b      	beq.n	800959e <_strtod_l+0x91a>
 8009586:	24d4      	movs	r4, #212	; 0xd4
 8009588:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <_strtod_l+0x94c>)
 800958a:	0010      	movs	r0, r2
 800958c:	403b      	ands	r3, r7
 800958e:	04e4      	lsls	r4, r4, #19
 8009590:	42a3      	cmp	r3, r4
 8009592:	d804      	bhi.n	800959e <_strtod_l+0x91a>
 8009594:	306c      	adds	r0, #108	; 0x6c
 8009596:	0d1b      	lsrs	r3, r3, #20
 8009598:	1ac3      	subs	r3, r0, r3
 800959a:	409a      	lsls	r2, r3
 800959c:	0010      	movs	r0, r2
 800959e:	4281      	cmp	r1, r0
 80095a0:	d123      	bne.n	80095ea <_strtod_l+0x966>
 80095a2:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <_strtod_l+0x95c>)
 80095a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d102      	bne.n	80095b0 <_strtod_l+0x92c>
 80095aa:	1c4b      	adds	r3, r1, #1
 80095ac:	d100      	bne.n	80095b0 <_strtod_l+0x92c>
 80095ae:	e5d7      	b.n	8009160 <_strtod_l+0x4dc>
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <_strtod_l+0x94c>)
 80095b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095b4:	2600      	movs	r6, #0
 80095b6:	401a      	ands	r2, r3
 80095b8:	0013      	movs	r3, r2
 80095ba:	2280      	movs	r2, #128	; 0x80
 80095bc:	0352      	lsls	r2, r2, #13
 80095be:	189f      	adds	r7, r3, r2
 80095c0:	9b08      	ldr	r3, [sp, #32]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d196      	bne.n	80094f4 <_strtod_l+0x870>
 80095c6:	e5d4      	b.n	8009172 <_strtod_l+0x4ee>
 80095c8:	0800ca38 	.word	0x0800ca38
 80095cc:	fffffc02 	.word	0xfffffc02
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	39500000 	.word	0x39500000
 80095d8:	fffffbe2 	.word	0xfffffbe2
 80095dc:	000fffff 	.word	0x000fffff
 80095e0:	7fefffff 	.word	0x7fefffff
 80095e4:	4333      	orrs	r3, r6
 80095e6:	d100      	bne.n	80095ea <_strtod_l+0x966>
 80095e8:	e772      	b.n	80094d0 <_strtod_l+0x84c>
 80095ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01d      	beq.n	800962c <_strtod_l+0x9a8>
 80095f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f4:	4213      	tst	r3, r2
 80095f6:	d0e3      	beq.n	80095c0 <_strtod_l+0x93c>
 80095f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095fa:	0030      	movs	r0, r6
 80095fc:	0039      	movs	r1, r7
 80095fe:	9a08      	ldr	r2, [sp, #32]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d017      	beq.n	8009634 <_strtod_l+0x9b0>
 8009604:	f7ff fb26 	bl	8008c54 <sulp>
 8009608:	0002      	movs	r2, r0
 800960a:	000b      	movs	r3, r1
 800960c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800960e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009610:	f7f6 ffba 	bl	8000588 <__aeabi_dadd>
 8009614:	0006      	movs	r6, r0
 8009616:	000f      	movs	r7, r1
 8009618:	e7d2      	b.n	80095c0 <_strtod_l+0x93c>
 800961a:	2601      	movs	r6, #1
 800961c:	4013      	ands	r3, r2
 800961e:	4a9b      	ldr	r2, [pc, #620]	; (800988c <_strtod_l+0xc08>)
 8009620:	4276      	negs	r6, r6
 8009622:	189b      	adds	r3, r3, r2
 8009624:	4a9a      	ldr	r2, [pc, #616]	; (8009890 <_strtod_l+0xc0c>)
 8009626:	431a      	orrs	r2, r3
 8009628:	0017      	movs	r7, r2
 800962a:	e7c9      	b.n	80095c0 <_strtod_l+0x93c>
 800962c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800962e:	4233      	tst	r3, r6
 8009630:	d0c6      	beq.n	80095c0 <_strtod_l+0x93c>
 8009632:	e7e1      	b.n	80095f8 <_strtod_l+0x974>
 8009634:	f7ff fb0e 	bl	8008c54 <sulp>
 8009638:	0002      	movs	r2, r0
 800963a:	000b      	movs	r3, r1
 800963c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800963e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009640:	f7f8 f97e 	bl	8001940 <__aeabi_dsub>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	0006      	movs	r6, r0
 800964a:	000f      	movs	r7, r1
 800964c:	f7f6 fefe 	bl	800044c <__aeabi_dcmpeq>
 8009650:	2800      	cmp	r0, #0
 8009652:	d0b5      	beq.n	80095c0 <_strtod_l+0x93c>
 8009654:	e5f5      	b.n	8009242 <_strtod_l+0x5be>
 8009656:	9907      	ldr	r1, [sp, #28]
 8009658:	9806      	ldr	r0, [sp, #24]
 800965a:	f002 f87f 	bl	800b75c <__ratio>
 800965e:	2380      	movs	r3, #128	; 0x80
 8009660:	2200      	movs	r2, #0
 8009662:	05db      	lsls	r3, r3, #23
 8009664:	0004      	movs	r4, r0
 8009666:	000d      	movs	r5, r1
 8009668:	f7f6 ff00 	bl	800046c <__aeabi_dcmple>
 800966c:	2800      	cmp	r0, #0
 800966e:	d079      	beq.n	8009764 <_strtod_l+0xae0>
 8009670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009672:	2b00      	cmp	r3, #0
 8009674:	d04b      	beq.n	800970e <_strtod_l+0xa8a>
 8009676:	2300      	movs	r3, #0
 8009678:	4c86      	ldr	r4, [pc, #536]	; (8009894 <_strtod_l+0xc10>)
 800967a:	2500      	movs	r5, #0
 800967c:	9312      	str	r3, [sp, #72]	; 0x48
 800967e:	9413      	str	r4, [sp, #76]	; 0x4c
 8009680:	4c84      	ldr	r4, [pc, #528]	; (8009894 <_strtod_l+0xc10>)
 8009682:	4a85      	ldr	r2, [pc, #532]	; (8009898 <_strtod_l+0xc14>)
 8009684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009686:	4013      	ands	r3, r2
 8009688:	9314      	str	r3, [sp, #80]	; 0x50
 800968a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800968c:	4b83      	ldr	r3, [pc, #524]	; (800989c <_strtod_l+0xc18>)
 800968e:	429a      	cmp	r2, r3
 8009690:	d000      	beq.n	8009694 <_strtod_l+0xa10>
 8009692:	e0b0      	b.n	80097f6 <_strtod_l+0xb72>
 8009694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009698:	921a      	str	r2, [sp, #104]	; 0x68
 800969a:	931b      	str	r3, [sp, #108]	; 0x6c
 800969c:	4a80      	ldr	r2, [pc, #512]	; (80098a0 <_strtod_l+0xc1c>)
 800969e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a0:	4694      	mov	ip, r2
 80096a2:	4463      	add	r3, ip
 80096a4:	001f      	movs	r7, r3
 80096a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096aa:	0030      	movs	r0, r6
 80096ac:	0039      	movs	r1, r7
 80096ae:	920c      	str	r2, [sp, #48]	; 0x30
 80096b0:	930d      	str	r3, [sp, #52]	; 0x34
 80096b2:	f001 ff7b 	bl	800b5ac <__ulp>
 80096b6:	0002      	movs	r2, r0
 80096b8:	000b      	movs	r3, r1
 80096ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80096be:	f7f7 fed3 	bl	8001468 <__aeabi_dmul>
 80096c2:	0032      	movs	r2, r6
 80096c4:	003b      	movs	r3, r7
 80096c6:	f7f6 ff5f 	bl	8000588 <__aeabi_dadd>
 80096ca:	4a73      	ldr	r2, [pc, #460]	; (8009898 <_strtod_l+0xc14>)
 80096cc:	4b75      	ldr	r3, [pc, #468]	; (80098a4 <_strtod_l+0xc20>)
 80096ce:	0006      	movs	r6, r0
 80096d0:	400a      	ands	r2, r1
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d95e      	bls.n	8009794 <_strtod_l+0xb10>
 80096d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d8:	4a73      	ldr	r2, [pc, #460]	; (80098a8 <_strtod_l+0xc24>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d103      	bne.n	80096e6 <_strtod_l+0xa62>
 80096de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e0:	3301      	adds	r3, #1
 80096e2:	d100      	bne.n	80096e6 <_strtod_l+0xa62>
 80096e4:	e53c      	b.n	8009160 <_strtod_l+0x4dc>
 80096e6:	2601      	movs	r6, #1
 80096e8:	4f6f      	ldr	r7, [pc, #444]	; (80098a8 <_strtod_l+0xc24>)
 80096ea:	4276      	negs	r6, r6
 80096ec:	9922      	ldr	r1, [sp, #136]	; 0x88
 80096ee:	9805      	ldr	r0, [sp, #20]
 80096f0:	f001 fc1a 	bl	800af28 <_Bfree>
 80096f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096f6:	9805      	ldr	r0, [sp, #20]
 80096f8:	f001 fc16 	bl	800af28 <_Bfree>
 80096fc:	9907      	ldr	r1, [sp, #28]
 80096fe:	9805      	ldr	r0, [sp, #20]
 8009700:	f001 fc12 	bl	800af28 <_Bfree>
 8009704:	9906      	ldr	r1, [sp, #24]
 8009706:	9805      	ldr	r0, [sp, #20]
 8009708:	f001 fc0e 	bl	800af28 <_Bfree>
 800970c:	e60f      	b.n	800932e <_strtod_l+0x6aa>
 800970e:	2e00      	cmp	r6, #0
 8009710:	d11c      	bne.n	800974c <_strtod_l+0xac8>
 8009712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009714:	031b      	lsls	r3, r3, #12
 8009716:	d11f      	bne.n	8009758 <_strtod_l+0xad4>
 8009718:	2200      	movs	r2, #0
 800971a:	0020      	movs	r0, r4
 800971c:	0029      	movs	r1, r5
 800971e:	4b5d      	ldr	r3, [pc, #372]	; (8009894 <_strtod_l+0xc10>)
 8009720:	f7f6 fe9a 	bl	8000458 <__aeabi_dcmplt>
 8009724:	2800      	cmp	r0, #0
 8009726:	d11a      	bne.n	800975e <_strtod_l+0xada>
 8009728:	0020      	movs	r0, r4
 800972a:	0029      	movs	r1, r5
 800972c:	2200      	movs	r2, #0
 800972e:	4b5f      	ldr	r3, [pc, #380]	; (80098ac <_strtod_l+0xc28>)
 8009730:	f7f7 fe9a 	bl	8001468 <__aeabi_dmul>
 8009734:	0005      	movs	r5, r0
 8009736:	000c      	movs	r4, r1
 8009738:	2380      	movs	r3, #128	; 0x80
 800973a:	061b      	lsls	r3, r3, #24
 800973c:	18e3      	adds	r3, r4, r3
 800973e:	951e      	str	r5, [sp, #120]	; 0x78
 8009740:	931f      	str	r3, [sp, #124]	; 0x7c
 8009742:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009744:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009746:	9212      	str	r2, [sp, #72]	; 0x48
 8009748:	9313      	str	r3, [sp, #76]	; 0x4c
 800974a:	e79a      	b.n	8009682 <_strtod_l+0x9fe>
 800974c:	2e01      	cmp	r6, #1
 800974e:	d103      	bne.n	8009758 <_strtod_l+0xad4>
 8009750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009752:	2b00      	cmp	r3, #0
 8009754:	d100      	bne.n	8009758 <_strtod_l+0xad4>
 8009756:	e574      	b.n	8009242 <_strtod_l+0x5be>
 8009758:	2300      	movs	r3, #0
 800975a:	4c55      	ldr	r4, [pc, #340]	; (80098b0 <_strtod_l+0xc2c>)
 800975c:	e78d      	b.n	800967a <_strtod_l+0x9f6>
 800975e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009760:	4c52      	ldr	r4, [pc, #328]	; (80098ac <_strtod_l+0xc28>)
 8009762:	e7e9      	b.n	8009738 <_strtod_l+0xab4>
 8009764:	2200      	movs	r2, #0
 8009766:	0020      	movs	r0, r4
 8009768:	0029      	movs	r1, r5
 800976a:	4b50      	ldr	r3, [pc, #320]	; (80098ac <_strtod_l+0xc28>)
 800976c:	f7f7 fe7c 	bl	8001468 <__aeabi_dmul>
 8009770:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009772:	0005      	movs	r5, r0
 8009774:	000b      	movs	r3, r1
 8009776:	000c      	movs	r4, r1
 8009778:	2a00      	cmp	r2, #0
 800977a:	d107      	bne.n	800978c <_strtod_l+0xb08>
 800977c:	2280      	movs	r2, #128	; 0x80
 800977e:	0612      	lsls	r2, r2, #24
 8009780:	188b      	adds	r3, r1, r2
 8009782:	9016      	str	r0, [sp, #88]	; 0x58
 8009784:	9317      	str	r3, [sp, #92]	; 0x5c
 8009786:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800978a:	e7dc      	b.n	8009746 <_strtod_l+0xac2>
 800978c:	0002      	movs	r2, r0
 800978e:	9216      	str	r2, [sp, #88]	; 0x58
 8009790:	9317      	str	r3, [sp, #92]	; 0x5c
 8009792:	e7f8      	b.n	8009786 <_strtod_l+0xb02>
 8009794:	23d4      	movs	r3, #212	; 0xd4
 8009796:	049b      	lsls	r3, r3, #18
 8009798:	18cf      	adds	r7, r1, r3
 800979a:	9b08      	ldr	r3, [sp, #32]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1a5      	bne.n	80096ec <_strtod_l+0xa68>
 80097a0:	4b3d      	ldr	r3, [pc, #244]	; (8009898 <_strtod_l+0xc14>)
 80097a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097a4:	403b      	ands	r3, r7
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d1a0      	bne.n	80096ec <_strtod_l+0xa68>
 80097aa:	0028      	movs	r0, r5
 80097ac:	0021      	movs	r1, r4
 80097ae:	f7f6 fe99 	bl	80004e4 <__aeabi_d2lz>
 80097b2:	f7f6 fed3 	bl	800055c <__aeabi_l2d>
 80097b6:	0002      	movs	r2, r0
 80097b8:	000b      	movs	r3, r1
 80097ba:	0028      	movs	r0, r5
 80097bc:	0021      	movs	r1, r4
 80097be:	f7f8 f8bf 	bl	8001940 <__aeabi_dsub>
 80097c2:	033b      	lsls	r3, r7, #12
 80097c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097c6:	0b1b      	lsrs	r3, r3, #12
 80097c8:	4333      	orrs	r3, r6
 80097ca:	4313      	orrs	r3, r2
 80097cc:	0004      	movs	r4, r0
 80097ce:	000d      	movs	r5, r1
 80097d0:	4a38      	ldr	r2, [pc, #224]	; (80098b4 <_strtod_l+0xc30>)
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d055      	beq.n	8009882 <_strtod_l+0xbfe>
 80097d6:	4b38      	ldr	r3, [pc, #224]	; (80098b8 <_strtod_l+0xc34>)
 80097d8:	f7f6 fe3e 	bl	8000458 <__aeabi_dcmplt>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d000      	beq.n	80097e2 <_strtod_l+0xb5e>
 80097e0:	e4c7      	b.n	8009172 <_strtod_l+0x4ee>
 80097e2:	0020      	movs	r0, r4
 80097e4:	0029      	movs	r1, r5
 80097e6:	4a35      	ldr	r2, [pc, #212]	; (80098bc <_strtod_l+0xc38>)
 80097e8:	4b30      	ldr	r3, [pc, #192]	; (80098ac <_strtod_l+0xc28>)
 80097ea:	f7f6 fe49 	bl	8000480 <__aeabi_dcmpgt>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d100      	bne.n	80097f4 <_strtod_l+0xb70>
 80097f2:	e77b      	b.n	80096ec <_strtod_l+0xa68>
 80097f4:	e4bd      	b.n	8009172 <_strtod_l+0x4ee>
 80097f6:	9b08      	ldr	r3, [sp, #32]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d02b      	beq.n	8009854 <_strtod_l+0xbd0>
 80097fc:	23d4      	movs	r3, #212	; 0xd4
 80097fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009800:	04db      	lsls	r3, r3, #19
 8009802:	429a      	cmp	r2, r3
 8009804:	d826      	bhi.n	8009854 <_strtod_l+0xbd0>
 8009806:	0028      	movs	r0, r5
 8009808:	0021      	movs	r1, r4
 800980a:	4a2d      	ldr	r2, [pc, #180]	; (80098c0 <_strtod_l+0xc3c>)
 800980c:	4b2d      	ldr	r3, [pc, #180]	; (80098c4 <_strtod_l+0xc40>)
 800980e:	f7f6 fe2d 	bl	800046c <__aeabi_dcmple>
 8009812:	2800      	cmp	r0, #0
 8009814:	d017      	beq.n	8009846 <_strtod_l+0xbc2>
 8009816:	0028      	movs	r0, r5
 8009818:	0021      	movs	r1, r4
 800981a:	f7f6 fe45 	bl	80004a8 <__aeabi_d2uiz>
 800981e:	2800      	cmp	r0, #0
 8009820:	d100      	bne.n	8009824 <_strtod_l+0xba0>
 8009822:	3001      	adds	r0, #1
 8009824:	f7f8 fca2 	bl	800216c <__aeabi_ui2d>
 8009828:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800982a:	0005      	movs	r5, r0
 800982c:	000b      	movs	r3, r1
 800982e:	000c      	movs	r4, r1
 8009830:	2a00      	cmp	r2, #0
 8009832:	d122      	bne.n	800987a <_strtod_l+0xbf6>
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	0612      	lsls	r2, r2, #24
 8009838:	188b      	adds	r3, r1, r2
 800983a:	9018      	str	r0, [sp, #96]	; 0x60
 800983c:	9319      	str	r3, [sp, #100]	; 0x64
 800983e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009842:	9212      	str	r2, [sp, #72]	; 0x48
 8009844:	9313      	str	r3, [sp, #76]	; 0x4c
 8009846:	22d6      	movs	r2, #214	; 0xd6
 8009848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800984a:	04d2      	lsls	r2, r2, #19
 800984c:	189b      	adds	r3, r3, r2
 800984e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	9313      	str	r3, [sp, #76]	; 0x4c
 8009854:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009856:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009858:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800985a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800985c:	f001 fea6 	bl	800b5ac <__ulp>
 8009860:	0002      	movs	r2, r0
 8009862:	000b      	movs	r3, r1
 8009864:	0030      	movs	r0, r6
 8009866:	0039      	movs	r1, r7
 8009868:	f7f7 fdfe 	bl	8001468 <__aeabi_dmul>
 800986c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800986e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009870:	f7f6 fe8a 	bl	8000588 <__aeabi_dadd>
 8009874:	0006      	movs	r6, r0
 8009876:	000f      	movs	r7, r1
 8009878:	e78f      	b.n	800979a <_strtod_l+0xb16>
 800987a:	0002      	movs	r2, r0
 800987c:	9218      	str	r2, [sp, #96]	; 0x60
 800987e:	9319      	str	r3, [sp, #100]	; 0x64
 8009880:	e7dd      	b.n	800983e <_strtod_l+0xbba>
 8009882:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <_strtod_l+0xc44>)
 8009884:	f7f6 fde8 	bl	8000458 <__aeabi_dcmplt>
 8009888:	e7b1      	b.n	80097ee <_strtod_l+0xb6a>
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	fff00000 	.word	0xfff00000
 8009890:	000fffff 	.word	0x000fffff
 8009894:	3ff00000 	.word	0x3ff00000
 8009898:	7ff00000 	.word	0x7ff00000
 800989c:	7fe00000 	.word	0x7fe00000
 80098a0:	fcb00000 	.word	0xfcb00000
 80098a4:	7c9fffff 	.word	0x7c9fffff
 80098a8:	7fefffff 	.word	0x7fefffff
 80098ac:	3fe00000 	.word	0x3fe00000
 80098b0:	bff00000 	.word	0xbff00000
 80098b4:	94a03595 	.word	0x94a03595
 80098b8:	3fdfffff 	.word	0x3fdfffff
 80098bc:	35afe535 	.word	0x35afe535
 80098c0:	ffc00000 	.word	0xffc00000
 80098c4:	41dfffff 	.word	0x41dfffff
 80098c8:	3fcfffff 	.word	0x3fcfffff

080098cc <_strtod_r>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	4b02      	ldr	r3, [pc, #8]	; (80098d8 <_strtod_r+0xc>)
 80098d0:	f7ff f9d8 	bl	8008c84 <_strtod_l>
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	20000074 	.word	0x20000074

080098dc <_strtol_l.isra.0>:
 80098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098de:	b087      	sub	sp, #28
 80098e0:	001e      	movs	r6, r3
 80098e2:	9005      	str	r0, [sp, #20]
 80098e4:	9101      	str	r1, [sp, #4]
 80098e6:	9202      	str	r2, [sp, #8]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d045      	beq.n	8009978 <_strtol_l.isra.0+0x9c>
 80098ec:	0008      	movs	r0, r1
 80098ee:	2b24      	cmp	r3, #36	; 0x24
 80098f0:	d842      	bhi.n	8009978 <_strtol_l.isra.0+0x9c>
 80098f2:	4b3f      	ldr	r3, [pc, #252]	; (80099f0 <_strtol_l.isra.0+0x114>)
 80098f4:	2208      	movs	r2, #8
 80098f6:	469c      	mov	ip, r3
 80098f8:	0003      	movs	r3, r0
 80098fa:	4661      	mov	r1, ip
 80098fc:	781c      	ldrb	r4, [r3, #0]
 80098fe:	1c45      	adds	r5, r0, #1
 8009900:	5d09      	ldrb	r1, [r1, r4]
 8009902:	0028      	movs	r0, r5
 8009904:	000f      	movs	r7, r1
 8009906:	4017      	ands	r7, r2
 8009908:	4211      	tst	r1, r2
 800990a:	d1f5      	bne.n	80098f8 <_strtol_l.isra.0+0x1c>
 800990c:	2c2d      	cmp	r4, #45	; 0x2d
 800990e:	d13a      	bne.n	8009986 <_strtol_l.isra.0+0xaa>
 8009910:	2701      	movs	r7, #1
 8009912:	782c      	ldrb	r4, [r5, #0]
 8009914:	1c9d      	adds	r5, r3, #2
 8009916:	2e00      	cmp	r6, #0
 8009918:	d065      	beq.n	80099e6 <_strtol_l.isra.0+0x10a>
 800991a:	2e10      	cmp	r6, #16
 800991c:	d109      	bne.n	8009932 <_strtol_l.isra.0+0x56>
 800991e:	2c30      	cmp	r4, #48	; 0x30
 8009920:	d107      	bne.n	8009932 <_strtol_l.isra.0+0x56>
 8009922:	2220      	movs	r2, #32
 8009924:	782b      	ldrb	r3, [r5, #0]
 8009926:	4393      	bics	r3, r2
 8009928:	2b58      	cmp	r3, #88	; 0x58
 800992a:	d157      	bne.n	80099dc <_strtol_l.isra.0+0x100>
 800992c:	2610      	movs	r6, #16
 800992e:	786c      	ldrb	r4, [r5, #1]
 8009930:	3502      	adds	r5, #2
 8009932:	4b30      	ldr	r3, [pc, #192]	; (80099f4 <_strtol_l.isra.0+0x118>)
 8009934:	0031      	movs	r1, r6
 8009936:	18fb      	adds	r3, r7, r3
 8009938:	0018      	movs	r0, r3
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	f7f6 fc86 	bl	800024c <__aeabi_uidivmod>
 8009940:	2300      	movs	r3, #0
 8009942:	2201      	movs	r2, #1
 8009944:	4684      	mov	ip, r0
 8009946:	0018      	movs	r0, r3
 8009948:	9104      	str	r1, [sp, #16]
 800994a:	4252      	negs	r2, r2
 800994c:	0021      	movs	r1, r4
 800994e:	3930      	subs	r1, #48	; 0x30
 8009950:	2909      	cmp	r1, #9
 8009952:	d81d      	bhi.n	8009990 <_strtol_l.isra.0+0xb4>
 8009954:	000c      	movs	r4, r1
 8009956:	42a6      	cmp	r6, r4
 8009958:	dd28      	ble.n	80099ac <_strtol_l.isra.0+0xd0>
 800995a:	2b00      	cmp	r3, #0
 800995c:	db24      	blt.n	80099a8 <_strtol_l.isra.0+0xcc>
 800995e:	0013      	movs	r3, r2
 8009960:	4584      	cmp	ip, r0
 8009962:	d306      	bcc.n	8009972 <_strtol_l.isra.0+0x96>
 8009964:	d102      	bne.n	800996c <_strtol_l.isra.0+0x90>
 8009966:	9904      	ldr	r1, [sp, #16]
 8009968:	42a1      	cmp	r1, r4
 800996a:	db02      	blt.n	8009972 <_strtol_l.isra.0+0x96>
 800996c:	2301      	movs	r3, #1
 800996e:	4370      	muls	r0, r6
 8009970:	1820      	adds	r0, r4, r0
 8009972:	782c      	ldrb	r4, [r5, #0]
 8009974:	3501      	adds	r5, #1
 8009976:	e7e9      	b.n	800994c <_strtol_l.isra.0+0x70>
 8009978:	f7fe fa94 	bl	8007ea4 <__errno>
 800997c:	2316      	movs	r3, #22
 800997e:	6003      	str	r3, [r0, #0]
 8009980:	2000      	movs	r0, #0
 8009982:	b007      	add	sp, #28
 8009984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009986:	2c2b      	cmp	r4, #43	; 0x2b
 8009988:	d1c5      	bne.n	8009916 <_strtol_l.isra.0+0x3a>
 800998a:	782c      	ldrb	r4, [r5, #0]
 800998c:	1c9d      	adds	r5, r3, #2
 800998e:	e7c2      	b.n	8009916 <_strtol_l.isra.0+0x3a>
 8009990:	0021      	movs	r1, r4
 8009992:	3941      	subs	r1, #65	; 0x41
 8009994:	2919      	cmp	r1, #25
 8009996:	d801      	bhi.n	800999c <_strtol_l.isra.0+0xc0>
 8009998:	3c37      	subs	r4, #55	; 0x37
 800999a:	e7dc      	b.n	8009956 <_strtol_l.isra.0+0x7a>
 800999c:	0021      	movs	r1, r4
 800999e:	3961      	subs	r1, #97	; 0x61
 80099a0:	2919      	cmp	r1, #25
 80099a2:	d803      	bhi.n	80099ac <_strtol_l.isra.0+0xd0>
 80099a4:	3c57      	subs	r4, #87	; 0x57
 80099a6:	e7d6      	b.n	8009956 <_strtol_l.isra.0+0x7a>
 80099a8:	0013      	movs	r3, r2
 80099aa:	e7e2      	b.n	8009972 <_strtol_l.isra.0+0x96>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	da09      	bge.n	80099c4 <_strtol_l.isra.0+0xe8>
 80099b0:	2322      	movs	r3, #34	; 0x22
 80099b2:	9a05      	ldr	r2, [sp, #20]
 80099b4:	9803      	ldr	r0, [sp, #12]
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	9b02      	ldr	r3, [sp, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0e1      	beq.n	8009982 <_strtol_l.isra.0+0xa6>
 80099be:	1e6b      	subs	r3, r5, #1
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	e007      	b.n	80099d4 <_strtol_l.isra.0+0xf8>
 80099c4:	2f00      	cmp	r7, #0
 80099c6:	d000      	beq.n	80099ca <_strtol_l.isra.0+0xee>
 80099c8:	4240      	negs	r0, r0
 80099ca:	9a02      	ldr	r2, [sp, #8]
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	d0d8      	beq.n	8009982 <_strtol_l.isra.0+0xa6>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f4      	bne.n	80099be <_strtol_l.isra.0+0xe2>
 80099d4:	9b02      	ldr	r3, [sp, #8]
 80099d6:	9a01      	ldr	r2, [sp, #4]
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e7d2      	b.n	8009982 <_strtol_l.isra.0+0xa6>
 80099dc:	2430      	movs	r4, #48	; 0x30
 80099de:	2e00      	cmp	r6, #0
 80099e0:	d1a7      	bne.n	8009932 <_strtol_l.isra.0+0x56>
 80099e2:	3608      	adds	r6, #8
 80099e4:	e7a5      	b.n	8009932 <_strtol_l.isra.0+0x56>
 80099e6:	2c30      	cmp	r4, #48	; 0x30
 80099e8:	d09b      	beq.n	8009922 <_strtol_l.isra.0+0x46>
 80099ea:	260a      	movs	r6, #10
 80099ec:	e7a1      	b.n	8009932 <_strtol_l.isra.0+0x56>
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	0800ca61 	.word	0x0800ca61
 80099f4:	7fffffff 	.word	0x7fffffff

080099f8 <_strtol_r>:
 80099f8:	b510      	push	{r4, lr}
 80099fa:	f7ff ff6f 	bl	80098dc <_strtol_l.isra.0>
 80099fe:	bd10      	pop	{r4, pc}

08009a00 <quorem>:
 8009a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a02:	0006      	movs	r6, r0
 8009a04:	690d      	ldr	r5, [r1, #16]
 8009a06:	6933      	ldr	r3, [r6, #16]
 8009a08:	b087      	sub	sp, #28
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	9102      	str	r1, [sp, #8]
 8009a0e:	42ab      	cmp	r3, r5
 8009a10:	db6b      	blt.n	8009aea <quorem+0xea>
 8009a12:	000b      	movs	r3, r1
 8009a14:	3d01      	subs	r5, #1
 8009a16:	00ac      	lsls	r4, r5, #2
 8009a18:	3314      	adds	r3, #20
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	191b      	adds	r3, r3, r4
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	0033      	movs	r3, r6
 8009a22:	3314      	adds	r3, #20
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	191c      	adds	r4, r3, r4
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	6827      	ldr	r7, [r4, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	0038      	movs	r0, r7
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	3301      	adds	r3, #1
 8009a34:	0019      	movs	r1, r3
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	f7f6 fb82 	bl	8000140 <__udivsi3>
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	9000      	str	r0, [sp, #0]
 8009a40:	429f      	cmp	r7, r3
 8009a42:	d329      	bcc.n	8009a98 <quorem+0x98>
 8009a44:	2300      	movs	r3, #0
 8009a46:	469c      	mov	ip, r3
 8009a48:	9801      	ldr	r0, [sp, #4]
 8009a4a:	9f05      	ldr	r7, [sp, #20]
 8009a4c:	9304      	str	r3, [sp, #16]
 8009a4e:	cf08      	ldmia	r7!, {r3}
 8009a50:	9a00      	ldr	r2, [sp, #0]
 8009a52:	b299      	uxth	r1, r3
 8009a54:	4351      	muls	r1, r2
 8009a56:	0c1b      	lsrs	r3, r3, #16
 8009a58:	4353      	muls	r3, r2
 8009a5a:	4461      	add	r1, ip
 8009a5c:	0c0a      	lsrs	r2, r1, #16
 8009a5e:	189b      	adds	r3, r3, r2
 8009a60:	0c1a      	lsrs	r2, r3, #16
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	6803      	ldr	r3, [r0, #0]
 8009a66:	4694      	mov	ip, r2
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	9b04      	ldr	r3, [sp, #16]
 8009a6c:	b289      	uxth	r1, r1
 8009a6e:	18d2      	adds	r2, r2, r3
 8009a70:	6803      	ldr	r3, [r0, #0]
 8009a72:	1a52      	subs	r2, r2, r1
 8009a74:	0c19      	lsrs	r1, r3, #16
 8009a76:	466b      	mov	r3, sp
 8009a78:	8a9b      	ldrh	r3, [r3, #20]
 8009a7a:	1acb      	subs	r3, r1, r3
 8009a7c:	1411      	asrs	r1, r2, #16
 8009a7e:	185b      	adds	r3, r3, r1
 8009a80:	1419      	asrs	r1, r3, #16
 8009a82:	b292      	uxth	r2, r2
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	431a      	orrs	r2, r3
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	9104      	str	r1, [sp, #16]
 8009a8c:	c004      	stmia	r0!, {r2}
 8009a8e:	42bb      	cmp	r3, r7
 8009a90:	d2dd      	bcs.n	8009a4e <quorem+0x4e>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d02e      	beq.n	8009af6 <quorem+0xf6>
 8009a98:	0030      	movs	r0, r6
 8009a9a:	9902      	ldr	r1, [sp, #8]
 8009a9c:	f001 fcd2 	bl	800b444 <__mcmp>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	db21      	blt.n	8009ae8 <quorem+0xe8>
 8009aa4:	0030      	movs	r0, r6
 8009aa6:	2400      	movs	r4, #0
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	9902      	ldr	r1, [sp, #8]
 8009aac:	3301      	adds	r3, #1
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	3014      	adds	r0, #20
 8009ab2:	3114      	adds	r1, #20
 8009ab4:	6802      	ldr	r2, [r0, #0]
 8009ab6:	c908      	ldmia	r1!, {r3}
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	1914      	adds	r4, r2, r4
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	1aa2      	subs	r2, r4, r2
 8009ac0:	6804      	ldr	r4, [r0, #0]
 8009ac2:	0c1b      	lsrs	r3, r3, #16
 8009ac4:	0c24      	lsrs	r4, r4, #16
 8009ac6:	1ae3      	subs	r3, r4, r3
 8009ac8:	1414      	asrs	r4, r2, #16
 8009aca:	191b      	adds	r3, r3, r4
 8009acc:	141c      	asrs	r4, r3, #16
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	041b      	lsls	r3, r3, #16
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	c008      	stmia	r0!, {r3}
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	d2eb      	bcs.n	8009ab4 <quorem+0xb4>
 8009adc:	9a01      	ldr	r2, [sp, #4]
 8009ade:	00ab      	lsls	r3, r5, #2
 8009ae0:	18d3      	adds	r3, r2, r3
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	d010      	beq.n	8009b0a <quorem+0x10a>
 8009ae8:	9800      	ldr	r0, [sp, #0]
 8009aea:	b007      	add	sp, #28
 8009aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <quorem+0xfe>
 8009af4:	3d01      	subs	r5, #1
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	3c04      	subs	r4, #4
 8009afa:	42a3      	cmp	r3, r4
 8009afc:	d3f7      	bcc.n	8009aee <quorem+0xee>
 8009afe:	6135      	str	r5, [r6, #16]
 8009b00:	e7ca      	b.n	8009a98 <quorem+0x98>
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	2a00      	cmp	r2, #0
 8009b06:	d104      	bne.n	8009b12 <quorem+0x112>
 8009b08:	3d01      	subs	r5, #1
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d3f7      	bcc.n	8009b02 <quorem+0x102>
 8009b12:	6135      	str	r5, [r6, #16]
 8009b14:	e7e8      	b.n	8009ae8 <quorem+0xe8>
	...

08009b18 <_dtoa_r>:
 8009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1a:	b09d      	sub	sp, #116	; 0x74
 8009b1c:	9202      	str	r2, [sp, #8]
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	9c03      	ldr	r4, [sp, #12]
 8009b24:	930a      	str	r3, [sp, #40]	; 0x28
 8009b26:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b2a:	0007      	movs	r7, r0
 8009b2c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	d10e      	bne.n	8009b50 <_dtoa_r+0x38>
 8009b32:	2010      	movs	r0, #16
 8009b34:	f001 f984 	bl	800ae40 <malloc>
 8009b38:	1e02      	subs	r2, r0, #0
 8009b3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b3c:	d104      	bne.n	8009b48 <_dtoa_r+0x30>
 8009b3e:	21ea      	movs	r1, #234	; 0xea
 8009b40:	4bc0      	ldr	r3, [pc, #768]	; (8009e44 <_dtoa_r+0x32c>)
 8009b42:	48c1      	ldr	r0, [pc, #772]	; (8009e48 <_dtoa_r+0x330>)
 8009b44:	f002 f8c4 	bl	800bcd0 <__assert_func>
 8009b48:	6044      	str	r4, [r0, #4]
 8009b4a:	6084      	str	r4, [r0, #8]
 8009b4c:	6004      	str	r4, [r0, #0]
 8009b4e:	60c4      	str	r4, [r0, #12]
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	6819      	ldr	r1, [r3, #0]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	d00a      	beq.n	8009b6e <_dtoa_r+0x56>
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4093      	lsls	r3, r2
 8009b5e:	604a      	str	r2, [r1, #4]
 8009b60:	608b      	str	r3, [r1, #8]
 8009b62:	0038      	movs	r0, r7
 8009b64:	f001 f9e0 	bl	800af28 <_Bfree>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da21      	bge.n	8009bb8 <_dtoa_r+0xa0>
 8009b74:	2301      	movs	r3, #1
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b82:	4bb2      	ldr	r3, [pc, #712]	; (8009e4c <_dtoa_r+0x334>)
 8009b84:	002a      	movs	r2, r5
 8009b86:	9318      	str	r3, [sp, #96]	; 0x60
 8009b88:	401a      	ands	r2, r3
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d117      	bne.n	8009bbe <_dtoa_r+0xa6>
 8009b8e:	4bb0      	ldr	r3, [pc, #704]	; (8009e50 <_dtoa_r+0x338>)
 8009b90:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b92:	0328      	lsls	r0, r5, #12
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	0b00      	lsrs	r0, r0, #12
 8009b9a:	4318      	orrs	r0, r3
 8009b9c:	d101      	bne.n	8009ba2 <_dtoa_r+0x8a>
 8009b9e:	f000 fdc3 	bl	800a728 <_dtoa_r+0xc10>
 8009ba2:	48ac      	ldr	r0, [pc, #688]	; (8009e54 <_dtoa_r+0x33c>)
 8009ba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ba6:	9005      	str	r0, [sp, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <_dtoa_r+0x9a>
 8009bac:	4baa      	ldr	r3, [pc, #680]	; (8009e58 <_dtoa_r+0x340>)
 8009bae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	9805      	ldr	r0, [sp, #20]
 8009bb4:	b01d      	add	sp, #116	; 0x74
 8009bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb8:	2300      	movs	r3, #0
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	e7e0      	b.n	8009b80 <_dtoa_r+0x68>
 8009bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8009bc4:	9413      	str	r4, [sp, #76]	; 0x4c
 8009bc6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009bc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f7f6 fc3d 	bl	800044c <__aeabi_dcmpeq>
 8009bd2:	1e04      	subs	r4, r0, #0
 8009bd4:	d00b      	beq.n	8009bee <_dtoa_r+0xd6>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	4b9f      	ldr	r3, [pc, #636]	; (8009e5c <_dtoa_r+0x344>)
 8009bde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009be0:	9305      	str	r3, [sp, #20]
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	d0e5      	beq.n	8009bb2 <_dtoa_r+0x9a>
 8009be6:	4a9e      	ldr	r2, [pc, #632]	; (8009e60 <_dtoa_r+0x348>)
 8009be8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009bea:	600a      	str	r2, [r1, #0]
 8009bec:	e7e1      	b.n	8009bb2 <_dtoa_r+0x9a>
 8009bee:	ab1a      	add	r3, sp, #104	; 0x68
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	ab1b      	add	r3, sp, #108	; 0x6c
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	0038      	movs	r0, r7
 8009bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bfc:	f001 fd4a 	bl	800b694 <__d2b>
 8009c00:	006e      	lsls	r6, r5, #1
 8009c02:	9004      	str	r0, [sp, #16]
 8009c04:	0d76      	lsrs	r6, r6, #21
 8009c06:	d100      	bne.n	8009c0a <_dtoa_r+0xf2>
 8009c08:	e07c      	b.n	8009d04 <_dtoa_r+0x1ec>
 8009c0a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c10:	4a94      	ldr	r2, [pc, #592]	; (8009e64 <_dtoa_r+0x34c>)
 8009c12:	031b      	lsls	r3, r3, #12
 8009c14:	0b1b      	lsrs	r3, r3, #12
 8009c16:	431a      	orrs	r2, r3
 8009c18:	0011      	movs	r1, r2
 8009c1a:	4b93      	ldr	r3, [pc, #588]	; (8009e68 <_dtoa_r+0x350>)
 8009c1c:	9416      	str	r4, [sp, #88]	; 0x58
 8009c1e:	18f6      	adds	r6, r6, r3
 8009c20:	2200      	movs	r2, #0
 8009c22:	4b92      	ldr	r3, [pc, #584]	; (8009e6c <_dtoa_r+0x354>)
 8009c24:	f7f7 fe8c 	bl	8001940 <__aeabi_dsub>
 8009c28:	4a91      	ldr	r2, [pc, #580]	; (8009e70 <_dtoa_r+0x358>)
 8009c2a:	4b92      	ldr	r3, [pc, #584]	; (8009e74 <_dtoa_r+0x35c>)
 8009c2c:	f7f7 fc1c 	bl	8001468 <__aeabi_dmul>
 8009c30:	4a91      	ldr	r2, [pc, #580]	; (8009e78 <_dtoa_r+0x360>)
 8009c32:	4b92      	ldr	r3, [pc, #584]	; (8009e7c <_dtoa_r+0x364>)
 8009c34:	f7f6 fca8 	bl	8000588 <__aeabi_dadd>
 8009c38:	0004      	movs	r4, r0
 8009c3a:	0030      	movs	r0, r6
 8009c3c:	000d      	movs	r5, r1
 8009c3e:	f7f8 fa65 	bl	800210c <__aeabi_i2d>
 8009c42:	4a8f      	ldr	r2, [pc, #572]	; (8009e80 <_dtoa_r+0x368>)
 8009c44:	4b8f      	ldr	r3, [pc, #572]	; (8009e84 <_dtoa_r+0x36c>)
 8009c46:	f7f7 fc0f 	bl	8001468 <__aeabi_dmul>
 8009c4a:	0002      	movs	r2, r0
 8009c4c:	000b      	movs	r3, r1
 8009c4e:	0020      	movs	r0, r4
 8009c50:	0029      	movs	r1, r5
 8009c52:	f7f6 fc99 	bl	8000588 <__aeabi_dadd>
 8009c56:	0004      	movs	r4, r0
 8009c58:	000d      	movs	r5, r1
 8009c5a:	f7f8 fa21 	bl	80020a0 <__aeabi_d2iz>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	9002      	str	r0, [sp, #8]
 8009c62:	2300      	movs	r3, #0
 8009c64:	0020      	movs	r0, r4
 8009c66:	0029      	movs	r1, r5
 8009c68:	f7f6 fbf6 	bl	8000458 <__aeabi_dcmplt>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d00b      	beq.n	8009c88 <_dtoa_r+0x170>
 8009c70:	9802      	ldr	r0, [sp, #8]
 8009c72:	f7f8 fa4b 	bl	800210c <__aeabi_i2d>
 8009c76:	002b      	movs	r3, r5
 8009c78:	0022      	movs	r2, r4
 8009c7a:	f7f6 fbe7 	bl	800044c <__aeabi_dcmpeq>
 8009c7e:	4243      	negs	r3, r0
 8009c80:	4158      	adcs	r0, r3
 8009c82:	9b02      	ldr	r3, [sp, #8]
 8009c84:	1a1b      	subs	r3, r3, r0
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	2301      	movs	r3, #1
 8009c8a:	9315      	str	r3, [sp, #84]	; 0x54
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	2b16      	cmp	r3, #22
 8009c90:	d80f      	bhi.n	8009cb2 <_dtoa_r+0x19a>
 8009c92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c96:	00da      	lsls	r2, r3, #3
 8009c98:	4b7b      	ldr	r3, [pc, #492]	; (8009e88 <_dtoa_r+0x370>)
 8009c9a:	189b      	adds	r3, r3, r2
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f7f6 fbda 	bl	8000458 <__aeabi_dcmplt>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d049      	beq.n	8009d3c <_dtoa_r+0x224>
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9315      	str	r3, [sp, #84]	; 0x54
 8009cb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009cb4:	1b9e      	subs	r6, r3, r6
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9308      	str	r3, [sp, #32]
 8009cba:	0033      	movs	r3, r6
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc0:	d504      	bpl.n	8009ccc <_dtoa_r+0x1b4>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	1b9b      	subs	r3, r3, r6
 8009cc6:	9308      	str	r3, [sp, #32]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	930d      	str	r3, [sp, #52]	; 0x34
 8009ccc:	9b02      	ldr	r3, [sp, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	db36      	blt.n	8009d40 <_dtoa_r+0x228>
 8009cd2:	9a02      	ldr	r2, [sp, #8]
 8009cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd6:	4694      	mov	ip, r2
 8009cd8:	4463      	add	r3, ip
 8009cda:	930d      	str	r3, [sp, #52]	; 0x34
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9214      	str	r2, [sp, #80]	; 0x50
 8009ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ce4:	2401      	movs	r4, #1
 8009ce6:	2b09      	cmp	r3, #9
 8009ce8:	d862      	bhi.n	8009db0 <_dtoa_r+0x298>
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	dd02      	ble.n	8009cf4 <_dtoa_r+0x1dc>
 8009cee:	2400      	movs	r4, #0
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	9322      	str	r3, [sp, #136]	; 0x88
 8009cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cf6:	1e98      	subs	r0, r3, #2
 8009cf8:	2803      	cmp	r0, #3
 8009cfa:	d862      	bhi.n	8009dc2 <_dtoa_r+0x2aa>
 8009cfc:	f7f6 fa0c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009d00:	56343629 	.word	0x56343629
 8009d04:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d08:	189e      	adds	r6, r3, r2
 8009d0a:	4b60      	ldr	r3, [pc, #384]	; (8009e8c <_dtoa_r+0x374>)
 8009d0c:	18f2      	adds	r2, r6, r3
 8009d0e:	2a20      	cmp	r2, #32
 8009d10:	dd0f      	ble.n	8009d32 <_dtoa_r+0x21a>
 8009d12:	2340      	movs	r3, #64	; 0x40
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	409d      	lsls	r5, r3
 8009d18:	4b5d      	ldr	r3, [pc, #372]	; (8009e90 <_dtoa_r+0x378>)
 8009d1a:	9802      	ldr	r0, [sp, #8]
 8009d1c:	18f3      	adds	r3, r6, r3
 8009d1e:	40d8      	lsrs	r0, r3
 8009d20:	4328      	orrs	r0, r5
 8009d22:	f7f8 fa23 	bl	800216c <__aeabi_ui2d>
 8009d26:	2301      	movs	r3, #1
 8009d28:	4c5a      	ldr	r4, [pc, #360]	; (8009e94 <_dtoa_r+0x37c>)
 8009d2a:	3e01      	subs	r6, #1
 8009d2c:	1909      	adds	r1, r1, r4
 8009d2e:	9316      	str	r3, [sp, #88]	; 0x58
 8009d30:	e776      	b.n	8009c20 <_dtoa_r+0x108>
 8009d32:	2320      	movs	r3, #32
 8009d34:	9802      	ldr	r0, [sp, #8]
 8009d36:	1a9b      	subs	r3, r3, r2
 8009d38:	4098      	lsls	r0, r3
 8009d3a:	e7f2      	b.n	8009d22 <_dtoa_r+0x20a>
 8009d3c:	9015      	str	r0, [sp, #84]	; 0x54
 8009d3e:	e7b8      	b.n	8009cb2 <_dtoa_r+0x19a>
 8009d40:	9b08      	ldr	r3, [sp, #32]
 8009d42:	9a02      	ldr	r2, [sp, #8]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	9308      	str	r3, [sp, #32]
 8009d48:	4253      	negs	r3, r2
 8009d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8009d50:	e7c7      	b.n	8009ce2 <_dtoa_r+0x1ca>
 8009d52:	2300      	movs	r3, #0
 8009d54:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dc36      	bgt.n	8009dca <_dtoa_r+0x2b2>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	001a      	movs	r2, r3
 8009d60:	930c      	str	r3, [sp, #48]	; 0x30
 8009d62:	9306      	str	r3, [sp, #24]
 8009d64:	9223      	str	r2, [sp, #140]	; 0x8c
 8009d66:	e00d      	b.n	8009d84 <_dtoa_r+0x26c>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e7f3      	b.n	8009d54 <_dtoa_r+0x23c>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009d70:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d72:	4694      	mov	ip, r2
 8009d74:	9b02      	ldr	r3, [sp, #8]
 8009d76:	4463      	add	r3, ip
 8009d78:	930c      	str	r3, [sp, #48]	; 0x30
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	9306      	str	r3, [sp, #24]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dc00      	bgt.n	8009d84 <_dtoa_r+0x26c>
 8009d82:	2301      	movs	r3, #1
 8009d84:	2200      	movs	r2, #0
 8009d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d88:	6042      	str	r2, [r0, #4]
 8009d8a:	3204      	adds	r2, #4
 8009d8c:	0015      	movs	r5, r2
 8009d8e:	3514      	adds	r5, #20
 8009d90:	6841      	ldr	r1, [r0, #4]
 8009d92:	429d      	cmp	r5, r3
 8009d94:	d91d      	bls.n	8009dd2 <_dtoa_r+0x2ba>
 8009d96:	0038      	movs	r0, r7
 8009d98:	f001 f882 	bl	800aea0 <_Balloc>
 8009d9c:	9005      	str	r0, [sp, #20]
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d11b      	bne.n	8009dda <_dtoa_r+0x2c2>
 8009da2:	21d5      	movs	r1, #213	; 0xd5
 8009da4:	0002      	movs	r2, r0
 8009da6:	4b3c      	ldr	r3, [pc, #240]	; (8009e98 <_dtoa_r+0x380>)
 8009da8:	0049      	lsls	r1, r1, #1
 8009daa:	e6ca      	b.n	8009b42 <_dtoa_r+0x2a>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e7de      	b.n	8009d6e <_dtoa_r+0x256>
 8009db0:	2300      	movs	r3, #0
 8009db2:	940f      	str	r4, [sp, #60]	; 0x3c
 8009db4:	9322      	str	r3, [sp, #136]	; 0x88
 8009db6:	3b01      	subs	r3, #1
 8009db8:	930c      	str	r3, [sp, #48]	; 0x30
 8009dba:	9306      	str	r3, [sp, #24]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	3313      	adds	r3, #19
 8009dc0:	e7d0      	b.n	8009d64 <_dtoa_r+0x24c>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dc6:	3b02      	subs	r3, #2
 8009dc8:	e7f6      	b.n	8009db8 <_dtoa_r+0x2a0>
 8009dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8009dce:	9306      	str	r3, [sp, #24]
 8009dd0:	e7d8      	b.n	8009d84 <_dtoa_r+0x26c>
 8009dd2:	3101      	adds	r1, #1
 8009dd4:	6041      	str	r1, [r0, #4]
 8009dd6:	0052      	lsls	r2, r2, #1
 8009dd8:	e7d8      	b.n	8009d8c <_dtoa_r+0x274>
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	9a05      	ldr	r2, [sp, #20]
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	2b0e      	cmp	r3, #14
 8009de4:	d900      	bls.n	8009de8 <_dtoa_r+0x2d0>
 8009de6:	e0eb      	b.n	8009fc0 <_dtoa_r+0x4a8>
 8009de8:	2c00      	cmp	r4, #0
 8009dea:	d100      	bne.n	8009dee <_dtoa_r+0x2d6>
 8009dec:	e0e8      	b.n	8009fc0 <_dtoa_r+0x4a8>
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dd68      	ble.n	8009ec6 <_dtoa_r+0x3ae>
 8009df4:	001a      	movs	r2, r3
 8009df6:	210f      	movs	r1, #15
 8009df8:	4b23      	ldr	r3, [pc, #140]	; (8009e88 <_dtoa_r+0x370>)
 8009dfa:	400a      	ands	r2, r1
 8009dfc:	00d2      	lsls	r2, r2, #3
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	681d      	ldr	r5, [r3, #0]
 8009e02:	685e      	ldr	r6, [r3, #4]
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	111c      	asrs	r4, r3, #4
 8009e08:	2302      	movs	r3, #2
 8009e0a:	9310      	str	r3, [sp, #64]	; 0x40
 8009e0c:	9b02      	ldr	r3, [sp, #8]
 8009e0e:	05db      	lsls	r3, r3, #23
 8009e10:	d50b      	bpl.n	8009e2a <_dtoa_r+0x312>
 8009e12:	4b22      	ldr	r3, [pc, #136]	; (8009e9c <_dtoa_r+0x384>)
 8009e14:	400c      	ands	r4, r1
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e1e:	f7f6 ff1d 	bl	8000c5c <__aeabi_ddiv>
 8009e22:	2303      	movs	r3, #3
 8009e24:	900a      	str	r0, [sp, #40]	; 0x28
 8009e26:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e28:	9310      	str	r3, [sp, #64]	; 0x40
 8009e2a:	4b1c      	ldr	r3, [pc, #112]	; (8009e9c <_dtoa_r+0x384>)
 8009e2c:	9307      	str	r3, [sp, #28]
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d136      	bne.n	8009ea0 <_dtoa_r+0x388>
 8009e32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e36:	002a      	movs	r2, r5
 8009e38:	0033      	movs	r3, r6
 8009e3a:	f7f6 ff0f 	bl	8000c5c <__aeabi_ddiv>
 8009e3e:	900a      	str	r0, [sp, #40]	; 0x28
 8009e40:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e42:	e05c      	b.n	8009efe <_dtoa_r+0x3e6>
 8009e44:	0800cb6e 	.word	0x0800cb6e
 8009e48:	0800cb85 	.word	0x0800cb85
 8009e4c:	7ff00000 	.word	0x7ff00000
 8009e50:	0000270f 	.word	0x0000270f
 8009e54:	0800cb6a 	.word	0x0800cb6a
 8009e58:	0800cb6d 	.word	0x0800cb6d
 8009e5c:	0800c9e4 	.word	0x0800c9e4
 8009e60:	0800c9e5 	.word	0x0800c9e5
 8009e64:	3ff00000 	.word	0x3ff00000
 8009e68:	fffffc01 	.word	0xfffffc01
 8009e6c:	3ff80000 	.word	0x3ff80000
 8009e70:	636f4361 	.word	0x636f4361
 8009e74:	3fd287a7 	.word	0x3fd287a7
 8009e78:	8b60c8b3 	.word	0x8b60c8b3
 8009e7c:	3fc68a28 	.word	0x3fc68a28
 8009e80:	509f79fb 	.word	0x509f79fb
 8009e84:	3fd34413 	.word	0x3fd34413
 8009e88:	0800cd00 	.word	0x0800cd00
 8009e8c:	00000432 	.word	0x00000432
 8009e90:	00000412 	.word	0x00000412
 8009e94:	fe100000 	.word	0xfe100000
 8009e98:	0800cbe4 	.word	0x0800cbe4
 8009e9c:	0800ccd8 	.word	0x0800ccd8
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	421c      	tst	r4, r3
 8009ea4:	d00b      	beq.n	8009ebe <_dtoa_r+0x3a6>
 8009ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ea8:	0028      	movs	r0, r5
 8009eaa:	3301      	adds	r3, #1
 8009eac:	9310      	str	r3, [sp, #64]	; 0x40
 8009eae:	9b07      	ldr	r3, [sp, #28]
 8009eb0:	0031      	movs	r1, r6
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f7f7 fad7 	bl	8001468 <__aeabi_dmul>
 8009eba:	0005      	movs	r5, r0
 8009ebc:	000e      	movs	r6, r1
 8009ebe:	9b07      	ldr	r3, [sp, #28]
 8009ec0:	1064      	asrs	r4, r4, #1
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	e7b2      	b.n	8009e2c <_dtoa_r+0x314>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	9310      	str	r3, [sp, #64]	; 0x40
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d016      	beq.n	8009efe <_dtoa_r+0x3e6>
 8009ed0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ed2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ed4:	425c      	negs	r4, r3
 8009ed6:	230f      	movs	r3, #15
 8009ed8:	4ab5      	ldr	r2, [pc, #724]	; (800a1b0 <_dtoa_r+0x698>)
 8009eda:	4023      	ands	r3, r4
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	18d3      	adds	r3, r2, r3
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f7f7 fac0 	bl	8001468 <__aeabi_dmul>
 8009ee8:	2601      	movs	r6, #1
 8009eea:	2300      	movs	r3, #0
 8009eec:	900a      	str	r0, [sp, #40]	; 0x28
 8009eee:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ef0:	4db0      	ldr	r5, [pc, #704]	; (800a1b4 <_dtoa_r+0x69c>)
 8009ef2:	1124      	asrs	r4, r4, #4
 8009ef4:	2c00      	cmp	r4, #0
 8009ef6:	d000      	beq.n	8009efa <_dtoa_r+0x3e2>
 8009ef8:	e094      	b.n	800a024 <_dtoa_r+0x50c>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d19f      	bne.n	8009e3e <_dtoa_r+0x326>
 8009efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d100      	bne.n	8009f06 <_dtoa_r+0x3ee>
 8009f04:	e09b      	b.n	800a03e <_dtoa_r+0x526>
 8009f06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	0020      	movs	r0, r4
 8009f0e:	0029      	movs	r1, r5
 8009f10:	4ba9      	ldr	r3, [pc, #676]	; (800a1b8 <_dtoa_r+0x6a0>)
 8009f12:	f7f6 faa1 	bl	8000458 <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d100      	bne.n	8009f1c <_dtoa_r+0x404>
 8009f1a:	e090      	b.n	800a03e <_dtoa_r+0x526>
 8009f1c:	9b06      	ldr	r3, [sp, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d100      	bne.n	8009f24 <_dtoa_r+0x40c>
 8009f22:	e08c      	b.n	800a03e <_dtoa_r+0x526>
 8009f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dd46      	ble.n	8009fb8 <_dtoa_r+0x4a0>
 8009f2a:	9b02      	ldr	r3, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	0020      	movs	r0, r4
 8009f30:	0029      	movs	r1, r5
 8009f32:	1e5e      	subs	r6, r3, #1
 8009f34:	4ba1      	ldr	r3, [pc, #644]	; (800a1bc <_dtoa_r+0x6a4>)
 8009f36:	f7f7 fa97 	bl	8001468 <__aeabi_dmul>
 8009f3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8009f3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f40:	3301      	adds	r3, #1
 8009f42:	9310      	str	r3, [sp, #64]	; 0x40
 8009f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f46:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009f4c:	9307      	str	r3, [sp, #28]
 8009f4e:	f7f8 f8dd 	bl	800210c <__aeabi_i2d>
 8009f52:	0022      	movs	r2, r4
 8009f54:	002b      	movs	r3, r5
 8009f56:	f7f7 fa87 	bl	8001468 <__aeabi_dmul>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4b98      	ldr	r3, [pc, #608]	; (800a1c0 <_dtoa_r+0x6a8>)
 8009f5e:	f7f6 fb13 	bl	8000588 <__aeabi_dadd>
 8009f62:	9010      	str	r0, [sp, #64]	; 0x40
 8009f64:	9111      	str	r1, [sp, #68]	; 0x44
 8009f66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f6a:	920a      	str	r2, [sp, #40]	; 0x28
 8009f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f6e:	4a95      	ldr	r2, [pc, #596]	; (800a1c4 <_dtoa_r+0x6ac>)
 8009f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f72:	4694      	mov	ip, r2
 8009f74:	4463      	add	r3, ip
 8009f76:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7a:	9b07      	ldr	r3, [sp, #28]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d161      	bne.n	800a044 <_dtoa_r+0x52c>
 8009f80:	2200      	movs	r2, #0
 8009f82:	0020      	movs	r0, r4
 8009f84:	0029      	movs	r1, r5
 8009f86:	4b90      	ldr	r3, [pc, #576]	; (800a1c8 <_dtoa_r+0x6b0>)
 8009f88:	f7f7 fcda 	bl	8001940 <__aeabi_dsub>
 8009f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f90:	0004      	movs	r4, r0
 8009f92:	000d      	movs	r5, r1
 8009f94:	f7f6 fa74 	bl	8000480 <__aeabi_dcmpgt>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d000      	beq.n	8009f9e <_dtoa_r+0x486>
 8009f9c:	e2b5      	b.n	800a50a <_dtoa_r+0x9f2>
 8009f9e:	488b      	ldr	r0, [pc, #556]	; (800a1cc <_dtoa_r+0x6b4>)
 8009fa0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009fa2:	4684      	mov	ip, r0
 8009fa4:	4461      	add	r1, ip
 8009fa6:	000b      	movs	r3, r1
 8009fa8:	0020      	movs	r0, r4
 8009faa:	0029      	movs	r1, r5
 8009fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fae:	f7f6 fa53 	bl	8000458 <__aeabi_dcmplt>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d000      	beq.n	8009fb8 <_dtoa_r+0x4a0>
 8009fb6:	e2a5      	b.n	800a504 <_dtoa_r+0x9ec>
 8009fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009fbe:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da00      	bge.n	8009fc8 <_dtoa_r+0x4b0>
 8009fc6:	e171      	b.n	800a2ac <_dtoa_r+0x794>
 8009fc8:	9a02      	ldr	r2, [sp, #8]
 8009fca:	2a0e      	cmp	r2, #14
 8009fcc:	dd00      	ble.n	8009fd0 <_dtoa_r+0x4b8>
 8009fce:	e16d      	b.n	800a2ac <_dtoa_r+0x794>
 8009fd0:	4b77      	ldr	r3, [pc, #476]	; (800a1b0 <_dtoa_r+0x698>)
 8009fd2:	00d2      	lsls	r2, r2, #3
 8009fd4:	189b      	adds	r3, r3, r2
 8009fd6:	685c      	ldr	r4, [r3, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	9308      	str	r3, [sp, #32]
 8009fdc:	9409      	str	r4, [sp, #36]	; 0x24
 8009fde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	db00      	blt.n	8009fe6 <_dtoa_r+0x4ce>
 8009fe4:	e0f6      	b.n	800a1d4 <_dtoa_r+0x6bc>
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dd00      	ble.n	8009fee <_dtoa_r+0x4d6>
 8009fec:	e0f2      	b.n	800a1d4 <_dtoa_r+0x6bc>
 8009fee:	d000      	beq.n	8009ff2 <_dtoa_r+0x4da>
 8009ff0:	e288      	b.n	800a504 <_dtoa_r+0x9ec>
 8009ff2:	9808      	ldr	r0, [sp, #32]
 8009ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4b73      	ldr	r3, [pc, #460]	; (800a1c8 <_dtoa_r+0x6b0>)
 8009ffa:	f7f7 fa35 	bl	8001468 <__aeabi_dmul>
 8009ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a002:	f7f6 fa47 	bl	8000494 <__aeabi_dcmpge>
 800a006:	9e06      	ldr	r6, [sp, #24]
 800a008:	0035      	movs	r5, r6
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d000      	beq.n	800a010 <_dtoa_r+0x4f8>
 800a00e:	e25f      	b.n	800a4d0 <_dtoa_r+0x9b8>
 800a010:	9b05      	ldr	r3, [sp, #20]
 800a012:	9a05      	ldr	r2, [sp, #20]
 800a014:	3301      	adds	r3, #1
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	2331      	movs	r3, #49	; 0x31
 800a01a:	7013      	strb	r3, [r2, #0]
 800a01c:	9b02      	ldr	r3, [sp, #8]
 800a01e:	3301      	adds	r3, #1
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	e25a      	b.n	800a4da <_dtoa_r+0x9c2>
 800a024:	4234      	tst	r4, r6
 800a026:	d007      	beq.n	800a038 <_dtoa_r+0x520>
 800a028:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a02a:	3301      	adds	r3, #1
 800a02c:	9310      	str	r3, [sp, #64]	; 0x40
 800a02e:	682a      	ldr	r2, [r5, #0]
 800a030:	686b      	ldr	r3, [r5, #4]
 800a032:	f7f7 fa19 	bl	8001468 <__aeabi_dmul>
 800a036:	0033      	movs	r3, r6
 800a038:	1064      	asrs	r4, r4, #1
 800a03a:	3508      	adds	r5, #8
 800a03c:	e75a      	b.n	8009ef4 <_dtoa_r+0x3dc>
 800a03e:	9e02      	ldr	r6, [sp, #8]
 800a040:	9b06      	ldr	r3, [sp, #24]
 800a042:	e780      	b.n	8009f46 <_dtoa_r+0x42e>
 800a044:	9b07      	ldr	r3, [sp, #28]
 800a046:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	4b59      	ldr	r3, [pc, #356]	; (800a1b0 <_dtoa_r+0x698>)
 800a04c:	00d2      	lsls	r2, r2, #3
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	2900      	cmp	r1, #0
 800a056:	d051      	beq.n	800a0fc <_dtoa_r+0x5e4>
 800a058:	2000      	movs	r0, #0
 800a05a:	495d      	ldr	r1, [pc, #372]	; (800a1d0 <_dtoa_r+0x6b8>)
 800a05c:	f7f6 fdfe 	bl	8000c5c <__aeabi_ddiv>
 800a060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a064:	f7f7 fc6c 	bl	8001940 <__aeabi_dsub>
 800a068:	9a05      	ldr	r2, [sp, #20]
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	4694      	mov	ip, r2
 800a06e:	9310      	str	r3, [sp, #64]	; 0x40
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	900a      	str	r0, [sp, #40]	; 0x28
 800a074:	910b      	str	r1, [sp, #44]	; 0x2c
 800a076:	4463      	add	r3, ip
 800a078:	9319      	str	r3, [sp, #100]	; 0x64
 800a07a:	0029      	movs	r1, r5
 800a07c:	0020      	movs	r0, r4
 800a07e:	f7f8 f80f 	bl	80020a0 <__aeabi_d2iz>
 800a082:	9017      	str	r0, [sp, #92]	; 0x5c
 800a084:	f7f8 f842 	bl	800210c <__aeabi_i2d>
 800a088:	0002      	movs	r2, r0
 800a08a:	000b      	movs	r3, r1
 800a08c:	0020      	movs	r0, r4
 800a08e:	0029      	movs	r1, r5
 800a090:	f7f7 fc56 	bl	8001940 <__aeabi_dsub>
 800a094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a098:	3301      	adds	r3, #1
 800a09a:	9307      	str	r3, [sp, #28]
 800a09c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a09e:	0004      	movs	r4, r0
 800a0a0:	3330      	adds	r3, #48	; 0x30
 800a0a2:	7013      	strb	r3, [r2, #0]
 800a0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a8:	000d      	movs	r5, r1
 800a0aa:	f7f6 f9d5 	bl	8000458 <__aeabi_dcmplt>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d175      	bne.n	800a19e <_dtoa_r+0x686>
 800a0b2:	0022      	movs	r2, r4
 800a0b4:	002b      	movs	r3, r5
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	493f      	ldr	r1, [pc, #252]	; (800a1b8 <_dtoa_r+0x6a0>)
 800a0ba:	f7f7 fc41 	bl	8001940 <__aeabi_dsub>
 800a0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0c2:	f7f6 f9c9 	bl	8000458 <__aeabi_dcmplt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d000      	beq.n	800a0cc <_dtoa_r+0x5b4>
 800a0ca:	e0d1      	b.n	800a270 <_dtoa_r+0x758>
 800a0cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0ce:	9a07      	ldr	r2, [sp, #28]
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d100      	bne.n	800a0d6 <_dtoa_r+0x5be>
 800a0d4:	e770      	b.n	8009fb8 <_dtoa_r+0x4a0>
 800a0d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4b37      	ldr	r3, [pc, #220]	; (800a1bc <_dtoa_r+0x6a4>)
 800a0de:	f7f7 f9c3 	bl	8001468 <__aeabi_dmul>
 800a0e2:	4b36      	ldr	r3, [pc, #216]	; (800a1bc <_dtoa_r+0x6a4>)
 800a0e4:	900a      	str	r0, [sp, #40]	; 0x28
 800a0e6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	0020      	movs	r0, r4
 800a0ec:	0029      	movs	r1, r5
 800a0ee:	f7f7 f9bb 	bl	8001468 <__aeabi_dmul>
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	0004      	movs	r4, r0
 800a0f6:	000d      	movs	r5, r1
 800a0f8:	9310      	str	r3, [sp, #64]	; 0x40
 800a0fa:	e7be      	b.n	800a07a <_dtoa_r+0x562>
 800a0fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a100:	f7f7 f9b2 	bl	8001468 <__aeabi_dmul>
 800a104:	9a05      	ldr	r2, [sp, #20]
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	4694      	mov	ip, r2
 800a10a:	930a      	str	r3, [sp, #40]	; 0x28
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	9010      	str	r0, [sp, #64]	; 0x40
 800a110:	9111      	str	r1, [sp, #68]	; 0x44
 800a112:	4463      	add	r3, ip
 800a114:	9319      	str	r3, [sp, #100]	; 0x64
 800a116:	0029      	movs	r1, r5
 800a118:	0020      	movs	r0, r4
 800a11a:	f7f7 ffc1 	bl	80020a0 <__aeabi_d2iz>
 800a11e:	9017      	str	r0, [sp, #92]	; 0x5c
 800a120:	f7f7 fff4 	bl	800210c <__aeabi_i2d>
 800a124:	0002      	movs	r2, r0
 800a126:	000b      	movs	r3, r1
 800a128:	0020      	movs	r0, r4
 800a12a:	0029      	movs	r1, r5
 800a12c:	f7f7 fc08 	bl	8001940 <__aeabi_dsub>
 800a130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a134:	3330      	adds	r3, #48	; 0x30
 800a136:	7013      	strb	r3, [r2, #0]
 800a138:	0013      	movs	r3, r2
 800a13a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a13c:	3301      	adds	r3, #1
 800a13e:	0004      	movs	r4, r0
 800a140:	000d      	movs	r5, r1
 800a142:	930a      	str	r3, [sp, #40]	; 0x28
 800a144:	4293      	cmp	r3, r2
 800a146:	d12c      	bne.n	800a1a2 <_dtoa_r+0x68a>
 800a148:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a14a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a14c:	9a05      	ldr	r2, [sp, #20]
 800a14e:	9b07      	ldr	r3, [sp, #28]
 800a150:	4694      	mov	ip, r2
 800a152:	4463      	add	r3, ip
 800a154:	2200      	movs	r2, #0
 800a156:	9307      	str	r3, [sp, #28]
 800a158:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <_dtoa_r+0x6b8>)
 800a15a:	f7f6 fa15 	bl	8000588 <__aeabi_dadd>
 800a15e:	0002      	movs	r2, r0
 800a160:	000b      	movs	r3, r1
 800a162:	0020      	movs	r0, r4
 800a164:	0029      	movs	r1, r5
 800a166:	f7f6 f98b 	bl	8000480 <__aeabi_dcmpgt>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d000      	beq.n	800a170 <_dtoa_r+0x658>
 800a16e:	e07f      	b.n	800a270 <_dtoa_r+0x758>
 800a170:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a174:	2000      	movs	r0, #0
 800a176:	4916      	ldr	r1, [pc, #88]	; (800a1d0 <_dtoa_r+0x6b8>)
 800a178:	f7f7 fbe2 	bl	8001940 <__aeabi_dsub>
 800a17c:	0002      	movs	r2, r0
 800a17e:	000b      	movs	r3, r1
 800a180:	0020      	movs	r0, r4
 800a182:	0029      	movs	r1, r5
 800a184:	f7f6 f968 	bl	8000458 <__aeabi_dcmplt>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d100      	bne.n	800a18e <_dtoa_r+0x676>
 800a18c:	e714      	b.n	8009fb8 <_dtoa_r+0x4a0>
 800a18e:	9b07      	ldr	r3, [sp, #28]
 800a190:	001a      	movs	r2, r3
 800a192:	3a01      	subs	r2, #1
 800a194:	9207      	str	r2, [sp, #28]
 800a196:	7812      	ldrb	r2, [r2, #0]
 800a198:	2a30      	cmp	r2, #48	; 0x30
 800a19a:	d0f8      	beq.n	800a18e <_dtoa_r+0x676>
 800a19c:	9307      	str	r3, [sp, #28]
 800a19e:	9602      	str	r6, [sp, #8]
 800a1a0:	e054      	b.n	800a24c <_dtoa_r+0x734>
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <_dtoa_r+0x6a4>)
 800a1a6:	f7f7 f95f 	bl	8001468 <__aeabi_dmul>
 800a1aa:	0004      	movs	r4, r0
 800a1ac:	000d      	movs	r5, r1
 800a1ae:	e7b2      	b.n	800a116 <_dtoa_r+0x5fe>
 800a1b0:	0800cd00 	.word	0x0800cd00
 800a1b4:	0800ccd8 	.word	0x0800ccd8
 800a1b8:	3ff00000 	.word	0x3ff00000
 800a1bc:	40240000 	.word	0x40240000
 800a1c0:	401c0000 	.word	0x401c0000
 800a1c4:	fcc00000 	.word	0xfcc00000
 800a1c8:	40140000 	.word	0x40140000
 800a1cc:	7cc00000 	.word	0x7cc00000
 800a1d0:	3fe00000 	.word	0x3fe00000
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	9e05      	ldr	r6, [sp, #20]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	199b      	adds	r3, r3, r6
 800a1dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a1e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1e2:	9a08      	ldr	r2, [sp, #32]
 800a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e6:	0020      	movs	r0, r4
 800a1e8:	0029      	movs	r1, r5
 800a1ea:	f7f6 fd37 	bl	8000c5c <__aeabi_ddiv>
 800a1ee:	f7f7 ff57 	bl	80020a0 <__aeabi_d2iz>
 800a1f2:	9006      	str	r0, [sp, #24]
 800a1f4:	f7f7 ff8a 	bl	800210c <__aeabi_i2d>
 800a1f8:	9a08      	ldr	r2, [sp, #32]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	f7f7 f934 	bl	8001468 <__aeabi_dmul>
 800a200:	0002      	movs	r2, r0
 800a202:	000b      	movs	r3, r1
 800a204:	0020      	movs	r0, r4
 800a206:	0029      	movs	r1, r5
 800a208:	f7f7 fb9a 	bl	8001940 <__aeabi_dsub>
 800a20c:	0033      	movs	r3, r6
 800a20e:	9a06      	ldr	r2, [sp, #24]
 800a210:	3601      	adds	r6, #1
 800a212:	3230      	adds	r2, #48	; 0x30
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a218:	9607      	str	r6, [sp, #28]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d139      	bne.n	800a292 <_dtoa_r+0x77a>
 800a21e:	0002      	movs	r2, r0
 800a220:	000b      	movs	r3, r1
 800a222:	f7f6 f9b1 	bl	8000588 <__aeabi_dadd>
 800a226:	9a08      	ldr	r2, [sp, #32]
 800a228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a22a:	0004      	movs	r4, r0
 800a22c:	000d      	movs	r5, r1
 800a22e:	f7f6 f927 	bl	8000480 <__aeabi_dcmpgt>
 800a232:	2800      	cmp	r0, #0
 800a234:	d11b      	bne.n	800a26e <_dtoa_r+0x756>
 800a236:	9a08      	ldr	r2, [sp, #32]
 800a238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23a:	0020      	movs	r0, r4
 800a23c:	0029      	movs	r1, r5
 800a23e:	f7f6 f905 	bl	800044c <__aeabi_dcmpeq>
 800a242:	2800      	cmp	r0, #0
 800a244:	d002      	beq.n	800a24c <_dtoa_r+0x734>
 800a246:	9b06      	ldr	r3, [sp, #24]
 800a248:	07db      	lsls	r3, r3, #31
 800a24a:	d410      	bmi.n	800a26e <_dtoa_r+0x756>
 800a24c:	0038      	movs	r0, r7
 800a24e:	9904      	ldr	r1, [sp, #16]
 800a250:	f000 fe6a 	bl	800af28 <_Bfree>
 800a254:	2300      	movs	r3, #0
 800a256:	9a07      	ldr	r2, [sp, #28]
 800a258:	9802      	ldr	r0, [sp, #8]
 800a25a:	7013      	strb	r3, [r2, #0]
 800a25c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a25e:	3001      	adds	r0, #1
 800a260:	6018      	str	r0, [r3, #0]
 800a262:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a264:	2b00      	cmp	r3, #0
 800a266:	d100      	bne.n	800a26a <_dtoa_r+0x752>
 800a268:	e4a3      	b.n	8009bb2 <_dtoa_r+0x9a>
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	e4a1      	b.n	8009bb2 <_dtoa_r+0x9a>
 800a26e:	9e02      	ldr	r6, [sp, #8]
 800a270:	9b07      	ldr	r3, [sp, #28]
 800a272:	9307      	str	r3, [sp, #28]
 800a274:	3b01      	subs	r3, #1
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	2a39      	cmp	r2, #57	; 0x39
 800a27a:	d106      	bne.n	800a28a <_dtoa_r+0x772>
 800a27c:	9a05      	ldr	r2, [sp, #20]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d1f7      	bne.n	800a272 <_dtoa_r+0x75a>
 800a282:	2230      	movs	r2, #48	; 0x30
 800a284:	9905      	ldr	r1, [sp, #20]
 800a286:	3601      	adds	r6, #1
 800a288:	700a      	strb	r2, [r1, #0]
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	3201      	adds	r2, #1
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e785      	b.n	800a19e <_dtoa_r+0x686>
 800a292:	2200      	movs	r2, #0
 800a294:	4bad      	ldr	r3, [pc, #692]	; (800a54c <_dtoa_r+0xa34>)
 800a296:	f7f7 f8e7 	bl	8001468 <__aeabi_dmul>
 800a29a:	2200      	movs	r2, #0
 800a29c:	2300      	movs	r3, #0
 800a29e:	0004      	movs	r4, r0
 800a2a0:	000d      	movs	r5, r1
 800a2a2:	f7f6 f8d3 	bl	800044c <__aeabi_dcmpeq>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d09b      	beq.n	800a1e2 <_dtoa_r+0x6ca>
 800a2aa:	e7cf      	b.n	800a24c <_dtoa_r+0x734>
 800a2ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	d100      	bne.n	800a2b4 <_dtoa_r+0x79c>
 800a2b2:	e082      	b.n	800a3ba <_dtoa_r+0x8a2>
 800a2b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a2b6:	2a01      	cmp	r2, #1
 800a2b8:	dc66      	bgt.n	800a388 <_dtoa_r+0x870>
 800a2ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	d05f      	beq.n	800a380 <_dtoa_r+0x868>
 800a2c0:	4aa3      	ldr	r2, [pc, #652]	; (800a550 <_dtoa_r+0xa38>)
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a2c6:	9c08      	ldr	r4, [sp, #32]
 800a2c8:	9a08      	ldr	r2, [sp, #32]
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	18d2      	adds	r2, r2, r3
 800a2ce:	9208      	str	r2, [sp, #32]
 800a2d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2d2:	0038      	movs	r0, r7
 800a2d4:	18d3      	adds	r3, r2, r3
 800a2d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a2d8:	f000 ff22 	bl	800b120 <__i2b>
 800a2dc:	0005      	movs	r5, r0
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	dd0e      	ble.n	800a300 <_dtoa_r+0x7e8>
 800a2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dd0b      	ble.n	800a300 <_dtoa_r+0x7e8>
 800a2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2ea:	0023      	movs	r3, r4
 800a2ec:	4294      	cmp	r4, r2
 800a2ee:	dd00      	ble.n	800a2f2 <_dtoa_r+0x7da>
 800a2f0:	0013      	movs	r3, r2
 800a2f2:	9a08      	ldr	r2, [sp, #32]
 800a2f4:	1ae4      	subs	r4, r4, r3
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	9208      	str	r2, [sp, #32]
 800a2fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a302:	2b00      	cmp	r3, #0
 800a304:	d01f      	beq.n	800a346 <_dtoa_r+0x82e>
 800a306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d05a      	beq.n	800a3c2 <_dtoa_r+0x8aa>
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	dd11      	ble.n	800a334 <_dtoa_r+0x81c>
 800a310:	0029      	movs	r1, r5
 800a312:	0032      	movs	r2, r6
 800a314:	0038      	movs	r0, r7
 800a316:	f000 ffc9 	bl	800b2ac <__pow5mult>
 800a31a:	9a04      	ldr	r2, [sp, #16]
 800a31c:	0001      	movs	r1, r0
 800a31e:	0005      	movs	r5, r0
 800a320:	0038      	movs	r0, r7
 800a322:	f000 ff13 	bl	800b14c <__multiply>
 800a326:	9904      	ldr	r1, [sp, #16]
 800a328:	9007      	str	r0, [sp, #28]
 800a32a:	0038      	movs	r0, r7
 800a32c:	f000 fdfc 	bl	800af28 <_Bfree>
 800a330:	9b07      	ldr	r3, [sp, #28]
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a336:	1b9a      	subs	r2, r3, r6
 800a338:	42b3      	cmp	r3, r6
 800a33a:	d004      	beq.n	800a346 <_dtoa_r+0x82e>
 800a33c:	0038      	movs	r0, r7
 800a33e:	9904      	ldr	r1, [sp, #16]
 800a340:	f000 ffb4 	bl	800b2ac <__pow5mult>
 800a344:	9004      	str	r0, [sp, #16]
 800a346:	2101      	movs	r1, #1
 800a348:	0038      	movs	r0, r7
 800a34a:	f000 fee9 	bl	800b120 <__i2b>
 800a34e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a350:	0006      	movs	r6, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	dd37      	ble.n	800a3c6 <_dtoa_r+0x8ae>
 800a356:	001a      	movs	r2, r3
 800a358:	0001      	movs	r1, r0
 800a35a:	0038      	movs	r0, r7
 800a35c:	f000 ffa6 	bl	800b2ac <__pow5mult>
 800a360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a362:	0006      	movs	r6, r0
 800a364:	2b01      	cmp	r3, #1
 800a366:	dd33      	ble.n	800a3d0 <_dtoa_r+0x8b8>
 800a368:	2300      	movs	r3, #0
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	6933      	ldr	r3, [r6, #16]
 800a36e:	3303      	adds	r3, #3
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	18f3      	adds	r3, r6, r3
 800a374:	6858      	ldr	r0, [r3, #4]
 800a376:	f000 fe8b 	bl	800b090 <__hi0bits>
 800a37a:	2320      	movs	r3, #32
 800a37c:	1a18      	subs	r0, r3, r0
 800a37e:	e03f      	b.n	800a400 <_dtoa_r+0x8e8>
 800a380:	2336      	movs	r3, #54	; 0x36
 800a382:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	e79d      	b.n	800a2c4 <_dtoa_r+0x7ac>
 800a388:	9b06      	ldr	r3, [sp, #24]
 800a38a:	1e5e      	subs	r6, r3, #1
 800a38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a38e:	42b3      	cmp	r3, r6
 800a390:	db08      	blt.n	800a3a4 <_dtoa_r+0x88c>
 800a392:	1b9e      	subs	r6, r3, r6
 800a394:	9b06      	ldr	r3, [sp, #24]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da0c      	bge.n	800a3b4 <_dtoa_r+0x89c>
 800a39a:	9b08      	ldr	r3, [sp, #32]
 800a39c:	9a06      	ldr	r2, [sp, #24]
 800a39e:	1a9c      	subs	r4, r3, r2
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e791      	b.n	800a2c8 <_dtoa_r+0x7b0>
 800a3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3a8:	1af3      	subs	r3, r6, r3
 800a3aa:	18d3      	adds	r3, r2, r3
 800a3ac:	960e      	str	r6, [sp, #56]	; 0x38
 800a3ae:	9314      	str	r3, [sp, #80]	; 0x50
 800a3b0:	2600      	movs	r6, #0
 800a3b2:	e7ef      	b.n	800a394 <_dtoa_r+0x87c>
 800a3b4:	9c08      	ldr	r4, [sp, #32]
 800a3b6:	9b06      	ldr	r3, [sp, #24]
 800a3b8:	e786      	b.n	800a2c8 <_dtoa_r+0x7b0>
 800a3ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a3bc:	9c08      	ldr	r4, [sp, #32]
 800a3be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3c0:	e78d      	b.n	800a2de <_dtoa_r+0x7c6>
 800a3c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3c4:	e7ba      	b.n	800a33c <_dtoa_r+0x824>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9307      	str	r3, [sp, #28]
 800a3ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	dc13      	bgt.n	800a3f8 <_dtoa_r+0x8e0>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	9307      	str	r3, [sp, #28]
 800a3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10e      	bne.n	800a3f8 <_dtoa_r+0x8e0>
 800a3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3dc:	031b      	lsls	r3, r3, #12
 800a3de:	d10b      	bne.n	800a3f8 <_dtoa_r+0x8e0>
 800a3e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a3e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3e4:	4213      	tst	r3, r2
 800a3e6:	d007      	beq.n	800a3f8 <_dtoa_r+0x8e0>
 800a3e8:	9b08      	ldr	r3, [sp, #32]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	9308      	str	r3, [sp, #32]
 800a3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	9307      	str	r3, [sp, #28]
 800a3f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1b5      	bne.n	800a36c <_dtoa_r+0x854>
 800a400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a402:	221f      	movs	r2, #31
 800a404:	1818      	adds	r0, r3, r0
 800a406:	0003      	movs	r3, r0
 800a408:	4013      	ands	r3, r2
 800a40a:	4210      	tst	r0, r2
 800a40c:	d046      	beq.n	800a49c <_dtoa_r+0x984>
 800a40e:	3201      	adds	r2, #1
 800a410:	1ad2      	subs	r2, r2, r3
 800a412:	2a04      	cmp	r2, #4
 800a414:	dd3f      	ble.n	800a496 <_dtoa_r+0x97e>
 800a416:	221c      	movs	r2, #28
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	9a08      	ldr	r2, [sp, #32]
 800a41c:	18e4      	adds	r4, r4, r3
 800a41e:	18d2      	adds	r2, r2, r3
 800a420:	9208      	str	r2, [sp, #32]
 800a422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a424:	18d3      	adds	r3, r2, r3
 800a426:	930d      	str	r3, [sp, #52]	; 0x34
 800a428:	9b08      	ldr	r3, [sp, #32]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd05      	ble.n	800a43a <_dtoa_r+0x922>
 800a42e:	001a      	movs	r2, r3
 800a430:	0038      	movs	r0, r7
 800a432:	9904      	ldr	r1, [sp, #16]
 800a434:	f000 ff96 	bl	800b364 <__lshift>
 800a438:	9004      	str	r0, [sp, #16]
 800a43a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd05      	ble.n	800a44c <_dtoa_r+0x934>
 800a440:	0031      	movs	r1, r6
 800a442:	001a      	movs	r2, r3
 800a444:	0038      	movs	r0, r7
 800a446:	f000 ff8d 	bl	800b364 <__lshift>
 800a44a:	0006      	movs	r6, r0
 800a44c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d026      	beq.n	800a4a0 <_dtoa_r+0x988>
 800a452:	0031      	movs	r1, r6
 800a454:	9804      	ldr	r0, [sp, #16]
 800a456:	f000 fff5 	bl	800b444 <__mcmp>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	da20      	bge.n	800a4a0 <_dtoa_r+0x988>
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	220a      	movs	r2, #10
 800a462:	3b01      	subs	r3, #1
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	0038      	movs	r0, r7
 800a468:	2300      	movs	r3, #0
 800a46a:	9904      	ldr	r1, [sp, #16]
 800a46c:	f000 fd80 	bl	800af70 <__multadd>
 800a470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a472:	9004      	str	r0, [sp, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d100      	bne.n	800a47a <_dtoa_r+0x962>
 800a478:	e160      	b.n	800a73c <_dtoa_r+0xc24>
 800a47a:	2300      	movs	r3, #0
 800a47c:	0029      	movs	r1, r5
 800a47e:	220a      	movs	r2, #10
 800a480:	0038      	movs	r0, r7
 800a482:	f000 fd75 	bl	800af70 <__multadd>
 800a486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a488:	0005      	movs	r5, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dc47      	bgt.n	800a51e <_dtoa_r+0xa06>
 800a48e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a490:	2b02      	cmp	r3, #2
 800a492:	dc0d      	bgt.n	800a4b0 <_dtoa_r+0x998>
 800a494:	e043      	b.n	800a51e <_dtoa_r+0xa06>
 800a496:	2a04      	cmp	r2, #4
 800a498:	d0c6      	beq.n	800a428 <_dtoa_r+0x910>
 800a49a:	0013      	movs	r3, r2
 800a49c:	331c      	adds	r3, #28
 800a49e:	e7bc      	b.n	800a41a <_dtoa_r+0x902>
 800a4a0:	9b06      	ldr	r3, [sp, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc35      	bgt.n	800a512 <_dtoa_r+0x9fa>
 800a4a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	dd32      	ble.n	800a512 <_dtoa_r+0x9fa>
 800a4ac:	9b06      	ldr	r3, [sp, #24]
 800a4ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10c      	bne.n	800a4d0 <_dtoa_r+0x9b8>
 800a4b6:	0031      	movs	r1, r6
 800a4b8:	2205      	movs	r2, #5
 800a4ba:	0038      	movs	r0, r7
 800a4bc:	f000 fd58 	bl	800af70 <__multadd>
 800a4c0:	0006      	movs	r6, r0
 800a4c2:	0001      	movs	r1, r0
 800a4c4:	9804      	ldr	r0, [sp, #16]
 800a4c6:	f000 ffbd 	bl	800b444 <__mcmp>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	dd00      	ble.n	800a4d0 <_dtoa_r+0x9b8>
 800a4ce:	e59f      	b.n	800a010 <_dtoa_r+0x4f8>
 800a4d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4d2:	43db      	mvns	r3, r3
 800a4d4:	9302      	str	r3, [sp, #8]
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	2400      	movs	r4, #0
 800a4dc:	0031      	movs	r1, r6
 800a4de:	0038      	movs	r0, r7
 800a4e0:	f000 fd22 	bl	800af28 <_Bfree>
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	d100      	bne.n	800a4ea <_dtoa_r+0x9d2>
 800a4e8:	e6b0      	b.n	800a24c <_dtoa_r+0x734>
 800a4ea:	2c00      	cmp	r4, #0
 800a4ec:	d005      	beq.n	800a4fa <_dtoa_r+0x9e2>
 800a4ee:	42ac      	cmp	r4, r5
 800a4f0:	d003      	beq.n	800a4fa <_dtoa_r+0x9e2>
 800a4f2:	0021      	movs	r1, r4
 800a4f4:	0038      	movs	r0, r7
 800a4f6:	f000 fd17 	bl	800af28 <_Bfree>
 800a4fa:	0029      	movs	r1, r5
 800a4fc:	0038      	movs	r0, r7
 800a4fe:	f000 fd13 	bl	800af28 <_Bfree>
 800a502:	e6a3      	b.n	800a24c <_dtoa_r+0x734>
 800a504:	2600      	movs	r6, #0
 800a506:	0035      	movs	r5, r6
 800a508:	e7e2      	b.n	800a4d0 <_dtoa_r+0x9b8>
 800a50a:	9602      	str	r6, [sp, #8]
 800a50c:	9e07      	ldr	r6, [sp, #28]
 800a50e:	0035      	movs	r5, r6
 800a510:	e57e      	b.n	800a010 <_dtoa_r+0x4f8>
 800a512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d100      	bne.n	800a51a <_dtoa_r+0xa02>
 800a518:	e0c8      	b.n	800a6ac <_dtoa_r+0xb94>
 800a51a:	9b06      	ldr	r3, [sp, #24]
 800a51c:	930c      	str	r3, [sp, #48]	; 0x30
 800a51e:	2c00      	cmp	r4, #0
 800a520:	dd05      	ble.n	800a52e <_dtoa_r+0xa16>
 800a522:	0029      	movs	r1, r5
 800a524:	0022      	movs	r2, r4
 800a526:	0038      	movs	r0, r7
 800a528:	f000 ff1c 	bl	800b364 <__lshift>
 800a52c:	0005      	movs	r5, r0
 800a52e:	9b07      	ldr	r3, [sp, #28]
 800a530:	0028      	movs	r0, r5
 800a532:	2b00      	cmp	r3, #0
 800a534:	d01f      	beq.n	800a576 <_dtoa_r+0xa5e>
 800a536:	0038      	movs	r0, r7
 800a538:	6869      	ldr	r1, [r5, #4]
 800a53a:	f000 fcb1 	bl	800aea0 <_Balloc>
 800a53e:	1e04      	subs	r4, r0, #0
 800a540:	d10c      	bne.n	800a55c <_dtoa_r+0xa44>
 800a542:	0002      	movs	r2, r0
 800a544:	4b03      	ldr	r3, [pc, #12]	; (800a554 <_dtoa_r+0xa3c>)
 800a546:	4904      	ldr	r1, [pc, #16]	; (800a558 <_dtoa_r+0xa40>)
 800a548:	f7ff fafb 	bl	8009b42 <_dtoa_r+0x2a>
 800a54c:	40240000 	.word	0x40240000
 800a550:	00000433 	.word	0x00000433
 800a554:	0800cbe4 	.word	0x0800cbe4
 800a558:	000002ea 	.word	0x000002ea
 800a55c:	0029      	movs	r1, r5
 800a55e:	692b      	ldr	r3, [r5, #16]
 800a560:	310c      	adds	r1, #12
 800a562:	1c9a      	adds	r2, r3, #2
 800a564:	0092      	lsls	r2, r2, #2
 800a566:	300c      	adds	r0, #12
 800a568:	f000 fc91 	bl	800ae8e <memcpy>
 800a56c:	2201      	movs	r2, #1
 800a56e:	0021      	movs	r1, r4
 800a570:	0038      	movs	r0, r7
 800a572:	f000 fef7 	bl	800b364 <__lshift>
 800a576:	002c      	movs	r4, r5
 800a578:	0005      	movs	r5, r0
 800a57a:	9b05      	ldr	r3, [sp, #20]
 800a57c:	9308      	str	r3, [sp, #32]
 800a57e:	0031      	movs	r1, r6
 800a580:	9804      	ldr	r0, [sp, #16]
 800a582:	f7ff fa3d 	bl	8009a00 <quorem>
 800a586:	0003      	movs	r3, r0
 800a588:	0021      	movs	r1, r4
 800a58a:	3330      	adds	r3, #48	; 0x30
 800a58c:	900e      	str	r0, [sp, #56]	; 0x38
 800a58e:	9804      	ldr	r0, [sp, #16]
 800a590:	9306      	str	r3, [sp, #24]
 800a592:	f000 ff57 	bl	800b444 <__mcmp>
 800a596:	002a      	movs	r2, r5
 800a598:	900f      	str	r0, [sp, #60]	; 0x3c
 800a59a:	0031      	movs	r1, r6
 800a59c:	0038      	movs	r0, r7
 800a59e:	f000 ff6d 	bl	800b47c <__mdiff>
 800a5a2:	68c3      	ldr	r3, [r0, #12]
 800a5a4:	9007      	str	r0, [sp, #28]
 800a5a6:	9310      	str	r3, [sp, #64]	; 0x40
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d104      	bne.n	800a5bc <_dtoa_r+0xaa4>
 800a5b2:	0001      	movs	r1, r0
 800a5b4:	9804      	ldr	r0, [sp, #16]
 800a5b6:	f000 ff45 	bl	800b444 <__mcmp>
 800a5ba:	900d      	str	r0, [sp, #52]	; 0x34
 800a5bc:	0038      	movs	r0, r7
 800a5be:	9907      	ldr	r1, [sp, #28]
 800a5c0:	f000 fcb2 	bl	800af28 <_Bfree>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5ca:	4018      	ands	r0, r3
 800a5cc:	9b08      	ldr	r3, [sp, #32]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	9307      	str	r3, [sp, #28]
 800a5d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	4303      	orrs	r3, r0
 800a5d8:	d10c      	bne.n	800a5f4 <_dtoa_r+0xadc>
 800a5da:	9b06      	ldr	r3, [sp, #24]
 800a5dc:	2b39      	cmp	r3, #57	; 0x39
 800a5de:	d025      	beq.n	800a62c <_dtoa_r+0xb14>
 800a5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dd02      	ble.n	800a5ec <_dtoa_r+0xad4>
 800a5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e8:	3331      	adds	r3, #49	; 0x31
 800a5ea:	9306      	str	r3, [sp, #24]
 800a5ec:	9b08      	ldr	r3, [sp, #32]
 800a5ee:	9a06      	ldr	r2, [sp, #24]
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	e773      	b.n	800a4dc <_dtoa_r+0x9c4>
 800a5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	db03      	blt.n	800a602 <_dtoa_r+0xaea>
 800a5fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	4303      	orrs	r3, r0
 800a600:	d11f      	bne.n	800a642 <_dtoa_r+0xb2a>
 800a602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a604:	2b00      	cmp	r3, #0
 800a606:	ddf1      	ble.n	800a5ec <_dtoa_r+0xad4>
 800a608:	9904      	ldr	r1, [sp, #16]
 800a60a:	2201      	movs	r2, #1
 800a60c:	0038      	movs	r0, r7
 800a60e:	f000 fea9 	bl	800b364 <__lshift>
 800a612:	0031      	movs	r1, r6
 800a614:	9004      	str	r0, [sp, #16]
 800a616:	f000 ff15 	bl	800b444 <__mcmp>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	dc03      	bgt.n	800a626 <_dtoa_r+0xb0e>
 800a61e:	d1e5      	bne.n	800a5ec <_dtoa_r+0xad4>
 800a620:	9b06      	ldr	r3, [sp, #24]
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d5e2      	bpl.n	800a5ec <_dtoa_r+0xad4>
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	2b39      	cmp	r3, #57	; 0x39
 800a62a:	d1dc      	bne.n	800a5e6 <_dtoa_r+0xace>
 800a62c:	2339      	movs	r3, #57	; 0x39
 800a62e:	9a08      	ldr	r2, [sp, #32]
 800a630:	7013      	strb	r3, [r2, #0]
 800a632:	9b07      	ldr	r3, [sp, #28]
 800a634:	9307      	str	r3, [sp, #28]
 800a636:	3b01      	subs	r3, #1
 800a638:	781a      	ldrb	r2, [r3, #0]
 800a63a:	2a39      	cmp	r2, #57	; 0x39
 800a63c:	d06c      	beq.n	800a718 <_dtoa_r+0xc00>
 800a63e:	3201      	adds	r2, #1
 800a640:	e7d6      	b.n	800a5f0 <_dtoa_r+0xad8>
 800a642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a644:	2b00      	cmp	r3, #0
 800a646:	dd07      	ble.n	800a658 <_dtoa_r+0xb40>
 800a648:	9b06      	ldr	r3, [sp, #24]
 800a64a:	2b39      	cmp	r3, #57	; 0x39
 800a64c:	d0ee      	beq.n	800a62c <_dtoa_r+0xb14>
 800a64e:	9b06      	ldr	r3, [sp, #24]
 800a650:	9a08      	ldr	r2, [sp, #32]
 800a652:	3301      	adds	r3, #1
 800a654:	7013      	strb	r3, [r2, #0]
 800a656:	e741      	b.n	800a4dc <_dtoa_r+0x9c4>
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	9a06      	ldr	r2, [sp, #24]
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	2301      	movs	r3, #1
 800a660:	9a05      	ldr	r2, [sp, #20]
 800a662:	1a9b      	subs	r3, r3, r2
 800a664:	9a08      	ldr	r2, [sp, #32]
 800a666:	189b      	adds	r3, r3, r2
 800a668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d03e      	beq.n	800a6ec <_dtoa_r+0xbd4>
 800a66e:	2300      	movs	r3, #0
 800a670:	220a      	movs	r2, #10
 800a672:	9904      	ldr	r1, [sp, #16]
 800a674:	0038      	movs	r0, r7
 800a676:	f000 fc7b 	bl	800af70 <__multadd>
 800a67a:	2300      	movs	r3, #0
 800a67c:	9004      	str	r0, [sp, #16]
 800a67e:	220a      	movs	r2, #10
 800a680:	0021      	movs	r1, r4
 800a682:	0038      	movs	r0, r7
 800a684:	42ac      	cmp	r4, r5
 800a686:	d106      	bne.n	800a696 <_dtoa_r+0xb7e>
 800a688:	f000 fc72 	bl	800af70 <__multadd>
 800a68c:	0004      	movs	r4, r0
 800a68e:	0005      	movs	r5, r0
 800a690:	9b07      	ldr	r3, [sp, #28]
 800a692:	9308      	str	r3, [sp, #32]
 800a694:	e773      	b.n	800a57e <_dtoa_r+0xa66>
 800a696:	f000 fc6b 	bl	800af70 <__multadd>
 800a69a:	0029      	movs	r1, r5
 800a69c:	0004      	movs	r4, r0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	0038      	movs	r0, r7
 800a6a4:	f000 fc64 	bl	800af70 <__multadd>
 800a6a8:	0005      	movs	r5, r0
 800a6aa:	e7f1      	b.n	800a690 <_dtoa_r+0xb78>
 800a6ac:	9b06      	ldr	r3, [sp, #24]
 800a6ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a6b0:	2400      	movs	r4, #0
 800a6b2:	0031      	movs	r1, r6
 800a6b4:	9804      	ldr	r0, [sp, #16]
 800a6b6:	f7ff f9a3 	bl	8009a00 <quorem>
 800a6ba:	9b05      	ldr	r3, [sp, #20]
 800a6bc:	3030      	adds	r0, #48	; 0x30
 800a6be:	5518      	strb	r0, [r3, r4]
 800a6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6c2:	3401      	adds	r4, #1
 800a6c4:	9006      	str	r0, [sp, #24]
 800a6c6:	42a3      	cmp	r3, r4
 800a6c8:	dd07      	ble.n	800a6da <_dtoa_r+0xbc2>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	0038      	movs	r0, r7
 800a6d0:	9904      	ldr	r1, [sp, #16]
 800a6d2:	f000 fc4d 	bl	800af70 <__multadd>
 800a6d6:	9004      	str	r0, [sp, #16]
 800a6d8:	e7eb      	b.n	800a6b2 <_dtoa_r+0xb9a>
 800a6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6dc:	2001      	movs	r0, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dd00      	ble.n	800a6e4 <_dtoa_r+0xbcc>
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	2400      	movs	r4, #0
 800a6e6:	9b05      	ldr	r3, [sp, #20]
 800a6e8:	181b      	adds	r3, r3, r0
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	9904      	ldr	r1, [sp, #16]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	0038      	movs	r0, r7
 800a6f2:	f000 fe37 	bl	800b364 <__lshift>
 800a6f6:	0031      	movs	r1, r6
 800a6f8:	9004      	str	r0, [sp, #16]
 800a6fa:	f000 fea3 	bl	800b444 <__mcmp>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	dc97      	bgt.n	800a632 <_dtoa_r+0xb1a>
 800a702:	d102      	bne.n	800a70a <_dtoa_r+0xbf2>
 800a704:	9b06      	ldr	r3, [sp, #24]
 800a706:	07db      	lsls	r3, r3, #31
 800a708:	d493      	bmi.n	800a632 <_dtoa_r+0xb1a>
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	9307      	str	r3, [sp, #28]
 800a70e:	3b01      	subs	r3, #1
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	2a30      	cmp	r2, #48	; 0x30
 800a714:	d0fa      	beq.n	800a70c <_dtoa_r+0xbf4>
 800a716:	e6e1      	b.n	800a4dc <_dtoa_r+0x9c4>
 800a718:	9a05      	ldr	r2, [sp, #20]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d18a      	bne.n	800a634 <_dtoa_r+0xb1c>
 800a71e:	9b02      	ldr	r3, [sp, #8]
 800a720:	3301      	adds	r3, #1
 800a722:	9302      	str	r3, [sp, #8]
 800a724:	2331      	movs	r3, #49	; 0x31
 800a726:	e795      	b.n	800a654 <_dtoa_r+0xb3c>
 800a728:	4b08      	ldr	r3, [pc, #32]	; (800a74c <_dtoa_r+0xc34>)
 800a72a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a72c:	9305      	str	r3, [sp, #20]
 800a72e:	4b08      	ldr	r3, [pc, #32]	; (800a750 <_dtoa_r+0xc38>)
 800a730:	2a00      	cmp	r2, #0
 800a732:	d001      	beq.n	800a738 <_dtoa_r+0xc20>
 800a734:	f7ff fa3b 	bl	8009bae <_dtoa_r+0x96>
 800a738:	f7ff fa3b 	bl	8009bb2 <_dtoa_r+0x9a>
 800a73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a73e:	2b00      	cmp	r3, #0
 800a740:	dcb6      	bgt.n	800a6b0 <_dtoa_r+0xb98>
 800a742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a744:	2b02      	cmp	r3, #2
 800a746:	dd00      	ble.n	800a74a <_dtoa_r+0xc32>
 800a748:	e6b2      	b.n	800a4b0 <_dtoa_r+0x998>
 800a74a:	e7b1      	b.n	800a6b0 <_dtoa_r+0xb98>
 800a74c:	0800cb61 	.word	0x0800cb61
 800a750:	0800cb69 	.word	0x0800cb69

0800a754 <rshift>:
 800a754:	0002      	movs	r2, r0
 800a756:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a758:	6907      	ldr	r7, [r0, #16]
 800a75a:	3214      	adds	r2, #20
 800a75c:	0013      	movs	r3, r2
 800a75e:	b085      	sub	sp, #20
 800a760:	114e      	asrs	r6, r1, #5
 800a762:	42b7      	cmp	r7, r6
 800a764:	dd31      	ble.n	800a7ca <rshift+0x76>
 800a766:	00b3      	lsls	r3, r6, #2
 800a768:	18d3      	adds	r3, r2, r3
 800a76a:	251f      	movs	r5, #31
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	000b      	movs	r3, r1
 800a770:	00bc      	lsls	r4, r7, #2
 800a772:	402b      	ands	r3, r5
 800a774:	1914      	adds	r4, r2, r4
 800a776:	9302      	str	r3, [sp, #8]
 800a778:	4229      	tst	r1, r5
 800a77a:	d10c      	bne.n	800a796 <rshift+0x42>
 800a77c:	0015      	movs	r5, r2
 800a77e:	9901      	ldr	r1, [sp, #4]
 800a780:	428c      	cmp	r4, r1
 800a782:	d838      	bhi.n	800a7f6 <rshift+0xa2>
 800a784:	9901      	ldr	r1, [sp, #4]
 800a786:	2300      	movs	r3, #0
 800a788:	3903      	subs	r1, #3
 800a78a:	428c      	cmp	r4, r1
 800a78c:	d301      	bcc.n	800a792 <rshift+0x3e>
 800a78e:	1bbb      	subs	r3, r7, r6
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	18d3      	adds	r3, r2, r3
 800a794:	e019      	b.n	800a7ca <rshift+0x76>
 800a796:	2120      	movs	r1, #32
 800a798:	9b02      	ldr	r3, [sp, #8]
 800a79a:	9d01      	ldr	r5, [sp, #4]
 800a79c:	1acb      	subs	r3, r1, r3
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	cd02      	ldmia	r5!, {r1}
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	4694      	mov	ip, r2
 800a7a6:	40d9      	lsrs	r1, r3
 800a7a8:	9100      	str	r1, [sp, #0]
 800a7aa:	42ac      	cmp	r4, r5
 800a7ac:	d816      	bhi.n	800a7dc <rshift+0x88>
 800a7ae:	9d01      	ldr	r5, [sp, #4]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	3501      	adds	r5, #1
 800a7b4:	42ac      	cmp	r4, r5
 800a7b6:	d302      	bcc.n	800a7be <rshift+0x6a>
 800a7b8:	1bbb      	subs	r3, r7, r6
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	3b04      	subs	r3, #4
 800a7be:	9900      	ldr	r1, [sp, #0]
 800a7c0:	18d3      	adds	r3, r2, r3
 800a7c2:	6019      	str	r1, [r3, #0]
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	d000      	beq.n	800a7ca <rshift+0x76>
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	1a99      	subs	r1, r3, r2
 800a7cc:	1089      	asrs	r1, r1, #2
 800a7ce:	6101      	str	r1, [r0, #16]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d101      	bne.n	800a7d8 <rshift+0x84>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	6143      	str	r3, [r0, #20]
 800a7d8:	b005      	add	sp, #20
 800a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	9903      	ldr	r1, [sp, #12]
 800a7e0:	408b      	lsls	r3, r1
 800a7e2:	9900      	ldr	r1, [sp, #0]
 800a7e4:	4319      	orrs	r1, r3
 800a7e6:	4663      	mov	r3, ip
 800a7e8:	c302      	stmia	r3!, {r1}
 800a7ea:	469c      	mov	ip, r3
 800a7ec:	cd02      	ldmia	r5!, {r1}
 800a7ee:	9b02      	ldr	r3, [sp, #8]
 800a7f0:	40d9      	lsrs	r1, r3
 800a7f2:	9100      	str	r1, [sp, #0]
 800a7f4:	e7d9      	b.n	800a7aa <rshift+0x56>
 800a7f6:	c908      	ldmia	r1!, {r3}
 800a7f8:	c508      	stmia	r5!, {r3}
 800a7fa:	e7c1      	b.n	800a780 <rshift+0x2c>

0800a7fc <__hexdig_fun>:
 800a7fc:	0002      	movs	r2, r0
 800a7fe:	3a30      	subs	r2, #48	; 0x30
 800a800:	0003      	movs	r3, r0
 800a802:	2a09      	cmp	r2, #9
 800a804:	d802      	bhi.n	800a80c <__hexdig_fun+0x10>
 800a806:	3b20      	subs	r3, #32
 800a808:	b2d8      	uxtb	r0, r3
 800a80a:	4770      	bx	lr
 800a80c:	0002      	movs	r2, r0
 800a80e:	3a61      	subs	r2, #97	; 0x61
 800a810:	2a05      	cmp	r2, #5
 800a812:	d801      	bhi.n	800a818 <__hexdig_fun+0x1c>
 800a814:	3b47      	subs	r3, #71	; 0x47
 800a816:	e7f7      	b.n	800a808 <__hexdig_fun+0xc>
 800a818:	001a      	movs	r2, r3
 800a81a:	3a41      	subs	r2, #65	; 0x41
 800a81c:	2000      	movs	r0, #0
 800a81e:	2a05      	cmp	r2, #5
 800a820:	d8f3      	bhi.n	800a80a <__hexdig_fun+0xe>
 800a822:	3b27      	subs	r3, #39	; 0x27
 800a824:	e7f0      	b.n	800a808 <__hexdig_fun+0xc>
	...

0800a828 <__gethex>:
 800a828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a82a:	b08d      	sub	sp, #52	; 0x34
 800a82c:	930a      	str	r3, [sp, #40]	; 0x28
 800a82e:	4bbd      	ldr	r3, [pc, #756]	; (800ab24 <__gethex+0x2fc>)
 800a830:	9005      	str	r0, [sp, #20]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	9109      	str	r1, [sp, #36]	; 0x24
 800a836:	0018      	movs	r0, r3
 800a838:	9202      	str	r2, [sp, #8]
 800a83a:	9307      	str	r3, [sp, #28]
 800a83c:	f7f5 fc64 	bl	8000108 <strlen>
 800a840:	2202      	movs	r2, #2
 800a842:	9b07      	ldr	r3, [sp, #28]
 800a844:	4252      	negs	r2, r2
 800a846:	181b      	adds	r3, r3, r0
 800a848:	3b01      	subs	r3, #1
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	9003      	str	r0, [sp, #12]
 800a84e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	6819      	ldr	r1, [r3, #0]
 800a854:	1c8b      	adds	r3, r1, #2
 800a856:	1a52      	subs	r2, r2, r1
 800a858:	18d1      	adds	r1, r2, r3
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	9108      	str	r1, [sp, #32]
 800a85e:	9901      	ldr	r1, [sp, #4]
 800a860:	3301      	adds	r3, #1
 800a862:	7808      	ldrb	r0, [r1, #0]
 800a864:	2830      	cmp	r0, #48	; 0x30
 800a866:	d0f7      	beq.n	800a858 <__gethex+0x30>
 800a868:	f7ff ffc8 	bl	800a7fc <__hexdig_fun>
 800a86c:	1e04      	subs	r4, r0, #0
 800a86e:	d13e      	bne.n	800a8ee <__gethex+0xc6>
 800a870:	9a03      	ldr	r2, [sp, #12]
 800a872:	9907      	ldr	r1, [sp, #28]
 800a874:	9801      	ldr	r0, [sp, #4]
 800a876:	f001 fa0d 	bl	800bc94 <strncmp>
 800a87a:	1e07      	subs	r7, r0, #0
 800a87c:	d000      	beq.n	800a880 <__gethex+0x58>
 800a87e:	e06f      	b.n	800a960 <__gethex+0x138>
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	9a03      	ldr	r2, [sp, #12]
 800a884:	5c98      	ldrb	r0, [r3, r2]
 800a886:	189d      	adds	r5, r3, r2
 800a888:	f7ff ffb8 	bl	800a7fc <__hexdig_fun>
 800a88c:	2301      	movs	r3, #1
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	2800      	cmp	r0, #0
 800a892:	d034      	beq.n	800a8fe <__gethex+0xd6>
 800a894:	9501      	str	r5, [sp, #4]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	7818      	ldrb	r0, [r3, #0]
 800a89a:	2830      	cmp	r0, #48	; 0x30
 800a89c:	d009      	beq.n	800a8b2 <__gethex+0x8a>
 800a89e:	f7ff ffad 	bl	800a7fc <__hexdig_fun>
 800a8a2:	4243      	negs	r3, r0
 800a8a4:	4143      	adcs	r3, r0
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	002c      	movs	r4, r5
 800a8ac:	9308      	str	r3, [sp, #32]
 800a8ae:	9d01      	ldr	r5, [sp, #4]
 800a8b0:	e004      	b.n	800a8bc <__gethex+0x94>
 800a8b2:	9b01      	ldr	r3, [sp, #4]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	e7ed      	b.n	800a896 <__gethex+0x6e>
 800a8ba:	3501      	adds	r5, #1
 800a8bc:	7828      	ldrb	r0, [r5, #0]
 800a8be:	f7ff ff9d 	bl	800a7fc <__hexdig_fun>
 800a8c2:	1e07      	subs	r7, r0, #0
 800a8c4:	d1f9      	bne.n	800a8ba <__gethex+0x92>
 800a8c6:	0028      	movs	r0, r5
 800a8c8:	9a03      	ldr	r2, [sp, #12]
 800a8ca:	9907      	ldr	r1, [sp, #28]
 800a8cc:	f001 f9e2 	bl	800bc94 <strncmp>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d112      	bne.n	800a8fa <__gethex+0xd2>
 800a8d4:	2c00      	cmp	r4, #0
 800a8d6:	d107      	bne.n	800a8e8 <__gethex+0xc0>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	18ed      	adds	r5, r5, r3
 800a8dc:	002c      	movs	r4, r5
 800a8de:	7828      	ldrb	r0, [r5, #0]
 800a8e0:	f7ff ff8c 	bl	800a7fc <__hexdig_fun>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d106      	bne.n	800a8f6 <__gethex+0xce>
 800a8e8:	1b67      	subs	r7, r4, r5
 800a8ea:	00bf      	lsls	r7, r7, #2
 800a8ec:	e007      	b.n	800a8fe <__gethex+0xd6>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	001c      	movs	r4, r3
 800a8f2:	9304      	str	r3, [sp, #16]
 800a8f4:	e7db      	b.n	800a8ae <__gethex+0x86>
 800a8f6:	3501      	adds	r5, #1
 800a8f8:	e7f1      	b.n	800a8de <__gethex+0xb6>
 800a8fa:	2c00      	cmp	r4, #0
 800a8fc:	d1f4      	bne.n	800a8e8 <__gethex+0xc0>
 800a8fe:	2220      	movs	r2, #32
 800a900:	782b      	ldrb	r3, [r5, #0]
 800a902:	002e      	movs	r6, r5
 800a904:	4393      	bics	r3, r2
 800a906:	2b50      	cmp	r3, #80	; 0x50
 800a908:	d11d      	bne.n	800a946 <__gethex+0x11e>
 800a90a:	786b      	ldrb	r3, [r5, #1]
 800a90c:	2b2b      	cmp	r3, #43	; 0x2b
 800a90e:	d02c      	beq.n	800a96a <__gethex+0x142>
 800a910:	2b2d      	cmp	r3, #45	; 0x2d
 800a912:	d02e      	beq.n	800a972 <__gethex+0x14a>
 800a914:	2300      	movs	r3, #0
 800a916:	1c6e      	adds	r6, r5, #1
 800a918:	9306      	str	r3, [sp, #24]
 800a91a:	7830      	ldrb	r0, [r6, #0]
 800a91c:	f7ff ff6e 	bl	800a7fc <__hexdig_fun>
 800a920:	1e43      	subs	r3, r0, #1
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b18      	cmp	r3, #24
 800a926:	d82b      	bhi.n	800a980 <__gethex+0x158>
 800a928:	3810      	subs	r0, #16
 800a92a:	0004      	movs	r4, r0
 800a92c:	7870      	ldrb	r0, [r6, #1]
 800a92e:	f7ff ff65 	bl	800a7fc <__hexdig_fun>
 800a932:	1e43      	subs	r3, r0, #1
 800a934:	b2db      	uxtb	r3, r3
 800a936:	3601      	adds	r6, #1
 800a938:	2b18      	cmp	r3, #24
 800a93a:	d91c      	bls.n	800a976 <__gethex+0x14e>
 800a93c:	9b06      	ldr	r3, [sp, #24]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d000      	beq.n	800a944 <__gethex+0x11c>
 800a942:	4264      	negs	r4, r4
 800a944:	193f      	adds	r7, r7, r4
 800a946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a948:	601e      	str	r6, [r3, #0]
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d019      	beq.n	800a984 <__gethex+0x15c>
 800a950:	2600      	movs	r6, #0
 800a952:	9b08      	ldr	r3, [sp, #32]
 800a954:	42b3      	cmp	r3, r6
 800a956:	d100      	bne.n	800a95a <__gethex+0x132>
 800a958:	3606      	adds	r6, #6
 800a95a:	0030      	movs	r0, r6
 800a95c:	b00d      	add	sp, #52	; 0x34
 800a95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a960:	2301      	movs	r3, #1
 800a962:	0027      	movs	r7, r4
 800a964:	9d01      	ldr	r5, [sp, #4]
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	e7c9      	b.n	800a8fe <__gethex+0xd6>
 800a96a:	2300      	movs	r3, #0
 800a96c:	9306      	str	r3, [sp, #24]
 800a96e:	1cae      	adds	r6, r5, #2
 800a970:	e7d3      	b.n	800a91a <__gethex+0xf2>
 800a972:	2301      	movs	r3, #1
 800a974:	e7fa      	b.n	800a96c <__gethex+0x144>
 800a976:	230a      	movs	r3, #10
 800a978:	435c      	muls	r4, r3
 800a97a:	1824      	adds	r4, r4, r0
 800a97c:	3c10      	subs	r4, #16
 800a97e:	e7d5      	b.n	800a92c <__gethex+0x104>
 800a980:	002e      	movs	r6, r5
 800a982:	e7e0      	b.n	800a946 <__gethex+0x11e>
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	9904      	ldr	r1, [sp, #16]
 800a988:	1aeb      	subs	r3, r5, r3
 800a98a:	3b01      	subs	r3, #1
 800a98c:	2b07      	cmp	r3, #7
 800a98e:	dc0a      	bgt.n	800a9a6 <__gethex+0x17e>
 800a990:	9805      	ldr	r0, [sp, #20]
 800a992:	f000 fa85 	bl	800aea0 <_Balloc>
 800a996:	1e04      	subs	r4, r0, #0
 800a998:	d108      	bne.n	800a9ac <__gethex+0x184>
 800a99a:	0002      	movs	r2, r0
 800a99c:	21de      	movs	r1, #222	; 0xde
 800a99e:	4b62      	ldr	r3, [pc, #392]	; (800ab28 <__gethex+0x300>)
 800a9a0:	4862      	ldr	r0, [pc, #392]	; (800ab2c <__gethex+0x304>)
 800a9a2:	f001 f995 	bl	800bcd0 <__assert_func>
 800a9a6:	3101      	adds	r1, #1
 800a9a8:	105b      	asrs	r3, r3, #1
 800a9aa:	e7ef      	b.n	800a98c <__gethex+0x164>
 800a9ac:	0003      	movs	r3, r0
 800a9ae:	3314      	adds	r3, #20
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	001e      	movs	r6, r3
 800a9b8:	9306      	str	r3, [sp, #24]
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	d340      	bcc.n	800aa42 <__gethex+0x21a>
 800a9c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	c540      	stmia	r5!, {r6}
 800a9c6:	1aed      	subs	r5, r5, r3
 800a9c8:	10ad      	asrs	r5, r5, #2
 800a9ca:	0030      	movs	r0, r6
 800a9cc:	6125      	str	r5, [r4, #16]
 800a9ce:	f000 fb5f 	bl	800b090 <__hi0bits>
 800a9d2:	9b02      	ldr	r3, [sp, #8]
 800a9d4:	016d      	lsls	r5, r5, #5
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	1a2e      	subs	r6, r5, r0
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	429e      	cmp	r6, r3
 800a9de:	dd5a      	ble.n	800aa96 <__gethex+0x26e>
 800a9e0:	1af6      	subs	r6, r6, r3
 800a9e2:	0031      	movs	r1, r6
 800a9e4:	0020      	movs	r0, r4
 800a9e6:	f000 ff02 	bl	800b7ee <__any_on>
 800a9ea:	1e05      	subs	r5, r0, #0
 800a9ec:	d016      	beq.n	800aa1c <__gethex+0x1f4>
 800a9ee:	2501      	movs	r5, #1
 800a9f0:	211f      	movs	r1, #31
 800a9f2:	0028      	movs	r0, r5
 800a9f4:	1e73      	subs	r3, r6, #1
 800a9f6:	4019      	ands	r1, r3
 800a9f8:	4088      	lsls	r0, r1
 800a9fa:	0001      	movs	r1, r0
 800a9fc:	115a      	asrs	r2, r3, #5
 800a9fe:	9804      	ldr	r0, [sp, #16]
 800aa00:	0092      	lsls	r2, r2, #2
 800aa02:	5812      	ldr	r2, [r2, r0]
 800aa04:	420a      	tst	r2, r1
 800aa06:	d009      	beq.n	800aa1c <__gethex+0x1f4>
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dd06      	ble.n	800aa1a <__gethex+0x1f2>
 800aa0c:	0020      	movs	r0, r4
 800aa0e:	1eb1      	subs	r1, r6, #2
 800aa10:	f000 feed 	bl	800b7ee <__any_on>
 800aa14:	3502      	adds	r5, #2
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d100      	bne.n	800aa1c <__gethex+0x1f4>
 800aa1a:	2502      	movs	r5, #2
 800aa1c:	0031      	movs	r1, r6
 800aa1e:	0020      	movs	r0, r4
 800aa20:	f7ff fe98 	bl	800a754 <rshift>
 800aa24:	19bf      	adds	r7, r7, r6
 800aa26:	9b02      	ldr	r3, [sp, #8]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	9303      	str	r3, [sp, #12]
 800aa2c:	42bb      	cmp	r3, r7
 800aa2e:	da42      	bge.n	800aab6 <__gethex+0x28e>
 800aa30:	0021      	movs	r1, r4
 800aa32:	9805      	ldr	r0, [sp, #20]
 800aa34:	f000 fa78 	bl	800af28 <_Bfree>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa3c:	26a3      	movs	r6, #163	; 0xa3
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e78b      	b.n	800a95a <__gethex+0x132>
 800aa42:	1e6b      	subs	r3, r5, #1
 800aa44:	9308      	str	r3, [sp, #32]
 800aa46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d014      	beq.n	800aa78 <__gethex+0x250>
 800aa4e:	9b06      	ldr	r3, [sp, #24]
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	d104      	bne.n	800aa5e <__gethex+0x236>
 800aa54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa56:	c340      	stmia	r3!, {r6}
 800aa58:	2600      	movs	r6, #0
 800aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5c:	9606      	str	r6, [sp, #24]
 800aa5e:	9b08      	ldr	r3, [sp, #32]
 800aa60:	7818      	ldrb	r0, [r3, #0]
 800aa62:	f7ff fecb 	bl	800a7fc <__hexdig_fun>
 800aa66:	230f      	movs	r3, #15
 800aa68:	4018      	ands	r0, r3
 800aa6a:	9b06      	ldr	r3, [sp, #24]
 800aa6c:	9d08      	ldr	r5, [sp, #32]
 800aa6e:	4098      	lsls	r0, r3
 800aa70:	3304      	adds	r3, #4
 800aa72:	4306      	orrs	r6, r0
 800aa74:	9306      	str	r3, [sp, #24]
 800aa76:	e7a0      	b.n	800a9ba <__gethex+0x192>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	9a03      	ldr	r2, [sp, #12]
 800aa7c:	1a9d      	subs	r5, r3, r2
 800aa7e:	9b08      	ldr	r3, [sp, #32]
 800aa80:	195d      	adds	r5, r3, r5
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	429d      	cmp	r5, r3
 800aa86:	d3e2      	bcc.n	800aa4e <__gethex+0x226>
 800aa88:	0028      	movs	r0, r5
 800aa8a:	9907      	ldr	r1, [sp, #28]
 800aa8c:	f001 f902 	bl	800bc94 <strncmp>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1dc      	bne.n	800aa4e <__gethex+0x226>
 800aa94:	e791      	b.n	800a9ba <__gethex+0x192>
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	2500      	movs	r5, #0
 800aa9a:	429e      	cmp	r6, r3
 800aa9c:	dac3      	bge.n	800aa26 <__gethex+0x1fe>
 800aa9e:	1b9e      	subs	r6, r3, r6
 800aaa0:	0021      	movs	r1, r4
 800aaa2:	0032      	movs	r2, r6
 800aaa4:	9805      	ldr	r0, [sp, #20]
 800aaa6:	f000 fc5d 	bl	800b364 <__lshift>
 800aaaa:	0003      	movs	r3, r0
 800aaac:	3314      	adds	r3, #20
 800aaae:	0004      	movs	r4, r0
 800aab0:	1bbf      	subs	r7, r7, r6
 800aab2:	9304      	str	r3, [sp, #16]
 800aab4:	e7b7      	b.n	800aa26 <__gethex+0x1fe>
 800aab6:	9b02      	ldr	r3, [sp, #8]
 800aab8:	685e      	ldr	r6, [r3, #4]
 800aaba:	42be      	cmp	r6, r7
 800aabc:	dd71      	ble.n	800aba2 <__gethex+0x37a>
 800aabe:	9b01      	ldr	r3, [sp, #4]
 800aac0:	1bf6      	subs	r6, r6, r7
 800aac2:	42b3      	cmp	r3, r6
 800aac4:	dc38      	bgt.n	800ab38 <__gethex+0x310>
 800aac6:	9b02      	ldr	r3, [sp, #8]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d026      	beq.n	800ab1c <__gethex+0x2f4>
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d02e      	beq.n	800ab30 <__gethex+0x308>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d119      	bne.n	800ab0a <__gethex+0x2e2>
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	42b3      	cmp	r3, r6
 800aada:	d116      	bne.n	800ab0a <__gethex+0x2e2>
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d10d      	bne.n	800aafc <__gethex+0x2d4>
 800aae0:	9b02      	ldr	r3, [sp, #8]
 800aae2:	2662      	movs	r6, #98	; 0x62
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	9a01      	ldr	r2, [sp, #4]
 800aaea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	2301      	movs	r3, #1
 800aaf0:	9a04      	ldr	r2, [sp, #16]
 800aaf2:	6123      	str	r3, [r4, #16]
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaf8:	601c      	str	r4, [r3, #0]
 800aafa:	e72e      	b.n	800a95a <__gethex+0x132>
 800aafc:	9901      	ldr	r1, [sp, #4]
 800aafe:	0020      	movs	r0, r4
 800ab00:	3901      	subs	r1, #1
 800ab02:	f000 fe74 	bl	800b7ee <__any_on>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d1ea      	bne.n	800aae0 <__gethex+0x2b8>
 800ab0a:	0021      	movs	r1, r4
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	f000 fa0b 	bl	800af28 <_Bfree>
 800ab12:	2300      	movs	r3, #0
 800ab14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab16:	2650      	movs	r6, #80	; 0x50
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	e71e      	b.n	800a95a <__gethex+0x132>
 800ab1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1f3      	bne.n	800ab0a <__gethex+0x2e2>
 800ab22:	e7dd      	b.n	800aae0 <__gethex+0x2b8>
 800ab24:	0800cc60 	.word	0x0800cc60
 800ab28:	0800cbe4 	.word	0x0800cbe4
 800ab2c:	0800cbf5 	.word	0x0800cbf5
 800ab30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1d4      	bne.n	800aae0 <__gethex+0x2b8>
 800ab36:	e7e8      	b.n	800ab0a <__gethex+0x2e2>
 800ab38:	1e77      	subs	r7, r6, #1
 800ab3a:	2d00      	cmp	r5, #0
 800ab3c:	d12f      	bne.n	800ab9e <__gethex+0x376>
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	d004      	beq.n	800ab4c <__gethex+0x324>
 800ab42:	0039      	movs	r1, r7
 800ab44:	0020      	movs	r0, r4
 800ab46:	f000 fe52 	bl	800b7ee <__any_on>
 800ab4a:	0005      	movs	r5, r0
 800ab4c:	231f      	movs	r3, #31
 800ab4e:	117a      	asrs	r2, r7, #5
 800ab50:	401f      	ands	r7, r3
 800ab52:	3b1e      	subs	r3, #30
 800ab54:	40bb      	lsls	r3, r7
 800ab56:	9904      	ldr	r1, [sp, #16]
 800ab58:	0092      	lsls	r2, r2, #2
 800ab5a:	5852      	ldr	r2, [r2, r1]
 800ab5c:	421a      	tst	r2, r3
 800ab5e:	d001      	beq.n	800ab64 <__gethex+0x33c>
 800ab60:	2302      	movs	r3, #2
 800ab62:	431d      	orrs	r5, r3
 800ab64:	9b01      	ldr	r3, [sp, #4]
 800ab66:	0031      	movs	r1, r6
 800ab68:	1b9b      	subs	r3, r3, r6
 800ab6a:	2602      	movs	r6, #2
 800ab6c:	0020      	movs	r0, r4
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	f7ff fdf0 	bl	800a754 <rshift>
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	685f      	ldr	r7, [r3, #4]
 800ab78:	2d00      	cmp	r5, #0
 800ab7a:	d041      	beq.n	800ac00 <__gethex+0x3d8>
 800ab7c:	9b02      	ldr	r3, [sp, #8]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d010      	beq.n	800aba6 <__gethex+0x37e>
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d012      	beq.n	800abae <__gethex+0x386>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d106      	bne.n	800ab9a <__gethex+0x372>
 800ab8c:	07aa      	lsls	r2, r5, #30
 800ab8e:	d504      	bpl.n	800ab9a <__gethex+0x372>
 800ab90:	9a04      	ldr	r2, [sp, #16]
 800ab92:	6810      	ldr	r0, [r2, #0]
 800ab94:	4305      	orrs	r5, r0
 800ab96:	421d      	tst	r5, r3
 800ab98:	d10c      	bne.n	800abb4 <__gethex+0x38c>
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	e02f      	b.n	800abfe <__gethex+0x3d6>
 800ab9e:	2501      	movs	r5, #1
 800aba0:	e7d4      	b.n	800ab4c <__gethex+0x324>
 800aba2:	2601      	movs	r6, #1
 800aba4:	e7e8      	b.n	800ab78 <__gethex+0x350>
 800aba6:	2301      	movs	r3, #1
 800aba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	9313      	str	r3, [sp, #76]	; 0x4c
 800abae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0f2      	beq.n	800ab9a <__gethex+0x372>
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	2000      	movs	r0, #0
 800abb8:	9303      	str	r3, [sp, #12]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	0023      	movs	r3, r4
 800abc0:	9a04      	ldr	r2, [sp, #16]
 800abc2:	3314      	adds	r3, #20
 800abc4:	1899      	adds	r1, r3, r2
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	1c55      	adds	r5, r2, #1
 800abca:	d01e      	beq.n	800ac0a <__gethex+0x3e2>
 800abcc:	3201      	adds	r2, #1
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	0023      	movs	r3, r4
 800abd2:	3314      	adds	r3, #20
 800abd4:	2e02      	cmp	r6, #2
 800abd6:	d140      	bne.n	800ac5a <__gethex+0x432>
 800abd8:	9a02      	ldr	r2, [sp, #8]
 800abda:	9901      	ldr	r1, [sp, #4]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	3a01      	subs	r2, #1
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d10b      	bne.n	800abfc <__gethex+0x3d4>
 800abe4:	114a      	asrs	r2, r1, #5
 800abe6:	211f      	movs	r1, #31
 800abe8:	9801      	ldr	r0, [sp, #4]
 800abea:	0092      	lsls	r2, r2, #2
 800abec:	4001      	ands	r1, r0
 800abee:	2001      	movs	r0, #1
 800abf0:	0005      	movs	r5, r0
 800abf2:	408d      	lsls	r5, r1
 800abf4:	58d3      	ldr	r3, [r2, r3]
 800abf6:	422b      	tst	r3, r5
 800abf8:	d000      	beq.n	800abfc <__gethex+0x3d4>
 800abfa:	2601      	movs	r6, #1
 800abfc:	2320      	movs	r3, #32
 800abfe:	431e      	orrs	r6, r3
 800ac00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac02:	601c      	str	r4, [r3, #0]
 800ac04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac06:	601f      	str	r7, [r3, #0]
 800ac08:	e6a7      	b.n	800a95a <__gethex+0x132>
 800ac0a:	c301      	stmia	r3!, {r0}
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	d8da      	bhi.n	800abc6 <__gethex+0x39e>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	68a2      	ldr	r2, [r4, #8]
 800ac14:	4293      	cmp	r3, r2
 800ac16:	db17      	blt.n	800ac48 <__gethex+0x420>
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	9805      	ldr	r0, [sp, #20]
 800ac1c:	1c59      	adds	r1, r3, #1
 800ac1e:	f000 f93f 	bl	800aea0 <_Balloc>
 800ac22:	1e05      	subs	r5, r0, #0
 800ac24:	d103      	bne.n	800ac2e <__gethex+0x406>
 800ac26:	0002      	movs	r2, r0
 800ac28:	2184      	movs	r1, #132	; 0x84
 800ac2a:	4b1c      	ldr	r3, [pc, #112]	; (800ac9c <__gethex+0x474>)
 800ac2c:	e6b8      	b.n	800a9a0 <__gethex+0x178>
 800ac2e:	0021      	movs	r1, r4
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	310c      	adds	r1, #12
 800ac34:	1c9a      	adds	r2, r3, #2
 800ac36:	0092      	lsls	r2, r2, #2
 800ac38:	300c      	adds	r0, #12
 800ac3a:	f000 f928 	bl	800ae8e <memcpy>
 800ac3e:	0021      	movs	r1, r4
 800ac40:	9805      	ldr	r0, [sp, #20]
 800ac42:	f000 f971 	bl	800af28 <_Bfree>
 800ac46:	002c      	movs	r4, r5
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	6122      	str	r2, [r4, #16]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	3304      	adds	r3, #4
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	18e3      	adds	r3, r4, r3
 800ac56:	605a      	str	r2, [r3, #4]
 800ac58:	e7ba      	b.n	800abd0 <__gethex+0x3a8>
 800ac5a:	6922      	ldr	r2, [r4, #16]
 800ac5c:	9903      	ldr	r1, [sp, #12]
 800ac5e:	428a      	cmp	r2, r1
 800ac60:	dd09      	ble.n	800ac76 <__gethex+0x44e>
 800ac62:	2101      	movs	r1, #1
 800ac64:	0020      	movs	r0, r4
 800ac66:	f7ff fd75 	bl	800a754 <rshift>
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	3701      	adds	r7, #1
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	42bb      	cmp	r3, r7
 800ac72:	dac2      	bge.n	800abfa <__gethex+0x3d2>
 800ac74:	e6dc      	b.n	800aa30 <__gethex+0x208>
 800ac76:	221f      	movs	r2, #31
 800ac78:	9d01      	ldr	r5, [sp, #4]
 800ac7a:	9901      	ldr	r1, [sp, #4]
 800ac7c:	2601      	movs	r6, #1
 800ac7e:	4015      	ands	r5, r2
 800ac80:	4211      	tst	r1, r2
 800ac82:	d0bb      	beq.n	800abfc <__gethex+0x3d4>
 800ac84:	9a04      	ldr	r2, [sp, #16]
 800ac86:	189b      	adds	r3, r3, r2
 800ac88:	3b04      	subs	r3, #4
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	f000 fa00 	bl	800b090 <__hi0bits>
 800ac90:	2320      	movs	r3, #32
 800ac92:	1b5d      	subs	r5, r3, r5
 800ac94:	42a8      	cmp	r0, r5
 800ac96:	dbe4      	blt.n	800ac62 <__gethex+0x43a>
 800ac98:	e7b0      	b.n	800abfc <__gethex+0x3d4>
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	0800cbe4 	.word	0x0800cbe4

0800aca0 <L_shift>:
 800aca0:	2308      	movs	r3, #8
 800aca2:	b570      	push	{r4, r5, r6, lr}
 800aca4:	2520      	movs	r5, #32
 800aca6:	1a9a      	subs	r2, r3, r2
 800aca8:	0092      	lsls	r2, r2, #2
 800acaa:	1aad      	subs	r5, r5, r2
 800acac:	6843      	ldr	r3, [r0, #4]
 800acae:	6806      	ldr	r6, [r0, #0]
 800acb0:	001c      	movs	r4, r3
 800acb2:	40ac      	lsls	r4, r5
 800acb4:	40d3      	lsrs	r3, r2
 800acb6:	4334      	orrs	r4, r6
 800acb8:	6004      	str	r4, [r0, #0]
 800acba:	6043      	str	r3, [r0, #4]
 800acbc:	3004      	adds	r0, #4
 800acbe:	4288      	cmp	r0, r1
 800acc0:	d3f4      	bcc.n	800acac <L_shift+0xc>
 800acc2:	bd70      	pop	{r4, r5, r6, pc}

0800acc4 <__match>:
 800acc4:	b530      	push	{r4, r5, lr}
 800acc6:	6803      	ldr	r3, [r0, #0]
 800acc8:	780c      	ldrb	r4, [r1, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	2c00      	cmp	r4, #0
 800acce:	d102      	bne.n	800acd6 <__match+0x12>
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	2001      	movs	r0, #1
 800acd4:	bd30      	pop	{r4, r5, pc}
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	0015      	movs	r5, r2
 800acda:	3d41      	subs	r5, #65	; 0x41
 800acdc:	2d19      	cmp	r5, #25
 800acde:	d800      	bhi.n	800ace2 <__match+0x1e>
 800ace0:	3220      	adds	r2, #32
 800ace2:	3101      	adds	r1, #1
 800ace4:	42a2      	cmp	r2, r4
 800ace6:	d0ef      	beq.n	800acc8 <__match+0x4>
 800ace8:	2000      	movs	r0, #0
 800acea:	e7f3      	b.n	800acd4 <__match+0x10>

0800acec <__hexnan>:
 800acec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acee:	680b      	ldr	r3, [r1, #0]
 800acf0:	b08b      	sub	sp, #44	; 0x2c
 800acf2:	115c      	asrs	r4, r3, #5
 800acf4:	00a4      	lsls	r4, r4, #2
 800acf6:	9201      	str	r2, [sp, #4]
 800acf8:	1912      	adds	r2, r2, r4
 800acfa:	0019      	movs	r1, r3
 800acfc:	9202      	str	r2, [sp, #8]
 800acfe:	221f      	movs	r2, #31
 800ad00:	4011      	ands	r1, r2
 800ad02:	9008      	str	r0, [sp, #32]
 800ad04:	9106      	str	r1, [sp, #24]
 800ad06:	4213      	tst	r3, r2
 800ad08:	d002      	beq.n	800ad10 <__hexnan+0x24>
 800ad0a:	9b02      	ldr	r3, [sp, #8]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	9302      	str	r3, [sp, #8]
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	2500      	movs	r5, #0
 800ad14:	1f1e      	subs	r6, r3, #4
 800ad16:	0037      	movs	r7, r6
 800ad18:	0034      	movs	r4, r6
 800ad1a:	9b08      	ldr	r3, [sp, #32]
 800ad1c:	6035      	str	r5, [r6, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	9507      	str	r5, [sp, #28]
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	9503      	str	r5, [sp, #12]
 800ad26:	9b05      	ldr	r3, [sp, #20]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2c:	9b05      	ldr	r3, [sp, #20]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d028      	beq.n	800ad88 <__hexnan+0x9c>
 800ad36:	9804      	ldr	r0, [sp, #16]
 800ad38:	f7ff fd60 	bl	800a7fc <__hexdig_fun>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d154      	bne.n	800adea <__hexnan+0xfe>
 800ad40:	9b04      	ldr	r3, [sp, #16]
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	d819      	bhi.n	800ad7a <__hexnan+0x8e>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	9a07      	ldr	r2, [sp, #28]
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	dd12      	ble.n	800ad74 <__hexnan+0x88>
 800ad4e:	42bc      	cmp	r4, r7
 800ad50:	d206      	bcs.n	800ad60 <__hexnan+0x74>
 800ad52:	2d07      	cmp	r5, #7
 800ad54:	dc04      	bgt.n	800ad60 <__hexnan+0x74>
 800ad56:	002a      	movs	r2, r5
 800ad58:	0039      	movs	r1, r7
 800ad5a:	0020      	movs	r0, r4
 800ad5c:	f7ff ffa0 	bl	800aca0 <L_shift>
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	2508      	movs	r5, #8
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d905      	bls.n	800ad74 <__hexnan+0x88>
 800ad68:	1f27      	subs	r7, r4, #4
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	003c      	movs	r4, r7
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	603d      	str	r5, [r7, #0]
 800ad72:	9307      	str	r3, [sp, #28]
 800ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad76:	9305      	str	r3, [sp, #20]
 800ad78:	e7d5      	b.n	800ad26 <__hexnan+0x3a>
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	2b29      	cmp	r3, #41	; 0x29
 800ad7e:	d158      	bne.n	800ae32 <__hexnan+0x146>
 800ad80:	9b05      	ldr	r3, [sp, #20]
 800ad82:	9a08      	ldr	r2, [sp, #32]
 800ad84:	3302      	adds	r3, #2
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d051      	beq.n	800ae32 <__hexnan+0x146>
 800ad8e:	42bc      	cmp	r4, r7
 800ad90:	d206      	bcs.n	800ada0 <__hexnan+0xb4>
 800ad92:	2d07      	cmp	r5, #7
 800ad94:	dc04      	bgt.n	800ada0 <__hexnan+0xb4>
 800ad96:	002a      	movs	r2, r5
 800ad98:	0039      	movs	r1, r7
 800ad9a:	0020      	movs	r0, r4
 800ad9c:	f7ff ff80 	bl	800aca0 <L_shift>
 800ada0:	9b01      	ldr	r3, [sp, #4]
 800ada2:	429c      	cmp	r4, r3
 800ada4:	d935      	bls.n	800ae12 <__hexnan+0x126>
 800ada6:	001a      	movs	r2, r3
 800ada8:	0023      	movs	r3, r4
 800adaa:	cb02      	ldmia	r3!, {r1}
 800adac:	c202      	stmia	r2!, {r1}
 800adae:	429e      	cmp	r6, r3
 800adb0:	d2fb      	bcs.n	800adaa <__hexnan+0xbe>
 800adb2:	9b02      	ldr	r3, [sp, #8]
 800adb4:	1c61      	adds	r1, r4, #1
 800adb6:	1eda      	subs	r2, r3, #3
 800adb8:	2304      	movs	r3, #4
 800adba:	4291      	cmp	r1, r2
 800adbc:	d805      	bhi.n	800adca <__hexnan+0xde>
 800adbe:	9b02      	ldr	r3, [sp, #8]
 800adc0:	3b04      	subs	r3, #4
 800adc2:	1b1c      	subs	r4, r3, r4
 800adc4:	08a4      	lsrs	r4, r4, #2
 800adc6:	3401      	adds	r4, #1
 800adc8:	00a3      	lsls	r3, r4, #2
 800adca:	9a01      	ldr	r2, [sp, #4]
 800adcc:	18d4      	adds	r4, r2, r3
 800adce:	2300      	movs	r3, #0
 800add0:	c408      	stmia	r4!, {r3}
 800add2:	42a6      	cmp	r6, r4
 800add4:	d2fc      	bcs.n	800add0 <__hexnan+0xe4>
 800add6:	6833      	ldr	r3, [r6, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d104      	bne.n	800ade6 <__hexnan+0xfa>
 800addc:	9b01      	ldr	r3, [sp, #4]
 800adde:	429e      	cmp	r6, r3
 800ade0:	d125      	bne.n	800ae2e <__hexnan+0x142>
 800ade2:	2301      	movs	r3, #1
 800ade4:	6033      	str	r3, [r6, #0]
 800ade6:	2005      	movs	r0, #5
 800ade8:	e024      	b.n	800ae34 <__hexnan+0x148>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	3501      	adds	r5, #1
 800adee:	3301      	adds	r3, #1
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	2d08      	cmp	r5, #8
 800adf4:	dd06      	ble.n	800ae04 <__hexnan+0x118>
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	429c      	cmp	r4, r3
 800adfa:	d9bb      	bls.n	800ad74 <__hexnan+0x88>
 800adfc:	2300      	movs	r3, #0
 800adfe:	2501      	movs	r5, #1
 800ae00:	3c04      	subs	r4, #4
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	220f      	movs	r2, #15
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4010      	ands	r0, r2
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	4318      	orrs	r0, r3
 800ae0e:	6020      	str	r0, [r4, #0]
 800ae10:	e7b0      	b.n	800ad74 <__hexnan+0x88>
 800ae12:	9b06      	ldr	r3, [sp, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0de      	beq.n	800add6 <__hexnan+0xea>
 800ae18:	2220      	movs	r2, #32
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	425b      	negs	r3, r3
 800ae20:	40d3      	lsrs	r3, r2
 800ae22:	9c02      	ldr	r4, [sp, #8]
 800ae24:	3c04      	subs	r4, #4
 800ae26:	6822      	ldr	r2, [r4, #0]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	e7d3      	b.n	800add6 <__hexnan+0xea>
 800ae2e:	3e04      	subs	r6, #4
 800ae30:	e7d1      	b.n	800add6 <__hexnan+0xea>
 800ae32:	2004      	movs	r0, #4
 800ae34:	b00b      	add	sp, #44	; 0x2c
 800ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae38 <_localeconv_r>:
 800ae38:	4800      	ldr	r0, [pc, #0]	; (800ae3c <_localeconv_r+0x4>)
 800ae3a:	4770      	bx	lr
 800ae3c:	20000164 	.word	0x20000164

0800ae40 <malloc>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <malloc+0x10>)
 800ae44:	0001      	movs	r1, r0
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	f000 fd4c 	bl	800b8e4 <_malloc_r>
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	46c0      	nop			; (mov r8, r8)
 800ae50:	2000000c 	.word	0x2000000c

0800ae54 <__ascii_mbtowc>:
 800ae54:	b082      	sub	sp, #8
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d100      	bne.n	800ae5c <__ascii_mbtowc+0x8>
 800ae5a:	a901      	add	r1, sp, #4
 800ae5c:	1e10      	subs	r0, r2, #0
 800ae5e:	d006      	beq.n	800ae6e <__ascii_mbtowc+0x1a>
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <__ascii_mbtowc+0x1e>
 800ae64:	7813      	ldrb	r3, [r2, #0]
 800ae66:	600b      	str	r3, [r1, #0]
 800ae68:	7810      	ldrb	r0, [r2, #0]
 800ae6a:	1e43      	subs	r3, r0, #1
 800ae6c:	4198      	sbcs	r0, r3
 800ae6e:	b002      	add	sp, #8
 800ae70:	4770      	bx	lr
 800ae72:	2002      	movs	r0, #2
 800ae74:	4240      	negs	r0, r0
 800ae76:	e7fa      	b.n	800ae6e <__ascii_mbtowc+0x1a>

0800ae78 <memchr>:
 800ae78:	b2c9      	uxtb	r1, r1
 800ae7a:	1882      	adds	r2, r0, r2
 800ae7c:	4290      	cmp	r0, r2
 800ae7e:	d101      	bne.n	800ae84 <memchr+0xc>
 800ae80:	2000      	movs	r0, #0
 800ae82:	4770      	bx	lr
 800ae84:	7803      	ldrb	r3, [r0, #0]
 800ae86:	428b      	cmp	r3, r1
 800ae88:	d0fb      	beq.n	800ae82 <memchr+0xa>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	e7f6      	b.n	800ae7c <memchr+0x4>

0800ae8e <memcpy>:
 800ae8e:	2300      	movs	r3, #0
 800ae90:	b510      	push	{r4, lr}
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d100      	bne.n	800ae98 <memcpy+0xa>
 800ae96:	bd10      	pop	{r4, pc}
 800ae98:	5ccc      	ldrb	r4, [r1, r3]
 800ae9a:	54c4      	strb	r4, [r0, r3]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	e7f8      	b.n	800ae92 <memcpy+0x4>

0800aea0 <_Balloc>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aea4:	0006      	movs	r6, r0
 800aea6:	000c      	movs	r4, r1
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	d10e      	bne.n	800aeca <_Balloc+0x2a>
 800aeac:	2010      	movs	r0, #16
 800aeae:	f7ff ffc7 	bl	800ae40 <malloc>
 800aeb2:	1e02      	subs	r2, r0, #0
 800aeb4:	6270      	str	r0, [r6, #36]	; 0x24
 800aeb6:	d104      	bne.n	800aec2 <_Balloc+0x22>
 800aeb8:	2166      	movs	r1, #102	; 0x66
 800aeba:	4b19      	ldr	r3, [pc, #100]	; (800af20 <_Balloc+0x80>)
 800aebc:	4819      	ldr	r0, [pc, #100]	; (800af24 <_Balloc+0x84>)
 800aebe:	f000 ff07 	bl	800bcd0 <__assert_func>
 800aec2:	6045      	str	r5, [r0, #4]
 800aec4:	6085      	str	r5, [r0, #8]
 800aec6:	6005      	str	r5, [r0, #0]
 800aec8:	60c5      	str	r5, [r0, #12]
 800aeca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800aecc:	68eb      	ldr	r3, [r5, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d013      	beq.n	800aefa <_Balloc+0x5a>
 800aed2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aed4:	00a2      	lsls	r2, r4, #2
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	189b      	adds	r3, r3, r2
 800aeda:	6818      	ldr	r0, [r3, #0]
 800aedc:	2800      	cmp	r0, #0
 800aede:	d118      	bne.n	800af12 <_Balloc+0x72>
 800aee0:	2101      	movs	r1, #1
 800aee2:	000d      	movs	r5, r1
 800aee4:	40a5      	lsls	r5, r4
 800aee6:	1d6a      	adds	r2, r5, #5
 800aee8:	0030      	movs	r0, r6
 800aeea:	0092      	lsls	r2, r2, #2
 800aeec:	f000 fca2 	bl	800b834 <_calloc_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d00c      	beq.n	800af0e <_Balloc+0x6e>
 800aef4:	6044      	str	r4, [r0, #4]
 800aef6:	6085      	str	r5, [r0, #8]
 800aef8:	e00d      	b.n	800af16 <_Balloc+0x76>
 800aefa:	2221      	movs	r2, #33	; 0x21
 800aefc:	2104      	movs	r1, #4
 800aefe:	0030      	movs	r0, r6
 800af00:	f000 fc98 	bl	800b834 <_calloc_r>
 800af04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af06:	60e8      	str	r0, [r5, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e1      	bne.n	800aed2 <_Balloc+0x32>
 800af0e:	2000      	movs	r0, #0
 800af10:	bd70      	pop	{r4, r5, r6, pc}
 800af12:	6802      	ldr	r2, [r0, #0]
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	6103      	str	r3, [r0, #16]
 800af1a:	60c3      	str	r3, [r0, #12]
 800af1c:	e7f8      	b.n	800af10 <_Balloc+0x70>
 800af1e:	46c0      	nop			; (mov r8, r8)
 800af20:	0800cb6e 	.word	0x0800cb6e
 800af24:	0800cc74 	.word	0x0800cc74

0800af28 <_Bfree>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af2c:	0005      	movs	r5, r0
 800af2e:	000c      	movs	r4, r1
 800af30:	2e00      	cmp	r6, #0
 800af32:	d10e      	bne.n	800af52 <_Bfree+0x2a>
 800af34:	2010      	movs	r0, #16
 800af36:	f7ff ff83 	bl	800ae40 <malloc>
 800af3a:	1e02      	subs	r2, r0, #0
 800af3c:	6268      	str	r0, [r5, #36]	; 0x24
 800af3e:	d104      	bne.n	800af4a <_Bfree+0x22>
 800af40:	218a      	movs	r1, #138	; 0x8a
 800af42:	4b09      	ldr	r3, [pc, #36]	; (800af68 <_Bfree+0x40>)
 800af44:	4809      	ldr	r0, [pc, #36]	; (800af6c <_Bfree+0x44>)
 800af46:	f000 fec3 	bl	800bcd0 <__assert_func>
 800af4a:	6046      	str	r6, [r0, #4]
 800af4c:	6086      	str	r6, [r0, #8]
 800af4e:	6006      	str	r6, [r0, #0]
 800af50:	60c6      	str	r6, [r0, #12]
 800af52:	2c00      	cmp	r4, #0
 800af54:	d007      	beq.n	800af66 <_Bfree+0x3e>
 800af56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af58:	6862      	ldr	r2, [r4, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	0092      	lsls	r2, r2, #2
 800af5e:	189b      	adds	r3, r3, r2
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	6022      	str	r2, [r4, #0]
 800af64:	601c      	str	r4, [r3, #0]
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	0800cb6e 	.word	0x0800cb6e
 800af6c:	0800cc74 	.word	0x0800cc74

0800af70 <__multadd>:
 800af70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af72:	000e      	movs	r6, r1
 800af74:	9001      	str	r0, [sp, #4]
 800af76:	000c      	movs	r4, r1
 800af78:	001d      	movs	r5, r3
 800af7a:	2000      	movs	r0, #0
 800af7c:	690f      	ldr	r7, [r1, #16]
 800af7e:	3614      	adds	r6, #20
 800af80:	6833      	ldr	r3, [r6, #0]
 800af82:	3001      	adds	r0, #1
 800af84:	b299      	uxth	r1, r3
 800af86:	4351      	muls	r1, r2
 800af88:	0c1b      	lsrs	r3, r3, #16
 800af8a:	4353      	muls	r3, r2
 800af8c:	1949      	adds	r1, r1, r5
 800af8e:	0c0d      	lsrs	r5, r1, #16
 800af90:	195b      	adds	r3, r3, r5
 800af92:	0c1d      	lsrs	r5, r3, #16
 800af94:	b289      	uxth	r1, r1
 800af96:	041b      	lsls	r3, r3, #16
 800af98:	185b      	adds	r3, r3, r1
 800af9a:	c608      	stmia	r6!, {r3}
 800af9c:	4287      	cmp	r7, r0
 800af9e:	dcef      	bgt.n	800af80 <__multadd+0x10>
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d022      	beq.n	800afea <__multadd+0x7a>
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	42bb      	cmp	r3, r7
 800afa8:	dc19      	bgt.n	800afde <__multadd+0x6e>
 800afaa:	6863      	ldr	r3, [r4, #4]
 800afac:	9801      	ldr	r0, [sp, #4]
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	f7ff ff76 	bl	800aea0 <_Balloc>
 800afb4:	1e06      	subs	r6, r0, #0
 800afb6:	d105      	bne.n	800afc4 <__multadd+0x54>
 800afb8:	0002      	movs	r2, r0
 800afba:	21b5      	movs	r1, #181	; 0xb5
 800afbc:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <__multadd+0x80>)
 800afbe:	480d      	ldr	r0, [pc, #52]	; (800aff4 <__multadd+0x84>)
 800afc0:	f000 fe86 	bl	800bcd0 <__assert_func>
 800afc4:	0021      	movs	r1, r4
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	310c      	adds	r1, #12
 800afca:	1c9a      	adds	r2, r3, #2
 800afcc:	0092      	lsls	r2, r2, #2
 800afce:	300c      	adds	r0, #12
 800afd0:	f7ff ff5d 	bl	800ae8e <memcpy>
 800afd4:	0021      	movs	r1, r4
 800afd6:	9801      	ldr	r0, [sp, #4]
 800afd8:	f7ff ffa6 	bl	800af28 <_Bfree>
 800afdc:	0034      	movs	r4, r6
 800afde:	1d3b      	adds	r3, r7, #4
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	18e3      	adds	r3, r4, r3
 800afe4:	605d      	str	r5, [r3, #4]
 800afe6:	1c7b      	adds	r3, r7, #1
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	0020      	movs	r0, r4
 800afec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afee:	46c0      	nop			; (mov r8, r8)
 800aff0:	0800cbe4 	.word	0x0800cbe4
 800aff4:	0800cc74 	.word	0x0800cc74

0800aff8 <__s2b>:
 800aff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800affa:	0006      	movs	r6, r0
 800affc:	0018      	movs	r0, r3
 800affe:	000c      	movs	r4, r1
 800b000:	3008      	adds	r0, #8
 800b002:	2109      	movs	r1, #9
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	0015      	movs	r5, r2
 800b008:	f7f5 f924 	bl	8000254 <__divsi3>
 800b00c:	2301      	movs	r3, #1
 800b00e:	2100      	movs	r1, #0
 800b010:	4283      	cmp	r3, r0
 800b012:	db0a      	blt.n	800b02a <__s2b+0x32>
 800b014:	0030      	movs	r0, r6
 800b016:	f7ff ff43 	bl	800aea0 <_Balloc>
 800b01a:	1e01      	subs	r1, r0, #0
 800b01c:	d108      	bne.n	800b030 <__s2b+0x38>
 800b01e:	0002      	movs	r2, r0
 800b020:	4b19      	ldr	r3, [pc, #100]	; (800b088 <__s2b+0x90>)
 800b022:	481a      	ldr	r0, [pc, #104]	; (800b08c <__s2b+0x94>)
 800b024:	31ce      	adds	r1, #206	; 0xce
 800b026:	f000 fe53 	bl	800bcd0 <__assert_func>
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	3101      	adds	r1, #1
 800b02e:	e7ef      	b.n	800b010 <__s2b+0x18>
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	6143      	str	r3, [r0, #20]
 800b034:	2301      	movs	r3, #1
 800b036:	6103      	str	r3, [r0, #16]
 800b038:	2d09      	cmp	r5, #9
 800b03a:	dd18      	ble.n	800b06e <__s2b+0x76>
 800b03c:	0023      	movs	r3, r4
 800b03e:	3309      	adds	r3, #9
 800b040:	001f      	movs	r7, r3
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	1964      	adds	r4, r4, r5
 800b046:	783b      	ldrb	r3, [r7, #0]
 800b048:	220a      	movs	r2, #10
 800b04a:	0030      	movs	r0, r6
 800b04c:	3b30      	subs	r3, #48	; 0x30
 800b04e:	f7ff ff8f 	bl	800af70 <__multadd>
 800b052:	3701      	adds	r7, #1
 800b054:	0001      	movs	r1, r0
 800b056:	42a7      	cmp	r7, r4
 800b058:	d1f5      	bne.n	800b046 <__s2b+0x4e>
 800b05a:	002c      	movs	r4, r5
 800b05c:	9b00      	ldr	r3, [sp, #0]
 800b05e:	3c08      	subs	r4, #8
 800b060:	191c      	adds	r4, r3, r4
 800b062:	002f      	movs	r7, r5
 800b064:	9b01      	ldr	r3, [sp, #4]
 800b066:	429f      	cmp	r7, r3
 800b068:	db04      	blt.n	800b074 <__s2b+0x7c>
 800b06a:	0008      	movs	r0, r1
 800b06c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b06e:	2509      	movs	r5, #9
 800b070:	340a      	adds	r4, #10
 800b072:	e7f6      	b.n	800b062 <__s2b+0x6a>
 800b074:	1b63      	subs	r3, r4, r5
 800b076:	5ddb      	ldrb	r3, [r3, r7]
 800b078:	220a      	movs	r2, #10
 800b07a:	0030      	movs	r0, r6
 800b07c:	3b30      	subs	r3, #48	; 0x30
 800b07e:	f7ff ff77 	bl	800af70 <__multadd>
 800b082:	3701      	adds	r7, #1
 800b084:	0001      	movs	r1, r0
 800b086:	e7ed      	b.n	800b064 <__s2b+0x6c>
 800b088:	0800cbe4 	.word	0x0800cbe4
 800b08c:	0800cc74 	.word	0x0800cc74

0800b090 <__hi0bits>:
 800b090:	0003      	movs	r3, r0
 800b092:	0c02      	lsrs	r2, r0, #16
 800b094:	2000      	movs	r0, #0
 800b096:	4282      	cmp	r2, r0
 800b098:	d101      	bne.n	800b09e <__hi0bits+0xe>
 800b09a:	041b      	lsls	r3, r3, #16
 800b09c:	3010      	adds	r0, #16
 800b09e:	0e1a      	lsrs	r2, r3, #24
 800b0a0:	d101      	bne.n	800b0a6 <__hi0bits+0x16>
 800b0a2:	3008      	adds	r0, #8
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	0f1a      	lsrs	r2, r3, #28
 800b0a8:	d101      	bne.n	800b0ae <__hi0bits+0x1e>
 800b0aa:	3004      	adds	r0, #4
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	0f9a      	lsrs	r2, r3, #30
 800b0b0:	d101      	bne.n	800b0b6 <__hi0bits+0x26>
 800b0b2:	3002      	adds	r0, #2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	db03      	blt.n	800b0c2 <__hi0bits+0x32>
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	d400      	bmi.n	800b0c2 <__hi0bits+0x32>
 800b0c0:	2020      	movs	r0, #32
 800b0c2:	4770      	bx	lr

0800b0c4 <__lo0bits>:
 800b0c4:	6803      	ldr	r3, [r0, #0]
 800b0c6:	0002      	movs	r2, r0
 800b0c8:	2107      	movs	r1, #7
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	4008      	ands	r0, r1
 800b0ce:	420b      	tst	r3, r1
 800b0d0:	d00d      	beq.n	800b0ee <__lo0bits+0x2a>
 800b0d2:	3906      	subs	r1, #6
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	420b      	tst	r3, r1
 800b0d8:	d105      	bne.n	800b0e6 <__lo0bits+0x22>
 800b0da:	3002      	adds	r0, #2
 800b0dc:	4203      	tst	r3, r0
 800b0de:	d003      	beq.n	800b0e8 <__lo0bits+0x24>
 800b0e0:	40cb      	lsrs	r3, r1
 800b0e2:	0008      	movs	r0, r1
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	4770      	bx	lr
 800b0e8:	089b      	lsrs	r3, r3, #2
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	e7fb      	b.n	800b0e6 <__lo0bits+0x22>
 800b0ee:	b299      	uxth	r1, r3
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	d101      	bne.n	800b0f8 <__lo0bits+0x34>
 800b0f4:	2010      	movs	r0, #16
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	b2d9      	uxtb	r1, r3
 800b0fa:	2900      	cmp	r1, #0
 800b0fc:	d101      	bne.n	800b102 <__lo0bits+0x3e>
 800b0fe:	3008      	adds	r0, #8
 800b100:	0a1b      	lsrs	r3, r3, #8
 800b102:	0719      	lsls	r1, r3, #28
 800b104:	d101      	bne.n	800b10a <__lo0bits+0x46>
 800b106:	3004      	adds	r0, #4
 800b108:	091b      	lsrs	r3, r3, #4
 800b10a:	0799      	lsls	r1, r3, #30
 800b10c:	d101      	bne.n	800b112 <__lo0bits+0x4e>
 800b10e:	3002      	adds	r0, #2
 800b110:	089b      	lsrs	r3, r3, #2
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d4e9      	bmi.n	800b0ea <__lo0bits+0x26>
 800b116:	3001      	adds	r0, #1
 800b118:	085b      	lsrs	r3, r3, #1
 800b11a:	d1e6      	bne.n	800b0ea <__lo0bits+0x26>
 800b11c:	2020      	movs	r0, #32
 800b11e:	e7e2      	b.n	800b0e6 <__lo0bits+0x22>

0800b120 <__i2b>:
 800b120:	b510      	push	{r4, lr}
 800b122:	000c      	movs	r4, r1
 800b124:	2101      	movs	r1, #1
 800b126:	f7ff febb 	bl	800aea0 <_Balloc>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d106      	bne.n	800b13c <__i2b+0x1c>
 800b12e:	21a0      	movs	r1, #160	; 0xa0
 800b130:	0002      	movs	r2, r0
 800b132:	4b04      	ldr	r3, [pc, #16]	; (800b144 <__i2b+0x24>)
 800b134:	4804      	ldr	r0, [pc, #16]	; (800b148 <__i2b+0x28>)
 800b136:	0049      	lsls	r1, r1, #1
 800b138:	f000 fdca 	bl	800bcd0 <__assert_func>
 800b13c:	2301      	movs	r3, #1
 800b13e:	6144      	str	r4, [r0, #20]
 800b140:	6103      	str	r3, [r0, #16]
 800b142:	bd10      	pop	{r4, pc}
 800b144:	0800cbe4 	.word	0x0800cbe4
 800b148:	0800cc74 	.word	0x0800cc74

0800b14c <__multiply>:
 800b14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	0014      	movs	r4, r2
 800b152:	6912      	ldr	r2, [r2, #16]
 800b154:	000d      	movs	r5, r1
 800b156:	b089      	sub	sp, #36	; 0x24
 800b158:	4293      	cmp	r3, r2
 800b15a:	da01      	bge.n	800b160 <__multiply+0x14>
 800b15c:	0025      	movs	r5, r4
 800b15e:	000c      	movs	r4, r1
 800b160:	692f      	ldr	r7, [r5, #16]
 800b162:	6926      	ldr	r6, [r4, #16]
 800b164:	6869      	ldr	r1, [r5, #4]
 800b166:	19bb      	adds	r3, r7, r6
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	68ab      	ldr	r3, [r5, #8]
 800b16c:	19ba      	adds	r2, r7, r6
 800b16e:	4293      	cmp	r3, r2
 800b170:	da00      	bge.n	800b174 <__multiply+0x28>
 800b172:	3101      	adds	r1, #1
 800b174:	f7ff fe94 	bl	800aea0 <_Balloc>
 800b178:	9001      	str	r0, [sp, #4]
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d106      	bne.n	800b18c <__multiply+0x40>
 800b17e:	215e      	movs	r1, #94	; 0x5e
 800b180:	0002      	movs	r2, r0
 800b182:	4b48      	ldr	r3, [pc, #288]	; (800b2a4 <__multiply+0x158>)
 800b184:	4848      	ldr	r0, [pc, #288]	; (800b2a8 <__multiply+0x15c>)
 800b186:	31ff      	adds	r1, #255	; 0xff
 800b188:	f000 fda2 	bl	800bcd0 <__assert_func>
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	3314      	adds	r3, #20
 800b192:	469c      	mov	ip, r3
 800b194:	19bb      	adds	r3, r7, r6
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4463      	add	r3, ip
 800b19a:	9303      	str	r3, [sp, #12]
 800b19c:	4663      	mov	r3, ip
 800b19e:	9903      	ldr	r1, [sp, #12]
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	d32c      	bcc.n	800b1fe <__multiply+0xb2>
 800b1a4:	002b      	movs	r3, r5
 800b1a6:	0022      	movs	r2, r4
 800b1a8:	3314      	adds	r3, #20
 800b1aa:	00bf      	lsls	r7, r7, #2
 800b1ac:	3214      	adds	r2, #20
 800b1ae:	9306      	str	r3, [sp, #24]
 800b1b0:	00b6      	lsls	r6, r6, #2
 800b1b2:	19db      	adds	r3, r3, r7
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	1993      	adds	r3, r2, r6
 800b1b8:	9307      	str	r3, [sp, #28]
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	002b      	movs	r3, r5
 800b1c0:	9904      	ldr	r1, [sp, #16]
 800b1c2:	3315      	adds	r3, #21
 800b1c4:	9200      	str	r2, [sp, #0]
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	d305      	bcc.n	800b1d6 <__multiply+0x8a>
 800b1ca:	1b4b      	subs	r3, r1, r5
 800b1cc:	3b15      	subs	r3, #21
 800b1ce:	089b      	lsrs	r3, r3, #2
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	9b07      	ldr	r3, [sp, #28]
 800b1d8:	9a00      	ldr	r2, [sp, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d311      	bcc.n	800b202 <__multiply+0xb6>
 800b1de:	9b02      	ldr	r3, [sp, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dd06      	ble.n	800b1f2 <__multiply+0xa6>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	3b04      	subs	r3, #4
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d054      	beq.n	800b29c <__multiply+0x150>
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	9a02      	ldr	r2, [sp, #8]
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	611a      	str	r2, [r3, #16]
 800b1fa:	b009      	add	sp, #36	; 0x24
 800b1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fe:	c304      	stmia	r3!, {r2}
 800b200:	e7cd      	b.n	800b19e <__multiply+0x52>
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	b298      	uxth	r0, r3
 800b208:	2800      	cmp	r0, #0
 800b20a:	d01c      	beq.n	800b246 <__multiply+0xfa>
 800b20c:	4667      	mov	r7, ip
 800b20e:	2400      	movs	r4, #0
 800b210:	9e06      	ldr	r6, [sp, #24]
 800b212:	ce02      	ldmia	r6!, {r1}
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	b28b      	uxth	r3, r1
 800b218:	4343      	muls	r3, r0
 800b21a:	0c09      	lsrs	r1, r1, #16
 800b21c:	4341      	muls	r1, r0
 800b21e:	b292      	uxth	r2, r2
 800b220:	189b      	adds	r3, r3, r2
 800b222:	191b      	adds	r3, r3, r4
 800b224:	000c      	movs	r4, r1
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	0c11      	lsrs	r1, r2, #16
 800b22a:	1861      	adds	r1, r4, r1
 800b22c:	0c1c      	lsrs	r4, r3, #16
 800b22e:	1909      	adds	r1, r1, r4
 800b230:	0c0c      	lsrs	r4, r1, #16
 800b232:	b29b      	uxth	r3, r3
 800b234:	0409      	lsls	r1, r1, #16
 800b236:	430b      	orrs	r3, r1
 800b238:	c708      	stmia	r7!, {r3}
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	42b3      	cmp	r3, r6
 800b23e:	d8e8      	bhi.n	800b212 <__multiply+0xc6>
 800b240:	4663      	mov	r3, ip
 800b242:	9a05      	ldr	r2, [sp, #20]
 800b244:	509c      	str	r4, [r3, r2]
 800b246:	9b00      	ldr	r3, [sp, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	0c1e      	lsrs	r6, r3, #16
 800b24c:	d020      	beq.n	800b290 <__multiply+0x144>
 800b24e:	4663      	mov	r3, ip
 800b250:	002c      	movs	r4, r5
 800b252:	4660      	mov	r0, ip
 800b254:	2700      	movs	r7, #0
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3414      	adds	r4, #20
 800b25a:	6822      	ldr	r2, [r4, #0]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	b291      	uxth	r1, r2
 800b260:	4371      	muls	r1, r6
 800b262:	6802      	ldr	r2, [r0, #0]
 800b264:	0c12      	lsrs	r2, r2, #16
 800b266:	1889      	adds	r1, r1, r2
 800b268:	19cf      	adds	r7, r1, r7
 800b26a:	0439      	lsls	r1, r7, #16
 800b26c:	430b      	orrs	r3, r1
 800b26e:	6003      	str	r3, [r0, #0]
 800b270:	cc02      	ldmia	r4!, {r1}
 800b272:	6843      	ldr	r3, [r0, #4]
 800b274:	0c09      	lsrs	r1, r1, #16
 800b276:	4371      	muls	r1, r6
 800b278:	b29b      	uxth	r3, r3
 800b27a:	0c3f      	lsrs	r7, r7, #16
 800b27c:	18cb      	adds	r3, r1, r3
 800b27e:	9a04      	ldr	r2, [sp, #16]
 800b280:	19db      	adds	r3, r3, r7
 800b282:	0c1f      	lsrs	r7, r3, #16
 800b284:	3004      	adds	r0, #4
 800b286:	42a2      	cmp	r2, r4
 800b288:	d8e7      	bhi.n	800b25a <__multiply+0x10e>
 800b28a:	4662      	mov	r2, ip
 800b28c:	9905      	ldr	r1, [sp, #20]
 800b28e:	5053      	str	r3, [r2, r1]
 800b290:	9b00      	ldr	r3, [sp, #0]
 800b292:	3304      	adds	r3, #4
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	2304      	movs	r3, #4
 800b298:	449c      	add	ip, r3
 800b29a:	e79c      	b.n	800b1d6 <__multiply+0x8a>
 800b29c:	9b02      	ldr	r3, [sp, #8]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	9302      	str	r3, [sp, #8]
 800b2a2:	e79c      	b.n	800b1de <__multiply+0x92>
 800b2a4:	0800cbe4 	.word	0x0800cbe4
 800b2a8:	0800cc74 	.word	0x0800cc74

0800b2ac <__pow5mult>:
 800b2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	0015      	movs	r5, r2
 800b2b2:	0007      	movs	r7, r0
 800b2b4:	000e      	movs	r6, r1
 800b2b6:	401a      	ands	r2, r3
 800b2b8:	421d      	tst	r5, r3
 800b2ba:	d008      	beq.n	800b2ce <__pow5mult+0x22>
 800b2bc:	4925      	ldr	r1, [pc, #148]	; (800b354 <__pow5mult+0xa8>)
 800b2be:	3a01      	subs	r2, #1
 800b2c0:	0092      	lsls	r2, r2, #2
 800b2c2:	5852      	ldr	r2, [r2, r1]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	0031      	movs	r1, r6
 800b2c8:	f7ff fe52 	bl	800af70 <__multadd>
 800b2cc:	0006      	movs	r6, r0
 800b2ce:	10ad      	asrs	r5, r5, #2
 800b2d0:	d03d      	beq.n	800b34e <__pow5mult+0xa2>
 800b2d2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b2d4:	2c00      	cmp	r4, #0
 800b2d6:	d10f      	bne.n	800b2f8 <__pow5mult+0x4c>
 800b2d8:	2010      	movs	r0, #16
 800b2da:	f7ff fdb1 	bl	800ae40 <malloc>
 800b2de:	1e02      	subs	r2, r0, #0
 800b2e0:	6278      	str	r0, [r7, #36]	; 0x24
 800b2e2:	d105      	bne.n	800b2f0 <__pow5mult+0x44>
 800b2e4:	21d7      	movs	r1, #215	; 0xd7
 800b2e6:	4b1c      	ldr	r3, [pc, #112]	; (800b358 <__pow5mult+0xac>)
 800b2e8:	481c      	ldr	r0, [pc, #112]	; (800b35c <__pow5mult+0xb0>)
 800b2ea:	0049      	lsls	r1, r1, #1
 800b2ec:	f000 fcf0 	bl	800bcd0 <__assert_func>
 800b2f0:	6044      	str	r4, [r0, #4]
 800b2f2:	6084      	str	r4, [r0, #8]
 800b2f4:	6004      	str	r4, [r0, #0]
 800b2f6:	60c4      	str	r4, [r0, #12]
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	689c      	ldr	r4, [r3, #8]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	2c00      	cmp	r4, #0
 800b300:	d108      	bne.n	800b314 <__pow5mult+0x68>
 800b302:	0038      	movs	r0, r7
 800b304:	4916      	ldr	r1, [pc, #88]	; (800b360 <__pow5mult+0xb4>)
 800b306:	f7ff ff0b 	bl	800b120 <__i2b>
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	0004      	movs	r4, r0
 800b30e:	6098      	str	r0, [r3, #8]
 800b310:	2300      	movs	r3, #0
 800b312:	6003      	str	r3, [r0, #0]
 800b314:	2301      	movs	r3, #1
 800b316:	421d      	tst	r5, r3
 800b318:	d00a      	beq.n	800b330 <__pow5mult+0x84>
 800b31a:	0031      	movs	r1, r6
 800b31c:	0022      	movs	r2, r4
 800b31e:	0038      	movs	r0, r7
 800b320:	f7ff ff14 	bl	800b14c <__multiply>
 800b324:	0031      	movs	r1, r6
 800b326:	9001      	str	r0, [sp, #4]
 800b328:	0038      	movs	r0, r7
 800b32a:	f7ff fdfd 	bl	800af28 <_Bfree>
 800b32e:	9e01      	ldr	r6, [sp, #4]
 800b330:	106d      	asrs	r5, r5, #1
 800b332:	d00c      	beq.n	800b34e <__pow5mult+0xa2>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	2800      	cmp	r0, #0
 800b338:	d107      	bne.n	800b34a <__pow5mult+0x9e>
 800b33a:	0022      	movs	r2, r4
 800b33c:	0021      	movs	r1, r4
 800b33e:	0038      	movs	r0, r7
 800b340:	f7ff ff04 	bl	800b14c <__multiply>
 800b344:	2300      	movs	r3, #0
 800b346:	6020      	str	r0, [r4, #0]
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	0004      	movs	r4, r0
 800b34c:	e7e2      	b.n	800b314 <__pow5mult+0x68>
 800b34e:	0030      	movs	r0, r6
 800b350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	0800cdc8 	.word	0x0800cdc8
 800b358:	0800cb6e 	.word	0x0800cb6e
 800b35c:	0800cc74 	.word	0x0800cc74
 800b360:	00000271 	.word	0x00000271

0800b364 <__lshift>:
 800b364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b366:	000c      	movs	r4, r1
 800b368:	0017      	movs	r7, r2
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	1155      	asrs	r5, r2, #5
 800b36e:	b087      	sub	sp, #28
 800b370:	18eb      	adds	r3, r5, r3
 800b372:	9302      	str	r3, [sp, #8]
 800b374:	3301      	adds	r3, #1
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	6849      	ldr	r1, [r1, #4]
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	9004      	str	r0, [sp, #16]
 800b37e:	9a01      	ldr	r2, [sp, #4]
 800b380:	4293      	cmp	r3, r2
 800b382:	db11      	blt.n	800b3a8 <__lshift+0x44>
 800b384:	9804      	ldr	r0, [sp, #16]
 800b386:	f7ff fd8b 	bl	800aea0 <_Balloc>
 800b38a:	0002      	movs	r2, r0
 800b38c:	2300      	movs	r3, #0
 800b38e:	3214      	adds	r2, #20
 800b390:	0006      	movs	r6, r0
 800b392:	0011      	movs	r1, r2
 800b394:	9203      	str	r2, [sp, #12]
 800b396:	4298      	cmp	r0, r3
 800b398:	d10d      	bne.n	800b3b6 <__lshift+0x52>
 800b39a:	21da      	movs	r1, #218	; 0xda
 800b39c:	0002      	movs	r2, r0
 800b39e:	4b27      	ldr	r3, [pc, #156]	; (800b43c <__lshift+0xd8>)
 800b3a0:	4827      	ldr	r0, [pc, #156]	; (800b440 <__lshift+0xdc>)
 800b3a2:	31ff      	adds	r1, #255	; 0xff
 800b3a4:	f000 fc94 	bl	800bcd0 <__assert_func>
 800b3a8:	3101      	adds	r1, #1
 800b3aa:	005b      	lsls	r3, r3, #1
 800b3ac:	e7e7      	b.n	800b37e <__lshift+0x1a>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	0098      	lsls	r0, r3, #2
 800b3b2:	500a      	str	r2, [r1, r0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	42ab      	cmp	r3, r5
 800b3b8:	dbf9      	blt.n	800b3ae <__lshift+0x4a>
 800b3ba:	43eb      	mvns	r3, r5
 800b3bc:	17db      	asrs	r3, r3, #31
 800b3be:	401d      	ands	r5, r3
 800b3c0:	9b03      	ldr	r3, [sp, #12]
 800b3c2:	00ad      	lsls	r5, r5, #2
 800b3c4:	211f      	movs	r1, #31
 800b3c6:	0038      	movs	r0, r7
 800b3c8:	195d      	adds	r5, r3, r5
 800b3ca:	0023      	movs	r3, r4
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	3314      	adds	r3, #20
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	4008      	ands	r0, r1
 800b3d4:	4684      	mov	ip, r0
 800b3d6:	189a      	adds	r2, r3, r2
 800b3d8:	420f      	tst	r7, r1
 800b3da:	d02a      	beq.n	800b432 <__lshift+0xce>
 800b3dc:	3101      	adds	r1, #1
 800b3de:	1a09      	subs	r1, r1, r0
 800b3e0:	9105      	str	r1, [sp, #20]
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	9503      	str	r5, [sp, #12]
 800b3e6:	4667      	mov	r7, ip
 800b3e8:	6818      	ldr	r0, [r3, #0]
 800b3ea:	40b8      	lsls	r0, r7
 800b3ec:	4301      	orrs	r1, r0
 800b3ee:	9803      	ldr	r0, [sp, #12]
 800b3f0:	c002      	stmia	r0!, {r1}
 800b3f2:	cb02      	ldmia	r3!, {r1}
 800b3f4:	9003      	str	r0, [sp, #12]
 800b3f6:	9805      	ldr	r0, [sp, #20]
 800b3f8:	40c1      	lsrs	r1, r0
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d8f3      	bhi.n	800b3e6 <__lshift+0x82>
 800b3fe:	0020      	movs	r0, r4
 800b400:	3015      	adds	r0, #21
 800b402:	2304      	movs	r3, #4
 800b404:	4282      	cmp	r2, r0
 800b406:	d304      	bcc.n	800b412 <__lshift+0xae>
 800b408:	1b13      	subs	r3, r2, r4
 800b40a:	3b15      	subs	r3, #21
 800b40c:	089b      	lsrs	r3, r3, #2
 800b40e:	3301      	adds	r3, #1
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	50e9      	str	r1, [r5, r3]
 800b414:	2900      	cmp	r1, #0
 800b416:	d002      	beq.n	800b41e <__lshift+0xba>
 800b418:	9b02      	ldr	r3, [sp, #8]
 800b41a:	3302      	adds	r3, #2
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	9b01      	ldr	r3, [sp, #4]
 800b420:	9804      	ldr	r0, [sp, #16]
 800b422:	3b01      	subs	r3, #1
 800b424:	0021      	movs	r1, r4
 800b426:	6133      	str	r3, [r6, #16]
 800b428:	f7ff fd7e 	bl	800af28 <_Bfree>
 800b42c:	0030      	movs	r0, r6
 800b42e:	b007      	add	sp, #28
 800b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b432:	cb02      	ldmia	r3!, {r1}
 800b434:	c502      	stmia	r5!, {r1}
 800b436:	429a      	cmp	r2, r3
 800b438:	d8fb      	bhi.n	800b432 <__lshift+0xce>
 800b43a:	e7f0      	b.n	800b41e <__lshift+0xba>
 800b43c:	0800cbe4 	.word	0x0800cbe4
 800b440:	0800cc74 	.word	0x0800cc74

0800b444 <__mcmp>:
 800b444:	6902      	ldr	r2, [r0, #16]
 800b446:	690b      	ldr	r3, [r1, #16]
 800b448:	b530      	push	{r4, r5, lr}
 800b44a:	0004      	movs	r4, r0
 800b44c:	1ad0      	subs	r0, r2, r3
 800b44e:	429a      	cmp	r2, r3
 800b450:	d10d      	bne.n	800b46e <__mcmp+0x2a>
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	3414      	adds	r4, #20
 800b456:	3114      	adds	r1, #20
 800b458:	18e2      	adds	r2, r4, r3
 800b45a:	18c9      	adds	r1, r1, r3
 800b45c:	3a04      	subs	r2, #4
 800b45e:	3904      	subs	r1, #4
 800b460:	6815      	ldr	r5, [r2, #0]
 800b462:	680b      	ldr	r3, [r1, #0]
 800b464:	429d      	cmp	r5, r3
 800b466:	d003      	beq.n	800b470 <__mcmp+0x2c>
 800b468:	2001      	movs	r0, #1
 800b46a:	429d      	cmp	r5, r3
 800b46c:	d303      	bcc.n	800b476 <__mcmp+0x32>
 800b46e:	bd30      	pop	{r4, r5, pc}
 800b470:	4294      	cmp	r4, r2
 800b472:	d3f3      	bcc.n	800b45c <__mcmp+0x18>
 800b474:	e7fb      	b.n	800b46e <__mcmp+0x2a>
 800b476:	4240      	negs	r0, r0
 800b478:	e7f9      	b.n	800b46e <__mcmp+0x2a>
	...

0800b47c <__mdiff>:
 800b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b47e:	000e      	movs	r6, r1
 800b480:	0007      	movs	r7, r0
 800b482:	0011      	movs	r1, r2
 800b484:	0030      	movs	r0, r6
 800b486:	b087      	sub	sp, #28
 800b488:	0014      	movs	r4, r2
 800b48a:	f7ff ffdb 	bl	800b444 <__mcmp>
 800b48e:	1e05      	subs	r5, r0, #0
 800b490:	d110      	bne.n	800b4b4 <__mdiff+0x38>
 800b492:	0001      	movs	r1, r0
 800b494:	0038      	movs	r0, r7
 800b496:	f7ff fd03 	bl	800aea0 <_Balloc>
 800b49a:	1e02      	subs	r2, r0, #0
 800b49c:	d104      	bne.n	800b4a8 <__mdiff+0x2c>
 800b49e:	4b40      	ldr	r3, [pc, #256]	; (800b5a0 <__mdiff+0x124>)
 800b4a0:	4940      	ldr	r1, [pc, #256]	; (800b5a4 <__mdiff+0x128>)
 800b4a2:	4841      	ldr	r0, [pc, #260]	; (800b5a8 <__mdiff+0x12c>)
 800b4a4:	f000 fc14 	bl	800bcd0 <__assert_func>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	6145      	str	r5, [r0, #20]
 800b4ac:	6103      	str	r3, [r0, #16]
 800b4ae:	0010      	movs	r0, r2
 800b4b0:	b007      	add	sp, #28
 800b4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	db04      	blt.n	800b4c6 <__mdiff+0x4a>
 800b4bc:	0023      	movs	r3, r4
 800b4be:	0034      	movs	r4, r6
 800b4c0:	001e      	movs	r6, r3
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	0038      	movs	r0, r7
 800b4c8:	6861      	ldr	r1, [r4, #4]
 800b4ca:	f7ff fce9 	bl	800aea0 <_Balloc>
 800b4ce:	1e02      	subs	r2, r0, #0
 800b4d0:	d103      	bne.n	800b4da <__mdiff+0x5e>
 800b4d2:	2190      	movs	r1, #144	; 0x90
 800b4d4:	4b32      	ldr	r3, [pc, #200]	; (800b5a0 <__mdiff+0x124>)
 800b4d6:	0089      	lsls	r1, r1, #2
 800b4d8:	e7e3      	b.n	800b4a2 <__mdiff+0x26>
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	2700      	movs	r7, #0
 800b4de:	60c3      	str	r3, [r0, #12]
 800b4e0:	6920      	ldr	r0, [r4, #16]
 800b4e2:	3414      	adds	r4, #20
 800b4e4:	9401      	str	r4, [sp, #4]
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	0084      	lsls	r4, r0, #2
 800b4ea:	191b      	adds	r3, r3, r4
 800b4ec:	0034      	movs	r4, r6
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	6933      	ldr	r3, [r6, #16]
 800b4f2:	3414      	adds	r4, #20
 800b4f4:	0099      	lsls	r1, r3, #2
 800b4f6:	1863      	adds	r3, r4, r1
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	0013      	movs	r3, r2
 800b4fc:	3314      	adds	r3, #20
 800b4fe:	469c      	mov	ip, r3
 800b500:	9305      	str	r3, [sp, #20]
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	cc02      	ldmia	r4!, {r1}
 800b50a:	cb20      	ldmia	r3!, {r5}
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	b2ab      	uxth	r3, r5
 800b510:	19df      	adds	r7, r3, r7
 800b512:	b28b      	uxth	r3, r1
 800b514:	1afb      	subs	r3, r7, r3
 800b516:	0c2d      	lsrs	r5, r5, #16
 800b518:	0c09      	lsrs	r1, r1, #16
 800b51a:	1a69      	subs	r1, r5, r1
 800b51c:	141d      	asrs	r5, r3, #16
 800b51e:	1949      	adds	r1, r1, r5
 800b520:	140f      	asrs	r7, r1, #16
 800b522:	b29b      	uxth	r3, r3
 800b524:	0409      	lsls	r1, r1, #16
 800b526:	430b      	orrs	r3, r1
 800b528:	4661      	mov	r1, ip
 800b52a:	c108      	stmia	r1!, {r3}
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	468c      	mov	ip, r1
 800b530:	42a3      	cmp	r3, r4
 800b532:	d8e8      	bhi.n	800b506 <__mdiff+0x8a>
 800b534:	0031      	movs	r1, r6
 800b536:	9c03      	ldr	r4, [sp, #12]
 800b538:	3115      	adds	r1, #21
 800b53a:	2304      	movs	r3, #4
 800b53c:	428c      	cmp	r4, r1
 800b53e:	d304      	bcc.n	800b54a <__mdiff+0xce>
 800b540:	1ba3      	subs	r3, r4, r6
 800b542:	3b15      	subs	r3, #21
 800b544:	089b      	lsrs	r3, r3, #2
 800b546:	3301      	adds	r3, #1
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	9901      	ldr	r1, [sp, #4]
 800b54c:	18cc      	adds	r4, r1, r3
 800b54e:	9905      	ldr	r1, [sp, #20]
 800b550:	0026      	movs	r6, r4
 800b552:	18cb      	adds	r3, r1, r3
 800b554:	469c      	mov	ip, r3
 800b556:	9902      	ldr	r1, [sp, #8]
 800b558:	428e      	cmp	r6, r1
 800b55a:	d310      	bcc.n	800b57e <__mdiff+0x102>
 800b55c:	9e02      	ldr	r6, [sp, #8]
 800b55e:	1ee5      	subs	r5, r4, #3
 800b560:	2100      	movs	r1, #0
 800b562:	42ae      	cmp	r6, r5
 800b564:	d304      	bcc.n	800b570 <__mdiff+0xf4>
 800b566:	0031      	movs	r1, r6
 800b568:	3103      	adds	r1, #3
 800b56a:	1b09      	subs	r1, r1, r4
 800b56c:	0889      	lsrs	r1, r1, #2
 800b56e:	0089      	lsls	r1, r1, #2
 800b570:	185b      	adds	r3, r3, r1
 800b572:	3b04      	subs	r3, #4
 800b574:	6819      	ldr	r1, [r3, #0]
 800b576:	2900      	cmp	r1, #0
 800b578:	d00f      	beq.n	800b59a <__mdiff+0x11e>
 800b57a:	6110      	str	r0, [r2, #16]
 800b57c:	e797      	b.n	800b4ae <__mdiff+0x32>
 800b57e:	ce02      	ldmia	r6!, {r1}
 800b580:	b28d      	uxth	r5, r1
 800b582:	19ed      	adds	r5, r5, r7
 800b584:	0c0f      	lsrs	r7, r1, #16
 800b586:	1429      	asrs	r1, r5, #16
 800b588:	1879      	adds	r1, r7, r1
 800b58a:	140f      	asrs	r7, r1, #16
 800b58c:	b2ad      	uxth	r5, r5
 800b58e:	0409      	lsls	r1, r1, #16
 800b590:	430d      	orrs	r5, r1
 800b592:	4661      	mov	r1, ip
 800b594:	c120      	stmia	r1!, {r5}
 800b596:	468c      	mov	ip, r1
 800b598:	e7dd      	b.n	800b556 <__mdiff+0xda>
 800b59a:	3801      	subs	r0, #1
 800b59c:	e7e9      	b.n	800b572 <__mdiff+0xf6>
 800b59e:	46c0      	nop			; (mov r8, r8)
 800b5a0:	0800cbe4 	.word	0x0800cbe4
 800b5a4:	00000232 	.word	0x00000232
 800b5a8:	0800cc74 	.word	0x0800cc74

0800b5ac <__ulp>:
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <__ulp+0x40>)
 800b5ae:	4019      	ands	r1, r3
 800b5b0:	4b0f      	ldr	r3, [pc, #60]	; (800b5f0 <__ulp+0x44>)
 800b5b2:	18c9      	adds	r1, r1, r3
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	dd04      	ble.n	800b5c2 <__ulp+0x16>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	000b      	movs	r3, r1
 800b5bc:	0010      	movs	r0, r2
 800b5be:	0019      	movs	r1, r3
 800b5c0:	4770      	bx	lr
 800b5c2:	4249      	negs	r1, r1
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	1509      	asrs	r1, r1, #20
 800b5ca:	2913      	cmp	r1, #19
 800b5cc:	dc04      	bgt.n	800b5d8 <__ulp+0x2c>
 800b5ce:	2080      	movs	r0, #128	; 0x80
 800b5d0:	0300      	lsls	r0, r0, #12
 800b5d2:	4108      	asrs	r0, r1
 800b5d4:	0003      	movs	r3, r0
 800b5d6:	e7f1      	b.n	800b5bc <__ulp+0x10>
 800b5d8:	3914      	subs	r1, #20
 800b5da:	2001      	movs	r0, #1
 800b5dc:	291e      	cmp	r1, #30
 800b5de:	dc02      	bgt.n	800b5e6 <__ulp+0x3a>
 800b5e0:	2080      	movs	r0, #128	; 0x80
 800b5e2:	0600      	lsls	r0, r0, #24
 800b5e4:	40c8      	lsrs	r0, r1
 800b5e6:	0002      	movs	r2, r0
 800b5e8:	e7e8      	b.n	800b5bc <__ulp+0x10>
 800b5ea:	46c0      	nop			; (mov r8, r8)
 800b5ec:	7ff00000 	.word	0x7ff00000
 800b5f0:	fcc00000 	.word	0xfcc00000

0800b5f4 <__b2d>:
 800b5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5f6:	0006      	movs	r6, r0
 800b5f8:	6903      	ldr	r3, [r0, #16]
 800b5fa:	3614      	adds	r6, #20
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	18f3      	adds	r3, r6, r3
 800b600:	1f1d      	subs	r5, r3, #4
 800b602:	682c      	ldr	r4, [r5, #0]
 800b604:	000f      	movs	r7, r1
 800b606:	0020      	movs	r0, r4
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	f7ff fd41 	bl	800b090 <__hi0bits>
 800b60e:	2320      	movs	r3, #32
 800b610:	1a1b      	subs	r3, r3, r0
 800b612:	491f      	ldr	r1, [pc, #124]	; (800b690 <__b2d+0x9c>)
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	280a      	cmp	r0, #10
 800b618:	dc16      	bgt.n	800b648 <__b2d+0x54>
 800b61a:	230b      	movs	r3, #11
 800b61c:	0027      	movs	r7, r4
 800b61e:	1a1b      	subs	r3, r3, r0
 800b620:	40df      	lsrs	r7, r3
 800b622:	4339      	orrs	r1, r7
 800b624:	469c      	mov	ip, r3
 800b626:	000b      	movs	r3, r1
 800b628:	2100      	movs	r1, #0
 800b62a:	42ae      	cmp	r6, r5
 800b62c:	d202      	bcs.n	800b634 <__b2d+0x40>
 800b62e:	9901      	ldr	r1, [sp, #4]
 800b630:	3908      	subs	r1, #8
 800b632:	6809      	ldr	r1, [r1, #0]
 800b634:	3015      	adds	r0, #21
 800b636:	4084      	lsls	r4, r0
 800b638:	4660      	mov	r0, ip
 800b63a:	40c1      	lsrs	r1, r0
 800b63c:	430c      	orrs	r4, r1
 800b63e:	0022      	movs	r2, r4
 800b640:	0010      	movs	r0, r2
 800b642:	0019      	movs	r1, r3
 800b644:	b003      	add	sp, #12
 800b646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b648:	2700      	movs	r7, #0
 800b64a:	42ae      	cmp	r6, r5
 800b64c:	d202      	bcs.n	800b654 <__b2d+0x60>
 800b64e:	9d01      	ldr	r5, [sp, #4]
 800b650:	3d08      	subs	r5, #8
 800b652:	682f      	ldr	r7, [r5, #0]
 800b654:	230b      	movs	r3, #11
 800b656:	425b      	negs	r3, r3
 800b658:	469c      	mov	ip, r3
 800b65a:	4484      	add	ip, r0
 800b65c:	280b      	cmp	r0, #11
 800b65e:	d013      	beq.n	800b688 <__b2d+0x94>
 800b660:	4663      	mov	r3, ip
 800b662:	2020      	movs	r0, #32
 800b664:	409c      	lsls	r4, r3
 800b666:	1ac0      	subs	r0, r0, r3
 800b668:	003b      	movs	r3, r7
 800b66a:	40c3      	lsrs	r3, r0
 800b66c:	431c      	orrs	r4, r3
 800b66e:	4321      	orrs	r1, r4
 800b670:	000b      	movs	r3, r1
 800b672:	2100      	movs	r1, #0
 800b674:	42b5      	cmp	r5, r6
 800b676:	d901      	bls.n	800b67c <__b2d+0x88>
 800b678:	3d04      	subs	r5, #4
 800b67a:	6829      	ldr	r1, [r5, #0]
 800b67c:	4664      	mov	r4, ip
 800b67e:	40c1      	lsrs	r1, r0
 800b680:	40a7      	lsls	r7, r4
 800b682:	430f      	orrs	r7, r1
 800b684:	003a      	movs	r2, r7
 800b686:	e7db      	b.n	800b640 <__b2d+0x4c>
 800b688:	4321      	orrs	r1, r4
 800b68a:	000b      	movs	r3, r1
 800b68c:	e7fa      	b.n	800b684 <__b2d+0x90>
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	3ff00000 	.word	0x3ff00000

0800b694 <__d2b>:
 800b694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b696:	2101      	movs	r1, #1
 800b698:	0014      	movs	r4, r2
 800b69a:	001e      	movs	r6, r3
 800b69c:	9f08      	ldr	r7, [sp, #32]
 800b69e:	f7ff fbff 	bl	800aea0 <_Balloc>
 800b6a2:	1e05      	subs	r5, r0, #0
 800b6a4:	d105      	bne.n	800b6b2 <__d2b+0x1e>
 800b6a6:	0002      	movs	r2, r0
 800b6a8:	4b26      	ldr	r3, [pc, #152]	; (800b744 <__d2b+0xb0>)
 800b6aa:	4927      	ldr	r1, [pc, #156]	; (800b748 <__d2b+0xb4>)
 800b6ac:	4827      	ldr	r0, [pc, #156]	; (800b74c <__d2b+0xb8>)
 800b6ae:	f000 fb0f 	bl	800bcd0 <__assert_func>
 800b6b2:	0333      	lsls	r3, r6, #12
 800b6b4:	0076      	lsls	r6, r6, #1
 800b6b6:	0b1b      	lsrs	r3, r3, #12
 800b6b8:	0d76      	lsrs	r6, r6, #21
 800b6ba:	d124      	bne.n	800b706 <__d2b+0x72>
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	2c00      	cmp	r4, #0
 800b6c0:	d027      	beq.n	800b712 <__d2b+0x7e>
 800b6c2:	4668      	mov	r0, sp
 800b6c4:	9400      	str	r4, [sp, #0]
 800b6c6:	f7ff fcfd 	bl	800b0c4 <__lo0bits>
 800b6ca:	9c00      	ldr	r4, [sp, #0]
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d01e      	beq.n	800b70e <__d2b+0x7a>
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	2120      	movs	r1, #32
 800b6d4:	001a      	movs	r2, r3
 800b6d6:	1a09      	subs	r1, r1, r0
 800b6d8:	408a      	lsls	r2, r1
 800b6da:	40c3      	lsrs	r3, r0
 800b6dc:	4322      	orrs	r2, r4
 800b6de:	616a      	str	r2, [r5, #20]
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	9c01      	ldr	r4, [sp, #4]
 800b6e4:	61ac      	str	r4, [r5, #24]
 800b6e6:	1e63      	subs	r3, r4, #1
 800b6e8:	419c      	sbcs	r4, r3
 800b6ea:	3401      	adds	r4, #1
 800b6ec:	612c      	str	r4, [r5, #16]
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d018      	beq.n	800b724 <__d2b+0x90>
 800b6f2:	4b17      	ldr	r3, [pc, #92]	; (800b750 <__d2b+0xbc>)
 800b6f4:	18f6      	adds	r6, r6, r3
 800b6f6:	2335      	movs	r3, #53	; 0x35
 800b6f8:	1836      	adds	r6, r6, r0
 800b6fa:	1a18      	subs	r0, r3, r0
 800b6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fe:	603e      	str	r6, [r7, #0]
 800b700:	6018      	str	r0, [r3, #0]
 800b702:	0028      	movs	r0, r5
 800b704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b706:	2280      	movs	r2, #128	; 0x80
 800b708:	0352      	lsls	r2, r2, #13
 800b70a:	4313      	orrs	r3, r2
 800b70c:	e7d6      	b.n	800b6bc <__d2b+0x28>
 800b70e:	616c      	str	r4, [r5, #20]
 800b710:	e7e7      	b.n	800b6e2 <__d2b+0x4e>
 800b712:	a801      	add	r0, sp, #4
 800b714:	f7ff fcd6 	bl	800b0c4 <__lo0bits>
 800b718:	2401      	movs	r4, #1
 800b71a:	9b01      	ldr	r3, [sp, #4]
 800b71c:	612c      	str	r4, [r5, #16]
 800b71e:	616b      	str	r3, [r5, #20]
 800b720:	3020      	adds	r0, #32
 800b722:	e7e4      	b.n	800b6ee <__d2b+0x5a>
 800b724:	4b0b      	ldr	r3, [pc, #44]	; (800b754 <__d2b+0xc0>)
 800b726:	18c0      	adds	r0, r0, r3
 800b728:	4b0b      	ldr	r3, [pc, #44]	; (800b758 <__d2b+0xc4>)
 800b72a:	6038      	str	r0, [r7, #0]
 800b72c:	18e3      	adds	r3, r4, r3
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	18eb      	adds	r3, r5, r3
 800b732:	6958      	ldr	r0, [r3, #20]
 800b734:	f7ff fcac 	bl	800b090 <__hi0bits>
 800b738:	0164      	lsls	r4, r4, #5
 800b73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b73c:	1a24      	subs	r4, r4, r0
 800b73e:	601c      	str	r4, [r3, #0]
 800b740:	e7df      	b.n	800b702 <__d2b+0x6e>
 800b742:	46c0      	nop			; (mov r8, r8)
 800b744:	0800cbe4 	.word	0x0800cbe4
 800b748:	0000030a 	.word	0x0000030a
 800b74c:	0800cc74 	.word	0x0800cc74
 800b750:	fffffbcd 	.word	0xfffffbcd
 800b754:	fffffbce 	.word	0xfffffbce
 800b758:	3fffffff 	.word	0x3fffffff

0800b75c <__ratio>:
 800b75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b75e:	b085      	sub	sp, #20
 800b760:	000d      	movs	r5, r1
 800b762:	a902      	add	r1, sp, #8
 800b764:	0004      	movs	r4, r0
 800b766:	f7ff ff45 	bl	800b5f4 <__b2d>
 800b76a:	9000      	str	r0, [sp, #0]
 800b76c:	9101      	str	r1, [sp, #4]
 800b76e:	9e00      	ldr	r6, [sp, #0]
 800b770:	9f01      	ldr	r7, [sp, #4]
 800b772:	0028      	movs	r0, r5
 800b774:	a903      	add	r1, sp, #12
 800b776:	f7ff ff3d 	bl	800b5f4 <__b2d>
 800b77a:	6924      	ldr	r4, [r4, #16]
 800b77c:	692d      	ldr	r5, [r5, #16]
 800b77e:	0002      	movs	r2, r0
 800b780:	1b65      	subs	r5, r4, r5
 800b782:	016c      	lsls	r4, r5, #5
 800b784:	46a4      	mov	ip, r4
 800b786:	9d03      	ldr	r5, [sp, #12]
 800b788:	9c02      	ldr	r4, [sp, #8]
 800b78a:	000b      	movs	r3, r1
 800b78c:	1b64      	subs	r4, r4, r5
 800b78e:	4464      	add	r4, ip
 800b790:	0525      	lsls	r5, r4, #20
 800b792:	2c00      	cmp	r4, #0
 800b794:	dd07      	ble.n	800b7a6 <__ratio+0x4a>
 800b796:	9901      	ldr	r1, [sp, #4]
 800b798:	186f      	adds	r7, r5, r1
 800b79a:	0030      	movs	r0, r6
 800b79c:	0039      	movs	r1, r7
 800b79e:	f7f5 fa5d 	bl	8000c5c <__aeabi_ddiv>
 800b7a2:	b005      	add	sp, #20
 800b7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a6:	1b4b      	subs	r3, r1, r5
 800b7a8:	e7f7      	b.n	800b79a <__ratio+0x3e>

0800b7aa <__copybits>:
 800b7aa:	b570      	push	{r4, r5, r6, lr}
 800b7ac:	0015      	movs	r5, r2
 800b7ae:	6913      	ldr	r3, [r2, #16]
 800b7b0:	3514      	adds	r5, #20
 800b7b2:	009c      	lsls	r4, r3, #2
 800b7b4:	0006      	movs	r6, r0
 800b7b6:	002b      	movs	r3, r5
 800b7b8:	3901      	subs	r1, #1
 800b7ba:	1149      	asrs	r1, r1, #5
 800b7bc:	3101      	adds	r1, #1
 800b7be:	0089      	lsls	r1, r1, #2
 800b7c0:	1841      	adds	r1, r0, r1
 800b7c2:	192c      	adds	r4, r5, r4
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	d80d      	bhi.n	800b7e4 <__copybits+0x3a>
 800b7c8:	0015      	movs	r5, r2
 800b7ca:	3511      	adds	r5, #17
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	42a5      	cmp	r5, r4
 800b7d0:	d803      	bhi.n	800b7da <__copybits+0x30>
 800b7d2:	1aa3      	subs	r3, r4, r2
 800b7d4:	3b11      	subs	r3, #17
 800b7d6:	089b      	lsrs	r3, r3, #2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	18c0      	adds	r0, r0, r3
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4281      	cmp	r1, r0
 800b7e0:	d803      	bhi.n	800b7ea <__copybits+0x40>
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	cb20      	ldmia	r3!, {r5}
 800b7e6:	c620      	stmia	r6!, {r5}
 800b7e8:	e7ec      	b.n	800b7c4 <__copybits+0x1a>
 800b7ea:	c008      	stmia	r0!, {r3}
 800b7ec:	e7f7      	b.n	800b7de <__copybits+0x34>

0800b7ee <__any_on>:
 800b7ee:	0002      	movs	r2, r0
 800b7f0:	6900      	ldr	r0, [r0, #16]
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	3214      	adds	r2, #20
 800b7f6:	114b      	asrs	r3, r1, #5
 800b7f8:	4298      	cmp	r0, r3
 800b7fa:	db13      	blt.n	800b824 <__any_on+0x36>
 800b7fc:	dd0c      	ble.n	800b818 <__any_on+0x2a>
 800b7fe:	241f      	movs	r4, #31
 800b800:	0008      	movs	r0, r1
 800b802:	4020      	ands	r0, r4
 800b804:	4221      	tst	r1, r4
 800b806:	d007      	beq.n	800b818 <__any_on+0x2a>
 800b808:	0099      	lsls	r1, r3, #2
 800b80a:	588c      	ldr	r4, [r1, r2]
 800b80c:	0021      	movs	r1, r4
 800b80e:	40c1      	lsrs	r1, r0
 800b810:	4081      	lsls	r1, r0
 800b812:	2001      	movs	r0, #1
 800b814:	428c      	cmp	r4, r1
 800b816:	d104      	bne.n	800b822 <__any_on+0x34>
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	18d3      	adds	r3, r2, r3
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d803      	bhi.n	800b828 <__any_on+0x3a>
 800b820:	2000      	movs	r0, #0
 800b822:	bd10      	pop	{r4, pc}
 800b824:	0003      	movs	r3, r0
 800b826:	e7f7      	b.n	800b818 <__any_on+0x2a>
 800b828:	3b04      	subs	r3, #4
 800b82a:	6819      	ldr	r1, [r3, #0]
 800b82c:	2900      	cmp	r1, #0
 800b82e:	d0f5      	beq.n	800b81c <__any_on+0x2e>
 800b830:	2001      	movs	r0, #1
 800b832:	e7f6      	b.n	800b822 <__any_on+0x34>

0800b834 <_calloc_r>:
 800b834:	434a      	muls	r2, r1
 800b836:	b570      	push	{r4, r5, r6, lr}
 800b838:	0011      	movs	r1, r2
 800b83a:	0015      	movs	r5, r2
 800b83c:	f000 f852 	bl	800b8e4 <_malloc_r>
 800b840:	1e04      	subs	r4, r0, #0
 800b842:	d003      	beq.n	800b84c <_calloc_r+0x18>
 800b844:	002a      	movs	r2, r5
 800b846:	2100      	movs	r1, #0
 800b848:	f7fc fb56 	bl	8007ef8 <memset>
 800b84c:	0020      	movs	r0, r4
 800b84e:	bd70      	pop	{r4, r5, r6, pc}

0800b850 <_free_r>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	0005      	movs	r5, r0
 800b854:	2900      	cmp	r1, #0
 800b856:	d010      	beq.n	800b87a <_free_r+0x2a>
 800b858:	1f0c      	subs	r4, r1, #4
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	da00      	bge.n	800b862 <_free_r+0x12>
 800b860:	18e4      	adds	r4, r4, r3
 800b862:	0028      	movs	r0, r5
 800b864:	f000 fa76 	bl	800bd54 <__malloc_lock>
 800b868:	4a1d      	ldr	r2, [pc, #116]	; (800b8e0 <_free_r+0x90>)
 800b86a:	6813      	ldr	r3, [r2, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d105      	bne.n	800b87c <_free_r+0x2c>
 800b870:	6063      	str	r3, [r4, #4]
 800b872:	6014      	str	r4, [r2, #0]
 800b874:	0028      	movs	r0, r5
 800b876:	f000 fa75 	bl	800bd64 <__malloc_unlock>
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	d908      	bls.n	800b892 <_free_r+0x42>
 800b880:	6821      	ldr	r1, [r4, #0]
 800b882:	1860      	adds	r0, r4, r1
 800b884:	4283      	cmp	r3, r0
 800b886:	d1f3      	bne.n	800b870 <_free_r+0x20>
 800b888:	6818      	ldr	r0, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	1841      	adds	r1, r0, r1
 800b88e:	6021      	str	r1, [r4, #0]
 800b890:	e7ee      	b.n	800b870 <_free_r+0x20>
 800b892:	001a      	movs	r2, r3
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <_free_r+0x4e>
 800b89a:	42a3      	cmp	r3, r4
 800b89c:	d9f9      	bls.n	800b892 <_free_r+0x42>
 800b89e:	6811      	ldr	r1, [r2, #0]
 800b8a0:	1850      	adds	r0, r2, r1
 800b8a2:	42a0      	cmp	r0, r4
 800b8a4:	d10b      	bne.n	800b8be <_free_r+0x6e>
 800b8a6:	6820      	ldr	r0, [r4, #0]
 800b8a8:	1809      	adds	r1, r1, r0
 800b8aa:	1850      	adds	r0, r2, r1
 800b8ac:	6011      	str	r1, [r2, #0]
 800b8ae:	4283      	cmp	r3, r0
 800b8b0:	d1e0      	bne.n	800b874 <_free_r+0x24>
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	1841      	adds	r1, r0, r1
 800b8b8:	6011      	str	r1, [r2, #0]
 800b8ba:	6053      	str	r3, [r2, #4]
 800b8bc:	e7da      	b.n	800b874 <_free_r+0x24>
 800b8be:	42a0      	cmp	r0, r4
 800b8c0:	d902      	bls.n	800b8c8 <_free_r+0x78>
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	e7d5      	b.n	800b874 <_free_r+0x24>
 800b8c8:	6821      	ldr	r1, [r4, #0]
 800b8ca:	1860      	adds	r0, r4, r1
 800b8cc:	4283      	cmp	r3, r0
 800b8ce:	d103      	bne.n	800b8d8 <_free_r+0x88>
 800b8d0:	6818      	ldr	r0, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	1841      	adds	r1, r0, r1
 800b8d6:	6021      	str	r1, [r4, #0]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	6054      	str	r4, [r2, #4]
 800b8dc:	e7ca      	b.n	800b874 <_free_r+0x24>
 800b8de:	46c0      	nop			; (mov r8, r8)
 800b8e0:	20000308 	.word	0x20000308

0800b8e4 <_malloc_r>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	1ccd      	adds	r5, r1, #3
 800b8ea:	439d      	bics	r5, r3
 800b8ec:	3508      	adds	r5, #8
 800b8ee:	0006      	movs	r6, r0
 800b8f0:	2d0c      	cmp	r5, #12
 800b8f2:	d21f      	bcs.n	800b934 <_malloc_r+0x50>
 800b8f4:	250c      	movs	r5, #12
 800b8f6:	42a9      	cmp	r1, r5
 800b8f8:	d81e      	bhi.n	800b938 <_malloc_r+0x54>
 800b8fa:	0030      	movs	r0, r6
 800b8fc:	f000 fa2a 	bl	800bd54 <__malloc_lock>
 800b900:	4925      	ldr	r1, [pc, #148]	; (800b998 <_malloc_r+0xb4>)
 800b902:	680a      	ldr	r2, [r1, #0]
 800b904:	0014      	movs	r4, r2
 800b906:	2c00      	cmp	r4, #0
 800b908:	d11a      	bne.n	800b940 <_malloc_r+0x5c>
 800b90a:	4f24      	ldr	r7, [pc, #144]	; (800b99c <_malloc_r+0xb8>)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d104      	bne.n	800b91c <_malloc_r+0x38>
 800b912:	0021      	movs	r1, r4
 800b914:	0030      	movs	r0, r6
 800b916:	f000 f9ab 	bl	800bc70 <_sbrk_r>
 800b91a:	6038      	str	r0, [r7, #0]
 800b91c:	0029      	movs	r1, r5
 800b91e:	0030      	movs	r0, r6
 800b920:	f000 f9a6 	bl	800bc70 <_sbrk_r>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d12b      	bne.n	800b980 <_malloc_r+0x9c>
 800b928:	230c      	movs	r3, #12
 800b92a:	0030      	movs	r0, r6
 800b92c:	6033      	str	r3, [r6, #0]
 800b92e:	f000 fa19 	bl	800bd64 <__malloc_unlock>
 800b932:	e003      	b.n	800b93c <_malloc_r+0x58>
 800b934:	2d00      	cmp	r5, #0
 800b936:	dade      	bge.n	800b8f6 <_malloc_r+0x12>
 800b938:	230c      	movs	r3, #12
 800b93a:	6033      	str	r3, [r6, #0]
 800b93c:	2000      	movs	r0, #0
 800b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	1b5b      	subs	r3, r3, r5
 800b944:	d419      	bmi.n	800b97a <_malloc_r+0x96>
 800b946:	2b0b      	cmp	r3, #11
 800b948:	d903      	bls.n	800b952 <_malloc_r+0x6e>
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	18e4      	adds	r4, r4, r3
 800b94e:	6025      	str	r5, [r4, #0]
 800b950:	e003      	b.n	800b95a <_malloc_r+0x76>
 800b952:	6863      	ldr	r3, [r4, #4]
 800b954:	42a2      	cmp	r2, r4
 800b956:	d10e      	bne.n	800b976 <_malloc_r+0x92>
 800b958:	600b      	str	r3, [r1, #0]
 800b95a:	0030      	movs	r0, r6
 800b95c:	f000 fa02 	bl	800bd64 <__malloc_unlock>
 800b960:	0020      	movs	r0, r4
 800b962:	2207      	movs	r2, #7
 800b964:	300b      	adds	r0, #11
 800b966:	1d23      	adds	r3, r4, #4
 800b968:	4390      	bics	r0, r2
 800b96a:	1ac2      	subs	r2, r0, r3
 800b96c:	4298      	cmp	r0, r3
 800b96e:	d0e6      	beq.n	800b93e <_malloc_r+0x5a>
 800b970:	1a1b      	subs	r3, r3, r0
 800b972:	50a3      	str	r3, [r4, r2]
 800b974:	e7e3      	b.n	800b93e <_malloc_r+0x5a>
 800b976:	6053      	str	r3, [r2, #4]
 800b978:	e7ef      	b.n	800b95a <_malloc_r+0x76>
 800b97a:	0022      	movs	r2, r4
 800b97c:	6864      	ldr	r4, [r4, #4]
 800b97e:	e7c2      	b.n	800b906 <_malloc_r+0x22>
 800b980:	2303      	movs	r3, #3
 800b982:	1cc4      	adds	r4, r0, #3
 800b984:	439c      	bics	r4, r3
 800b986:	42a0      	cmp	r0, r4
 800b988:	d0e1      	beq.n	800b94e <_malloc_r+0x6a>
 800b98a:	1a21      	subs	r1, r4, r0
 800b98c:	0030      	movs	r0, r6
 800b98e:	f000 f96f 	bl	800bc70 <_sbrk_r>
 800b992:	1c43      	adds	r3, r0, #1
 800b994:	d1db      	bne.n	800b94e <_malloc_r+0x6a>
 800b996:	e7c7      	b.n	800b928 <_malloc_r+0x44>
 800b998:	20000308 	.word	0x20000308
 800b99c:	2000030c 	.word	0x2000030c

0800b9a0 <__ssputs_r>:
 800b9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a2:	688e      	ldr	r6, [r1, #8]
 800b9a4:	b085      	sub	sp, #20
 800b9a6:	0007      	movs	r7, r0
 800b9a8:	000c      	movs	r4, r1
 800b9aa:	9203      	str	r2, [sp, #12]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	429e      	cmp	r6, r3
 800b9b0:	d83c      	bhi.n	800ba2c <__ssputs_r+0x8c>
 800b9b2:	2390      	movs	r3, #144	; 0x90
 800b9b4:	898a      	ldrh	r2, [r1, #12]
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	421a      	tst	r2, r3
 800b9ba:	d034      	beq.n	800ba26 <__ssputs_r+0x86>
 800b9bc:	2503      	movs	r5, #3
 800b9be:	6909      	ldr	r1, [r1, #16]
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	1a5b      	subs	r3, r3, r1
 800b9c4:	9302      	str	r3, [sp, #8]
 800b9c6:	6963      	ldr	r3, [r4, #20]
 800b9c8:	9802      	ldr	r0, [sp, #8]
 800b9ca:	435d      	muls	r5, r3
 800b9cc:	0feb      	lsrs	r3, r5, #31
 800b9ce:	195d      	adds	r5, r3, r5
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	106d      	asrs	r5, r5, #1
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	181b      	adds	r3, r3, r0
 800b9d8:	42ab      	cmp	r3, r5
 800b9da:	d900      	bls.n	800b9de <__ssputs_r+0x3e>
 800b9dc:	001d      	movs	r5, r3
 800b9de:	0553      	lsls	r3, r2, #21
 800b9e0:	d532      	bpl.n	800ba48 <__ssputs_r+0xa8>
 800b9e2:	0029      	movs	r1, r5
 800b9e4:	0038      	movs	r0, r7
 800b9e6:	f7ff ff7d 	bl	800b8e4 <_malloc_r>
 800b9ea:	1e06      	subs	r6, r0, #0
 800b9ec:	d109      	bne.n	800ba02 <__ssputs_r+0x62>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	603b      	str	r3, [r7, #0]
 800b9f2:	2340      	movs	r3, #64	; 0x40
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	89a2      	ldrh	r2, [r4, #12]
 800b9f8:	4240      	negs	r0, r0
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	b005      	add	sp, #20
 800ba00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba02:	9a02      	ldr	r2, [sp, #8]
 800ba04:	6921      	ldr	r1, [r4, #16]
 800ba06:	f7ff fa42 	bl	800ae8e <memcpy>
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	4a14      	ldr	r2, [pc, #80]	; (800ba60 <__ssputs_r+0xc0>)
 800ba0e:	401a      	ands	r2, r3
 800ba10:	2380      	movs	r3, #128	; 0x80
 800ba12:	4313      	orrs	r3, r2
 800ba14:	81a3      	strh	r3, [r4, #12]
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	6126      	str	r6, [r4, #16]
 800ba1a:	18f6      	adds	r6, r6, r3
 800ba1c:	6026      	str	r6, [r4, #0]
 800ba1e:	6165      	str	r5, [r4, #20]
 800ba20:	9e01      	ldr	r6, [sp, #4]
 800ba22:	1aed      	subs	r5, r5, r3
 800ba24:	60a5      	str	r5, [r4, #8]
 800ba26:	9b01      	ldr	r3, [sp, #4]
 800ba28:	429e      	cmp	r6, r3
 800ba2a:	d900      	bls.n	800ba2e <__ssputs_r+0x8e>
 800ba2c:	9e01      	ldr	r6, [sp, #4]
 800ba2e:	0032      	movs	r2, r6
 800ba30:	9903      	ldr	r1, [sp, #12]
 800ba32:	6820      	ldr	r0, [r4, #0]
 800ba34:	f000 f97a 	bl	800bd2c <memmove>
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	1b9b      	subs	r3, r3, r6
 800ba3e:	60a3      	str	r3, [r4, #8]
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	199e      	adds	r6, r3, r6
 800ba44:	6026      	str	r6, [r4, #0]
 800ba46:	e7da      	b.n	800b9fe <__ssputs_r+0x5e>
 800ba48:	002a      	movs	r2, r5
 800ba4a:	0038      	movs	r0, r7
 800ba4c:	f000 f992 	bl	800bd74 <_realloc_r>
 800ba50:	1e06      	subs	r6, r0, #0
 800ba52:	d1e0      	bne.n	800ba16 <__ssputs_r+0x76>
 800ba54:	0038      	movs	r0, r7
 800ba56:	6921      	ldr	r1, [r4, #16]
 800ba58:	f7ff fefa 	bl	800b850 <_free_r>
 800ba5c:	e7c7      	b.n	800b9ee <__ssputs_r+0x4e>
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	fffffb7f 	.word	0xfffffb7f

0800ba64 <_svfiprintf_r>:
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba66:	b0a1      	sub	sp, #132	; 0x84
 800ba68:	9003      	str	r0, [sp, #12]
 800ba6a:	001d      	movs	r5, r3
 800ba6c:	898b      	ldrh	r3, [r1, #12]
 800ba6e:	000f      	movs	r7, r1
 800ba70:	0016      	movs	r6, r2
 800ba72:	061b      	lsls	r3, r3, #24
 800ba74:	d511      	bpl.n	800ba9a <_svfiprintf_r+0x36>
 800ba76:	690b      	ldr	r3, [r1, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10e      	bne.n	800ba9a <_svfiprintf_r+0x36>
 800ba7c:	2140      	movs	r1, #64	; 0x40
 800ba7e:	f7ff ff31 	bl	800b8e4 <_malloc_r>
 800ba82:	6038      	str	r0, [r7, #0]
 800ba84:	6138      	str	r0, [r7, #16]
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d105      	bne.n	800ba96 <_svfiprintf_r+0x32>
 800ba8a:	230c      	movs	r3, #12
 800ba8c:	9a03      	ldr	r2, [sp, #12]
 800ba8e:	3801      	subs	r0, #1
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	b021      	add	sp, #132	; 0x84
 800ba94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba96:	2340      	movs	r3, #64	; 0x40
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	ac08      	add	r4, sp, #32
 800ba9e:	6163      	str	r3, [r4, #20]
 800baa0:	3320      	adds	r3, #32
 800baa2:	7663      	strb	r3, [r4, #25]
 800baa4:	3310      	adds	r3, #16
 800baa6:	76a3      	strb	r3, [r4, #26]
 800baa8:	9507      	str	r5, [sp, #28]
 800baaa:	0035      	movs	r5, r6
 800baac:	782b      	ldrb	r3, [r5, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <_svfiprintf_r+0x52>
 800bab2:	2b25      	cmp	r3, #37	; 0x25
 800bab4:	d147      	bne.n	800bb46 <_svfiprintf_r+0xe2>
 800bab6:	1bab      	subs	r3, r5, r6
 800bab8:	9305      	str	r3, [sp, #20]
 800baba:	42b5      	cmp	r5, r6
 800babc:	d00c      	beq.n	800bad8 <_svfiprintf_r+0x74>
 800babe:	0032      	movs	r2, r6
 800bac0:	0039      	movs	r1, r7
 800bac2:	9803      	ldr	r0, [sp, #12]
 800bac4:	f7ff ff6c 	bl	800b9a0 <__ssputs_r>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d100      	bne.n	800bace <_svfiprintf_r+0x6a>
 800bacc:	e0ae      	b.n	800bc2c <_svfiprintf_r+0x1c8>
 800bace:	6962      	ldr	r2, [r4, #20]
 800bad0:	9b05      	ldr	r3, [sp, #20]
 800bad2:	4694      	mov	ip, r2
 800bad4:	4463      	add	r3, ip
 800bad6:	6163      	str	r3, [r4, #20]
 800bad8:	782b      	ldrb	r3, [r5, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d100      	bne.n	800bae0 <_svfiprintf_r+0x7c>
 800bade:	e0a5      	b.n	800bc2c <_svfiprintf_r+0x1c8>
 800bae0:	2201      	movs	r2, #1
 800bae2:	2300      	movs	r3, #0
 800bae4:	4252      	negs	r2, r2
 800bae6:	6062      	str	r2, [r4, #4]
 800bae8:	a904      	add	r1, sp, #16
 800baea:	3254      	adds	r2, #84	; 0x54
 800baec:	1852      	adds	r2, r2, r1
 800baee:	1c6e      	adds	r6, r5, #1
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	60e3      	str	r3, [r4, #12]
 800baf4:	60a3      	str	r3, [r4, #8]
 800baf6:	7013      	strb	r3, [r2, #0]
 800baf8:	65a3      	str	r3, [r4, #88]	; 0x58
 800bafa:	2205      	movs	r2, #5
 800bafc:	7831      	ldrb	r1, [r6, #0]
 800bafe:	4854      	ldr	r0, [pc, #336]	; (800bc50 <_svfiprintf_r+0x1ec>)
 800bb00:	f7ff f9ba 	bl	800ae78 <memchr>
 800bb04:	1c75      	adds	r5, r6, #1
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d11f      	bne.n	800bb4a <_svfiprintf_r+0xe6>
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	06d3      	lsls	r3, r2, #27
 800bb0e:	d504      	bpl.n	800bb1a <_svfiprintf_r+0xb6>
 800bb10:	2353      	movs	r3, #83	; 0x53
 800bb12:	a904      	add	r1, sp, #16
 800bb14:	185b      	adds	r3, r3, r1
 800bb16:	2120      	movs	r1, #32
 800bb18:	7019      	strb	r1, [r3, #0]
 800bb1a:	0713      	lsls	r3, r2, #28
 800bb1c:	d504      	bpl.n	800bb28 <_svfiprintf_r+0xc4>
 800bb1e:	2353      	movs	r3, #83	; 0x53
 800bb20:	a904      	add	r1, sp, #16
 800bb22:	185b      	adds	r3, r3, r1
 800bb24:	212b      	movs	r1, #43	; 0x2b
 800bb26:	7019      	strb	r1, [r3, #0]
 800bb28:	7833      	ldrb	r3, [r6, #0]
 800bb2a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb2c:	d016      	beq.n	800bb5c <_svfiprintf_r+0xf8>
 800bb2e:	0035      	movs	r5, r6
 800bb30:	2100      	movs	r1, #0
 800bb32:	200a      	movs	r0, #10
 800bb34:	68e3      	ldr	r3, [r4, #12]
 800bb36:	782a      	ldrb	r2, [r5, #0]
 800bb38:	1c6e      	adds	r6, r5, #1
 800bb3a:	3a30      	subs	r2, #48	; 0x30
 800bb3c:	2a09      	cmp	r2, #9
 800bb3e:	d94e      	bls.n	800bbde <_svfiprintf_r+0x17a>
 800bb40:	2900      	cmp	r1, #0
 800bb42:	d111      	bne.n	800bb68 <_svfiprintf_r+0x104>
 800bb44:	e017      	b.n	800bb76 <_svfiprintf_r+0x112>
 800bb46:	3501      	adds	r5, #1
 800bb48:	e7b0      	b.n	800baac <_svfiprintf_r+0x48>
 800bb4a:	4b41      	ldr	r3, [pc, #260]	; (800bc50 <_svfiprintf_r+0x1ec>)
 800bb4c:	6822      	ldr	r2, [r4, #0]
 800bb4e:	1ac0      	subs	r0, r0, r3
 800bb50:	2301      	movs	r3, #1
 800bb52:	4083      	lsls	r3, r0
 800bb54:	4313      	orrs	r3, r2
 800bb56:	002e      	movs	r6, r5
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	e7ce      	b.n	800bafa <_svfiprintf_r+0x96>
 800bb5c:	9b07      	ldr	r3, [sp, #28]
 800bb5e:	1d19      	adds	r1, r3, #4
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	9107      	str	r1, [sp, #28]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	db01      	blt.n	800bb6c <_svfiprintf_r+0x108>
 800bb68:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb6a:	e004      	b.n	800bb76 <_svfiprintf_r+0x112>
 800bb6c:	425b      	negs	r3, r3
 800bb6e:	60e3      	str	r3, [r4, #12]
 800bb70:	2302      	movs	r3, #2
 800bb72:	4313      	orrs	r3, r2
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	782b      	ldrb	r3, [r5, #0]
 800bb78:	2b2e      	cmp	r3, #46	; 0x2e
 800bb7a:	d10a      	bne.n	800bb92 <_svfiprintf_r+0x12e>
 800bb7c:	786b      	ldrb	r3, [r5, #1]
 800bb7e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb80:	d135      	bne.n	800bbee <_svfiprintf_r+0x18a>
 800bb82:	9b07      	ldr	r3, [sp, #28]
 800bb84:	3502      	adds	r5, #2
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9207      	str	r2, [sp, #28]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	db2b      	blt.n	800bbe8 <_svfiprintf_r+0x184>
 800bb90:	9309      	str	r3, [sp, #36]	; 0x24
 800bb92:	4e30      	ldr	r6, [pc, #192]	; (800bc54 <_svfiprintf_r+0x1f0>)
 800bb94:	2203      	movs	r2, #3
 800bb96:	0030      	movs	r0, r6
 800bb98:	7829      	ldrb	r1, [r5, #0]
 800bb9a:	f7ff f96d 	bl	800ae78 <memchr>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d006      	beq.n	800bbb0 <_svfiprintf_r+0x14c>
 800bba2:	2340      	movs	r3, #64	; 0x40
 800bba4:	1b80      	subs	r0, r0, r6
 800bba6:	4083      	lsls	r3, r0
 800bba8:	6822      	ldr	r2, [r4, #0]
 800bbaa:	3501      	adds	r5, #1
 800bbac:	4313      	orrs	r3, r2
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	7829      	ldrb	r1, [r5, #0]
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	4828      	ldr	r0, [pc, #160]	; (800bc58 <_svfiprintf_r+0x1f4>)
 800bbb6:	1c6e      	adds	r6, r5, #1
 800bbb8:	7621      	strb	r1, [r4, #24]
 800bbba:	f7ff f95d 	bl	800ae78 <memchr>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d03c      	beq.n	800bc3c <_svfiprintf_r+0x1d8>
 800bbc2:	4b26      	ldr	r3, [pc, #152]	; (800bc5c <_svfiprintf_r+0x1f8>)
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d125      	bne.n	800bc14 <_svfiprintf_r+0x1b0>
 800bbc8:	2207      	movs	r2, #7
 800bbca:	9b07      	ldr	r3, [sp, #28]
 800bbcc:	3307      	adds	r3, #7
 800bbce:	4393      	bics	r3, r2
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	9307      	str	r3, [sp, #28]
 800bbd4:	6963      	ldr	r3, [r4, #20]
 800bbd6:	9a04      	ldr	r2, [sp, #16]
 800bbd8:	189b      	adds	r3, r3, r2
 800bbda:	6163      	str	r3, [r4, #20]
 800bbdc:	e765      	b.n	800baaa <_svfiprintf_r+0x46>
 800bbde:	4343      	muls	r3, r0
 800bbe0:	0035      	movs	r5, r6
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	189b      	adds	r3, r3, r2
 800bbe6:	e7a6      	b.n	800bb36 <_svfiprintf_r+0xd2>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	425b      	negs	r3, r3
 800bbec:	e7d0      	b.n	800bb90 <_svfiprintf_r+0x12c>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	200a      	movs	r0, #10
 800bbf2:	001a      	movs	r2, r3
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	6063      	str	r3, [r4, #4]
 800bbf8:	7829      	ldrb	r1, [r5, #0]
 800bbfa:	1c6e      	adds	r6, r5, #1
 800bbfc:	3930      	subs	r1, #48	; 0x30
 800bbfe:	2909      	cmp	r1, #9
 800bc00:	d903      	bls.n	800bc0a <_svfiprintf_r+0x1a6>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0c5      	beq.n	800bb92 <_svfiprintf_r+0x12e>
 800bc06:	9209      	str	r2, [sp, #36]	; 0x24
 800bc08:	e7c3      	b.n	800bb92 <_svfiprintf_r+0x12e>
 800bc0a:	4342      	muls	r2, r0
 800bc0c:	0035      	movs	r5, r6
 800bc0e:	2301      	movs	r3, #1
 800bc10:	1852      	adds	r2, r2, r1
 800bc12:	e7f1      	b.n	800bbf8 <_svfiprintf_r+0x194>
 800bc14:	ab07      	add	r3, sp, #28
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	003a      	movs	r2, r7
 800bc1a:	0021      	movs	r1, r4
 800bc1c:	4b10      	ldr	r3, [pc, #64]	; (800bc60 <_svfiprintf_r+0x1fc>)
 800bc1e:	9803      	ldr	r0, [sp, #12]
 800bc20:	f7fc fa1c 	bl	800805c <_printf_float>
 800bc24:	9004      	str	r0, [sp, #16]
 800bc26:	9b04      	ldr	r3, [sp, #16]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	d1d3      	bne.n	800bbd4 <_svfiprintf_r+0x170>
 800bc2c:	89bb      	ldrh	r3, [r7, #12]
 800bc2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc30:	065b      	lsls	r3, r3, #25
 800bc32:	d400      	bmi.n	800bc36 <_svfiprintf_r+0x1d2>
 800bc34:	e72d      	b.n	800ba92 <_svfiprintf_r+0x2e>
 800bc36:	2001      	movs	r0, #1
 800bc38:	4240      	negs	r0, r0
 800bc3a:	e72a      	b.n	800ba92 <_svfiprintf_r+0x2e>
 800bc3c:	ab07      	add	r3, sp, #28
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	003a      	movs	r2, r7
 800bc42:	0021      	movs	r1, r4
 800bc44:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <_svfiprintf_r+0x1fc>)
 800bc46:	9803      	ldr	r0, [sp, #12]
 800bc48:	f7fc fcc6 	bl	80085d8 <_printf_i>
 800bc4c:	e7ea      	b.n	800bc24 <_svfiprintf_r+0x1c0>
 800bc4e:	46c0      	nop			; (mov r8, r8)
 800bc50:	0800cdd4 	.word	0x0800cdd4
 800bc54:	0800cdda 	.word	0x0800cdda
 800bc58:	0800cdde 	.word	0x0800cdde
 800bc5c:	0800805d 	.word	0x0800805d
 800bc60:	0800b9a1 	.word	0x0800b9a1

0800bc64 <nan>:
 800bc64:	2000      	movs	r0, #0
 800bc66:	4901      	ldr	r1, [pc, #4]	; (800bc6c <nan+0x8>)
 800bc68:	4770      	bx	lr
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	7ff80000 	.word	0x7ff80000

0800bc70 <_sbrk_r>:
 800bc70:	2300      	movs	r3, #0
 800bc72:	b570      	push	{r4, r5, r6, lr}
 800bc74:	4d06      	ldr	r5, [pc, #24]	; (800bc90 <_sbrk_r+0x20>)
 800bc76:	0004      	movs	r4, r0
 800bc78:	0008      	movs	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f7 ffda 	bl	8003c34 <_sbrk>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d103      	bne.n	800bc8c <_sbrk_r+0x1c>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d000      	beq.n	800bc8c <_sbrk_r+0x1c>
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	bd70      	pop	{r4, r5, r6, pc}
 800bc8e:	46c0      	nop			; (mov r8, r8)
 800bc90:	200004c0 	.word	0x200004c0

0800bc94 <strncmp>:
 800bc94:	b530      	push	{r4, r5, lr}
 800bc96:	0005      	movs	r5, r0
 800bc98:	1e10      	subs	r0, r2, #0
 800bc9a:	d00b      	beq.n	800bcb4 <strncmp+0x20>
 800bc9c:	2400      	movs	r4, #0
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	5d2b      	ldrb	r3, [r5, r4]
 800bca2:	5d08      	ldrb	r0, [r1, r4]
 800bca4:	4283      	cmp	r3, r0
 800bca6:	d104      	bne.n	800bcb2 <strncmp+0x1e>
 800bca8:	4294      	cmp	r4, r2
 800bcaa:	d002      	beq.n	800bcb2 <strncmp+0x1e>
 800bcac:	3401      	adds	r4, #1
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1f6      	bne.n	800bca0 <strncmp+0xc>
 800bcb2:	1a18      	subs	r0, r3, r0
 800bcb4:	bd30      	pop	{r4, r5, pc}

0800bcb6 <__ascii_wctomb>:
 800bcb6:	0003      	movs	r3, r0
 800bcb8:	1e08      	subs	r0, r1, #0
 800bcba:	d005      	beq.n	800bcc8 <__ascii_wctomb+0x12>
 800bcbc:	2aff      	cmp	r2, #255	; 0xff
 800bcbe:	d904      	bls.n	800bcca <__ascii_wctomb+0x14>
 800bcc0:	228a      	movs	r2, #138	; 0x8a
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	4240      	negs	r0, r0
 800bcc8:	4770      	bx	lr
 800bcca:	2001      	movs	r0, #1
 800bccc:	700a      	strb	r2, [r1, #0]
 800bcce:	e7fb      	b.n	800bcc8 <__ascii_wctomb+0x12>

0800bcd0 <__assert_func>:
 800bcd0:	b530      	push	{r4, r5, lr}
 800bcd2:	0014      	movs	r4, r2
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <__assert_func+0x2c>)
 800bcd8:	0005      	movs	r5, r0
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	b085      	sub	sp, #20
 800bcde:	68d8      	ldr	r0, [r3, #12]
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <__assert_func+0x30>)
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	d101      	bne.n	800bcea <__assert_func+0x1a>
 800bce6:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <__assert_func+0x34>)
 800bce8:	001c      	movs	r4, r3
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	9100      	str	r1, [sp, #0]
 800bcee:	002b      	movs	r3, r5
 800bcf0:	4905      	ldr	r1, [pc, #20]	; (800bd08 <__assert_func+0x38>)
 800bcf2:	9402      	str	r4, [sp, #8]
 800bcf4:	f000 f80a 	bl	800bd0c <fiprintf>
 800bcf8:	f000 fa92 	bl	800c220 <abort>
 800bcfc:	2000000c 	.word	0x2000000c
 800bd00:	0800cde5 	.word	0x0800cde5
 800bd04:	0800ce20 	.word	0x0800ce20
 800bd08:	0800cdf2 	.word	0x0800cdf2

0800bd0c <fiprintf>:
 800bd0c:	b40e      	push	{r1, r2, r3}
 800bd0e:	b503      	push	{r0, r1, lr}
 800bd10:	0001      	movs	r1, r0
 800bd12:	ab03      	add	r3, sp, #12
 800bd14:	4804      	ldr	r0, [pc, #16]	; (800bd28 <fiprintf+0x1c>)
 800bd16:	cb04      	ldmia	r3!, {r2}
 800bd18:	6800      	ldr	r0, [r0, #0]
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	f000 f878 	bl	800be10 <_vfiprintf_r>
 800bd20:	b002      	add	sp, #8
 800bd22:	bc08      	pop	{r3}
 800bd24:	b003      	add	sp, #12
 800bd26:	4718      	bx	r3
 800bd28:	2000000c 	.word	0x2000000c

0800bd2c <memmove>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	4288      	cmp	r0, r1
 800bd30:	d902      	bls.n	800bd38 <memmove+0xc>
 800bd32:	188b      	adds	r3, r1, r2
 800bd34:	4298      	cmp	r0, r3
 800bd36:	d303      	bcc.n	800bd40 <memmove+0x14>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e007      	b.n	800bd4c <memmove+0x20>
 800bd3c:	5c8b      	ldrb	r3, [r1, r2]
 800bd3e:	5483      	strb	r3, [r0, r2]
 800bd40:	3a01      	subs	r2, #1
 800bd42:	d2fb      	bcs.n	800bd3c <memmove+0x10>
 800bd44:	bd10      	pop	{r4, pc}
 800bd46:	5ccc      	ldrb	r4, [r1, r3]
 800bd48:	54c4      	strb	r4, [r0, r3]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d1fa      	bne.n	800bd46 <memmove+0x1a>
 800bd50:	e7f8      	b.n	800bd44 <memmove+0x18>
	...

0800bd54 <__malloc_lock>:
 800bd54:	b510      	push	{r4, lr}
 800bd56:	4802      	ldr	r0, [pc, #8]	; (800bd60 <__malloc_lock+0xc>)
 800bd58:	f000 fc39 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800bd5c:	bd10      	pop	{r4, pc}
 800bd5e:	46c0      	nop			; (mov r8, r8)
 800bd60:	200004c8 	.word	0x200004c8

0800bd64 <__malloc_unlock>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	4802      	ldr	r0, [pc, #8]	; (800bd70 <__malloc_unlock+0xc>)
 800bd68:	f000 fc32 	bl	800c5d0 <__retarget_lock_release_recursive>
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	46c0      	nop			; (mov r8, r8)
 800bd70:	200004c8 	.word	0x200004c8

0800bd74 <_realloc_r>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	0007      	movs	r7, r0
 800bd78:	000d      	movs	r5, r1
 800bd7a:	0016      	movs	r6, r2
 800bd7c:	2900      	cmp	r1, #0
 800bd7e:	d105      	bne.n	800bd8c <_realloc_r+0x18>
 800bd80:	0011      	movs	r1, r2
 800bd82:	f7ff fdaf 	bl	800b8e4 <_malloc_r>
 800bd86:	0004      	movs	r4, r0
 800bd88:	0020      	movs	r0, r4
 800bd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd8c:	2a00      	cmp	r2, #0
 800bd8e:	d103      	bne.n	800bd98 <_realloc_r+0x24>
 800bd90:	f7ff fd5e 	bl	800b850 <_free_r>
 800bd94:	0034      	movs	r4, r6
 800bd96:	e7f7      	b.n	800bd88 <_realloc_r+0x14>
 800bd98:	f000 fc88 	bl	800c6ac <_malloc_usable_size_r>
 800bd9c:	002c      	movs	r4, r5
 800bd9e:	42b0      	cmp	r0, r6
 800bda0:	d2f2      	bcs.n	800bd88 <_realloc_r+0x14>
 800bda2:	0031      	movs	r1, r6
 800bda4:	0038      	movs	r0, r7
 800bda6:	f7ff fd9d 	bl	800b8e4 <_malloc_r>
 800bdaa:	1e04      	subs	r4, r0, #0
 800bdac:	d0ec      	beq.n	800bd88 <_realloc_r+0x14>
 800bdae:	0029      	movs	r1, r5
 800bdb0:	0032      	movs	r2, r6
 800bdb2:	f7ff f86c 	bl	800ae8e <memcpy>
 800bdb6:	0029      	movs	r1, r5
 800bdb8:	0038      	movs	r0, r7
 800bdba:	f7ff fd49 	bl	800b850 <_free_r>
 800bdbe:	e7e3      	b.n	800bd88 <_realloc_r+0x14>

0800bdc0 <__sfputc_r>:
 800bdc0:	6893      	ldr	r3, [r2, #8]
 800bdc2:	b510      	push	{r4, lr}
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	6093      	str	r3, [r2, #8]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	da04      	bge.n	800bdd6 <__sfputc_r+0x16>
 800bdcc:	6994      	ldr	r4, [r2, #24]
 800bdce:	42a3      	cmp	r3, r4
 800bdd0:	db07      	blt.n	800bde2 <__sfputc_r+0x22>
 800bdd2:	290a      	cmp	r1, #10
 800bdd4:	d005      	beq.n	800bde2 <__sfputc_r+0x22>
 800bdd6:	6813      	ldr	r3, [r2, #0]
 800bdd8:	1c58      	adds	r0, r3, #1
 800bdda:	6010      	str	r0, [r2, #0]
 800bddc:	7019      	strb	r1, [r3, #0]
 800bdde:	0008      	movs	r0, r1
 800bde0:	bd10      	pop	{r4, pc}
 800bde2:	f000 f94f 	bl	800c084 <__swbuf_r>
 800bde6:	0001      	movs	r1, r0
 800bde8:	e7f9      	b.n	800bdde <__sfputc_r+0x1e>

0800bdea <__sfputs_r>:
 800bdea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdec:	0006      	movs	r6, r0
 800bdee:	000f      	movs	r7, r1
 800bdf0:	0014      	movs	r4, r2
 800bdf2:	18d5      	adds	r5, r2, r3
 800bdf4:	42ac      	cmp	r4, r5
 800bdf6:	d101      	bne.n	800bdfc <__sfputs_r+0x12>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e007      	b.n	800be0c <__sfputs_r+0x22>
 800bdfc:	7821      	ldrb	r1, [r4, #0]
 800bdfe:	003a      	movs	r2, r7
 800be00:	0030      	movs	r0, r6
 800be02:	f7ff ffdd 	bl	800bdc0 <__sfputc_r>
 800be06:	3401      	adds	r4, #1
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d1f3      	bne.n	800bdf4 <__sfputs_r+0xa>
 800be0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be10 <_vfiprintf_r>:
 800be10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be12:	b0a1      	sub	sp, #132	; 0x84
 800be14:	0006      	movs	r6, r0
 800be16:	000c      	movs	r4, r1
 800be18:	001f      	movs	r7, r3
 800be1a:	9203      	str	r2, [sp, #12]
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d004      	beq.n	800be2a <_vfiprintf_r+0x1a>
 800be20:	6983      	ldr	r3, [r0, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d101      	bne.n	800be2a <_vfiprintf_r+0x1a>
 800be26:	f000 fb31 	bl	800c48c <__sinit>
 800be2a:	4b8e      	ldr	r3, [pc, #568]	; (800c064 <_vfiprintf_r+0x254>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d11c      	bne.n	800be6a <_vfiprintf_r+0x5a>
 800be30:	6874      	ldr	r4, [r6, #4]
 800be32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be34:	07db      	lsls	r3, r3, #31
 800be36:	d405      	bmi.n	800be44 <_vfiprintf_r+0x34>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	059b      	lsls	r3, r3, #22
 800be3c:	d402      	bmi.n	800be44 <_vfiprintf_r+0x34>
 800be3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be40:	f000 fbc5 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	071b      	lsls	r3, r3, #28
 800be48:	d502      	bpl.n	800be50 <_vfiprintf_r+0x40>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d11d      	bne.n	800be8c <_vfiprintf_r+0x7c>
 800be50:	0021      	movs	r1, r4
 800be52:	0030      	movs	r0, r6
 800be54:	f000 f96c 	bl	800c130 <__swsetup_r>
 800be58:	2800      	cmp	r0, #0
 800be5a:	d017      	beq.n	800be8c <_vfiprintf_r+0x7c>
 800be5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be5e:	07db      	lsls	r3, r3, #31
 800be60:	d50d      	bpl.n	800be7e <_vfiprintf_r+0x6e>
 800be62:	2001      	movs	r0, #1
 800be64:	4240      	negs	r0, r0
 800be66:	b021      	add	sp, #132	; 0x84
 800be68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be6a:	4b7f      	ldr	r3, [pc, #508]	; (800c068 <_vfiprintf_r+0x258>)
 800be6c:	429c      	cmp	r4, r3
 800be6e:	d101      	bne.n	800be74 <_vfiprintf_r+0x64>
 800be70:	68b4      	ldr	r4, [r6, #8]
 800be72:	e7de      	b.n	800be32 <_vfiprintf_r+0x22>
 800be74:	4b7d      	ldr	r3, [pc, #500]	; (800c06c <_vfiprintf_r+0x25c>)
 800be76:	429c      	cmp	r4, r3
 800be78:	d1db      	bne.n	800be32 <_vfiprintf_r+0x22>
 800be7a:	68f4      	ldr	r4, [r6, #12]
 800be7c:	e7d9      	b.n	800be32 <_vfiprintf_r+0x22>
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	059b      	lsls	r3, r3, #22
 800be82:	d4ee      	bmi.n	800be62 <_vfiprintf_r+0x52>
 800be84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be86:	f000 fba3 	bl	800c5d0 <__retarget_lock_release_recursive>
 800be8a:	e7ea      	b.n	800be62 <_vfiprintf_r+0x52>
 800be8c:	2300      	movs	r3, #0
 800be8e:	ad08      	add	r5, sp, #32
 800be90:	616b      	str	r3, [r5, #20]
 800be92:	3320      	adds	r3, #32
 800be94:	766b      	strb	r3, [r5, #25]
 800be96:	3310      	adds	r3, #16
 800be98:	76ab      	strb	r3, [r5, #26]
 800be9a:	9707      	str	r7, [sp, #28]
 800be9c:	9f03      	ldr	r7, [sp, #12]
 800be9e:	783b      	ldrb	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <_vfiprintf_r+0x98>
 800bea4:	2b25      	cmp	r3, #37	; 0x25
 800bea6:	d14e      	bne.n	800bf46 <_vfiprintf_r+0x136>
 800bea8:	9b03      	ldr	r3, [sp, #12]
 800beaa:	1afb      	subs	r3, r7, r3
 800beac:	9305      	str	r3, [sp, #20]
 800beae:	9b03      	ldr	r3, [sp, #12]
 800beb0:	429f      	cmp	r7, r3
 800beb2:	d00d      	beq.n	800bed0 <_vfiprintf_r+0xc0>
 800beb4:	9b05      	ldr	r3, [sp, #20]
 800beb6:	0021      	movs	r1, r4
 800beb8:	0030      	movs	r0, r6
 800beba:	9a03      	ldr	r2, [sp, #12]
 800bebc:	f7ff ff95 	bl	800bdea <__sfputs_r>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d100      	bne.n	800bec6 <_vfiprintf_r+0xb6>
 800bec4:	e0b5      	b.n	800c032 <_vfiprintf_r+0x222>
 800bec6:	696a      	ldr	r2, [r5, #20]
 800bec8:	9b05      	ldr	r3, [sp, #20]
 800beca:	4694      	mov	ip, r2
 800becc:	4463      	add	r3, ip
 800bece:	616b      	str	r3, [r5, #20]
 800bed0:	783b      	ldrb	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d100      	bne.n	800bed8 <_vfiprintf_r+0xc8>
 800bed6:	e0ac      	b.n	800c032 <_vfiprintf_r+0x222>
 800bed8:	2201      	movs	r2, #1
 800beda:	1c7b      	adds	r3, r7, #1
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	2300      	movs	r3, #0
 800bee0:	4252      	negs	r2, r2
 800bee2:	606a      	str	r2, [r5, #4]
 800bee4:	a904      	add	r1, sp, #16
 800bee6:	3254      	adds	r2, #84	; 0x54
 800bee8:	1852      	adds	r2, r2, r1
 800beea:	602b      	str	r3, [r5, #0]
 800beec:	60eb      	str	r3, [r5, #12]
 800beee:	60ab      	str	r3, [r5, #8]
 800bef0:	7013      	strb	r3, [r2, #0]
 800bef2:	65ab      	str	r3, [r5, #88]	; 0x58
 800bef4:	9b03      	ldr	r3, [sp, #12]
 800bef6:	2205      	movs	r2, #5
 800bef8:	7819      	ldrb	r1, [r3, #0]
 800befa:	485d      	ldr	r0, [pc, #372]	; (800c070 <_vfiprintf_r+0x260>)
 800befc:	f7fe ffbc 	bl	800ae78 <memchr>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1c5f      	adds	r7, r3, #1
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d120      	bne.n	800bf4a <_vfiprintf_r+0x13a>
 800bf08:	682a      	ldr	r2, [r5, #0]
 800bf0a:	06d3      	lsls	r3, r2, #27
 800bf0c:	d504      	bpl.n	800bf18 <_vfiprintf_r+0x108>
 800bf0e:	2353      	movs	r3, #83	; 0x53
 800bf10:	a904      	add	r1, sp, #16
 800bf12:	185b      	adds	r3, r3, r1
 800bf14:	2120      	movs	r1, #32
 800bf16:	7019      	strb	r1, [r3, #0]
 800bf18:	0713      	lsls	r3, r2, #28
 800bf1a:	d504      	bpl.n	800bf26 <_vfiprintf_r+0x116>
 800bf1c:	2353      	movs	r3, #83	; 0x53
 800bf1e:	a904      	add	r1, sp, #16
 800bf20:	185b      	adds	r3, r3, r1
 800bf22:	212b      	movs	r1, #43	; 0x2b
 800bf24:	7019      	strb	r1, [r3, #0]
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf2c:	d016      	beq.n	800bf5c <_vfiprintf_r+0x14c>
 800bf2e:	2100      	movs	r1, #0
 800bf30:	68eb      	ldr	r3, [r5, #12]
 800bf32:	9f03      	ldr	r7, [sp, #12]
 800bf34:	783a      	ldrb	r2, [r7, #0]
 800bf36:	1c78      	adds	r0, r7, #1
 800bf38:	3a30      	subs	r2, #48	; 0x30
 800bf3a:	4684      	mov	ip, r0
 800bf3c:	2a09      	cmp	r2, #9
 800bf3e:	d94f      	bls.n	800bfe0 <_vfiprintf_r+0x1d0>
 800bf40:	2900      	cmp	r1, #0
 800bf42:	d111      	bne.n	800bf68 <_vfiprintf_r+0x158>
 800bf44:	e017      	b.n	800bf76 <_vfiprintf_r+0x166>
 800bf46:	3701      	adds	r7, #1
 800bf48:	e7a9      	b.n	800be9e <_vfiprintf_r+0x8e>
 800bf4a:	4b49      	ldr	r3, [pc, #292]	; (800c070 <_vfiprintf_r+0x260>)
 800bf4c:	682a      	ldr	r2, [r5, #0]
 800bf4e:	1ac0      	subs	r0, r0, r3
 800bf50:	2301      	movs	r3, #1
 800bf52:	4083      	lsls	r3, r0
 800bf54:	4313      	orrs	r3, r2
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	9703      	str	r7, [sp, #12]
 800bf5a:	e7cb      	b.n	800bef4 <_vfiprintf_r+0xe4>
 800bf5c:	9b07      	ldr	r3, [sp, #28]
 800bf5e:	1d19      	adds	r1, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9107      	str	r1, [sp, #28]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	db01      	blt.n	800bf6c <_vfiprintf_r+0x15c>
 800bf68:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf6a:	e004      	b.n	800bf76 <_vfiprintf_r+0x166>
 800bf6c:	425b      	negs	r3, r3
 800bf6e:	60eb      	str	r3, [r5, #12]
 800bf70:	2302      	movs	r3, #2
 800bf72:	4313      	orrs	r3, r2
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	783b      	ldrb	r3, [r7, #0]
 800bf78:	2b2e      	cmp	r3, #46	; 0x2e
 800bf7a:	d10a      	bne.n	800bf92 <_vfiprintf_r+0x182>
 800bf7c:	787b      	ldrb	r3, [r7, #1]
 800bf7e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf80:	d137      	bne.n	800bff2 <_vfiprintf_r+0x1e2>
 800bf82:	9b07      	ldr	r3, [sp, #28]
 800bf84:	3702      	adds	r7, #2
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	9207      	str	r2, [sp, #28]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	db2d      	blt.n	800bfec <_vfiprintf_r+0x1dc>
 800bf90:	9309      	str	r3, [sp, #36]	; 0x24
 800bf92:	2203      	movs	r2, #3
 800bf94:	7839      	ldrb	r1, [r7, #0]
 800bf96:	4837      	ldr	r0, [pc, #220]	; (800c074 <_vfiprintf_r+0x264>)
 800bf98:	f7fe ff6e 	bl	800ae78 <memchr>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d007      	beq.n	800bfb0 <_vfiprintf_r+0x1a0>
 800bfa0:	4b34      	ldr	r3, [pc, #208]	; (800c074 <_vfiprintf_r+0x264>)
 800bfa2:	682a      	ldr	r2, [r5, #0]
 800bfa4:	1ac0      	subs	r0, r0, r3
 800bfa6:	2340      	movs	r3, #64	; 0x40
 800bfa8:	4083      	lsls	r3, r0
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	3701      	adds	r7, #1
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	7839      	ldrb	r1, [r7, #0]
 800bfb2:	1c7b      	adds	r3, r7, #1
 800bfb4:	2206      	movs	r2, #6
 800bfb6:	4830      	ldr	r0, [pc, #192]	; (800c078 <_vfiprintf_r+0x268>)
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	7629      	strb	r1, [r5, #24]
 800bfbc:	f7fe ff5c 	bl	800ae78 <memchr>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d045      	beq.n	800c050 <_vfiprintf_r+0x240>
 800bfc4:	4b2d      	ldr	r3, [pc, #180]	; (800c07c <_vfiprintf_r+0x26c>)
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d127      	bne.n	800c01a <_vfiprintf_r+0x20a>
 800bfca:	2207      	movs	r2, #7
 800bfcc:	9b07      	ldr	r3, [sp, #28]
 800bfce:	3307      	adds	r3, #7
 800bfd0:	4393      	bics	r3, r2
 800bfd2:	3308      	adds	r3, #8
 800bfd4:	9307      	str	r3, [sp, #28]
 800bfd6:	696b      	ldr	r3, [r5, #20]
 800bfd8:	9a04      	ldr	r2, [sp, #16]
 800bfda:	189b      	adds	r3, r3, r2
 800bfdc:	616b      	str	r3, [r5, #20]
 800bfde:	e75d      	b.n	800be9c <_vfiprintf_r+0x8c>
 800bfe0:	210a      	movs	r1, #10
 800bfe2:	434b      	muls	r3, r1
 800bfe4:	4667      	mov	r7, ip
 800bfe6:	189b      	adds	r3, r3, r2
 800bfe8:	3909      	subs	r1, #9
 800bfea:	e7a3      	b.n	800bf34 <_vfiprintf_r+0x124>
 800bfec:	2301      	movs	r3, #1
 800bfee:	425b      	negs	r3, r3
 800bff0:	e7ce      	b.n	800bf90 <_vfiprintf_r+0x180>
 800bff2:	2300      	movs	r3, #0
 800bff4:	001a      	movs	r2, r3
 800bff6:	3701      	adds	r7, #1
 800bff8:	606b      	str	r3, [r5, #4]
 800bffa:	7839      	ldrb	r1, [r7, #0]
 800bffc:	1c78      	adds	r0, r7, #1
 800bffe:	3930      	subs	r1, #48	; 0x30
 800c000:	4684      	mov	ip, r0
 800c002:	2909      	cmp	r1, #9
 800c004:	d903      	bls.n	800c00e <_vfiprintf_r+0x1fe>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0c3      	beq.n	800bf92 <_vfiprintf_r+0x182>
 800c00a:	9209      	str	r2, [sp, #36]	; 0x24
 800c00c:	e7c1      	b.n	800bf92 <_vfiprintf_r+0x182>
 800c00e:	230a      	movs	r3, #10
 800c010:	435a      	muls	r2, r3
 800c012:	4667      	mov	r7, ip
 800c014:	1852      	adds	r2, r2, r1
 800c016:	3b09      	subs	r3, #9
 800c018:	e7ef      	b.n	800bffa <_vfiprintf_r+0x1ea>
 800c01a:	ab07      	add	r3, sp, #28
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	0022      	movs	r2, r4
 800c020:	0029      	movs	r1, r5
 800c022:	0030      	movs	r0, r6
 800c024:	4b16      	ldr	r3, [pc, #88]	; (800c080 <_vfiprintf_r+0x270>)
 800c026:	f7fc f819 	bl	800805c <_printf_float>
 800c02a:	9004      	str	r0, [sp, #16]
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	3301      	adds	r3, #1
 800c030:	d1d1      	bne.n	800bfd6 <_vfiprintf_r+0x1c6>
 800c032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c034:	07db      	lsls	r3, r3, #31
 800c036:	d405      	bmi.n	800c044 <_vfiprintf_r+0x234>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	059b      	lsls	r3, r3, #22
 800c03c:	d402      	bmi.n	800c044 <_vfiprintf_r+0x234>
 800c03e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c040:	f000 fac6 	bl	800c5d0 <__retarget_lock_release_recursive>
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	065b      	lsls	r3, r3, #25
 800c048:	d500      	bpl.n	800c04c <_vfiprintf_r+0x23c>
 800c04a:	e70a      	b.n	800be62 <_vfiprintf_r+0x52>
 800c04c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c04e:	e70a      	b.n	800be66 <_vfiprintf_r+0x56>
 800c050:	ab07      	add	r3, sp, #28
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	0022      	movs	r2, r4
 800c056:	0029      	movs	r1, r5
 800c058:	0030      	movs	r0, r6
 800c05a:	4b09      	ldr	r3, [pc, #36]	; (800c080 <_vfiprintf_r+0x270>)
 800c05c:	f7fc fabc 	bl	80085d8 <_printf_i>
 800c060:	e7e3      	b.n	800c02a <_vfiprintf_r+0x21a>
 800c062:	46c0      	nop			; (mov r8, r8)
 800c064:	0800ce44 	.word	0x0800ce44
 800c068:	0800ce64 	.word	0x0800ce64
 800c06c:	0800ce24 	.word	0x0800ce24
 800c070:	0800cdd4 	.word	0x0800cdd4
 800c074:	0800cdda 	.word	0x0800cdda
 800c078:	0800cdde 	.word	0x0800cdde
 800c07c:	0800805d 	.word	0x0800805d
 800c080:	0800bdeb 	.word	0x0800bdeb

0800c084 <__swbuf_r>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	0005      	movs	r5, r0
 800c088:	000e      	movs	r6, r1
 800c08a:	0014      	movs	r4, r2
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d004      	beq.n	800c09a <__swbuf_r+0x16>
 800c090:	6983      	ldr	r3, [r0, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <__swbuf_r+0x16>
 800c096:	f000 f9f9 	bl	800c48c <__sinit>
 800c09a:	4b22      	ldr	r3, [pc, #136]	; (800c124 <__swbuf_r+0xa0>)
 800c09c:	429c      	cmp	r4, r3
 800c09e:	d12e      	bne.n	800c0fe <__swbuf_r+0x7a>
 800c0a0:	686c      	ldr	r4, [r5, #4]
 800c0a2:	69a3      	ldr	r3, [r4, #24]
 800c0a4:	60a3      	str	r3, [r4, #8]
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	071b      	lsls	r3, r3, #28
 800c0aa:	d532      	bpl.n	800c112 <__swbuf_r+0x8e>
 800c0ac:	6923      	ldr	r3, [r4, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d02f      	beq.n	800c112 <__swbuf_r+0x8e>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	6922      	ldr	r2, [r4, #16]
 800c0b6:	b2f7      	uxtb	r7, r6
 800c0b8:	1a98      	subs	r0, r3, r2
 800c0ba:	6963      	ldr	r3, [r4, #20]
 800c0bc:	b2f6      	uxtb	r6, r6
 800c0be:	4283      	cmp	r3, r0
 800c0c0:	dc05      	bgt.n	800c0ce <__swbuf_r+0x4a>
 800c0c2:	0021      	movs	r1, r4
 800c0c4:	0028      	movs	r0, r5
 800c0c6:	f000 f93f 	bl	800c348 <_fflush_r>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d127      	bne.n	800c11e <__swbuf_r+0x9a>
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	60a3      	str	r3, [r4, #8]
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	6022      	str	r2, [r4, #0]
 800c0dc:	701f      	strb	r7, [r3, #0]
 800c0de:	6963      	ldr	r3, [r4, #20]
 800c0e0:	4283      	cmp	r3, r0
 800c0e2:	d004      	beq.n	800c0ee <__swbuf_r+0x6a>
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	07db      	lsls	r3, r3, #31
 800c0e8:	d507      	bpl.n	800c0fa <__swbuf_r+0x76>
 800c0ea:	2e0a      	cmp	r6, #10
 800c0ec:	d105      	bne.n	800c0fa <__swbuf_r+0x76>
 800c0ee:	0021      	movs	r1, r4
 800c0f0:	0028      	movs	r0, r5
 800c0f2:	f000 f929 	bl	800c348 <_fflush_r>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d111      	bne.n	800c11e <__swbuf_r+0x9a>
 800c0fa:	0030      	movs	r0, r6
 800c0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0fe:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <__swbuf_r+0xa4>)
 800c100:	429c      	cmp	r4, r3
 800c102:	d101      	bne.n	800c108 <__swbuf_r+0x84>
 800c104:	68ac      	ldr	r4, [r5, #8]
 800c106:	e7cc      	b.n	800c0a2 <__swbuf_r+0x1e>
 800c108:	4b08      	ldr	r3, [pc, #32]	; (800c12c <__swbuf_r+0xa8>)
 800c10a:	429c      	cmp	r4, r3
 800c10c:	d1c9      	bne.n	800c0a2 <__swbuf_r+0x1e>
 800c10e:	68ec      	ldr	r4, [r5, #12]
 800c110:	e7c7      	b.n	800c0a2 <__swbuf_r+0x1e>
 800c112:	0021      	movs	r1, r4
 800c114:	0028      	movs	r0, r5
 800c116:	f000 f80b 	bl	800c130 <__swsetup_r>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d0c9      	beq.n	800c0b2 <__swbuf_r+0x2e>
 800c11e:	2601      	movs	r6, #1
 800c120:	4276      	negs	r6, r6
 800c122:	e7ea      	b.n	800c0fa <__swbuf_r+0x76>
 800c124:	0800ce44 	.word	0x0800ce44
 800c128:	0800ce64 	.word	0x0800ce64
 800c12c:	0800ce24 	.word	0x0800ce24

0800c130 <__swsetup_r>:
 800c130:	4b37      	ldr	r3, [pc, #220]	; (800c210 <__swsetup_r+0xe0>)
 800c132:	b570      	push	{r4, r5, r6, lr}
 800c134:	681d      	ldr	r5, [r3, #0]
 800c136:	0006      	movs	r6, r0
 800c138:	000c      	movs	r4, r1
 800c13a:	2d00      	cmp	r5, #0
 800c13c:	d005      	beq.n	800c14a <__swsetup_r+0x1a>
 800c13e:	69ab      	ldr	r3, [r5, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d102      	bne.n	800c14a <__swsetup_r+0x1a>
 800c144:	0028      	movs	r0, r5
 800c146:	f000 f9a1 	bl	800c48c <__sinit>
 800c14a:	4b32      	ldr	r3, [pc, #200]	; (800c214 <__swsetup_r+0xe4>)
 800c14c:	429c      	cmp	r4, r3
 800c14e:	d10f      	bne.n	800c170 <__swsetup_r+0x40>
 800c150:	686c      	ldr	r4, [r5, #4]
 800c152:	230c      	movs	r3, #12
 800c154:	5ee2      	ldrsh	r2, [r4, r3]
 800c156:	b293      	uxth	r3, r2
 800c158:	0711      	lsls	r1, r2, #28
 800c15a:	d42d      	bmi.n	800c1b8 <__swsetup_r+0x88>
 800c15c:	06d9      	lsls	r1, r3, #27
 800c15e:	d411      	bmi.n	800c184 <__swsetup_r+0x54>
 800c160:	2309      	movs	r3, #9
 800c162:	2001      	movs	r0, #1
 800c164:	6033      	str	r3, [r6, #0]
 800c166:	3337      	adds	r3, #55	; 0x37
 800c168:	4313      	orrs	r3, r2
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	4240      	negs	r0, r0
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	4b29      	ldr	r3, [pc, #164]	; (800c218 <__swsetup_r+0xe8>)
 800c172:	429c      	cmp	r4, r3
 800c174:	d101      	bne.n	800c17a <__swsetup_r+0x4a>
 800c176:	68ac      	ldr	r4, [r5, #8]
 800c178:	e7eb      	b.n	800c152 <__swsetup_r+0x22>
 800c17a:	4b28      	ldr	r3, [pc, #160]	; (800c21c <__swsetup_r+0xec>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d1e8      	bne.n	800c152 <__swsetup_r+0x22>
 800c180:	68ec      	ldr	r4, [r5, #12]
 800c182:	e7e6      	b.n	800c152 <__swsetup_r+0x22>
 800c184:	075b      	lsls	r3, r3, #29
 800c186:	d513      	bpl.n	800c1b0 <__swsetup_r+0x80>
 800c188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c18a:	2900      	cmp	r1, #0
 800c18c:	d008      	beq.n	800c1a0 <__swsetup_r+0x70>
 800c18e:	0023      	movs	r3, r4
 800c190:	3344      	adds	r3, #68	; 0x44
 800c192:	4299      	cmp	r1, r3
 800c194:	d002      	beq.n	800c19c <__swsetup_r+0x6c>
 800c196:	0030      	movs	r0, r6
 800c198:	f7ff fb5a 	bl	800b850 <_free_r>
 800c19c:	2300      	movs	r3, #0
 800c19e:	6363      	str	r3, [r4, #52]	; 0x34
 800c1a0:	2224      	movs	r2, #36	; 0x24
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	4393      	bics	r3, r2
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	6063      	str	r3, [r4, #4]
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	89a2      	ldrh	r2, [r4, #12]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	81a3      	strh	r3, [r4, #12]
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10b      	bne.n	800c1d6 <__swsetup_r+0xa6>
 800c1be:	21a0      	movs	r1, #160	; 0xa0
 800c1c0:	2280      	movs	r2, #128	; 0x80
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	0089      	lsls	r1, r1, #2
 800c1c6:	0092      	lsls	r2, r2, #2
 800c1c8:	400b      	ands	r3, r1
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d003      	beq.n	800c1d6 <__swsetup_r+0xa6>
 800c1ce:	0021      	movs	r1, r4
 800c1d0:	0030      	movs	r0, r6
 800c1d2:	f000 fa27 	bl	800c624 <__smakebuf_r>
 800c1d6:	220c      	movs	r2, #12
 800c1d8:	5ea3      	ldrsh	r3, [r4, r2]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	001a      	movs	r2, r3
 800c1de:	b299      	uxth	r1, r3
 800c1e0:	4002      	ands	r2, r0
 800c1e2:	4203      	tst	r3, r0
 800c1e4:	d00f      	beq.n	800c206 <__swsetup_r+0xd6>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	60a2      	str	r2, [r4, #8]
 800c1ea:	6962      	ldr	r2, [r4, #20]
 800c1ec:	4252      	negs	r2, r2
 800c1ee:	61a2      	str	r2, [r4, #24]
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	6922      	ldr	r2, [r4, #16]
 800c1f4:	4282      	cmp	r2, r0
 800c1f6:	d1ba      	bne.n	800c16e <__swsetup_r+0x3e>
 800c1f8:	060a      	lsls	r2, r1, #24
 800c1fa:	d5b8      	bpl.n	800c16e <__swsetup_r+0x3e>
 800c1fc:	2240      	movs	r2, #64	; 0x40
 800c1fe:	4313      	orrs	r3, r2
 800c200:	81a3      	strh	r3, [r4, #12]
 800c202:	3801      	subs	r0, #1
 800c204:	e7b3      	b.n	800c16e <__swsetup_r+0x3e>
 800c206:	0788      	lsls	r0, r1, #30
 800c208:	d400      	bmi.n	800c20c <__swsetup_r+0xdc>
 800c20a:	6962      	ldr	r2, [r4, #20]
 800c20c:	60a2      	str	r2, [r4, #8]
 800c20e:	e7ef      	b.n	800c1f0 <__swsetup_r+0xc0>
 800c210:	2000000c 	.word	0x2000000c
 800c214:	0800ce44 	.word	0x0800ce44
 800c218:	0800ce64 	.word	0x0800ce64
 800c21c:	0800ce24 	.word	0x0800ce24

0800c220 <abort>:
 800c220:	2006      	movs	r0, #6
 800c222:	b510      	push	{r4, lr}
 800c224:	f000 fa74 	bl	800c710 <raise>
 800c228:	2001      	movs	r0, #1
 800c22a:	f7f7 fc91 	bl	8003b50 <_exit>
	...

0800c230 <__sflush_r>:
 800c230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c232:	898b      	ldrh	r3, [r1, #12]
 800c234:	0005      	movs	r5, r0
 800c236:	000c      	movs	r4, r1
 800c238:	071a      	lsls	r2, r3, #28
 800c23a:	d45f      	bmi.n	800c2fc <__sflush_r+0xcc>
 800c23c:	684a      	ldr	r2, [r1, #4]
 800c23e:	2a00      	cmp	r2, #0
 800c240:	dc04      	bgt.n	800c24c <__sflush_r+0x1c>
 800c242:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c244:	2a00      	cmp	r2, #0
 800c246:	dc01      	bgt.n	800c24c <__sflush_r+0x1c>
 800c248:	2000      	movs	r0, #0
 800c24a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c24c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c24e:	2f00      	cmp	r7, #0
 800c250:	d0fa      	beq.n	800c248 <__sflush_r+0x18>
 800c252:	2200      	movs	r2, #0
 800c254:	2180      	movs	r1, #128	; 0x80
 800c256:	682e      	ldr	r6, [r5, #0]
 800c258:	602a      	str	r2, [r5, #0]
 800c25a:	001a      	movs	r2, r3
 800c25c:	0149      	lsls	r1, r1, #5
 800c25e:	400a      	ands	r2, r1
 800c260:	420b      	tst	r3, r1
 800c262:	d034      	beq.n	800c2ce <__sflush_r+0x9e>
 800c264:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	075b      	lsls	r3, r3, #29
 800c26a:	d506      	bpl.n	800c27a <__sflush_r+0x4a>
 800c26c:	6863      	ldr	r3, [r4, #4]
 800c26e:	1ac0      	subs	r0, r0, r3
 800c270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <__sflush_r+0x4a>
 800c276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c278:	1ac0      	subs	r0, r0, r3
 800c27a:	0002      	movs	r2, r0
 800c27c:	6a21      	ldr	r1, [r4, #32]
 800c27e:	2300      	movs	r3, #0
 800c280:	0028      	movs	r0, r5
 800c282:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c284:	47b8      	blx	r7
 800c286:	89a1      	ldrh	r1, [r4, #12]
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d106      	bne.n	800c29a <__sflush_r+0x6a>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	2b1d      	cmp	r3, #29
 800c290:	d831      	bhi.n	800c2f6 <__sflush_r+0xc6>
 800c292:	4a2c      	ldr	r2, [pc, #176]	; (800c344 <__sflush_r+0x114>)
 800c294:	40da      	lsrs	r2, r3
 800c296:	07d3      	lsls	r3, r2, #31
 800c298:	d52d      	bpl.n	800c2f6 <__sflush_r+0xc6>
 800c29a:	2300      	movs	r3, #0
 800c29c:	6063      	str	r3, [r4, #4]
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	04cb      	lsls	r3, r1, #19
 800c2a4:	d505      	bpl.n	800c2b2 <__sflush_r+0x82>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	d102      	bne.n	800c2b0 <__sflush_r+0x80>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d100      	bne.n	800c2b2 <__sflush_r+0x82>
 800c2b0:	6560      	str	r0, [r4, #84]	; 0x54
 800c2b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2b4:	602e      	str	r6, [r5, #0]
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d0c6      	beq.n	800c248 <__sflush_r+0x18>
 800c2ba:	0023      	movs	r3, r4
 800c2bc:	3344      	adds	r3, #68	; 0x44
 800c2be:	4299      	cmp	r1, r3
 800c2c0:	d002      	beq.n	800c2c8 <__sflush_r+0x98>
 800c2c2:	0028      	movs	r0, r5
 800c2c4:	f7ff fac4 	bl	800b850 <_free_r>
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	6360      	str	r0, [r4, #52]	; 0x34
 800c2cc:	e7bd      	b.n	800c24a <__sflush_r+0x1a>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	0028      	movs	r0, r5
 800c2d2:	6a21      	ldr	r1, [r4, #32]
 800c2d4:	47b8      	blx	r7
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d1c5      	bne.n	800c266 <__sflush_r+0x36>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0c2      	beq.n	800c266 <__sflush_r+0x36>
 800c2e0:	2b1d      	cmp	r3, #29
 800c2e2:	d001      	beq.n	800c2e8 <__sflush_r+0xb8>
 800c2e4:	2b16      	cmp	r3, #22
 800c2e6:	d101      	bne.n	800c2ec <__sflush_r+0xbc>
 800c2e8:	602e      	str	r6, [r5, #0]
 800c2ea:	e7ad      	b.n	800c248 <__sflush_r+0x18>
 800c2ec:	2340      	movs	r3, #64	; 0x40
 800c2ee:	89a2      	ldrh	r2, [r4, #12]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	81a3      	strh	r3, [r4, #12]
 800c2f4:	e7a9      	b.n	800c24a <__sflush_r+0x1a>
 800c2f6:	2340      	movs	r3, #64	; 0x40
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	e7fa      	b.n	800c2f2 <__sflush_r+0xc2>
 800c2fc:	690f      	ldr	r7, [r1, #16]
 800c2fe:	2f00      	cmp	r7, #0
 800c300:	d0a2      	beq.n	800c248 <__sflush_r+0x18>
 800c302:	680a      	ldr	r2, [r1, #0]
 800c304:	600f      	str	r7, [r1, #0]
 800c306:	1bd2      	subs	r2, r2, r7
 800c308:	9201      	str	r2, [sp, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	079b      	lsls	r3, r3, #30
 800c30e:	d100      	bne.n	800c312 <__sflush_r+0xe2>
 800c310:	694a      	ldr	r2, [r1, #20]
 800c312:	60a2      	str	r2, [r4, #8]
 800c314:	9b01      	ldr	r3, [sp, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	dc00      	bgt.n	800c31c <__sflush_r+0xec>
 800c31a:	e795      	b.n	800c248 <__sflush_r+0x18>
 800c31c:	003a      	movs	r2, r7
 800c31e:	0028      	movs	r0, r5
 800c320:	9b01      	ldr	r3, [sp, #4]
 800c322:	6a21      	ldr	r1, [r4, #32]
 800c324:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c326:	47b0      	blx	r6
 800c328:	2800      	cmp	r0, #0
 800c32a:	dc06      	bgt.n	800c33a <__sflush_r+0x10a>
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	2001      	movs	r0, #1
 800c330:	89a2      	ldrh	r2, [r4, #12]
 800c332:	4240      	negs	r0, r0
 800c334:	4313      	orrs	r3, r2
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	e787      	b.n	800c24a <__sflush_r+0x1a>
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	183f      	adds	r7, r7, r0
 800c33e:	1a1b      	subs	r3, r3, r0
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	e7e7      	b.n	800c314 <__sflush_r+0xe4>
 800c344:	20400001 	.word	0x20400001

0800c348 <_fflush_r>:
 800c348:	690b      	ldr	r3, [r1, #16]
 800c34a:	b570      	push	{r4, r5, r6, lr}
 800c34c:	0005      	movs	r5, r0
 800c34e:	000c      	movs	r4, r1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <_fflush_r+0x12>
 800c354:	2500      	movs	r5, #0
 800c356:	0028      	movs	r0, r5
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d004      	beq.n	800c368 <_fflush_r+0x20>
 800c35e:	6983      	ldr	r3, [r0, #24]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <_fflush_r+0x20>
 800c364:	f000 f892 	bl	800c48c <__sinit>
 800c368:	4b14      	ldr	r3, [pc, #80]	; (800c3bc <_fflush_r+0x74>)
 800c36a:	429c      	cmp	r4, r3
 800c36c:	d11b      	bne.n	800c3a6 <_fflush_r+0x5e>
 800c36e:	686c      	ldr	r4, [r5, #4]
 800c370:	220c      	movs	r2, #12
 800c372:	5ea3      	ldrsh	r3, [r4, r2]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0ed      	beq.n	800c354 <_fflush_r+0xc>
 800c378:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c37a:	07d2      	lsls	r2, r2, #31
 800c37c:	d404      	bmi.n	800c388 <_fflush_r+0x40>
 800c37e:	059b      	lsls	r3, r3, #22
 800c380:	d402      	bmi.n	800c388 <_fflush_r+0x40>
 800c382:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c384:	f000 f923 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800c388:	0028      	movs	r0, r5
 800c38a:	0021      	movs	r1, r4
 800c38c:	f7ff ff50 	bl	800c230 <__sflush_r>
 800c390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c392:	0005      	movs	r5, r0
 800c394:	07db      	lsls	r3, r3, #31
 800c396:	d4de      	bmi.n	800c356 <_fflush_r+0xe>
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	059b      	lsls	r3, r3, #22
 800c39c:	d4db      	bmi.n	800c356 <_fflush_r+0xe>
 800c39e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3a0:	f000 f916 	bl	800c5d0 <__retarget_lock_release_recursive>
 800c3a4:	e7d7      	b.n	800c356 <_fflush_r+0xe>
 800c3a6:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <_fflush_r+0x78>)
 800c3a8:	429c      	cmp	r4, r3
 800c3aa:	d101      	bne.n	800c3b0 <_fflush_r+0x68>
 800c3ac:	68ac      	ldr	r4, [r5, #8]
 800c3ae:	e7df      	b.n	800c370 <_fflush_r+0x28>
 800c3b0:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <_fflush_r+0x7c>)
 800c3b2:	429c      	cmp	r4, r3
 800c3b4:	d1dc      	bne.n	800c370 <_fflush_r+0x28>
 800c3b6:	68ec      	ldr	r4, [r5, #12]
 800c3b8:	e7da      	b.n	800c370 <_fflush_r+0x28>
 800c3ba:	46c0      	nop			; (mov r8, r8)
 800c3bc:	0800ce44 	.word	0x0800ce44
 800c3c0:	0800ce64 	.word	0x0800ce64
 800c3c4:	0800ce24 	.word	0x0800ce24

0800c3c8 <std>:
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	0004      	movs	r4, r0
 800c3ce:	6003      	str	r3, [r0, #0]
 800c3d0:	6043      	str	r3, [r0, #4]
 800c3d2:	6083      	str	r3, [r0, #8]
 800c3d4:	8181      	strh	r1, [r0, #12]
 800c3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c3d8:	0019      	movs	r1, r3
 800c3da:	81c2      	strh	r2, [r0, #14]
 800c3dc:	6103      	str	r3, [r0, #16]
 800c3de:	6143      	str	r3, [r0, #20]
 800c3e0:	6183      	str	r3, [r0, #24]
 800c3e2:	2208      	movs	r2, #8
 800c3e4:	305c      	adds	r0, #92	; 0x5c
 800c3e6:	f7fb fd87 	bl	8007ef8 <memset>
 800c3ea:	4b05      	ldr	r3, [pc, #20]	; (800c400 <std+0x38>)
 800c3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c3ee:	4b05      	ldr	r3, [pc, #20]	; (800c404 <std+0x3c>)
 800c3f0:	6224      	str	r4, [r4, #32]
 800c3f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3f4:	4b04      	ldr	r3, [pc, #16]	; (800c408 <std+0x40>)
 800c3f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3f8:	4b04      	ldr	r3, [pc, #16]	; (800c40c <std+0x44>)
 800c3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c3fc:	bd10      	pop	{r4, pc}
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	0800c751 	.word	0x0800c751
 800c404:	0800c779 	.word	0x0800c779
 800c408:	0800c7b1 	.word	0x0800c7b1
 800c40c:	0800c7dd 	.word	0x0800c7dd

0800c410 <_cleanup_r>:
 800c410:	b510      	push	{r4, lr}
 800c412:	4902      	ldr	r1, [pc, #8]	; (800c41c <_cleanup_r+0xc>)
 800c414:	f000 f8ba 	bl	800c58c <_fwalk_reent>
 800c418:	bd10      	pop	{r4, pc}
 800c41a:	46c0      	nop			; (mov r8, r8)
 800c41c:	0800c349 	.word	0x0800c349

0800c420 <__sfmoreglue>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	2568      	movs	r5, #104	; 0x68
 800c424:	1e4a      	subs	r2, r1, #1
 800c426:	4355      	muls	r5, r2
 800c428:	000e      	movs	r6, r1
 800c42a:	0029      	movs	r1, r5
 800c42c:	3174      	adds	r1, #116	; 0x74
 800c42e:	f7ff fa59 	bl	800b8e4 <_malloc_r>
 800c432:	1e04      	subs	r4, r0, #0
 800c434:	d008      	beq.n	800c448 <__sfmoreglue+0x28>
 800c436:	2100      	movs	r1, #0
 800c438:	002a      	movs	r2, r5
 800c43a:	6001      	str	r1, [r0, #0]
 800c43c:	6046      	str	r6, [r0, #4]
 800c43e:	300c      	adds	r0, #12
 800c440:	60a0      	str	r0, [r4, #8]
 800c442:	3268      	adds	r2, #104	; 0x68
 800c444:	f7fb fd58 	bl	8007ef8 <memset>
 800c448:	0020      	movs	r0, r4
 800c44a:	bd70      	pop	{r4, r5, r6, pc}

0800c44c <__sfp_lock_acquire>:
 800c44c:	b510      	push	{r4, lr}
 800c44e:	4802      	ldr	r0, [pc, #8]	; (800c458 <__sfp_lock_acquire+0xc>)
 800c450:	f000 f8bd 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800c454:	bd10      	pop	{r4, pc}
 800c456:	46c0      	nop			; (mov r8, r8)
 800c458:	200004cc 	.word	0x200004cc

0800c45c <__sfp_lock_release>:
 800c45c:	b510      	push	{r4, lr}
 800c45e:	4802      	ldr	r0, [pc, #8]	; (800c468 <__sfp_lock_release+0xc>)
 800c460:	f000 f8b6 	bl	800c5d0 <__retarget_lock_release_recursive>
 800c464:	bd10      	pop	{r4, pc}
 800c466:	46c0      	nop			; (mov r8, r8)
 800c468:	200004cc 	.word	0x200004cc

0800c46c <__sinit_lock_acquire>:
 800c46c:	b510      	push	{r4, lr}
 800c46e:	4802      	ldr	r0, [pc, #8]	; (800c478 <__sinit_lock_acquire+0xc>)
 800c470:	f000 f8ad 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800c474:	bd10      	pop	{r4, pc}
 800c476:	46c0      	nop			; (mov r8, r8)
 800c478:	200004c7 	.word	0x200004c7

0800c47c <__sinit_lock_release>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	4802      	ldr	r0, [pc, #8]	; (800c488 <__sinit_lock_release+0xc>)
 800c480:	f000 f8a6 	bl	800c5d0 <__retarget_lock_release_recursive>
 800c484:	bd10      	pop	{r4, pc}
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	200004c7 	.word	0x200004c7

0800c48c <__sinit>:
 800c48c:	b513      	push	{r0, r1, r4, lr}
 800c48e:	0004      	movs	r4, r0
 800c490:	f7ff ffec 	bl	800c46c <__sinit_lock_acquire>
 800c494:	69a3      	ldr	r3, [r4, #24]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <__sinit+0x14>
 800c49a:	f7ff ffef 	bl	800c47c <__sinit_lock_release>
 800c49e:	bd13      	pop	{r0, r1, r4, pc}
 800c4a0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c4a4:	6523      	str	r3, [r4, #80]	; 0x50
 800c4a6:	4b13      	ldr	r3, [pc, #76]	; (800c4f4 <__sinit+0x68>)
 800c4a8:	4a13      	ldr	r2, [pc, #76]	; (800c4f8 <__sinit+0x6c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d101      	bne.n	800c4b8 <__sinit+0x2c>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	61a3      	str	r3, [r4, #24]
 800c4b8:	0020      	movs	r0, r4
 800c4ba:	f000 f81f 	bl	800c4fc <__sfp>
 800c4be:	6060      	str	r0, [r4, #4]
 800c4c0:	0020      	movs	r0, r4
 800c4c2:	f000 f81b 	bl	800c4fc <__sfp>
 800c4c6:	60a0      	str	r0, [r4, #8]
 800c4c8:	0020      	movs	r0, r4
 800c4ca:	f000 f817 	bl	800c4fc <__sfp>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	2104      	movs	r1, #4
 800c4d2:	60e0      	str	r0, [r4, #12]
 800c4d4:	6860      	ldr	r0, [r4, #4]
 800c4d6:	f7ff ff77 	bl	800c3c8 <std>
 800c4da:	2201      	movs	r2, #1
 800c4dc:	2109      	movs	r1, #9
 800c4de:	68a0      	ldr	r0, [r4, #8]
 800c4e0:	f7ff ff72 	bl	800c3c8 <std>
 800c4e4:	2202      	movs	r2, #2
 800c4e6:	2112      	movs	r1, #18
 800c4e8:	68e0      	ldr	r0, [r4, #12]
 800c4ea:	f7ff ff6d 	bl	800c3c8 <std>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	61a3      	str	r3, [r4, #24]
 800c4f2:	e7d2      	b.n	800c49a <__sinit+0xe>
 800c4f4:	0800c9d0 	.word	0x0800c9d0
 800c4f8:	0800c411 	.word	0x0800c411

0800c4fc <__sfp>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	0007      	movs	r7, r0
 800c500:	f7ff ffa4 	bl	800c44c <__sfp_lock_acquire>
 800c504:	4b1f      	ldr	r3, [pc, #124]	; (800c584 <__sfp+0x88>)
 800c506:	681e      	ldr	r6, [r3, #0]
 800c508:	69b3      	ldr	r3, [r6, #24]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <__sfp+0x18>
 800c50e:	0030      	movs	r0, r6
 800c510:	f7ff ffbc 	bl	800c48c <__sinit>
 800c514:	3648      	adds	r6, #72	; 0x48
 800c516:	68b4      	ldr	r4, [r6, #8]
 800c518:	6873      	ldr	r3, [r6, #4]
 800c51a:	3b01      	subs	r3, #1
 800c51c:	d504      	bpl.n	800c528 <__sfp+0x2c>
 800c51e:	6833      	ldr	r3, [r6, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d022      	beq.n	800c56a <__sfp+0x6e>
 800c524:	6836      	ldr	r6, [r6, #0]
 800c526:	e7f6      	b.n	800c516 <__sfp+0x1a>
 800c528:	220c      	movs	r2, #12
 800c52a:	5ea5      	ldrsh	r5, [r4, r2]
 800c52c:	2d00      	cmp	r5, #0
 800c52e:	d11a      	bne.n	800c566 <__sfp+0x6a>
 800c530:	0020      	movs	r0, r4
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <__sfp+0x8c>)
 800c534:	3058      	adds	r0, #88	; 0x58
 800c536:	60e3      	str	r3, [r4, #12]
 800c538:	6665      	str	r5, [r4, #100]	; 0x64
 800c53a:	f000 f847 	bl	800c5cc <__retarget_lock_init_recursive>
 800c53e:	f7ff ff8d 	bl	800c45c <__sfp_lock_release>
 800c542:	0020      	movs	r0, r4
 800c544:	2208      	movs	r2, #8
 800c546:	0029      	movs	r1, r5
 800c548:	6025      	str	r5, [r4, #0]
 800c54a:	60a5      	str	r5, [r4, #8]
 800c54c:	6065      	str	r5, [r4, #4]
 800c54e:	6125      	str	r5, [r4, #16]
 800c550:	6165      	str	r5, [r4, #20]
 800c552:	61a5      	str	r5, [r4, #24]
 800c554:	305c      	adds	r0, #92	; 0x5c
 800c556:	f7fb fccf 	bl	8007ef8 <memset>
 800c55a:	6365      	str	r5, [r4, #52]	; 0x34
 800c55c:	63a5      	str	r5, [r4, #56]	; 0x38
 800c55e:	64a5      	str	r5, [r4, #72]	; 0x48
 800c560:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c562:	0020      	movs	r0, r4
 800c564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c566:	3468      	adds	r4, #104	; 0x68
 800c568:	e7d7      	b.n	800c51a <__sfp+0x1e>
 800c56a:	2104      	movs	r1, #4
 800c56c:	0038      	movs	r0, r7
 800c56e:	f7ff ff57 	bl	800c420 <__sfmoreglue>
 800c572:	1e04      	subs	r4, r0, #0
 800c574:	6030      	str	r0, [r6, #0]
 800c576:	d1d5      	bne.n	800c524 <__sfp+0x28>
 800c578:	f7ff ff70 	bl	800c45c <__sfp_lock_release>
 800c57c:	230c      	movs	r3, #12
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	e7ef      	b.n	800c562 <__sfp+0x66>
 800c582:	46c0      	nop			; (mov r8, r8)
 800c584:	0800c9d0 	.word	0x0800c9d0
 800c588:	ffff0001 	.word	0xffff0001

0800c58c <_fwalk_reent>:
 800c58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c58e:	0004      	movs	r4, r0
 800c590:	0006      	movs	r6, r0
 800c592:	2700      	movs	r7, #0
 800c594:	9101      	str	r1, [sp, #4]
 800c596:	3448      	adds	r4, #72	; 0x48
 800c598:	6863      	ldr	r3, [r4, #4]
 800c59a:	68a5      	ldr	r5, [r4, #8]
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	9b00      	ldr	r3, [sp, #0]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	d504      	bpl.n	800c5b0 <_fwalk_reent+0x24>
 800c5a6:	6824      	ldr	r4, [r4, #0]
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	d1f5      	bne.n	800c598 <_fwalk_reent+0xc>
 800c5ac:	0038      	movs	r0, r7
 800c5ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5b0:	89ab      	ldrh	r3, [r5, #12]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d908      	bls.n	800c5c8 <_fwalk_reent+0x3c>
 800c5b6:	220e      	movs	r2, #14
 800c5b8:	5eab      	ldrsh	r3, [r5, r2]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	d004      	beq.n	800c5c8 <_fwalk_reent+0x3c>
 800c5be:	0029      	movs	r1, r5
 800c5c0:	0030      	movs	r0, r6
 800c5c2:	9b01      	ldr	r3, [sp, #4]
 800c5c4:	4798      	blx	r3
 800c5c6:	4307      	orrs	r7, r0
 800c5c8:	3568      	adds	r5, #104	; 0x68
 800c5ca:	e7e8      	b.n	800c59e <_fwalk_reent+0x12>

0800c5cc <__retarget_lock_init_recursive>:
 800c5cc:	4770      	bx	lr

0800c5ce <__retarget_lock_acquire_recursive>:
 800c5ce:	4770      	bx	lr

0800c5d0 <__retarget_lock_release_recursive>:
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <__swhatbuf_r>:
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	000e      	movs	r6, r1
 800c5d8:	001d      	movs	r5, r3
 800c5da:	230e      	movs	r3, #14
 800c5dc:	5ec9      	ldrsh	r1, [r1, r3]
 800c5de:	0014      	movs	r4, r2
 800c5e0:	b096      	sub	sp, #88	; 0x58
 800c5e2:	2900      	cmp	r1, #0
 800c5e4:	da07      	bge.n	800c5f6 <__swhatbuf_r+0x22>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	89b3      	ldrh	r3, [r6, #12]
 800c5ec:	061b      	lsls	r3, r3, #24
 800c5ee:	d411      	bmi.n	800c614 <__swhatbuf_r+0x40>
 800c5f0:	2380      	movs	r3, #128	; 0x80
 800c5f2:	00db      	lsls	r3, r3, #3
 800c5f4:	e00f      	b.n	800c616 <__swhatbuf_r+0x42>
 800c5f6:	466a      	mov	r2, sp
 800c5f8:	f000 f91c 	bl	800c834 <_fstat_r>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	dbf2      	blt.n	800c5e6 <__swhatbuf_r+0x12>
 800c600:	23f0      	movs	r3, #240	; 0xf0
 800c602:	9901      	ldr	r1, [sp, #4]
 800c604:	021b      	lsls	r3, r3, #8
 800c606:	4019      	ands	r1, r3
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <__swhatbuf_r+0x4c>)
 800c60a:	18c9      	adds	r1, r1, r3
 800c60c:	424b      	negs	r3, r1
 800c60e:	4159      	adcs	r1, r3
 800c610:	6029      	str	r1, [r5, #0]
 800c612:	e7ed      	b.n	800c5f0 <__swhatbuf_r+0x1c>
 800c614:	2340      	movs	r3, #64	; 0x40
 800c616:	2000      	movs	r0, #0
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	b016      	add	sp, #88	; 0x58
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	ffffe000 	.word	0xffffe000

0800c624 <__smakebuf_r>:
 800c624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c626:	2602      	movs	r6, #2
 800c628:	898b      	ldrh	r3, [r1, #12]
 800c62a:	0005      	movs	r5, r0
 800c62c:	000c      	movs	r4, r1
 800c62e:	4233      	tst	r3, r6
 800c630:	d006      	beq.n	800c640 <__smakebuf_r+0x1c>
 800c632:	0023      	movs	r3, r4
 800c634:	3347      	adds	r3, #71	; 0x47
 800c636:	6023      	str	r3, [r4, #0]
 800c638:	6123      	str	r3, [r4, #16]
 800c63a:	2301      	movs	r3, #1
 800c63c:	6163      	str	r3, [r4, #20]
 800c63e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c640:	466a      	mov	r2, sp
 800c642:	ab01      	add	r3, sp, #4
 800c644:	f7ff ffc6 	bl	800c5d4 <__swhatbuf_r>
 800c648:	9900      	ldr	r1, [sp, #0]
 800c64a:	0007      	movs	r7, r0
 800c64c:	0028      	movs	r0, r5
 800c64e:	f7ff f949 	bl	800b8e4 <_malloc_r>
 800c652:	2800      	cmp	r0, #0
 800c654:	d108      	bne.n	800c668 <__smakebuf_r+0x44>
 800c656:	220c      	movs	r2, #12
 800c658:	5ea3      	ldrsh	r3, [r4, r2]
 800c65a:	059a      	lsls	r2, r3, #22
 800c65c:	d4ef      	bmi.n	800c63e <__smakebuf_r+0x1a>
 800c65e:	2203      	movs	r2, #3
 800c660:	4393      	bics	r3, r2
 800c662:	431e      	orrs	r6, r3
 800c664:	81a6      	strh	r6, [r4, #12]
 800c666:	e7e4      	b.n	800c632 <__smakebuf_r+0xe>
 800c668:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <__smakebuf_r+0x84>)
 800c66a:	62ab      	str	r3, [r5, #40]	; 0x28
 800c66c:	2380      	movs	r3, #128	; 0x80
 800c66e:	89a2      	ldrh	r2, [r4, #12]
 800c670:	6020      	str	r0, [r4, #0]
 800c672:	4313      	orrs	r3, r2
 800c674:	81a3      	strh	r3, [r4, #12]
 800c676:	9b00      	ldr	r3, [sp, #0]
 800c678:	6120      	str	r0, [r4, #16]
 800c67a:	6163      	str	r3, [r4, #20]
 800c67c:	9b01      	ldr	r3, [sp, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00d      	beq.n	800c69e <__smakebuf_r+0x7a>
 800c682:	0028      	movs	r0, r5
 800c684:	230e      	movs	r3, #14
 800c686:	5ee1      	ldrsh	r1, [r4, r3]
 800c688:	f000 f8e6 	bl	800c858 <_isatty_r>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d006      	beq.n	800c69e <__smakebuf_r+0x7a>
 800c690:	2203      	movs	r2, #3
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	4393      	bics	r3, r2
 800c696:	001a      	movs	r2, r3
 800c698:	2301      	movs	r3, #1
 800c69a:	4313      	orrs	r3, r2
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	89a0      	ldrh	r0, [r4, #12]
 800c6a0:	4307      	orrs	r7, r0
 800c6a2:	81a7      	strh	r7, [r4, #12]
 800c6a4:	e7cb      	b.n	800c63e <__smakebuf_r+0x1a>
 800c6a6:	46c0      	nop			; (mov r8, r8)
 800c6a8:	0800c411 	.word	0x0800c411

0800c6ac <_malloc_usable_size_r>:
 800c6ac:	1f0b      	subs	r3, r1, #4
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	1f18      	subs	r0, r3, #4
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	da01      	bge.n	800c6ba <_malloc_usable_size_r+0xe>
 800c6b6:	580b      	ldr	r3, [r1, r0]
 800c6b8:	18c0      	adds	r0, r0, r3
 800c6ba:	4770      	bx	lr

0800c6bc <_raise_r>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	0004      	movs	r4, r0
 800c6c0:	000d      	movs	r5, r1
 800c6c2:	291f      	cmp	r1, #31
 800c6c4:	d904      	bls.n	800c6d0 <_raise_r+0x14>
 800c6c6:	2316      	movs	r3, #22
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	4240      	negs	r0, r0
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <_raise_r+0x24>
 800c6d6:	008a      	lsls	r2, r1, #2
 800c6d8:	189b      	adds	r3, r3, r2
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	2a00      	cmp	r2, #0
 800c6de:	d108      	bne.n	800c6f2 <_raise_r+0x36>
 800c6e0:	0020      	movs	r0, r4
 800c6e2:	f000 f831 	bl	800c748 <_getpid_r>
 800c6e6:	002a      	movs	r2, r5
 800c6e8:	0001      	movs	r1, r0
 800c6ea:	0020      	movs	r0, r4
 800c6ec:	f000 f81a 	bl	800c724 <_kill_r>
 800c6f0:	e7ed      	b.n	800c6ce <_raise_r+0x12>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	2a01      	cmp	r2, #1
 800c6f6:	d0ea      	beq.n	800c6ce <_raise_r+0x12>
 800c6f8:	1c51      	adds	r1, r2, #1
 800c6fa:	d103      	bne.n	800c704 <_raise_r+0x48>
 800c6fc:	2316      	movs	r3, #22
 800c6fe:	3001      	adds	r0, #1
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	e7e4      	b.n	800c6ce <_raise_r+0x12>
 800c704:	2400      	movs	r4, #0
 800c706:	0028      	movs	r0, r5
 800c708:	601c      	str	r4, [r3, #0]
 800c70a:	4790      	blx	r2
 800c70c:	0020      	movs	r0, r4
 800c70e:	e7de      	b.n	800c6ce <_raise_r+0x12>

0800c710 <raise>:
 800c710:	b510      	push	{r4, lr}
 800c712:	4b03      	ldr	r3, [pc, #12]	; (800c720 <raise+0x10>)
 800c714:	0001      	movs	r1, r0
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	f7ff ffd0 	bl	800c6bc <_raise_r>
 800c71c:	bd10      	pop	{r4, pc}
 800c71e:	46c0      	nop			; (mov r8, r8)
 800c720:	2000000c 	.word	0x2000000c

0800c724 <_kill_r>:
 800c724:	2300      	movs	r3, #0
 800c726:	b570      	push	{r4, r5, r6, lr}
 800c728:	4d06      	ldr	r5, [pc, #24]	; (800c744 <_kill_r+0x20>)
 800c72a:	0004      	movs	r4, r0
 800c72c:	0008      	movs	r0, r1
 800c72e:	0011      	movs	r1, r2
 800c730:	602b      	str	r3, [r5, #0]
 800c732:	f7f7 f9fd 	bl	8003b30 <_kill>
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	d103      	bne.n	800c742 <_kill_r+0x1e>
 800c73a:	682b      	ldr	r3, [r5, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d000      	beq.n	800c742 <_kill_r+0x1e>
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	200004c0 	.word	0x200004c0

0800c748 <_getpid_r>:
 800c748:	b510      	push	{r4, lr}
 800c74a:	f7f7 f9eb 	bl	8003b24 <_getpid>
 800c74e:	bd10      	pop	{r4, pc}

0800c750 <__sread>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	000c      	movs	r4, r1
 800c754:	250e      	movs	r5, #14
 800c756:	5f49      	ldrsh	r1, [r1, r5]
 800c758:	f000 f8a4 	bl	800c8a4 <_read_r>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	db03      	blt.n	800c768 <__sread+0x18>
 800c760:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c762:	181b      	adds	r3, r3, r0
 800c764:	6563      	str	r3, [r4, #84]	; 0x54
 800c766:	bd70      	pop	{r4, r5, r6, pc}
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	4a02      	ldr	r2, [pc, #8]	; (800c774 <__sread+0x24>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	81a3      	strh	r3, [r4, #12]
 800c770:	e7f9      	b.n	800c766 <__sread+0x16>
 800c772:	46c0      	nop			; (mov r8, r8)
 800c774:	ffffefff 	.word	0xffffefff

0800c778 <__swrite>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	001f      	movs	r7, r3
 800c77c:	898b      	ldrh	r3, [r1, #12]
 800c77e:	0005      	movs	r5, r0
 800c780:	000c      	movs	r4, r1
 800c782:	0016      	movs	r6, r2
 800c784:	05db      	lsls	r3, r3, #23
 800c786:	d505      	bpl.n	800c794 <__swrite+0x1c>
 800c788:	230e      	movs	r3, #14
 800c78a:	5ec9      	ldrsh	r1, [r1, r3]
 800c78c:	2200      	movs	r2, #0
 800c78e:	2302      	movs	r3, #2
 800c790:	f000 f874 	bl	800c87c <_lseek_r>
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	4a05      	ldr	r2, [pc, #20]	; (800c7ac <__swrite+0x34>)
 800c798:	0028      	movs	r0, r5
 800c79a:	4013      	ands	r3, r2
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	0032      	movs	r2, r6
 800c7a0:	230e      	movs	r3, #14
 800c7a2:	5ee1      	ldrsh	r1, [r4, r3]
 800c7a4:	003b      	movs	r3, r7
 800c7a6:	f000 f81f 	bl	800c7e8 <_write_r>
 800c7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ac:	ffffefff 	.word	0xffffefff

0800c7b0 <__sseek>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	000c      	movs	r4, r1
 800c7b4:	250e      	movs	r5, #14
 800c7b6:	5f49      	ldrsh	r1, [r1, r5]
 800c7b8:	f000 f860 	bl	800c87c <_lseek_r>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	1c42      	adds	r2, r0, #1
 800c7c0:	d103      	bne.n	800c7ca <__sseek+0x1a>
 800c7c2:	4a05      	ldr	r2, [pc, #20]	; (800c7d8 <__sseek+0x28>)
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ca:	2280      	movs	r2, #128	; 0x80
 800c7cc:	0152      	lsls	r2, r2, #5
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	81a3      	strh	r3, [r4, #12]
 800c7d2:	6560      	str	r0, [r4, #84]	; 0x54
 800c7d4:	e7f8      	b.n	800c7c8 <__sseek+0x18>
 800c7d6:	46c0      	nop			; (mov r8, r8)
 800c7d8:	ffffefff 	.word	0xffffefff

0800c7dc <__sclose>:
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	230e      	movs	r3, #14
 800c7e0:	5ec9      	ldrsh	r1, [r1, r3]
 800c7e2:	f000 f815 	bl	800c810 <_close_r>
 800c7e6:	bd10      	pop	{r4, pc}

0800c7e8 <_write_r>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	0004      	movs	r4, r0
 800c7ec:	0008      	movs	r0, r1
 800c7ee:	0011      	movs	r1, r2
 800c7f0:	001a      	movs	r2, r3
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4d05      	ldr	r5, [pc, #20]	; (800c80c <_write_r+0x24>)
 800c7f6:	602b      	str	r3, [r5, #0]
 800c7f8:	f7f7 f9d3 	bl	8003ba2 <_write>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d103      	bne.n	800c808 <_write_r+0x20>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d000      	beq.n	800c808 <_write_r+0x20>
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	bd70      	pop	{r4, r5, r6, pc}
 800c80a:	46c0      	nop			; (mov r8, r8)
 800c80c:	200004c0 	.word	0x200004c0

0800c810 <_close_r>:
 800c810:	2300      	movs	r3, #0
 800c812:	b570      	push	{r4, r5, r6, lr}
 800c814:	4d06      	ldr	r5, [pc, #24]	; (800c830 <_close_r+0x20>)
 800c816:	0004      	movs	r4, r0
 800c818:	0008      	movs	r0, r1
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	f7f7 f9dd 	bl	8003bda <_close>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d103      	bne.n	800c82c <_close_r+0x1c>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d000      	beq.n	800c82c <_close_r+0x1c>
 800c82a:	6023      	str	r3, [r4, #0]
 800c82c:	bd70      	pop	{r4, r5, r6, pc}
 800c82e:	46c0      	nop			; (mov r8, r8)
 800c830:	200004c0 	.word	0x200004c0

0800c834 <_fstat_r>:
 800c834:	2300      	movs	r3, #0
 800c836:	b570      	push	{r4, r5, r6, lr}
 800c838:	4d06      	ldr	r5, [pc, #24]	; (800c854 <_fstat_r+0x20>)
 800c83a:	0004      	movs	r4, r0
 800c83c:	0008      	movs	r0, r1
 800c83e:	0011      	movs	r1, r2
 800c840:	602b      	str	r3, [r5, #0]
 800c842:	f7f7 f9d4 	bl	8003bee <_fstat>
 800c846:	1c43      	adds	r3, r0, #1
 800c848:	d103      	bne.n	800c852 <_fstat_r+0x1e>
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d000      	beq.n	800c852 <_fstat_r+0x1e>
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	200004c0 	.word	0x200004c0

0800c858 <_isatty_r>:
 800c858:	2300      	movs	r3, #0
 800c85a:	b570      	push	{r4, r5, r6, lr}
 800c85c:	4d06      	ldr	r5, [pc, #24]	; (800c878 <_isatty_r+0x20>)
 800c85e:	0004      	movs	r4, r0
 800c860:	0008      	movs	r0, r1
 800c862:	602b      	str	r3, [r5, #0]
 800c864:	f7f7 f9d1 	bl	8003c0a <_isatty>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d103      	bne.n	800c874 <_isatty_r+0x1c>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d000      	beq.n	800c874 <_isatty_r+0x1c>
 800c872:	6023      	str	r3, [r4, #0]
 800c874:	bd70      	pop	{r4, r5, r6, pc}
 800c876:	46c0      	nop			; (mov r8, r8)
 800c878:	200004c0 	.word	0x200004c0

0800c87c <_lseek_r>:
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	0004      	movs	r4, r0
 800c880:	0008      	movs	r0, r1
 800c882:	0011      	movs	r1, r2
 800c884:	001a      	movs	r2, r3
 800c886:	2300      	movs	r3, #0
 800c888:	4d05      	ldr	r5, [pc, #20]	; (800c8a0 <_lseek_r+0x24>)
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	f7f7 f9c6 	bl	8003c1c <_lseek>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d103      	bne.n	800c89c <_lseek_r+0x20>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d000      	beq.n	800c89c <_lseek_r+0x20>
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	bd70      	pop	{r4, r5, r6, pc}
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	200004c0 	.word	0x200004c0

0800c8a4 <_read_r>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	0004      	movs	r4, r0
 800c8a8:	0008      	movs	r0, r1
 800c8aa:	0011      	movs	r1, r2
 800c8ac:	001a      	movs	r2, r3
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4d05      	ldr	r5, [pc, #20]	; (800c8c8 <_read_r+0x24>)
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f7 f958 	bl	8003b68 <_read>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d103      	bne.n	800c8c4 <_read_r+0x20>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d000      	beq.n	800c8c4 <_read_r+0x20>
 800c8c2:	6023      	str	r3, [r4, #0]
 800c8c4:	bd70      	pop	{r4, r5, r6, pc}
 800c8c6:	46c0      	nop			; (mov r8, r8)
 800c8c8:	200004c0 	.word	0x200004c0

0800c8cc <_init>:
 800c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ce:	46c0      	nop			; (mov r8, r8)
 800c8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d2:	bc08      	pop	{r3}
 800c8d4:	469e      	mov	lr, r3
 800c8d6:	4770      	bx	lr

0800c8d8 <_fini>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8de:	bc08      	pop	{r3}
 800c8e0:	469e      	mov	lr, r3
 800c8e2:	4770      	bx	lr
