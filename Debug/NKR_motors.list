
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800dd98  0800dd98  0001dd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e484  0800e484  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e484  0800e484  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e484  0800e484  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e484  0800e484  0001e484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e488  0800e488  0001e488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001e0  0800e66c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800e66c  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb7e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002fd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00031cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118f3  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec43  00000000  00000000  00044fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ac13  00000000  00000000  00053be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be7f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  000be84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dd7c 	.word	0x0800dd7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800dd7c 	.word	0x0800dd7c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ffa3 	bl	800139c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 feed 	bl	8001240 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff95 	bl	800139c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8b 	bl	800139c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff0f 	bl	80012b8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ff05 	bl	80012b8 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f001 fdef 	bl	80020b4 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fa38 	bl	8001954 <__aeabi_dsub>
 80004e4:	f001 fde6 	bl	80020b4 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f000 ff9d 	bl	800147c <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f001 fe1a 	bl	8002180 <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f000 ff94 	bl	800147c <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 f9fa 	bl	8001954 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f001 fdd3 	bl	8002120 <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f000 ff7d 	bl	800147c <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f001 fdfa 	bl	8002180 <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 f804 	bl	800059c <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_dadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	464f      	mov	r7, r9
 80005a0:	46d6      	mov	lr, sl
 80005a2:	4646      	mov	r6, r8
 80005a4:	000d      	movs	r5, r1
 80005a6:	0001      	movs	r1, r0
 80005a8:	0018      	movs	r0, r3
 80005aa:	b5c0      	push	{r6, r7, lr}
 80005ac:	0017      	movs	r7, r2
 80005ae:	032b      	lsls	r3, r5, #12
 80005b0:	0a5a      	lsrs	r2, r3, #9
 80005b2:	0f4b      	lsrs	r3, r1, #29
 80005b4:	4313      	orrs	r3, r2
 80005b6:	00ca      	lsls	r2, r1, #3
 80005b8:	4691      	mov	r9, r2
 80005ba:	0302      	lsls	r2, r0, #12
 80005bc:	006e      	lsls	r6, r5, #1
 80005be:	0041      	lsls	r1, r0, #1
 80005c0:	0a52      	lsrs	r2, r2, #9
 80005c2:	0fec      	lsrs	r4, r5, #31
 80005c4:	0f7d      	lsrs	r5, r7, #29
 80005c6:	4315      	orrs	r5, r2
 80005c8:	0d76      	lsrs	r6, r6, #21
 80005ca:	0d49      	lsrs	r1, r1, #21
 80005cc:	0fc0      	lsrs	r0, r0, #31
 80005ce:	4682      	mov	sl, r0
 80005d0:	46ac      	mov	ip, r5
 80005d2:	00ff      	lsls	r7, r7, #3
 80005d4:	1a72      	subs	r2, r6, r1
 80005d6:	4284      	cmp	r4, r0
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x40>
 80005da:	e098      	b.n	800070e <__aeabi_dadd+0x172>
 80005dc:	2a00      	cmp	r2, #0
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_dadd+0x46>
 80005e0:	e081      	b.n	80006e6 <__aeabi_dadd+0x14a>
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x4c>
 80005e6:	e0b6      	b.n	8000756 <__aeabi_dadd+0x1ba>
 80005e8:	49c9      	ldr	r1, [pc, #804]	; (8000910 <__aeabi_dadd+0x374>)
 80005ea:	428e      	cmp	r6, r1
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x54>
 80005ee:	e172      	b.n	80008d6 <__aeabi_dadd+0x33a>
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0028      	movs	r0, r5
 80005f4:	0409      	lsls	r1, r1, #16
 80005f6:	4308      	orrs	r0, r1
 80005f8:	4684      	mov	ip, r0
 80005fa:	2a38      	cmp	r2, #56	; 0x38
 80005fc:	dd00      	ble.n	8000600 <__aeabi_dadd+0x64>
 80005fe:	e15e      	b.n	80008be <__aeabi_dadd+0x322>
 8000600:	2a1f      	cmp	r2, #31
 8000602:	dd00      	ble.n	8000606 <__aeabi_dadd+0x6a>
 8000604:	e1ee      	b.n	80009e4 <__aeabi_dadd+0x448>
 8000606:	2020      	movs	r0, #32
 8000608:	0039      	movs	r1, r7
 800060a:	4665      	mov	r5, ip
 800060c:	1a80      	subs	r0, r0, r2
 800060e:	4087      	lsls	r7, r0
 8000610:	40d1      	lsrs	r1, r2
 8000612:	4085      	lsls	r5, r0
 8000614:	430d      	orrs	r5, r1
 8000616:	0039      	movs	r1, r7
 8000618:	1e4f      	subs	r7, r1, #1
 800061a:	41b9      	sbcs	r1, r7
 800061c:	4667      	mov	r7, ip
 800061e:	40d7      	lsrs	r7, r2
 8000620:	4329      	orrs	r1, r5
 8000622:	1bdb      	subs	r3, r3, r7
 8000624:	464a      	mov	r2, r9
 8000626:	1a55      	subs	r5, r2, r1
 8000628:	45a9      	cmp	r9, r5
 800062a:	4189      	sbcs	r1, r1
 800062c:	4249      	negs	r1, r1
 800062e:	1a5b      	subs	r3, r3, r1
 8000630:	4698      	mov	r8, r3
 8000632:	4643      	mov	r3, r8
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	d400      	bmi.n	800063a <__aeabi_dadd+0x9e>
 8000638:	e0cc      	b.n	80007d4 <__aeabi_dadd+0x238>
 800063a:	4643      	mov	r3, r8
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	4698      	mov	r8, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d100      	bne.n	800064a <__aeabi_dadd+0xae>
 8000648:	e12c      	b.n	80008a4 <__aeabi_dadd+0x308>
 800064a:	4640      	mov	r0, r8
 800064c:	f001 fe8e 	bl	800236c <__clzsi2>
 8000650:	0001      	movs	r1, r0
 8000652:	3908      	subs	r1, #8
 8000654:	2220      	movs	r2, #32
 8000656:	0028      	movs	r0, r5
 8000658:	4643      	mov	r3, r8
 800065a:	1a52      	subs	r2, r2, r1
 800065c:	408b      	lsls	r3, r1
 800065e:	40d0      	lsrs	r0, r2
 8000660:	408d      	lsls	r5, r1
 8000662:	4303      	orrs	r3, r0
 8000664:	428e      	cmp	r6, r1
 8000666:	dd00      	ble.n	800066a <__aeabi_dadd+0xce>
 8000668:	e117      	b.n	800089a <__aeabi_dadd+0x2fe>
 800066a:	1b8e      	subs	r6, r1, r6
 800066c:	1c72      	adds	r2, r6, #1
 800066e:	2a1f      	cmp	r2, #31
 8000670:	dd00      	ble.n	8000674 <__aeabi_dadd+0xd8>
 8000672:	e1a7      	b.n	80009c4 <__aeabi_dadd+0x428>
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	002e      	movs	r6, r5
 800067a:	1a89      	subs	r1, r1, r2
 800067c:	408d      	lsls	r5, r1
 800067e:	4088      	lsls	r0, r1
 8000680:	40d6      	lsrs	r6, r2
 8000682:	40d3      	lsrs	r3, r2
 8000684:	1e69      	subs	r1, r5, #1
 8000686:	418d      	sbcs	r5, r1
 8000688:	4330      	orrs	r0, r6
 800068a:	4698      	mov	r8, r3
 800068c:	2600      	movs	r6, #0
 800068e:	4305      	orrs	r5, r0
 8000690:	076b      	lsls	r3, r5, #29
 8000692:	d009      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 8000694:	230f      	movs	r3, #15
 8000696:	402b      	ands	r3, r5
 8000698:	2b04      	cmp	r3, #4
 800069a:	d005      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 800069c:	1d2b      	adds	r3, r5, #4
 800069e:	42ab      	cmp	r3, r5
 80006a0:	41ad      	sbcs	r5, r5
 80006a2:	426d      	negs	r5, r5
 80006a4:	44a8      	add	r8, r5
 80006a6:	001d      	movs	r5, r3
 80006a8:	4643      	mov	r3, r8
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	d400      	bmi.n	80006b0 <__aeabi_dadd+0x114>
 80006ae:	e094      	b.n	80007da <__aeabi_dadd+0x23e>
 80006b0:	4b97      	ldr	r3, [pc, #604]	; (8000910 <__aeabi_dadd+0x374>)
 80006b2:	1c72      	adds	r2, r6, #1
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x11e>
 80006b8:	e09d      	b.n	80007f6 <__aeabi_dadd+0x25a>
 80006ba:	4641      	mov	r1, r8
 80006bc:	4b95      	ldr	r3, [pc, #596]	; (8000914 <__aeabi_dadd+0x378>)
 80006be:	08ed      	lsrs	r5, r5, #3
 80006c0:	4019      	ands	r1, r3
 80006c2:	000b      	movs	r3, r1
 80006c4:	0552      	lsls	r2, r2, #21
 80006c6:	0749      	lsls	r1, r1, #29
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	4329      	orrs	r1, r5
 80006cc:	0b1b      	lsrs	r3, r3, #12
 80006ce:	0d52      	lsrs	r2, r2, #21
 80006d0:	0512      	lsls	r2, r2, #20
 80006d2:	4313      	orrs	r3, r2
 80006d4:	07e4      	lsls	r4, r4, #31
 80006d6:	4323      	orrs	r3, r4
 80006d8:	0008      	movs	r0, r1
 80006da:	0019      	movs	r1, r3
 80006dc:	bce0      	pop	{r5, r6, r7}
 80006de:	46ba      	mov	sl, r7
 80006e0:	46b1      	mov	r9, r6
 80006e2:	46a8      	mov	r8, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d043      	beq.n	8000772 <__aeabi_dadd+0x1d6>
 80006ea:	1b8a      	subs	r2, r1, r6
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_dadd+0x156>
 80006f0:	e12a      	b.n	8000948 <__aeabi_dadd+0x3ac>
 80006f2:	464c      	mov	r4, r9
 80006f4:	431c      	orrs	r4, r3
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x15e>
 80006f8:	e1d1      	b.n	8000a9e <__aeabi_dadd+0x502>
 80006fa:	1e54      	subs	r4, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x166>
 8000700:	e21f      	b.n	8000b42 <__aeabi_dadd+0x5a6>
 8000702:	4d83      	ldr	r5, [pc, #524]	; (8000910 <__aeabi_dadd+0x374>)
 8000704:	42aa      	cmp	r2, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x16e>
 8000708:	e272      	b.n	8000bf0 <__aeabi_dadd+0x654>
 800070a:	0022      	movs	r2, r4
 800070c:	e123      	b.n	8000956 <__aeabi_dadd+0x3ba>
 800070e:	2a00      	cmp	r2, #0
 8000710:	dc00      	bgt.n	8000714 <__aeabi_dadd+0x178>
 8000712:	e098      	b.n	8000846 <__aeabi_dadd+0x2aa>
 8000714:	2900      	cmp	r1, #0
 8000716:	d042      	beq.n	800079e <__aeabi_dadd+0x202>
 8000718:	497d      	ldr	r1, [pc, #500]	; (8000910 <__aeabi_dadd+0x374>)
 800071a:	428e      	cmp	r6, r1
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x184>
 800071e:	e0da      	b.n	80008d6 <__aeabi_dadd+0x33a>
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0028      	movs	r0, r5
 8000724:	0409      	lsls	r1, r1, #16
 8000726:	4308      	orrs	r0, r1
 8000728:	4684      	mov	ip, r0
 800072a:	2a38      	cmp	r2, #56	; 0x38
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x194>
 800072e:	e129      	b.n	8000984 <__aeabi_dadd+0x3e8>
 8000730:	2a1f      	cmp	r2, #31
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dadd+0x19a>
 8000734:	e187      	b.n	8000a46 <__aeabi_dadd+0x4aa>
 8000736:	0011      	movs	r1, r2
 8000738:	4665      	mov	r5, ip
 800073a:	3920      	subs	r1, #32
 800073c:	40cd      	lsrs	r5, r1
 800073e:	2a20      	cmp	r2, #32
 8000740:	d004      	beq.n	800074c <__aeabi_dadd+0x1b0>
 8000742:	2040      	movs	r0, #64	; 0x40
 8000744:	4661      	mov	r1, ip
 8000746:	1a82      	subs	r2, r0, r2
 8000748:	4091      	lsls	r1, r2
 800074a:	430f      	orrs	r7, r1
 800074c:	0039      	movs	r1, r7
 800074e:	1e4f      	subs	r7, r1, #1
 8000750:	41b9      	sbcs	r1, r7
 8000752:	430d      	orrs	r5, r1
 8000754:	e11b      	b.n	800098e <__aeabi_dadd+0x3f2>
 8000756:	0029      	movs	r1, r5
 8000758:	4339      	orrs	r1, r7
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1c2>
 800075c:	e0b5      	b.n	80008ca <__aeabi_dadd+0x32e>
 800075e:	1e51      	subs	r1, r2, #1
 8000760:	2a01      	cmp	r2, #1
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x1ca>
 8000764:	e1ab      	b.n	8000abe <__aeabi_dadd+0x522>
 8000766:	486a      	ldr	r0, [pc, #424]	; (8000910 <__aeabi_dadd+0x374>)
 8000768:	4282      	cmp	r2, r0
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x1d2>
 800076c:	e1b2      	b.n	8000ad4 <__aeabi_dadd+0x538>
 800076e:	000a      	movs	r2, r1
 8000770:	e743      	b.n	80005fa <__aeabi_dadd+0x5e>
 8000772:	4969      	ldr	r1, [pc, #420]	; (8000918 <__aeabi_dadd+0x37c>)
 8000774:	1c75      	adds	r5, r6, #1
 8000776:	420d      	tst	r5, r1
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1e0>
 800077a:	e0cf      	b.n	800091c <__aeabi_dadd+0x380>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x1e6>
 8000780:	e193      	b.n	8000aaa <__aeabi_dadd+0x50e>
 8000782:	4649      	mov	r1, r9
 8000784:	4319      	orrs	r1, r3
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x1ee>
 8000788:	e1d1      	b.n	8000b2e <__aeabi_dadd+0x592>
 800078a:	4661      	mov	r1, ip
 800078c:	4339      	orrs	r1, r7
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x1f6>
 8000790:	e1e3      	b.n	8000b5a <__aeabi_dadd+0x5be>
 8000792:	4649      	mov	r1, r9
 8000794:	0758      	lsls	r0, r3, #29
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	4301      	orrs	r1, r0
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	e026      	b.n	80007ec <__aeabi_dadd+0x250>
 800079e:	0029      	movs	r1, r5
 80007a0:	4339      	orrs	r1, r7
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x20a>
 80007a4:	e091      	b.n	80008ca <__aeabi_dadd+0x32e>
 80007a6:	1e51      	subs	r1, r2, #1
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d005      	beq.n	80007b8 <__aeabi_dadd+0x21c>
 80007ac:	4858      	ldr	r0, [pc, #352]	; (8000910 <__aeabi_dadd+0x374>)
 80007ae:	4282      	cmp	r2, r0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x218>
 80007b2:	e18f      	b.n	8000ad4 <__aeabi_dadd+0x538>
 80007b4:	000a      	movs	r2, r1
 80007b6:	e7b8      	b.n	800072a <__aeabi_dadd+0x18e>
 80007b8:	003d      	movs	r5, r7
 80007ba:	444d      	add	r5, r9
 80007bc:	454d      	cmp	r5, r9
 80007be:	4189      	sbcs	r1, r1
 80007c0:	4463      	add	r3, ip
 80007c2:	4698      	mov	r8, r3
 80007c4:	4249      	negs	r1, r1
 80007c6:	4488      	add	r8, r1
 80007c8:	4643      	mov	r3, r8
 80007ca:	2602      	movs	r6, #2
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	d500      	bpl.n	80007d2 <__aeabi_dadd+0x236>
 80007d0:	e0eb      	b.n	80009aa <__aeabi_dadd+0x40e>
 80007d2:	3e01      	subs	r6, #1
 80007d4:	076b      	lsls	r3, r5, #29
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x23e>
 80007d8:	e75c      	b.n	8000694 <__aeabi_dadd+0xf8>
 80007da:	4643      	mov	r3, r8
 80007dc:	08e9      	lsrs	r1, r5, #3
 80007de:	075a      	lsls	r2, r3, #29
 80007e0:	4311      	orrs	r1, r2
 80007e2:	0032      	movs	r2, r6
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	484a      	ldr	r0, [pc, #296]	; (8000910 <__aeabi_dadd+0x374>)
 80007e8:	4282      	cmp	r2, r0
 80007ea:	d021      	beq.n	8000830 <__aeabi_dadd+0x294>
 80007ec:	031b      	lsls	r3, r3, #12
 80007ee:	0552      	lsls	r2, r2, #21
 80007f0:	0b1b      	lsrs	r3, r3, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e76c      	b.n	80006d0 <__aeabi_dadd+0x134>
 80007f6:	2300      	movs	r3, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	e769      	b.n	80006d0 <__aeabi_dadd+0x134>
 80007fc:	002a      	movs	r2, r5
 80007fe:	433a      	orrs	r2, r7
 8000800:	d069      	beq.n	80008d6 <__aeabi_dadd+0x33a>
 8000802:	464a      	mov	r2, r9
 8000804:	0758      	lsls	r0, r3, #29
 8000806:	08d1      	lsrs	r1, r2, #3
 8000808:	08da      	lsrs	r2, r3, #3
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	031b      	lsls	r3, r3, #12
 800080e:	4308      	orrs	r0, r1
 8000810:	421a      	tst	r2, r3
 8000812:	d007      	beq.n	8000824 <__aeabi_dadd+0x288>
 8000814:	0029      	movs	r1, r5
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	421d      	tst	r5, r3
 800081a:	d103      	bne.n	8000824 <__aeabi_dadd+0x288>
 800081c:	002a      	movs	r2, r5
 800081e:	08ff      	lsrs	r7, r7, #3
 8000820:	0748      	lsls	r0, r1, #29
 8000822:	4338      	orrs	r0, r7
 8000824:	0f43      	lsrs	r3, r0, #29
 8000826:	00c1      	lsls	r1, r0, #3
 8000828:	075b      	lsls	r3, r3, #29
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	4319      	orrs	r1, r3
 800082e:	0013      	movs	r3, r2
 8000830:	000a      	movs	r2, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x29c>
 8000836:	e213      	b.n	8000c60 <__aeabi_dadd+0x6c4>
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0312      	lsls	r2, r2, #12
 800083c:	4313      	orrs	r3, r2
 800083e:	031b      	lsls	r3, r3, #12
 8000840:	4a33      	ldr	r2, [pc, #204]	; (8000910 <__aeabi_dadd+0x374>)
 8000842:	0b1b      	lsrs	r3, r3, #12
 8000844:	e744      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000846:	2a00      	cmp	r2, #0
 8000848:	d04b      	beq.n	80008e2 <__aeabi_dadd+0x346>
 800084a:	1b8a      	subs	r2, r1, r6
 800084c:	2e00      	cmp	r6, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x2b6>
 8000850:	e0e7      	b.n	8000a22 <__aeabi_dadd+0x486>
 8000852:	482f      	ldr	r0, [pc, #188]	; (8000910 <__aeabi_dadd+0x374>)
 8000854:	4281      	cmp	r1, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x2be>
 8000858:	e195      	b.n	8000b86 <__aeabi_dadd+0x5ea>
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	0400      	lsls	r0, r0, #16
 800085e:	4303      	orrs	r3, r0
 8000860:	2a38      	cmp	r2, #56	; 0x38
 8000862:	dd00      	ble.n	8000866 <__aeabi_dadd+0x2ca>
 8000864:	e143      	b.n	8000aee <__aeabi_dadd+0x552>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x2d0>
 800086a:	e1db      	b.n	8000c24 <__aeabi_dadd+0x688>
 800086c:	2020      	movs	r0, #32
 800086e:	001d      	movs	r5, r3
 8000870:	464e      	mov	r6, r9
 8000872:	1a80      	subs	r0, r0, r2
 8000874:	4085      	lsls	r5, r0
 8000876:	40d6      	lsrs	r6, r2
 8000878:	4335      	orrs	r5, r6
 800087a:	464e      	mov	r6, r9
 800087c:	4086      	lsls	r6, r0
 800087e:	0030      	movs	r0, r6
 8000880:	40d3      	lsrs	r3, r2
 8000882:	1e46      	subs	r6, r0, #1
 8000884:	41b0      	sbcs	r0, r6
 8000886:	449c      	add	ip, r3
 8000888:	4305      	orrs	r5, r0
 800088a:	19ed      	adds	r5, r5, r7
 800088c:	42bd      	cmp	r5, r7
 800088e:	419b      	sbcs	r3, r3
 8000890:	425b      	negs	r3, r3
 8000892:	4463      	add	r3, ip
 8000894:	4698      	mov	r8, r3
 8000896:	000e      	movs	r6, r1
 8000898:	e07f      	b.n	800099a <__aeabi_dadd+0x3fe>
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <__aeabi_dadd+0x378>)
 800089c:	1a76      	subs	r6, r6, r1
 800089e:	4013      	ands	r3, r2
 80008a0:	4698      	mov	r8, r3
 80008a2:	e6f5      	b.n	8000690 <__aeabi_dadd+0xf4>
 80008a4:	0028      	movs	r0, r5
 80008a6:	f001 fd61 	bl	800236c <__clzsi2>
 80008aa:	0001      	movs	r1, r0
 80008ac:	3118      	adds	r1, #24
 80008ae:	291f      	cmp	r1, #31
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dadd+0x318>
 80008b2:	e6cf      	b.n	8000654 <__aeabi_dadd+0xb8>
 80008b4:	002b      	movs	r3, r5
 80008b6:	3808      	subs	r0, #8
 80008b8:	4083      	lsls	r3, r0
 80008ba:	2500      	movs	r5, #0
 80008bc:	e6d2      	b.n	8000664 <__aeabi_dadd+0xc8>
 80008be:	4662      	mov	r2, ip
 80008c0:	433a      	orrs	r2, r7
 80008c2:	0011      	movs	r1, r2
 80008c4:	1e4f      	subs	r7, r1, #1
 80008c6:	41b9      	sbcs	r1, r7
 80008c8:	e6ac      	b.n	8000624 <__aeabi_dadd+0x88>
 80008ca:	4649      	mov	r1, r9
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	08c9      	lsrs	r1, r1, #3
 80008d0:	4301      	orrs	r1, r0
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e787      	b.n	80007e6 <__aeabi_dadd+0x24a>
 80008d6:	4649      	mov	r1, r9
 80008d8:	075a      	lsls	r2, r3, #29
 80008da:	08c9      	lsrs	r1, r1, #3
 80008dc:	4311      	orrs	r1, r2
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	e7a6      	b.n	8000830 <__aeabi_dadd+0x294>
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <__aeabi_dadd+0x37c>)
 80008e4:	1c70      	adds	r0, r6, #1
 80008e6:	4208      	tst	r0, r1
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x350>
 80008ea:	e0bb      	b.n	8000a64 <__aeabi_dadd+0x4c8>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x356>
 80008f0:	e114      	b.n	8000b1c <__aeabi_dadd+0x580>
 80008f2:	4649      	mov	r1, r9
 80008f4:	4319      	orrs	r1, r3
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x35e>
 80008f8:	e175      	b.n	8000be6 <__aeabi_dadd+0x64a>
 80008fa:	0029      	movs	r1, r5
 80008fc:	4339      	orrs	r1, r7
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x366>
 8000900:	e17e      	b.n	8000c00 <__aeabi_dadd+0x664>
 8000902:	4649      	mov	r1, r9
 8000904:	0758      	lsls	r0, r3, #29
 8000906:	08c9      	lsrs	r1, r1, #3
 8000908:	4301      	orrs	r1, r0
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	e76e      	b.n	80007ec <__aeabi_dadd+0x250>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	000007ff 	.word	0x000007ff
 8000914:	ff7fffff 	.word	0xff7fffff
 8000918:	000007fe 	.word	0x000007fe
 800091c:	4649      	mov	r1, r9
 800091e:	1bcd      	subs	r5, r1, r7
 8000920:	4661      	mov	r1, ip
 8000922:	1a58      	subs	r0, r3, r1
 8000924:	45a9      	cmp	r9, r5
 8000926:	4189      	sbcs	r1, r1
 8000928:	4249      	negs	r1, r1
 800092a:	4688      	mov	r8, r1
 800092c:	0001      	movs	r1, r0
 800092e:	4640      	mov	r0, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	4688      	mov	r8, r1
 8000934:	0209      	lsls	r1, r1, #8
 8000936:	d500      	bpl.n	800093a <__aeabi_dadd+0x39e>
 8000938:	e0a6      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 800093a:	4641      	mov	r1, r8
 800093c:	4329      	orrs	r1, r5
 800093e:	d000      	beq.n	8000942 <__aeabi_dadd+0x3a6>
 8000940:	e67f      	b.n	8000642 <__aeabi_dadd+0xa6>
 8000942:	2300      	movs	r3, #0
 8000944:	2400      	movs	r4, #0
 8000946:	e751      	b.n	80007ec <__aeabi_dadd+0x250>
 8000948:	4cc7      	ldr	r4, [pc, #796]	; (8000c68 <__aeabi_dadd+0x6cc>)
 800094a:	42a1      	cmp	r1, r4
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x3b4>
 800094e:	e0c7      	b.n	8000ae0 <__aeabi_dadd+0x544>
 8000950:	2480      	movs	r4, #128	; 0x80
 8000952:	0424      	lsls	r4, r4, #16
 8000954:	4323      	orrs	r3, r4
 8000956:	2a38      	cmp	r2, #56	; 0x38
 8000958:	dc54      	bgt.n	8000a04 <__aeabi_dadd+0x468>
 800095a:	2a1f      	cmp	r2, #31
 800095c:	dd00      	ble.n	8000960 <__aeabi_dadd+0x3c4>
 800095e:	e0cc      	b.n	8000afa <__aeabi_dadd+0x55e>
 8000960:	2420      	movs	r4, #32
 8000962:	4648      	mov	r0, r9
 8000964:	1aa4      	subs	r4, r4, r2
 8000966:	001d      	movs	r5, r3
 8000968:	464e      	mov	r6, r9
 800096a:	40a0      	lsls	r0, r4
 800096c:	40d6      	lsrs	r6, r2
 800096e:	40a5      	lsls	r5, r4
 8000970:	0004      	movs	r4, r0
 8000972:	40d3      	lsrs	r3, r2
 8000974:	4662      	mov	r2, ip
 8000976:	4335      	orrs	r5, r6
 8000978:	1e66      	subs	r6, r4, #1
 800097a:	41b4      	sbcs	r4, r6
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	469c      	mov	ip, r3
 8000980:	4325      	orrs	r5, r4
 8000982:	e044      	b.n	8000a0e <__aeabi_dadd+0x472>
 8000984:	4662      	mov	r2, ip
 8000986:	433a      	orrs	r2, r7
 8000988:	0015      	movs	r5, r2
 800098a:	1e6f      	subs	r7, r5, #1
 800098c:	41bd      	sbcs	r5, r7
 800098e:	444d      	add	r5, r9
 8000990:	454d      	cmp	r5, r9
 8000992:	4189      	sbcs	r1, r1
 8000994:	4249      	negs	r1, r1
 8000996:	4688      	mov	r8, r1
 8000998:	4498      	add	r8, r3
 800099a:	4643      	mov	r3, r8
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	d400      	bmi.n	80009a2 <__aeabi_dadd+0x406>
 80009a0:	e718      	b.n	80007d4 <__aeabi_dadd+0x238>
 80009a2:	4bb1      	ldr	r3, [pc, #708]	; (8000c68 <__aeabi_dadd+0x6cc>)
 80009a4:	3601      	adds	r6, #1
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d049      	beq.n	8000a3e <__aeabi_dadd+0x4a2>
 80009aa:	4642      	mov	r2, r8
 80009ac:	4baf      	ldr	r3, [pc, #700]	; (8000c6c <__aeabi_dadd+0x6d0>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	401a      	ands	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	086a      	lsrs	r2, r5, #1
 80009b6:	400d      	ands	r5, r1
 80009b8:	4315      	orrs	r5, r2
 80009ba:	07d9      	lsls	r1, r3, #31
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	4698      	mov	r8, r3
 80009c0:	430d      	orrs	r5, r1
 80009c2:	e665      	b.n	8000690 <__aeabi_dadd+0xf4>
 80009c4:	0018      	movs	r0, r3
 80009c6:	3e1f      	subs	r6, #31
 80009c8:	40f0      	lsrs	r0, r6
 80009ca:	2a20      	cmp	r2, #32
 80009cc:	d003      	beq.n	80009d6 <__aeabi_dadd+0x43a>
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	431d      	orrs	r5, r3
 80009d6:	1e69      	subs	r1, r5, #1
 80009d8:	418d      	sbcs	r5, r1
 80009da:	2300      	movs	r3, #0
 80009dc:	2600      	movs	r6, #0
 80009de:	4698      	mov	r8, r3
 80009e0:	4305      	orrs	r5, r0
 80009e2:	e6f7      	b.n	80007d4 <__aeabi_dadd+0x238>
 80009e4:	0011      	movs	r1, r2
 80009e6:	4665      	mov	r5, ip
 80009e8:	3920      	subs	r1, #32
 80009ea:	40cd      	lsrs	r5, r1
 80009ec:	2a20      	cmp	r2, #32
 80009ee:	d004      	beq.n	80009fa <__aeabi_dadd+0x45e>
 80009f0:	2040      	movs	r0, #64	; 0x40
 80009f2:	4661      	mov	r1, ip
 80009f4:	1a82      	subs	r2, r0, r2
 80009f6:	4091      	lsls	r1, r2
 80009f8:	430f      	orrs	r7, r1
 80009fa:	0039      	movs	r1, r7
 80009fc:	1e4f      	subs	r7, r1, #1
 80009fe:	41b9      	sbcs	r1, r7
 8000a00:	4329      	orrs	r1, r5
 8000a02:	e60f      	b.n	8000624 <__aeabi_dadd+0x88>
 8000a04:	464a      	mov	r2, r9
 8000a06:	4313      	orrs	r3, r2
 8000a08:	001d      	movs	r5, r3
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	1b7d      	subs	r5, r7, r5
 8000a10:	42af      	cmp	r7, r5
 8000a12:	419b      	sbcs	r3, r3
 8000a14:	4662      	mov	r2, ip
 8000a16:	425b      	negs	r3, r3
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	4654      	mov	r4, sl
 8000a1e:	000e      	movs	r6, r1
 8000a20:	e607      	b.n	8000632 <__aeabi_dadd+0x96>
 8000a22:	4648      	mov	r0, r9
 8000a24:	4318      	orrs	r0, r3
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x48e>
 8000a28:	e0b3      	b.n	8000b92 <__aeabi_dadd+0x5f6>
 8000a2a:	1e50      	subs	r0, r2, #1
 8000a2c:	2a01      	cmp	r2, #1
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x496>
 8000a30:	e10d      	b.n	8000c4e <__aeabi_dadd+0x6b2>
 8000a32:	4d8d      	ldr	r5, [pc, #564]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000a34:	42aa      	cmp	r2, r5
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x49e>
 8000a38:	e0a5      	b.n	8000b86 <__aeabi_dadd+0x5ea>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	e710      	b.n	8000860 <__aeabi_dadd+0x2c4>
 8000a3e:	0032      	movs	r2, r6
 8000a40:	2300      	movs	r3, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	e644      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000a46:	2120      	movs	r1, #32
 8000a48:	0038      	movs	r0, r7
 8000a4a:	1a89      	subs	r1, r1, r2
 8000a4c:	4665      	mov	r5, ip
 8000a4e:	408f      	lsls	r7, r1
 8000a50:	408d      	lsls	r5, r1
 8000a52:	40d0      	lsrs	r0, r2
 8000a54:	1e79      	subs	r1, r7, #1
 8000a56:	418f      	sbcs	r7, r1
 8000a58:	4305      	orrs	r5, r0
 8000a5a:	433d      	orrs	r5, r7
 8000a5c:	4667      	mov	r7, ip
 8000a5e:	40d7      	lsrs	r7, r2
 8000a60:	19db      	adds	r3, r3, r7
 8000a62:	e794      	b.n	800098e <__aeabi_dadd+0x3f2>
 8000a64:	4a80      	ldr	r2, [pc, #512]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000a66:	4290      	cmp	r0, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x4d0>
 8000a6a:	e0ec      	b.n	8000c46 <__aeabi_dadd+0x6aa>
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	4449      	add	r1, r9
 8000a70:	4549      	cmp	r1, r9
 8000a72:	4192      	sbcs	r2, r2
 8000a74:	4463      	add	r3, ip
 8000a76:	4252      	negs	r2, r2
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	07dd      	lsls	r5, r3, #31
 8000a7c:	0849      	lsrs	r1, r1, #1
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	4698      	mov	r8, r3
 8000a82:	0006      	movs	r6, r0
 8000a84:	430d      	orrs	r5, r1
 8000a86:	e6a5      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	1abd      	subs	r5, r7, r2
 8000a8c:	42af      	cmp	r7, r5
 8000a8e:	4189      	sbcs	r1, r1
 8000a90:	4662      	mov	r2, ip
 8000a92:	4249      	negs	r1, r1
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	4698      	mov	r8, r3
 8000a9a:	4654      	mov	r4, sl
 8000a9c:	e5d1      	b.n	8000642 <__aeabi_dadd+0xa6>
 8000a9e:	076c      	lsls	r4, r5, #29
 8000aa0:	08f9      	lsrs	r1, r7, #3
 8000aa2:	4321      	orrs	r1, r4
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	e69d      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	d175      	bne.n	8000b9c <__aeabi_dadd+0x600>
 8000ab0:	4661      	mov	r1, ip
 8000ab2:	4339      	orrs	r1, r7
 8000ab4:	d114      	bne.n	8000ae0 <__aeabi_dadd+0x544>
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	2400      	movs	r4, #0
 8000aba:	031b      	lsls	r3, r3, #12
 8000abc:	e6bc      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000abe:	464a      	mov	r2, r9
 8000ac0:	1bd5      	subs	r5, r2, r7
 8000ac2:	45a9      	cmp	r9, r5
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	4698      	mov	r8, r3
 8000ad0:	2601      	movs	r6, #1
 8000ad2:	e5ae      	b.n	8000632 <__aeabi_dadd+0x96>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	08d1      	lsrs	r1, r2, #3
 8000ad8:	075a      	lsls	r2, r3, #29
 8000ada:	4311      	orrs	r1, r2
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	e6a7      	b.n	8000830 <__aeabi_dadd+0x294>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	08f9      	lsrs	r1, r7, #3
 8000ae4:	075a      	lsls	r2, r3, #29
 8000ae6:	4654      	mov	r4, sl
 8000ae8:	4311      	orrs	r1, r2
 8000aea:	08db      	lsrs	r3, r3, #3
 8000aec:	e6a0      	b.n	8000830 <__aeabi_dadd+0x294>
 8000aee:	464a      	mov	r2, r9
 8000af0:	4313      	orrs	r3, r2
 8000af2:	001d      	movs	r5, r3
 8000af4:	1e6b      	subs	r3, r5, #1
 8000af6:	419d      	sbcs	r5, r3
 8000af8:	e6c7      	b.n	800088a <__aeabi_dadd+0x2ee>
 8000afa:	0014      	movs	r4, r2
 8000afc:	001e      	movs	r6, r3
 8000afe:	3c20      	subs	r4, #32
 8000b00:	40e6      	lsrs	r6, r4
 8000b02:	2a20      	cmp	r2, #32
 8000b04:	d005      	beq.n	8000b12 <__aeabi_dadd+0x576>
 8000b06:	2440      	movs	r4, #64	; 0x40
 8000b08:	1aa2      	subs	r2, r4, r2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4691      	mov	r9, r2
 8000b12:	464d      	mov	r5, r9
 8000b14:	1e6b      	subs	r3, r5, #1
 8000b16:	419d      	sbcs	r5, r3
 8000b18:	4335      	orrs	r5, r6
 8000b1a:	e778      	b.n	8000a0e <__aeabi_dadd+0x472>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	d000      	beq.n	8000b24 <__aeabi_dadd+0x588>
 8000b22:	e66b      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b24:	076b      	lsls	r3, r5, #29
 8000b26:	08f9      	lsrs	r1, r7, #3
 8000b28:	4319      	orrs	r1, r3
 8000b2a:	08eb      	lsrs	r3, r5, #3
 8000b2c:	e680      	b.n	8000830 <__aeabi_dadd+0x294>
 8000b2e:	4661      	mov	r1, ip
 8000b30:	4339      	orrs	r1, r7
 8000b32:	d054      	beq.n	8000bde <__aeabi_dadd+0x642>
 8000b34:	4663      	mov	r3, ip
 8000b36:	08f9      	lsrs	r1, r7, #3
 8000b38:	075c      	lsls	r4, r3, #29
 8000b3a:	4321      	orrs	r1, r4
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	0004      	movs	r4, r0
 8000b40:	e654      	b.n	80007ec <__aeabi_dadd+0x250>
 8000b42:	464a      	mov	r2, r9
 8000b44:	1abd      	subs	r5, r7, r2
 8000b46:	42af      	cmp	r7, r5
 8000b48:	4189      	sbcs	r1, r1
 8000b4a:	4662      	mov	r2, ip
 8000b4c:	4249      	negs	r1, r1
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	4698      	mov	r8, r3
 8000b54:	0004      	movs	r4, r0
 8000b56:	2601      	movs	r6, #1
 8000b58:	e56b      	b.n	8000632 <__aeabi_dadd+0x96>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	1bd5      	subs	r5, r2, r7
 8000b5e:	45a9      	cmp	r9, r5
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4662      	mov	r2, ip
 8000b64:	4249      	negs	r1, r1
 8000b66:	1a9a      	subs	r2, r3, r2
 8000b68:	1a52      	subs	r2, r2, r1
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	0212      	lsls	r2, r2, #8
 8000b6e:	d532      	bpl.n	8000bd6 <__aeabi_dadd+0x63a>
 8000b70:	464a      	mov	r2, r9
 8000b72:	1abd      	subs	r5, r7, r2
 8000b74:	42af      	cmp	r7, r5
 8000b76:	4189      	sbcs	r1, r1
 8000b78:	4662      	mov	r2, ip
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	0004      	movs	r4, r0
 8000b84:	e584      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000b86:	4663      	mov	r3, ip
 8000b88:	08f9      	lsrs	r1, r7, #3
 8000b8a:	075a      	lsls	r2, r3, #29
 8000b8c:	4311      	orrs	r1, r2
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	e64e      	b.n	8000830 <__aeabi_dadd+0x294>
 8000b92:	08f9      	lsrs	r1, r7, #3
 8000b94:	0768      	lsls	r0, r5, #29
 8000b96:	4301      	orrs	r1, r0
 8000b98:	08eb      	lsrs	r3, r5, #3
 8000b9a:	e624      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	433a      	orrs	r2, r7
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x608>
 8000ba2:	e698      	b.n	80008d6 <__aeabi_dadd+0x33a>
 8000ba4:	464a      	mov	r2, r9
 8000ba6:	08d1      	lsrs	r1, r2, #3
 8000ba8:	075a      	lsls	r2, r3, #29
 8000baa:	4311      	orrs	r1, r2
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	031b      	lsls	r3, r3, #12
 8000bb2:	421a      	tst	r2, r3
 8000bb4:	d008      	beq.n	8000bc8 <__aeabi_dadd+0x62c>
 8000bb6:	4660      	mov	r0, ip
 8000bb8:	08c5      	lsrs	r5, r0, #3
 8000bba:	421d      	tst	r5, r3
 8000bbc:	d104      	bne.n	8000bc8 <__aeabi_dadd+0x62c>
 8000bbe:	4654      	mov	r4, sl
 8000bc0:	002a      	movs	r2, r5
 8000bc2:	08f9      	lsrs	r1, r7, #3
 8000bc4:	0743      	lsls	r3, r0, #29
 8000bc6:	4319      	orrs	r1, r3
 8000bc8:	0f4b      	lsrs	r3, r1, #29
 8000bca:	00c9      	lsls	r1, r1, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	08c9      	lsrs	r1, r1, #3
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	e62c      	b.n	8000830 <__aeabi_dadd+0x294>
 8000bd6:	4641      	mov	r1, r8
 8000bd8:	4329      	orrs	r1, r5
 8000bda:	d000      	beq.n	8000bde <__aeabi_dadd+0x642>
 8000bdc:	e5fa      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000bde:	2300      	movs	r3, #0
 8000be0:	000a      	movs	r2, r1
 8000be2:	2400      	movs	r4, #0
 8000be4:	e602      	b.n	80007ec <__aeabi_dadd+0x250>
 8000be6:	076b      	lsls	r3, r5, #29
 8000be8:	08f9      	lsrs	r1, r7, #3
 8000bea:	4319      	orrs	r1, r3
 8000bec:	08eb      	lsrs	r3, r5, #3
 8000bee:	e5fd      	b.n	80007ec <__aeabi_dadd+0x250>
 8000bf0:	4663      	mov	r3, ip
 8000bf2:	08f9      	lsrs	r1, r7, #3
 8000bf4:	075b      	lsls	r3, r3, #29
 8000bf6:	4319      	orrs	r1, r3
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	0004      	movs	r4, r0
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	e617      	b.n	8000830 <__aeabi_dadd+0x294>
 8000c00:	003d      	movs	r5, r7
 8000c02:	444d      	add	r5, r9
 8000c04:	4463      	add	r3, ip
 8000c06:	454d      	cmp	r5, r9
 8000c08:	4189      	sbcs	r1, r1
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	4249      	negs	r1, r1
 8000c0e:	4488      	add	r8, r1
 8000c10:	4643      	mov	r3, r8
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	d400      	bmi.n	8000c18 <__aeabi_dadd+0x67c>
 8000c16:	e5dd      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <__aeabi_dadd+0x6d0>)
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	401a      	ands	r2, r3
 8000c20:	4690      	mov	r8, r2
 8000c22:	e5d7      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000c24:	0010      	movs	r0, r2
 8000c26:	001e      	movs	r6, r3
 8000c28:	3820      	subs	r0, #32
 8000c2a:	40c6      	lsrs	r6, r0
 8000c2c:	2a20      	cmp	r2, #32
 8000c2e:	d005      	beq.n	8000c3c <__aeabi_dadd+0x6a0>
 8000c30:	2040      	movs	r0, #64	; 0x40
 8000c32:	1a82      	subs	r2, r0, r2
 8000c34:	4093      	lsls	r3, r2
 8000c36:	464a      	mov	r2, r9
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	464d      	mov	r5, r9
 8000c3e:	1e6b      	subs	r3, r5, #1
 8000c40:	419d      	sbcs	r5, r3
 8000c42:	4335      	orrs	r5, r6
 8000c44:	e621      	b.n	800088a <__aeabi_dadd+0x2ee>
 8000c46:	0002      	movs	r2, r0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e540      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000c4e:	464a      	mov	r2, r9
 8000c50:	19d5      	adds	r5, r2, r7
 8000c52:	42bd      	cmp	r5, r7
 8000c54:	4189      	sbcs	r1, r1
 8000c56:	4463      	add	r3, ip
 8000c58:	4698      	mov	r8, r3
 8000c5a:	4249      	negs	r1, r1
 8000c5c:	4488      	add	r8, r1
 8000c5e:	e5b3      	b.n	80007c8 <__aeabi_dadd+0x22c>
 8000c60:	2100      	movs	r1, #0
 8000c62:	4a01      	ldr	r2, [pc, #4]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000c64:	000b      	movs	r3, r1
 8000c66:	e533      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	ff7fffff 	.word	0xff7fffff

08000c70 <__aeabi_ddiv>:
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	4657      	mov	r7, sl
 8000c74:	464e      	mov	r6, r9
 8000c76:	4645      	mov	r5, r8
 8000c78:	46de      	mov	lr, fp
 8000c7a:	b5e0      	push	{r5, r6, r7, lr}
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	0005      	movs	r5, r0
 8000c80:	030c      	lsls	r4, r1, #12
 8000c82:	0048      	lsls	r0, r1, #1
 8000c84:	4692      	mov	sl, r2
 8000c86:	001f      	movs	r7, r3
 8000c88:	b085      	sub	sp, #20
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	0d40      	lsrs	r0, r0, #21
 8000c8e:	0fce      	lsrs	r6, r1, #31
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d059      	beq.n	8000d48 <__aeabi_ddiv+0xd8>
 8000c94:	4b87      	ldr	r3, [pc, #540]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000c96:	4298      	cmp	r0, r3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_ddiv+0x2c>
 8000c9a:	e098      	b.n	8000dce <__aeabi_ddiv+0x15e>
 8000c9c:	0f6b      	lsrs	r3, r5, #29
 8000c9e:	00e4      	lsls	r4, r4, #3
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	4323      	orrs	r3, r4
 8000ca8:	4698      	mov	r8, r3
 8000caa:	4b83      	ldr	r3, [pc, #524]	; (8000eb8 <__aeabi_ddiv+0x248>)
 8000cac:	00ed      	lsls	r5, r5, #3
 8000cae:	469b      	mov	fp, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	4483      	add	fp, r0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	033c      	lsls	r4, r7, #12
 8000cba:	007b      	lsls	r3, r7, #1
 8000cbc:	4650      	mov	r0, sl
 8000cbe:	0b24      	lsrs	r4, r4, #12
 8000cc0:	0d5b      	lsrs	r3, r3, #21
 8000cc2:	0fff      	lsrs	r7, r7, #31
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d067      	beq.n	8000d98 <__aeabi_ddiv+0x128>
 8000cc8:	4a7a      	ldr	r2, [pc, #488]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d018      	beq.n	8000d00 <__aeabi_ddiv+0x90>
 8000cce:	497a      	ldr	r1, [pc, #488]	; (8000eb8 <__aeabi_ddiv+0x248>)
 8000cd0:	0f42      	lsrs	r2, r0, #29
 8000cd2:	468c      	mov	ip, r1
 8000cd4:	00e4      	lsls	r4, r4, #3
 8000cd6:	4659      	mov	r1, fp
 8000cd8:	4314      	orrs	r4, r2
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	4463      	add	r3, ip
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	4314      	orrs	r4, r2
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	00c2      	lsls	r2, r0, #3
 8000ce8:	2000      	movs	r0, #0
 8000cea:	0033      	movs	r3, r6
 8000cec:	407b      	eors	r3, r7
 8000cee:	469a      	mov	sl, r3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d900      	bls.n	8000cf8 <__aeabi_ddiv+0x88>
 8000cf6:	e0ef      	b.n	8000ed8 <__aeabi_ddiv+0x268>
 8000cf8:	4970      	ldr	r1, [pc, #448]	; (8000ebc <__aeabi_ddiv+0x24c>)
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	58cb      	ldr	r3, [r1, r3]
 8000cfe:	469f      	mov	pc, r3
 8000d00:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <__aeabi_ddiv+0x250>)
 8000d02:	4652      	mov	r2, sl
 8000d04:	469c      	mov	ip, r3
 8000d06:	4322      	orrs	r2, r4
 8000d08:	44e3      	add	fp, ip
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_ddiv+0xa0>
 8000d0e:	e095      	b.n	8000e3c <__aeabi_ddiv+0x1cc>
 8000d10:	4649      	mov	r1, r9
 8000d12:	2302      	movs	r3, #2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	4689      	mov	r9, r1
 8000d18:	2400      	movs	r4, #0
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	e7e5      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	2500      	movs	r5, #0
 8000d24:	4652      	mov	r2, sl
 8000d26:	051b      	lsls	r3, r3, #20
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	07d2      	lsls	r2, r2, #31
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	0028      	movs	r0, r5
 8000d30:	0019      	movs	r1, r3
 8000d32:	b005      	add	sp, #20
 8000d34:	bcf0      	pop	{r4, r5, r6, r7}
 8000d36:	46bb      	mov	fp, r7
 8000d38:	46b2      	mov	sl, r6
 8000d3a:	46a9      	mov	r9, r5
 8000d3c:	46a0      	mov	r8, r4
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d40:	2400      	movs	r4, #0
 8000d42:	2500      	movs	r5, #0
 8000d44:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000d46:	e7ed      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000d48:	464b      	mov	r3, r9
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_ddiv+0xe2>
 8000d50:	e089      	b.n	8000e66 <__aeabi_ddiv+0x1f6>
 8000d52:	2c00      	cmp	r4, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0xe8>
 8000d56:	e1e0      	b.n	800111a <__aeabi_ddiv+0x4aa>
 8000d58:	0020      	movs	r0, r4
 8000d5a:	f001 fb07 	bl	800236c <__clzsi2>
 8000d5e:	0001      	movs	r1, r0
 8000d60:	0002      	movs	r2, r0
 8000d62:	390b      	subs	r1, #11
 8000d64:	231d      	movs	r3, #29
 8000d66:	1a5b      	subs	r3, r3, r1
 8000d68:	4649      	mov	r1, r9
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	40d9      	lsrs	r1, r3
 8000d6e:	3808      	subs	r0, #8
 8000d70:	4084      	lsls	r4, r0
 8000d72:	000b      	movs	r3, r1
 8000d74:	464d      	mov	r5, r9
 8000d76:	4323      	orrs	r3, r4
 8000d78:	4698      	mov	r8, r3
 8000d7a:	4085      	lsls	r5, r0
 8000d7c:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <__aeabi_ddiv+0x254>)
 8000d7e:	033c      	lsls	r4, r7, #12
 8000d80:	1a83      	subs	r3, r0, r2
 8000d82:	469b      	mov	fp, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	4699      	mov	r9, r3
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	007b      	lsls	r3, r7, #1
 8000d8c:	4650      	mov	r0, sl
 8000d8e:	0b24      	lsrs	r4, r4, #12
 8000d90:	0d5b      	lsrs	r3, r3, #21
 8000d92:	0fff      	lsrs	r7, r7, #31
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d197      	bne.n	8000cc8 <__aeabi_ddiv+0x58>
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4322      	orrs	r2, r4
 8000d9c:	d055      	beq.n	8000e4a <__aeabi_ddiv+0x1da>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_ddiv+0x134>
 8000da2:	e1ca      	b.n	800113a <__aeabi_ddiv+0x4ca>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f001 fae1 	bl	800236c <__clzsi2>
 8000daa:	0002      	movs	r2, r0
 8000dac:	3a0b      	subs	r2, #11
 8000dae:	231d      	movs	r3, #29
 8000db0:	0001      	movs	r1, r0
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	4652      	mov	r2, sl
 8000db6:	3908      	subs	r1, #8
 8000db8:	40da      	lsrs	r2, r3
 8000dba:	408c      	lsls	r4, r1
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	4652      	mov	r2, sl
 8000dc0:	408a      	lsls	r2, r1
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <__aeabi_ddiv+0x258>)
 8000dc4:	4458      	add	r0, fp
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	4483      	add	fp, r0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	e78d      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	d140      	bne.n	8000e58 <__aeabi_ddiv+0x1e8>
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	4699      	mov	r9, r3
 8000dda:	3b06      	subs	r3, #6
 8000ddc:	2500      	movs	r5, #0
 8000dde:	4683      	mov	fp, r0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e769      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000de4:	46b2      	mov	sl, r6
 8000de6:	9b00      	ldr	r3, [sp, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d0a9      	beq.n	8000d40 <__aeabi_ddiv+0xd0>
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x182>
 8000df0:	e211      	b.n	8001216 <__aeabi_ddiv+0x5a6>
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d093      	beq.n	8000d1e <__aeabi_ddiv+0xae>
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <__aeabi_ddiv+0x25c>)
 8000df8:	445a      	add	r2, fp
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	dc00      	bgt.n	8000e00 <__aeabi_ddiv+0x190>
 8000dfe:	e13c      	b.n	800107a <__aeabi_ddiv+0x40a>
 8000e00:	076b      	lsls	r3, r5, #29
 8000e02:	d000      	beq.n	8000e06 <__aeabi_ddiv+0x196>
 8000e04:	e1a7      	b.n	8001156 <__aeabi_ddiv+0x4e6>
 8000e06:	08ed      	lsrs	r5, r5, #3
 8000e08:	4643      	mov	r3, r8
 8000e0a:	01db      	lsls	r3, r3, #7
 8000e0c:	d506      	bpl.n	8000e1c <__aeabi_ddiv+0x1ac>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <__aeabi_ddiv+0x260>)
 8000e12:	401a      	ands	r2, r3
 8000e14:	4690      	mov	r8, r2
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	445a      	add	r2, fp
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <__aeabi_ddiv+0x264>)
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dc8e      	bgt.n	8000d40 <__aeabi_ddiv+0xd0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	0552      	lsls	r2, r2, #21
 8000e26:	0758      	lsls	r0, r3, #29
 8000e28:	025c      	lsls	r4, r3, #9
 8000e2a:	4305      	orrs	r5, r0
 8000e2c:	0b24      	lsrs	r4, r4, #12
 8000e2e:	0d53      	lsrs	r3, r2, #21
 8000e30:	e778      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000e32:	46ba      	mov	sl, r7
 8000e34:	46a0      	mov	r8, r4
 8000e36:	0015      	movs	r5, r2
 8000e38:	9000      	str	r0, [sp, #0]
 8000e3a:	e7d4      	b.n	8000de6 <__aeabi_ddiv+0x176>
 8000e3c:	464a      	mov	r2, r9
 8000e3e:	2303      	movs	r3, #3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	4691      	mov	r9, r2
 8000e44:	2003      	movs	r0, #3
 8000e46:	4652      	mov	r2, sl
 8000e48:	e74f      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4319      	orrs	r1, r3
 8000e50:	4689      	mov	r9, r1
 8000e52:	2400      	movs	r4, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	e748      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	3b09      	subs	r3, #9
 8000e5e:	46a0      	mov	r8, r4
 8000e60:	4683      	mov	fp, r0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	e728      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000e66:	2304      	movs	r3, #4
 8000e68:	4699      	mov	r9, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	469b      	mov	fp, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	2500      	movs	r5, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	e720      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2480      	movs	r4, #128	; 0x80
 8000e7a:	469a      	mov	sl, r3
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	e74f      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	4641      	mov	r1, r8
 8000e88:	031b      	lsls	r3, r3, #12
 8000e8a:	4219      	tst	r1, r3
 8000e8c:	d008      	beq.n	8000ea0 <__aeabi_ddiv+0x230>
 8000e8e:	421c      	tst	r4, r3
 8000e90:	d106      	bne.n	8000ea0 <__aeabi_ddiv+0x230>
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46ba      	mov	sl, r7
 8000e98:	0015      	movs	r5, r2
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000e9c:	0b24      	lsrs	r4, r4, #12
 8000e9e:	e741      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	0324      	lsls	r4, r4, #12
 8000ea6:	431c      	orrs	r4, r3
 8000ea8:	0324      	lsls	r4, r4, #12
 8000eaa:	46b2      	mov	sl, r6
 8000eac:	4b01      	ldr	r3, [pc, #4]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	e738      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	fffffc01 	.word	0xfffffc01
 8000ebc:	0800df20 	.word	0x0800df20
 8000ec0:	fffff801 	.word	0xfffff801
 8000ec4:	fffffc0d 	.word	0xfffffc0d
 8000ec8:	000003f3 	.word	0x000003f3
 8000ecc:	000003ff 	.word	0x000003ff
 8000ed0:	feffffff 	.word	0xfeffffff
 8000ed4:	000007fe 	.word	0x000007fe
 8000ed8:	4544      	cmp	r4, r8
 8000eda:	d200      	bcs.n	8000ede <__aeabi_ddiv+0x26e>
 8000edc:	e116      	b.n	800110c <__aeabi_ddiv+0x49c>
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x272>
 8000ee0:	e111      	b.n	8001106 <__aeabi_ddiv+0x496>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	002e      	movs	r6, r5
 8000eea:	4640      	mov	r0, r8
 8000eec:	2500      	movs	r5, #0
 8000eee:	44e3      	add	fp, ip
 8000ef0:	0223      	lsls	r3, r4, #8
 8000ef2:	0e14      	lsrs	r4, r2, #24
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	4699      	mov	r9, r3
 8000efa:	0423      	lsls	r3, r4, #16
 8000efc:	0c1f      	lsrs	r7, r3, #16
 8000efe:	0212      	lsls	r2, r2, #8
 8000f00:	4649      	mov	r1, r9
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	9701      	str	r7, [sp, #4]
 8000f06:	f7ff f9ab 	bl	8000260 <__aeabi_uidivmod>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	437a      	muls	r2, r7
 8000f0e:	040b      	lsls	r3, r1, #16
 8000f10:	0c31      	lsrs	r1, r6, #16
 8000f12:	4680      	mov	r8, r0
 8000f14:	4319      	orrs	r1, r3
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d90b      	bls.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	469c      	mov	ip, r3
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	44e0      	add	r8, ip
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d804      	bhi.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f28:	428a      	cmp	r2, r1
 8000f2a:	d902      	bls.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f2c:	1e83      	subs	r3, r0, #2
 8000f2e:	4698      	mov	r8, r3
 8000f30:	1909      	adds	r1, r1, r4
 8000f32:	1a88      	subs	r0, r1, r2
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f993 	bl	8000260 <__aeabi_uidivmod>
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	0431      	lsls	r1, r6, #16
 8000f40:	4666      	mov	r6, ip
 8000f42:	9a01      	ldr	r2, [sp, #4]
 8000f44:	0c09      	lsrs	r1, r1, #16
 8000f46:	4342      	muls	r2, r0
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4331      	orrs	r1, r6
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	d904      	bls.n	8000f5a <__aeabi_ddiv+0x2ea>
 8000f50:	1909      	adds	r1, r1, r4
 8000f52:	3b01      	subs	r3, #1
 8000f54:	428c      	cmp	r4, r1
 8000f56:	d800      	bhi.n	8000f5a <__aeabi_ddiv+0x2ea>
 8000f58:	e111      	b.n	800117e <__aeabi_ddiv+0x50e>
 8000f5a:	1a89      	subs	r1, r1, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	9e00      	ldr	r6, [sp, #0]
 8000f60:	0412      	lsls	r2, r2, #16
 8000f62:	431a      	orrs	r2, r3
 8000f64:	0c33      	lsrs	r3, r6, #16
 8000f66:	001f      	movs	r7, r3
 8000f68:	0c10      	lsrs	r0, r2, #16
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	0413      	lsls	r3, r2, #16
 8000f70:	0432      	lsls	r2, r6, #16
 8000f72:	0c16      	lsrs	r6, r2, #16
 8000f74:	0032      	movs	r2, r6
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	9603      	str	r6, [sp, #12]
 8000f7c:	437b      	muls	r3, r7
 8000f7e:	4346      	muls	r6, r0
 8000f80:	4378      	muls	r0, r7
 8000f82:	0c17      	lsrs	r7, r2, #16
 8000f84:	46bc      	mov	ip, r7
 8000f86:	199b      	adds	r3, r3, r6
 8000f88:	4463      	add	r3, ip
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x326>
 8000f8e:	2680      	movs	r6, #128	; 0x80
 8000f90:	0276      	lsls	r6, r6, #9
 8000f92:	46b4      	mov	ip, r6
 8000f94:	4460      	add	r0, ip
 8000f96:	0c1e      	lsrs	r6, r3, #16
 8000f98:	1830      	adds	r0, r6, r0
 8000f9a:	0416      	lsls	r6, r2, #16
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	0c36      	lsrs	r6, r6, #16
 8000fa0:	199e      	adds	r6, r3, r6
 8000fa2:	4281      	cmp	r1, r0
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x338>
 8000fa6:	e09c      	b.n	80010e2 <__aeabi_ddiv+0x472>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x33c>
 8000faa:	e097      	b.n	80010dc <__aeabi_ddiv+0x46c>
 8000fac:	1bae      	subs	r6, r5, r6
 8000fae:	1a09      	subs	r1, r1, r0
 8000fb0:	42b5      	cmp	r5, r6
 8000fb2:	4180      	sbcs	r0, r0
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	1a08      	subs	r0, r1, r0
 8000fb8:	4284      	cmp	r4, r0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x34e>
 8000fbc:	e111      	b.n	80011e2 <__aeabi_ddiv+0x572>
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	f7ff f94e 	bl	8000260 <__aeabi_uidivmod>
 8000fc4:	9a01      	ldr	r2, [sp, #4]
 8000fc6:	040b      	lsls	r3, r1, #16
 8000fc8:	4342      	muls	r2, r0
 8000fca:	0c31      	lsrs	r1, r6, #16
 8000fcc:	0005      	movs	r5, r0
 8000fce:	4319      	orrs	r1, r3
 8000fd0:	428a      	cmp	r2, r1
 8000fd2:	d907      	bls.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fd4:	1909      	adds	r1, r1, r4
 8000fd6:	3d01      	subs	r5, #1
 8000fd8:	428c      	cmp	r4, r1
 8000fda:	d803      	bhi.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fdc:	428a      	cmp	r2, r1
 8000fde:	d901      	bls.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fe0:	1e85      	subs	r5, r0, #2
 8000fe2:	1909      	adds	r1, r1, r4
 8000fe4:	1a88      	subs	r0, r1, r2
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	f7ff f93a 	bl	8000260 <__aeabi_uidivmod>
 8000fec:	0409      	lsls	r1, r1, #16
 8000fee:	468c      	mov	ip, r1
 8000ff0:	0431      	lsls	r1, r6, #16
 8000ff2:	4666      	mov	r6, ip
 8000ff4:	9a01      	ldr	r2, [sp, #4]
 8000ff6:	0c09      	lsrs	r1, r1, #16
 8000ff8:	4342      	muls	r2, r0
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	4331      	orrs	r1, r6
 8000ffe:	428a      	cmp	r2, r1
 8001000:	d907      	bls.n	8001012 <__aeabi_ddiv+0x3a2>
 8001002:	1909      	adds	r1, r1, r4
 8001004:	3b01      	subs	r3, #1
 8001006:	428c      	cmp	r4, r1
 8001008:	d803      	bhi.n	8001012 <__aeabi_ddiv+0x3a2>
 800100a:	428a      	cmp	r2, r1
 800100c:	d901      	bls.n	8001012 <__aeabi_ddiv+0x3a2>
 800100e:	1e83      	subs	r3, r0, #2
 8001010:	1909      	adds	r1, r1, r4
 8001012:	9e03      	ldr	r6, [sp, #12]
 8001014:	1a89      	subs	r1, r1, r2
 8001016:	0032      	movs	r2, r6
 8001018:	042d      	lsls	r5, r5, #16
 800101a:	431d      	orrs	r5, r3
 800101c:	9f02      	ldr	r7, [sp, #8]
 800101e:	042b      	lsls	r3, r5, #16
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	435a      	muls	r2, r3
 8001024:	437b      	muls	r3, r7
 8001026:	469c      	mov	ip, r3
 8001028:	0c28      	lsrs	r0, r5, #16
 800102a:	4346      	muls	r6, r0
 800102c:	0c13      	lsrs	r3, r2, #16
 800102e:	44b4      	add	ip, r6
 8001030:	4463      	add	r3, ip
 8001032:	4378      	muls	r0, r7
 8001034:	429e      	cmp	r6, r3
 8001036:	d903      	bls.n	8001040 <__aeabi_ddiv+0x3d0>
 8001038:	2680      	movs	r6, #128	; 0x80
 800103a:	0276      	lsls	r6, r6, #9
 800103c:	46b4      	mov	ip, r6
 800103e:	4460      	add	r0, ip
 8001040:	0c1e      	lsrs	r6, r3, #16
 8001042:	0412      	lsls	r2, r2, #16
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0c12      	lsrs	r2, r2, #16
 8001048:	1830      	adds	r0, r6, r0
 800104a:	189b      	adds	r3, r3, r2
 800104c:	4281      	cmp	r1, r0
 800104e:	d306      	bcc.n	800105e <__aeabi_ddiv+0x3ee>
 8001050:	d002      	beq.n	8001058 <__aeabi_ddiv+0x3e8>
 8001052:	2301      	movs	r3, #1
 8001054:	431d      	orrs	r5, r3
 8001056:	e6ce      	b.n	8000df6 <__aeabi_ddiv+0x186>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x3ee>
 800105c:	e6cb      	b.n	8000df6 <__aeabi_ddiv+0x186>
 800105e:	1861      	adds	r1, r4, r1
 8001060:	1e6e      	subs	r6, r5, #1
 8001062:	42a1      	cmp	r1, r4
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x3f8>
 8001066:	e0a4      	b.n	80011b2 <__aeabi_ddiv+0x542>
 8001068:	4281      	cmp	r1, r0
 800106a:	d200      	bcs.n	800106e <__aeabi_ddiv+0x3fe>
 800106c:	e0c9      	b.n	8001202 <__aeabi_ddiv+0x592>
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0x402>
 8001070:	e0d9      	b.n	8001226 <__aeabi_ddiv+0x5b6>
 8001072:	0035      	movs	r5, r6
 8001074:	e7ed      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 8001076:	2501      	movs	r5, #1
 8001078:	426d      	negs	r5, r5
 800107a:	2101      	movs	r1, #1
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	2938      	cmp	r1, #56	; 0x38
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x414>
 8001082:	e64c      	b.n	8000d1e <__aeabi_ddiv+0xae>
 8001084:	291f      	cmp	r1, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_ddiv+0x41a>
 8001088:	e07f      	b.n	800118a <__aeabi_ddiv+0x51a>
 800108a:	231f      	movs	r3, #31
 800108c:	425b      	negs	r3, r3
 800108e:	1a9a      	subs	r2, r3, r2
 8001090:	4643      	mov	r3, r8
 8001092:	40d3      	lsrs	r3, r2
 8001094:	2920      	cmp	r1, #32
 8001096:	d004      	beq.n	80010a2 <__aeabi_ddiv+0x432>
 8001098:	4644      	mov	r4, r8
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <__aeabi_ddiv+0x5c0>)
 800109c:	445a      	add	r2, fp
 800109e:	4094      	lsls	r4, r2
 80010a0:	4325      	orrs	r5, r4
 80010a2:	1e6a      	subs	r2, r5, #1
 80010a4:	4195      	sbcs	r5, r2
 80010a6:	2207      	movs	r2, #7
 80010a8:	432b      	orrs	r3, r5
 80010aa:	0015      	movs	r5, r2
 80010ac:	2400      	movs	r4, #0
 80010ae:	401d      	ands	r5, r3
 80010b0:	421a      	tst	r2, r3
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x446>
 80010b4:	e0a1      	b.n	80011fa <__aeabi_ddiv+0x58a>
 80010b6:	220f      	movs	r2, #15
 80010b8:	2400      	movs	r4, #0
 80010ba:	401a      	ands	r2, r3
 80010bc:	2a04      	cmp	r2, #4
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x452>
 80010c0:	e098      	b.n	80011f4 <__aeabi_ddiv+0x584>
 80010c2:	1d1a      	adds	r2, r3, #4
 80010c4:	429a      	cmp	r2, r3
 80010c6:	419b      	sbcs	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	18e4      	adds	r4, r4, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	0222      	lsls	r2, r4, #8
 80010d0:	d400      	bmi.n	80010d4 <__aeabi_ddiv+0x464>
 80010d2:	e08f      	b.n	80011f4 <__aeabi_ddiv+0x584>
 80010d4:	2301      	movs	r3, #1
 80010d6:	2400      	movs	r4, #0
 80010d8:	2500      	movs	r5, #0
 80010da:	e623      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 80010dc:	42b5      	cmp	r5, r6
 80010de:	d300      	bcc.n	80010e2 <__aeabi_ddiv+0x472>
 80010e0:	e764      	b.n	8000fac <__aeabi_ddiv+0x33c>
 80010e2:	4643      	mov	r3, r8
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	9b00      	ldr	r3, [sp, #0]
 80010e8:	469c      	mov	ip, r3
 80010ea:	4465      	add	r5, ip
 80010ec:	001f      	movs	r7, r3
 80010ee:	429d      	cmp	r5, r3
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	425b      	negs	r3, r3
 80010f4:	191b      	adds	r3, r3, r4
 80010f6:	18c9      	adds	r1, r1, r3
 80010f8:	428c      	cmp	r4, r1
 80010fa:	d23a      	bcs.n	8001172 <__aeabi_ddiv+0x502>
 80010fc:	4288      	cmp	r0, r1
 80010fe:	d863      	bhi.n	80011c8 <__aeabi_ddiv+0x558>
 8001100:	d060      	beq.n	80011c4 <__aeabi_ddiv+0x554>
 8001102:	4690      	mov	r8, r2
 8001104:	e752      	b.n	8000fac <__aeabi_ddiv+0x33c>
 8001106:	42aa      	cmp	r2, r5
 8001108:	d900      	bls.n	800110c <__aeabi_ddiv+0x49c>
 800110a:	e6ea      	b.n	8000ee2 <__aeabi_ddiv+0x272>
 800110c:	4643      	mov	r3, r8
 800110e:	07de      	lsls	r6, r3, #31
 8001110:	0858      	lsrs	r0, r3, #1
 8001112:	086b      	lsrs	r3, r5, #1
 8001114:	431e      	orrs	r6, r3
 8001116:	07ed      	lsls	r5, r5, #31
 8001118:	e6ea      	b.n	8000ef0 <__aeabi_ddiv+0x280>
 800111a:	4648      	mov	r0, r9
 800111c:	f001 f926 	bl	800236c <__clzsi2>
 8001120:	0001      	movs	r1, r0
 8001122:	0002      	movs	r2, r0
 8001124:	3115      	adds	r1, #21
 8001126:	3220      	adds	r2, #32
 8001128:	291c      	cmp	r1, #28
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x4be>
 800112c:	e61a      	b.n	8000d64 <__aeabi_ddiv+0xf4>
 800112e:	464b      	mov	r3, r9
 8001130:	3808      	subs	r0, #8
 8001132:	4083      	lsls	r3, r0
 8001134:	2500      	movs	r5, #0
 8001136:	4698      	mov	r8, r3
 8001138:	e620      	b.n	8000d7c <__aeabi_ddiv+0x10c>
 800113a:	f001 f917 	bl	800236c <__clzsi2>
 800113e:	0003      	movs	r3, r0
 8001140:	001a      	movs	r2, r3
 8001142:	3215      	adds	r2, #21
 8001144:	3020      	adds	r0, #32
 8001146:	2a1c      	cmp	r2, #28
 8001148:	dc00      	bgt.n	800114c <__aeabi_ddiv+0x4dc>
 800114a:	e630      	b.n	8000dae <__aeabi_ddiv+0x13e>
 800114c:	4654      	mov	r4, sl
 800114e:	3b08      	subs	r3, #8
 8001150:	2200      	movs	r2, #0
 8001152:	409c      	lsls	r4, r3
 8001154:	e635      	b.n	8000dc2 <__aeabi_ddiv+0x152>
 8001156:	230f      	movs	r3, #15
 8001158:	402b      	ands	r3, r5
 800115a:	2b04      	cmp	r3, #4
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x4f0>
 800115e:	e652      	b.n	8000e06 <__aeabi_ddiv+0x196>
 8001160:	2305      	movs	r3, #5
 8001162:	425b      	negs	r3, r3
 8001164:	42ab      	cmp	r3, r5
 8001166:	419b      	sbcs	r3, r3
 8001168:	3504      	adds	r5, #4
 800116a:	425b      	negs	r3, r3
 800116c:	08ed      	lsrs	r5, r5, #3
 800116e:	4498      	add	r8, r3
 8001170:	e64a      	b.n	8000e08 <__aeabi_ddiv+0x198>
 8001172:	428c      	cmp	r4, r1
 8001174:	d1c5      	bne.n	8001102 <__aeabi_ddiv+0x492>
 8001176:	42af      	cmp	r7, r5
 8001178:	d9c0      	bls.n	80010fc <__aeabi_ddiv+0x48c>
 800117a:	4690      	mov	r8, r2
 800117c:	e716      	b.n	8000fac <__aeabi_ddiv+0x33c>
 800117e:	428a      	cmp	r2, r1
 8001180:	d800      	bhi.n	8001184 <__aeabi_ddiv+0x514>
 8001182:	e6ea      	b.n	8000f5a <__aeabi_ddiv+0x2ea>
 8001184:	1e83      	subs	r3, r0, #2
 8001186:	1909      	adds	r1, r1, r4
 8001188:	e6e7      	b.n	8000f5a <__aeabi_ddiv+0x2ea>
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <__aeabi_ddiv+0x5c4>)
 800118c:	0028      	movs	r0, r5
 800118e:	445a      	add	r2, fp
 8001190:	4643      	mov	r3, r8
 8001192:	4095      	lsls	r5, r2
 8001194:	4093      	lsls	r3, r2
 8001196:	40c8      	lsrs	r0, r1
 8001198:	1e6a      	subs	r2, r5, #1
 800119a:	4195      	sbcs	r5, r2
 800119c:	4644      	mov	r4, r8
 800119e:	4303      	orrs	r3, r0
 80011a0:	432b      	orrs	r3, r5
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	075a      	lsls	r2, r3, #29
 80011a6:	d092      	beq.n	80010ce <__aeabi_ddiv+0x45e>
 80011a8:	220f      	movs	r2, #15
 80011aa:	401a      	ands	r2, r3
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d188      	bne.n	80010c2 <__aeabi_ddiv+0x452>
 80011b0:	e78d      	b.n	80010ce <__aeabi_ddiv+0x45e>
 80011b2:	0035      	movs	r5, r6
 80011b4:	4281      	cmp	r1, r0
 80011b6:	d000      	beq.n	80011ba <__aeabi_ddiv+0x54a>
 80011b8:	e74b      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d000      	beq.n	80011c2 <__aeabi_ddiv+0x552>
 80011c0:	e747      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 80011c2:	e618      	b.n	8000df6 <__aeabi_ddiv+0x186>
 80011c4:	42ae      	cmp	r6, r5
 80011c6:	d99c      	bls.n	8001102 <__aeabi_ddiv+0x492>
 80011c8:	2302      	movs	r3, #2
 80011ca:	425b      	negs	r3, r3
 80011cc:	469c      	mov	ip, r3
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	44e0      	add	r8, ip
 80011d2:	469c      	mov	ip, r3
 80011d4:	4465      	add	r5, ip
 80011d6:	429d      	cmp	r5, r3
 80011d8:	419b      	sbcs	r3, r3
 80011da:	425b      	negs	r3, r3
 80011dc:	191b      	adds	r3, r3, r4
 80011de:	18c9      	adds	r1, r1, r3
 80011e0:	e6e4      	b.n	8000fac <__aeabi_ddiv+0x33c>
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <__aeabi_ddiv+0x5c8>)
 80011e4:	445a      	add	r2, fp
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	dc00      	bgt.n	80011ec <__aeabi_ddiv+0x57c>
 80011ea:	e744      	b.n	8001076 <__aeabi_ddiv+0x406>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2500      	movs	r5, #0
 80011f0:	4498      	add	r8, r3
 80011f2:	e609      	b.n	8000e08 <__aeabi_ddiv+0x198>
 80011f4:	0765      	lsls	r5, r4, #29
 80011f6:	0264      	lsls	r4, r4, #9
 80011f8:	0b24      	lsrs	r4, r4, #12
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	431d      	orrs	r5, r3
 80011fe:	2300      	movs	r3, #0
 8001200:	e590      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8001202:	9e00      	ldr	r6, [sp, #0]
 8001204:	3d02      	subs	r5, #2
 8001206:	0072      	lsls	r2, r6, #1
 8001208:	42b2      	cmp	r2, r6
 800120a:	41bf      	sbcs	r7, r7
 800120c:	427f      	negs	r7, r7
 800120e:	193c      	adds	r4, r7, r4
 8001210:	1909      	adds	r1, r1, r4
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	e7ce      	b.n	80011b4 <__aeabi_ddiv+0x544>
 8001216:	2480      	movs	r4, #128	; 0x80
 8001218:	4643      	mov	r3, r8
 800121a:	0324      	lsls	r4, r4, #12
 800121c:	431c      	orrs	r4, r3
 800121e:	0324      	lsls	r4, r4, #12
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <__aeabi_ddiv+0x5cc>)
 8001222:	0b24      	lsrs	r4, r4, #12
 8001224:	e57e      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8001226:	9a00      	ldr	r2, [sp, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3ea      	bcc.n	8001202 <__aeabi_ddiv+0x592>
 800122c:	0035      	movs	r5, r6
 800122e:	e7c4      	b.n	80011ba <__aeabi_ddiv+0x54a>
 8001230:	0000043e 	.word	0x0000043e
 8001234:	0000041e 	.word	0x0000041e
 8001238:	000003ff 	.word	0x000003ff
 800123c:	000007ff 	.word	0x000007ff

08001240 <__eqdf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	464f      	mov	r7, r9
 8001244:	4646      	mov	r6, r8
 8001246:	46d6      	mov	lr, sl
 8001248:	4694      	mov	ip, r2
 800124a:	4691      	mov	r9, r2
 800124c:	031a      	lsls	r2, r3, #12
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	4d18      	ldr	r5, [pc, #96]	; (80012b4 <__eqdf2+0x74>)
 8001252:	b5c0      	push	{r6, r7, lr}
 8001254:	004c      	lsls	r4, r1, #1
 8001256:	030f      	lsls	r7, r1, #12
 8001258:	4692      	mov	sl, r2
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	0006      	movs	r6, r0
 800125e:	4680      	mov	r8, r0
 8001260:	0b3f      	lsrs	r7, r7, #12
 8001262:	2001      	movs	r0, #1
 8001264:	0d64      	lsrs	r4, r4, #21
 8001266:	0fc9      	lsrs	r1, r1, #31
 8001268:	0d52      	lsrs	r2, r2, #21
 800126a:	0fdb      	lsrs	r3, r3, #31
 800126c:	42ac      	cmp	r4, r5
 800126e:	d00a      	beq.n	8001286 <__eqdf2+0x46>
 8001270:	42aa      	cmp	r2, r5
 8001272:	d003      	beq.n	800127c <__eqdf2+0x3c>
 8001274:	4294      	cmp	r4, r2
 8001276:	d101      	bne.n	800127c <__eqdf2+0x3c>
 8001278:	4557      	cmp	r7, sl
 800127a:	d00d      	beq.n	8001298 <__eqdf2+0x58>
 800127c:	bce0      	pop	{r5, r6, r7}
 800127e:	46ba      	mov	sl, r7
 8001280:	46b1      	mov	r9, r6
 8001282:	46a8      	mov	r8, r5
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	003d      	movs	r5, r7
 8001288:	4335      	orrs	r5, r6
 800128a:	d1f7      	bne.n	800127c <__eqdf2+0x3c>
 800128c:	42a2      	cmp	r2, r4
 800128e:	d1f5      	bne.n	800127c <__eqdf2+0x3c>
 8001290:	4652      	mov	r2, sl
 8001292:	4665      	mov	r5, ip
 8001294:	432a      	orrs	r2, r5
 8001296:	d1f1      	bne.n	800127c <__eqdf2+0x3c>
 8001298:	2001      	movs	r0, #1
 800129a:	45c8      	cmp	r8, r9
 800129c:	d1ee      	bne.n	800127c <__eqdf2+0x3c>
 800129e:	4299      	cmp	r1, r3
 80012a0:	d006      	beq.n	80012b0 <__eqdf2+0x70>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d1ea      	bne.n	800127c <__eqdf2+0x3c>
 80012a6:	433e      	orrs	r6, r7
 80012a8:	0030      	movs	r0, r6
 80012aa:	1e46      	subs	r6, r0, #1
 80012ac:	41b0      	sbcs	r0, r6
 80012ae:	e7e5      	b.n	800127c <__eqdf2+0x3c>
 80012b0:	2000      	movs	r0, #0
 80012b2:	e7e3      	b.n	800127c <__eqdf2+0x3c>
 80012b4:	000007ff 	.word	0x000007ff

080012b8 <__gedf2>:
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	464e      	mov	r6, r9
 80012bc:	4645      	mov	r5, r8
 80012be:	4657      	mov	r7, sl
 80012c0:	46de      	mov	lr, fp
 80012c2:	0004      	movs	r4, r0
 80012c4:	0018      	movs	r0, r3
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	0016      	movs	r6, r2
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	0b1b      	lsrs	r3, r3, #12
 80012ce:	4d32      	ldr	r5, [pc, #200]	; (8001398 <__gedf2+0xe0>)
 80012d0:	030f      	lsls	r7, r1, #12
 80012d2:	004a      	lsls	r2, r1, #1
 80012d4:	4699      	mov	r9, r3
 80012d6:	0043      	lsls	r3, r0, #1
 80012d8:	46a4      	mov	ip, r4
 80012da:	46b0      	mov	r8, r6
 80012dc:	0b3f      	lsrs	r7, r7, #12
 80012de:	0d52      	lsrs	r2, r2, #21
 80012e0:	0fc9      	lsrs	r1, r1, #31
 80012e2:	0d5b      	lsrs	r3, r3, #21
 80012e4:	0fc0      	lsrs	r0, r0, #31
 80012e6:	42aa      	cmp	r2, r5
 80012e8:	d029      	beq.n	800133e <__gedf2+0x86>
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	d018      	beq.n	8001320 <__gedf2+0x68>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d12a      	bne.n	8001348 <__gedf2+0x90>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	46a3      	mov	fp, r4
 80012f6:	4265      	negs	r5, r4
 80012f8:	4165      	adcs	r5, r4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <__gedf2+0x4c>
 80012fe:	464c      	mov	r4, r9
 8001300:	4326      	orrs	r6, r4
 8001302:	d027      	beq.n	8001354 <__gedf2+0x9c>
 8001304:	2d00      	cmp	r5, #0
 8001306:	d115      	bne.n	8001334 <__gedf2+0x7c>
 8001308:	4281      	cmp	r1, r0
 800130a:	d028      	beq.n	800135e <__gedf2+0xa6>
 800130c:	2002      	movs	r0, #2
 800130e:	3901      	subs	r1, #1
 8001310:	4008      	ands	r0, r1
 8001312:	3801      	subs	r0, #1
 8001314:	bcf0      	pop	{r4, r5, r6, r7}
 8001316:	46bb      	mov	fp, r7
 8001318:	46b2      	mov	sl, r6
 800131a:	46a9      	mov	r9, r5
 800131c:	46a0      	mov	r8, r4
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	464d      	mov	r5, r9
 8001322:	432e      	orrs	r6, r5
 8001324:	d12f      	bne.n	8001386 <__gedf2+0xce>
 8001326:	2a00      	cmp	r2, #0
 8001328:	d1ee      	bne.n	8001308 <__gedf2+0x50>
 800132a:	433c      	orrs	r4, r7
 800132c:	4265      	negs	r5, r4
 800132e:	4165      	adcs	r5, r4
 8001330:	2d00      	cmp	r5, #0
 8001332:	d0e9      	beq.n	8001308 <__gedf2+0x50>
 8001334:	2800      	cmp	r0, #0
 8001336:	d1ed      	bne.n	8001314 <__gedf2+0x5c>
 8001338:	2001      	movs	r0, #1
 800133a:	4240      	negs	r0, r0
 800133c:	e7ea      	b.n	8001314 <__gedf2+0x5c>
 800133e:	003d      	movs	r5, r7
 8001340:	4325      	orrs	r5, r4
 8001342:	d120      	bne.n	8001386 <__gedf2+0xce>
 8001344:	4293      	cmp	r3, r2
 8001346:	d0eb      	beq.n	8001320 <__gedf2+0x68>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1dd      	bne.n	8001308 <__gedf2+0x50>
 800134c:	464c      	mov	r4, r9
 800134e:	4326      	orrs	r6, r4
 8001350:	d1da      	bne.n	8001308 <__gedf2+0x50>
 8001352:	e7db      	b.n	800130c <__gedf2+0x54>
 8001354:	465b      	mov	r3, fp
 8001356:	2000      	movs	r0, #0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0db      	beq.n	8001314 <__gedf2+0x5c>
 800135c:	e7d6      	b.n	800130c <__gedf2+0x54>
 800135e:	429a      	cmp	r2, r3
 8001360:	dc0a      	bgt.n	8001378 <__gedf2+0xc0>
 8001362:	dbe7      	blt.n	8001334 <__gedf2+0x7c>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8d1      	bhi.n	800130c <__gedf2+0x54>
 8001368:	d010      	beq.n	800138c <__gedf2+0xd4>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2d1      	bcs.n	8001314 <__gedf2+0x5c>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e1      	beq.n	8001338 <__gedf2+0x80>
 8001374:	0008      	movs	r0, r1
 8001376:	e7cd      	b.n	8001314 <__gedf2+0x5c>
 8001378:	4243      	negs	r3, r0
 800137a:	4158      	adcs	r0, r3
 800137c:	2302      	movs	r3, #2
 800137e:	4240      	negs	r0, r0
 8001380:	4018      	ands	r0, r3
 8001382:	3801      	subs	r0, #1
 8001384:	e7c6      	b.n	8001314 <__gedf2+0x5c>
 8001386:	2002      	movs	r0, #2
 8001388:	4240      	negs	r0, r0
 800138a:	e7c3      	b.n	8001314 <__gedf2+0x5c>
 800138c:	45c4      	cmp	ip, r8
 800138e:	d8bd      	bhi.n	800130c <__gedf2+0x54>
 8001390:	2000      	movs	r0, #0
 8001392:	45c4      	cmp	ip, r8
 8001394:	d2be      	bcs.n	8001314 <__gedf2+0x5c>
 8001396:	e7eb      	b.n	8001370 <__gedf2+0xb8>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__ledf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	464e      	mov	r6, r9
 80013a0:	4645      	mov	r5, r8
 80013a2:	4657      	mov	r7, sl
 80013a4:	46de      	mov	lr, fp
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	0016      	movs	r6, r2
 80013ae:	031b      	lsls	r3, r3, #12
 80013b0:	0b1b      	lsrs	r3, r3, #12
 80013b2:	4d31      	ldr	r5, [pc, #196]	; (8001478 <__ledf2+0xdc>)
 80013b4:	030f      	lsls	r7, r1, #12
 80013b6:	004a      	lsls	r2, r1, #1
 80013b8:	4699      	mov	r9, r3
 80013ba:	0043      	lsls	r3, r0, #1
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d011      	beq.n	80013f2 <__ledf2+0x56>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d014      	beq.n	80013fc <__ledf2+0x60>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d12f      	bne.n	8001436 <__ledf2+0x9a>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	46a3      	mov	fp, r4
 80013da:	4265      	negs	r5, r4
 80013dc:	4165      	adcs	r5, r4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d114      	bne.n	800140c <__ledf2+0x70>
 80013e2:	464c      	mov	r4, r9
 80013e4:	4326      	orrs	r6, r4
 80013e6:	d111      	bne.n	800140c <__ledf2+0x70>
 80013e8:	465b      	mov	r3, fp
 80013ea:	2000      	movs	r0, #0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d017      	beq.n	8001420 <__ledf2+0x84>
 80013f0:	e010      	b.n	8001414 <__ledf2+0x78>
 80013f2:	003d      	movs	r5, r7
 80013f4:	4325      	orrs	r5, r4
 80013f6:	d112      	bne.n	800141e <__ledf2+0x82>
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d11c      	bne.n	8001436 <__ledf2+0x9a>
 80013fc:	464d      	mov	r5, r9
 80013fe:	432e      	orrs	r6, r5
 8001400:	d10d      	bne.n	800141e <__ledf2+0x82>
 8001402:	2a00      	cmp	r2, #0
 8001404:	d104      	bne.n	8001410 <__ledf2+0x74>
 8001406:	433c      	orrs	r4, r7
 8001408:	4265      	negs	r5, r4
 800140a:	4165      	adcs	r5, r4
 800140c:	2d00      	cmp	r5, #0
 800140e:	d10d      	bne.n	800142c <__ledf2+0x90>
 8001410:	4281      	cmp	r1, r0
 8001412:	d016      	beq.n	8001442 <__ledf2+0xa6>
 8001414:	2002      	movs	r0, #2
 8001416:	3901      	subs	r1, #1
 8001418:	4008      	ands	r0, r1
 800141a:	3801      	subs	r0, #1
 800141c:	e000      	b.n	8001420 <__ledf2+0x84>
 800141e:	2002      	movs	r0, #2
 8001420:	bcf0      	pop	{r4, r5, r6, r7}
 8001422:	46bb      	mov	fp, r7
 8001424:	46b2      	mov	sl, r6
 8001426:	46a9      	mov	r9, r5
 8001428:	46a0      	mov	r8, r4
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f7      	bne.n	8001420 <__ledf2+0x84>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7f4      	b.n	8001420 <__ledf2+0x84>
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ea      	bne.n	8001410 <__ledf2+0x74>
 800143a:	464c      	mov	r4, r9
 800143c:	4326      	orrs	r6, r4
 800143e:	d1e7      	bne.n	8001410 <__ledf2+0x74>
 8001440:	e7e8      	b.n	8001414 <__ledf2+0x78>
 8001442:	429a      	cmp	r2, r3
 8001444:	dd06      	ble.n	8001454 <__ledf2+0xb8>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	2302      	movs	r3, #2
 800144c:	4240      	negs	r0, r0
 800144e:	4018      	ands	r0, r3
 8001450:	3801      	subs	r0, #1
 8001452:	e7e5      	b.n	8001420 <__ledf2+0x84>
 8001454:	429a      	cmp	r2, r3
 8001456:	dbe9      	blt.n	800142c <__ledf2+0x90>
 8001458:	454f      	cmp	r7, r9
 800145a:	d8db      	bhi.n	8001414 <__ledf2+0x78>
 800145c:	d006      	beq.n	800146c <__ledf2+0xd0>
 800145e:	2000      	movs	r0, #0
 8001460:	454f      	cmp	r7, r9
 8001462:	d2dd      	bcs.n	8001420 <__ledf2+0x84>
 8001464:	2900      	cmp	r1, #0
 8001466:	d0e3      	beq.n	8001430 <__ledf2+0x94>
 8001468:	0008      	movs	r0, r1
 800146a:	e7d9      	b.n	8001420 <__ledf2+0x84>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8d1      	bhi.n	8001414 <__ledf2+0x78>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d2d4      	bcs.n	8001420 <__ledf2+0x84>
 8001476:	e7f5      	b.n	8001464 <__ledf2+0xc8>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__aeabi_dmul>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	4698      	mov	r8, r3
 800148a:	030c      	lsls	r4, r1, #12
 800148c:	004b      	lsls	r3, r1, #1
 800148e:	0006      	movs	r6, r0
 8001490:	4692      	mov	sl, r2
 8001492:	b087      	sub	sp, #28
 8001494:	0b24      	lsrs	r4, r4, #12
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	0fcf      	lsrs	r7, r1, #31
 800149a:	2b00      	cmp	r3, #0
 800149c:	d06c      	beq.n	8001578 <__aeabi_dmul+0xfc>
 800149e:	4add      	ldr	r2, [pc, #884]	; (8001814 <__aeabi_dmul+0x398>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dmul+0x2a>
 80014a4:	e086      	b.n	80015b4 <__aeabi_dmul+0x138>
 80014a6:	0f42      	lsrs	r2, r0, #29
 80014a8:	00e4      	lsls	r4, r4, #3
 80014aa:	4314      	orrs	r4, r2
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0412      	lsls	r2, r2, #16
 80014b0:	4314      	orrs	r4, r2
 80014b2:	4ad9      	ldr	r2, [pc, #868]	; (8001818 <__aeabi_dmul+0x39c>)
 80014b4:	00c5      	lsls	r5, r0, #3
 80014b6:	4694      	mov	ip, r2
 80014b8:	4463      	add	r3, ip
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	4699      	mov	r9, r3
 80014c0:	469b      	mov	fp, r3
 80014c2:	4643      	mov	r3, r8
 80014c4:	4642      	mov	r2, r8
 80014c6:	031e      	lsls	r6, r3, #12
 80014c8:	0fd2      	lsrs	r2, r2, #31
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4650      	mov	r0, sl
 80014ce:	4690      	mov	r8, r2
 80014d0:	0b36      	lsrs	r6, r6, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dmul+0x5c>
 80014d6:	e078      	b.n	80015ca <__aeabi_dmul+0x14e>
 80014d8:	4ace      	ldr	r2, [pc, #824]	; (8001814 <__aeabi_dmul+0x398>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <__aeabi_dmul+0x9e>
 80014de:	49ce      	ldr	r1, [pc, #824]	; (8001818 <__aeabi_dmul+0x39c>)
 80014e0:	0f42      	lsrs	r2, r0, #29
 80014e2:	468c      	mov	ip, r1
 80014e4:	9900      	ldr	r1, [sp, #0]
 80014e6:	4463      	add	r3, ip
 80014e8:	00f6      	lsls	r6, r6, #3
 80014ea:	468c      	mov	ip, r1
 80014ec:	4316      	orrs	r6, r2
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	449c      	add	ip, r3
 80014f2:	0412      	lsls	r2, r2, #16
 80014f4:	4663      	mov	r3, ip
 80014f6:	4316      	orrs	r6, r2
 80014f8:	00c2      	lsls	r2, r0, #3
 80014fa:	2000      	movs	r0, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	9900      	ldr	r1, [sp, #0]
 8001500:	4643      	mov	r3, r8
 8001502:	3101      	adds	r1, #1
 8001504:	468c      	mov	ip, r1
 8001506:	4649      	mov	r1, r9
 8001508:	407b      	eors	r3, r7
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	290f      	cmp	r1, #15
 800150e:	d900      	bls.n	8001512 <__aeabi_dmul+0x96>
 8001510:	e07e      	b.n	8001610 <__aeabi_dmul+0x194>
 8001512:	4bc2      	ldr	r3, [pc, #776]	; (800181c <__aeabi_dmul+0x3a0>)
 8001514:	0089      	lsls	r1, r1, #2
 8001516:	5859      	ldr	r1, [r3, r1]
 8001518:	468f      	mov	pc, r1
 800151a:	4652      	mov	r2, sl
 800151c:	9b00      	ldr	r3, [sp, #0]
 800151e:	4332      	orrs	r2, r6
 8001520:	d000      	beq.n	8001524 <__aeabi_dmul+0xa8>
 8001522:	e156      	b.n	80017d2 <__aeabi_dmul+0x356>
 8001524:	49bb      	ldr	r1, [pc, #748]	; (8001814 <__aeabi_dmul+0x398>)
 8001526:	2600      	movs	r6, #0
 8001528:	468c      	mov	ip, r1
 800152a:	4463      	add	r3, ip
 800152c:	4649      	mov	r1, r9
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	4319      	orrs	r1, r3
 8001534:	4689      	mov	r9, r1
 8001536:	2002      	movs	r0, #2
 8001538:	e7e1      	b.n	80014fe <__aeabi_dmul+0x82>
 800153a:	4643      	mov	r3, r8
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	0034      	movs	r4, r6
 8001540:	0015      	movs	r5, r2
 8001542:	4683      	mov	fp, r0
 8001544:	465b      	mov	r3, fp
 8001546:	2b02      	cmp	r3, #2
 8001548:	d05e      	beq.n	8001608 <__aeabi_dmul+0x18c>
 800154a:	2b03      	cmp	r3, #3
 800154c:	d100      	bne.n	8001550 <__aeabi_dmul+0xd4>
 800154e:	e1f3      	b.n	8001938 <__aeabi_dmul+0x4bc>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d000      	beq.n	8001556 <__aeabi_dmul+0xda>
 8001554:	e118      	b.n	8001788 <__aeabi_dmul+0x30c>
 8001556:	2200      	movs	r2, #0
 8001558:	2400      	movs	r4, #0
 800155a:	2500      	movs	r5, #0
 800155c:	9b01      	ldr	r3, [sp, #4]
 800155e:	0512      	lsls	r2, r2, #20
 8001560:	4322      	orrs	r2, r4
 8001562:	07db      	lsls	r3, r3, #31
 8001564:	431a      	orrs	r2, r3
 8001566:	0028      	movs	r0, r5
 8001568:	0011      	movs	r1, r2
 800156a:	b007      	add	sp, #28
 800156c:	bcf0      	pop	{r4, r5, r6, r7}
 800156e:	46bb      	mov	fp, r7
 8001570:	46b2      	mov	sl, r6
 8001572:	46a9      	mov	r9, r5
 8001574:	46a0      	mov	r8, r4
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	0025      	movs	r5, r4
 800157a:	4305      	orrs	r5, r0
 800157c:	d100      	bne.n	8001580 <__aeabi_dmul+0x104>
 800157e:	e141      	b.n	8001804 <__aeabi_dmul+0x388>
 8001580:	2c00      	cmp	r4, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dmul+0x10a>
 8001584:	e1ad      	b.n	80018e2 <__aeabi_dmul+0x466>
 8001586:	0020      	movs	r0, r4
 8001588:	f000 fef0 	bl	800236c <__clzsi2>
 800158c:	0001      	movs	r1, r0
 800158e:	0002      	movs	r2, r0
 8001590:	390b      	subs	r1, #11
 8001592:	231d      	movs	r3, #29
 8001594:	0010      	movs	r0, r2
 8001596:	1a5b      	subs	r3, r3, r1
 8001598:	0031      	movs	r1, r6
 800159a:	0035      	movs	r5, r6
 800159c:	3808      	subs	r0, #8
 800159e:	4084      	lsls	r4, r0
 80015a0:	40d9      	lsrs	r1, r3
 80015a2:	4085      	lsls	r5, r0
 80015a4:	430c      	orrs	r4, r1
 80015a6:	489e      	ldr	r0, [pc, #632]	; (8001820 <__aeabi_dmul+0x3a4>)
 80015a8:	1a83      	subs	r3, r0, r2
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	4699      	mov	r9, r3
 80015b0:	469b      	mov	fp, r3
 80015b2:	e786      	b.n	80014c2 <__aeabi_dmul+0x46>
 80015b4:	0005      	movs	r5, r0
 80015b6:	4325      	orrs	r5, r4
 80015b8:	d000      	beq.n	80015bc <__aeabi_dmul+0x140>
 80015ba:	e11c      	b.n	80017f6 <__aeabi_dmul+0x37a>
 80015bc:	2208      	movs	r2, #8
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2302      	movs	r3, #2
 80015c2:	2400      	movs	r4, #0
 80015c4:	4691      	mov	r9, r2
 80015c6:	469b      	mov	fp, r3
 80015c8:	e77b      	b.n	80014c2 <__aeabi_dmul+0x46>
 80015ca:	4652      	mov	r2, sl
 80015cc:	4332      	orrs	r2, r6
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x156>
 80015d0:	e10a      	b.n	80017e8 <__aeabi_dmul+0x36c>
 80015d2:	2e00      	cmp	r6, #0
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dmul+0x15c>
 80015d6:	e176      	b.n	80018c6 <__aeabi_dmul+0x44a>
 80015d8:	0030      	movs	r0, r6
 80015da:	f000 fec7 	bl	800236c <__clzsi2>
 80015de:	0002      	movs	r2, r0
 80015e0:	3a0b      	subs	r2, #11
 80015e2:	231d      	movs	r3, #29
 80015e4:	0001      	movs	r1, r0
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	4652      	mov	r2, sl
 80015ea:	3908      	subs	r1, #8
 80015ec:	40da      	lsrs	r2, r3
 80015ee:	408e      	lsls	r6, r1
 80015f0:	4316      	orrs	r6, r2
 80015f2:	4652      	mov	r2, sl
 80015f4:	408a      	lsls	r2, r1
 80015f6:	9b00      	ldr	r3, [sp, #0]
 80015f8:	4989      	ldr	r1, [pc, #548]	; (8001820 <__aeabi_dmul+0x3a4>)
 80015fa:	1a18      	subs	r0, r3, r0
 80015fc:	0003      	movs	r3, r0
 80015fe:	468c      	mov	ip, r1
 8001600:	4463      	add	r3, ip
 8001602:	2000      	movs	r0, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	e77a      	b.n	80014fe <__aeabi_dmul+0x82>
 8001608:	2400      	movs	r4, #0
 800160a:	2500      	movs	r5, #0
 800160c:	4a81      	ldr	r2, [pc, #516]	; (8001814 <__aeabi_dmul+0x398>)
 800160e:	e7a5      	b.n	800155c <__aeabi_dmul+0xe0>
 8001610:	0c2f      	lsrs	r7, r5, #16
 8001612:	042d      	lsls	r5, r5, #16
 8001614:	0c2d      	lsrs	r5, r5, #16
 8001616:	002b      	movs	r3, r5
 8001618:	0c11      	lsrs	r1, r2, #16
 800161a:	0412      	lsls	r2, r2, #16
 800161c:	0c12      	lsrs	r2, r2, #16
 800161e:	4353      	muls	r3, r2
 8001620:	4698      	mov	r8, r3
 8001622:	0013      	movs	r3, r2
 8001624:	0028      	movs	r0, r5
 8001626:	437b      	muls	r3, r7
 8001628:	4699      	mov	r9, r3
 800162a:	4348      	muls	r0, r1
 800162c:	4448      	add	r0, r9
 800162e:	4683      	mov	fp, r0
 8001630:	4640      	mov	r0, r8
 8001632:	000b      	movs	r3, r1
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	4682      	mov	sl, r0
 8001638:	4658      	mov	r0, fp
 800163a:	437b      	muls	r3, r7
 800163c:	4450      	add	r0, sl
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	4581      	cmp	r9, r0
 8001642:	d906      	bls.n	8001652 <__aeabi_dmul+0x1d6>
 8001644:	469a      	mov	sl, r3
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	4699      	mov	r9, r3
 800164c:	44ca      	add	sl, r9
 800164e:	4653      	mov	r3, sl
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	0c03      	lsrs	r3, r0, #16
 8001654:	469b      	mov	fp, r3
 8001656:	4643      	mov	r3, r8
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0400      	lsls	r0, r0, #16
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	4698      	mov	r8, r3
 8001660:	0003      	movs	r3, r0
 8001662:	4443      	add	r3, r8
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	0c33      	lsrs	r3, r6, #16
 8001668:	4699      	mov	r9, r3
 800166a:	002b      	movs	r3, r5
 800166c:	0436      	lsls	r6, r6, #16
 800166e:	0c36      	lsrs	r6, r6, #16
 8001670:	4373      	muls	r3, r6
 8001672:	4698      	mov	r8, r3
 8001674:	0033      	movs	r3, r6
 8001676:	437b      	muls	r3, r7
 8001678:	469a      	mov	sl, r3
 800167a:	464b      	mov	r3, r9
 800167c:	435d      	muls	r5, r3
 800167e:	435f      	muls	r7, r3
 8001680:	4643      	mov	r3, r8
 8001682:	4455      	add	r5, sl
 8001684:	0c18      	lsrs	r0, r3, #16
 8001686:	1940      	adds	r0, r0, r5
 8001688:	4582      	cmp	sl, r0
 800168a:	d903      	bls.n	8001694 <__aeabi_dmul+0x218>
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	469a      	mov	sl, r3
 8001692:	4457      	add	r7, sl
 8001694:	0c05      	lsrs	r5, r0, #16
 8001696:	19eb      	adds	r3, r5, r7
 8001698:	9305      	str	r3, [sp, #20]
 800169a:	4643      	mov	r3, r8
 800169c:	041d      	lsls	r5, r3, #16
 800169e:	0c2d      	lsrs	r5, r5, #16
 80016a0:	0400      	lsls	r0, r0, #16
 80016a2:	1940      	adds	r0, r0, r5
 80016a4:	0c25      	lsrs	r5, r4, #16
 80016a6:	0424      	lsls	r4, r4, #16
 80016a8:	0c24      	lsrs	r4, r4, #16
 80016aa:	0027      	movs	r7, r4
 80016ac:	4357      	muls	r7, r2
 80016ae:	436a      	muls	r2, r5
 80016b0:	4690      	mov	r8, r2
 80016b2:	002a      	movs	r2, r5
 80016b4:	0c3b      	lsrs	r3, r7, #16
 80016b6:	469a      	mov	sl, r3
 80016b8:	434a      	muls	r2, r1
 80016ba:	4361      	muls	r1, r4
 80016bc:	4441      	add	r1, r8
 80016be:	4451      	add	r1, sl
 80016c0:	4483      	add	fp, r0
 80016c2:	4588      	cmp	r8, r1
 80016c4:	d903      	bls.n	80016ce <__aeabi_dmul+0x252>
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	4698      	mov	r8, r3
 80016cc:	4442      	add	r2, r8
 80016ce:	043f      	lsls	r7, r7, #16
 80016d0:	0c0b      	lsrs	r3, r1, #16
 80016d2:	0c3f      	lsrs	r7, r7, #16
 80016d4:	0409      	lsls	r1, r1, #16
 80016d6:	19c9      	adds	r1, r1, r7
 80016d8:	0027      	movs	r7, r4
 80016da:	4698      	mov	r8, r3
 80016dc:	464b      	mov	r3, r9
 80016de:	4377      	muls	r7, r6
 80016e0:	435c      	muls	r4, r3
 80016e2:	436e      	muls	r6, r5
 80016e4:	435d      	muls	r5, r3
 80016e6:	0c3b      	lsrs	r3, r7, #16
 80016e8:	4699      	mov	r9, r3
 80016ea:	19a4      	adds	r4, r4, r6
 80016ec:	444c      	add	r4, r9
 80016ee:	4442      	add	r2, r8
 80016f0:	9503      	str	r5, [sp, #12]
 80016f2:	42a6      	cmp	r6, r4
 80016f4:	d904      	bls.n	8001700 <__aeabi_dmul+0x284>
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	4698      	mov	r8, r3
 80016fc:	4445      	add	r5, r8
 80016fe:	9503      	str	r5, [sp, #12]
 8001700:	9b02      	ldr	r3, [sp, #8]
 8001702:	043f      	lsls	r7, r7, #16
 8001704:	445b      	add	r3, fp
 8001706:	001e      	movs	r6, r3
 8001708:	4283      	cmp	r3, r0
 800170a:	4180      	sbcs	r0, r0
 800170c:	0423      	lsls	r3, r4, #16
 800170e:	4698      	mov	r8, r3
 8001710:	9b05      	ldr	r3, [sp, #20]
 8001712:	0c3f      	lsrs	r7, r7, #16
 8001714:	4447      	add	r7, r8
 8001716:	4698      	mov	r8, r3
 8001718:	1876      	adds	r6, r6, r1
 800171a:	428e      	cmp	r6, r1
 800171c:	4189      	sbcs	r1, r1
 800171e:	4447      	add	r7, r8
 8001720:	4240      	negs	r0, r0
 8001722:	183d      	adds	r5, r7, r0
 8001724:	46a8      	mov	r8, r5
 8001726:	4693      	mov	fp, r2
 8001728:	4249      	negs	r1, r1
 800172a:	468a      	mov	sl, r1
 800172c:	44c3      	add	fp, r8
 800172e:	429f      	cmp	r7, r3
 8001730:	41bf      	sbcs	r7, r7
 8001732:	4580      	cmp	r8, r0
 8001734:	4180      	sbcs	r0, r0
 8001736:	9b03      	ldr	r3, [sp, #12]
 8001738:	44da      	add	sl, fp
 800173a:	4698      	mov	r8, r3
 800173c:	4653      	mov	r3, sl
 800173e:	4240      	negs	r0, r0
 8001740:	427f      	negs	r7, r7
 8001742:	4307      	orrs	r7, r0
 8001744:	0c24      	lsrs	r4, r4, #16
 8001746:	4593      	cmp	fp, r2
 8001748:	4192      	sbcs	r2, r2
 800174a:	458a      	cmp	sl, r1
 800174c:	4189      	sbcs	r1, r1
 800174e:	193f      	adds	r7, r7, r4
 8001750:	0ddc      	lsrs	r4, r3, #23
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	0275      	lsls	r5, r6, #9
 8001756:	431d      	orrs	r5, r3
 8001758:	1e68      	subs	r0, r5, #1
 800175a:	4185      	sbcs	r5, r0
 800175c:	4653      	mov	r3, sl
 800175e:	4252      	negs	r2, r2
 8001760:	4249      	negs	r1, r1
 8001762:	430a      	orrs	r2, r1
 8001764:	18bf      	adds	r7, r7, r2
 8001766:	4447      	add	r7, r8
 8001768:	0df6      	lsrs	r6, r6, #23
 800176a:	027f      	lsls	r7, r7, #9
 800176c:	4335      	orrs	r5, r6
 800176e:	025a      	lsls	r2, r3, #9
 8001770:	433c      	orrs	r4, r7
 8001772:	4315      	orrs	r5, r2
 8001774:	01fb      	lsls	r3, r7, #7
 8001776:	d400      	bmi.n	800177a <__aeabi_dmul+0x2fe>
 8001778:	e0c1      	b.n	80018fe <__aeabi_dmul+0x482>
 800177a:	2101      	movs	r1, #1
 800177c:	086a      	lsrs	r2, r5, #1
 800177e:	400d      	ands	r5, r1
 8001780:	4315      	orrs	r5, r2
 8001782:	07e2      	lsls	r2, r4, #31
 8001784:	4315      	orrs	r5, r2
 8001786:	0864      	lsrs	r4, r4, #1
 8001788:	4926      	ldr	r1, [pc, #152]	; (8001824 <__aeabi_dmul+0x3a8>)
 800178a:	4461      	add	r1, ip
 800178c:	2900      	cmp	r1, #0
 800178e:	dd56      	ble.n	800183e <__aeabi_dmul+0x3c2>
 8001790:	076b      	lsls	r3, r5, #29
 8001792:	d009      	beq.n	80017a8 <__aeabi_dmul+0x32c>
 8001794:	220f      	movs	r2, #15
 8001796:	402a      	ands	r2, r5
 8001798:	2a04      	cmp	r2, #4
 800179a:	d005      	beq.n	80017a8 <__aeabi_dmul+0x32c>
 800179c:	1d2a      	adds	r2, r5, #4
 800179e:	42aa      	cmp	r2, r5
 80017a0:	41ad      	sbcs	r5, r5
 80017a2:	426d      	negs	r5, r5
 80017a4:	1964      	adds	r4, r4, r5
 80017a6:	0015      	movs	r5, r2
 80017a8:	01e3      	lsls	r3, r4, #7
 80017aa:	d504      	bpl.n	80017b6 <__aeabi_dmul+0x33a>
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <__aeabi_dmul+0x3ac>)
 80017b0:	00c9      	lsls	r1, r1, #3
 80017b2:	4014      	ands	r4, r2
 80017b4:	4461      	add	r1, ip
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <__aeabi_dmul+0x3b0>)
 80017b8:	4291      	cmp	r1, r2
 80017ba:	dd00      	ble.n	80017be <__aeabi_dmul+0x342>
 80017bc:	e724      	b.n	8001608 <__aeabi_dmul+0x18c>
 80017be:	0762      	lsls	r2, r4, #29
 80017c0:	08ed      	lsrs	r5, r5, #3
 80017c2:	0264      	lsls	r4, r4, #9
 80017c4:	0549      	lsls	r1, r1, #21
 80017c6:	4315      	orrs	r5, r2
 80017c8:	0b24      	lsrs	r4, r4, #12
 80017ca:	0d4a      	lsrs	r2, r1, #21
 80017cc:	e6c6      	b.n	800155c <__aeabi_dmul+0xe0>
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e6b8      	b.n	8001544 <__aeabi_dmul+0xc8>
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <__aeabi_dmul+0x398>)
 80017d4:	2003      	movs	r0, #3
 80017d6:	4694      	mov	ip, r2
 80017d8:	4463      	add	r3, ip
 80017da:	464a      	mov	r2, r9
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2303      	movs	r3, #3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	4691      	mov	r9, r2
 80017e4:	4652      	mov	r2, sl
 80017e6:	e68a      	b.n	80014fe <__aeabi_dmul+0x82>
 80017e8:	4649      	mov	r1, r9
 80017ea:	2301      	movs	r3, #1
 80017ec:	4319      	orrs	r1, r3
 80017ee:	4689      	mov	r9, r1
 80017f0:	2600      	movs	r6, #0
 80017f2:	2001      	movs	r0, #1
 80017f4:	e683      	b.n	80014fe <__aeabi_dmul+0x82>
 80017f6:	220c      	movs	r2, #12
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2303      	movs	r3, #3
 80017fc:	0005      	movs	r5, r0
 80017fe:	4691      	mov	r9, r2
 8001800:	469b      	mov	fp, r3
 8001802:	e65e      	b.n	80014c2 <__aeabi_dmul+0x46>
 8001804:	2304      	movs	r3, #4
 8001806:	4699      	mov	r9, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	2400      	movs	r4, #0
 8001810:	469b      	mov	fp, r3
 8001812:	e656      	b.n	80014c2 <__aeabi_dmul+0x46>
 8001814:	000007ff 	.word	0x000007ff
 8001818:	fffffc01 	.word	0xfffffc01
 800181c:	0800df60 	.word	0x0800df60
 8001820:	fffffc0d 	.word	0xfffffc0d
 8001824:	000003ff 	.word	0x000003ff
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	000007fe 	.word	0x000007fe
 8001830:	2300      	movs	r3, #0
 8001832:	2480      	movs	r4, #128	; 0x80
 8001834:	2500      	movs	r5, #0
 8001836:	4a44      	ldr	r2, [pc, #272]	; (8001948 <__aeabi_dmul+0x4cc>)
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	0324      	lsls	r4, r4, #12
 800183c:	e68e      	b.n	800155c <__aeabi_dmul+0xe0>
 800183e:	2001      	movs	r0, #1
 8001840:	1a40      	subs	r0, r0, r1
 8001842:	2838      	cmp	r0, #56	; 0x38
 8001844:	dd00      	ble.n	8001848 <__aeabi_dmul+0x3cc>
 8001846:	e686      	b.n	8001556 <__aeabi_dmul+0xda>
 8001848:	281f      	cmp	r0, #31
 800184a:	dd5b      	ble.n	8001904 <__aeabi_dmul+0x488>
 800184c:	221f      	movs	r2, #31
 800184e:	0023      	movs	r3, r4
 8001850:	4252      	negs	r2, r2
 8001852:	1a51      	subs	r1, r2, r1
 8001854:	40cb      	lsrs	r3, r1
 8001856:	0019      	movs	r1, r3
 8001858:	2820      	cmp	r0, #32
 800185a:	d003      	beq.n	8001864 <__aeabi_dmul+0x3e8>
 800185c:	4a3b      	ldr	r2, [pc, #236]	; (800194c <__aeabi_dmul+0x4d0>)
 800185e:	4462      	add	r2, ip
 8001860:	4094      	lsls	r4, r2
 8001862:	4325      	orrs	r5, r4
 8001864:	1e6a      	subs	r2, r5, #1
 8001866:	4195      	sbcs	r5, r2
 8001868:	002a      	movs	r2, r5
 800186a:	430a      	orrs	r2, r1
 800186c:	2107      	movs	r1, #7
 800186e:	000d      	movs	r5, r1
 8001870:	2400      	movs	r4, #0
 8001872:	4015      	ands	r5, r2
 8001874:	4211      	tst	r1, r2
 8001876:	d05b      	beq.n	8001930 <__aeabi_dmul+0x4b4>
 8001878:	210f      	movs	r1, #15
 800187a:	2400      	movs	r4, #0
 800187c:	4011      	ands	r1, r2
 800187e:	2904      	cmp	r1, #4
 8001880:	d053      	beq.n	800192a <__aeabi_dmul+0x4ae>
 8001882:	1d11      	adds	r1, r2, #4
 8001884:	4291      	cmp	r1, r2
 8001886:	4192      	sbcs	r2, r2
 8001888:	4252      	negs	r2, r2
 800188a:	18a4      	adds	r4, r4, r2
 800188c:	000a      	movs	r2, r1
 800188e:	0223      	lsls	r3, r4, #8
 8001890:	d54b      	bpl.n	800192a <__aeabi_dmul+0x4ae>
 8001892:	2201      	movs	r2, #1
 8001894:	2400      	movs	r4, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e660      	b.n	800155c <__aeabi_dmul+0xe0>
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	031b      	lsls	r3, r3, #12
 800189e:	421c      	tst	r4, r3
 80018a0:	d009      	beq.n	80018b6 <__aeabi_dmul+0x43a>
 80018a2:	421e      	tst	r6, r3
 80018a4:	d107      	bne.n	80018b6 <__aeabi_dmul+0x43a>
 80018a6:	4333      	orrs	r3, r6
 80018a8:	031c      	lsls	r4, r3, #12
 80018aa:	4643      	mov	r3, r8
 80018ac:	0015      	movs	r5, r2
 80018ae:	0b24      	lsrs	r4, r4, #12
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <__aeabi_dmul+0x4cc>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	e652      	b.n	800155c <__aeabi_dmul+0xe0>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	0312      	lsls	r2, r2, #12
 80018ba:	4314      	orrs	r4, r2
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <__aeabi_dmul+0x4cc>)
 80018c0:	0b24      	lsrs	r4, r4, #12
 80018c2:	9701      	str	r7, [sp, #4]
 80018c4:	e64a      	b.n	800155c <__aeabi_dmul+0xe0>
 80018c6:	f000 fd51 	bl	800236c <__clzsi2>
 80018ca:	0003      	movs	r3, r0
 80018cc:	001a      	movs	r2, r3
 80018ce:	3215      	adds	r2, #21
 80018d0:	3020      	adds	r0, #32
 80018d2:	2a1c      	cmp	r2, #28
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_dmul+0x45c>
 80018d6:	e684      	b.n	80015e2 <__aeabi_dmul+0x166>
 80018d8:	4656      	mov	r6, sl
 80018da:	3b08      	subs	r3, #8
 80018dc:	2200      	movs	r2, #0
 80018de:	409e      	lsls	r6, r3
 80018e0:	e689      	b.n	80015f6 <__aeabi_dmul+0x17a>
 80018e2:	f000 fd43 	bl	800236c <__clzsi2>
 80018e6:	0001      	movs	r1, r0
 80018e8:	0002      	movs	r2, r0
 80018ea:	3115      	adds	r1, #21
 80018ec:	3220      	adds	r2, #32
 80018ee:	291c      	cmp	r1, #28
 80018f0:	dc00      	bgt.n	80018f4 <__aeabi_dmul+0x478>
 80018f2:	e64e      	b.n	8001592 <__aeabi_dmul+0x116>
 80018f4:	0034      	movs	r4, r6
 80018f6:	3808      	subs	r0, #8
 80018f8:	2500      	movs	r5, #0
 80018fa:	4084      	lsls	r4, r0
 80018fc:	e653      	b.n	80015a6 <__aeabi_dmul+0x12a>
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	469c      	mov	ip, r3
 8001902:	e741      	b.n	8001788 <__aeabi_dmul+0x30c>
 8001904:	4912      	ldr	r1, [pc, #72]	; (8001950 <__aeabi_dmul+0x4d4>)
 8001906:	0022      	movs	r2, r4
 8001908:	4461      	add	r1, ip
 800190a:	002e      	movs	r6, r5
 800190c:	408d      	lsls	r5, r1
 800190e:	408a      	lsls	r2, r1
 8001910:	40c6      	lsrs	r6, r0
 8001912:	1e69      	subs	r1, r5, #1
 8001914:	418d      	sbcs	r5, r1
 8001916:	4332      	orrs	r2, r6
 8001918:	432a      	orrs	r2, r5
 800191a:	40c4      	lsrs	r4, r0
 800191c:	0753      	lsls	r3, r2, #29
 800191e:	d0b6      	beq.n	800188e <__aeabi_dmul+0x412>
 8001920:	210f      	movs	r1, #15
 8001922:	4011      	ands	r1, r2
 8001924:	2904      	cmp	r1, #4
 8001926:	d1ac      	bne.n	8001882 <__aeabi_dmul+0x406>
 8001928:	e7b1      	b.n	800188e <__aeabi_dmul+0x412>
 800192a:	0765      	lsls	r5, r4, #29
 800192c:	0264      	lsls	r4, r4, #9
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	08d2      	lsrs	r2, r2, #3
 8001932:	4315      	orrs	r5, r2
 8001934:	2200      	movs	r2, #0
 8001936:	e611      	b.n	800155c <__aeabi_dmul+0xe0>
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4314      	orrs	r4, r2
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4a01      	ldr	r2, [pc, #4]	; (8001948 <__aeabi_dmul+0x4cc>)
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	e60a      	b.n	800155c <__aeabi_dmul+0xe0>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff
 800194c:	0000043e 	.word	0x0000043e
 8001950:	0000041e 	.word	0x0000041e

08001954 <__aeabi_dsub>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	4657      	mov	r7, sl
 8001958:	464e      	mov	r6, r9
 800195a:	4645      	mov	r5, r8
 800195c:	46de      	mov	lr, fp
 800195e:	0004      	movs	r4, r0
 8001960:	b5e0      	push	{r5, r6, r7, lr}
 8001962:	001f      	movs	r7, r3
 8001964:	0010      	movs	r0, r2
 8001966:	030b      	lsls	r3, r1, #12
 8001968:	0f62      	lsrs	r2, r4, #29
 800196a:	004e      	lsls	r6, r1, #1
 800196c:	0fcd      	lsrs	r5, r1, #31
 800196e:	0a5b      	lsrs	r3, r3, #9
 8001970:	0339      	lsls	r1, r7, #12
 8001972:	4313      	orrs	r3, r2
 8001974:	0a49      	lsrs	r1, r1, #9
 8001976:	00e2      	lsls	r2, r4, #3
 8001978:	0f44      	lsrs	r4, r0, #29
 800197a:	4321      	orrs	r1, r4
 800197c:	4cc2      	ldr	r4, [pc, #776]	; (8001c88 <__aeabi_dsub+0x334>)
 800197e:	4691      	mov	r9, r2
 8001980:	4692      	mov	sl, r2
 8001982:	00c0      	lsls	r0, r0, #3
 8001984:	007a      	lsls	r2, r7, #1
 8001986:	4680      	mov	r8, r0
 8001988:	0d76      	lsrs	r6, r6, #21
 800198a:	0d52      	lsrs	r2, r2, #21
 800198c:	0fff      	lsrs	r7, r7, #31
 800198e:	42a2      	cmp	r2, r4
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x40>
 8001992:	e0b4      	b.n	8001afe <__aeabi_dsub+0x1aa>
 8001994:	2401      	movs	r4, #1
 8001996:	4067      	eors	r7, r4
 8001998:	46bb      	mov	fp, r7
 800199a:	42bd      	cmp	r5, r7
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x4c>
 800199e:	e088      	b.n	8001ab2 <__aeabi_dsub+0x15e>
 80019a0:	1ab4      	subs	r4, r6, r2
 80019a2:	46a4      	mov	ip, r4
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dsub+0x56>
 80019a8:	e0b2      	b.n	8001b10 <__aeabi_dsub+0x1bc>
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x5c>
 80019ae:	e0c5      	b.n	8001b3c <__aeabi_dsub+0x1e8>
 80019b0:	4ab5      	ldr	r2, [pc, #724]	; (8001c88 <__aeabi_dsub+0x334>)
 80019b2:	4296      	cmp	r6, r2
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dsub+0x64>
 80019b6:	e28b      	b.n	8001ed0 <__aeabi_dsub+0x57c>
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0412      	lsls	r2, r2, #16
 80019bc:	4311      	orrs	r1, r2
 80019be:	4662      	mov	r2, ip
 80019c0:	2a38      	cmp	r2, #56	; 0x38
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0x72>
 80019c4:	e1a1      	b.n	8001d0a <__aeabi_dsub+0x3b6>
 80019c6:	2a1f      	cmp	r2, #31
 80019c8:	dd00      	ble.n	80019cc <__aeabi_dsub+0x78>
 80019ca:	e216      	b.n	8001dfa <__aeabi_dsub+0x4a6>
 80019cc:	2720      	movs	r7, #32
 80019ce:	000c      	movs	r4, r1
 80019d0:	1abf      	subs	r7, r7, r2
 80019d2:	40bc      	lsls	r4, r7
 80019d4:	0002      	movs	r2, r0
 80019d6:	46a0      	mov	r8, r4
 80019d8:	4664      	mov	r4, ip
 80019da:	40b8      	lsls	r0, r7
 80019dc:	40e2      	lsrs	r2, r4
 80019de:	4644      	mov	r4, r8
 80019e0:	4314      	orrs	r4, r2
 80019e2:	0002      	movs	r2, r0
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	4660      	mov	r0, ip
 80019ea:	40c1      	lsrs	r1, r0
 80019ec:	4322      	orrs	r2, r4
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	4649      	mov	r1, r9
 80019f2:	1a8c      	subs	r4, r1, r2
 80019f4:	45a1      	cmp	r9, r4
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	4698      	mov	r8, r3
 80019fe:	4643      	mov	r3, r8
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	d400      	bmi.n	8001a06 <__aeabi_dsub+0xb2>
 8001a04:	e117      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001a06:	4643      	mov	r3, r8
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	0a5b      	lsrs	r3, r3, #9
 8001a0c:	4698      	mov	r8, r3
 8001a0e:	4643      	mov	r3, r8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0xc2>
 8001a14:	e16c      	b.n	8001cf0 <__aeabi_dsub+0x39c>
 8001a16:	4640      	mov	r0, r8
 8001a18:	f000 fca8 	bl	800236c <__clzsi2>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	3a08      	subs	r2, #8
 8001a20:	2120      	movs	r1, #32
 8001a22:	0020      	movs	r0, r4
 8001a24:	4643      	mov	r3, r8
 8001a26:	1a89      	subs	r1, r1, r2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	40c8      	lsrs	r0, r1
 8001a2c:	4094      	lsls	r4, r2
 8001a2e:	4303      	orrs	r3, r0
 8001a30:	4296      	cmp	r6, r2
 8001a32:	dd00      	ble.n	8001a36 <__aeabi_dsub+0xe2>
 8001a34:	e157      	b.n	8001ce6 <__aeabi_dsub+0x392>
 8001a36:	1b96      	subs	r6, r2, r6
 8001a38:	1c71      	adds	r1, r6, #1
 8001a3a:	291f      	cmp	r1, #31
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0xec>
 8001a3e:	e1cb      	b.n	8001dd8 <__aeabi_dsub+0x484>
 8001a40:	2220      	movs	r2, #32
 8001a42:	0018      	movs	r0, r3
 8001a44:	0026      	movs	r6, r4
 8001a46:	1a52      	subs	r2, r2, r1
 8001a48:	4094      	lsls	r4, r2
 8001a4a:	4090      	lsls	r0, r2
 8001a4c:	40ce      	lsrs	r6, r1
 8001a4e:	40cb      	lsrs	r3, r1
 8001a50:	1e62      	subs	r2, r4, #1
 8001a52:	4194      	sbcs	r4, r2
 8001a54:	4330      	orrs	r0, r6
 8001a56:	4698      	mov	r8, r3
 8001a58:	2600      	movs	r6, #0
 8001a5a:	4304      	orrs	r4, r0
 8001a5c:	0763      	lsls	r3, r4, #29
 8001a5e:	d009      	beq.n	8001a74 <__aeabi_dsub+0x120>
 8001a60:	230f      	movs	r3, #15
 8001a62:	4023      	ands	r3, r4
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <__aeabi_dsub+0x120>
 8001a68:	1d23      	adds	r3, r4, #4
 8001a6a:	42a3      	cmp	r3, r4
 8001a6c:	41a4      	sbcs	r4, r4
 8001a6e:	4264      	negs	r4, r4
 8001a70:	44a0      	add	r8, r4
 8001a72:	001c      	movs	r4, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0x128>
 8001a7a:	e0df      	b.n	8001c3c <__aeabi_dsub+0x2e8>
 8001a7c:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <__aeabi_dsub+0x334>)
 8001a7e:	3601      	adds	r6, #1
 8001a80:	429e      	cmp	r6, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x132>
 8001a84:	e0fb      	b.n	8001c7e <__aeabi_dsub+0x32a>
 8001a86:	4642      	mov	r2, r8
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <__aeabi_dsub+0x338>)
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	0571      	lsls	r1, r6, #21
 8001a92:	0752      	lsls	r2, r2, #29
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4322      	orrs	r2, r4
 8001a98:	0b1b      	lsrs	r3, r3, #12
 8001a9a:	0d49      	lsrs	r1, r1, #21
 8001a9c:	0509      	lsls	r1, r1, #20
 8001a9e:	07ed      	lsls	r5, r5, #31
 8001aa0:	4319      	orrs	r1, r3
 8001aa2:	4329      	orrs	r1, r5
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa8:	46bb      	mov	fp, r7
 8001aaa:	46b2      	mov	sl, r6
 8001aac:	46a9      	mov	r9, r5
 8001aae:	46a0      	mov	r8, r4
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	1ab4      	subs	r4, r6, r2
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	dd58      	ble.n	8001b6c <__aeabi_dsub+0x218>
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dsub+0x16c>
 8001abe:	e09e      	b.n	8001bfe <__aeabi_dsub+0x2aa>
 8001ac0:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <__aeabi_dsub+0x334>)
 8001ac2:	4296      	cmp	r6, r2
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x174>
 8001ac6:	e13b      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	0412      	lsls	r2, r2, #16
 8001acc:	4311      	orrs	r1, r2
 8001ace:	4662      	mov	r2, ip
 8001ad0:	2a38      	cmp	r2, #56	; 0x38
 8001ad2:	dd00      	ble.n	8001ad6 <__aeabi_dsub+0x182>
 8001ad4:	e0c1      	b.n	8001c5a <__aeabi_dsub+0x306>
 8001ad6:	2a1f      	cmp	r2, #31
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x188>
 8001ada:	e1bb      	b.n	8001e54 <__aeabi_dsub+0x500>
 8001adc:	000c      	movs	r4, r1
 8001ade:	3a20      	subs	r2, #32
 8001ae0:	40d4      	lsrs	r4, r2
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	4664      	mov	r4, ip
 8001ae6:	2c20      	cmp	r4, #32
 8001ae8:	d004      	beq.n	8001af4 <__aeabi_dsub+0x1a0>
 8001aea:	2740      	movs	r7, #64	; 0x40
 8001aec:	1b3f      	subs	r7, r7, r4
 8001aee:	40b9      	lsls	r1, r7
 8001af0:	4308      	orrs	r0, r1
 8001af2:	4680      	mov	r8, r0
 8001af4:	4644      	mov	r4, r8
 8001af6:	1e61      	subs	r1, r4, #1
 8001af8:	418c      	sbcs	r4, r1
 8001afa:	4314      	orrs	r4, r2
 8001afc:	e0b1      	b.n	8001c62 <__aeabi_dsub+0x30e>
 8001afe:	000c      	movs	r4, r1
 8001b00:	4304      	orrs	r4, r0
 8001b02:	d02a      	beq.n	8001b5a <__aeabi_dsub+0x206>
 8001b04:	46bb      	mov	fp, r7
 8001b06:	42bd      	cmp	r5, r7
 8001b08:	d02d      	beq.n	8001b66 <__aeabi_dsub+0x212>
 8001b0a:	4c61      	ldr	r4, [pc, #388]	; (8001c90 <__aeabi_dsub+0x33c>)
 8001b0c:	46a4      	mov	ip, r4
 8001b0e:	44b4      	add	ip, r6
 8001b10:	4664      	mov	r4, ip
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d05c      	beq.n	8001bd0 <__aeabi_dsub+0x27c>
 8001b16:	1b94      	subs	r4, r2, r6
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dsub+0x1cc>
 8001b1e:	e115      	b.n	8001d4c <__aeabi_dsub+0x3f8>
 8001b20:	464d      	mov	r5, r9
 8001b22:	431d      	orrs	r5, r3
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x1d4>
 8001b26:	e1c3      	b.n	8001eb0 <__aeabi_dsub+0x55c>
 8001b28:	1e65      	subs	r5, r4, #1
 8001b2a:	2c01      	cmp	r4, #1
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1dc>
 8001b2e:	e20c      	b.n	8001f4a <__aeabi_dsub+0x5f6>
 8001b30:	4e55      	ldr	r6, [pc, #340]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b32:	42b4      	cmp	r4, r6
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x1e4>
 8001b36:	e1f8      	b.n	8001f2a <__aeabi_dsub+0x5d6>
 8001b38:	46ac      	mov	ip, r5
 8001b3a:	e10e      	b.n	8001d5a <__aeabi_dsub+0x406>
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x1f0>
 8001b42:	e136      	b.n	8001db2 <__aeabi_dsub+0x45e>
 8001b44:	0022      	movs	r2, r4
 8001b46:	3a01      	subs	r2, #1
 8001b48:	2c01      	cmp	r4, #1
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x1fa>
 8001b4c:	e1c6      	b.n	8001edc <__aeabi_dsub+0x588>
 8001b4e:	4c4e      	ldr	r4, [pc, #312]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b50:	45a4      	cmp	ip, r4
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x202>
 8001b54:	e0f4      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001b56:	4694      	mov	ip, r2
 8001b58:	e731      	b.n	80019be <__aeabi_dsub+0x6a>
 8001b5a:	2401      	movs	r4, #1
 8001b5c:	4067      	eors	r7, r4
 8001b5e:	46bb      	mov	fp, r7
 8001b60:	42bd      	cmp	r5, r7
 8001b62:	d000      	beq.n	8001b66 <__aeabi_dsub+0x212>
 8001b64:	e71c      	b.n	80019a0 <__aeabi_dsub+0x4c>
 8001b66:	4c4a      	ldr	r4, [pc, #296]	; (8001c90 <__aeabi_dsub+0x33c>)
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	44b4      	add	ip, r6
 8001b6c:	4664      	mov	r4, ip
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x220>
 8001b72:	e0cf      	b.n	8001d14 <__aeabi_dsub+0x3c0>
 8001b74:	1b94      	subs	r4, r2, r6
 8001b76:	46a4      	mov	ip, r4
 8001b78:	2e00      	cmp	r6, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x22a>
 8001b7c:	e15c      	b.n	8001e38 <__aeabi_dsub+0x4e4>
 8001b7e:	4e42      	ldr	r6, [pc, #264]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b80:	42b2      	cmp	r2, r6
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x232>
 8001b84:	e1ec      	b.n	8001f60 <__aeabi_dsub+0x60c>
 8001b86:	2680      	movs	r6, #128	; 0x80
 8001b88:	0436      	lsls	r6, r6, #16
 8001b8a:	4333      	orrs	r3, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c38      	cmp	r4, #56	; 0x38
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_dsub+0x240>
 8001b92:	e1b3      	b.n	8001efc <__aeabi_dsub+0x5a8>
 8001b94:	2c1f      	cmp	r4, #31
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dsub+0x246>
 8001b98:	e238      	b.n	800200c <__aeabi_dsub+0x6b8>
 8001b9a:	2620      	movs	r6, #32
 8001b9c:	1b36      	subs	r6, r6, r4
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	40b4      	lsls	r4, r6
 8001ba2:	464f      	mov	r7, r9
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	4664      	mov	r4, ip
 8001ba8:	40e7      	lsrs	r7, r4
 8001baa:	4644      	mov	r4, r8
 8001bac:	433c      	orrs	r4, r7
 8001bae:	464f      	mov	r7, r9
 8001bb0:	40b7      	lsls	r7, r6
 8001bb2:	003e      	movs	r6, r7
 8001bb4:	1e77      	subs	r7, r6, #1
 8001bb6:	41be      	sbcs	r6, r7
 8001bb8:	4334      	orrs	r4, r6
 8001bba:	4666      	mov	r6, ip
 8001bbc:	40f3      	lsrs	r3, r6
 8001bbe:	18c9      	adds	r1, r1, r3
 8001bc0:	1824      	adds	r4, r4, r0
 8001bc2:	4284      	cmp	r4, r0
 8001bc4:	419b      	sbcs	r3, r3
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	4698      	mov	r8, r3
 8001bca:	0016      	movs	r6, r2
 8001bcc:	4488      	add	r8, r1
 8001bce:	e04e      	b.n	8001c6e <__aeabi_dsub+0x31a>
 8001bd0:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <__aeabi_dsub+0x340>)
 8001bd2:	1c74      	adds	r4, r6, #1
 8001bd4:	4214      	tst	r4, r2
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x286>
 8001bd8:	e0d6      	b.n	8001d88 <__aeabi_dsub+0x434>
 8001bda:	464a      	mov	r2, r9
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	2e00      	cmp	r6, #0
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x290>
 8001be2:	e15b      	b.n	8001e9c <__aeabi_dsub+0x548>
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x296>
 8001be8:	e1a5      	b.n	8001f36 <__aeabi_dsub+0x5e2>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dsub+0x29e>
 8001bf0:	e1bb      	b.n	8001f6a <__aeabi_dsub+0x616>
 8001bf2:	464a      	mov	r2, r9
 8001bf4:	0759      	lsls	r1, r3, #29
 8001bf6:	08d2      	lsrs	r2, r2, #3
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	e027      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001bfe:	000a      	movs	r2, r1
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x2b2>
 8001c04:	e174      	b.n	8001ef0 <__aeabi_dsub+0x59c>
 8001c06:	0022      	movs	r2, r4
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	d005      	beq.n	8001c1a <__aeabi_dsub+0x2c6>
 8001c0e:	4c1e      	ldr	r4, [pc, #120]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c10:	45a4      	cmp	ip, r4
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x2c2>
 8001c14:	e094      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001c16:	4694      	mov	ip, r2
 8001c18:	e759      	b.n	8001ace <__aeabi_dsub+0x17a>
 8001c1a:	4448      	add	r0, r9
 8001c1c:	4548      	cmp	r0, r9
 8001c1e:	4192      	sbcs	r2, r2
 8001c20:	185b      	adds	r3, r3, r1
 8001c22:	4698      	mov	r8, r3
 8001c24:	0004      	movs	r4, r0
 8001c26:	4252      	negs	r2, r2
 8001c28:	4490      	add	r8, r2
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	2602      	movs	r6, #2
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	d500      	bpl.n	8001c34 <__aeabi_dsub+0x2e0>
 8001c32:	e0c4      	b.n	8001dbe <__aeabi_dsub+0x46a>
 8001c34:	3e01      	subs	r6, #1
 8001c36:	0763      	lsls	r3, r4, #29
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dsub+0x2e8>
 8001c3a:	e711      	b.n	8001a60 <__aeabi_dsub+0x10c>
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	46b4      	mov	ip, r6
 8001c40:	0759      	lsls	r1, r3, #29
 8001c42:	08e2      	lsrs	r2, r4, #3
 8001c44:	430a      	orrs	r2, r1
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	490f      	ldr	r1, [pc, #60]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c4a:	458c      	cmp	ip, r1
 8001c4c:	d040      	beq.n	8001cd0 <__aeabi_dsub+0x37c>
 8001c4e:	4661      	mov	r1, ip
 8001c50:	031b      	lsls	r3, r3, #12
 8001c52:	0549      	lsls	r1, r1, #21
 8001c54:	0b1b      	lsrs	r3, r3, #12
 8001c56:	0d49      	lsrs	r1, r1, #21
 8001c58:	e720      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001c5a:	4301      	orrs	r1, r0
 8001c5c:	000c      	movs	r4, r1
 8001c5e:	1e61      	subs	r1, r4, #1
 8001c60:	418c      	sbcs	r4, r1
 8001c62:	444c      	add	r4, r9
 8001c64:	454c      	cmp	r4, r9
 8001c66:	4192      	sbcs	r2, r2
 8001c68:	4252      	negs	r2, r2
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4498      	add	r8, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	d5e0      	bpl.n	8001c36 <__aeabi_dsub+0x2e2>
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c76:	3601      	adds	r6, #1
 8001c78:	429e      	cmp	r6, r3
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x32a>
 8001c7c:	e09f      	b.n	8001dbe <__aeabi_dsub+0x46a>
 8001c7e:	0031      	movs	r1, r6
 8001c80:	2300      	movs	r3, #0
 8001c82:	2200      	movs	r2, #0
 8001c84:	e70a      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	000007ff 	.word	0x000007ff
 8001c8c:	ff7fffff 	.word	0xff7fffff
 8001c90:	fffff801 	.word	0xfffff801
 8001c94:	000007fe 	.word	0x000007fe
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x34a>
 8001c9c:	e160      	b.n	8001f60 <__aeabi_dsub+0x60c>
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d04d      	beq.n	8001d40 <__aeabi_dsub+0x3ec>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	075c      	lsls	r4, r3, #29
 8001ca8:	08d2      	lsrs	r2, r2, #3
 8001caa:	4322      	orrs	r2, r4
 8001cac:	2480      	movs	r4, #128	; 0x80
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	4223      	tst	r3, r4
 8001cb4:	d007      	beq.n	8001cc6 <__aeabi_dsub+0x372>
 8001cb6:	08ce      	lsrs	r6, r1, #3
 8001cb8:	4226      	tst	r6, r4
 8001cba:	d104      	bne.n	8001cc6 <__aeabi_dsub+0x372>
 8001cbc:	465d      	mov	r5, fp
 8001cbe:	0033      	movs	r3, r6
 8001cc0:	08c2      	lsrs	r2, r0, #3
 8001cc2:	0749      	lsls	r1, r1, #29
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	0f51      	lsrs	r1, r2, #29
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	08d2      	lsrs	r2, r2, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	0011      	movs	r1, r2
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x384>
 8001cd6:	e1c8      	b.n	800206a <__aeabi_dsub+0x716>
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0309      	lsls	r1, r1, #12
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	031b      	lsls	r3, r3, #12
 8001ce0:	49d5      	ldr	r1, [pc, #852]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001ce2:	0b1b      	lsrs	r3, r3, #12
 8001ce4:	e6da      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001ce6:	49d5      	ldr	r1, [pc, #852]	; (800203c <__aeabi_dsub+0x6e8>)
 8001ce8:	1ab6      	subs	r6, r6, r2
 8001cea:	400b      	ands	r3, r1
 8001cec:	4698      	mov	r8, r3
 8001cee:	e6b5      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f000 fb3b 	bl	800236c <__clzsi2>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	3218      	adds	r2, #24
 8001cfa:	2a1f      	cmp	r2, #31
 8001cfc:	dc00      	bgt.n	8001d00 <__aeabi_dsub+0x3ac>
 8001cfe:	e68f      	b.n	8001a20 <__aeabi_dsub+0xcc>
 8001d00:	0023      	movs	r3, r4
 8001d02:	3808      	subs	r0, #8
 8001d04:	4083      	lsls	r3, r0
 8001d06:	2400      	movs	r4, #0
 8001d08:	e692      	b.n	8001a30 <__aeabi_dsub+0xdc>
 8001d0a:	4308      	orrs	r0, r1
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	1e50      	subs	r0, r2, #1
 8001d10:	4182      	sbcs	r2, r0
 8001d12:	e66d      	b.n	80019f0 <__aeabi_dsub+0x9c>
 8001d14:	4cca      	ldr	r4, [pc, #808]	; (8002040 <__aeabi_dsub+0x6ec>)
 8001d16:	1c72      	adds	r2, r6, #1
 8001d18:	4222      	tst	r2, r4
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x3ca>
 8001d1c:	e0ad      	b.n	8001e7a <__aeabi_dsub+0x526>
 8001d1e:	464a      	mov	r2, r9
 8001d20:	431a      	orrs	r2, r3
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d1b8      	bne.n	8001c98 <__aeabi_dsub+0x344>
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x3d8>
 8001d2a:	e158      	b.n	8001fde <__aeabi_dsub+0x68a>
 8001d2c:	000a      	movs	r2, r1
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	d000      	beq.n	8001d34 <__aeabi_dsub+0x3e0>
 8001d32:	e159      	b.n	8001fe8 <__aeabi_dsub+0x694>
 8001d34:	464a      	mov	r2, r9
 8001d36:	0759      	lsls	r1, r3, #29
 8001d38:	08d2      	lsrs	r2, r2, #3
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	e786      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001d40:	464a      	mov	r2, r9
 8001d42:	0759      	lsls	r1, r3, #29
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	430a      	orrs	r2, r1
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	e7c1      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001d4c:	4dba      	ldr	r5, [pc, #744]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x400>
 8001d52:	e11e      	b.n	8001f92 <__aeabi_dsub+0x63e>
 8001d54:	2580      	movs	r5, #128	; 0x80
 8001d56:	042d      	lsls	r5, r5, #16
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	2c38      	cmp	r4, #56	; 0x38
 8001d5e:	dc5d      	bgt.n	8001e1c <__aeabi_dsub+0x4c8>
 8001d60:	2c1f      	cmp	r4, #31
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x412>
 8001d64:	e0d0      	b.n	8001f08 <__aeabi_dsub+0x5b4>
 8001d66:	2520      	movs	r5, #32
 8001d68:	4667      	mov	r7, ip
 8001d6a:	1b2d      	subs	r5, r5, r4
 8001d6c:	464e      	mov	r6, r9
 8001d6e:	001c      	movs	r4, r3
 8001d70:	40fe      	lsrs	r6, r7
 8001d72:	40ac      	lsls	r4, r5
 8001d74:	4334      	orrs	r4, r6
 8001d76:	464e      	mov	r6, r9
 8001d78:	40ae      	lsls	r6, r5
 8001d7a:	0035      	movs	r5, r6
 8001d7c:	40fb      	lsrs	r3, r7
 8001d7e:	1e6e      	subs	r6, r5, #1
 8001d80:	41b5      	sbcs	r5, r6
 8001d82:	1ac9      	subs	r1, r1, r3
 8001d84:	432c      	orrs	r4, r5
 8001d86:	e04e      	b.n	8001e26 <__aeabi_dsub+0x4d2>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	1a14      	subs	r4, r2, r0
 8001d8c:	45a1      	cmp	r9, r4
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4690      	mov	r8, r2
 8001d94:	1a5f      	subs	r7, r3, r1
 8001d96:	003a      	movs	r2, r7
 8001d98:	4647      	mov	r7, r8
 8001d9a:	1bd2      	subs	r2, r2, r7
 8001d9c:	4690      	mov	r8, r2
 8001d9e:	0212      	lsls	r2, r2, #8
 8001da0:	d500      	bpl.n	8001da4 <__aeabi_dsub+0x450>
 8001da2:	e08b      	b.n	8001ebc <__aeabi_dsub+0x568>
 8001da4:	4642      	mov	r2, r8
 8001da6:	4322      	orrs	r2, r4
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x458>
 8001daa:	e630      	b.n	8001a0e <__aeabi_dsub+0xba>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2500      	movs	r5, #0
 8001db0:	e74d      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001db2:	464a      	mov	r2, r9
 8001db4:	0759      	lsls	r1, r3, #29
 8001db6:	08d2      	lsrs	r2, r2, #3
 8001db8:	430a      	orrs	r2, r1
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	e744      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	4b9e      	ldr	r3, [pc, #632]	; (800203c <__aeabi_dsub+0x6e8>)
 8001dc2:	0861      	lsrs	r1, r4, #1
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4014      	ands	r4, r2
 8001dcc:	430c      	orrs	r4, r1
 8001dce:	07da      	lsls	r2, r3, #31
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	4698      	mov	r8, r3
 8001dd4:	4314      	orrs	r4, r2
 8001dd6:	e641      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001dd8:	001a      	movs	r2, r3
 8001dda:	3e1f      	subs	r6, #31
 8001ddc:	40f2      	lsrs	r2, r6
 8001dde:	0016      	movs	r6, r2
 8001de0:	2920      	cmp	r1, #32
 8001de2:	d003      	beq.n	8001dec <__aeabi_dsub+0x498>
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	1a51      	subs	r1, r2, r1
 8001de8:	408b      	lsls	r3, r1
 8001dea:	431c      	orrs	r4, r3
 8001dec:	1e62      	subs	r2, r4, #1
 8001dee:	4194      	sbcs	r4, r2
 8001df0:	2300      	movs	r3, #0
 8001df2:	4334      	orrs	r4, r6
 8001df4:	4698      	mov	r8, r3
 8001df6:	2600      	movs	r6, #0
 8001df8:	e71d      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	3a20      	subs	r2, #32
 8001dfe:	40d4      	lsrs	r4, r2
 8001e00:	0022      	movs	r2, r4
 8001e02:	4664      	mov	r4, ip
 8001e04:	2c20      	cmp	r4, #32
 8001e06:	d004      	beq.n	8001e12 <__aeabi_dsub+0x4be>
 8001e08:	2740      	movs	r7, #64	; 0x40
 8001e0a:	1b3f      	subs	r7, r7, r4
 8001e0c:	40b9      	lsls	r1, r7
 8001e0e:	4308      	orrs	r0, r1
 8001e10:	4680      	mov	r8, r0
 8001e12:	4644      	mov	r4, r8
 8001e14:	1e61      	subs	r1, r4, #1
 8001e16:	418c      	sbcs	r4, r1
 8001e18:	4322      	orrs	r2, r4
 8001e1a:	e5e9      	b.n	80019f0 <__aeabi_dsub+0x9c>
 8001e1c:	464c      	mov	r4, r9
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	001c      	movs	r4, r3
 8001e22:	1e63      	subs	r3, r4, #1
 8001e24:	419c      	sbcs	r4, r3
 8001e26:	1b04      	subs	r4, r0, r4
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	1acb      	subs	r3, r1, r3
 8001e30:	4698      	mov	r8, r3
 8001e32:	465d      	mov	r5, fp
 8001e34:	0016      	movs	r6, r2
 8001e36:	e5e2      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001e38:	464e      	mov	r6, r9
 8001e3a:	431e      	orrs	r6, r3
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x4ec>
 8001e3e:	e0ae      	b.n	8001f9e <__aeabi_dsub+0x64a>
 8001e40:	1e66      	subs	r6, r4, #1
 8001e42:	2c01      	cmp	r4, #1
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x4f4>
 8001e46:	e0fd      	b.n	8002044 <__aeabi_dsub+0x6f0>
 8001e48:	4f7b      	ldr	r7, [pc, #492]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001e4a:	42bc      	cmp	r4, r7
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x4fc>
 8001e4e:	e107      	b.n	8002060 <__aeabi_dsub+0x70c>
 8001e50:	46b4      	mov	ip, r6
 8001e52:	e69b      	b.n	8001b8c <__aeabi_dsub+0x238>
 8001e54:	4664      	mov	r4, ip
 8001e56:	2220      	movs	r2, #32
 8001e58:	1b12      	subs	r2, r2, r4
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	4094      	lsls	r4, r2
 8001e5e:	0007      	movs	r7, r0
 8001e60:	4090      	lsls	r0, r2
 8001e62:	46a0      	mov	r8, r4
 8001e64:	4664      	mov	r4, ip
 8001e66:	1e42      	subs	r2, r0, #1
 8001e68:	4190      	sbcs	r0, r2
 8001e6a:	4662      	mov	r2, ip
 8001e6c:	40e7      	lsrs	r7, r4
 8001e6e:	4644      	mov	r4, r8
 8001e70:	40d1      	lsrs	r1, r2
 8001e72:	433c      	orrs	r4, r7
 8001e74:	4304      	orrs	r4, r0
 8001e76:	185b      	adds	r3, r3, r1
 8001e78:	e6f3      	b.n	8001c62 <__aeabi_dsub+0x30e>
 8001e7a:	4c6f      	ldr	r4, [pc, #444]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001e7c:	42a2      	cmp	r2, r4
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x52e>
 8001e80:	e0d5      	b.n	800202e <__aeabi_dsub+0x6da>
 8001e82:	4448      	add	r0, r9
 8001e84:	185b      	adds	r3, r3, r1
 8001e86:	4548      	cmp	r0, r9
 8001e88:	4189      	sbcs	r1, r1
 8001e8a:	4249      	negs	r1, r1
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	07dc      	lsls	r4, r3, #31
 8001e90:	0840      	lsrs	r0, r0, #1
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	4698      	mov	r8, r3
 8001e96:	0016      	movs	r6, r2
 8001e98:	4304      	orrs	r4, r0
 8001e9a:	e6cc      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x54e>
 8001ea0:	e082      	b.n	8001fa8 <__aeabi_dsub+0x654>
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	d140      	bne.n	8001f2a <__aeabi_dsub+0x5d6>
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	2500      	movs	r5, #0
 8001eac:	031b      	lsls	r3, r3, #12
 8001eae:	e713      	b.n	8001cd8 <__aeabi_dsub+0x384>
 8001eb0:	074b      	lsls	r3, r1, #29
 8001eb2:	08c2      	lsrs	r2, r0, #3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	465d      	mov	r5, fp
 8001eb8:	08cb      	lsrs	r3, r1, #3
 8001eba:	e6c5      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	1a84      	subs	r4, r0, r2
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	1acb      	subs	r3, r1, r3
 8001ec6:	4252      	negs	r2, r2
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	4698      	mov	r8, r3
 8001ecc:	465d      	mov	r5, fp
 8001ece:	e59e      	b.n	8001a0e <__aeabi_dsub+0xba>
 8001ed0:	464a      	mov	r2, r9
 8001ed2:	0759      	lsls	r1, r3, #29
 8001ed4:	08d2      	lsrs	r2, r2, #3
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	e6f9      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001edc:	464a      	mov	r2, r9
 8001ede:	1a14      	subs	r4, r2, r0
 8001ee0:	45a1      	cmp	r9, r4
 8001ee2:	4192      	sbcs	r2, r2
 8001ee4:	1a5b      	subs	r3, r3, r1
 8001ee6:	4252      	negs	r2, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	4698      	mov	r8, r3
 8001eec:	2601      	movs	r6, #1
 8001eee:	e586      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0759      	lsls	r1, r3, #29
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	e6a5      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001efc:	464c      	mov	r4, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	001c      	movs	r4, r3
 8001f02:	1e63      	subs	r3, r4, #1
 8001f04:	419c      	sbcs	r4, r3
 8001f06:	e65b      	b.n	8001bc0 <__aeabi_dsub+0x26c>
 8001f08:	4665      	mov	r5, ip
 8001f0a:	001e      	movs	r6, r3
 8001f0c:	3d20      	subs	r5, #32
 8001f0e:	40ee      	lsrs	r6, r5
 8001f10:	2c20      	cmp	r4, #32
 8001f12:	d005      	beq.n	8001f20 <__aeabi_dsub+0x5cc>
 8001f14:	2540      	movs	r5, #64	; 0x40
 8001f16:	1b2d      	subs	r5, r5, r4
 8001f18:	40ab      	lsls	r3, r5
 8001f1a:	464c      	mov	r4, r9
 8001f1c:	431c      	orrs	r4, r3
 8001f1e:	46a2      	mov	sl, r4
 8001f20:	4654      	mov	r4, sl
 8001f22:	1e63      	subs	r3, r4, #1
 8001f24:	419c      	sbcs	r4, r3
 8001f26:	4334      	orrs	r4, r6
 8001f28:	e77d      	b.n	8001e26 <__aeabi_dsub+0x4d2>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e6cc      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f36:	000a      	movs	r2, r1
 8001f38:	4302      	orrs	r2, r0
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x5ea>
 8001f3c:	e736      	b.n	8001dac <__aeabi_dsub+0x458>
 8001f3e:	074b      	lsls	r3, r1, #29
 8001f40:	08c2      	lsrs	r2, r0, #3
 8001f42:	431a      	orrs	r2, r3
 8001f44:	465d      	mov	r5, fp
 8001f46:	08cb      	lsrs	r3, r1, #3
 8001f48:	e681      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001f4a:	464a      	mov	r2, r9
 8001f4c:	1a84      	subs	r4, r0, r2
 8001f4e:	42a0      	cmp	r0, r4
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	4252      	negs	r2, r2
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	4698      	mov	r8, r3
 8001f5a:	465d      	mov	r5, fp
 8001f5c:	2601      	movs	r6, #1
 8001f5e:	e54e      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001f60:	074b      	lsls	r3, r1, #29
 8001f62:	08c2      	lsrs	r2, r0, #3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	08cb      	lsrs	r3, r1, #3
 8001f68:	e6b2      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a14      	subs	r4, r2, r0
 8001f6e:	45a1      	cmp	r9, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1a5f      	subs	r7, r3, r1
 8001f74:	4252      	negs	r2, r2
 8001f76:	1aba      	subs	r2, r7, r2
 8001f78:	4690      	mov	r8, r2
 8001f7a:	0212      	lsls	r2, r2, #8
 8001f7c:	d56b      	bpl.n	8002056 <__aeabi_dsub+0x702>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	1a84      	subs	r4, r0, r2
 8001f82:	42a0      	cmp	r0, r4
 8001f84:	4192      	sbcs	r2, r2
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	4252      	negs	r2, r2
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	465d      	mov	r5, fp
 8001f90:	e564      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001f92:	074b      	lsls	r3, r1, #29
 8001f94:	08c2      	lsrs	r2, r0, #3
 8001f96:	431a      	orrs	r2, r3
 8001f98:	465d      	mov	r5, fp
 8001f9a:	08cb      	lsrs	r3, r1, #3
 8001f9c:	e698      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f9e:	074b      	lsls	r3, r1, #29
 8001fa0:	08c2      	lsrs	r2, r0, #3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	08cb      	lsrs	r3, r1, #3
 8001fa6:	e64f      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	4302      	orrs	r2, r0
 8001fac:	d090      	beq.n	8001ed0 <__aeabi_dsub+0x57c>
 8001fae:	464a      	mov	r2, r9
 8001fb0:	075c      	lsls	r4, r3, #29
 8001fb2:	08d2      	lsrs	r2, r2, #3
 8001fb4:	4314      	orrs	r4, r2
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	0312      	lsls	r2, r2, #12
 8001fbc:	4213      	tst	r3, r2
 8001fbe:	d008      	beq.n	8001fd2 <__aeabi_dsub+0x67e>
 8001fc0:	08ce      	lsrs	r6, r1, #3
 8001fc2:	4216      	tst	r6, r2
 8001fc4:	d105      	bne.n	8001fd2 <__aeabi_dsub+0x67e>
 8001fc6:	08c0      	lsrs	r0, r0, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	0004      	movs	r4, r0
 8001fce:	465d      	mov	r5, fp
 8001fd0:	0033      	movs	r3, r6
 8001fd2:	0f61      	lsrs	r1, r4, #29
 8001fd4:	00e2      	lsls	r2, r4, #3
 8001fd6:	0749      	lsls	r1, r1, #29
 8001fd8:	08d2      	lsrs	r2, r2, #3
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	e678      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001fde:	074b      	lsls	r3, r1, #29
 8001fe0:	08c2      	lsrs	r2, r0, #3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	08cb      	lsrs	r3, r1, #3
 8001fe6:	e632      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001fe8:	4448      	add	r0, r9
 8001fea:	185b      	adds	r3, r3, r1
 8001fec:	4548      	cmp	r0, r9
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	4490      	add	r8, r2
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	d400      	bmi.n	8002000 <__aeabi_dsub+0x6ac>
 8001ffe:	e61a      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8002000:	4642      	mov	r2, r8
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <__aeabi_dsub+0x6e8>)
 8002004:	2601      	movs	r6, #1
 8002006:	401a      	ands	r2, r3
 8002008:	4690      	mov	r8, r2
 800200a:	e614      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 800200c:	4666      	mov	r6, ip
 800200e:	001f      	movs	r7, r3
 8002010:	3e20      	subs	r6, #32
 8002012:	40f7      	lsrs	r7, r6
 8002014:	2c20      	cmp	r4, #32
 8002016:	d005      	beq.n	8002024 <__aeabi_dsub+0x6d0>
 8002018:	2640      	movs	r6, #64	; 0x40
 800201a:	1b36      	subs	r6, r6, r4
 800201c:	40b3      	lsls	r3, r6
 800201e:	464c      	mov	r4, r9
 8002020:	431c      	orrs	r4, r3
 8002022:	46a2      	mov	sl, r4
 8002024:	4654      	mov	r4, sl
 8002026:	1e63      	subs	r3, r4, #1
 8002028:	419c      	sbcs	r4, r3
 800202a:	433c      	orrs	r4, r7
 800202c:	e5c8      	b.n	8001bc0 <__aeabi_dsub+0x26c>
 800202e:	0011      	movs	r1, r2
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	e532      	b.n	8001a9c <__aeabi_dsub+0x148>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff
 800203c:	ff7fffff 	.word	0xff7fffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	464a      	mov	r2, r9
 8002046:	1814      	adds	r4, r2, r0
 8002048:	4284      	cmp	r4, r0
 800204a:	4192      	sbcs	r2, r2
 800204c:	185b      	adds	r3, r3, r1
 800204e:	4698      	mov	r8, r3
 8002050:	4252      	negs	r2, r2
 8002052:	4490      	add	r8, r2
 8002054:	e5e9      	b.n	8001c2a <__aeabi_dsub+0x2d6>
 8002056:	4642      	mov	r2, r8
 8002058:	4322      	orrs	r2, r4
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x70a>
 800205c:	e6a6      	b.n	8001dac <__aeabi_dsub+0x458>
 800205e:	e5ea      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8002060:	074b      	lsls	r3, r1, #29
 8002062:	08c2      	lsrs	r2, r0, #3
 8002064:	431a      	orrs	r2, r3
 8002066:	08cb      	lsrs	r3, r1, #3
 8002068:	e632      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 800206a:	2200      	movs	r2, #0
 800206c:	4901      	ldr	r1, [pc, #4]	; (8002074 <__aeabi_dsub+0x720>)
 800206e:	0013      	movs	r3, r2
 8002070:	e514      	b.n	8001a9c <__aeabi_dsub+0x148>
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff

08002078 <__aeabi_dcmpun>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	0005      	movs	r5, r0
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <__aeabi_dcmpun+0x38>)
 800207e:	030c      	lsls	r4, r1, #12
 8002080:	0016      	movs	r6, r2
 8002082:	0049      	lsls	r1, r1, #1
 8002084:	031a      	lsls	r2, r3, #12
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	0b24      	lsrs	r4, r4, #12
 800208a:	0d49      	lsrs	r1, r1, #21
 800208c:	0b12      	lsrs	r2, r2, #12
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	4281      	cmp	r1, r0
 8002092:	d008      	beq.n	80020a6 <__aeabi_dcmpun+0x2e>
 8002094:	4906      	ldr	r1, [pc, #24]	; (80020b0 <__aeabi_dcmpun+0x38>)
 8002096:	2000      	movs	r0, #0
 8002098:	428b      	cmp	r3, r1
 800209a:	d103      	bne.n	80020a4 <__aeabi_dcmpun+0x2c>
 800209c:	4332      	orrs	r2, r6
 800209e:	0010      	movs	r0, r2
 80020a0:	1e42      	subs	r2, r0, #1
 80020a2:	4190      	sbcs	r0, r2
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	2001      	movs	r0, #1
 80020a8:	432c      	orrs	r4, r5
 80020aa:	d1fb      	bne.n	80020a4 <__aeabi_dcmpun+0x2c>
 80020ac:	e7f2      	b.n	8002094 <__aeabi_dcmpun+0x1c>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	000007ff 	.word	0x000007ff

080020b4 <__aeabi_d2iz>:
 80020b4:	000a      	movs	r2, r1
 80020b6:	b530      	push	{r4, r5, lr}
 80020b8:	4c13      	ldr	r4, [pc, #76]	; (8002108 <__aeabi_d2iz+0x54>)
 80020ba:	0053      	lsls	r3, r2, #1
 80020bc:	0309      	lsls	r1, r1, #12
 80020be:	0005      	movs	r5, r0
 80020c0:	0b09      	lsrs	r1, r1, #12
 80020c2:	2000      	movs	r0, #0
 80020c4:	0d5b      	lsrs	r3, r3, #21
 80020c6:	0fd2      	lsrs	r2, r2, #31
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	dd04      	ble.n	80020d6 <__aeabi_d2iz+0x22>
 80020cc:	480f      	ldr	r0, [pc, #60]	; (800210c <__aeabi_d2iz+0x58>)
 80020ce:	4283      	cmp	r3, r0
 80020d0:	dd02      	ble.n	80020d8 <__aeabi_d2iz+0x24>
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <__aeabi_d2iz+0x5c>)
 80020d4:	18d0      	adds	r0, r2, r3
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	2080      	movs	r0, #128	; 0x80
 80020da:	0340      	lsls	r0, r0, #13
 80020dc:	4301      	orrs	r1, r0
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <__aeabi_d2iz+0x60>)
 80020e0:	1ac0      	subs	r0, r0, r3
 80020e2:	281f      	cmp	r0, #31
 80020e4:	dd08      	ble.n	80020f8 <__aeabi_d2iz+0x44>
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <__aeabi_d2iz+0x64>)
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	40d9      	lsrs	r1, r3
 80020ec:	000b      	movs	r3, r1
 80020ee:	4258      	negs	r0, r3
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d1f0      	bne.n	80020d6 <__aeabi_d2iz+0x22>
 80020f4:	0018      	movs	r0, r3
 80020f6:	e7ee      	b.n	80020d6 <__aeabi_d2iz+0x22>
 80020f8:	4c08      	ldr	r4, [pc, #32]	; (800211c <__aeabi_d2iz+0x68>)
 80020fa:	40c5      	lsrs	r5, r0
 80020fc:	46a4      	mov	ip, r4
 80020fe:	4463      	add	r3, ip
 8002100:	4099      	lsls	r1, r3
 8002102:	000b      	movs	r3, r1
 8002104:	432b      	orrs	r3, r5
 8002106:	e7f2      	b.n	80020ee <__aeabi_d2iz+0x3a>
 8002108:	000003fe 	.word	0x000003fe
 800210c:	0000041d 	.word	0x0000041d
 8002110:	7fffffff 	.word	0x7fffffff
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	fffffbed 	.word	0xfffffbed

08002120 <__aeabi_i2d>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2800      	cmp	r0, #0
 8002124:	d016      	beq.n	8002154 <__aeabi_i2d+0x34>
 8002126:	17c3      	asrs	r3, r0, #31
 8002128:	18c5      	adds	r5, r0, r3
 800212a:	405d      	eors	r5, r3
 800212c:	0fc4      	lsrs	r4, r0, #31
 800212e:	0028      	movs	r0, r5
 8002130:	f000 f91c 	bl	800236c <__clzsi2>
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <__aeabi_i2d+0x5c>)
 8002136:	1a12      	subs	r2, r2, r0
 8002138:	280a      	cmp	r0, #10
 800213a:	dc16      	bgt.n	800216a <__aeabi_i2d+0x4a>
 800213c:	0003      	movs	r3, r0
 800213e:	002e      	movs	r6, r5
 8002140:	3315      	adds	r3, #21
 8002142:	409e      	lsls	r6, r3
 8002144:	230b      	movs	r3, #11
 8002146:	1a18      	subs	r0, r3, r0
 8002148:	40c5      	lsrs	r5, r0
 800214a:	0553      	lsls	r3, r2, #21
 800214c:	032d      	lsls	r5, r5, #12
 800214e:	0b2d      	lsrs	r5, r5, #12
 8002150:	0d5b      	lsrs	r3, r3, #21
 8002152:	e003      	b.n	800215c <__aeabi_i2d+0x3c>
 8002154:	2400      	movs	r4, #0
 8002156:	2300      	movs	r3, #0
 8002158:	2500      	movs	r5, #0
 800215a:	2600      	movs	r6, #0
 800215c:	051b      	lsls	r3, r3, #20
 800215e:	432b      	orrs	r3, r5
 8002160:	07e4      	lsls	r4, r4, #31
 8002162:	4323      	orrs	r3, r4
 8002164:	0030      	movs	r0, r6
 8002166:	0019      	movs	r1, r3
 8002168:	bd70      	pop	{r4, r5, r6, pc}
 800216a:	380b      	subs	r0, #11
 800216c:	4085      	lsls	r5, r0
 800216e:	0553      	lsls	r3, r2, #21
 8002170:	032d      	lsls	r5, r5, #12
 8002172:	2600      	movs	r6, #0
 8002174:	0b2d      	lsrs	r5, r5, #12
 8002176:	0d5b      	lsrs	r3, r3, #21
 8002178:	e7f0      	b.n	800215c <__aeabi_i2d+0x3c>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	0000041e 	.word	0x0000041e

08002180 <__aeabi_ui2d>:
 8002180:	b510      	push	{r4, lr}
 8002182:	1e04      	subs	r4, r0, #0
 8002184:	d010      	beq.n	80021a8 <__aeabi_ui2d+0x28>
 8002186:	f000 f8f1 	bl	800236c <__clzsi2>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <__aeabi_ui2d+0x48>)
 800218c:	1a1b      	subs	r3, r3, r0
 800218e:	280a      	cmp	r0, #10
 8002190:	dc11      	bgt.n	80021b6 <__aeabi_ui2d+0x36>
 8002192:	220b      	movs	r2, #11
 8002194:	0021      	movs	r1, r4
 8002196:	1a12      	subs	r2, r2, r0
 8002198:	40d1      	lsrs	r1, r2
 800219a:	3015      	adds	r0, #21
 800219c:	030a      	lsls	r2, r1, #12
 800219e:	055b      	lsls	r3, r3, #21
 80021a0:	4084      	lsls	r4, r0
 80021a2:	0b12      	lsrs	r2, r2, #12
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	e001      	b.n	80021ac <__aeabi_ui2d+0x2c>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2200      	movs	r2, #0
 80021ac:	051b      	lsls	r3, r3, #20
 80021ae:	4313      	orrs	r3, r2
 80021b0:	0020      	movs	r0, r4
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	0022      	movs	r2, r4
 80021b8:	380b      	subs	r0, #11
 80021ba:	4082      	lsls	r2, r0
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	0312      	lsls	r2, r2, #12
 80021c0:	2400      	movs	r4, #0
 80021c2:	0b12      	lsrs	r2, r2, #12
 80021c4:	0d5b      	lsrs	r3, r3, #21
 80021c6:	e7f1      	b.n	80021ac <__aeabi_ui2d+0x2c>
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_f2d>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	0043      	lsls	r3, r0, #1
 80021d0:	0246      	lsls	r6, r0, #9
 80021d2:	0fc4      	lsrs	r4, r0, #31
 80021d4:	20fe      	movs	r0, #254	; 0xfe
 80021d6:	0e1b      	lsrs	r3, r3, #24
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	0a75      	lsrs	r5, r6, #9
 80021dc:	4208      	tst	r0, r1
 80021de:	d00c      	beq.n	80021fa <__aeabi_f2d+0x2e>
 80021e0:	22e0      	movs	r2, #224	; 0xe0
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4694      	mov	ip, r2
 80021e6:	076d      	lsls	r5, r5, #29
 80021e8:	0b36      	lsrs	r6, r6, #12
 80021ea:	4463      	add	r3, ip
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	4333      	orrs	r3, r6
 80021f0:	07e4      	lsls	r4, r4, #31
 80021f2:	4323      	orrs	r3, r4
 80021f4:	0028      	movs	r0, r5
 80021f6:	0019      	movs	r1, r3
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <__aeabi_f2d+0x5c>
 80021fe:	2d00      	cmp	r5, #0
 8002200:	d01b      	beq.n	800223a <__aeabi_f2d+0x6e>
 8002202:	0028      	movs	r0, r5
 8002204:	f000 f8b2 	bl	800236c <__clzsi2>
 8002208:	280a      	cmp	r0, #10
 800220a:	dc1c      	bgt.n	8002246 <__aeabi_f2d+0x7a>
 800220c:	230b      	movs	r3, #11
 800220e:	002a      	movs	r2, r5
 8002210:	1a1b      	subs	r3, r3, r0
 8002212:	40da      	lsrs	r2, r3
 8002214:	0003      	movs	r3, r0
 8002216:	3315      	adds	r3, #21
 8002218:	409d      	lsls	r5, r3
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <__aeabi_f2d+0x88>)
 800221c:	0312      	lsls	r2, r2, #12
 800221e:	1a1b      	subs	r3, r3, r0
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	0b16      	lsrs	r6, r2, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e7e1      	b.n	80021ec <__aeabi_f2d+0x20>
 8002228:	2d00      	cmp	r5, #0
 800222a:	d009      	beq.n	8002240 <__aeabi_f2d+0x74>
 800222c:	0b32      	lsrs	r2, r6, #12
 800222e:	2680      	movs	r6, #128	; 0x80
 8002230:	0336      	lsls	r6, r6, #12
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <__aeabi_f2d+0x8c>)
 8002234:	076d      	lsls	r5, r5, #29
 8002236:	4316      	orrs	r6, r2
 8002238:	e7d8      	b.n	80021ec <__aeabi_f2d+0x20>
 800223a:	2300      	movs	r3, #0
 800223c:	2600      	movs	r6, #0
 800223e:	e7d5      	b.n	80021ec <__aeabi_f2d+0x20>
 8002240:	2600      	movs	r6, #0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <__aeabi_f2d+0x8c>)
 8002244:	e7d2      	b.n	80021ec <__aeabi_f2d+0x20>
 8002246:	0003      	movs	r3, r0
 8002248:	002a      	movs	r2, r5
 800224a:	3b0b      	subs	r3, #11
 800224c:	409a      	lsls	r2, r3
 800224e:	2500      	movs	r5, #0
 8002250:	e7e3      	b.n	800221a <__aeabi_f2d+0x4e>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	00000389 	.word	0x00000389
 8002258:	000007ff 	.word	0x000007ff

0800225c <__aeabi_d2f>:
 800225c:	0002      	movs	r2, r0
 800225e:	004b      	lsls	r3, r1, #1
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	0308      	lsls	r0, r1, #12
 8002264:	0d5b      	lsrs	r3, r3, #21
 8002266:	4e3d      	ldr	r6, [pc, #244]	; (800235c <__aeabi_d2f+0x100>)
 8002268:	0fcc      	lsrs	r4, r1, #31
 800226a:	0a40      	lsrs	r0, r0, #9
 800226c:	0f51      	lsrs	r1, r2, #29
 800226e:	1c5f      	adds	r7, r3, #1
 8002270:	4308      	orrs	r0, r1
 8002272:	00d5      	lsls	r5, r2, #3
 8002274:	4237      	tst	r7, r6
 8002276:	d00a      	beq.n	800228e <__aeabi_d2f+0x32>
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <__aeabi_d2f+0x104>)
 800227a:	185e      	adds	r6, r3, r1
 800227c:	2efe      	cmp	r6, #254	; 0xfe
 800227e:	dd16      	ble.n	80022ae <__aeabi_d2f+0x52>
 8002280:	23ff      	movs	r3, #255	; 0xff
 8002282:	2100      	movs	r1, #0
 8002284:	05db      	lsls	r3, r3, #23
 8002286:	430b      	orrs	r3, r1
 8002288:	07e0      	lsls	r0, r4, #31
 800228a:	4318      	orrs	r0, r3
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <__aeabi_d2f+0x44>
 8002292:	4328      	orrs	r0, r5
 8002294:	d027      	beq.n	80022e6 <__aeabi_d2f+0x8a>
 8002296:	2105      	movs	r1, #5
 8002298:	0189      	lsls	r1, r1, #6
 800229a:	0a49      	lsrs	r1, r1, #9
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e7f1      	b.n	8002284 <__aeabi_d2f+0x28>
 80022a0:	4305      	orrs	r5, r0
 80022a2:	d0ed      	beq.n	8002280 <__aeabi_d2f+0x24>
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	03c9      	lsls	r1, r1, #15
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	4301      	orrs	r1, r0
 80022ac:	e7ea      	b.n	8002284 <__aeabi_d2f+0x28>
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	dd1c      	ble.n	80022ec <__aeabi_d2f+0x90>
 80022b2:	0192      	lsls	r2, r2, #6
 80022b4:	0011      	movs	r1, r2
 80022b6:	1e4a      	subs	r2, r1, #1
 80022b8:	4191      	sbcs	r1, r2
 80022ba:	00c0      	lsls	r0, r0, #3
 80022bc:	0f6d      	lsrs	r5, r5, #29
 80022be:	4301      	orrs	r1, r0
 80022c0:	4329      	orrs	r1, r5
 80022c2:	074b      	lsls	r3, r1, #29
 80022c4:	d048      	beq.n	8002358 <__aeabi_d2f+0xfc>
 80022c6:	230f      	movs	r3, #15
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d000      	beq.n	80022d0 <__aeabi_d2f+0x74>
 80022ce:	3104      	adds	r1, #4
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	04db      	lsls	r3, r3, #19
 80022d4:	400b      	ands	r3, r1
 80022d6:	d03f      	beq.n	8002358 <__aeabi_d2f+0xfc>
 80022d8:	1c72      	adds	r2, r6, #1
 80022da:	2efe      	cmp	r6, #254	; 0xfe
 80022dc:	d0d0      	beq.n	8002280 <__aeabi_d2f+0x24>
 80022de:	0189      	lsls	r1, r1, #6
 80022e0:	0a49      	lsrs	r1, r1, #9
 80022e2:	b2d3      	uxtb	r3, r2
 80022e4:	e7ce      	b.n	8002284 <__aeabi_d2f+0x28>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	e7cb      	b.n	8002284 <__aeabi_d2f+0x28>
 80022ec:	0032      	movs	r2, r6
 80022ee:	3217      	adds	r2, #23
 80022f0:	db22      	blt.n	8002338 <__aeabi_d2f+0xdc>
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	221e      	movs	r2, #30
 80022f6:	0409      	lsls	r1, r1, #16
 80022f8:	4308      	orrs	r0, r1
 80022fa:	1b92      	subs	r2, r2, r6
 80022fc:	2a1f      	cmp	r2, #31
 80022fe:	dd1d      	ble.n	800233c <__aeabi_d2f+0xe0>
 8002300:	2102      	movs	r1, #2
 8002302:	4249      	negs	r1, r1
 8002304:	1b8e      	subs	r6, r1, r6
 8002306:	0001      	movs	r1, r0
 8002308:	40f1      	lsrs	r1, r6
 800230a:	000e      	movs	r6, r1
 800230c:	2a20      	cmp	r2, #32
 800230e:	d004      	beq.n	800231a <__aeabi_d2f+0xbe>
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <__aeabi_d2f+0x108>)
 8002312:	4694      	mov	ip, r2
 8002314:	4463      	add	r3, ip
 8002316:	4098      	lsls	r0, r3
 8002318:	4305      	orrs	r5, r0
 800231a:	0029      	movs	r1, r5
 800231c:	1e4d      	subs	r5, r1, #1
 800231e:	41a9      	sbcs	r1, r5
 8002320:	4331      	orrs	r1, r6
 8002322:	2600      	movs	r6, #0
 8002324:	074b      	lsls	r3, r1, #29
 8002326:	d1ce      	bne.n	80022c6 <__aeabi_d2f+0x6a>
 8002328:	2080      	movs	r0, #128	; 0x80
 800232a:	000b      	movs	r3, r1
 800232c:	04c0      	lsls	r0, r0, #19
 800232e:	2201      	movs	r2, #1
 8002330:	4003      	ands	r3, r0
 8002332:	4201      	tst	r1, r0
 8002334:	d1d3      	bne.n	80022de <__aeabi_d2f+0x82>
 8002336:	e7af      	b.n	8002298 <__aeabi_d2f+0x3c>
 8002338:	2300      	movs	r3, #0
 800233a:	e7ac      	b.n	8002296 <__aeabi_d2f+0x3a>
 800233c:	490a      	ldr	r1, [pc, #40]	; (8002368 <__aeabi_d2f+0x10c>)
 800233e:	468c      	mov	ip, r1
 8002340:	0029      	movs	r1, r5
 8002342:	4463      	add	r3, ip
 8002344:	40d1      	lsrs	r1, r2
 8002346:	409d      	lsls	r5, r3
 8002348:	000a      	movs	r2, r1
 800234a:	0029      	movs	r1, r5
 800234c:	4098      	lsls	r0, r3
 800234e:	1e4d      	subs	r5, r1, #1
 8002350:	41a9      	sbcs	r1, r5
 8002352:	4301      	orrs	r1, r0
 8002354:	4311      	orrs	r1, r2
 8002356:	e7e4      	b.n	8002322 <__aeabi_d2f+0xc6>
 8002358:	0033      	movs	r3, r6
 800235a:	e79d      	b.n	8002298 <__aeabi_d2f+0x3c>
 800235c:	000007fe 	.word	0x000007fe
 8002360:	fffffc80 	.word	0xfffffc80
 8002364:	fffffca2 	.word	0xfffffca2
 8002368:	fffffc82 	.word	0xfffffc82

0800236c <__clzsi2>:
 800236c:	211c      	movs	r1, #28
 800236e:	2301      	movs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0xe>
 8002376:	0c00      	lsrs	r0, r0, #16
 8002378:	3910      	subs	r1, #16
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	4298      	cmp	r0, r3
 800237e:	d301      	bcc.n	8002384 <__clzsi2+0x18>
 8002380:	0a00      	lsrs	r0, r0, #8
 8002382:	3908      	subs	r1, #8
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	4298      	cmp	r0, r3
 8002388:	d301      	bcc.n	800238e <__clzsi2+0x22>
 800238a:	0900      	lsrs	r0, r0, #4
 800238c:	3904      	subs	r1, #4
 800238e:	a202      	add	r2, pc, #8	; (adr r2, 8002398 <__clzsi2+0x2c>)
 8002390:	5c10      	ldrb	r0, [r2, r0]
 8002392:	1840      	adds	r0, r0, r1
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	02020304 	.word	0x02020304
 800239c:	01010101 	.word	0x01010101
	...

080023a8 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cfb      	adds	r3, r7, #3
 80023b4:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1cfa      	adds	r2, r7, #3
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set HIGH
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	481b      	ldr	r0, [pc, #108]	; (8002448 <motor_wheel_init+0xa0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	0019      	movs	r1, r3
 80023e0:	f002 fe8f 	bl	8005102 <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 80023ec:	4b16      	ldr	r3, [pc, #88]	; (8002448 <motor_wheel_init+0xa0>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	2101      	movs	r1, #1
 80023f2:	0018      	movs	r0, r3
 80023f4:	f002 fe85 	bl	8005102 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
		str->inverse_q = 1;
	}
}
 80023f8:	e021      	b.n	800243e <motor_wheel_init+0x96>
	else if (str->id == 2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d109      	bne.n	8002416 <motor_wheel_init+0x6e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <motor_wheel_init+0xa0>)
 8002404:	2200      	movs	r2, #0
 8002406:	2102      	movs	r1, #2
 8002408:	0018      	movs	r0, r3
 800240a:	f002 fe7a 	bl	8005102 <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	70da      	strb	r2, [r3, #3]
}
 8002414:	e013      	b.n	800243e <motor_wheel_init+0x96>
	else if (str->id == 3)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d106      	bne.n	800242c <motor_wheel_init+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <motor_wheel_init+0xa0>)
 8002420:	2201      	movs	r2, #1
 8002422:	2101      	movs	r1, #1
 8002424:	0018      	movs	r0, r3
 8002426:	f002 fe6c 	bl	8005102 <HAL_GPIO_WritePin>
}
 800242a:	e008      	b.n	800243e <motor_wheel_init+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <motor_wheel_init+0xa0>)
 800242e:	2200      	movs	r2, #0
 8002430:	2102      	movs	r1, #2
 8002432:	0018      	movs	r0, r3
 8002434:	f002 fe65 	bl	8005102 <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	70da      	strb	r2, [r3, #3]
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	48000800 	.word	0x48000800

0800244c <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, int LPU) // PWM Velocity Control
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]

	uint8_t throttle = abs(LPU);//fabs(LPU) * 100;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	17d9      	asrs	r1, r3, #31
 800245c:	185a      	adds	r2, r3, r1
 800245e:	404a      	eors	r2, r1
 8002460:	2117      	movs	r1, #23
 8002462:	187b      	adds	r3, r7, r1
 8002464:	701a      	strb	r2, [r3, #0]
	if (abs(LPU) > 100)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	17da      	asrs	r2, r3, #31
 800246a:	189b      	adds	r3, r3, r2
 800246c:	4053      	eors	r3, r2
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	dc2a      	bgt.n	80024c8 <motorPWM_pulse+0x7c>
	{
		return;
	}

	if (str->id == 1)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <motorPWM_pulse+0x3a>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	187a      	adds	r2, r7, r1
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	635a      	str	r2, [r3, #52]	; 0x34
 8002484:	e021      	b.n	80024ca <motorPWM_pulse+0x7e>
	else if (str->id == 2)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d106      	bne.n	800249c <motorPWM_pulse+0x50>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2217      	movs	r2, #23
 8002494:	18ba      	adds	r2, r7, r2
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
 800249a:	e016      	b.n	80024ca <motorPWM_pulse+0x7e>
	else if (str->id == 3)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d106      	bne.n	80024b2 <motorPWM_pulse+0x66>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2217      	movs	r2, #23
 80024aa:	18ba      	adds	r2, r7, r2
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b0:	e00b      	b.n	80024ca <motorPWM_pulse+0x7e>
	else if (str->id == 4)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d107      	bne.n	80024ca <motorPWM_pulse+0x7e>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2217      	movs	r2, #23
 80024c0:	18ba      	adds	r2, r7, r2
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
 80024c6:	e000      	b.n	80024ca <motorPWM_pulse+0x7e>
		return;
 80024c8:	46c0      	nop			; (mov r8, r8)
};
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <motor_DIR>:
  else if (str->id == 4)
	  __HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};

void motor_DIR(Motor_Wheel *str, const uint8_t Direction) // Send direction change command
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	000a      	movs	r2, r1
 80024da:	1cfb      	adds	r3, r7, #3
 80024dc:	701a      	strb	r2, [r3, #0]

	str->dir_q = Direction;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1cfa      	adds	r2, r7, #3
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	705a      	strb	r2, [r3, #1]
	// 0 = Forward
	// 1 = backward


  // DIRECTION PIN
  if (str->dir_q == 1) // Backward
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d115      	bne.n	800251a <motor_DIR+0x4a>
  {
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d003      	beq.n	80024fe <motor_DIR+0x2e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d106      	bne.n	800250c <motor_DIR+0x3c>
	  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <motor_DIR+0x80>)
 8002500:	2200      	movs	r2, #0
 8002502:	2101      	movs	r1, #1
 8002504:	0018      	movs	r0, r3
 8002506:	f002 fdfc 	bl	8005102 <HAL_GPIO_WritePin>
 800250a:	e01c      	b.n	8002546 <motor_DIR+0x76>
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set HIGH
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <motor_DIR+0x80>)
 800250e:	2201      	movs	r2, #1
 8002510:	2102      	movs	r1, #2
 8002512:	0018      	movs	r0, r3
 8002514:	f002 fdf5 	bl	8005102 <HAL_GPIO_WritePin>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
  }
}
 8002518:	e015      	b.n	8002546 <motor_DIR+0x76>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d003      	beq.n	800252a <motor_DIR+0x5a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d106      	bne.n	8002538 <motor_DIR+0x68>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <motor_DIR+0x80>)
 800252c:	2201      	movs	r2, #1
 800252e:	2101      	movs	r1, #1
 8002530:	0018      	movs	r0, r3
 8002532:	f002 fde6 	bl	8005102 <HAL_GPIO_WritePin>
 8002536:	e006      	b.n	8002546 <motor_DIR+0x76>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <motor_DIR+0x80>)
 800253a:	2200      	movs	r2, #0
 800253c:	2102      	movs	r1, #2
 800253e:	0018      	movs	r0, r3
 8002540:	f002 fddf 	bl	8005102 <HAL_GPIO_WritePin>
}
 8002544:	e7ff      	b.n	8002546 <motor_DIR+0x76>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	48000800 	.word	0x48000800

08002554 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	000a      	movs	r2, r1
 800255e:	1cfb      	adds	r3, r7, #3
 8002560:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	1cfa      	adds	r2, r7, #3
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	789b      	ldrb	r3, [r3, #2]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10a      	bne.n	8002588 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	480a      	ldr	r0, [pc, #40]	; (80025a0 <motor_break+0x4c>)
 8002578:	2201      	movs	r2, #1
 800257a:	0019      	movs	r1, r3
 800257c:	f002 fdc1 	bl	8005102 <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 8002586:	e006      	b.n	8002596 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <motor_break+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	0019      	movs	r1, r3
 8002592:	f002 fdb6 	bl	8005102 <HAL_GPIO_WritePin>
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	48000800 	.word	0x48000800

080025a4 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	0008      	movs	r0, r1
 80025ae:	0011      	movs	r1, r2
 80025b0:	1cfb      	adds	r3, r7, #3
 80025b2:	1c02      	adds	r2, r0, #0
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	1cbb      	adds	r3, r7, #2
 80025b8:	1c0a      	adds	r2, r1, #0
 80025ba:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	1cfa      	adds	r2, r7, #3
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1cba      	adds	r2, r7, #2
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	705a      	strb	r2, [r3, #1]
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <linear_motor_set_target>:


void linear_motor_set_target(Linear_Motor *str, int32_t target)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	if (target > POSITION_MAX)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <linear_motor_set_target+0x34>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	dd02      	ble.n	8002600 <linear_motor_set_target+0x18>
	{
		target = POSITION_MAX;
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <linear_motor_set_target+0x34>)
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	e005      	b.n	800260c <linear_motor_set_target+0x24>
	}
	else if (target < POSITION_MIN)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <linear_motor_set_target+0x38>)
 8002604:	4293      	cmp	r3, r2
 8002606:	da01      	bge.n	800260c <linear_motor_set_target+0x24>
	{
		target = POSITION_MIN;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <linear_motor_set_target+0x38>)
 800260a:	603b      	str	r3, [r7, #0]
	}
	str->target_position = target;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	0000280a 	.word	0x0000280a
 8002620:	ffffd7f6 	.word	0xffffd7f6

08002624 <linear_motor_get_position>:


int32_t linear_motor_get_position(Linear_Motor *str)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	return str->current_position;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <linear_motor_pulse>:
  * @param  timer_handle timer handle associated with linear motors
  * @param  counter_handle counter pointer to track number of pulses sent via interupt callback
  * @retval if(errors_occurred)
  */
uint8_t linear_motor_pulse(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
	if (str->id == 1 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <linear_motor_pulse+0x24>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	223e      	movs	r2, #62	; 0x3e
 8002650:	5c9b      	ldrb	r3, [r3, r2]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d101      	bne.n	800265c <linear_motor_pulse+0x24>
	{
		return 1; // error occurred
 8002658:	2301      	movs	r3, #1
 800265a:	e075      	b.n	8002748 <linear_motor_pulse+0x110>
	}
	else if (str->id == 2 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d107      	bne.n	8002674 <linear_motor_pulse+0x3c>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d101      	bne.n	8002674 <linear_motor_pulse+0x3c>
	{
		return 1; // error occurred
 8002670:	2301      	movs	r3, #1
 8002672:	e069      	b.n	8002748 <linear_motor_pulse+0x110>
	}
	uint32_t shift = abs(str->target_position - str->current_position);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	17da      	asrs	r2, r3, #31
 8002680:	189b      	adds	r3, r3, r2
 8002682:	4053      	eors	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
	if (shift == 0)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <linear_motor_pulse+0x58>
	{
		return 1;
 800268c:	2301      	movs	r3, #1
 800268e:	e05b      	b.n	8002748 <linear_motor_pulse+0x110>
	}
	if (str->target_position - str->current_position > 0)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	dd03      	ble.n	80026a6 <linear_motor_pulse+0x6e>
	{
		str->dir_q = 1;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	705a      	strb	r2, [r3, #1]
 80026a4:	e002      	b.n	80026ac <linear_motor_pulse+0x74>
	}
	else
	{
		str->dir_q = 0;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	705a      	strb	r2, [r3, #1]
	}
	if (str->id == 1)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d120      	bne.n	80026f6 <linear_motor_pulse+0xbe>
	{
		*counter_handle = shift;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	601a      	str	r2, [r3, #0]
		// TODO: SET DIRECTION GPIO
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
		if (abs(str->dir_q - str->inverse_q) == 1)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	001a      	movs	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	789b      	ldrb	r3, [r3, #2]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	17da      	asrs	r2, r3, #31
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	4053      	eors	r3, r2
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <linear_motor_pulse+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <linear_motor_pulse+0x118>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	2104      	movs	r1, #4
 80026d6:	0018      	movs	r0, r3
 80026d8:	f002 fd13 	bl	8005102 <HAL_GPIO_WritePin>
 80026dc:	e005      	b.n	80026ea <linear_motor_pulse+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <linear_motor_pulse+0x118>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	2104      	movs	r1, #4
 80026e4:	0018      	movs	r0, r3
 80026e6:	f002 fd0c 	bl	8005102 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2100      	movs	r1, #0
 80026ee:	0018      	movs	r0, r3
 80026f0:	f003 faf0 	bl	8005cd4 <HAL_TIM_PWM_Start_IT>
 80026f4:	e023      	b.n	800273e <linear_motor_pulse+0x106>
	}
	else if (str->id == 2)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d11f      	bne.n	800273e <linear_motor_pulse+0x106>
	{
		*counter_handle = shift;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	001a      	movs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	789b      	ldrb	r3, [r3, #2]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	17da      	asrs	r2, r3, #31
 8002712:	189b      	adds	r3, r3, r2
 8002714:	4053      	eors	r3, r2
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <linear_motor_pulse+0xf0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <linear_motor_pulse+0x118>)
 800271c:	2201      	movs	r2, #1
 800271e:	2108      	movs	r1, #8
 8002720:	0018      	movs	r0, r3
 8002722:	f002 fcee 	bl	8005102 <HAL_GPIO_WritePin>
 8002726:	e005      	b.n	8002734 <linear_motor_pulse+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <linear_motor_pulse+0x118>)
 800272a:	2200      	movs	r2, #0
 800272c:	2108      	movs	r1, #8
 800272e:	0018      	movs	r0, r3
 8002730:	f002 fce7 	bl	8005102 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2104      	movs	r1, #4
 8002738:	0018      	movs	r0, r3
 800273a:	f003 facb 	bl	8005cd4 <HAL_TIM_PWM_Start_IT>
	}
	str->current_position = str->target_position;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
	return 0;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b006      	add	sp, #24
 800274e:	bd80      	pop	{r7, pc}
 8002750:	48000800 	.word	0x48000800

08002754 <linear_motor_calibrate>:


uint32_t linear_motor_calibrate(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	uint32_t stepSize = 100;
 8002760:	2364      	movs	r3, #100	; 0x64
 8002762:	61bb      	str	r3, [r7, #24]
	uint32_t distanceTraveled = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t edgeReached1 = 0;
 8002768:	2323      	movs	r3, #35	; 0x23
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
	uint8_t edgeReached2 = 0;
 8002770:	2317      	movs	r3, #23
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
	uint32_t hard_limit = 20000;
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <linear_motor_calibrate+0xfc>)
 800277a:	613b      	str	r3, [r7, #16]
	uint32_t cnt = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
	if (str->id == 1)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <linear_motor_calibrate+0x42>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set HIGH
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <linear_motor_calibrate+0x100>)
 800278a:	2200      	movs	r2, #0
 800278c:	2104      	movs	r1, #4
 800278e:	0018      	movs	r0, r3
 8002790:	f002 fcb7 	bl	8005102 <HAL_GPIO_WritePin>
 8002794:	e03a      	b.n	800280c <linear_motor_calibrate+0xb8>
	}
	else if (str->id == 2)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d136      	bne.n	800280c <linear_motor_calibrate+0xb8>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set HIGH
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <linear_motor_calibrate+0x100>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	2108      	movs	r1, #8
 80027a4:	0018      	movs	r0, r3
 80027a6:	f002 fcac 	bl	8005102 <HAL_GPIO_WritePin>
	}
	while (edgeReached1 == 0)
 80027aa:	e02f      	b.n	800280c <linear_motor_calibrate+0xb8>
	{
		*counter_handle = stepSize;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	601a      	str	r2, [r3, #0]
		cnt++;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
		if (str->id == 1)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d11b      	bne.n	80027f8 <linear_motor_calibrate+0xa4>
		{
			while((TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY))
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	223e      	movs	r2, #62	; 0x3e
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d0f9      	beq.n	80027c2 <linear_motor_calibrate+0x6e>
			{

			}
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2100      	movs	r1, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f003 fa7e 	bl	8005cd4 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0)
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <linear_motor_calibrate+0x104>)
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	0018      	movs	r0, r3
 80027de:	f002 fc73 	bl	80050c8 <HAL_GPIO_ReadPin>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d104      	bne.n	80027f0 <linear_motor_calibrate+0x9c>
			{
				edgeReached1 = 1;
 80027e6:	2323      	movs	r3, #35	; 0x23
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e003      	b.n	80027f8 <linear_motor_calibrate+0xa4>
			}
			else
			{
				distanceTraveled += stepSize;
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
//			{
//				distanceTraveled += stepSize;
//			}
//			// TODO: add timeout
//		}
		if (distanceTraveled > hard_limit)
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d905      	bls.n	800280c <linear_motor_calibrate+0xb8>
		{
			edgeReached1 = 1;
 8002800:	2323      	movs	r3, #35	; 0x23
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
			return 0;
 8002808:	2300      	movs	r3, #0
 800280a:	e01d      	b.n	8002848 <linear_motor_calibrate+0xf4>
	while (edgeReached1 == 0)
 800280c:	2323      	movs	r3, #35	; 0x23
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ca      	beq.n	80027ac <linear_motor_calibrate+0x58>
		}

	}
	if (str->id == 1)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d113      	bne.n	8002846 <linear_motor_calibrate+0xf2>
	{
		// Change direction of the front motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set LOW
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <linear_motor_calibrate+0x100>)
 8002820:	2201      	movs	r2, #1
 8002822:	2104      	movs	r1, #4
 8002824:	0018      	movs	r0, r3
 8002826:	f002 fc6c 	bl	8005102 <HAL_GPIO_WritePin>
		*counter_handle = 9600;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2296      	movs	r2, #150	; 0x96
 800282e:	0192      	lsls	r2, r2, #6
 8002830:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2100      	movs	r1, #0
 8002836:	0018      	movs	r0, r3
 8002838:	f003 fa4c 	bl	8005cd4 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	e000      	b.n	8002848 <linear_motor_calibrate+0xf4>
//		*counter_handle = 9600;
//		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
//		str->current_position = 0;
//		return distanceTraveled;
//	}
	return 0;
 8002846:	2300      	movs	r3, #0

}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b00a      	add	sp, #40	; 0x28
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00004e20 	.word	0x00004e20
 8002854:	48000800 	.word	0x48000800
 8002858:	48000400 	.word	0x48000400

0800285c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b0c5      	sub	sp, #276	; 0x114
 8002860:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002862:	f001 ff45 	bl	80046f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002866:	f000 fc13 	bl	8003090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800286a:	f000 fead 	bl	80035c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800286e:	f000 fd23 	bl	80032b8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002872:	f000 fc4d 	bl	8003110 <MX_TIM1_Init>
  MX_TIM15_Init();
 8002876:	f000 fd9b 	bl	80033b0 <MX_TIM15_Init>
  MX_DMA_Init();
 800287a:	f000 fe87 	bl	800358c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800287e:	f000 fe55 	bl	800352c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8002882:	23fa      	movs	r3, #250	; 0xfa
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	0018      	movs	r0, r3
 8002888:	f001 ff96 	bl	80047b8 <HAL_Delay>

  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <main+0x1e4>)
 800288e:	2100      	movs	r1, #0
 8002890:	0018      	movs	r0, r3
 8002892:	f003 fc2d 	bl	80060f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <main+0x1e4>)
 8002898:	2104      	movs	r1, #4
 800289a:	0018      	movs	r0, r3
 800289c:	f003 fc28 	bl	80060f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80028a0:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <main+0x1e4>)
 80028a2:	2108      	movs	r1, #8
 80028a4:	0018      	movs	r0, r3
 80028a6:	f003 fc23 	bl	80060f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <main+0x1e4>)
 80028ac:	210c      	movs	r1, #12
 80028ae:	0018      	movs	r0, r3
 80028b0:	f003 fc1e 	bl	80060f0 <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 80028b4:	235c      	movs	r3, #92	; 0x5c
 80028b6:	2220      	movs	r2, #32
 80028b8:	4694      	mov	ip, r2
 80028ba:	44bc      	add	ip, r7
 80028bc:	4463      	add	r3, ip
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	3304      	adds	r3, #4
 80028c4:	223d      	movs	r2, #61	; 0x3d
 80028c6:	2100      	movs	r1, #0
 80028c8:	0018      	movs	r0, r3
 80028ca:	f006 f8ad 	bl	8008a28 <memset>
  float speed1 = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	22c4      	movs	r2, #196	; 0xc4
 80028d2:	2120      	movs	r1, #32
 80028d4:	468c      	mov	ip, r1
 80028d6:	44bc      	add	ip, r7
 80028d8:	4462      	add	r2, ip
 80028da:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	22c0      	movs	r2, #192	; 0xc0
 80028e0:	2120      	movs	r1, #32
 80028e2:	468c      	mov	ip, r1
 80028e4:	44bc      	add	ip, r7
 80028e6:	4462      	add	r2, ip
 80028e8:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	22bc      	movs	r2, #188	; 0xbc
 80028ee:	2120      	movs	r1, #32
 80028f0:	468c      	mov	ip, r1
 80028f2:	44bc      	add	ip, r7
 80028f4:	4462      	add	r2, ip
 80028f6:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	22b8      	movs	r2, #184	; 0xb8
 80028fc:	2120      	movs	r1, #32
 80028fe:	468c      	mov	ip, r1
 8002900:	44bc      	add	ip, r7
 8002902:	4462      	add	r2, ip
 8002904:	6013      	str	r3, [r2, #0]
  float gamma1 = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	67bb      	str	r3, [r7, #120]	; 0x78
  float gamma2 = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t cycleCounter = 0;
 800290e:	23b7      	movs	r3, #183	; 0xb7
 8002910:	2220      	movs	r2, #32
 8002912:	4694      	mov	ip, r2
 8002914:	44bc      	add	ip, r7
 8002916:	4463      	add	r3, ip
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 800291c:	2300      	movs	r3, #0
 800291e:	22b0      	movs	r2, #176	; 0xb0
 8002920:	2120      	movs	r1, #32
 8002922:	468c      	mov	ip, r1
 8002924:	44bc      	add	ip, r7
 8002926:	4462      	add	r2, ip
 8002928:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 800292a:	2324      	movs	r3, #36	; 0x24
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	0018      	movs	r0, r3
 8002930:	2350      	movs	r3, #80	; 0x50
 8002932:	001a      	movs	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	f006 f877 	bl	8008a28 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800293a:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <main+0x1e8>)
 800293c:	2100      	movs	r1, #0
 800293e:	0018      	movs	r0, r3
 8002940:	f003 f916 	bl	8005b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <main+0x1e8>)
 8002946:	2104      	movs	r1, #4
 8002948:	0018      	movs	r0, r3
 800294a:	f003 f911 	bl	8005b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <main+0x1e8>)
 8002950:	2108      	movs	r1, #8
 8002952:	0018      	movs	r0, r3
 8002954:	f003 f90c 	bl	8005b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002958:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <main+0x1e8>)
 800295a:	210c      	movs	r1, #12
 800295c:	0018      	movs	r0, r3
 800295e:	f003 f907 	bl	8005b70 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <main+0x1ec>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2202      	movs	r2, #2
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <main+0x1ec>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2202      	movs	r2, #2
 8002970:	639a      	str	r2, [r3, #56]	; 0x38

  // SETUP
  for (int i = 0; i < 4; i++)
 8002972:	2300      	movs	r3, #0
 8002974:	22ac      	movs	r2, #172	; 0xac
 8002976:	2120      	movs	r1, #32
 8002978:	468c      	mov	ip, r1
 800297a:	44bc      	add	ip, r7
 800297c:	4462      	add	r2, ip
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e039      	b.n	80029f6 <main+0x19a>
  {
	  pMW[i] = &MW[i];
 8002982:	24ac      	movs	r4, #172	; 0xac
 8002984:	2520      	movs	r5, #32
 8002986:	197b      	adds	r3, r7, r5
 8002988:	191b      	adds	r3, r3, r4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	00da      	lsls	r2, r3, #3
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <main+0x1f0>)
 8002990:	18d1      	adds	r1, r2, r3
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <main+0x1f4>)
 8002994:	197a      	adds	r2, r7, r5
 8002996:	1912      	adds	r2, r2, r4
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <main+0x1f4>)
 80029a0:	197a      	adds	r2, r7, r5
 80029a2:	1912      	adds	r2, r2, r4
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	58d2      	ldr	r2, [r2, r3]
 80029aa:	197b      	adds	r3, r7, r5
 80029ac:	191b      	adds	r3, r3, r4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	0019      	movs	r1, r3
 80029b8:	0010      	movs	r0, r2
 80029ba:	f7ff fcf5 	bl	80023a8 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <main+0x1f4>)
 80029c0:	197a      	adds	r2, r7, r5
 80029c2:	1912      	adds	r2, r2, r4
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	58d1      	ldr	r1, [r2, r3]
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <main+0x1e8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7ff fd3c 	bl	800244c <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <main+0x1f4>)
 80029d6:	197a      	adds	r2, r7, r5
 80029d8:	1912      	adds	r2, r2, r4
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	58d3      	ldr	r3, [r2, r3]
 80029e0:	2100      	movs	r1, #0
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff fdb6 	bl	8002554 <motor_break>
  for (int i = 0; i < 4; i++)
 80029e8:	197b      	adds	r3, r7, r5
 80029ea:	191b      	adds	r3, r3, r4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	197a      	adds	r2, r7, r5
 80029f2:	1912      	adds	r2, r2, r4
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	23ac      	movs	r3, #172	; 0xac
 80029f8:	2220      	movs	r2, #32
 80029fa:	4694      	mov	ip, r2
 80029fc:	44bc      	add	ip, r7
 80029fe:	4463      	add	r3, ip
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	ddbd      	ble.n	8002982 <main+0x126>
  }


  // basicly - clear all uart queues
  HAL_UART_Receive_DMA(&huart3, &UART2_rxBuffer, 1);
 8002a06:	4913      	ldr	r1, [pc, #76]	; (8002a54 <main+0x1f8>)
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <main+0x1fc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f004 fecd 	bl	80077ac <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart3, MSG, strlen(MSG), 50);
 8002a12:	245c      	movs	r4, #92	; 0x5c
 8002a14:	2520      	movs	r5, #32
 8002a16:	197b      	adds	r3, r7, r5
 8002a18:	191b      	adds	r3, r3, r4
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7fd fb7e 	bl	800011c <strlen>
 8002a20:	0003      	movs	r3, r0
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	197b      	adds	r3, r7, r5
 8002a26:	1919      	adds	r1, r3, r4
 8002a28:	480b      	ldr	r0, [pc, #44]	; (8002a58 <main+0x1fc>)
 8002a2a:	2332      	movs	r3, #50	; 0x32
 8002a2c:	f004 fd72 	bl	8007514 <HAL_UART_Transmit>


  for (int i = 0; i < 2; i++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	22a8      	movs	r2, #168	; 0xa8
 8002a34:	2120      	movs	r1, #32
 8002a36:	468c      	mov	ip, r1
 8002a38:	44bc      	add	ip, r7
 8002a3a:	4462      	add	r2, ip
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e03d      	b.n	8002abc <main+0x260>
 8002a40:	20000538 	.word	0x20000538
 8002a44:	200005b0 	.word	0x200005b0
 8002a48:	200004ac 	.word	0x200004ac
 8002a4c:	20000590 	.word	0x20000590
 8002a50:	20000580 	.word	0x20000580
 8002a54:	2000028c 	.word	0x2000028c
 8002a58:	20000428 	.word	0x20000428
  {
	  pLM[i] = &LM[i];
 8002a5c:	20a8      	movs	r0, #168	; 0xa8
 8002a5e:	2520      	movs	r5, #32
 8002a60:	197b      	adds	r3, r7, r5
 8002a62:	181b      	adds	r3, r3, r0
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	0013      	movs	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4aaf      	ldr	r2, [pc, #700]	; (8002d2c <main+0x4d0>)
 8002a70:	1899      	adds	r1, r3, r2
 8002a72:	4baf      	ldr	r3, [pc, #700]	; (8002d30 <main+0x4d4>)
 8002a74:	197a      	adds	r2, r7, r5
 8002a76:	1812      	adds	r2, r2, r0
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	50d1      	str	r1, [r2, r3]
	  linear_motor_init(pLM[i], i+1, i); // init structure
 8002a7e:	4bac      	ldr	r3, [pc, #688]	; (8002d30 <main+0x4d4>)
 8002a80:	0001      	movs	r1, r0
 8002a82:	197a      	adds	r2, r7, r5
 8002a84:	1852      	adds	r2, r2, r1
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	58d0      	ldr	r0, [r2, r3]
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	197b      	adds	r3, r7, r5
 8002a90:	189b      	adds	r3, r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	0014      	movs	r4, r2
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	468c      	mov	ip, r1
 8002aa0:	44bc      	add	ip, r7
 8002aa2:	4462      	add	r2, ip
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	f7ff fd7b 	bl	80025a4 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 8002aae:	197b      	adds	r3, r7, r5
 8002ab0:	191b      	adds	r3, r3, r4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	197a      	adds	r2, r7, r5
 8002ab8:	1912      	adds	r2, r2, r4
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	23a8      	movs	r3, #168	; 0xa8
 8002abe:	2220      	movs	r2, #32
 8002ac0:	4694      	mov	ip, r2
 8002ac2:	44bc      	add	ip, r7
 8002ac4:	4463      	add	r3, ip
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	ddc7      	ble.n	8002a5c <main+0x200>




  // No incoming processing should be done before it is set
  Init_Done = 1;
 8002acc:	4b99      	ldr	r3, [pc, #612]	; (8002d34 <main+0x4d8>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 8002ad2:	21b7      	movs	r1, #183	; 0xb7
 8002ad4:	2020      	movs	r0, #32
 8002ad6:	183b      	adds	r3, r7, r0
 8002ad8:	185b      	adds	r3, r3, r1
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	183b      	adds	r3, r7, r0
 8002ade:	185b      	adds	r3, r3, r1
 8002ae0:	3201      	adds	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 8002ae4:	183b      	adds	r3, r7, r0
 8002ae6:	185b      	adds	r3, r3, r1
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2bff      	cmp	r3, #255	; 0xff
 8002aec:	d103      	bne.n	8002af6 <main+0x29a>
	{
		cycleCounter = 1;
 8002aee:	183b      	adds	r3, r7, r0
 8002af0:	185b      	adds	r3, r3, r1
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	24c4      	movs	r4, #196	; 0xc4
 8002afa:	2520      	movs	r5, #32
 8002afc:	197a      	adds	r2, r7, r5
 8002afe:	1912      	adds	r2, r2, r4
 8002b00:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	22c0      	movs	r2, #192	; 0xc0
 8002b06:	2120      	movs	r1, #32
 8002b08:	468c      	mov	ip, r1
 8002b0a:	44bc      	add	ip, r7
 8002b0c:	4462      	add	r2, ip
 8002b0e:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	22bc      	movs	r2, #188	; 0xbc
 8002b14:	2120      	movs	r1, #32
 8002b16:	468c      	mov	ip, r1
 8002b18:	44bc      	add	ip, r7
 8002b1a:	4462      	add	r2, ip
 8002b1c:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	22b8      	movs	r2, #184	; 0xb8
 8002b22:	2120      	movs	r1, #32
 8002b24:	468c      	mov	ip, r1
 8002b26:	44bc      	add	ip, r7
 8002b28:	4462      	add	r2, ip
 8002b2a:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 8002b2c:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <main+0x4dc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a82      	ldr	r2, [pc, #520]	; (8002d3c <main+0x4e0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d818      	bhi.n	8002b68 <main+0x30c>
 8002b36:	4b80      	ldr	r3, [pc, #512]	; (8002d38 <main+0x4dc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <main+0x30c>
		 {
			 speed1 = 13900.0 / T31pulseWidth;
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <main+0x4dc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fb1c 	bl	8002180 <__aeabi_ui2d>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	000b      	movs	r3, r1
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	497c      	ldr	r1, [pc, #496]	; (8002d40 <main+0x4e4>)
 8002b50:	f7fe f88e 	bl	8000c70 <__aeabi_ddiv>
 8002b54:	0002      	movs	r2, r0
 8002b56:	000b      	movs	r3, r1
 8002b58:	0010      	movs	r0, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	f7ff fb7e 	bl	800225c <__aeabi_d2f>
 8002b60:	1c03      	adds	r3, r0, #0
 8002b62:	197a      	adds	r2, r7, r5
 8002b64:	1912      	adds	r2, r2, r4
 8002b66:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 8002b68:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <main+0x4e8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <main+0x4e0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d81b      	bhi.n	8002baa <main+0x34e>
 8002b72:	4b74      	ldr	r3, [pc, #464]	; (8002d44 <main+0x4e8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <main+0x34e>
		 {
			 speed2 = 13900.0 / T32pulseWidth;
 8002b7a:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <main+0x4e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff fafe 	bl	8002180 <__aeabi_ui2d>
 8002b84:	0002      	movs	r2, r0
 8002b86:	000b      	movs	r3, r1
 8002b88:	2000      	movs	r0, #0
 8002b8a:	496d      	ldr	r1, [pc, #436]	; (8002d40 <main+0x4e4>)
 8002b8c:	f7fe f870 	bl	8000c70 <__aeabi_ddiv>
 8002b90:	0002      	movs	r2, r0
 8002b92:	000b      	movs	r3, r1
 8002b94:	0010      	movs	r0, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	f7ff fb60 	bl	800225c <__aeabi_d2f>
 8002b9c:	1c03      	adds	r3, r0, #0
 8002b9e:	22c0      	movs	r2, #192	; 0xc0
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	468c      	mov	ip, r1
 8002ba4:	44bc      	add	ip, r7
 8002ba6:	4462      	add	r2, ip
 8002ba8:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <main+0x4ec>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <main+0x4e0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d81b      	bhi.n	8002bec <main+0x390>
 8002bb4:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <main+0x4ec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <main+0x390>
		 {
			 speed3 = 13900.0 / T33pulseWidth;
 8002bbc:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <main+0x4ec>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff fadd 	bl	8002180 <__aeabi_ui2d>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	000b      	movs	r3, r1
 8002bca:	2000      	movs	r0, #0
 8002bcc:	495c      	ldr	r1, [pc, #368]	; (8002d40 <main+0x4e4>)
 8002bce:	f7fe f84f 	bl	8000c70 <__aeabi_ddiv>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	000b      	movs	r3, r1
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	f7ff fb3f 	bl	800225c <__aeabi_d2f>
 8002bde:	1c03      	adds	r3, r0, #0
 8002be0:	22bc      	movs	r2, #188	; 0xbc
 8002be2:	2120      	movs	r1, #32
 8002be4:	468c      	mov	ip, r1
 8002be6:	44bc      	add	ip, r7
 8002be8:	4462      	add	r2, ip
 8002bea:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <main+0x4f0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <main+0x4e0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d81b      	bhi.n	8002c2e <main+0x3d2>
 8002bf6:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <main+0x4f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d017      	beq.n	8002c2e <main+0x3d2>
		 {
			 speed4 = 13900.0 / T34pulseWidth;
 8002bfe:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <main+0x4f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7ff fabc 	bl	8002180 <__aeabi_ui2d>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	000b      	movs	r3, r1
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	494c      	ldr	r1, [pc, #304]	; (8002d40 <main+0x4e4>)
 8002c10:	f7fe f82e 	bl	8000c70 <__aeabi_ddiv>
 8002c14:	0002      	movs	r2, r0
 8002c16:	000b      	movs	r3, r1
 8002c18:	0010      	movs	r0, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	f7ff fb1e 	bl	800225c <__aeabi_d2f>
 8002c20:	1c03      	adds	r3, r0, #0
 8002c22:	22b8      	movs	r2, #184	; 0xb8
 8002c24:	2120      	movs	r1, #32
 8002c26:	468c      	mov	ip, r1
 8002c28:	44bc      	add	ip, r7
 8002c2a:	4462      	add	r2, ip
 8002c2c:	6013      	str	r3, [r2, #0]
		 }
		 calculate_angles(&gamma1, &gamma2);
 8002c2e:	2354      	movs	r3, #84	; 0x54
 8002c30:	2420      	movs	r4, #32
 8002c32:	193a      	adds	r2, r7, r4
 8002c34:	18d2      	adds	r2, r2, r3
 8002c36:	2358      	movs	r3, #88	; 0x58
 8002c38:	2120      	movs	r1, #32
 8002c3a:	468c      	mov	ip, r1
 8002c3c:	44bc      	add	ip, r7
 8002c3e:	4463      	add	r3, ip
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fe9c 	bl	8003980 <calculate_angles>
		 memset(MSG, 0, sizeof(MSG));
 8002c48:	265c      	movs	r6, #92	; 0x5c
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	199b      	adds	r3, r3, r6
 8002c4e:	2241      	movs	r2, #65	; 0x41
 8002c50:	2100      	movs	r1, #0
 8002c52:	0018      	movs	r0, r3
 8002c54:	f005 fee8 	bl	8008a28 <memset>
		 sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f %.2f %.2f\n", speed1, speed2, speed3, speed4, gamma1, gamma2);
 8002c58:	23c4      	movs	r3, #196	; 0xc4
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	44bc      	add	ip, r7
 8002c60:	4463      	add	r3, ip
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	f7ff fab2 	bl	80021cc <__aeabi_f2d>
 8002c68:	61b8      	str	r0, [r7, #24]
 8002c6a:	61f9      	str	r1, [r7, #28]
 8002c6c:	23c0      	movs	r3, #192	; 0xc0
 8002c6e:	2220      	movs	r2, #32
 8002c70:	4694      	mov	ip, r2
 8002c72:	44bc      	add	ip, r7
 8002c74:	4463      	add	r3, ip
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	f7ff faa8 	bl	80021cc <__aeabi_f2d>
 8002c7c:	0004      	movs	r4, r0
 8002c7e:	000d      	movs	r5, r1
 8002c80:	23bc      	movs	r3, #188	; 0xbc
 8002c82:	2220      	movs	r2, #32
 8002c84:	4694      	mov	ip, r2
 8002c86:	44bc      	add	ip, r7
 8002c88:	4463      	add	r3, ip
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f7ff fa9e 	bl	80021cc <__aeabi_f2d>
 8002c90:	6138      	str	r0, [r7, #16]
 8002c92:	6179      	str	r1, [r7, #20]
 8002c94:	23b8      	movs	r3, #184	; 0xb8
 8002c96:	2220      	movs	r2, #32
 8002c98:	4694      	mov	ip, r2
 8002c9a:	44bc      	add	ip, r7
 8002c9c:	4463      	add	r3, ip
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	f7ff fa94 	bl	80021cc <__aeabi_f2d>
 8002ca4:	60b8      	str	r0, [r7, #8]
 8002ca6:	60f9      	str	r1, [r7, #12]
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002caa:	1c18      	adds	r0, r3, #0
 8002cac:	f7ff fa8e 	bl	80021cc <__aeabi_f2d>
 8002cb0:	6038      	str	r0, [r7, #0]
 8002cb2:	6079      	str	r1, [r7, #4]
 8002cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb6:	1c18      	adds	r0, r3, #0
 8002cb8:	f7ff fa88 	bl	80021cc <__aeabi_f2d>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	4923      	ldr	r1, [pc, #140]	; (8002d50 <main+0x4f4>)
 8002cc2:	2020      	movs	r0, #32
 8002cc4:	1838      	adds	r0, r7, r0
 8002cc6:	1980      	adds	r0, r0, r6
 8002cc8:	9208      	str	r2, [sp, #32]
 8002cca:	9309      	str	r3, [sp, #36]	; 0x24
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	9206      	str	r2, [sp, #24]
 8002cd2:	9307      	str	r3, [sp, #28]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	9204      	str	r2, [sp, #16]
 8002cda:	9305      	str	r3, [sp, #20]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	9202      	str	r2, [sp, #8]
 8002ce2:	9303      	str	r3, [sp, #12]
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	9501      	str	r5, [sp, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f006 fd2a 	bl	8009744 <siprintf>
		 //sprintf(MSG, "[enc] %d %d %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		 UART_Send(MSG);
 8002cf0:	2420      	movs	r4, #32
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	199b      	adds	r3, r3, r6
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 fcee 	bl	80036d8 <UART_Send>
		 //memset(MSG, 0, sizeof(MSG));
		 //sprintf(MSG, "status: %d %d\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		 //UART_Send(MSG);
	 }

	 for (int i=0; i < 4; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	22a4      	movs	r2, #164	; 0xa4
 8002d00:	2120      	movs	r1, #32
 8002d02:	468c      	mov	ip, r1
 8002d04:	44bc      	add	ip, r7
 8002d06:	4462      	add	r2, ip
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e185      	b.n	8003018 <main+0x7bc>
	 {
		 sumVect = 0.0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	22b0      	movs	r2, #176	; 0xb0
 8002d10:	2120      	movs	r1, #32
 8002d12:	468c      	mov	ip, r1
 8002d14:	44bc      	add	ip, r7
 8002d16:	4462      	add	r2, ip
 8002d18:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	22a0      	movs	r2, #160	; 0xa0
 8002d1e:	2120      	movs	r1, #32
 8002d20:	468c      	mov	ip, r1
 8002d22:	44bc      	add	ip, r7
 8002d24:	4462      	add	r2, ip
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e058      	b.n	8002ddc <main+0x580>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	200005f8 	.word	0x200005f8
 8002d30:	200003dc 	.word	0x200003dc
 8002d34:	20000300 	.word	0x20000300
 8002d38:	200001fc 	.word	0x200001fc
 8002d3c:	0000752f 	.word	0x0000752f
 8002d40:	40cb2600 	.word	0x40cb2600
 8002d44:	20000220 	.word	0x20000220
 8002d48:	20000244 	.word	0x20000244
 8002d4c:	20000268 	.word	0x20000268
 8002d50:	0800ddac 	.word	0x0800ddac
		 {
			 vect[i][j] = vect[i][j+1];
 8002d54:	24a0      	movs	r4, #160	; 0xa0
 8002d56:	2620      	movs	r6, #32
 8002d58:	19bb      	adds	r3, r7, r6
 8002d5a:	191b      	adds	r3, r3, r4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1c58      	adds	r0, r3, #1
 8002d60:	2324      	movs	r3, #36	; 0x24
 8002d62:	18f9      	adds	r1, r7, r3
 8002d64:	25a4      	movs	r5, #164	; 0xa4
 8002d66:	19ba      	adds	r2, r7, r6
 8002d68:	1953      	adds	r3, r2, r5
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	181b      	adds	r3, r3, r0
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	5858      	ldr	r0, [r3, r1]
 8002d78:	2324      	movs	r3, #36	; 0x24
 8002d7a:	18f9      	adds	r1, r7, r3
 8002d7c:	19ba      	adds	r2, r7, r6
 8002d7e:	1953      	adds	r3, r2, r5
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	0013      	movs	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	19ba      	adds	r2, r7, r6
 8002d8a:	1912      	adds	r2, r2, r4
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8002d94:	2324      	movs	r3, #36	; 0x24
 8002d96:	18f9      	adds	r1, r7, r3
 8002d98:	19bb      	adds	r3, r7, r6
 8002d9a:	195b      	adds	r3, r3, r5
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	0013      	movs	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	0035      	movs	r5, r6
 8002da6:	19ba      	adds	r2, r7, r6
 8002da8:	1912      	adds	r2, r2, r4
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	585b      	ldr	r3, [r3, r1]
 8002db2:	2105      	movs	r1, #5
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fd f9cd 	bl	8000154 <__udivsi3>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	21b0      	movs	r1, #176	; 0xb0
 8002dc0:	197b      	adds	r3, r7, r5
 8002dc2:	185b      	adds	r3, r3, r1
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	197a      	adds	r2, r7, r5
 8002dca:	1852      	adds	r2, r2, r1
 8002dcc:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002dce:	197b      	adds	r3, r7, r5
 8002dd0:	191b      	adds	r3, r3, r4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	197a      	adds	r2, r7, r5
 8002dd8:	1912      	adds	r2, r2, r4
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	23a0      	movs	r3, #160	; 0xa0
 8002dde:	2220      	movs	r2, #32
 8002de0:	4694      	mov	ip, r2
 8002de2:	44bc      	add	ip, r7
 8002de4:	4463      	add	r3, ip
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	ddb3      	ble.n	8002d54 <main+0x4f8>
		 }
		 if (i==0)
 8002dec:	24a4      	movs	r4, #164	; 0xa4
 8002dee:	2520      	movs	r5, #32
 8002df0:	197b      	adds	r3, r7, r5
 8002df2:	191b      	adds	r3, r3, r4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d13c      	bne.n	8002e74 <main+0x618>
		 {
			 vect[i][4] = T31pulseWidth;
 8002dfa:	4b9f      	ldr	r3, [pc, #636]	; (8003078 <main+0x81c>)
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	2624      	movs	r6, #36	; 0x24
 8002e00:	19b8      	adds	r0, r7, r6
 8002e02:	197b      	adds	r3, r7, r5
 8002e04:	191b      	adds	r3, r3, r4
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	0013      	movs	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	18c3      	adds	r3, r0, r3
 8002e12:	3310      	adds	r3, #16
 8002e14:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002e16:	19b9      	adds	r1, r7, r6
 8002e18:	197b      	adds	r3, r7, r5
 8002e1a:	191b      	adds	r3, r3, r4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	0013      	movs	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	18cb      	adds	r3, r1, r3
 8002e28:	3310      	adds	r3, #16
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd f990 	bl	8000154 <__udivsi3>
 8002e34:	0003      	movs	r3, r0
 8002e36:	001a      	movs	r2, r3
 8002e38:	21b0      	movs	r1, #176	; 0xb0
 8002e3a:	197b      	adds	r3, r7, r5
 8002e3c:	185b      	adds	r3, r3, r1
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	197a      	adds	r2, r7, r5
 8002e44:	1852      	adds	r2, r2, r1
 8002e46:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 8002e48:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <main+0x81c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	197b      	adds	r3, r7, r5
 8002e4e:	185b      	adds	r3, r3, r1
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	3305      	adds	r3, #5
 8002e56:	da00      	bge.n	8002e5a <main+0x5fe>
 8002e58:	e0d3      	b.n	8003002 <main+0x7a6>
 8002e5a:	4b87      	ldr	r3, [pc, #540]	; (8003078 <main+0x81c>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	197b      	adds	r3, r7, r5
 8002e60:	185b      	adds	r3, r3, r1
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	dd00      	ble.n	8002e6c <main+0x610>
 8002e6a:	e0ca      	b.n	8003002 <main+0x7a6>
				 T31pulseWidth = 0;
 8002e6c:	4b82      	ldr	r3, [pc, #520]	; (8003078 <main+0x81c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e0c6      	b.n	8003002 <main+0x7a6>
		 }
		 else if (i==1)
 8002e74:	24a4      	movs	r4, #164	; 0xa4
 8002e76:	2520      	movs	r5, #32
 8002e78:	197b      	adds	r3, r7, r5
 8002e7a:	191b      	adds	r3, r3, r4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d13c      	bne.n	8002efc <main+0x6a0>
		 {
			 vect[i][4] = T32pulseWidth;
 8002e82:	4b7e      	ldr	r3, [pc, #504]	; (800307c <main+0x820>)
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	2624      	movs	r6, #36	; 0x24
 8002e88:	19b8      	adds	r0, r7, r6
 8002e8a:	197b      	adds	r3, r7, r5
 8002e8c:	191b      	adds	r3, r3, r4
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	0013      	movs	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	18c3      	adds	r3, r0, r3
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002e9e:	19b9      	adds	r1, r7, r6
 8002ea0:	197b      	adds	r3, r7, r5
 8002ea2:	191b      	adds	r3, r3, r4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18cb      	adds	r3, r1, r3
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2105      	movs	r1, #5
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fd f94c 	bl	8000154 <__udivsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	21b0      	movs	r1, #176	; 0xb0
 8002ec2:	197b      	adds	r3, r7, r5
 8002ec4:	185b      	adds	r3, r3, r1
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	189b      	adds	r3, r3, r2
 8002eca:	197a      	adds	r2, r7, r5
 8002ecc:	1852      	adds	r2, r2, r1
 8002ece:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <main+0x820>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	197b      	adds	r3, r7, r5
 8002ed6:	185b      	adds	r3, r3, r1
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	3305      	adds	r3, #5
 8002ede:	da00      	bge.n	8002ee2 <main+0x686>
 8002ee0:	e08f      	b.n	8003002 <main+0x7a6>
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <main+0x820>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	197b      	adds	r3, r7, r5
 8002ee8:	185b      	adds	r3, r3, r1
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	dd00      	ble.n	8002ef4 <main+0x698>
 8002ef2:	e086      	b.n	8003002 <main+0x7a6>
				 T32pulseWidth = 0;
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <main+0x820>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e082      	b.n	8003002 <main+0x7a6>
		 }
		 else if (i==2)
 8002efc:	24a4      	movs	r4, #164	; 0xa4
 8002efe:	2520      	movs	r5, #32
 8002f00:	197b      	adds	r3, r7, r5
 8002f02:	191b      	adds	r3, r3, r4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d13a      	bne.n	8002f80 <main+0x724>
		 {
			 vect[i][4] = T33pulseWidth;
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <main+0x824>)
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	2624      	movs	r6, #36	; 0x24
 8002f10:	19b8      	adds	r0, r7, r6
 8002f12:	197b      	adds	r3, r7, r5
 8002f14:	191b      	adds	r3, r3, r4
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	0013      	movs	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	18c3      	adds	r3, r0, r3
 8002f22:	3310      	adds	r3, #16
 8002f24:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002f26:	19b9      	adds	r1, r7, r6
 8002f28:	197b      	adds	r3, r7, r5
 8002f2a:	191b      	adds	r3, r3, r4
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	0013      	movs	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	18cb      	adds	r3, r1, r3
 8002f38:	3310      	adds	r3, #16
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2105      	movs	r1, #5
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fd f908 	bl	8000154 <__udivsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	001a      	movs	r2, r3
 8002f48:	21b0      	movs	r1, #176	; 0xb0
 8002f4a:	197b      	adds	r3, r7, r5
 8002f4c:	185b      	adds	r3, r3, r1
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	189b      	adds	r3, r3, r2
 8002f52:	197a      	adds	r2, r7, r5
 8002f54:	1852      	adds	r2, r2, r1
 8002f56:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 8002f58:	4b49      	ldr	r3, [pc, #292]	; (8003080 <main+0x824>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	197b      	adds	r3, r7, r5
 8002f5e:	185b      	adds	r3, r3, r1
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	3305      	adds	r3, #5
 8002f66:	db4c      	blt.n	8003002 <main+0x7a6>
 8002f68:	4b45      	ldr	r3, [pc, #276]	; (8003080 <main+0x824>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	197b      	adds	r3, r7, r5
 8002f6e:	185b      	adds	r3, r3, r1
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	dc44      	bgt.n	8003002 <main+0x7a6>
				 T33pulseWidth = 0;
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <main+0x824>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e040      	b.n	8003002 <main+0x7a6>
		 }
		 else if (i==3)
 8002f80:	24a4      	movs	r4, #164	; 0xa4
 8002f82:	2520      	movs	r5, #32
 8002f84:	197b      	adds	r3, r7, r5
 8002f86:	191b      	adds	r3, r3, r4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d139      	bne.n	8003002 <main+0x7a6>
		 {
			 vect[i][4] = T34pulseWidth;
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <main+0x828>)
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	2624      	movs	r6, #36	; 0x24
 8002f94:	19b8      	adds	r0, r7, r6
 8002f96:	197b      	adds	r3, r7, r5
 8002f98:	191b      	adds	r3, r3, r4
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	18c3      	adds	r3, r0, r3
 8002fa6:	3310      	adds	r3, #16
 8002fa8:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002faa:	19b9      	adds	r1, r7, r6
 8002fac:	197b      	adds	r3, r7, r5
 8002fae:	191b      	adds	r3, r3, r4
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	0013      	movs	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	18cb      	adds	r3, r1, r3
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2105      	movs	r1, #5
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fd f8c6 	bl	8000154 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	001a      	movs	r2, r3
 8002fcc:	21b0      	movs	r1, #176	; 0xb0
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	185b      	adds	r3, r3, r1
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	189b      	adds	r3, r3, r2
 8002fd6:	197a      	adds	r2, r7, r5
 8002fd8:	1852      	adds	r2, r2, r1
 8002fda:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 8002fdc:	4b29      	ldr	r3, [pc, #164]	; (8003084 <main+0x828>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	197b      	adds	r3, r7, r5
 8002fe2:	185b      	adds	r3, r3, r1
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	3305      	adds	r3, #5
 8002fea:	db0a      	blt.n	8003002 <main+0x7a6>
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <main+0x828>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	197b      	adds	r3, r7, r5
 8002ff2:	185b      	adds	r3, r3, r1
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	dc02      	bgt.n	8003002 <main+0x7a6>
				 T34pulseWidth = 0;
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <main+0x828>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8003002:	22a4      	movs	r2, #164	; 0xa4
 8003004:	2320      	movs	r3, #32
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	189b      	adds	r3, r3, r2
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	2120      	movs	r1, #32
 8003010:	468c      	mov	ip, r1
 8003012:	44bc      	add	ip, r7
 8003014:	4462      	add	r2, ip
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	23a4      	movs	r3, #164	; 0xa4
 800301a:	2220      	movs	r2, #32
 800301c:	4694      	mov	ip, r2
 800301e:	44bc      	add	ip, r7
 8003020:	4463      	add	r3, ip
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	dc00      	bgt.n	800302a <main+0x7ce>
 8003028:	e670      	b.n	8002d0c <main+0x4b0>
		 }
	 }

	 HAL_Delay(50);
 800302a:	2032      	movs	r0, #50	; 0x32
 800302c:	f001 fbc4 	bl	80047b8 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 if ((UART_newMessage == 1) && (cycleCounter % 2 == 0))
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <main+0x82c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d000      	beq.n	800303a <main+0x7de>
 8003038:	e54b      	b.n	8002ad2 <main+0x276>
 800303a:	23b7      	movs	r3, #183	; 0xb7
 800303c:	2220      	movs	r2, #32
 800303e:	4694      	mov	ip, r2
 8003040:	44bc      	add	ip, r7
 8003042:	4463      	add	r3, ip
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d000      	beq.n	8003052 <main+0x7f6>
 8003050:	e53f      	b.n	8002ad2 <main+0x276>
	 {
		 // check if received string contains [drv] message and parse it
		 drv_messageCheck(rxString);
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <main+0x830>)
 8003054:	0018      	movs	r0, r3
 8003056:	f000 fb5f 	bl	8003718 <drv_messageCheck>
		 cal_messageCheck(rxString);
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <main+0x830>)
 800305c:	0018      	movs	r0, r3
 800305e:	f000 fc29 	bl	80038b4 <cal_messageCheck>
		 // clear received b
		 memset(rxString, 0, sizeof(rxString));
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <main+0x830>)
 8003064:	2264      	movs	r2, #100	; 0x64
 8003066:	2100      	movs	r1, #0
 8003068:	0018      	movs	r0, r3
 800306a:	f005 fcdd 	bl	8008a28 <memset>
		 // set newMessage flag to 0 to begin new string receive
		 UART_newMessage = 0;
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <main+0x82c>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
	cycleCounter++;
 8003074:	e52d      	b.n	8002ad2 <main+0x276>
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	200001fc 	.word	0x200001fc
 800307c:	20000220 	.word	0x20000220
 8003080:	20000244 	.word	0x20000244
 8003084:	20000268 	.word	0x20000268
 8003088:	2000028d 	.word	0x2000028d
 800308c:	20000290 	.word	0x20000290

08003090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b091      	sub	sp, #68	; 0x44
 8003094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003096:	2410      	movs	r4, #16
 8003098:	193b      	adds	r3, r7, r4
 800309a:	0018      	movs	r0, r3
 800309c:	2330      	movs	r3, #48	; 0x30
 800309e:	001a      	movs	r2, r3
 80030a0:	2100      	movs	r1, #0
 80030a2:	f005 fcc1 	bl	8008a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a6:	003b      	movs	r3, r7
 80030a8:	0018      	movs	r0, r3
 80030aa:	2310      	movs	r3, #16
 80030ac:	001a      	movs	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f005 fcba 	bl	8008a28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030b4:	0021      	movs	r1, r4
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2202      	movs	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2201      	movs	r2, #1
 80030c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2210      	movs	r2, #16
 80030c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	0018      	movs	r0, r3
 80030d2:	f002 f833 	bl	800513c <HAL_RCC_OscConfig>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d001      	beq.n	80030de <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80030da:	f000 ffc1 	bl	8004060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030de:	003b      	movs	r3, r7
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030e4:	003b      	movs	r3, r7
 80030e6:	2200      	movs	r2, #0
 80030e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ea:	003b      	movs	r3, r7
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030f0:	003b      	movs	r3, r7
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030f6:	003b      	movs	r3, r7
 80030f8:	2100      	movs	r1, #0
 80030fa:	0018      	movs	r0, r3
 80030fc:	f002 fb3c 	bl	8005778 <HAL_RCC_ClockConfig>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003104:	f000 ffac 	bl	8004060 <Error_Handler>
  }
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b011      	add	sp, #68	; 0x44
 800310e:	bd90      	pop	{r4, r7, pc}

08003110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b096      	sub	sp, #88	; 0x58
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003116:	2348      	movs	r3, #72	; 0x48
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	0018      	movs	r0, r3
 800311c:	2310      	movs	r3, #16
 800311e:	001a      	movs	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f005 fc81 	bl	8008a28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003126:	2340      	movs	r3, #64	; 0x40
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	0018      	movs	r0, r3
 800312c:	2308      	movs	r3, #8
 800312e:	001a      	movs	r2, r3
 8003130:	2100      	movs	r1, #0
 8003132:	f005 fc79 	bl	8008a28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003136:	2324      	movs	r3, #36	; 0x24
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	0018      	movs	r0, r3
 800313c:	231c      	movs	r3, #28
 800313e:	001a      	movs	r2, r3
 8003140:	2100      	movs	r1, #0
 8003142:	f005 fc71 	bl	8008a28 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	0018      	movs	r0, r3
 800314a:	2320      	movs	r3, #32
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f005 fc6a 	bl	8008a28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003154:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003156:	4a57      	ldr	r2, [pc, #348]	; (80032b4 <MX_TIM1_Init+0x1a4>)
 8003158:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 800315a:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 800315c:	229f      	movs	r2, #159	; 0x9f
 800315e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003166:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003168:	2263      	movs	r2, #99	; 0x63
 800316a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316c:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003172:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003178:	4b4d      	ldr	r3, [pc, #308]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800317e:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003180:	0018      	movs	r0, r3
 8003182:	f002 fc4d 	bl	8005a20 <HAL_TIM_Base_Init>
 8003186:	1e03      	subs	r3, r0, #0
 8003188:	d001      	beq.n	800318e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800318a:	f000 ff69 	bl	8004060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800318e:	2148      	movs	r1, #72	; 0x48
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	0152      	lsls	r2, r2, #5
 8003196:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003198:	187a      	adds	r2, r7, r1
 800319a:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 800319c:	0011      	movs	r1, r2
 800319e:	0018      	movs	r0, r3
 80031a0:	f003 fb2e 	bl	8006800 <HAL_TIM_ConfigClockSource>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80031a8:	f000 ff5a 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031ac:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f002 fc86 	bl	8005ac0 <HAL_TIM_PWM_Init>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80031b8:	f000 ff52 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031ca:	187a      	adds	r2, r7, r1
 80031cc:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f004 f885 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80031da:	f000 ff41 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031de:	2124      	movs	r1, #36	; 0x24
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	2260      	movs	r2, #96	; 0x60
 80031e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	2200      	movs	r2, #0
 80031ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2200      	movs	r2, #0
 8003202:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800320a:	1879      	adds	r1, r7, r1
 800320c:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 800320e:	2200      	movs	r2, #0
 8003210:	0018      	movs	r0, r3
 8003212:	f003 fa2f 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d001      	beq.n	800321e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800321a:	f000 ff21 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800321e:	2324      	movs	r3, #36	; 0x24
 8003220:	18f9      	adds	r1, r7, r3
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003224:	2204      	movs	r2, #4
 8003226:	0018      	movs	r0, r3
 8003228:	f003 fa24 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8003230:	f000 ff16 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003234:	2324      	movs	r3, #36	; 0x24
 8003236:	18f9      	adds	r1, r7, r3
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 800323a:	2208      	movs	r2, #8
 800323c:	0018      	movs	r0, r3
 800323e:	f003 fa19 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 8003242:	1e03      	subs	r3, r0, #0
 8003244:	d001      	beq.n	800324a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8003246:	f000 ff0b 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800324a:	2324      	movs	r3, #36	; 0x24
 800324c:	18f9      	adds	r1, r7, r3
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003250:	220c      	movs	r2, #12
 8003252:	0018      	movs	r0, r3
 8003254:	f003 fa0e 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d001      	beq.n	8003260 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800325c:	f000 ff00 	bl	8004060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2200      	movs	r2, #0
 800326a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	0192      	lsls	r2, r2, #6
 8003284:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	2200      	movs	r2, #0
 800328a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800328c:	1d3a      	adds	r2, r7, #4
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 8003290:	0011      	movs	r1, r2
 8003292:	0018      	movs	r0, r3
 8003294:	f004 f87c 	bl	8007390 <HAL_TIMEx_ConfigBreakDeadTime>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800329c:	f000 fee0 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <MX_TIM1_Init+0x1a0>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 ffbe 	bl	8004224 <HAL_TIM_MspPostInit>

}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b016      	add	sp, #88	; 0x58
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200005b0 	.word	0x200005b0
 80032b4:	40012c00 	.word	0x40012c00

080032b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032be:	2310      	movs	r3, #16
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	0018      	movs	r0, r3
 80032c4:	2308      	movs	r3, #8
 80032c6:	001a      	movs	r2, r3
 80032c8:	2100      	movs	r1, #0
 80032ca:	f005 fbad 	bl	8008a28 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80032ce:	003b      	movs	r3, r7
 80032d0:	0018      	movs	r0, r3
 80032d2:	2310      	movs	r3, #16
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f005 fba6 	bl	8008a28 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <MX_TIM3_Init+0xec>)
 80032de:	4a32      	ldr	r2, [pc, #200]	; (80033a8 <MX_TIM3_Init+0xf0>)
 80032e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80032e2:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <MX_TIM3_Init+0xec>)
 80032e4:	224f      	movs	r2, #79	; 0x4f
 80032e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <MX_TIM3_Init+0xec>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <MX_TIM3_Init+0xec>)
 80032f0:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <MX_TIM3_Init+0xf4>)
 80032f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <MX_TIM3_Init+0xec>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <MX_TIM3_Init+0xec>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <MX_TIM3_Init+0xec>)
 8003302:	0018      	movs	r0, r3
 8003304:	f002 fea4 	bl	8006050 <HAL_TIM_IC_Init>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800330c:	f000 fea8 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003310:	2110      	movs	r1, #16
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800331e:	187a      	adds	r2, r7, r1
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <MX_TIM3_Init+0xec>)
 8003322:	0011      	movs	r1, r2
 8003324:	0018      	movs	r0, r3
 8003326:	f003 ffdb 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800332e:	f000 fe97 	bl	8004060 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003332:	003b      	movs	r3, r7
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003338:	003b      	movs	r3, r7
 800333a:	2201      	movs	r2, #1
 800333c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800333e:	003b      	movs	r3, r7
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 8003344:	003b      	movs	r3, r7
 8003346:	2203      	movs	r2, #3
 8003348:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800334a:	0039      	movs	r1, r7
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <MX_TIM3_Init+0xec>)
 800334e:	2200      	movs	r2, #0
 8003350:	0018      	movs	r0, r3
 8003352:	f003 f8eb 	bl	800652c <HAL_TIM_IC_ConfigChannel>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d001      	beq.n	800335e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800335a:	f000 fe81 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800335e:	0039      	movs	r1, r7
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <MX_TIM3_Init+0xec>)
 8003362:	2204      	movs	r2, #4
 8003364:	0018      	movs	r0, r3
 8003366:	f003 f8e1 	bl	800652c <HAL_TIM_IC_ConfigChannel>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800336e:	f000 fe77 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003372:	0039      	movs	r1, r7
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <MX_TIM3_Init+0xec>)
 8003376:	2208      	movs	r2, #8
 8003378:	0018      	movs	r0, r3
 800337a:	f003 f8d7 	bl	800652c <HAL_TIM_IC_ConfigChannel>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8003382:	f000 fe6d 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003386:	0039      	movs	r1, r7
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <MX_TIM3_Init+0xec>)
 800338a:	220c      	movs	r2, #12
 800338c:	0018      	movs	r0, r3
 800338e:	f003 f8cd 	bl	800652c <HAL_TIM_IC_ConfigChannel>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8003396:	f000 fe63 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b006      	add	sp, #24
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20000538 	.word	0x20000538
 80033a8:	40000400 	.word	0x40000400
 80033ac:	0000c34f 	.word	0x0000c34f

080033b0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b096      	sub	sp, #88	; 0x58
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033b6:	2348      	movs	r3, #72	; 0x48
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	0018      	movs	r0, r3
 80033bc:	2310      	movs	r3, #16
 80033be:	001a      	movs	r2, r3
 80033c0:	2100      	movs	r1, #0
 80033c2:	f005 fb31 	bl	8008a28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c6:	2340      	movs	r3, #64	; 0x40
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	0018      	movs	r0, r3
 80033cc:	2308      	movs	r3, #8
 80033ce:	001a      	movs	r2, r3
 80033d0:	2100      	movs	r1, #0
 80033d2:	f005 fb29 	bl	8008a28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d6:	2324      	movs	r3, #36	; 0x24
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	0018      	movs	r0, r3
 80033dc:	231c      	movs	r3, #28
 80033de:	001a      	movs	r2, r3
 80033e0:	2100      	movs	r1, #0
 80033e2:	f005 fb21 	bl	8008a28 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	0018      	movs	r0, r3
 80033ea:	2320      	movs	r3, #32
 80033ec:	001a      	movs	r2, r3
 80033ee:	2100      	movs	r1, #0
 80033f0:	f005 fb1a 	bl	8008a28 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <MX_TIM15_Init+0x174>)
 80033f6:	4a4c      	ldr	r2, [pc, #304]	; (8003528 <MX_TIM15_Init+0x178>)
 80033f8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 160-1;
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <MX_TIM15_Init+0x174>)
 80033fc:	229f      	movs	r2, #159	; 0x9f
 80033fe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <MX_TIM15_Init+0x174>)
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <MX_TIM15_Init+0x174>)
 8003408:	2204      	movs	r2, #4
 800340a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <MX_TIM15_Init+0x174>)
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <MX_TIM15_Init+0x174>)
 8003414:	2264      	movs	r2, #100	; 0x64
 8003416:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003418:	4b42      	ldr	r3, [pc, #264]	; (8003524 <MX_TIM15_Init+0x174>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <MX_TIM15_Init+0x174>)
 8003420:	0018      	movs	r0, r3
 8003422:	f002 fafd 	bl	8005a20 <HAL_TIM_Base_Init>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d001      	beq.n	800342e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800342a:	f000 fe19 	bl	8004060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800342e:	2148      	movs	r1, #72	; 0x48
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	0152      	lsls	r2, r2, #5
 8003436:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003438:	187a      	adds	r2, r7, r1
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <MX_TIM15_Init+0x174>)
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f003 f9de 	bl	8006800 <HAL_TIM_ConfigClockSource>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d001      	beq.n	800344c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003448:	f000 fe0a 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <MX_TIM15_Init+0x174>)
 800344e:	0018      	movs	r0, r3
 8003450:	f002 fb36 	bl	8005ac0 <HAL_TIM_PWM_Init>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d001      	beq.n	800345c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003458:	f000 fe02 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345c:	2140      	movs	r1, #64	; 0x40
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800346a:	187a      	adds	r2, r7, r1
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <MX_TIM15_Init+0x174>)
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f003 ff35 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800347a:	f000 fdf1 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800347e:	2124      	movs	r1, #36	; 0x24
 8003480:	187b      	adds	r3, r7, r1
 8003482:	2260      	movs	r2, #96	; 0x60
 8003484:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003486:	187b      	adds	r3, r7, r1
 8003488:	2200      	movs	r2, #0
 800348a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800348c:	187b      	adds	r3, r7, r1
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034aa:	1879      	adds	r1, r7, r1
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <MX_TIM15_Init+0x174>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	0018      	movs	r0, r3
 80034b2:	f003 f8df 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80034ba:	f000 fdd1 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034be:	2324      	movs	r3, #36	; 0x24
 80034c0:	18f9      	adds	r1, r7, r3
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <MX_TIM15_Init+0x174>)
 80034c4:	2204      	movs	r2, #4
 80034c6:	0018      	movs	r0, r3
 80034c8:	f003 f8d4 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80034d0:	f000 fdc6 	bl	8004060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	0192      	lsls	r2, r2, #6
 80034f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	2200      	movs	r2, #0
 80034fe:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003500:	1d3a      	adds	r2, r7, #4
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <MX_TIM15_Init+0x174>)
 8003504:	0011      	movs	r1, r2
 8003506:	0018      	movs	r0, r3
 8003508:	f003 ff42 	bl	8007390 <HAL_TIMEx_ConfigBreakDeadTime>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 8003510:	f000 fda6 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <MX_TIM15_Init+0x174>)
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fe84 	bl	8004224 <HAL_TIM_MspPostInit>

}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b016      	add	sp, #88	; 0x58
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200004ac 	.word	0x200004ac
 8003528:	40014000 	.word	0x40014000

0800352c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <MX_USART3_UART_Init+0x5c>)
 8003534:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003538:	22e1      	movs	r2, #225	; 0xe1
 800353a:	0252      	lsls	r2, r2, #9
 800353c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <MX_USART3_UART_Init+0x58>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003552:	220c      	movs	r2, #12
 8003554:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <MX_USART3_UART_Init+0x58>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <MX_USART3_UART_Init+0x58>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <MX_USART3_UART_Init+0x58>)
 8003570:	0018      	movs	r0, r3
 8003572:	f003 ff7b 	bl	800746c <HAL_UART_Init>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d001      	beq.n	800357e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800357a:	f000 fd71 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000428 	.word	0x20000428
 8003588:	40004800 	.word	0x40004800

0800358c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <MX_DMA_Init+0x38>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <MX_DMA_Init+0x38>)
 8003598:	2101      	movs	r1, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	615a      	str	r2, [r3, #20]
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <MX_DMA_Init+0x38>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2201      	movs	r2, #1
 80035a4:	4013      	ands	r3, r2
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80035aa:	2200      	movs	r2, #0
 80035ac:	2100      	movs	r1, #0
 80035ae:	200a      	movs	r0, #10
 80035b0:	f001 f9d2 	bl	8004958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80035b4:	200a      	movs	r0, #10
 80035b6:	f001 f9e4 	bl	8004982 <HAL_NVIC_EnableIRQ>

}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b002      	add	sp, #8
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	40021000 	.word	0x40021000

080035c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b08b      	sub	sp, #44	; 0x2c
 80035cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ce:	2414      	movs	r4, #20
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	0018      	movs	r0, r3
 80035d4:	2314      	movs	r3, #20
 80035d6:	001a      	movs	r2, r3
 80035d8:	2100      	movs	r1, #0
 80035da:	f005 fa25 	bl	8008a28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <MX_GPIO_Init+0x100>)
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <MX_GPIO_Init+0x100>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0309      	lsls	r1, r1, #12
 80035e8:	430a      	orrs	r2, r1
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <MX_GPIO_Init+0x100>)
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	031b      	lsls	r3, r3, #12
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035fa:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <MX_GPIO_Init+0x100>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <MX_GPIO_Init+0x100>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	03c9      	lsls	r1, r1, #15
 8003604:	430a      	orrs	r2, r1
 8003606:	615a      	str	r2, [r3, #20]
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <MX_GPIO_Init+0x100>)
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	03db      	lsls	r3, r3, #15
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <MX_GPIO_Init+0x100>)
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <MX_GPIO_Init+0x100>)
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	02c9      	lsls	r1, r1, #11
 8003620:	430a      	orrs	r2, r1
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <MX_GPIO_Init+0x100>)
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	02db      	lsls	r3, r3, #11
 800362c:	4013      	ands	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <MX_GPIO_Init+0x100>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <MX_GPIO_Init+0x100>)
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0289      	lsls	r1, r1, #10
 800363c:	430a      	orrs	r2, r1
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <MX_GPIO_Init+0x100>)
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	029b      	lsls	r3, r3, #10
 8003648:	4013      	ands	r3, r2
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 800364e:	491f      	ldr	r1, [pc, #124]	; (80036cc <MX_GPIO_Init+0x104>)
 8003650:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <MX_GPIO_Init+0x108>)
 8003652:	2200      	movs	r2, #0
 8003654:	0018      	movs	r0, r3
 8003656:	f001 fd54 	bl	8005102 <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	0192      	lsls	r2, r2, #6
 8003660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003662:	193b      	adds	r3, r7, r4
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003668:	193b      	adds	r3, r7, r4
 800366a:	2201      	movs	r2, #1
 800366c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	193b      	adds	r3, r7, r4
 8003670:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <MX_GPIO_Init+0x108>)
 8003672:	0019      	movs	r1, r3
 8003674:	0010      	movs	r0, r2
 8003676:	f001 fbb7 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 800367a:	193b      	adds	r3, r7, r4
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <MX_GPIO_Init+0x104>)
 800367e:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2201      	movs	r2, #1
 8003684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	193b      	adds	r3, r7, r4
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	193b      	adds	r3, r7, r4
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003692:	193b      	adds	r3, r7, r4
 8003694:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <MX_GPIO_Init+0x108>)
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f001 fba5 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800369e:	0021      	movs	r1, r4
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2200      	movs	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2201      	movs	r2, #1
 80036b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <MX_GPIO_Init+0x10c>)
 80036b6:	0019      	movs	r1, r3
 80036b8:	0010      	movs	r0, r2
 80036ba:	f001 fb95 	bl	8004de8 <HAL_GPIO_Init>

}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b00b      	add	sp, #44	; 0x2c
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000
 80036cc:	0000040f 	.word	0x0000040f
 80036d0:	48000800 	.word	0x48000800
 80036d4:	48000400 	.word	0x48000400

080036d8 <UART_Send>:

/* USER CODE BEGIN 4 */

void UART_Send(const uint8_t message[])
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	while(UART_TX_Busy){};
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <UART_Send+0x38>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1fa      	bne.n	80036e2 <UART_Send+0xa>
	UART_TX_Busy = 1;
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <UART_Send+0x38>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)message, strlen(message));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fc fd11 	bl	800011c <strlen>
 80036fa:	0003      	movs	r3, r0
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <UART_Send+0x3c>)
 8003702:	0018      	movs	r0, r3
 8003704:	f003 ffb0 	bl	8007668 <HAL_UART_Transmit_DMA>
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	200002f4 	.word	0x200002f4
 8003714:	20000428 	.word	0x20000428

08003718 <drv_messageCheck>:

void drv_messageCheck(const char message[])
{
 8003718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371a:	b09b      	sub	sp, #108	; 0x6c
 800371c:	af06      	add	r7, sp, #24
 800371e:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4b5e      	ldr	r3, [pc, #376]	; (800389c <drv_messageCheck+0x184>)
 8003724:	0011      	movs	r1, r2
 8003726:	0018      	movs	r0, r3
 8003728:	f006 f8a2 	bl	8009870 <strcpy>

	uint8_t MSG[5] = {'\0'};
 800372c:	2548      	movs	r5, #72	; 0x48
 800372e:	197b      	adds	r3, r7, r5
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	711a      	strb	r2, [r3, #4]
	int arw1=0, arw2=0, arw3=0, arw4=0, motor_brk=0;
 8003738:	2300      	movs	r3, #0
 800373a:	647b      	str	r3, [r7, #68]	; 0x44
 800373c:	2300      	movs	r3, #0
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003744:	2300      	movs	r3, #0
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
 8003748:	2300      	movs	r3, #0
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
	int turn = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
	sscanf(cmd_buf, "%s %d %d %d %d %d %d", &MSG, &arw1, &arw2, &arw3, &arw4, &turn, &motor_brk);
 8003750:	2344      	movs	r3, #68	; 0x44
 8003752:	18fc      	adds	r4, r7, r3
 8003754:	197a      	adds	r2, r7, r5
 8003756:	4952      	ldr	r1, [pc, #328]	; (80038a0 <drv_messageCheck+0x188>)
 8003758:	4850      	ldr	r0, [pc, #320]	; (800389c <drv_messageCheck+0x184>)
 800375a:	2334      	movs	r3, #52	; 0x34
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	9304      	str	r3, [sp, #16]
 8003760:	2330      	movs	r3, #48	; 0x30
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	2338      	movs	r3, #56	; 0x38
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	9302      	str	r3, [sp, #8]
 800376c:	233c      	movs	r3, #60	; 0x3c
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	0023      	movs	r3, r4
 800377a:	f006 f803 	bl	8009784 <siscanf>
	if (!strcmp(MSG, "[drv]")) // returns 0 if strings are equal
 800377e:	4a49      	ldr	r2, [pc, #292]	; (80038a4 <drv_messageCheck+0x18c>)
 8003780:	197b      	adds	r3, r7, r5
 8003782:	0011      	movs	r1, r2
 8003784:	0018      	movs	r0, r3
 8003786:	f7fc fcbf 	bl	8000108 <strcmp>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d000      	beq.n	8003790 <drv_messageCheck+0x78>
 800378e:	e080      	b.n	8003892 <drv_messageCheck+0x17a>
	{
		uint8_t reply[40] = {'\0'};
 8003790:	2408      	movs	r4, #8
 8003792:	193b      	adds	r3, r7, r4
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	3304      	adds	r3, #4
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	2100      	movs	r1, #0
 800379e:	0018      	movs	r0, r3
 80037a0:	f005 f942 	bl	8008a28 <memset>
		sprintf(reply, "received: %d %d %d %d %d %d \n", arw1, arw2, arw3, arw4, turn, motor_brk);
 80037a4:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 80037a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a8:	469c      	mov	ip, r3
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037b2:	4d3d      	ldr	r5, [pc, #244]	; (80038a8 <drv_messageCheck+0x190>)
 80037b4:	193c      	adds	r4, r7, r4
 80037b6:	9003      	str	r0, [sp, #12]
 80037b8:	9102      	str	r1, [sp, #8]
 80037ba:	9201      	str	r2, [sp, #4]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4663      	mov	r3, ip
 80037c0:	0032      	movs	r2, r6
 80037c2:	0029      	movs	r1, r5
 80037c4:	0020      	movs	r0, r4
 80037c6:	f005 ffbd 	bl	8009744 <siprintf>
		UART_Send(reply);
 80037ca:	2408      	movs	r4, #8
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7ff ff82 	bl	80036d8 <UART_Send>

		// Since only 1 break pin is used, it is enough to call this function for only 1 wheel
		motor_break(pMW[0], motor_brk);
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <drv_messageCheck+0x194>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	0011      	movs	r1, r2
 80037de:	0018      	movs	r0, r3
 80037e0:	f7fe feb8 	bl	8002554 <motor_break>

		// Direction is set separately for left and right sided wheels
		if (arw1 < 0 && arw3 < 0)
 80037e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da09      	bge.n	80037fe <drv_messageCheck+0xe6>
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da06      	bge.n	80037fe <drv_messageCheck+0xe6>
		{
			motor_DIR(pMW[0], 1); // set direction to backward
 80037f0:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <drv_messageCheck+0x194>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fe fe6a 	bl	80024d0 <motor_DIR>
 80037fc:	e005      	b.n	800380a <drv_messageCheck+0xf2>
		}
		else
		{
			motor_DIR(pMW[0], 0); // set direction to forward
 80037fe:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <drv_messageCheck+0x194>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2100      	movs	r1, #0
 8003804:	0018      	movs	r0, r3
 8003806:	f7fe fe63 	bl	80024d0 <motor_DIR>
		}
		if (arw2 < 0 && arw4 < 0)
 800380a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	da09      	bge.n	8003824 <drv_messageCheck+0x10c>
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	2b00      	cmp	r3, #0
 8003814:	da06      	bge.n	8003824 <drv_messageCheck+0x10c>
		{
			motor_DIR(pMW[1], 1); // set direction to backward
 8003816:	4b25      	ldr	r3, [pc, #148]	; (80038ac <drv_messageCheck+0x194>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2101      	movs	r1, #1
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe fe57 	bl	80024d0 <motor_DIR>
 8003822:	e005      	b.n	8003830 <drv_messageCheck+0x118>
		}
		else
		{
			motor_DIR(pMW[1], 0); // set direction to forward
 8003824:	4b21      	ldr	r3, [pc, #132]	; (80038ac <drv_messageCheck+0x194>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2100      	movs	r1, #0
 800382a:	0018      	movs	r0, r3
 800382c:	f7fe fe50 	bl	80024d0 <motor_DIR>
		}

		motorPWM_pulse(&htim1, pMW[0], arw1 );
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <drv_messageCheck+0x194>)
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <drv_messageCheck+0x198>)
 8003838:	0018      	movs	r0, r3
 800383a:	f7fe fe07 	bl	800244c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[1], arw2 );
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <drv_messageCheck+0x194>)
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003844:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <drv_messageCheck+0x198>)
 8003846:	0018      	movs	r0, r3
 8003848:	f7fe fe00 	bl	800244c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[2], arw3 );
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <drv_messageCheck+0x194>)
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <drv_messageCheck+0x198>)
 8003854:	0018      	movs	r0, r3
 8003856:	f7fe fdf9 	bl	800244c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[3], arw4 );
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <drv_messageCheck+0x194>)
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <drv_messageCheck+0x198>)
 8003862:	0018      	movs	r0, r3
 8003864:	f7fe fdf2 	bl	800244c <motorPWM_pulse>

		// Positive turn direction is RIGHT
		if (abs(turn) > 25)
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	17da      	asrs	r2, r3, #31
 800386c:	189b      	adds	r3, r3, r2
 800386e:	4053      	eors	r3, r2
 8003870:	2b19      	cmp	r3, #25
 8003872:	dd07      	ble.n	8003884 <drv_messageCheck+0x16c>
		{
			turn = turn / abs(turn) * 25;
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	2b00      	cmp	r3, #0
 8003878:	da02      	bge.n	8003880 <drv_messageCheck+0x168>
 800387a:	2319      	movs	r3, #25
 800387c:	425b      	negs	r3, r3
 800387e:	e000      	b.n	8003882 <drv_messageCheck+0x16a>
 8003880:	2319      	movs	r3, #25
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
		}
		calculate_pulses(turn, -turn);
 8003884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	425b      	negs	r3, r3
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f000 f90f 	bl	8003ab0 <calculate_pulses>
		//linear_motor_set_target(pLM[0], turn);
		//linear_motor_set_target(pLM[1], turn);
		//linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
		//linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
	}
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b015      	add	sp, #84	; 0x54
 8003898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000304 	.word	0x20000304
 80038a0:	0800ddd4 	.word	0x0800ddd4
 80038a4:	0800ddec 	.word	0x0800ddec
 80038a8:	0800ddf4 	.word	0x0800ddf4
 80038ac:	20000580 	.word	0x20000580
 80038b0:	200005b0 	.word	0x200005b0

080038b4 <cal_messageCheck>:

void cal_messageCheck(const char message[])
{
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	b08e      	sub	sp, #56	; 0x38
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <cal_messageCheck+0xa4>)
 80038c0:	0011      	movs	r1, r2
 80038c2:	0018      	movs	r0, r3
 80038c4:	f005 ffd4 	bl	8009870 <strcpy>

	uint8_t MSG[5] = {'\0'};
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	2200      	movs	r2, #0
 80038d2:	711a      	strb	r2, [r3, #4]
	sscanf(cmd_buf, "%s", &MSG);
 80038d4:	000c      	movs	r4, r1
 80038d6:	187a      	adds	r2, r7, r1
 80038d8:	4920      	ldr	r1, [pc, #128]	; (800395c <cal_messageCheck+0xa8>)
 80038da:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <cal_messageCheck+0xa4>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f005 ff51 	bl	8009784 <siscanf>
	if (!strcmp(MSG, "[cal]")) // returns 0 if strings are equal
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <cal_messageCheck+0xac>)
 80038e4:	193b      	adds	r3, r7, r4
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7fc fc0d 	bl	8000108 <strcmp>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d12e      	bne.n	8003950 <cal_messageCheck+0x9c>
	{
		uint8_t reply[] = "received calibration command\n";
 80038f2:	200c      	movs	r0, #12
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <cal_messageCheck+0xb0>)
 80038f8:	ca32      	ldmia	r2!, {r1, r4, r5}
 80038fa:	c332      	stmia	r3!, {r1, r4, r5}
 80038fc:	ca32      	ldmia	r2!, {r1, r4, r5}
 80038fe:	c332      	stmia	r3!, {r1, r4, r5}
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	6019      	str	r1, [r3, #0]
 8003904:	8892      	ldrh	r2, [r2, #4]
 8003906:	809a      	strh	r2, [r3, #4]
		UART_Send(reply);
 8003908:	183b      	adds	r3, r7, r0
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff fee4 	bl	80036d8 <UART_Send>
		uint32_t flag = linear_motor_calibrate(pLM[0], &htim15, &linearPulse_1);
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <cal_messageCheck+0xb4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <cal_messageCheck+0xb8>)
 8003916:	4916      	ldr	r1, [pc, #88]	; (8003970 <cal_messageCheck+0xbc>)
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe ff1b 	bl	8002754 <linear_motor_calibrate>
 800391e:	0003      	movs	r3, r0
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
		if (flag == 0)
 8003922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <cal_messageCheck+0x7c>
		{
			UART_Send("Front motor calibration timed out! Check for mechanical problems and repeat calibration.");
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <cal_messageCheck+0xc0>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7ff fed4 	bl	80036d8 <UART_Send>
		}
		flag = linear_motor_calibrate(pLM[1], &htim15, &linearPulse_2);
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <cal_messageCheck+0xb4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a10      	ldr	r2, [pc, #64]	; (8003978 <cal_messageCheck+0xc4>)
 8003936:	490e      	ldr	r1, [pc, #56]	; (8003970 <cal_messageCheck+0xbc>)
 8003938:	0018      	movs	r0, r3
 800393a:	f7fe ff0b 	bl	8002754 <linear_motor_calibrate>
 800393e:	0003      	movs	r3, r0
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
		if (flag == 0)
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	2b00      	cmp	r3, #0
 8003946:	d103      	bne.n	8003950 <cal_messageCheck+0x9c>
		{
			UART_Send("Rear motor calibration timed out! Check for mechanical problems and repeat calibration.");
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <cal_messageCheck+0xc8>)
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff fec4 	bl	80036d8 <UART_Send>
		}
	}
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b00e      	add	sp, #56	; 0x38
 8003956:	bdb0      	pop	{r4, r5, r7, pc}
 8003958:	20000368 	.word	0x20000368
 800395c:	0800de14 	.word	0x0800de14
 8003960:	0800de18 	.word	0x0800de18
 8003964:	0800ded4 	.word	0x0800ded4
 8003968:	200003dc 	.word	0x200003dc
 800396c:	200002f8 	.word	0x200002f8
 8003970:	200004ac 	.word	0x200004ac
 8003974:	0800de20 	.word	0x0800de20
 8003978:	200002fc 	.word	0x200002fc
 800397c:	0800de7c 	.word	0x0800de7c

08003980 <calculate_angles>:

void calculate_angles(float *frontAngle, float *rearAngle)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	int32_t posFront = linear_motor_get_position(pLM[0]);
 800398a:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <calculate_angles+0xfc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0018      	movs	r0, r3
 8003990:	f7fe fe48 	bl	8002624 <linear_motor_get_position>
 8003994:	0003      	movs	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]
	int32_t posRear = linear_motor_get_position(pLM[1]);
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <calculate_angles+0xfc>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7fe fe41 	bl	8002624 <linear_motor_get_position>
 80039a2:	0003      	movs	r3, r0
 80039a4:	60bb      	str	r3, [r7, #8]

	*frontAngle = round((posFront - 75.5498) / (- 253.6124));
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7fe fbba 	bl	8002120 <__aeabi_i2d>
 80039ac:	4a34      	ldr	r2, [pc, #208]	; (8003a80 <calculate_angles+0x100>)
 80039ae:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <calculate_angles+0x104>)
 80039b0:	f7fd ffd0 	bl	8001954 <__aeabi_dsub>
 80039b4:	0002      	movs	r2, r0
 80039b6:	000b      	movs	r3, r1
 80039b8:	0010      	movs	r0, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <calculate_angles+0x108>)
 80039be:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <calculate_angles+0x10c>)
 80039c0:	f7fd f956 	bl	8000c70 <__aeabi_ddiv>
 80039c4:	0002      	movs	r2, r0
 80039c6:	000b      	movs	r3, r1
 80039c8:	0010      	movs	r0, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	f00a f988 	bl	800dce0 <round>
 80039d0:	0002      	movs	r2, r0
 80039d2:	000b      	movs	r3, r1
 80039d4:	0010      	movs	r0, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	f7fe fc40 	bl	800225c <__aeabi_d2f>
 80039dc:	1c02      	adds	r2, r0, #0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
	if (posRear > 0)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dd1e      	ble.n	8003a26 <calculate_angles+0xa6>
	{
		*rearAngle = round((posRear + 159.8128) / (242.2376));
 80039e8:	68b8      	ldr	r0, [r7, #8]
 80039ea:	f7fe fb99 	bl	8002120 <__aeabi_i2d>
 80039ee:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <calculate_angles+0x110>)
 80039f0:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <calculate_angles+0x114>)
 80039f2:	f7fc fdd3 	bl	800059c <__aeabi_dadd>
 80039f6:	0002      	movs	r2, r0
 80039f8:	000b      	movs	r3, r1
 80039fa:	0010      	movs	r0, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <calculate_angles+0x118>)
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <calculate_angles+0x11c>)
 8003a02:	f7fd f935 	bl	8000c70 <__aeabi_ddiv>
 8003a06:	0002      	movs	r2, r0
 8003a08:	000b      	movs	r3, r1
 8003a0a:	0010      	movs	r0, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	f00a f967 	bl	800dce0 <round>
 8003a12:	0002      	movs	r2, r0
 8003a14:	000b      	movs	r3, r1
 8003a16:	0010      	movs	r0, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	f7fe fc1f 	bl	800225c <__aeabi_d2f>
 8003a1e:	1c02      	adds	r2, r0, #0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e020      	b.n	8003a68 <calculate_angles+0xe8>
	}
	else if (posRear < 0)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da1d      	bge.n	8003a68 <calculate_angles+0xe8>
	{
		*rearAngle = round((posRear + 332.1803) / (314.4046));
 8003a2c:	68b8      	ldr	r0, [r7, #8]
 8003a2e:	f7fe fb77 	bl	8002120 <__aeabi_i2d>
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <calculate_angles+0x120>)
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <calculate_angles+0x124>)
 8003a36:	f7fc fdb1 	bl	800059c <__aeabi_dadd>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	000b      	movs	r3, r1
 8003a3e:	0010      	movs	r0, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <calculate_angles+0x128>)
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <calculate_angles+0x12c>)
 8003a46:	f7fd f913 	bl	8000c70 <__aeabi_ddiv>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	000b      	movs	r3, r1
 8003a4e:	0010      	movs	r0, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	f00a f945 	bl	800dce0 <round>
 8003a56:	0002      	movs	r2, r0
 8003a58:	000b      	movs	r3, r1
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	f7fe fbfd 	bl	800225c <__aeabi_d2f>
 8003a62:	1c02      	adds	r2, r0, #0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]
	}
	if (posRear == 0)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <calculate_angles+0xf4>
	{
		*rearAngle = 0;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
	}

}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200003dc 	.word	0x200003dc
 8003a80:	ec56d5d0 	.word	0xec56d5d0
 8003a84:	4052e32f 	.word	0x4052e32f
 8003a88:	c7e28241 	.word	0xc7e28241
 8003a8c:	c06fb398 	.word	0xc06fb398
 8003a90:	7525460b 	.word	0x7525460b
 8003a94:	4063fa02 	.word	0x4063fa02
 8003a98:	6b50b0f2 	.word	0x6b50b0f2
 8003a9c:	406e479a 	.word	0x406e479a
 8003aa0:	8240b780 	.word	0x8240b780
 8003aa4:	4074c2e2 	.word	0x4074c2e2
 8003aa8:	3dd97f63 	.word	0x3dd97f63
 8003aac:	4073a679 	.word	0x4073a679

08003ab0 <calculate_pulses>:

void calculate_pulses(int32_t frontAngle, int32_t rearAngle)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	int32_t pulses_front = -253.6124 * frontAngle + 75.5498;
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fb30 	bl	8002120 <__aeabi_i2d>
 8003ac0:	4a35      	ldr	r2, [pc, #212]	; (8003b98 <calculate_pulses+0xe8>)
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <calculate_pulses+0xec>)
 8003ac4:	f7fd fcda 	bl	800147c <__aeabi_dmul>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	000b      	movs	r3, r1
 8003acc:	0010      	movs	r0, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	4a33      	ldr	r2, [pc, #204]	; (8003ba0 <calculate_pulses+0xf0>)
 8003ad2:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <calculate_pulses+0xf4>)
 8003ad4:	f7fc fd62 	bl	800059c <__aeabi_dadd>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	000b      	movs	r3, r1
 8003adc:	0010      	movs	r0, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	f7fe fae8 	bl	80020b4 <__aeabi_d2iz>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	60bb      	str	r3, [r7, #8]
	int32_t pulses_rear = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
	if (rearAngle > 0)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	dd17      	ble.n	8003b22 <calculate_pulses+0x72>
	{
		pulses_rear = 242.2376 * rearAngle - 159.8128;
 8003af2:	6838      	ldr	r0, [r7, #0]
 8003af4:	f7fe fb14 	bl	8002120 <__aeabi_i2d>
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <calculate_pulses+0xf8>)
 8003afa:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <calculate_pulses+0xfc>)
 8003afc:	f7fd fcbe 	bl	800147c <__aeabi_dmul>
 8003b00:	0002      	movs	r2, r0
 8003b02:	000b      	movs	r3, r1
 8003b04:	0010      	movs	r0, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <calculate_pulses+0x100>)
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <calculate_pulses+0x104>)
 8003b0c:	f7fd ff22 	bl	8001954 <__aeabi_dsub>
 8003b10:	0002      	movs	r2, r0
 8003b12:	000b      	movs	r3, r1
 8003b14:	0010      	movs	r0, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	f7fe facc 	bl	80020b4 <__aeabi_d2iz>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e019      	b.n	8003b56 <calculate_pulses+0xa6>
	}
	else if (rearAngle < 0)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da16      	bge.n	8003b56 <calculate_pulses+0xa6>
	{
		pulses_rear = 314.4046 * rearAngle - 332.1803;
 8003b28:	6838      	ldr	r0, [r7, #0]
 8003b2a:	f7fe faf9 	bl	8002120 <__aeabi_i2d>
 8003b2e:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <calculate_pulses+0x108>)
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <calculate_pulses+0x10c>)
 8003b32:	f7fd fca3 	bl	800147c <__aeabi_dmul>
 8003b36:	0002      	movs	r2, r0
 8003b38:	000b      	movs	r3, r1
 8003b3a:	0010      	movs	r0, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <calculate_pulses+0x110>)
 8003b40:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <calculate_pulses+0x114>)
 8003b42:	f7fd ff07 	bl	8001954 <__aeabi_dsub>
 8003b46:	0002      	movs	r2, r0
 8003b48:	000b      	movs	r3, r1
 8003b4a:	0010      	movs	r0, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	f7fe fab1 	bl	80020b4 <__aeabi_d2iz>
 8003b52:	0003      	movs	r3, r0
 8003b54:	60fb      	str	r3, [r7, #12]
	}

	// Positive turn direction is RIGHT
	linear_motor_set_target(pLM[0], pulses_front);
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <calculate_pulses+0x118>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f7fe fd42 	bl	80025e8 <linear_motor_set_target>
	linear_motor_set_target(pLM[1], pulses_rear);
 8003b64:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <calculate_pulses+0x118>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fe fd3b 	bl	80025e8 <linear_motor_set_target>
	linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <calculate_pulses+0x118>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <calculate_pulses+0x11c>)
 8003b78:	4915      	ldr	r1, [pc, #84]	; (8003bd0 <calculate_pulses+0x120>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7fe fd5c 	bl	8002638 <linear_motor_pulse>
	linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <calculate_pulses+0x118>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <calculate_pulses+0x124>)
 8003b86:	4912      	ldr	r1, [pc, #72]	; (8003bd0 <calculate_pulses+0x120>)
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fe fd55 	bl	8002638 <linear_motor_pulse>
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b004      	add	sp, #16
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	c7e28241 	.word	0xc7e28241
 8003b9c:	c06fb398 	.word	0xc06fb398
 8003ba0:	ec56d5d0 	.word	0xec56d5d0
 8003ba4:	4052e32f 	.word	0x4052e32f
 8003ba8:	6b50b0f2 	.word	0x6b50b0f2
 8003bac:	406e479a 	.word	0x406e479a
 8003bb0:	7525460b 	.word	0x7525460b
 8003bb4:	4063fa02 	.word	0x4063fa02
 8003bb8:	3dd97f63 	.word	0x3dd97f63
 8003bbc:	4073a679 	.word	0x4073a679
 8003bc0:	8240b780 	.word	0x8240b780
 8003bc4:	4074c2e2 	.word	0x4074c2e2
 8003bc8:	200003dc 	.word	0x200003dc
 8003bcc:	200002f8 	.word	0x200002f8
 8003bd0:	200004ac 	.word	0x200004ac
 8003bd4:	200002fc 	.word	0x200002fc

08003bd8 <HAL_TIM_PWM_PulseFinishedCallback>:

// Linear Motors Timers
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d12e      	bne.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	7f1b      	ldrb	r3, [r3, #28]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d113      	bne.n	8003c18 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003c00:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 8003c02:	e020      	b.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11c      	bne.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003c0e:	2100      	movs	r1, #0
 8003c10:	0018      	movs	r0, r3
 8003c12:	f002 f959 	bl	8005ec8 <HAL_TIM_PWM_Stop_IT>
}
 8003c16:	e016      	b.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7f1b      	ldrb	r3, [r3, #28]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d112      	bne.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	e008      	b.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 8003c34:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003c3e:	2104      	movs	r1, #4
 8003c40:	0018      	movs	r0, r3
 8003c42:	f002 f941 	bl	8005ec8 <HAL_TIM_PWM_Stop_IT>
}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	200004ac 	.word	0x200004ac
 8003c54:	200002f8 	.word	0x200002f8
 8003c58:	200002fc 	.word	0x200002fc

08003c5c <HAL_TIM_IC_CaptureCallback>:

// ENCODERS READING
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4aa9      	ldr	r2, [pc, #676]	; (8003f10 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_TIM_IC_CaptureCallback+0x14>
 8003c6e:	e14a      	b.n	8003f06 <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7f1b      	ldrb	r3, [r3, #28]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d14e      	bne.n	8003d16 <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8003c78:	4ba6      	ldr	r3, [pc, #664]	; (8003f14 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f002 fe93 	bl	80069a8 <HAL_TIM_ReadCapturedValue>
 8003c82:	0002      	movs	r2, r0
 8003c84:	4ba4      	ldr	r3, [pc, #656]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003c86:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 8003c88:	4ba3      	ldr	r3, [pc, #652]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d93b      	bls.n	8003d0c <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 8003c94:	4ba2      	ldr	r3, [pc, #648]	; (8003f20 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e01a      	b.n	8003cd6 <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	4b9f      	ldr	r3, [pc, #636]	; (8003f24 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003ca6:	0092      	lsls	r2, r2, #2
 8003ca8:	58d1      	ldr	r1, [r2, r3]
 8003caa:	4b9e      	ldr	r3, [pc, #632]	; (8003f24 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	0092      	lsls	r2, r2, #2
 8003cb0:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 8003cb2:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	0092      	lsls	r2, r2, #2
 8003cb8:	58d3      	ldr	r3, [r2, r3]
 8003cba:	2105      	movs	r1, #5
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7fc fa49 	bl	8000154 <__udivsi3>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	4b96      	ldr	r3, [pc, #600]	; (8003f20 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	18d2      	adds	r2, r2, r3
 8003ccc:	4b94      	ldr	r3, [pc, #592]	; (8003f20 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003cce:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	dde1      	ble.n	8003ca0 <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b8e      	ldr	r3, [pc, #568]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1ad2      	subs	r2, r2, r3
 8003ce6:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003ce8:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 8003cea:	4b8e      	ldr	r3, [pc, #568]	; (8003f24 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2105      	movs	r1, #5
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fc fa2f 	bl	8000154 <__udivsi3>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	18d2      	adds	r2, r2, r3
 8003d00:	4b87      	ldr	r3, [pc, #540]	; (8003f20 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003d02:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 8003d04:	4b86      	ldr	r3, [pc, #536]	; (8003f20 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8003d0a:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 8003d0c:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003d12:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 8003d14:	e0f7      	b.n	8003f06 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7f1b      	ldrb	r3, [r3, #28]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d14e      	bne.n	8003dbc <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8003d1e:	4b7d      	ldr	r3, [pc, #500]	; (8003f14 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003d20:	2104      	movs	r1, #4
 8003d22:	0018      	movs	r0, r3
 8003d24:	f002 fe40 	bl	80069a8 <HAL_TIM_ReadCapturedValue>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003d2c:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b7f      	ldr	r3, [pc, #508]	; (8003f30 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d93b      	bls.n	8003db2 <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e01a      	b.n	8003d7c <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d4c:	0092      	lsls	r2, r2, #2
 8003d4e:	58d1      	ldr	r1, [r2, r3]
 8003d50:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	0092      	lsls	r2, r2, #2
 8003d56:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 8003d58:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	0092      	lsls	r2, r2, #2
 8003d5e:	58d3      	ldr	r3, [r2, r3]
 8003d60:	2105      	movs	r1, #5
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fc f9f6 	bl	8000154 <__udivsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	4b71      	ldr	r3, [pc, #452]	; (8003f34 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	18d2      	adds	r2, r2, r3
 8003d72:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003d74:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	dde1      	ble.n	8003d46 <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 8003d82:	4b6a      	ldr	r3, [pc, #424]	; (8003f2c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1ad2      	subs	r2, r2, r3
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d8e:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2105      	movs	r1, #5
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7fc f9dc 	bl	8000154 <__udivsi3>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	001a      	movs	r2, r3
 8003da0:	4b64      	ldr	r3, [pc, #400]	; (8003f34 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	18d2      	adds	r2, r2, r3
 8003da6:	4b63      	ldr	r3, [pc, #396]	; (8003f34 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003da8:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 8003daa:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8003db0:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 8003db2:	4b5e      	ldr	r3, [pc, #376]	; (8003f2c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	e0a4      	b.n	8003f06 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7f1b      	ldrb	r3, [r3, #28]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d14e      	bne.n	8003e62 <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f002 fded 	bl	80069a8 <HAL_TIM_ReadCapturedValue>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003dd2:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 8003dd4:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b5a      	ldr	r3, [pc, #360]	; (8003f44 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d93b      	bls.n	8003e58 <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 8003de0:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e01a      	b.n	8003e22 <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	58d1      	ldr	r1, [r2, r3]
 8003df6:	4b55      	ldr	r3, [pc, #340]	; (8003f4c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	0092      	lsls	r2, r2, #2
 8003dfc:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 8003dfe:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	58d3      	ldr	r3, [r2, r3]
 8003e06:	2105      	movs	r1, #5
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7fc f9a3 	bl	8000154 <__udivsi3>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	001a      	movs	r2, r3
 8003e12:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	18d2      	adds	r2, r2, r3
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003e1a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	dde1      	ble.n	8003dec <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 8003e28:	4b45      	ldr	r3, [pc, #276]	; (8003f40 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003e34:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 8003e36:	4b45      	ldr	r3, [pc, #276]	; (8003f4c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2105      	movs	r1, #5
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fc f989 	bl	8000154 <__udivsi3>
 8003e42:	0003      	movs	r3, r0
 8003e44:	001a      	movs	r2, r3
 8003e46:	4b40      	ldr	r3, [pc, #256]	; (8003f48 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	18d2      	adds	r2, r2, r3
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003e4e:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 8003e50:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8003e56:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003e5e:	601a      	str	r2, [r3, #0]
}
 8003e60:	e051      	b.n	8003f06 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7f1b      	ldrb	r3, [r3, #28]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d14d      	bne.n	8003f06 <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003e6c:	210c      	movs	r1, #12
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f002 fd9a 	bl	80069a8 <HAL_TIM_ReadCapturedValue>
 8003e74:	0002      	movs	r2, r0
 8003e76:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003e78:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d93b      	bls.n	8003efe <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 8003e86:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	e01a      	b.n	8003ec8 <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e98:	0092      	lsls	r2, r2, #2
 8003e9a:	58d1      	ldr	r1, [r2, r3]
 8003e9c:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0092      	lsls	r2, r2, #2
 8003ea2:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	0092      	lsls	r2, r2, #2
 8003eaa:	58d3      	ldr	r3, [r2, r3]
 8003eac:	2105      	movs	r1, #5
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7fc f950 	bl	8000154 <__udivsi3>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	001a      	movs	r2, r3
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	18d2      	adds	r2, r2, r3
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003ec0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	dde1      	ble.n	8003e92 <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1ad2      	subs	r2, r2, r3
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003eda:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 8003edc:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2105      	movs	r1, #5
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7fc f936 	bl	8000154 <__udivsi3>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	001a      	movs	r2, r3
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	18d2      	adds	r2, r2, r3
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003ef4:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0x300>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <HAL_TIM_IC_CaptureCallback+0x308>)
 8003efc:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b006      	add	sp, #24
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	40000400 	.word	0x40000400
 8003f14:	20000538 	.word	0x20000538
 8003f18:	20000204 	.word	0x20000204
 8003f1c:	20000200 	.word	0x20000200
 8003f20:	20000208 	.word	0x20000208
 8003f24:	2000020c 	.word	0x2000020c
 8003f28:	200001fc 	.word	0x200001fc
 8003f2c:	20000228 	.word	0x20000228
 8003f30:	20000224 	.word	0x20000224
 8003f34:	2000022c 	.word	0x2000022c
 8003f38:	20000230 	.word	0x20000230
 8003f3c:	20000220 	.word	0x20000220
 8003f40:	2000024c 	.word	0x2000024c
 8003f44:	20000248 	.word	0x20000248
 8003f48:	20000250 	.word	0x20000250
 8003f4c:	20000254 	.word	0x20000254
 8003f50:	20000244 	.word	0x20000244
 8003f54:	20000270 	.word	0x20000270
 8003f58:	2000026c 	.word	0x2000026c
 8003f5c:	20000274 	.word	0x20000274
 8003f60:	20000278 	.word	0x20000278
 8003f64:	20000268 	.word	0x20000268

08003f68 <HAL_UART_TxCpltCallback>:

// --------------------------------------

// UART Processing
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	UART_TX_Busy = 0;
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <HAL_UART_TxCpltCallback+0x18>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	200002f4 	.word	0x200002f4

08003f84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3 && UART_newMessage != 1 && Init_Done == 1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <HAL_UART_RxCpltCallback+0xc0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d151      	bne.n	800403a <HAL_UART_RxCpltCallback+0xb6>
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <HAL_UART_RxCpltCallback+0xc4>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d04d      	beq.n	800403a <HAL_UART_RxCpltCallback+0xb6>
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_UART_RxCpltCallback+0xc8>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d149      	bne.n	800403a <HAL_UART_RxCpltCallback+0xb6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <HAL_UART_RxCpltCallback+0xcc>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b0a      	cmp	r3, #10
 8003fac:	d11a      	bne.n	8003fe4 <HAL_UART_RxCpltCallback+0x60>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_UART_RxCpltCallback+0xd0>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d112      	bne.n	8003fdc <HAL_UART_RxCpltCallback+0x58>
 8003fb6:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	5e9b      	ldrsh	r3, [r3, r2]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <HAL_UART_RxCpltCallback+0x58>
			{
				rxString[UART2_rxindex] = 0;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_UART_RxCpltCallback+0xd8>)
 8003fca:	2100      	movs	r1, #0
 8003fcc:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_UART_RxCpltCallback+0xc4>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]



	}

}
 8003fda:	e02e      	b.n	800403a <HAL_UART_RxCpltCallback+0xb6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_UART_RxCpltCallback+0xd0>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
}
 8003fe2:	e02a      	b.n	800403a <HAL_UART_RxCpltCallback+0xb6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_UART_RxCpltCallback+0xcc>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b0d      	cmp	r3, #13
 8003fea:	d026      	beq.n	800403a <HAL_UART_RxCpltCallback+0xb6>
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_UART_RxCpltCallback+0xd0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d122      	bne.n	800403a <HAL_UART_RxCpltCallback+0xb6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	5e9b      	ldrsh	r3, [r3, r2]
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_UART_RxCpltCallback+0xcc>)
 8003ffe:	7819      	ldrb	r1, [r3, #0]
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <HAL_UART_RxCpltCallback+0xd8>)
 8004002:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8004006:	2200      	movs	r2, #0
 8004008:	5e9b      	ldrsh	r3, [r3, r2]
 800400a:	b29b      	uxth	r3, r3
 800400c:	3301      	adds	r3, #1
 800400e:	b29b      	uxth	r3, r3
 8004010:	b21a      	sxth	r2, r3
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8004014:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8004018:	2200      	movs	r2, #0
 800401a:	5e9b      	ldrsh	r3, [r3, r2]
 800401c:	2b63      	cmp	r3, #99	; 0x63
 800401e:	dd0c      	ble.n	800403a <HAL_UART_RxCpltCallback+0xb6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_UART_RxCpltCallback+0xd0>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 8004028:	2200      	movs	r2, #0
 800402a:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_UART_RxCpltCallback+0xd4>)
 800402e:	2200      	movs	r2, #0
 8004030:	5e9b      	ldrsh	r3, [r3, r2]
 8004032:	001a      	movs	r2, r3
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_UART_RxCpltCallback+0xd8>)
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40004800 	.word	0x40004800
 8004048:	2000028d 	.word	0x2000028d
 800404c:	20000300 	.word	0x20000300
 8004050:	2000028c 	.word	0x2000028c
 8004054:	200003cc 	.word	0x200003cc
 8004058:	200003ce 	.word	0x200003ce
 800405c:	20000290 	.word	0x20000290

08004060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004064:	b672      	cpsid	i
}
 8004066:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004068:	e7fe      	b.n	8004068 <Error_Handler+0x8>
	...

0800406c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_MspInit+0x44>)
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <HAL_MspInit+0x44>)
 8004078:	2101      	movs	r1, #1
 800407a:	430a      	orrs	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <HAL_MspInit+0x44>)
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2201      	movs	r2, #1
 8004084:	4013      	ands	r3, r2
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_MspInit+0x44>)
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_MspInit+0x44>)
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	0549      	lsls	r1, r1, #21
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_MspInit+0x44>)
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	055b      	lsls	r3, r3, #21
 80040a0:	4013      	ands	r3, r2
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b002      	add	sp, #8
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_TIM_Base_MspInit+0x70>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_TIM_Base_MspInit+0x74>)
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <HAL_TIM_Base_MspInit+0x74>)
 80040cc:	2180      	movs	r1, #128	; 0x80
 80040ce:	0109      	lsls	r1, r1, #4
 80040d0:	430a      	orrs	r2, r1
 80040d2:	619a      	str	r2, [r3, #24]
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <HAL_TIM_Base_MspInit+0x74>)
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80040e2:	e01a      	b.n	800411a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a10      	ldr	r2, [pc, #64]	; (800412c <HAL_TIM_Base_MspInit+0x78>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d115      	bne.n	800411a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_TIM_Base_MspInit+0x74>)
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_TIM_Base_MspInit+0x74>)
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	0249      	lsls	r1, r1, #9
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <HAL_TIM_Base_MspInit+0x74>)
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800410a:	2200      	movs	r2, #0
 800410c:	2100      	movs	r1, #0
 800410e:	2014      	movs	r0, #20
 8004110:	f000 fc22 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004114:	2014      	movs	r0, #20
 8004116:	f000 fc34 	bl	8004982 <HAL_NVIC_EnableIRQ>
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40021000 	.word	0x40021000
 800412c:	40014000 	.word	0x40014000

08004130 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b08b      	sub	sp, #44	; 0x2c
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	2414      	movs	r4, #20
 800413a:	193b      	adds	r3, r7, r4
 800413c:	0018      	movs	r0, r3
 800413e:	2314      	movs	r3, #20
 8004140:	001a      	movs	r2, r3
 8004142:	2100      	movs	r1, #0
 8004144:	f004 fc70 	bl	8008a28 <memset>
  if(htim_ic->Instance==TIM3)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a31      	ldr	r2, [pc, #196]	; (8004214 <HAL_TIM_IC_MspInit+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d15b      	bne.n	800420a <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 8004158:	2102      	movs	r1, #2
 800415a:	430a      	orrs	r2, r1
 800415c:	61da      	str	r2, [r3, #28]
 800415e:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2202      	movs	r2, #2
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	02c9      	lsls	r1, r1, #11
 8004174:	430a      	orrs	r2, r1
 8004176:	615a      	str	r2, [r3, #20]
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	02db      	lsls	r3, r3, #11
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	0309      	lsls	r1, r1, #12
 8004190:	430a      	orrs	r2, r1
 8004192:	615a      	str	r2, [r3, #20]
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_TIM_IC_MspInit+0xe8>)
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	031b      	lsls	r3, r3, #12
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80041a2:	193b      	adds	r3, r7, r4
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	2202      	movs	r2, #2
 80041ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	2201      	movs	r2, #1
 80041b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	193b      	adds	r3, r7, r4
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80041ba:	193b      	adds	r3, r7, r4
 80041bc:	2201      	movs	r2, #1
 80041be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_TIM_IC_MspInit+0xec>)
 80041c4:	0019      	movs	r1, r3
 80041c6:	0010      	movs	r0, r2
 80041c8:	f000 fe0e 	bl	8004de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80041cc:	0021      	movs	r1, r4
 80041ce:	187b      	adds	r3, r7, r1
 80041d0:	2290      	movs	r2, #144	; 0x90
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2202      	movs	r2, #2
 80041da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	2201      	movs	r2, #1
 80041e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	2200      	movs	r2, #0
 80041e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_TIM_IC_MspInit+0xf0>)
 80041f2:	0019      	movs	r1, r3
 80041f4:	0010      	movs	r0, r2
 80041f6:	f000 fdf7 	bl	8004de8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2101      	movs	r1, #1
 80041fe:	2010      	movs	r0, #16
 8004200:	f000 fbaa 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004204:	2010      	movs	r0, #16
 8004206:	f000 fbbc 	bl	8004982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b00b      	add	sp, #44	; 0x2c
 8004210:	bd90      	pop	{r4, r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	40000400 	.word	0x40000400
 8004218:	40021000 	.word	0x40021000
 800421c:	48000400 	.word	0x48000400
 8004220:	48000800 	.word	0x48000800

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b08b      	sub	sp, #44	; 0x2c
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	2414      	movs	r4, #20
 800422e:	193b      	adds	r3, r7, r4
 8004230:	0018      	movs	r0, r3
 8004232:	2314      	movs	r3, #20
 8004234:	001a      	movs	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f004 fbf6 	bl	8008a28 <memset>
  if(htim->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2b      	ldr	r2, [pc, #172]	; (80042f0 <HAL_TIM_MspPostInit+0xcc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d126      	bne.n	8004294 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <HAL_TIM_MspPostInit+0xd0>)
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_TIM_MspPostInit+0xd0>)
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	0289      	lsls	r1, r1, #10
 8004250:	430a      	orrs	r2, r1
 8004252:	615a      	str	r2, [r3, #20]
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <HAL_TIM_MspPostInit+0xd0>)
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004262:	193b      	adds	r3, r7, r4
 8004264:	22f0      	movs	r2, #240	; 0xf0
 8004266:	0112      	lsls	r2, r2, #4
 8004268:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426a:	0021      	movs	r1, r4
 800426c:	187b      	adds	r3, r7, r1
 800426e:	2202      	movs	r2, #2
 8004270:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	187b      	adds	r3, r7, r1
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004278:	187b      	adds	r3, r7, r1
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800427e:	187b      	adds	r3, r7, r1
 8004280:	2202      	movs	r2, #2
 8004282:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	187a      	adds	r2, r7, r1
 8004286:	2390      	movs	r3, #144	; 0x90
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f000 fdab 	bl	8004de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004292:	e029      	b.n	80042e8 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <HAL_TIM_MspPostInit+0xd4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d124      	bne.n	80042e8 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_TIM_MspPostInit+0xd0>)
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <HAL_TIM_MspPostInit+0xd0>)
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	02c9      	lsls	r1, r1, #11
 80042a8:	430a      	orrs	r2, r1
 80042aa:	615a      	str	r2, [r3, #20]
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_TIM_MspPostInit+0xd0>)
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	02db      	lsls	r3, r3, #11
 80042b4:	4013      	ands	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042ba:	2114      	movs	r1, #20
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	22c0      	movs	r2, #192	; 0xc0
 80042c0:	0212      	lsls	r2, r2, #8
 80042c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2202      	movs	r2, #2
 80042c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	187b      	adds	r3, r7, r1
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	2201      	movs	r2, #1
 80042da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <HAL_TIM_MspPostInit+0xd8>)
 80042e0:	0019      	movs	r1, r3
 80042e2:	0010      	movs	r0, r2
 80042e4:	f000 fd80 	bl	8004de8 <HAL_GPIO_Init>
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b00b      	add	sp, #44	; 0x2c
 80042ee:	bd90      	pop	{r4, r7, pc}
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40014000 	.word	0x40014000
 80042fc:	48000400 	.word	0x48000400

08004300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b08b      	sub	sp, #44	; 0x2c
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	2414      	movs	r4, #20
 800430a:	193b      	adds	r3, r7, r4
 800430c:	0018      	movs	r0, r3
 800430e:	2314      	movs	r3, #20
 8004310:	001a      	movs	r2, r3
 8004312:	2100      	movs	r1, #0
 8004314:	f004 fb88 	bl	8008a28 <memset>
  if(huart->Instance==USART3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a4e      	ldr	r2, [pc, #312]	; (8004458 <HAL_UART_MspInit+0x158>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d000      	beq.n	8004324 <HAL_UART_MspInit+0x24>
 8004322:	e094      	b.n	800444e <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004324:	4b4d      	ldr	r3, [pc, #308]	; (800445c <HAL_UART_MspInit+0x15c>)
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	4b4c      	ldr	r3, [pc, #304]	; (800445c <HAL_UART_MspInit+0x15c>)
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	02c9      	lsls	r1, r1, #11
 800432e:	430a      	orrs	r2, r1
 8004330:	61da      	str	r2, [r3, #28]
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_UART_MspInit+0x15c>)
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	02db      	lsls	r3, r3, #11
 800433a:	4013      	ands	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004340:	4b46      	ldr	r3, [pc, #280]	; (800445c <HAL_UART_MspInit+0x15c>)
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	4b45      	ldr	r3, [pc, #276]	; (800445c <HAL_UART_MspInit+0x15c>)
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	0309      	lsls	r1, r1, #12
 800434a:	430a      	orrs	r2, r1
 800434c:	615a      	str	r2, [r3, #20]
 800434e:	4b43      	ldr	r3, [pc, #268]	; (800445c <HAL_UART_MspInit+0x15c>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 800435c:	193b      	adds	r3, r7, r4
 800435e:	2281      	movs	r2, #129	; 0x81
 8004360:	0112      	lsls	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004364:	0021      	movs	r1, r4
 8004366:	187b      	adds	r3, r7, r1
 8004368:	2202      	movs	r2, #2
 800436a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	187b      	adds	r3, r7, r1
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004372:	187b      	adds	r3, r7, r1
 8004374:	2203      	movs	r2, #3
 8004376:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8004378:	187b      	adds	r3, r7, r1
 800437a:	2201      	movs	r2, #1
 800437c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437e:	187b      	adds	r3, r7, r1
 8004380:	4a37      	ldr	r2, [pc, #220]	; (8004460 <HAL_UART_MspInit+0x160>)
 8004382:	0019      	movs	r1, r3
 8004384:	0010      	movs	r0, r2
 8004386:	f000 fd2f 	bl	8004de8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_UART_MspInit+0x164>)
 800438c:	4a36      	ldr	r2, [pc, #216]	; (8004468 <HAL_UART_MspInit+0x168>)
 800438e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004390:	4b34      	ldr	r3, [pc, #208]	; (8004464 <HAL_UART_MspInit+0x164>)
 8004392:	2200      	movs	r2, #0
 8004394:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004396:	4b33      	ldr	r3, [pc, #204]	; (8004464 <HAL_UART_MspInit+0x164>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800439c:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_UART_MspInit+0x164>)
 800439e:	2280      	movs	r2, #128	; 0x80
 80043a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a2:	4b30      	ldr	r3, [pc, #192]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80043ae:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043b0:	2220      	movs	r2, #32
 80043b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 fafd 	bl	80049bc <HAL_DMA_Init>
 80043c2:	1e03      	subs	r3, r0, #0
 80043c4:	d001      	beq.n	80043ca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80043c6:	f7ff fe4b 	bl	8004060 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_UART_MspInit+0x16c>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b27      	ldr	r3, [pc, #156]	; (800446c <HAL_UART_MspInit+0x16c>)
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	04c9      	lsls	r1, r1, #19
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a22      	ldr	r2, [pc, #136]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043dc:	671a      	str	r2, [r3, #112]	; 0x70
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_UART_MspInit+0x164>)
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_UART_MspInit+0x170>)
 80043e6:	4a23      	ldr	r2, [pc, #140]	; (8004474 <HAL_UART_MspInit+0x174>)
 80043e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_UART_MspInit+0x170>)
 80043ec:	2210      	movs	r2, #16
 80043ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_UART_MspInit+0x170>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <HAL_UART_MspInit+0x170>)
 80043f8:	2280      	movs	r2, #128	; 0x80
 80043fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_UART_MspInit+0x170>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_UART_MspInit+0x170>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_UART_MspInit+0x170>)
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800440e:	4b18      	ldr	r3, [pc, #96]	; (8004470 <HAL_UART_MspInit+0x170>)
 8004410:	2200      	movs	r2, #0
 8004412:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_UART_MspInit+0x170>)
 8004416:	0018      	movs	r0, r3
 8004418:	f000 fad0 	bl	80049bc <HAL_DMA_Init>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d001      	beq.n	8004424 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004420:	f7ff fe1e 	bl	8004060 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_UART_MspInit+0x16c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <HAL_UART_MspInit+0x16c>)
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	04c9      	lsls	r1, r1, #19
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_UART_MspInit+0x170>)
 8004436:	66da      	str	r2, [r3, #108]	; 0x6c
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_UART_MspInit+0x170>)
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	201d      	movs	r0, #29
 8004444:	f000 fa88 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8004448:	201d      	movs	r0, #29
 800444a:	f000 fa9a 	bl	8004982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b00b      	add	sp, #44	; 0x2c
 8004454:	bd90      	pop	{r4, r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40004800 	.word	0x40004800
 800445c:	40021000 	.word	0x40021000
 8004460:	48000800 	.word	0x48000800
 8004464:	200003e4 	.word	0x200003e4
 8004468:	40020030 	.word	0x40020030
 800446c:	40010000 	.word	0x40010000
 8004470:	200004f4 	.word	0x200004f4
 8004474:	4002001c 	.word	0x4002001c

08004478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800447c:	e7fe      	b.n	800447c <NMI_Handler+0x4>

0800447e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004482:	e7fe      	b.n	8004482 <HardFault_Handler+0x4>

08004484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800449c:	f000 f970 	bl	8004780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 fbaf 	bl	8004c12 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 fbab 	bl	8004c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	200004f4 	.word	0x200004f4
 80044c8:	200003e4 	.word	0x200003e4

080044cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <TIM3_IRQHandler+0x14>)
 80044d2:	0018      	movs	r0, r3
 80044d4:	f001 ff14 	bl	8006300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000538 	.word	0x20000538

080044e4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <TIM15_IRQHandler+0x14>)
 80044ea:	0018      	movs	r0, r3
 80044ec:	f001 ff08 	bl	8006300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200004ac 	.word	0x200004ac

080044fc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <USART3_4_IRQHandler+0x14>)
 8004502:	0018      	movs	r0, r3
 8004504:	f003 f9b4 	bl	8007870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	20000428 	.word	0x20000428

08004514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
	return 1;
 8004518:	2301      	movs	r3, #1
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <_kill>:

int _kill(int pid, int sig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800452a:	f004 fa53 	bl	80089d4 <__errno>
 800452e:	0003      	movs	r3, r0
 8004530:	2216      	movs	r2, #22
 8004532:	601a      	str	r2, [r3, #0]
	return -1;
 8004534:	2301      	movs	r3, #1
 8004536:	425b      	negs	r3, r3
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}

08004540 <_exit>:

void _exit (int status)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004548:	2301      	movs	r3, #1
 800454a:	425a      	negs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0011      	movs	r1, r2
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff ffe5 	bl	8004520 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004556:	e7fe      	b.n	8004556 <_exit+0x16>

08004558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e00a      	b.n	8004580 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800456a:	e000      	b.n	800456e <_read+0x16>
 800456c:	bf00      	nop
 800456e:	0001      	movs	r1, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	60ba      	str	r2, [r7, #8]
 8004576:	b2ca      	uxtb	r2, r1
 8004578:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3301      	adds	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	429a      	cmp	r2, r3
 8004586:	dbf0      	blt.n	800456a <_read+0x12>
	}

return len;
 8004588:	687b      	ldr	r3, [r7, #4]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b006      	add	sp, #24
 8004590:	bd80      	pop	{r7, pc}

08004592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	e009      	b.n	80045b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	60ba      	str	r2, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	0018      	movs	r0, r3
 80045ae:	e000      	b.n	80045b2 <_write+0x20>
 80045b0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	dbf1      	blt.n	80045a4 <_write+0x12>
	}
	return len;
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b006      	add	sp, #24
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_close>:

int _close(int file)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
	return -1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	425b      	negs	r3, r3
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}

080045de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2280      	movs	r2, #128	; 0x80
 80045ec:	0192      	lsls	r2, r2, #6
 80045ee:	605a      	str	r2, [r3, #4]
	return 0;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}

080045fa <_isatty>:

int _isatty(int file)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
	return 1;
 8004602:	2301      	movs	r3, #1
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b002      	add	sp, #8
 800460a:	bd80      	pop	{r7, pc}

0800460c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
	return 0;
 8004618:	2300      	movs	r3, #0
}
 800461a:	0018      	movs	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	b004      	add	sp, #16
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <_sbrk+0x5c>)
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <_sbrk+0x60>)
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004638:	4b13      	ldr	r3, [pc, #76]	; (8004688 <_sbrk+0x64>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <_sbrk+0x64>)
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <_sbrk+0x68>)
 8004644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <_sbrk+0x64>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	18d3      	adds	r3, r2, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d207      	bcs.n	8004664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004654:	f004 f9be 	bl	80089d4 <__errno>
 8004658:	0003      	movs	r3, r0
 800465a:	220c      	movs	r2, #12
 800465c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800465e:	2301      	movs	r3, #1
 8004660:	425b      	negs	r3, r3
 8004662:	e009      	b.n	8004678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004664:	4b08      	ldr	r3, [pc, #32]	; (8004688 <_sbrk+0x64>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <_sbrk+0x64>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	18d2      	adds	r2, r2, r3
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <_sbrk+0x64>)
 8004674:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004676:	68fb      	ldr	r3, [r7, #12]
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20004000 	.word	0x20004000
 8004684:	00000400 	.word	0x00000400
 8004688:	200003d0 	.word	0x200003d0
 800468c:	20000628 	.word	0x20000628

08004690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004694:	46c0      	nop			; (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800469c:	480d      	ldr	r0, [pc, #52]	; (80046d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800469e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046a0:	480d      	ldr	r0, [pc, #52]	; (80046d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80046a2:	490e      	ldr	r1, [pc, #56]	; (80046dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80046a4:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <LoopForever+0xe>)
  movs r3, #0
 80046a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046a8:	e002      	b.n	80046b0 <LoopCopyDataInit>

080046aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ae:	3304      	adds	r3, #4

080046b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046b4:	d3f9      	bcc.n	80046aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046b6:	4a0b      	ldr	r2, [pc, #44]	; (80046e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046b8:	4c0b      	ldr	r4, [pc, #44]	; (80046e8 <LoopForever+0x16>)
  movs r3, #0
 80046ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046bc:	e001      	b.n	80046c2 <LoopFillZerobss>

080046be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c0:	3204      	adds	r2, #4

080046c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046c4:	d3fb      	bcc.n	80046be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80046c6:	f7ff ffe3 	bl	8004690 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80046ca:	f004 f989 	bl	80089e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046ce:	f7fe f8c5 	bl	800285c <main>

080046d2 <LoopForever>:

LoopForever:
    b LoopForever
 80046d2:	e7fe      	b.n	80046d2 <LoopForever>
  ldr   r0, =_estack
 80046d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80046d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046dc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80046e0:	0800e48c 	.word	0x0800e48c
  ldr r2, =_sbss
 80046e4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80046e8:	20000624 	.word	0x20000624

080046ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046ec:	e7fe      	b.n	80046ec <ADC1_IRQHandler>
	...

080046f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_Init+0x24>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_Init+0x24>)
 80046fa:	2110      	movs	r1, #16
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004700:	2003      	movs	r0, #3
 8004702:	f000 f809 	bl	8004718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004706:	f7ff fcb1 	bl	800406c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	40022000 	.word	0x40022000

08004718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_InitTick+0x5c>)
 8004722:	681c      	ldr	r4, [r3, #0]
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_InitTick+0x60>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	0019      	movs	r1, r3
 800472a:	23fa      	movs	r3, #250	; 0xfa
 800472c:	0098      	lsls	r0, r3, #2
 800472e:	f7fb fd11 	bl	8000154 <__udivsi3>
 8004732:	0003      	movs	r3, r0
 8004734:	0019      	movs	r1, r3
 8004736:	0020      	movs	r0, r4
 8004738:	f7fb fd0c 	bl	8000154 <__udivsi3>
 800473c:	0003      	movs	r3, r0
 800473e:	0018      	movs	r0, r3
 8004740:	f000 f92f 	bl	80049a2 <HAL_SYSTICK_Config>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d001      	beq.n	800474c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e00f      	b.n	800476c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d80b      	bhi.n	800476a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	2301      	movs	r3, #1
 8004756:	425b      	negs	r3, r3
 8004758:	2200      	movs	r2, #0
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f8fc 	bl	8004958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_InitTick+0x64>)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b003      	add	sp, #12
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	20000000 	.word	0x20000000
 8004778:	20000008 	.word	0x20000008
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_IncTick+0x1c>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	001a      	movs	r2, r3
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_IncTick+0x20>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	18d2      	adds	r2, r2, r3
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_IncTick+0x20>)
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	20000008 	.word	0x20000008
 80047a0:	20000610 	.word	0x20000610

080047a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  return uwTick;
 80047a8:	4b02      	ldr	r3, [pc, #8]	; (80047b4 <HAL_GetTick+0x10>)
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	20000610 	.word	0x20000610

080047b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7ff fff0 	bl	80047a4 <HAL_GetTick>
 80047c4:	0003      	movs	r3, r0
 80047c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	d005      	beq.n	80047de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <HAL_Delay+0x44>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	001a      	movs	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	f7ff ffe0 	bl	80047a4 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d8f7      	bhi.n	80047e0 <HAL_Delay+0x28>
  {
  }
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	20000008 	.word	0x20000008

08004800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	0002      	movs	r2, r0
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800480c:	1dfb      	adds	r3, r7, #7
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b7f      	cmp	r3, #127	; 0x7f
 8004812:	d809      	bhi.n	8004828 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	001a      	movs	r2, r3
 800481a:	231f      	movs	r3, #31
 800481c:	401a      	ands	r2, r3
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <__NVIC_EnableIRQ+0x30>)
 8004820:	2101      	movs	r1, #1
 8004822:	4091      	lsls	r1, r2
 8004824:	000a      	movs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
  }
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	e000e100 	.word	0xe000e100

08004834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	0002      	movs	r2, r0
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	1dfb      	adds	r3, r7, #7
 8004840:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004842:	1dfb      	adds	r3, r7, #7
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b7f      	cmp	r3, #127	; 0x7f
 8004848:	d828      	bhi.n	800489c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800484a:	4a2f      	ldr	r2, [pc, #188]	; (8004908 <__NVIC_SetPriority+0xd4>)
 800484c:	1dfb      	adds	r3, r7, #7
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b25b      	sxtb	r3, r3
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	33c0      	adds	r3, #192	; 0xc0
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	589b      	ldr	r3, [r3, r2]
 800485a:	1dfa      	adds	r2, r7, #7
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	0011      	movs	r1, r2
 8004860:	2203      	movs	r2, #3
 8004862:	400a      	ands	r2, r1
 8004864:	00d2      	lsls	r2, r2, #3
 8004866:	21ff      	movs	r1, #255	; 0xff
 8004868:	4091      	lsls	r1, r2
 800486a:	000a      	movs	r2, r1
 800486c:	43d2      	mvns	r2, r2
 800486e:	401a      	ands	r2, r3
 8004870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	019b      	lsls	r3, r3, #6
 8004876:	22ff      	movs	r2, #255	; 0xff
 8004878:	401a      	ands	r2, r3
 800487a:	1dfb      	adds	r3, r7, #7
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	0018      	movs	r0, r3
 8004880:	2303      	movs	r3, #3
 8004882:	4003      	ands	r3, r0
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004888:	481f      	ldr	r0, [pc, #124]	; (8004908 <__NVIC_SetPriority+0xd4>)
 800488a:	1dfb      	adds	r3, r7, #7
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b25b      	sxtb	r3, r3
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	430a      	orrs	r2, r1
 8004894:	33c0      	adds	r3, #192	; 0xc0
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800489a:	e031      	b.n	8004900 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <__NVIC_SetPriority+0xd8>)
 800489e:	1dfb      	adds	r3, r7, #7
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	0019      	movs	r1, r3
 80048a4:	230f      	movs	r3, #15
 80048a6:	400b      	ands	r3, r1
 80048a8:	3b08      	subs	r3, #8
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3306      	adds	r3, #6
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	18d3      	adds	r3, r2, r3
 80048b2:	3304      	adds	r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1dfa      	adds	r2, r7, #7
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	0011      	movs	r1, r2
 80048bc:	2203      	movs	r2, #3
 80048be:	400a      	ands	r2, r1
 80048c0:	00d2      	lsls	r2, r2, #3
 80048c2:	21ff      	movs	r1, #255	; 0xff
 80048c4:	4091      	lsls	r1, r2
 80048c6:	000a      	movs	r2, r1
 80048c8:	43d2      	mvns	r2, r2
 80048ca:	401a      	ands	r2, r3
 80048cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	22ff      	movs	r2, #255	; 0xff
 80048d4:	401a      	ands	r2, r3
 80048d6:	1dfb      	adds	r3, r7, #7
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	0018      	movs	r0, r3
 80048dc:	2303      	movs	r3, #3
 80048de:	4003      	ands	r3, r0
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048e4:	4809      	ldr	r0, [pc, #36]	; (800490c <__NVIC_SetPriority+0xd8>)
 80048e6:	1dfb      	adds	r3, r7, #7
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	001c      	movs	r4, r3
 80048ec:	230f      	movs	r3, #15
 80048ee:	4023      	ands	r3, r4
 80048f0:	3b08      	subs	r3, #8
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	430a      	orrs	r2, r1
 80048f6:	3306      	adds	r3, #6
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	18c3      	adds	r3, r0, r3
 80048fc:	3304      	adds	r3, #4
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b003      	add	sp, #12
 8004906:	bd90      	pop	{r4, r7, pc}
 8004908:	e000e100 	.word	0xe000e100
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	045b      	lsls	r3, r3, #17
 8004920:	429a      	cmp	r2, r3
 8004922:	d301      	bcc.n	8004928 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004924:	2301      	movs	r3, #1
 8004926:	e010      	b.n	800494a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <SysTick_Config+0x44>)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	3a01      	subs	r2, #1
 800492e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004930:	2301      	movs	r3, #1
 8004932:	425b      	negs	r3, r3
 8004934:	2103      	movs	r1, #3
 8004936:	0018      	movs	r0, r3
 8004938:	f7ff ff7c 	bl	8004834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <SysTick_Config+0x44>)
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004942:	4b04      	ldr	r3, [pc, #16]	; (8004954 <SysTick_Config+0x44>)
 8004944:	2207      	movs	r2, #7
 8004946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004948:	2300      	movs	r3, #0
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b002      	add	sp, #8
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	e000e010 	.word	0xe000e010

08004958 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	210f      	movs	r1, #15
 8004964:	187b      	adds	r3, r7, r1
 8004966:	1c02      	adds	r2, r0, #0
 8004968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	187b      	adds	r3, r7, r1
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b25b      	sxtb	r3, r3
 8004972:	0011      	movs	r1, r2
 8004974:	0018      	movs	r0, r3
 8004976:	f7ff ff5d 	bl	8004834 <__NVIC_SetPriority>
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b004      	add	sp, #16
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	0002      	movs	r2, r0
 800498a:	1dfb      	adds	r3, r7, #7
 800498c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	b25b      	sxtb	r3, r3
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff ff33 	bl	8004800 <__NVIC_EnableIRQ>
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7ff ffaf 	bl	8004910 <SysTick_Config>
 80049b2:	0003      	movs	r3, r0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e036      	b.n	8004a40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2221      	movs	r2, #33	; 0x21
 80049d6:	2102      	movs	r1, #2
 80049d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_DMA_Init+0x8c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 f9c4 	bl	8004db0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	2101      	movs	r1, #1
 8004a34:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}  
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b004      	add	sp, #16
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	ffffc00f 	.word	0xffffc00f

08004a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2317      	movs	r3, #23
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	5c9b      	ldrb	r3, [r3, r2]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_DMA_Start_IT+0x24>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e04f      	b.n	8004b10 <HAL_DMA_Start_IT+0xc4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	2101      	movs	r1, #1
 8004a76:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2221      	movs	r2, #33	; 0x21
 8004a7c:	5c9b      	ldrb	r3, [r3, r2]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d13a      	bne.n	8004afa <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2221      	movs	r2, #33	; 0x21
 8004a88:	2102      	movs	r1, #2
 8004a8a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	438a      	bics	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f954 	bl	8004d56 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	210e      	movs	r1, #14
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e00f      	b.n	8004ae8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	210a      	movs	r1, #10
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	438a      	bics	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e007      	b.n	8004b0a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004b02:	2317      	movs	r3, #23
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2202      	movs	r2, #2
 8004b08:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004b0a:	2317      	movs	r3, #23
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	781b      	ldrb	r3, [r3, #0]
} 
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b006      	add	sp, #24
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2221      	movs	r2, #33	; 0x21
 8004b24:	5c9b      	ldrb	r3, [r3, r2]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d008      	beq.n	8004b3e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	2100      	movs	r1, #0
 8004b38:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e020      	b.n	8004b80 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	210e      	movs	r1, #14
 8004b4a:	438a      	bics	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	438a      	bics	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	2101      	movs	r1, #1
 8004b68:	4091      	lsls	r1, r2
 8004b6a:	000a      	movs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2221      	movs	r2, #33	; 0x21
 8004b72:	2101      	movs	r1, #1
 8004b74:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	0018      	movs	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	210f      	movs	r1, #15
 8004b92:	187b      	adds	r3, r7, r1
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2221      	movs	r2, #33	; 0x21
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d006      	beq.n	8004bb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e028      	b.n	8004c04 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	210e      	movs	r1, #14
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	438a      	bics	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4091      	lsls	r1, r2
 8004bde:	000a      	movs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2221      	movs	r2, #33	; 0x21
 8004be6:	2101      	movs	r1, #1
 8004be8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	0010      	movs	r0, r2
 8004c02:	4798      	blx	r3
    } 
  }
  return status;
 8004c04:	230f      	movs	r3, #15
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	781b      	ldrb	r3, [r3, #0]
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2204      	movs	r2, #4
 8004c30:	409a      	lsls	r2, r3
 8004c32:	0013      	movs	r3, r2
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4013      	ands	r3, r2
 8004c38:	d024      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x72>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d020      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d107      	bne.n	8004c5e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2104      	movs	r1, #4
 8004c5a:	438a      	bics	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	2104      	movs	r1, #4
 8004c68:	4091      	lsls	r1, r2
 8004c6a:	000a      	movs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d100      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x66>
 8004c76:	e06a      	b.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	0010      	movs	r0, r2
 8004c80:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c82:	e064      	b.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	2202      	movs	r2, #2
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	d02b      	beq.n	8004cec <HAL_DMA_IRQHandler+0xda>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2202      	movs	r2, #2
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d027      	beq.n	8004cec <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	210a      	movs	r1, #10
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2221      	movs	r2, #33	; 0x21
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	2102      	movs	r1, #2
 8004cca:	4091      	lsls	r1, r2
 8004ccc:	000a      	movs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d036      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	0010      	movs	r0, r2
 8004ce8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004cea:	e030      	b.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	0013      	movs	r3, r2
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d028      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	4013      	ands	r3, r2
 8004d02:	d024      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	210e      	movs	r1, #14
 8004d10:	438a      	bics	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4091      	lsls	r1, r2
 8004d20:	000a      	movs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2221      	movs	r2, #33	; 0x21
 8004d2e:	2101      	movs	r1, #1
 8004d30:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	2100      	movs	r1, #0
 8004d38:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	0010      	movs	r0, r2
 8004d4a:	4798      	blx	r3
    }
   }
}  
 8004d4c:	e7ff      	b.n	8004d4e <HAL_DMA_IRQHandler+0x13c>
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b004      	add	sp, #16
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4091      	lsls	r1, r2
 8004d70:	000a      	movs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d108      	bne.n	8004d96 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d94:	e007      	b.n	8004da6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b004      	add	sp, #16
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <DMA_CalcBaseAndBitshift+0x30>)
 8004dbe:	4694      	mov	ip, r2
 8004dc0:	4463      	add	r3, ip
 8004dc2:	2114      	movs	r1, #20
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fb f9c5 	bl	8000154 <__udivsi3>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	009a      	lsls	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a03      	ldr	r2, [pc, #12]	; (8004de4 <DMA_CalcBaseAndBitshift+0x34>)
 8004dd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	bffdfff8 	.word	0xbffdfff8
 8004de4:	40020000 	.word	0x40020000

08004de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df6:	e14f      	b.n	8005098 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4091      	lsls	r1, r2
 8004e02:	000a      	movs	r2, r1
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d100      	bne.n	8004e10 <HAL_GPIO_Init+0x28>
 8004e0e:	e140      	b.n	8005092 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2203      	movs	r2, #3
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d005      	beq.n	8004e28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2203      	movs	r2, #3
 8004e22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d130      	bne.n	8004e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	409a      	lsls	r2, r3
 8004e36:	0013      	movs	r3, r2
 8004e38:	43da      	mvns	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	0013      	movs	r3, r2
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e5e:	2201      	movs	r2, #1
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
 8004e64:	0013      	movs	r3, r2
 8004e66:	43da      	mvns	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	2201      	movs	r2, #1
 8004e76:	401a      	ands	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d017      	beq.n	8004ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	0013      	movs	r3, r2
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	0013      	movs	r3, r2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d123      	bne.n	8004f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	08da      	lsrs	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3208      	adds	r2, #8
 8004eda:	0092      	lsls	r2, r2, #2
 8004edc:	58d3      	ldr	r3, [r2, r3]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2207      	movs	r2, #7
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	220f      	movs	r2, #15
 8004eea:	409a      	lsls	r2, r3
 8004eec:	0013      	movs	r3, r2
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2107      	movs	r1, #7
 8004efe:	400b      	ands	r3, r1
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	409a      	lsls	r2, r3
 8004f04:	0013      	movs	r3, r2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	08da      	lsrs	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3208      	adds	r2, #8
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	409a      	lsls	r2, r3
 8004f28:	0013      	movs	r3, r2
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2203      	movs	r2, #3
 8004f38:	401a      	ands	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	0013      	movs	r3, r2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	23c0      	movs	r3, #192	; 0xc0
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	4013      	ands	r3, r2
 8004f58:	d100      	bne.n	8004f5c <HAL_GPIO_Init+0x174>
 8004f5a:	e09a      	b.n	8005092 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5c:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <HAL_GPIO_Init+0x2c8>)
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <HAL_GPIO_Init+0x2c8>)
 8004f62:	2101      	movs	r1, #1
 8004f64:	430a      	orrs	r2, r1
 8004f66:	619a      	str	r2, [r3, #24]
 8004f68:	4b51      	ldr	r3, [pc, #324]	; (80050b0 <HAL_GPIO_Init+0x2c8>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f74:	4a4f      	ldr	r2, [pc, #316]	; (80050b4 <HAL_GPIO_Init+0x2cc>)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	589b      	ldr	r3, [r3, r2]
 8004f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2203      	movs	r2, #3
 8004f86:	4013      	ands	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	0013      	movs	r3, r2
 8004f90:	43da      	mvns	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	2390      	movs	r3, #144	; 0x90
 8004f9c:	05db      	lsls	r3, r3, #23
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d013      	beq.n	8004fca <HAL_GPIO_Init+0x1e2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_GPIO_Init+0x1de>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a43      	ldr	r2, [pc, #268]	; (80050bc <HAL_GPIO_Init+0x2d4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <HAL_GPIO_Init+0x1da>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <HAL_GPIO_Init+0x2d8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_GPIO_Init+0x1d6>
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e006      	b.n	8004fcc <HAL_GPIO_Init+0x1e4>
 8004fbe:	2305      	movs	r3, #5
 8004fc0:	e004      	b.n	8004fcc <HAL_GPIO_Init+0x1e4>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e002      	b.n	8004fcc <HAL_GPIO_Init+0x1e4>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_GPIO_Init+0x1e4>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	2103      	movs	r1, #3
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	0092      	lsls	r2, r2, #2
 8004fd4:	4093      	lsls	r3, r2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fdc:	4935      	ldr	r1, [pc, #212]	; (80050b4 <HAL_GPIO_Init+0x2cc>)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	089b      	lsrs	r3, r3, #2
 8004fe2:	3302      	adds	r3, #2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fea:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	4013      	ands	r3, r2
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800500e:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005014:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	43da      	mvns	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4013      	ands	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	029b      	lsls	r3, r3, #10
 800502c:	4013      	ands	r3, r2
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005038:	4b22      	ldr	r3, [pc, #136]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	43da      	mvns	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	035b      	lsls	r3, r3, #13
 8005056:	4013      	ands	r3, r2
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005062:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005068:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	43da      	mvns	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	039b      	lsls	r3, r3, #14
 8005080:	4013      	ands	r3, r2
 8005082:	d003      	beq.n	800508c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <HAL_GPIO_Init+0x2dc>)
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	3301      	adds	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	40da      	lsrs	r2, r3
 80050a0:	1e13      	subs	r3, r2, #0
 80050a2:	d000      	beq.n	80050a6 <HAL_GPIO_Init+0x2be>
 80050a4:	e6a8      	b.n	8004df8 <HAL_GPIO_Init+0x10>
  } 
}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b006      	add	sp, #24
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40010000 	.word	0x40010000
 80050b8:	48000400 	.word	0x48000400
 80050bc:	48000800 	.word	0x48000800
 80050c0:	48000c00 	.word	0x48000c00
 80050c4:	40010400 	.word	0x40010400

080050c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	000a      	movs	r2, r1
 80050d2:	1cbb      	adds	r3, r7, #2
 80050d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	1cba      	adds	r2, r7, #2
 80050dc:	8812      	ldrh	r2, [r2, #0]
 80050de:	4013      	ands	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80050e2:	230f      	movs	r3, #15
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e003      	b.n	80050f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ec:	230f      	movs	r3, #15
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	781b      	ldrb	r3, [r3, #0]
  }
 80050fa:	0018      	movs	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b004      	add	sp, #16
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	0008      	movs	r0, r1
 800510c:	0011      	movs	r1, r2
 800510e:	1cbb      	adds	r3, r7, #2
 8005110:	1c02      	adds	r2, r0, #0
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	1c7b      	adds	r3, r7, #1
 8005116:	1c0a      	adds	r2, r1, #0
 8005118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800511a:	1c7b      	adds	r3, r7, #1
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d004      	beq.n	800512c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005122:	1cbb      	adds	r3, r7, #2
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800512a:	e003      	b.n	8005134 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800512c:	1cbb      	adds	r3, r7, #2
 800512e:	881a      	ldrh	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005134:	46c0      	nop			; (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	b002      	add	sp, #8
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e305      	b.n	800575a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	4013      	ands	r3, r2
 8005156:	d100      	bne.n	800515a <HAL_RCC_OscConfig+0x1e>
 8005158:	e08d      	b.n	8005276 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800515a:	4bc5      	ldr	r3, [pc, #788]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	220c      	movs	r2, #12
 8005160:	4013      	ands	r3, r2
 8005162:	2b04      	cmp	r3, #4
 8005164:	d00e      	beq.n	8005184 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005166:	4bc2      	ldr	r3, [pc, #776]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	220c      	movs	r2, #12
 800516c:	4013      	ands	r3, r2
 800516e:	2b08      	cmp	r3, #8
 8005170:	d116      	bne.n	80051a0 <HAL_RCC_OscConfig+0x64>
 8005172:	4bbf      	ldr	r3, [pc, #764]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	23c0      	movs	r3, #192	; 0xc0
 8005178:	025b      	lsls	r3, r3, #9
 800517a:	401a      	ands	r2, r3
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	025b      	lsls	r3, r3, #9
 8005180:	429a      	cmp	r2, r3
 8005182:	d10d      	bne.n	80051a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005184:	4bba      	ldr	r3, [pc, #744]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	4013      	ands	r3, r2
 800518e:	d100      	bne.n	8005192 <HAL_RCC_OscConfig+0x56>
 8005190:	e070      	b.n	8005274 <HAL_RCC_OscConfig+0x138>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d000      	beq.n	800519c <HAL_RCC_OscConfig+0x60>
 800519a:	e06b      	b.n	8005274 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e2dc      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_RCC_OscConfig+0x7c>
 80051a8:	4bb1      	ldr	r3, [pc, #708]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4bb0      	ldr	r3, [pc, #704]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	0249      	lsls	r1, r1, #9
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e02f      	b.n	8005218 <HAL_RCC_OscConfig+0xdc>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <HAL_RCC_OscConfig+0x9e>
 80051c0:	4bab      	ldr	r3, [pc, #684]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4baa      	ldr	r3, [pc, #680]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051c6:	49ab      	ldr	r1, [pc, #684]	; (8005474 <HAL_RCC_OscConfig+0x338>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	4ba8      	ldr	r3, [pc, #672]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4ba7      	ldr	r3, [pc, #668]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051d2:	49a9      	ldr	r1, [pc, #676]	; (8005478 <HAL_RCC_OscConfig+0x33c>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e01e      	b.n	8005218 <HAL_RCC_OscConfig+0xdc>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d10e      	bne.n	8005200 <HAL_RCC_OscConfig+0xc4>
 80051e2:	4ba3      	ldr	r3, [pc, #652]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4ba2      	ldr	r3, [pc, #648]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	02c9      	lsls	r1, r1, #11
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	4b9f      	ldr	r3, [pc, #636]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b9e      	ldr	r3, [pc, #632]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	0249      	lsls	r1, r1, #9
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e00b      	b.n	8005218 <HAL_RCC_OscConfig+0xdc>
 8005200:	4b9b      	ldr	r3, [pc, #620]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b9a      	ldr	r3, [pc, #616]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005206:	499b      	ldr	r1, [pc, #620]	; (8005474 <HAL_RCC_OscConfig+0x338>)
 8005208:	400a      	ands	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	4b98      	ldr	r3, [pc, #608]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4b97      	ldr	r3, [pc, #604]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005212:	4999      	ldr	r1, [pc, #612]	; (8005478 <HAL_RCC_OscConfig+0x33c>)
 8005214:	400a      	ands	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d014      	beq.n	800524a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7ff fac0 	bl	80047a4 <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800522a:	f7ff fabb 	bl	80047a4 <HAL_GetTick>
 800522e:	0002      	movs	r2, r0
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b64      	cmp	r3, #100	; 0x64
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e28e      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523c:	4b8c      	ldr	r3, [pc, #560]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	4013      	ands	r3, r2
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0xee>
 8005248:	e015      	b.n	8005276 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7ff faab 	bl	80047a4 <HAL_GetTick>
 800524e:	0003      	movs	r3, r0
 8005250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005254:	f7ff faa6 	bl	80047a4 <HAL_GetTick>
 8005258:	0002      	movs	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b64      	cmp	r3, #100	; 0x64
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e279      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005266:	4b82      	ldr	r3, [pc, #520]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	029b      	lsls	r3, r3, #10
 800526e:	4013      	ands	r3, r2
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x118>
 8005272:	e000      	b.n	8005276 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005274:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2202      	movs	r2, #2
 800527c:	4013      	ands	r3, r2
 800527e:	d100      	bne.n	8005282 <HAL_RCC_OscConfig+0x146>
 8005280:	e06c      	b.n	800535c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005282:	4b7b      	ldr	r3, [pc, #492]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	220c      	movs	r2, #12
 8005288:	4013      	ands	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800528c:	4b78      	ldr	r3, [pc, #480]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	220c      	movs	r2, #12
 8005292:	4013      	ands	r3, r2
 8005294:	2b08      	cmp	r3, #8
 8005296:	d11f      	bne.n	80052d8 <HAL_RCC_OscConfig+0x19c>
 8005298:	4b75      	ldr	r3, [pc, #468]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	23c0      	movs	r3, #192	; 0xc0
 800529e:	025b      	lsls	r3, r3, #9
 80052a0:	401a      	ands	r2, r3
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d116      	bne.n	80052d8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	4b71      	ldr	r3, [pc, #452]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_OscConfig+0x184>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e24c      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c0:	4b6b      	ldr	r3, [pc, #428]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	22f8      	movs	r2, #248	; 0xf8
 80052c6:	4393      	bics	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00da      	lsls	r2, r3, #3
 80052d0:	4b67      	ldr	r3, [pc, #412]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	e041      	b.n	800535c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d024      	beq.n	800532a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e0:	4b63      	ldr	r3, [pc, #396]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b62      	ldr	r3, [pc, #392]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80052e6:	2101      	movs	r1, #1
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7ff fa5a 	bl	80047a4 <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f6:	f7ff fa55 	bl	80047a4 <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e228      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005308:	4b59      	ldr	r3, [pc, #356]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2202      	movs	r2, #2
 800530e:	4013      	ands	r3, r2
 8005310:	d0f1      	beq.n	80052f6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b57      	ldr	r3, [pc, #348]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	22f8      	movs	r2, #248	; 0xf8
 8005318:	4393      	bics	r3, r2
 800531a:	0019      	movs	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	00da      	lsls	r2, r3, #3
 8005322:	4b53      	ldr	r3, [pc, #332]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e018      	b.n	800535c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800532a:	4b51      	ldr	r3, [pc, #324]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b50      	ldr	r3, [pc, #320]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005330:	2101      	movs	r1, #1
 8005332:	438a      	bics	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7ff fa35 	bl	80047a4 <HAL_GetTick>
 800533a:	0003      	movs	r3, r0
 800533c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005340:	f7ff fa30 	bl	80047a4 <HAL_GetTick>
 8005344:	0002      	movs	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e203      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005352:	4b47      	ldr	r3, [pc, #284]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	d1f1      	bne.n	8005340 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2208      	movs	r2, #8
 8005362:	4013      	ands	r3, r2
 8005364:	d036      	beq.n	80053d4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800536e:	4b40      	ldr	r3, [pc, #256]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005372:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005374:	2101      	movs	r1, #1
 8005376:	430a      	orrs	r2, r1
 8005378:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537a:	f7ff fa13 	bl	80047a4 <HAL_GetTick>
 800537e:	0003      	movs	r3, r0
 8005380:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005384:	f7ff fa0e 	bl	80047a4 <HAL_GetTick>
 8005388:	0002      	movs	r2, r0
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e1e1      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2202      	movs	r2, #2
 800539c:	4013      	ands	r3, r2
 800539e:	d0f1      	beq.n	8005384 <HAL_RCC_OscConfig+0x248>
 80053a0:	e018      	b.n	80053d4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a2:	4b33      	ldr	r3, [pc, #204]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80053a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80053a8:	2101      	movs	r1, #1
 80053aa:	438a      	bics	r2, r1
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ae:	f7ff f9f9 	bl	80047a4 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053b8:	f7ff f9f4 	bl	80047a4 <HAL_GetTick>
 80053bc:	0002      	movs	r2, r0
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e1c7      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ca:	4b29      	ldr	r3, [pc, #164]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	d1f1      	bne.n	80053b8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2204      	movs	r2, #4
 80053da:	4013      	ands	r3, r2
 80053dc:	d100      	bne.n	80053e0 <HAL_RCC_OscConfig+0x2a4>
 80053de:	e0b5      	b.n	800554c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e0:	201f      	movs	r0, #31
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e8:	4b21      	ldr	r3, [pc, #132]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	055b      	lsls	r3, r3, #21
 80053f0:	4013      	ands	r3, r2
 80053f2:	d110      	bne.n	8005416 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	0549      	lsls	r1, r1, #21
 80053fe:	430a      	orrs	r2, r1
 8005400:	61da      	str	r2, [r3, #28]
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	055b      	lsls	r3, r3, #21
 800540a:	4013      	ands	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005410:	183b      	adds	r3, r7, r0
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005416:	4b19      	ldr	r3, [pc, #100]	; (800547c <HAL_RCC_OscConfig+0x340>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4013      	ands	r3, r2
 8005420:	d11a      	bne.n	8005458 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005422:	4b16      	ldr	r3, [pc, #88]	; (800547c <HAL_RCC_OscConfig+0x340>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b15      	ldr	r3, [pc, #84]	; (800547c <HAL_RCC_OscConfig+0x340>)
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	0049      	lsls	r1, r1, #1
 800542c:	430a      	orrs	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005430:	f7ff f9b8 	bl	80047a4 <HAL_GetTick>
 8005434:	0003      	movs	r3, r0
 8005436:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7ff f9b3 	bl	80047a4 <HAL_GetTick>
 800543e:	0002      	movs	r2, r0
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b64      	cmp	r3, #100	; 0x64
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e186      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCC_OscConfig+0x340>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4013      	ands	r3, r2
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10f      	bne.n	8005480 <HAL_RCC_OscConfig+0x344>
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	4b02      	ldr	r3, [pc, #8]	; (8005470 <HAL_RCC_OscConfig+0x334>)
 8005466:	2101      	movs	r1, #1
 8005468:	430a      	orrs	r2, r1
 800546a:	621a      	str	r2, [r3, #32]
 800546c:	e036      	b.n	80054dc <HAL_RCC_OscConfig+0x3a0>
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	40021000 	.word	0x40021000
 8005474:	fffeffff 	.word	0xfffeffff
 8005478:	fffbffff 	.word	0xfffbffff
 800547c:	40007000 	.word	0x40007000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10c      	bne.n	80054a2 <HAL_RCC_OscConfig+0x366>
 8005488:	4bb6      	ldr	r3, [pc, #728]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	4bb5      	ldr	r3, [pc, #724]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800548e:	2101      	movs	r1, #1
 8005490:	438a      	bics	r2, r1
 8005492:	621a      	str	r2, [r3, #32]
 8005494:	4bb3      	ldr	r3, [pc, #716]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	4bb2      	ldr	r3, [pc, #712]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800549a:	2104      	movs	r1, #4
 800549c:	438a      	bics	r2, r1
 800549e:	621a      	str	r2, [r3, #32]
 80054a0:	e01c      	b.n	80054dc <HAL_RCC_OscConfig+0x3a0>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCC_OscConfig+0x388>
 80054aa:	4bae      	ldr	r3, [pc, #696]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	4bad      	ldr	r3, [pc, #692]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054b0:	2104      	movs	r1, #4
 80054b2:	430a      	orrs	r2, r1
 80054b4:	621a      	str	r2, [r3, #32]
 80054b6:	4bab      	ldr	r3, [pc, #684]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	4baa      	ldr	r3, [pc, #680]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054bc:	2101      	movs	r1, #1
 80054be:	430a      	orrs	r2, r1
 80054c0:	621a      	str	r2, [r3, #32]
 80054c2:	e00b      	b.n	80054dc <HAL_RCC_OscConfig+0x3a0>
 80054c4:	4ba7      	ldr	r3, [pc, #668]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	4ba6      	ldr	r3, [pc, #664]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054ca:	2101      	movs	r1, #1
 80054cc:	438a      	bics	r2, r1
 80054ce:	621a      	str	r2, [r3, #32]
 80054d0:	4ba4      	ldr	r3, [pc, #656]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	4ba3      	ldr	r3, [pc, #652]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80054d6:	2104      	movs	r1, #4
 80054d8:	438a      	bics	r2, r1
 80054da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d014      	beq.n	800550e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e4:	f7ff f95e 	bl	80047a4 <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ec:	e009      	b.n	8005502 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7ff f959 	bl	80047a4 <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	4a9b      	ldr	r2, [pc, #620]	; (8005768 <HAL_RCC_OscConfig+0x62c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e12b      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005502:	4b98      	ldr	r3, [pc, #608]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	2202      	movs	r2, #2
 8005508:	4013      	ands	r3, r2
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x3b2>
 800550c:	e013      	b.n	8005536 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550e:	f7ff f949 	bl	80047a4 <HAL_GetTick>
 8005512:	0003      	movs	r3, r0
 8005514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005516:	e009      	b.n	800552c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005518:	f7ff f944 	bl	80047a4 <HAL_GetTick>
 800551c:	0002      	movs	r2, r0
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	4a91      	ldr	r2, [pc, #580]	; (8005768 <HAL_RCC_OscConfig+0x62c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e116      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800552c:	4b8d      	ldr	r3, [pc, #564]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	2202      	movs	r2, #2
 8005532:	4013      	ands	r3, r2
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005536:	231f      	movs	r3, #31
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d105      	bne.n	800554c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005540:	4b88      	ldr	r3, [pc, #544]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	4b87      	ldr	r3, [pc, #540]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005546:	4989      	ldr	r1, [pc, #548]	; (800576c <HAL_RCC_OscConfig+0x630>)
 8005548:	400a      	ands	r2, r1
 800554a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2210      	movs	r2, #16
 8005552:	4013      	ands	r3, r2
 8005554:	d063      	beq.n	800561e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d12a      	bne.n	80055b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800555e:	4b81      	ldr	r3, [pc, #516]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005562:	4b80      	ldr	r3, [pc, #512]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005564:	2104      	movs	r1, #4
 8005566:	430a      	orrs	r2, r1
 8005568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800556a:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800556c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556e:	4b7d      	ldr	r3, [pc, #500]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005570:	2101      	movs	r1, #1
 8005572:	430a      	orrs	r2, r1
 8005574:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005576:	f7ff f915 	bl	80047a4 <HAL_GetTick>
 800557a:	0003      	movs	r3, r0
 800557c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005580:	f7ff f910 	bl	80047a4 <HAL_GetTick>
 8005584:	0002      	movs	r2, r0
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e0e3      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005592:	4b74      	ldr	r3, [pc, #464]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	2202      	movs	r2, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d0f1      	beq.n	8005580 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800559c:	4b71      	ldr	r3, [pc, #452]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	22f8      	movs	r2, #248	; 0xf8
 80055a2:	4393      	bics	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	00da      	lsls	r2, r3, #3
 80055ac:	4b6d      	ldr	r3, [pc, #436]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055ae:	430a      	orrs	r2, r1
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34
 80055b2:	e034      	b.n	800561e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	3305      	adds	r3, #5
 80055ba:	d111      	bne.n	80055e0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80055bc:	4b69      	ldr	r3, [pc, #420]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c0:	4b68      	ldr	r3, [pc, #416]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055c2:	2104      	movs	r1, #4
 80055c4:	438a      	bics	r2, r1
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80055c8:	4b66      	ldr	r3, [pc, #408]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	22f8      	movs	r2, #248	; 0xf8
 80055ce:	4393      	bics	r3, r2
 80055d0:	0019      	movs	r1, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	00da      	lsls	r2, r3, #3
 80055d8:	4b62      	ldr	r3, [pc, #392]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055da:	430a      	orrs	r2, r1
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34
 80055de:	e01e      	b.n	800561e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80055e0:	4b60      	ldr	r3, [pc, #384]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e4:	4b5f      	ldr	r3, [pc, #380]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055e6:	2104      	movs	r1, #4
 80055e8:	430a      	orrs	r2, r1
 80055ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80055ec:	4b5d      	ldr	r3, [pc, #372]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f0:	4b5c      	ldr	r3, [pc, #368]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80055f2:	2101      	movs	r1, #1
 80055f4:	438a      	bics	r2, r1
 80055f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f8:	f7ff f8d4 	bl	80047a4 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005602:	f7ff f8cf 	bl	80047a4 <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e0a2      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005614:	4b53      	ldr	r3, [pc, #332]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	2202      	movs	r2, #2
 800561a:	4013      	ands	r3, r2
 800561c:	d1f1      	bne.n	8005602 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d100      	bne.n	8005628 <HAL_RCC_OscConfig+0x4ec>
 8005626:	e097      	b.n	8005758 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005628:	4b4e      	ldr	r3, [pc, #312]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	220c      	movs	r2, #12
 800562e:	4013      	ands	r3, r2
 8005630:	2b08      	cmp	r3, #8
 8005632:	d100      	bne.n	8005636 <HAL_RCC_OscConfig+0x4fa>
 8005634:	e06b      	b.n	800570e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d14c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	4b49      	ldr	r3, [pc, #292]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b48      	ldr	r3, [pc, #288]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005644:	494a      	ldr	r1, [pc, #296]	; (8005770 <HAL_RCC_OscConfig+0x634>)
 8005646:	400a      	ands	r2, r1
 8005648:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564a:	f7ff f8ab 	bl	80047a4 <HAL_GetTick>
 800564e:	0003      	movs	r3, r0
 8005650:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005654:	f7ff f8a6 	bl	80047a4 <HAL_GetTick>
 8005658:	0002      	movs	r2, r0
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e079      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	049b      	lsls	r3, r3, #18
 800566e:	4013      	ands	r3, r2
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005672:	4b3c      	ldr	r3, [pc, #240]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	220f      	movs	r2, #15
 8005678:	4393      	bics	r3, r2
 800567a:	0019      	movs	r1, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	4b38      	ldr	r3, [pc, #224]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005682:	430a      	orrs	r2, r1
 8005684:	62da      	str	r2, [r3, #44]	; 0x2c
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4a3a      	ldr	r2, [pc, #232]	; (8005774 <HAL_RCC_OscConfig+0x638>)
 800568c:	4013      	ands	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	431a      	orrs	r2, r3
 800569a:	4b32      	ldr	r3, [pc, #200]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800569c:	430a      	orrs	r2, r1
 800569e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a0:	4b30      	ldr	r3, [pc, #192]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	0449      	lsls	r1, r1, #17
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7ff f879 	bl	80047a4 <HAL_GetTick>
 80056b2:	0003      	movs	r3, r0
 80056b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b8:	f7ff f874 	bl	80047a4 <HAL_GetTick>
 80056bc:	0002      	movs	r2, r0
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e047      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056ca:	4b26      	ldr	r3, [pc, #152]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	049b      	lsls	r3, r3, #18
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x57c>
 80056d6:	e03f      	b.n	8005758 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d8:	4b22      	ldr	r3, [pc, #136]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	4b21      	ldr	r3, [pc, #132]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 80056de:	4924      	ldr	r1, [pc, #144]	; (8005770 <HAL_RCC_OscConfig+0x634>)
 80056e0:	400a      	ands	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7ff f85e 	bl	80047a4 <HAL_GetTick>
 80056e8:	0003      	movs	r3, r0
 80056ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ee:	f7ff f859 	bl	80047a4 <HAL_GetTick>
 80056f2:	0002      	movs	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e02c      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005700:	4b18      	ldr	r3, [pc, #96]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	049b      	lsls	r3, r3, #18
 8005708:	4013      	ands	r3, r2
 800570a:	d1f0      	bne.n	80056ee <HAL_RCC_OscConfig+0x5b2>
 800570c:	e024      	b.n	8005758 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e01f      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <HAL_RCC_OscConfig+0x628>)
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	23c0      	movs	r3, #192	; 0xc0
 800572a:	025b      	lsls	r3, r3, #9
 800572c:	401a      	ands	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	429a      	cmp	r2, r3
 8005734:	d10e      	bne.n	8005754 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	220f      	movs	r2, #15
 800573a:	401a      	ands	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	23f0      	movs	r3, #240	; 0xf0
 8005748:	039b      	lsls	r3, r3, #14
 800574a:	401a      	ands	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b008      	add	sp, #32
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	40021000 	.word	0x40021000
 8005768:	00001388 	.word	0x00001388
 800576c:	efffffff 	.word	0xefffffff
 8005770:	feffffff 	.word	0xfeffffff
 8005774:	ffc27fff 	.word	0xffc27fff

08005778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0b3      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d911      	bls.n	80057be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	4393      	bics	r3, r2
 80057a2:	0019      	movs	r1, r3
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ac:	4b53      	ldr	r3, [pc, #332]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4013      	ands	r3, r2
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d001      	beq.n	80057be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e09a      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2202      	movs	r2, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	d015      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2204      	movs	r2, #4
 80057ce:	4013      	ands	r3, r2
 80057d0:	d006      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057d2:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80057d8:	21e0      	movs	r1, #224	; 0xe0
 80057da:	00c9      	lsls	r1, r1, #3
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e0:	4b47      	ldr	r3, [pc, #284]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	22f0      	movs	r2, #240	; 0xf0
 80057e6:	4393      	bics	r3, r2
 80057e8:	0019      	movs	r1, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	4b44      	ldr	r3, [pc, #272]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2201      	movs	r2, #1
 80057fa:	4013      	ands	r3, r2
 80057fc:	d040      	beq.n	8005880 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b3e      	ldr	r3, [pc, #248]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	4013      	ands	r3, r2
 8005810:	d114      	bne.n	800583c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e06e      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	049b      	lsls	r3, r3, #18
 8005826:	4013      	ands	r3, r2
 8005828:	d108      	bne.n	800583c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e062      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b34      	ldr	r3, [pc, #208]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2202      	movs	r2, #2
 8005834:	4013      	ands	r3, r2
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e05b      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583c:	4b30      	ldr	r3, [pc, #192]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	4393      	bics	r3, r2
 8005844:	0019      	movs	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4b2d      	ldr	r3, [pc, #180]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fe ffa8 	bl	80047a4 <HAL_GetTick>
 8005854:	0003      	movs	r3, r0
 8005856:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005858:	e009      	b.n	800586e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585a:	f7fe ffa3 	bl	80047a4 <HAL_GetTick>
 800585e:	0002      	movs	r2, r0
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <HAL_RCC_ClockConfig+0x18c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e042      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b24      	ldr	r3, [pc, #144]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	220c      	movs	r2, #12
 8005874:	401a      	ands	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1ec      	bne.n	800585a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d211      	bcs.n	80058b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	4393      	bics	r3, r2
 8005896:	0019      	movs	r1, r3
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a0:	4b16      	ldr	r3, [pc, #88]	; (80058fc <HAL_RCC_ClockConfig+0x184>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2201      	movs	r2, #1
 80058a6:	4013      	ands	r3, r2
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d001      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e020      	b.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2204      	movs	r2, #4
 80058b8:	4013      	ands	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a11      	ldr	r2, [pc, #68]	; (8005908 <HAL_RCC_ClockConfig+0x190>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058d0:	f000 f820 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80058d4:	0001      	movs	r1, r0
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_RCC_ClockConfig+0x188>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	220f      	movs	r2, #15
 80058de:	4013      	ands	r3, r2
 80058e0:	4a0a      	ldr	r2, [pc, #40]	; (800590c <HAL_RCC_ClockConfig+0x194>)
 80058e2:	5cd3      	ldrb	r3, [r2, r3]
 80058e4:	000a      	movs	r2, r1
 80058e6:	40da      	lsrs	r2, r3
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <HAL_RCC_ClockConfig+0x198>)
 80058ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80058ec:	2003      	movs	r0, #3
 80058ee:	f7fe ff13 	bl	8004718 <HAL_InitTick>
  
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b004      	add	sp, #16
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40022000 	.word	0x40022000
 8005900:	40021000 	.word	0x40021000
 8005904:	00001388 	.word	0x00001388
 8005908:	fffff8ff 	.word	0xfffff8ff
 800590c:	0800dfa0 	.word	0x0800dfa0
 8005910:	20000000 	.word	0x20000000

08005914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b08f      	sub	sp, #60	; 0x3c
 8005918:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800591a:	2314      	movs	r3, #20
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005920:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005922:	c313      	stmia	r3!, {r0, r1, r4}
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	4a2a      	ldr	r2, [pc, #168]	; (80059d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800592c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800592e:	c313      	stmia	r3!, {r0, r1, r4}
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005938:	2300      	movs	r3, #0
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
 800593c:	2300      	movs	r3, #0
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005948:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	220c      	movs	r2, #12
 8005952:	4013      	ands	r3, r2
 8005954:	2b04      	cmp	r3, #4
 8005956:	d002      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0x4a>
 8005958:	2b08      	cmp	r3, #8
 800595a:	d003      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x50>
 800595c:	e02f      	b.n	80059be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800595e:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005960:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005962:	e02f      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	0c9b      	lsrs	r3, r3, #18
 8005968:	220f      	movs	r2, #15
 800596a:	4013      	ands	r3, r2
 800596c:	2214      	movs	r2, #20
 800596e:	18ba      	adds	r2, r7, r2
 8005970:	5cd3      	ldrb	r3, [r2, r3]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005974:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	220f      	movs	r2, #15
 800597a:	4013      	ands	r3, r2
 800597c:	1d3a      	adds	r2, r7, #4
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005984:	23c0      	movs	r3, #192	; 0xc0
 8005986:	025b      	lsls	r3, r3, #9
 8005988:	401a      	ands	r2, r3
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	025b      	lsls	r3, r3, #9
 800598e:	429a      	cmp	r2, r3
 8005990:	d109      	bne.n	80059a6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005994:	4811      	ldr	r0, [pc, #68]	; (80059dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005996:	f7fa fbdd 	bl	8000154 <__udivsi3>
 800599a:	0003      	movs	r3, r0
 800599c:	001a      	movs	r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	4353      	muls	r3, r2
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80059a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80059aa:	f7fa fbd3 	bl	8000154 <__udivsi3>
 80059ae:	0003      	movs	r3, r0
 80059b0:	001a      	movs	r2, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	4353      	muls	r3, r2
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b00f      	add	sp, #60	; 0x3c
 80059cc:	bd90      	pop	{r4, r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	0800def4 	.word	0x0800def4
 80059d4:	0800df04 	.word	0x0800df04
 80059d8:	40021000 	.word	0x40021000
 80059dc:	007a1200 	.word	0x007a1200

080059e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e4:	4b02      	ldr	r3, [pc, #8]	; (80059f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80059e6:	681b      	ldr	r3, [r3, #0]
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	20000000 	.word	0x20000000

080059f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80059f8:	f7ff fff2 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 80059fc:	0001      	movs	r1, r0
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	2207      	movs	r2, #7
 8005a06:	4013      	ands	r3, r2
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	40d9      	lsrs	r1, r3
 8005a0e:	000b      	movs	r3, r1
}    
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	0800dfb0 	.word	0x0800dfb0

08005a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e042      	b.n	8005ab8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	223d      	movs	r2, #61	; 0x3d
 8005a36:	5c9b      	ldrb	r3, [r3, r2]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	223c      	movs	r2, #60	; 0x3c
 8005a42:	2100      	movs	r1, #0
 8005a44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7fe fb33 	bl	80040b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	223d      	movs	r2, #61	; 0x3d
 8005a52:	2102      	movs	r1, #2
 8005a54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	0019      	movs	r1, r3
 8005a60:	0010      	movs	r0, r2
 8005a62:	f000 ffed 	bl	8006a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2246      	movs	r2, #70	; 0x46
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	223e      	movs	r2, #62	; 0x3e
 8005a72:	2101      	movs	r1, #1
 8005a74:	5499      	strb	r1, [r3, r2]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	223f      	movs	r2, #63	; 0x3f
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	5499      	strb	r1, [r3, r2]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2240      	movs	r2, #64	; 0x40
 8005a82:	2101      	movs	r1, #1
 8005a84:	5499      	strb	r1, [r3, r2]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2241      	movs	r2, #65	; 0x41
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2242      	movs	r2, #66	; 0x42
 8005a92:	2101      	movs	r1, #1
 8005a94:	5499      	strb	r1, [r3, r2]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2243      	movs	r2, #67	; 0x43
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	5499      	strb	r1, [r3, r2]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2244      	movs	r2, #68	; 0x44
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2245      	movs	r2, #69	; 0x45
 8005aaa:	2101      	movs	r1, #1
 8005aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	223d      	movs	r2, #61	; 0x3d
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b002      	add	sp, #8
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e042      	b.n	8005b58 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	223d      	movs	r2, #61	; 0x3d
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	223c      	movs	r2, #60	; 0x3c
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 f839 	bl	8005b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	223d      	movs	r2, #61	; 0x3d
 8005af2:	2102      	movs	r1, #2
 8005af4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	0019      	movs	r1, r3
 8005b00:	0010      	movs	r0, r2
 8005b02:	f000 ff9d 	bl	8006a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2246      	movs	r2, #70	; 0x46
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	223e      	movs	r2, #62	; 0x3e
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	223f      	movs	r2, #63	; 0x3f
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	5499      	strb	r1, [r3, r2]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2240      	movs	r2, #64	; 0x40
 8005b22:	2101      	movs	r1, #1
 8005b24:	5499      	strb	r1, [r3, r2]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2241      	movs	r2, #65	; 0x41
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2242      	movs	r2, #66	; 0x42
 8005b32:	2101      	movs	r1, #1
 8005b34:	5499      	strb	r1, [r3, r2]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2243      	movs	r2, #67	; 0x43
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	5499      	strb	r1, [r3, r2]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2244      	movs	r2, #68	; 0x44
 8005b42:	2101      	movs	r1, #1
 8005b44:	5499      	strb	r1, [r3, r2]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2245      	movs	r2, #69	; 0x45
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	223d      	movs	r2, #61	; 0x3d
 8005b52:	2101      	movs	r1, #1
 8005b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <HAL_TIM_PWM_Start+0x22>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	223e      	movs	r2, #62	; 0x3e
 8005b84:	5c9b      	ldrb	r3, [r3, r2]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	1e5a      	subs	r2, r3, #1
 8005b8c:	4193      	sbcs	r3, r2
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e01f      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x62>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d108      	bne.n	8005baa <HAL_TIM_PWM_Start+0x3a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	223f      	movs	r2, #63	; 0x3f
 8005b9c:	5c9b      	ldrb	r3, [r3, r2]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	1e5a      	subs	r2, r3, #1
 8005ba4:	4193      	sbcs	r3, r2
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	e013      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x62>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d108      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x52>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2240      	movs	r2, #64	; 0x40
 8005bb4:	5c9b      	ldrb	r3, [r3, r2]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	4193      	sbcs	r3, r2
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e007      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x62>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2241      	movs	r2, #65	; 0x41
 8005bc6:	5c9b      	ldrb	r3, [r3, r2]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	1e5a      	subs	r2, r3, #1
 8005bce:	4193      	sbcs	r3, r2
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e06e      	b.n	8005cb8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start+0x7a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	223e      	movs	r2, #62	; 0x3e
 8005be4:	2102      	movs	r1, #2
 8005be6:	5499      	strb	r1, [r3, r2]
 8005be8:	e013      	b.n	8005c12 <HAL_TIM_PWM_Start+0xa2>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x8a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	223f      	movs	r2, #63	; 0x3f
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	5499      	strb	r1, [r3, r2]
 8005bf8:	e00b      	b.n	8005c12 <HAL_TIM_PWM_Start+0xa2>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0x9a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	2102      	movs	r1, #2
 8005c06:	5499      	strb	r1, [r3, r2]
 8005c08:	e003      	b.n	8005c12 <HAL_TIM_PWM_Start+0xa2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2241      	movs	r2, #65	; 0x41
 8005c0e:	2102      	movs	r1, #2
 8005c10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f001 fb3c 	bl	8007298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <HAL_TIM_PWM_Start+0x150>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIM_PWM_Start+0xd8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <HAL_TIM_PWM_Start+0x154>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIM_PWM_Start+0xd8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a23      	ldr	r2, [pc, #140]	; (8005cc8 <HAL_TIM_PWM_Start+0x158>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_PWM_Start+0xd8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <HAL_TIM_PWM_Start+0x15c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_PWM_Start+0xdc>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_TIM_PWM_Start+0xde>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	0209      	lsls	r1, r1, #8
 8005c60:	430a      	orrs	r2, r1
 8005c62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <HAL_TIM_PWM_Start+0x150>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x112>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <HAL_TIM_PWM_Start+0x160>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x112>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <HAL_TIM_PWM_Start+0x154>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d111      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2207      	movs	r2, #7
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b06      	cmp	r3, #6
 8005c92:	d010      	beq.n	8005cb6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca4:	e007      	b.n	8005cb6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	0018      	movs	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b004      	add	sp, #16
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800
 8005cd0:	40000400 	.word	0x40000400

08005cd4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cde:	230f      	movs	r3, #15
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <HAL_TIM_PWM_Start_IT+0x2a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	223e      	movs	r2, #62	; 0x3e
 8005cf0:	5c9b      	ldrb	r3, [r3, r2]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	4193      	sbcs	r3, r2
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	e01f      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x6a>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d108      	bne.n	8005d16 <HAL_TIM_PWM_Start_IT+0x42>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	223f      	movs	r2, #63	; 0x3f
 8005d08:	5c9b      	ldrb	r3, [r3, r2]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	1e5a      	subs	r2, r3, #1
 8005d10:	4193      	sbcs	r3, r2
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	e013      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x6a>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d108      	bne.n	8005d2e <HAL_TIM_PWM_Start_IT+0x5a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	5c9b      	ldrb	r3, [r3, r2]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	1e5a      	subs	r2, r3, #1
 8005d28:	4193      	sbcs	r3, r2
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	e007      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x6a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2241      	movs	r2, #65	; 0x41
 8005d32:	5c9b      	ldrb	r3, [r3, r2]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	1e5a      	subs	r2, r3, #1
 8005d3a:	4193      	sbcs	r3, r2
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0b1      	b.n	8005eaa <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_PWM_Start_IT+0x82>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	223e      	movs	r2, #62	; 0x3e
 8005d50:	2102      	movs	r1, #2
 8005d52:	5499      	strb	r1, [r3, r2]
 8005d54:	e013      	b.n	8005d7e <HAL_TIM_PWM_Start_IT+0xaa>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_PWM_Start_IT+0x92>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	223f      	movs	r2, #63	; 0x3f
 8005d60:	2102      	movs	r1, #2
 8005d62:	5499      	strb	r1, [r3, r2]
 8005d64:	e00b      	b.n	8005d7e <HAL_TIM_PWM_Start_IT+0xaa>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d104      	bne.n	8005d76 <HAL_TIM_PWM_Start_IT+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	2102      	movs	r1, #2
 8005d72:	5499      	strb	r1, [r3, r2]
 8005d74:	e003      	b.n	8005d7e <HAL_TIM_PWM_Start_IT+0xaa>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2241      	movs	r2, #65	; 0x41
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b0c      	cmp	r3, #12
 8005d82:	d02a      	beq.n	8005dda <HAL_TIM_PWM_Start_IT+0x106>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d830      	bhi.n	8005dec <HAL_TIM_PWM_Start_IT+0x118>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_TIM_PWM_Start_IT+0xf4>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d82a      	bhi.n	8005dec <HAL_TIM_PWM_Start_IT+0x118>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_PWM_Start_IT+0xd0>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d009      	beq.n	8005db6 <HAL_TIM_PWM_Start_IT+0xe2>
 8005da2:	e023      	b.n	8005dec <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2102      	movs	r1, #2
 8005db0:	430a      	orrs	r2, r1
 8005db2:	60da      	str	r2, [r3, #12]
      break;
 8005db4:	e01f      	b.n	8005df6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2104      	movs	r1, #4
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	60da      	str	r2, [r3, #12]
      break;
 8005dc6:	e016      	b.n	8005df6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2108      	movs	r1, #8
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	60da      	str	r2, [r3, #12]
      break;
 8005dd8:	e00d      	b.n	8005df6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2110      	movs	r1, #16
 8005de6:	430a      	orrs	r2, r1
 8005de8:	60da      	str	r2, [r3, #12]
      break;
 8005dea:	e004      	b.n	8005df6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005dec:	230f      	movs	r3, #15
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
      break;
 8005df4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005df6:	230f      	movs	r3, #15
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d151      	bne.n	8005ea4 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	2201      	movs	r2, #1
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f001 fa45 	bl	8007298 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_TIM_PWM_Start_IT+0x162>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_TIM_PWM_Start_IT+0x162>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIM_PWM_Start_IT+0x162>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a23      	ldr	r2, [pc, #140]	; (8005ec0 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_PWM_Start_IT+0x166>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <HAL_TIM_PWM_Start_IT+0x168>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	0209      	lsls	r1, r1, #8
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a17      	ldr	r2, [pc, #92]	; (8005eb4 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIM_PWM_Start_IT+0x19c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIM_PWM_Start_IT+0x19c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d111      	bne.n	8005e94 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2207      	movs	r2, #7
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d010      	beq.n	8005ea4 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	e007      	b.n	8005ea4 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ea4:	230f      	movs	r3, #15
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	781b      	ldrb	r3, [r3, #0]
}
 8005eaa:	0018      	movs	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b004      	add	sp, #16
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
 8005ec4:	40000400 	.word	0x40000400

08005ec8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	230f      	movs	r3, #15
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b0c      	cmp	r3, #12
 8005ede:	d02a      	beq.n	8005f36 <HAL_TIM_PWM_Stop_IT+0x6e>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d830      	bhi.n	8005f48 <HAL_TIM_PWM_Stop_IT+0x80>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d01b      	beq.n	8005f24 <HAL_TIM_PWM_Stop_IT+0x5c>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d82a      	bhi.n	8005f48 <HAL_TIM_PWM_Stop_IT+0x80>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_TIM_PWM_Stop_IT+0x38>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d009      	beq.n	8005f12 <HAL_TIM_PWM_Stop_IT+0x4a>
 8005efe:	e023      	b.n	8005f48 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	60da      	str	r2, [r3, #12]
      break;
 8005f10:	e01f      	b.n	8005f52 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2104      	movs	r1, #4
 8005f1e:	438a      	bics	r2, r1
 8005f20:	60da      	str	r2, [r3, #12]
      break;
 8005f22:	e016      	b.n	8005f52 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2108      	movs	r1, #8
 8005f30:	438a      	bics	r2, r1
 8005f32:	60da      	str	r2, [r3, #12]
      break;
 8005f34:	e00d      	b.n	8005f52 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2110      	movs	r1, #16
 8005f42:	438a      	bics	r2, r1
 8005f44:	60da      	str	r2, [r3, #12]
      break;
 8005f46:	e004      	b.n	8005f52 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005f48:	230f      	movs	r3, #15
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
      break;
 8005f50:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005f52:	230f      	movs	r3, #15
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d000      	beq.n	8005f5e <HAL_TIM_PWM_Stop_IT+0x96>
 8005f5c:	e063      	b.n	8006026 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	2200      	movs	r2, #0
 8005f66:	0018      	movs	r0, r3
 8005f68:	f001 f996 	bl	8007298 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a30      	ldr	r2, [pc, #192]	; (8006034 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00e      	beq.n	8005f94 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2f      	ldr	r2, [pc, #188]	; (8006038 <HAL_TIM_PWM_Stop_IT+0x170>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2d      	ldr	r2, [pc, #180]	; (800603c <HAL_TIM_PWM_Stop_IT+0x174>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2c      	ldr	r2, [pc, #176]	; (8006040 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d101      	bne.n	8005f98 <HAL_TIM_PWM_Stop_IT+0xd0>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <HAL_TIM_PWM_Stop_IT+0xd2>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d013      	beq.n	8005fc6 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	4a27      	ldr	r2, [pc, #156]	; (8006044 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d10d      	bne.n	8005fc6 <HAL_TIM_PWM_Stop_IT+0xfe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4a25      	ldr	r2, [pc, #148]	; (8006048 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d107      	bne.n	8005fc6 <HAL_TIM_PWM_Stop_IT+0xfe>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4922      	ldr	r1, [pc, #136]	; (800604c <HAL_TIM_PWM_Stop_IT+0x184>)
 8005fc2:	400a      	ands	r2, r1
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d10d      	bne.n	8005fee <HAL_TIM_PWM_Stop_IT+0x126>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_PWM_Stop_IT+0x126>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	438a      	bics	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_PWM_Stop_IT+0x136>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	223e      	movs	r2, #62	; 0x3e
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	5499      	strb	r1, [r3, r2]
 8005ffc:	e013      	b.n	8006026 <HAL_TIM_PWM_Stop_IT+0x15e>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b04      	cmp	r3, #4
 8006002:	d104      	bne.n	800600e <HAL_TIM_PWM_Stop_IT+0x146>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	223f      	movs	r2, #63	; 0x3f
 8006008:	2101      	movs	r1, #1
 800600a:	5499      	strb	r1, [r3, r2]
 800600c:	e00b      	b.n	8006026 <HAL_TIM_PWM_Stop_IT+0x15e>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d104      	bne.n	800601e <HAL_TIM_PWM_Stop_IT+0x156>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2240      	movs	r2, #64	; 0x40
 8006018:	2101      	movs	r1, #1
 800601a:	5499      	strb	r1, [r3, r2]
 800601c:	e003      	b.n	8006026 <HAL_TIM_PWM_Stop_IT+0x15e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2241      	movs	r2, #65	; 0x41
 8006022:	2101      	movs	r1, #1
 8006024:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8006026:	230f      	movs	r3, #15
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	781b      	ldrb	r3, [r3, #0]
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	b004      	add	sp, #16
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800
 8006044:	00001111 	.word	0x00001111
 8006048:	00000444 	.word	0x00000444
 800604c:	ffff7fff 	.word	0xffff7fff

08006050 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e042      	b.n	80060e8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	223d      	movs	r2, #61	; 0x3d
 8006066:	5c9b      	ldrb	r3, [r3, r2]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	223c      	movs	r2, #60	; 0x3c
 8006072:	2100      	movs	r1, #0
 8006074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0018      	movs	r0, r3
 800607a:	f7fe f859 	bl	8004130 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	223d      	movs	r2, #61	; 0x3d
 8006082:	2102      	movs	r1, #2
 8006084:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3304      	adds	r3, #4
 800608e:	0019      	movs	r1, r3
 8006090:	0010      	movs	r0, r2
 8006092:	f000 fcd5 	bl	8006a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2246      	movs	r2, #70	; 0x46
 800609a:	2101      	movs	r1, #1
 800609c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223e      	movs	r2, #62	; 0x3e
 80060a2:	2101      	movs	r1, #1
 80060a4:	5499      	strb	r1, [r3, r2]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	223f      	movs	r2, #63	; 0x3f
 80060aa:	2101      	movs	r1, #1
 80060ac:	5499      	strb	r1, [r3, r2]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	2101      	movs	r1, #1
 80060b4:	5499      	strb	r1, [r3, r2]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2241      	movs	r2, #65	; 0x41
 80060ba:	2101      	movs	r1, #1
 80060bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2242      	movs	r2, #66	; 0x42
 80060c2:	2101      	movs	r1, #1
 80060c4:	5499      	strb	r1, [r3, r2]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2243      	movs	r2, #67	; 0x43
 80060ca:	2101      	movs	r1, #1
 80060cc:	5499      	strb	r1, [r3, r2]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2244      	movs	r2, #68	; 0x44
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2245      	movs	r2, #69	; 0x45
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	223d      	movs	r2, #61	; 0x3d
 80060e2:	2101      	movs	r1, #1
 80060e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b002      	add	sp, #8
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	230f      	movs	r3, #15
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_TIM_IC_Start_IT+0x22>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	223e      	movs	r2, #62	; 0x3e
 800610c:	5c9b      	ldrb	r3, [r3, r2]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e013      	b.n	800613a <HAL_TIM_IC_Start_IT+0x4a>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d104      	bne.n	8006122 <HAL_TIM_IC_Start_IT+0x32>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	223f      	movs	r2, #63	; 0x3f
 800611c:	5c9b      	ldrb	r3, [r3, r2]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	e00b      	b.n	800613a <HAL_TIM_IC_Start_IT+0x4a>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d104      	bne.n	8006132 <HAL_TIM_IC_Start_IT+0x42>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	5c9b      	ldrb	r3, [r3, r2]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e003      	b.n	800613a <HAL_TIM_IC_Start_IT+0x4a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2241      	movs	r2, #65	; 0x41
 8006136:	5c9b      	ldrb	r3, [r3, r2]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	220e      	movs	r2, #14
 800613c:	18ba      	adds	r2, r7, r2
 800613e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <HAL_TIM_IC_Start_IT+0x60>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2242      	movs	r2, #66	; 0x42
 800614a:	5c9b      	ldrb	r3, [r3, r2]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e013      	b.n	8006178 <HAL_TIM_IC_Start_IT+0x88>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d104      	bne.n	8006160 <HAL_TIM_IC_Start_IT+0x70>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2243      	movs	r2, #67	; 0x43
 800615a:	5c9b      	ldrb	r3, [r3, r2]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e00b      	b.n	8006178 <HAL_TIM_IC_Start_IT+0x88>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d104      	bne.n	8006170 <HAL_TIM_IC_Start_IT+0x80>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2244      	movs	r2, #68	; 0x44
 800616a:	5c9b      	ldrb	r3, [r3, r2]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e003      	b.n	8006178 <HAL_TIM_IC_Start_IT+0x88>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2245      	movs	r2, #69	; 0x45
 8006174:	5c9b      	ldrb	r3, [r3, r2]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	210d      	movs	r1, #13
 800617a:	187a      	adds	r2, r7, r1
 800617c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800617e:	230e      	movs	r3, #14
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d103      	bne.n	8006190 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006188:	187b      	adds	r3, r7, r1
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d001      	beq.n	8006194 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0ab      	b.n	80062ec <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d104      	bne.n	80061a4 <HAL_TIM_IC_Start_IT+0xb4>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	223e      	movs	r2, #62	; 0x3e
 800619e:	2102      	movs	r1, #2
 80061a0:	5499      	strb	r1, [r3, r2]
 80061a2:	e013      	b.n	80061cc <HAL_TIM_IC_Start_IT+0xdc>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d104      	bne.n	80061b4 <HAL_TIM_IC_Start_IT+0xc4>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	223f      	movs	r2, #63	; 0x3f
 80061ae:	2102      	movs	r1, #2
 80061b0:	5499      	strb	r1, [r3, r2]
 80061b2:	e00b      	b.n	80061cc <HAL_TIM_IC_Start_IT+0xdc>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d104      	bne.n	80061c4 <HAL_TIM_IC_Start_IT+0xd4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2240      	movs	r2, #64	; 0x40
 80061be:	2102      	movs	r1, #2
 80061c0:	5499      	strb	r1, [r3, r2]
 80061c2:	e003      	b.n	80061cc <HAL_TIM_IC_Start_IT+0xdc>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2241      	movs	r2, #65	; 0x41
 80061c8:	2102      	movs	r1, #2
 80061ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_TIM_IC_Start_IT+0xec>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2242      	movs	r2, #66	; 0x42
 80061d6:	2102      	movs	r1, #2
 80061d8:	5499      	strb	r1, [r3, r2]
 80061da:	e013      	b.n	8006204 <HAL_TIM_IC_Start_IT+0x114>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d104      	bne.n	80061ec <HAL_TIM_IC_Start_IT+0xfc>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2243      	movs	r2, #67	; 0x43
 80061e6:	2102      	movs	r1, #2
 80061e8:	5499      	strb	r1, [r3, r2]
 80061ea:	e00b      	b.n	8006204 <HAL_TIM_IC_Start_IT+0x114>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d104      	bne.n	80061fc <HAL_TIM_IC_Start_IT+0x10c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2244      	movs	r2, #68	; 0x44
 80061f6:	2102      	movs	r1, #2
 80061f8:	5499      	strb	r1, [r3, r2]
 80061fa:	e003      	b.n	8006204 <HAL_TIM_IC_Start_IT+0x114>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2245      	movs	r2, #69	; 0x45
 8006200:	2102      	movs	r1, #2
 8006202:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d02a      	beq.n	8006260 <HAL_TIM_IC_Start_IT+0x170>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b0c      	cmp	r3, #12
 800620e:	d830      	bhi.n	8006272 <HAL_TIM_IC_Start_IT+0x182>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b08      	cmp	r3, #8
 8006214:	d01b      	beq.n	800624e <HAL_TIM_IC_Start_IT+0x15e>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d82a      	bhi.n	8006272 <HAL_TIM_IC_Start_IT+0x182>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IC_Start_IT+0x13a>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d009      	beq.n	800623c <HAL_TIM_IC_Start_IT+0x14c>
 8006228:	e023      	b.n	8006272 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2102      	movs	r1, #2
 8006236:	430a      	orrs	r2, r1
 8006238:	60da      	str	r2, [r3, #12]
      break;
 800623a:	e01f      	b.n	800627c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2104      	movs	r1, #4
 8006248:	430a      	orrs	r2, r1
 800624a:	60da      	str	r2, [r3, #12]
      break;
 800624c:	e016      	b.n	800627c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2108      	movs	r1, #8
 800625a:	430a      	orrs	r2, r1
 800625c:	60da      	str	r2, [r3, #12]
      break;
 800625e:	e00d      	b.n	800627c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2110      	movs	r1, #16
 800626c:	430a      	orrs	r2, r1
 800626e:	60da      	str	r2, [r3, #12]
      break;
 8006270:	e004      	b.n	800627c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
      break;
 800627a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d12f      	bne.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	2201      	movs	r2, #1
 800628e:	0018      	movs	r0, r3
 8006290:	f001 f802 	bl	8007298 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <HAL_TIM_IC_Start_IT+0x204>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIM_IC_Start_IT+0x1c2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <HAL_TIM_IC_Start_IT+0x208>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIM_IC_Start_IT+0x1c2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <HAL_TIM_IC_Start_IT+0x20c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d111      	bne.n	80062d6 <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2207      	movs	r2, #7
 80062ba:	4013      	ands	r3, r2
 80062bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d010      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2101      	movs	r1, #1
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	e007      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2101      	movs	r1, #1
 80062e2:	430a      	orrs	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80062e6:	230f      	movs	r3, #15
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	781b      	ldrb	r3, [r3, #0]
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b004      	add	sp, #16
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40014000 	.word	0x40014000

08006300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2202      	movs	r2, #2
 8006310:	4013      	ands	r3, r2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d124      	bne.n	8006360 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2202      	movs	r2, #2
 800631e:	4013      	ands	r3, r2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d11d      	bne.n	8006360 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2203      	movs	r2, #3
 800632a:	4252      	negs	r2, r2
 800632c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	2203      	movs	r2, #3
 800633c:	4013      	ands	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0018      	movs	r0, r3
 8006344:	f7fd fc8a 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 8006348:	e007      	b.n	800635a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0018      	movs	r0, r3
 800634e:	f000 fb67 	bl	8006a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	0018      	movs	r0, r3
 8006356:	f7fd fc3f 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2204      	movs	r2, #4
 8006368:	4013      	ands	r3, r2
 800636a:	2b04      	cmp	r3, #4
 800636c:	d125      	bne.n	80063ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2204      	movs	r2, #4
 8006376:	4013      	ands	r3, r2
 8006378:	2b04      	cmp	r3, #4
 800637a:	d11e      	bne.n	80063ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2205      	movs	r2, #5
 8006382:	4252      	negs	r2, r2
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	23c0      	movs	r3, #192	; 0xc0
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4013      	ands	r3, r2
 8006398:	d004      	beq.n	80063a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0018      	movs	r0, r3
 800639e:	f7fd fc5d 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 80063a2:	e007      	b.n	80063b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	0018      	movs	r0, r3
 80063a8:	f000 fb3a 	bl	8006a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7fd fc12 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2208      	movs	r2, #8
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d124      	bne.n	8006412 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2208      	movs	r2, #8
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d11d      	bne.n	8006412 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2209      	movs	r2, #9
 80063dc:	4252      	negs	r2, r2
 80063de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2204      	movs	r2, #4
 80063e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	2203      	movs	r2, #3
 80063ee:	4013      	ands	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7fd fc31 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 80063fa:	e007      	b.n	800640c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fb0e 	bl	8006a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	0018      	movs	r0, r3
 8006408:	f7fd fbe6 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2210      	movs	r2, #16
 800641a:	4013      	ands	r3, r2
 800641c:	2b10      	cmp	r3, #16
 800641e:	d125      	bne.n	800646c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2210      	movs	r2, #16
 8006428:	4013      	ands	r3, r2
 800642a:	2b10      	cmp	r3, #16
 800642c:	d11e      	bne.n	800646c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2211      	movs	r2, #17
 8006434:	4252      	negs	r2, r2
 8006436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2208      	movs	r2, #8
 800643c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	23c0      	movs	r3, #192	; 0xc0
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4013      	ands	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	0018      	movs	r0, r3
 8006450:	f7fd fc04 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 8006454:	e007      	b.n	8006466 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0018      	movs	r0, r3
 800645a:	f000 fae1 	bl	8006a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0018      	movs	r0, r3
 8006462:	f7fd fbb9 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2201      	movs	r2, #1
 8006474:	4013      	ands	r3, r2
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10f      	bne.n	800649a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	4013      	ands	r3, r2
 8006484:	2b01      	cmp	r3, #1
 8006486:	d108      	bne.n	800649a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2202      	movs	r2, #2
 800648e:	4252      	negs	r2, r2
 8006490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 fabb 	bl	8006a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d10f      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d108      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2281      	movs	r2, #129	; 0x81
 80064bc:	4252      	negs	r2, r2
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	0018      	movs	r0, r3
 80064c4:	f000 ffca 	bl	800745c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2240      	movs	r2, #64	; 0x40
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d10f      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2240      	movs	r2, #64	; 0x40
 80064de:	4013      	ands	r3, r2
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d108      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2241      	movs	r2, #65	; 0x41
 80064ea:	4252      	negs	r2, r2
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fa9d 	bl	8006a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2220      	movs	r2, #32
 80064fe:	4013      	ands	r3, r2
 8006500:	2b20      	cmp	r3, #32
 8006502:	d10f      	bne.n	8006524 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	4013      	ands	r3, r2
 800650e:	2b20      	cmp	r3, #32
 8006510:	d108      	bne.n	8006524 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2221      	movs	r2, #33	; 0x21
 8006518:	4252      	negs	r2, r2
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0018      	movs	r0, r3
 8006520:	f000 ff94 	bl	800744c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2317      	movs	r3, #23
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	223c      	movs	r2, #60	; 0x3c
 8006544:	5c9b      	ldrb	r3, [r3, r2]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_TIM_IC_ConfigChannel+0x22>
 800654a:	2302      	movs	r3, #2
 800654c:	e08c      	b.n	8006668 <HAL_TIM_IC_ConfigChannel+0x13c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	223c      	movs	r2, #60	; 0x3c
 8006552:	2101      	movs	r1, #1
 8006554:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11b      	bne.n	8006594 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f000 fcda 	bl	8006f24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	210c      	movs	r1, #12
 800657c:	438a      	bics	r2, r1
 800657e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	619a      	str	r2, [r3, #24]
 8006592:	e062      	b.n	800665a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d11c      	bne.n	80065d4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6819      	ldr	r1, [r3, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f000 fd41 	bl	8007030 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699a      	ldr	r2, [r3, #24]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	492d      	ldr	r1, [pc, #180]	; (8006670 <HAL_TIM_IC_ConfigChannel+0x144>)
 80065ba:	400a      	ands	r2, r1
 80065bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6999      	ldr	r1, [r3, #24]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	021a      	lsls	r2, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	619a      	str	r2, [r3, #24]
 80065d2:	e042      	b.n	800665a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d11b      	bne.n	8006612 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6819      	ldr	r1, [r3, #0]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f000 fd95 	bl	8007118 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	210c      	movs	r1, #12
 80065fa:	438a      	bics	r2, r1
 80065fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69d9      	ldr	r1, [r3, #28]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	61da      	str	r2, [r3, #28]
 8006610:	e023      	b.n	800665a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b0c      	cmp	r3, #12
 8006616:	d11c      	bne.n	8006652 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f000 fdb6 	bl	8007198 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	490e      	ldr	r1, [pc, #56]	; (8006670 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006638:	400a      	ands	r2, r1
 800663a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69d9      	ldr	r1, [r3, #28]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	61da      	str	r2, [r3, #28]
 8006650:	e003      	b.n	800665a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8006652:	2317      	movs	r3, #23
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	223c      	movs	r2, #60	; 0x3c
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]

  return status;
 8006662:	2317      	movs	r3, #23
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	781b      	ldrb	r3, [r3, #0]
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b006      	add	sp, #24
 800666e:	bd80      	pop	{r7, pc}
 8006670:	fffff3ff 	.word	0xfffff3ff

08006674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006680:	2317      	movs	r3, #23
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	223c      	movs	r2, #60	; 0x3c
 800668c:	5c9b      	ldrb	r3, [r3, r2]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006692:	2302      	movs	r3, #2
 8006694:	e0ad      	b.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	223c      	movs	r2, #60	; 0x3c
 800669a:	2101      	movs	r1, #1
 800669c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	d100      	bne.n	80066a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80066a4:	e076      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x120>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d900      	bls.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x3a>
 80066ac:	e095      	b.n	80067da <HAL_TIM_PWM_ConfigChannel+0x166>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d04e      	beq.n	8006752 <HAL_TIM_PWM_ConfigChannel+0xde>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d900      	bls.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x48>
 80066ba:	e08e      	b.n	80067da <HAL_TIM_PWM_ConfigChannel+0x166>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x56>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d021      	beq.n	800670c <HAL_TIM_PWM_ConfigChannel+0x98>
 80066c8:	e087      	b.n	80067da <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	0011      	movs	r1, r2
 80066d2:	0018      	movs	r0, r3
 80066d4:	f000 fa2a 	bl	8006b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2108      	movs	r1, #8
 80066e4:	430a      	orrs	r2, r1
 80066e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2104      	movs	r1, #4
 80066f4:	438a      	bics	r2, r1
 80066f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6999      	ldr	r1, [r3, #24]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	619a      	str	r2, [r3, #24]
      break;
 800670a:	e06b      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	0011      	movs	r1, r2
 8006714:	0018      	movs	r0, r3
 8006716:	f000 fa91 	bl	8006c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	0109      	lsls	r1, r1, #4
 8006728:	430a      	orrs	r2, r1
 800672a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4931      	ldr	r1, [pc, #196]	; (80067fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006738:	400a      	ands	r2, r1
 800673a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6999      	ldr	r1, [r3, #24]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	619a      	str	r2, [r3, #24]
      break;
 8006750:	e048      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	0011      	movs	r1, r2
 800675a:	0018      	movs	r0, r3
 800675c:	f000 faf2 	bl	8006d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2108      	movs	r1, #8
 800676c:	430a      	orrs	r2, r1
 800676e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69da      	ldr	r2, [r3, #28]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2104      	movs	r1, #4
 800677c:	438a      	bics	r2, r1
 800677e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69d9      	ldr	r1, [r3, #28]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	61da      	str	r2, [r3, #28]
      break;
 8006792:	e027      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	0011      	movs	r1, r2
 800679c:	0018      	movs	r0, r3
 800679e:	f000 fb57 	bl	8006e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	0109      	lsls	r1, r1, #4
 80067b0:	430a      	orrs	r2, r1
 80067b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	490f      	ldr	r1, [pc, #60]	; (80067fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80067c0:	400a      	ands	r2, r1
 80067c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69d9      	ldr	r1, [r3, #28]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	61da      	str	r2, [r3, #28]
      break;
 80067d8:	e004      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80067da:	2317      	movs	r3, #23
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
      break;
 80067e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	223c      	movs	r2, #60	; 0x3c
 80067e8:	2100      	movs	r1, #0
 80067ea:	5499      	strb	r1, [r3, r2]

  return status;
 80067ec:	2317      	movs	r3, #23
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	781b      	ldrb	r3, [r3, #0]
}
 80067f2:	0018      	movs	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b006      	add	sp, #24
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	fffffbff 	.word	0xfffffbff

08006800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	230f      	movs	r3, #15
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	223c      	movs	r2, #60	; 0x3c
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIM_ConfigClockSource+0x20>
 800681c:	2302      	movs	r3, #2
 800681e:	e0bc      	b.n	800699a <HAL_TIM_ConfigClockSource+0x19a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	223c      	movs	r2, #60	; 0x3c
 8006824:	2101      	movs	r1, #1
 8006826:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	223d      	movs	r2, #61	; 0x3d
 800682c:	2102      	movs	r1, #2
 800682e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2277      	movs	r2, #119	; 0x77
 800683c:	4393      	bics	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4a58      	ldr	r2, [pc, #352]	; (80069a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006844:	4013      	ands	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	0192      	lsls	r2, r2, #6
 8006858:	4293      	cmp	r3, r2
 800685a:	d040      	beq.n	80068de <HAL_TIM_ConfigClockSource+0xde>
 800685c:	2280      	movs	r2, #128	; 0x80
 800685e:	0192      	lsls	r2, r2, #6
 8006860:	4293      	cmp	r3, r2
 8006862:	d900      	bls.n	8006866 <HAL_TIM_ConfigClockSource+0x66>
 8006864:	e088      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 8006866:	2280      	movs	r2, #128	; 0x80
 8006868:	0152      	lsls	r2, r2, #5
 800686a:	4293      	cmp	r3, r2
 800686c:	d100      	bne.n	8006870 <HAL_TIM_ConfigClockSource+0x70>
 800686e:	e088      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x182>
 8006870:	2280      	movs	r2, #128	; 0x80
 8006872:	0152      	lsls	r2, r2, #5
 8006874:	4293      	cmp	r3, r2
 8006876:	d900      	bls.n	800687a <HAL_TIM_ConfigClockSource+0x7a>
 8006878:	e07e      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 800687a:	2b70      	cmp	r3, #112	; 0x70
 800687c:	d018      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0xb0>
 800687e:	d900      	bls.n	8006882 <HAL_TIM_ConfigClockSource+0x82>
 8006880:	e07a      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 8006882:	2b60      	cmp	r3, #96	; 0x60
 8006884:	d04f      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0x126>
 8006886:	d900      	bls.n	800688a <HAL_TIM_ConfigClockSource+0x8a>
 8006888:	e076      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 800688a:	2b50      	cmp	r3, #80	; 0x50
 800688c:	d03b      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x106>
 800688e:	d900      	bls.n	8006892 <HAL_TIM_ConfigClockSource+0x92>
 8006890:	e072      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d057      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x146>
 8006896:	d900      	bls.n	800689a <HAL_TIM_ConfigClockSource+0x9a>
 8006898:	e06e      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 800689a:	2b30      	cmp	r3, #48	; 0x30
 800689c:	d063      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x166>
 800689e:	d86b      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d060      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x166>
 80068a4:	d868      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d05d      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x166>
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d05b      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x166>
 80068ae:	e063      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6899      	ldr	r1, [r3, #8]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f000 fcca 	bl	8007258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2277      	movs	r2, #119	; 0x77
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	609a      	str	r2, [r3, #8]
      break;
 80068dc:	e052      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6899      	ldr	r1, [r3, #8]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f000 fcb3 	bl	8007258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2180      	movs	r1, #128	; 0x80
 80068fe:	01c9      	lsls	r1, r1, #7
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
      break;
 8006904:	e03e      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6859      	ldr	r1, [r3, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	001a      	movs	r2, r3
 8006914:	f000 fb5e 	bl	8006fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2150      	movs	r1, #80	; 0x50
 800691e:	0018      	movs	r0, r3
 8006920:	f000 fc80 	bl	8007224 <TIM_ITRx_SetConfig>
      break;
 8006924:	e02e      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	001a      	movs	r2, r3
 8006934:	f000 fbbe 	bl	80070b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2160      	movs	r1, #96	; 0x60
 800693e:	0018      	movs	r0, r3
 8006940:	f000 fc70 	bl	8007224 <TIM_ITRx_SetConfig>
      break;
 8006944:	e01e      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	001a      	movs	r2, r3
 8006954:	f000 fb3e 	bl	8006fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2140      	movs	r1, #64	; 0x40
 800695e:	0018      	movs	r0, r3
 8006960:	f000 fc60 	bl	8007224 <TIM_ITRx_SetConfig>
      break;
 8006964:	e00e      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	0019      	movs	r1, r3
 8006970:	0010      	movs	r0, r2
 8006972:	f000 fc57 	bl	8007224 <TIM_ITRx_SetConfig>
      break;
 8006976:	e005      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006978:	230f      	movs	r3, #15
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	e000      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006982:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	223d      	movs	r2, #61	; 0x3d
 8006988:	2101      	movs	r1, #1
 800698a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	223c      	movs	r2, #60	; 0x3c
 8006990:	2100      	movs	r1, #0
 8006992:	5499      	strb	r1, [r3, r2]

  return status;
 8006994:	230f      	movs	r3, #15
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	781b      	ldrb	r3, [r3, #0]
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b004      	add	sp, #16
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	ffff00ff 	.word	0xffff00ff

080069a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b0c      	cmp	r3, #12
 80069ba:	d01e      	beq.n	80069fa <HAL_TIM_ReadCapturedValue+0x52>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b0c      	cmp	r3, #12
 80069c0:	d820      	bhi.n	8006a04 <HAL_TIM_ReadCapturedValue+0x5c>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d013      	beq.n	80069f0 <HAL_TIM_ReadCapturedValue+0x48>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d81a      	bhi.n	8006a04 <HAL_TIM_ReadCapturedValue+0x5c>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_TIM_ReadCapturedValue+0x34>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d005      	beq.n	80069e6 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80069da:	e013      	b.n	8006a04 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	60fb      	str	r3, [r7, #12]
      break;
 80069e4:	e00f      	b.n	8006a06 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	60fb      	str	r3, [r7, #12]
      break;
 80069ee:	e00a      	b.n	8006a06 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	60fb      	str	r3, [r7, #12]
      break;
 80069f8:	e005      	b.n	8006a06 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	60fb      	str	r3, [r7, #12]
      break;
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8006a04:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	0018      	movs	r0, r3
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b004      	add	sp, #16
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a18:	46c0      	nop			; (mov r8, r8)
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b002      	add	sp, #8
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b002      	add	sp, #8
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2f      	ldr	r2, [pc, #188]	; (8006b10 <TIM_Base_SetConfig+0xd0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_Base_SetConfig+0x20>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2e      	ldr	r2, [pc, #184]	; (8006b14 <TIM_Base_SetConfig+0xd4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2270      	movs	r2, #112	; 0x70
 8006a64:	4393      	bics	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <TIM_Base_SetConfig+0xd0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <TIM_Base_SetConfig+0x62>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a25      	ldr	r2, [pc, #148]	; (8006b14 <TIM_Base_SetConfig+0xd4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00f      	beq.n	8006aa2 <TIM_Base_SetConfig+0x62>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a24      	ldr	r2, [pc, #144]	; (8006b18 <TIM_Base_SetConfig+0xd8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00b      	beq.n	8006aa2 <TIM_Base_SetConfig+0x62>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a23      	ldr	r2, [pc, #140]	; (8006b1c <TIM_Base_SetConfig+0xdc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d007      	beq.n	8006aa2 <TIM_Base_SetConfig+0x62>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a22      	ldr	r2, [pc, #136]	; (8006b20 <TIM_Base_SetConfig+0xe0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_Base_SetConfig+0x62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a21      	ldr	r2, [pc, #132]	; (8006b24 <TIM_Base_SetConfig+0xe4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <TIM_Base_SetConfig+0xe8>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	4393      	bics	r3, r2
 8006aba:	001a      	movs	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <TIM_Base_SetConfig+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_Base_SetConfig+0xba>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a0d      	ldr	r2, [pc, #52]	; (8006b1c <TIM_Base_SetConfig+0xdc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_Base_SetConfig+0xba>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a0c      	ldr	r2, [pc, #48]	; (8006b20 <TIM_Base_SetConfig+0xe0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_Base_SetConfig+0xba>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a0b      	ldr	r2, [pc, #44]	; (8006b24 <TIM_Base_SetConfig+0xe4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d103      	bne.n	8006b02 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	615a      	str	r2, [r3, #20]
}
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b004      	add	sp, #16
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40002000 	.word	0x40002000
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800
 8006b28:	fffffcff 	.word	0xfffffcff

08006b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4393      	bics	r3, r2
 8006b3e:	001a      	movs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2270      	movs	r2, #112	; 0x70
 8006b5a:	4393      	bics	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4393      	bics	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2202      	movs	r2, #2
 8006b74:	4393      	bics	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <TIM_OC1_SetConfig+0xf8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_OC1_SetConfig+0x76>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <TIM_OC1_SetConfig+0xfc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_OC1_SetConfig+0x76>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <TIM_OC1_SetConfig+0x100>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC1_SetConfig+0x76>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <TIM_OC1_SetConfig+0x104>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d10c      	bne.n	8006bbc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	4393      	bics	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	4393      	bics	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <TIM_OC1_SetConfig+0xf8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <TIM_OC1_SetConfig+0xb0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <TIM_OC1_SetConfig+0xfc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_OC1_SetConfig+0xb0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <TIM_OC1_SetConfig+0x100>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC1_SetConfig+0xb0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <TIM_OC1_SetConfig+0x104>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d111      	bne.n	8006c00 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <TIM_OC1_SetConfig+0x108>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <TIM_OC1_SetConfig+0x10c>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b006      	add	sp, #24
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40014000 	.word	0x40014000
 8006c2c:	40014400 	.word	0x40014400
 8006c30:	40014800 	.word	0x40014800
 8006c34:	fffffeff 	.word	0xfffffeff
 8006c38:	fffffdff 	.word	0xfffffdff

08006c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	4393      	bics	r3, r2
 8006c4e:	001a      	movs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a2e      	ldr	r2, [pc, #184]	; (8006d24 <TIM_OC2_SetConfig+0xe8>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a2d      	ldr	r2, [pc, #180]	; (8006d28 <TIM_OC2_SetConfig+0xec>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2220      	movs	r2, #32
 8006c86:	4393      	bics	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <TIM_OC2_SetConfig+0xf0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d10d      	bne.n	8006cba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2280      	movs	r2, #128	; 0x80
 8006ca2:	4393      	bics	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	4393      	bics	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <TIM_OC2_SetConfig+0xf0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_OC2_SetConfig+0x9e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1a      	ldr	r2, [pc, #104]	; (8006d30 <TIM_OC2_SetConfig+0xf4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_OC2_SetConfig+0x9e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <TIM_OC2_SetConfig+0xf8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC2_SetConfig+0x9e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <TIM_OC2_SetConfig+0xfc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d113      	bne.n	8006d02 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	4a17      	ldr	r2, [pc, #92]	; (8006d3c <TIM_OC2_SetConfig+0x100>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <TIM_OC2_SetConfig+0x104>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	b006      	add	sp, #24
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	ffff8fff 	.word	0xffff8fff
 8006d28:	fffffcff 	.word	0xfffffcff
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800
 8006d3c:	fffffbff 	.word	0xfffffbff
 8006d40:	fffff7ff 	.word	0xfffff7ff

08006d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	4a35      	ldr	r2, [pc, #212]	; (8006e28 <TIM_OC3_SetConfig+0xe4>)
 8006d54:	401a      	ands	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2270      	movs	r2, #112	; 0x70
 8006d70:	4393      	bics	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2203      	movs	r2, #3
 8006d78:	4393      	bics	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_OC3_SetConfig+0xe8>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <TIM_OC3_SetConfig+0xec>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d10d      	bne.n	8006dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <TIM_OC3_SetConfig+0xf0>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <TIM_OC3_SetConfig+0xf4>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <TIM_OC3_SetConfig+0xec>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00b      	beq.n	8006dde <TIM_OC3_SetConfig+0x9a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_OC3_SetConfig+0xf8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d007      	beq.n	8006dde <TIM_OC3_SetConfig+0x9a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <TIM_OC3_SetConfig+0xfc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_OC3_SetConfig+0x9a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a1a      	ldr	r2, [pc, #104]	; (8006e44 <TIM_OC3_SetConfig+0x100>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d113      	bne.n	8006e06 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <TIM_OC3_SetConfig+0x104>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4a18      	ldr	r2, [pc, #96]	; (8006e4c <TIM_OC3_SetConfig+0x108>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	621a      	str	r2, [r3, #32]
}
 8006e20:	46c0      	nop			; (mov r8, r8)
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b006      	add	sp, #24
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	fffffeff 	.word	0xfffffeff
 8006e2c:	fffffdff 	.word	0xfffffdff
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	fffff7ff 	.word	0xfffff7ff
 8006e38:	fffffbff 	.word	0xfffffbff
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40014400 	.word	0x40014400
 8006e44:	40014800 	.word	0x40014800
 8006e48:	ffffefff 	.word	0xffffefff
 8006e4c:	ffffdfff 	.word	0xffffdfff

08006e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <TIM_OC4_SetConfig+0xb0>)
 8006e60:	401a      	ands	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a22      	ldr	r2, [pc, #136]	; (8006f04 <TIM_OC4_SetConfig+0xb4>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a21      	ldr	r2, [pc, #132]	; (8006f08 <TIM_OC4_SetConfig+0xb8>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <TIM_OC4_SetConfig+0xbc>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <TIM_OC4_SetConfig+0xc0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00b      	beq.n	8006ec8 <TIM_OC4_SetConfig+0x78>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <TIM_OC4_SetConfig+0xc4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d007      	beq.n	8006ec8 <TIM_OC4_SetConfig+0x78>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <TIM_OC4_SetConfig+0xc8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_OC4_SetConfig+0x78>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <TIM_OC4_SetConfig+0xcc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d109      	bne.n	8006edc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <TIM_OC4_SetConfig+0xd0>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	019b      	lsls	r3, r3, #6
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b006      	add	sp, #24
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	ffffefff 	.word	0xffffefff
 8006f04:	ffff8fff 	.word	0xffff8fff
 8006f08:	fffffcff 	.word	0xfffffcff
 8006f0c:	ffffdfff 	.word	0xffffdfff
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800
 8006f20:	ffffbfff 	.word	0xffffbfff

08006f24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	2201      	movs	r2, #1
 8006f38:	4393      	bics	r3, r2
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <TIM_TI1_SetConfig+0xa4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_TI1_SetConfig+0x40>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <TIM_TI1_SetConfig+0xa8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_TI1_SetConfig+0x40>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <TIM_TI1_SetConfig+0xac>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d101      	bne.n	8006f68 <TIM_TI1_SetConfig+0x44>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <TIM_TI1_SetConfig+0x46>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2203      	movs	r2, #3
 8006f72:	4393      	bics	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e003      	b.n	8006f88 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2201      	movs	r2, #1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	22f0      	movs	r2, #240	; 0xf0
 8006f8c:	4393      	bics	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	22ff      	movs	r2, #255	; 0xff
 8006f96:	4013      	ands	r3, r2
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	4393      	bics	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	220a      	movs	r2, #10
 8006faa:	4013      	ands	r3, r2
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b006      	add	sp, #24
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40014000 	.word	0x40014000

08006fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	2201      	movs	r2, #1
 8006fec:	4393      	bics	r3, r2
 8006fee:	001a      	movs	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	22f0      	movs	r2, #240	; 0xf0
 8006ffe:	4393      	bics	r3, r2
 8007000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	220a      	movs	r2, #10
 8007010:	4393      	bics	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b006      	add	sp, #24
 800702e:	bd80      	pop	{r7, pc}

08007030 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	2210      	movs	r2, #16
 8007044:	4393      	bics	r3, r2
 8007046:	001a      	movs	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4a14      	ldr	r2, [pc, #80]	; (80070ac <TIM_TI2_SetConfig+0x7c>)
 800705c:	4013      	ands	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4a10      	ldr	r2, [pc, #64]	; (80070b0 <TIM_TI2_SetConfig+0x80>)
 800706e:	4013      	ands	r3, r2
 8007070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	031b      	lsls	r3, r3, #12
 8007076:	041b      	lsls	r3, r3, #16
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	22a0      	movs	r2, #160	; 0xa0
 8007084:	4393      	bics	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	22a0      	movs	r2, #160	; 0xa0
 800708e:	4013      	ands	r3, r2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b006      	add	sp, #24
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	fffffcff 	.word	0xfffffcff
 80070b0:	ffff0fff 	.word	0xffff0fff

080070b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	2210      	movs	r2, #16
 80070c6:	4393      	bics	r3, r2
 80070c8:	001a      	movs	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <TIM_TI2_ConfigInputStage+0x60>)
 80070de:	4013      	ands	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	031b      	lsls	r3, r3, #12
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	22a0      	movs	r2, #160	; 0xa0
 80070f0:	4393      	bics	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	b006      	add	sp, #24
 8007110:	bd80      	pop	{r7, pc}
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	ffff0fff 	.word	0xffff0fff

08007118 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	4a19      	ldr	r2, [pc, #100]	; (8007190 <TIM_TI3_SetConfig+0x78>)
 800712c:	401a      	ands	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2203      	movs	r2, #3
 8007142:	4393      	bics	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	22f0      	movs	r2, #240	; 0xf0
 8007152:	4393      	bics	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	22ff      	movs	r2, #255	; 0xff
 800715c:	4013      	ands	r3, r2
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <TIM_TI3_SetConfig+0x7c>)
 8007168:	4013      	ands	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	021a      	lsls	r2, r3, #8
 8007170:	23a0      	movs	r3, #160	; 0xa0
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	4013      	ands	r3, r2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	621a      	str	r2, [r3, #32]
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b006      	add	sp, #24
 800718e:	bd80      	pop	{r7, pc}
 8007190:	fffffeff 	.word	0xfffffeff
 8007194:	fffff5ff 	.word	0xfffff5ff

08007198 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	4a1a      	ldr	r2, [pc, #104]	; (8007214 <TIM_TI4_SetConfig+0x7c>)
 80071ac:	401a      	ands	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	4a15      	ldr	r2, [pc, #84]	; (8007218 <TIM_TI4_SetConfig+0x80>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4a12      	ldr	r2, [pc, #72]	; (800721c <TIM_TI4_SetConfig+0x84>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	031b      	lsls	r3, r3, #12
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	0c1b      	lsrs	r3, r3, #16
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <TIM_TI4_SetConfig+0x88>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	031a      	lsls	r2, r3, #12
 80071f2:	23a0      	movs	r3, #160	; 0xa0
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	4013      	ands	r3, r2
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b006      	add	sp, #24
 8007210:	bd80      	pop	{r7, pc}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	ffffefff 	.word	0xffffefff
 8007218:	fffffcff 	.word	0xfffffcff
 800721c:	ffff0fff 	.word	0xffff0fff
 8007220:	ffff5fff 	.word	0xffff5fff

08007224 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2270      	movs	r2, #112	; 0x70
 8007238:	4393      	bics	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	2207      	movs	r2, #7
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	609a      	str	r2, [r3, #8]
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b004      	add	sp, #16
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <TIM_ETR_SetConfig+0x3c>)
 8007270:	4013      	ands	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b006      	add	sp, #24
 8007292:	bd80      	pop	{r7, pc}
 8007294:	ffff00ff 	.word	0xffff00ff

08007298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	221f      	movs	r2, #31
 80072a8:	4013      	ands	r3, r2
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	0013      	movs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	43d2      	mvns	r2, r2
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	211f      	movs	r1, #31
 80072c8:	400b      	ands	r3, r1
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4099      	lsls	r1, r3
 80072ce:	000b      	movs	r3, r1
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	46bd      	mov	sp, r7
 80072da:	b006      	add	sp, #24
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	223c      	movs	r2, #60	; 0x3c
 80072ee:	5c9b      	ldrb	r3, [r3, r2]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e041      	b.n	800737c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	223c      	movs	r2, #60	; 0x3c
 80072fc:	2101      	movs	r1, #1
 80072fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	223d      	movs	r2, #61	; 0x3d
 8007304:	2102      	movs	r1, #2
 8007306:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2270      	movs	r2, #112	; 0x70
 800731c:	4393      	bics	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a13      	ldr	r2, [pc, #76]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d009      	beq.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a11      	ldr	r2, [pc, #68]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a10      	ldr	r2, [pc, #64]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10c      	bne.n	800736a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2280      	movs	r2, #128	; 0x80
 8007354:	4393      	bics	r3, r2
 8007356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	4313      	orrs	r3, r2
 8007360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	223d      	movs	r2, #61	; 0x3d
 800736e:	2101      	movs	r1, #1
 8007370:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	223c      	movs	r2, #60	; 0x3c
 8007376:	2100      	movs	r1, #0
 8007378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	0018      	movs	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	b004      	add	sp, #16
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40000400 	.word	0x40000400
 800738c:	40014000 	.word	0x40014000

08007390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	223c      	movs	r2, #60	; 0x3c
 80073a2:	5c9b      	ldrb	r3, [r3, r2]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e03e      	b.n	800742a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	223c      	movs	r2, #60	; 0x3c
 80073b0:	2101      	movs	r1, #1
 80073b2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22ff      	movs	r2, #255	; 0xff
 80073b8:	4393      	bics	r3, r2
 80073ba:	001a      	movs	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80073c8:	401a      	ands	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80073d6:	401a      	ands	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a16      	ldr	r2, [pc, #88]	; (800743c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80073e4:	401a      	ands	r2, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a13      	ldr	r2, [pc, #76]	; (8007440 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80073f2:	401a      	ands	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4a11      	ldr	r2, [pc, #68]	; (8007444 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007400:	401a      	ands	r2, r3
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a0e      	ldr	r2, [pc, #56]	; (8007448 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800740e:	401a      	ands	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	223c      	movs	r2, #60	; 0x3c
 8007424:	2100      	movs	r1, #0
 8007426:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	0018      	movs	r0, r3
 800742c:	46bd      	mov	sp, r7
 800742e:	b004      	add	sp, #16
 8007430:	bd80      	pop	{r7, pc}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	fffffcff 	.word	0xfffffcff
 8007438:	fffffbff 	.word	0xfffffbff
 800743c:	fffff7ff 	.word	0xfffff7ff
 8007440:	ffffefff 	.word	0xffffefff
 8007444:	ffffdfff 	.word	0xffffdfff
 8007448:	ffffbfff 	.word	0xffffbfff

0800744c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e044      	b.n	8007508 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2274      	movs	r2, #116	; 0x74
 800748a:	2100      	movs	r1, #0
 800748c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	0018      	movs	r0, r3
 8007492:	f7fc ff35 	bl	8004300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2224      	movs	r2, #36	; 0x24
 800749a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2101      	movs	r1, #1
 80074a8:	438a      	bics	r2, r1
 80074aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	0018      	movs	r0, r3
 80074b0:	f000 fcc2 	bl	8007e38 <UART_SetConfig>
 80074b4:	0003      	movs	r3, r0
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e024      	b.n	8007508 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	0018      	movs	r0, r3
 80074ca:	f000 fe0d 	bl	80080e8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	490d      	ldr	r1, [pc, #52]	; (8007510 <HAL_UART_Init+0xa4>)
 80074da:	400a      	ands	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2108      	movs	r1, #8
 80074ea:	438a      	bics	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2101      	movs	r1, #1
 80074fa:	430a      	orrs	r2, r1
 80074fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	0018      	movs	r0, r3
 8007502:	f000 fea5 	bl	8008250 <UART_CheckIdleState>
 8007506:	0003      	movs	r3, r0
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b002      	add	sp, #8
 800750e:	bd80      	pop	{r7, pc}
 8007510:	fffff7ff 	.word	0xfffff7ff

08007514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	1dbb      	adds	r3, r7, #6
 8007522:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007528:	2b20      	cmp	r3, #32
 800752a:	d000      	beq.n	800752e <HAL_UART_Transmit+0x1a>
 800752c:	e096      	b.n	800765c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_UART_Transmit+0x28>
 8007534:	1dbb      	adds	r3, r7, #6
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e08e      	b.n	800765e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	2380      	movs	r3, #128	; 0x80
 8007546:	015b      	lsls	r3, r3, #5
 8007548:	429a      	cmp	r2, r3
 800754a:	d109      	bne.n	8007560 <HAL_UART_Transmit+0x4c>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d105      	bne.n	8007560 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2201      	movs	r2, #1
 8007558:	4013      	ands	r3, r2
 800755a:	d001      	beq.n	8007560 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e07e      	b.n	800765e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2274      	movs	r2, #116	; 0x74
 8007564:	5c9b      	ldrb	r3, [r3, r2]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_UART_Transmit+0x5a>
 800756a:	2302      	movs	r3, #2
 800756c:	e077      	b.n	800765e <HAL_UART_Transmit+0x14a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2274      	movs	r2, #116	; 0x74
 8007572:	2101      	movs	r1, #1
 8007574:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2280      	movs	r2, #128	; 0x80
 800757a:	2100      	movs	r1, #0
 800757c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2221      	movs	r2, #33	; 0x21
 8007582:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007584:	f7fd f90e 	bl	80047a4 <HAL_GetTick>
 8007588:	0003      	movs	r3, r0
 800758a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	1dba      	adds	r2, r7, #6
 8007590:	2150      	movs	r1, #80	; 0x50
 8007592:	8812      	ldrh	r2, [r2, #0]
 8007594:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1dba      	adds	r2, r7, #6
 800759a:	2152      	movs	r1, #82	; 0x52
 800759c:	8812      	ldrh	r2, [r2, #0]
 800759e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	015b      	lsls	r3, r3, #5
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d108      	bne.n	80075be <HAL_UART_Transmit+0xaa>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	e003      	b.n	80075c6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2274      	movs	r2, #116	; 0x74
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80075ce:	e02d      	b.n	800762c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	0013      	movs	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	f000 fe7f 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 80075e2:	1e03      	subs	r3, r0, #0
 80075e4:	d001      	beq.n	80075ea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e039      	b.n	800765e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	05d2      	lsls	r2, r2, #23
 80075fa:	0dd2      	lsrs	r2, r2, #23
 80075fc:	b292      	uxth	r2, r2
 80075fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	3302      	adds	r3, #2
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e008      	b.n	800761a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	b292      	uxth	r2, r2
 8007612:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2252      	movs	r2, #82	; 0x52
 800761e:	5a9b      	ldrh	r3, [r3, r2]
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b299      	uxth	r1, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2252      	movs	r2, #82	; 0x52
 800762a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2252      	movs	r2, #82	; 0x52
 8007630:	5a9b      	ldrh	r3, [r3, r2]
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1cb      	bne.n	80075d0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	0013      	movs	r3, r2
 8007642:	2200      	movs	r2, #0
 8007644:	2140      	movs	r1, #64	; 0x40
 8007646:	f000 fe4b 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 800764a:	1e03      	subs	r3, r0, #0
 800764c:	d001      	beq.n	8007652 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e005      	b.n	800765e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	e000      	b.n	800765e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
  }
}
 800765e:	0018      	movs	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	b008      	add	sp, #32
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	1dbb      	adds	r3, r7, #6
 8007674:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800767a:	2b20      	cmp	r3, #32
 800767c:	d000      	beq.n	8007680 <HAL_UART_Transmit_DMA+0x18>
 800767e:	e08a      	b.n	8007796 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_UART_Transmit_DMA+0x26>
 8007686:	1dbb      	adds	r3, r7, #6
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e082      	b.n	8007798 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	015b      	lsls	r3, r3, #5
 800769a:	429a      	cmp	r2, r3
 800769c:	d109      	bne.n	80076b2 <HAL_UART_Transmit_DMA+0x4a>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d105      	bne.n	80076b2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2201      	movs	r2, #1
 80076aa:	4013      	ands	r3, r2
 80076ac:	d001      	beq.n	80076b2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e072      	b.n	8007798 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2274      	movs	r2, #116	; 0x74
 80076b6:	5c9b      	ldrb	r3, [r3, r2]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Transmit_DMA+0x58>
 80076bc:	2302      	movs	r3, #2
 80076be:	e06b      	b.n	8007798 <HAL_UART_Transmit_DMA+0x130>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2274      	movs	r2, #116	; 0x74
 80076c4:	2101      	movs	r1, #1
 80076c6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1dba      	adds	r2, r7, #6
 80076d2:	2150      	movs	r1, #80	; 0x50
 80076d4:	8812      	ldrh	r2, [r2, #0]
 80076d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	1dba      	adds	r2, r7, #6
 80076dc:	2152      	movs	r1, #82	; 0x52
 80076de:	8812      	ldrh	r2, [r2, #0]
 80076e0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2280      	movs	r2, #128	; 0x80
 80076e6:	2100      	movs	r1, #0
 80076e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2221      	movs	r2, #33	; 0x21
 80076ee:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02b      	beq.n	8007750 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <HAL_UART_Transmit_DMA+0x138>)
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007704:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <HAL_UART_Transmit_DMA+0x13c>)
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770c:	4a26      	ldr	r2, [pc, #152]	; (80077a8 <HAL_UART_Transmit_DMA+0x140>)
 800770e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007714:	2200      	movs	r2, #0
 8007716:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007720:	0019      	movs	r1, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3328      	adds	r3, #40	; 0x28
 8007728:	001a      	movs	r2, r3
 800772a:	1dbb      	adds	r3, r7, #6
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	f7fd f98d 	bl	8004a4c <HAL_DMA_Start_IT>
 8007732:	1e03      	subs	r3, r0, #0
 8007734:	d00c      	beq.n	8007750 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2280      	movs	r2, #128	; 0x80
 800773a:	2110      	movs	r1, #16
 800773c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2274      	movs	r2, #116	; 0x74
 8007742:	2100      	movs	r1, #0
 8007744:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e023      	b.n	8007798 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2240      	movs	r2, #64	; 0x40
 8007756:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2274      	movs	r2, #116	; 0x74
 800775c:	2100      	movs	r1, #0
 800775e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007760:	f3ef 8310 	mrs	r3, PRIMASK
 8007764:	613b      	str	r3, [r7, #16]
  return(result);
 8007766:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	2301      	movs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f383 8810 	msr	PRIMASK, r3
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2180      	movs	r1, #128	; 0x80
 8007782:	430a      	orrs	r2, r1
 8007784:	609a      	str	r2, [r3, #8]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	f383 8810 	msr	PRIMASK, r3
}
 8007790:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	0018      	movs	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	b008      	add	sp, #32
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	080086b9 	.word	0x080086b9
 80077a4:	0800874d 	.word	0x0800874d
 80077a8:	080088cd 	.word	0x080088cd

080077ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	1dbb      	adds	r3, r7, #6
 80077b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d150      	bne.n	8007864 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <HAL_UART_Receive_DMA+0x24>
 80077c8:	1dbb      	adds	r3, r7, #6
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e048      	b.n	8007866 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	2380      	movs	r3, #128	; 0x80
 80077da:	015b      	lsls	r3, r3, #5
 80077dc:	429a      	cmp	r2, r3
 80077de:	d109      	bne.n	80077f4 <HAL_UART_Receive_DMA+0x48>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d105      	bne.n	80077f4 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2201      	movs	r2, #1
 80077ec:	4013      	ands	r3, r2
 80077ee:	d001      	beq.n	80077f4 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e038      	b.n	8007866 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2274      	movs	r2, #116	; 0x74
 80077f8:	5c9b      	ldrb	r3, [r3, r2]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_UART_Receive_DMA+0x56>
 80077fe:	2302      	movs	r3, #2
 8007800:	e031      	b.n	8007866 <HAL_UART_Receive_DMA+0xba>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2274      	movs	r2, #116	; 0x74
 8007806:	2101      	movs	r1, #1
 8007808:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	4013      	ands	r3, r2
 800781c:	d019      	beq.n	8007852 <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800781e:	f3ef 8310 	mrs	r3, PRIMASK
 8007822:	613b      	str	r3, [r7, #16]
  return(result);
 8007824:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	2301      	movs	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f383 8810 	msr	PRIMASK, r3
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2180      	movs	r1, #128	; 0x80
 8007840:	04c9      	lsls	r1, r1, #19
 8007842:	430a      	orrs	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	f383 8810 	msr	PRIMASK, r3
}
 8007850:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007852:	1dbb      	adds	r3, r7, #6
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0018      	movs	r0, r3
 800785c:	f000 fe04 	bl	8008468 <UART_Start_Receive_DMA>
 8007860:	0003      	movs	r3, r0
 8007862:	e000      	b.n	8007866 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007864:	2302      	movs	r3, #2
  }
}
 8007866:	0018      	movs	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	b008      	add	sp, #32
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007870:	b590      	push	{r4, r7, lr}
 8007872:	b0ab      	sub	sp, #172	; 0xac
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	22a4      	movs	r2, #164	; 0xa4
 8007880:	18b9      	adds	r1, r7, r2
 8007882:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	20a0      	movs	r0, #160	; 0xa0
 800788c:	1839      	adds	r1, r7, r0
 800788e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	219c      	movs	r1, #156	; 0x9c
 8007898:	1879      	adds	r1, r7, r1
 800789a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800789c:	0011      	movs	r1, r2
 800789e:	18bb      	adds	r3, r7, r2
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a99      	ldr	r2, [pc, #612]	; (8007b08 <HAL_UART_IRQHandler+0x298>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	2298      	movs	r2, #152	; 0x98
 80078a8:	18bc      	adds	r4, r7, r2
 80078aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80078ac:	18bb      	adds	r3, r7, r2
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d114      	bne.n	80078de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078b4:	187b      	adds	r3, r7, r1
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2220      	movs	r2, #32
 80078ba:	4013      	ands	r3, r2
 80078bc:	d00f      	beq.n	80078de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078be:	183b      	adds	r3, r7, r0
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2220      	movs	r2, #32
 80078c4:	4013      	ands	r3, r2
 80078c6:	d00a      	beq.n	80078de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d100      	bne.n	80078d2 <HAL_UART_IRQHandler+0x62>
 80078d0:	e27e      	b.n	8007dd0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	0010      	movs	r0, r2
 80078da:	4798      	blx	r3
      }
      return;
 80078dc:	e278      	b.n	8007dd0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078de:	2398      	movs	r3, #152	; 0x98
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d100      	bne.n	80078ea <HAL_UART_IRQHandler+0x7a>
 80078e8:	e114      	b.n	8007b14 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078ea:	239c      	movs	r3, #156	; 0x9c
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2201      	movs	r2, #1
 80078f2:	4013      	ands	r3, r2
 80078f4:	d106      	bne.n	8007904 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80078f6:	23a0      	movs	r3, #160	; 0xa0
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a83      	ldr	r2, [pc, #524]	; (8007b0c <HAL_UART_IRQHandler+0x29c>)
 80078fe:	4013      	ands	r3, r2
 8007900:	d100      	bne.n	8007904 <HAL_UART_IRQHandler+0x94>
 8007902:	e107      	b.n	8007b14 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007904:	23a4      	movs	r3, #164	; 0xa4
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2201      	movs	r2, #1
 800790c:	4013      	ands	r3, r2
 800790e:	d012      	beq.n	8007936 <HAL_UART_IRQHandler+0xc6>
 8007910:	23a0      	movs	r3, #160	; 0xa0
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	2380      	movs	r3, #128	; 0x80
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4013      	ands	r3, r2
 800791c:	d00b      	beq.n	8007936 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2201      	movs	r2, #1
 8007924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2280      	movs	r2, #128	; 0x80
 800792a:	589b      	ldr	r3, [r3, r2]
 800792c:	2201      	movs	r2, #1
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007936:	23a4      	movs	r3, #164	; 0xa4
 8007938:	18fb      	adds	r3, r7, r3
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2202      	movs	r2, #2
 800793e:	4013      	ands	r3, r2
 8007940:	d011      	beq.n	8007966 <HAL_UART_IRQHandler+0xf6>
 8007942:	239c      	movs	r3, #156	; 0x9c
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2201      	movs	r2, #1
 800794a:	4013      	ands	r3, r2
 800794c:	d00b      	beq.n	8007966 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2202      	movs	r2, #2
 8007954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	589b      	ldr	r3, [r3, r2]
 800795c:	2204      	movs	r2, #4
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007966:	23a4      	movs	r3, #164	; 0xa4
 8007968:	18fb      	adds	r3, r7, r3
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2204      	movs	r2, #4
 800796e:	4013      	ands	r3, r2
 8007970:	d011      	beq.n	8007996 <HAL_UART_IRQHandler+0x126>
 8007972:	239c      	movs	r3, #156	; 0x9c
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2201      	movs	r2, #1
 800797a:	4013      	ands	r3, r2
 800797c:	d00b      	beq.n	8007996 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2204      	movs	r2, #4
 8007984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2280      	movs	r2, #128	; 0x80
 800798a:	589b      	ldr	r3, [r3, r2]
 800798c:	2202      	movs	r2, #2
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2180      	movs	r1, #128	; 0x80
 8007994:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007996:	23a4      	movs	r3, #164	; 0xa4
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2208      	movs	r2, #8
 800799e:	4013      	ands	r3, r2
 80079a0:	d017      	beq.n	80079d2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079a2:	23a0      	movs	r3, #160	; 0xa0
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2220      	movs	r2, #32
 80079aa:	4013      	ands	r3, r2
 80079ac:	d105      	bne.n	80079ba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079ae:	239c      	movs	r3, #156	; 0x9c
 80079b0:	18fb      	adds	r3, r7, r3
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2201      	movs	r2, #1
 80079b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079b8:	d00b      	beq.n	80079d2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2208      	movs	r2, #8
 80079c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2280      	movs	r2, #128	; 0x80
 80079c6:	589b      	ldr	r3, [r3, r2]
 80079c8:	2208      	movs	r2, #8
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079d2:	23a4      	movs	r3, #164	; 0xa4
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	2380      	movs	r3, #128	; 0x80
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	4013      	ands	r3, r2
 80079de:	d013      	beq.n	8007a08 <HAL_UART_IRQHandler+0x198>
 80079e0:	23a0      	movs	r3, #160	; 0xa0
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	04db      	lsls	r3, r3, #19
 80079ea:	4013      	ands	r3, r2
 80079ec:	d00c      	beq.n	8007a08 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2280      	movs	r2, #128	; 0x80
 80079f4:	0112      	lsls	r2, r2, #4
 80079f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2280      	movs	r2, #128	; 0x80
 80079fc:	589b      	ldr	r3, [r3, r2]
 80079fe:	2220      	movs	r2, #32
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2180      	movs	r1, #128	; 0x80
 8007a06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2280      	movs	r2, #128	; 0x80
 8007a0c:	589b      	ldr	r3, [r3, r2]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d100      	bne.n	8007a14 <HAL_UART_IRQHandler+0x1a4>
 8007a12:	e1df      	b.n	8007dd4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a14:	23a4      	movs	r3, #164	; 0xa4
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a20:	23a0      	movs	r3, #160	; 0xa0
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2220      	movs	r2, #32
 8007a28:	4013      	ands	r3, r2
 8007a2a:	d008      	beq.n	8007a3e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	0010      	movs	r0, r2
 8007a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2280      	movs	r2, #128	; 0x80
 8007a42:	589b      	ldr	r3, [r3, r2]
 8007a44:	2194      	movs	r1, #148	; 0x94
 8007a46:	187a      	adds	r2, r7, r1
 8007a48:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2240      	movs	r2, #64	; 0x40
 8007a52:	4013      	ands	r3, r2
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d004      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2228      	movs	r2, #40	; 0x28
 8007a5e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a60:	d047      	beq.n	8007af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	0018      	movs	r0, r3
 8007a66:	f000 fdc5 	bl	80085f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	2240      	movs	r2, #64	; 0x40
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d137      	bne.n	8007ae8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a78:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a80:	2090      	movs	r0, #144	; 0x90
 8007a82:	183a      	adds	r2, r7, r0
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	2301      	movs	r3, #1
 8007a88:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8c:	f383 8810 	msr	PRIMASK, r3
}
 8007a90:	46c0      	nop			; (mov r8, r8)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2140      	movs	r1, #64	; 0x40
 8007a9e:	438a      	bics	r2, r1
 8007aa0:	609a      	str	r2, [r3, #8]
 8007aa2:	183b      	adds	r3, r7, r0
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aaa:	f383 8810 	msr	PRIMASK, r3
}
 8007aae:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	4a14      	ldr	r2, [pc, #80]	; (8007b10 <HAL_UART_IRQHandler+0x2a0>)
 8007abe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f7fd f85f 	bl	8004b88 <HAL_DMA_Abort_IT>
 8007aca:	1e03      	subs	r3, r0, #0
 8007acc:	d01a      	beq.n	8007b04 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	0018      	movs	r0, r3
 8007ada:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007adc:	e012      	b.n	8007b04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 f995 	bl	8007e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae6:	e00d      	b.n	8007b04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f990 	bl	8007e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af0:	e008      	b.n	8007b04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	0018      	movs	r0, r3
 8007af6:	f000 f98b 	bl	8007e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2280      	movs	r2, #128	; 0x80
 8007afe:	2100      	movs	r1, #0
 8007b00:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007b02:	e167      	b.n	8007dd4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	46c0      	nop			; (mov r8, r8)
    return;
 8007b06:	e165      	b.n	8007dd4 <HAL_UART_IRQHandler+0x564>
 8007b08:	0000080f 	.word	0x0000080f
 8007b0c:	04000120 	.word	0x04000120
 8007b10:	0800894f 	.word	0x0800894f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d000      	beq.n	8007b1e <HAL_UART_IRQHandler+0x2ae>
 8007b1c:	e131      	b.n	8007d82 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b1e:	23a4      	movs	r3, #164	; 0xa4
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2210      	movs	r2, #16
 8007b26:	4013      	ands	r3, r2
 8007b28:	d100      	bne.n	8007b2c <HAL_UART_IRQHandler+0x2bc>
 8007b2a:	e12a      	b.n	8007d82 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b2c:	23a0      	movs	r3, #160	; 0xa0
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2210      	movs	r2, #16
 8007b34:	4013      	ands	r3, r2
 8007b36:	d100      	bne.n	8007b3a <HAL_UART_IRQHandler+0x2ca>
 8007b38:	e123      	b.n	8007d82 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2240      	movs	r2, #64	; 0x40
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d000      	beq.n	8007b52 <HAL_UART_IRQHandler+0x2e2>
 8007b50:	e09b      	b.n	8007c8a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	217e      	movs	r1, #126	; 0x7e
 8007b5c:	187b      	adds	r3, r7, r1
 8007b5e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007b60:	187b      	adds	r3, r7, r1
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d100      	bne.n	8007b6a <HAL_UART_IRQHandler+0x2fa>
 8007b68:	e136      	b.n	8007dd8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2258      	movs	r2, #88	; 0x58
 8007b6e:	5a9b      	ldrh	r3, [r3, r2]
 8007b70:	187a      	adds	r2, r7, r1
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d300      	bcc.n	8007b7a <HAL_UART_IRQHandler+0x30a>
 8007b78:	e12e      	b.n	8007dd8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	187a      	adds	r2, r7, r1
 8007b7e:	215a      	movs	r1, #90	; 0x5a
 8007b80:	8812      	ldrh	r2, [r2, #0]
 8007b82:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d06e      	beq.n	8007c6c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b92:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b96:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b98:	2301      	movs	r3, #1
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	498e      	ldr	r1, [pc, #568]	; (8007de8 <HAL_UART_IRQHandler+0x578>)
 8007bb0:	400a      	ands	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f383 8810 	msr	PRIMASK, r3
}
 8007bbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc8:	677b      	str	r3, [r7, #116]	; 0x74
 8007bca:	2301      	movs	r3, #1
 8007bcc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd0:	f383 8810 	msr	PRIMASK, r3
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2101      	movs	r1, #1
 8007be2:	438a      	bics	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
 8007be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bec:	f383 8810 	msr	PRIMASK, r3
}
 8007bf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	f383 8810 	msr	PRIMASK, r3
}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2140      	movs	r1, #64	; 0x40
 8007c14:	438a      	bics	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]
 8007c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c1e:	f383 8810 	msr	PRIMASK, r3
}
 8007c22:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c30:	f3ef 8310 	mrs	r3, PRIMASK
 8007c34:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c40:	f383 8810 	msr	PRIMASK, r3
}
 8007c44:	46c0      	nop			; (mov r8, r8)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2110      	movs	r1, #16
 8007c52:	438a      	bics	r2, r1
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5c:	f383 8810 	msr	PRIMASK, r3
}
 8007c60:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c66:	0018      	movs	r0, r3
 8007c68:	f7fc ff56 	bl	8004b18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2258      	movs	r2, #88	; 0x58
 8007c70:	5a9a      	ldrh	r2, [r3, r2]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	215a      	movs	r1, #90	; 0x5a
 8007c76:	5a5b      	ldrh	r3, [r3, r1]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	0011      	movs	r1, r2
 8007c82:	0018      	movs	r0, r3
 8007c84:	f000 f8cc 	bl	8007e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c88:	e0a6      	b.n	8007dd8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2258      	movs	r2, #88	; 0x58
 8007c8e:	5a99      	ldrh	r1, [r3, r2]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	225a      	movs	r2, #90	; 0x5a
 8007c94:	5a9b      	ldrh	r3, [r3, r2]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	208e      	movs	r0, #142	; 0x8e
 8007c9a:	183b      	adds	r3, r7, r0
 8007c9c:	1a8a      	subs	r2, r1, r2
 8007c9e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	225a      	movs	r2, #90	; 0x5a
 8007ca4:	5a9b      	ldrh	r3, [r3, r2]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d100      	bne.n	8007cae <HAL_UART_IRQHandler+0x43e>
 8007cac:	e096      	b.n	8007ddc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8007cae:	183b      	adds	r3, r7, r0
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d100      	bne.n	8007cb8 <HAL_UART_IRQHandler+0x448>
 8007cb6:	e091      	b.n	8007ddc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc0:	2488      	movs	r4, #136	; 0x88
 8007cc2:	193a      	adds	r2, r7, r4
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f383 8810 	msr	PRIMASK, r3
}
 8007cd0:	46c0      	nop			; (mov r8, r8)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4943      	ldr	r1, [pc, #268]	; (8007dec <HAL_UART_IRQHandler+0x57c>)
 8007cde:	400a      	ands	r2, r1
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	193b      	adds	r3, r7, r4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f383 8810 	msr	PRIMASK, r3
}
 8007cee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cf6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf8:	2484      	movs	r4, #132	; 0x84
 8007cfa:	193a      	adds	r2, r7, r4
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f383 8810 	msr	PRIMASK, r3
}
 8007d08:	46c0      	nop			; (mov r8, r8)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2101      	movs	r1, #1
 8007d16:	438a      	bics	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]
 8007d1a:	193b      	adds	r3, r7, r4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	f383 8810 	msr	PRIMASK, r3
}
 8007d26:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d42:	2480      	movs	r4, #128	; 0x80
 8007d44:	193a      	adds	r2, r7, r4
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	f383 8810 	msr	PRIMASK, r3
}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2110      	movs	r1, #16
 8007d60:	438a      	bics	r2, r1
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	193b      	adds	r3, r7, r4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	f383 8810 	msr	PRIMASK, r3
}
 8007d70:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d72:	183b      	adds	r3, r7, r0
 8007d74:	881a      	ldrh	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f000 f850 	bl	8007e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d80:	e02c      	b.n	8007ddc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d82:	23a4      	movs	r3, #164	; 0xa4
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2280      	movs	r2, #128	; 0x80
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d8e:	23a0      	movs	r3, #160	; 0xa0
 8007d90:	18fb      	adds	r3, r7, r3
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2280      	movs	r2, #128	; 0x80
 8007d96:	4013      	ands	r3, r2
 8007d98:	d009      	beq.n	8007dae <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01e      	beq.n	8007de0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	0010      	movs	r0, r2
 8007daa:	4798      	blx	r3
    }
    return;
 8007dac:	e018      	b.n	8007de0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dae:	23a4      	movs	r3, #164	; 0xa4
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2240      	movs	r2, #64	; 0x40
 8007db6:	4013      	ands	r3, r2
 8007db8:	d013      	beq.n	8007de2 <HAL_UART_IRQHandler+0x572>
 8007dba:	23a0      	movs	r3, #160	; 0xa0
 8007dbc:	18fb      	adds	r3, r7, r3
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2240      	movs	r2, #64	; 0x40
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d00d      	beq.n	8007de2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f000 fdd7 	bl	800897c <UART_EndTransmit_IT>
    return;
 8007dce:	e008      	b.n	8007de2 <HAL_UART_IRQHandler+0x572>
      return;
 8007dd0:	46c0      	nop			; (mov r8, r8)
 8007dd2:	e006      	b.n	8007de2 <HAL_UART_IRQHandler+0x572>
    return;
 8007dd4:	46c0      	nop			; (mov r8, r8)
 8007dd6:	e004      	b.n	8007de2 <HAL_UART_IRQHandler+0x572>
      return;
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	e002      	b.n	8007de2 <HAL_UART_IRQHandler+0x572>
      return;
 8007ddc:	46c0      	nop			; (mov r8, r8)
 8007dde:	e000      	b.n	8007de2 <HAL_UART_IRQHandler+0x572>
    return;
 8007de0:	46c0      	nop			; (mov r8, r8)
  }

}
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b02b      	add	sp, #172	; 0xac
 8007de6:	bd90      	pop	{r4, r7, pc}
 8007de8:	fffffeff 	.word	0xfffffeff
 8007dec:	fffffedf 	.word	0xfffffedf

08007df0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007df8:	46c0      	nop			; (mov r8, r8)
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e08:	46c0      	nop			; (mov r8, r8)
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b002      	add	sp, #8
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	000a      	movs	r2, r1
 8007e2a:	1cbb      	adds	r3, r7, #2
 8007e2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e40:	231e      	movs	r3, #30
 8007e42:	18fb      	adds	r3, r7, r3
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a97      	ldr	r2, [pc, #604]	; (80080c4 <UART_SetConfig+0x28c>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	0019      	movs	r1, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4a92      	ldr	r2, [pc, #584]	; (80080c8 <UART_SetConfig+0x290>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	0019      	movs	r1, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	4a89      	ldr	r2, [pc, #548]	; (80080cc <UART_SetConfig+0x294>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	0019      	movs	r1, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a85      	ldr	r2, [pc, #532]	; (80080d0 <UART_SetConfig+0x298>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d127      	bne.n	8007f0e <UART_SetConfig+0xd6>
 8007ebe:	4b85      	ldr	r3, [pc, #532]	; (80080d4 <UART_SetConfig+0x29c>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d00d      	beq.n	8007ee6 <UART_SetConfig+0xae>
 8007eca:	d81b      	bhi.n	8007f04 <UART_SetConfig+0xcc>
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d014      	beq.n	8007efa <UART_SetConfig+0xc2>
 8007ed0:	d818      	bhi.n	8007f04 <UART_SetConfig+0xcc>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <UART_SetConfig+0xa4>
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d00a      	beq.n	8007ef0 <UART_SetConfig+0xb8>
 8007eda:	e013      	b.n	8007f04 <UART_SetConfig+0xcc>
 8007edc:	231f      	movs	r3, #31
 8007ede:	18fb      	adds	r3, r7, r3
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	e035      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007ee6:	231f      	movs	r3, #31
 8007ee8:	18fb      	adds	r3, r7, r3
 8007eea:	2202      	movs	r2, #2
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e030      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007ef0:	231f      	movs	r3, #31
 8007ef2:	18fb      	adds	r3, r7, r3
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	e02b      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007efa:	231f      	movs	r3, #31
 8007efc:	18fb      	adds	r3, r7, r3
 8007efe:	2208      	movs	r2, #8
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e026      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007f04:	231f      	movs	r3, #31
 8007f06:	18fb      	adds	r3, r7, r3
 8007f08:	2210      	movs	r2, #16
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e021      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a71      	ldr	r2, [pc, #452]	; (80080d8 <UART_SetConfig+0x2a0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d104      	bne.n	8007f22 <UART_SetConfig+0xea>
 8007f18:	231f      	movs	r3, #31
 8007f1a:	18fb      	adds	r3, r7, r3
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	e017      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6d      	ldr	r2, [pc, #436]	; (80080dc <UART_SetConfig+0x2a4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d104      	bne.n	8007f36 <UART_SetConfig+0xfe>
 8007f2c:	231f      	movs	r3, #31
 8007f2e:	18fb      	adds	r3, r7, r3
 8007f30:	2200      	movs	r2, #0
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	e00d      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a69      	ldr	r2, [pc, #420]	; (80080e0 <UART_SetConfig+0x2a8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d104      	bne.n	8007f4a <UART_SetConfig+0x112>
 8007f40:	231f      	movs	r3, #31
 8007f42:	18fb      	adds	r3, r7, r3
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	e003      	b.n	8007f52 <UART_SetConfig+0x11a>
 8007f4a:	231f      	movs	r3, #31
 8007f4c:	18fb      	adds	r3, r7, r3
 8007f4e:	2210      	movs	r2, #16
 8007f50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	2380      	movs	r3, #128	; 0x80
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d15d      	bne.n	800801a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8007f5e:	231f      	movs	r3, #31
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d015      	beq.n	8007f94 <UART_SetConfig+0x15c>
 8007f68:	dc18      	bgt.n	8007f9c <UART_SetConfig+0x164>
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d00d      	beq.n	8007f8a <UART_SetConfig+0x152>
 8007f6e:	dc15      	bgt.n	8007f9c <UART_SetConfig+0x164>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <UART_SetConfig+0x142>
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d005      	beq.n	8007f84 <UART_SetConfig+0x14c>
 8007f78:	e010      	b.n	8007f9c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7a:	f7fd fd3b 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8007f7e:	0003      	movs	r3, r0
 8007f80:	61bb      	str	r3, [r7, #24]
        break;
 8007f82:	e012      	b.n	8007faa <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f84:	4b57      	ldr	r3, [pc, #348]	; (80080e4 <UART_SetConfig+0x2ac>)
 8007f86:	61bb      	str	r3, [r7, #24]
        break;
 8007f88:	e00f      	b.n	8007faa <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fd fcc3 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	61bb      	str	r3, [r7, #24]
        break;
 8007f92:	e00a      	b.n	8007faa <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f94:	2380      	movs	r3, #128	; 0x80
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	61bb      	str	r3, [r7, #24]
        break;
 8007f9a:	e006      	b.n	8007faa <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fa0:	231e      	movs	r3, #30
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	701a      	strb	r2, [r3, #0]
        break;
 8007fa8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d100      	bne.n	8007fb2 <UART_SetConfig+0x17a>
 8007fb0:	e07b      	b.n	80080aa <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	005a      	lsls	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	18d2      	adds	r2, r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	0019      	movs	r1, r3
 8007fc4:	0010      	movs	r0, r2
 8007fc6:	f7f8 f8c5 	bl	8000154 <__udivsi3>
 8007fca:	0003      	movs	r3, r0
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	d91c      	bls.n	8008010 <UART_SetConfig+0x1d8>
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	2380      	movs	r3, #128	; 0x80
 8007fda:	025b      	lsls	r3, r3, #9
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d217      	bcs.n	8008010 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	200e      	movs	r0, #14
 8007fe6:	183b      	adds	r3, r7, r0
 8007fe8:	210f      	movs	r1, #15
 8007fea:	438a      	bics	r2, r1
 8007fec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	b299      	uxth	r1, r3
 8007ffa:	183b      	adds	r3, r7, r0
 8007ffc:	183a      	adds	r2, r7, r0
 8007ffe:	8812      	ldrh	r2, [r2, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	183a      	adds	r2, r7, r0
 800800a:	8812      	ldrh	r2, [r2, #0]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	e04c      	b.n	80080aa <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8008010:	231e      	movs	r3, #30
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	2201      	movs	r2, #1
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	e047      	b.n	80080aa <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800801a:	231f      	movs	r3, #31
 800801c:	18fb      	adds	r3, r7, r3
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b08      	cmp	r3, #8
 8008022:	d015      	beq.n	8008050 <UART_SetConfig+0x218>
 8008024:	dc18      	bgt.n	8008058 <UART_SetConfig+0x220>
 8008026:	2b04      	cmp	r3, #4
 8008028:	d00d      	beq.n	8008046 <UART_SetConfig+0x20e>
 800802a:	dc15      	bgt.n	8008058 <UART_SetConfig+0x220>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <UART_SetConfig+0x1fe>
 8008030:	2b02      	cmp	r3, #2
 8008032:	d005      	beq.n	8008040 <UART_SetConfig+0x208>
 8008034:	e010      	b.n	8008058 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008036:	f7fd fcdd 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 800803a:	0003      	movs	r3, r0
 800803c:	61bb      	str	r3, [r7, #24]
        break;
 800803e:	e012      	b.n	8008066 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <UART_SetConfig+0x2ac>)
 8008042:	61bb      	str	r3, [r7, #24]
        break;
 8008044:	e00f      	b.n	8008066 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008046:	f7fd fc65 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 800804a:	0003      	movs	r3, r0
 800804c:	61bb      	str	r3, [r7, #24]
        break;
 800804e:	e00a      	b.n	8008066 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008050:	2380      	movs	r3, #128	; 0x80
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	61bb      	str	r3, [r7, #24]
        break;
 8008056:	e006      	b.n	8008066 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800805c:	231e      	movs	r3, #30
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	2201      	movs	r2, #1
 8008062:	701a      	strb	r2, [r3, #0]
        break;
 8008064:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01e      	beq.n	80080aa <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	085a      	lsrs	r2, r3, #1
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	18d2      	adds	r2, r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	0019      	movs	r1, r3
 800807c:	0010      	movs	r0, r2
 800807e:	f7f8 f869 	bl	8000154 <__udivsi3>
 8008082:	0003      	movs	r3, r0
 8008084:	b29b      	uxth	r3, r3
 8008086:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d909      	bls.n	80080a2 <UART_SetConfig+0x26a>
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	2380      	movs	r3, #128	; 0x80
 8008092:	025b      	lsls	r3, r3, #9
 8008094:	429a      	cmp	r2, r3
 8008096:	d204      	bcs.n	80080a2 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	60da      	str	r2, [r3, #12]
 80080a0:	e003      	b.n	80080aa <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80080a2:	231e      	movs	r3, #30
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	2201      	movs	r2, #1
 80080a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080b6:	231e      	movs	r3, #30
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	781b      	ldrb	r3, [r3, #0]
}
 80080bc:	0018      	movs	r0, r3
 80080be:	46bd      	mov	sp, r7
 80080c0:	b008      	add	sp, #32
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	efff69f3 	.word	0xefff69f3
 80080c8:	ffffcfff 	.word	0xffffcfff
 80080cc:	fffff4ff 	.word	0xfffff4ff
 80080d0:	40013800 	.word	0x40013800
 80080d4:	40021000 	.word	0x40021000
 80080d8:	40004400 	.word	0x40004400
 80080dc:	40004800 	.word	0x40004800
 80080e0:	40004c00 	.word	0x40004c00
 80080e4:	007a1200 	.word	0x007a1200

080080e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2201      	movs	r2, #1
 80080f6:	4013      	ands	r3, r2
 80080f8:	d00b      	beq.n	8008112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4a4a      	ldr	r2, [pc, #296]	; (800822c <UART_AdvFeatureConfig+0x144>)
 8008102:	4013      	ands	r3, r2
 8008104:	0019      	movs	r1, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2202      	movs	r2, #2
 8008118:	4013      	ands	r3, r2
 800811a:	d00b      	beq.n	8008134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4a43      	ldr	r2, [pc, #268]	; (8008230 <UART_AdvFeatureConfig+0x148>)
 8008124:	4013      	ands	r3, r2
 8008126:	0019      	movs	r1, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2204      	movs	r2, #4
 800813a:	4013      	ands	r3, r2
 800813c:	d00b      	beq.n	8008156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4a3b      	ldr	r2, [pc, #236]	; (8008234 <UART_AdvFeatureConfig+0x14c>)
 8008146:	4013      	ands	r3, r2
 8008148:	0019      	movs	r1, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2208      	movs	r2, #8
 800815c:	4013      	ands	r3, r2
 800815e:	d00b      	beq.n	8008178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	4a34      	ldr	r2, [pc, #208]	; (8008238 <UART_AdvFeatureConfig+0x150>)
 8008168:	4013      	ands	r3, r2
 800816a:	0019      	movs	r1, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2210      	movs	r2, #16
 800817e:	4013      	ands	r3, r2
 8008180:	d00b      	beq.n	800819a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a2c      	ldr	r2, [pc, #176]	; (800823c <UART_AdvFeatureConfig+0x154>)
 800818a:	4013      	ands	r3, r2
 800818c:	0019      	movs	r1, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2220      	movs	r2, #32
 80081a0:	4013      	ands	r3, r2
 80081a2:	d00b      	beq.n	80081bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	4a25      	ldr	r2, [pc, #148]	; (8008240 <UART_AdvFeatureConfig+0x158>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	0019      	movs	r1, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2240      	movs	r2, #64	; 0x40
 80081c2:	4013      	ands	r3, r2
 80081c4:	d01d      	beq.n	8008202 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <UART_AdvFeatureConfig+0x15c>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	0019      	movs	r1, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	035b      	lsls	r3, r3, #13
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d10b      	bne.n	8008202 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <UART_AdvFeatureConfig+0x160>)
 80081f2:	4013      	ands	r3, r2
 80081f4:	0019      	movs	r1, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2280      	movs	r2, #128	; 0x80
 8008208:	4013      	ands	r3, r2
 800820a:	d00b      	beq.n	8008224 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	4a0e      	ldr	r2, [pc, #56]	; (800824c <UART_AdvFeatureConfig+0x164>)
 8008214:	4013      	ands	r3, r2
 8008216:	0019      	movs	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	605a      	str	r2, [r3, #4]
  }
}
 8008224:	46c0      	nop			; (mov r8, r8)
 8008226:	46bd      	mov	sp, r7
 8008228:	b002      	add	sp, #8
 800822a:	bd80      	pop	{r7, pc}
 800822c:	fffdffff 	.word	0xfffdffff
 8008230:	fffeffff 	.word	0xfffeffff
 8008234:	fffbffff 	.word	0xfffbffff
 8008238:	ffff7fff 	.word	0xffff7fff
 800823c:	ffffefff 	.word	0xffffefff
 8008240:	ffffdfff 	.word	0xffffdfff
 8008244:	ffefffff 	.word	0xffefffff
 8008248:	ff9fffff 	.word	0xff9fffff
 800824c:	fff7ffff 	.word	0xfff7ffff

08008250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af02      	add	r7, sp, #8
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2280      	movs	r2, #128	; 0x80
 800825c:	2100      	movs	r1, #0
 800825e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008260:	f7fc faa0 	bl	80047a4 <HAL_GetTick>
 8008264:	0003      	movs	r3, r0
 8008266:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2208      	movs	r2, #8
 8008270:	4013      	ands	r3, r2
 8008272:	2b08      	cmp	r3, #8
 8008274:	d10c      	bne.n	8008290 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2280      	movs	r2, #128	; 0x80
 800827a:	0391      	lsls	r1, r2, #14
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4a17      	ldr	r2, [pc, #92]	; (80082dc <UART_CheckIdleState+0x8c>)
 8008280:	9200      	str	r2, [sp, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	f000 f82c 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 8008288:	1e03      	subs	r3, r0, #0
 800828a:	d001      	beq.n	8008290 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e021      	b.n	80082d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2204      	movs	r2, #4
 8008298:	4013      	ands	r3, r2
 800829a:	2b04      	cmp	r3, #4
 800829c:	d10c      	bne.n	80082b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2280      	movs	r2, #128	; 0x80
 80082a2:	03d1      	lsls	r1, r2, #15
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <UART_CheckIdleState+0x8c>)
 80082a8:	9200      	str	r2, [sp, #0]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f000 f818 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 80082b0:	1e03      	subs	r3, r0, #0
 80082b2:	d001      	beq.n	80082b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e00d      	b.n	80082d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2274      	movs	r2, #116	; 0x74
 80082ce:	2100      	movs	r1, #0
 80082d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	0018      	movs	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b004      	add	sp, #16
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	01ffffff 	.word	0x01ffffff

080082e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b094      	sub	sp, #80	; 0x50
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	1dfb      	adds	r3, r7, #7
 80082ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	e0a3      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f4:	3301      	adds	r3, #1
 80082f6:	d100      	bne.n	80082fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80082f8:	e09f      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7fc fa53 	bl	80047a4 <HAL_GetTick>
 80082fe:	0002      	movs	r2, r0
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <UART_WaitOnFlagUntilTimeout+0x30>
 800830a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830c:	2b00      	cmp	r3, #0
 800830e:	d13d      	bne.n	800838c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008310:	f3ef 8310 	mrs	r3, PRIMASK
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008318:	647b      	str	r3, [r7, #68]	; 0x44
 800831a:	2301      	movs	r3, #1
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	494c      	ldr	r1, [pc, #304]	; (8008464 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008332:	400a      	ands	r2, r1
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008338:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f383 8810 	msr	PRIMASK, r3
}
 8008340:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008342:	f3ef 8310 	mrs	r3, PRIMASK
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	643b      	str	r3, [r7, #64]	; 0x40
 800834c:	2301      	movs	r3, #1
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f383 8810 	msr	PRIMASK, r3
}
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2101      	movs	r1, #1
 8008364:	438a      	bics	r2, r1
 8008366:	609a      	str	r2, [r3, #8]
 8008368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836e:	f383 8810 	msr	PRIMASK, r3
}
 8008372:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2274      	movs	r2, #116	; 0x74
 8008384:	2100      	movs	r1, #0
 8008386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e067      	b.n	800845c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2204      	movs	r2, #4
 8008394:	4013      	ands	r3, r2
 8008396:	d050      	beq.n	800843a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69da      	ldr	r2, [r3, #28]
 800839e:	2380      	movs	r3, #128	; 0x80
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	401a      	ands	r2, r3
 80083a4:	2380      	movs	r3, #128	; 0x80
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d146      	bne.n	800843a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2280      	movs	r2, #128	; 0x80
 80083b2:	0112      	lsls	r2, r2, #4
 80083b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ba:	613b      	str	r3, [r7, #16]
  return(result);
 80083bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c0:	2301      	movs	r3, #1
 80083c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f383 8810 	msr	PRIMASK, r3
}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4923      	ldr	r1, [pc, #140]	; (8008464 <UART_WaitOnFlagUntilTimeout+0x184>)
 80083d8:	400a      	ands	r2, r1
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f383 8810 	msr	PRIMASK, r3
}
 80083e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80083ee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80083f2:	2301      	movs	r3, #1
 80083f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f383 8810 	msr	PRIMASK, r3
}
 80083fc:	46c0      	nop			; (mov r8, r8)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2101      	movs	r1, #1
 800840a:	438a      	bics	r2, r1
 800840c:	609a      	str	r2, [r3, #8]
 800840e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	f383 8810 	msr	PRIMASK, r3
}
 8008418:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2280      	movs	r2, #128	; 0x80
 800842a:	2120      	movs	r1, #32
 800842c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2274      	movs	r2, #116	; 0x74
 8008432:	2100      	movs	r1, #0
 8008434:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e010      	b.n	800845c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	4013      	ands	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	425a      	negs	r2, r3
 800844a:	4153      	adcs	r3, r2
 800844c:	b2db      	uxtb	r3, r3
 800844e:	001a      	movs	r2, r3
 8008450:	1dfb      	adds	r3, r7, #7
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d100      	bne.n	800845a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008458:	e74b      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b014      	add	sp, #80	; 0x50
 8008462:	bd80      	pop	{r7, pc}
 8008464:	fffffe5f 	.word	0xfffffe5f

08008468 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b090      	sub	sp, #64	; 0x40
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	1dbb      	adds	r3, r7, #6
 8008474:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	1dba      	adds	r2, r7, #6
 8008480:	2158      	movs	r1, #88	; 0x58
 8008482:	8812      	ldrh	r2, [r2, #0]
 8008484:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2280      	movs	r2, #128	; 0x80
 800848a:	2100      	movs	r1, #0
 800848c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2222      	movs	r2, #34	; 0x22
 8008492:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008498:	2b00      	cmp	r3, #0
 800849a:	d02b      	beq.n	80084f4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	4a3f      	ldr	r2, [pc, #252]	; (80085a0 <UART_Start_Receive_DMA+0x138>)
 80084a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a8:	4a3e      	ldr	r2, [pc, #248]	; (80085a4 <UART_Start_Receive_DMA+0x13c>)
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	4a3d      	ldr	r2, [pc, #244]	; (80085a8 <UART_Start_Receive_DMA+0x140>)
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	2200      	movs	r2, #0
 80084ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3324      	adds	r3, #36	; 0x24
 80084c6:	0019      	movs	r1, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084cc:	001a      	movs	r2, r3
 80084ce:	1dbb      	adds	r3, r7, #6
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	f7fc fabb 	bl	8004a4c <HAL_DMA_Start_IT>
 80084d6:	1e03      	subs	r3, r0, #0
 80084d8:	d00c      	beq.n	80084f4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2280      	movs	r2, #128	; 0x80
 80084de:	2110      	movs	r1, #16
 80084e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2274      	movs	r2, #116	; 0x74
 80084e6:	2100      	movs	r1, #0
 80084e8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e050      	b.n	8008596 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2274      	movs	r2, #116	; 0x74
 80084f8:	2100      	movs	r1, #0
 80084fa:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008500:	613b      	str	r3, [r7, #16]
  return(result);
 8008502:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008506:	2301      	movs	r3, #1
 8008508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f383 8810 	msr	PRIMASK, r3
}
 8008510:	46c0      	nop			; (mov r8, r8)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2180      	movs	r1, #128	; 0x80
 800851e:	0049      	lsls	r1, r1, #1
 8008520:	430a      	orrs	r2, r1
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f383 8810 	msr	PRIMASK, r3
}
 800852e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008530:	f3ef 8310 	mrs	r3, PRIMASK
 8008534:	61fb      	str	r3, [r7, #28]
  return(result);
 8008536:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008538:	63bb      	str	r3, [r7, #56]	; 0x38
 800853a:	2301      	movs	r3, #1
 800853c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	f383 8810 	msr	PRIMASK, r3
}
 8008544:	46c0      	nop			; (mov r8, r8)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2101      	movs	r1, #1
 8008552:	430a      	orrs	r2, r1
 8008554:	609a      	str	r2, [r3, #8]
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	f383 8810 	msr	PRIMASK, r3
}
 8008560:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008562:	f3ef 8310 	mrs	r3, PRIMASK
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
 800856c:	2301      	movs	r3, #1
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008572:	f383 8810 	msr	PRIMASK, r3
}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2140      	movs	r1, #64	; 0x40
 8008584:	430a      	orrs	r2, r1
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	f383 8810 	msr	PRIMASK, r3
}
 8008592:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b010      	add	sp, #64	; 0x40
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	0800876d 	.word	0x0800876d
 80085a4:	08008891 	.word	0x08008891
 80085a8:	080088cd 	.word	0x080088cd

080085ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b4:	f3ef 8310 	mrs	r3, PRIMASK
 80085b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80085ba:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	2301      	movs	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f383 8810 	msr	PRIMASK, r3
}
 80085c8:	46c0      	nop			; (mov r8, r8)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	21c0      	movs	r1, #192	; 0xc0
 80085d6:	438a      	bics	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f383 8810 	msr	PRIMASK, r3
}
 80085e4:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	679a      	str	r2, [r3, #120]	; 0x78
}
 80085ec:	46c0      	nop			; (mov r8, r8)
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b006      	add	sp, #24
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08e      	sub	sp, #56	; 0x38
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008600:	617b      	str	r3, [r7, #20]
  return(result);
 8008602:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
 8008606:	2301      	movs	r3, #1
 8008608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	f383 8810 	msr	PRIMASK, r3
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4925      	ldr	r1, [pc, #148]	; (80086b4 <UART_EndRxTransfer+0xc0>)
 800861e:	400a      	ands	r2, r1
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f383 8810 	msr	PRIMASK, r3
}
 800862c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800862e:	f3ef 8310 	mrs	r3, PRIMASK
 8008632:	623b      	str	r3, [r7, #32]
  return(result);
 8008634:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008636:	633b      	str	r3, [r7, #48]	; 0x30
 8008638:	2301      	movs	r3, #1
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	f383 8810 	msr	PRIMASK, r3
}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2101      	movs	r1, #1
 8008650:	438a      	bics	r2, r1
 8008652:	609a      	str	r2, [r3, #8]
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	f383 8810 	msr	PRIMASK, r3
}
 800865e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008664:	2b01      	cmp	r3, #1
 8008666:	d118      	bne.n	800869a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008668:	f3ef 8310 	mrs	r3, PRIMASK
 800866c:	60bb      	str	r3, [r7, #8]
  return(result);
 800866e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008672:	2301      	movs	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f383 8810 	msr	PRIMASK, r3
}
 800867c:	46c0      	nop			; (mov r8, r8)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2110      	movs	r1, #16
 800868a:	438a      	bics	r2, r1
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f383 8810 	msr	PRIMASK, r3
}
 8008698:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086ac:	46c0      	nop			; (mov r8, r8)
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b00e      	add	sp, #56	; 0x38
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	fffffedf 	.word	0xfffffedf

080086b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08c      	sub	sp, #48	; 0x30
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d035      	beq.n	800873a <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2252      	movs	r2, #82	; 0x52
 80086d2:	2100      	movs	r1, #0
 80086d4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d6:	f3ef 8310 	mrs	r3, PRIMASK
 80086da:	60fb      	str	r3, [r7, #12]
  return(result);
 80086dc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e0:	2301      	movs	r3, #1
 80086e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f383 8810 	msr	PRIMASK, r3
}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2180      	movs	r1, #128	; 0x80
 80086f8:	438a      	bics	r2, r1
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f383 8810 	msr	PRIMASK, r3
}
 8008706:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008708:	f3ef 8310 	mrs	r3, PRIMASK
 800870c:	61bb      	str	r3, [r7, #24]
  return(result);
 800870e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
 8008712:	2301      	movs	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f383 8810 	msr	PRIMASK, r3
}
 800871c:	46c0      	nop			; (mov r8, r8)
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2140      	movs	r1, #64	; 0x40
 800872a:	430a      	orrs	r2, r1
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	f383 8810 	msr	PRIMASK, r3
}
 8008738:	e004      	b.n	8008744 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	0018      	movs	r0, r3
 800873e:	f7fb fc13 	bl	8003f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	46c0      	nop			; (mov r8, r8)
 8008746:	46bd      	mov	sp, r7
 8008748:	b00c      	add	sp, #48	; 0x30
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	0018      	movs	r0, r3
 800875e:	f7ff fb47 	bl	8007df0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	b004      	add	sp, #16
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b094      	sub	sp, #80	; 0x50
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	2b20      	cmp	r3, #32
 8008780:	d06e      	beq.n	8008860 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8008782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008784:	225a      	movs	r2, #90	; 0x5a
 8008786:	2100      	movs	r1, #0
 8008788:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878a:	f3ef 8310 	mrs	r3, PRIMASK
 800878e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008790:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008792:	64bb      	str	r3, [r7, #72]	; 0x48
 8008794:	2301      	movs	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f383 8810 	msr	PRIMASK, r3
}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4938      	ldr	r1, [pc, #224]	; (800888c <UART_DMAReceiveCplt+0x120>)
 80087ac:	400a      	ands	r2, r1
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	f383 8810 	msr	PRIMASK, r3
}
 80087ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087bc:	f3ef 8310 	mrs	r3, PRIMASK
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c4:	647b      	str	r3, [r7, #68]	; 0x44
 80087c6:	2301      	movs	r3, #1
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	f383 8810 	msr	PRIMASK, r3
}
 80087d0:	46c0      	nop			; (mov r8, r8)
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2101      	movs	r1, #1
 80087de:	438a      	bics	r2, r1
 80087e0:	609a      	str	r2, [r3, #8]
 80087e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	f383 8810 	msr	PRIMASK, r3
}
 80087ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ee:	f3ef 8310 	mrs	r3, PRIMASK
 80087f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	643b      	str	r3, [r7, #64]	; 0x40
 80087f8:	2301      	movs	r3, #1
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fe:	f383 8810 	msr	PRIMASK, r3
}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2140      	movs	r1, #64	; 0x40
 8008810:	438a      	bics	r2, r1
 8008812:	609a      	str	r2, [r3, #8]
 8008814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008816:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	f383 8810 	msr	PRIMASK, r3
}
 800881e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008822:	2220      	movs	r2, #32
 8008824:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800882a:	2b01      	cmp	r3, #1
 800882c:	d118      	bne.n	8008860 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800882e:	f3ef 8310 	mrs	r3, PRIMASK
 8008832:	60fb      	str	r3, [r7, #12]
  return(result);
 8008834:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008838:	2301      	movs	r3, #1
 800883a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f383 8810 	msr	PRIMASK, r3
}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2110      	movs	r1, #16
 8008850:	438a      	bics	r2, r1
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f383 8810 	msr	PRIMASK, r3
}
 800885e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008864:	2b01      	cmp	r3, #1
 8008866:	d108      	bne.n	800887a <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886a:	2258      	movs	r2, #88	; 0x58
 800886c:	5a9a      	ldrh	r2, [r3, r2]
 800886e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008870:	0011      	movs	r1, r2
 8008872:	0018      	movs	r0, r3
 8008874:	f7ff fad4 	bl	8007e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008878:	e003      	b.n	8008882 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887c:	0018      	movs	r0, r3
 800887e:	f7fb fb81 	bl	8003f84 <HAL_UART_RxCpltCallback>
}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	46bd      	mov	sp, r7
 8008886:	b014      	add	sp, #80	; 0x50
 8008888:	bd80      	pop	{r7, pc}
 800888a:	46c0      	nop			; (mov r8, r8)
 800888c:	fffffeff 	.word	0xfffffeff

08008890 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d10a      	bne.n	80088bc <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2258      	movs	r2, #88	; 0x58
 80088aa:	5a9b      	ldrh	r3, [r3, r2]
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	0011      	movs	r1, r2
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7ff fab3 	bl	8007e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088ba:	e003      	b.n	80088c4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	0018      	movs	r0, r3
 80088c0:	f7ff fa9e 	bl	8007e00 <HAL_UART_RxHalfCpltCallback>
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b004      	add	sp, #16
 80088ca:	bd80      	pop	{r7, pc}

080088cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2280      	movs	r2, #128	; 0x80
 80088ee:	4013      	ands	r3, r2
 80088f0:	2b80      	cmp	r3, #128	; 0x80
 80088f2:	d10a      	bne.n	800890a <UART_DMAError+0x3e>
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b21      	cmp	r3, #33	; 0x21
 80088f8:	d107      	bne.n	800890a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2252      	movs	r2, #82	; 0x52
 80088fe:	2100      	movs	r1, #0
 8008900:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	0018      	movs	r0, r3
 8008906:	f7ff fe51 	bl	80085ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2240      	movs	r2, #64	; 0x40
 8008912:	4013      	ands	r3, r2
 8008914:	2b40      	cmp	r3, #64	; 0x40
 8008916:	d10a      	bne.n	800892e <UART_DMAError+0x62>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b22      	cmp	r3, #34	; 0x22
 800891c:	d107      	bne.n	800892e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	225a      	movs	r2, #90	; 0x5a
 8008922:	2100      	movs	r1, #0
 8008924:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	0018      	movs	r0, r3
 800892a:	f7ff fe63 	bl	80085f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2280      	movs	r2, #128	; 0x80
 8008932:	589b      	ldr	r3, [r3, r2]
 8008934:	2210      	movs	r2, #16
 8008936:	431a      	orrs	r2, r3
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2180      	movs	r1, #128	; 0x80
 800893c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	0018      	movs	r0, r3
 8008942:	f7ff fa65 	bl	8007e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	46bd      	mov	sp, r7
 800894a:	b006      	add	sp, #24
 800894c:	bd80      	pop	{r7, pc}

0800894e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	225a      	movs	r2, #90	; 0x5a
 8008960:	2100      	movs	r1, #0
 8008962:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2252      	movs	r2, #82	; 0x52
 8008968:	2100      	movs	r1, #0
 800896a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	0018      	movs	r0, r3
 8008970:	f7ff fa4e 	bl	8007e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008974:	46c0      	nop			; (mov r8, r8)
 8008976:	46bd      	mov	sp, r7
 8008978:	b004      	add	sp, #16
 800897a:	bd80      	pop	{r7, pc}

0800897c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008984:	f3ef 8310 	mrs	r3, PRIMASK
 8008988:	60bb      	str	r3, [r7, #8]
  return(result);
 800898a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	2301      	movs	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f383 8810 	msr	PRIMASK, r3
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2140      	movs	r1, #64	; 0x40
 80089a6:	438a      	bics	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f383 8810 	msr	PRIMASK, r3
}
 80089b4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	0018      	movs	r0, r3
 80089c6:	f7fb facf 	bl	8003f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b006      	add	sp, #24
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <__errno>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <__errno+0x8>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	2000000c 	.word	0x2000000c

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	2600      	movs	r6, #0
 80089e4:	4d0c      	ldr	r5, [pc, #48]	; (8008a18 <__libc_init_array+0x38>)
 80089e6:	4c0d      	ldr	r4, [pc, #52]	; (8008a1c <__libc_init_array+0x3c>)
 80089e8:	1b64      	subs	r4, r4, r5
 80089ea:	10a4      	asrs	r4, r4, #2
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	2600      	movs	r6, #0
 80089f2:	f005 f9c3 	bl	800dd7c <_init>
 80089f6:	4d0a      	ldr	r5, [pc, #40]	; (8008a20 <__libc_init_array+0x40>)
 80089f8:	4c0a      	ldr	r4, [pc, #40]	; (8008a24 <__libc_init_array+0x44>)
 80089fa:	1b64      	subs	r4, r4, r5
 80089fc:	10a4      	asrs	r4, r4, #2
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	00b3      	lsls	r3, r6, #2
 8008a06:	58eb      	ldr	r3, [r5, r3]
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	00b3      	lsls	r3, r6, #2
 8008a10:	58eb      	ldr	r3, [r5, r3]
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	0800e484 	.word	0x0800e484
 8008a1c:	0800e484 	.word	0x0800e484
 8008a20:	0800e484 	.word	0x0800e484
 8008a24:	0800e488 	.word	0x0800e488

08008a28 <memset>:
 8008a28:	0003      	movs	r3, r0
 8008a2a:	1882      	adds	r2, r0, r2
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d100      	bne.n	8008a32 <memset+0xa>
 8008a30:	4770      	bx	lr
 8008a32:	7019      	strb	r1, [r3, #0]
 8008a34:	3301      	adds	r3, #1
 8008a36:	e7f9      	b.n	8008a2c <memset+0x4>

08008a38 <__cvt>:
 8008a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3a:	001e      	movs	r6, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	0014      	movs	r4, r2
 8008a40:	b08b      	sub	sp, #44	; 0x2c
 8008a42:	429e      	cmp	r6, r3
 8008a44:	da04      	bge.n	8008a50 <__cvt+0x18>
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	0609      	lsls	r1, r1, #24
 8008a4a:	1873      	adds	r3, r6, r1
 8008a4c:	001e      	movs	r6, r3
 8008a4e:	232d      	movs	r3, #45	; 0x2d
 8008a50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a54:	7013      	strb	r3, [r2, #0]
 8008a56:	2320      	movs	r3, #32
 8008a58:	2203      	movs	r2, #3
 8008a5a:	439f      	bics	r7, r3
 8008a5c:	2f46      	cmp	r7, #70	; 0x46
 8008a5e:	d007      	beq.n	8008a70 <__cvt+0x38>
 8008a60:	003b      	movs	r3, r7
 8008a62:	3b45      	subs	r3, #69	; 0x45
 8008a64:	4259      	negs	r1, r3
 8008a66:	414b      	adcs	r3, r1
 8008a68:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	18cb      	adds	r3, r1, r3
 8008a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008a70:	ab09      	add	r3, sp, #36	; 0x24
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	ab08      	add	r3, sp, #32
 8008a76:	9303      	str	r3, [sp, #12]
 8008a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a7a:	9200      	str	r2, [sp, #0]
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a80:	0022      	movs	r2, r4
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	0033      	movs	r3, r6
 8008a86:	f001 fe83 	bl	800a790 <_dtoa_r>
 8008a8a:	0005      	movs	r5, r0
 8008a8c:	2f47      	cmp	r7, #71	; 0x47
 8008a8e:	d102      	bne.n	8008a96 <__cvt+0x5e>
 8008a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a92:	07db      	lsls	r3, r3, #31
 8008a94:	d528      	bpl.n	8008ae8 <__cvt+0xb0>
 8008a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a98:	18eb      	adds	r3, r5, r3
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	2f46      	cmp	r7, #70	; 0x46
 8008a9e:	d114      	bne.n	8008aca <__cvt+0x92>
 8008aa0:	782b      	ldrb	r3, [r5, #0]
 8008aa2:	2b30      	cmp	r3, #48	; 0x30
 8008aa4:	d10c      	bne.n	8008ac0 <__cvt+0x88>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	0020      	movs	r0, r4
 8008aac:	0031      	movs	r1, r6
 8008aae:	f7f7 fcd7 	bl	8000460 <__aeabi_dcmpeq>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d104      	bne.n	8008ac0 <__cvt+0x88>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ac2:	9a07      	ldr	r2, [sp, #28]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	18d3      	adds	r3, r2, r3
 8008ac8:	9307      	str	r3, [sp, #28]
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	0020      	movs	r0, r4
 8008ad0:	0031      	movs	r1, r6
 8008ad2:	f7f7 fcc5 	bl	8000460 <__aeabi_dcmpeq>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d001      	beq.n	8008ade <__cvt+0xa6>
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ade:	2230      	movs	r2, #48	; 0x30
 8008ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae2:	9907      	ldr	r1, [sp, #28]
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	d306      	bcc.n	8008af6 <__cvt+0xbe>
 8008ae8:	0028      	movs	r0, r5
 8008aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008aee:	1b5b      	subs	r3, r3, r5
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	b00b      	add	sp, #44	; 0x2c
 8008af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af6:	1c59      	adds	r1, r3, #1
 8008af8:	9109      	str	r1, [sp, #36]	; 0x24
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e7f0      	b.n	8008ae0 <__cvt+0xa8>

08008afe <__exponent>:
 8008afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b00:	1c83      	adds	r3, r0, #2
 8008b02:	b087      	sub	sp, #28
 8008b04:	9303      	str	r3, [sp, #12]
 8008b06:	0005      	movs	r5, r0
 8008b08:	000c      	movs	r4, r1
 8008b0a:	232b      	movs	r3, #43	; 0x2b
 8008b0c:	7002      	strb	r2, [r0, #0]
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	da01      	bge.n	8008b16 <__exponent+0x18>
 8008b12:	424c      	negs	r4, r1
 8008b14:	3302      	adds	r3, #2
 8008b16:	706b      	strb	r3, [r5, #1]
 8008b18:	2c09      	cmp	r4, #9
 8008b1a:	dd31      	ble.n	8008b80 <__exponent+0x82>
 8008b1c:	270a      	movs	r7, #10
 8008b1e:	ab04      	add	r3, sp, #16
 8008b20:	1dde      	adds	r6, r3, #7
 8008b22:	0020      	movs	r0, r4
 8008b24:	0039      	movs	r1, r7
 8008b26:	9601      	str	r6, [sp, #4]
 8008b28:	f7f7 fc84 	bl	8000434 <__aeabi_idivmod>
 8008b2c:	3e01      	subs	r6, #1
 8008b2e:	3130      	adds	r1, #48	; 0x30
 8008b30:	0020      	movs	r0, r4
 8008b32:	7031      	strb	r1, [r6, #0]
 8008b34:	0039      	movs	r1, r7
 8008b36:	9402      	str	r4, [sp, #8]
 8008b38:	f7f7 fb96 	bl	8000268 <__divsi3>
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	0004      	movs	r4, r0
 8008b40:	2b63      	cmp	r3, #99	; 0x63
 8008b42:	dcee      	bgt.n	8008b22 <__exponent+0x24>
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	3430      	adds	r4, #48	; 0x30
 8008b48:	1e9a      	subs	r2, r3, #2
 8008b4a:	0013      	movs	r3, r2
 8008b4c:	9903      	ldr	r1, [sp, #12]
 8008b4e:	7014      	strb	r4, [r2, #0]
 8008b50:	a804      	add	r0, sp, #16
 8008b52:	3007      	adds	r0, #7
 8008b54:	4298      	cmp	r0, r3
 8008b56:	d80e      	bhi.n	8008b76 <__exponent+0x78>
 8008b58:	ab04      	add	r3, sp, #16
 8008b5a:	3307      	adds	r3, #7
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d804      	bhi.n	8008b6c <__exponent+0x6e>
 8008b62:	ab04      	add	r3, sp, #16
 8008b64:	3009      	adds	r0, #9
 8008b66:	18c0      	adds	r0, r0, r3
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	1ac0      	subs	r0, r0, r3
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	1818      	adds	r0, r3, r0
 8008b70:	1b40      	subs	r0, r0, r5
 8008b72:	b007      	add	sp, #28
 8008b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b76:	7818      	ldrb	r0, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	7008      	strb	r0, [r1, #0]
 8008b7c:	3101      	adds	r1, #1
 8008b7e:	e7e7      	b.n	8008b50 <__exponent+0x52>
 8008b80:	2330      	movs	r3, #48	; 0x30
 8008b82:	18e4      	adds	r4, r4, r3
 8008b84:	70ab      	strb	r3, [r5, #2]
 8008b86:	1d28      	adds	r0, r5, #4
 8008b88:	70ec      	strb	r4, [r5, #3]
 8008b8a:	e7f1      	b.n	8008b70 <__exponent+0x72>

08008b8c <_printf_float>:
 8008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8e:	b095      	sub	sp, #84	; 0x54
 8008b90:	000c      	movs	r4, r1
 8008b92:	9208      	str	r2, [sp, #32]
 8008b94:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008b96:	9309      	str	r3, [sp, #36]	; 0x24
 8008b98:	0007      	movs	r7, r0
 8008b9a:	f002 ff89 	bl	800bab0 <_localeconv_r>
 8008b9e:	6803      	ldr	r3, [r0, #0]
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba4:	f7f7 faba 	bl	800011c <strlen>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9312      	str	r3, [sp, #72]	; 0x48
 8008bac:	7e23      	ldrb	r3, [r4, #24]
 8008bae:	2207      	movs	r2, #7
 8008bb0:	001e      	movs	r6, r3
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	900d      	str	r0, [sp, #52]	; 0x34
 8008bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	05c9      	lsls	r1, r1, #23
 8008bbe:	d547      	bpl.n	8008c50 <_printf_float+0xc4>
 8008bc0:	189b      	adds	r3, r3, r2
 8008bc2:	4393      	bics	r3, r2
 8008bc4:	001a      	movs	r2, r3
 8008bc6:	3208      	adds	r2, #8
 8008bc8:	602a      	str	r2, [r5, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	64a2      	str	r2, [r4, #72]	; 0x48
 8008bd0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008bd6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bda:	006b      	lsls	r3, r5, #1
 8008bdc:	085b      	lsrs	r3, r3, #1
 8008bde:	930e      	str	r3, [sp, #56]	; 0x38
 8008be0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008be2:	4ba8      	ldr	r3, [pc, #672]	; (8008e84 <_printf_float+0x2f8>)
 8008be4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008be6:	4252      	negs	r2, r2
 8008be8:	f7f9 fa46 	bl	8002078 <__aeabi_dcmpun>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d131      	bne.n	8008c54 <_printf_float+0xc8>
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	4ba4      	ldr	r3, [pc, #656]	; (8008e84 <_printf_float+0x2f8>)
 8008bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008bf6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008bf8:	4252      	negs	r2, r2
 8008bfa:	f7f7 fc41 	bl	8000480 <__aeabi_dcmple>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d128      	bne.n	8008c54 <_printf_float+0xc8>
 8008c02:	2200      	movs	r2, #0
 8008c04:	2300      	movs	r3, #0
 8008c06:	0029      	movs	r1, r5
 8008c08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c0a:	f7f7 fc2f 	bl	800046c <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d003      	beq.n	8008c1a <_printf_float+0x8e>
 8008c12:	0023      	movs	r3, r4
 8008c14:	222d      	movs	r2, #45	; 0x2d
 8008c16:	3343      	adds	r3, #67	; 0x43
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	4d9b      	ldr	r5, [pc, #620]	; (8008e88 <_printf_float+0x2fc>)
 8008c1c:	2e47      	cmp	r6, #71	; 0x47
 8008c1e:	d900      	bls.n	8008c22 <_printf_float+0x96>
 8008c20:	4d9a      	ldr	r5, [pc, #616]	; (8008e8c <_printf_float+0x300>)
 8008c22:	2303      	movs	r3, #3
 8008c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	439a      	bics	r2, r3
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	930a      	str	r3, [sp, #40]	; 0x28
 8008c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c34:	0021      	movs	r1, r4
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	0038      	movs	r0, r7
 8008c3a:	9b08      	ldr	r3, [sp, #32]
 8008c3c:	aa13      	add	r2, sp, #76	; 0x4c
 8008c3e:	f000 f9f3 	bl	8009028 <_printf_common>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	d000      	beq.n	8008c48 <_printf_float+0xbc>
 8008c46:	e09e      	b.n	8008d86 <_printf_float+0x1fa>
 8008c48:	2001      	movs	r0, #1
 8008c4a:	4240      	negs	r0, r0
 8008c4c:	b015      	add	sp, #84	; 0x54
 8008c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c50:	3307      	adds	r3, #7
 8008c52:	e7b6      	b.n	8008bc2 <_printf_float+0x36>
 8008c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c56:	002b      	movs	r3, r5
 8008c58:	0010      	movs	r0, r2
 8008c5a:	0029      	movs	r1, r5
 8008c5c:	f7f9 fa0c 	bl	8002078 <__aeabi_dcmpun>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d00a      	beq.n	8008c7a <_printf_float+0xee>
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	da03      	bge.n	8008c70 <_printf_float+0xe4>
 8008c68:	0023      	movs	r3, r4
 8008c6a:	222d      	movs	r2, #45	; 0x2d
 8008c6c:	3343      	adds	r3, #67	; 0x43
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	4d87      	ldr	r5, [pc, #540]	; (8008e90 <_printf_float+0x304>)
 8008c72:	2e47      	cmp	r6, #71	; 0x47
 8008c74:	d9d5      	bls.n	8008c22 <_printf_float+0x96>
 8008c76:	4d87      	ldr	r5, [pc, #540]	; (8008e94 <_printf_float+0x308>)
 8008c78:	e7d3      	b.n	8008c22 <_printf_float+0x96>
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	0031      	movs	r1, r6
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	4391      	bics	r1, r2
 8008c82:	910e      	str	r1, [sp, #56]	; 0x38
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	d147      	bne.n	8008d18 <_printf_float+0x18c>
 8008c88:	3307      	adds	r3, #7
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	2380      	movs	r3, #128	; 0x80
 8008c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	2200      	movs	r2, #0
 8008c96:	9206      	str	r2, [sp, #24]
 8008c98:	aa12      	add	r2, sp, #72	; 0x48
 8008c9a:	9205      	str	r2, [sp, #20]
 8008c9c:	aa11      	add	r2, sp, #68	; 0x44
 8008c9e:	9203      	str	r2, [sp, #12]
 8008ca0:	2223      	movs	r2, #35	; 0x23
 8008ca2:	a908      	add	r1, sp, #32
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	1852      	adds	r2, r2, r1
 8008cac:	9202      	str	r2, [sp, #8]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	0038      	movs	r0, r7
 8008cb2:	002b      	movs	r3, r5
 8008cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb6:	9604      	str	r6, [sp, #16]
 8008cb8:	f7ff febe 	bl	8008a38 <__cvt>
 8008cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cbe:	0005      	movs	r5, r0
 8008cc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cc2:	2b47      	cmp	r3, #71	; 0x47
 8008cc4:	d108      	bne.n	8008cd8 <_printf_float+0x14c>
 8008cc6:	1ccb      	adds	r3, r1, #3
 8008cc8:	db02      	blt.n	8008cd0 <_printf_float+0x144>
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	dd46      	ble.n	8008d5e <_printf_float+0x1d2>
 8008cd0:	0033      	movs	r3, r6
 8008cd2:	3b02      	subs	r3, #2
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	001e      	movs	r6, r3
 8008cd8:	2e65      	cmp	r6, #101	; 0x65
 8008cda:	d824      	bhi.n	8008d26 <_printf_float+0x19a>
 8008cdc:	0020      	movs	r0, r4
 8008cde:	0032      	movs	r2, r6
 8008ce0:	3901      	subs	r1, #1
 8008ce2:	3050      	adds	r0, #80	; 0x50
 8008ce4:	9111      	str	r1, [sp, #68]	; 0x44
 8008ce6:	f7ff ff0a 	bl	8008afe <__exponent>
 8008cea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cec:	900a      	str	r0, [sp, #40]	; 0x28
 8008cee:	1813      	adds	r3, r2, r0
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	2a01      	cmp	r2, #1
 8008cf4:	dc02      	bgt.n	8008cfc <_printf_float+0x170>
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	07d2      	lsls	r2, r2, #31
 8008cfa:	d501      	bpl.n	8008d00 <_printf_float+0x174>
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	2323      	movs	r3, #35	; 0x23
 8008d02:	aa08      	add	r2, sp, #32
 8008d04:	189b      	adds	r3, r3, r2
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d100      	bne.n	8008d0e <_printf_float+0x182>
 8008d0c:	e791      	b.n	8008c32 <_printf_float+0xa6>
 8008d0e:	0023      	movs	r3, r4
 8008d10:	222d      	movs	r2, #45	; 0x2d
 8008d12:	3343      	adds	r3, #67	; 0x43
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e78c      	b.n	8008c32 <_printf_float+0xa6>
 8008d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d1a:	2a47      	cmp	r2, #71	; 0x47
 8008d1c:	d1b6      	bne.n	8008c8c <_printf_float+0x100>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1b4      	bne.n	8008c8c <_printf_float+0x100>
 8008d22:	3301      	adds	r3, #1
 8008d24:	e7b1      	b.n	8008c8a <_printf_float+0xfe>
 8008d26:	2e66      	cmp	r6, #102	; 0x66
 8008d28:	d11b      	bne.n	8008d62 <_printf_float+0x1d6>
 8008d2a:	6863      	ldr	r3, [r4, #4]
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	dd0d      	ble.n	8008d4c <_printf_float+0x1c0>
 8008d30:	6121      	str	r1, [r4, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <_printf_float+0x1b0>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	07d2      	lsls	r2, r2, #31
 8008d3a:	d502      	bpl.n	8008d42 <_printf_float+0x1b6>
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	1859      	adds	r1, r3, r1
 8008d40:	6121      	str	r1, [r4, #16]
 8008d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d44:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d46:	2300      	movs	r3, #0
 8008d48:	930a      	str	r3, [sp, #40]	; 0x28
 8008d4a:	e7d9      	b.n	8008d00 <_printf_float+0x174>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <_printf_float+0x1cc>
 8008d50:	2201      	movs	r2, #1
 8008d52:	6821      	ldr	r1, [r4, #0]
 8008d54:	4211      	tst	r1, r2
 8008d56:	d000      	beq.n	8008d5a <_printf_float+0x1ce>
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	6122      	str	r2, [r4, #16]
 8008d5c:	e7f1      	b.n	8008d42 <_printf_float+0x1b6>
 8008d5e:	2367      	movs	r3, #103	; 0x67
 8008d60:	001e      	movs	r6, r3
 8008d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d66:	4293      	cmp	r3, r2
 8008d68:	db06      	blt.n	8008d78 <_printf_float+0x1ec>
 8008d6a:	6822      	ldr	r2, [r4, #0]
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	07d2      	lsls	r2, r2, #31
 8008d70:	d5e7      	bpl.n	8008d42 <_printf_float+0x1b6>
 8008d72:	3301      	adds	r3, #1
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	e7e4      	b.n	8008d42 <_printf_float+0x1b6>
 8008d78:	2101      	movs	r1, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dc01      	bgt.n	8008d82 <_printf_float+0x1f6>
 8008d7e:	1849      	adds	r1, r1, r1
 8008d80:	1ac9      	subs	r1, r1, r3
 8008d82:	1852      	adds	r2, r2, r1
 8008d84:	e7e9      	b.n	8008d5a <_printf_float+0x1ce>
 8008d86:	6822      	ldr	r2, [r4, #0]
 8008d88:	0553      	lsls	r3, r2, #21
 8008d8a:	d408      	bmi.n	8008d9e <_printf_float+0x212>
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	002a      	movs	r2, r5
 8008d90:	0038      	movs	r0, r7
 8008d92:	9908      	ldr	r1, [sp, #32]
 8008d94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d96:	47a8      	blx	r5
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d129      	bne.n	8008df0 <_printf_float+0x264>
 8008d9c:	e754      	b.n	8008c48 <_printf_float+0xbc>
 8008d9e:	2e65      	cmp	r6, #101	; 0x65
 8008da0:	d800      	bhi.n	8008da4 <_printf_float+0x218>
 8008da2:	e0ec      	b.n	8008f7e <_printf_float+0x3f2>
 8008da4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008da6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008da8:	2200      	movs	r2, #0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f7f7 fb58 	bl	8000460 <__aeabi_dcmpeq>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d034      	beq.n	8008e1e <_printf_float+0x292>
 8008db4:	2301      	movs	r3, #1
 8008db6:	0038      	movs	r0, r7
 8008db8:	4a37      	ldr	r2, [pc, #220]	; (8008e98 <_printf_float+0x30c>)
 8008dba:	9908      	ldr	r1, [sp, #32]
 8008dbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dbe:	47a8      	blx	r5
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d100      	bne.n	8008dc6 <_printf_float+0x23a>
 8008dc4:	e740      	b.n	8008c48 <_printf_float+0xbc>
 8008dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	db02      	blt.n	8008dd4 <_printf_float+0x248>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	07db      	lsls	r3, r3, #31
 8008dd2:	d50d      	bpl.n	8008df0 <_printf_float+0x264>
 8008dd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dd6:	0038      	movs	r0, r7
 8008dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ddc:	9908      	ldr	r1, [sp, #32]
 8008dde:	47a8      	blx	r5
 8008de0:	2500      	movs	r5, #0
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d100      	bne.n	8008de8 <_printf_float+0x25c>
 8008de6:	e72f      	b.n	8008c48 <_printf_float+0xbc>
 8008de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dea:	3b01      	subs	r3, #1
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc0a      	bgt.n	8008e06 <_printf_float+0x27a>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	079b      	lsls	r3, r3, #30
 8008df4:	d500      	bpl.n	8008df8 <_printf_float+0x26c>
 8008df6:	e114      	b.n	8009022 <_printf_float+0x496>
 8008df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dfa:	68e0      	ldr	r0, [r4, #12]
 8008dfc:	4298      	cmp	r0, r3
 8008dfe:	db00      	blt.n	8008e02 <_printf_float+0x276>
 8008e00:	e724      	b.n	8008c4c <_printf_float+0xc0>
 8008e02:	0018      	movs	r0, r3
 8008e04:	e722      	b.n	8008c4c <_printf_float+0xc0>
 8008e06:	0022      	movs	r2, r4
 8008e08:	2301      	movs	r3, #1
 8008e0a:	0038      	movs	r0, r7
 8008e0c:	9908      	ldr	r1, [sp, #32]
 8008e0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e10:	321a      	adds	r2, #26
 8008e12:	47b0      	blx	r6
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d100      	bne.n	8008e1a <_printf_float+0x28e>
 8008e18:	e716      	b.n	8008c48 <_printf_float+0xbc>
 8008e1a:	3501      	adds	r5, #1
 8008e1c:	e7e4      	b.n	8008de8 <_printf_float+0x25c>
 8008e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dc3b      	bgt.n	8008e9c <_printf_float+0x310>
 8008e24:	2301      	movs	r3, #1
 8008e26:	0038      	movs	r0, r7
 8008e28:	4a1b      	ldr	r2, [pc, #108]	; (8008e98 <_printf_float+0x30c>)
 8008e2a:	9908      	ldr	r1, [sp, #32]
 8008e2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e2e:	47b0      	blx	r6
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d100      	bne.n	8008e36 <_printf_float+0x2aa>
 8008e34:	e708      	b.n	8008c48 <_printf_float+0xbc>
 8008e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d102      	bne.n	8008e44 <_printf_float+0x2b8>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	07db      	lsls	r3, r3, #31
 8008e42:	d5d5      	bpl.n	8008df0 <_printf_float+0x264>
 8008e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e46:	0038      	movs	r0, r7
 8008e48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e4a:	9908      	ldr	r1, [sp, #32]
 8008e4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e4e:	47b0      	blx	r6
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d100      	bne.n	8008e56 <_printf_float+0x2ca>
 8008e54:	e6f8      	b.n	8008c48 <_printf_float+0xbc>
 8008e56:	2300      	movs	r3, #0
 8008e58:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e5e:	425b      	negs	r3, r3
 8008e60:	4293      	cmp	r3, r2
 8008e62:	dc01      	bgt.n	8008e68 <_printf_float+0x2dc>
 8008e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e66:	e792      	b.n	8008d8e <_printf_float+0x202>
 8008e68:	0022      	movs	r2, r4
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	0038      	movs	r0, r7
 8008e6e:	9908      	ldr	r1, [sp, #32]
 8008e70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e72:	321a      	adds	r2, #26
 8008e74:	47b0      	blx	r6
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d100      	bne.n	8008e7c <_printf_float+0x2f0>
 8008e7a:	e6e5      	b.n	8008c48 <_printf_float+0xbc>
 8008e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7e:	3301      	adds	r3, #1
 8008e80:	e7ea      	b.n	8008e58 <_printf_float+0x2cc>
 8008e82:	46c0      	nop			; (mov r8, r8)
 8008e84:	7fefffff 	.word	0x7fefffff
 8008e88:	0800dfbc 	.word	0x0800dfbc
 8008e8c:	0800dfc0 	.word	0x0800dfc0
 8008e90:	0800dfc4 	.word	0x0800dfc4
 8008e94:	0800dfc8 	.word	0x0800dfc8
 8008e98:	0800e3d1 	.word	0x0800e3d1
 8008e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ea0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	dd00      	ble.n	8008ea8 <_printf_float+0x31c>
 8008ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dc3d      	bgt.n	8008f2a <_printf_float+0x39e>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8008eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	17db      	asrs	r3, r3, #31
 8008eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ebc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	dc36      	bgt.n	8008f3c <_printf_float+0x3b0>
 8008ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	db40      	blt.n	8008f58 <_printf_float+0x3cc>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	07db      	lsls	r3, r3, #31
 8008eda:	d43d      	bmi.n	8008f58 <_printf_float+0x3cc>
 8008edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ee0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	1a52      	subs	r2, r2, r1
 8008ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	dd00      	ble.n	8008eee <_printf_float+0x362>
 8008eec:	930a      	str	r3, [sp, #40]	; 0x28
 8008eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dc3a      	bgt.n	8008f6a <_printf_float+0x3de>
 8008ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	17db      	asrs	r3, r3, #31
 8008efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008efe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f08:	400a      	ands	r2, r1
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	42ab      	cmp	r3, r5
 8008f0e:	dc00      	bgt.n	8008f12 <_printf_float+0x386>
 8008f10:	e76e      	b.n	8008df0 <_printf_float+0x264>
 8008f12:	0022      	movs	r2, r4
 8008f14:	2301      	movs	r3, #1
 8008f16:	0038      	movs	r0, r7
 8008f18:	9908      	ldr	r1, [sp, #32]
 8008f1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f1c:	321a      	adds	r2, #26
 8008f1e:	47b0      	blx	r6
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d100      	bne.n	8008f26 <_printf_float+0x39a>
 8008f24:	e690      	b.n	8008c48 <_printf_float+0xbc>
 8008f26:	3501      	adds	r5, #1
 8008f28:	e7e9      	b.n	8008efe <_printf_float+0x372>
 8008f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2c:	002a      	movs	r2, r5
 8008f2e:	0038      	movs	r0, r7
 8008f30:	9908      	ldr	r1, [sp, #32]
 8008f32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f34:	47b0      	blx	r6
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	d1b9      	bne.n	8008eae <_printf_float+0x322>
 8008f3a:	e685      	b.n	8008c48 <_printf_float+0xbc>
 8008f3c:	0022      	movs	r2, r4
 8008f3e:	2301      	movs	r3, #1
 8008f40:	0038      	movs	r0, r7
 8008f42:	9908      	ldr	r1, [sp, #32]
 8008f44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f46:	321a      	adds	r2, #26
 8008f48:	47b0      	blx	r6
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d100      	bne.n	8008f50 <_printf_float+0x3c4>
 8008f4e:	e67b      	b.n	8008c48 <_printf_float+0xbc>
 8008f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f52:	3301      	adds	r3, #1
 8008f54:	930e      	str	r3, [sp, #56]	; 0x38
 8008f56:	e7b0      	b.n	8008eba <_printf_float+0x32e>
 8008f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f5a:	0038      	movs	r0, r7
 8008f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f5e:	9908      	ldr	r1, [sp, #32]
 8008f60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f62:	47b0      	blx	r6
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d1b9      	bne.n	8008edc <_printf_float+0x350>
 8008f68:	e66e      	b.n	8008c48 <_printf_float+0xbc>
 8008f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f6c:	0038      	movs	r0, r7
 8008f6e:	18ea      	adds	r2, r5, r3
 8008f70:	9908      	ldr	r1, [sp, #32]
 8008f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f76:	47a8      	blx	r5
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d1bb      	bne.n	8008ef4 <_printf_float+0x368>
 8008f7c:	e664      	b.n	8008c48 <_printf_float+0xbc>
 8008f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	dc02      	bgt.n	8008f8a <_printf_float+0x3fe>
 8008f84:	2301      	movs	r3, #1
 8008f86:	421a      	tst	r2, r3
 8008f88:	d038      	beq.n	8008ffc <_printf_float+0x470>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	002a      	movs	r2, r5
 8008f8e:	0038      	movs	r0, r7
 8008f90:	9908      	ldr	r1, [sp, #32]
 8008f92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f94:	47b0      	blx	r6
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d100      	bne.n	8008f9c <_printf_float+0x410>
 8008f9a:	e655      	b.n	8008c48 <_printf_float+0xbc>
 8008f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f9e:	0038      	movs	r0, r7
 8008fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fa2:	9908      	ldr	r1, [sp, #32]
 8008fa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fa6:	47b0      	blx	r6
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d100      	bne.n	8008fae <_printf_float+0x422>
 8008fac:	e64c      	b.n	8008c48 <_printf_float+0xbc>
 8008fae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008fb0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f7f7 fa53 	bl	8000460 <__aeabi_dcmpeq>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d11c      	bne.n	8008ff8 <_printf_float+0x46c>
 8008fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fc0:	1c6a      	adds	r2, r5, #1
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	0038      	movs	r0, r7
 8008fc6:	9908      	ldr	r1, [sp, #32]
 8008fc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fca:	47a8      	blx	r5
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d10f      	bne.n	8008ff0 <_printf_float+0x464>
 8008fd0:	e63a      	b.n	8008c48 <_printf_float+0xbc>
 8008fd2:	0022      	movs	r2, r4
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	0038      	movs	r0, r7
 8008fd8:	9908      	ldr	r1, [sp, #32]
 8008fda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fdc:	321a      	adds	r2, #26
 8008fde:	47b0      	blx	r6
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d100      	bne.n	8008fe6 <_printf_float+0x45a>
 8008fe4:	e630      	b.n	8008c48 <_printf_float+0xbc>
 8008fe6:	3501      	adds	r5, #1
 8008fe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fea:	3b01      	subs	r3, #1
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	dcf0      	bgt.n	8008fd2 <_printf_float+0x446>
 8008ff0:	0022      	movs	r2, r4
 8008ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff4:	3250      	adds	r2, #80	; 0x50
 8008ff6:	e6cb      	b.n	8008d90 <_printf_float+0x204>
 8008ff8:	2500      	movs	r5, #0
 8008ffa:	e7f5      	b.n	8008fe8 <_printf_float+0x45c>
 8008ffc:	002a      	movs	r2, r5
 8008ffe:	e7e1      	b.n	8008fc4 <_printf_float+0x438>
 8009000:	0022      	movs	r2, r4
 8009002:	2301      	movs	r3, #1
 8009004:	0038      	movs	r0, r7
 8009006:	9908      	ldr	r1, [sp, #32]
 8009008:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800900a:	3219      	adds	r2, #25
 800900c:	47b0      	blx	r6
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	d100      	bne.n	8009014 <_printf_float+0x488>
 8009012:	e619      	b.n	8008c48 <_printf_float+0xbc>
 8009014:	3501      	adds	r5, #1
 8009016:	68e3      	ldr	r3, [r4, #12]
 8009018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	42ab      	cmp	r3, r5
 800901e:	dcef      	bgt.n	8009000 <_printf_float+0x474>
 8009020:	e6ea      	b.n	8008df8 <_printf_float+0x26c>
 8009022:	2500      	movs	r5, #0
 8009024:	e7f7      	b.n	8009016 <_printf_float+0x48a>
 8009026:	46c0      	nop			; (mov r8, r8)

08009028 <_printf_common>:
 8009028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800902a:	0015      	movs	r5, r2
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	688a      	ldr	r2, [r1, #8]
 8009030:	690b      	ldr	r3, [r1, #16]
 8009032:	000c      	movs	r4, r1
 8009034:	9000      	str	r0, [sp, #0]
 8009036:	4293      	cmp	r3, r2
 8009038:	da00      	bge.n	800903c <_printf_common+0x14>
 800903a:	0013      	movs	r3, r2
 800903c:	0022      	movs	r2, r4
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	3243      	adds	r2, #67	; 0x43
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	2a00      	cmp	r2, #0
 8009046:	d001      	beq.n	800904c <_printf_common+0x24>
 8009048:	3301      	adds	r3, #1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	069b      	lsls	r3, r3, #26
 8009050:	d502      	bpl.n	8009058 <_printf_common+0x30>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	3302      	adds	r3, #2
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	2306      	movs	r3, #6
 800905c:	0017      	movs	r7, r2
 800905e:	401f      	ands	r7, r3
 8009060:	421a      	tst	r2, r3
 8009062:	d027      	beq.n	80090b4 <_printf_common+0x8c>
 8009064:	0023      	movs	r3, r4
 8009066:	3343      	adds	r3, #67	; 0x43
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	1e5a      	subs	r2, r3, #1
 800906c:	4193      	sbcs	r3, r2
 800906e:	6822      	ldr	r2, [r4, #0]
 8009070:	0692      	lsls	r2, r2, #26
 8009072:	d430      	bmi.n	80090d6 <_printf_common+0xae>
 8009074:	0022      	movs	r2, r4
 8009076:	9901      	ldr	r1, [sp, #4]
 8009078:	9800      	ldr	r0, [sp, #0]
 800907a:	9e08      	ldr	r6, [sp, #32]
 800907c:	3243      	adds	r2, #67	; 0x43
 800907e:	47b0      	blx	r6
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d025      	beq.n	80090d0 <_printf_common+0xa8>
 8009084:	2306      	movs	r3, #6
 8009086:	6820      	ldr	r0, [r4, #0]
 8009088:	682a      	ldr	r2, [r5, #0]
 800908a:	68e1      	ldr	r1, [r4, #12]
 800908c:	2500      	movs	r5, #0
 800908e:	4003      	ands	r3, r0
 8009090:	2b04      	cmp	r3, #4
 8009092:	d103      	bne.n	800909c <_printf_common+0x74>
 8009094:	1a8d      	subs	r5, r1, r2
 8009096:	43eb      	mvns	r3, r5
 8009098:	17db      	asrs	r3, r3, #31
 800909a:	401d      	ands	r5, r3
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	6922      	ldr	r2, [r4, #16]
 80090a0:	4293      	cmp	r3, r2
 80090a2:	dd01      	ble.n	80090a8 <_printf_common+0x80>
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	18ed      	adds	r5, r5, r3
 80090a8:	2700      	movs	r7, #0
 80090aa:	42bd      	cmp	r5, r7
 80090ac:	d120      	bne.n	80090f0 <_printf_common+0xc8>
 80090ae:	2000      	movs	r0, #0
 80090b0:	e010      	b.n	80090d4 <_printf_common+0xac>
 80090b2:	3701      	adds	r7, #1
 80090b4:	68e3      	ldr	r3, [r4, #12]
 80090b6:	682a      	ldr	r2, [r5, #0]
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	42bb      	cmp	r3, r7
 80090bc:	ddd2      	ble.n	8009064 <_printf_common+0x3c>
 80090be:	0022      	movs	r2, r4
 80090c0:	2301      	movs	r3, #1
 80090c2:	9901      	ldr	r1, [sp, #4]
 80090c4:	9800      	ldr	r0, [sp, #0]
 80090c6:	9e08      	ldr	r6, [sp, #32]
 80090c8:	3219      	adds	r2, #25
 80090ca:	47b0      	blx	r6
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d1f0      	bne.n	80090b2 <_printf_common+0x8a>
 80090d0:	2001      	movs	r0, #1
 80090d2:	4240      	negs	r0, r0
 80090d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090d6:	2030      	movs	r0, #48	; 0x30
 80090d8:	18e1      	adds	r1, r4, r3
 80090da:	3143      	adds	r1, #67	; 0x43
 80090dc:	7008      	strb	r0, [r1, #0]
 80090de:	0021      	movs	r1, r4
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	3145      	adds	r1, #69	; 0x45
 80090e4:	7809      	ldrb	r1, [r1, #0]
 80090e6:	18a2      	adds	r2, r4, r2
 80090e8:	3243      	adds	r2, #67	; 0x43
 80090ea:	3302      	adds	r3, #2
 80090ec:	7011      	strb	r1, [r2, #0]
 80090ee:	e7c1      	b.n	8009074 <_printf_common+0x4c>
 80090f0:	0022      	movs	r2, r4
 80090f2:	2301      	movs	r3, #1
 80090f4:	9901      	ldr	r1, [sp, #4]
 80090f6:	9800      	ldr	r0, [sp, #0]
 80090f8:	9e08      	ldr	r6, [sp, #32]
 80090fa:	321a      	adds	r2, #26
 80090fc:	47b0      	blx	r6
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d0e6      	beq.n	80090d0 <_printf_common+0xa8>
 8009102:	3701      	adds	r7, #1
 8009104:	e7d1      	b.n	80090aa <_printf_common+0x82>
	...

08009108 <_printf_i>:
 8009108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910a:	b08b      	sub	sp, #44	; 0x2c
 800910c:	9206      	str	r2, [sp, #24]
 800910e:	000a      	movs	r2, r1
 8009110:	3243      	adds	r2, #67	; 0x43
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	9005      	str	r0, [sp, #20]
 8009116:	9204      	str	r2, [sp, #16]
 8009118:	7e0a      	ldrb	r2, [r1, #24]
 800911a:	000c      	movs	r4, r1
 800911c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800911e:	2a78      	cmp	r2, #120	; 0x78
 8009120:	d806      	bhi.n	8009130 <_printf_i+0x28>
 8009122:	2a62      	cmp	r2, #98	; 0x62
 8009124:	d808      	bhi.n	8009138 <_printf_i+0x30>
 8009126:	2a00      	cmp	r2, #0
 8009128:	d100      	bne.n	800912c <_printf_i+0x24>
 800912a:	e0c0      	b.n	80092ae <_printf_i+0x1a6>
 800912c:	2a58      	cmp	r2, #88	; 0x58
 800912e:	d052      	beq.n	80091d6 <_printf_i+0xce>
 8009130:	0026      	movs	r6, r4
 8009132:	3642      	adds	r6, #66	; 0x42
 8009134:	7032      	strb	r2, [r6, #0]
 8009136:	e022      	b.n	800917e <_printf_i+0x76>
 8009138:	0010      	movs	r0, r2
 800913a:	3863      	subs	r0, #99	; 0x63
 800913c:	2815      	cmp	r0, #21
 800913e:	d8f7      	bhi.n	8009130 <_printf_i+0x28>
 8009140:	f7f6 fffe 	bl	8000140 <__gnu_thumb1_case_shi>
 8009144:	001f0016 	.word	0x001f0016
 8009148:	fff6fff6 	.word	0xfff6fff6
 800914c:	fff6fff6 	.word	0xfff6fff6
 8009150:	fff6001f 	.word	0xfff6001f
 8009154:	fff6fff6 	.word	0xfff6fff6
 8009158:	00a8fff6 	.word	0x00a8fff6
 800915c:	009a0036 	.word	0x009a0036
 8009160:	fff6fff6 	.word	0xfff6fff6
 8009164:	fff600b9 	.word	0xfff600b9
 8009168:	fff60036 	.word	0xfff60036
 800916c:	009efff6 	.word	0x009efff6
 8009170:	0026      	movs	r6, r4
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	3642      	adds	r6, #66	; 0x42
 8009176:	1d11      	adds	r1, r2, #4
 8009178:	6019      	str	r1, [r3, #0]
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	7033      	strb	r3, [r6, #0]
 800917e:	2301      	movs	r3, #1
 8009180:	e0a7      	b.n	80092d2 <_printf_i+0x1ca>
 8009182:	6808      	ldr	r0, [r1, #0]
 8009184:	6819      	ldr	r1, [r3, #0]
 8009186:	1d0a      	adds	r2, r1, #4
 8009188:	0605      	lsls	r5, r0, #24
 800918a:	d50b      	bpl.n	80091a4 <_printf_i+0x9c>
 800918c:	680d      	ldr	r5, [r1, #0]
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	2d00      	cmp	r5, #0
 8009192:	da03      	bge.n	800919c <_printf_i+0x94>
 8009194:	232d      	movs	r3, #45	; 0x2d
 8009196:	9a04      	ldr	r2, [sp, #16]
 8009198:	426d      	negs	r5, r5
 800919a:	7013      	strb	r3, [r2, #0]
 800919c:	4b61      	ldr	r3, [pc, #388]	; (8009324 <_printf_i+0x21c>)
 800919e:	270a      	movs	r7, #10
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	e032      	b.n	800920a <_printf_i+0x102>
 80091a4:	680d      	ldr	r5, [r1, #0]
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	0641      	lsls	r1, r0, #25
 80091aa:	d5f1      	bpl.n	8009190 <_printf_i+0x88>
 80091ac:	b22d      	sxth	r5, r5
 80091ae:	e7ef      	b.n	8009190 <_printf_i+0x88>
 80091b0:	680d      	ldr	r5, [r1, #0]
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	1d08      	adds	r0, r1, #4
 80091b6:	6018      	str	r0, [r3, #0]
 80091b8:	062e      	lsls	r6, r5, #24
 80091ba:	d501      	bpl.n	80091c0 <_printf_i+0xb8>
 80091bc:	680d      	ldr	r5, [r1, #0]
 80091be:	e003      	b.n	80091c8 <_printf_i+0xc0>
 80091c0:	066d      	lsls	r5, r5, #25
 80091c2:	d5fb      	bpl.n	80091bc <_printf_i+0xb4>
 80091c4:	680d      	ldr	r5, [r1, #0]
 80091c6:	b2ad      	uxth	r5, r5
 80091c8:	4b56      	ldr	r3, [pc, #344]	; (8009324 <_printf_i+0x21c>)
 80091ca:	270a      	movs	r7, #10
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	2a6f      	cmp	r2, #111	; 0x6f
 80091d0:	d117      	bne.n	8009202 <_printf_i+0xfa>
 80091d2:	2708      	movs	r7, #8
 80091d4:	e015      	b.n	8009202 <_printf_i+0xfa>
 80091d6:	3145      	adds	r1, #69	; 0x45
 80091d8:	700a      	strb	r2, [r1, #0]
 80091da:	4a52      	ldr	r2, [pc, #328]	; (8009324 <_printf_i+0x21c>)
 80091dc:	9203      	str	r2, [sp, #12]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	6821      	ldr	r1, [r4, #0]
 80091e2:	ca20      	ldmia	r2!, {r5}
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	0608      	lsls	r0, r1, #24
 80091e8:	d550      	bpl.n	800928c <_printf_i+0x184>
 80091ea:	07cb      	lsls	r3, r1, #31
 80091ec:	d502      	bpl.n	80091f4 <_printf_i+0xec>
 80091ee:	2320      	movs	r3, #32
 80091f0:	4319      	orrs	r1, r3
 80091f2:	6021      	str	r1, [r4, #0]
 80091f4:	2710      	movs	r7, #16
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	d103      	bne.n	8009202 <_printf_i+0xfa>
 80091fa:	2320      	movs	r3, #32
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	439a      	bics	r2, r3
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	0023      	movs	r3, r4
 8009204:	2200      	movs	r2, #0
 8009206:	3343      	adds	r3, #67	; 0x43
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	6863      	ldr	r3, [r4, #4]
 800920c:	60a3      	str	r3, [r4, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	db03      	blt.n	800921a <_printf_i+0x112>
 8009212:	2204      	movs	r2, #4
 8009214:	6821      	ldr	r1, [r4, #0]
 8009216:	4391      	bics	r1, r2
 8009218:	6021      	str	r1, [r4, #0]
 800921a:	2d00      	cmp	r5, #0
 800921c:	d102      	bne.n	8009224 <_printf_i+0x11c>
 800921e:	9e04      	ldr	r6, [sp, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00c      	beq.n	800923e <_printf_i+0x136>
 8009224:	9e04      	ldr	r6, [sp, #16]
 8009226:	0028      	movs	r0, r5
 8009228:	0039      	movs	r1, r7
 800922a:	f7f7 f819 	bl	8000260 <__aeabi_uidivmod>
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	3e01      	subs	r6, #1
 8009232:	5c5b      	ldrb	r3, [r3, r1]
 8009234:	7033      	strb	r3, [r6, #0]
 8009236:	002b      	movs	r3, r5
 8009238:	0005      	movs	r5, r0
 800923a:	429f      	cmp	r7, r3
 800923c:	d9f3      	bls.n	8009226 <_printf_i+0x11e>
 800923e:	2f08      	cmp	r7, #8
 8009240:	d109      	bne.n	8009256 <_printf_i+0x14e>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	07db      	lsls	r3, r3, #31
 8009246:	d506      	bpl.n	8009256 <_printf_i+0x14e>
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	6922      	ldr	r2, [r4, #16]
 800924c:	4293      	cmp	r3, r2
 800924e:	dc02      	bgt.n	8009256 <_printf_i+0x14e>
 8009250:	2330      	movs	r3, #48	; 0x30
 8009252:	3e01      	subs	r6, #1
 8009254:	7033      	strb	r3, [r6, #0]
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	1b9b      	subs	r3, r3, r6
 800925a:	6123      	str	r3, [r4, #16]
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	0021      	movs	r1, r4
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	9805      	ldr	r0, [sp, #20]
 8009264:	9b06      	ldr	r3, [sp, #24]
 8009266:	aa09      	add	r2, sp, #36	; 0x24
 8009268:	f7ff fede 	bl	8009028 <_printf_common>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d135      	bne.n	80092dc <_printf_i+0x1d4>
 8009270:	2001      	movs	r0, #1
 8009272:	4240      	negs	r0, r0
 8009274:	b00b      	add	sp, #44	; 0x2c
 8009276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009278:	2220      	movs	r2, #32
 800927a:	6809      	ldr	r1, [r1, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	0022      	movs	r2, r4
 8009282:	2178      	movs	r1, #120	; 0x78
 8009284:	3245      	adds	r2, #69	; 0x45
 8009286:	7011      	strb	r1, [r2, #0]
 8009288:	4a27      	ldr	r2, [pc, #156]	; (8009328 <_printf_i+0x220>)
 800928a:	e7a7      	b.n	80091dc <_printf_i+0xd4>
 800928c:	0648      	lsls	r0, r1, #25
 800928e:	d5ac      	bpl.n	80091ea <_printf_i+0xe2>
 8009290:	b2ad      	uxth	r5, r5
 8009292:	e7aa      	b.n	80091ea <_printf_i+0xe2>
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	680d      	ldr	r5, [r1, #0]
 8009298:	1d10      	adds	r0, r2, #4
 800929a:	6949      	ldr	r1, [r1, #20]
 800929c:	6018      	str	r0, [r3, #0]
 800929e:	6813      	ldr	r3, [r2, #0]
 80092a0:	062e      	lsls	r6, r5, #24
 80092a2:	d501      	bpl.n	80092a8 <_printf_i+0x1a0>
 80092a4:	6019      	str	r1, [r3, #0]
 80092a6:	e002      	b.n	80092ae <_printf_i+0x1a6>
 80092a8:	066d      	lsls	r5, r5, #25
 80092aa:	d5fb      	bpl.n	80092a4 <_printf_i+0x19c>
 80092ac:	8019      	strh	r1, [r3, #0]
 80092ae:	2300      	movs	r3, #0
 80092b0:	9e04      	ldr	r6, [sp, #16]
 80092b2:	6123      	str	r3, [r4, #16]
 80092b4:	e7d2      	b.n	800925c <_printf_i+0x154>
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	1d11      	adds	r1, r2, #4
 80092ba:	6019      	str	r1, [r3, #0]
 80092bc:	6816      	ldr	r6, [r2, #0]
 80092be:	2100      	movs	r1, #0
 80092c0:	0030      	movs	r0, r6
 80092c2:	6862      	ldr	r2, [r4, #4]
 80092c4:	f002 fc28 	bl	800bb18 <memchr>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d001      	beq.n	80092d0 <_printf_i+0x1c8>
 80092cc:	1b80      	subs	r0, r0, r6
 80092ce:	6060      	str	r0, [r4, #4]
 80092d0:	6863      	ldr	r3, [r4, #4]
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	2300      	movs	r3, #0
 80092d6:	9a04      	ldr	r2, [sp, #16]
 80092d8:	7013      	strb	r3, [r2, #0]
 80092da:	e7bf      	b.n	800925c <_printf_i+0x154>
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	0032      	movs	r2, r6
 80092e0:	9906      	ldr	r1, [sp, #24]
 80092e2:	9805      	ldr	r0, [sp, #20]
 80092e4:	9d07      	ldr	r5, [sp, #28]
 80092e6:	47a8      	blx	r5
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d0c1      	beq.n	8009270 <_printf_i+0x168>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	079b      	lsls	r3, r3, #30
 80092f0:	d415      	bmi.n	800931e <_printf_i+0x216>
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	68e0      	ldr	r0, [r4, #12]
 80092f6:	4298      	cmp	r0, r3
 80092f8:	dabc      	bge.n	8009274 <_printf_i+0x16c>
 80092fa:	0018      	movs	r0, r3
 80092fc:	e7ba      	b.n	8009274 <_printf_i+0x16c>
 80092fe:	0022      	movs	r2, r4
 8009300:	2301      	movs	r3, #1
 8009302:	9906      	ldr	r1, [sp, #24]
 8009304:	9805      	ldr	r0, [sp, #20]
 8009306:	9e07      	ldr	r6, [sp, #28]
 8009308:	3219      	adds	r2, #25
 800930a:	47b0      	blx	r6
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d0af      	beq.n	8009270 <_printf_i+0x168>
 8009310:	3501      	adds	r5, #1
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	42ab      	cmp	r3, r5
 800931a:	dcf0      	bgt.n	80092fe <_printf_i+0x1f6>
 800931c:	e7e9      	b.n	80092f2 <_printf_i+0x1ea>
 800931e:	2500      	movs	r5, #0
 8009320:	e7f7      	b.n	8009312 <_printf_i+0x20a>
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	0800dfcc 	.word	0x0800dfcc
 8009328:	0800dfdd 	.word	0x0800dfdd

0800932c <_scanf_float>:
 800932c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932e:	b08b      	sub	sp, #44	; 0x2c
 8009330:	0015      	movs	r5, r2
 8009332:	9001      	str	r0, [sp, #4]
 8009334:	22ae      	movs	r2, #174	; 0xae
 8009336:	2000      	movs	r0, #0
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	688b      	ldr	r3, [r1, #8]
 800933c:	000e      	movs	r6, r1
 800933e:	1e59      	subs	r1, r3, #1
 8009340:	0052      	lsls	r2, r2, #1
 8009342:	9005      	str	r0, [sp, #20]
 8009344:	4291      	cmp	r1, r2
 8009346:	d905      	bls.n	8009354 <_scanf_float+0x28>
 8009348:	3b5e      	subs	r3, #94	; 0x5e
 800934a:	3bff      	subs	r3, #255	; 0xff
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	235e      	movs	r3, #94	; 0x5e
 8009350:	33ff      	adds	r3, #255	; 0xff
 8009352:	60b3      	str	r3, [r6, #8]
 8009354:	23f0      	movs	r3, #240	; 0xf0
 8009356:	6832      	ldr	r2, [r6, #0]
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	4313      	orrs	r3, r2
 800935c:	6033      	str	r3, [r6, #0]
 800935e:	0033      	movs	r3, r6
 8009360:	2400      	movs	r4, #0
 8009362:	331c      	adds	r3, #28
 8009364:	001f      	movs	r7, r3
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	9402      	str	r4, [sp, #8]
 800936a:	9408      	str	r4, [sp, #32]
 800936c:	9407      	str	r4, [sp, #28]
 800936e:	9400      	str	r4, [sp, #0]
 8009370:	9404      	str	r4, [sp, #16]
 8009372:	68b2      	ldr	r2, [r6, #8]
 8009374:	2a00      	cmp	r2, #0
 8009376:	d00a      	beq.n	800938e <_scanf_float+0x62>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b4e      	cmp	r3, #78	; 0x4e
 800937e:	d844      	bhi.n	800940a <_scanf_float+0xde>
 8009380:	0018      	movs	r0, r3
 8009382:	2b40      	cmp	r3, #64	; 0x40
 8009384:	d82c      	bhi.n	80093e0 <_scanf_float+0xb4>
 8009386:	382b      	subs	r0, #43	; 0x2b
 8009388:	b2c1      	uxtb	r1, r0
 800938a:	290e      	cmp	r1, #14
 800938c:	d92a      	bls.n	80093e4 <_scanf_float+0xb8>
 800938e:	9b00      	ldr	r3, [sp, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <_scanf_float+0x70>
 8009394:	6832      	ldr	r2, [r6, #0]
 8009396:	4ba4      	ldr	r3, [pc, #656]	; (8009628 <_scanf_float+0x2fc>)
 8009398:	4013      	ands	r3, r2
 800939a:	6033      	str	r3, [r6, #0]
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	3b01      	subs	r3, #1
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d900      	bls.n	80093a6 <_scanf_float+0x7a>
 80093a4:	e0f9      	b.n	800959a <_scanf_float+0x26e>
 80093a6:	24be      	movs	r4, #190	; 0xbe
 80093a8:	0064      	lsls	r4, r4, #1
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	429f      	cmp	r7, r3
 80093ae:	d900      	bls.n	80093b2 <_scanf_float+0x86>
 80093b0:	e0e9      	b.n	8009586 <_scanf_float+0x25a>
 80093b2:	2301      	movs	r3, #1
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	e185      	b.n	80096c4 <_scanf_float+0x398>
 80093b8:	0018      	movs	r0, r3
 80093ba:	3861      	subs	r0, #97	; 0x61
 80093bc:	280d      	cmp	r0, #13
 80093be:	d8e6      	bhi.n	800938e <_scanf_float+0x62>
 80093c0:	f7f6 febe 	bl	8000140 <__gnu_thumb1_case_shi>
 80093c4:	ffe50083 	.word	0xffe50083
 80093c8:	ffe5ffe5 	.word	0xffe5ffe5
 80093cc:	00a200b6 	.word	0x00a200b6
 80093d0:	ffe5ffe5 	.word	0xffe5ffe5
 80093d4:	ffe50089 	.word	0xffe50089
 80093d8:	ffe5ffe5 	.word	0xffe5ffe5
 80093dc:	0065ffe5 	.word	0x0065ffe5
 80093e0:	3841      	subs	r0, #65	; 0x41
 80093e2:	e7eb      	b.n	80093bc <_scanf_float+0x90>
 80093e4:	280e      	cmp	r0, #14
 80093e6:	d8d2      	bhi.n	800938e <_scanf_float+0x62>
 80093e8:	f7f6 feaa 	bl	8000140 <__gnu_thumb1_case_shi>
 80093ec:	ffd1004b 	.word	0xffd1004b
 80093f0:	0098004b 	.word	0x0098004b
 80093f4:	0020ffd1 	.word	0x0020ffd1
 80093f8:	00400040 	.word	0x00400040
 80093fc:	00400040 	.word	0x00400040
 8009400:	00400040 	.word	0x00400040
 8009404:	00400040 	.word	0x00400040
 8009408:	0040      	.short	0x0040
 800940a:	2b6e      	cmp	r3, #110	; 0x6e
 800940c:	d809      	bhi.n	8009422 <_scanf_float+0xf6>
 800940e:	2b60      	cmp	r3, #96	; 0x60
 8009410:	d8d2      	bhi.n	80093b8 <_scanf_float+0x8c>
 8009412:	2b54      	cmp	r3, #84	; 0x54
 8009414:	d07d      	beq.n	8009512 <_scanf_float+0x1e6>
 8009416:	2b59      	cmp	r3, #89	; 0x59
 8009418:	d1b9      	bne.n	800938e <_scanf_float+0x62>
 800941a:	2c07      	cmp	r4, #7
 800941c:	d1b7      	bne.n	800938e <_scanf_float+0x62>
 800941e:	2408      	movs	r4, #8
 8009420:	e02c      	b.n	800947c <_scanf_float+0x150>
 8009422:	2b74      	cmp	r3, #116	; 0x74
 8009424:	d075      	beq.n	8009512 <_scanf_float+0x1e6>
 8009426:	2b79      	cmp	r3, #121	; 0x79
 8009428:	d0f7      	beq.n	800941a <_scanf_float+0xee>
 800942a:	e7b0      	b.n	800938e <_scanf_float+0x62>
 800942c:	6831      	ldr	r1, [r6, #0]
 800942e:	05c8      	lsls	r0, r1, #23
 8009430:	d51c      	bpl.n	800946c <_scanf_float+0x140>
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	4399      	bics	r1, r3
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	6031      	str	r1, [r6, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	9b05      	ldr	r3, [sp, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <_scanf_float+0x120>
 8009444:	3b01      	subs	r3, #1
 8009446:	3201      	adds	r2, #1
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	60b2      	str	r2, [r6, #8]
 800944c:	68b3      	ldr	r3, [r6, #8]
 800944e:	3b01      	subs	r3, #1
 8009450:	60b3      	str	r3, [r6, #8]
 8009452:	6933      	ldr	r3, [r6, #16]
 8009454:	3301      	adds	r3, #1
 8009456:	6133      	str	r3, [r6, #16]
 8009458:	686b      	ldr	r3, [r5, #4]
 800945a:	3b01      	subs	r3, #1
 800945c:	606b      	str	r3, [r5, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	dc00      	bgt.n	8009464 <_scanf_float+0x138>
 8009462:	e086      	b.n	8009572 <_scanf_float+0x246>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	e782      	b.n	8009372 <_scanf_float+0x46>
 800946c:	9a02      	ldr	r2, [sp, #8]
 800946e:	1912      	adds	r2, r2, r4
 8009470:	2a00      	cmp	r2, #0
 8009472:	d18c      	bne.n	800938e <_scanf_float+0x62>
 8009474:	4a6d      	ldr	r2, [pc, #436]	; (800962c <_scanf_float+0x300>)
 8009476:	6831      	ldr	r1, [r6, #0]
 8009478:	400a      	ands	r2, r1
 800947a:	6032      	str	r2, [r6, #0]
 800947c:	703b      	strb	r3, [r7, #0]
 800947e:	3701      	adds	r7, #1
 8009480:	e7e4      	b.n	800944c <_scanf_float+0x120>
 8009482:	2180      	movs	r1, #128	; 0x80
 8009484:	6832      	ldr	r2, [r6, #0]
 8009486:	420a      	tst	r2, r1
 8009488:	d081      	beq.n	800938e <_scanf_float+0x62>
 800948a:	438a      	bics	r2, r1
 800948c:	e7f5      	b.n	800947a <_scanf_float+0x14e>
 800948e:	9a02      	ldr	r2, [sp, #8]
 8009490:	2a00      	cmp	r2, #0
 8009492:	d10f      	bne.n	80094b4 <_scanf_float+0x188>
 8009494:	9a00      	ldr	r2, [sp, #0]
 8009496:	2a00      	cmp	r2, #0
 8009498:	d10f      	bne.n	80094ba <_scanf_float+0x18e>
 800949a:	6832      	ldr	r2, [r6, #0]
 800949c:	21e0      	movs	r1, #224	; 0xe0
 800949e:	0010      	movs	r0, r2
 80094a0:	00c9      	lsls	r1, r1, #3
 80094a2:	4008      	ands	r0, r1
 80094a4:	4288      	cmp	r0, r1
 80094a6:	d108      	bne.n	80094ba <_scanf_float+0x18e>
 80094a8:	4961      	ldr	r1, [pc, #388]	; (8009630 <_scanf_float+0x304>)
 80094aa:	400a      	ands	r2, r1
 80094ac:	6032      	str	r2, [r6, #0]
 80094ae:	2201      	movs	r2, #1
 80094b0:	9202      	str	r2, [sp, #8]
 80094b2:	e7e3      	b.n	800947c <_scanf_float+0x150>
 80094b4:	9a02      	ldr	r2, [sp, #8]
 80094b6:	2a02      	cmp	r2, #2
 80094b8:	d059      	beq.n	800956e <_scanf_float+0x242>
 80094ba:	2c01      	cmp	r4, #1
 80094bc:	d002      	beq.n	80094c4 <_scanf_float+0x198>
 80094be:	2c04      	cmp	r4, #4
 80094c0:	d000      	beq.n	80094c4 <_scanf_float+0x198>
 80094c2:	e764      	b.n	800938e <_scanf_float+0x62>
 80094c4:	3401      	adds	r4, #1
 80094c6:	b2e4      	uxtb	r4, r4
 80094c8:	e7d8      	b.n	800947c <_scanf_float+0x150>
 80094ca:	9a02      	ldr	r2, [sp, #8]
 80094cc:	2a01      	cmp	r2, #1
 80094ce:	d000      	beq.n	80094d2 <_scanf_float+0x1a6>
 80094d0:	e75d      	b.n	800938e <_scanf_float+0x62>
 80094d2:	2202      	movs	r2, #2
 80094d4:	e7ec      	b.n	80094b0 <_scanf_float+0x184>
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	d110      	bne.n	80094fc <_scanf_float+0x1d0>
 80094da:	9a00      	ldr	r2, [sp, #0]
 80094dc:	2a00      	cmp	r2, #0
 80094de:	d000      	beq.n	80094e2 <_scanf_float+0x1b6>
 80094e0:	e758      	b.n	8009394 <_scanf_float+0x68>
 80094e2:	6832      	ldr	r2, [r6, #0]
 80094e4:	21e0      	movs	r1, #224	; 0xe0
 80094e6:	0010      	movs	r0, r2
 80094e8:	00c9      	lsls	r1, r1, #3
 80094ea:	4008      	ands	r0, r1
 80094ec:	4288      	cmp	r0, r1
 80094ee:	d000      	beq.n	80094f2 <_scanf_float+0x1c6>
 80094f0:	e754      	b.n	800939c <_scanf_float+0x70>
 80094f2:	494f      	ldr	r1, [pc, #316]	; (8009630 <_scanf_float+0x304>)
 80094f4:	3401      	adds	r4, #1
 80094f6:	400a      	ands	r2, r1
 80094f8:	6032      	str	r2, [r6, #0]
 80094fa:	e7bf      	b.n	800947c <_scanf_float+0x150>
 80094fc:	21fd      	movs	r1, #253	; 0xfd
 80094fe:	1ee2      	subs	r2, r4, #3
 8009500:	420a      	tst	r2, r1
 8009502:	d000      	beq.n	8009506 <_scanf_float+0x1da>
 8009504:	e743      	b.n	800938e <_scanf_float+0x62>
 8009506:	e7dd      	b.n	80094c4 <_scanf_float+0x198>
 8009508:	2c02      	cmp	r4, #2
 800950a:	d000      	beq.n	800950e <_scanf_float+0x1e2>
 800950c:	e73f      	b.n	800938e <_scanf_float+0x62>
 800950e:	2403      	movs	r4, #3
 8009510:	e7b4      	b.n	800947c <_scanf_float+0x150>
 8009512:	2c06      	cmp	r4, #6
 8009514:	d000      	beq.n	8009518 <_scanf_float+0x1ec>
 8009516:	e73a      	b.n	800938e <_scanf_float+0x62>
 8009518:	2407      	movs	r4, #7
 800951a:	e7af      	b.n	800947c <_scanf_float+0x150>
 800951c:	6832      	ldr	r2, [r6, #0]
 800951e:	0591      	lsls	r1, r2, #22
 8009520:	d400      	bmi.n	8009524 <_scanf_float+0x1f8>
 8009522:	e734      	b.n	800938e <_scanf_float+0x62>
 8009524:	4943      	ldr	r1, [pc, #268]	; (8009634 <_scanf_float+0x308>)
 8009526:	400a      	ands	r2, r1
 8009528:	6032      	str	r2, [r6, #0]
 800952a:	9a00      	ldr	r2, [sp, #0]
 800952c:	9204      	str	r2, [sp, #16]
 800952e:	e7a5      	b.n	800947c <_scanf_float+0x150>
 8009530:	21a0      	movs	r1, #160	; 0xa0
 8009532:	2080      	movs	r0, #128	; 0x80
 8009534:	6832      	ldr	r2, [r6, #0]
 8009536:	00c9      	lsls	r1, r1, #3
 8009538:	4011      	ands	r1, r2
 800953a:	00c0      	lsls	r0, r0, #3
 800953c:	4281      	cmp	r1, r0
 800953e:	d006      	beq.n	800954e <_scanf_float+0x222>
 8009540:	4202      	tst	r2, r0
 8009542:	d100      	bne.n	8009546 <_scanf_float+0x21a>
 8009544:	e723      	b.n	800938e <_scanf_float+0x62>
 8009546:	9900      	ldr	r1, [sp, #0]
 8009548:	2900      	cmp	r1, #0
 800954a:	d100      	bne.n	800954e <_scanf_float+0x222>
 800954c:	e726      	b.n	800939c <_scanf_float+0x70>
 800954e:	0591      	lsls	r1, r2, #22
 8009550:	d404      	bmi.n	800955c <_scanf_float+0x230>
 8009552:	9900      	ldr	r1, [sp, #0]
 8009554:	9804      	ldr	r0, [sp, #16]
 8009556:	9708      	str	r7, [sp, #32]
 8009558:	1a09      	subs	r1, r1, r0
 800955a:	9107      	str	r1, [sp, #28]
 800955c:	4934      	ldr	r1, [pc, #208]	; (8009630 <_scanf_float+0x304>)
 800955e:	400a      	ands	r2, r1
 8009560:	21c0      	movs	r1, #192	; 0xc0
 8009562:	0049      	lsls	r1, r1, #1
 8009564:	430a      	orrs	r2, r1
 8009566:	6032      	str	r2, [r6, #0]
 8009568:	2200      	movs	r2, #0
 800956a:	9200      	str	r2, [sp, #0]
 800956c:	e786      	b.n	800947c <_scanf_float+0x150>
 800956e:	2203      	movs	r2, #3
 8009570:	e79e      	b.n	80094b0 <_scanf_float+0x184>
 8009572:	23c0      	movs	r3, #192	; 0xc0
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	0029      	movs	r1, r5
 8009578:	58f3      	ldr	r3, [r6, r3]
 800957a:	9801      	ldr	r0, [sp, #4]
 800957c:	4798      	blx	r3
 800957e:	2800      	cmp	r0, #0
 8009580:	d100      	bne.n	8009584 <_scanf_float+0x258>
 8009582:	e6f6      	b.n	8009372 <_scanf_float+0x46>
 8009584:	e703      	b.n	800938e <_scanf_float+0x62>
 8009586:	3f01      	subs	r7, #1
 8009588:	5933      	ldr	r3, [r6, r4]
 800958a:	002a      	movs	r2, r5
 800958c:	7839      	ldrb	r1, [r7, #0]
 800958e:	9801      	ldr	r0, [sp, #4]
 8009590:	4798      	blx	r3
 8009592:	6933      	ldr	r3, [r6, #16]
 8009594:	3b01      	subs	r3, #1
 8009596:	6133      	str	r3, [r6, #16]
 8009598:	e707      	b.n	80093aa <_scanf_float+0x7e>
 800959a:	1e63      	subs	r3, r4, #1
 800959c:	2b06      	cmp	r3, #6
 800959e:	d80e      	bhi.n	80095be <_scanf_float+0x292>
 80095a0:	9702      	str	r7, [sp, #8]
 80095a2:	2c02      	cmp	r4, #2
 80095a4:	d920      	bls.n	80095e8 <_scanf_float+0x2bc>
 80095a6:	1be3      	subs	r3, r4, r7
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	9305      	str	r3, [sp, #20]
 80095ac:	9b02      	ldr	r3, [sp, #8]
 80095ae:	9a05      	ldr	r2, [sp, #20]
 80095b0:	189b      	adds	r3, r3, r2
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d827      	bhi.n	8009608 <_scanf_float+0x2dc>
 80095b8:	3c03      	subs	r4, #3
 80095ba:	b2e4      	uxtb	r4, r4
 80095bc:	1b3f      	subs	r7, r7, r4
 80095be:	6833      	ldr	r3, [r6, #0]
 80095c0:	05da      	lsls	r2, r3, #23
 80095c2:	d554      	bpl.n	800966e <_scanf_float+0x342>
 80095c4:	055b      	lsls	r3, r3, #21
 80095c6:	d537      	bpl.n	8009638 <_scanf_float+0x30c>
 80095c8:	24be      	movs	r4, #190	; 0xbe
 80095ca:	0064      	lsls	r4, r4, #1
 80095cc:	9b03      	ldr	r3, [sp, #12]
 80095ce:	429f      	cmp	r7, r3
 80095d0:	d800      	bhi.n	80095d4 <_scanf_float+0x2a8>
 80095d2:	e6ee      	b.n	80093b2 <_scanf_float+0x86>
 80095d4:	3f01      	subs	r7, #1
 80095d6:	5933      	ldr	r3, [r6, r4]
 80095d8:	002a      	movs	r2, r5
 80095da:	7839      	ldrb	r1, [r7, #0]
 80095dc:	9801      	ldr	r0, [sp, #4]
 80095de:	4798      	blx	r3
 80095e0:	6933      	ldr	r3, [r6, #16]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	6133      	str	r3, [r6, #16]
 80095e6:	e7f1      	b.n	80095cc <_scanf_float+0x2a0>
 80095e8:	24be      	movs	r4, #190	; 0xbe
 80095ea:	0064      	lsls	r4, r4, #1
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	429f      	cmp	r7, r3
 80095f0:	d800      	bhi.n	80095f4 <_scanf_float+0x2c8>
 80095f2:	e6de      	b.n	80093b2 <_scanf_float+0x86>
 80095f4:	3f01      	subs	r7, #1
 80095f6:	5933      	ldr	r3, [r6, r4]
 80095f8:	002a      	movs	r2, r5
 80095fa:	7839      	ldrb	r1, [r7, #0]
 80095fc:	9801      	ldr	r0, [sp, #4]
 80095fe:	4798      	blx	r3
 8009600:	6933      	ldr	r3, [r6, #16]
 8009602:	3b01      	subs	r3, #1
 8009604:	6133      	str	r3, [r6, #16]
 8009606:	e7f1      	b.n	80095ec <_scanf_float+0x2c0>
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	002a      	movs	r2, r5
 800960c:	3b01      	subs	r3, #1
 800960e:	7819      	ldrb	r1, [r3, #0]
 8009610:	9302      	str	r3, [sp, #8]
 8009612:	23be      	movs	r3, #190	; 0xbe
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	58f3      	ldr	r3, [r6, r3]
 8009618:	9801      	ldr	r0, [sp, #4]
 800961a:	9309      	str	r3, [sp, #36]	; 0x24
 800961c:	4798      	blx	r3
 800961e:	6933      	ldr	r3, [r6, #16]
 8009620:	3b01      	subs	r3, #1
 8009622:	6133      	str	r3, [r6, #16]
 8009624:	e7c2      	b.n	80095ac <_scanf_float+0x280>
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	fffffeff 	.word	0xfffffeff
 800962c:	fffffe7f 	.word	0xfffffe7f
 8009630:	fffff87f 	.word	0xfffff87f
 8009634:	fffffd7f 	.word	0xfffffd7f
 8009638:	6933      	ldr	r3, [r6, #16]
 800963a:	1e7c      	subs	r4, r7, #1
 800963c:	7821      	ldrb	r1, [r4, #0]
 800963e:	3b01      	subs	r3, #1
 8009640:	6133      	str	r3, [r6, #16]
 8009642:	2965      	cmp	r1, #101	; 0x65
 8009644:	d00c      	beq.n	8009660 <_scanf_float+0x334>
 8009646:	2945      	cmp	r1, #69	; 0x45
 8009648:	d00a      	beq.n	8009660 <_scanf_float+0x334>
 800964a:	23be      	movs	r3, #190	; 0xbe
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	58f3      	ldr	r3, [r6, r3]
 8009650:	002a      	movs	r2, r5
 8009652:	9801      	ldr	r0, [sp, #4]
 8009654:	4798      	blx	r3
 8009656:	6933      	ldr	r3, [r6, #16]
 8009658:	1ebc      	subs	r4, r7, #2
 800965a:	3b01      	subs	r3, #1
 800965c:	7821      	ldrb	r1, [r4, #0]
 800965e:	6133      	str	r3, [r6, #16]
 8009660:	23be      	movs	r3, #190	; 0xbe
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	002a      	movs	r2, r5
 8009666:	58f3      	ldr	r3, [r6, r3]
 8009668:	9801      	ldr	r0, [sp, #4]
 800966a:	4798      	blx	r3
 800966c:	0027      	movs	r7, r4
 800966e:	6832      	ldr	r2, [r6, #0]
 8009670:	2310      	movs	r3, #16
 8009672:	0011      	movs	r1, r2
 8009674:	4019      	ands	r1, r3
 8009676:	9102      	str	r1, [sp, #8]
 8009678:	421a      	tst	r2, r3
 800967a:	d158      	bne.n	800972e <_scanf_float+0x402>
 800967c:	23c0      	movs	r3, #192	; 0xc0
 800967e:	7039      	strb	r1, [r7, #0]
 8009680:	6832      	ldr	r2, [r6, #0]
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	4013      	ands	r3, r2
 8009686:	2280      	movs	r2, #128	; 0x80
 8009688:	00d2      	lsls	r2, r2, #3
 800968a:	4293      	cmp	r3, r2
 800968c:	d11d      	bne.n	80096ca <_scanf_float+0x39e>
 800968e:	9b04      	ldr	r3, [sp, #16]
 8009690:	9a00      	ldr	r2, [sp, #0]
 8009692:	9900      	ldr	r1, [sp, #0]
 8009694:	1a9a      	subs	r2, r3, r2
 8009696:	428b      	cmp	r3, r1
 8009698:	d124      	bne.n	80096e4 <_scanf_float+0x3b8>
 800969a:	2200      	movs	r2, #0
 800969c:	9903      	ldr	r1, [sp, #12]
 800969e:	9801      	ldr	r0, [sp, #4]
 80096a0:	f000 ff2a 	bl	800a4f8 <_strtod_r>
 80096a4:	9b06      	ldr	r3, [sp, #24]
 80096a6:	000d      	movs	r5, r1
 80096a8:	6831      	ldr	r1, [r6, #0]
 80096aa:	0004      	movs	r4, r0
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	078a      	lsls	r2, r1, #30
 80096b0:	d525      	bpl.n	80096fe <_scanf_float+0x3d2>
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	9906      	ldr	r1, [sp, #24]
 80096b6:	600a      	str	r2, [r1, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	601c      	str	r4, [r3, #0]
 80096bc:	605d      	str	r5, [r3, #4]
 80096be:	68f3      	ldr	r3, [r6, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60f3      	str	r3, [r6, #12]
 80096c4:	9802      	ldr	r0, [sp, #8]
 80096c6:	b00b      	add	sp, #44	; 0x2c
 80096c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ca:	9b07      	ldr	r3, [sp, #28]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0e4      	beq.n	800969a <_scanf_float+0x36e>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	9a02      	ldr	r2, [sp, #8]
 80096d4:	1c59      	adds	r1, r3, #1
 80096d6:	9801      	ldr	r0, [sp, #4]
 80096d8:	230a      	movs	r3, #10
 80096da:	f000 ffa3 	bl	800a624 <_strtol_r>
 80096de:	9b07      	ldr	r3, [sp, #28]
 80096e0:	9f08      	ldr	r7, [sp, #32]
 80096e2:	1ac2      	subs	r2, r0, r3
 80096e4:	0033      	movs	r3, r6
 80096e6:	3370      	adds	r3, #112	; 0x70
 80096e8:	33ff      	adds	r3, #255	; 0xff
 80096ea:	429f      	cmp	r7, r3
 80096ec:	d302      	bcc.n	80096f4 <_scanf_float+0x3c8>
 80096ee:	0037      	movs	r7, r6
 80096f0:	376f      	adds	r7, #111	; 0x6f
 80096f2:	37ff      	adds	r7, #255	; 0xff
 80096f4:	0038      	movs	r0, r7
 80096f6:	490f      	ldr	r1, [pc, #60]	; (8009734 <_scanf_float+0x408>)
 80096f8:	f000 f824 	bl	8009744 <siprintf>
 80096fc:	e7cd      	b.n	800969a <_scanf_float+0x36e>
 80096fe:	1d1a      	adds	r2, r3, #4
 8009700:	0749      	lsls	r1, r1, #29
 8009702:	d4d7      	bmi.n	80096b4 <_scanf_float+0x388>
 8009704:	9906      	ldr	r1, [sp, #24]
 8009706:	0020      	movs	r0, r4
 8009708:	600a      	str	r2, [r1, #0]
 800970a:	681f      	ldr	r7, [r3, #0]
 800970c:	0022      	movs	r2, r4
 800970e:	002b      	movs	r3, r5
 8009710:	0029      	movs	r1, r5
 8009712:	f7f8 fcb1 	bl	8002078 <__aeabi_dcmpun>
 8009716:	2800      	cmp	r0, #0
 8009718:	d004      	beq.n	8009724 <_scanf_float+0x3f8>
 800971a:	4807      	ldr	r0, [pc, #28]	; (8009738 <_scanf_float+0x40c>)
 800971c:	f000 f80e 	bl	800973c <nanf>
 8009720:	6038      	str	r0, [r7, #0]
 8009722:	e7cc      	b.n	80096be <_scanf_float+0x392>
 8009724:	0020      	movs	r0, r4
 8009726:	0029      	movs	r1, r5
 8009728:	f7f8 fd98 	bl	800225c <__aeabi_d2f>
 800972c:	e7f8      	b.n	8009720 <_scanf_float+0x3f4>
 800972e:	2300      	movs	r3, #0
 8009730:	e640      	b.n	80093b4 <_scanf_float+0x88>
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	0800dfee 	.word	0x0800dfee
 8009738:	0800e423 	.word	0x0800e423

0800973c <nanf>:
 800973c:	4800      	ldr	r0, [pc, #0]	; (8009740 <nanf+0x4>)
 800973e:	4770      	bx	lr
 8009740:	7fc00000 	.word	0x7fc00000

08009744 <siprintf>:
 8009744:	b40e      	push	{r1, r2, r3}
 8009746:	b500      	push	{lr}
 8009748:	490b      	ldr	r1, [pc, #44]	; (8009778 <siprintf+0x34>)
 800974a:	b09c      	sub	sp, #112	; 0x70
 800974c:	ab1d      	add	r3, sp, #116	; 0x74
 800974e:	9002      	str	r0, [sp, #8]
 8009750:	9006      	str	r0, [sp, #24]
 8009752:	9107      	str	r1, [sp, #28]
 8009754:	9104      	str	r1, [sp, #16]
 8009756:	4809      	ldr	r0, [pc, #36]	; (800977c <siprintf+0x38>)
 8009758:	4909      	ldr	r1, [pc, #36]	; (8009780 <siprintf+0x3c>)
 800975a:	cb04      	ldmia	r3!, {r2}
 800975c:	9105      	str	r1, [sp, #20]
 800975e:	6800      	ldr	r0, [r0, #0]
 8009760:	a902      	add	r1, sp, #8
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f002 ffce 	bl	800c704 <_svfiprintf_r>
 8009768:	2300      	movs	r3, #0
 800976a:	9a02      	ldr	r2, [sp, #8]
 800976c:	7013      	strb	r3, [r2, #0]
 800976e:	b01c      	add	sp, #112	; 0x70
 8009770:	bc08      	pop	{r3}
 8009772:	b003      	add	sp, #12
 8009774:	4718      	bx	r3
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	7fffffff 	.word	0x7fffffff
 800977c:	2000000c 	.word	0x2000000c
 8009780:	ffff0208 	.word	0xffff0208

08009784 <siscanf>:
 8009784:	b40e      	push	{r1, r2, r3}
 8009786:	b530      	push	{r4, r5, lr}
 8009788:	2381      	movs	r3, #129	; 0x81
 800978a:	b09c      	sub	sp, #112	; 0x70
 800978c:	466a      	mov	r2, sp
 800978e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	cc20      	ldmia	r4!, {r5}
 8009794:	8293      	strh	r3, [r2, #20]
 8009796:	9002      	str	r0, [sp, #8]
 8009798:	9006      	str	r0, [sp, #24]
 800979a:	f7f6 fcbf 	bl	800011c <strlen>
 800979e:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <siscanf+0x48>)
 80097a0:	466a      	mov	r2, sp
 80097a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097a4:	2300      	movs	r3, #0
 80097a6:	9003      	str	r0, [sp, #12]
 80097a8:	9007      	str	r0, [sp, #28]
 80097aa:	4809      	ldr	r0, [pc, #36]	; (80097d0 <siscanf+0x4c>)
 80097ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80097ae:	9314      	str	r3, [sp, #80]	; 0x50
 80097b0:	3b01      	subs	r3, #1
 80097b2:	82d3      	strh	r3, [r2, #22]
 80097b4:	a902      	add	r1, sp, #8
 80097b6:	0023      	movs	r3, r4
 80097b8:	002a      	movs	r2, r5
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	9401      	str	r4, [sp, #4]
 80097be:	f003 f8fd 	bl	800c9bc <__ssvfiscanf_r>
 80097c2:	b01c      	add	sp, #112	; 0x70
 80097c4:	bc30      	pop	{r4, r5}
 80097c6:	bc08      	pop	{r3}
 80097c8:	b003      	add	sp, #12
 80097ca:	4718      	bx	r3
 80097cc:	080097fd 	.word	0x080097fd
 80097d0:	2000000c 	.word	0x2000000c

080097d4 <__sread>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	000c      	movs	r4, r1
 80097d8:	250e      	movs	r5, #14
 80097da:	5f49      	ldrsh	r1, [r1, r5]
 80097dc:	f003 fbc8 	bl	800cf70 <_read_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	db03      	blt.n	80097ec <__sread+0x18>
 80097e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80097e6:	181b      	adds	r3, r3, r0
 80097e8:	6563      	str	r3, [r4, #84]	; 0x54
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	4a02      	ldr	r2, [pc, #8]	; (80097f8 <__sread+0x24>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	e7f9      	b.n	80097ea <__sread+0x16>
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	ffffefff 	.word	0xffffefff

080097fc <__seofread>:
 80097fc:	2000      	movs	r0, #0
 80097fe:	4770      	bx	lr

08009800 <__swrite>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	001f      	movs	r7, r3
 8009804:	898b      	ldrh	r3, [r1, #12]
 8009806:	0005      	movs	r5, r0
 8009808:	000c      	movs	r4, r1
 800980a:	0016      	movs	r6, r2
 800980c:	05db      	lsls	r3, r3, #23
 800980e:	d505      	bpl.n	800981c <__swrite+0x1c>
 8009810:	230e      	movs	r3, #14
 8009812:	5ec9      	ldrsh	r1, [r1, r3]
 8009814:	2200      	movs	r2, #0
 8009816:	2302      	movs	r3, #2
 8009818:	f002 f94e 	bl	800bab8 <_lseek_r>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	4a05      	ldr	r2, [pc, #20]	; (8009834 <__swrite+0x34>)
 8009820:	0028      	movs	r0, r5
 8009822:	4013      	ands	r3, r2
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	0032      	movs	r2, r6
 8009828:	230e      	movs	r3, #14
 800982a:	5ee1      	ldrsh	r1, [r4, r3]
 800982c:	003b      	movs	r3, r7
 800982e:	f000 fefd 	bl	800a62c <_write_r>
 8009832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009834:	ffffefff 	.word	0xffffefff

08009838 <__sseek>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	000c      	movs	r4, r1
 800983c:	250e      	movs	r5, #14
 800983e:	5f49      	ldrsh	r1, [r1, r5]
 8009840:	f002 f93a 	bl	800bab8 <_lseek_r>
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	1c42      	adds	r2, r0, #1
 8009848:	d103      	bne.n	8009852 <__sseek+0x1a>
 800984a:	4a05      	ldr	r2, [pc, #20]	; (8009860 <__sseek+0x28>)
 800984c:	4013      	ands	r3, r2
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	bd70      	pop	{r4, r5, r6, pc}
 8009852:	2280      	movs	r2, #128	; 0x80
 8009854:	0152      	lsls	r2, r2, #5
 8009856:	4313      	orrs	r3, r2
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	6560      	str	r0, [r4, #84]	; 0x54
 800985c:	e7f8      	b.n	8009850 <__sseek+0x18>
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	ffffefff 	.word	0xffffefff

08009864 <__sclose>:
 8009864:	b510      	push	{r4, lr}
 8009866:	230e      	movs	r3, #14
 8009868:	5ec9      	ldrsh	r1, [r1, r3]
 800986a:	f000 fef3 	bl	800a654 <_close_r>
 800986e:	bd10      	pop	{r4, pc}

08009870 <strcpy>:
 8009870:	0003      	movs	r3, r0
 8009872:	780a      	ldrb	r2, [r1, #0]
 8009874:	3101      	adds	r1, #1
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	2a00      	cmp	r2, #0
 800987c:	d1f9      	bne.n	8009872 <strcpy+0x2>
 800987e:	4770      	bx	lr

08009880 <sulp>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	0016      	movs	r6, r2
 8009884:	000d      	movs	r5, r1
 8009886:	f002 fce1 	bl	800c24c <__ulp>
 800988a:	2e00      	cmp	r6, #0
 800988c:	d00d      	beq.n	80098aa <sulp+0x2a>
 800988e:	236b      	movs	r3, #107	; 0x6b
 8009890:	006a      	lsls	r2, r5, #1
 8009892:	0d52      	lsrs	r2, r2, #21
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	2b00      	cmp	r3, #0
 8009898:	dd07      	ble.n	80098aa <sulp+0x2a>
 800989a:	2400      	movs	r4, #0
 800989c:	4a03      	ldr	r2, [pc, #12]	; (80098ac <sulp+0x2c>)
 800989e:	051b      	lsls	r3, r3, #20
 80098a0:	189d      	adds	r5, r3, r2
 80098a2:	002b      	movs	r3, r5
 80098a4:	0022      	movs	r2, r4
 80098a6:	f7f7 fde9 	bl	800147c <__aeabi_dmul>
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	3ff00000 	.word	0x3ff00000

080098b0 <_strtod_l>:
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	001d      	movs	r5, r3
 80098b4:	2300      	movs	r3, #0
 80098b6:	b0a7      	sub	sp, #156	; 0x9c
 80098b8:	9322      	str	r3, [sp, #136]	; 0x88
 80098ba:	4bae      	ldr	r3, [pc, #696]	; (8009b74 <_strtod_l+0x2c4>)
 80098bc:	9005      	str	r0, [sp, #20]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	9108      	str	r1, [sp, #32]
 80098c2:	0018      	movs	r0, r3
 80098c4:	9307      	str	r3, [sp, #28]
 80098c6:	921d      	str	r2, [sp, #116]	; 0x74
 80098c8:	f7f6 fc28 	bl	800011c <strlen>
 80098cc:	2600      	movs	r6, #0
 80098ce:	0004      	movs	r4, r0
 80098d0:	2700      	movs	r7, #0
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	9321      	str	r3, [sp, #132]	; 0x84
 80098d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098d8:	7813      	ldrb	r3, [r2, #0]
 80098da:	2b2b      	cmp	r3, #43	; 0x2b
 80098dc:	d058      	beq.n	8009990 <_strtod_l+0xe0>
 80098de:	d844      	bhi.n	800996a <_strtod_l+0xba>
 80098e0:	2b0d      	cmp	r3, #13
 80098e2:	d83d      	bhi.n	8009960 <_strtod_l+0xb0>
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d83d      	bhi.n	8009964 <_strtod_l+0xb4>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d047      	beq.n	800997c <_strtod_l+0xcc>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9310      	str	r3, [sp, #64]	; 0x40
 80098f0:	2200      	movs	r2, #0
 80098f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f4:	920a      	str	r2, [sp, #40]	; 0x28
 80098f6:	9306      	str	r3, [sp, #24]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b30      	cmp	r3, #48	; 0x30
 80098fc:	d000      	beq.n	8009900 <_strtod_l+0x50>
 80098fe:	e083      	b.n	8009a08 <_strtod_l+0x158>
 8009900:	9b06      	ldr	r3, [sp, #24]
 8009902:	3220      	adds	r2, #32
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	4393      	bics	r3, r2
 8009908:	2b58      	cmp	r3, #88	; 0x58
 800990a:	d000      	beq.n	800990e <_strtod_l+0x5e>
 800990c:	e072      	b.n	80099f4 <_strtod_l+0x144>
 800990e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009910:	9502      	str	r5, [sp, #8]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	ab22      	add	r3, sp, #136	; 0x88
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4a97      	ldr	r2, [pc, #604]	; (8009b78 <_strtod_l+0x2c8>)
 800991a:	ab23      	add	r3, sp, #140	; 0x8c
 800991c:	9805      	ldr	r0, [sp, #20]
 800991e:	a921      	add	r1, sp, #132	; 0x84
 8009920:	f001 fdbe 	bl	800b4a0 <__gethex>
 8009924:	2307      	movs	r3, #7
 8009926:	0005      	movs	r5, r0
 8009928:	0004      	movs	r4, r0
 800992a:	401d      	ands	r5, r3
 800992c:	4218      	tst	r0, r3
 800992e:	d006      	beq.n	800993e <_strtod_l+0x8e>
 8009930:	2d06      	cmp	r5, #6
 8009932:	d12f      	bne.n	8009994 <_strtod_l+0xe4>
 8009934:	9b06      	ldr	r3, [sp, #24]
 8009936:	3301      	adds	r3, #1
 8009938:	9321      	str	r3, [sp, #132]	; 0x84
 800993a:	2300      	movs	r3, #0
 800993c:	9310      	str	r3, [sp, #64]	; 0x40
 800993e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <_strtod_l+0x9a>
 8009944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009946:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01c      	beq.n	800998a <_strtod_l+0xda>
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	0032      	movs	r2, r6
 8009954:	061b      	lsls	r3, r3, #24
 8009956:	18fb      	adds	r3, r7, r3
 8009958:	0010      	movs	r0, r2
 800995a:	0019      	movs	r1, r3
 800995c:	b027      	add	sp, #156	; 0x9c
 800995e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009960:	2b20      	cmp	r3, #32
 8009962:	d1c3      	bne.n	80098ec <_strtod_l+0x3c>
 8009964:	3201      	adds	r2, #1
 8009966:	9221      	str	r2, [sp, #132]	; 0x84
 8009968:	e7b5      	b.n	80098d6 <_strtod_l+0x26>
 800996a:	2b2d      	cmp	r3, #45	; 0x2d
 800996c:	d1be      	bne.n	80098ec <_strtod_l+0x3c>
 800996e:	3b2c      	subs	r3, #44	; 0x2c
 8009970:	9310      	str	r3, [sp, #64]	; 0x40
 8009972:	1c53      	adds	r3, r2, #1
 8009974:	9321      	str	r3, [sp, #132]	; 0x84
 8009976:	7853      	ldrb	r3, [r2, #1]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1b9      	bne.n	80098f0 <_strtod_l+0x40>
 800997c:	9b08      	ldr	r3, [sp, #32]
 800997e:	9321      	str	r3, [sp, #132]	; 0x84
 8009980:	2300      	movs	r3, #0
 8009982:	9310      	str	r3, [sp, #64]	; 0x40
 8009984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1dc      	bne.n	8009944 <_strtod_l+0x94>
 800998a:	0032      	movs	r2, r6
 800998c:	003b      	movs	r3, r7
 800998e:	e7e3      	b.n	8009958 <_strtod_l+0xa8>
 8009990:	2300      	movs	r3, #0
 8009992:	e7ed      	b.n	8009970 <_strtod_l+0xc0>
 8009994:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009996:	2a00      	cmp	r2, #0
 8009998:	d007      	beq.n	80099aa <_strtod_l+0xfa>
 800999a:	2135      	movs	r1, #53	; 0x35
 800999c:	a824      	add	r0, sp, #144	; 0x90
 800999e:	f002 fd54 	bl	800c44a <__copybits>
 80099a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	f002 f90f 	bl	800bbc8 <_Bfree>
 80099aa:	1e68      	subs	r0, r5, #1
 80099ac:	2805      	cmp	r0, #5
 80099ae:	d806      	bhi.n	80099be <_strtod_l+0x10e>
 80099b0:	f7f6 fbbc 	bl	800012c <__gnu_thumb1_case_uqi>
 80099b4:	1c190b0e 	.word	0x1c190b0e
 80099b8:	030e      	.short	0x030e
 80099ba:	2700      	movs	r7, #0
 80099bc:	003e      	movs	r6, r7
 80099be:	0723      	lsls	r3, r4, #28
 80099c0:	d5bd      	bpl.n	800993e <_strtod_l+0x8e>
 80099c2:	2380      	movs	r3, #128	; 0x80
 80099c4:	061b      	lsls	r3, r3, #24
 80099c6:	431f      	orrs	r7, r3
 80099c8:	e7b9      	b.n	800993e <_strtod_l+0x8e>
 80099ca:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80099cc:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80099ce:	e7f6      	b.n	80099be <_strtod_l+0x10e>
 80099d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80099d2:	4a6a      	ldr	r2, [pc, #424]	; (8009b7c <_strtod_l+0x2cc>)
 80099d4:	496a      	ldr	r1, [pc, #424]	; (8009b80 <_strtod_l+0x2d0>)
 80099d6:	401a      	ands	r2, r3
 80099d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099da:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80099dc:	185b      	adds	r3, r3, r1
 80099de:	051b      	lsls	r3, r3, #20
 80099e0:	431a      	orrs	r2, r3
 80099e2:	0017      	movs	r7, r2
 80099e4:	e7eb      	b.n	80099be <_strtod_l+0x10e>
 80099e6:	2600      	movs	r6, #0
 80099e8:	4f66      	ldr	r7, [pc, #408]	; (8009b84 <_strtod_l+0x2d4>)
 80099ea:	e7e8      	b.n	80099be <_strtod_l+0x10e>
 80099ec:	2601      	movs	r6, #1
 80099ee:	4f66      	ldr	r7, [pc, #408]	; (8009b88 <_strtod_l+0x2d8>)
 80099f0:	4276      	negs	r6, r6
 80099f2:	e7e4      	b.n	80099be <_strtod_l+0x10e>
 80099f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	9221      	str	r2, [sp, #132]	; 0x84
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b30      	cmp	r3, #48	; 0x30
 80099fe:	d0f9      	beq.n	80099f4 <_strtod_l+0x144>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d09c      	beq.n	800993e <_strtod_l+0x8e>
 8009a04:	2301      	movs	r3, #1
 8009a06:	930a      	str	r3, [sp, #40]	; 0x28
 8009a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	9311      	str	r3, [sp, #68]	; 0x44
 8009a0e:	2300      	movs	r3, #0
 8009a10:	930e      	str	r3, [sp, #56]	; 0x38
 8009a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a14:	9309      	str	r3, [sp, #36]	; 0x24
 8009a16:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009a18:	7805      	ldrb	r5, [r0, #0]
 8009a1a:	002b      	movs	r3, r5
 8009a1c:	3b30      	subs	r3, #48	; 0x30
 8009a1e:	b2d9      	uxtb	r1, r3
 8009a20:	2909      	cmp	r1, #9
 8009a22:	d927      	bls.n	8009a74 <_strtod_l+0x1c4>
 8009a24:	0022      	movs	r2, r4
 8009a26:	9907      	ldr	r1, [sp, #28]
 8009a28:	f003 fb0a 	bl	800d040 <strncmp>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d033      	beq.n	8009a98 <_strtod_l+0x1e8>
 8009a30:	2000      	movs	r0, #0
 8009a32:	002b      	movs	r3, r5
 8009a34:	4684      	mov	ip, r0
 8009a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a38:	900c      	str	r0, [sp, #48]	; 0x30
 8009a3a:	9206      	str	r2, [sp, #24]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	0019      	movs	r1, r3
 8009a40:	4391      	bics	r1, r2
 8009a42:	000a      	movs	r2, r1
 8009a44:	2100      	movs	r1, #0
 8009a46:	9107      	str	r1, [sp, #28]
 8009a48:	2a45      	cmp	r2, #69	; 0x45
 8009a4a:	d000      	beq.n	8009a4e <_strtod_l+0x19e>
 8009a4c:	e0c5      	b.n	8009bda <_strtod_l+0x32a>
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a52:	4303      	orrs	r3, r0
 8009a54:	4313      	orrs	r3, r2
 8009a56:	428b      	cmp	r3, r1
 8009a58:	d090      	beq.n	800997c <_strtod_l+0xcc>
 8009a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a5c:	9308      	str	r3, [sp, #32]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	9321      	str	r3, [sp, #132]	; 0x84
 8009a62:	9b08      	ldr	r3, [sp, #32]
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b2b      	cmp	r3, #43	; 0x2b
 8009a68:	d075      	beq.n	8009b56 <_strtod_l+0x2a6>
 8009a6a:	000c      	movs	r4, r1
 8009a6c:	2b2d      	cmp	r3, #45	; 0x2d
 8009a6e:	d178      	bne.n	8009b62 <_strtod_l+0x2b2>
 8009a70:	2401      	movs	r4, #1
 8009a72:	e071      	b.n	8009b58 <_strtod_l+0x2a8>
 8009a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a76:	2908      	cmp	r1, #8
 8009a78:	dc09      	bgt.n	8009a8e <_strtod_l+0x1de>
 8009a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a7c:	4351      	muls	r1, r2
 8009a7e:	185b      	adds	r3, r3, r1
 8009a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a84:	3001      	adds	r0, #1
 8009a86:	3301      	adds	r3, #1
 8009a88:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8a:	9021      	str	r0, [sp, #132]	; 0x84
 8009a8c:	e7c3      	b.n	8009a16 <_strtod_l+0x166>
 8009a8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a90:	4351      	muls	r1, r2
 8009a92:	185b      	adds	r3, r3, r1
 8009a94:	930e      	str	r3, [sp, #56]	; 0x38
 8009a96:	e7f4      	b.n	8009a82 <_strtod_l+0x1d2>
 8009a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a9c:	191c      	adds	r4, r3, r4
 8009a9e:	9421      	str	r4, [sp, #132]	; 0x84
 8009aa0:	7823      	ldrb	r3, [r4, #0]
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	d039      	beq.n	8009b1a <_strtod_l+0x26a>
 8009aa6:	900c      	str	r0, [sp, #48]	; 0x30
 8009aa8:	9206      	str	r2, [sp, #24]
 8009aaa:	001a      	movs	r2, r3
 8009aac:	3a30      	subs	r2, #48	; 0x30
 8009aae:	2a09      	cmp	r2, #9
 8009ab0:	d912      	bls.n	8009ad8 <_strtod_l+0x228>
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	4694      	mov	ip, r2
 8009ab6:	e7c1      	b.n	8009a3c <_strtod_l+0x18c>
 8009ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aba:	3001      	adds	r0, #1
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	9221      	str	r2, [sp, #132]	; 0x84
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b30      	cmp	r3, #48	; 0x30
 8009ac4:	d0f8      	beq.n	8009ab8 <_strtod_l+0x208>
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	3a31      	subs	r2, #49	; 0x31
 8009aca:	2a08      	cmp	r2, #8
 8009acc:	d83e      	bhi.n	8009b4c <_strtod_l+0x29c>
 8009ace:	900c      	str	r0, [sp, #48]	; 0x30
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ad4:	9006      	str	r0, [sp, #24]
 8009ad6:	9211      	str	r2, [sp, #68]	; 0x44
 8009ad8:	001a      	movs	r2, r3
 8009ada:	9906      	ldr	r1, [sp, #24]
 8009adc:	1c44      	adds	r4, r0, #1
 8009ade:	3a30      	subs	r2, #48	; 0x30
 8009ae0:	2b30      	cmp	r3, #48	; 0x30
 8009ae2:	d013      	beq.n	8009b0c <_strtod_l+0x25c>
 8009ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ae6:	191b      	adds	r3, r3, r4
 8009ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8009aea:	1844      	adds	r4, r0, r1
 8009aec:	000b      	movs	r3, r1
 8009aee:	210a      	movs	r1, #10
 8009af0:	429c      	cmp	r4, r3
 8009af2:	d114      	bne.n	8009b1e <_strtod_l+0x26e>
 8009af4:	9b06      	ldr	r3, [sp, #24]
 8009af6:	1c59      	adds	r1, r3, #1
 8009af8:	1809      	adds	r1, r1, r0
 8009afa:	1818      	adds	r0, r3, r0
 8009afc:	2808      	cmp	r0, #8
 8009afe:	dc1c      	bgt.n	8009b3a <_strtod_l+0x28a>
 8009b00:	230a      	movs	r3, #10
 8009b02:	2400      	movs	r4, #0
 8009b04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009b06:	4343      	muls	r3, r0
 8009b08:	18d3      	adds	r3, r2, r3
 8009b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b0e:	0020      	movs	r0, r4
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	9221      	str	r2, [sp, #132]	; 0x84
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	9106      	str	r1, [sp, #24]
 8009b18:	e7c7      	b.n	8009aaa <_strtod_l+0x1fa>
 8009b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b1c:	e7d1      	b.n	8009ac2 <_strtod_l+0x212>
 8009b1e:	2b08      	cmp	r3, #8
 8009b20:	dc04      	bgt.n	8009b2c <_strtod_l+0x27c>
 8009b22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b24:	434d      	muls	r5, r1
 8009b26:	950b      	str	r5, [sp, #44]	; 0x2c
 8009b28:	3301      	adds	r3, #1
 8009b2a:	e7e1      	b.n	8009af0 <_strtod_l+0x240>
 8009b2c:	1c5d      	adds	r5, r3, #1
 8009b2e:	2d10      	cmp	r5, #16
 8009b30:	dcfa      	bgt.n	8009b28 <_strtod_l+0x278>
 8009b32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009b34:	434d      	muls	r5, r1
 8009b36:	950e      	str	r5, [sp, #56]	; 0x38
 8009b38:	e7f6      	b.n	8009b28 <_strtod_l+0x278>
 8009b3a:	2400      	movs	r4, #0
 8009b3c:	2910      	cmp	r1, #16
 8009b3e:	dce5      	bgt.n	8009b0c <_strtod_l+0x25c>
 8009b40:	230a      	movs	r3, #10
 8009b42:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009b44:	4343      	muls	r3, r0
 8009b46:	18d3      	adds	r3, r2, r3
 8009b48:	930e      	str	r3, [sp, #56]	; 0x38
 8009b4a:	e7df      	b.n	8009b0c <_strtod_l+0x25c>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	920c      	str	r2, [sp, #48]	; 0x30
 8009b50:	9206      	str	r2, [sp, #24]
 8009b52:	3201      	adds	r2, #1
 8009b54:	e7ae      	b.n	8009ab4 <_strtod_l+0x204>
 8009b56:	2400      	movs	r4, #0
 8009b58:	9b08      	ldr	r3, [sp, #32]
 8009b5a:	3302      	adds	r3, #2
 8009b5c:	9321      	str	r3, [sp, #132]	; 0x84
 8009b5e:	9b08      	ldr	r3, [sp, #32]
 8009b60:	789b      	ldrb	r3, [r3, #2]
 8009b62:	001a      	movs	r2, r3
 8009b64:	3a30      	subs	r2, #48	; 0x30
 8009b66:	2a09      	cmp	r2, #9
 8009b68:	d914      	bls.n	8009b94 <_strtod_l+0x2e4>
 8009b6a:	9a08      	ldr	r2, [sp, #32]
 8009b6c:	9221      	str	r2, [sp, #132]	; 0x84
 8009b6e:	2200      	movs	r2, #0
 8009b70:	e032      	b.n	8009bd8 <_strtod_l+0x328>
 8009b72:	46c0      	nop			; (mov r8, r8)
 8009b74:	0800e248 	.word	0x0800e248
 8009b78:	0800dff4 	.word	0x0800dff4
 8009b7c:	ffefffff 	.word	0xffefffff
 8009b80:	00000433 	.word	0x00000433
 8009b84:	7ff00000 	.word	0x7ff00000
 8009b88:	7fffffff 	.word	0x7fffffff
 8009b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	9221      	str	r2, [sp, #132]	; 0x84
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b30      	cmp	r3, #48	; 0x30
 8009b96:	d0f9      	beq.n	8009b8c <_strtod_l+0x2dc>
 8009b98:	2200      	movs	r2, #0
 8009b9a:	9207      	str	r2, [sp, #28]
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	3a31      	subs	r2, #49	; 0x31
 8009ba0:	2a08      	cmp	r2, #8
 8009ba2:	d81a      	bhi.n	8009bda <_strtod_l+0x32a>
 8009ba4:	3b30      	subs	r3, #48	; 0x30
 8009ba6:	001a      	movs	r2, r3
 8009ba8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	9121      	str	r1, [sp, #132]	; 0x84
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	001d      	movs	r5, r3
 8009bb6:	3d30      	subs	r5, #48	; 0x30
 8009bb8:	2d09      	cmp	r5, #9
 8009bba:	d939      	bls.n	8009c30 <_strtod_l+0x380>
 8009bbc:	9d07      	ldr	r5, [sp, #28]
 8009bbe:	1b49      	subs	r1, r1, r5
 8009bc0:	4daf      	ldr	r5, [pc, #700]	; (8009e80 <_strtod_l+0x5d0>)
 8009bc2:	9507      	str	r5, [sp, #28]
 8009bc4:	2908      	cmp	r1, #8
 8009bc6:	dc03      	bgt.n	8009bd0 <_strtod_l+0x320>
 8009bc8:	9207      	str	r2, [sp, #28]
 8009bca:	42aa      	cmp	r2, r5
 8009bcc:	dd00      	ble.n	8009bd0 <_strtod_l+0x320>
 8009bce:	9507      	str	r5, [sp, #28]
 8009bd0:	2c00      	cmp	r4, #0
 8009bd2:	d002      	beq.n	8009bda <_strtod_l+0x32a>
 8009bd4:	9a07      	ldr	r2, [sp, #28]
 8009bd6:	4252      	negs	r2, r2
 8009bd8:	9207      	str	r2, [sp, #28]
 8009bda:	9a06      	ldr	r2, [sp, #24]
 8009bdc:	2a00      	cmp	r2, #0
 8009bde:	d14b      	bne.n	8009c78 <_strtod_l+0x3c8>
 8009be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009be2:	4310      	orrs	r0, r2
 8009be4:	d000      	beq.n	8009be8 <_strtod_l+0x338>
 8009be6:	e6aa      	b.n	800993e <_strtod_l+0x8e>
 8009be8:	4662      	mov	r2, ip
 8009bea:	2a00      	cmp	r2, #0
 8009bec:	d000      	beq.n	8009bf0 <_strtod_l+0x340>
 8009bee:	e6c5      	b.n	800997c <_strtod_l+0xcc>
 8009bf0:	2b69      	cmp	r3, #105	; 0x69
 8009bf2:	d025      	beq.n	8009c40 <_strtod_l+0x390>
 8009bf4:	dc21      	bgt.n	8009c3a <_strtod_l+0x38a>
 8009bf6:	2b49      	cmp	r3, #73	; 0x49
 8009bf8:	d022      	beq.n	8009c40 <_strtod_l+0x390>
 8009bfa:	2b4e      	cmp	r3, #78	; 0x4e
 8009bfc:	d000      	beq.n	8009c00 <_strtod_l+0x350>
 8009bfe:	e6bd      	b.n	800997c <_strtod_l+0xcc>
 8009c00:	49a0      	ldr	r1, [pc, #640]	; (8009e84 <_strtod_l+0x5d4>)
 8009c02:	a821      	add	r0, sp, #132	; 0x84
 8009c04:	f001 fe9a 	bl	800b93c <__match>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d100      	bne.n	8009c0e <_strtod_l+0x35e>
 8009c0c:	e6b6      	b.n	800997c <_strtod_l+0xcc>
 8009c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b28      	cmp	r3, #40	; 0x28
 8009c14:	d12a      	bne.n	8009c6c <_strtod_l+0x3bc>
 8009c16:	499c      	ldr	r1, [pc, #624]	; (8009e88 <_strtod_l+0x5d8>)
 8009c18:	aa24      	add	r2, sp, #144	; 0x90
 8009c1a:	a821      	add	r0, sp, #132	; 0x84
 8009c1c:	f001 fea2 	bl	800b964 <__hexnan>
 8009c20:	2805      	cmp	r0, #5
 8009c22:	d123      	bne.n	8009c6c <_strtod_l+0x3bc>
 8009c24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009c26:	4a99      	ldr	r2, [pc, #612]	; (8009e8c <_strtod_l+0x5dc>)
 8009c28:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	0017      	movs	r7, r2
 8009c2e:	e686      	b.n	800993e <_strtod_l+0x8e>
 8009c30:	210a      	movs	r1, #10
 8009c32:	434a      	muls	r2, r1
 8009c34:	18d2      	adds	r2, r2, r3
 8009c36:	3a30      	subs	r2, #48	; 0x30
 8009c38:	e7b8      	b.n	8009bac <_strtod_l+0x2fc>
 8009c3a:	2b6e      	cmp	r3, #110	; 0x6e
 8009c3c:	d0e0      	beq.n	8009c00 <_strtod_l+0x350>
 8009c3e:	e69d      	b.n	800997c <_strtod_l+0xcc>
 8009c40:	4993      	ldr	r1, [pc, #588]	; (8009e90 <_strtod_l+0x5e0>)
 8009c42:	a821      	add	r0, sp, #132	; 0x84
 8009c44:	f001 fe7a 	bl	800b93c <__match>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d100      	bne.n	8009c4e <_strtod_l+0x39e>
 8009c4c:	e696      	b.n	800997c <_strtod_l+0xcc>
 8009c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c50:	4990      	ldr	r1, [pc, #576]	; (8009e94 <_strtod_l+0x5e4>)
 8009c52:	3b01      	subs	r3, #1
 8009c54:	a821      	add	r0, sp, #132	; 0x84
 8009c56:	9321      	str	r3, [sp, #132]	; 0x84
 8009c58:	f001 fe70 	bl	800b93c <__match>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d102      	bne.n	8009c66 <_strtod_l+0x3b6>
 8009c60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c62:	3301      	adds	r3, #1
 8009c64:	9321      	str	r3, [sp, #132]	; 0x84
 8009c66:	2600      	movs	r6, #0
 8009c68:	4f88      	ldr	r7, [pc, #544]	; (8009e8c <_strtod_l+0x5dc>)
 8009c6a:	e668      	b.n	800993e <_strtod_l+0x8e>
 8009c6c:	488a      	ldr	r0, [pc, #552]	; (8009e98 <_strtod_l+0x5e8>)
 8009c6e:	f003 f993 	bl	800cf98 <nan>
 8009c72:	0006      	movs	r6, r0
 8009c74:	000f      	movs	r7, r1
 8009c76:	e662      	b.n	800993e <_strtod_l+0x8e>
 8009c78:	9b07      	ldr	r3, [sp, #28]
 8009c7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <_strtod_l+0x3da>
 8009c86:	9b06      	ldr	r3, [sp, #24]
 8009c88:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8a:	9c06      	ldr	r4, [sp, #24]
 8009c8c:	2c10      	cmp	r4, #16
 8009c8e:	dd00      	ble.n	8009c92 <_strtod_l+0x3e2>
 8009c90:	2410      	movs	r4, #16
 8009c92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c94:	f7f8 fa74 	bl	8002180 <__aeabi_ui2d>
 8009c98:	9b06      	ldr	r3, [sp, #24]
 8009c9a:	0006      	movs	r6, r0
 8009c9c:	000f      	movs	r7, r1
 8009c9e:	2b09      	cmp	r3, #9
 8009ca0:	dd15      	ble.n	8009cce <_strtod_l+0x41e>
 8009ca2:	0022      	movs	r2, r4
 8009ca4:	4b7d      	ldr	r3, [pc, #500]	; (8009e9c <_strtod_l+0x5ec>)
 8009ca6:	3a09      	subs	r2, #9
 8009ca8:	00d2      	lsls	r2, r2, #3
 8009caa:	189b      	adds	r3, r3, r2
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f7f7 fbe4 	bl	800147c <__aeabi_dmul>
 8009cb4:	0006      	movs	r6, r0
 8009cb6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009cb8:	000f      	movs	r7, r1
 8009cba:	f7f8 fa61 	bl	8002180 <__aeabi_ui2d>
 8009cbe:	0002      	movs	r2, r0
 8009cc0:	000b      	movs	r3, r1
 8009cc2:	0030      	movs	r0, r6
 8009cc4:	0039      	movs	r1, r7
 8009cc6:	f7f6 fc69 	bl	800059c <__aeabi_dadd>
 8009cca:	0006      	movs	r6, r0
 8009ccc:	000f      	movs	r7, r1
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	2b0f      	cmp	r3, #15
 8009cd2:	dc39      	bgt.n	8009d48 <_strtod_l+0x498>
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d100      	bne.n	8009cdc <_strtod_l+0x42c>
 8009cda:	e630      	b.n	800993e <_strtod_l+0x8e>
 8009cdc:	dd24      	ble.n	8009d28 <_strtod_l+0x478>
 8009cde:	2b16      	cmp	r3, #22
 8009ce0:	dc09      	bgt.n	8009cf6 <_strtod_l+0x446>
 8009ce2:	00dd      	lsls	r5, r3, #3
 8009ce4:	0032      	movs	r2, r6
 8009ce6:	003b      	movs	r3, r7
 8009ce8:	4c6c      	ldr	r4, [pc, #432]	; (8009e9c <_strtod_l+0x5ec>)
 8009cea:	1964      	adds	r4, r4, r5
 8009cec:	6820      	ldr	r0, [r4, #0]
 8009cee:	6861      	ldr	r1, [r4, #4]
 8009cf0:	f7f7 fbc4 	bl	800147c <__aeabi_dmul>
 8009cf4:	e7bd      	b.n	8009c72 <_strtod_l+0x3c2>
 8009cf6:	2325      	movs	r3, #37	; 0x25
 8009cf8:	9a06      	ldr	r2, [sp, #24]
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	db22      	blt.n	8009d48 <_strtod_l+0x498>
 8009d02:	240f      	movs	r4, #15
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	4d65      	ldr	r5, [pc, #404]	; (8009e9c <_strtod_l+0x5ec>)
 8009d08:	1ae4      	subs	r4, r4, r3
 8009d0a:	00e1      	lsls	r1, r4, #3
 8009d0c:	1869      	adds	r1, r5, r1
 8009d0e:	0032      	movs	r2, r6
 8009d10:	6808      	ldr	r0, [r1, #0]
 8009d12:	6849      	ldr	r1, [r1, #4]
 8009d14:	003b      	movs	r3, r7
 8009d16:	f7f7 fbb1 	bl	800147c <__aeabi_dmul>
 8009d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1c:	1b1c      	subs	r4, r3, r4
 8009d1e:	00e4      	lsls	r4, r4, #3
 8009d20:	192c      	adds	r4, r5, r4
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	6863      	ldr	r3, [r4, #4]
 8009d26:	e7e3      	b.n	8009cf0 <_strtod_l+0x440>
 8009d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d2a:	3316      	adds	r3, #22
 8009d2c:	db0c      	blt.n	8009d48 <_strtod_l+0x498>
 8009d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d30:	9a07      	ldr	r2, [sp, #28]
 8009d32:	0030      	movs	r0, r6
 8009d34:	1a9a      	subs	r2, r3, r2
 8009d36:	4b59      	ldr	r3, [pc, #356]	; (8009e9c <_strtod_l+0x5ec>)
 8009d38:	00d2      	lsls	r2, r2, #3
 8009d3a:	189b      	adds	r3, r3, r2
 8009d3c:	0039      	movs	r1, r7
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f7f6 ff95 	bl	8000c70 <__aeabi_ddiv>
 8009d46:	e794      	b.n	8009c72 <_strtod_l+0x3c2>
 8009d48:	9b06      	ldr	r3, [sp, #24]
 8009d4a:	1b1c      	subs	r4, r3, r4
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4e:	18e4      	adds	r4, r4, r3
 8009d50:	2c00      	cmp	r4, #0
 8009d52:	dd70      	ble.n	8009e36 <_strtod_l+0x586>
 8009d54:	230f      	movs	r3, #15
 8009d56:	0021      	movs	r1, r4
 8009d58:	4019      	ands	r1, r3
 8009d5a:	421c      	tst	r4, r3
 8009d5c:	d00a      	beq.n	8009d74 <_strtod_l+0x4c4>
 8009d5e:	00cb      	lsls	r3, r1, #3
 8009d60:	494e      	ldr	r1, [pc, #312]	; (8009e9c <_strtod_l+0x5ec>)
 8009d62:	0032      	movs	r2, r6
 8009d64:	18c9      	adds	r1, r1, r3
 8009d66:	6808      	ldr	r0, [r1, #0]
 8009d68:	6849      	ldr	r1, [r1, #4]
 8009d6a:	003b      	movs	r3, r7
 8009d6c:	f7f7 fb86 	bl	800147c <__aeabi_dmul>
 8009d70:	0006      	movs	r6, r0
 8009d72:	000f      	movs	r7, r1
 8009d74:	230f      	movs	r3, #15
 8009d76:	439c      	bics	r4, r3
 8009d78:	d048      	beq.n	8009e0c <_strtod_l+0x55c>
 8009d7a:	3326      	adds	r3, #38	; 0x26
 8009d7c:	33ff      	adds	r3, #255	; 0xff
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	dd22      	ble.n	8009dc8 <_strtod_l+0x518>
 8009d82:	2300      	movs	r3, #0
 8009d84:	9306      	str	r3, [sp, #24]
 8009d86:	9307      	str	r3, [sp, #28]
 8009d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8c:	2322      	movs	r3, #34	; 0x22
 8009d8e:	2600      	movs	r6, #0
 8009d90:	9a05      	ldr	r2, [sp, #20]
 8009d92:	4f3e      	ldr	r7, [pc, #248]	; (8009e8c <_strtod_l+0x5dc>)
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d98:	42b3      	cmp	r3, r6
 8009d9a:	d100      	bne.n	8009d9e <_strtod_l+0x4ee>
 8009d9c:	e5cf      	b.n	800993e <_strtod_l+0x8e>
 8009d9e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009da0:	9805      	ldr	r0, [sp, #20]
 8009da2:	f001 ff11 	bl	800bbc8 <_Bfree>
 8009da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009da8:	9805      	ldr	r0, [sp, #20]
 8009daa:	f001 ff0d 	bl	800bbc8 <_Bfree>
 8009dae:	9907      	ldr	r1, [sp, #28]
 8009db0:	9805      	ldr	r0, [sp, #20]
 8009db2:	f001 ff09 	bl	800bbc8 <_Bfree>
 8009db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009db8:	9805      	ldr	r0, [sp, #20]
 8009dba:	f001 ff05 	bl	800bbc8 <_Bfree>
 8009dbe:	9906      	ldr	r1, [sp, #24]
 8009dc0:	9805      	ldr	r0, [sp, #20]
 8009dc2:	f001 ff01 	bl	800bbc8 <_Bfree>
 8009dc6:	e5ba      	b.n	800993e <_strtod_l+0x8e>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	0030      	movs	r0, r6
 8009dcc:	0039      	movs	r1, r7
 8009dce:	001d      	movs	r5, r3
 8009dd0:	1124      	asrs	r4, r4, #4
 8009dd2:	2c01      	cmp	r4, #1
 8009dd4:	dc1d      	bgt.n	8009e12 <_strtod_l+0x562>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <_strtod_l+0x52e>
 8009dda:	0006      	movs	r6, r0
 8009ddc:	000f      	movs	r7, r1
 8009dde:	4b30      	ldr	r3, [pc, #192]	; (8009ea0 <_strtod_l+0x5f0>)
 8009de0:	00ed      	lsls	r5, r5, #3
 8009de2:	18ff      	adds	r7, r7, r3
 8009de4:	4b2f      	ldr	r3, [pc, #188]	; (8009ea4 <_strtod_l+0x5f4>)
 8009de6:	0032      	movs	r2, r6
 8009de8:	195d      	adds	r5, r3, r5
 8009dea:	6828      	ldr	r0, [r5, #0]
 8009dec:	6869      	ldr	r1, [r5, #4]
 8009dee:	003b      	movs	r3, r7
 8009df0:	f7f7 fb44 	bl	800147c <__aeabi_dmul>
 8009df4:	4b25      	ldr	r3, [pc, #148]	; (8009e8c <_strtod_l+0x5dc>)
 8009df6:	4a2c      	ldr	r2, [pc, #176]	; (8009ea8 <_strtod_l+0x5f8>)
 8009df8:	0006      	movs	r6, r0
 8009dfa:	400b      	ands	r3, r1
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d8c0      	bhi.n	8009d82 <_strtod_l+0x4d2>
 8009e00:	4a2a      	ldr	r2, [pc, #168]	; (8009eac <_strtod_l+0x5fc>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d913      	bls.n	8009e2e <_strtod_l+0x57e>
 8009e06:	2601      	movs	r6, #1
 8009e08:	4f29      	ldr	r7, [pc, #164]	; (8009eb0 <_strtod_l+0x600>)
 8009e0a:	4276      	negs	r6, r6
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9308      	str	r3, [sp, #32]
 8009e10:	e087      	b.n	8009f22 <_strtod_l+0x672>
 8009e12:	2201      	movs	r2, #1
 8009e14:	4214      	tst	r4, r2
 8009e16:	d007      	beq.n	8009e28 <_strtod_l+0x578>
 8009e18:	4a22      	ldr	r2, [pc, #136]	; (8009ea4 <_strtod_l+0x5f4>)
 8009e1a:	00eb      	lsls	r3, r5, #3
 8009e1c:	189b      	adds	r3, r3, r2
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f7f7 fb2b 	bl	800147c <__aeabi_dmul>
 8009e26:	2301      	movs	r3, #1
 8009e28:	3501      	adds	r5, #1
 8009e2a:	1064      	asrs	r4, r4, #1
 8009e2c:	e7d1      	b.n	8009dd2 <_strtod_l+0x522>
 8009e2e:	23d4      	movs	r3, #212	; 0xd4
 8009e30:	049b      	lsls	r3, r3, #18
 8009e32:	18cf      	adds	r7, r1, r3
 8009e34:	e7ea      	b.n	8009e0c <_strtod_l+0x55c>
 8009e36:	2c00      	cmp	r4, #0
 8009e38:	d0e8      	beq.n	8009e0c <_strtod_l+0x55c>
 8009e3a:	4264      	negs	r4, r4
 8009e3c:	220f      	movs	r2, #15
 8009e3e:	0023      	movs	r3, r4
 8009e40:	4013      	ands	r3, r2
 8009e42:	4214      	tst	r4, r2
 8009e44:	d00a      	beq.n	8009e5c <_strtod_l+0x5ac>
 8009e46:	00da      	lsls	r2, r3, #3
 8009e48:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <_strtod_l+0x5ec>)
 8009e4a:	0030      	movs	r0, r6
 8009e4c:	189b      	adds	r3, r3, r2
 8009e4e:	0039      	movs	r1, r7
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f7f6 ff0c 	bl	8000c70 <__aeabi_ddiv>
 8009e58:	0006      	movs	r6, r0
 8009e5a:	000f      	movs	r7, r1
 8009e5c:	1124      	asrs	r4, r4, #4
 8009e5e:	d0d5      	beq.n	8009e0c <_strtod_l+0x55c>
 8009e60:	2c1f      	cmp	r4, #31
 8009e62:	dd27      	ble.n	8009eb4 <_strtod_l+0x604>
 8009e64:	2300      	movs	r3, #0
 8009e66:	9306      	str	r3, [sp, #24]
 8009e68:	9307      	str	r3, [sp, #28]
 8009e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6e:	2322      	movs	r3, #34	; 0x22
 8009e70:	9a05      	ldr	r2, [sp, #20]
 8009e72:	2600      	movs	r6, #0
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e78:	2700      	movs	r7, #0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d18f      	bne.n	8009d9e <_strtod_l+0x4ee>
 8009e7e:	e55e      	b.n	800993e <_strtod_l+0x8e>
 8009e80:	00004e1f 	.word	0x00004e1f
 8009e84:	0800dfc9 	.word	0x0800dfc9
 8009e88:	0800e008 	.word	0x0800e008
 8009e8c:	7ff00000 	.word	0x7ff00000
 8009e90:	0800dfc1 	.word	0x0800dfc1
 8009e94:	0800e14c 	.word	0x0800e14c
 8009e98:	0800e423 	.word	0x0800e423
 8009e9c:	0800e2e8 	.word	0x0800e2e8
 8009ea0:	fcb00000 	.word	0xfcb00000
 8009ea4:	0800e2c0 	.word	0x0800e2c0
 8009ea8:	7ca00000 	.word	0x7ca00000
 8009eac:	7c900000 	.word	0x7c900000
 8009eb0:	7fefffff 	.word	0x7fefffff
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	0022      	movs	r2, r4
 8009eb8:	401a      	ands	r2, r3
 8009eba:	9208      	str	r2, [sp, #32]
 8009ebc:	421c      	tst	r4, r3
 8009ebe:	d001      	beq.n	8009ec4 <_strtod_l+0x614>
 8009ec0:	335a      	adds	r3, #90	; 0x5a
 8009ec2:	9308      	str	r3, [sp, #32]
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	0039      	movs	r1, r7
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4dca      	ldr	r5, [pc, #808]	; (800a1f4 <_strtod_l+0x944>)
 8009ecc:	2201      	movs	r2, #1
 8009ece:	4214      	tst	r4, r2
 8009ed0:	d004      	beq.n	8009edc <_strtod_l+0x62c>
 8009ed2:	682a      	ldr	r2, [r5, #0]
 8009ed4:	686b      	ldr	r3, [r5, #4]
 8009ed6:	f7f7 fad1 	bl	800147c <__aeabi_dmul>
 8009eda:	2301      	movs	r3, #1
 8009edc:	1064      	asrs	r4, r4, #1
 8009ede:	3508      	adds	r5, #8
 8009ee0:	2c00      	cmp	r4, #0
 8009ee2:	d1f3      	bne.n	8009ecc <_strtod_l+0x61c>
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <_strtod_l+0x63c>
 8009ee8:	0006      	movs	r6, r0
 8009eea:	000f      	movs	r7, r1
 8009eec:	9b08      	ldr	r3, [sp, #32]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00f      	beq.n	8009f12 <_strtod_l+0x662>
 8009ef2:	236b      	movs	r3, #107	; 0x6b
 8009ef4:	0079      	lsls	r1, r7, #1
 8009ef6:	0d49      	lsrs	r1, r1, #21
 8009ef8:	003a      	movs	r2, r7
 8009efa:	1a5b      	subs	r3, r3, r1
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dd08      	ble.n	8009f12 <_strtod_l+0x662>
 8009f00:	2b1f      	cmp	r3, #31
 8009f02:	dc00      	bgt.n	8009f06 <_strtod_l+0x656>
 8009f04:	e126      	b.n	800a154 <_strtod_l+0x8a4>
 8009f06:	2600      	movs	r6, #0
 8009f08:	2b34      	cmp	r3, #52	; 0x34
 8009f0a:	dc00      	bgt.n	8009f0e <_strtod_l+0x65e>
 8009f0c:	e11b      	b.n	800a146 <_strtod_l+0x896>
 8009f0e:	27dc      	movs	r7, #220	; 0xdc
 8009f10:	04bf      	lsls	r7, r7, #18
 8009f12:	2200      	movs	r2, #0
 8009f14:	2300      	movs	r3, #0
 8009f16:	0030      	movs	r0, r6
 8009f18:	0039      	movs	r1, r7
 8009f1a:	f7f6 faa1 	bl	8000460 <__aeabi_dcmpeq>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d1a0      	bne.n	8009e64 <_strtod_l+0x5b4>
 8009f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f2a:	9b06      	ldr	r3, [sp, #24]
 8009f2c:	9805      	ldr	r0, [sp, #20]
 8009f2e:	f001 feb3 	bl	800bc98 <__s2b>
 8009f32:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d100      	bne.n	8009f3a <_strtod_l+0x68a>
 8009f38:	e723      	b.n	8009d82 <_strtod_l+0x4d2>
 8009f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f3c:	9907      	ldr	r1, [sp, #28]
 8009f3e:	17da      	asrs	r2, r3, #31
 8009f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f42:	1a5b      	subs	r3, r3, r1
 8009f44:	401a      	ands	r2, r3
 8009f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f48:	9215      	str	r2, [sp, #84]	; 0x54
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4e:	17db      	asrs	r3, r3, #31
 8009f50:	401a      	ands	r2, r3
 8009f52:	2300      	movs	r3, #0
 8009f54:	921c      	str	r2, [sp, #112]	; 0x70
 8009f56:	9306      	str	r3, [sp, #24]
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5c:	9805      	ldr	r0, [sp, #20]
 8009f5e:	6859      	ldr	r1, [r3, #4]
 8009f60:	f001 fdee 	bl	800bb40 <_Balloc>
 8009f64:	9009      	str	r0, [sp, #36]	; 0x24
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d100      	bne.n	8009f6c <_strtod_l+0x6bc>
 8009f6a:	e70f      	b.n	8009d8c <_strtod_l+0x4dc>
 8009f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	310c      	adds	r1, #12
 8009f74:	1c9a      	adds	r2, r3, #2
 8009f76:	0092      	lsls	r2, r2, #2
 8009f78:	300c      	adds	r0, #12
 8009f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f7c:	f001 fdd7 	bl	800bb2e <memcpy>
 8009f80:	ab24      	add	r3, sp, #144	; 0x90
 8009f82:	9301      	str	r3, [sp, #4]
 8009f84:	ab23      	add	r3, sp, #140	; 0x8c
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	0032      	movs	r2, r6
 8009f8a:	003b      	movs	r3, r7
 8009f8c:	9805      	ldr	r0, [sp, #20]
 8009f8e:	960e      	str	r6, [sp, #56]	; 0x38
 8009f90:	970f      	str	r7, [sp, #60]	; 0x3c
 8009f92:	f002 f9cf 	bl	800c334 <__d2b>
 8009f96:	9022      	str	r0, [sp, #136]	; 0x88
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d100      	bne.n	8009f9e <_strtod_l+0x6ee>
 8009f9c:	e6f6      	b.n	8009d8c <_strtod_l+0x4dc>
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	9805      	ldr	r0, [sp, #20]
 8009fa2:	f001 ff0d 	bl	800bdc0 <__i2b>
 8009fa6:	9007      	str	r0, [sp, #28]
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d100      	bne.n	8009fae <_strtod_l+0x6fe>
 8009fac:	e6ee      	b.n	8009d8c <_strtod_l+0x4dc>
 8009fae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	da00      	bge.n	8009fb6 <_strtod_l+0x706>
 8009fb4:	e0d3      	b.n	800a15e <_strtod_l+0x8ae>
 8009fb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009fb8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009fba:	189d      	adds	r5, r3, r2
 8009fbc:	9908      	ldr	r1, [sp, #32]
 8009fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009fc0:	1a5b      	subs	r3, r3, r1
 8009fc2:	2136      	movs	r1, #54	; 0x36
 8009fc4:	189b      	adds	r3, r3, r2
 8009fc6:	1a8a      	subs	r2, r1, r2
 8009fc8:	498b      	ldr	r1, [pc, #556]	; (800a1f8 <_strtod_l+0x948>)
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2001      	movs	r0, #1
 8009fce:	428b      	cmp	r3, r1
 8009fd0:	db00      	blt.n	8009fd4 <_strtod_l+0x724>
 8009fd2:	e0cf      	b.n	800a174 <_strtod_l+0x8c4>
 8009fd4:	1ac9      	subs	r1, r1, r3
 8009fd6:	1a52      	subs	r2, r2, r1
 8009fd8:	291f      	cmp	r1, #31
 8009fda:	dd00      	ble.n	8009fde <_strtod_l+0x72e>
 8009fdc:	e0c3      	b.n	800a166 <_strtod_l+0x8b6>
 8009fde:	4088      	lsls	r0, r1
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9014      	str	r0, [sp, #80]	; 0x50
 8009fe4:	9312      	str	r3, [sp, #72]	; 0x48
 8009fe6:	18ab      	adds	r3, r5, r2
 8009fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8009fea:	18a4      	adds	r4, r4, r2
 8009fec:	9b08      	ldr	r3, [sp, #32]
 8009fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff0:	191c      	adds	r4, r3, r4
 8009ff2:	002b      	movs	r3, r5
 8009ff4:	4295      	cmp	r5, r2
 8009ff6:	dd00      	ble.n	8009ffa <_strtod_l+0x74a>
 8009ff8:	0013      	movs	r3, r2
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	dd00      	ble.n	800a000 <_strtod_l+0x750>
 8009ffe:	0023      	movs	r3, r4
 800a000:	2b00      	cmp	r3, #0
 800a002:	dd04      	ble.n	800a00e <_strtod_l+0x75e>
 800a004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a006:	1ae4      	subs	r4, r4, r3
 800a008:	1ad2      	subs	r2, r2, r3
 800a00a:	920c      	str	r2, [sp, #48]	; 0x30
 800a00c:	1aed      	subs	r5, r5, r3
 800a00e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a010:	2b00      	cmp	r3, #0
 800a012:	dd17      	ble.n	800a044 <_strtod_l+0x794>
 800a014:	001a      	movs	r2, r3
 800a016:	9907      	ldr	r1, [sp, #28]
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	f001 ff97 	bl	800bf4c <__pow5mult>
 800a01e:	9007      	str	r0, [sp, #28]
 800a020:	2800      	cmp	r0, #0
 800a022:	d100      	bne.n	800a026 <_strtod_l+0x776>
 800a024:	e6b2      	b.n	8009d8c <_strtod_l+0x4dc>
 800a026:	0001      	movs	r1, r0
 800a028:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a02a:	9805      	ldr	r0, [sp, #20]
 800a02c:	f001 fede 	bl	800bdec <__multiply>
 800a030:	9011      	str	r0, [sp, #68]	; 0x44
 800a032:	2800      	cmp	r0, #0
 800a034:	d100      	bne.n	800a038 <_strtod_l+0x788>
 800a036:	e6a9      	b.n	8009d8c <_strtod_l+0x4dc>
 800a038:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a03a:	9805      	ldr	r0, [sp, #20]
 800a03c:	f001 fdc4 	bl	800bbc8 <_Bfree>
 800a040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a042:	9322      	str	r3, [sp, #136]	; 0x88
 800a044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd00      	ble.n	800a04c <_strtod_l+0x79c>
 800a04a:	e096      	b.n	800a17a <_strtod_l+0x8ca>
 800a04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04e:	2b00      	cmp	r3, #0
 800a050:	dd08      	ble.n	800a064 <_strtod_l+0x7b4>
 800a052:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a054:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a056:	9805      	ldr	r0, [sp, #20]
 800a058:	f001 ff78 	bl	800bf4c <__pow5mult>
 800a05c:	9009      	str	r0, [sp, #36]	; 0x24
 800a05e:	2800      	cmp	r0, #0
 800a060:	d100      	bne.n	800a064 <_strtod_l+0x7b4>
 800a062:	e693      	b.n	8009d8c <_strtod_l+0x4dc>
 800a064:	2c00      	cmp	r4, #0
 800a066:	dd08      	ble.n	800a07a <_strtod_l+0x7ca>
 800a068:	0022      	movs	r2, r4
 800a06a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a06c:	9805      	ldr	r0, [sp, #20]
 800a06e:	f001 ffc9 	bl	800c004 <__lshift>
 800a072:	9009      	str	r0, [sp, #36]	; 0x24
 800a074:	2800      	cmp	r0, #0
 800a076:	d100      	bne.n	800a07a <_strtod_l+0x7ca>
 800a078:	e688      	b.n	8009d8c <_strtod_l+0x4dc>
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	dd08      	ble.n	800a090 <_strtod_l+0x7e0>
 800a07e:	002a      	movs	r2, r5
 800a080:	9907      	ldr	r1, [sp, #28]
 800a082:	9805      	ldr	r0, [sp, #20]
 800a084:	f001 ffbe 	bl	800c004 <__lshift>
 800a088:	9007      	str	r0, [sp, #28]
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d100      	bne.n	800a090 <_strtod_l+0x7e0>
 800a08e:	e67d      	b.n	8009d8c <_strtod_l+0x4dc>
 800a090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a092:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a094:	9805      	ldr	r0, [sp, #20]
 800a096:	f002 f841 	bl	800c11c <__mdiff>
 800a09a:	9006      	str	r0, [sp, #24]
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d100      	bne.n	800a0a2 <_strtod_l+0x7f2>
 800a0a0:	e674      	b.n	8009d8c <_strtod_l+0x4dc>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	68c3      	ldr	r3, [r0, #12]
 800a0a6:	9907      	ldr	r1, [sp, #28]
 800a0a8:	60c2      	str	r2, [r0, #12]
 800a0aa:	9311      	str	r3, [sp, #68]	; 0x44
 800a0ac:	f002 f81a 	bl	800c0e4 <__mcmp>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	da6c      	bge.n	800a18e <_strtod_l+0x8de>
 800a0b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0b6:	4333      	orrs	r3, r6
 800a0b8:	d000      	beq.n	800a0bc <_strtod_l+0x80c>
 800a0ba:	e097      	b.n	800a1ec <_strtod_l+0x93c>
 800a0bc:	033b      	lsls	r3, r7, #12
 800a0be:	d000      	beq.n	800a0c2 <_strtod_l+0x812>
 800a0c0:	e094      	b.n	800a1ec <_strtod_l+0x93c>
 800a0c2:	22d6      	movs	r2, #214	; 0xd6
 800a0c4:	4b4d      	ldr	r3, [pc, #308]	; (800a1fc <_strtod_l+0x94c>)
 800a0c6:	04d2      	lsls	r2, r2, #19
 800a0c8:	403b      	ands	r3, r7
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d800      	bhi.n	800a0d0 <_strtod_l+0x820>
 800a0ce:	e08d      	b.n	800a1ec <_strtod_l+0x93c>
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <_strtod_l+0x836>
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	930a      	str	r3, [sp, #40]	; 0x28
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	dc00      	bgt.n	800a0e6 <_strtod_l+0x836>
 800a0e4:	e082      	b.n	800a1ec <_strtod_l+0x93c>
 800a0e6:	9906      	ldr	r1, [sp, #24]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	9805      	ldr	r0, [sp, #20]
 800a0ec:	f001 ff8a 	bl	800c004 <__lshift>
 800a0f0:	9907      	ldr	r1, [sp, #28]
 800a0f2:	9006      	str	r0, [sp, #24]
 800a0f4:	f001 fff6 	bl	800c0e4 <__mcmp>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	dd77      	ble.n	800a1ec <_strtod_l+0x93c>
 800a0fc:	9908      	ldr	r1, [sp, #32]
 800a0fe:	003b      	movs	r3, r7
 800a100:	4a3e      	ldr	r2, [pc, #248]	; (800a1fc <_strtod_l+0x94c>)
 800a102:	2900      	cmp	r1, #0
 800a104:	d100      	bne.n	800a108 <_strtod_l+0x858>
 800a106:	e09e      	b.n	800a246 <_strtod_l+0x996>
 800a108:	0011      	movs	r1, r2
 800a10a:	20d6      	movs	r0, #214	; 0xd6
 800a10c:	4039      	ands	r1, r7
 800a10e:	04c0      	lsls	r0, r0, #19
 800a110:	4281      	cmp	r1, r0
 800a112:	dd00      	ble.n	800a116 <_strtod_l+0x866>
 800a114:	e097      	b.n	800a246 <_strtod_l+0x996>
 800a116:	23dc      	movs	r3, #220	; 0xdc
 800a118:	049b      	lsls	r3, r3, #18
 800a11a:	4299      	cmp	r1, r3
 800a11c:	dc00      	bgt.n	800a120 <_strtod_l+0x870>
 800a11e:	e6a6      	b.n	8009e6e <_strtod_l+0x5be>
 800a120:	4b37      	ldr	r3, [pc, #220]	; (800a200 <_strtod_l+0x950>)
 800a122:	0030      	movs	r0, r6
 800a124:	931b      	str	r3, [sp, #108]	; 0x6c
 800a126:	2300      	movs	r3, #0
 800a128:	931a      	str	r3, [sp, #104]	; 0x68
 800a12a:	0039      	movs	r1, r7
 800a12c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a12e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a130:	f7f7 f9a4 	bl	800147c <__aeabi_dmul>
 800a134:	0006      	movs	r6, r0
 800a136:	000f      	movs	r7, r1
 800a138:	4308      	orrs	r0, r1
 800a13a:	d000      	beq.n	800a13e <_strtod_l+0x88e>
 800a13c:	e62f      	b.n	8009d9e <_strtod_l+0x4ee>
 800a13e:	2322      	movs	r3, #34	; 0x22
 800a140:	9a05      	ldr	r2, [sp, #20]
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	e62b      	b.n	8009d9e <_strtod_l+0x4ee>
 800a146:	2101      	movs	r1, #1
 800a148:	3b20      	subs	r3, #32
 800a14a:	4249      	negs	r1, r1
 800a14c:	4099      	lsls	r1, r3
 800a14e:	400a      	ands	r2, r1
 800a150:	0017      	movs	r7, r2
 800a152:	e6de      	b.n	8009f12 <_strtod_l+0x662>
 800a154:	2201      	movs	r2, #1
 800a156:	4252      	negs	r2, r2
 800a158:	409a      	lsls	r2, r3
 800a15a:	4016      	ands	r6, r2
 800a15c:	e6d9      	b.n	8009f12 <_strtod_l+0x662>
 800a15e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a160:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a162:	1ad4      	subs	r4, r2, r3
 800a164:	e72a      	b.n	8009fbc <_strtod_l+0x70c>
 800a166:	4927      	ldr	r1, [pc, #156]	; (800a204 <_strtod_l+0x954>)
 800a168:	1acb      	subs	r3, r1, r3
 800a16a:	0001      	movs	r1, r0
 800a16c:	4099      	lsls	r1, r3
 800a16e:	9112      	str	r1, [sp, #72]	; 0x48
 800a170:	9014      	str	r0, [sp, #80]	; 0x50
 800a172:	e738      	b.n	8009fe6 <_strtod_l+0x736>
 800a174:	2300      	movs	r3, #0
 800a176:	9312      	str	r3, [sp, #72]	; 0x48
 800a178:	e7fa      	b.n	800a170 <_strtod_l+0x8c0>
 800a17a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a17c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a17e:	9805      	ldr	r0, [sp, #20]
 800a180:	f001 ff40 	bl	800c004 <__lshift>
 800a184:	9022      	str	r0, [sp, #136]	; 0x88
 800a186:	2800      	cmp	r0, #0
 800a188:	d000      	beq.n	800a18c <_strtod_l+0x8dc>
 800a18a:	e75f      	b.n	800a04c <_strtod_l+0x79c>
 800a18c:	e5fe      	b.n	8009d8c <_strtod_l+0x4dc>
 800a18e:	970c      	str	r7, [sp, #48]	; 0x30
 800a190:	2800      	cmp	r0, #0
 800a192:	d176      	bne.n	800a282 <_strtod_l+0x9d2>
 800a194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a196:	033b      	lsls	r3, r7, #12
 800a198:	0b1b      	lsrs	r3, r3, #12
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	d038      	beq.n	800a210 <_strtod_l+0x960>
 800a19e:	4a1a      	ldr	r2, [pc, #104]	; (800a208 <_strtod_l+0x958>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d138      	bne.n	800a216 <_strtod_l+0x966>
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	9b08      	ldr	r3, [sp, #32]
 800a1a8:	4252      	negs	r2, r2
 800a1aa:	0031      	movs	r1, r6
 800a1ac:	0010      	movs	r0, r2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00b      	beq.n	800a1ca <_strtod_l+0x91a>
 800a1b2:	24d4      	movs	r4, #212	; 0xd4
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <_strtod_l+0x94c>)
 800a1b6:	0010      	movs	r0, r2
 800a1b8:	403b      	ands	r3, r7
 800a1ba:	04e4      	lsls	r4, r4, #19
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	d804      	bhi.n	800a1ca <_strtod_l+0x91a>
 800a1c0:	306c      	adds	r0, #108	; 0x6c
 800a1c2:	0d1b      	lsrs	r3, r3, #20
 800a1c4:	1ac3      	subs	r3, r0, r3
 800a1c6:	409a      	lsls	r2, r3
 800a1c8:	0010      	movs	r0, r2
 800a1ca:	4281      	cmp	r1, r0
 800a1cc:	d123      	bne.n	800a216 <_strtod_l+0x966>
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <_strtod_l+0x95c>)
 800a1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d102      	bne.n	800a1dc <_strtod_l+0x92c>
 800a1d6:	1c4b      	adds	r3, r1, #1
 800a1d8:	d100      	bne.n	800a1dc <_strtod_l+0x92c>
 800a1da:	e5d7      	b.n	8009d8c <_strtod_l+0x4dc>
 800a1dc:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <_strtod_l+0x94c>)
 800a1de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e0:	2600      	movs	r6, #0
 800a1e2:	401a      	ands	r2, r3
 800a1e4:	0013      	movs	r3, r2
 800a1e6:	2280      	movs	r2, #128	; 0x80
 800a1e8:	0352      	lsls	r2, r2, #13
 800a1ea:	189f      	adds	r7, r3, r2
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d196      	bne.n	800a120 <_strtod_l+0x870>
 800a1f2:	e5d4      	b.n	8009d9e <_strtod_l+0x4ee>
 800a1f4:	0800e020 	.word	0x0800e020
 800a1f8:	fffffc02 	.word	0xfffffc02
 800a1fc:	7ff00000 	.word	0x7ff00000
 800a200:	39500000 	.word	0x39500000
 800a204:	fffffbe2 	.word	0xfffffbe2
 800a208:	000fffff 	.word	0x000fffff
 800a20c:	7fefffff 	.word	0x7fefffff
 800a210:	4333      	orrs	r3, r6
 800a212:	d100      	bne.n	800a216 <_strtod_l+0x966>
 800a214:	e772      	b.n	800a0fc <_strtod_l+0x84c>
 800a216:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01d      	beq.n	800a258 <_strtod_l+0x9a8>
 800a21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a21e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a220:	4213      	tst	r3, r2
 800a222:	d0e3      	beq.n	800a1ec <_strtod_l+0x93c>
 800a224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a226:	0030      	movs	r0, r6
 800a228:	0039      	movs	r1, r7
 800a22a:	9a08      	ldr	r2, [sp, #32]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <_strtod_l+0x9b0>
 800a230:	f7ff fb26 	bl	8009880 <sulp>
 800a234:	0002      	movs	r2, r0
 800a236:	000b      	movs	r3, r1
 800a238:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a23a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a23c:	f7f6 f9ae 	bl	800059c <__aeabi_dadd>
 800a240:	0006      	movs	r6, r0
 800a242:	000f      	movs	r7, r1
 800a244:	e7d2      	b.n	800a1ec <_strtod_l+0x93c>
 800a246:	2601      	movs	r6, #1
 800a248:	4013      	ands	r3, r2
 800a24a:	4a9b      	ldr	r2, [pc, #620]	; (800a4b8 <_strtod_l+0xc08>)
 800a24c:	4276      	negs	r6, r6
 800a24e:	189b      	adds	r3, r3, r2
 800a250:	4a9a      	ldr	r2, [pc, #616]	; (800a4bc <_strtod_l+0xc0c>)
 800a252:	431a      	orrs	r2, r3
 800a254:	0017      	movs	r7, r2
 800a256:	e7c9      	b.n	800a1ec <_strtod_l+0x93c>
 800a258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a25a:	4233      	tst	r3, r6
 800a25c:	d0c6      	beq.n	800a1ec <_strtod_l+0x93c>
 800a25e:	e7e1      	b.n	800a224 <_strtod_l+0x974>
 800a260:	f7ff fb0e 	bl	8009880 <sulp>
 800a264:	0002      	movs	r2, r0
 800a266:	000b      	movs	r3, r1
 800a268:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a26a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a26c:	f7f7 fb72 	bl	8001954 <__aeabi_dsub>
 800a270:	2200      	movs	r2, #0
 800a272:	2300      	movs	r3, #0
 800a274:	0006      	movs	r6, r0
 800a276:	000f      	movs	r7, r1
 800a278:	f7f6 f8f2 	bl	8000460 <__aeabi_dcmpeq>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d0b5      	beq.n	800a1ec <_strtod_l+0x93c>
 800a280:	e5f5      	b.n	8009e6e <_strtod_l+0x5be>
 800a282:	9907      	ldr	r1, [sp, #28]
 800a284:	9806      	ldr	r0, [sp, #24]
 800a286:	f002 f8b9 	bl	800c3fc <__ratio>
 800a28a:	2380      	movs	r3, #128	; 0x80
 800a28c:	2200      	movs	r2, #0
 800a28e:	05db      	lsls	r3, r3, #23
 800a290:	0004      	movs	r4, r0
 800a292:	000d      	movs	r5, r1
 800a294:	f7f6 f8f4 	bl	8000480 <__aeabi_dcmple>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d079      	beq.n	800a390 <_strtod_l+0xae0>
 800a29c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d04b      	beq.n	800a33a <_strtod_l+0xa8a>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4c86      	ldr	r4, [pc, #536]	; (800a4c0 <_strtod_l+0xc10>)
 800a2a6:	2500      	movs	r5, #0
 800a2a8:	9312      	str	r3, [sp, #72]	; 0x48
 800a2aa:	9413      	str	r4, [sp, #76]	; 0x4c
 800a2ac:	4c84      	ldr	r4, [pc, #528]	; (800a4c0 <_strtod_l+0xc10>)
 800a2ae:	4a85      	ldr	r2, [pc, #532]	; (800a4c4 <_strtod_l+0xc14>)
 800a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	9314      	str	r3, [sp, #80]	; 0x50
 800a2b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2b8:	4b83      	ldr	r3, [pc, #524]	; (800a4c8 <_strtod_l+0xc18>)
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d000      	beq.n	800a2c0 <_strtod_l+0xa10>
 800a2be:	e0b0      	b.n	800a422 <_strtod_l+0xb72>
 800a2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2c4:	921a      	str	r2, [sp, #104]	; 0x68
 800a2c6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a2c8:	4a80      	ldr	r2, [pc, #512]	; (800a4cc <_strtod_l+0xc1c>)
 800a2ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2cc:	4694      	mov	ip, r2
 800a2ce:	4463      	add	r3, ip
 800a2d0:	001f      	movs	r7, r3
 800a2d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2d6:	0030      	movs	r0, r6
 800a2d8:	0039      	movs	r1, r7
 800a2da:	920c      	str	r2, [sp, #48]	; 0x30
 800a2dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a2de:	f001 ffb5 	bl	800c24c <__ulp>
 800a2e2:	0002      	movs	r2, r0
 800a2e4:	000b      	movs	r3, r1
 800a2e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a2e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a2ea:	f7f7 f8c7 	bl	800147c <__aeabi_dmul>
 800a2ee:	0032      	movs	r2, r6
 800a2f0:	003b      	movs	r3, r7
 800a2f2:	f7f6 f953 	bl	800059c <__aeabi_dadd>
 800a2f6:	4a73      	ldr	r2, [pc, #460]	; (800a4c4 <_strtod_l+0xc14>)
 800a2f8:	4b75      	ldr	r3, [pc, #468]	; (800a4d0 <_strtod_l+0xc20>)
 800a2fa:	0006      	movs	r6, r0
 800a2fc:	400a      	ands	r2, r1
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d95e      	bls.n	800a3c0 <_strtod_l+0xb10>
 800a302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a304:	4a73      	ldr	r2, [pc, #460]	; (800a4d4 <_strtod_l+0xc24>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d103      	bne.n	800a312 <_strtod_l+0xa62>
 800a30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a30c:	3301      	adds	r3, #1
 800a30e:	d100      	bne.n	800a312 <_strtod_l+0xa62>
 800a310:	e53c      	b.n	8009d8c <_strtod_l+0x4dc>
 800a312:	2601      	movs	r6, #1
 800a314:	4f6f      	ldr	r7, [pc, #444]	; (800a4d4 <_strtod_l+0xc24>)
 800a316:	4276      	negs	r6, r6
 800a318:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a31a:	9805      	ldr	r0, [sp, #20]
 800a31c:	f001 fc54 	bl	800bbc8 <_Bfree>
 800a320:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a322:	9805      	ldr	r0, [sp, #20]
 800a324:	f001 fc50 	bl	800bbc8 <_Bfree>
 800a328:	9907      	ldr	r1, [sp, #28]
 800a32a:	9805      	ldr	r0, [sp, #20]
 800a32c:	f001 fc4c 	bl	800bbc8 <_Bfree>
 800a330:	9906      	ldr	r1, [sp, #24]
 800a332:	9805      	ldr	r0, [sp, #20]
 800a334:	f001 fc48 	bl	800bbc8 <_Bfree>
 800a338:	e60f      	b.n	8009f5a <_strtod_l+0x6aa>
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d11c      	bne.n	800a378 <_strtod_l+0xac8>
 800a33e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a340:	031b      	lsls	r3, r3, #12
 800a342:	d11f      	bne.n	800a384 <_strtod_l+0xad4>
 800a344:	2200      	movs	r2, #0
 800a346:	0020      	movs	r0, r4
 800a348:	0029      	movs	r1, r5
 800a34a:	4b5d      	ldr	r3, [pc, #372]	; (800a4c0 <_strtod_l+0xc10>)
 800a34c:	f7f6 f88e 	bl	800046c <__aeabi_dcmplt>
 800a350:	2800      	cmp	r0, #0
 800a352:	d11a      	bne.n	800a38a <_strtod_l+0xada>
 800a354:	0020      	movs	r0, r4
 800a356:	0029      	movs	r1, r5
 800a358:	2200      	movs	r2, #0
 800a35a:	4b5f      	ldr	r3, [pc, #380]	; (800a4d8 <_strtod_l+0xc28>)
 800a35c:	f7f7 f88e 	bl	800147c <__aeabi_dmul>
 800a360:	0005      	movs	r5, r0
 800a362:	000c      	movs	r4, r1
 800a364:	2380      	movs	r3, #128	; 0x80
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	18e3      	adds	r3, r4, r3
 800a36a:	951e      	str	r5, [sp, #120]	; 0x78
 800a36c:	931f      	str	r3, [sp, #124]	; 0x7c
 800a36e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a372:	9212      	str	r2, [sp, #72]	; 0x48
 800a374:	9313      	str	r3, [sp, #76]	; 0x4c
 800a376:	e79a      	b.n	800a2ae <_strtod_l+0x9fe>
 800a378:	2e01      	cmp	r6, #1
 800a37a:	d103      	bne.n	800a384 <_strtod_l+0xad4>
 800a37c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d100      	bne.n	800a384 <_strtod_l+0xad4>
 800a382:	e574      	b.n	8009e6e <_strtod_l+0x5be>
 800a384:	2300      	movs	r3, #0
 800a386:	4c55      	ldr	r4, [pc, #340]	; (800a4dc <_strtod_l+0xc2c>)
 800a388:	e78d      	b.n	800a2a6 <_strtod_l+0x9f6>
 800a38a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a38c:	4c52      	ldr	r4, [pc, #328]	; (800a4d8 <_strtod_l+0xc28>)
 800a38e:	e7e9      	b.n	800a364 <_strtod_l+0xab4>
 800a390:	2200      	movs	r2, #0
 800a392:	0020      	movs	r0, r4
 800a394:	0029      	movs	r1, r5
 800a396:	4b50      	ldr	r3, [pc, #320]	; (800a4d8 <_strtod_l+0xc28>)
 800a398:	f7f7 f870 	bl	800147c <__aeabi_dmul>
 800a39c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a39e:	0005      	movs	r5, r0
 800a3a0:	000b      	movs	r3, r1
 800a3a2:	000c      	movs	r4, r1
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d107      	bne.n	800a3b8 <_strtod_l+0xb08>
 800a3a8:	2280      	movs	r2, #128	; 0x80
 800a3aa:	0612      	lsls	r2, r2, #24
 800a3ac:	188b      	adds	r3, r1, r2
 800a3ae:	9016      	str	r0, [sp, #88]	; 0x58
 800a3b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3b6:	e7dc      	b.n	800a372 <_strtod_l+0xac2>
 800a3b8:	0002      	movs	r2, r0
 800a3ba:	9216      	str	r2, [sp, #88]	; 0x58
 800a3bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3be:	e7f8      	b.n	800a3b2 <_strtod_l+0xb02>
 800a3c0:	23d4      	movs	r3, #212	; 0xd4
 800a3c2:	049b      	lsls	r3, r3, #18
 800a3c4:	18cf      	adds	r7, r1, r3
 800a3c6:	9b08      	ldr	r3, [sp, #32]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1a5      	bne.n	800a318 <_strtod_l+0xa68>
 800a3cc:	4b3d      	ldr	r3, [pc, #244]	; (800a4c4 <_strtod_l+0xc14>)
 800a3ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3d0:	403b      	ands	r3, r7
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d1a0      	bne.n	800a318 <_strtod_l+0xa68>
 800a3d6:	0028      	movs	r0, r5
 800a3d8:	0021      	movs	r1, r4
 800a3da:	f7f6 f88d 	bl	80004f8 <__aeabi_d2lz>
 800a3de:	f7f6 f8c7 	bl	8000570 <__aeabi_l2d>
 800a3e2:	0002      	movs	r2, r0
 800a3e4:	000b      	movs	r3, r1
 800a3e6:	0028      	movs	r0, r5
 800a3e8:	0021      	movs	r1, r4
 800a3ea:	f7f7 fab3 	bl	8001954 <__aeabi_dsub>
 800a3ee:	033b      	lsls	r3, r7, #12
 800a3f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3f2:	0b1b      	lsrs	r3, r3, #12
 800a3f4:	4333      	orrs	r3, r6
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	0004      	movs	r4, r0
 800a3fa:	000d      	movs	r5, r1
 800a3fc:	4a38      	ldr	r2, [pc, #224]	; (800a4e0 <_strtod_l+0xc30>)
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d055      	beq.n	800a4ae <_strtod_l+0xbfe>
 800a402:	4b38      	ldr	r3, [pc, #224]	; (800a4e4 <_strtod_l+0xc34>)
 800a404:	f7f6 f832 	bl	800046c <__aeabi_dcmplt>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d000      	beq.n	800a40e <_strtod_l+0xb5e>
 800a40c:	e4c7      	b.n	8009d9e <_strtod_l+0x4ee>
 800a40e:	0020      	movs	r0, r4
 800a410:	0029      	movs	r1, r5
 800a412:	4a35      	ldr	r2, [pc, #212]	; (800a4e8 <_strtod_l+0xc38>)
 800a414:	4b30      	ldr	r3, [pc, #192]	; (800a4d8 <_strtod_l+0xc28>)
 800a416:	f7f6 f83d 	bl	8000494 <__aeabi_dcmpgt>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d100      	bne.n	800a420 <_strtod_l+0xb70>
 800a41e:	e77b      	b.n	800a318 <_strtod_l+0xa68>
 800a420:	e4bd      	b.n	8009d9e <_strtod_l+0x4ee>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d02b      	beq.n	800a480 <_strtod_l+0xbd0>
 800a428:	23d4      	movs	r3, #212	; 0xd4
 800a42a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a42c:	04db      	lsls	r3, r3, #19
 800a42e:	429a      	cmp	r2, r3
 800a430:	d826      	bhi.n	800a480 <_strtod_l+0xbd0>
 800a432:	0028      	movs	r0, r5
 800a434:	0021      	movs	r1, r4
 800a436:	4a2d      	ldr	r2, [pc, #180]	; (800a4ec <_strtod_l+0xc3c>)
 800a438:	4b2d      	ldr	r3, [pc, #180]	; (800a4f0 <_strtod_l+0xc40>)
 800a43a:	f7f6 f821 	bl	8000480 <__aeabi_dcmple>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d017      	beq.n	800a472 <_strtod_l+0xbc2>
 800a442:	0028      	movs	r0, r5
 800a444:	0021      	movs	r1, r4
 800a446:	f7f6 f839 	bl	80004bc <__aeabi_d2uiz>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d100      	bne.n	800a450 <_strtod_l+0xba0>
 800a44e:	3001      	adds	r0, #1
 800a450:	f7f7 fe96 	bl	8002180 <__aeabi_ui2d>
 800a454:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a456:	0005      	movs	r5, r0
 800a458:	000b      	movs	r3, r1
 800a45a:	000c      	movs	r4, r1
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d122      	bne.n	800a4a6 <_strtod_l+0xbf6>
 800a460:	2280      	movs	r2, #128	; 0x80
 800a462:	0612      	lsls	r2, r2, #24
 800a464:	188b      	adds	r3, r1, r2
 800a466:	9018      	str	r0, [sp, #96]	; 0x60
 800a468:	9319      	str	r3, [sp, #100]	; 0x64
 800a46a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a46c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a46e:	9212      	str	r2, [sp, #72]	; 0x48
 800a470:	9313      	str	r3, [sp, #76]	; 0x4c
 800a472:	22d6      	movs	r2, #214	; 0xd6
 800a474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a476:	04d2      	lsls	r2, r2, #19
 800a478:	189b      	adds	r3, r3, r2
 800a47a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a480:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a482:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a484:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a486:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a488:	f001 fee0 	bl	800c24c <__ulp>
 800a48c:	0002      	movs	r2, r0
 800a48e:	000b      	movs	r3, r1
 800a490:	0030      	movs	r0, r6
 800a492:	0039      	movs	r1, r7
 800a494:	f7f6 fff2 	bl	800147c <__aeabi_dmul>
 800a498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a49c:	f7f6 f87e 	bl	800059c <__aeabi_dadd>
 800a4a0:	0006      	movs	r6, r0
 800a4a2:	000f      	movs	r7, r1
 800a4a4:	e78f      	b.n	800a3c6 <_strtod_l+0xb16>
 800a4a6:	0002      	movs	r2, r0
 800a4a8:	9218      	str	r2, [sp, #96]	; 0x60
 800a4aa:	9319      	str	r3, [sp, #100]	; 0x64
 800a4ac:	e7dd      	b.n	800a46a <_strtod_l+0xbba>
 800a4ae:	4b11      	ldr	r3, [pc, #68]	; (800a4f4 <_strtod_l+0xc44>)
 800a4b0:	f7f5 ffdc 	bl	800046c <__aeabi_dcmplt>
 800a4b4:	e7b1      	b.n	800a41a <_strtod_l+0xb6a>
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	fff00000 	.word	0xfff00000
 800a4bc:	000fffff 	.word	0x000fffff
 800a4c0:	3ff00000 	.word	0x3ff00000
 800a4c4:	7ff00000 	.word	0x7ff00000
 800a4c8:	7fe00000 	.word	0x7fe00000
 800a4cc:	fcb00000 	.word	0xfcb00000
 800a4d0:	7c9fffff 	.word	0x7c9fffff
 800a4d4:	7fefffff 	.word	0x7fefffff
 800a4d8:	3fe00000 	.word	0x3fe00000
 800a4dc:	bff00000 	.word	0xbff00000
 800a4e0:	94a03595 	.word	0x94a03595
 800a4e4:	3fdfffff 	.word	0x3fdfffff
 800a4e8:	35afe535 	.word	0x35afe535
 800a4ec:	ffc00000 	.word	0xffc00000
 800a4f0:	41dfffff 	.word	0x41dfffff
 800a4f4:	3fcfffff 	.word	0x3fcfffff

0800a4f8 <_strtod_r>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	4b02      	ldr	r3, [pc, #8]	; (800a504 <_strtod_r+0xc>)
 800a4fc:	f7ff f9d8 	bl	80098b0 <_strtod_l>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	20000074 	.word	0x20000074

0800a508 <_strtol_l.isra.0>:
 800a508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50a:	b087      	sub	sp, #28
 800a50c:	001e      	movs	r6, r3
 800a50e:	9005      	str	r0, [sp, #20]
 800a510:	9101      	str	r1, [sp, #4]
 800a512:	9202      	str	r2, [sp, #8]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d045      	beq.n	800a5a4 <_strtol_l.isra.0+0x9c>
 800a518:	0008      	movs	r0, r1
 800a51a:	2b24      	cmp	r3, #36	; 0x24
 800a51c:	d842      	bhi.n	800a5a4 <_strtol_l.isra.0+0x9c>
 800a51e:	4b3f      	ldr	r3, [pc, #252]	; (800a61c <_strtol_l.isra.0+0x114>)
 800a520:	2208      	movs	r2, #8
 800a522:	469c      	mov	ip, r3
 800a524:	0003      	movs	r3, r0
 800a526:	4661      	mov	r1, ip
 800a528:	781c      	ldrb	r4, [r3, #0]
 800a52a:	1c45      	adds	r5, r0, #1
 800a52c:	5d09      	ldrb	r1, [r1, r4]
 800a52e:	0028      	movs	r0, r5
 800a530:	000f      	movs	r7, r1
 800a532:	4017      	ands	r7, r2
 800a534:	4211      	tst	r1, r2
 800a536:	d1f5      	bne.n	800a524 <_strtol_l.isra.0+0x1c>
 800a538:	2c2d      	cmp	r4, #45	; 0x2d
 800a53a:	d13a      	bne.n	800a5b2 <_strtol_l.isra.0+0xaa>
 800a53c:	2701      	movs	r7, #1
 800a53e:	782c      	ldrb	r4, [r5, #0]
 800a540:	1c9d      	adds	r5, r3, #2
 800a542:	2e00      	cmp	r6, #0
 800a544:	d065      	beq.n	800a612 <_strtol_l.isra.0+0x10a>
 800a546:	2e10      	cmp	r6, #16
 800a548:	d109      	bne.n	800a55e <_strtol_l.isra.0+0x56>
 800a54a:	2c30      	cmp	r4, #48	; 0x30
 800a54c:	d107      	bne.n	800a55e <_strtol_l.isra.0+0x56>
 800a54e:	2220      	movs	r2, #32
 800a550:	782b      	ldrb	r3, [r5, #0]
 800a552:	4393      	bics	r3, r2
 800a554:	2b58      	cmp	r3, #88	; 0x58
 800a556:	d157      	bne.n	800a608 <_strtol_l.isra.0+0x100>
 800a558:	2610      	movs	r6, #16
 800a55a:	786c      	ldrb	r4, [r5, #1]
 800a55c:	3502      	adds	r5, #2
 800a55e:	4b30      	ldr	r3, [pc, #192]	; (800a620 <_strtol_l.isra.0+0x118>)
 800a560:	0031      	movs	r1, r6
 800a562:	18fb      	adds	r3, r7, r3
 800a564:	0018      	movs	r0, r3
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	f7f5 fe7a 	bl	8000260 <__aeabi_uidivmod>
 800a56c:	2300      	movs	r3, #0
 800a56e:	2201      	movs	r2, #1
 800a570:	4684      	mov	ip, r0
 800a572:	0018      	movs	r0, r3
 800a574:	9104      	str	r1, [sp, #16]
 800a576:	4252      	negs	r2, r2
 800a578:	0021      	movs	r1, r4
 800a57a:	3930      	subs	r1, #48	; 0x30
 800a57c:	2909      	cmp	r1, #9
 800a57e:	d81d      	bhi.n	800a5bc <_strtol_l.isra.0+0xb4>
 800a580:	000c      	movs	r4, r1
 800a582:	42a6      	cmp	r6, r4
 800a584:	dd28      	ble.n	800a5d8 <_strtol_l.isra.0+0xd0>
 800a586:	2b00      	cmp	r3, #0
 800a588:	db24      	blt.n	800a5d4 <_strtol_l.isra.0+0xcc>
 800a58a:	0013      	movs	r3, r2
 800a58c:	4584      	cmp	ip, r0
 800a58e:	d306      	bcc.n	800a59e <_strtol_l.isra.0+0x96>
 800a590:	d102      	bne.n	800a598 <_strtol_l.isra.0+0x90>
 800a592:	9904      	ldr	r1, [sp, #16]
 800a594:	42a1      	cmp	r1, r4
 800a596:	db02      	blt.n	800a59e <_strtol_l.isra.0+0x96>
 800a598:	2301      	movs	r3, #1
 800a59a:	4370      	muls	r0, r6
 800a59c:	1820      	adds	r0, r4, r0
 800a59e:	782c      	ldrb	r4, [r5, #0]
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	e7e9      	b.n	800a578 <_strtol_l.isra.0+0x70>
 800a5a4:	f7fe fa16 	bl	80089d4 <__errno>
 800a5a8:	2316      	movs	r3, #22
 800a5aa:	6003      	str	r3, [r0, #0]
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	b007      	add	sp, #28
 800a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b2:	2c2b      	cmp	r4, #43	; 0x2b
 800a5b4:	d1c5      	bne.n	800a542 <_strtol_l.isra.0+0x3a>
 800a5b6:	782c      	ldrb	r4, [r5, #0]
 800a5b8:	1c9d      	adds	r5, r3, #2
 800a5ba:	e7c2      	b.n	800a542 <_strtol_l.isra.0+0x3a>
 800a5bc:	0021      	movs	r1, r4
 800a5be:	3941      	subs	r1, #65	; 0x41
 800a5c0:	2919      	cmp	r1, #25
 800a5c2:	d801      	bhi.n	800a5c8 <_strtol_l.isra.0+0xc0>
 800a5c4:	3c37      	subs	r4, #55	; 0x37
 800a5c6:	e7dc      	b.n	800a582 <_strtol_l.isra.0+0x7a>
 800a5c8:	0021      	movs	r1, r4
 800a5ca:	3961      	subs	r1, #97	; 0x61
 800a5cc:	2919      	cmp	r1, #25
 800a5ce:	d803      	bhi.n	800a5d8 <_strtol_l.isra.0+0xd0>
 800a5d0:	3c57      	subs	r4, #87	; 0x57
 800a5d2:	e7d6      	b.n	800a582 <_strtol_l.isra.0+0x7a>
 800a5d4:	0013      	movs	r3, r2
 800a5d6:	e7e2      	b.n	800a59e <_strtol_l.isra.0+0x96>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	da09      	bge.n	800a5f0 <_strtol_l.isra.0+0xe8>
 800a5dc:	2322      	movs	r3, #34	; 0x22
 800a5de:	9a05      	ldr	r2, [sp, #20]
 800a5e0:	9803      	ldr	r0, [sp, #12]
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0e1      	beq.n	800a5ae <_strtol_l.isra.0+0xa6>
 800a5ea:	1e6b      	subs	r3, r5, #1
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	e007      	b.n	800a600 <_strtol_l.isra.0+0xf8>
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	d000      	beq.n	800a5f6 <_strtol_l.isra.0+0xee>
 800a5f4:	4240      	negs	r0, r0
 800a5f6:	9a02      	ldr	r2, [sp, #8]
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	d0d8      	beq.n	800a5ae <_strtol_l.isra.0+0xa6>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1f4      	bne.n	800a5ea <_strtol_l.isra.0+0xe2>
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	9a01      	ldr	r2, [sp, #4]
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e7d2      	b.n	800a5ae <_strtol_l.isra.0+0xa6>
 800a608:	2430      	movs	r4, #48	; 0x30
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d1a7      	bne.n	800a55e <_strtol_l.isra.0+0x56>
 800a60e:	3608      	adds	r6, #8
 800a610:	e7a5      	b.n	800a55e <_strtol_l.isra.0+0x56>
 800a612:	2c30      	cmp	r4, #48	; 0x30
 800a614:	d09b      	beq.n	800a54e <_strtol_l.isra.0+0x46>
 800a616:	260a      	movs	r6, #10
 800a618:	e7a1      	b.n	800a55e <_strtol_l.isra.0+0x56>
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	0800e049 	.word	0x0800e049
 800a620:	7fffffff 	.word	0x7fffffff

0800a624 <_strtol_r>:
 800a624:	b510      	push	{r4, lr}
 800a626:	f7ff ff6f 	bl	800a508 <_strtol_l.isra.0>
 800a62a:	bd10      	pop	{r4, pc}

0800a62c <_write_r>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	0004      	movs	r4, r0
 800a630:	0008      	movs	r0, r1
 800a632:	0011      	movs	r1, r2
 800a634:	001a      	movs	r2, r3
 800a636:	2300      	movs	r3, #0
 800a638:	4d05      	ldr	r5, [pc, #20]	; (800a650 <_write_r+0x24>)
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f9 ffa9 	bl	8004592 <_write>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d103      	bne.n	800a64c <_write_r+0x20>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d000      	beq.n	800a64c <_write_r+0x20>
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	20000614 	.word	0x20000614

0800a654 <_close_r>:
 800a654:	2300      	movs	r3, #0
 800a656:	b570      	push	{r4, r5, r6, lr}
 800a658:	4d06      	ldr	r5, [pc, #24]	; (800a674 <_close_r+0x20>)
 800a65a:	0004      	movs	r4, r0
 800a65c:	0008      	movs	r0, r1
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	f7f9 ffb3 	bl	80045ca <_close>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d103      	bne.n	800a670 <_close_r+0x1c>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d000      	beq.n	800a670 <_close_r+0x1c>
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	bd70      	pop	{r4, r5, r6, pc}
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	20000614 	.word	0x20000614

0800a678 <quorem>:
 800a678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67a:	0006      	movs	r6, r0
 800a67c:	690d      	ldr	r5, [r1, #16]
 800a67e:	6933      	ldr	r3, [r6, #16]
 800a680:	b087      	sub	sp, #28
 800a682:	2000      	movs	r0, #0
 800a684:	9102      	str	r1, [sp, #8]
 800a686:	42ab      	cmp	r3, r5
 800a688:	db6b      	blt.n	800a762 <quorem+0xea>
 800a68a:	000b      	movs	r3, r1
 800a68c:	3d01      	subs	r5, #1
 800a68e:	00ac      	lsls	r4, r5, #2
 800a690:	3314      	adds	r3, #20
 800a692:	9305      	str	r3, [sp, #20]
 800a694:	191b      	adds	r3, r3, r4
 800a696:	9303      	str	r3, [sp, #12]
 800a698:	0033      	movs	r3, r6
 800a69a:	3314      	adds	r3, #20
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	191c      	adds	r4, r3, r4
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	6827      	ldr	r7, [r4, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	0038      	movs	r0, r7
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	0019      	movs	r1, r3
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	f7f5 fd50 	bl	8000154 <__udivsi3>
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	9000      	str	r0, [sp, #0]
 800a6b8:	429f      	cmp	r7, r3
 800a6ba:	d329      	bcc.n	800a710 <quorem+0x98>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	469c      	mov	ip, r3
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	9f05      	ldr	r7, [sp, #20]
 800a6c4:	9304      	str	r3, [sp, #16]
 800a6c6:	cf08      	ldmia	r7!, {r3}
 800a6c8:	9a00      	ldr	r2, [sp, #0]
 800a6ca:	b299      	uxth	r1, r3
 800a6cc:	4351      	muls	r1, r2
 800a6ce:	0c1b      	lsrs	r3, r3, #16
 800a6d0:	4353      	muls	r3, r2
 800a6d2:	4461      	add	r1, ip
 800a6d4:	0c0a      	lsrs	r2, r1, #16
 800a6d6:	189b      	adds	r3, r3, r2
 800a6d8:	0c1a      	lsrs	r2, r3, #16
 800a6da:	9305      	str	r3, [sp, #20]
 800a6dc:	6803      	ldr	r3, [r0, #0]
 800a6de:	4694      	mov	ip, r2
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	b289      	uxth	r1, r1
 800a6e6:	18d2      	adds	r2, r2, r3
 800a6e8:	6803      	ldr	r3, [r0, #0]
 800a6ea:	1a52      	subs	r2, r2, r1
 800a6ec:	0c19      	lsrs	r1, r3, #16
 800a6ee:	466b      	mov	r3, sp
 800a6f0:	8a9b      	ldrh	r3, [r3, #20]
 800a6f2:	1acb      	subs	r3, r1, r3
 800a6f4:	1411      	asrs	r1, r2, #16
 800a6f6:	185b      	adds	r3, r3, r1
 800a6f8:	1419      	asrs	r1, r3, #16
 800a6fa:	b292      	uxth	r2, r2
 800a6fc:	041b      	lsls	r3, r3, #16
 800a6fe:	431a      	orrs	r2, r3
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	9104      	str	r1, [sp, #16]
 800a704:	c004      	stmia	r0!, {r2}
 800a706:	42bb      	cmp	r3, r7
 800a708:	d2dd      	bcs.n	800a6c6 <quorem+0x4e>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d02e      	beq.n	800a76e <quorem+0xf6>
 800a710:	0030      	movs	r0, r6
 800a712:	9902      	ldr	r1, [sp, #8]
 800a714:	f001 fce6 	bl	800c0e4 <__mcmp>
 800a718:	2800      	cmp	r0, #0
 800a71a:	db21      	blt.n	800a760 <quorem+0xe8>
 800a71c:	0030      	movs	r0, r6
 800a71e:	2400      	movs	r4, #0
 800a720:	9b00      	ldr	r3, [sp, #0]
 800a722:	9902      	ldr	r1, [sp, #8]
 800a724:	3301      	adds	r3, #1
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	3014      	adds	r0, #20
 800a72a:	3114      	adds	r1, #20
 800a72c:	6802      	ldr	r2, [r0, #0]
 800a72e:	c908      	ldmia	r1!, {r3}
 800a730:	b292      	uxth	r2, r2
 800a732:	1914      	adds	r4, r2, r4
 800a734:	b29a      	uxth	r2, r3
 800a736:	1aa2      	subs	r2, r4, r2
 800a738:	6804      	ldr	r4, [r0, #0]
 800a73a:	0c1b      	lsrs	r3, r3, #16
 800a73c:	0c24      	lsrs	r4, r4, #16
 800a73e:	1ae3      	subs	r3, r4, r3
 800a740:	1414      	asrs	r4, r2, #16
 800a742:	191b      	adds	r3, r3, r4
 800a744:	141c      	asrs	r4, r3, #16
 800a746:	b292      	uxth	r2, r2
 800a748:	041b      	lsls	r3, r3, #16
 800a74a:	4313      	orrs	r3, r2
 800a74c:	c008      	stmia	r0!, {r3}
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	428b      	cmp	r3, r1
 800a752:	d2eb      	bcs.n	800a72c <quorem+0xb4>
 800a754:	9a01      	ldr	r2, [sp, #4]
 800a756:	00ab      	lsls	r3, r5, #2
 800a758:	18d3      	adds	r3, r2, r3
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	d010      	beq.n	800a782 <quorem+0x10a>
 800a760:	9800      	ldr	r0, [sp, #0]
 800a762:	b007      	add	sp, #28
 800a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <quorem+0xfe>
 800a76c:	3d01      	subs	r5, #1
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	3c04      	subs	r4, #4
 800a772:	42a3      	cmp	r3, r4
 800a774:	d3f7      	bcc.n	800a766 <quorem+0xee>
 800a776:	6135      	str	r5, [r6, #16]
 800a778:	e7ca      	b.n	800a710 <quorem+0x98>
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d104      	bne.n	800a78a <quorem+0x112>
 800a780:	3d01      	subs	r5, #1
 800a782:	9a01      	ldr	r2, [sp, #4]
 800a784:	3b04      	subs	r3, #4
 800a786:	429a      	cmp	r2, r3
 800a788:	d3f7      	bcc.n	800a77a <quorem+0x102>
 800a78a:	6135      	str	r5, [r6, #16]
 800a78c:	e7e8      	b.n	800a760 <quorem+0xe8>
	...

0800a790 <_dtoa_r>:
 800a790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a792:	b09d      	sub	sp, #116	; 0x74
 800a794:	9202      	str	r2, [sp, #8]
 800a796:	9303      	str	r3, [sp, #12]
 800a798:	9b02      	ldr	r3, [sp, #8]
 800a79a:	9c03      	ldr	r4, [sp, #12]
 800a79c:	930a      	str	r3, [sp, #40]	; 0x28
 800a79e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a7a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a7a2:	0007      	movs	r7, r0
 800a7a4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a7a6:	2c00      	cmp	r4, #0
 800a7a8:	d10e      	bne.n	800a7c8 <_dtoa_r+0x38>
 800a7aa:	2010      	movs	r0, #16
 800a7ac:	f001 f998 	bl	800bae0 <malloc>
 800a7b0:	1e02      	subs	r2, r0, #0
 800a7b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a7b4:	d104      	bne.n	800a7c0 <_dtoa_r+0x30>
 800a7b6:	21ea      	movs	r1, #234	; 0xea
 800a7b8:	4bc0      	ldr	r3, [pc, #768]	; (800aabc <_dtoa_r+0x32c>)
 800a7ba:	48c1      	ldr	r0, [pc, #772]	; (800aac0 <_dtoa_r+0x330>)
 800a7bc:	f002 fd2e 	bl	800d21c <__assert_func>
 800a7c0:	6044      	str	r4, [r0, #4]
 800a7c2:	6084      	str	r4, [r0, #8]
 800a7c4:	6004      	str	r4, [r0, #0]
 800a7c6:	60c4      	str	r4, [r0, #12]
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	6819      	ldr	r1, [r3, #0]
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	d00a      	beq.n	800a7e6 <_dtoa_r+0x56>
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4093      	lsls	r3, r2
 800a7d6:	604a      	str	r2, [r1, #4]
 800a7d8:	608b      	str	r3, [r1, #8]
 800a7da:	0038      	movs	r0, r7
 800a7dc:	f001 f9f4 	bl	800bbc8 <_Bfree>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	9b03      	ldr	r3, [sp, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	da21      	bge.n	800a830 <_dtoa_r+0xa0>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	9b03      	ldr	r3, [sp, #12]
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	085b      	lsrs	r3, r3, #1
 800a7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a7fa:	4bb2      	ldr	r3, [pc, #712]	; (800aac4 <_dtoa_r+0x334>)
 800a7fc:	002a      	movs	r2, r5
 800a7fe:	9318      	str	r3, [sp, #96]	; 0x60
 800a800:	401a      	ands	r2, r3
 800a802:	429a      	cmp	r2, r3
 800a804:	d117      	bne.n	800a836 <_dtoa_r+0xa6>
 800a806:	4bb0      	ldr	r3, [pc, #704]	; (800aac8 <_dtoa_r+0x338>)
 800a808:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a80a:	0328      	lsls	r0, r5, #12
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	9b02      	ldr	r3, [sp, #8]
 800a810:	0b00      	lsrs	r0, r0, #12
 800a812:	4318      	orrs	r0, r3
 800a814:	d101      	bne.n	800a81a <_dtoa_r+0x8a>
 800a816:	f000 fdc3 	bl	800b3a0 <_dtoa_r+0xc10>
 800a81a:	48ac      	ldr	r0, [pc, #688]	; (800aacc <_dtoa_r+0x33c>)
 800a81c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a81e:	9005      	str	r0, [sp, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <_dtoa_r+0x9a>
 800a824:	4baa      	ldr	r3, [pc, #680]	; (800aad0 <_dtoa_r+0x340>)
 800a826:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	9805      	ldr	r0, [sp, #20]
 800a82c:	b01d      	add	sp, #116	; 0x74
 800a82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a830:	2300      	movs	r3, #0
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	e7e0      	b.n	800a7f8 <_dtoa_r+0x68>
 800a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a838:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a83a:	9312      	str	r3, [sp, #72]	; 0x48
 800a83c:	9413      	str	r4, [sp, #76]	; 0x4c
 800a83e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a840:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a842:	2200      	movs	r2, #0
 800a844:	2300      	movs	r3, #0
 800a846:	f7f5 fe0b 	bl	8000460 <__aeabi_dcmpeq>
 800a84a:	1e04      	subs	r4, r0, #0
 800a84c:	d00b      	beq.n	800a866 <_dtoa_r+0xd6>
 800a84e:	2301      	movs	r3, #1
 800a850:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	4b9f      	ldr	r3, [pc, #636]	; (800aad4 <_dtoa_r+0x344>)
 800a856:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a858:	9305      	str	r3, [sp, #20]
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	d0e5      	beq.n	800a82a <_dtoa_r+0x9a>
 800a85e:	4a9e      	ldr	r2, [pc, #632]	; (800aad8 <_dtoa_r+0x348>)
 800a860:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a862:	600a      	str	r2, [r1, #0]
 800a864:	e7e1      	b.n	800a82a <_dtoa_r+0x9a>
 800a866:	ab1a      	add	r3, sp, #104	; 0x68
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	0038      	movs	r0, r7
 800a870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a874:	f001 fd5e 	bl	800c334 <__d2b>
 800a878:	006e      	lsls	r6, r5, #1
 800a87a:	9004      	str	r0, [sp, #16]
 800a87c:	0d76      	lsrs	r6, r6, #21
 800a87e:	d100      	bne.n	800a882 <_dtoa_r+0xf2>
 800a880:	e07c      	b.n	800a97c <_dtoa_r+0x1ec>
 800a882:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a884:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a888:	4a94      	ldr	r2, [pc, #592]	; (800aadc <_dtoa_r+0x34c>)
 800a88a:	031b      	lsls	r3, r3, #12
 800a88c:	0b1b      	lsrs	r3, r3, #12
 800a88e:	431a      	orrs	r2, r3
 800a890:	0011      	movs	r1, r2
 800a892:	4b93      	ldr	r3, [pc, #588]	; (800aae0 <_dtoa_r+0x350>)
 800a894:	9416      	str	r4, [sp, #88]	; 0x58
 800a896:	18f6      	adds	r6, r6, r3
 800a898:	2200      	movs	r2, #0
 800a89a:	4b92      	ldr	r3, [pc, #584]	; (800aae4 <_dtoa_r+0x354>)
 800a89c:	f7f7 f85a 	bl	8001954 <__aeabi_dsub>
 800a8a0:	4a91      	ldr	r2, [pc, #580]	; (800aae8 <_dtoa_r+0x358>)
 800a8a2:	4b92      	ldr	r3, [pc, #584]	; (800aaec <_dtoa_r+0x35c>)
 800a8a4:	f7f6 fdea 	bl	800147c <__aeabi_dmul>
 800a8a8:	4a91      	ldr	r2, [pc, #580]	; (800aaf0 <_dtoa_r+0x360>)
 800a8aa:	4b92      	ldr	r3, [pc, #584]	; (800aaf4 <_dtoa_r+0x364>)
 800a8ac:	f7f5 fe76 	bl	800059c <__aeabi_dadd>
 800a8b0:	0004      	movs	r4, r0
 800a8b2:	0030      	movs	r0, r6
 800a8b4:	000d      	movs	r5, r1
 800a8b6:	f7f7 fc33 	bl	8002120 <__aeabi_i2d>
 800a8ba:	4a8f      	ldr	r2, [pc, #572]	; (800aaf8 <_dtoa_r+0x368>)
 800a8bc:	4b8f      	ldr	r3, [pc, #572]	; (800aafc <_dtoa_r+0x36c>)
 800a8be:	f7f6 fddd 	bl	800147c <__aeabi_dmul>
 800a8c2:	0002      	movs	r2, r0
 800a8c4:	000b      	movs	r3, r1
 800a8c6:	0020      	movs	r0, r4
 800a8c8:	0029      	movs	r1, r5
 800a8ca:	f7f5 fe67 	bl	800059c <__aeabi_dadd>
 800a8ce:	0004      	movs	r4, r0
 800a8d0:	000d      	movs	r5, r1
 800a8d2:	f7f7 fbef 	bl	80020b4 <__aeabi_d2iz>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	9002      	str	r0, [sp, #8]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	0020      	movs	r0, r4
 800a8de:	0029      	movs	r1, r5
 800a8e0:	f7f5 fdc4 	bl	800046c <__aeabi_dcmplt>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d00b      	beq.n	800a900 <_dtoa_r+0x170>
 800a8e8:	9802      	ldr	r0, [sp, #8]
 800a8ea:	f7f7 fc19 	bl	8002120 <__aeabi_i2d>
 800a8ee:	002b      	movs	r3, r5
 800a8f0:	0022      	movs	r2, r4
 800a8f2:	f7f5 fdb5 	bl	8000460 <__aeabi_dcmpeq>
 800a8f6:	4243      	negs	r3, r0
 800a8f8:	4158      	adcs	r0, r3
 800a8fa:	9b02      	ldr	r3, [sp, #8]
 800a8fc:	1a1b      	subs	r3, r3, r0
 800a8fe:	9302      	str	r3, [sp, #8]
 800a900:	2301      	movs	r3, #1
 800a902:	9315      	str	r3, [sp, #84]	; 0x54
 800a904:	9b02      	ldr	r3, [sp, #8]
 800a906:	2b16      	cmp	r3, #22
 800a908:	d80f      	bhi.n	800a92a <_dtoa_r+0x19a>
 800a90a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a90c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a90e:	00da      	lsls	r2, r3, #3
 800a910:	4b7b      	ldr	r3, [pc, #492]	; (800ab00 <_dtoa_r+0x370>)
 800a912:	189b      	adds	r3, r3, r2
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f7f5 fda8 	bl	800046c <__aeabi_dcmplt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d049      	beq.n	800a9b4 <_dtoa_r+0x224>
 800a920:	9b02      	ldr	r3, [sp, #8]
 800a922:	3b01      	subs	r3, #1
 800a924:	9302      	str	r3, [sp, #8]
 800a926:	2300      	movs	r3, #0
 800a928:	9315      	str	r3, [sp, #84]	; 0x54
 800a92a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a92c:	1b9e      	subs	r6, r3, r6
 800a92e:	2300      	movs	r3, #0
 800a930:	9308      	str	r3, [sp, #32]
 800a932:	0033      	movs	r3, r6
 800a934:	3b01      	subs	r3, #1
 800a936:	930d      	str	r3, [sp, #52]	; 0x34
 800a938:	d504      	bpl.n	800a944 <_dtoa_r+0x1b4>
 800a93a:	2301      	movs	r3, #1
 800a93c:	1b9b      	subs	r3, r3, r6
 800a93e:	9308      	str	r3, [sp, #32]
 800a940:	2300      	movs	r3, #0
 800a942:	930d      	str	r3, [sp, #52]	; 0x34
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	db36      	blt.n	800a9b8 <_dtoa_r+0x228>
 800a94a:	9a02      	ldr	r2, [sp, #8]
 800a94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a94e:	4694      	mov	ip, r2
 800a950:	4463      	add	r3, ip
 800a952:	930d      	str	r3, [sp, #52]	; 0x34
 800a954:	2300      	movs	r3, #0
 800a956:	9214      	str	r2, [sp, #80]	; 0x50
 800a958:	930e      	str	r3, [sp, #56]	; 0x38
 800a95a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a95c:	2401      	movs	r4, #1
 800a95e:	2b09      	cmp	r3, #9
 800a960:	d862      	bhi.n	800aa28 <_dtoa_r+0x298>
 800a962:	2b05      	cmp	r3, #5
 800a964:	dd02      	ble.n	800a96c <_dtoa_r+0x1dc>
 800a966:	2400      	movs	r4, #0
 800a968:	3b04      	subs	r3, #4
 800a96a:	9322      	str	r3, [sp, #136]	; 0x88
 800a96c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a96e:	1e98      	subs	r0, r3, #2
 800a970:	2803      	cmp	r0, #3
 800a972:	d862      	bhi.n	800aa3a <_dtoa_r+0x2aa>
 800a974:	f7f5 fbda 	bl	800012c <__gnu_thumb1_case_uqi>
 800a978:	56343629 	.word	0x56343629
 800a97c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a97e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a980:	189e      	adds	r6, r3, r2
 800a982:	4b60      	ldr	r3, [pc, #384]	; (800ab04 <_dtoa_r+0x374>)
 800a984:	18f2      	adds	r2, r6, r3
 800a986:	2a20      	cmp	r2, #32
 800a988:	dd0f      	ble.n	800a9aa <_dtoa_r+0x21a>
 800a98a:	2340      	movs	r3, #64	; 0x40
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	409d      	lsls	r5, r3
 800a990:	4b5d      	ldr	r3, [pc, #372]	; (800ab08 <_dtoa_r+0x378>)
 800a992:	9802      	ldr	r0, [sp, #8]
 800a994:	18f3      	adds	r3, r6, r3
 800a996:	40d8      	lsrs	r0, r3
 800a998:	4328      	orrs	r0, r5
 800a99a:	f7f7 fbf1 	bl	8002180 <__aeabi_ui2d>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4c5a      	ldr	r4, [pc, #360]	; (800ab0c <_dtoa_r+0x37c>)
 800a9a2:	3e01      	subs	r6, #1
 800a9a4:	1909      	adds	r1, r1, r4
 800a9a6:	9316      	str	r3, [sp, #88]	; 0x58
 800a9a8:	e776      	b.n	800a898 <_dtoa_r+0x108>
 800a9aa:	2320      	movs	r3, #32
 800a9ac:	9802      	ldr	r0, [sp, #8]
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	4098      	lsls	r0, r3
 800a9b2:	e7f2      	b.n	800a99a <_dtoa_r+0x20a>
 800a9b4:	9015      	str	r0, [sp, #84]	; 0x54
 800a9b6:	e7b8      	b.n	800a92a <_dtoa_r+0x19a>
 800a9b8:	9b08      	ldr	r3, [sp, #32]
 800a9ba:	9a02      	ldr	r2, [sp, #8]
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	9308      	str	r3, [sp, #32]
 800a9c0:	4253      	negs	r3, r2
 800a9c2:	930e      	str	r3, [sp, #56]	; 0x38
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9314      	str	r3, [sp, #80]	; 0x50
 800a9c8:	e7c7      	b.n	800a95a <_dtoa_r+0x1ca>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dc36      	bgt.n	800aa42 <_dtoa_r+0x2b2>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	001a      	movs	r2, r3
 800a9d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a9da:	9306      	str	r3, [sp, #24]
 800a9dc:	9223      	str	r2, [sp, #140]	; 0x8c
 800a9de:	e00d      	b.n	800a9fc <_dtoa_r+0x26c>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e7f3      	b.n	800a9cc <_dtoa_r+0x23c>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ea:	4694      	mov	ip, r2
 800a9ec:	9b02      	ldr	r3, [sp, #8]
 800a9ee:	4463      	add	r3, ip
 800a9f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	9306      	str	r3, [sp, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dc00      	bgt.n	800a9fc <_dtoa_r+0x26c>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa00:	6042      	str	r2, [r0, #4]
 800aa02:	3204      	adds	r2, #4
 800aa04:	0015      	movs	r5, r2
 800aa06:	3514      	adds	r5, #20
 800aa08:	6841      	ldr	r1, [r0, #4]
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	d91d      	bls.n	800aa4a <_dtoa_r+0x2ba>
 800aa0e:	0038      	movs	r0, r7
 800aa10:	f001 f896 	bl	800bb40 <_Balloc>
 800aa14:	9005      	str	r0, [sp, #20]
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d11b      	bne.n	800aa52 <_dtoa_r+0x2c2>
 800aa1a:	21d5      	movs	r1, #213	; 0xd5
 800aa1c:	0002      	movs	r2, r0
 800aa1e:	4b3c      	ldr	r3, [pc, #240]	; (800ab10 <_dtoa_r+0x380>)
 800aa20:	0049      	lsls	r1, r1, #1
 800aa22:	e6ca      	b.n	800a7ba <_dtoa_r+0x2a>
 800aa24:	2301      	movs	r3, #1
 800aa26:	e7de      	b.n	800a9e6 <_dtoa_r+0x256>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	940f      	str	r4, [sp, #60]	; 0x3c
 800aa2c:	9322      	str	r3, [sp, #136]	; 0x88
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	930c      	str	r3, [sp, #48]	; 0x30
 800aa32:	9306      	str	r3, [sp, #24]
 800aa34:	2200      	movs	r2, #0
 800aa36:	3313      	adds	r3, #19
 800aa38:	e7d0      	b.n	800a9dc <_dtoa_r+0x24c>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa3e:	3b02      	subs	r3, #2
 800aa40:	e7f6      	b.n	800aa30 <_dtoa_r+0x2a0>
 800aa42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa44:	930c      	str	r3, [sp, #48]	; 0x30
 800aa46:	9306      	str	r3, [sp, #24]
 800aa48:	e7d8      	b.n	800a9fc <_dtoa_r+0x26c>
 800aa4a:	3101      	adds	r1, #1
 800aa4c:	6041      	str	r1, [r0, #4]
 800aa4e:	0052      	lsls	r2, r2, #1
 800aa50:	e7d8      	b.n	800aa04 <_dtoa_r+0x274>
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	9a05      	ldr	r2, [sp, #20]
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	9b06      	ldr	r3, [sp, #24]
 800aa5a:	2b0e      	cmp	r3, #14
 800aa5c:	d900      	bls.n	800aa60 <_dtoa_r+0x2d0>
 800aa5e:	e0eb      	b.n	800ac38 <_dtoa_r+0x4a8>
 800aa60:	2c00      	cmp	r4, #0
 800aa62:	d100      	bne.n	800aa66 <_dtoa_r+0x2d6>
 800aa64:	e0e8      	b.n	800ac38 <_dtoa_r+0x4a8>
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dd68      	ble.n	800ab3e <_dtoa_r+0x3ae>
 800aa6c:	001a      	movs	r2, r3
 800aa6e:	210f      	movs	r1, #15
 800aa70:	4b23      	ldr	r3, [pc, #140]	; (800ab00 <_dtoa_r+0x370>)
 800aa72:	400a      	ands	r2, r1
 800aa74:	00d2      	lsls	r2, r2, #3
 800aa76:	189b      	adds	r3, r3, r2
 800aa78:	681d      	ldr	r5, [r3, #0]
 800aa7a:	685e      	ldr	r6, [r3, #4]
 800aa7c:	9b02      	ldr	r3, [sp, #8]
 800aa7e:	111c      	asrs	r4, r3, #4
 800aa80:	2302      	movs	r3, #2
 800aa82:	9310      	str	r3, [sp, #64]	; 0x40
 800aa84:	9b02      	ldr	r3, [sp, #8]
 800aa86:	05db      	lsls	r3, r3, #23
 800aa88:	d50b      	bpl.n	800aaa2 <_dtoa_r+0x312>
 800aa8a:	4b22      	ldr	r3, [pc, #136]	; (800ab14 <_dtoa_r+0x384>)
 800aa8c:	400c      	ands	r4, r1
 800aa8e:	6a1a      	ldr	r2, [r3, #32]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa96:	f7f6 f8eb 	bl	8000c70 <__aeabi_ddiv>
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa9e:	910b      	str	r1, [sp, #44]	; 0x2c
 800aaa0:	9310      	str	r3, [sp, #64]	; 0x40
 800aaa2:	4b1c      	ldr	r3, [pc, #112]	; (800ab14 <_dtoa_r+0x384>)
 800aaa4:	9307      	str	r3, [sp, #28]
 800aaa6:	2c00      	cmp	r4, #0
 800aaa8:	d136      	bne.n	800ab18 <_dtoa_r+0x388>
 800aaaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aaac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaae:	002a      	movs	r2, r5
 800aab0:	0033      	movs	r3, r6
 800aab2:	f7f6 f8dd 	bl	8000c70 <__aeabi_ddiv>
 800aab6:	900a      	str	r0, [sp, #40]	; 0x28
 800aab8:	910b      	str	r1, [sp, #44]	; 0x2c
 800aaba:	e05c      	b.n	800ab76 <_dtoa_r+0x3e6>
 800aabc:	0800e156 	.word	0x0800e156
 800aac0:	0800e16d 	.word	0x0800e16d
 800aac4:	7ff00000 	.word	0x7ff00000
 800aac8:	0000270f 	.word	0x0000270f
 800aacc:	0800e152 	.word	0x0800e152
 800aad0:	0800e155 	.word	0x0800e155
 800aad4:	0800e3d1 	.word	0x0800e3d1
 800aad8:	0800e3d2 	.word	0x0800e3d2
 800aadc:	3ff00000 	.word	0x3ff00000
 800aae0:	fffffc01 	.word	0xfffffc01
 800aae4:	3ff80000 	.word	0x3ff80000
 800aae8:	636f4361 	.word	0x636f4361
 800aaec:	3fd287a7 	.word	0x3fd287a7
 800aaf0:	8b60c8b3 	.word	0x8b60c8b3
 800aaf4:	3fc68a28 	.word	0x3fc68a28
 800aaf8:	509f79fb 	.word	0x509f79fb
 800aafc:	3fd34413 	.word	0x3fd34413
 800ab00:	0800e2e8 	.word	0x0800e2e8
 800ab04:	00000432 	.word	0x00000432
 800ab08:	00000412 	.word	0x00000412
 800ab0c:	fe100000 	.word	0xfe100000
 800ab10:	0800e1cc 	.word	0x0800e1cc
 800ab14:	0800e2c0 	.word	0x0800e2c0
 800ab18:	2301      	movs	r3, #1
 800ab1a:	421c      	tst	r4, r3
 800ab1c:	d00b      	beq.n	800ab36 <_dtoa_r+0x3a6>
 800ab1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab20:	0028      	movs	r0, r5
 800ab22:	3301      	adds	r3, #1
 800ab24:	9310      	str	r3, [sp, #64]	; 0x40
 800ab26:	9b07      	ldr	r3, [sp, #28]
 800ab28:	0031      	movs	r1, r6
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f7f6 fca5 	bl	800147c <__aeabi_dmul>
 800ab32:	0005      	movs	r5, r0
 800ab34:	000e      	movs	r6, r1
 800ab36:	9b07      	ldr	r3, [sp, #28]
 800ab38:	1064      	asrs	r4, r4, #1
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	e7b2      	b.n	800aaa4 <_dtoa_r+0x314>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	9310      	str	r3, [sp, #64]	; 0x40
 800ab42:	9b02      	ldr	r3, [sp, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d016      	beq.n	800ab76 <_dtoa_r+0x3e6>
 800ab48:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ab4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ab4c:	425c      	negs	r4, r3
 800ab4e:	230f      	movs	r3, #15
 800ab50:	4ab5      	ldr	r2, [pc, #724]	; (800ae28 <_dtoa_r+0x698>)
 800ab52:	4023      	ands	r3, r4
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	18d3      	adds	r3, r2, r3
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f7f6 fc8e 	bl	800147c <__aeabi_dmul>
 800ab60:	2601      	movs	r6, #1
 800ab62:	2300      	movs	r3, #0
 800ab64:	900a      	str	r0, [sp, #40]	; 0x28
 800ab66:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab68:	4db0      	ldr	r5, [pc, #704]	; (800ae2c <_dtoa_r+0x69c>)
 800ab6a:	1124      	asrs	r4, r4, #4
 800ab6c:	2c00      	cmp	r4, #0
 800ab6e:	d000      	beq.n	800ab72 <_dtoa_r+0x3e2>
 800ab70:	e094      	b.n	800ac9c <_dtoa_r+0x50c>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d19f      	bne.n	800aab6 <_dtoa_r+0x326>
 800ab76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d100      	bne.n	800ab7e <_dtoa_r+0x3ee>
 800ab7c:	e09b      	b.n	800acb6 <_dtoa_r+0x526>
 800ab7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ab82:	2200      	movs	r2, #0
 800ab84:	0020      	movs	r0, r4
 800ab86:	0029      	movs	r1, r5
 800ab88:	4ba9      	ldr	r3, [pc, #676]	; (800ae30 <_dtoa_r+0x6a0>)
 800ab8a:	f7f5 fc6f 	bl	800046c <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d100      	bne.n	800ab94 <_dtoa_r+0x404>
 800ab92:	e090      	b.n	800acb6 <_dtoa_r+0x526>
 800ab94:	9b06      	ldr	r3, [sp, #24]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d100      	bne.n	800ab9c <_dtoa_r+0x40c>
 800ab9a:	e08c      	b.n	800acb6 <_dtoa_r+0x526>
 800ab9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd46      	ble.n	800ac30 <_dtoa_r+0x4a0>
 800aba2:	9b02      	ldr	r3, [sp, #8]
 800aba4:	2200      	movs	r2, #0
 800aba6:	0020      	movs	r0, r4
 800aba8:	0029      	movs	r1, r5
 800abaa:	1e5e      	subs	r6, r3, #1
 800abac:	4ba1      	ldr	r3, [pc, #644]	; (800ae34 <_dtoa_r+0x6a4>)
 800abae:	f7f6 fc65 	bl	800147c <__aeabi_dmul>
 800abb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abb4:	900a      	str	r0, [sp, #40]	; 0x28
 800abb6:	910b      	str	r1, [sp, #44]	; 0x2c
 800abb8:	3301      	adds	r3, #1
 800abba:	9310      	str	r3, [sp, #64]	; 0x40
 800abbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800abc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800abc4:	9307      	str	r3, [sp, #28]
 800abc6:	f7f7 faab 	bl	8002120 <__aeabi_i2d>
 800abca:	0022      	movs	r2, r4
 800abcc:	002b      	movs	r3, r5
 800abce:	f7f6 fc55 	bl	800147c <__aeabi_dmul>
 800abd2:	2200      	movs	r2, #0
 800abd4:	4b98      	ldr	r3, [pc, #608]	; (800ae38 <_dtoa_r+0x6a8>)
 800abd6:	f7f5 fce1 	bl	800059c <__aeabi_dadd>
 800abda:	9010      	str	r0, [sp, #64]	; 0x40
 800abdc:	9111      	str	r1, [sp, #68]	; 0x44
 800abde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abe2:	920a      	str	r2, [sp, #40]	; 0x28
 800abe4:	930b      	str	r3, [sp, #44]	; 0x2c
 800abe6:	4a95      	ldr	r2, [pc, #596]	; (800ae3c <_dtoa_r+0x6ac>)
 800abe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abea:	4694      	mov	ip, r2
 800abec:	4463      	add	r3, ip
 800abee:	9317      	str	r3, [sp, #92]	; 0x5c
 800abf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abf2:	9b07      	ldr	r3, [sp, #28]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d161      	bne.n	800acbc <_dtoa_r+0x52c>
 800abf8:	2200      	movs	r2, #0
 800abfa:	0020      	movs	r0, r4
 800abfc:	0029      	movs	r1, r5
 800abfe:	4b90      	ldr	r3, [pc, #576]	; (800ae40 <_dtoa_r+0x6b0>)
 800ac00:	f7f6 fea8 	bl	8001954 <__aeabi_dsub>
 800ac04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac08:	0004      	movs	r4, r0
 800ac0a:	000d      	movs	r5, r1
 800ac0c:	f7f5 fc42 	bl	8000494 <__aeabi_dcmpgt>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d000      	beq.n	800ac16 <_dtoa_r+0x486>
 800ac14:	e2b5      	b.n	800b182 <_dtoa_r+0x9f2>
 800ac16:	488b      	ldr	r0, [pc, #556]	; (800ae44 <_dtoa_r+0x6b4>)
 800ac18:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac1a:	4684      	mov	ip, r0
 800ac1c:	4461      	add	r1, ip
 800ac1e:	000b      	movs	r3, r1
 800ac20:	0020      	movs	r0, r4
 800ac22:	0029      	movs	r1, r5
 800ac24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac26:	f7f5 fc21 	bl	800046c <__aeabi_dcmplt>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d000      	beq.n	800ac30 <_dtoa_r+0x4a0>
 800ac2e:	e2a5      	b.n	800b17c <_dtoa_r+0x9ec>
 800ac30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ac34:	930a      	str	r3, [sp, #40]	; 0x28
 800ac36:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	da00      	bge.n	800ac40 <_dtoa_r+0x4b0>
 800ac3e:	e171      	b.n	800af24 <_dtoa_r+0x794>
 800ac40:	9a02      	ldr	r2, [sp, #8]
 800ac42:	2a0e      	cmp	r2, #14
 800ac44:	dd00      	ble.n	800ac48 <_dtoa_r+0x4b8>
 800ac46:	e16d      	b.n	800af24 <_dtoa_r+0x794>
 800ac48:	4b77      	ldr	r3, [pc, #476]	; (800ae28 <_dtoa_r+0x698>)
 800ac4a:	00d2      	lsls	r2, r2, #3
 800ac4c:	189b      	adds	r3, r3, r2
 800ac4e:	685c      	ldr	r4, [r3, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	9409      	str	r4, [sp, #36]	; 0x24
 800ac56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	db00      	blt.n	800ac5e <_dtoa_r+0x4ce>
 800ac5c:	e0f6      	b.n	800ae4c <_dtoa_r+0x6bc>
 800ac5e:	9b06      	ldr	r3, [sp, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dd00      	ble.n	800ac66 <_dtoa_r+0x4d6>
 800ac64:	e0f2      	b.n	800ae4c <_dtoa_r+0x6bc>
 800ac66:	d000      	beq.n	800ac6a <_dtoa_r+0x4da>
 800ac68:	e288      	b.n	800b17c <_dtoa_r+0x9ec>
 800ac6a:	9808      	ldr	r0, [sp, #32]
 800ac6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac6e:	2200      	movs	r2, #0
 800ac70:	4b73      	ldr	r3, [pc, #460]	; (800ae40 <_dtoa_r+0x6b0>)
 800ac72:	f7f6 fc03 	bl	800147c <__aeabi_dmul>
 800ac76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7a:	f7f5 fc15 	bl	80004a8 <__aeabi_dcmpge>
 800ac7e:	9e06      	ldr	r6, [sp, #24]
 800ac80:	0035      	movs	r5, r6
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d000      	beq.n	800ac88 <_dtoa_r+0x4f8>
 800ac86:	e25f      	b.n	800b148 <_dtoa_r+0x9b8>
 800ac88:	9b05      	ldr	r3, [sp, #20]
 800ac8a:	9a05      	ldr	r2, [sp, #20]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	2331      	movs	r3, #49	; 0x31
 800ac92:	7013      	strb	r3, [r2, #0]
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	3301      	adds	r3, #1
 800ac98:	9302      	str	r3, [sp, #8]
 800ac9a:	e25a      	b.n	800b152 <_dtoa_r+0x9c2>
 800ac9c:	4234      	tst	r4, r6
 800ac9e:	d007      	beq.n	800acb0 <_dtoa_r+0x520>
 800aca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aca2:	3301      	adds	r3, #1
 800aca4:	9310      	str	r3, [sp, #64]	; 0x40
 800aca6:	682a      	ldr	r2, [r5, #0]
 800aca8:	686b      	ldr	r3, [r5, #4]
 800acaa:	f7f6 fbe7 	bl	800147c <__aeabi_dmul>
 800acae:	0033      	movs	r3, r6
 800acb0:	1064      	asrs	r4, r4, #1
 800acb2:	3508      	adds	r5, #8
 800acb4:	e75a      	b.n	800ab6c <_dtoa_r+0x3dc>
 800acb6:	9e02      	ldr	r6, [sp, #8]
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	e780      	b.n	800abbe <_dtoa_r+0x42e>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acc0:	1e5a      	subs	r2, r3, #1
 800acc2:	4b59      	ldr	r3, [pc, #356]	; (800ae28 <_dtoa_r+0x698>)
 800acc4:	00d2      	lsls	r2, r2, #3
 800acc6:	189b      	adds	r3, r3, r2
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2900      	cmp	r1, #0
 800acce:	d051      	beq.n	800ad74 <_dtoa_r+0x5e4>
 800acd0:	2000      	movs	r0, #0
 800acd2:	495d      	ldr	r1, [pc, #372]	; (800ae48 <_dtoa_r+0x6b8>)
 800acd4:	f7f5 ffcc 	bl	8000c70 <__aeabi_ddiv>
 800acd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acdc:	f7f6 fe3a 	bl	8001954 <__aeabi_dsub>
 800ace0:	9a05      	ldr	r2, [sp, #20]
 800ace2:	9b05      	ldr	r3, [sp, #20]
 800ace4:	4694      	mov	ip, r2
 800ace6:	9310      	str	r3, [sp, #64]	; 0x40
 800ace8:	9b07      	ldr	r3, [sp, #28]
 800acea:	900a      	str	r0, [sp, #40]	; 0x28
 800acec:	910b      	str	r1, [sp, #44]	; 0x2c
 800acee:	4463      	add	r3, ip
 800acf0:	9319      	str	r3, [sp, #100]	; 0x64
 800acf2:	0029      	movs	r1, r5
 800acf4:	0020      	movs	r0, r4
 800acf6:	f7f7 f9dd 	bl	80020b4 <__aeabi_d2iz>
 800acfa:	9017      	str	r0, [sp, #92]	; 0x5c
 800acfc:	f7f7 fa10 	bl	8002120 <__aeabi_i2d>
 800ad00:	0002      	movs	r2, r0
 800ad02:	000b      	movs	r3, r1
 800ad04:	0020      	movs	r0, r4
 800ad06:	0029      	movs	r1, r5
 800ad08:	f7f6 fe24 	bl	8001954 <__aeabi_dsub>
 800ad0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad10:	3301      	adds	r3, #1
 800ad12:	9307      	str	r3, [sp, #28]
 800ad14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad16:	0004      	movs	r4, r0
 800ad18:	3330      	adds	r3, #48	; 0x30
 800ad1a:	7013      	strb	r3, [r2, #0]
 800ad1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad20:	000d      	movs	r5, r1
 800ad22:	f7f5 fba3 	bl	800046c <__aeabi_dcmplt>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d175      	bne.n	800ae16 <_dtoa_r+0x686>
 800ad2a:	0022      	movs	r2, r4
 800ad2c:	002b      	movs	r3, r5
 800ad2e:	2000      	movs	r0, #0
 800ad30:	493f      	ldr	r1, [pc, #252]	; (800ae30 <_dtoa_r+0x6a0>)
 800ad32:	f7f6 fe0f 	bl	8001954 <__aeabi_dsub>
 800ad36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad3a:	f7f5 fb97 	bl	800046c <__aeabi_dcmplt>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d000      	beq.n	800ad44 <_dtoa_r+0x5b4>
 800ad42:	e0d1      	b.n	800aee8 <_dtoa_r+0x758>
 800ad44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad46:	9a07      	ldr	r2, [sp, #28]
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d100      	bne.n	800ad4e <_dtoa_r+0x5be>
 800ad4c:	e770      	b.n	800ac30 <_dtoa_r+0x4a0>
 800ad4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad52:	2200      	movs	r2, #0
 800ad54:	4b37      	ldr	r3, [pc, #220]	; (800ae34 <_dtoa_r+0x6a4>)
 800ad56:	f7f6 fb91 	bl	800147c <__aeabi_dmul>
 800ad5a:	4b36      	ldr	r3, [pc, #216]	; (800ae34 <_dtoa_r+0x6a4>)
 800ad5c:	900a      	str	r0, [sp, #40]	; 0x28
 800ad5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ad60:	2200      	movs	r2, #0
 800ad62:	0020      	movs	r0, r4
 800ad64:	0029      	movs	r1, r5
 800ad66:	f7f6 fb89 	bl	800147c <__aeabi_dmul>
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	0004      	movs	r4, r0
 800ad6e:	000d      	movs	r5, r1
 800ad70:	9310      	str	r3, [sp, #64]	; 0x40
 800ad72:	e7be      	b.n	800acf2 <_dtoa_r+0x562>
 800ad74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad78:	f7f6 fb80 	bl	800147c <__aeabi_dmul>
 800ad7c:	9a05      	ldr	r2, [sp, #20]
 800ad7e:	9b05      	ldr	r3, [sp, #20]
 800ad80:	4694      	mov	ip, r2
 800ad82:	930a      	str	r3, [sp, #40]	; 0x28
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	9010      	str	r0, [sp, #64]	; 0x40
 800ad88:	9111      	str	r1, [sp, #68]	; 0x44
 800ad8a:	4463      	add	r3, ip
 800ad8c:	9319      	str	r3, [sp, #100]	; 0x64
 800ad8e:	0029      	movs	r1, r5
 800ad90:	0020      	movs	r0, r4
 800ad92:	f7f7 f98f 	bl	80020b4 <__aeabi_d2iz>
 800ad96:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad98:	f7f7 f9c2 	bl	8002120 <__aeabi_i2d>
 800ad9c:	0002      	movs	r2, r0
 800ad9e:	000b      	movs	r3, r1
 800ada0:	0020      	movs	r0, r4
 800ada2:	0029      	movs	r1, r5
 800ada4:	f7f6 fdd6 	bl	8001954 <__aeabi_dsub>
 800ada8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adac:	3330      	adds	r3, #48	; 0x30
 800adae:	7013      	strb	r3, [r2, #0]
 800adb0:	0013      	movs	r3, r2
 800adb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adb4:	3301      	adds	r3, #1
 800adb6:	0004      	movs	r4, r0
 800adb8:	000d      	movs	r5, r1
 800adba:	930a      	str	r3, [sp, #40]	; 0x28
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d12c      	bne.n	800ae1a <_dtoa_r+0x68a>
 800adc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800adc4:	9a05      	ldr	r2, [sp, #20]
 800adc6:	9b07      	ldr	r3, [sp, #28]
 800adc8:	4694      	mov	ip, r2
 800adca:	4463      	add	r3, ip
 800adcc:	2200      	movs	r2, #0
 800adce:	9307      	str	r3, [sp, #28]
 800add0:	4b1d      	ldr	r3, [pc, #116]	; (800ae48 <_dtoa_r+0x6b8>)
 800add2:	f7f5 fbe3 	bl	800059c <__aeabi_dadd>
 800add6:	0002      	movs	r2, r0
 800add8:	000b      	movs	r3, r1
 800adda:	0020      	movs	r0, r4
 800addc:	0029      	movs	r1, r5
 800adde:	f7f5 fb59 	bl	8000494 <__aeabi_dcmpgt>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d000      	beq.n	800ade8 <_dtoa_r+0x658>
 800ade6:	e07f      	b.n	800aee8 <_dtoa_r+0x758>
 800ade8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adec:	2000      	movs	r0, #0
 800adee:	4916      	ldr	r1, [pc, #88]	; (800ae48 <_dtoa_r+0x6b8>)
 800adf0:	f7f6 fdb0 	bl	8001954 <__aeabi_dsub>
 800adf4:	0002      	movs	r2, r0
 800adf6:	000b      	movs	r3, r1
 800adf8:	0020      	movs	r0, r4
 800adfa:	0029      	movs	r1, r5
 800adfc:	f7f5 fb36 	bl	800046c <__aeabi_dcmplt>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d100      	bne.n	800ae06 <_dtoa_r+0x676>
 800ae04:	e714      	b.n	800ac30 <_dtoa_r+0x4a0>
 800ae06:	9b07      	ldr	r3, [sp, #28]
 800ae08:	001a      	movs	r2, r3
 800ae0a:	3a01      	subs	r2, #1
 800ae0c:	9207      	str	r2, [sp, #28]
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	2a30      	cmp	r2, #48	; 0x30
 800ae12:	d0f8      	beq.n	800ae06 <_dtoa_r+0x676>
 800ae14:	9307      	str	r3, [sp, #28]
 800ae16:	9602      	str	r6, [sp, #8]
 800ae18:	e054      	b.n	800aec4 <_dtoa_r+0x734>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <_dtoa_r+0x6a4>)
 800ae1e:	f7f6 fb2d 	bl	800147c <__aeabi_dmul>
 800ae22:	0004      	movs	r4, r0
 800ae24:	000d      	movs	r5, r1
 800ae26:	e7b2      	b.n	800ad8e <_dtoa_r+0x5fe>
 800ae28:	0800e2e8 	.word	0x0800e2e8
 800ae2c:	0800e2c0 	.word	0x0800e2c0
 800ae30:	3ff00000 	.word	0x3ff00000
 800ae34:	40240000 	.word	0x40240000
 800ae38:	401c0000 	.word	0x401c0000
 800ae3c:	fcc00000 	.word	0xfcc00000
 800ae40:	40140000 	.word	0x40140000
 800ae44:	7cc00000 	.word	0x7cc00000
 800ae48:	3fe00000 	.word	0x3fe00000
 800ae4c:	9b06      	ldr	r3, [sp, #24]
 800ae4e:	9e05      	ldr	r6, [sp, #20]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	199b      	adds	r3, r3, r6
 800ae54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ae58:	930a      	str	r3, [sp, #40]	; 0x28
 800ae5a:	9a08      	ldr	r2, [sp, #32]
 800ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5e:	0020      	movs	r0, r4
 800ae60:	0029      	movs	r1, r5
 800ae62:	f7f5 ff05 	bl	8000c70 <__aeabi_ddiv>
 800ae66:	f7f7 f925 	bl	80020b4 <__aeabi_d2iz>
 800ae6a:	9006      	str	r0, [sp, #24]
 800ae6c:	f7f7 f958 	bl	8002120 <__aeabi_i2d>
 800ae70:	9a08      	ldr	r2, [sp, #32]
 800ae72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae74:	f7f6 fb02 	bl	800147c <__aeabi_dmul>
 800ae78:	0002      	movs	r2, r0
 800ae7a:	000b      	movs	r3, r1
 800ae7c:	0020      	movs	r0, r4
 800ae7e:	0029      	movs	r1, r5
 800ae80:	f7f6 fd68 	bl	8001954 <__aeabi_dsub>
 800ae84:	0033      	movs	r3, r6
 800ae86:	9a06      	ldr	r2, [sp, #24]
 800ae88:	3601      	adds	r6, #1
 800ae8a:	3230      	adds	r2, #48	; 0x30
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae90:	9607      	str	r6, [sp, #28]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d139      	bne.n	800af0a <_dtoa_r+0x77a>
 800ae96:	0002      	movs	r2, r0
 800ae98:	000b      	movs	r3, r1
 800ae9a:	f7f5 fb7f 	bl	800059c <__aeabi_dadd>
 800ae9e:	9a08      	ldr	r2, [sp, #32]
 800aea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea2:	0004      	movs	r4, r0
 800aea4:	000d      	movs	r5, r1
 800aea6:	f7f5 faf5 	bl	8000494 <__aeabi_dcmpgt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d11b      	bne.n	800aee6 <_dtoa_r+0x756>
 800aeae:	9a08      	ldr	r2, [sp, #32]
 800aeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	0029      	movs	r1, r5
 800aeb6:	f7f5 fad3 	bl	8000460 <__aeabi_dcmpeq>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d002      	beq.n	800aec4 <_dtoa_r+0x734>
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	07db      	lsls	r3, r3, #31
 800aec2:	d410      	bmi.n	800aee6 <_dtoa_r+0x756>
 800aec4:	0038      	movs	r0, r7
 800aec6:	9904      	ldr	r1, [sp, #16]
 800aec8:	f000 fe7e 	bl	800bbc8 <_Bfree>
 800aecc:	2300      	movs	r3, #0
 800aece:	9a07      	ldr	r2, [sp, #28]
 800aed0:	9802      	ldr	r0, [sp, #8]
 800aed2:	7013      	strb	r3, [r2, #0]
 800aed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aed6:	3001      	adds	r0, #1
 800aed8:	6018      	str	r0, [r3, #0]
 800aeda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d100      	bne.n	800aee2 <_dtoa_r+0x752>
 800aee0:	e4a3      	b.n	800a82a <_dtoa_r+0x9a>
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e4a1      	b.n	800a82a <_dtoa_r+0x9a>
 800aee6:	9e02      	ldr	r6, [sp, #8]
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	781a      	ldrb	r2, [r3, #0]
 800aef0:	2a39      	cmp	r2, #57	; 0x39
 800aef2:	d106      	bne.n	800af02 <_dtoa_r+0x772>
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d1f7      	bne.n	800aeea <_dtoa_r+0x75a>
 800aefa:	2230      	movs	r2, #48	; 0x30
 800aefc:	9905      	ldr	r1, [sp, #20]
 800aefe:	3601      	adds	r6, #1
 800af00:	700a      	strb	r2, [r1, #0]
 800af02:	781a      	ldrb	r2, [r3, #0]
 800af04:	3201      	adds	r2, #1
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e785      	b.n	800ae16 <_dtoa_r+0x686>
 800af0a:	2200      	movs	r2, #0
 800af0c:	4bad      	ldr	r3, [pc, #692]	; (800b1c4 <_dtoa_r+0xa34>)
 800af0e:	f7f6 fab5 	bl	800147c <__aeabi_dmul>
 800af12:	2200      	movs	r2, #0
 800af14:	2300      	movs	r3, #0
 800af16:	0004      	movs	r4, r0
 800af18:	000d      	movs	r5, r1
 800af1a:	f7f5 faa1 	bl	8000460 <__aeabi_dcmpeq>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d09b      	beq.n	800ae5a <_dtoa_r+0x6ca>
 800af22:	e7cf      	b.n	800aec4 <_dtoa_r+0x734>
 800af24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af26:	2a00      	cmp	r2, #0
 800af28:	d100      	bne.n	800af2c <_dtoa_r+0x79c>
 800af2a:	e082      	b.n	800b032 <_dtoa_r+0x8a2>
 800af2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af2e:	2a01      	cmp	r2, #1
 800af30:	dc66      	bgt.n	800b000 <_dtoa_r+0x870>
 800af32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af34:	2a00      	cmp	r2, #0
 800af36:	d05f      	beq.n	800aff8 <_dtoa_r+0x868>
 800af38:	4aa3      	ldr	r2, [pc, #652]	; (800b1c8 <_dtoa_r+0xa38>)
 800af3a:	189b      	adds	r3, r3, r2
 800af3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af3e:	9c08      	ldr	r4, [sp, #32]
 800af40:	9a08      	ldr	r2, [sp, #32]
 800af42:	2101      	movs	r1, #1
 800af44:	18d2      	adds	r2, r2, r3
 800af46:	9208      	str	r2, [sp, #32]
 800af48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af4a:	0038      	movs	r0, r7
 800af4c:	18d3      	adds	r3, r2, r3
 800af4e:	930d      	str	r3, [sp, #52]	; 0x34
 800af50:	f000 ff36 	bl	800bdc0 <__i2b>
 800af54:	0005      	movs	r5, r0
 800af56:	2c00      	cmp	r4, #0
 800af58:	dd0e      	ble.n	800af78 <_dtoa_r+0x7e8>
 800af5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dd0b      	ble.n	800af78 <_dtoa_r+0x7e8>
 800af60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af62:	0023      	movs	r3, r4
 800af64:	4294      	cmp	r4, r2
 800af66:	dd00      	ble.n	800af6a <_dtoa_r+0x7da>
 800af68:	0013      	movs	r3, r2
 800af6a:	9a08      	ldr	r2, [sp, #32]
 800af6c:	1ae4      	subs	r4, r4, r3
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	9208      	str	r2, [sp, #32]
 800af72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	930d      	str	r3, [sp, #52]	; 0x34
 800af78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01f      	beq.n	800afbe <_dtoa_r+0x82e>
 800af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d05a      	beq.n	800b03a <_dtoa_r+0x8aa>
 800af84:	2e00      	cmp	r6, #0
 800af86:	dd11      	ble.n	800afac <_dtoa_r+0x81c>
 800af88:	0029      	movs	r1, r5
 800af8a:	0032      	movs	r2, r6
 800af8c:	0038      	movs	r0, r7
 800af8e:	f000 ffdd 	bl	800bf4c <__pow5mult>
 800af92:	9a04      	ldr	r2, [sp, #16]
 800af94:	0001      	movs	r1, r0
 800af96:	0005      	movs	r5, r0
 800af98:	0038      	movs	r0, r7
 800af9a:	f000 ff27 	bl	800bdec <__multiply>
 800af9e:	9904      	ldr	r1, [sp, #16]
 800afa0:	9007      	str	r0, [sp, #28]
 800afa2:	0038      	movs	r0, r7
 800afa4:	f000 fe10 	bl	800bbc8 <_Bfree>
 800afa8:	9b07      	ldr	r3, [sp, #28]
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afae:	1b9a      	subs	r2, r3, r6
 800afb0:	42b3      	cmp	r3, r6
 800afb2:	d004      	beq.n	800afbe <_dtoa_r+0x82e>
 800afb4:	0038      	movs	r0, r7
 800afb6:	9904      	ldr	r1, [sp, #16]
 800afb8:	f000 ffc8 	bl	800bf4c <__pow5mult>
 800afbc:	9004      	str	r0, [sp, #16]
 800afbe:	2101      	movs	r1, #1
 800afc0:	0038      	movs	r0, r7
 800afc2:	f000 fefd 	bl	800bdc0 <__i2b>
 800afc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afc8:	0006      	movs	r6, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd37      	ble.n	800b03e <_dtoa_r+0x8ae>
 800afce:	001a      	movs	r2, r3
 800afd0:	0001      	movs	r1, r0
 800afd2:	0038      	movs	r0, r7
 800afd4:	f000 ffba 	bl	800bf4c <__pow5mult>
 800afd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afda:	0006      	movs	r6, r0
 800afdc:	2b01      	cmp	r3, #1
 800afde:	dd33      	ble.n	800b048 <_dtoa_r+0x8b8>
 800afe0:	2300      	movs	r3, #0
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	6933      	ldr	r3, [r6, #16]
 800afe6:	3303      	adds	r3, #3
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	18f3      	adds	r3, r6, r3
 800afec:	6858      	ldr	r0, [r3, #4]
 800afee:	f000 fe9f 	bl	800bd30 <__hi0bits>
 800aff2:	2320      	movs	r3, #32
 800aff4:	1a18      	subs	r0, r3, r0
 800aff6:	e03f      	b.n	800b078 <_dtoa_r+0x8e8>
 800aff8:	2336      	movs	r3, #54	; 0x36
 800affa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	e79d      	b.n	800af3c <_dtoa_r+0x7ac>
 800b000:	9b06      	ldr	r3, [sp, #24]
 800b002:	1e5e      	subs	r6, r3, #1
 800b004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b006:	42b3      	cmp	r3, r6
 800b008:	db08      	blt.n	800b01c <_dtoa_r+0x88c>
 800b00a:	1b9e      	subs	r6, r3, r6
 800b00c:	9b06      	ldr	r3, [sp, #24]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da0c      	bge.n	800b02c <_dtoa_r+0x89c>
 800b012:	9b08      	ldr	r3, [sp, #32]
 800b014:	9a06      	ldr	r2, [sp, #24]
 800b016:	1a9c      	subs	r4, r3, r2
 800b018:	2300      	movs	r3, #0
 800b01a:	e791      	b.n	800af40 <_dtoa_r+0x7b0>
 800b01c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b01e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b020:	1af3      	subs	r3, r6, r3
 800b022:	18d3      	adds	r3, r2, r3
 800b024:	960e      	str	r6, [sp, #56]	; 0x38
 800b026:	9314      	str	r3, [sp, #80]	; 0x50
 800b028:	2600      	movs	r6, #0
 800b02a:	e7ef      	b.n	800b00c <_dtoa_r+0x87c>
 800b02c:	9c08      	ldr	r4, [sp, #32]
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	e786      	b.n	800af40 <_dtoa_r+0x7b0>
 800b032:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b034:	9c08      	ldr	r4, [sp, #32]
 800b036:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b038:	e78d      	b.n	800af56 <_dtoa_r+0x7c6>
 800b03a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b03c:	e7ba      	b.n	800afb4 <_dtoa_r+0x824>
 800b03e:	2300      	movs	r3, #0
 800b040:	9307      	str	r3, [sp, #28]
 800b042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b044:	2b01      	cmp	r3, #1
 800b046:	dc13      	bgt.n	800b070 <_dtoa_r+0x8e0>
 800b048:	2300      	movs	r3, #0
 800b04a:	9307      	str	r3, [sp, #28]
 800b04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10e      	bne.n	800b070 <_dtoa_r+0x8e0>
 800b052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b054:	031b      	lsls	r3, r3, #12
 800b056:	d10b      	bne.n	800b070 <_dtoa_r+0x8e0>
 800b058:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b05a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b05c:	4213      	tst	r3, r2
 800b05e:	d007      	beq.n	800b070 <_dtoa_r+0x8e0>
 800b060:	9b08      	ldr	r3, [sp, #32]
 800b062:	3301      	adds	r3, #1
 800b064:	9308      	str	r3, [sp, #32]
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	3301      	adds	r3, #1
 800b06a:	930d      	str	r3, [sp, #52]	; 0x34
 800b06c:	2301      	movs	r3, #1
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b072:	2001      	movs	r0, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1b5      	bne.n	800afe4 <_dtoa_r+0x854>
 800b078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07a:	221f      	movs	r2, #31
 800b07c:	1818      	adds	r0, r3, r0
 800b07e:	0003      	movs	r3, r0
 800b080:	4013      	ands	r3, r2
 800b082:	4210      	tst	r0, r2
 800b084:	d046      	beq.n	800b114 <_dtoa_r+0x984>
 800b086:	3201      	adds	r2, #1
 800b088:	1ad2      	subs	r2, r2, r3
 800b08a:	2a04      	cmp	r2, #4
 800b08c:	dd3f      	ble.n	800b10e <_dtoa_r+0x97e>
 800b08e:	221c      	movs	r2, #28
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	9a08      	ldr	r2, [sp, #32]
 800b094:	18e4      	adds	r4, r4, r3
 800b096:	18d2      	adds	r2, r2, r3
 800b098:	9208      	str	r2, [sp, #32]
 800b09a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b09c:	18d3      	adds	r3, r2, r3
 800b09e:	930d      	str	r3, [sp, #52]	; 0x34
 800b0a0:	9b08      	ldr	r3, [sp, #32]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd05      	ble.n	800b0b2 <_dtoa_r+0x922>
 800b0a6:	001a      	movs	r2, r3
 800b0a8:	0038      	movs	r0, r7
 800b0aa:	9904      	ldr	r1, [sp, #16]
 800b0ac:	f000 ffaa 	bl	800c004 <__lshift>
 800b0b0:	9004      	str	r0, [sp, #16]
 800b0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd05      	ble.n	800b0c4 <_dtoa_r+0x934>
 800b0b8:	0031      	movs	r1, r6
 800b0ba:	001a      	movs	r2, r3
 800b0bc:	0038      	movs	r0, r7
 800b0be:	f000 ffa1 	bl	800c004 <__lshift>
 800b0c2:	0006      	movs	r6, r0
 800b0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d026      	beq.n	800b118 <_dtoa_r+0x988>
 800b0ca:	0031      	movs	r1, r6
 800b0cc:	9804      	ldr	r0, [sp, #16]
 800b0ce:	f001 f809 	bl	800c0e4 <__mcmp>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	da20      	bge.n	800b118 <_dtoa_r+0x988>
 800b0d6:	9b02      	ldr	r3, [sp, #8]
 800b0d8:	220a      	movs	r2, #10
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	9302      	str	r3, [sp, #8]
 800b0de:	0038      	movs	r0, r7
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9904      	ldr	r1, [sp, #16]
 800b0e4:	f000 fd94 	bl	800bc10 <__multadd>
 800b0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ea:	9004      	str	r0, [sp, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d100      	bne.n	800b0f2 <_dtoa_r+0x962>
 800b0f0:	e160      	b.n	800b3b4 <_dtoa_r+0xc24>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	0029      	movs	r1, r5
 800b0f6:	220a      	movs	r2, #10
 800b0f8:	0038      	movs	r0, r7
 800b0fa:	f000 fd89 	bl	800bc10 <__multadd>
 800b0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b100:	0005      	movs	r5, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	dc47      	bgt.n	800b196 <_dtoa_r+0xa06>
 800b106:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b108:	2b02      	cmp	r3, #2
 800b10a:	dc0d      	bgt.n	800b128 <_dtoa_r+0x998>
 800b10c:	e043      	b.n	800b196 <_dtoa_r+0xa06>
 800b10e:	2a04      	cmp	r2, #4
 800b110:	d0c6      	beq.n	800b0a0 <_dtoa_r+0x910>
 800b112:	0013      	movs	r3, r2
 800b114:	331c      	adds	r3, #28
 800b116:	e7bc      	b.n	800b092 <_dtoa_r+0x902>
 800b118:	9b06      	ldr	r3, [sp, #24]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dc35      	bgt.n	800b18a <_dtoa_r+0x9fa>
 800b11e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b120:	2b02      	cmp	r3, #2
 800b122:	dd32      	ble.n	800b18a <_dtoa_r+0x9fa>
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	930c      	str	r3, [sp, #48]	; 0x30
 800b128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10c      	bne.n	800b148 <_dtoa_r+0x9b8>
 800b12e:	0031      	movs	r1, r6
 800b130:	2205      	movs	r2, #5
 800b132:	0038      	movs	r0, r7
 800b134:	f000 fd6c 	bl	800bc10 <__multadd>
 800b138:	0006      	movs	r6, r0
 800b13a:	0001      	movs	r1, r0
 800b13c:	9804      	ldr	r0, [sp, #16]
 800b13e:	f000 ffd1 	bl	800c0e4 <__mcmp>
 800b142:	2800      	cmp	r0, #0
 800b144:	dd00      	ble.n	800b148 <_dtoa_r+0x9b8>
 800b146:	e59f      	b.n	800ac88 <_dtoa_r+0x4f8>
 800b148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b14a:	43db      	mvns	r3, r3
 800b14c:	9302      	str	r3, [sp, #8]
 800b14e:	9b05      	ldr	r3, [sp, #20]
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	2400      	movs	r4, #0
 800b154:	0031      	movs	r1, r6
 800b156:	0038      	movs	r0, r7
 800b158:	f000 fd36 	bl	800bbc8 <_Bfree>
 800b15c:	2d00      	cmp	r5, #0
 800b15e:	d100      	bne.n	800b162 <_dtoa_r+0x9d2>
 800b160:	e6b0      	b.n	800aec4 <_dtoa_r+0x734>
 800b162:	2c00      	cmp	r4, #0
 800b164:	d005      	beq.n	800b172 <_dtoa_r+0x9e2>
 800b166:	42ac      	cmp	r4, r5
 800b168:	d003      	beq.n	800b172 <_dtoa_r+0x9e2>
 800b16a:	0021      	movs	r1, r4
 800b16c:	0038      	movs	r0, r7
 800b16e:	f000 fd2b 	bl	800bbc8 <_Bfree>
 800b172:	0029      	movs	r1, r5
 800b174:	0038      	movs	r0, r7
 800b176:	f000 fd27 	bl	800bbc8 <_Bfree>
 800b17a:	e6a3      	b.n	800aec4 <_dtoa_r+0x734>
 800b17c:	2600      	movs	r6, #0
 800b17e:	0035      	movs	r5, r6
 800b180:	e7e2      	b.n	800b148 <_dtoa_r+0x9b8>
 800b182:	9602      	str	r6, [sp, #8]
 800b184:	9e07      	ldr	r6, [sp, #28]
 800b186:	0035      	movs	r5, r6
 800b188:	e57e      	b.n	800ac88 <_dtoa_r+0x4f8>
 800b18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d100      	bne.n	800b192 <_dtoa_r+0xa02>
 800b190:	e0c8      	b.n	800b324 <_dtoa_r+0xb94>
 800b192:	9b06      	ldr	r3, [sp, #24]
 800b194:	930c      	str	r3, [sp, #48]	; 0x30
 800b196:	2c00      	cmp	r4, #0
 800b198:	dd05      	ble.n	800b1a6 <_dtoa_r+0xa16>
 800b19a:	0029      	movs	r1, r5
 800b19c:	0022      	movs	r2, r4
 800b19e:	0038      	movs	r0, r7
 800b1a0:	f000 ff30 	bl	800c004 <__lshift>
 800b1a4:	0005      	movs	r5, r0
 800b1a6:	9b07      	ldr	r3, [sp, #28]
 800b1a8:	0028      	movs	r0, r5
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01f      	beq.n	800b1ee <_dtoa_r+0xa5e>
 800b1ae:	0038      	movs	r0, r7
 800b1b0:	6869      	ldr	r1, [r5, #4]
 800b1b2:	f000 fcc5 	bl	800bb40 <_Balloc>
 800b1b6:	1e04      	subs	r4, r0, #0
 800b1b8:	d10c      	bne.n	800b1d4 <_dtoa_r+0xa44>
 800b1ba:	0002      	movs	r2, r0
 800b1bc:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <_dtoa_r+0xa3c>)
 800b1be:	4904      	ldr	r1, [pc, #16]	; (800b1d0 <_dtoa_r+0xa40>)
 800b1c0:	f7ff fafb 	bl	800a7ba <_dtoa_r+0x2a>
 800b1c4:	40240000 	.word	0x40240000
 800b1c8:	00000433 	.word	0x00000433
 800b1cc:	0800e1cc 	.word	0x0800e1cc
 800b1d0:	000002ea 	.word	0x000002ea
 800b1d4:	0029      	movs	r1, r5
 800b1d6:	692b      	ldr	r3, [r5, #16]
 800b1d8:	310c      	adds	r1, #12
 800b1da:	1c9a      	adds	r2, r3, #2
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	300c      	adds	r0, #12
 800b1e0:	f000 fca5 	bl	800bb2e <memcpy>
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	0021      	movs	r1, r4
 800b1e8:	0038      	movs	r0, r7
 800b1ea:	f000 ff0b 	bl	800c004 <__lshift>
 800b1ee:	002c      	movs	r4, r5
 800b1f0:	0005      	movs	r5, r0
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	9308      	str	r3, [sp, #32]
 800b1f6:	0031      	movs	r1, r6
 800b1f8:	9804      	ldr	r0, [sp, #16]
 800b1fa:	f7ff fa3d 	bl	800a678 <quorem>
 800b1fe:	0003      	movs	r3, r0
 800b200:	0021      	movs	r1, r4
 800b202:	3330      	adds	r3, #48	; 0x30
 800b204:	900e      	str	r0, [sp, #56]	; 0x38
 800b206:	9804      	ldr	r0, [sp, #16]
 800b208:	9306      	str	r3, [sp, #24]
 800b20a:	f000 ff6b 	bl	800c0e4 <__mcmp>
 800b20e:	002a      	movs	r2, r5
 800b210:	900f      	str	r0, [sp, #60]	; 0x3c
 800b212:	0031      	movs	r1, r6
 800b214:	0038      	movs	r0, r7
 800b216:	f000 ff81 	bl	800c11c <__mdiff>
 800b21a:	68c3      	ldr	r3, [r0, #12]
 800b21c:	9007      	str	r0, [sp, #28]
 800b21e:	9310      	str	r3, [sp, #64]	; 0x40
 800b220:	2301      	movs	r3, #1
 800b222:	930d      	str	r3, [sp, #52]	; 0x34
 800b224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d104      	bne.n	800b234 <_dtoa_r+0xaa4>
 800b22a:	0001      	movs	r1, r0
 800b22c:	9804      	ldr	r0, [sp, #16]
 800b22e:	f000 ff59 	bl	800c0e4 <__mcmp>
 800b232:	900d      	str	r0, [sp, #52]	; 0x34
 800b234:	0038      	movs	r0, r7
 800b236:	9907      	ldr	r1, [sp, #28]
 800b238:	f000 fcc6 	bl	800bbc8 <_Bfree>
 800b23c:	2301      	movs	r3, #1
 800b23e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b242:	4018      	ands	r0, r3
 800b244:	9b08      	ldr	r3, [sp, #32]
 800b246:	3301      	adds	r3, #1
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b24c:	4313      	orrs	r3, r2
 800b24e:	4303      	orrs	r3, r0
 800b250:	d10c      	bne.n	800b26c <_dtoa_r+0xadc>
 800b252:	9b06      	ldr	r3, [sp, #24]
 800b254:	2b39      	cmp	r3, #57	; 0x39
 800b256:	d025      	beq.n	800b2a4 <_dtoa_r+0xb14>
 800b258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dd02      	ble.n	800b264 <_dtoa_r+0xad4>
 800b25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b260:	3331      	adds	r3, #49	; 0x31
 800b262:	9306      	str	r3, [sp, #24]
 800b264:	9b08      	ldr	r3, [sp, #32]
 800b266:	9a06      	ldr	r2, [sp, #24]
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	e773      	b.n	800b154 <_dtoa_r+0x9c4>
 800b26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	db03      	blt.n	800b27a <_dtoa_r+0xaea>
 800b272:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b274:	4313      	orrs	r3, r2
 800b276:	4303      	orrs	r3, r0
 800b278:	d11f      	bne.n	800b2ba <_dtoa_r+0xb2a>
 800b27a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	ddf1      	ble.n	800b264 <_dtoa_r+0xad4>
 800b280:	9904      	ldr	r1, [sp, #16]
 800b282:	2201      	movs	r2, #1
 800b284:	0038      	movs	r0, r7
 800b286:	f000 febd 	bl	800c004 <__lshift>
 800b28a:	0031      	movs	r1, r6
 800b28c:	9004      	str	r0, [sp, #16]
 800b28e:	f000 ff29 	bl	800c0e4 <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	dc03      	bgt.n	800b29e <_dtoa_r+0xb0e>
 800b296:	d1e5      	bne.n	800b264 <_dtoa_r+0xad4>
 800b298:	9b06      	ldr	r3, [sp, #24]
 800b29a:	07db      	lsls	r3, r3, #31
 800b29c:	d5e2      	bpl.n	800b264 <_dtoa_r+0xad4>
 800b29e:	9b06      	ldr	r3, [sp, #24]
 800b2a0:	2b39      	cmp	r3, #57	; 0x39
 800b2a2:	d1dc      	bne.n	800b25e <_dtoa_r+0xace>
 800b2a4:	2339      	movs	r3, #57	; 0x39
 800b2a6:	9a08      	ldr	r2, [sp, #32]
 800b2a8:	7013      	strb	r3, [r2, #0]
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	9307      	str	r3, [sp, #28]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	2a39      	cmp	r2, #57	; 0x39
 800b2b4:	d06c      	beq.n	800b390 <_dtoa_r+0xc00>
 800b2b6:	3201      	adds	r2, #1
 800b2b8:	e7d6      	b.n	800b268 <_dtoa_r+0xad8>
 800b2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd07      	ble.n	800b2d0 <_dtoa_r+0xb40>
 800b2c0:	9b06      	ldr	r3, [sp, #24]
 800b2c2:	2b39      	cmp	r3, #57	; 0x39
 800b2c4:	d0ee      	beq.n	800b2a4 <_dtoa_r+0xb14>
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	9a08      	ldr	r2, [sp, #32]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	7013      	strb	r3, [r2, #0]
 800b2ce:	e741      	b.n	800b154 <_dtoa_r+0x9c4>
 800b2d0:	9b08      	ldr	r3, [sp, #32]
 800b2d2:	9a06      	ldr	r2, [sp, #24]
 800b2d4:	701a      	strb	r2, [r3, #0]
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	9a05      	ldr	r2, [sp, #20]
 800b2da:	1a9b      	subs	r3, r3, r2
 800b2dc:	9a08      	ldr	r2, [sp, #32]
 800b2de:	189b      	adds	r3, r3, r2
 800b2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d03e      	beq.n	800b364 <_dtoa_r+0xbd4>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	220a      	movs	r2, #10
 800b2ea:	9904      	ldr	r1, [sp, #16]
 800b2ec:	0038      	movs	r0, r7
 800b2ee:	f000 fc8f 	bl	800bc10 <__multadd>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	9004      	str	r0, [sp, #16]
 800b2f6:	220a      	movs	r2, #10
 800b2f8:	0021      	movs	r1, r4
 800b2fa:	0038      	movs	r0, r7
 800b2fc:	42ac      	cmp	r4, r5
 800b2fe:	d106      	bne.n	800b30e <_dtoa_r+0xb7e>
 800b300:	f000 fc86 	bl	800bc10 <__multadd>
 800b304:	0004      	movs	r4, r0
 800b306:	0005      	movs	r5, r0
 800b308:	9b07      	ldr	r3, [sp, #28]
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	e773      	b.n	800b1f6 <_dtoa_r+0xa66>
 800b30e:	f000 fc7f 	bl	800bc10 <__multadd>
 800b312:	0029      	movs	r1, r5
 800b314:	0004      	movs	r4, r0
 800b316:	2300      	movs	r3, #0
 800b318:	220a      	movs	r2, #10
 800b31a:	0038      	movs	r0, r7
 800b31c:	f000 fc78 	bl	800bc10 <__multadd>
 800b320:	0005      	movs	r5, r0
 800b322:	e7f1      	b.n	800b308 <_dtoa_r+0xb78>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	930c      	str	r3, [sp, #48]	; 0x30
 800b328:	2400      	movs	r4, #0
 800b32a:	0031      	movs	r1, r6
 800b32c:	9804      	ldr	r0, [sp, #16]
 800b32e:	f7ff f9a3 	bl	800a678 <quorem>
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	3030      	adds	r0, #48	; 0x30
 800b336:	5518      	strb	r0, [r3, r4]
 800b338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b33a:	3401      	adds	r4, #1
 800b33c:	9006      	str	r0, [sp, #24]
 800b33e:	42a3      	cmp	r3, r4
 800b340:	dd07      	ble.n	800b352 <_dtoa_r+0xbc2>
 800b342:	2300      	movs	r3, #0
 800b344:	220a      	movs	r2, #10
 800b346:	0038      	movs	r0, r7
 800b348:	9904      	ldr	r1, [sp, #16]
 800b34a:	f000 fc61 	bl	800bc10 <__multadd>
 800b34e:	9004      	str	r0, [sp, #16]
 800b350:	e7eb      	b.n	800b32a <_dtoa_r+0xb9a>
 800b352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b354:	2001      	movs	r0, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	dd00      	ble.n	800b35c <_dtoa_r+0xbcc>
 800b35a:	0018      	movs	r0, r3
 800b35c:	2400      	movs	r4, #0
 800b35e:	9b05      	ldr	r3, [sp, #20]
 800b360:	181b      	adds	r3, r3, r0
 800b362:	9307      	str	r3, [sp, #28]
 800b364:	9904      	ldr	r1, [sp, #16]
 800b366:	2201      	movs	r2, #1
 800b368:	0038      	movs	r0, r7
 800b36a:	f000 fe4b 	bl	800c004 <__lshift>
 800b36e:	0031      	movs	r1, r6
 800b370:	9004      	str	r0, [sp, #16]
 800b372:	f000 feb7 	bl	800c0e4 <__mcmp>
 800b376:	2800      	cmp	r0, #0
 800b378:	dc97      	bgt.n	800b2aa <_dtoa_r+0xb1a>
 800b37a:	d102      	bne.n	800b382 <_dtoa_r+0xbf2>
 800b37c:	9b06      	ldr	r3, [sp, #24]
 800b37e:	07db      	lsls	r3, r3, #31
 800b380:	d493      	bmi.n	800b2aa <_dtoa_r+0xb1a>
 800b382:	9b07      	ldr	r3, [sp, #28]
 800b384:	9307      	str	r3, [sp, #28]
 800b386:	3b01      	subs	r3, #1
 800b388:	781a      	ldrb	r2, [r3, #0]
 800b38a:	2a30      	cmp	r2, #48	; 0x30
 800b38c:	d0fa      	beq.n	800b384 <_dtoa_r+0xbf4>
 800b38e:	e6e1      	b.n	800b154 <_dtoa_r+0x9c4>
 800b390:	9a05      	ldr	r2, [sp, #20]
 800b392:	429a      	cmp	r2, r3
 800b394:	d18a      	bne.n	800b2ac <_dtoa_r+0xb1c>
 800b396:	9b02      	ldr	r3, [sp, #8]
 800b398:	3301      	adds	r3, #1
 800b39a:	9302      	str	r3, [sp, #8]
 800b39c:	2331      	movs	r3, #49	; 0x31
 800b39e:	e795      	b.n	800b2cc <_dtoa_r+0xb3c>
 800b3a0:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <_dtoa_r+0xc34>)
 800b3a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <_dtoa_r+0xc38>)
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	d001      	beq.n	800b3b0 <_dtoa_r+0xc20>
 800b3ac:	f7ff fa3b 	bl	800a826 <_dtoa_r+0x96>
 800b3b0:	f7ff fa3b 	bl	800a82a <_dtoa_r+0x9a>
 800b3b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dcb6      	bgt.n	800b328 <_dtoa_r+0xb98>
 800b3ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	dd00      	ble.n	800b3c2 <_dtoa_r+0xc32>
 800b3c0:	e6b2      	b.n	800b128 <_dtoa_r+0x998>
 800b3c2:	e7b1      	b.n	800b328 <_dtoa_r+0xb98>
 800b3c4:	0800e149 	.word	0x0800e149
 800b3c8:	0800e151 	.word	0x0800e151

0800b3cc <rshift>:
 800b3cc:	0002      	movs	r2, r0
 800b3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d0:	6907      	ldr	r7, [r0, #16]
 800b3d2:	3214      	adds	r2, #20
 800b3d4:	0013      	movs	r3, r2
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	114e      	asrs	r6, r1, #5
 800b3da:	42b7      	cmp	r7, r6
 800b3dc:	dd31      	ble.n	800b442 <rshift+0x76>
 800b3de:	00b3      	lsls	r3, r6, #2
 800b3e0:	18d3      	adds	r3, r2, r3
 800b3e2:	251f      	movs	r5, #31
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	000b      	movs	r3, r1
 800b3e8:	00bc      	lsls	r4, r7, #2
 800b3ea:	402b      	ands	r3, r5
 800b3ec:	1914      	adds	r4, r2, r4
 800b3ee:	9302      	str	r3, [sp, #8]
 800b3f0:	4229      	tst	r1, r5
 800b3f2:	d10c      	bne.n	800b40e <rshift+0x42>
 800b3f4:	0015      	movs	r5, r2
 800b3f6:	9901      	ldr	r1, [sp, #4]
 800b3f8:	428c      	cmp	r4, r1
 800b3fa:	d838      	bhi.n	800b46e <rshift+0xa2>
 800b3fc:	9901      	ldr	r1, [sp, #4]
 800b3fe:	2300      	movs	r3, #0
 800b400:	3903      	subs	r1, #3
 800b402:	428c      	cmp	r4, r1
 800b404:	d301      	bcc.n	800b40a <rshift+0x3e>
 800b406:	1bbb      	subs	r3, r7, r6
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	18d3      	adds	r3, r2, r3
 800b40c:	e019      	b.n	800b442 <rshift+0x76>
 800b40e:	2120      	movs	r1, #32
 800b410:	9b02      	ldr	r3, [sp, #8]
 800b412:	9d01      	ldr	r5, [sp, #4]
 800b414:	1acb      	subs	r3, r1, r3
 800b416:	9303      	str	r3, [sp, #12]
 800b418:	cd02      	ldmia	r5!, {r1}
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	4694      	mov	ip, r2
 800b41e:	40d9      	lsrs	r1, r3
 800b420:	9100      	str	r1, [sp, #0]
 800b422:	42ac      	cmp	r4, r5
 800b424:	d816      	bhi.n	800b454 <rshift+0x88>
 800b426:	9d01      	ldr	r5, [sp, #4]
 800b428:	2300      	movs	r3, #0
 800b42a:	3501      	adds	r5, #1
 800b42c:	42ac      	cmp	r4, r5
 800b42e:	d302      	bcc.n	800b436 <rshift+0x6a>
 800b430:	1bbb      	subs	r3, r7, r6
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	3b04      	subs	r3, #4
 800b436:	9900      	ldr	r1, [sp, #0]
 800b438:	18d3      	adds	r3, r2, r3
 800b43a:	6019      	str	r1, [r3, #0]
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d000      	beq.n	800b442 <rshift+0x76>
 800b440:	3304      	adds	r3, #4
 800b442:	1a99      	subs	r1, r3, r2
 800b444:	1089      	asrs	r1, r1, #2
 800b446:	6101      	str	r1, [r0, #16]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d101      	bne.n	800b450 <rshift+0x84>
 800b44c:	2300      	movs	r3, #0
 800b44e:	6143      	str	r3, [r0, #20]
 800b450:	b005      	add	sp, #20
 800b452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	9903      	ldr	r1, [sp, #12]
 800b458:	408b      	lsls	r3, r1
 800b45a:	9900      	ldr	r1, [sp, #0]
 800b45c:	4319      	orrs	r1, r3
 800b45e:	4663      	mov	r3, ip
 800b460:	c302      	stmia	r3!, {r1}
 800b462:	469c      	mov	ip, r3
 800b464:	cd02      	ldmia	r5!, {r1}
 800b466:	9b02      	ldr	r3, [sp, #8]
 800b468:	40d9      	lsrs	r1, r3
 800b46a:	9100      	str	r1, [sp, #0]
 800b46c:	e7d9      	b.n	800b422 <rshift+0x56>
 800b46e:	c908      	ldmia	r1!, {r3}
 800b470:	c508      	stmia	r5!, {r3}
 800b472:	e7c1      	b.n	800b3f8 <rshift+0x2c>

0800b474 <__hexdig_fun>:
 800b474:	0002      	movs	r2, r0
 800b476:	3a30      	subs	r2, #48	; 0x30
 800b478:	0003      	movs	r3, r0
 800b47a:	2a09      	cmp	r2, #9
 800b47c:	d802      	bhi.n	800b484 <__hexdig_fun+0x10>
 800b47e:	3b20      	subs	r3, #32
 800b480:	b2d8      	uxtb	r0, r3
 800b482:	4770      	bx	lr
 800b484:	0002      	movs	r2, r0
 800b486:	3a61      	subs	r2, #97	; 0x61
 800b488:	2a05      	cmp	r2, #5
 800b48a:	d801      	bhi.n	800b490 <__hexdig_fun+0x1c>
 800b48c:	3b47      	subs	r3, #71	; 0x47
 800b48e:	e7f7      	b.n	800b480 <__hexdig_fun+0xc>
 800b490:	001a      	movs	r2, r3
 800b492:	3a41      	subs	r2, #65	; 0x41
 800b494:	2000      	movs	r0, #0
 800b496:	2a05      	cmp	r2, #5
 800b498:	d8f3      	bhi.n	800b482 <__hexdig_fun+0xe>
 800b49a:	3b27      	subs	r3, #39	; 0x27
 800b49c:	e7f0      	b.n	800b480 <__hexdig_fun+0xc>
	...

0800b4a0 <__gethex>:
 800b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a2:	b08d      	sub	sp, #52	; 0x34
 800b4a4:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a6:	4bbd      	ldr	r3, [pc, #756]	; (800b79c <__gethex+0x2fc>)
 800b4a8:	9005      	str	r0, [sp, #20]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	9109      	str	r1, [sp, #36]	; 0x24
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	9202      	str	r2, [sp, #8]
 800b4b2:	9307      	str	r3, [sp, #28]
 800b4b4:	f7f4 fe32 	bl	800011c <strlen>
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	9b07      	ldr	r3, [sp, #28]
 800b4bc:	4252      	negs	r2, r2
 800b4be:	181b      	adds	r3, r3, r0
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	9003      	str	r0, [sp, #12]
 800b4c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	1c8b      	adds	r3, r1, #2
 800b4ce:	1a52      	subs	r2, r2, r1
 800b4d0:	18d1      	adds	r1, r2, r3
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	9108      	str	r1, [sp, #32]
 800b4d6:	9901      	ldr	r1, [sp, #4]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	7808      	ldrb	r0, [r1, #0]
 800b4dc:	2830      	cmp	r0, #48	; 0x30
 800b4de:	d0f7      	beq.n	800b4d0 <__gethex+0x30>
 800b4e0:	f7ff ffc8 	bl	800b474 <__hexdig_fun>
 800b4e4:	1e04      	subs	r4, r0, #0
 800b4e6:	d13e      	bne.n	800b566 <__gethex+0xc6>
 800b4e8:	9a03      	ldr	r2, [sp, #12]
 800b4ea:	9907      	ldr	r1, [sp, #28]
 800b4ec:	9801      	ldr	r0, [sp, #4]
 800b4ee:	f001 fda7 	bl	800d040 <strncmp>
 800b4f2:	1e07      	subs	r7, r0, #0
 800b4f4:	d000      	beq.n	800b4f8 <__gethex+0x58>
 800b4f6:	e06f      	b.n	800b5d8 <__gethex+0x138>
 800b4f8:	9b01      	ldr	r3, [sp, #4]
 800b4fa:	9a03      	ldr	r2, [sp, #12]
 800b4fc:	5c98      	ldrb	r0, [r3, r2]
 800b4fe:	189d      	adds	r5, r3, r2
 800b500:	f7ff ffb8 	bl	800b474 <__hexdig_fun>
 800b504:	2301      	movs	r3, #1
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	2800      	cmp	r0, #0
 800b50a:	d034      	beq.n	800b576 <__gethex+0xd6>
 800b50c:	9501      	str	r5, [sp, #4]
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	7818      	ldrb	r0, [r3, #0]
 800b512:	2830      	cmp	r0, #48	; 0x30
 800b514:	d009      	beq.n	800b52a <__gethex+0x8a>
 800b516:	f7ff ffad 	bl	800b474 <__hexdig_fun>
 800b51a:	4243      	negs	r3, r0
 800b51c:	4143      	adcs	r3, r0
 800b51e:	9304      	str	r3, [sp, #16]
 800b520:	2301      	movs	r3, #1
 800b522:	002c      	movs	r4, r5
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	9d01      	ldr	r5, [sp, #4]
 800b528:	e004      	b.n	800b534 <__gethex+0x94>
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	3301      	adds	r3, #1
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	e7ed      	b.n	800b50e <__gethex+0x6e>
 800b532:	3501      	adds	r5, #1
 800b534:	7828      	ldrb	r0, [r5, #0]
 800b536:	f7ff ff9d 	bl	800b474 <__hexdig_fun>
 800b53a:	1e07      	subs	r7, r0, #0
 800b53c:	d1f9      	bne.n	800b532 <__gethex+0x92>
 800b53e:	0028      	movs	r0, r5
 800b540:	9a03      	ldr	r2, [sp, #12]
 800b542:	9907      	ldr	r1, [sp, #28]
 800b544:	f001 fd7c 	bl	800d040 <strncmp>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d112      	bne.n	800b572 <__gethex+0xd2>
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	d107      	bne.n	800b560 <__gethex+0xc0>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	18ed      	adds	r5, r5, r3
 800b554:	002c      	movs	r4, r5
 800b556:	7828      	ldrb	r0, [r5, #0]
 800b558:	f7ff ff8c 	bl	800b474 <__hexdig_fun>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d106      	bne.n	800b56e <__gethex+0xce>
 800b560:	1b67      	subs	r7, r4, r5
 800b562:	00bf      	lsls	r7, r7, #2
 800b564:	e007      	b.n	800b576 <__gethex+0xd6>
 800b566:	2300      	movs	r3, #0
 800b568:	001c      	movs	r4, r3
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	e7db      	b.n	800b526 <__gethex+0x86>
 800b56e:	3501      	adds	r5, #1
 800b570:	e7f1      	b.n	800b556 <__gethex+0xb6>
 800b572:	2c00      	cmp	r4, #0
 800b574:	d1f4      	bne.n	800b560 <__gethex+0xc0>
 800b576:	2220      	movs	r2, #32
 800b578:	782b      	ldrb	r3, [r5, #0]
 800b57a:	002e      	movs	r6, r5
 800b57c:	4393      	bics	r3, r2
 800b57e:	2b50      	cmp	r3, #80	; 0x50
 800b580:	d11d      	bne.n	800b5be <__gethex+0x11e>
 800b582:	786b      	ldrb	r3, [r5, #1]
 800b584:	2b2b      	cmp	r3, #43	; 0x2b
 800b586:	d02c      	beq.n	800b5e2 <__gethex+0x142>
 800b588:	2b2d      	cmp	r3, #45	; 0x2d
 800b58a:	d02e      	beq.n	800b5ea <__gethex+0x14a>
 800b58c:	2300      	movs	r3, #0
 800b58e:	1c6e      	adds	r6, r5, #1
 800b590:	9306      	str	r3, [sp, #24]
 800b592:	7830      	ldrb	r0, [r6, #0]
 800b594:	f7ff ff6e 	bl	800b474 <__hexdig_fun>
 800b598:	1e43      	subs	r3, r0, #1
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b18      	cmp	r3, #24
 800b59e:	d82b      	bhi.n	800b5f8 <__gethex+0x158>
 800b5a0:	3810      	subs	r0, #16
 800b5a2:	0004      	movs	r4, r0
 800b5a4:	7870      	ldrb	r0, [r6, #1]
 800b5a6:	f7ff ff65 	bl	800b474 <__hexdig_fun>
 800b5aa:	1e43      	subs	r3, r0, #1
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	3601      	adds	r6, #1
 800b5b0:	2b18      	cmp	r3, #24
 800b5b2:	d91c      	bls.n	800b5ee <__gethex+0x14e>
 800b5b4:	9b06      	ldr	r3, [sp, #24]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d000      	beq.n	800b5bc <__gethex+0x11c>
 800b5ba:	4264      	negs	r4, r4
 800b5bc:	193f      	adds	r7, r7, r4
 800b5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c0:	601e      	str	r6, [r3, #0]
 800b5c2:	9b04      	ldr	r3, [sp, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d019      	beq.n	800b5fc <__gethex+0x15c>
 800b5c8:	2600      	movs	r6, #0
 800b5ca:	9b08      	ldr	r3, [sp, #32]
 800b5cc:	42b3      	cmp	r3, r6
 800b5ce:	d100      	bne.n	800b5d2 <__gethex+0x132>
 800b5d0:	3606      	adds	r6, #6
 800b5d2:	0030      	movs	r0, r6
 800b5d4:	b00d      	add	sp, #52	; 0x34
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d8:	2301      	movs	r3, #1
 800b5da:	0027      	movs	r7, r4
 800b5dc:	9d01      	ldr	r5, [sp, #4]
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	e7c9      	b.n	800b576 <__gethex+0xd6>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9306      	str	r3, [sp, #24]
 800b5e6:	1cae      	adds	r6, r5, #2
 800b5e8:	e7d3      	b.n	800b592 <__gethex+0xf2>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e7fa      	b.n	800b5e4 <__gethex+0x144>
 800b5ee:	230a      	movs	r3, #10
 800b5f0:	435c      	muls	r4, r3
 800b5f2:	1824      	adds	r4, r4, r0
 800b5f4:	3c10      	subs	r4, #16
 800b5f6:	e7d5      	b.n	800b5a4 <__gethex+0x104>
 800b5f8:	002e      	movs	r6, r5
 800b5fa:	e7e0      	b.n	800b5be <__gethex+0x11e>
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	9904      	ldr	r1, [sp, #16]
 800b600:	1aeb      	subs	r3, r5, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	2b07      	cmp	r3, #7
 800b606:	dc0a      	bgt.n	800b61e <__gethex+0x17e>
 800b608:	9805      	ldr	r0, [sp, #20]
 800b60a:	f000 fa99 	bl	800bb40 <_Balloc>
 800b60e:	1e04      	subs	r4, r0, #0
 800b610:	d108      	bne.n	800b624 <__gethex+0x184>
 800b612:	0002      	movs	r2, r0
 800b614:	21de      	movs	r1, #222	; 0xde
 800b616:	4b62      	ldr	r3, [pc, #392]	; (800b7a0 <__gethex+0x300>)
 800b618:	4862      	ldr	r0, [pc, #392]	; (800b7a4 <__gethex+0x304>)
 800b61a:	f001 fdff 	bl	800d21c <__assert_func>
 800b61e:	3101      	adds	r1, #1
 800b620:	105b      	asrs	r3, r3, #1
 800b622:	e7ef      	b.n	800b604 <__gethex+0x164>
 800b624:	0003      	movs	r3, r0
 800b626:	3314      	adds	r3, #20
 800b628:	9304      	str	r3, [sp, #16]
 800b62a:	9309      	str	r3, [sp, #36]	; 0x24
 800b62c:	2300      	movs	r3, #0
 800b62e:	001e      	movs	r6, r3
 800b630:	9306      	str	r3, [sp, #24]
 800b632:	9b01      	ldr	r3, [sp, #4]
 800b634:	42ab      	cmp	r3, r5
 800b636:	d340      	bcc.n	800b6ba <__gethex+0x21a>
 800b638:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	c540      	stmia	r5!, {r6}
 800b63e:	1aed      	subs	r5, r5, r3
 800b640:	10ad      	asrs	r5, r5, #2
 800b642:	0030      	movs	r0, r6
 800b644:	6125      	str	r5, [r4, #16]
 800b646:	f000 fb73 	bl	800bd30 <__hi0bits>
 800b64a:	9b02      	ldr	r3, [sp, #8]
 800b64c:	016d      	lsls	r5, r5, #5
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	1a2e      	subs	r6, r5, r0
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	429e      	cmp	r6, r3
 800b656:	dd5a      	ble.n	800b70e <__gethex+0x26e>
 800b658:	1af6      	subs	r6, r6, r3
 800b65a:	0031      	movs	r1, r6
 800b65c:	0020      	movs	r0, r4
 800b65e:	f000 ff16 	bl	800c48e <__any_on>
 800b662:	1e05      	subs	r5, r0, #0
 800b664:	d016      	beq.n	800b694 <__gethex+0x1f4>
 800b666:	2501      	movs	r5, #1
 800b668:	211f      	movs	r1, #31
 800b66a:	0028      	movs	r0, r5
 800b66c:	1e73      	subs	r3, r6, #1
 800b66e:	4019      	ands	r1, r3
 800b670:	4088      	lsls	r0, r1
 800b672:	0001      	movs	r1, r0
 800b674:	115a      	asrs	r2, r3, #5
 800b676:	9804      	ldr	r0, [sp, #16]
 800b678:	0092      	lsls	r2, r2, #2
 800b67a:	5812      	ldr	r2, [r2, r0]
 800b67c:	420a      	tst	r2, r1
 800b67e:	d009      	beq.n	800b694 <__gethex+0x1f4>
 800b680:	42ab      	cmp	r3, r5
 800b682:	dd06      	ble.n	800b692 <__gethex+0x1f2>
 800b684:	0020      	movs	r0, r4
 800b686:	1eb1      	subs	r1, r6, #2
 800b688:	f000 ff01 	bl	800c48e <__any_on>
 800b68c:	3502      	adds	r5, #2
 800b68e:	2800      	cmp	r0, #0
 800b690:	d100      	bne.n	800b694 <__gethex+0x1f4>
 800b692:	2502      	movs	r5, #2
 800b694:	0031      	movs	r1, r6
 800b696:	0020      	movs	r0, r4
 800b698:	f7ff fe98 	bl	800b3cc <rshift>
 800b69c:	19bf      	adds	r7, r7, r6
 800b69e:	9b02      	ldr	r3, [sp, #8]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	42bb      	cmp	r3, r7
 800b6a6:	da42      	bge.n	800b72e <__gethex+0x28e>
 800b6a8:	0021      	movs	r1, r4
 800b6aa:	9805      	ldr	r0, [sp, #20]
 800b6ac:	f000 fa8c 	bl	800bbc8 <_Bfree>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6b4:	26a3      	movs	r6, #163	; 0xa3
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	e78b      	b.n	800b5d2 <__gethex+0x132>
 800b6ba:	1e6b      	subs	r3, r5, #1
 800b6bc:	9308      	str	r3, [sp, #32]
 800b6be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d014      	beq.n	800b6f0 <__gethex+0x250>
 800b6c6:	9b06      	ldr	r3, [sp, #24]
 800b6c8:	2b20      	cmp	r3, #32
 800b6ca:	d104      	bne.n	800b6d6 <__gethex+0x236>
 800b6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ce:	c340      	stmia	r3!, {r6}
 800b6d0:	2600      	movs	r6, #0
 800b6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d4:	9606      	str	r6, [sp, #24]
 800b6d6:	9b08      	ldr	r3, [sp, #32]
 800b6d8:	7818      	ldrb	r0, [r3, #0]
 800b6da:	f7ff fecb 	bl	800b474 <__hexdig_fun>
 800b6de:	230f      	movs	r3, #15
 800b6e0:	4018      	ands	r0, r3
 800b6e2:	9b06      	ldr	r3, [sp, #24]
 800b6e4:	9d08      	ldr	r5, [sp, #32]
 800b6e6:	4098      	lsls	r0, r3
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4306      	orrs	r6, r0
 800b6ec:	9306      	str	r3, [sp, #24]
 800b6ee:	e7a0      	b.n	800b632 <__gethex+0x192>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	9a03      	ldr	r2, [sp, #12]
 800b6f4:	1a9d      	subs	r5, r3, r2
 800b6f6:	9b08      	ldr	r3, [sp, #32]
 800b6f8:	195d      	adds	r5, r3, r5
 800b6fa:	9b01      	ldr	r3, [sp, #4]
 800b6fc:	429d      	cmp	r5, r3
 800b6fe:	d3e2      	bcc.n	800b6c6 <__gethex+0x226>
 800b700:	0028      	movs	r0, r5
 800b702:	9907      	ldr	r1, [sp, #28]
 800b704:	f001 fc9c 	bl	800d040 <strncmp>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1dc      	bne.n	800b6c6 <__gethex+0x226>
 800b70c:	e791      	b.n	800b632 <__gethex+0x192>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	2500      	movs	r5, #0
 800b712:	429e      	cmp	r6, r3
 800b714:	dac3      	bge.n	800b69e <__gethex+0x1fe>
 800b716:	1b9e      	subs	r6, r3, r6
 800b718:	0021      	movs	r1, r4
 800b71a:	0032      	movs	r2, r6
 800b71c:	9805      	ldr	r0, [sp, #20]
 800b71e:	f000 fc71 	bl	800c004 <__lshift>
 800b722:	0003      	movs	r3, r0
 800b724:	3314      	adds	r3, #20
 800b726:	0004      	movs	r4, r0
 800b728:	1bbf      	subs	r7, r7, r6
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	e7b7      	b.n	800b69e <__gethex+0x1fe>
 800b72e:	9b02      	ldr	r3, [sp, #8]
 800b730:	685e      	ldr	r6, [r3, #4]
 800b732:	42be      	cmp	r6, r7
 800b734:	dd71      	ble.n	800b81a <__gethex+0x37a>
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	1bf6      	subs	r6, r6, r7
 800b73a:	42b3      	cmp	r3, r6
 800b73c:	dc38      	bgt.n	800b7b0 <__gethex+0x310>
 800b73e:	9b02      	ldr	r3, [sp, #8]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	2b02      	cmp	r3, #2
 800b744:	d026      	beq.n	800b794 <__gethex+0x2f4>
 800b746:	2b03      	cmp	r3, #3
 800b748:	d02e      	beq.n	800b7a8 <__gethex+0x308>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d119      	bne.n	800b782 <__gethex+0x2e2>
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	42b3      	cmp	r3, r6
 800b752:	d116      	bne.n	800b782 <__gethex+0x2e2>
 800b754:	2b01      	cmp	r3, #1
 800b756:	d10d      	bne.n	800b774 <__gethex+0x2d4>
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	2662      	movs	r6, #98	; 0x62
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	9a01      	ldr	r2, [sp, #4]
 800b762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	2301      	movs	r3, #1
 800b768:	9a04      	ldr	r2, [sp, #16]
 800b76a:	6123      	str	r3, [r4, #16]
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b770:	601c      	str	r4, [r3, #0]
 800b772:	e72e      	b.n	800b5d2 <__gethex+0x132>
 800b774:	9901      	ldr	r1, [sp, #4]
 800b776:	0020      	movs	r0, r4
 800b778:	3901      	subs	r1, #1
 800b77a:	f000 fe88 	bl	800c48e <__any_on>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d1ea      	bne.n	800b758 <__gethex+0x2b8>
 800b782:	0021      	movs	r1, r4
 800b784:	9805      	ldr	r0, [sp, #20]
 800b786:	f000 fa1f 	bl	800bbc8 <_Bfree>
 800b78a:	2300      	movs	r3, #0
 800b78c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b78e:	2650      	movs	r6, #80	; 0x50
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	e71e      	b.n	800b5d2 <__gethex+0x132>
 800b794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1f3      	bne.n	800b782 <__gethex+0x2e2>
 800b79a:	e7dd      	b.n	800b758 <__gethex+0x2b8>
 800b79c:	0800e248 	.word	0x0800e248
 800b7a0:	0800e1cc 	.word	0x0800e1cc
 800b7a4:	0800e1dd 	.word	0x0800e1dd
 800b7a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1d4      	bne.n	800b758 <__gethex+0x2b8>
 800b7ae:	e7e8      	b.n	800b782 <__gethex+0x2e2>
 800b7b0:	1e77      	subs	r7, r6, #1
 800b7b2:	2d00      	cmp	r5, #0
 800b7b4:	d12f      	bne.n	800b816 <__gethex+0x376>
 800b7b6:	2f00      	cmp	r7, #0
 800b7b8:	d004      	beq.n	800b7c4 <__gethex+0x324>
 800b7ba:	0039      	movs	r1, r7
 800b7bc:	0020      	movs	r0, r4
 800b7be:	f000 fe66 	bl	800c48e <__any_on>
 800b7c2:	0005      	movs	r5, r0
 800b7c4:	231f      	movs	r3, #31
 800b7c6:	117a      	asrs	r2, r7, #5
 800b7c8:	401f      	ands	r7, r3
 800b7ca:	3b1e      	subs	r3, #30
 800b7cc:	40bb      	lsls	r3, r7
 800b7ce:	9904      	ldr	r1, [sp, #16]
 800b7d0:	0092      	lsls	r2, r2, #2
 800b7d2:	5852      	ldr	r2, [r2, r1]
 800b7d4:	421a      	tst	r2, r3
 800b7d6:	d001      	beq.n	800b7dc <__gethex+0x33c>
 800b7d8:	2302      	movs	r3, #2
 800b7da:	431d      	orrs	r5, r3
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	0031      	movs	r1, r6
 800b7e0:	1b9b      	subs	r3, r3, r6
 800b7e2:	2602      	movs	r6, #2
 800b7e4:	0020      	movs	r0, r4
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	f7ff fdf0 	bl	800b3cc <rshift>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	685f      	ldr	r7, [r3, #4]
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	d041      	beq.n	800b878 <__gethex+0x3d8>
 800b7f4:	9b02      	ldr	r3, [sp, #8]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d010      	beq.n	800b81e <__gethex+0x37e>
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d012      	beq.n	800b826 <__gethex+0x386>
 800b800:	2b01      	cmp	r3, #1
 800b802:	d106      	bne.n	800b812 <__gethex+0x372>
 800b804:	07aa      	lsls	r2, r5, #30
 800b806:	d504      	bpl.n	800b812 <__gethex+0x372>
 800b808:	9a04      	ldr	r2, [sp, #16]
 800b80a:	6810      	ldr	r0, [r2, #0]
 800b80c:	4305      	orrs	r5, r0
 800b80e:	421d      	tst	r5, r3
 800b810:	d10c      	bne.n	800b82c <__gethex+0x38c>
 800b812:	2310      	movs	r3, #16
 800b814:	e02f      	b.n	800b876 <__gethex+0x3d6>
 800b816:	2501      	movs	r5, #1
 800b818:	e7d4      	b.n	800b7c4 <__gethex+0x324>
 800b81a:	2601      	movs	r6, #1
 800b81c:	e7e8      	b.n	800b7f0 <__gethex+0x350>
 800b81e:	2301      	movs	r3, #1
 800b820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	9313      	str	r3, [sp, #76]	; 0x4c
 800b826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0f2      	beq.n	800b812 <__gethex+0x372>
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	2000      	movs	r0, #0
 800b830:	9303      	str	r3, [sp, #12]
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	0023      	movs	r3, r4
 800b838:	9a04      	ldr	r2, [sp, #16]
 800b83a:	3314      	adds	r3, #20
 800b83c:	1899      	adds	r1, r3, r2
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	1c55      	adds	r5, r2, #1
 800b842:	d01e      	beq.n	800b882 <__gethex+0x3e2>
 800b844:	3201      	adds	r2, #1
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	0023      	movs	r3, r4
 800b84a:	3314      	adds	r3, #20
 800b84c:	2e02      	cmp	r6, #2
 800b84e:	d140      	bne.n	800b8d2 <__gethex+0x432>
 800b850:	9a02      	ldr	r2, [sp, #8]
 800b852:	9901      	ldr	r1, [sp, #4]
 800b854:	6812      	ldr	r2, [r2, #0]
 800b856:	3a01      	subs	r2, #1
 800b858:	428a      	cmp	r2, r1
 800b85a:	d10b      	bne.n	800b874 <__gethex+0x3d4>
 800b85c:	114a      	asrs	r2, r1, #5
 800b85e:	211f      	movs	r1, #31
 800b860:	9801      	ldr	r0, [sp, #4]
 800b862:	0092      	lsls	r2, r2, #2
 800b864:	4001      	ands	r1, r0
 800b866:	2001      	movs	r0, #1
 800b868:	0005      	movs	r5, r0
 800b86a:	408d      	lsls	r5, r1
 800b86c:	58d3      	ldr	r3, [r2, r3]
 800b86e:	422b      	tst	r3, r5
 800b870:	d000      	beq.n	800b874 <__gethex+0x3d4>
 800b872:	2601      	movs	r6, #1
 800b874:	2320      	movs	r3, #32
 800b876:	431e      	orrs	r6, r3
 800b878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b87a:	601c      	str	r4, [r3, #0]
 800b87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b87e:	601f      	str	r7, [r3, #0]
 800b880:	e6a7      	b.n	800b5d2 <__gethex+0x132>
 800b882:	c301      	stmia	r3!, {r0}
 800b884:	4299      	cmp	r1, r3
 800b886:	d8da      	bhi.n	800b83e <__gethex+0x39e>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	68a2      	ldr	r2, [r4, #8]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	db17      	blt.n	800b8c0 <__gethex+0x420>
 800b890:	6863      	ldr	r3, [r4, #4]
 800b892:	9805      	ldr	r0, [sp, #20]
 800b894:	1c59      	adds	r1, r3, #1
 800b896:	f000 f953 	bl	800bb40 <_Balloc>
 800b89a:	1e05      	subs	r5, r0, #0
 800b89c:	d103      	bne.n	800b8a6 <__gethex+0x406>
 800b89e:	0002      	movs	r2, r0
 800b8a0:	2184      	movs	r1, #132	; 0x84
 800b8a2:	4b1c      	ldr	r3, [pc, #112]	; (800b914 <__gethex+0x474>)
 800b8a4:	e6b8      	b.n	800b618 <__gethex+0x178>
 800b8a6:	0021      	movs	r1, r4
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	310c      	adds	r1, #12
 800b8ac:	1c9a      	adds	r2, r3, #2
 800b8ae:	0092      	lsls	r2, r2, #2
 800b8b0:	300c      	adds	r0, #12
 800b8b2:	f000 f93c 	bl	800bb2e <memcpy>
 800b8b6:	0021      	movs	r1, r4
 800b8b8:	9805      	ldr	r0, [sp, #20]
 800b8ba:	f000 f985 	bl	800bbc8 <_Bfree>
 800b8be:	002c      	movs	r4, r5
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	6122      	str	r2, [r4, #16]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	18e3      	adds	r3, r4, r3
 800b8ce:	605a      	str	r2, [r3, #4]
 800b8d0:	e7ba      	b.n	800b848 <__gethex+0x3a8>
 800b8d2:	6922      	ldr	r2, [r4, #16]
 800b8d4:	9903      	ldr	r1, [sp, #12]
 800b8d6:	428a      	cmp	r2, r1
 800b8d8:	dd09      	ble.n	800b8ee <__gethex+0x44e>
 800b8da:	2101      	movs	r1, #1
 800b8dc:	0020      	movs	r0, r4
 800b8de:	f7ff fd75 	bl	800b3cc <rshift>
 800b8e2:	9b02      	ldr	r3, [sp, #8]
 800b8e4:	3701      	adds	r7, #1
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	42bb      	cmp	r3, r7
 800b8ea:	dac2      	bge.n	800b872 <__gethex+0x3d2>
 800b8ec:	e6dc      	b.n	800b6a8 <__gethex+0x208>
 800b8ee:	221f      	movs	r2, #31
 800b8f0:	9d01      	ldr	r5, [sp, #4]
 800b8f2:	9901      	ldr	r1, [sp, #4]
 800b8f4:	2601      	movs	r6, #1
 800b8f6:	4015      	ands	r5, r2
 800b8f8:	4211      	tst	r1, r2
 800b8fa:	d0bb      	beq.n	800b874 <__gethex+0x3d4>
 800b8fc:	9a04      	ldr	r2, [sp, #16]
 800b8fe:	189b      	adds	r3, r3, r2
 800b900:	3b04      	subs	r3, #4
 800b902:	6818      	ldr	r0, [r3, #0]
 800b904:	f000 fa14 	bl	800bd30 <__hi0bits>
 800b908:	2320      	movs	r3, #32
 800b90a:	1b5d      	subs	r5, r3, r5
 800b90c:	42a8      	cmp	r0, r5
 800b90e:	dbe4      	blt.n	800b8da <__gethex+0x43a>
 800b910:	e7b0      	b.n	800b874 <__gethex+0x3d4>
 800b912:	46c0      	nop			; (mov r8, r8)
 800b914:	0800e1cc 	.word	0x0800e1cc

0800b918 <L_shift>:
 800b918:	2308      	movs	r3, #8
 800b91a:	b570      	push	{r4, r5, r6, lr}
 800b91c:	2520      	movs	r5, #32
 800b91e:	1a9a      	subs	r2, r3, r2
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	1aad      	subs	r5, r5, r2
 800b924:	6843      	ldr	r3, [r0, #4]
 800b926:	6806      	ldr	r6, [r0, #0]
 800b928:	001c      	movs	r4, r3
 800b92a:	40ac      	lsls	r4, r5
 800b92c:	40d3      	lsrs	r3, r2
 800b92e:	4334      	orrs	r4, r6
 800b930:	6004      	str	r4, [r0, #0]
 800b932:	6043      	str	r3, [r0, #4]
 800b934:	3004      	adds	r0, #4
 800b936:	4288      	cmp	r0, r1
 800b938:	d3f4      	bcc.n	800b924 <L_shift+0xc>
 800b93a:	bd70      	pop	{r4, r5, r6, pc}

0800b93c <__match>:
 800b93c:	b530      	push	{r4, r5, lr}
 800b93e:	6803      	ldr	r3, [r0, #0]
 800b940:	780c      	ldrb	r4, [r1, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	2c00      	cmp	r4, #0
 800b946:	d102      	bne.n	800b94e <__match+0x12>
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	2001      	movs	r0, #1
 800b94c:	bd30      	pop	{r4, r5, pc}
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	0015      	movs	r5, r2
 800b952:	3d41      	subs	r5, #65	; 0x41
 800b954:	2d19      	cmp	r5, #25
 800b956:	d800      	bhi.n	800b95a <__match+0x1e>
 800b958:	3220      	adds	r2, #32
 800b95a:	3101      	adds	r1, #1
 800b95c:	42a2      	cmp	r2, r4
 800b95e:	d0ef      	beq.n	800b940 <__match+0x4>
 800b960:	2000      	movs	r0, #0
 800b962:	e7f3      	b.n	800b94c <__match+0x10>

0800b964 <__hexnan>:
 800b964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b966:	680b      	ldr	r3, [r1, #0]
 800b968:	b08b      	sub	sp, #44	; 0x2c
 800b96a:	115c      	asrs	r4, r3, #5
 800b96c:	00a4      	lsls	r4, r4, #2
 800b96e:	9201      	str	r2, [sp, #4]
 800b970:	1912      	adds	r2, r2, r4
 800b972:	0019      	movs	r1, r3
 800b974:	9202      	str	r2, [sp, #8]
 800b976:	221f      	movs	r2, #31
 800b978:	4011      	ands	r1, r2
 800b97a:	9008      	str	r0, [sp, #32]
 800b97c:	9106      	str	r1, [sp, #24]
 800b97e:	4213      	tst	r3, r2
 800b980:	d002      	beq.n	800b988 <__hexnan+0x24>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	3304      	adds	r3, #4
 800b986:	9302      	str	r3, [sp, #8]
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	2500      	movs	r5, #0
 800b98c:	1f1e      	subs	r6, r3, #4
 800b98e:	0037      	movs	r7, r6
 800b990:	0034      	movs	r4, r6
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	6035      	str	r5, [r6, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	9507      	str	r5, [sp, #28]
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	9503      	str	r5, [sp, #12]
 800b99e:	9b05      	ldr	r3, [sp, #20]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a4:	9b05      	ldr	r3, [sp, #20]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d028      	beq.n	800ba00 <__hexnan+0x9c>
 800b9ae:	9804      	ldr	r0, [sp, #16]
 800b9b0:	f7ff fd60 	bl	800b474 <__hexdig_fun>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d154      	bne.n	800ba62 <__hexnan+0xfe>
 800b9b8:	9b04      	ldr	r3, [sp, #16]
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d819      	bhi.n	800b9f2 <__hexnan+0x8e>
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	9a07      	ldr	r2, [sp, #28]
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	dd12      	ble.n	800b9ec <__hexnan+0x88>
 800b9c6:	42bc      	cmp	r4, r7
 800b9c8:	d206      	bcs.n	800b9d8 <__hexnan+0x74>
 800b9ca:	2d07      	cmp	r5, #7
 800b9cc:	dc04      	bgt.n	800b9d8 <__hexnan+0x74>
 800b9ce:	002a      	movs	r2, r5
 800b9d0:	0039      	movs	r1, r7
 800b9d2:	0020      	movs	r0, r4
 800b9d4:	f7ff ffa0 	bl	800b918 <L_shift>
 800b9d8:	9b01      	ldr	r3, [sp, #4]
 800b9da:	2508      	movs	r5, #8
 800b9dc:	429c      	cmp	r4, r3
 800b9de:	d905      	bls.n	800b9ec <__hexnan+0x88>
 800b9e0:	1f27      	subs	r7, r4, #4
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	003c      	movs	r4, r7
 800b9e6:	9b03      	ldr	r3, [sp, #12]
 800b9e8:	603d      	str	r5, [r7, #0]
 800b9ea:	9307      	str	r3, [sp, #28]
 800b9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ee:	9305      	str	r3, [sp, #20]
 800b9f0:	e7d5      	b.n	800b99e <__hexnan+0x3a>
 800b9f2:	9b04      	ldr	r3, [sp, #16]
 800b9f4:	2b29      	cmp	r3, #41	; 0x29
 800b9f6:	d158      	bne.n	800baaa <__hexnan+0x146>
 800b9f8:	9b05      	ldr	r3, [sp, #20]
 800b9fa:	9a08      	ldr	r2, [sp, #32]
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	9b03      	ldr	r3, [sp, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d051      	beq.n	800baaa <__hexnan+0x146>
 800ba06:	42bc      	cmp	r4, r7
 800ba08:	d206      	bcs.n	800ba18 <__hexnan+0xb4>
 800ba0a:	2d07      	cmp	r5, #7
 800ba0c:	dc04      	bgt.n	800ba18 <__hexnan+0xb4>
 800ba0e:	002a      	movs	r2, r5
 800ba10:	0039      	movs	r1, r7
 800ba12:	0020      	movs	r0, r4
 800ba14:	f7ff ff80 	bl	800b918 <L_shift>
 800ba18:	9b01      	ldr	r3, [sp, #4]
 800ba1a:	429c      	cmp	r4, r3
 800ba1c:	d935      	bls.n	800ba8a <__hexnan+0x126>
 800ba1e:	001a      	movs	r2, r3
 800ba20:	0023      	movs	r3, r4
 800ba22:	cb02      	ldmia	r3!, {r1}
 800ba24:	c202      	stmia	r2!, {r1}
 800ba26:	429e      	cmp	r6, r3
 800ba28:	d2fb      	bcs.n	800ba22 <__hexnan+0xbe>
 800ba2a:	9b02      	ldr	r3, [sp, #8]
 800ba2c:	1c61      	adds	r1, r4, #1
 800ba2e:	1eda      	subs	r2, r3, #3
 800ba30:	2304      	movs	r3, #4
 800ba32:	4291      	cmp	r1, r2
 800ba34:	d805      	bhi.n	800ba42 <__hexnan+0xde>
 800ba36:	9b02      	ldr	r3, [sp, #8]
 800ba38:	3b04      	subs	r3, #4
 800ba3a:	1b1c      	subs	r4, r3, r4
 800ba3c:	08a4      	lsrs	r4, r4, #2
 800ba3e:	3401      	adds	r4, #1
 800ba40:	00a3      	lsls	r3, r4, #2
 800ba42:	9a01      	ldr	r2, [sp, #4]
 800ba44:	18d4      	adds	r4, r2, r3
 800ba46:	2300      	movs	r3, #0
 800ba48:	c408      	stmia	r4!, {r3}
 800ba4a:	42a6      	cmp	r6, r4
 800ba4c:	d2fc      	bcs.n	800ba48 <__hexnan+0xe4>
 800ba4e:	6833      	ldr	r3, [r6, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d104      	bne.n	800ba5e <__hexnan+0xfa>
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	429e      	cmp	r6, r3
 800ba58:	d125      	bne.n	800baa6 <__hexnan+0x142>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	6033      	str	r3, [r6, #0]
 800ba5e:	2005      	movs	r0, #5
 800ba60:	e024      	b.n	800baac <__hexnan+0x148>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	3501      	adds	r5, #1
 800ba66:	3301      	adds	r3, #1
 800ba68:	9303      	str	r3, [sp, #12]
 800ba6a:	2d08      	cmp	r5, #8
 800ba6c:	dd06      	ble.n	800ba7c <__hexnan+0x118>
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	429c      	cmp	r4, r3
 800ba72:	d9bb      	bls.n	800b9ec <__hexnan+0x88>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2501      	movs	r5, #1
 800ba78:	3c04      	subs	r4, #4
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	220f      	movs	r2, #15
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	4010      	ands	r0, r2
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	4318      	orrs	r0, r3
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	e7b0      	b.n	800b9ec <__hexnan+0x88>
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0de      	beq.n	800ba4e <__hexnan+0xea>
 800ba90:	2220      	movs	r2, #32
 800ba92:	1ad2      	subs	r2, r2, r3
 800ba94:	2301      	movs	r3, #1
 800ba96:	425b      	negs	r3, r3
 800ba98:	40d3      	lsrs	r3, r2
 800ba9a:	9c02      	ldr	r4, [sp, #8]
 800ba9c:	3c04      	subs	r4, #4
 800ba9e:	6822      	ldr	r2, [r4, #0]
 800baa0:	4013      	ands	r3, r2
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	e7d3      	b.n	800ba4e <__hexnan+0xea>
 800baa6:	3e04      	subs	r6, #4
 800baa8:	e7d1      	b.n	800ba4e <__hexnan+0xea>
 800baaa:	2004      	movs	r0, #4
 800baac:	b00b      	add	sp, #44	; 0x2c
 800baae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bab0 <_localeconv_r>:
 800bab0:	4800      	ldr	r0, [pc, #0]	; (800bab4 <_localeconv_r+0x4>)
 800bab2:	4770      	bx	lr
 800bab4:	20000164 	.word	0x20000164

0800bab8 <_lseek_r>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	0004      	movs	r4, r0
 800babc:	0008      	movs	r0, r1
 800babe:	0011      	movs	r1, r2
 800bac0:	001a      	movs	r2, r3
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d05      	ldr	r5, [pc, #20]	; (800badc <_lseek_r+0x24>)
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f8 fda0 	bl	800460c <_lseek>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d103      	bne.n	800bad8 <_lseek_r+0x20>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d000      	beq.n	800bad8 <_lseek_r+0x20>
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	20000614 	.word	0x20000614

0800bae0 <malloc>:
 800bae0:	b510      	push	{r4, lr}
 800bae2:	4b03      	ldr	r3, [pc, #12]	; (800baf0 <malloc+0x10>)
 800bae4:	0001      	movs	r1, r0
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	f000 fd4c 	bl	800c584 <_malloc_r>
 800baec:	bd10      	pop	{r4, pc}
 800baee:	46c0      	nop			; (mov r8, r8)
 800baf0:	2000000c 	.word	0x2000000c

0800baf4 <__ascii_mbtowc>:
 800baf4:	b082      	sub	sp, #8
 800baf6:	2900      	cmp	r1, #0
 800baf8:	d100      	bne.n	800bafc <__ascii_mbtowc+0x8>
 800bafa:	a901      	add	r1, sp, #4
 800bafc:	1e10      	subs	r0, r2, #0
 800bafe:	d006      	beq.n	800bb0e <__ascii_mbtowc+0x1a>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d006      	beq.n	800bb12 <__ascii_mbtowc+0x1e>
 800bb04:	7813      	ldrb	r3, [r2, #0]
 800bb06:	600b      	str	r3, [r1, #0]
 800bb08:	7810      	ldrb	r0, [r2, #0]
 800bb0a:	1e43      	subs	r3, r0, #1
 800bb0c:	4198      	sbcs	r0, r3
 800bb0e:	b002      	add	sp, #8
 800bb10:	4770      	bx	lr
 800bb12:	2002      	movs	r0, #2
 800bb14:	4240      	negs	r0, r0
 800bb16:	e7fa      	b.n	800bb0e <__ascii_mbtowc+0x1a>

0800bb18 <memchr>:
 800bb18:	b2c9      	uxtb	r1, r1
 800bb1a:	1882      	adds	r2, r0, r2
 800bb1c:	4290      	cmp	r0, r2
 800bb1e:	d101      	bne.n	800bb24 <memchr+0xc>
 800bb20:	2000      	movs	r0, #0
 800bb22:	4770      	bx	lr
 800bb24:	7803      	ldrb	r3, [r0, #0]
 800bb26:	428b      	cmp	r3, r1
 800bb28:	d0fb      	beq.n	800bb22 <memchr+0xa>
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	e7f6      	b.n	800bb1c <memchr+0x4>

0800bb2e <memcpy>:
 800bb2e:	2300      	movs	r3, #0
 800bb30:	b510      	push	{r4, lr}
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d100      	bne.n	800bb38 <memcpy+0xa>
 800bb36:	bd10      	pop	{r4, pc}
 800bb38:	5ccc      	ldrb	r4, [r1, r3]
 800bb3a:	54c4      	strb	r4, [r0, r3]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	e7f8      	b.n	800bb32 <memcpy+0x4>

0800bb40 <_Balloc>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb44:	0006      	movs	r6, r0
 800bb46:	000c      	movs	r4, r1
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	d10e      	bne.n	800bb6a <_Balloc+0x2a>
 800bb4c:	2010      	movs	r0, #16
 800bb4e:	f7ff ffc7 	bl	800bae0 <malloc>
 800bb52:	1e02      	subs	r2, r0, #0
 800bb54:	6270      	str	r0, [r6, #36]	; 0x24
 800bb56:	d104      	bne.n	800bb62 <_Balloc+0x22>
 800bb58:	2166      	movs	r1, #102	; 0x66
 800bb5a:	4b19      	ldr	r3, [pc, #100]	; (800bbc0 <_Balloc+0x80>)
 800bb5c:	4819      	ldr	r0, [pc, #100]	; (800bbc4 <_Balloc+0x84>)
 800bb5e:	f001 fb5d 	bl	800d21c <__assert_func>
 800bb62:	6045      	str	r5, [r0, #4]
 800bb64:	6085      	str	r5, [r0, #8]
 800bb66:	6005      	str	r5, [r0, #0]
 800bb68:	60c5      	str	r5, [r0, #12]
 800bb6a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bb6c:	68eb      	ldr	r3, [r5, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d013      	beq.n	800bb9a <_Balloc+0x5a>
 800bb72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb74:	00a2      	lsls	r2, r4, #2
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	189b      	adds	r3, r3, r2
 800bb7a:	6818      	ldr	r0, [r3, #0]
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d118      	bne.n	800bbb2 <_Balloc+0x72>
 800bb80:	2101      	movs	r1, #1
 800bb82:	000d      	movs	r5, r1
 800bb84:	40a5      	lsls	r5, r4
 800bb86:	1d6a      	adds	r2, r5, #5
 800bb88:	0030      	movs	r0, r6
 800bb8a:	0092      	lsls	r2, r2, #2
 800bb8c:	f000 fca2 	bl	800c4d4 <_calloc_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d00c      	beq.n	800bbae <_Balloc+0x6e>
 800bb94:	6044      	str	r4, [r0, #4]
 800bb96:	6085      	str	r5, [r0, #8]
 800bb98:	e00d      	b.n	800bbb6 <_Balloc+0x76>
 800bb9a:	2221      	movs	r2, #33	; 0x21
 800bb9c:	2104      	movs	r1, #4
 800bb9e:	0030      	movs	r0, r6
 800bba0:	f000 fc98 	bl	800c4d4 <_calloc_r>
 800bba4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bba6:	60e8      	str	r0, [r5, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1e1      	bne.n	800bb72 <_Balloc+0x32>
 800bbae:	2000      	movs	r0, #0
 800bbb0:	bd70      	pop	{r4, r5, r6, pc}
 800bbb2:	6802      	ldr	r2, [r0, #0]
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6103      	str	r3, [r0, #16]
 800bbba:	60c3      	str	r3, [r0, #12]
 800bbbc:	e7f8      	b.n	800bbb0 <_Balloc+0x70>
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	0800e156 	.word	0x0800e156
 800bbc4:	0800e25c 	.word	0x0800e25c

0800bbc8 <_Bfree>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbcc:	0005      	movs	r5, r0
 800bbce:	000c      	movs	r4, r1
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	d10e      	bne.n	800bbf2 <_Bfree+0x2a>
 800bbd4:	2010      	movs	r0, #16
 800bbd6:	f7ff ff83 	bl	800bae0 <malloc>
 800bbda:	1e02      	subs	r2, r0, #0
 800bbdc:	6268      	str	r0, [r5, #36]	; 0x24
 800bbde:	d104      	bne.n	800bbea <_Bfree+0x22>
 800bbe0:	218a      	movs	r1, #138	; 0x8a
 800bbe2:	4b09      	ldr	r3, [pc, #36]	; (800bc08 <_Bfree+0x40>)
 800bbe4:	4809      	ldr	r0, [pc, #36]	; (800bc0c <_Bfree+0x44>)
 800bbe6:	f001 fb19 	bl	800d21c <__assert_func>
 800bbea:	6046      	str	r6, [r0, #4]
 800bbec:	6086      	str	r6, [r0, #8]
 800bbee:	6006      	str	r6, [r0, #0]
 800bbf0:	60c6      	str	r6, [r0, #12]
 800bbf2:	2c00      	cmp	r4, #0
 800bbf4:	d007      	beq.n	800bc06 <_Bfree+0x3e>
 800bbf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbf8:	6862      	ldr	r2, [r4, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	0092      	lsls	r2, r2, #2
 800bbfe:	189b      	adds	r3, r3, r2
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	6022      	str	r2, [r4, #0]
 800bc04:	601c      	str	r4, [r3, #0]
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	0800e156 	.word	0x0800e156
 800bc0c:	0800e25c 	.word	0x0800e25c

0800bc10 <__multadd>:
 800bc10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc12:	000e      	movs	r6, r1
 800bc14:	9001      	str	r0, [sp, #4]
 800bc16:	000c      	movs	r4, r1
 800bc18:	001d      	movs	r5, r3
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	690f      	ldr	r7, [r1, #16]
 800bc1e:	3614      	adds	r6, #20
 800bc20:	6833      	ldr	r3, [r6, #0]
 800bc22:	3001      	adds	r0, #1
 800bc24:	b299      	uxth	r1, r3
 800bc26:	4351      	muls	r1, r2
 800bc28:	0c1b      	lsrs	r3, r3, #16
 800bc2a:	4353      	muls	r3, r2
 800bc2c:	1949      	adds	r1, r1, r5
 800bc2e:	0c0d      	lsrs	r5, r1, #16
 800bc30:	195b      	adds	r3, r3, r5
 800bc32:	0c1d      	lsrs	r5, r3, #16
 800bc34:	b289      	uxth	r1, r1
 800bc36:	041b      	lsls	r3, r3, #16
 800bc38:	185b      	adds	r3, r3, r1
 800bc3a:	c608      	stmia	r6!, {r3}
 800bc3c:	4287      	cmp	r7, r0
 800bc3e:	dcef      	bgt.n	800bc20 <__multadd+0x10>
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	d022      	beq.n	800bc8a <__multadd+0x7a>
 800bc44:	68a3      	ldr	r3, [r4, #8]
 800bc46:	42bb      	cmp	r3, r7
 800bc48:	dc19      	bgt.n	800bc7e <__multadd+0x6e>
 800bc4a:	6863      	ldr	r3, [r4, #4]
 800bc4c:	9801      	ldr	r0, [sp, #4]
 800bc4e:	1c59      	adds	r1, r3, #1
 800bc50:	f7ff ff76 	bl	800bb40 <_Balloc>
 800bc54:	1e06      	subs	r6, r0, #0
 800bc56:	d105      	bne.n	800bc64 <__multadd+0x54>
 800bc58:	0002      	movs	r2, r0
 800bc5a:	21b5      	movs	r1, #181	; 0xb5
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <__multadd+0x80>)
 800bc5e:	480d      	ldr	r0, [pc, #52]	; (800bc94 <__multadd+0x84>)
 800bc60:	f001 fadc 	bl	800d21c <__assert_func>
 800bc64:	0021      	movs	r1, r4
 800bc66:	6923      	ldr	r3, [r4, #16]
 800bc68:	310c      	adds	r1, #12
 800bc6a:	1c9a      	adds	r2, r3, #2
 800bc6c:	0092      	lsls	r2, r2, #2
 800bc6e:	300c      	adds	r0, #12
 800bc70:	f7ff ff5d 	bl	800bb2e <memcpy>
 800bc74:	0021      	movs	r1, r4
 800bc76:	9801      	ldr	r0, [sp, #4]
 800bc78:	f7ff ffa6 	bl	800bbc8 <_Bfree>
 800bc7c:	0034      	movs	r4, r6
 800bc7e:	1d3b      	adds	r3, r7, #4
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	18e3      	adds	r3, r4, r3
 800bc84:	605d      	str	r5, [r3, #4]
 800bc86:	1c7b      	adds	r3, r7, #1
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	0020      	movs	r0, r4
 800bc8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc8e:	46c0      	nop			; (mov r8, r8)
 800bc90:	0800e1cc 	.word	0x0800e1cc
 800bc94:	0800e25c 	.word	0x0800e25c

0800bc98 <__s2b>:
 800bc98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc9a:	0006      	movs	r6, r0
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	000c      	movs	r4, r1
 800bca0:	3008      	adds	r0, #8
 800bca2:	2109      	movs	r1, #9
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	0015      	movs	r5, r2
 800bca8:	f7f4 fade 	bl	8000268 <__divsi3>
 800bcac:	2301      	movs	r3, #1
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4283      	cmp	r3, r0
 800bcb2:	db0a      	blt.n	800bcca <__s2b+0x32>
 800bcb4:	0030      	movs	r0, r6
 800bcb6:	f7ff ff43 	bl	800bb40 <_Balloc>
 800bcba:	1e01      	subs	r1, r0, #0
 800bcbc:	d108      	bne.n	800bcd0 <__s2b+0x38>
 800bcbe:	0002      	movs	r2, r0
 800bcc0:	4b19      	ldr	r3, [pc, #100]	; (800bd28 <__s2b+0x90>)
 800bcc2:	481a      	ldr	r0, [pc, #104]	; (800bd2c <__s2b+0x94>)
 800bcc4:	31ce      	adds	r1, #206	; 0xce
 800bcc6:	f001 faa9 	bl	800d21c <__assert_func>
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	3101      	adds	r1, #1
 800bcce:	e7ef      	b.n	800bcb0 <__s2b+0x18>
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	6143      	str	r3, [r0, #20]
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	6103      	str	r3, [r0, #16]
 800bcd8:	2d09      	cmp	r5, #9
 800bcda:	dd18      	ble.n	800bd0e <__s2b+0x76>
 800bcdc:	0023      	movs	r3, r4
 800bcde:	3309      	adds	r3, #9
 800bce0:	001f      	movs	r7, r3
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	1964      	adds	r4, r4, r5
 800bce6:	783b      	ldrb	r3, [r7, #0]
 800bce8:	220a      	movs	r2, #10
 800bcea:	0030      	movs	r0, r6
 800bcec:	3b30      	subs	r3, #48	; 0x30
 800bcee:	f7ff ff8f 	bl	800bc10 <__multadd>
 800bcf2:	3701      	adds	r7, #1
 800bcf4:	0001      	movs	r1, r0
 800bcf6:	42a7      	cmp	r7, r4
 800bcf8:	d1f5      	bne.n	800bce6 <__s2b+0x4e>
 800bcfa:	002c      	movs	r4, r5
 800bcfc:	9b00      	ldr	r3, [sp, #0]
 800bcfe:	3c08      	subs	r4, #8
 800bd00:	191c      	adds	r4, r3, r4
 800bd02:	002f      	movs	r7, r5
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	429f      	cmp	r7, r3
 800bd08:	db04      	blt.n	800bd14 <__s2b+0x7c>
 800bd0a:	0008      	movs	r0, r1
 800bd0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd0e:	2509      	movs	r5, #9
 800bd10:	340a      	adds	r4, #10
 800bd12:	e7f6      	b.n	800bd02 <__s2b+0x6a>
 800bd14:	1b63      	subs	r3, r4, r5
 800bd16:	5ddb      	ldrb	r3, [r3, r7]
 800bd18:	220a      	movs	r2, #10
 800bd1a:	0030      	movs	r0, r6
 800bd1c:	3b30      	subs	r3, #48	; 0x30
 800bd1e:	f7ff ff77 	bl	800bc10 <__multadd>
 800bd22:	3701      	adds	r7, #1
 800bd24:	0001      	movs	r1, r0
 800bd26:	e7ed      	b.n	800bd04 <__s2b+0x6c>
 800bd28:	0800e1cc 	.word	0x0800e1cc
 800bd2c:	0800e25c 	.word	0x0800e25c

0800bd30 <__hi0bits>:
 800bd30:	0003      	movs	r3, r0
 800bd32:	0c02      	lsrs	r2, r0, #16
 800bd34:	2000      	movs	r0, #0
 800bd36:	4282      	cmp	r2, r0
 800bd38:	d101      	bne.n	800bd3e <__hi0bits+0xe>
 800bd3a:	041b      	lsls	r3, r3, #16
 800bd3c:	3010      	adds	r0, #16
 800bd3e:	0e1a      	lsrs	r2, r3, #24
 800bd40:	d101      	bne.n	800bd46 <__hi0bits+0x16>
 800bd42:	3008      	adds	r0, #8
 800bd44:	021b      	lsls	r3, r3, #8
 800bd46:	0f1a      	lsrs	r2, r3, #28
 800bd48:	d101      	bne.n	800bd4e <__hi0bits+0x1e>
 800bd4a:	3004      	adds	r0, #4
 800bd4c:	011b      	lsls	r3, r3, #4
 800bd4e:	0f9a      	lsrs	r2, r3, #30
 800bd50:	d101      	bne.n	800bd56 <__hi0bits+0x26>
 800bd52:	3002      	adds	r0, #2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	db03      	blt.n	800bd62 <__hi0bits+0x32>
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	d400      	bmi.n	800bd62 <__hi0bits+0x32>
 800bd60:	2020      	movs	r0, #32
 800bd62:	4770      	bx	lr

0800bd64 <__lo0bits>:
 800bd64:	6803      	ldr	r3, [r0, #0]
 800bd66:	0002      	movs	r2, r0
 800bd68:	2107      	movs	r1, #7
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	4008      	ands	r0, r1
 800bd6e:	420b      	tst	r3, r1
 800bd70:	d00d      	beq.n	800bd8e <__lo0bits+0x2a>
 800bd72:	3906      	subs	r1, #6
 800bd74:	2000      	movs	r0, #0
 800bd76:	420b      	tst	r3, r1
 800bd78:	d105      	bne.n	800bd86 <__lo0bits+0x22>
 800bd7a:	3002      	adds	r0, #2
 800bd7c:	4203      	tst	r3, r0
 800bd7e:	d003      	beq.n	800bd88 <__lo0bits+0x24>
 800bd80:	40cb      	lsrs	r3, r1
 800bd82:	0008      	movs	r0, r1
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	4770      	bx	lr
 800bd88:	089b      	lsrs	r3, r3, #2
 800bd8a:	6013      	str	r3, [r2, #0]
 800bd8c:	e7fb      	b.n	800bd86 <__lo0bits+0x22>
 800bd8e:	b299      	uxth	r1, r3
 800bd90:	2900      	cmp	r1, #0
 800bd92:	d101      	bne.n	800bd98 <__lo0bits+0x34>
 800bd94:	2010      	movs	r0, #16
 800bd96:	0c1b      	lsrs	r3, r3, #16
 800bd98:	b2d9      	uxtb	r1, r3
 800bd9a:	2900      	cmp	r1, #0
 800bd9c:	d101      	bne.n	800bda2 <__lo0bits+0x3e>
 800bd9e:	3008      	adds	r0, #8
 800bda0:	0a1b      	lsrs	r3, r3, #8
 800bda2:	0719      	lsls	r1, r3, #28
 800bda4:	d101      	bne.n	800bdaa <__lo0bits+0x46>
 800bda6:	3004      	adds	r0, #4
 800bda8:	091b      	lsrs	r3, r3, #4
 800bdaa:	0799      	lsls	r1, r3, #30
 800bdac:	d101      	bne.n	800bdb2 <__lo0bits+0x4e>
 800bdae:	3002      	adds	r0, #2
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	07d9      	lsls	r1, r3, #31
 800bdb4:	d4e9      	bmi.n	800bd8a <__lo0bits+0x26>
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	d1e6      	bne.n	800bd8a <__lo0bits+0x26>
 800bdbc:	2020      	movs	r0, #32
 800bdbe:	e7e2      	b.n	800bd86 <__lo0bits+0x22>

0800bdc0 <__i2b>:
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	000c      	movs	r4, r1
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	f7ff febb 	bl	800bb40 <_Balloc>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d106      	bne.n	800bddc <__i2b+0x1c>
 800bdce:	21a0      	movs	r1, #160	; 0xa0
 800bdd0:	0002      	movs	r2, r0
 800bdd2:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <__i2b+0x24>)
 800bdd4:	4804      	ldr	r0, [pc, #16]	; (800bde8 <__i2b+0x28>)
 800bdd6:	0049      	lsls	r1, r1, #1
 800bdd8:	f001 fa20 	bl	800d21c <__assert_func>
 800bddc:	2301      	movs	r3, #1
 800bdde:	6144      	str	r4, [r0, #20]
 800bde0:	6103      	str	r3, [r0, #16]
 800bde2:	bd10      	pop	{r4, pc}
 800bde4:	0800e1cc 	.word	0x0800e1cc
 800bde8:	0800e25c 	.word	0x0800e25c

0800bdec <__multiply>:
 800bdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdee:	690b      	ldr	r3, [r1, #16]
 800bdf0:	0014      	movs	r4, r2
 800bdf2:	6912      	ldr	r2, [r2, #16]
 800bdf4:	000d      	movs	r5, r1
 800bdf6:	b089      	sub	sp, #36	; 0x24
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	da01      	bge.n	800be00 <__multiply+0x14>
 800bdfc:	0025      	movs	r5, r4
 800bdfe:	000c      	movs	r4, r1
 800be00:	692f      	ldr	r7, [r5, #16]
 800be02:	6926      	ldr	r6, [r4, #16]
 800be04:	6869      	ldr	r1, [r5, #4]
 800be06:	19bb      	adds	r3, r7, r6
 800be08:	9302      	str	r3, [sp, #8]
 800be0a:	68ab      	ldr	r3, [r5, #8]
 800be0c:	19ba      	adds	r2, r7, r6
 800be0e:	4293      	cmp	r3, r2
 800be10:	da00      	bge.n	800be14 <__multiply+0x28>
 800be12:	3101      	adds	r1, #1
 800be14:	f7ff fe94 	bl	800bb40 <_Balloc>
 800be18:	9001      	str	r0, [sp, #4]
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d106      	bne.n	800be2c <__multiply+0x40>
 800be1e:	215e      	movs	r1, #94	; 0x5e
 800be20:	0002      	movs	r2, r0
 800be22:	4b48      	ldr	r3, [pc, #288]	; (800bf44 <__multiply+0x158>)
 800be24:	4848      	ldr	r0, [pc, #288]	; (800bf48 <__multiply+0x15c>)
 800be26:	31ff      	adds	r1, #255	; 0xff
 800be28:	f001 f9f8 	bl	800d21c <__assert_func>
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	3314      	adds	r3, #20
 800be32:	469c      	mov	ip, r3
 800be34:	19bb      	adds	r3, r7, r6
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4463      	add	r3, ip
 800be3a:	9303      	str	r3, [sp, #12]
 800be3c:	4663      	mov	r3, ip
 800be3e:	9903      	ldr	r1, [sp, #12]
 800be40:	428b      	cmp	r3, r1
 800be42:	d32c      	bcc.n	800be9e <__multiply+0xb2>
 800be44:	002b      	movs	r3, r5
 800be46:	0022      	movs	r2, r4
 800be48:	3314      	adds	r3, #20
 800be4a:	00bf      	lsls	r7, r7, #2
 800be4c:	3214      	adds	r2, #20
 800be4e:	9306      	str	r3, [sp, #24]
 800be50:	00b6      	lsls	r6, r6, #2
 800be52:	19db      	adds	r3, r3, r7
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	1993      	adds	r3, r2, r6
 800be58:	9307      	str	r3, [sp, #28]
 800be5a:	2304      	movs	r3, #4
 800be5c:	9305      	str	r3, [sp, #20]
 800be5e:	002b      	movs	r3, r5
 800be60:	9904      	ldr	r1, [sp, #16]
 800be62:	3315      	adds	r3, #21
 800be64:	9200      	str	r2, [sp, #0]
 800be66:	4299      	cmp	r1, r3
 800be68:	d305      	bcc.n	800be76 <__multiply+0x8a>
 800be6a:	1b4b      	subs	r3, r1, r5
 800be6c:	3b15      	subs	r3, #21
 800be6e:	089b      	lsrs	r3, r3, #2
 800be70:	3301      	adds	r3, #1
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	9b07      	ldr	r3, [sp, #28]
 800be78:	9a00      	ldr	r2, [sp, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d311      	bcc.n	800bea2 <__multiply+0xb6>
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dd06      	ble.n	800be92 <__multiply+0xa6>
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	3b04      	subs	r3, #4
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d054      	beq.n	800bf3c <__multiply+0x150>
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	9a02      	ldr	r2, [sp, #8]
 800be96:	0018      	movs	r0, r3
 800be98:	611a      	str	r2, [r3, #16]
 800be9a:	b009      	add	sp, #36	; 0x24
 800be9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9e:	c304      	stmia	r3!, {r2}
 800bea0:	e7cd      	b.n	800be3e <__multiply+0x52>
 800bea2:	9b00      	ldr	r3, [sp, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	b298      	uxth	r0, r3
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d01c      	beq.n	800bee6 <__multiply+0xfa>
 800beac:	4667      	mov	r7, ip
 800beae:	2400      	movs	r4, #0
 800beb0:	9e06      	ldr	r6, [sp, #24]
 800beb2:	ce02      	ldmia	r6!, {r1}
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	b28b      	uxth	r3, r1
 800beb8:	4343      	muls	r3, r0
 800beba:	0c09      	lsrs	r1, r1, #16
 800bebc:	4341      	muls	r1, r0
 800bebe:	b292      	uxth	r2, r2
 800bec0:	189b      	adds	r3, r3, r2
 800bec2:	191b      	adds	r3, r3, r4
 800bec4:	000c      	movs	r4, r1
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	0c11      	lsrs	r1, r2, #16
 800beca:	1861      	adds	r1, r4, r1
 800becc:	0c1c      	lsrs	r4, r3, #16
 800bece:	1909      	adds	r1, r1, r4
 800bed0:	0c0c      	lsrs	r4, r1, #16
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	0409      	lsls	r1, r1, #16
 800bed6:	430b      	orrs	r3, r1
 800bed8:	c708      	stmia	r7!, {r3}
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	42b3      	cmp	r3, r6
 800bede:	d8e8      	bhi.n	800beb2 <__multiply+0xc6>
 800bee0:	4663      	mov	r3, ip
 800bee2:	9a05      	ldr	r2, [sp, #20]
 800bee4:	509c      	str	r4, [r3, r2]
 800bee6:	9b00      	ldr	r3, [sp, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	0c1e      	lsrs	r6, r3, #16
 800beec:	d020      	beq.n	800bf30 <__multiply+0x144>
 800beee:	4663      	mov	r3, ip
 800bef0:	002c      	movs	r4, r5
 800bef2:	4660      	mov	r0, ip
 800bef4:	2700      	movs	r7, #0
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3414      	adds	r4, #20
 800befa:	6822      	ldr	r2, [r4, #0]
 800befc:	b29b      	uxth	r3, r3
 800befe:	b291      	uxth	r1, r2
 800bf00:	4371      	muls	r1, r6
 800bf02:	6802      	ldr	r2, [r0, #0]
 800bf04:	0c12      	lsrs	r2, r2, #16
 800bf06:	1889      	adds	r1, r1, r2
 800bf08:	19cf      	adds	r7, r1, r7
 800bf0a:	0439      	lsls	r1, r7, #16
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	6003      	str	r3, [r0, #0]
 800bf10:	cc02      	ldmia	r4!, {r1}
 800bf12:	6843      	ldr	r3, [r0, #4]
 800bf14:	0c09      	lsrs	r1, r1, #16
 800bf16:	4371      	muls	r1, r6
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	0c3f      	lsrs	r7, r7, #16
 800bf1c:	18cb      	adds	r3, r1, r3
 800bf1e:	9a04      	ldr	r2, [sp, #16]
 800bf20:	19db      	adds	r3, r3, r7
 800bf22:	0c1f      	lsrs	r7, r3, #16
 800bf24:	3004      	adds	r0, #4
 800bf26:	42a2      	cmp	r2, r4
 800bf28:	d8e7      	bhi.n	800befa <__multiply+0x10e>
 800bf2a:	4662      	mov	r2, ip
 800bf2c:	9905      	ldr	r1, [sp, #20]
 800bf2e:	5053      	str	r3, [r2, r1]
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	3304      	adds	r3, #4
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	2304      	movs	r3, #4
 800bf38:	449c      	add	ip, r3
 800bf3a:	e79c      	b.n	800be76 <__multiply+0x8a>
 800bf3c:	9b02      	ldr	r3, [sp, #8]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	e79c      	b.n	800be7e <__multiply+0x92>
 800bf44:	0800e1cc 	.word	0x0800e1cc
 800bf48:	0800e25c 	.word	0x0800e25c

0800bf4c <__pow5mult>:
 800bf4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf4e:	2303      	movs	r3, #3
 800bf50:	0015      	movs	r5, r2
 800bf52:	0007      	movs	r7, r0
 800bf54:	000e      	movs	r6, r1
 800bf56:	401a      	ands	r2, r3
 800bf58:	421d      	tst	r5, r3
 800bf5a:	d008      	beq.n	800bf6e <__pow5mult+0x22>
 800bf5c:	4925      	ldr	r1, [pc, #148]	; (800bff4 <__pow5mult+0xa8>)
 800bf5e:	3a01      	subs	r2, #1
 800bf60:	0092      	lsls	r2, r2, #2
 800bf62:	5852      	ldr	r2, [r2, r1]
 800bf64:	2300      	movs	r3, #0
 800bf66:	0031      	movs	r1, r6
 800bf68:	f7ff fe52 	bl	800bc10 <__multadd>
 800bf6c:	0006      	movs	r6, r0
 800bf6e:	10ad      	asrs	r5, r5, #2
 800bf70:	d03d      	beq.n	800bfee <__pow5mult+0xa2>
 800bf72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bf74:	2c00      	cmp	r4, #0
 800bf76:	d10f      	bne.n	800bf98 <__pow5mult+0x4c>
 800bf78:	2010      	movs	r0, #16
 800bf7a:	f7ff fdb1 	bl	800bae0 <malloc>
 800bf7e:	1e02      	subs	r2, r0, #0
 800bf80:	6278      	str	r0, [r7, #36]	; 0x24
 800bf82:	d105      	bne.n	800bf90 <__pow5mult+0x44>
 800bf84:	21d7      	movs	r1, #215	; 0xd7
 800bf86:	4b1c      	ldr	r3, [pc, #112]	; (800bff8 <__pow5mult+0xac>)
 800bf88:	481c      	ldr	r0, [pc, #112]	; (800bffc <__pow5mult+0xb0>)
 800bf8a:	0049      	lsls	r1, r1, #1
 800bf8c:	f001 f946 	bl	800d21c <__assert_func>
 800bf90:	6044      	str	r4, [r0, #4]
 800bf92:	6084      	str	r4, [r0, #8]
 800bf94:	6004      	str	r4, [r0, #0]
 800bf96:	60c4      	str	r4, [r0, #12]
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	689c      	ldr	r4, [r3, #8]
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	2c00      	cmp	r4, #0
 800bfa0:	d108      	bne.n	800bfb4 <__pow5mult+0x68>
 800bfa2:	0038      	movs	r0, r7
 800bfa4:	4916      	ldr	r1, [pc, #88]	; (800c000 <__pow5mult+0xb4>)
 800bfa6:	f7ff ff0b 	bl	800bdc0 <__i2b>
 800bfaa:	9b01      	ldr	r3, [sp, #4]
 800bfac:	0004      	movs	r4, r0
 800bfae:	6098      	str	r0, [r3, #8]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6003      	str	r3, [r0, #0]
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	421d      	tst	r5, r3
 800bfb8:	d00a      	beq.n	800bfd0 <__pow5mult+0x84>
 800bfba:	0031      	movs	r1, r6
 800bfbc:	0022      	movs	r2, r4
 800bfbe:	0038      	movs	r0, r7
 800bfc0:	f7ff ff14 	bl	800bdec <__multiply>
 800bfc4:	0031      	movs	r1, r6
 800bfc6:	9001      	str	r0, [sp, #4]
 800bfc8:	0038      	movs	r0, r7
 800bfca:	f7ff fdfd 	bl	800bbc8 <_Bfree>
 800bfce:	9e01      	ldr	r6, [sp, #4]
 800bfd0:	106d      	asrs	r5, r5, #1
 800bfd2:	d00c      	beq.n	800bfee <__pow5mult+0xa2>
 800bfd4:	6820      	ldr	r0, [r4, #0]
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d107      	bne.n	800bfea <__pow5mult+0x9e>
 800bfda:	0022      	movs	r2, r4
 800bfdc:	0021      	movs	r1, r4
 800bfde:	0038      	movs	r0, r7
 800bfe0:	f7ff ff04 	bl	800bdec <__multiply>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	6020      	str	r0, [r4, #0]
 800bfe8:	6003      	str	r3, [r0, #0]
 800bfea:	0004      	movs	r4, r0
 800bfec:	e7e2      	b.n	800bfb4 <__pow5mult+0x68>
 800bfee:	0030      	movs	r0, r6
 800bff0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bff2:	46c0      	nop			; (mov r8, r8)
 800bff4:	0800e3b0 	.word	0x0800e3b0
 800bff8:	0800e156 	.word	0x0800e156
 800bffc:	0800e25c 	.word	0x0800e25c
 800c000:	00000271 	.word	0x00000271

0800c004 <__lshift>:
 800c004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c006:	000c      	movs	r4, r1
 800c008:	0017      	movs	r7, r2
 800c00a:	6923      	ldr	r3, [r4, #16]
 800c00c:	1155      	asrs	r5, r2, #5
 800c00e:	b087      	sub	sp, #28
 800c010:	18eb      	adds	r3, r5, r3
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	3301      	adds	r3, #1
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	6849      	ldr	r1, [r1, #4]
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	9004      	str	r0, [sp, #16]
 800c01e:	9a01      	ldr	r2, [sp, #4]
 800c020:	4293      	cmp	r3, r2
 800c022:	db11      	blt.n	800c048 <__lshift+0x44>
 800c024:	9804      	ldr	r0, [sp, #16]
 800c026:	f7ff fd8b 	bl	800bb40 <_Balloc>
 800c02a:	0002      	movs	r2, r0
 800c02c:	2300      	movs	r3, #0
 800c02e:	3214      	adds	r2, #20
 800c030:	0006      	movs	r6, r0
 800c032:	0011      	movs	r1, r2
 800c034:	9203      	str	r2, [sp, #12]
 800c036:	4298      	cmp	r0, r3
 800c038:	d10d      	bne.n	800c056 <__lshift+0x52>
 800c03a:	21da      	movs	r1, #218	; 0xda
 800c03c:	0002      	movs	r2, r0
 800c03e:	4b27      	ldr	r3, [pc, #156]	; (800c0dc <__lshift+0xd8>)
 800c040:	4827      	ldr	r0, [pc, #156]	; (800c0e0 <__lshift+0xdc>)
 800c042:	31ff      	adds	r1, #255	; 0xff
 800c044:	f001 f8ea 	bl	800d21c <__assert_func>
 800c048:	3101      	adds	r1, #1
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	e7e7      	b.n	800c01e <__lshift+0x1a>
 800c04e:	2200      	movs	r2, #0
 800c050:	0098      	lsls	r0, r3, #2
 800c052:	500a      	str	r2, [r1, r0]
 800c054:	3301      	adds	r3, #1
 800c056:	42ab      	cmp	r3, r5
 800c058:	dbf9      	blt.n	800c04e <__lshift+0x4a>
 800c05a:	43eb      	mvns	r3, r5
 800c05c:	17db      	asrs	r3, r3, #31
 800c05e:	401d      	ands	r5, r3
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	00ad      	lsls	r5, r5, #2
 800c064:	211f      	movs	r1, #31
 800c066:	0038      	movs	r0, r7
 800c068:	195d      	adds	r5, r3, r5
 800c06a:	0023      	movs	r3, r4
 800c06c:	6922      	ldr	r2, [r4, #16]
 800c06e:	3314      	adds	r3, #20
 800c070:	0092      	lsls	r2, r2, #2
 800c072:	4008      	ands	r0, r1
 800c074:	4684      	mov	ip, r0
 800c076:	189a      	adds	r2, r3, r2
 800c078:	420f      	tst	r7, r1
 800c07a:	d02a      	beq.n	800c0d2 <__lshift+0xce>
 800c07c:	3101      	adds	r1, #1
 800c07e:	1a09      	subs	r1, r1, r0
 800c080:	9105      	str	r1, [sp, #20]
 800c082:	2100      	movs	r1, #0
 800c084:	9503      	str	r5, [sp, #12]
 800c086:	4667      	mov	r7, ip
 800c088:	6818      	ldr	r0, [r3, #0]
 800c08a:	40b8      	lsls	r0, r7
 800c08c:	4301      	orrs	r1, r0
 800c08e:	9803      	ldr	r0, [sp, #12]
 800c090:	c002      	stmia	r0!, {r1}
 800c092:	cb02      	ldmia	r3!, {r1}
 800c094:	9003      	str	r0, [sp, #12]
 800c096:	9805      	ldr	r0, [sp, #20]
 800c098:	40c1      	lsrs	r1, r0
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d8f3      	bhi.n	800c086 <__lshift+0x82>
 800c09e:	0020      	movs	r0, r4
 800c0a0:	3015      	adds	r0, #21
 800c0a2:	2304      	movs	r3, #4
 800c0a4:	4282      	cmp	r2, r0
 800c0a6:	d304      	bcc.n	800c0b2 <__lshift+0xae>
 800c0a8:	1b13      	subs	r3, r2, r4
 800c0aa:	3b15      	subs	r3, #21
 800c0ac:	089b      	lsrs	r3, r3, #2
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	50e9      	str	r1, [r5, r3]
 800c0b4:	2900      	cmp	r1, #0
 800c0b6:	d002      	beq.n	800c0be <__lshift+0xba>
 800c0b8:	9b02      	ldr	r3, [sp, #8]
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	9804      	ldr	r0, [sp, #16]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	0021      	movs	r1, r4
 800c0c6:	6133      	str	r3, [r6, #16]
 800c0c8:	f7ff fd7e 	bl	800bbc8 <_Bfree>
 800c0cc:	0030      	movs	r0, r6
 800c0ce:	b007      	add	sp, #28
 800c0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0d2:	cb02      	ldmia	r3!, {r1}
 800c0d4:	c502      	stmia	r5!, {r1}
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d8fb      	bhi.n	800c0d2 <__lshift+0xce>
 800c0da:	e7f0      	b.n	800c0be <__lshift+0xba>
 800c0dc:	0800e1cc 	.word	0x0800e1cc
 800c0e0:	0800e25c 	.word	0x0800e25c

0800c0e4 <__mcmp>:
 800c0e4:	6902      	ldr	r2, [r0, #16]
 800c0e6:	690b      	ldr	r3, [r1, #16]
 800c0e8:	b530      	push	{r4, r5, lr}
 800c0ea:	0004      	movs	r4, r0
 800c0ec:	1ad0      	subs	r0, r2, r3
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d10d      	bne.n	800c10e <__mcmp+0x2a>
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	3414      	adds	r4, #20
 800c0f6:	3114      	adds	r1, #20
 800c0f8:	18e2      	adds	r2, r4, r3
 800c0fa:	18c9      	adds	r1, r1, r3
 800c0fc:	3a04      	subs	r2, #4
 800c0fe:	3904      	subs	r1, #4
 800c100:	6815      	ldr	r5, [r2, #0]
 800c102:	680b      	ldr	r3, [r1, #0]
 800c104:	429d      	cmp	r5, r3
 800c106:	d003      	beq.n	800c110 <__mcmp+0x2c>
 800c108:	2001      	movs	r0, #1
 800c10a:	429d      	cmp	r5, r3
 800c10c:	d303      	bcc.n	800c116 <__mcmp+0x32>
 800c10e:	bd30      	pop	{r4, r5, pc}
 800c110:	4294      	cmp	r4, r2
 800c112:	d3f3      	bcc.n	800c0fc <__mcmp+0x18>
 800c114:	e7fb      	b.n	800c10e <__mcmp+0x2a>
 800c116:	4240      	negs	r0, r0
 800c118:	e7f9      	b.n	800c10e <__mcmp+0x2a>
	...

0800c11c <__mdiff>:
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	000e      	movs	r6, r1
 800c120:	0007      	movs	r7, r0
 800c122:	0011      	movs	r1, r2
 800c124:	0030      	movs	r0, r6
 800c126:	b087      	sub	sp, #28
 800c128:	0014      	movs	r4, r2
 800c12a:	f7ff ffdb 	bl	800c0e4 <__mcmp>
 800c12e:	1e05      	subs	r5, r0, #0
 800c130:	d110      	bne.n	800c154 <__mdiff+0x38>
 800c132:	0001      	movs	r1, r0
 800c134:	0038      	movs	r0, r7
 800c136:	f7ff fd03 	bl	800bb40 <_Balloc>
 800c13a:	1e02      	subs	r2, r0, #0
 800c13c:	d104      	bne.n	800c148 <__mdiff+0x2c>
 800c13e:	4b40      	ldr	r3, [pc, #256]	; (800c240 <__mdiff+0x124>)
 800c140:	4940      	ldr	r1, [pc, #256]	; (800c244 <__mdiff+0x128>)
 800c142:	4841      	ldr	r0, [pc, #260]	; (800c248 <__mdiff+0x12c>)
 800c144:	f001 f86a 	bl	800d21c <__assert_func>
 800c148:	2301      	movs	r3, #1
 800c14a:	6145      	str	r5, [r0, #20]
 800c14c:	6103      	str	r3, [r0, #16]
 800c14e:	0010      	movs	r0, r2
 800c150:	b007      	add	sp, #28
 800c152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c154:	2301      	movs	r3, #1
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	2800      	cmp	r0, #0
 800c15a:	db04      	blt.n	800c166 <__mdiff+0x4a>
 800c15c:	0023      	movs	r3, r4
 800c15e:	0034      	movs	r4, r6
 800c160:	001e      	movs	r6, r3
 800c162:	2300      	movs	r3, #0
 800c164:	9301      	str	r3, [sp, #4]
 800c166:	0038      	movs	r0, r7
 800c168:	6861      	ldr	r1, [r4, #4]
 800c16a:	f7ff fce9 	bl	800bb40 <_Balloc>
 800c16e:	1e02      	subs	r2, r0, #0
 800c170:	d103      	bne.n	800c17a <__mdiff+0x5e>
 800c172:	2190      	movs	r1, #144	; 0x90
 800c174:	4b32      	ldr	r3, [pc, #200]	; (800c240 <__mdiff+0x124>)
 800c176:	0089      	lsls	r1, r1, #2
 800c178:	e7e3      	b.n	800c142 <__mdiff+0x26>
 800c17a:	9b01      	ldr	r3, [sp, #4]
 800c17c:	2700      	movs	r7, #0
 800c17e:	60c3      	str	r3, [r0, #12]
 800c180:	6920      	ldr	r0, [r4, #16]
 800c182:	3414      	adds	r4, #20
 800c184:	9401      	str	r4, [sp, #4]
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	0084      	lsls	r4, r0, #2
 800c18a:	191b      	adds	r3, r3, r4
 800c18c:	0034      	movs	r4, r6
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	6933      	ldr	r3, [r6, #16]
 800c192:	3414      	adds	r4, #20
 800c194:	0099      	lsls	r1, r3, #2
 800c196:	1863      	adds	r3, r4, r1
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	0013      	movs	r3, r2
 800c19c:	3314      	adds	r3, #20
 800c19e:	469c      	mov	ip, r3
 800c1a0:	9305      	str	r3, [sp, #20]
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	cc02      	ldmia	r4!, {r1}
 800c1aa:	cb20      	ldmia	r3!, {r5}
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	b2ab      	uxth	r3, r5
 800c1b0:	19df      	adds	r7, r3, r7
 800c1b2:	b28b      	uxth	r3, r1
 800c1b4:	1afb      	subs	r3, r7, r3
 800c1b6:	0c2d      	lsrs	r5, r5, #16
 800c1b8:	0c09      	lsrs	r1, r1, #16
 800c1ba:	1a69      	subs	r1, r5, r1
 800c1bc:	141d      	asrs	r5, r3, #16
 800c1be:	1949      	adds	r1, r1, r5
 800c1c0:	140f      	asrs	r7, r1, #16
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	0409      	lsls	r1, r1, #16
 800c1c6:	430b      	orrs	r3, r1
 800c1c8:	4661      	mov	r1, ip
 800c1ca:	c108      	stmia	r1!, {r3}
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	468c      	mov	ip, r1
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d8e8      	bhi.n	800c1a6 <__mdiff+0x8a>
 800c1d4:	0031      	movs	r1, r6
 800c1d6:	9c03      	ldr	r4, [sp, #12]
 800c1d8:	3115      	adds	r1, #21
 800c1da:	2304      	movs	r3, #4
 800c1dc:	428c      	cmp	r4, r1
 800c1de:	d304      	bcc.n	800c1ea <__mdiff+0xce>
 800c1e0:	1ba3      	subs	r3, r4, r6
 800c1e2:	3b15      	subs	r3, #21
 800c1e4:	089b      	lsrs	r3, r3, #2
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	9901      	ldr	r1, [sp, #4]
 800c1ec:	18cc      	adds	r4, r1, r3
 800c1ee:	9905      	ldr	r1, [sp, #20]
 800c1f0:	0026      	movs	r6, r4
 800c1f2:	18cb      	adds	r3, r1, r3
 800c1f4:	469c      	mov	ip, r3
 800c1f6:	9902      	ldr	r1, [sp, #8]
 800c1f8:	428e      	cmp	r6, r1
 800c1fa:	d310      	bcc.n	800c21e <__mdiff+0x102>
 800c1fc:	9e02      	ldr	r6, [sp, #8]
 800c1fe:	1ee5      	subs	r5, r4, #3
 800c200:	2100      	movs	r1, #0
 800c202:	42ae      	cmp	r6, r5
 800c204:	d304      	bcc.n	800c210 <__mdiff+0xf4>
 800c206:	0031      	movs	r1, r6
 800c208:	3103      	adds	r1, #3
 800c20a:	1b09      	subs	r1, r1, r4
 800c20c:	0889      	lsrs	r1, r1, #2
 800c20e:	0089      	lsls	r1, r1, #2
 800c210:	185b      	adds	r3, r3, r1
 800c212:	3b04      	subs	r3, #4
 800c214:	6819      	ldr	r1, [r3, #0]
 800c216:	2900      	cmp	r1, #0
 800c218:	d00f      	beq.n	800c23a <__mdiff+0x11e>
 800c21a:	6110      	str	r0, [r2, #16]
 800c21c:	e797      	b.n	800c14e <__mdiff+0x32>
 800c21e:	ce02      	ldmia	r6!, {r1}
 800c220:	b28d      	uxth	r5, r1
 800c222:	19ed      	adds	r5, r5, r7
 800c224:	0c0f      	lsrs	r7, r1, #16
 800c226:	1429      	asrs	r1, r5, #16
 800c228:	1879      	adds	r1, r7, r1
 800c22a:	140f      	asrs	r7, r1, #16
 800c22c:	b2ad      	uxth	r5, r5
 800c22e:	0409      	lsls	r1, r1, #16
 800c230:	430d      	orrs	r5, r1
 800c232:	4661      	mov	r1, ip
 800c234:	c120      	stmia	r1!, {r5}
 800c236:	468c      	mov	ip, r1
 800c238:	e7dd      	b.n	800c1f6 <__mdiff+0xda>
 800c23a:	3801      	subs	r0, #1
 800c23c:	e7e9      	b.n	800c212 <__mdiff+0xf6>
 800c23e:	46c0      	nop			; (mov r8, r8)
 800c240:	0800e1cc 	.word	0x0800e1cc
 800c244:	00000232 	.word	0x00000232
 800c248:	0800e25c 	.word	0x0800e25c

0800c24c <__ulp>:
 800c24c:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <__ulp+0x40>)
 800c24e:	4019      	ands	r1, r3
 800c250:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <__ulp+0x44>)
 800c252:	18c9      	adds	r1, r1, r3
 800c254:	2900      	cmp	r1, #0
 800c256:	dd04      	ble.n	800c262 <__ulp+0x16>
 800c258:	2200      	movs	r2, #0
 800c25a:	000b      	movs	r3, r1
 800c25c:	0010      	movs	r0, r2
 800c25e:	0019      	movs	r1, r3
 800c260:	4770      	bx	lr
 800c262:	4249      	negs	r1, r1
 800c264:	2200      	movs	r2, #0
 800c266:	2300      	movs	r3, #0
 800c268:	1509      	asrs	r1, r1, #20
 800c26a:	2913      	cmp	r1, #19
 800c26c:	dc04      	bgt.n	800c278 <__ulp+0x2c>
 800c26e:	2080      	movs	r0, #128	; 0x80
 800c270:	0300      	lsls	r0, r0, #12
 800c272:	4108      	asrs	r0, r1
 800c274:	0003      	movs	r3, r0
 800c276:	e7f1      	b.n	800c25c <__ulp+0x10>
 800c278:	3914      	subs	r1, #20
 800c27a:	2001      	movs	r0, #1
 800c27c:	291e      	cmp	r1, #30
 800c27e:	dc02      	bgt.n	800c286 <__ulp+0x3a>
 800c280:	2080      	movs	r0, #128	; 0x80
 800c282:	0600      	lsls	r0, r0, #24
 800c284:	40c8      	lsrs	r0, r1
 800c286:	0002      	movs	r2, r0
 800c288:	e7e8      	b.n	800c25c <__ulp+0x10>
 800c28a:	46c0      	nop			; (mov r8, r8)
 800c28c:	7ff00000 	.word	0x7ff00000
 800c290:	fcc00000 	.word	0xfcc00000

0800c294 <__b2d>:
 800c294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c296:	0006      	movs	r6, r0
 800c298:	6903      	ldr	r3, [r0, #16]
 800c29a:	3614      	adds	r6, #20
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	18f3      	adds	r3, r6, r3
 800c2a0:	1f1d      	subs	r5, r3, #4
 800c2a2:	682c      	ldr	r4, [r5, #0]
 800c2a4:	000f      	movs	r7, r1
 800c2a6:	0020      	movs	r0, r4
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	f7ff fd41 	bl	800bd30 <__hi0bits>
 800c2ae:	2320      	movs	r3, #32
 800c2b0:	1a1b      	subs	r3, r3, r0
 800c2b2:	491f      	ldr	r1, [pc, #124]	; (800c330 <__b2d+0x9c>)
 800c2b4:	603b      	str	r3, [r7, #0]
 800c2b6:	280a      	cmp	r0, #10
 800c2b8:	dc16      	bgt.n	800c2e8 <__b2d+0x54>
 800c2ba:	230b      	movs	r3, #11
 800c2bc:	0027      	movs	r7, r4
 800c2be:	1a1b      	subs	r3, r3, r0
 800c2c0:	40df      	lsrs	r7, r3
 800c2c2:	4339      	orrs	r1, r7
 800c2c4:	469c      	mov	ip, r3
 800c2c6:	000b      	movs	r3, r1
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	42ae      	cmp	r6, r5
 800c2cc:	d202      	bcs.n	800c2d4 <__b2d+0x40>
 800c2ce:	9901      	ldr	r1, [sp, #4]
 800c2d0:	3908      	subs	r1, #8
 800c2d2:	6809      	ldr	r1, [r1, #0]
 800c2d4:	3015      	adds	r0, #21
 800c2d6:	4084      	lsls	r4, r0
 800c2d8:	4660      	mov	r0, ip
 800c2da:	40c1      	lsrs	r1, r0
 800c2dc:	430c      	orrs	r4, r1
 800c2de:	0022      	movs	r2, r4
 800c2e0:	0010      	movs	r0, r2
 800c2e2:	0019      	movs	r1, r3
 800c2e4:	b003      	add	sp, #12
 800c2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e8:	2700      	movs	r7, #0
 800c2ea:	42ae      	cmp	r6, r5
 800c2ec:	d202      	bcs.n	800c2f4 <__b2d+0x60>
 800c2ee:	9d01      	ldr	r5, [sp, #4]
 800c2f0:	3d08      	subs	r5, #8
 800c2f2:	682f      	ldr	r7, [r5, #0]
 800c2f4:	230b      	movs	r3, #11
 800c2f6:	425b      	negs	r3, r3
 800c2f8:	469c      	mov	ip, r3
 800c2fa:	4484      	add	ip, r0
 800c2fc:	280b      	cmp	r0, #11
 800c2fe:	d013      	beq.n	800c328 <__b2d+0x94>
 800c300:	4663      	mov	r3, ip
 800c302:	2020      	movs	r0, #32
 800c304:	409c      	lsls	r4, r3
 800c306:	1ac0      	subs	r0, r0, r3
 800c308:	003b      	movs	r3, r7
 800c30a:	40c3      	lsrs	r3, r0
 800c30c:	431c      	orrs	r4, r3
 800c30e:	4321      	orrs	r1, r4
 800c310:	000b      	movs	r3, r1
 800c312:	2100      	movs	r1, #0
 800c314:	42b5      	cmp	r5, r6
 800c316:	d901      	bls.n	800c31c <__b2d+0x88>
 800c318:	3d04      	subs	r5, #4
 800c31a:	6829      	ldr	r1, [r5, #0]
 800c31c:	4664      	mov	r4, ip
 800c31e:	40c1      	lsrs	r1, r0
 800c320:	40a7      	lsls	r7, r4
 800c322:	430f      	orrs	r7, r1
 800c324:	003a      	movs	r2, r7
 800c326:	e7db      	b.n	800c2e0 <__b2d+0x4c>
 800c328:	4321      	orrs	r1, r4
 800c32a:	000b      	movs	r3, r1
 800c32c:	e7fa      	b.n	800c324 <__b2d+0x90>
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	3ff00000 	.word	0x3ff00000

0800c334 <__d2b>:
 800c334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c336:	2101      	movs	r1, #1
 800c338:	0014      	movs	r4, r2
 800c33a:	001e      	movs	r6, r3
 800c33c:	9f08      	ldr	r7, [sp, #32]
 800c33e:	f7ff fbff 	bl	800bb40 <_Balloc>
 800c342:	1e05      	subs	r5, r0, #0
 800c344:	d105      	bne.n	800c352 <__d2b+0x1e>
 800c346:	0002      	movs	r2, r0
 800c348:	4b26      	ldr	r3, [pc, #152]	; (800c3e4 <__d2b+0xb0>)
 800c34a:	4927      	ldr	r1, [pc, #156]	; (800c3e8 <__d2b+0xb4>)
 800c34c:	4827      	ldr	r0, [pc, #156]	; (800c3ec <__d2b+0xb8>)
 800c34e:	f000 ff65 	bl	800d21c <__assert_func>
 800c352:	0333      	lsls	r3, r6, #12
 800c354:	0076      	lsls	r6, r6, #1
 800c356:	0b1b      	lsrs	r3, r3, #12
 800c358:	0d76      	lsrs	r6, r6, #21
 800c35a:	d124      	bne.n	800c3a6 <__d2b+0x72>
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	2c00      	cmp	r4, #0
 800c360:	d027      	beq.n	800c3b2 <__d2b+0x7e>
 800c362:	4668      	mov	r0, sp
 800c364:	9400      	str	r4, [sp, #0]
 800c366:	f7ff fcfd 	bl	800bd64 <__lo0bits>
 800c36a:	9c00      	ldr	r4, [sp, #0]
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d01e      	beq.n	800c3ae <__d2b+0x7a>
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	2120      	movs	r1, #32
 800c374:	001a      	movs	r2, r3
 800c376:	1a09      	subs	r1, r1, r0
 800c378:	408a      	lsls	r2, r1
 800c37a:	40c3      	lsrs	r3, r0
 800c37c:	4322      	orrs	r2, r4
 800c37e:	616a      	str	r2, [r5, #20]
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	9c01      	ldr	r4, [sp, #4]
 800c384:	61ac      	str	r4, [r5, #24]
 800c386:	1e63      	subs	r3, r4, #1
 800c388:	419c      	sbcs	r4, r3
 800c38a:	3401      	adds	r4, #1
 800c38c:	612c      	str	r4, [r5, #16]
 800c38e:	2e00      	cmp	r6, #0
 800c390:	d018      	beq.n	800c3c4 <__d2b+0x90>
 800c392:	4b17      	ldr	r3, [pc, #92]	; (800c3f0 <__d2b+0xbc>)
 800c394:	18f6      	adds	r6, r6, r3
 800c396:	2335      	movs	r3, #53	; 0x35
 800c398:	1836      	adds	r6, r6, r0
 800c39a:	1a18      	subs	r0, r3, r0
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	603e      	str	r6, [r7, #0]
 800c3a0:	6018      	str	r0, [r3, #0]
 800c3a2:	0028      	movs	r0, r5
 800c3a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3a6:	2280      	movs	r2, #128	; 0x80
 800c3a8:	0352      	lsls	r2, r2, #13
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	e7d6      	b.n	800c35c <__d2b+0x28>
 800c3ae:	616c      	str	r4, [r5, #20]
 800c3b0:	e7e7      	b.n	800c382 <__d2b+0x4e>
 800c3b2:	a801      	add	r0, sp, #4
 800c3b4:	f7ff fcd6 	bl	800bd64 <__lo0bits>
 800c3b8:	2401      	movs	r4, #1
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	612c      	str	r4, [r5, #16]
 800c3be:	616b      	str	r3, [r5, #20]
 800c3c0:	3020      	adds	r0, #32
 800c3c2:	e7e4      	b.n	800c38e <__d2b+0x5a>
 800c3c4:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <__d2b+0xc0>)
 800c3c6:	18c0      	adds	r0, r0, r3
 800c3c8:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <__d2b+0xc4>)
 800c3ca:	6038      	str	r0, [r7, #0]
 800c3cc:	18e3      	adds	r3, r4, r3
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	18eb      	adds	r3, r5, r3
 800c3d2:	6958      	ldr	r0, [r3, #20]
 800c3d4:	f7ff fcac 	bl	800bd30 <__hi0bits>
 800c3d8:	0164      	lsls	r4, r4, #5
 800c3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3dc:	1a24      	subs	r4, r4, r0
 800c3de:	601c      	str	r4, [r3, #0]
 800c3e0:	e7df      	b.n	800c3a2 <__d2b+0x6e>
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	0800e1cc 	.word	0x0800e1cc
 800c3e8:	0000030a 	.word	0x0000030a
 800c3ec:	0800e25c 	.word	0x0800e25c
 800c3f0:	fffffbcd 	.word	0xfffffbcd
 800c3f4:	fffffbce 	.word	0xfffffbce
 800c3f8:	3fffffff 	.word	0x3fffffff

0800c3fc <__ratio>:
 800c3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3fe:	b085      	sub	sp, #20
 800c400:	000d      	movs	r5, r1
 800c402:	a902      	add	r1, sp, #8
 800c404:	0004      	movs	r4, r0
 800c406:	f7ff ff45 	bl	800c294 <__b2d>
 800c40a:	9000      	str	r0, [sp, #0]
 800c40c:	9101      	str	r1, [sp, #4]
 800c40e:	9e00      	ldr	r6, [sp, #0]
 800c410:	9f01      	ldr	r7, [sp, #4]
 800c412:	0028      	movs	r0, r5
 800c414:	a903      	add	r1, sp, #12
 800c416:	f7ff ff3d 	bl	800c294 <__b2d>
 800c41a:	6924      	ldr	r4, [r4, #16]
 800c41c:	692d      	ldr	r5, [r5, #16]
 800c41e:	0002      	movs	r2, r0
 800c420:	1b65      	subs	r5, r4, r5
 800c422:	016c      	lsls	r4, r5, #5
 800c424:	46a4      	mov	ip, r4
 800c426:	9d03      	ldr	r5, [sp, #12]
 800c428:	9c02      	ldr	r4, [sp, #8]
 800c42a:	000b      	movs	r3, r1
 800c42c:	1b64      	subs	r4, r4, r5
 800c42e:	4464      	add	r4, ip
 800c430:	0525      	lsls	r5, r4, #20
 800c432:	2c00      	cmp	r4, #0
 800c434:	dd07      	ble.n	800c446 <__ratio+0x4a>
 800c436:	9901      	ldr	r1, [sp, #4]
 800c438:	186f      	adds	r7, r5, r1
 800c43a:	0030      	movs	r0, r6
 800c43c:	0039      	movs	r1, r7
 800c43e:	f7f4 fc17 	bl	8000c70 <__aeabi_ddiv>
 800c442:	b005      	add	sp, #20
 800c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c446:	1b4b      	subs	r3, r1, r5
 800c448:	e7f7      	b.n	800c43a <__ratio+0x3e>

0800c44a <__copybits>:
 800c44a:	b570      	push	{r4, r5, r6, lr}
 800c44c:	0015      	movs	r5, r2
 800c44e:	6913      	ldr	r3, [r2, #16]
 800c450:	3514      	adds	r5, #20
 800c452:	009c      	lsls	r4, r3, #2
 800c454:	0006      	movs	r6, r0
 800c456:	002b      	movs	r3, r5
 800c458:	3901      	subs	r1, #1
 800c45a:	1149      	asrs	r1, r1, #5
 800c45c:	3101      	adds	r1, #1
 800c45e:	0089      	lsls	r1, r1, #2
 800c460:	1841      	adds	r1, r0, r1
 800c462:	192c      	adds	r4, r5, r4
 800c464:	429c      	cmp	r4, r3
 800c466:	d80d      	bhi.n	800c484 <__copybits+0x3a>
 800c468:	0015      	movs	r5, r2
 800c46a:	3511      	adds	r5, #17
 800c46c:	2300      	movs	r3, #0
 800c46e:	42a5      	cmp	r5, r4
 800c470:	d803      	bhi.n	800c47a <__copybits+0x30>
 800c472:	1aa3      	subs	r3, r4, r2
 800c474:	3b11      	subs	r3, #17
 800c476:	089b      	lsrs	r3, r3, #2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	18c0      	adds	r0, r0, r3
 800c47c:	2300      	movs	r3, #0
 800c47e:	4281      	cmp	r1, r0
 800c480:	d803      	bhi.n	800c48a <__copybits+0x40>
 800c482:	bd70      	pop	{r4, r5, r6, pc}
 800c484:	cb20      	ldmia	r3!, {r5}
 800c486:	c620      	stmia	r6!, {r5}
 800c488:	e7ec      	b.n	800c464 <__copybits+0x1a>
 800c48a:	c008      	stmia	r0!, {r3}
 800c48c:	e7f7      	b.n	800c47e <__copybits+0x34>

0800c48e <__any_on>:
 800c48e:	0002      	movs	r2, r0
 800c490:	6900      	ldr	r0, [r0, #16]
 800c492:	b510      	push	{r4, lr}
 800c494:	3214      	adds	r2, #20
 800c496:	114b      	asrs	r3, r1, #5
 800c498:	4298      	cmp	r0, r3
 800c49a:	db13      	blt.n	800c4c4 <__any_on+0x36>
 800c49c:	dd0c      	ble.n	800c4b8 <__any_on+0x2a>
 800c49e:	241f      	movs	r4, #31
 800c4a0:	0008      	movs	r0, r1
 800c4a2:	4020      	ands	r0, r4
 800c4a4:	4221      	tst	r1, r4
 800c4a6:	d007      	beq.n	800c4b8 <__any_on+0x2a>
 800c4a8:	0099      	lsls	r1, r3, #2
 800c4aa:	588c      	ldr	r4, [r1, r2]
 800c4ac:	0021      	movs	r1, r4
 800c4ae:	40c1      	lsrs	r1, r0
 800c4b0:	4081      	lsls	r1, r0
 800c4b2:	2001      	movs	r0, #1
 800c4b4:	428c      	cmp	r4, r1
 800c4b6:	d104      	bne.n	800c4c2 <__any_on+0x34>
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	18d3      	adds	r3, r2, r3
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d803      	bhi.n	800c4c8 <__any_on+0x3a>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	bd10      	pop	{r4, pc}
 800c4c4:	0003      	movs	r3, r0
 800c4c6:	e7f7      	b.n	800c4b8 <__any_on+0x2a>
 800c4c8:	3b04      	subs	r3, #4
 800c4ca:	6819      	ldr	r1, [r3, #0]
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	d0f5      	beq.n	800c4bc <__any_on+0x2e>
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	e7f6      	b.n	800c4c2 <__any_on+0x34>

0800c4d4 <_calloc_r>:
 800c4d4:	434a      	muls	r2, r1
 800c4d6:	b570      	push	{r4, r5, r6, lr}
 800c4d8:	0011      	movs	r1, r2
 800c4da:	0015      	movs	r5, r2
 800c4dc:	f000 f852 	bl	800c584 <_malloc_r>
 800c4e0:	1e04      	subs	r4, r0, #0
 800c4e2:	d003      	beq.n	800c4ec <_calloc_r+0x18>
 800c4e4:	002a      	movs	r2, r5
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	f7fc fa9e 	bl	8008a28 <memset>
 800c4ec:	0020      	movs	r0, r4
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}

0800c4f0 <_free_r>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	0005      	movs	r5, r0
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	d010      	beq.n	800c51a <_free_r+0x2a>
 800c4f8:	1f0c      	subs	r4, r1, #4
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	da00      	bge.n	800c502 <_free_r+0x12>
 800c500:	18e4      	adds	r4, r4, r3
 800c502:	0028      	movs	r0, r5
 800c504:	f001 f89c 	bl	800d640 <__malloc_lock>
 800c508:	4a1d      	ldr	r2, [pc, #116]	; (800c580 <_free_r+0x90>)
 800c50a:	6813      	ldr	r3, [r2, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d105      	bne.n	800c51c <_free_r+0x2c>
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	6014      	str	r4, [r2, #0]
 800c514:	0028      	movs	r0, r5
 800c516:	f001 f89b 	bl	800d650 <__malloc_unlock>
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	42a3      	cmp	r3, r4
 800c51e:	d908      	bls.n	800c532 <_free_r+0x42>
 800c520:	6821      	ldr	r1, [r4, #0]
 800c522:	1860      	adds	r0, r4, r1
 800c524:	4283      	cmp	r3, r0
 800c526:	d1f3      	bne.n	800c510 <_free_r+0x20>
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	1841      	adds	r1, r0, r1
 800c52e:	6021      	str	r1, [r4, #0]
 800c530:	e7ee      	b.n	800c510 <_free_r+0x20>
 800c532:	001a      	movs	r2, r3
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <_free_r+0x4e>
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	d9f9      	bls.n	800c532 <_free_r+0x42>
 800c53e:	6811      	ldr	r1, [r2, #0]
 800c540:	1850      	adds	r0, r2, r1
 800c542:	42a0      	cmp	r0, r4
 800c544:	d10b      	bne.n	800c55e <_free_r+0x6e>
 800c546:	6820      	ldr	r0, [r4, #0]
 800c548:	1809      	adds	r1, r1, r0
 800c54a:	1850      	adds	r0, r2, r1
 800c54c:	6011      	str	r1, [r2, #0]
 800c54e:	4283      	cmp	r3, r0
 800c550:	d1e0      	bne.n	800c514 <_free_r+0x24>
 800c552:	6818      	ldr	r0, [r3, #0]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	1841      	adds	r1, r0, r1
 800c558:	6011      	str	r1, [r2, #0]
 800c55a:	6053      	str	r3, [r2, #4]
 800c55c:	e7da      	b.n	800c514 <_free_r+0x24>
 800c55e:	42a0      	cmp	r0, r4
 800c560:	d902      	bls.n	800c568 <_free_r+0x78>
 800c562:	230c      	movs	r3, #12
 800c564:	602b      	str	r3, [r5, #0]
 800c566:	e7d5      	b.n	800c514 <_free_r+0x24>
 800c568:	6821      	ldr	r1, [r4, #0]
 800c56a:	1860      	adds	r0, r4, r1
 800c56c:	4283      	cmp	r3, r0
 800c56e:	d103      	bne.n	800c578 <_free_r+0x88>
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	1841      	adds	r1, r0, r1
 800c576:	6021      	str	r1, [r4, #0]
 800c578:	6063      	str	r3, [r4, #4]
 800c57a:	6054      	str	r4, [r2, #4]
 800c57c:	e7ca      	b.n	800c514 <_free_r+0x24>
 800c57e:	46c0      	nop			; (mov r8, r8)
 800c580:	200003d4 	.word	0x200003d4

0800c584 <_malloc_r>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	2303      	movs	r3, #3
 800c588:	1ccd      	adds	r5, r1, #3
 800c58a:	439d      	bics	r5, r3
 800c58c:	3508      	adds	r5, #8
 800c58e:	0006      	movs	r6, r0
 800c590:	2d0c      	cmp	r5, #12
 800c592:	d21f      	bcs.n	800c5d4 <_malloc_r+0x50>
 800c594:	250c      	movs	r5, #12
 800c596:	42a9      	cmp	r1, r5
 800c598:	d81e      	bhi.n	800c5d8 <_malloc_r+0x54>
 800c59a:	0030      	movs	r0, r6
 800c59c:	f001 f850 	bl	800d640 <__malloc_lock>
 800c5a0:	4925      	ldr	r1, [pc, #148]	; (800c638 <_malloc_r+0xb4>)
 800c5a2:	680a      	ldr	r2, [r1, #0]
 800c5a4:	0014      	movs	r4, r2
 800c5a6:	2c00      	cmp	r4, #0
 800c5a8:	d11a      	bne.n	800c5e0 <_malloc_r+0x5c>
 800c5aa:	4f24      	ldr	r7, [pc, #144]	; (800c63c <_malloc_r+0xb8>)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <_malloc_r+0x38>
 800c5b2:	0021      	movs	r1, r4
 800c5b4:	0030      	movs	r0, r6
 800c5b6:	f000 fcf5 	bl	800cfa4 <_sbrk_r>
 800c5ba:	6038      	str	r0, [r7, #0]
 800c5bc:	0029      	movs	r1, r5
 800c5be:	0030      	movs	r0, r6
 800c5c0:	f000 fcf0 	bl	800cfa4 <_sbrk_r>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d12b      	bne.n	800c620 <_malloc_r+0x9c>
 800c5c8:	230c      	movs	r3, #12
 800c5ca:	0030      	movs	r0, r6
 800c5cc:	6033      	str	r3, [r6, #0]
 800c5ce:	f001 f83f 	bl	800d650 <__malloc_unlock>
 800c5d2:	e003      	b.n	800c5dc <_malloc_r+0x58>
 800c5d4:	2d00      	cmp	r5, #0
 800c5d6:	dade      	bge.n	800c596 <_malloc_r+0x12>
 800c5d8:	230c      	movs	r3, #12
 800c5da:	6033      	str	r3, [r6, #0]
 800c5dc:	2000      	movs	r0, #0
 800c5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	1b5b      	subs	r3, r3, r5
 800c5e4:	d419      	bmi.n	800c61a <_malloc_r+0x96>
 800c5e6:	2b0b      	cmp	r3, #11
 800c5e8:	d903      	bls.n	800c5f2 <_malloc_r+0x6e>
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	18e4      	adds	r4, r4, r3
 800c5ee:	6025      	str	r5, [r4, #0]
 800c5f0:	e003      	b.n	800c5fa <_malloc_r+0x76>
 800c5f2:	6863      	ldr	r3, [r4, #4]
 800c5f4:	42a2      	cmp	r2, r4
 800c5f6:	d10e      	bne.n	800c616 <_malloc_r+0x92>
 800c5f8:	600b      	str	r3, [r1, #0]
 800c5fa:	0030      	movs	r0, r6
 800c5fc:	f001 f828 	bl	800d650 <__malloc_unlock>
 800c600:	0020      	movs	r0, r4
 800c602:	2207      	movs	r2, #7
 800c604:	300b      	adds	r0, #11
 800c606:	1d23      	adds	r3, r4, #4
 800c608:	4390      	bics	r0, r2
 800c60a:	1ac2      	subs	r2, r0, r3
 800c60c:	4298      	cmp	r0, r3
 800c60e:	d0e6      	beq.n	800c5de <_malloc_r+0x5a>
 800c610:	1a1b      	subs	r3, r3, r0
 800c612:	50a3      	str	r3, [r4, r2]
 800c614:	e7e3      	b.n	800c5de <_malloc_r+0x5a>
 800c616:	6053      	str	r3, [r2, #4]
 800c618:	e7ef      	b.n	800c5fa <_malloc_r+0x76>
 800c61a:	0022      	movs	r2, r4
 800c61c:	6864      	ldr	r4, [r4, #4]
 800c61e:	e7c2      	b.n	800c5a6 <_malloc_r+0x22>
 800c620:	2303      	movs	r3, #3
 800c622:	1cc4      	adds	r4, r0, #3
 800c624:	439c      	bics	r4, r3
 800c626:	42a0      	cmp	r0, r4
 800c628:	d0e1      	beq.n	800c5ee <_malloc_r+0x6a>
 800c62a:	1a21      	subs	r1, r4, r0
 800c62c:	0030      	movs	r0, r6
 800c62e:	f000 fcb9 	bl	800cfa4 <_sbrk_r>
 800c632:	1c43      	adds	r3, r0, #1
 800c634:	d1db      	bne.n	800c5ee <_malloc_r+0x6a>
 800c636:	e7c7      	b.n	800c5c8 <_malloc_r+0x44>
 800c638:	200003d4 	.word	0x200003d4
 800c63c:	200003d8 	.word	0x200003d8

0800c640 <__ssputs_r>:
 800c640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c642:	688e      	ldr	r6, [r1, #8]
 800c644:	b085      	sub	sp, #20
 800c646:	0007      	movs	r7, r0
 800c648:	000c      	movs	r4, r1
 800c64a:	9203      	str	r2, [sp, #12]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	429e      	cmp	r6, r3
 800c650:	d83c      	bhi.n	800c6cc <__ssputs_r+0x8c>
 800c652:	2390      	movs	r3, #144	; 0x90
 800c654:	898a      	ldrh	r2, [r1, #12]
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	421a      	tst	r2, r3
 800c65a:	d034      	beq.n	800c6c6 <__ssputs_r+0x86>
 800c65c:	2503      	movs	r5, #3
 800c65e:	6909      	ldr	r1, [r1, #16]
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	1a5b      	subs	r3, r3, r1
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	6963      	ldr	r3, [r4, #20]
 800c668:	9802      	ldr	r0, [sp, #8]
 800c66a:	435d      	muls	r5, r3
 800c66c:	0feb      	lsrs	r3, r5, #31
 800c66e:	195d      	adds	r5, r3, r5
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	106d      	asrs	r5, r5, #1
 800c674:	3301      	adds	r3, #1
 800c676:	181b      	adds	r3, r3, r0
 800c678:	42ab      	cmp	r3, r5
 800c67a:	d900      	bls.n	800c67e <__ssputs_r+0x3e>
 800c67c:	001d      	movs	r5, r3
 800c67e:	0553      	lsls	r3, r2, #21
 800c680:	d532      	bpl.n	800c6e8 <__ssputs_r+0xa8>
 800c682:	0029      	movs	r1, r5
 800c684:	0038      	movs	r0, r7
 800c686:	f7ff ff7d 	bl	800c584 <_malloc_r>
 800c68a:	1e06      	subs	r6, r0, #0
 800c68c:	d109      	bne.n	800c6a2 <__ssputs_r+0x62>
 800c68e:	230c      	movs	r3, #12
 800c690:	603b      	str	r3, [r7, #0]
 800c692:	2340      	movs	r3, #64	; 0x40
 800c694:	2001      	movs	r0, #1
 800c696:	89a2      	ldrh	r2, [r4, #12]
 800c698:	4240      	negs	r0, r0
 800c69a:	4313      	orrs	r3, r2
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	b005      	add	sp, #20
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a2:	9a02      	ldr	r2, [sp, #8]
 800c6a4:	6921      	ldr	r1, [r4, #16]
 800c6a6:	f7ff fa42 	bl	800bb2e <memcpy>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	4a14      	ldr	r2, [pc, #80]	; (800c700 <__ssputs_r+0xc0>)
 800c6ae:	401a      	ands	r2, r3
 800c6b0:	2380      	movs	r3, #128	; 0x80
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	9b02      	ldr	r3, [sp, #8]
 800c6b8:	6126      	str	r6, [r4, #16]
 800c6ba:	18f6      	adds	r6, r6, r3
 800c6bc:	6026      	str	r6, [r4, #0]
 800c6be:	6165      	str	r5, [r4, #20]
 800c6c0:	9e01      	ldr	r6, [sp, #4]
 800c6c2:	1aed      	subs	r5, r5, r3
 800c6c4:	60a5      	str	r5, [r4, #8]
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	429e      	cmp	r6, r3
 800c6ca:	d900      	bls.n	800c6ce <__ssputs_r+0x8e>
 800c6cc:	9e01      	ldr	r6, [sp, #4]
 800c6ce:	0032      	movs	r2, r6
 800c6d0:	9903      	ldr	r1, [sp, #12]
 800c6d2:	6820      	ldr	r0, [r4, #0]
 800c6d4:	f000 ffa1 	bl	800d61a <memmove>
 800c6d8:	68a3      	ldr	r3, [r4, #8]
 800c6da:	2000      	movs	r0, #0
 800c6dc:	1b9b      	subs	r3, r3, r6
 800c6de:	60a3      	str	r3, [r4, #8]
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	199e      	adds	r6, r3, r6
 800c6e4:	6026      	str	r6, [r4, #0]
 800c6e6:	e7da      	b.n	800c69e <__ssputs_r+0x5e>
 800c6e8:	002a      	movs	r2, r5
 800c6ea:	0038      	movs	r0, r7
 800c6ec:	f000 ffb8 	bl	800d660 <_realloc_r>
 800c6f0:	1e06      	subs	r6, r0, #0
 800c6f2:	d1e0      	bne.n	800c6b6 <__ssputs_r+0x76>
 800c6f4:	0038      	movs	r0, r7
 800c6f6:	6921      	ldr	r1, [r4, #16]
 800c6f8:	f7ff fefa 	bl	800c4f0 <_free_r>
 800c6fc:	e7c7      	b.n	800c68e <__ssputs_r+0x4e>
 800c6fe:	46c0      	nop			; (mov r8, r8)
 800c700:	fffffb7f 	.word	0xfffffb7f

0800c704 <_svfiprintf_r>:
 800c704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c706:	b0a1      	sub	sp, #132	; 0x84
 800c708:	9003      	str	r0, [sp, #12]
 800c70a:	001d      	movs	r5, r3
 800c70c:	898b      	ldrh	r3, [r1, #12]
 800c70e:	000f      	movs	r7, r1
 800c710:	0016      	movs	r6, r2
 800c712:	061b      	lsls	r3, r3, #24
 800c714:	d511      	bpl.n	800c73a <_svfiprintf_r+0x36>
 800c716:	690b      	ldr	r3, [r1, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10e      	bne.n	800c73a <_svfiprintf_r+0x36>
 800c71c:	2140      	movs	r1, #64	; 0x40
 800c71e:	f7ff ff31 	bl	800c584 <_malloc_r>
 800c722:	6038      	str	r0, [r7, #0]
 800c724:	6138      	str	r0, [r7, #16]
 800c726:	2800      	cmp	r0, #0
 800c728:	d105      	bne.n	800c736 <_svfiprintf_r+0x32>
 800c72a:	230c      	movs	r3, #12
 800c72c:	9a03      	ldr	r2, [sp, #12]
 800c72e:	3801      	subs	r0, #1
 800c730:	6013      	str	r3, [r2, #0]
 800c732:	b021      	add	sp, #132	; 0x84
 800c734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c736:	2340      	movs	r3, #64	; 0x40
 800c738:	617b      	str	r3, [r7, #20]
 800c73a:	2300      	movs	r3, #0
 800c73c:	ac08      	add	r4, sp, #32
 800c73e:	6163      	str	r3, [r4, #20]
 800c740:	3320      	adds	r3, #32
 800c742:	7663      	strb	r3, [r4, #25]
 800c744:	3310      	adds	r3, #16
 800c746:	76a3      	strb	r3, [r4, #26]
 800c748:	9507      	str	r5, [sp, #28]
 800c74a:	0035      	movs	r5, r6
 800c74c:	782b      	ldrb	r3, [r5, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <_svfiprintf_r+0x52>
 800c752:	2b25      	cmp	r3, #37	; 0x25
 800c754:	d147      	bne.n	800c7e6 <_svfiprintf_r+0xe2>
 800c756:	1bab      	subs	r3, r5, r6
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	42b5      	cmp	r5, r6
 800c75c:	d00c      	beq.n	800c778 <_svfiprintf_r+0x74>
 800c75e:	0032      	movs	r2, r6
 800c760:	0039      	movs	r1, r7
 800c762:	9803      	ldr	r0, [sp, #12]
 800c764:	f7ff ff6c 	bl	800c640 <__ssputs_r>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d100      	bne.n	800c76e <_svfiprintf_r+0x6a>
 800c76c:	e0ae      	b.n	800c8cc <_svfiprintf_r+0x1c8>
 800c76e:	6962      	ldr	r2, [r4, #20]
 800c770:	9b05      	ldr	r3, [sp, #20]
 800c772:	4694      	mov	ip, r2
 800c774:	4463      	add	r3, ip
 800c776:	6163      	str	r3, [r4, #20]
 800c778:	782b      	ldrb	r3, [r5, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d100      	bne.n	800c780 <_svfiprintf_r+0x7c>
 800c77e:	e0a5      	b.n	800c8cc <_svfiprintf_r+0x1c8>
 800c780:	2201      	movs	r2, #1
 800c782:	2300      	movs	r3, #0
 800c784:	4252      	negs	r2, r2
 800c786:	6062      	str	r2, [r4, #4]
 800c788:	a904      	add	r1, sp, #16
 800c78a:	3254      	adds	r2, #84	; 0x54
 800c78c:	1852      	adds	r2, r2, r1
 800c78e:	1c6e      	adds	r6, r5, #1
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	60e3      	str	r3, [r4, #12]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	7013      	strb	r3, [r2, #0]
 800c798:	65a3      	str	r3, [r4, #88]	; 0x58
 800c79a:	2205      	movs	r2, #5
 800c79c:	7831      	ldrb	r1, [r6, #0]
 800c79e:	4854      	ldr	r0, [pc, #336]	; (800c8f0 <_svfiprintf_r+0x1ec>)
 800c7a0:	f7ff f9ba 	bl	800bb18 <memchr>
 800c7a4:	1c75      	adds	r5, r6, #1
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d11f      	bne.n	800c7ea <_svfiprintf_r+0xe6>
 800c7aa:	6822      	ldr	r2, [r4, #0]
 800c7ac:	06d3      	lsls	r3, r2, #27
 800c7ae:	d504      	bpl.n	800c7ba <_svfiprintf_r+0xb6>
 800c7b0:	2353      	movs	r3, #83	; 0x53
 800c7b2:	a904      	add	r1, sp, #16
 800c7b4:	185b      	adds	r3, r3, r1
 800c7b6:	2120      	movs	r1, #32
 800c7b8:	7019      	strb	r1, [r3, #0]
 800c7ba:	0713      	lsls	r3, r2, #28
 800c7bc:	d504      	bpl.n	800c7c8 <_svfiprintf_r+0xc4>
 800c7be:	2353      	movs	r3, #83	; 0x53
 800c7c0:	a904      	add	r1, sp, #16
 800c7c2:	185b      	adds	r3, r3, r1
 800c7c4:	212b      	movs	r1, #43	; 0x2b
 800c7c6:	7019      	strb	r1, [r3, #0]
 800c7c8:	7833      	ldrb	r3, [r6, #0]
 800c7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c7cc:	d016      	beq.n	800c7fc <_svfiprintf_r+0xf8>
 800c7ce:	0035      	movs	r5, r6
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	200a      	movs	r0, #10
 800c7d4:	68e3      	ldr	r3, [r4, #12]
 800c7d6:	782a      	ldrb	r2, [r5, #0]
 800c7d8:	1c6e      	adds	r6, r5, #1
 800c7da:	3a30      	subs	r2, #48	; 0x30
 800c7dc:	2a09      	cmp	r2, #9
 800c7de:	d94e      	bls.n	800c87e <_svfiprintf_r+0x17a>
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	d111      	bne.n	800c808 <_svfiprintf_r+0x104>
 800c7e4:	e017      	b.n	800c816 <_svfiprintf_r+0x112>
 800c7e6:	3501      	adds	r5, #1
 800c7e8:	e7b0      	b.n	800c74c <_svfiprintf_r+0x48>
 800c7ea:	4b41      	ldr	r3, [pc, #260]	; (800c8f0 <_svfiprintf_r+0x1ec>)
 800c7ec:	6822      	ldr	r2, [r4, #0]
 800c7ee:	1ac0      	subs	r0, r0, r3
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	4083      	lsls	r3, r0
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	002e      	movs	r6, r5
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	e7ce      	b.n	800c79a <_svfiprintf_r+0x96>
 800c7fc:	9b07      	ldr	r3, [sp, #28]
 800c7fe:	1d19      	adds	r1, r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	9107      	str	r1, [sp, #28]
 800c804:	2b00      	cmp	r3, #0
 800c806:	db01      	blt.n	800c80c <_svfiprintf_r+0x108>
 800c808:	930b      	str	r3, [sp, #44]	; 0x2c
 800c80a:	e004      	b.n	800c816 <_svfiprintf_r+0x112>
 800c80c:	425b      	negs	r3, r3
 800c80e:	60e3      	str	r3, [r4, #12]
 800c810:	2302      	movs	r3, #2
 800c812:	4313      	orrs	r3, r2
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	782b      	ldrb	r3, [r5, #0]
 800c818:	2b2e      	cmp	r3, #46	; 0x2e
 800c81a:	d10a      	bne.n	800c832 <_svfiprintf_r+0x12e>
 800c81c:	786b      	ldrb	r3, [r5, #1]
 800c81e:	2b2a      	cmp	r3, #42	; 0x2a
 800c820:	d135      	bne.n	800c88e <_svfiprintf_r+0x18a>
 800c822:	9b07      	ldr	r3, [sp, #28]
 800c824:	3502      	adds	r5, #2
 800c826:	1d1a      	adds	r2, r3, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	9207      	str	r2, [sp, #28]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	db2b      	blt.n	800c888 <_svfiprintf_r+0x184>
 800c830:	9309      	str	r3, [sp, #36]	; 0x24
 800c832:	4e30      	ldr	r6, [pc, #192]	; (800c8f4 <_svfiprintf_r+0x1f0>)
 800c834:	2203      	movs	r2, #3
 800c836:	0030      	movs	r0, r6
 800c838:	7829      	ldrb	r1, [r5, #0]
 800c83a:	f7ff f96d 	bl	800bb18 <memchr>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d006      	beq.n	800c850 <_svfiprintf_r+0x14c>
 800c842:	2340      	movs	r3, #64	; 0x40
 800c844:	1b80      	subs	r0, r0, r6
 800c846:	4083      	lsls	r3, r0
 800c848:	6822      	ldr	r2, [r4, #0]
 800c84a:	3501      	adds	r5, #1
 800c84c:	4313      	orrs	r3, r2
 800c84e:	6023      	str	r3, [r4, #0]
 800c850:	7829      	ldrb	r1, [r5, #0]
 800c852:	2206      	movs	r2, #6
 800c854:	4828      	ldr	r0, [pc, #160]	; (800c8f8 <_svfiprintf_r+0x1f4>)
 800c856:	1c6e      	adds	r6, r5, #1
 800c858:	7621      	strb	r1, [r4, #24]
 800c85a:	f7ff f95d 	bl	800bb18 <memchr>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d03c      	beq.n	800c8dc <_svfiprintf_r+0x1d8>
 800c862:	4b26      	ldr	r3, [pc, #152]	; (800c8fc <_svfiprintf_r+0x1f8>)
 800c864:	2b00      	cmp	r3, #0
 800c866:	d125      	bne.n	800c8b4 <_svfiprintf_r+0x1b0>
 800c868:	2207      	movs	r2, #7
 800c86a:	9b07      	ldr	r3, [sp, #28]
 800c86c:	3307      	adds	r3, #7
 800c86e:	4393      	bics	r3, r2
 800c870:	3308      	adds	r3, #8
 800c872:	9307      	str	r3, [sp, #28]
 800c874:	6963      	ldr	r3, [r4, #20]
 800c876:	9a04      	ldr	r2, [sp, #16]
 800c878:	189b      	adds	r3, r3, r2
 800c87a:	6163      	str	r3, [r4, #20]
 800c87c:	e765      	b.n	800c74a <_svfiprintf_r+0x46>
 800c87e:	4343      	muls	r3, r0
 800c880:	0035      	movs	r5, r6
 800c882:	2101      	movs	r1, #1
 800c884:	189b      	adds	r3, r3, r2
 800c886:	e7a6      	b.n	800c7d6 <_svfiprintf_r+0xd2>
 800c888:	2301      	movs	r3, #1
 800c88a:	425b      	negs	r3, r3
 800c88c:	e7d0      	b.n	800c830 <_svfiprintf_r+0x12c>
 800c88e:	2300      	movs	r3, #0
 800c890:	200a      	movs	r0, #10
 800c892:	001a      	movs	r2, r3
 800c894:	3501      	adds	r5, #1
 800c896:	6063      	str	r3, [r4, #4]
 800c898:	7829      	ldrb	r1, [r5, #0]
 800c89a:	1c6e      	adds	r6, r5, #1
 800c89c:	3930      	subs	r1, #48	; 0x30
 800c89e:	2909      	cmp	r1, #9
 800c8a0:	d903      	bls.n	800c8aa <_svfiprintf_r+0x1a6>
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0c5      	beq.n	800c832 <_svfiprintf_r+0x12e>
 800c8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8a8:	e7c3      	b.n	800c832 <_svfiprintf_r+0x12e>
 800c8aa:	4342      	muls	r2, r0
 800c8ac:	0035      	movs	r5, r6
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	1852      	adds	r2, r2, r1
 800c8b2:	e7f1      	b.n	800c898 <_svfiprintf_r+0x194>
 800c8b4:	ab07      	add	r3, sp, #28
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	003a      	movs	r2, r7
 800c8ba:	0021      	movs	r1, r4
 800c8bc:	4b10      	ldr	r3, [pc, #64]	; (800c900 <_svfiprintf_r+0x1fc>)
 800c8be:	9803      	ldr	r0, [sp, #12]
 800c8c0:	f7fc f964 	bl	8008b8c <_printf_float>
 800c8c4:	9004      	str	r0, [sp, #16]
 800c8c6:	9b04      	ldr	r3, [sp, #16]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	d1d3      	bne.n	800c874 <_svfiprintf_r+0x170>
 800c8cc:	89bb      	ldrh	r3, [r7, #12]
 800c8ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c8d0:	065b      	lsls	r3, r3, #25
 800c8d2:	d400      	bmi.n	800c8d6 <_svfiprintf_r+0x1d2>
 800c8d4:	e72d      	b.n	800c732 <_svfiprintf_r+0x2e>
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	4240      	negs	r0, r0
 800c8da:	e72a      	b.n	800c732 <_svfiprintf_r+0x2e>
 800c8dc:	ab07      	add	r3, sp, #28
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	003a      	movs	r2, r7
 800c8e2:	0021      	movs	r1, r4
 800c8e4:	4b06      	ldr	r3, [pc, #24]	; (800c900 <_svfiprintf_r+0x1fc>)
 800c8e6:	9803      	ldr	r0, [sp, #12]
 800c8e8:	f7fc fc0e 	bl	8009108 <_printf_i>
 800c8ec:	e7ea      	b.n	800c8c4 <_svfiprintf_r+0x1c0>
 800c8ee:	46c0      	nop			; (mov r8, r8)
 800c8f0:	0800e3bc 	.word	0x0800e3bc
 800c8f4:	0800e3c2 	.word	0x0800e3c2
 800c8f8:	0800e3c6 	.word	0x0800e3c6
 800c8fc:	08008b8d 	.word	0x08008b8d
 800c900:	0800c641 	.word	0x0800c641

0800c904 <_sungetc_r>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	0014      	movs	r4, r2
 800c908:	1c4b      	adds	r3, r1, #1
 800c90a:	d103      	bne.n	800c914 <_sungetc_r+0x10>
 800c90c:	2501      	movs	r5, #1
 800c90e:	426d      	negs	r5, r5
 800c910:	0028      	movs	r0, r5
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	8993      	ldrh	r3, [r2, #12]
 800c916:	2220      	movs	r2, #32
 800c918:	4393      	bics	r3, r2
 800c91a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	b2ce      	uxtb	r6, r1
 800c920:	6863      	ldr	r3, [r4, #4]
 800c922:	b2cd      	uxtb	r5, r1
 800c924:	2a00      	cmp	r2, #0
 800c926:	d010      	beq.n	800c94a <_sungetc_r+0x46>
 800c928:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c92a:	429a      	cmp	r2, r3
 800c92c:	dd07      	ble.n	800c93e <_sungetc_r+0x3a>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	3b01      	subs	r3, #1
 800c932:	6023      	str	r3, [r4, #0]
 800c934:	701e      	strb	r6, [r3, #0]
 800c936:	6863      	ldr	r3, [r4, #4]
 800c938:	3301      	adds	r3, #1
 800c93a:	6063      	str	r3, [r4, #4]
 800c93c:	e7e8      	b.n	800c910 <_sungetc_r+0xc>
 800c93e:	0021      	movs	r1, r4
 800c940:	f000 fc20 	bl	800d184 <__submore>
 800c944:	2800      	cmp	r0, #0
 800c946:	d0f2      	beq.n	800c92e <_sungetc_r+0x2a>
 800c948:	e7e0      	b.n	800c90c <_sungetc_r+0x8>
 800c94a:	6921      	ldr	r1, [r4, #16]
 800c94c:	6822      	ldr	r2, [r4, #0]
 800c94e:	2900      	cmp	r1, #0
 800c950:	d007      	beq.n	800c962 <_sungetc_r+0x5e>
 800c952:	4291      	cmp	r1, r2
 800c954:	d205      	bcs.n	800c962 <_sungetc_r+0x5e>
 800c956:	1e51      	subs	r1, r2, #1
 800c958:	7808      	ldrb	r0, [r1, #0]
 800c95a:	42a8      	cmp	r0, r5
 800c95c:	d101      	bne.n	800c962 <_sungetc_r+0x5e>
 800c95e:	6021      	str	r1, [r4, #0]
 800c960:	e7ea      	b.n	800c938 <_sungetc_r+0x34>
 800c962:	6423      	str	r3, [r4, #64]	; 0x40
 800c964:	0023      	movs	r3, r4
 800c966:	3344      	adds	r3, #68	; 0x44
 800c968:	6363      	str	r3, [r4, #52]	; 0x34
 800c96a:	2303      	movs	r3, #3
 800c96c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c96e:	0023      	movs	r3, r4
 800c970:	3346      	adds	r3, #70	; 0x46
 800c972:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c974:	701e      	strb	r6, [r3, #0]
 800c976:	6023      	str	r3, [r4, #0]
 800c978:	2301      	movs	r3, #1
 800c97a:	e7de      	b.n	800c93a <_sungetc_r+0x36>

0800c97c <__ssrefill_r>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	000c      	movs	r4, r1
 800c980:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c982:	2900      	cmp	r1, #0
 800c984:	d00e      	beq.n	800c9a4 <__ssrefill_r+0x28>
 800c986:	0023      	movs	r3, r4
 800c988:	3344      	adds	r3, #68	; 0x44
 800c98a:	4299      	cmp	r1, r3
 800c98c:	d001      	beq.n	800c992 <__ssrefill_r+0x16>
 800c98e:	f7ff fdaf 	bl	800c4f0 <_free_r>
 800c992:	2000      	movs	r0, #0
 800c994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c996:	6360      	str	r0, [r4, #52]	; 0x34
 800c998:	6063      	str	r3, [r4, #4]
 800c99a:	4283      	cmp	r3, r0
 800c99c:	d002      	beq.n	800c9a4 <__ssrefill_r+0x28>
 800c99e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	bd10      	pop	{r4, pc}
 800c9a4:	6923      	ldr	r3, [r4, #16]
 800c9a6:	2001      	movs	r0, #1
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	89a2      	ldrh	r2, [r4, #12]
 800c9ae:	6063      	str	r3, [r4, #4]
 800c9b0:	3320      	adds	r3, #32
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	81a3      	strh	r3, [r4, #12]
 800c9b6:	4240      	negs	r0, r0
 800c9b8:	e7f3      	b.n	800c9a2 <__ssrefill_r+0x26>
	...

0800c9bc <__ssvfiscanf_r>:
 800c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9be:	4cb5      	ldr	r4, [pc, #724]	; (800cc94 <__ssvfiscanf_r+0x2d8>)
 800c9c0:	0005      	movs	r5, r0
 800c9c2:	44a5      	add	sp, r4
 800c9c4:	000c      	movs	r4, r1
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	9148      	str	r1, [sp, #288]	; 0x120
 800c9ca:	9149      	str	r1, [sp, #292]	; 0x124
 800c9cc:	a905      	add	r1, sp, #20
 800c9ce:	914a      	str	r1, [sp, #296]	; 0x128
 800c9d0:	21be      	movs	r1, #190	; 0xbe
 800c9d2:	48b1      	ldr	r0, [pc, #708]	; (800cc98 <__ssvfiscanf_r+0x2dc>)
 800c9d4:	0049      	lsls	r1, r1, #1
 800c9d6:	ae45      	add	r6, sp, #276	; 0x114
 800c9d8:	5070      	str	r0, [r6, r1]
 800c9da:	48b0      	ldr	r0, [pc, #704]	; (800cc9c <__ssvfiscanf_r+0x2e0>)
 800c9dc:	3104      	adds	r1, #4
 800c9de:	ae45      	add	r6, sp, #276	; 0x114
 800c9e0:	5070      	str	r0, [r6, r1]
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	9101      	str	r1, [sp, #4]
 800c9e6:	7813      	ldrb	r3, [r2, #0]
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d100      	bne.n	800c9f0 <__ssvfiscanf_r+0x34>
 800c9ee:	e14f      	b.n	800cc90 <__ssvfiscanf_r+0x2d4>
 800c9f0:	4fab      	ldr	r7, [pc, #684]	; (800cca0 <__ssvfiscanf_r+0x2e4>)
 800c9f2:	2008      	movs	r0, #8
 800c9f4:	5cf9      	ldrb	r1, [r7, r3]
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	1c56      	adds	r6, r2, #1
 800c9fa:	400b      	ands	r3, r1
 800c9fc:	4201      	tst	r1, r0
 800c9fe:	d01e      	beq.n	800ca3e <__ssvfiscanf_r+0x82>
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dd11      	ble.n	800ca2a <__ssvfiscanf_r+0x6e>
 800ca06:	2108      	movs	r1, #8
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	5cba      	ldrb	r2, [r7, r2]
 800ca0e:	420a      	tst	r2, r1
 800ca10:	d101      	bne.n	800ca16 <__ssvfiscanf_r+0x5a>
 800ca12:	0032      	movs	r2, r6
 800ca14:	e7e7      	b.n	800c9e6 <__ssvfiscanf_r+0x2a>
 800ca16:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800ca18:	3301      	adds	r3, #1
 800ca1a:	9200      	str	r2, [sp, #0]
 800ca1c:	3201      	adds	r2, #1
 800ca1e:	9249      	str	r2, [sp, #292]	; 0x124
 800ca20:	6862      	ldr	r2, [r4, #4]
 800ca22:	6023      	str	r3, [r4, #0]
 800ca24:	3a01      	subs	r2, #1
 800ca26:	6062      	str	r2, [r4, #4]
 800ca28:	e7ea      	b.n	800ca00 <__ssvfiscanf_r+0x44>
 800ca2a:	9a01      	ldr	r2, [sp, #4]
 800ca2c:	ab45      	add	r3, sp, #276	; 0x114
 800ca2e:	589b      	ldr	r3, [r3, r2]
 800ca30:	0021      	movs	r1, r4
 800ca32:	0028      	movs	r0, r5
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	4798      	blx	r3
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d0e4      	beq.n	800ca06 <__ssvfiscanf_r+0x4a>
 800ca3c:	e7e9      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800ca3e:	9900      	ldr	r1, [sp, #0]
 800ca40:	2925      	cmp	r1, #37	; 0x25
 800ca42:	d164      	bne.n	800cb0e <__ssvfiscanf_r+0x152>
 800ca44:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca46:	9345      	str	r3, [sp, #276]	; 0x114
 800ca48:	7853      	ldrb	r3, [r2, #1]
 800ca4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca4c:	d102      	bne.n	800ca54 <__ssvfiscanf_r+0x98>
 800ca4e:	3b1a      	subs	r3, #26
 800ca50:	9345      	str	r3, [sp, #276]	; 0x114
 800ca52:	1c96      	adds	r6, r2, #2
 800ca54:	0037      	movs	r7, r6
 800ca56:	200a      	movs	r0, #10
 800ca58:	7839      	ldrb	r1, [r7, #0]
 800ca5a:	1c7b      	adds	r3, r7, #1
 800ca5c:	9302      	str	r3, [sp, #8]
 800ca5e:	000b      	movs	r3, r1
 800ca60:	3b30      	subs	r3, #48	; 0x30
 800ca62:	2b09      	cmp	r3, #9
 800ca64:	d91f      	bls.n	800caa6 <__ssvfiscanf_r+0xea>
 800ca66:	4e8f      	ldr	r6, [pc, #572]	; (800cca4 <__ssvfiscanf_r+0x2e8>)
 800ca68:	2203      	movs	r2, #3
 800ca6a:	0030      	movs	r0, r6
 800ca6c:	f7ff f854 	bl	800bb18 <memchr>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d007      	beq.n	800ca84 <__ssvfiscanf_r+0xc8>
 800ca74:	2301      	movs	r3, #1
 800ca76:	1b80      	subs	r0, r0, r6
 800ca78:	4083      	lsls	r3, r0
 800ca7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca7c:	9f02      	ldr	r7, [sp, #8]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	9203      	str	r2, [sp, #12]
 800ca82:	9345      	str	r3, [sp, #276]	; 0x114
 800ca84:	783b      	ldrb	r3, [r7, #0]
 800ca86:	1c7e      	adds	r6, r7, #1
 800ca88:	2b78      	cmp	r3, #120	; 0x78
 800ca8a:	d807      	bhi.n	800ca9c <__ssvfiscanf_r+0xe0>
 800ca8c:	2b57      	cmp	r3, #87	; 0x57
 800ca8e:	d812      	bhi.n	800cab6 <__ssvfiscanf_r+0xfa>
 800ca90:	2b25      	cmp	r3, #37	; 0x25
 800ca92:	d03c      	beq.n	800cb0e <__ssvfiscanf_r+0x152>
 800ca94:	d836      	bhi.n	800cb04 <__ssvfiscanf_r+0x148>
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d100      	bne.n	800ca9c <__ssvfiscanf_r+0xe0>
 800ca9a:	e0f6      	b.n	800cc8a <__ssvfiscanf_r+0x2ce>
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	934b      	str	r3, [sp, #300]	; 0x12c
 800caa0:	3307      	adds	r3, #7
 800caa2:	9346      	str	r3, [sp, #280]	; 0x118
 800caa4:	e076      	b.n	800cb94 <__ssvfiscanf_r+0x1d8>
 800caa6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800caa8:	9f02      	ldr	r7, [sp, #8]
 800caaa:	9303      	str	r3, [sp, #12]
 800caac:	4343      	muls	r3, r0
 800caae:	3b30      	subs	r3, #48	; 0x30
 800cab0:	185b      	adds	r3, r3, r1
 800cab2:	9347      	str	r3, [sp, #284]	; 0x11c
 800cab4:	e7d0      	b.n	800ca58 <__ssvfiscanf_r+0x9c>
 800cab6:	0018      	movs	r0, r3
 800cab8:	3858      	subs	r0, #88	; 0x58
 800caba:	2820      	cmp	r0, #32
 800cabc:	d8ee      	bhi.n	800ca9c <__ssvfiscanf_r+0xe0>
 800cabe:	f7f3 fb3f 	bl	8000140 <__gnu_thumb1_case_shi>
 800cac2:	0051      	.short	0x0051
 800cac4:	ffedffed 	.word	0xffedffed
 800cac8:	ffed0086 	.word	0xffed0086
 800cacc:	ffedffed 	.word	0xffedffed
 800cad0:	ffedffed 	.word	0xffedffed
 800cad4:	ffedffed 	.word	0xffedffed
 800cad8:	00600093 	.word	0x00600093
 800cadc:	00240024 	.word	0x00240024
 800cae0:	ffed0024 	.word	0xffed0024
 800cae4:	ffed0062 	.word	0xffed0062
 800cae8:	ffedffed 	.word	0xffedffed
 800caec:	009dffed 	.word	0x009dffed
 800caf0:	004b0065 	.word	0x004b0065
 800caf4:	ffedffed 	.word	0xffedffed
 800caf8:	ffed009b 	.word	0xffed009b
 800cafc:	ffed0060 	.word	0xffed0060
 800cb00:	0051ffed 	.word	0x0051ffed
 800cb04:	3b45      	subs	r3, #69	; 0x45
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d8c8      	bhi.n	800ca9c <__ssvfiscanf_r+0xe0>
 800cb0a:	2305      	movs	r3, #5
 800cb0c:	e041      	b.n	800cb92 <__ssvfiscanf_r+0x1d6>
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	dd0f      	ble.n	800cb34 <__ssvfiscanf_r+0x178>
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	9900      	ldr	r1, [sp, #0]
 800cb18:	781a      	ldrb	r2, [r3, #0]
 800cb1a:	428a      	cmp	r2, r1
 800cb1c:	d000      	beq.n	800cb20 <__ssvfiscanf_r+0x164>
 800cb1e:	e0b7      	b.n	800cc90 <__ssvfiscanf_r+0x2d4>
 800cb20:	3301      	adds	r3, #1
 800cb22:	6862      	ldr	r2, [r4, #4]
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cb28:	3a01      	subs	r2, #1
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	6062      	str	r2, [r4, #4]
 800cb30:	9349      	str	r3, [sp, #292]	; 0x124
 800cb32:	e76e      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800cb34:	9a01      	ldr	r2, [sp, #4]
 800cb36:	ab45      	add	r3, sp, #276	; 0x114
 800cb38:	589b      	ldr	r3, [r3, r2]
 800cb3a:	0021      	movs	r1, r4
 800cb3c:	0028      	movs	r0, r5
 800cb3e:	9302      	str	r3, [sp, #8]
 800cb40:	4798      	blx	r3
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d0e6      	beq.n	800cb14 <__ssvfiscanf_r+0x158>
 800cb46:	9848      	ldr	r0, [sp, #288]	; 0x120
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d000      	beq.n	800cb4e <__ssvfiscanf_r+0x192>
 800cb4c:	e099      	b.n	800cc82 <__ssvfiscanf_r+0x2c6>
 800cb4e:	3801      	subs	r0, #1
 800cb50:	23a7      	movs	r3, #167	; 0xa7
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	449d      	add	sp, r3
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb5a:	9200      	str	r2, [sp, #0]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	9900      	ldr	r1, [sp, #0]
 800cb60:	430a      	orrs	r2, r1
 800cb62:	9245      	str	r2, [sp, #276]	; 0x114
 800cb64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb66:	9200      	str	r2, [sp, #0]
 800cb68:	2280      	movs	r2, #128	; 0x80
 800cb6a:	9900      	ldr	r1, [sp, #0]
 800cb6c:	0092      	lsls	r2, r2, #2
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	9245      	str	r2, [sp, #276]	; 0x114
 800cb72:	2210      	movs	r2, #16
 800cb74:	9246      	str	r2, [sp, #280]	; 0x118
 800cb76:	226e      	movs	r2, #110	; 0x6e
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	419b      	sbcs	r3, r3
 800cb7c:	425b      	negs	r3, r3
 800cb7e:	3303      	adds	r3, #3
 800cb80:	e007      	b.n	800cb92 <__ssvfiscanf_r+0x1d6>
 800cb82:	220a      	movs	r2, #10
 800cb84:	e7f6      	b.n	800cb74 <__ssvfiscanf_r+0x1b8>
 800cb86:	2300      	movs	r3, #0
 800cb88:	9346      	str	r3, [sp, #280]	; 0x118
 800cb8a:	e7f8      	b.n	800cb7e <__ssvfiscanf_r+0x1c2>
 800cb8c:	2308      	movs	r3, #8
 800cb8e:	9346      	str	r3, [sp, #280]	; 0x118
 800cb90:	3b04      	subs	r3, #4
 800cb92:	934b      	str	r3, [sp, #300]	; 0x12c
 800cb94:	6863      	ldr	r3, [r4, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	dd3f      	ble.n	800cc1a <__ssvfiscanf_r+0x25e>
 800cb9a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	065b      	lsls	r3, r3, #25
 800cba0:	d406      	bmi.n	800cbb0 <__ssvfiscanf_r+0x1f4>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	493e      	ldr	r1, [pc, #248]	; (800cca0 <__ssvfiscanf_r+0x2e4>)
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	5c8a      	ldrb	r2, [r1, r2]
 800cbaa:	2108      	movs	r1, #8
 800cbac:	420a      	tst	r2, r1
 800cbae:	d13e      	bne.n	800cc2e <__ssvfiscanf_r+0x272>
 800cbb0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	dc51      	bgt.n	800cc5a <__ssvfiscanf_r+0x29e>
 800cbb6:	0022      	movs	r2, r4
 800cbb8:	0028      	movs	r0, r5
 800cbba:	ab04      	add	r3, sp, #16
 800cbbc:	a945      	add	r1, sp, #276	; 0x114
 800cbbe:	f000 f875 	bl	800ccac <_scanf_chars>
 800cbc2:	2801      	cmp	r0, #1
 800cbc4:	d064      	beq.n	800cc90 <__ssvfiscanf_r+0x2d4>
 800cbc6:	2802      	cmp	r0, #2
 800cbc8:	d000      	beq.n	800cbcc <__ssvfiscanf_r+0x210>
 800cbca:	e722      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800cbcc:	e7bb      	b.n	800cb46 <__ssvfiscanf_r+0x18a>
 800cbce:	0031      	movs	r1, r6
 800cbd0:	a805      	add	r0, sp, #20
 800cbd2:	f000 f9f9 	bl	800cfc8 <__sccl>
 800cbd6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cbd8:	0006      	movs	r6, r0
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	2340      	movs	r3, #64	; 0x40
 800cbde:	9a00      	ldr	r2, [sp, #0]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	9345      	str	r3, [sp, #276]	; 0x114
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e7d4      	b.n	800cb92 <__ssvfiscanf_r+0x1d6>
 800cbe8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	2340      	movs	r3, #64	; 0x40
 800cbee:	9a00      	ldr	r2, [sp, #0]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	9345      	str	r3, [sp, #276]	; 0x114
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e7cc      	b.n	800cb92 <__ssvfiscanf_r+0x1d6>
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	e7ca      	b.n	800cb92 <__ssvfiscanf_r+0x1d6>
 800cbfc:	9845      	ldr	r0, [sp, #276]	; 0x114
 800cbfe:	06c3      	lsls	r3, r0, #27
 800cc00:	d500      	bpl.n	800cc04 <__ssvfiscanf_r+0x248>
 800cc02:	e706      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800cc08:	1d19      	adds	r1, r3, #4
 800cc0a:	9104      	str	r1, [sp, #16]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	07c7      	lsls	r7, r0, #31
 800cc10:	d501      	bpl.n	800cc16 <__ssvfiscanf_r+0x25a>
 800cc12:	801a      	strh	r2, [r3, #0]
 800cc14:	e6fd      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	e6fb      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800cc1a:	9a01      	ldr	r2, [sp, #4]
 800cc1c:	ab45      	add	r3, sp, #276	; 0x114
 800cc1e:	589b      	ldr	r3, [r3, r2]
 800cc20:	0021      	movs	r1, r4
 800cc22:	0028      	movs	r0, r5
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	4798      	blx	r3
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d0b6      	beq.n	800cb9a <__ssvfiscanf_r+0x1de>
 800cc2c:	e78b      	b.n	800cb46 <__ssvfiscanf_r+0x18a>
 800cc2e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800cc30:	9200      	str	r2, [sp, #0]
 800cc32:	3201      	adds	r2, #1
 800cc34:	9249      	str	r2, [sp, #292]	; 0x124
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	3a01      	subs	r2, #1
 800cc3a:	6062      	str	r2, [r4, #4]
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	dd02      	ble.n	800cc46 <__ssvfiscanf_r+0x28a>
 800cc40:	3301      	adds	r3, #1
 800cc42:	6023      	str	r3, [r4, #0]
 800cc44:	e7ad      	b.n	800cba2 <__ssvfiscanf_r+0x1e6>
 800cc46:	9a01      	ldr	r2, [sp, #4]
 800cc48:	ab45      	add	r3, sp, #276	; 0x114
 800cc4a:	589b      	ldr	r3, [r3, r2]
 800cc4c:	0021      	movs	r1, r4
 800cc4e:	0028      	movs	r0, r5
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4798      	blx	r3
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d0a4      	beq.n	800cba2 <__ssvfiscanf_r+0x1e6>
 800cc58:	e775      	b.n	800cb46 <__ssvfiscanf_r+0x18a>
 800cc5a:	2b04      	cmp	r3, #4
 800cc5c:	dc06      	bgt.n	800cc6c <__ssvfiscanf_r+0x2b0>
 800cc5e:	0022      	movs	r2, r4
 800cc60:	0028      	movs	r0, r5
 800cc62:	ab04      	add	r3, sp, #16
 800cc64:	a945      	add	r1, sp, #276	; 0x114
 800cc66:	f000 f87f 	bl	800cd68 <_scanf_i>
 800cc6a:	e7aa      	b.n	800cbc2 <__ssvfiscanf_r+0x206>
 800cc6c:	4b0e      	ldr	r3, [pc, #56]	; (800cca8 <__ssvfiscanf_r+0x2ec>)
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d100      	bne.n	800cc74 <__ssvfiscanf_r+0x2b8>
 800cc72:	e6ce      	b.n	800ca12 <__ssvfiscanf_r+0x56>
 800cc74:	0022      	movs	r2, r4
 800cc76:	0028      	movs	r0, r5
 800cc78:	ab04      	add	r3, sp, #16
 800cc7a:	a945      	add	r1, sp, #276	; 0x114
 800cc7c:	f7fc fb56 	bl	800932c <_scanf_float>
 800cc80:	e79f      	b.n	800cbc2 <__ssvfiscanf_r+0x206>
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	065b      	lsls	r3, r3, #25
 800cc86:	d400      	bmi.n	800cc8a <__ssvfiscanf_r+0x2ce>
 800cc88:	e762      	b.n	800cb50 <__ssvfiscanf_r+0x194>
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	4240      	negs	r0, r0
 800cc8e:	e75f      	b.n	800cb50 <__ssvfiscanf_r+0x194>
 800cc90:	9848      	ldr	r0, [sp, #288]	; 0x120
 800cc92:	e75d      	b.n	800cb50 <__ssvfiscanf_r+0x194>
 800cc94:	fffffd64 	.word	0xfffffd64
 800cc98:	0800c905 	.word	0x0800c905
 800cc9c:	0800c97d 	.word	0x0800c97d
 800cca0:	0800e049 	.word	0x0800e049
 800cca4:	0800e3c2 	.word	0x0800e3c2
 800cca8:	0800932d 	.word	0x0800932d

0800ccac <_scanf_chars>:
 800ccac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccae:	0015      	movs	r5, r2
 800ccb0:	688a      	ldr	r2, [r1, #8]
 800ccb2:	000c      	movs	r4, r1
 800ccb4:	9001      	str	r0, [sp, #4]
 800ccb6:	2a00      	cmp	r2, #0
 800ccb8:	d105      	bne.n	800ccc6 <_scanf_chars+0x1a>
 800ccba:	6989      	ldr	r1, [r1, #24]
 800ccbc:	3201      	adds	r2, #1
 800ccbe:	2900      	cmp	r1, #0
 800ccc0:	d000      	beq.n	800ccc4 <_scanf_chars+0x18>
 800ccc2:	3a02      	subs	r2, #2
 800ccc4:	60a2      	str	r2, [r4, #8]
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	06d2      	lsls	r2, r2, #27
 800ccca:	d403      	bmi.n	800ccd4 <_scanf_chars+0x28>
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	1d11      	adds	r1, r2, #4
 800ccd0:	6019      	str	r1, [r3, #0]
 800ccd2:	6817      	ldr	r7, [r2, #0]
 800ccd4:	2600      	movs	r6, #0
 800ccd6:	69a0      	ldr	r0, [r4, #24]
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d013      	beq.n	800cd04 <_scanf_chars+0x58>
 800ccdc:	2801      	cmp	r0, #1
 800ccde:	d108      	bne.n	800ccf2 <_scanf_chars+0x46>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	6962      	ldr	r2, [r4, #20]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	5cd3      	ldrb	r3, [r2, r3]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10b      	bne.n	800cd04 <_scanf_chars+0x58>
 800ccec:	2e00      	cmp	r6, #0
 800ccee:	d127      	bne.n	800cd40 <_scanf_chars+0x94>
 800ccf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccf2:	2802      	cmp	r0, #2
 800ccf4:	d124      	bne.n	800cd40 <_scanf_chars+0x94>
 800ccf6:	682b      	ldr	r3, [r5, #0]
 800ccf8:	4a1a      	ldr	r2, [pc, #104]	; (800cd64 <_scanf_chars+0xb8>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	5cd3      	ldrb	r3, [r2, r3]
 800ccfe:	2208      	movs	r2, #8
 800cd00:	4213      	tst	r3, r2
 800cd02:	d11d      	bne.n	800cd40 <_scanf_chars+0x94>
 800cd04:	2210      	movs	r2, #16
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	3601      	adds	r6, #1
 800cd0a:	4213      	tst	r3, r2
 800cd0c:	d103      	bne.n	800cd16 <_scanf_chars+0x6a>
 800cd0e:	682b      	ldr	r3, [r5, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	703b      	strb	r3, [r7, #0]
 800cd14:	3701      	adds	r7, #1
 800cd16:	682a      	ldr	r2, [r5, #0]
 800cd18:	686b      	ldr	r3, [r5, #4]
 800cd1a:	3201      	adds	r2, #1
 800cd1c:	602a      	str	r2, [r5, #0]
 800cd1e:	68a2      	ldr	r2, [r4, #8]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	3a01      	subs	r2, #1
 800cd24:	606b      	str	r3, [r5, #4]
 800cd26:	60a2      	str	r2, [r4, #8]
 800cd28:	2a00      	cmp	r2, #0
 800cd2a:	d009      	beq.n	800cd40 <_scanf_chars+0x94>
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dcd2      	bgt.n	800ccd6 <_scanf_chars+0x2a>
 800cd30:	23c0      	movs	r3, #192	; 0xc0
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	0029      	movs	r1, r5
 800cd36:	58e3      	ldr	r3, [r4, r3]
 800cd38:	9801      	ldr	r0, [sp, #4]
 800cd3a:	4798      	blx	r3
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d0ca      	beq.n	800ccd6 <_scanf_chars+0x2a>
 800cd40:	6822      	ldr	r2, [r4, #0]
 800cd42:	2310      	movs	r3, #16
 800cd44:	0011      	movs	r1, r2
 800cd46:	4019      	ands	r1, r3
 800cd48:	421a      	tst	r2, r3
 800cd4a:	d106      	bne.n	800cd5a <_scanf_chars+0xae>
 800cd4c:	68e3      	ldr	r3, [r4, #12]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	60e3      	str	r3, [r4, #12]
 800cd52:	69a3      	ldr	r3, [r4, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d000      	beq.n	800cd5a <_scanf_chars+0xae>
 800cd58:	7039      	strb	r1, [r7, #0]
 800cd5a:	6923      	ldr	r3, [r4, #16]
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	199e      	adds	r6, r3, r6
 800cd60:	6126      	str	r6, [r4, #16]
 800cd62:	e7c5      	b.n	800ccf0 <_scanf_chars+0x44>
 800cd64:	0800e049 	.word	0x0800e049

0800cd68 <_scanf_i>:
 800cd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6a:	000c      	movs	r4, r1
 800cd6c:	b08d      	sub	sp, #52	; 0x34
 800cd6e:	9302      	str	r3, [sp, #8]
 800cd70:	4b79      	ldr	r3, [pc, #484]	; (800cf58 <_scanf_i+0x1f0>)
 800cd72:	0016      	movs	r6, r2
 800cd74:	9005      	str	r0, [sp, #20]
 800cd76:	aa09      	add	r2, sp, #36	; 0x24
 800cd78:	cb23      	ldmia	r3!, {r0, r1, r5}
 800cd7a:	c223      	stmia	r2!, {r0, r1, r5}
 800cd7c:	4b77      	ldr	r3, [pc, #476]	; (800cf5c <_scanf_i+0x1f4>)
 800cd7e:	9306      	str	r3, [sp, #24]
 800cd80:	69a3      	ldr	r3, [r4, #24]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d001      	beq.n	800cd8a <_scanf_i+0x22>
 800cd86:	4b76      	ldr	r3, [pc, #472]	; (800cf60 <_scanf_i+0x1f8>)
 800cd88:	9306      	str	r3, [sp, #24]
 800cd8a:	22ae      	movs	r2, #174	; 0xae
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	68a3      	ldr	r3, [r4, #8]
 800cd90:	0052      	lsls	r2, r2, #1
 800cd92:	1e59      	subs	r1, r3, #1
 800cd94:	9004      	str	r0, [sp, #16]
 800cd96:	4291      	cmp	r1, r2
 800cd98:	d905      	bls.n	800cda6 <_scanf_i+0x3e>
 800cd9a:	3b5e      	subs	r3, #94	; 0x5e
 800cd9c:	3bff      	subs	r3, #255	; 0xff
 800cd9e:	9304      	str	r3, [sp, #16]
 800cda0:	235e      	movs	r3, #94	; 0x5e
 800cda2:	33ff      	adds	r3, #255	; 0xff
 800cda4:	60a3      	str	r3, [r4, #8]
 800cda6:	0023      	movs	r3, r4
 800cda8:	331c      	adds	r3, #28
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	23d0      	movs	r3, #208	; 0xd0
 800cdae:	2700      	movs	r7, #0
 800cdb0:	6822      	ldr	r2, [r4, #0]
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	6023      	str	r3, [r4, #0]
 800cdb8:	9b01      	ldr	r3, [sp, #4]
 800cdba:	9303      	str	r3, [sp, #12]
 800cdbc:	6833      	ldr	r3, [r6, #0]
 800cdbe:	a809      	add	r0, sp, #36	; 0x24
 800cdc0:	7819      	ldrb	r1, [r3, #0]
 800cdc2:	00bb      	lsls	r3, r7, #2
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	5818      	ldr	r0, [r3, r0]
 800cdc8:	f7fe fea6 	bl	800bb18 <memchr>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d02b      	beq.n	800ce28 <_scanf_i+0xc0>
 800cdd0:	2f01      	cmp	r7, #1
 800cdd2:	d162      	bne.n	800ce9a <_scanf_i+0x132>
 800cdd4:	6863      	ldr	r3, [r4, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d106      	bne.n	800cde8 <_scanf_i+0x80>
 800cdda:	3308      	adds	r3, #8
 800cddc:	6822      	ldr	r2, [r4, #0]
 800cdde:	6063      	str	r3, [r4, #4]
 800cde0:	33f9      	adds	r3, #249	; 0xf9
 800cde2:	33ff      	adds	r3, #255	; 0xff
 800cde4:	4313      	orrs	r3, r2
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	4b5e      	ldr	r3, [pc, #376]	; (800cf64 <_scanf_i+0x1fc>)
 800cdea:	6822      	ldr	r2, [r4, #0]
 800cdec:	4013      	ands	r3, r2
 800cdee:	6023      	str	r3, [r4, #0]
 800cdf0:	68a3      	ldr	r3, [r4, #8]
 800cdf2:	1e5a      	subs	r2, r3, #1
 800cdf4:	60a2      	str	r2, [r4, #8]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d016      	beq.n	800ce28 <_scanf_i+0xc0>
 800cdfa:	6833      	ldr	r3, [r6, #0]
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	6032      	str	r2, [r6, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	9a03      	ldr	r2, [sp, #12]
 800ce04:	7013      	strb	r3, [r2, #0]
 800ce06:	6873      	ldr	r3, [r6, #4]
 800ce08:	1c55      	adds	r5, r2, #1
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	6073      	str	r3, [r6, #4]
 800ce0e:	9503      	str	r5, [sp, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc09      	bgt.n	800ce28 <_scanf_i+0xc0>
 800ce14:	23c0      	movs	r3, #192	; 0xc0
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	58e3      	ldr	r3, [r4, r3]
 800ce1a:	0031      	movs	r1, r6
 800ce1c:	9805      	ldr	r0, [sp, #20]
 800ce1e:	9307      	str	r3, [sp, #28]
 800ce20:	4798      	blx	r3
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d000      	beq.n	800ce28 <_scanf_i+0xc0>
 800ce26:	e081      	b.n	800cf2c <_scanf_i+0x1c4>
 800ce28:	3701      	adds	r7, #1
 800ce2a:	2f03      	cmp	r7, #3
 800ce2c:	d1c6      	bne.n	800cdbc <_scanf_i+0x54>
 800ce2e:	6863      	ldr	r3, [r4, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <_scanf_i+0xd0>
 800ce34:	330a      	adds	r3, #10
 800ce36:	6063      	str	r3, [r4, #4]
 800ce38:	2110      	movs	r1, #16
 800ce3a:	2700      	movs	r7, #0
 800ce3c:	6863      	ldr	r3, [r4, #4]
 800ce3e:	6960      	ldr	r0, [r4, #20]
 800ce40:	1ac9      	subs	r1, r1, r3
 800ce42:	4b49      	ldr	r3, [pc, #292]	; (800cf68 <_scanf_i+0x200>)
 800ce44:	18c9      	adds	r1, r1, r3
 800ce46:	f000 f8bf 	bl	800cfc8 <__sccl>
 800ce4a:	9d03      	ldr	r5, [sp, #12]
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	6822      	ldr	r2, [r4, #0]
 800ce50:	9303      	str	r3, [sp, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d041      	beq.n	800ceda <_scanf_i+0x172>
 800ce56:	6831      	ldr	r1, [r6, #0]
 800ce58:	6963      	ldr	r3, [r4, #20]
 800ce5a:	7808      	ldrb	r0, [r1, #0]
 800ce5c:	5c1b      	ldrb	r3, [r3, r0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d03b      	beq.n	800ceda <_scanf_i+0x172>
 800ce62:	2830      	cmp	r0, #48	; 0x30
 800ce64:	d129      	bne.n	800ceba <_scanf_i+0x152>
 800ce66:	2380      	movs	r3, #128	; 0x80
 800ce68:	011b      	lsls	r3, r3, #4
 800ce6a:	421a      	tst	r2, r3
 800ce6c:	d025      	beq.n	800ceba <_scanf_i+0x152>
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	3701      	adds	r7, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <_scanf_i+0x11a>
 800ce76:	001a      	movs	r2, r3
 800ce78:	9b03      	ldr	r3, [sp, #12]
 800ce7a:	3a01      	subs	r2, #1
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	9204      	str	r2, [sp, #16]
 800ce80:	60a3      	str	r3, [r4, #8]
 800ce82:	6873      	ldr	r3, [r6, #4]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	6073      	str	r3, [r6, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dd1d      	ble.n	800cec8 <_scanf_i+0x160>
 800ce8c:	6833      	ldr	r3, [r6, #0]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	6033      	str	r3, [r6, #0]
 800ce92:	68a3      	ldr	r3, [r4, #8]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	60a3      	str	r3, [r4, #8]
 800ce98:	e7d8      	b.n	800ce4c <_scanf_i+0xe4>
 800ce9a:	2f02      	cmp	r7, #2
 800ce9c:	d1a8      	bne.n	800cdf0 <_scanf_i+0x88>
 800ce9e:	21c0      	movs	r1, #192	; 0xc0
 800cea0:	2380      	movs	r3, #128	; 0x80
 800cea2:	6822      	ldr	r2, [r4, #0]
 800cea4:	00c9      	lsls	r1, r1, #3
 800cea6:	4011      	ands	r1, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4299      	cmp	r1, r3
 800ceac:	d1bf      	bne.n	800ce2e <_scanf_i+0xc6>
 800ceae:	3bf1      	subs	r3, #241	; 0xf1
 800ceb0:	3bff      	subs	r3, #255	; 0xff
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	33f0      	adds	r3, #240	; 0xf0
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	e799      	b.n	800cdee <_scanf_i+0x86>
 800ceba:	4b2c      	ldr	r3, [pc, #176]	; (800cf6c <_scanf_i+0x204>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	780b      	ldrb	r3, [r1, #0]
 800cec2:	702b      	strb	r3, [r5, #0]
 800cec4:	3501      	adds	r5, #1
 800cec6:	e7dc      	b.n	800ce82 <_scanf_i+0x11a>
 800cec8:	23c0      	movs	r3, #192	; 0xc0
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	58e3      	ldr	r3, [r4, r3]
 800cece:	0031      	movs	r1, r6
 800ced0:	9805      	ldr	r0, [sp, #20]
 800ced2:	9303      	str	r3, [sp, #12]
 800ced4:	4798      	blx	r3
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0db      	beq.n	800ce92 <_scanf_i+0x12a>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	05db      	lsls	r3, r3, #23
 800cede:	d50e      	bpl.n	800cefe <_scanf_i+0x196>
 800cee0:	9b01      	ldr	r3, [sp, #4]
 800cee2:	429d      	cmp	r5, r3
 800cee4:	d907      	bls.n	800cef6 <_scanf_i+0x18e>
 800cee6:	23be      	movs	r3, #190	; 0xbe
 800cee8:	3d01      	subs	r5, #1
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	0032      	movs	r2, r6
 800ceee:	7829      	ldrb	r1, [r5, #0]
 800cef0:	58e3      	ldr	r3, [r4, r3]
 800cef2:	9805      	ldr	r0, [sp, #20]
 800cef4:	4798      	blx	r3
 800cef6:	9b01      	ldr	r3, [sp, #4]
 800cef8:	2001      	movs	r0, #1
 800cefa:	429d      	cmp	r5, r3
 800cefc:	d029      	beq.n	800cf52 <_scanf_i+0x1ea>
 800cefe:	6821      	ldr	r1, [r4, #0]
 800cf00:	2310      	movs	r3, #16
 800cf02:	000a      	movs	r2, r1
 800cf04:	401a      	ands	r2, r3
 800cf06:	4219      	tst	r1, r3
 800cf08:	d11c      	bne.n	800cf44 <_scanf_i+0x1dc>
 800cf0a:	702a      	strb	r2, [r5, #0]
 800cf0c:	6863      	ldr	r3, [r4, #4]
 800cf0e:	9901      	ldr	r1, [sp, #4]
 800cf10:	9805      	ldr	r0, [sp, #20]
 800cf12:	9e06      	ldr	r6, [sp, #24]
 800cf14:	47b0      	blx	r6
 800cf16:	9b02      	ldr	r3, [sp, #8]
 800cf18:	6821      	ldr	r1, [r4, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	068a      	lsls	r2, r1, #26
 800cf1e:	d507      	bpl.n	800cf30 <_scanf_i+0x1c8>
 800cf20:	1d1a      	adds	r2, r3, #4
 800cf22:	9902      	ldr	r1, [sp, #8]
 800cf24:	600a      	str	r2, [r1, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6018      	str	r0, [r3, #0]
 800cf2a:	e008      	b.n	800cf3e <_scanf_i+0x1d6>
 800cf2c:	2700      	movs	r7, #0
 800cf2e:	e7d4      	b.n	800ceda <_scanf_i+0x172>
 800cf30:	1d1a      	adds	r2, r3, #4
 800cf32:	07ce      	lsls	r6, r1, #31
 800cf34:	d5f5      	bpl.n	800cf22 <_scanf_i+0x1ba>
 800cf36:	9902      	ldr	r1, [sp, #8]
 800cf38:	600a      	str	r2, [r1, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	8018      	strh	r0, [r3, #0]
 800cf3e:	68e3      	ldr	r3, [r4, #12]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60e3      	str	r3, [r4, #12]
 800cf44:	2000      	movs	r0, #0
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	1aed      	subs	r5, r5, r3
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	19ef      	adds	r7, r5, r7
 800cf4e:	19df      	adds	r7, r3, r7
 800cf50:	6127      	str	r7, [r4, #16]
 800cf52:	b00d      	add	sp, #52	; 0x34
 800cf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf56:	46c0      	nop			; (mov r8, r8)
 800cf58:	0800df14 	.word	0x0800df14
 800cf5c:	0800a625 	.word	0x0800a625
 800cf60:	0800d17d 	.word	0x0800d17d
 800cf64:	fffffaff 	.word	0xfffffaff
 800cf68:	0800e3d6 	.word	0x0800e3d6
 800cf6c:	fffff6ff 	.word	0xfffff6ff

0800cf70 <_read_r>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	0004      	movs	r4, r0
 800cf74:	0008      	movs	r0, r1
 800cf76:	0011      	movs	r1, r2
 800cf78:	001a      	movs	r2, r3
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	4d05      	ldr	r5, [pc, #20]	; (800cf94 <_read_r+0x24>)
 800cf7e:	602b      	str	r3, [r5, #0]
 800cf80:	f7f7 faea 	bl	8004558 <_read>
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	d103      	bne.n	800cf90 <_read_r+0x20>
 800cf88:	682b      	ldr	r3, [r5, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d000      	beq.n	800cf90 <_read_r+0x20>
 800cf8e:	6023      	str	r3, [r4, #0]
 800cf90:	bd70      	pop	{r4, r5, r6, pc}
 800cf92:	46c0      	nop			; (mov r8, r8)
 800cf94:	20000614 	.word	0x20000614

0800cf98 <nan>:
 800cf98:	2000      	movs	r0, #0
 800cf9a:	4901      	ldr	r1, [pc, #4]	; (800cfa0 <nan+0x8>)
 800cf9c:	4770      	bx	lr
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	7ff80000 	.word	0x7ff80000

0800cfa4 <_sbrk_r>:
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	b570      	push	{r4, r5, r6, lr}
 800cfa8:	4d06      	ldr	r5, [pc, #24]	; (800cfc4 <_sbrk_r+0x20>)
 800cfaa:	0004      	movs	r4, r0
 800cfac:	0008      	movs	r0, r1
 800cfae:	602b      	str	r3, [r5, #0]
 800cfb0:	f7f7 fb38 	bl	8004624 <_sbrk>
 800cfb4:	1c43      	adds	r3, r0, #1
 800cfb6:	d103      	bne.n	800cfc0 <_sbrk_r+0x1c>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d000      	beq.n	800cfc0 <_sbrk_r+0x1c>
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	bd70      	pop	{r4, r5, r6, pc}
 800cfc2:	46c0      	nop			; (mov r8, r8)
 800cfc4:	20000614 	.word	0x20000614

0800cfc8 <__sccl>:
 800cfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfca:	780b      	ldrb	r3, [r1, #0]
 800cfcc:	0004      	movs	r4, r0
 800cfce:	2b5e      	cmp	r3, #94	; 0x5e
 800cfd0:	d00c      	beq.n	800cfec <__sccl+0x24>
 800cfd2:	1c48      	adds	r0, r1, #1
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	0022      	movs	r2, r4
 800cfd8:	1c65      	adds	r5, r4, #1
 800cfda:	35ff      	adds	r5, #255	; 0xff
 800cfdc:	7011      	strb	r1, [r2, #0]
 800cfde:	3201      	adds	r2, #1
 800cfe0:	42aa      	cmp	r2, r5
 800cfe2:	d1fb      	bne.n	800cfdc <__sccl+0x14>
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d105      	bne.n	800cff4 <__sccl+0x2c>
 800cfe8:	3801      	subs	r0, #1
 800cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfec:	784b      	ldrb	r3, [r1, #1]
 800cfee:	1c88      	adds	r0, r1, #2
 800cff0:	2101      	movs	r1, #1
 800cff2:	e7f0      	b.n	800cfd6 <__sccl+0xe>
 800cff4:	2201      	movs	r2, #1
 800cff6:	262d      	movs	r6, #45	; 0x2d
 800cff8:	4051      	eors	r1, r2
 800cffa:	0002      	movs	r2, r0
 800cffc:	54e1      	strb	r1, [r4, r3]
 800cffe:	7815      	ldrb	r5, [r2, #0]
 800d000:	1c50      	adds	r0, r2, #1
 800d002:	2d2d      	cmp	r5, #45	; 0x2d
 800d004:	d009      	beq.n	800d01a <__sccl+0x52>
 800d006:	2d5d      	cmp	r5, #93	; 0x5d
 800d008:	d0ef      	beq.n	800cfea <__sccl+0x22>
 800d00a:	2d00      	cmp	r5, #0
 800d00c:	d101      	bne.n	800d012 <__sccl+0x4a>
 800d00e:	0010      	movs	r0, r2
 800d010:	e7eb      	b.n	800cfea <__sccl+0x22>
 800d012:	002b      	movs	r3, r5
 800d014:	e7f1      	b.n	800cffa <__sccl+0x32>
 800d016:	0033      	movs	r3, r6
 800d018:	e7ef      	b.n	800cffa <__sccl+0x32>
 800d01a:	7855      	ldrb	r5, [r2, #1]
 800d01c:	2d5d      	cmp	r5, #93	; 0x5d
 800d01e:	d0fa      	beq.n	800d016 <__sccl+0x4e>
 800d020:	42ab      	cmp	r3, r5
 800d022:	dcf8      	bgt.n	800d016 <__sccl+0x4e>
 800d024:	0018      	movs	r0, r3
 800d026:	3202      	adds	r2, #2
 800d028:	3001      	adds	r0, #1
 800d02a:	5421      	strb	r1, [r4, r0]
 800d02c:	4285      	cmp	r5, r0
 800d02e:	dcfb      	bgt.n	800d028 <__sccl+0x60>
 800d030:	2000      	movs	r0, #0
 800d032:	1c5f      	adds	r7, r3, #1
 800d034:	42ab      	cmp	r3, r5
 800d036:	da01      	bge.n	800d03c <__sccl+0x74>
 800d038:	1ae8      	subs	r0, r5, r3
 800d03a:	3801      	subs	r0, #1
 800d03c:	183b      	adds	r3, r7, r0
 800d03e:	e7de      	b.n	800cffe <__sccl+0x36>

0800d040 <strncmp>:
 800d040:	b530      	push	{r4, r5, lr}
 800d042:	0005      	movs	r5, r0
 800d044:	1e10      	subs	r0, r2, #0
 800d046:	d00b      	beq.n	800d060 <strncmp+0x20>
 800d048:	2400      	movs	r4, #0
 800d04a:	3a01      	subs	r2, #1
 800d04c:	5d2b      	ldrb	r3, [r5, r4]
 800d04e:	5d08      	ldrb	r0, [r1, r4]
 800d050:	4283      	cmp	r3, r0
 800d052:	d104      	bne.n	800d05e <strncmp+0x1e>
 800d054:	4294      	cmp	r4, r2
 800d056:	d002      	beq.n	800d05e <strncmp+0x1e>
 800d058:	3401      	adds	r4, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1f6      	bne.n	800d04c <strncmp+0xc>
 800d05e:	1a18      	subs	r0, r3, r0
 800d060:	bd30      	pop	{r4, r5, pc}
	...

0800d064 <_strtoul_l.isra.0>:
 800d064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d066:	001e      	movs	r6, r3
 800d068:	4b43      	ldr	r3, [pc, #268]	; (800d178 <_strtoul_l.isra.0+0x114>)
 800d06a:	b087      	sub	sp, #28
 800d06c:	000f      	movs	r7, r1
 800d06e:	9101      	str	r1, [sp, #4]
 800d070:	469c      	mov	ip, r3
 800d072:	2108      	movs	r1, #8
 800d074:	9005      	str	r0, [sp, #20]
 800d076:	9202      	str	r2, [sp, #8]
 800d078:	003b      	movs	r3, r7
 800d07a:	4662      	mov	r2, ip
 800d07c:	781c      	ldrb	r4, [r3, #0]
 800d07e:	1c7d      	adds	r5, r7, #1
 800d080:	5d10      	ldrb	r0, [r2, r4]
 800d082:	002f      	movs	r7, r5
 800d084:	0002      	movs	r2, r0
 800d086:	400a      	ands	r2, r1
 800d088:	4208      	tst	r0, r1
 800d08a:	d1f5      	bne.n	800d078 <_strtoul_l.isra.0+0x14>
 800d08c:	2c2d      	cmp	r4, #45	; 0x2d
 800d08e:	d13a      	bne.n	800d106 <_strtoul_l.isra.0+0xa2>
 800d090:	2701      	movs	r7, #1
 800d092:	782c      	ldrb	r4, [r5, #0]
 800d094:	1c9d      	adds	r5, r3, #2
 800d096:	2e00      	cmp	r6, #0
 800d098:	d069      	beq.n	800d16e <_strtoul_l.isra.0+0x10a>
 800d09a:	2e10      	cmp	r6, #16
 800d09c:	d109      	bne.n	800d0b2 <_strtoul_l.isra.0+0x4e>
 800d09e:	2c30      	cmp	r4, #48	; 0x30
 800d0a0:	d107      	bne.n	800d0b2 <_strtoul_l.isra.0+0x4e>
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	782b      	ldrb	r3, [r5, #0]
 800d0a6:	4393      	bics	r3, r2
 800d0a8:	2b58      	cmp	r3, #88	; 0x58
 800d0aa:	d15b      	bne.n	800d164 <_strtoul_l.isra.0+0x100>
 800d0ac:	2610      	movs	r6, #16
 800d0ae:	786c      	ldrb	r4, [r5, #1]
 800d0b0:	3502      	adds	r5, #2
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	0031      	movs	r1, r6
 800d0b6:	4240      	negs	r0, r0
 800d0b8:	f7f3 f84c 	bl	8000154 <__udivsi3>
 800d0bc:	9003      	str	r0, [sp, #12]
 800d0be:	2001      	movs	r0, #1
 800d0c0:	0031      	movs	r1, r6
 800d0c2:	4240      	negs	r0, r0
 800d0c4:	f7f3 f8cc 	bl	8000260 <__aeabi_uidivmod>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	9104      	str	r1, [sp, #16]
 800d0cc:	2101      	movs	r1, #1
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	468c      	mov	ip, r1
 800d0d4:	4252      	negs	r2, r2
 800d0d6:	0021      	movs	r1, r4
 800d0d8:	3930      	subs	r1, #48	; 0x30
 800d0da:	2909      	cmp	r1, #9
 800d0dc:	d81a      	bhi.n	800d114 <_strtoul_l.isra.0+0xb0>
 800d0de:	000c      	movs	r4, r1
 800d0e0:	42a6      	cmp	r6, r4
 800d0e2:	dd25      	ble.n	800d130 <_strtoul_l.isra.0+0xcc>
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	db21      	blt.n	800d12c <_strtoul_l.isra.0+0xc8>
 800d0e8:	9903      	ldr	r1, [sp, #12]
 800d0ea:	0013      	movs	r3, r2
 800d0ec:	4281      	cmp	r1, r0
 800d0ee:	d307      	bcc.n	800d100 <_strtoul_l.isra.0+0x9c>
 800d0f0:	d103      	bne.n	800d0fa <_strtoul_l.isra.0+0x96>
 800d0f2:	9904      	ldr	r1, [sp, #16]
 800d0f4:	0013      	movs	r3, r2
 800d0f6:	42a1      	cmp	r1, r4
 800d0f8:	db02      	blt.n	800d100 <_strtoul_l.isra.0+0x9c>
 800d0fa:	4663      	mov	r3, ip
 800d0fc:	4370      	muls	r0, r6
 800d0fe:	1820      	adds	r0, r4, r0
 800d100:	782c      	ldrb	r4, [r5, #0]
 800d102:	3501      	adds	r5, #1
 800d104:	e7e7      	b.n	800d0d6 <_strtoul_l.isra.0+0x72>
 800d106:	2c2b      	cmp	r4, #43	; 0x2b
 800d108:	d001      	beq.n	800d10e <_strtoul_l.isra.0+0xaa>
 800d10a:	0017      	movs	r7, r2
 800d10c:	e7c3      	b.n	800d096 <_strtoul_l.isra.0+0x32>
 800d10e:	782c      	ldrb	r4, [r5, #0]
 800d110:	1c9d      	adds	r5, r3, #2
 800d112:	e7fa      	b.n	800d10a <_strtoul_l.isra.0+0xa6>
 800d114:	0021      	movs	r1, r4
 800d116:	3941      	subs	r1, #65	; 0x41
 800d118:	2919      	cmp	r1, #25
 800d11a:	d801      	bhi.n	800d120 <_strtoul_l.isra.0+0xbc>
 800d11c:	3c37      	subs	r4, #55	; 0x37
 800d11e:	e7df      	b.n	800d0e0 <_strtoul_l.isra.0+0x7c>
 800d120:	0021      	movs	r1, r4
 800d122:	3961      	subs	r1, #97	; 0x61
 800d124:	2919      	cmp	r1, #25
 800d126:	d803      	bhi.n	800d130 <_strtoul_l.isra.0+0xcc>
 800d128:	3c57      	subs	r4, #87	; 0x57
 800d12a:	e7d9      	b.n	800d0e0 <_strtoul_l.isra.0+0x7c>
 800d12c:	0013      	movs	r3, r2
 800d12e:	e7e7      	b.n	800d100 <_strtoul_l.isra.0+0x9c>
 800d130:	2b00      	cmp	r3, #0
 800d132:	da09      	bge.n	800d148 <_strtoul_l.isra.0+0xe4>
 800d134:	2322      	movs	r3, #34	; 0x22
 800d136:	2001      	movs	r0, #1
 800d138:	9a05      	ldr	r2, [sp, #20]
 800d13a:	4240      	negs	r0, r0
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	9b02      	ldr	r3, [sp, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d109      	bne.n	800d158 <_strtoul_l.isra.0+0xf4>
 800d144:	b007      	add	sp, #28
 800d146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d148:	2f00      	cmp	r7, #0
 800d14a:	d000      	beq.n	800d14e <_strtoul_l.isra.0+0xea>
 800d14c:	4240      	negs	r0, r0
 800d14e:	9a02      	ldr	r2, [sp, #8]
 800d150:	2a00      	cmp	r2, #0
 800d152:	d0f7      	beq.n	800d144 <_strtoul_l.isra.0+0xe0>
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <_strtoul_l.isra.0+0xf8>
 800d158:	1e6b      	subs	r3, r5, #1
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	9b02      	ldr	r3, [sp, #8]
 800d15e:	9a01      	ldr	r2, [sp, #4]
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	e7ef      	b.n	800d144 <_strtoul_l.isra.0+0xe0>
 800d164:	2430      	movs	r4, #48	; 0x30
 800d166:	2e00      	cmp	r6, #0
 800d168:	d1a3      	bne.n	800d0b2 <_strtoul_l.isra.0+0x4e>
 800d16a:	3608      	adds	r6, #8
 800d16c:	e7a1      	b.n	800d0b2 <_strtoul_l.isra.0+0x4e>
 800d16e:	2c30      	cmp	r4, #48	; 0x30
 800d170:	d097      	beq.n	800d0a2 <_strtoul_l.isra.0+0x3e>
 800d172:	260a      	movs	r6, #10
 800d174:	e79d      	b.n	800d0b2 <_strtoul_l.isra.0+0x4e>
 800d176:	46c0      	nop			; (mov r8, r8)
 800d178:	0800e049 	.word	0x0800e049

0800d17c <_strtoul_r>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	f7ff ff71 	bl	800d064 <_strtoul_l.isra.0>
 800d182:	bd10      	pop	{r4, pc}

0800d184 <__submore>:
 800d184:	000b      	movs	r3, r1
 800d186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d188:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d18a:	3344      	adds	r3, #68	; 0x44
 800d18c:	000c      	movs	r4, r1
 800d18e:	429d      	cmp	r5, r3
 800d190:	d11c      	bne.n	800d1cc <__submore+0x48>
 800d192:	2680      	movs	r6, #128	; 0x80
 800d194:	00f6      	lsls	r6, r6, #3
 800d196:	0031      	movs	r1, r6
 800d198:	f7ff f9f4 	bl	800c584 <_malloc_r>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d102      	bne.n	800d1a6 <__submore+0x22>
 800d1a0:	2001      	movs	r0, #1
 800d1a2:	4240      	negs	r0, r0
 800d1a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1a6:	0023      	movs	r3, r4
 800d1a8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1aa:	63a6      	str	r6, [r4, #56]	; 0x38
 800d1ac:	3346      	adds	r3, #70	; 0x46
 800d1ae:	781a      	ldrb	r2, [r3, #0]
 800d1b0:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <__submore+0x70>)
 800d1b2:	54c2      	strb	r2, [r0, r3]
 800d1b4:	0023      	movs	r3, r4
 800d1b6:	3345      	adds	r3, #69	; 0x45
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	4b0f      	ldr	r3, [pc, #60]	; (800d1f8 <__submore+0x74>)
 800d1bc:	54c2      	strb	r2, [r0, r3]
 800d1be:	782a      	ldrb	r2, [r5, #0]
 800d1c0:	4b0e      	ldr	r3, [pc, #56]	; (800d1fc <__submore+0x78>)
 800d1c2:	54c2      	strb	r2, [r0, r3]
 800d1c4:	18c0      	adds	r0, r0, r3
 800d1c6:	6020      	str	r0, [r4, #0]
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	e7eb      	b.n	800d1a4 <__submore+0x20>
 800d1cc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800d1ce:	0029      	movs	r1, r5
 800d1d0:	0073      	lsls	r3, r6, #1
 800d1d2:	001a      	movs	r2, r3
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	f000 fa43 	bl	800d660 <_realloc_r>
 800d1da:	1e05      	subs	r5, r0, #0
 800d1dc:	d0e0      	beq.n	800d1a0 <__submore+0x1c>
 800d1de:	1987      	adds	r7, r0, r6
 800d1e0:	0001      	movs	r1, r0
 800d1e2:	0032      	movs	r2, r6
 800d1e4:	0038      	movs	r0, r7
 800d1e6:	f7fe fca2 	bl	800bb2e <memcpy>
 800d1ea:	9b01      	ldr	r3, [sp, #4]
 800d1ec:	6027      	str	r7, [r4, #0]
 800d1ee:	6365      	str	r5, [r4, #52]	; 0x34
 800d1f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1f2:	e7e9      	b.n	800d1c8 <__submore+0x44>
 800d1f4:	000003ff 	.word	0x000003ff
 800d1f8:	000003fe 	.word	0x000003fe
 800d1fc:	000003fd 	.word	0x000003fd

0800d200 <__ascii_wctomb>:
 800d200:	0003      	movs	r3, r0
 800d202:	1e08      	subs	r0, r1, #0
 800d204:	d005      	beq.n	800d212 <__ascii_wctomb+0x12>
 800d206:	2aff      	cmp	r2, #255	; 0xff
 800d208:	d904      	bls.n	800d214 <__ascii_wctomb+0x14>
 800d20a:	228a      	movs	r2, #138	; 0x8a
 800d20c:	2001      	movs	r0, #1
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	4240      	negs	r0, r0
 800d212:	4770      	bx	lr
 800d214:	2001      	movs	r0, #1
 800d216:	700a      	strb	r2, [r1, #0]
 800d218:	e7fb      	b.n	800d212 <__ascii_wctomb+0x12>
	...

0800d21c <__assert_func>:
 800d21c:	b530      	push	{r4, r5, lr}
 800d21e:	0014      	movs	r4, r2
 800d220:	001a      	movs	r2, r3
 800d222:	4b09      	ldr	r3, [pc, #36]	; (800d248 <__assert_func+0x2c>)
 800d224:	0005      	movs	r5, r0
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	b085      	sub	sp, #20
 800d22a:	68d8      	ldr	r0, [r3, #12]
 800d22c:	4b07      	ldr	r3, [pc, #28]	; (800d24c <__assert_func+0x30>)
 800d22e:	2c00      	cmp	r4, #0
 800d230:	d101      	bne.n	800d236 <__assert_func+0x1a>
 800d232:	4b07      	ldr	r3, [pc, #28]	; (800d250 <__assert_func+0x34>)
 800d234:	001c      	movs	r4, r3
 800d236:	9301      	str	r3, [sp, #4]
 800d238:	9100      	str	r1, [sp, #0]
 800d23a:	002b      	movs	r3, r5
 800d23c:	4905      	ldr	r1, [pc, #20]	; (800d254 <__assert_func+0x38>)
 800d23e:	9402      	str	r4, [sp, #8]
 800d240:	f000 f9b8 	bl	800d5b4 <fiprintf>
 800d244:	f000 fc62 	bl	800db0c <abort>
 800d248:	2000000c 	.word	0x2000000c
 800d24c:	0800e3e8 	.word	0x0800e3e8
 800d250:	0800e423 	.word	0x0800e423
 800d254:	0800e3f5 	.word	0x0800e3f5

0800d258 <__sflush_r>:
 800d258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d25a:	898b      	ldrh	r3, [r1, #12]
 800d25c:	0005      	movs	r5, r0
 800d25e:	000c      	movs	r4, r1
 800d260:	071a      	lsls	r2, r3, #28
 800d262:	d45f      	bmi.n	800d324 <__sflush_r+0xcc>
 800d264:	684a      	ldr	r2, [r1, #4]
 800d266:	2a00      	cmp	r2, #0
 800d268:	dc04      	bgt.n	800d274 <__sflush_r+0x1c>
 800d26a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	dc01      	bgt.n	800d274 <__sflush_r+0x1c>
 800d270:	2000      	movs	r0, #0
 800d272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d274:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d276:	2f00      	cmp	r7, #0
 800d278:	d0fa      	beq.n	800d270 <__sflush_r+0x18>
 800d27a:	2200      	movs	r2, #0
 800d27c:	2180      	movs	r1, #128	; 0x80
 800d27e:	682e      	ldr	r6, [r5, #0]
 800d280:	602a      	str	r2, [r5, #0]
 800d282:	001a      	movs	r2, r3
 800d284:	0149      	lsls	r1, r1, #5
 800d286:	400a      	ands	r2, r1
 800d288:	420b      	tst	r3, r1
 800d28a:	d034      	beq.n	800d2f6 <__sflush_r+0x9e>
 800d28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	075b      	lsls	r3, r3, #29
 800d292:	d506      	bpl.n	800d2a2 <__sflush_r+0x4a>
 800d294:	6863      	ldr	r3, [r4, #4]
 800d296:	1ac0      	subs	r0, r0, r3
 800d298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <__sflush_r+0x4a>
 800d29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2a0:	1ac0      	subs	r0, r0, r3
 800d2a2:	0002      	movs	r2, r0
 800d2a4:	6a21      	ldr	r1, [r4, #32]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	0028      	movs	r0, r5
 800d2aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d2ac:	47b8      	blx	r7
 800d2ae:	89a1      	ldrh	r1, [r4, #12]
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d106      	bne.n	800d2c2 <__sflush_r+0x6a>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	2b1d      	cmp	r3, #29
 800d2b8:	d831      	bhi.n	800d31e <__sflush_r+0xc6>
 800d2ba:	4a2c      	ldr	r2, [pc, #176]	; (800d36c <__sflush_r+0x114>)
 800d2bc:	40da      	lsrs	r2, r3
 800d2be:	07d3      	lsls	r3, r2, #31
 800d2c0:	d52d      	bpl.n	800d31e <__sflush_r+0xc6>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	6063      	str	r3, [r4, #4]
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	04cb      	lsls	r3, r1, #19
 800d2cc:	d505      	bpl.n	800d2da <__sflush_r+0x82>
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	d102      	bne.n	800d2d8 <__sflush_r+0x80>
 800d2d2:	682b      	ldr	r3, [r5, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d100      	bne.n	800d2da <__sflush_r+0x82>
 800d2d8:	6560      	str	r0, [r4, #84]	; 0x54
 800d2da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2dc:	602e      	str	r6, [r5, #0]
 800d2de:	2900      	cmp	r1, #0
 800d2e0:	d0c6      	beq.n	800d270 <__sflush_r+0x18>
 800d2e2:	0023      	movs	r3, r4
 800d2e4:	3344      	adds	r3, #68	; 0x44
 800d2e6:	4299      	cmp	r1, r3
 800d2e8:	d002      	beq.n	800d2f0 <__sflush_r+0x98>
 800d2ea:	0028      	movs	r0, r5
 800d2ec:	f7ff f900 	bl	800c4f0 <_free_r>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	6360      	str	r0, [r4, #52]	; 0x34
 800d2f4:	e7bd      	b.n	800d272 <__sflush_r+0x1a>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	0028      	movs	r0, r5
 800d2fa:	6a21      	ldr	r1, [r4, #32]
 800d2fc:	47b8      	blx	r7
 800d2fe:	1c43      	adds	r3, r0, #1
 800d300:	d1c5      	bne.n	800d28e <__sflush_r+0x36>
 800d302:	682b      	ldr	r3, [r5, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d0c2      	beq.n	800d28e <__sflush_r+0x36>
 800d308:	2b1d      	cmp	r3, #29
 800d30a:	d001      	beq.n	800d310 <__sflush_r+0xb8>
 800d30c:	2b16      	cmp	r3, #22
 800d30e:	d101      	bne.n	800d314 <__sflush_r+0xbc>
 800d310:	602e      	str	r6, [r5, #0]
 800d312:	e7ad      	b.n	800d270 <__sflush_r+0x18>
 800d314:	2340      	movs	r3, #64	; 0x40
 800d316:	89a2      	ldrh	r2, [r4, #12]
 800d318:	4313      	orrs	r3, r2
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	e7a9      	b.n	800d272 <__sflush_r+0x1a>
 800d31e:	2340      	movs	r3, #64	; 0x40
 800d320:	430b      	orrs	r3, r1
 800d322:	e7fa      	b.n	800d31a <__sflush_r+0xc2>
 800d324:	690f      	ldr	r7, [r1, #16]
 800d326:	2f00      	cmp	r7, #0
 800d328:	d0a2      	beq.n	800d270 <__sflush_r+0x18>
 800d32a:	680a      	ldr	r2, [r1, #0]
 800d32c:	600f      	str	r7, [r1, #0]
 800d32e:	1bd2      	subs	r2, r2, r7
 800d330:	9201      	str	r2, [sp, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	079b      	lsls	r3, r3, #30
 800d336:	d100      	bne.n	800d33a <__sflush_r+0xe2>
 800d338:	694a      	ldr	r2, [r1, #20]
 800d33a:	60a2      	str	r2, [r4, #8]
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	dc00      	bgt.n	800d344 <__sflush_r+0xec>
 800d342:	e795      	b.n	800d270 <__sflush_r+0x18>
 800d344:	003a      	movs	r2, r7
 800d346:	0028      	movs	r0, r5
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	6a21      	ldr	r1, [r4, #32]
 800d34c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d34e:	47b0      	blx	r6
 800d350:	2800      	cmp	r0, #0
 800d352:	dc06      	bgt.n	800d362 <__sflush_r+0x10a>
 800d354:	2340      	movs	r3, #64	; 0x40
 800d356:	2001      	movs	r0, #1
 800d358:	89a2      	ldrh	r2, [r4, #12]
 800d35a:	4240      	negs	r0, r0
 800d35c:	4313      	orrs	r3, r2
 800d35e:	81a3      	strh	r3, [r4, #12]
 800d360:	e787      	b.n	800d272 <__sflush_r+0x1a>
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	183f      	adds	r7, r7, r0
 800d366:	1a1b      	subs	r3, r3, r0
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	e7e7      	b.n	800d33c <__sflush_r+0xe4>
 800d36c:	20400001 	.word	0x20400001

0800d370 <_fflush_r>:
 800d370:	690b      	ldr	r3, [r1, #16]
 800d372:	b570      	push	{r4, r5, r6, lr}
 800d374:	0005      	movs	r5, r0
 800d376:	000c      	movs	r4, r1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <_fflush_r+0x12>
 800d37c:	2500      	movs	r5, #0
 800d37e:	0028      	movs	r0, r5
 800d380:	bd70      	pop	{r4, r5, r6, pc}
 800d382:	2800      	cmp	r0, #0
 800d384:	d004      	beq.n	800d390 <_fflush_r+0x20>
 800d386:	6983      	ldr	r3, [r0, #24]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <_fflush_r+0x20>
 800d38c:	f000 f892 	bl	800d4b4 <__sinit>
 800d390:	4b14      	ldr	r3, [pc, #80]	; (800d3e4 <_fflush_r+0x74>)
 800d392:	429c      	cmp	r4, r3
 800d394:	d11b      	bne.n	800d3ce <_fflush_r+0x5e>
 800d396:	686c      	ldr	r4, [r5, #4]
 800d398:	220c      	movs	r2, #12
 800d39a:	5ea3      	ldrsh	r3, [r4, r2]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0ed      	beq.n	800d37c <_fflush_r+0xc>
 800d3a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3a2:	07d2      	lsls	r2, r2, #31
 800d3a4:	d404      	bmi.n	800d3b0 <_fflush_r+0x40>
 800d3a6:	059b      	lsls	r3, r3, #22
 800d3a8:	d402      	bmi.n	800d3b0 <_fflush_r+0x40>
 800d3aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ac:	f000 f933 	bl	800d616 <__retarget_lock_acquire_recursive>
 800d3b0:	0028      	movs	r0, r5
 800d3b2:	0021      	movs	r1, r4
 800d3b4:	f7ff ff50 	bl	800d258 <__sflush_r>
 800d3b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3ba:	0005      	movs	r5, r0
 800d3bc:	07db      	lsls	r3, r3, #31
 800d3be:	d4de      	bmi.n	800d37e <_fflush_r+0xe>
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	059b      	lsls	r3, r3, #22
 800d3c4:	d4db      	bmi.n	800d37e <_fflush_r+0xe>
 800d3c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3c8:	f000 f926 	bl	800d618 <__retarget_lock_release_recursive>
 800d3cc:	e7d7      	b.n	800d37e <_fflush_r+0xe>
 800d3ce:	4b06      	ldr	r3, [pc, #24]	; (800d3e8 <_fflush_r+0x78>)
 800d3d0:	429c      	cmp	r4, r3
 800d3d2:	d101      	bne.n	800d3d8 <_fflush_r+0x68>
 800d3d4:	68ac      	ldr	r4, [r5, #8]
 800d3d6:	e7df      	b.n	800d398 <_fflush_r+0x28>
 800d3d8:	4b04      	ldr	r3, [pc, #16]	; (800d3ec <_fflush_r+0x7c>)
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	d1dc      	bne.n	800d398 <_fflush_r+0x28>
 800d3de:	68ec      	ldr	r4, [r5, #12]
 800d3e0:	e7da      	b.n	800d398 <_fflush_r+0x28>
 800d3e2:	46c0      	nop			; (mov r8, r8)
 800d3e4:	0800e444 	.word	0x0800e444
 800d3e8:	0800e464 	.word	0x0800e464
 800d3ec:	0800e424 	.word	0x0800e424

0800d3f0 <std>:
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	b510      	push	{r4, lr}
 800d3f4:	0004      	movs	r4, r0
 800d3f6:	6003      	str	r3, [r0, #0]
 800d3f8:	6043      	str	r3, [r0, #4]
 800d3fa:	6083      	str	r3, [r0, #8]
 800d3fc:	8181      	strh	r1, [r0, #12]
 800d3fe:	6643      	str	r3, [r0, #100]	; 0x64
 800d400:	0019      	movs	r1, r3
 800d402:	81c2      	strh	r2, [r0, #14]
 800d404:	6103      	str	r3, [r0, #16]
 800d406:	6143      	str	r3, [r0, #20]
 800d408:	6183      	str	r3, [r0, #24]
 800d40a:	2208      	movs	r2, #8
 800d40c:	305c      	adds	r0, #92	; 0x5c
 800d40e:	f7fb fb0b 	bl	8008a28 <memset>
 800d412:	4b05      	ldr	r3, [pc, #20]	; (800d428 <std+0x38>)
 800d414:	6263      	str	r3, [r4, #36]	; 0x24
 800d416:	4b05      	ldr	r3, [pc, #20]	; (800d42c <std+0x3c>)
 800d418:	6224      	str	r4, [r4, #32]
 800d41a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d41c:	4b04      	ldr	r3, [pc, #16]	; (800d430 <std+0x40>)
 800d41e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d420:	4b04      	ldr	r3, [pc, #16]	; (800d434 <std+0x44>)
 800d422:	6323      	str	r3, [r4, #48]	; 0x30
 800d424:	bd10      	pop	{r4, pc}
 800d426:	46c0      	nop			; (mov r8, r8)
 800d428:	080097d5 	.word	0x080097d5
 800d42c:	08009801 	.word	0x08009801
 800d430:	08009839 	.word	0x08009839
 800d434:	08009865 	.word	0x08009865

0800d438 <_cleanup_r>:
 800d438:	b510      	push	{r4, lr}
 800d43a:	4902      	ldr	r1, [pc, #8]	; (800d444 <_cleanup_r+0xc>)
 800d43c:	f000 f8ca 	bl	800d5d4 <_fwalk_reent>
 800d440:	bd10      	pop	{r4, pc}
 800d442:	46c0      	nop			; (mov r8, r8)
 800d444:	0800d371 	.word	0x0800d371

0800d448 <__sfmoreglue>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	2568      	movs	r5, #104	; 0x68
 800d44c:	1e4a      	subs	r2, r1, #1
 800d44e:	4355      	muls	r5, r2
 800d450:	000e      	movs	r6, r1
 800d452:	0029      	movs	r1, r5
 800d454:	3174      	adds	r1, #116	; 0x74
 800d456:	f7ff f895 	bl	800c584 <_malloc_r>
 800d45a:	1e04      	subs	r4, r0, #0
 800d45c:	d008      	beq.n	800d470 <__sfmoreglue+0x28>
 800d45e:	2100      	movs	r1, #0
 800d460:	002a      	movs	r2, r5
 800d462:	6001      	str	r1, [r0, #0]
 800d464:	6046      	str	r6, [r0, #4]
 800d466:	300c      	adds	r0, #12
 800d468:	60a0      	str	r0, [r4, #8]
 800d46a:	3268      	adds	r2, #104	; 0x68
 800d46c:	f7fb fadc 	bl	8008a28 <memset>
 800d470:	0020      	movs	r0, r4
 800d472:	bd70      	pop	{r4, r5, r6, pc}

0800d474 <__sfp_lock_acquire>:
 800d474:	b510      	push	{r4, lr}
 800d476:	4802      	ldr	r0, [pc, #8]	; (800d480 <__sfp_lock_acquire+0xc>)
 800d478:	f000 f8cd 	bl	800d616 <__retarget_lock_acquire_recursive>
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	46c0      	nop			; (mov r8, r8)
 800d480:	20000620 	.word	0x20000620

0800d484 <__sfp_lock_release>:
 800d484:	b510      	push	{r4, lr}
 800d486:	4802      	ldr	r0, [pc, #8]	; (800d490 <__sfp_lock_release+0xc>)
 800d488:	f000 f8c6 	bl	800d618 <__retarget_lock_release_recursive>
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	46c0      	nop			; (mov r8, r8)
 800d490:	20000620 	.word	0x20000620

0800d494 <__sinit_lock_acquire>:
 800d494:	b510      	push	{r4, lr}
 800d496:	4802      	ldr	r0, [pc, #8]	; (800d4a0 <__sinit_lock_acquire+0xc>)
 800d498:	f000 f8bd 	bl	800d616 <__retarget_lock_acquire_recursive>
 800d49c:	bd10      	pop	{r4, pc}
 800d49e:	46c0      	nop			; (mov r8, r8)
 800d4a0:	2000061b 	.word	0x2000061b

0800d4a4 <__sinit_lock_release>:
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	4802      	ldr	r0, [pc, #8]	; (800d4b0 <__sinit_lock_release+0xc>)
 800d4a8:	f000 f8b6 	bl	800d618 <__retarget_lock_release_recursive>
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	46c0      	nop			; (mov r8, r8)
 800d4b0:	2000061b 	.word	0x2000061b

0800d4b4 <__sinit>:
 800d4b4:	b513      	push	{r0, r1, r4, lr}
 800d4b6:	0004      	movs	r4, r0
 800d4b8:	f7ff ffec 	bl	800d494 <__sinit_lock_acquire>
 800d4bc:	69a3      	ldr	r3, [r4, #24]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <__sinit+0x14>
 800d4c2:	f7ff ffef 	bl	800d4a4 <__sinit_lock_release>
 800d4c6:	bd13      	pop	{r0, r1, r4, pc}
 800d4c8:	64a3      	str	r3, [r4, #72]	; 0x48
 800d4ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d4cc:	6523      	str	r3, [r4, #80]	; 0x50
 800d4ce:	4b13      	ldr	r3, [pc, #76]	; (800d51c <__sinit+0x68>)
 800d4d0:	4a13      	ldr	r2, [pc, #76]	; (800d520 <__sinit+0x6c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	42a3      	cmp	r3, r4
 800d4da:	d101      	bne.n	800d4e0 <__sinit+0x2c>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	61a3      	str	r3, [r4, #24]
 800d4e0:	0020      	movs	r0, r4
 800d4e2:	f000 f81f 	bl	800d524 <__sfp>
 800d4e6:	6060      	str	r0, [r4, #4]
 800d4e8:	0020      	movs	r0, r4
 800d4ea:	f000 f81b 	bl	800d524 <__sfp>
 800d4ee:	60a0      	str	r0, [r4, #8]
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	f000 f817 	bl	800d524 <__sfp>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	2104      	movs	r1, #4
 800d4fa:	60e0      	str	r0, [r4, #12]
 800d4fc:	6860      	ldr	r0, [r4, #4]
 800d4fe:	f7ff ff77 	bl	800d3f0 <std>
 800d502:	2201      	movs	r2, #1
 800d504:	2109      	movs	r1, #9
 800d506:	68a0      	ldr	r0, [r4, #8]
 800d508:	f7ff ff72 	bl	800d3f0 <std>
 800d50c:	2202      	movs	r2, #2
 800d50e:	2112      	movs	r1, #18
 800d510:	68e0      	ldr	r0, [r4, #12]
 800d512:	f7ff ff6d 	bl	800d3f0 <std>
 800d516:	2301      	movs	r3, #1
 800d518:	61a3      	str	r3, [r4, #24]
 800d51a:	e7d2      	b.n	800d4c2 <__sinit+0xe>
 800d51c:	0800dfb8 	.word	0x0800dfb8
 800d520:	0800d439 	.word	0x0800d439

0800d524 <__sfp>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	0007      	movs	r7, r0
 800d528:	f7ff ffa4 	bl	800d474 <__sfp_lock_acquire>
 800d52c:	4b1f      	ldr	r3, [pc, #124]	; (800d5ac <__sfp+0x88>)
 800d52e:	681e      	ldr	r6, [r3, #0]
 800d530:	69b3      	ldr	r3, [r6, #24]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <__sfp+0x18>
 800d536:	0030      	movs	r0, r6
 800d538:	f7ff ffbc 	bl	800d4b4 <__sinit>
 800d53c:	3648      	adds	r6, #72	; 0x48
 800d53e:	68b4      	ldr	r4, [r6, #8]
 800d540:	6873      	ldr	r3, [r6, #4]
 800d542:	3b01      	subs	r3, #1
 800d544:	d504      	bpl.n	800d550 <__sfp+0x2c>
 800d546:	6833      	ldr	r3, [r6, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d022      	beq.n	800d592 <__sfp+0x6e>
 800d54c:	6836      	ldr	r6, [r6, #0]
 800d54e:	e7f6      	b.n	800d53e <__sfp+0x1a>
 800d550:	220c      	movs	r2, #12
 800d552:	5ea5      	ldrsh	r5, [r4, r2]
 800d554:	2d00      	cmp	r5, #0
 800d556:	d11a      	bne.n	800d58e <__sfp+0x6a>
 800d558:	0020      	movs	r0, r4
 800d55a:	4b15      	ldr	r3, [pc, #84]	; (800d5b0 <__sfp+0x8c>)
 800d55c:	3058      	adds	r0, #88	; 0x58
 800d55e:	60e3      	str	r3, [r4, #12]
 800d560:	6665      	str	r5, [r4, #100]	; 0x64
 800d562:	f000 f857 	bl	800d614 <__retarget_lock_init_recursive>
 800d566:	f7ff ff8d 	bl	800d484 <__sfp_lock_release>
 800d56a:	0020      	movs	r0, r4
 800d56c:	2208      	movs	r2, #8
 800d56e:	0029      	movs	r1, r5
 800d570:	6025      	str	r5, [r4, #0]
 800d572:	60a5      	str	r5, [r4, #8]
 800d574:	6065      	str	r5, [r4, #4]
 800d576:	6125      	str	r5, [r4, #16]
 800d578:	6165      	str	r5, [r4, #20]
 800d57a:	61a5      	str	r5, [r4, #24]
 800d57c:	305c      	adds	r0, #92	; 0x5c
 800d57e:	f7fb fa53 	bl	8008a28 <memset>
 800d582:	6365      	str	r5, [r4, #52]	; 0x34
 800d584:	63a5      	str	r5, [r4, #56]	; 0x38
 800d586:	64a5      	str	r5, [r4, #72]	; 0x48
 800d588:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d58a:	0020      	movs	r0, r4
 800d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d58e:	3468      	adds	r4, #104	; 0x68
 800d590:	e7d7      	b.n	800d542 <__sfp+0x1e>
 800d592:	2104      	movs	r1, #4
 800d594:	0038      	movs	r0, r7
 800d596:	f7ff ff57 	bl	800d448 <__sfmoreglue>
 800d59a:	1e04      	subs	r4, r0, #0
 800d59c:	6030      	str	r0, [r6, #0]
 800d59e:	d1d5      	bne.n	800d54c <__sfp+0x28>
 800d5a0:	f7ff ff70 	bl	800d484 <__sfp_lock_release>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	e7ef      	b.n	800d58a <__sfp+0x66>
 800d5aa:	46c0      	nop			; (mov r8, r8)
 800d5ac:	0800dfb8 	.word	0x0800dfb8
 800d5b0:	ffff0001 	.word	0xffff0001

0800d5b4 <fiprintf>:
 800d5b4:	b40e      	push	{r1, r2, r3}
 800d5b6:	b503      	push	{r0, r1, lr}
 800d5b8:	0001      	movs	r1, r0
 800d5ba:	ab03      	add	r3, sp, #12
 800d5bc:	4804      	ldr	r0, [pc, #16]	; (800d5d0 <fiprintf+0x1c>)
 800d5be:	cb04      	ldmia	r3!, {r2}
 800d5c0:	6800      	ldr	r0, [r0, #0]
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	f000 f89a 	bl	800d6fc <_vfiprintf_r>
 800d5c8:	b002      	add	sp, #8
 800d5ca:	bc08      	pop	{r3}
 800d5cc:	b003      	add	sp, #12
 800d5ce:	4718      	bx	r3
 800d5d0:	2000000c 	.word	0x2000000c

0800d5d4 <_fwalk_reent>:
 800d5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5d6:	0004      	movs	r4, r0
 800d5d8:	0006      	movs	r6, r0
 800d5da:	2700      	movs	r7, #0
 800d5dc:	9101      	str	r1, [sp, #4]
 800d5de:	3448      	adds	r4, #72	; 0x48
 800d5e0:	6863      	ldr	r3, [r4, #4]
 800d5e2:	68a5      	ldr	r5, [r4, #8]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	9b00      	ldr	r3, [sp, #0]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	d504      	bpl.n	800d5f8 <_fwalk_reent+0x24>
 800d5ee:	6824      	ldr	r4, [r4, #0]
 800d5f0:	2c00      	cmp	r4, #0
 800d5f2:	d1f5      	bne.n	800d5e0 <_fwalk_reent+0xc>
 800d5f4:	0038      	movs	r0, r7
 800d5f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5f8:	89ab      	ldrh	r3, [r5, #12]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d908      	bls.n	800d610 <_fwalk_reent+0x3c>
 800d5fe:	220e      	movs	r2, #14
 800d600:	5eab      	ldrsh	r3, [r5, r2]
 800d602:	3301      	adds	r3, #1
 800d604:	d004      	beq.n	800d610 <_fwalk_reent+0x3c>
 800d606:	0029      	movs	r1, r5
 800d608:	0030      	movs	r0, r6
 800d60a:	9b01      	ldr	r3, [sp, #4]
 800d60c:	4798      	blx	r3
 800d60e:	4307      	orrs	r7, r0
 800d610:	3568      	adds	r5, #104	; 0x68
 800d612:	e7e8      	b.n	800d5e6 <_fwalk_reent+0x12>

0800d614 <__retarget_lock_init_recursive>:
 800d614:	4770      	bx	lr

0800d616 <__retarget_lock_acquire_recursive>:
 800d616:	4770      	bx	lr

0800d618 <__retarget_lock_release_recursive>:
 800d618:	4770      	bx	lr

0800d61a <memmove>:
 800d61a:	b510      	push	{r4, lr}
 800d61c:	4288      	cmp	r0, r1
 800d61e:	d902      	bls.n	800d626 <memmove+0xc>
 800d620:	188b      	adds	r3, r1, r2
 800d622:	4298      	cmp	r0, r3
 800d624:	d303      	bcc.n	800d62e <memmove+0x14>
 800d626:	2300      	movs	r3, #0
 800d628:	e007      	b.n	800d63a <memmove+0x20>
 800d62a:	5c8b      	ldrb	r3, [r1, r2]
 800d62c:	5483      	strb	r3, [r0, r2]
 800d62e:	3a01      	subs	r2, #1
 800d630:	d2fb      	bcs.n	800d62a <memmove+0x10>
 800d632:	bd10      	pop	{r4, pc}
 800d634:	5ccc      	ldrb	r4, [r1, r3]
 800d636:	54c4      	strb	r4, [r0, r3]
 800d638:	3301      	adds	r3, #1
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d1fa      	bne.n	800d634 <memmove+0x1a>
 800d63e:	e7f8      	b.n	800d632 <memmove+0x18>

0800d640 <__malloc_lock>:
 800d640:	b510      	push	{r4, lr}
 800d642:	4802      	ldr	r0, [pc, #8]	; (800d64c <__malloc_lock+0xc>)
 800d644:	f7ff ffe7 	bl	800d616 <__retarget_lock_acquire_recursive>
 800d648:	bd10      	pop	{r4, pc}
 800d64a:	46c0      	nop			; (mov r8, r8)
 800d64c:	2000061c 	.word	0x2000061c

0800d650 <__malloc_unlock>:
 800d650:	b510      	push	{r4, lr}
 800d652:	4802      	ldr	r0, [pc, #8]	; (800d65c <__malloc_unlock+0xc>)
 800d654:	f7ff ffe0 	bl	800d618 <__retarget_lock_release_recursive>
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	46c0      	nop			; (mov r8, r8)
 800d65c:	2000061c 	.word	0x2000061c

0800d660 <_realloc_r>:
 800d660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d662:	0007      	movs	r7, r0
 800d664:	000d      	movs	r5, r1
 800d666:	0016      	movs	r6, r2
 800d668:	2900      	cmp	r1, #0
 800d66a:	d105      	bne.n	800d678 <_realloc_r+0x18>
 800d66c:	0011      	movs	r1, r2
 800d66e:	f7fe ff89 	bl	800c584 <_malloc_r>
 800d672:	0004      	movs	r4, r0
 800d674:	0020      	movs	r0, r4
 800d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d678:	2a00      	cmp	r2, #0
 800d67a:	d103      	bne.n	800d684 <_realloc_r+0x24>
 800d67c:	f7fe ff38 	bl	800c4f0 <_free_r>
 800d680:	0034      	movs	r4, r6
 800d682:	e7f7      	b.n	800d674 <_realloc_r+0x14>
 800d684:	f000 fab6 	bl	800dbf4 <_malloc_usable_size_r>
 800d688:	002c      	movs	r4, r5
 800d68a:	42b0      	cmp	r0, r6
 800d68c:	d2f2      	bcs.n	800d674 <_realloc_r+0x14>
 800d68e:	0031      	movs	r1, r6
 800d690:	0038      	movs	r0, r7
 800d692:	f7fe ff77 	bl	800c584 <_malloc_r>
 800d696:	1e04      	subs	r4, r0, #0
 800d698:	d0ec      	beq.n	800d674 <_realloc_r+0x14>
 800d69a:	0029      	movs	r1, r5
 800d69c:	0032      	movs	r2, r6
 800d69e:	f7fe fa46 	bl	800bb2e <memcpy>
 800d6a2:	0029      	movs	r1, r5
 800d6a4:	0038      	movs	r0, r7
 800d6a6:	f7fe ff23 	bl	800c4f0 <_free_r>
 800d6aa:	e7e3      	b.n	800d674 <_realloc_r+0x14>

0800d6ac <__sfputc_r>:
 800d6ac:	6893      	ldr	r3, [r2, #8]
 800d6ae:	b510      	push	{r4, lr}
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	6093      	str	r3, [r2, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	da04      	bge.n	800d6c2 <__sfputc_r+0x16>
 800d6b8:	6994      	ldr	r4, [r2, #24]
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	db07      	blt.n	800d6ce <__sfputc_r+0x22>
 800d6be:	290a      	cmp	r1, #10
 800d6c0:	d005      	beq.n	800d6ce <__sfputc_r+0x22>
 800d6c2:	6813      	ldr	r3, [r2, #0]
 800d6c4:	1c58      	adds	r0, r3, #1
 800d6c6:	6010      	str	r0, [r2, #0]
 800d6c8:	7019      	strb	r1, [r3, #0]
 800d6ca:	0008      	movs	r0, r1
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	f000 f94f 	bl	800d970 <__swbuf_r>
 800d6d2:	0001      	movs	r1, r0
 800d6d4:	e7f9      	b.n	800d6ca <__sfputc_r+0x1e>

0800d6d6 <__sfputs_r>:
 800d6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d8:	0006      	movs	r6, r0
 800d6da:	000f      	movs	r7, r1
 800d6dc:	0014      	movs	r4, r2
 800d6de:	18d5      	adds	r5, r2, r3
 800d6e0:	42ac      	cmp	r4, r5
 800d6e2:	d101      	bne.n	800d6e8 <__sfputs_r+0x12>
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	e007      	b.n	800d6f8 <__sfputs_r+0x22>
 800d6e8:	7821      	ldrb	r1, [r4, #0]
 800d6ea:	003a      	movs	r2, r7
 800d6ec:	0030      	movs	r0, r6
 800d6ee:	f7ff ffdd 	bl	800d6ac <__sfputc_r>
 800d6f2:	3401      	adds	r4, #1
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d1f3      	bne.n	800d6e0 <__sfputs_r+0xa>
 800d6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6fc <_vfiprintf_r>:
 800d6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fe:	b0a1      	sub	sp, #132	; 0x84
 800d700:	0006      	movs	r6, r0
 800d702:	000c      	movs	r4, r1
 800d704:	001f      	movs	r7, r3
 800d706:	9203      	str	r2, [sp, #12]
 800d708:	2800      	cmp	r0, #0
 800d70a:	d004      	beq.n	800d716 <_vfiprintf_r+0x1a>
 800d70c:	6983      	ldr	r3, [r0, #24]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <_vfiprintf_r+0x1a>
 800d712:	f7ff fecf 	bl	800d4b4 <__sinit>
 800d716:	4b8e      	ldr	r3, [pc, #568]	; (800d950 <_vfiprintf_r+0x254>)
 800d718:	429c      	cmp	r4, r3
 800d71a:	d11c      	bne.n	800d756 <_vfiprintf_r+0x5a>
 800d71c:	6874      	ldr	r4, [r6, #4]
 800d71e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d720:	07db      	lsls	r3, r3, #31
 800d722:	d405      	bmi.n	800d730 <_vfiprintf_r+0x34>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	059b      	lsls	r3, r3, #22
 800d728:	d402      	bmi.n	800d730 <_vfiprintf_r+0x34>
 800d72a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d72c:	f7ff ff73 	bl	800d616 <__retarget_lock_acquire_recursive>
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	071b      	lsls	r3, r3, #28
 800d734:	d502      	bpl.n	800d73c <_vfiprintf_r+0x40>
 800d736:	6923      	ldr	r3, [r4, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d11d      	bne.n	800d778 <_vfiprintf_r+0x7c>
 800d73c:	0021      	movs	r1, r4
 800d73e:	0030      	movs	r0, r6
 800d740:	f000 f96c 	bl	800da1c <__swsetup_r>
 800d744:	2800      	cmp	r0, #0
 800d746:	d017      	beq.n	800d778 <_vfiprintf_r+0x7c>
 800d748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d74a:	07db      	lsls	r3, r3, #31
 800d74c:	d50d      	bpl.n	800d76a <_vfiprintf_r+0x6e>
 800d74e:	2001      	movs	r0, #1
 800d750:	4240      	negs	r0, r0
 800d752:	b021      	add	sp, #132	; 0x84
 800d754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d756:	4b7f      	ldr	r3, [pc, #508]	; (800d954 <_vfiprintf_r+0x258>)
 800d758:	429c      	cmp	r4, r3
 800d75a:	d101      	bne.n	800d760 <_vfiprintf_r+0x64>
 800d75c:	68b4      	ldr	r4, [r6, #8]
 800d75e:	e7de      	b.n	800d71e <_vfiprintf_r+0x22>
 800d760:	4b7d      	ldr	r3, [pc, #500]	; (800d958 <_vfiprintf_r+0x25c>)
 800d762:	429c      	cmp	r4, r3
 800d764:	d1db      	bne.n	800d71e <_vfiprintf_r+0x22>
 800d766:	68f4      	ldr	r4, [r6, #12]
 800d768:	e7d9      	b.n	800d71e <_vfiprintf_r+0x22>
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	059b      	lsls	r3, r3, #22
 800d76e:	d4ee      	bmi.n	800d74e <_vfiprintf_r+0x52>
 800d770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d772:	f7ff ff51 	bl	800d618 <__retarget_lock_release_recursive>
 800d776:	e7ea      	b.n	800d74e <_vfiprintf_r+0x52>
 800d778:	2300      	movs	r3, #0
 800d77a:	ad08      	add	r5, sp, #32
 800d77c:	616b      	str	r3, [r5, #20]
 800d77e:	3320      	adds	r3, #32
 800d780:	766b      	strb	r3, [r5, #25]
 800d782:	3310      	adds	r3, #16
 800d784:	76ab      	strb	r3, [r5, #26]
 800d786:	9707      	str	r7, [sp, #28]
 800d788:	9f03      	ldr	r7, [sp, #12]
 800d78a:	783b      	ldrb	r3, [r7, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <_vfiprintf_r+0x98>
 800d790:	2b25      	cmp	r3, #37	; 0x25
 800d792:	d14e      	bne.n	800d832 <_vfiprintf_r+0x136>
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	1afb      	subs	r3, r7, r3
 800d798:	9305      	str	r3, [sp, #20]
 800d79a:	9b03      	ldr	r3, [sp, #12]
 800d79c:	429f      	cmp	r7, r3
 800d79e:	d00d      	beq.n	800d7bc <_vfiprintf_r+0xc0>
 800d7a0:	9b05      	ldr	r3, [sp, #20]
 800d7a2:	0021      	movs	r1, r4
 800d7a4:	0030      	movs	r0, r6
 800d7a6:	9a03      	ldr	r2, [sp, #12]
 800d7a8:	f7ff ff95 	bl	800d6d6 <__sfputs_r>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d100      	bne.n	800d7b2 <_vfiprintf_r+0xb6>
 800d7b0:	e0b5      	b.n	800d91e <_vfiprintf_r+0x222>
 800d7b2:	696a      	ldr	r2, [r5, #20]
 800d7b4:	9b05      	ldr	r3, [sp, #20]
 800d7b6:	4694      	mov	ip, r2
 800d7b8:	4463      	add	r3, ip
 800d7ba:	616b      	str	r3, [r5, #20]
 800d7bc:	783b      	ldrb	r3, [r7, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d100      	bne.n	800d7c4 <_vfiprintf_r+0xc8>
 800d7c2:	e0ac      	b.n	800d91e <_vfiprintf_r+0x222>
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	1c7b      	adds	r3, r7, #1
 800d7c8:	9303      	str	r3, [sp, #12]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	4252      	negs	r2, r2
 800d7ce:	606a      	str	r2, [r5, #4]
 800d7d0:	a904      	add	r1, sp, #16
 800d7d2:	3254      	adds	r2, #84	; 0x54
 800d7d4:	1852      	adds	r2, r2, r1
 800d7d6:	602b      	str	r3, [r5, #0]
 800d7d8:	60eb      	str	r3, [r5, #12]
 800d7da:	60ab      	str	r3, [r5, #8]
 800d7dc:	7013      	strb	r3, [r2, #0]
 800d7de:	65ab      	str	r3, [r5, #88]	; 0x58
 800d7e0:	9b03      	ldr	r3, [sp, #12]
 800d7e2:	2205      	movs	r2, #5
 800d7e4:	7819      	ldrb	r1, [r3, #0]
 800d7e6:	485d      	ldr	r0, [pc, #372]	; (800d95c <_vfiprintf_r+0x260>)
 800d7e8:	f7fe f996 	bl	800bb18 <memchr>
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	1c5f      	adds	r7, r3, #1
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d120      	bne.n	800d836 <_vfiprintf_r+0x13a>
 800d7f4:	682a      	ldr	r2, [r5, #0]
 800d7f6:	06d3      	lsls	r3, r2, #27
 800d7f8:	d504      	bpl.n	800d804 <_vfiprintf_r+0x108>
 800d7fa:	2353      	movs	r3, #83	; 0x53
 800d7fc:	a904      	add	r1, sp, #16
 800d7fe:	185b      	adds	r3, r3, r1
 800d800:	2120      	movs	r1, #32
 800d802:	7019      	strb	r1, [r3, #0]
 800d804:	0713      	lsls	r3, r2, #28
 800d806:	d504      	bpl.n	800d812 <_vfiprintf_r+0x116>
 800d808:	2353      	movs	r3, #83	; 0x53
 800d80a:	a904      	add	r1, sp, #16
 800d80c:	185b      	adds	r3, r3, r1
 800d80e:	212b      	movs	r1, #43	; 0x2b
 800d810:	7019      	strb	r1, [r3, #0]
 800d812:	9b03      	ldr	r3, [sp, #12]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b2a      	cmp	r3, #42	; 0x2a
 800d818:	d016      	beq.n	800d848 <_vfiprintf_r+0x14c>
 800d81a:	2100      	movs	r1, #0
 800d81c:	68eb      	ldr	r3, [r5, #12]
 800d81e:	9f03      	ldr	r7, [sp, #12]
 800d820:	783a      	ldrb	r2, [r7, #0]
 800d822:	1c78      	adds	r0, r7, #1
 800d824:	3a30      	subs	r2, #48	; 0x30
 800d826:	4684      	mov	ip, r0
 800d828:	2a09      	cmp	r2, #9
 800d82a:	d94f      	bls.n	800d8cc <_vfiprintf_r+0x1d0>
 800d82c:	2900      	cmp	r1, #0
 800d82e:	d111      	bne.n	800d854 <_vfiprintf_r+0x158>
 800d830:	e017      	b.n	800d862 <_vfiprintf_r+0x166>
 800d832:	3701      	adds	r7, #1
 800d834:	e7a9      	b.n	800d78a <_vfiprintf_r+0x8e>
 800d836:	4b49      	ldr	r3, [pc, #292]	; (800d95c <_vfiprintf_r+0x260>)
 800d838:	682a      	ldr	r2, [r5, #0]
 800d83a:	1ac0      	subs	r0, r0, r3
 800d83c:	2301      	movs	r3, #1
 800d83e:	4083      	lsls	r3, r0
 800d840:	4313      	orrs	r3, r2
 800d842:	602b      	str	r3, [r5, #0]
 800d844:	9703      	str	r7, [sp, #12]
 800d846:	e7cb      	b.n	800d7e0 <_vfiprintf_r+0xe4>
 800d848:	9b07      	ldr	r3, [sp, #28]
 800d84a:	1d19      	adds	r1, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	9107      	str	r1, [sp, #28]
 800d850:	2b00      	cmp	r3, #0
 800d852:	db01      	blt.n	800d858 <_vfiprintf_r+0x15c>
 800d854:	930b      	str	r3, [sp, #44]	; 0x2c
 800d856:	e004      	b.n	800d862 <_vfiprintf_r+0x166>
 800d858:	425b      	negs	r3, r3
 800d85a:	60eb      	str	r3, [r5, #12]
 800d85c:	2302      	movs	r3, #2
 800d85e:	4313      	orrs	r3, r2
 800d860:	602b      	str	r3, [r5, #0]
 800d862:	783b      	ldrb	r3, [r7, #0]
 800d864:	2b2e      	cmp	r3, #46	; 0x2e
 800d866:	d10a      	bne.n	800d87e <_vfiprintf_r+0x182>
 800d868:	787b      	ldrb	r3, [r7, #1]
 800d86a:	2b2a      	cmp	r3, #42	; 0x2a
 800d86c:	d137      	bne.n	800d8de <_vfiprintf_r+0x1e2>
 800d86e:	9b07      	ldr	r3, [sp, #28]
 800d870:	3702      	adds	r7, #2
 800d872:	1d1a      	adds	r2, r3, #4
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	9207      	str	r2, [sp, #28]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	db2d      	blt.n	800d8d8 <_vfiprintf_r+0x1dc>
 800d87c:	9309      	str	r3, [sp, #36]	; 0x24
 800d87e:	2203      	movs	r2, #3
 800d880:	7839      	ldrb	r1, [r7, #0]
 800d882:	4837      	ldr	r0, [pc, #220]	; (800d960 <_vfiprintf_r+0x264>)
 800d884:	f7fe f948 	bl	800bb18 <memchr>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d007      	beq.n	800d89c <_vfiprintf_r+0x1a0>
 800d88c:	4b34      	ldr	r3, [pc, #208]	; (800d960 <_vfiprintf_r+0x264>)
 800d88e:	682a      	ldr	r2, [r5, #0]
 800d890:	1ac0      	subs	r0, r0, r3
 800d892:	2340      	movs	r3, #64	; 0x40
 800d894:	4083      	lsls	r3, r0
 800d896:	4313      	orrs	r3, r2
 800d898:	3701      	adds	r7, #1
 800d89a:	602b      	str	r3, [r5, #0]
 800d89c:	7839      	ldrb	r1, [r7, #0]
 800d89e:	1c7b      	adds	r3, r7, #1
 800d8a0:	2206      	movs	r2, #6
 800d8a2:	4830      	ldr	r0, [pc, #192]	; (800d964 <_vfiprintf_r+0x268>)
 800d8a4:	9303      	str	r3, [sp, #12]
 800d8a6:	7629      	strb	r1, [r5, #24]
 800d8a8:	f7fe f936 	bl	800bb18 <memchr>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d045      	beq.n	800d93c <_vfiprintf_r+0x240>
 800d8b0:	4b2d      	ldr	r3, [pc, #180]	; (800d968 <_vfiprintf_r+0x26c>)
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d127      	bne.n	800d906 <_vfiprintf_r+0x20a>
 800d8b6:	2207      	movs	r2, #7
 800d8b8:	9b07      	ldr	r3, [sp, #28]
 800d8ba:	3307      	adds	r3, #7
 800d8bc:	4393      	bics	r3, r2
 800d8be:	3308      	adds	r3, #8
 800d8c0:	9307      	str	r3, [sp, #28]
 800d8c2:	696b      	ldr	r3, [r5, #20]
 800d8c4:	9a04      	ldr	r2, [sp, #16]
 800d8c6:	189b      	adds	r3, r3, r2
 800d8c8:	616b      	str	r3, [r5, #20]
 800d8ca:	e75d      	b.n	800d788 <_vfiprintf_r+0x8c>
 800d8cc:	210a      	movs	r1, #10
 800d8ce:	434b      	muls	r3, r1
 800d8d0:	4667      	mov	r7, ip
 800d8d2:	189b      	adds	r3, r3, r2
 800d8d4:	3909      	subs	r1, #9
 800d8d6:	e7a3      	b.n	800d820 <_vfiprintf_r+0x124>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	425b      	negs	r3, r3
 800d8dc:	e7ce      	b.n	800d87c <_vfiprintf_r+0x180>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	001a      	movs	r2, r3
 800d8e2:	3701      	adds	r7, #1
 800d8e4:	606b      	str	r3, [r5, #4]
 800d8e6:	7839      	ldrb	r1, [r7, #0]
 800d8e8:	1c78      	adds	r0, r7, #1
 800d8ea:	3930      	subs	r1, #48	; 0x30
 800d8ec:	4684      	mov	ip, r0
 800d8ee:	2909      	cmp	r1, #9
 800d8f0:	d903      	bls.n	800d8fa <_vfiprintf_r+0x1fe>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0c3      	beq.n	800d87e <_vfiprintf_r+0x182>
 800d8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800d8f8:	e7c1      	b.n	800d87e <_vfiprintf_r+0x182>
 800d8fa:	230a      	movs	r3, #10
 800d8fc:	435a      	muls	r2, r3
 800d8fe:	4667      	mov	r7, ip
 800d900:	1852      	adds	r2, r2, r1
 800d902:	3b09      	subs	r3, #9
 800d904:	e7ef      	b.n	800d8e6 <_vfiprintf_r+0x1ea>
 800d906:	ab07      	add	r3, sp, #28
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	0022      	movs	r2, r4
 800d90c:	0029      	movs	r1, r5
 800d90e:	0030      	movs	r0, r6
 800d910:	4b16      	ldr	r3, [pc, #88]	; (800d96c <_vfiprintf_r+0x270>)
 800d912:	f7fb f93b 	bl	8008b8c <_printf_float>
 800d916:	9004      	str	r0, [sp, #16]
 800d918:	9b04      	ldr	r3, [sp, #16]
 800d91a:	3301      	adds	r3, #1
 800d91c:	d1d1      	bne.n	800d8c2 <_vfiprintf_r+0x1c6>
 800d91e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d920:	07db      	lsls	r3, r3, #31
 800d922:	d405      	bmi.n	800d930 <_vfiprintf_r+0x234>
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	059b      	lsls	r3, r3, #22
 800d928:	d402      	bmi.n	800d930 <_vfiprintf_r+0x234>
 800d92a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d92c:	f7ff fe74 	bl	800d618 <__retarget_lock_release_recursive>
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	065b      	lsls	r3, r3, #25
 800d934:	d500      	bpl.n	800d938 <_vfiprintf_r+0x23c>
 800d936:	e70a      	b.n	800d74e <_vfiprintf_r+0x52>
 800d938:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d93a:	e70a      	b.n	800d752 <_vfiprintf_r+0x56>
 800d93c:	ab07      	add	r3, sp, #28
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	0022      	movs	r2, r4
 800d942:	0029      	movs	r1, r5
 800d944:	0030      	movs	r0, r6
 800d946:	4b09      	ldr	r3, [pc, #36]	; (800d96c <_vfiprintf_r+0x270>)
 800d948:	f7fb fbde 	bl	8009108 <_printf_i>
 800d94c:	e7e3      	b.n	800d916 <_vfiprintf_r+0x21a>
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	0800e444 	.word	0x0800e444
 800d954:	0800e464 	.word	0x0800e464
 800d958:	0800e424 	.word	0x0800e424
 800d95c:	0800e3bc 	.word	0x0800e3bc
 800d960:	0800e3c2 	.word	0x0800e3c2
 800d964:	0800e3c6 	.word	0x0800e3c6
 800d968:	08008b8d 	.word	0x08008b8d
 800d96c:	0800d6d7 	.word	0x0800d6d7

0800d970 <__swbuf_r>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	0005      	movs	r5, r0
 800d974:	000e      	movs	r6, r1
 800d976:	0014      	movs	r4, r2
 800d978:	2800      	cmp	r0, #0
 800d97a:	d004      	beq.n	800d986 <__swbuf_r+0x16>
 800d97c:	6983      	ldr	r3, [r0, #24]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d101      	bne.n	800d986 <__swbuf_r+0x16>
 800d982:	f7ff fd97 	bl	800d4b4 <__sinit>
 800d986:	4b22      	ldr	r3, [pc, #136]	; (800da10 <__swbuf_r+0xa0>)
 800d988:	429c      	cmp	r4, r3
 800d98a:	d12e      	bne.n	800d9ea <__swbuf_r+0x7a>
 800d98c:	686c      	ldr	r4, [r5, #4]
 800d98e:	69a3      	ldr	r3, [r4, #24]
 800d990:	60a3      	str	r3, [r4, #8]
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	071b      	lsls	r3, r3, #28
 800d996:	d532      	bpl.n	800d9fe <__swbuf_r+0x8e>
 800d998:	6923      	ldr	r3, [r4, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d02f      	beq.n	800d9fe <__swbuf_r+0x8e>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	6922      	ldr	r2, [r4, #16]
 800d9a2:	b2f7      	uxtb	r7, r6
 800d9a4:	1a98      	subs	r0, r3, r2
 800d9a6:	6963      	ldr	r3, [r4, #20]
 800d9a8:	b2f6      	uxtb	r6, r6
 800d9aa:	4283      	cmp	r3, r0
 800d9ac:	dc05      	bgt.n	800d9ba <__swbuf_r+0x4a>
 800d9ae:	0021      	movs	r1, r4
 800d9b0:	0028      	movs	r0, r5
 800d9b2:	f7ff fcdd 	bl	800d370 <_fflush_r>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d127      	bne.n	800da0a <__swbuf_r+0x9a>
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	3001      	adds	r0, #1
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	60a3      	str	r3, [r4, #8]
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	701f      	strb	r7, [r3, #0]
 800d9ca:	6963      	ldr	r3, [r4, #20]
 800d9cc:	4283      	cmp	r3, r0
 800d9ce:	d004      	beq.n	800d9da <__swbuf_r+0x6a>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	07db      	lsls	r3, r3, #31
 800d9d4:	d507      	bpl.n	800d9e6 <__swbuf_r+0x76>
 800d9d6:	2e0a      	cmp	r6, #10
 800d9d8:	d105      	bne.n	800d9e6 <__swbuf_r+0x76>
 800d9da:	0021      	movs	r1, r4
 800d9dc:	0028      	movs	r0, r5
 800d9de:	f7ff fcc7 	bl	800d370 <_fflush_r>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d111      	bne.n	800da0a <__swbuf_r+0x9a>
 800d9e6:	0030      	movs	r0, r6
 800d9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ea:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <__swbuf_r+0xa4>)
 800d9ec:	429c      	cmp	r4, r3
 800d9ee:	d101      	bne.n	800d9f4 <__swbuf_r+0x84>
 800d9f0:	68ac      	ldr	r4, [r5, #8]
 800d9f2:	e7cc      	b.n	800d98e <__swbuf_r+0x1e>
 800d9f4:	4b08      	ldr	r3, [pc, #32]	; (800da18 <__swbuf_r+0xa8>)
 800d9f6:	429c      	cmp	r4, r3
 800d9f8:	d1c9      	bne.n	800d98e <__swbuf_r+0x1e>
 800d9fa:	68ec      	ldr	r4, [r5, #12]
 800d9fc:	e7c7      	b.n	800d98e <__swbuf_r+0x1e>
 800d9fe:	0021      	movs	r1, r4
 800da00:	0028      	movs	r0, r5
 800da02:	f000 f80b 	bl	800da1c <__swsetup_r>
 800da06:	2800      	cmp	r0, #0
 800da08:	d0c9      	beq.n	800d99e <__swbuf_r+0x2e>
 800da0a:	2601      	movs	r6, #1
 800da0c:	4276      	negs	r6, r6
 800da0e:	e7ea      	b.n	800d9e6 <__swbuf_r+0x76>
 800da10:	0800e444 	.word	0x0800e444
 800da14:	0800e464 	.word	0x0800e464
 800da18:	0800e424 	.word	0x0800e424

0800da1c <__swsetup_r>:
 800da1c:	4b37      	ldr	r3, [pc, #220]	; (800dafc <__swsetup_r+0xe0>)
 800da1e:	b570      	push	{r4, r5, r6, lr}
 800da20:	681d      	ldr	r5, [r3, #0]
 800da22:	0006      	movs	r6, r0
 800da24:	000c      	movs	r4, r1
 800da26:	2d00      	cmp	r5, #0
 800da28:	d005      	beq.n	800da36 <__swsetup_r+0x1a>
 800da2a:	69ab      	ldr	r3, [r5, #24]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d102      	bne.n	800da36 <__swsetup_r+0x1a>
 800da30:	0028      	movs	r0, r5
 800da32:	f7ff fd3f 	bl	800d4b4 <__sinit>
 800da36:	4b32      	ldr	r3, [pc, #200]	; (800db00 <__swsetup_r+0xe4>)
 800da38:	429c      	cmp	r4, r3
 800da3a:	d10f      	bne.n	800da5c <__swsetup_r+0x40>
 800da3c:	686c      	ldr	r4, [r5, #4]
 800da3e:	230c      	movs	r3, #12
 800da40:	5ee2      	ldrsh	r2, [r4, r3]
 800da42:	b293      	uxth	r3, r2
 800da44:	0711      	lsls	r1, r2, #28
 800da46:	d42d      	bmi.n	800daa4 <__swsetup_r+0x88>
 800da48:	06d9      	lsls	r1, r3, #27
 800da4a:	d411      	bmi.n	800da70 <__swsetup_r+0x54>
 800da4c:	2309      	movs	r3, #9
 800da4e:	2001      	movs	r0, #1
 800da50:	6033      	str	r3, [r6, #0]
 800da52:	3337      	adds	r3, #55	; 0x37
 800da54:	4313      	orrs	r3, r2
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	4240      	negs	r0, r0
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	4b29      	ldr	r3, [pc, #164]	; (800db04 <__swsetup_r+0xe8>)
 800da5e:	429c      	cmp	r4, r3
 800da60:	d101      	bne.n	800da66 <__swsetup_r+0x4a>
 800da62:	68ac      	ldr	r4, [r5, #8]
 800da64:	e7eb      	b.n	800da3e <__swsetup_r+0x22>
 800da66:	4b28      	ldr	r3, [pc, #160]	; (800db08 <__swsetup_r+0xec>)
 800da68:	429c      	cmp	r4, r3
 800da6a:	d1e8      	bne.n	800da3e <__swsetup_r+0x22>
 800da6c:	68ec      	ldr	r4, [r5, #12]
 800da6e:	e7e6      	b.n	800da3e <__swsetup_r+0x22>
 800da70:	075b      	lsls	r3, r3, #29
 800da72:	d513      	bpl.n	800da9c <__swsetup_r+0x80>
 800da74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da76:	2900      	cmp	r1, #0
 800da78:	d008      	beq.n	800da8c <__swsetup_r+0x70>
 800da7a:	0023      	movs	r3, r4
 800da7c:	3344      	adds	r3, #68	; 0x44
 800da7e:	4299      	cmp	r1, r3
 800da80:	d002      	beq.n	800da88 <__swsetup_r+0x6c>
 800da82:	0030      	movs	r0, r6
 800da84:	f7fe fd34 	bl	800c4f0 <_free_r>
 800da88:	2300      	movs	r3, #0
 800da8a:	6363      	str	r3, [r4, #52]	; 0x34
 800da8c:	2224      	movs	r2, #36	; 0x24
 800da8e:	89a3      	ldrh	r3, [r4, #12]
 800da90:	4393      	bics	r3, r2
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	2300      	movs	r3, #0
 800da96:	6063      	str	r3, [r4, #4]
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	2308      	movs	r3, #8
 800da9e:	89a2      	ldrh	r2, [r4, #12]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	81a3      	strh	r3, [r4, #12]
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10b      	bne.n	800dac2 <__swsetup_r+0xa6>
 800daaa:	21a0      	movs	r1, #160	; 0xa0
 800daac:	2280      	movs	r2, #128	; 0x80
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	0089      	lsls	r1, r1, #2
 800dab2:	0092      	lsls	r2, r2, #2
 800dab4:	400b      	ands	r3, r1
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d003      	beq.n	800dac2 <__swsetup_r+0xa6>
 800daba:	0021      	movs	r1, r4
 800dabc:	0030      	movs	r0, r6
 800dabe:	f000 f855 	bl	800db6c <__smakebuf_r>
 800dac2:	220c      	movs	r2, #12
 800dac4:	5ea3      	ldrsh	r3, [r4, r2]
 800dac6:	2001      	movs	r0, #1
 800dac8:	001a      	movs	r2, r3
 800daca:	b299      	uxth	r1, r3
 800dacc:	4002      	ands	r2, r0
 800dace:	4203      	tst	r3, r0
 800dad0:	d00f      	beq.n	800daf2 <__swsetup_r+0xd6>
 800dad2:	2200      	movs	r2, #0
 800dad4:	60a2      	str	r2, [r4, #8]
 800dad6:	6962      	ldr	r2, [r4, #20]
 800dad8:	4252      	negs	r2, r2
 800dada:	61a2      	str	r2, [r4, #24]
 800dadc:	2000      	movs	r0, #0
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	4282      	cmp	r2, r0
 800dae2:	d1ba      	bne.n	800da5a <__swsetup_r+0x3e>
 800dae4:	060a      	lsls	r2, r1, #24
 800dae6:	d5b8      	bpl.n	800da5a <__swsetup_r+0x3e>
 800dae8:	2240      	movs	r2, #64	; 0x40
 800daea:	4313      	orrs	r3, r2
 800daec:	81a3      	strh	r3, [r4, #12]
 800daee:	3801      	subs	r0, #1
 800daf0:	e7b3      	b.n	800da5a <__swsetup_r+0x3e>
 800daf2:	0788      	lsls	r0, r1, #30
 800daf4:	d400      	bmi.n	800daf8 <__swsetup_r+0xdc>
 800daf6:	6962      	ldr	r2, [r4, #20]
 800daf8:	60a2      	str	r2, [r4, #8]
 800dafa:	e7ef      	b.n	800dadc <__swsetup_r+0xc0>
 800dafc:	2000000c 	.word	0x2000000c
 800db00:	0800e444 	.word	0x0800e444
 800db04:	0800e464 	.word	0x0800e464
 800db08:	0800e424 	.word	0x0800e424

0800db0c <abort>:
 800db0c:	2006      	movs	r0, #6
 800db0e:	b510      	push	{r4, lr}
 800db10:	f000 f8a2 	bl	800dc58 <raise>
 800db14:	2001      	movs	r0, #1
 800db16:	f7f6 fd13 	bl	8004540 <_exit>
	...

0800db1c <__swhatbuf_r>:
 800db1c:	b570      	push	{r4, r5, r6, lr}
 800db1e:	000e      	movs	r6, r1
 800db20:	001d      	movs	r5, r3
 800db22:	230e      	movs	r3, #14
 800db24:	5ec9      	ldrsh	r1, [r1, r3]
 800db26:	0014      	movs	r4, r2
 800db28:	b096      	sub	sp, #88	; 0x58
 800db2a:	2900      	cmp	r1, #0
 800db2c:	da07      	bge.n	800db3e <__swhatbuf_r+0x22>
 800db2e:	2300      	movs	r3, #0
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	89b3      	ldrh	r3, [r6, #12]
 800db34:	061b      	lsls	r3, r3, #24
 800db36:	d411      	bmi.n	800db5c <__swhatbuf_r+0x40>
 800db38:	2380      	movs	r3, #128	; 0x80
 800db3a:	00db      	lsls	r3, r3, #3
 800db3c:	e00f      	b.n	800db5e <__swhatbuf_r+0x42>
 800db3e:	466a      	mov	r2, sp
 800db40:	f000 f8aa 	bl	800dc98 <_fstat_r>
 800db44:	2800      	cmp	r0, #0
 800db46:	dbf2      	blt.n	800db2e <__swhatbuf_r+0x12>
 800db48:	23f0      	movs	r3, #240	; 0xf0
 800db4a:	9901      	ldr	r1, [sp, #4]
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	4019      	ands	r1, r3
 800db50:	4b05      	ldr	r3, [pc, #20]	; (800db68 <__swhatbuf_r+0x4c>)
 800db52:	18c9      	adds	r1, r1, r3
 800db54:	424b      	negs	r3, r1
 800db56:	4159      	adcs	r1, r3
 800db58:	6029      	str	r1, [r5, #0]
 800db5a:	e7ed      	b.n	800db38 <__swhatbuf_r+0x1c>
 800db5c:	2340      	movs	r3, #64	; 0x40
 800db5e:	2000      	movs	r0, #0
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	b016      	add	sp, #88	; 0x58
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	46c0      	nop			; (mov r8, r8)
 800db68:	ffffe000 	.word	0xffffe000

0800db6c <__smakebuf_r>:
 800db6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db6e:	2602      	movs	r6, #2
 800db70:	898b      	ldrh	r3, [r1, #12]
 800db72:	0005      	movs	r5, r0
 800db74:	000c      	movs	r4, r1
 800db76:	4233      	tst	r3, r6
 800db78:	d006      	beq.n	800db88 <__smakebuf_r+0x1c>
 800db7a:	0023      	movs	r3, r4
 800db7c:	3347      	adds	r3, #71	; 0x47
 800db7e:	6023      	str	r3, [r4, #0]
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	2301      	movs	r3, #1
 800db84:	6163      	str	r3, [r4, #20]
 800db86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800db88:	466a      	mov	r2, sp
 800db8a:	ab01      	add	r3, sp, #4
 800db8c:	f7ff ffc6 	bl	800db1c <__swhatbuf_r>
 800db90:	9900      	ldr	r1, [sp, #0]
 800db92:	0007      	movs	r7, r0
 800db94:	0028      	movs	r0, r5
 800db96:	f7fe fcf5 	bl	800c584 <_malloc_r>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d108      	bne.n	800dbb0 <__smakebuf_r+0x44>
 800db9e:	220c      	movs	r2, #12
 800dba0:	5ea3      	ldrsh	r3, [r4, r2]
 800dba2:	059a      	lsls	r2, r3, #22
 800dba4:	d4ef      	bmi.n	800db86 <__smakebuf_r+0x1a>
 800dba6:	2203      	movs	r2, #3
 800dba8:	4393      	bics	r3, r2
 800dbaa:	431e      	orrs	r6, r3
 800dbac:	81a6      	strh	r6, [r4, #12]
 800dbae:	e7e4      	b.n	800db7a <__smakebuf_r+0xe>
 800dbb0:	4b0f      	ldr	r3, [pc, #60]	; (800dbf0 <__smakebuf_r+0x84>)
 800dbb2:	62ab      	str	r3, [r5, #40]	; 0x28
 800dbb4:	2380      	movs	r3, #128	; 0x80
 800dbb6:	89a2      	ldrh	r2, [r4, #12]
 800dbb8:	6020      	str	r0, [r4, #0]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	9b00      	ldr	r3, [sp, #0]
 800dbc0:	6120      	str	r0, [r4, #16]
 800dbc2:	6163      	str	r3, [r4, #20]
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00d      	beq.n	800dbe6 <__smakebuf_r+0x7a>
 800dbca:	0028      	movs	r0, r5
 800dbcc:	230e      	movs	r3, #14
 800dbce:	5ee1      	ldrsh	r1, [r4, r3]
 800dbd0:	f000 f874 	bl	800dcbc <_isatty_r>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d006      	beq.n	800dbe6 <__smakebuf_r+0x7a>
 800dbd8:	2203      	movs	r2, #3
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	4393      	bics	r3, r2
 800dbde:	001a      	movs	r2, r3
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	89a0      	ldrh	r0, [r4, #12]
 800dbe8:	4307      	orrs	r7, r0
 800dbea:	81a7      	strh	r7, [r4, #12]
 800dbec:	e7cb      	b.n	800db86 <__smakebuf_r+0x1a>
 800dbee:	46c0      	nop			; (mov r8, r8)
 800dbf0:	0800d439 	.word	0x0800d439

0800dbf4 <_malloc_usable_size_r>:
 800dbf4:	1f0b      	subs	r3, r1, #4
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	1f18      	subs	r0, r3, #4
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	da01      	bge.n	800dc02 <_malloc_usable_size_r+0xe>
 800dbfe:	580b      	ldr	r3, [r1, r0]
 800dc00:	18c0      	adds	r0, r0, r3
 800dc02:	4770      	bx	lr

0800dc04 <_raise_r>:
 800dc04:	b570      	push	{r4, r5, r6, lr}
 800dc06:	0004      	movs	r4, r0
 800dc08:	000d      	movs	r5, r1
 800dc0a:	291f      	cmp	r1, #31
 800dc0c:	d904      	bls.n	800dc18 <_raise_r+0x14>
 800dc0e:	2316      	movs	r3, #22
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	2001      	movs	r0, #1
 800dc14:	4240      	negs	r0, r0
 800dc16:	bd70      	pop	{r4, r5, r6, pc}
 800dc18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d004      	beq.n	800dc28 <_raise_r+0x24>
 800dc1e:	008a      	lsls	r2, r1, #2
 800dc20:	189b      	adds	r3, r3, r2
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	2a00      	cmp	r2, #0
 800dc26:	d108      	bne.n	800dc3a <_raise_r+0x36>
 800dc28:	0020      	movs	r0, r4
 800dc2a:	f000 f831 	bl	800dc90 <_getpid_r>
 800dc2e:	002a      	movs	r2, r5
 800dc30:	0001      	movs	r1, r0
 800dc32:	0020      	movs	r0, r4
 800dc34:	f000 f81a 	bl	800dc6c <_kill_r>
 800dc38:	e7ed      	b.n	800dc16 <_raise_r+0x12>
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	2a01      	cmp	r2, #1
 800dc3e:	d0ea      	beq.n	800dc16 <_raise_r+0x12>
 800dc40:	1c51      	adds	r1, r2, #1
 800dc42:	d103      	bne.n	800dc4c <_raise_r+0x48>
 800dc44:	2316      	movs	r3, #22
 800dc46:	3001      	adds	r0, #1
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	e7e4      	b.n	800dc16 <_raise_r+0x12>
 800dc4c:	2400      	movs	r4, #0
 800dc4e:	0028      	movs	r0, r5
 800dc50:	601c      	str	r4, [r3, #0]
 800dc52:	4790      	blx	r2
 800dc54:	0020      	movs	r0, r4
 800dc56:	e7de      	b.n	800dc16 <_raise_r+0x12>

0800dc58 <raise>:
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	4b03      	ldr	r3, [pc, #12]	; (800dc68 <raise+0x10>)
 800dc5c:	0001      	movs	r1, r0
 800dc5e:	6818      	ldr	r0, [r3, #0]
 800dc60:	f7ff ffd0 	bl	800dc04 <_raise_r>
 800dc64:	bd10      	pop	{r4, pc}
 800dc66:	46c0      	nop			; (mov r8, r8)
 800dc68:	2000000c 	.word	0x2000000c

0800dc6c <_kill_r>:
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	b570      	push	{r4, r5, r6, lr}
 800dc70:	4d06      	ldr	r5, [pc, #24]	; (800dc8c <_kill_r+0x20>)
 800dc72:	0004      	movs	r4, r0
 800dc74:	0008      	movs	r0, r1
 800dc76:	0011      	movs	r1, r2
 800dc78:	602b      	str	r3, [r5, #0]
 800dc7a:	f7f6 fc51 	bl	8004520 <_kill>
 800dc7e:	1c43      	adds	r3, r0, #1
 800dc80:	d103      	bne.n	800dc8a <_kill_r+0x1e>
 800dc82:	682b      	ldr	r3, [r5, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d000      	beq.n	800dc8a <_kill_r+0x1e>
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	20000614 	.word	0x20000614

0800dc90 <_getpid_r>:
 800dc90:	b510      	push	{r4, lr}
 800dc92:	f7f6 fc3f 	bl	8004514 <_getpid>
 800dc96:	bd10      	pop	{r4, pc}

0800dc98 <_fstat_r>:
 800dc98:	2300      	movs	r3, #0
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	4d06      	ldr	r5, [pc, #24]	; (800dcb8 <_fstat_r+0x20>)
 800dc9e:	0004      	movs	r4, r0
 800dca0:	0008      	movs	r0, r1
 800dca2:	0011      	movs	r1, r2
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	f7f6 fc9a 	bl	80045de <_fstat>
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	d103      	bne.n	800dcb6 <_fstat_r+0x1e>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d000      	beq.n	800dcb6 <_fstat_r+0x1e>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}
 800dcb8:	20000614 	.word	0x20000614

0800dcbc <_isatty_r>:
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	4d06      	ldr	r5, [pc, #24]	; (800dcdc <_isatty_r+0x20>)
 800dcc2:	0004      	movs	r4, r0
 800dcc4:	0008      	movs	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f6 fc97 	bl	80045fa <_isatty>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d103      	bne.n	800dcd8 <_isatty_r+0x1c>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d000      	beq.n	800dcd8 <_isatty_r+0x1c>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	46c0      	nop			; (mov r8, r8)
 800dcdc:	20000614 	.word	0x20000614

0800dce0 <round>:
 800dce0:	b570      	push	{r4, r5, r6, lr}
 800dce2:	000d      	movs	r5, r1
 800dce4:	0006      	movs	r6, r0
 800dce6:	0001      	movs	r1, r0
 800dce8:	006a      	lsls	r2, r5, #1
 800dcea:	4820      	ldr	r0, [pc, #128]	; (800dd6c <round+0x8c>)
 800dcec:	0d52      	lsrs	r2, r2, #21
 800dcee:	1810      	adds	r0, r2, r0
 800dcf0:	2813      	cmp	r0, #19
 800dcf2:	dc18      	bgt.n	800dd26 <round+0x46>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	da09      	bge.n	800dd0c <round+0x2c>
 800dcf8:	0feb      	lsrs	r3, r5, #31
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	07db      	lsls	r3, r3, #31
 800dcfe:	1c41      	adds	r1, r0, #1
 800dd00:	d101      	bne.n	800dd06 <round+0x26>
 800dd02:	491b      	ldr	r1, [pc, #108]	; (800dd70 <round+0x90>)
 800dd04:	430b      	orrs	r3, r1
 800dd06:	0019      	movs	r1, r3
 800dd08:	0010      	movs	r0, r2
 800dd0a:	e018      	b.n	800dd3e <round+0x5e>
 800dd0c:	4c19      	ldr	r4, [pc, #100]	; (800dd74 <round+0x94>)
 800dd0e:	4104      	asrs	r4, r0
 800dd10:	0022      	movs	r2, r4
 800dd12:	402a      	ands	r2, r5
 800dd14:	4311      	orrs	r1, r2
 800dd16:	d014      	beq.n	800dd42 <round+0x62>
 800dd18:	2280      	movs	r2, #128	; 0x80
 800dd1a:	0312      	lsls	r2, r2, #12
 800dd1c:	4102      	asrs	r2, r0
 800dd1e:	1953      	adds	r3, r2, r5
 800dd20:	43a3      	bics	r3, r4
 800dd22:	2200      	movs	r2, #0
 800dd24:	e7ef      	b.n	800dd06 <round+0x26>
 800dd26:	2833      	cmp	r0, #51	; 0x33
 800dd28:	dd0e      	ble.n	800dd48 <round+0x68>
 800dd2a:	2380      	movs	r3, #128	; 0x80
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	4298      	cmp	r0, r3
 800dd30:	d107      	bne.n	800dd42 <round+0x62>
 800dd32:	0032      	movs	r2, r6
 800dd34:	002b      	movs	r3, r5
 800dd36:	0030      	movs	r0, r6
 800dd38:	0029      	movs	r1, r5
 800dd3a:	f7f2 fc2f 	bl	800059c <__aeabi_dadd>
 800dd3e:	0006      	movs	r6, r0
 800dd40:	000d      	movs	r5, r1
 800dd42:	0030      	movs	r0, r6
 800dd44:	0029      	movs	r1, r5
 800dd46:	bd70      	pop	{r4, r5, r6, pc}
 800dd48:	4c0b      	ldr	r4, [pc, #44]	; (800dd78 <round+0x98>)
 800dd4a:	1912      	adds	r2, r2, r4
 800dd4c:	2401      	movs	r4, #1
 800dd4e:	4264      	negs	r4, r4
 800dd50:	40d4      	lsrs	r4, r2
 800dd52:	4234      	tst	r4, r6
 800dd54:	d0f5      	beq.n	800dd42 <round+0x62>
 800dd56:	2233      	movs	r2, #51	; 0x33
 800dd58:	1a10      	subs	r0, r2, r0
 800dd5a:	3a32      	subs	r2, #50	; 0x32
 800dd5c:	4082      	lsls	r2, r0
 800dd5e:	1992      	adds	r2, r2, r6
 800dd60:	42b2      	cmp	r2, r6
 800dd62:	4189      	sbcs	r1, r1
 800dd64:	4249      	negs	r1, r1
 800dd66:	186b      	adds	r3, r5, r1
 800dd68:	43a2      	bics	r2, r4
 800dd6a:	e7cc      	b.n	800dd06 <round+0x26>
 800dd6c:	fffffc01 	.word	0xfffffc01
 800dd70:	3ff00000 	.word	0x3ff00000
 800dd74:	000fffff 	.word	0x000fffff
 800dd78:	fffffbed 	.word	0xfffffbed

0800dd7c <_init>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	46c0      	nop			; (mov r8, r8)
 800dd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd82:	bc08      	pop	{r3}
 800dd84:	469e      	mov	lr, r3
 800dd86:	4770      	bx	lr

0800dd88 <_fini>:
 800dd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8a:	46c0      	nop			; (mov r8, r8)
 800dd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd8e:	bc08      	pop	{r3}
 800dd90:	469e      	mov	lr, r3
 800dd92:	4770      	bx	lr
