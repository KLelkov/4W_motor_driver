
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d620  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800d6e0  0800d6e0  0001d6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcdc  0800dcdc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcdc  0800dcdc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcdc  0800dcdc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcdc  0800dcdc  0001dcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dce0  0800dce0  0001dce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e0  0800dec4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800dec4  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8ba  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002fac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00032718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118f3  00000000  00000000  000333c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea93  00000000  00000000  00044cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ab44  00000000  00000000  00053746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be28a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f8  00000000  00000000  000be2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d6c8 	.word	0x0800d6c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d6c8 	.word	0x0800d6c8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ffa3 	bl	800139c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 feed 	bl	8001240 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff95 	bl	800139c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8b 	bl	800139c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff0f 	bl	80012b8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ff05 	bl	80012b8 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f001 fdef 	bl	80020b4 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fa38 	bl	8001954 <__aeabi_dsub>
 80004e4:	f001 fde6 	bl	80020b4 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f000 ff9d 	bl	800147c <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f001 fe1a 	bl	8002180 <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f000 ff94 	bl	800147c <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 f9fa 	bl	8001954 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f001 fdd3 	bl	8002120 <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f000 ff7d 	bl	800147c <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f001 fdfa 	bl	8002180 <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 f804 	bl	800059c <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_dadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	464f      	mov	r7, r9
 80005a0:	46d6      	mov	lr, sl
 80005a2:	4646      	mov	r6, r8
 80005a4:	000d      	movs	r5, r1
 80005a6:	0001      	movs	r1, r0
 80005a8:	0018      	movs	r0, r3
 80005aa:	b5c0      	push	{r6, r7, lr}
 80005ac:	0017      	movs	r7, r2
 80005ae:	032b      	lsls	r3, r5, #12
 80005b0:	0a5a      	lsrs	r2, r3, #9
 80005b2:	0f4b      	lsrs	r3, r1, #29
 80005b4:	4313      	orrs	r3, r2
 80005b6:	00ca      	lsls	r2, r1, #3
 80005b8:	4691      	mov	r9, r2
 80005ba:	0302      	lsls	r2, r0, #12
 80005bc:	006e      	lsls	r6, r5, #1
 80005be:	0041      	lsls	r1, r0, #1
 80005c0:	0a52      	lsrs	r2, r2, #9
 80005c2:	0fec      	lsrs	r4, r5, #31
 80005c4:	0f7d      	lsrs	r5, r7, #29
 80005c6:	4315      	orrs	r5, r2
 80005c8:	0d76      	lsrs	r6, r6, #21
 80005ca:	0d49      	lsrs	r1, r1, #21
 80005cc:	0fc0      	lsrs	r0, r0, #31
 80005ce:	4682      	mov	sl, r0
 80005d0:	46ac      	mov	ip, r5
 80005d2:	00ff      	lsls	r7, r7, #3
 80005d4:	1a72      	subs	r2, r6, r1
 80005d6:	4284      	cmp	r4, r0
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x40>
 80005da:	e098      	b.n	800070e <__aeabi_dadd+0x172>
 80005dc:	2a00      	cmp	r2, #0
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_dadd+0x46>
 80005e0:	e081      	b.n	80006e6 <__aeabi_dadd+0x14a>
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x4c>
 80005e6:	e0b6      	b.n	8000756 <__aeabi_dadd+0x1ba>
 80005e8:	49c9      	ldr	r1, [pc, #804]	; (8000910 <__aeabi_dadd+0x374>)
 80005ea:	428e      	cmp	r6, r1
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x54>
 80005ee:	e172      	b.n	80008d6 <__aeabi_dadd+0x33a>
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0028      	movs	r0, r5
 80005f4:	0409      	lsls	r1, r1, #16
 80005f6:	4308      	orrs	r0, r1
 80005f8:	4684      	mov	ip, r0
 80005fa:	2a38      	cmp	r2, #56	; 0x38
 80005fc:	dd00      	ble.n	8000600 <__aeabi_dadd+0x64>
 80005fe:	e15e      	b.n	80008be <__aeabi_dadd+0x322>
 8000600:	2a1f      	cmp	r2, #31
 8000602:	dd00      	ble.n	8000606 <__aeabi_dadd+0x6a>
 8000604:	e1ee      	b.n	80009e4 <__aeabi_dadd+0x448>
 8000606:	2020      	movs	r0, #32
 8000608:	0039      	movs	r1, r7
 800060a:	4665      	mov	r5, ip
 800060c:	1a80      	subs	r0, r0, r2
 800060e:	4087      	lsls	r7, r0
 8000610:	40d1      	lsrs	r1, r2
 8000612:	4085      	lsls	r5, r0
 8000614:	430d      	orrs	r5, r1
 8000616:	0039      	movs	r1, r7
 8000618:	1e4f      	subs	r7, r1, #1
 800061a:	41b9      	sbcs	r1, r7
 800061c:	4667      	mov	r7, ip
 800061e:	40d7      	lsrs	r7, r2
 8000620:	4329      	orrs	r1, r5
 8000622:	1bdb      	subs	r3, r3, r7
 8000624:	464a      	mov	r2, r9
 8000626:	1a55      	subs	r5, r2, r1
 8000628:	45a9      	cmp	r9, r5
 800062a:	4189      	sbcs	r1, r1
 800062c:	4249      	negs	r1, r1
 800062e:	1a5b      	subs	r3, r3, r1
 8000630:	4698      	mov	r8, r3
 8000632:	4643      	mov	r3, r8
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	d400      	bmi.n	800063a <__aeabi_dadd+0x9e>
 8000638:	e0cc      	b.n	80007d4 <__aeabi_dadd+0x238>
 800063a:	4643      	mov	r3, r8
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	4698      	mov	r8, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d100      	bne.n	800064a <__aeabi_dadd+0xae>
 8000648:	e12c      	b.n	80008a4 <__aeabi_dadd+0x308>
 800064a:	4640      	mov	r0, r8
 800064c:	f001 fe8e 	bl	800236c <__clzsi2>
 8000650:	0001      	movs	r1, r0
 8000652:	3908      	subs	r1, #8
 8000654:	2220      	movs	r2, #32
 8000656:	0028      	movs	r0, r5
 8000658:	4643      	mov	r3, r8
 800065a:	1a52      	subs	r2, r2, r1
 800065c:	408b      	lsls	r3, r1
 800065e:	40d0      	lsrs	r0, r2
 8000660:	408d      	lsls	r5, r1
 8000662:	4303      	orrs	r3, r0
 8000664:	428e      	cmp	r6, r1
 8000666:	dd00      	ble.n	800066a <__aeabi_dadd+0xce>
 8000668:	e117      	b.n	800089a <__aeabi_dadd+0x2fe>
 800066a:	1b8e      	subs	r6, r1, r6
 800066c:	1c72      	adds	r2, r6, #1
 800066e:	2a1f      	cmp	r2, #31
 8000670:	dd00      	ble.n	8000674 <__aeabi_dadd+0xd8>
 8000672:	e1a7      	b.n	80009c4 <__aeabi_dadd+0x428>
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	002e      	movs	r6, r5
 800067a:	1a89      	subs	r1, r1, r2
 800067c:	408d      	lsls	r5, r1
 800067e:	4088      	lsls	r0, r1
 8000680:	40d6      	lsrs	r6, r2
 8000682:	40d3      	lsrs	r3, r2
 8000684:	1e69      	subs	r1, r5, #1
 8000686:	418d      	sbcs	r5, r1
 8000688:	4330      	orrs	r0, r6
 800068a:	4698      	mov	r8, r3
 800068c:	2600      	movs	r6, #0
 800068e:	4305      	orrs	r5, r0
 8000690:	076b      	lsls	r3, r5, #29
 8000692:	d009      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 8000694:	230f      	movs	r3, #15
 8000696:	402b      	ands	r3, r5
 8000698:	2b04      	cmp	r3, #4
 800069a:	d005      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 800069c:	1d2b      	adds	r3, r5, #4
 800069e:	42ab      	cmp	r3, r5
 80006a0:	41ad      	sbcs	r5, r5
 80006a2:	426d      	negs	r5, r5
 80006a4:	44a8      	add	r8, r5
 80006a6:	001d      	movs	r5, r3
 80006a8:	4643      	mov	r3, r8
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	d400      	bmi.n	80006b0 <__aeabi_dadd+0x114>
 80006ae:	e094      	b.n	80007da <__aeabi_dadd+0x23e>
 80006b0:	4b97      	ldr	r3, [pc, #604]	; (8000910 <__aeabi_dadd+0x374>)
 80006b2:	1c72      	adds	r2, r6, #1
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x11e>
 80006b8:	e09d      	b.n	80007f6 <__aeabi_dadd+0x25a>
 80006ba:	4641      	mov	r1, r8
 80006bc:	4b95      	ldr	r3, [pc, #596]	; (8000914 <__aeabi_dadd+0x378>)
 80006be:	08ed      	lsrs	r5, r5, #3
 80006c0:	4019      	ands	r1, r3
 80006c2:	000b      	movs	r3, r1
 80006c4:	0552      	lsls	r2, r2, #21
 80006c6:	0749      	lsls	r1, r1, #29
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	4329      	orrs	r1, r5
 80006cc:	0b1b      	lsrs	r3, r3, #12
 80006ce:	0d52      	lsrs	r2, r2, #21
 80006d0:	0512      	lsls	r2, r2, #20
 80006d2:	4313      	orrs	r3, r2
 80006d4:	07e4      	lsls	r4, r4, #31
 80006d6:	4323      	orrs	r3, r4
 80006d8:	0008      	movs	r0, r1
 80006da:	0019      	movs	r1, r3
 80006dc:	bce0      	pop	{r5, r6, r7}
 80006de:	46ba      	mov	sl, r7
 80006e0:	46b1      	mov	r9, r6
 80006e2:	46a8      	mov	r8, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d043      	beq.n	8000772 <__aeabi_dadd+0x1d6>
 80006ea:	1b8a      	subs	r2, r1, r6
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_dadd+0x156>
 80006f0:	e12a      	b.n	8000948 <__aeabi_dadd+0x3ac>
 80006f2:	464c      	mov	r4, r9
 80006f4:	431c      	orrs	r4, r3
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x15e>
 80006f8:	e1d1      	b.n	8000a9e <__aeabi_dadd+0x502>
 80006fa:	1e54      	subs	r4, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x166>
 8000700:	e21f      	b.n	8000b42 <__aeabi_dadd+0x5a6>
 8000702:	4d83      	ldr	r5, [pc, #524]	; (8000910 <__aeabi_dadd+0x374>)
 8000704:	42aa      	cmp	r2, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x16e>
 8000708:	e272      	b.n	8000bf0 <__aeabi_dadd+0x654>
 800070a:	0022      	movs	r2, r4
 800070c:	e123      	b.n	8000956 <__aeabi_dadd+0x3ba>
 800070e:	2a00      	cmp	r2, #0
 8000710:	dc00      	bgt.n	8000714 <__aeabi_dadd+0x178>
 8000712:	e098      	b.n	8000846 <__aeabi_dadd+0x2aa>
 8000714:	2900      	cmp	r1, #0
 8000716:	d042      	beq.n	800079e <__aeabi_dadd+0x202>
 8000718:	497d      	ldr	r1, [pc, #500]	; (8000910 <__aeabi_dadd+0x374>)
 800071a:	428e      	cmp	r6, r1
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x184>
 800071e:	e0da      	b.n	80008d6 <__aeabi_dadd+0x33a>
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0028      	movs	r0, r5
 8000724:	0409      	lsls	r1, r1, #16
 8000726:	4308      	orrs	r0, r1
 8000728:	4684      	mov	ip, r0
 800072a:	2a38      	cmp	r2, #56	; 0x38
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x194>
 800072e:	e129      	b.n	8000984 <__aeabi_dadd+0x3e8>
 8000730:	2a1f      	cmp	r2, #31
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dadd+0x19a>
 8000734:	e187      	b.n	8000a46 <__aeabi_dadd+0x4aa>
 8000736:	0011      	movs	r1, r2
 8000738:	4665      	mov	r5, ip
 800073a:	3920      	subs	r1, #32
 800073c:	40cd      	lsrs	r5, r1
 800073e:	2a20      	cmp	r2, #32
 8000740:	d004      	beq.n	800074c <__aeabi_dadd+0x1b0>
 8000742:	2040      	movs	r0, #64	; 0x40
 8000744:	4661      	mov	r1, ip
 8000746:	1a82      	subs	r2, r0, r2
 8000748:	4091      	lsls	r1, r2
 800074a:	430f      	orrs	r7, r1
 800074c:	0039      	movs	r1, r7
 800074e:	1e4f      	subs	r7, r1, #1
 8000750:	41b9      	sbcs	r1, r7
 8000752:	430d      	orrs	r5, r1
 8000754:	e11b      	b.n	800098e <__aeabi_dadd+0x3f2>
 8000756:	0029      	movs	r1, r5
 8000758:	4339      	orrs	r1, r7
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1c2>
 800075c:	e0b5      	b.n	80008ca <__aeabi_dadd+0x32e>
 800075e:	1e51      	subs	r1, r2, #1
 8000760:	2a01      	cmp	r2, #1
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x1ca>
 8000764:	e1ab      	b.n	8000abe <__aeabi_dadd+0x522>
 8000766:	486a      	ldr	r0, [pc, #424]	; (8000910 <__aeabi_dadd+0x374>)
 8000768:	4282      	cmp	r2, r0
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x1d2>
 800076c:	e1b2      	b.n	8000ad4 <__aeabi_dadd+0x538>
 800076e:	000a      	movs	r2, r1
 8000770:	e743      	b.n	80005fa <__aeabi_dadd+0x5e>
 8000772:	4969      	ldr	r1, [pc, #420]	; (8000918 <__aeabi_dadd+0x37c>)
 8000774:	1c75      	adds	r5, r6, #1
 8000776:	420d      	tst	r5, r1
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1e0>
 800077a:	e0cf      	b.n	800091c <__aeabi_dadd+0x380>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x1e6>
 8000780:	e193      	b.n	8000aaa <__aeabi_dadd+0x50e>
 8000782:	4649      	mov	r1, r9
 8000784:	4319      	orrs	r1, r3
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x1ee>
 8000788:	e1d1      	b.n	8000b2e <__aeabi_dadd+0x592>
 800078a:	4661      	mov	r1, ip
 800078c:	4339      	orrs	r1, r7
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x1f6>
 8000790:	e1e3      	b.n	8000b5a <__aeabi_dadd+0x5be>
 8000792:	4649      	mov	r1, r9
 8000794:	0758      	lsls	r0, r3, #29
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	4301      	orrs	r1, r0
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	e026      	b.n	80007ec <__aeabi_dadd+0x250>
 800079e:	0029      	movs	r1, r5
 80007a0:	4339      	orrs	r1, r7
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x20a>
 80007a4:	e091      	b.n	80008ca <__aeabi_dadd+0x32e>
 80007a6:	1e51      	subs	r1, r2, #1
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d005      	beq.n	80007b8 <__aeabi_dadd+0x21c>
 80007ac:	4858      	ldr	r0, [pc, #352]	; (8000910 <__aeabi_dadd+0x374>)
 80007ae:	4282      	cmp	r2, r0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x218>
 80007b2:	e18f      	b.n	8000ad4 <__aeabi_dadd+0x538>
 80007b4:	000a      	movs	r2, r1
 80007b6:	e7b8      	b.n	800072a <__aeabi_dadd+0x18e>
 80007b8:	003d      	movs	r5, r7
 80007ba:	444d      	add	r5, r9
 80007bc:	454d      	cmp	r5, r9
 80007be:	4189      	sbcs	r1, r1
 80007c0:	4463      	add	r3, ip
 80007c2:	4698      	mov	r8, r3
 80007c4:	4249      	negs	r1, r1
 80007c6:	4488      	add	r8, r1
 80007c8:	4643      	mov	r3, r8
 80007ca:	2602      	movs	r6, #2
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	d500      	bpl.n	80007d2 <__aeabi_dadd+0x236>
 80007d0:	e0eb      	b.n	80009aa <__aeabi_dadd+0x40e>
 80007d2:	3e01      	subs	r6, #1
 80007d4:	076b      	lsls	r3, r5, #29
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x23e>
 80007d8:	e75c      	b.n	8000694 <__aeabi_dadd+0xf8>
 80007da:	4643      	mov	r3, r8
 80007dc:	08e9      	lsrs	r1, r5, #3
 80007de:	075a      	lsls	r2, r3, #29
 80007e0:	4311      	orrs	r1, r2
 80007e2:	0032      	movs	r2, r6
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	484a      	ldr	r0, [pc, #296]	; (8000910 <__aeabi_dadd+0x374>)
 80007e8:	4282      	cmp	r2, r0
 80007ea:	d021      	beq.n	8000830 <__aeabi_dadd+0x294>
 80007ec:	031b      	lsls	r3, r3, #12
 80007ee:	0552      	lsls	r2, r2, #21
 80007f0:	0b1b      	lsrs	r3, r3, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e76c      	b.n	80006d0 <__aeabi_dadd+0x134>
 80007f6:	2300      	movs	r3, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	e769      	b.n	80006d0 <__aeabi_dadd+0x134>
 80007fc:	002a      	movs	r2, r5
 80007fe:	433a      	orrs	r2, r7
 8000800:	d069      	beq.n	80008d6 <__aeabi_dadd+0x33a>
 8000802:	464a      	mov	r2, r9
 8000804:	0758      	lsls	r0, r3, #29
 8000806:	08d1      	lsrs	r1, r2, #3
 8000808:	08da      	lsrs	r2, r3, #3
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	031b      	lsls	r3, r3, #12
 800080e:	4308      	orrs	r0, r1
 8000810:	421a      	tst	r2, r3
 8000812:	d007      	beq.n	8000824 <__aeabi_dadd+0x288>
 8000814:	0029      	movs	r1, r5
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	421d      	tst	r5, r3
 800081a:	d103      	bne.n	8000824 <__aeabi_dadd+0x288>
 800081c:	002a      	movs	r2, r5
 800081e:	08ff      	lsrs	r7, r7, #3
 8000820:	0748      	lsls	r0, r1, #29
 8000822:	4338      	orrs	r0, r7
 8000824:	0f43      	lsrs	r3, r0, #29
 8000826:	00c1      	lsls	r1, r0, #3
 8000828:	075b      	lsls	r3, r3, #29
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	4319      	orrs	r1, r3
 800082e:	0013      	movs	r3, r2
 8000830:	000a      	movs	r2, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x29c>
 8000836:	e213      	b.n	8000c60 <__aeabi_dadd+0x6c4>
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0312      	lsls	r2, r2, #12
 800083c:	4313      	orrs	r3, r2
 800083e:	031b      	lsls	r3, r3, #12
 8000840:	4a33      	ldr	r2, [pc, #204]	; (8000910 <__aeabi_dadd+0x374>)
 8000842:	0b1b      	lsrs	r3, r3, #12
 8000844:	e744      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000846:	2a00      	cmp	r2, #0
 8000848:	d04b      	beq.n	80008e2 <__aeabi_dadd+0x346>
 800084a:	1b8a      	subs	r2, r1, r6
 800084c:	2e00      	cmp	r6, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x2b6>
 8000850:	e0e7      	b.n	8000a22 <__aeabi_dadd+0x486>
 8000852:	482f      	ldr	r0, [pc, #188]	; (8000910 <__aeabi_dadd+0x374>)
 8000854:	4281      	cmp	r1, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x2be>
 8000858:	e195      	b.n	8000b86 <__aeabi_dadd+0x5ea>
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	0400      	lsls	r0, r0, #16
 800085e:	4303      	orrs	r3, r0
 8000860:	2a38      	cmp	r2, #56	; 0x38
 8000862:	dd00      	ble.n	8000866 <__aeabi_dadd+0x2ca>
 8000864:	e143      	b.n	8000aee <__aeabi_dadd+0x552>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x2d0>
 800086a:	e1db      	b.n	8000c24 <__aeabi_dadd+0x688>
 800086c:	2020      	movs	r0, #32
 800086e:	001d      	movs	r5, r3
 8000870:	464e      	mov	r6, r9
 8000872:	1a80      	subs	r0, r0, r2
 8000874:	4085      	lsls	r5, r0
 8000876:	40d6      	lsrs	r6, r2
 8000878:	4335      	orrs	r5, r6
 800087a:	464e      	mov	r6, r9
 800087c:	4086      	lsls	r6, r0
 800087e:	0030      	movs	r0, r6
 8000880:	40d3      	lsrs	r3, r2
 8000882:	1e46      	subs	r6, r0, #1
 8000884:	41b0      	sbcs	r0, r6
 8000886:	449c      	add	ip, r3
 8000888:	4305      	orrs	r5, r0
 800088a:	19ed      	adds	r5, r5, r7
 800088c:	42bd      	cmp	r5, r7
 800088e:	419b      	sbcs	r3, r3
 8000890:	425b      	negs	r3, r3
 8000892:	4463      	add	r3, ip
 8000894:	4698      	mov	r8, r3
 8000896:	000e      	movs	r6, r1
 8000898:	e07f      	b.n	800099a <__aeabi_dadd+0x3fe>
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <__aeabi_dadd+0x378>)
 800089c:	1a76      	subs	r6, r6, r1
 800089e:	4013      	ands	r3, r2
 80008a0:	4698      	mov	r8, r3
 80008a2:	e6f5      	b.n	8000690 <__aeabi_dadd+0xf4>
 80008a4:	0028      	movs	r0, r5
 80008a6:	f001 fd61 	bl	800236c <__clzsi2>
 80008aa:	0001      	movs	r1, r0
 80008ac:	3118      	adds	r1, #24
 80008ae:	291f      	cmp	r1, #31
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dadd+0x318>
 80008b2:	e6cf      	b.n	8000654 <__aeabi_dadd+0xb8>
 80008b4:	002b      	movs	r3, r5
 80008b6:	3808      	subs	r0, #8
 80008b8:	4083      	lsls	r3, r0
 80008ba:	2500      	movs	r5, #0
 80008bc:	e6d2      	b.n	8000664 <__aeabi_dadd+0xc8>
 80008be:	4662      	mov	r2, ip
 80008c0:	433a      	orrs	r2, r7
 80008c2:	0011      	movs	r1, r2
 80008c4:	1e4f      	subs	r7, r1, #1
 80008c6:	41b9      	sbcs	r1, r7
 80008c8:	e6ac      	b.n	8000624 <__aeabi_dadd+0x88>
 80008ca:	4649      	mov	r1, r9
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	08c9      	lsrs	r1, r1, #3
 80008d0:	4301      	orrs	r1, r0
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e787      	b.n	80007e6 <__aeabi_dadd+0x24a>
 80008d6:	4649      	mov	r1, r9
 80008d8:	075a      	lsls	r2, r3, #29
 80008da:	08c9      	lsrs	r1, r1, #3
 80008dc:	4311      	orrs	r1, r2
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	e7a6      	b.n	8000830 <__aeabi_dadd+0x294>
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <__aeabi_dadd+0x37c>)
 80008e4:	1c70      	adds	r0, r6, #1
 80008e6:	4208      	tst	r0, r1
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x350>
 80008ea:	e0bb      	b.n	8000a64 <__aeabi_dadd+0x4c8>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x356>
 80008f0:	e114      	b.n	8000b1c <__aeabi_dadd+0x580>
 80008f2:	4649      	mov	r1, r9
 80008f4:	4319      	orrs	r1, r3
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x35e>
 80008f8:	e175      	b.n	8000be6 <__aeabi_dadd+0x64a>
 80008fa:	0029      	movs	r1, r5
 80008fc:	4339      	orrs	r1, r7
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x366>
 8000900:	e17e      	b.n	8000c00 <__aeabi_dadd+0x664>
 8000902:	4649      	mov	r1, r9
 8000904:	0758      	lsls	r0, r3, #29
 8000906:	08c9      	lsrs	r1, r1, #3
 8000908:	4301      	orrs	r1, r0
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	e76e      	b.n	80007ec <__aeabi_dadd+0x250>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	000007ff 	.word	0x000007ff
 8000914:	ff7fffff 	.word	0xff7fffff
 8000918:	000007fe 	.word	0x000007fe
 800091c:	4649      	mov	r1, r9
 800091e:	1bcd      	subs	r5, r1, r7
 8000920:	4661      	mov	r1, ip
 8000922:	1a58      	subs	r0, r3, r1
 8000924:	45a9      	cmp	r9, r5
 8000926:	4189      	sbcs	r1, r1
 8000928:	4249      	negs	r1, r1
 800092a:	4688      	mov	r8, r1
 800092c:	0001      	movs	r1, r0
 800092e:	4640      	mov	r0, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	4688      	mov	r8, r1
 8000934:	0209      	lsls	r1, r1, #8
 8000936:	d500      	bpl.n	800093a <__aeabi_dadd+0x39e>
 8000938:	e0a6      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 800093a:	4641      	mov	r1, r8
 800093c:	4329      	orrs	r1, r5
 800093e:	d000      	beq.n	8000942 <__aeabi_dadd+0x3a6>
 8000940:	e67f      	b.n	8000642 <__aeabi_dadd+0xa6>
 8000942:	2300      	movs	r3, #0
 8000944:	2400      	movs	r4, #0
 8000946:	e751      	b.n	80007ec <__aeabi_dadd+0x250>
 8000948:	4cc7      	ldr	r4, [pc, #796]	; (8000c68 <__aeabi_dadd+0x6cc>)
 800094a:	42a1      	cmp	r1, r4
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x3b4>
 800094e:	e0c7      	b.n	8000ae0 <__aeabi_dadd+0x544>
 8000950:	2480      	movs	r4, #128	; 0x80
 8000952:	0424      	lsls	r4, r4, #16
 8000954:	4323      	orrs	r3, r4
 8000956:	2a38      	cmp	r2, #56	; 0x38
 8000958:	dc54      	bgt.n	8000a04 <__aeabi_dadd+0x468>
 800095a:	2a1f      	cmp	r2, #31
 800095c:	dd00      	ble.n	8000960 <__aeabi_dadd+0x3c4>
 800095e:	e0cc      	b.n	8000afa <__aeabi_dadd+0x55e>
 8000960:	2420      	movs	r4, #32
 8000962:	4648      	mov	r0, r9
 8000964:	1aa4      	subs	r4, r4, r2
 8000966:	001d      	movs	r5, r3
 8000968:	464e      	mov	r6, r9
 800096a:	40a0      	lsls	r0, r4
 800096c:	40d6      	lsrs	r6, r2
 800096e:	40a5      	lsls	r5, r4
 8000970:	0004      	movs	r4, r0
 8000972:	40d3      	lsrs	r3, r2
 8000974:	4662      	mov	r2, ip
 8000976:	4335      	orrs	r5, r6
 8000978:	1e66      	subs	r6, r4, #1
 800097a:	41b4      	sbcs	r4, r6
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	469c      	mov	ip, r3
 8000980:	4325      	orrs	r5, r4
 8000982:	e044      	b.n	8000a0e <__aeabi_dadd+0x472>
 8000984:	4662      	mov	r2, ip
 8000986:	433a      	orrs	r2, r7
 8000988:	0015      	movs	r5, r2
 800098a:	1e6f      	subs	r7, r5, #1
 800098c:	41bd      	sbcs	r5, r7
 800098e:	444d      	add	r5, r9
 8000990:	454d      	cmp	r5, r9
 8000992:	4189      	sbcs	r1, r1
 8000994:	4249      	negs	r1, r1
 8000996:	4688      	mov	r8, r1
 8000998:	4498      	add	r8, r3
 800099a:	4643      	mov	r3, r8
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	d400      	bmi.n	80009a2 <__aeabi_dadd+0x406>
 80009a0:	e718      	b.n	80007d4 <__aeabi_dadd+0x238>
 80009a2:	4bb1      	ldr	r3, [pc, #708]	; (8000c68 <__aeabi_dadd+0x6cc>)
 80009a4:	3601      	adds	r6, #1
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d049      	beq.n	8000a3e <__aeabi_dadd+0x4a2>
 80009aa:	4642      	mov	r2, r8
 80009ac:	4baf      	ldr	r3, [pc, #700]	; (8000c6c <__aeabi_dadd+0x6d0>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	401a      	ands	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	086a      	lsrs	r2, r5, #1
 80009b6:	400d      	ands	r5, r1
 80009b8:	4315      	orrs	r5, r2
 80009ba:	07d9      	lsls	r1, r3, #31
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	4698      	mov	r8, r3
 80009c0:	430d      	orrs	r5, r1
 80009c2:	e665      	b.n	8000690 <__aeabi_dadd+0xf4>
 80009c4:	0018      	movs	r0, r3
 80009c6:	3e1f      	subs	r6, #31
 80009c8:	40f0      	lsrs	r0, r6
 80009ca:	2a20      	cmp	r2, #32
 80009cc:	d003      	beq.n	80009d6 <__aeabi_dadd+0x43a>
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	431d      	orrs	r5, r3
 80009d6:	1e69      	subs	r1, r5, #1
 80009d8:	418d      	sbcs	r5, r1
 80009da:	2300      	movs	r3, #0
 80009dc:	2600      	movs	r6, #0
 80009de:	4698      	mov	r8, r3
 80009e0:	4305      	orrs	r5, r0
 80009e2:	e6f7      	b.n	80007d4 <__aeabi_dadd+0x238>
 80009e4:	0011      	movs	r1, r2
 80009e6:	4665      	mov	r5, ip
 80009e8:	3920      	subs	r1, #32
 80009ea:	40cd      	lsrs	r5, r1
 80009ec:	2a20      	cmp	r2, #32
 80009ee:	d004      	beq.n	80009fa <__aeabi_dadd+0x45e>
 80009f0:	2040      	movs	r0, #64	; 0x40
 80009f2:	4661      	mov	r1, ip
 80009f4:	1a82      	subs	r2, r0, r2
 80009f6:	4091      	lsls	r1, r2
 80009f8:	430f      	orrs	r7, r1
 80009fa:	0039      	movs	r1, r7
 80009fc:	1e4f      	subs	r7, r1, #1
 80009fe:	41b9      	sbcs	r1, r7
 8000a00:	4329      	orrs	r1, r5
 8000a02:	e60f      	b.n	8000624 <__aeabi_dadd+0x88>
 8000a04:	464a      	mov	r2, r9
 8000a06:	4313      	orrs	r3, r2
 8000a08:	001d      	movs	r5, r3
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	1b7d      	subs	r5, r7, r5
 8000a10:	42af      	cmp	r7, r5
 8000a12:	419b      	sbcs	r3, r3
 8000a14:	4662      	mov	r2, ip
 8000a16:	425b      	negs	r3, r3
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	4654      	mov	r4, sl
 8000a1e:	000e      	movs	r6, r1
 8000a20:	e607      	b.n	8000632 <__aeabi_dadd+0x96>
 8000a22:	4648      	mov	r0, r9
 8000a24:	4318      	orrs	r0, r3
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x48e>
 8000a28:	e0b3      	b.n	8000b92 <__aeabi_dadd+0x5f6>
 8000a2a:	1e50      	subs	r0, r2, #1
 8000a2c:	2a01      	cmp	r2, #1
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x496>
 8000a30:	e10d      	b.n	8000c4e <__aeabi_dadd+0x6b2>
 8000a32:	4d8d      	ldr	r5, [pc, #564]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000a34:	42aa      	cmp	r2, r5
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x49e>
 8000a38:	e0a5      	b.n	8000b86 <__aeabi_dadd+0x5ea>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	e710      	b.n	8000860 <__aeabi_dadd+0x2c4>
 8000a3e:	0032      	movs	r2, r6
 8000a40:	2300      	movs	r3, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	e644      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000a46:	2120      	movs	r1, #32
 8000a48:	0038      	movs	r0, r7
 8000a4a:	1a89      	subs	r1, r1, r2
 8000a4c:	4665      	mov	r5, ip
 8000a4e:	408f      	lsls	r7, r1
 8000a50:	408d      	lsls	r5, r1
 8000a52:	40d0      	lsrs	r0, r2
 8000a54:	1e79      	subs	r1, r7, #1
 8000a56:	418f      	sbcs	r7, r1
 8000a58:	4305      	orrs	r5, r0
 8000a5a:	433d      	orrs	r5, r7
 8000a5c:	4667      	mov	r7, ip
 8000a5e:	40d7      	lsrs	r7, r2
 8000a60:	19db      	adds	r3, r3, r7
 8000a62:	e794      	b.n	800098e <__aeabi_dadd+0x3f2>
 8000a64:	4a80      	ldr	r2, [pc, #512]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000a66:	4290      	cmp	r0, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x4d0>
 8000a6a:	e0ec      	b.n	8000c46 <__aeabi_dadd+0x6aa>
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	4449      	add	r1, r9
 8000a70:	4549      	cmp	r1, r9
 8000a72:	4192      	sbcs	r2, r2
 8000a74:	4463      	add	r3, ip
 8000a76:	4252      	negs	r2, r2
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	07dd      	lsls	r5, r3, #31
 8000a7c:	0849      	lsrs	r1, r1, #1
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	4698      	mov	r8, r3
 8000a82:	0006      	movs	r6, r0
 8000a84:	430d      	orrs	r5, r1
 8000a86:	e6a5      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	1abd      	subs	r5, r7, r2
 8000a8c:	42af      	cmp	r7, r5
 8000a8e:	4189      	sbcs	r1, r1
 8000a90:	4662      	mov	r2, ip
 8000a92:	4249      	negs	r1, r1
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	4698      	mov	r8, r3
 8000a9a:	4654      	mov	r4, sl
 8000a9c:	e5d1      	b.n	8000642 <__aeabi_dadd+0xa6>
 8000a9e:	076c      	lsls	r4, r5, #29
 8000aa0:	08f9      	lsrs	r1, r7, #3
 8000aa2:	4321      	orrs	r1, r4
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	e69d      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	d175      	bne.n	8000b9c <__aeabi_dadd+0x600>
 8000ab0:	4661      	mov	r1, ip
 8000ab2:	4339      	orrs	r1, r7
 8000ab4:	d114      	bne.n	8000ae0 <__aeabi_dadd+0x544>
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	2400      	movs	r4, #0
 8000aba:	031b      	lsls	r3, r3, #12
 8000abc:	e6bc      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000abe:	464a      	mov	r2, r9
 8000ac0:	1bd5      	subs	r5, r2, r7
 8000ac2:	45a9      	cmp	r9, r5
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	4698      	mov	r8, r3
 8000ad0:	2601      	movs	r6, #1
 8000ad2:	e5ae      	b.n	8000632 <__aeabi_dadd+0x96>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	08d1      	lsrs	r1, r2, #3
 8000ad8:	075a      	lsls	r2, r3, #29
 8000ada:	4311      	orrs	r1, r2
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	e6a7      	b.n	8000830 <__aeabi_dadd+0x294>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	08f9      	lsrs	r1, r7, #3
 8000ae4:	075a      	lsls	r2, r3, #29
 8000ae6:	4654      	mov	r4, sl
 8000ae8:	4311      	orrs	r1, r2
 8000aea:	08db      	lsrs	r3, r3, #3
 8000aec:	e6a0      	b.n	8000830 <__aeabi_dadd+0x294>
 8000aee:	464a      	mov	r2, r9
 8000af0:	4313      	orrs	r3, r2
 8000af2:	001d      	movs	r5, r3
 8000af4:	1e6b      	subs	r3, r5, #1
 8000af6:	419d      	sbcs	r5, r3
 8000af8:	e6c7      	b.n	800088a <__aeabi_dadd+0x2ee>
 8000afa:	0014      	movs	r4, r2
 8000afc:	001e      	movs	r6, r3
 8000afe:	3c20      	subs	r4, #32
 8000b00:	40e6      	lsrs	r6, r4
 8000b02:	2a20      	cmp	r2, #32
 8000b04:	d005      	beq.n	8000b12 <__aeabi_dadd+0x576>
 8000b06:	2440      	movs	r4, #64	; 0x40
 8000b08:	1aa2      	subs	r2, r4, r2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4691      	mov	r9, r2
 8000b12:	464d      	mov	r5, r9
 8000b14:	1e6b      	subs	r3, r5, #1
 8000b16:	419d      	sbcs	r5, r3
 8000b18:	4335      	orrs	r5, r6
 8000b1a:	e778      	b.n	8000a0e <__aeabi_dadd+0x472>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	d000      	beq.n	8000b24 <__aeabi_dadd+0x588>
 8000b22:	e66b      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b24:	076b      	lsls	r3, r5, #29
 8000b26:	08f9      	lsrs	r1, r7, #3
 8000b28:	4319      	orrs	r1, r3
 8000b2a:	08eb      	lsrs	r3, r5, #3
 8000b2c:	e680      	b.n	8000830 <__aeabi_dadd+0x294>
 8000b2e:	4661      	mov	r1, ip
 8000b30:	4339      	orrs	r1, r7
 8000b32:	d054      	beq.n	8000bde <__aeabi_dadd+0x642>
 8000b34:	4663      	mov	r3, ip
 8000b36:	08f9      	lsrs	r1, r7, #3
 8000b38:	075c      	lsls	r4, r3, #29
 8000b3a:	4321      	orrs	r1, r4
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	0004      	movs	r4, r0
 8000b40:	e654      	b.n	80007ec <__aeabi_dadd+0x250>
 8000b42:	464a      	mov	r2, r9
 8000b44:	1abd      	subs	r5, r7, r2
 8000b46:	42af      	cmp	r7, r5
 8000b48:	4189      	sbcs	r1, r1
 8000b4a:	4662      	mov	r2, ip
 8000b4c:	4249      	negs	r1, r1
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	4698      	mov	r8, r3
 8000b54:	0004      	movs	r4, r0
 8000b56:	2601      	movs	r6, #1
 8000b58:	e56b      	b.n	8000632 <__aeabi_dadd+0x96>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	1bd5      	subs	r5, r2, r7
 8000b5e:	45a9      	cmp	r9, r5
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4662      	mov	r2, ip
 8000b64:	4249      	negs	r1, r1
 8000b66:	1a9a      	subs	r2, r3, r2
 8000b68:	1a52      	subs	r2, r2, r1
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	0212      	lsls	r2, r2, #8
 8000b6e:	d532      	bpl.n	8000bd6 <__aeabi_dadd+0x63a>
 8000b70:	464a      	mov	r2, r9
 8000b72:	1abd      	subs	r5, r7, r2
 8000b74:	42af      	cmp	r7, r5
 8000b76:	4189      	sbcs	r1, r1
 8000b78:	4662      	mov	r2, ip
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	0004      	movs	r4, r0
 8000b84:	e584      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000b86:	4663      	mov	r3, ip
 8000b88:	08f9      	lsrs	r1, r7, #3
 8000b8a:	075a      	lsls	r2, r3, #29
 8000b8c:	4311      	orrs	r1, r2
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	e64e      	b.n	8000830 <__aeabi_dadd+0x294>
 8000b92:	08f9      	lsrs	r1, r7, #3
 8000b94:	0768      	lsls	r0, r5, #29
 8000b96:	4301      	orrs	r1, r0
 8000b98:	08eb      	lsrs	r3, r5, #3
 8000b9a:	e624      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	433a      	orrs	r2, r7
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x608>
 8000ba2:	e698      	b.n	80008d6 <__aeabi_dadd+0x33a>
 8000ba4:	464a      	mov	r2, r9
 8000ba6:	08d1      	lsrs	r1, r2, #3
 8000ba8:	075a      	lsls	r2, r3, #29
 8000baa:	4311      	orrs	r1, r2
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	031b      	lsls	r3, r3, #12
 8000bb2:	421a      	tst	r2, r3
 8000bb4:	d008      	beq.n	8000bc8 <__aeabi_dadd+0x62c>
 8000bb6:	4660      	mov	r0, ip
 8000bb8:	08c5      	lsrs	r5, r0, #3
 8000bba:	421d      	tst	r5, r3
 8000bbc:	d104      	bne.n	8000bc8 <__aeabi_dadd+0x62c>
 8000bbe:	4654      	mov	r4, sl
 8000bc0:	002a      	movs	r2, r5
 8000bc2:	08f9      	lsrs	r1, r7, #3
 8000bc4:	0743      	lsls	r3, r0, #29
 8000bc6:	4319      	orrs	r1, r3
 8000bc8:	0f4b      	lsrs	r3, r1, #29
 8000bca:	00c9      	lsls	r1, r1, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	08c9      	lsrs	r1, r1, #3
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	e62c      	b.n	8000830 <__aeabi_dadd+0x294>
 8000bd6:	4641      	mov	r1, r8
 8000bd8:	4329      	orrs	r1, r5
 8000bda:	d000      	beq.n	8000bde <__aeabi_dadd+0x642>
 8000bdc:	e5fa      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000bde:	2300      	movs	r3, #0
 8000be0:	000a      	movs	r2, r1
 8000be2:	2400      	movs	r4, #0
 8000be4:	e602      	b.n	80007ec <__aeabi_dadd+0x250>
 8000be6:	076b      	lsls	r3, r5, #29
 8000be8:	08f9      	lsrs	r1, r7, #3
 8000bea:	4319      	orrs	r1, r3
 8000bec:	08eb      	lsrs	r3, r5, #3
 8000bee:	e5fd      	b.n	80007ec <__aeabi_dadd+0x250>
 8000bf0:	4663      	mov	r3, ip
 8000bf2:	08f9      	lsrs	r1, r7, #3
 8000bf4:	075b      	lsls	r3, r3, #29
 8000bf6:	4319      	orrs	r1, r3
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	0004      	movs	r4, r0
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	e617      	b.n	8000830 <__aeabi_dadd+0x294>
 8000c00:	003d      	movs	r5, r7
 8000c02:	444d      	add	r5, r9
 8000c04:	4463      	add	r3, ip
 8000c06:	454d      	cmp	r5, r9
 8000c08:	4189      	sbcs	r1, r1
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	4249      	negs	r1, r1
 8000c0e:	4488      	add	r8, r1
 8000c10:	4643      	mov	r3, r8
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	d400      	bmi.n	8000c18 <__aeabi_dadd+0x67c>
 8000c16:	e5dd      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <__aeabi_dadd+0x6d0>)
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	401a      	ands	r2, r3
 8000c20:	4690      	mov	r8, r2
 8000c22:	e5d7      	b.n	80007d4 <__aeabi_dadd+0x238>
 8000c24:	0010      	movs	r0, r2
 8000c26:	001e      	movs	r6, r3
 8000c28:	3820      	subs	r0, #32
 8000c2a:	40c6      	lsrs	r6, r0
 8000c2c:	2a20      	cmp	r2, #32
 8000c2e:	d005      	beq.n	8000c3c <__aeabi_dadd+0x6a0>
 8000c30:	2040      	movs	r0, #64	; 0x40
 8000c32:	1a82      	subs	r2, r0, r2
 8000c34:	4093      	lsls	r3, r2
 8000c36:	464a      	mov	r2, r9
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	464d      	mov	r5, r9
 8000c3e:	1e6b      	subs	r3, r5, #1
 8000c40:	419d      	sbcs	r5, r3
 8000c42:	4335      	orrs	r5, r6
 8000c44:	e621      	b.n	800088a <__aeabi_dadd+0x2ee>
 8000c46:	0002      	movs	r2, r0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e540      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000c4e:	464a      	mov	r2, r9
 8000c50:	19d5      	adds	r5, r2, r7
 8000c52:	42bd      	cmp	r5, r7
 8000c54:	4189      	sbcs	r1, r1
 8000c56:	4463      	add	r3, ip
 8000c58:	4698      	mov	r8, r3
 8000c5a:	4249      	negs	r1, r1
 8000c5c:	4488      	add	r8, r1
 8000c5e:	e5b3      	b.n	80007c8 <__aeabi_dadd+0x22c>
 8000c60:	2100      	movs	r1, #0
 8000c62:	4a01      	ldr	r2, [pc, #4]	; (8000c68 <__aeabi_dadd+0x6cc>)
 8000c64:	000b      	movs	r3, r1
 8000c66:	e533      	b.n	80006d0 <__aeabi_dadd+0x134>
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	ff7fffff 	.word	0xff7fffff

08000c70 <__aeabi_ddiv>:
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	4657      	mov	r7, sl
 8000c74:	464e      	mov	r6, r9
 8000c76:	4645      	mov	r5, r8
 8000c78:	46de      	mov	lr, fp
 8000c7a:	b5e0      	push	{r5, r6, r7, lr}
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	0005      	movs	r5, r0
 8000c80:	030c      	lsls	r4, r1, #12
 8000c82:	0048      	lsls	r0, r1, #1
 8000c84:	4692      	mov	sl, r2
 8000c86:	001f      	movs	r7, r3
 8000c88:	b085      	sub	sp, #20
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	0d40      	lsrs	r0, r0, #21
 8000c8e:	0fce      	lsrs	r6, r1, #31
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d059      	beq.n	8000d48 <__aeabi_ddiv+0xd8>
 8000c94:	4b87      	ldr	r3, [pc, #540]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000c96:	4298      	cmp	r0, r3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_ddiv+0x2c>
 8000c9a:	e098      	b.n	8000dce <__aeabi_ddiv+0x15e>
 8000c9c:	0f6b      	lsrs	r3, r5, #29
 8000c9e:	00e4      	lsls	r4, r4, #3
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	4323      	orrs	r3, r4
 8000ca8:	4698      	mov	r8, r3
 8000caa:	4b83      	ldr	r3, [pc, #524]	; (8000eb8 <__aeabi_ddiv+0x248>)
 8000cac:	00ed      	lsls	r5, r5, #3
 8000cae:	469b      	mov	fp, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	4483      	add	fp, r0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	033c      	lsls	r4, r7, #12
 8000cba:	007b      	lsls	r3, r7, #1
 8000cbc:	4650      	mov	r0, sl
 8000cbe:	0b24      	lsrs	r4, r4, #12
 8000cc0:	0d5b      	lsrs	r3, r3, #21
 8000cc2:	0fff      	lsrs	r7, r7, #31
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d067      	beq.n	8000d98 <__aeabi_ddiv+0x128>
 8000cc8:	4a7a      	ldr	r2, [pc, #488]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d018      	beq.n	8000d00 <__aeabi_ddiv+0x90>
 8000cce:	497a      	ldr	r1, [pc, #488]	; (8000eb8 <__aeabi_ddiv+0x248>)
 8000cd0:	0f42      	lsrs	r2, r0, #29
 8000cd2:	468c      	mov	ip, r1
 8000cd4:	00e4      	lsls	r4, r4, #3
 8000cd6:	4659      	mov	r1, fp
 8000cd8:	4314      	orrs	r4, r2
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	4463      	add	r3, ip
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	4314      	orrs	r4, r2
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	00c2      	lsls	r2, r0, #3
 8000ce8:	2000      	movs	r0, #0
 8000cea:	0033      	movs	r3, r6
 8000cec:	407b      	eors	r3, r7
 8000cee:	469a      	mov	sl, r3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d900      	bls.n	8000cf8 <__aeabi_ddiv+0x88>
 8000cf6:	e0ef      	b.n	8000ed8 <__aeabi_ddiv+0x268>
 8000cf8:	4970      	ldr	r1, [pc, #448]	; (8000ebc <__aeabi_ddiv+0x24c>)
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	58cb      	ldr	r3, [r1, r3]
 8000cfe:	469f      	mov	pc, r3
 8000d00:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <__aeabi_ddiv+0x250>)
 8000d02:	4652      	mov	r2, sl
 8000d04:	469c      	mov	ip, r3
 8000d06:	4322      	orrs	r2, r4
 8000d08:	44e3      	add	fp, ip
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_ddiv+0xa0>
 8000d0e:	e095      	b.n	8000e3c <__aeabi_ddiv+0x1cc>
 8000d10:	4649      	mov	r1, r9
 8000d12:	2302      	movs	r3, #2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	4689      	mov	r9, r1
 8000d18:	2400      	movs	r4, #0
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	e7e5      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	2500      	movs	r5, #0
 8000d24:	4652      	mov	r2, sl
 8000d26:	051b      	lsls	r3, r3, #20
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	07d2      	lsls	r2, r2, #31
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	0028      	movs	r0, r5
 8000d30:	0019      	movs	r1, r3
 8000d32:	b005      	add	sp, #20
 8000d34:	bcf0      	pop	{r4, r5, r6, r7}
 8000d36:	46bb      	mov	fp, r7
 8000d38:	46b2      	mov	sl, r6
 8000d3a:	46a9      	mov	r9, r5
 8000d3c:	46a0      	mov	r8, r4
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d40:	2400      	movs	r4, #0
 8000d42:	2500      	movs	r5, #0
 8000d44:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000d46:	e7ed      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000d48:	464b      	mov	r3, r9
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_ddiv+0xe2>
 8000d50:	e089      	b.n	8000e66 <__aeabi_ddiv+0x1f6>
 8000d52:	2c00      	cmp	r4, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0xe8>
 8000d56:	e1e0      	b.n	800111a <__aeabi_ddiv+0x4aa>
 8000d58:	0020      	movs	r0, r4
 8000d5a:	f001 fb07 	bl	800236c <__clzsi2>
 8000d5e:	0001      	movs	r1, r0
 8000d60:	0002      	movs	r2, r0
 8000d62:	390b      	subs	r1, #11
 8000d64:	231d      	movs	r3, #29
 8000d66:	1a5b      	subs	r3, r3, r1
 8000d68:	4649      	mov	r1, r9
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	40d9      	lsrs	r1, r3
 8000d6e:	3808      	subs	r0, #8
 8000d70:	4084      	lsls	r4, r0
 8000d72:	000b      	movs	r3, r1
 8000d74:	464d      	mov	r5, r9
 8000d76:	4323      	orrs	r3, r4
 8000d78:	4698      	mov	r8, r3
 8000d7a:	4085      	lsls	r5, r0
 8000d7c:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <__aeabi_ddiv+0x254>)
 8000d7e:	033c      	lsls	r4, r7, #12
 8000d80:	1a83      	subs	r3, r0, r2
 8000d82:	469b      	mov	fp, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	4699      	mov	r9, r3
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	007b      	lsls	r3, r7, #1
 8000d8c:	4650      	mov	r0, sl
 8000d8e:	0b24      	lsrs	r4, r4, #12
 8000d90:	0d5b      	lsrs	r3, r3, #21
 8000d92:	0fff      	lsrs	r7, r7, #31
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d197      	bne.n	8000cc8 <__aeabi_ddiv+0x58>
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4322      	orrs	r2, r4
 8000d9c:	d055      	beq.n	8000e4a <__aeabi_ddiv+0x1da>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_ddiv+0x134>
 8000da2:	e1ca      	b.n	800113a <__aeabi_ddiv+0x4ca>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f001 fae1 	bl	800236c <__clzsi2>
 8000daa:	0002      	movs	r2, r0
 8000dac:	3a0b      	subs	r2, #11
 8000dae:	231d      	movs	r3, #29
 8000db0:	0001      	movs	r1, r0
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	4652      	mov	r2, sl
 8000db6:	3908      	subs	r1, #8
 8000db8:	40da      	lsrs	r2, r3
 8000dba:	408c      	lsls	r4, r1
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	4652      	mov	r2, sl
 8000dc0:	408a      	lsls	r2, r1
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <__aeabi_ddiv+0x258>)
 8000dc4:	4458      	add	r0, fp
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	4483      	add	fp, r0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	e78d      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	d140      	bne.n	8000e58 <__aeabi_ddiv+0x1e8>
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	4699      	mov	r9, r3
 8000dda:	3b06      	subs	r3, #6
 8000ddc:	2500      	movs	r5, #0
 8000dde:	4683      	mov	fp, r0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e769      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000de4:	46b2      	mov	sl, r6
 8000de6:	9b00      	ldr	r3, [sp, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d0a9      	beq.n	8000d40 <__aeabi_ddiv+0xd0>
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x182>
 8000df0:	e211      	b.n	8001216 <__aeabi_ddiv+0x5a6>
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d093      	beq.n	8000d1e <__aeabi_ddiv+0xae>
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <__aeabi_ddiv+0x25c>)
 8000df8:	445a      	add	r2, fp
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	dc00      	bgt.n	8000e00 <__aeabi_ddiv+0x190>
 8000dfe:	e13c      	b.n	800107a <__aeabi_ddiv+0x40a>
 8000e00:	076b      	lsls	r3, r5, #29
 8000e02:	d000      	beq.n	8000e06 <__aeabi_ddiv+0x196>
 8000e04:	e1a7      	b.n	8001156 <__aeabi_ddiv+0x4e6>
 8000e06:	08ed      	lsrs	r5, r5, #3
 8000e08:	4643      	mov	r3, r8
 8000e0a:	01db      	lsls	r3, r3, #7
 8000e0c:	d506      	bpl.n	8000e1c <__aeabi_ddiv+0x1ac>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <__aeabi_ddiv+0x260>)
 8000e12:	401a      	ands	r2, r3
 8000e14:	4690      	mov	r8, r2
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	445a      	add	r2, fp
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <__aeabi_ddiv+0x264>)
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dc8e      	bgt.n	8000d40 <__aeabi_ddiv+0xd0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	0552      	lsls	r2, r2, #21
 8000e26:	0758      	lsls	r0, r3, #29
 8000e28:	025c      	lsls	r4, r3, #9
 8000e2a:	4305      	orrs	r5, r0
 8000e2c:	0b24      	lsrs	r4, r4, #12
 8000e2e:	0d53      	lsrs	r3, r2, #21
 8000e30:	e778      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000e32:	46ba      	mov	sl, r7
 8000e34:	46a0      	mov	r8, r4
 8000e36:	0015      	movs	r5, r2
 8000e38:	9000      	str	r0, [sp, #0]
 8000e3a:	e7d4      	b.n	8000de6 <__aeabi_ddiv+0x176>
 8000e3c:	464a      	mov	r2, r9
 8000e3e:	2303      	movs	r3, #3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	4691      	mov	r9, r2
 8000e44:	2003      	movs	r0, #3
 8000e46:	4652      	mov	r2, sl
 8000e48:	e74f      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4319      	orrs	r1, r3
 8000e50:	4689      	mov	r9, r1
 8000e52:	2400      	movs	r4, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	e748      	b.n	8000cea <__aeabi_ddiv+0x7a>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	3b09      	subs	r3, #9
 8000e5e:	46a0      	mov	r8, r4
 8000e60:	4683      	mov	fp, r0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	e728      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000e66:	2304      	movs	r3, #4
 8000e68:	4699      	mov	r9, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	469b      	mov	fp, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	2500      	movs	r5, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	e720      	b.n	8000cb8 <__aeabi_ddiv+0x48>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2480      	movs	r4, #128	; 0x80
 8000e7a:	469a      	mov	sl, r3
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	e74f      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	4641      	mov	r1, r8
 8000e88:	031b      	lsls	r3, r3, #12
 8000e8a:	4219      	tst	r1, r3
 8000e8c:	d008      	beq.n	8000ea0 <__aeabi_ddiv+0x230>
 8000e8e:	421c      	tst	r4, r3
 8000e90:	d106      	bne.n	8000ea0 <__aeabi_ddiv+0x230>
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46ba      	mov	sl, r7
 8000e98:	0015      	movs	r5, r2
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000e9c:	0b24      	lsrs	r4, r4, #12
 8000e9e:	e741      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	0324      	lsls	r4, r4, #12
 8000ea6:	431c      	orrs	r4, r3
 8000ea8:	0324      	lsls	r4, r4, #12
 8000eaa:	46b2      	mov	sl, r6
 8000eac:	4b01      	ldr	r3, [pc, #4]	; (8000eb4 <__aeabi_ddiv+0x244>)
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	e738      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	fffffc01 	.word	0xfffffc01
 8000ebc:	0800d77c 	.word	0x0800d77c
 8000ec0:	fffff801 	.word	0xfffff801
 8000ec4:	fffffc0d 	.word	0xfffffc0d
 8000ec8:	000003f3 	.word	0x000003f3
 8000ecc:	000003ff 	.word	0x000003ff
 8000ed0:	feffffff 	.word	0xfeffffff
 8000ed4:	000007fe 	.word	0x000007fe
 8000ed8:	4544      	cmp	r4, r8
 8000eda:	d200      	bcs.n	8000ede <__aeabi_ddiv+0x26e>
 8000edc:	e116      	b.n	800110c <__aeabi_ddiv+0x49c>
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x272>
 8000ee0:	e111      	b.n	8001106 <__aeabi_ddiv+0x496>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	002e      	movs	r6, r5
 8000eea:	4640      	mov	r0, r8
 8000eec:	2500      	movs	r5, #0
 8000eee:	44e3      	add	fp, ip
 8000ef0:	0223      	lsls	r3, r4, #8
 8000ef2:	0e14      	lsrs	r4, r2, #24
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	4699      	mov	r9, r3
 8000efa:	0423      	lsls	r3, r4, #16
 8000efc:	0c1f      	lsrs	r7, r3, #16
 8000efe:	0212      	lsls	r2, r2, #8
 8000f00:	4649      	mov	r1, r9
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	9701      	str	r7, [sp, #4]
 8000f06:	f7ff f9ab 	bl	8000260 <__aeabi_uidivmod>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	437a      	muls	r2, r7
 8000f0e:	040b      	lsls	r3, r1, #16
 8000f10:	0c31      	lsrs	r1, r6, #16
 8000f12:	4680      	mov	r8, r0
 8000f14:	4319      	orrs	r1, r3
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d90b      	bls.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	469c      	mov	ip, r3
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	44e0      	add	r8, ip
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d804      	bhi.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f28:	428a      	cmp	r2, r1
 8000f2a:	d902      	bls.n	8000f32 <__aeabi_ddiv+0x2c2>
 8000f2c:	1e83      	subs	r3, r0, #2
 8000f2e:	4698      	mov	r8, r3
 8000f30:	1909      	adds	r1, r1, r4
 8000f32:	1a88      	subs	r0, r1, r2
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f993 	bl	8000260 <__aeabi_uidivmod>
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	0431      	lsls	r1, r6, #16
 8000f40:	4666      	mov	r6, ip
 8000f42:	9a01      	ldr	r2, [sp, #4]
 8000f44:	0c09      	lsrs	r1, r1, #16
 8000f46:	4342      	muls	r2, r0
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4331      	orrs	r1, r6
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	d904      	bls.n	8000f5a <__aeabi_ddiv+0x2ea>
 8000f50:	1909      	adds	r1, r1, r4
 8000f52:	3b01      	subs	r3, #1
 8000f54:	428c      	cmp	r4, r1
 8000f56:	d800      	bhi.n	8000f5a <__aeabi_ddiv+0x2ea>
 8000f58:	e111      	b.n	800117e <__aeabi_ddiv+0x50e>
 8000f5a:	1a89      	subs	r1, r1, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	9e00      	ldr	r6, [sp, #0]
 8000f60:	0412      	lsls	r2, r2, #16
 8000f62:	431a      	orrs	r2, r3
 8000f64:	0c33      	lsrs	r3, r6, #16
 8000f66:	001f      	movs	r7, r3
 8000f68:	0c10      	lsrs	r0, r2, #16
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	0413      	lsls	r3, r2, #16
 8000f70:	0432      	lsls	r2, r6, #16
 8000f72:	0c16      	lsrs	r6, r2, #16
 8000f74:	0032      	movs	r2, r6
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	9603      	str	r6, [sp, #12]
 8000f7c:	437b      	muls	r3, r7
 8000f7e:	4346      	muls	r6, r0
 8000f80:	4378      	muls	r0, r7
 8000f82:	0c17      	lsrs	r7, r2, #16
 8000f84:	46bc      	mov	ip, r7
 8000f86:	199b      	adds	r3, r3, r6
 8000f88:	4463      	add	r3, ip
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x326>
 8000f8e:	2680      	movs	r6, #128	; 0x80
 8000f90:	0276      	lsls	r6, r6, #9
 8000f92:	46b4      	mov	ip, r6
 8000f94:	4460      	add	r0, ip
 8000f96:	0c1e      	lsrs	r6, r3, #16
 8000f98:	1830      	adds	r0, r6, r0
 8000f9a:	0416      	lsls	r6, r2, #16
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	0c36      	lsrs	r6, r6, #16
 8000fa0:	199e      	adds	r6, r3, r6
 8000fa2:	4281      	cmp	r1, r0
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x338>
 8000fa6:	e09c      	b.n	80010e2 <__aeabi_ddiv+0x472>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x33c>
 8000faa:	e097      	b.n	80010dc <__aeabi_ddiv+0x46c>
 8000fac:	1bae      	subs	r6, r5, r6
 8000fae:	1a09      	subs	r1, r1, r0
 8000fb0:	42b5      	cmp	r5, r6
 8000fb2:	4180      	sbcs	r0, r0
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	1a08      	subs	r0, r1, r0
 8000fb8:	4284      	cmp	r4, r0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x34e>
 8000fbc:	e111      	b.n	80011e2 <__aeabi_ddiv+0x572>
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	f7ff f94e 	bl	8000260 <__aeabi_uidivmod>
 8000fc4:	9a01      	ldr	r2, [sp, #4]
 8000fc6:	040b      	lsls	r3, r1, #16
 8000fc8:	4342      	muls	r2, r0
 8000fca:	0c31      	lsrs	r1, r6, #16
 8000fcc:	0005      	movs	r5, r0
 8000fce:	4319      	orrs	r1, r3
 8000fd0:	428a      	cmp	r2, r1
 8000fd2:	d907      	bls.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fd4:	1909      	adds	r1, r1, r4
 8000fd6:	3d01      	subs	r5, #1
 8000fd8:	428c      	cmp	r4, r1
 8000fda:	d803      	bhi.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fdc:	428a      	cmp	r2, r1
 8000fde:	d901      	bls.n	8000fe4 <__aeabi_ddiv+0x374>
 8000fe0:	1e85      	subs	r5, r0, #2
 8000fe2:	1909      	adds	r1, r1, r4
 8000fe4:	1a88      	subs	r0, r1, r2
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	f7ff f93a 	bl	8000260 <__aeabi_uidivmod>
 8000fec:	0409      	lsls	r1, r1, #16
 8000fee:	468c      	mov	ip, r1
 8000ff0:	0431      	lsls	r1, r6, #16
 8000ff2:	4666      	mov	r6, ip
 8000ff4:	9a01      	ldr	r2, [sp, #4]
 8000ff6:	0c09      	lsrs	r1, r1, #16
 8000ff8:	4342      	muls	r2, r0
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	4331      	orrs	r1, r6
 8000ffe:	428a      	cmp	r2, r1
 8001000:	d907      	bls.n	8001012 <__aeabi_ddiv+0x3a2>
 8001002:	1909      	adds	r1, r1, r4
 8001004:	3b01      	subs	r3, #1
 8001006:	428c      	cmp	r4, r1
 8001008:	d803      	bhi.n	8001012 <__aeabi_ddiv+0x3a2>
 800100a:	428a      	cmp	r2, r1
 800100c:	d901      	bls.n	8001012 <__aeabi_ddiv+0x3a2>
 800100e:	1e83      	subs	r3, r0, #2
 8001010:	1909      	adds	r1, r1, r4
 8001012:	9e03      	ldr	r6, [sp, #12]
 8001014:	1a89      	subs	r1, r1, r2
 8001016:	0032      	movs	r2, r6
 8001018:	042d      	lsls	r5, r5, #16
 800101a:	431d      	orrs	r5, r3
 800101c:	9f02      	ldr	r7, [sp, #8]
 800101e:	042b      	lsls	r3, r5, #16
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	435a      	muls	r2, r3
 8001024:	437b      	muls	r3, r7
 8001026:	469c      	mov	ip, r3
 8001028:	0c28      	lsrs	r0, r5, #16
 800102a:	4346      	muls	r6, r0
 800102c:	0c13      	lsrs	r3, r2, #16
 800102e:	44b4      	add	ip, r6
 8001030:	4463      	add	r3, ip
 8001032:	4378      	muls	r0, r7
 8001034:	429e      	cmp	r6, r3
 8001036:	d903      	bls.n	8001040 <__aeabi_ddiv+0x3d0>
 8001038:	2680      	movs	r6, #128	; 0x80
 800103a:	0276      	lsls	r6, r6, #9
 800103c:	46b4      	mov	ip, r6
 800103e:	4460      	add	r0, ip
 8001040:	0c1e      	lsrs	r6, r3, #16
 8001042:	0412      	lsls	r2, r2, #16
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0c12      	lsrs	r2, r2, #16
 8001048:	1830      	adds	r0, r6, r0
 800104a:	189b      	adds	r3, r3, r2
 800104c:	4281      	cmp	r1, r0
 800104e:	d306      	bcc.n	800105e <__aeabi_ddiv+0x3ee>
 8001050:	d002      	beq.n	8001058 <__aeabi_ddiv+0x3e8>
 8001052:	2301      	movs	r3, #1
 8001054:	431d      	orrs	r5, r3
 8001056:	e6ce      	b.n	8000df6 <__aeabi_ddiv+0x186>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x3ee>
 800105c:	e6cb      	b.n	8000df6 <__aeabi_ddiv+0x186>
 800105e:	1861      	adds	r1, r4, r1
 8001060:	1e6e      	subs	r6, r5, #1
 8001062:	42a1      	cmp	r1, r4
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x3f8>
 8001066:	e0a4      	b.n	80011b2 <__aeabi_ddiv+0x542>
 8001068:	4281      	cmp	r1, r0
 800106a:	d200      	bcs.n	800106e <__aeabi_ddiv+0x3fe>
 800106c:	e0c9      	b.n	8001202 <__aeabi_ddiv+0x592>
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0x402>
 8001070:	e0d9      	b.n	8001226 <__aeabi_ddiv+0x5b6>
 8001072:	0035      	movs	r5, r6
 8001074:	e7ed      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 8001076:	2501      	movs	r5, #1
 8001078:	426d      	negs	r5, r5
 800107a:	2101      	movs	r1, #1
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	2938      	cmp	r1, #56	; 0x38
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x414>
 8001082:	e64c      	b.n	8000d1e <__aeabi_ddiv+0xae>
 8001084:	291f      	cmp	r1, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_ddiv+0x41a>
 8001088:	e07f      	b.n	800118a <__aeabi_ddiv+0x51a>
 800108a:	231f      	movs	r3, #31
 800108c:	425b      	negs	r3, r3
 800108e:	1a9a      	subs	r2, r3, r2
 8001090:	4643      	mov	r3, r8
 8001092:	40d3      	lsrs	r3, r2
 8001094:	2920      	cmp	r1, #32
 8001096:	d004      	beq.n	80010a2 <__aeabi_ddiv+0x432>
 8001098:	4644      	mov	r4, r8
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <__aeabi_ddiv+0x5c0>)
 800109c:	445a      	add	r2, fp
 800109e:	4094      	lsls	r4, r2
 80010a0:	4325      	orrs	r5, r4
 80010a2:	1e6a      	subs	r2, r5, #1
 80010a4:	4195      	sbcs	r5, r2
 80010a6:	2207      	movs	r2, #7
 80010a8:	432b      	orrs	r3, r5
 80010aa:	0015      	movs	r5, r2
 80010ac:	2400      	movs	r4, #0
 80010ae:	401d      	ands	r5, r3
 80010b0:	421a      	tst	r2, r3
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x446>
 80010b4:	e0a1      	b.n	80011fa <__aeabi_ddiv+0x58a>
 80010b6:	220f      	movs	r2, #15
 80010b8:	2400      	movs	r4, #0
 80010ba:	401a      	ands	r2, r3
 80010bc:	2a04      	cmp	r2, #4
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x452>
 80010c0:	e098      	b.n	80011f4 <__aeabi_ddiv+0x584>
 80010c2:	1d1a      	adds	r2, r3, #4
 80010c4:	429a      	cmp	r2, r3
 80010c6:	419b      	sbcs	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	18e4      	adds	r4, r4, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	0222      	lsls	r2, r4, #8
 80010d0:	d400      	bmi.n	80010d4 <__aeabi_ddiv+0x464>
 80010d2:	e08f      	b.n	80011f4 <__aeabi_ddiv+0x584>
 80010d4:	2301      	movs	r3, #1
 80010d6:	2400      	movs	r4, #0
 80010d8:	2500      	movs	r5, #0
 80010da:	e623      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 80010dc:	42b5      	cmp	r5, r6
 80010de:	d300      	bcc.n	80010e2 <__aeabi_ddiv+0x472>
 80010e0:	e764      	b.n	8000fac <__aeabi_ddiv+0x33c>
 80010e2:	4643      	mov	r3, r8
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	9b00      	ldr	r3, [sp, #0]
 80010e8:	469c      	mov	ip, r3
 80010ea:	4465      	add	r5, ip
 80010ec:	001f      	movs	r7, r3
 80010ee:	429d      	cmp	r5, r3
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	425b      	negs	r3, r3
 80010f4:	191b      	adds	r3, r3, r4
 80010f6:	18c9      	adds	r1, r1, r3
 80010f8:	428c      	cmp	r4, r1
 80010fa:	d23a      	bcs.n	8001172 <__aeabi_ddiv+0x502>
 80010fc:	4288      	cmp	r0, r1
 80010fe:	d863      	bhi.n	80011c8 <__aeabi_ddiv+0x558>
 8001100:	d060      	beq.n	80011c4 <__aeabi_ddiv+0x554>
 8001102:	4690      	mov	r8, r2
 8001104:	e752      	b.n	8000fac <__aeabi_ddiv+0x33c>
 8001106:	42aa      	cmp	r2, r5
 8001108:	d900      	bls.n	800110c <__aeabi_ddiv+0x49c>
 800110a:	e6ea      	b.n	8000ee2 <__aeabi_ddiv+0x272>
 800110c:	4643      	mov	r3, r8
 800110e:	07de      	lsls	r6, r3, #31
 8001110:	0858      	lsrs	r0, r3, #1
 8001112:	086b      	lsrs	r3, r5, #1
 8001114:	431e      	orrs	r6, r3
 8001116:	07ed      	lsls	r5, r5, #31
 8001118:	e6ea      	b.n	8000ef0 <__aeabi_ddiv+0x280>
 800111a:	4648      	mov	r0, r9
 800111c:	f001 f926 	bl	800236c <__clzsi2>
 8001120:	0001      	movs	r1, r0
 8001122:	0002      	movs	r2, r0
 8001124:	3115      	adds	r1, #21
 8001126:	3220      	adds	r2, #32
 8001128:	291c      	cmp	r1, #28
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x4be>
 800112c:	e61a      	b.n	8000d64 <__aeabi_ddiv+0xf4>
 800112e:	464b      	mov	r3, r9
 8001130:	3808      	subs	r0, #8
 8001132:	4083      	lsls	r3, r0
 8001134:	2500      	movs	r5, #0
 8001136:	4698      	mov	r8, r3
 8001138:	e620      	b.n	8000d7c <__aeabi_ddiv+0x10c>
 800113a:	f001 f917 	bl	800236c <__clzsi2>
 800113e:	0003      	movs	r3, r0
 8001140:	001a      	movs	r2, r3
 8001142:	3215      	adds	r2, #21
 8001144:	3020      	adds	r0, #32
 8001146:	2a1c      	cmp	r2, #28
 8001148:	dc00      	bgt.n	800114c <__aeabi_ddiv+0x4dc>
 800114a:	e630      	b.n	8000dae <__aeabi_ddiv+0x13e>
 800114c:	4654      	mov	r4, sl
 800114e:	3b08      	subs	r3, #8
 8001150:	2200      	movs	r2, #0
 8001152:	409c      	lsls	r4, r3
 8001154:	e635      	b.n	8000dc2 <__aeabi_ddiv+0x152>
 8001156:	230f      	movs	r3, #15
 8001158:	402b      	ands	r3, r5
 800115a:	2b04      	cmp	r3, #4
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x4f0>
 800115e:	e652      	b.n	8000e06 <__aeabi_ddiv+0x196>
 8001160:	2305      	movs	r3, #5
 8001162:	425b      	negs	r3, r3
 8001164:	42ab      	cmp	r3, r5
 8001166:	419b      	sbcs	r3, r3
 8001168:	3504      	adds	r5, #4
 800116a:	425b      	negs	r3, r3
 800116c:	08ed      	lsrs	r5, r5, #3
 800116e:	4498      	add	r8, r3
 8001170:	e64a      	b.n	8000e08 <__aeabi_ddiv+0x198>
 8001172:	428c      	cmp	r4, r1
 8001174:	d1c5      	bne.n	8001102 <__aeabi_ddiv+0x492>
 8001176:	42af      	cmp	r7, r5
 8001178:	d9c0      	bls.n	80010fc <__aeabi_ddiv+0x48c>
 800117a:	4690      	mov	r8, r2
 800117c:	e716      	b.n	8000fac <__aeabi_ddiv+0x33c>
 800117e:	428a      	cmp	r2, r1
 8001180:	d800      	bhi.n	8001184 <__aeabi_ddiv+0x514>
 8001182:	e6ea      	b.n	8000f5a <__aeabi_ddiv+0x2ea>
 8001184:	1e83      	subs	r3, r0, #2
 8001186:	1909      	adds	r1, r1, r4
 8001188:	e6e7      	b.n	8000f5a <__aeabi_ddiv+0x2ea>
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <__aeabi_ddiv+0x5c4>)
 800118c:	0028      	movs	r0, r5
 800118e:	445a      	add	r2, fp
 8001190:	4643      	mov	r3, r8
 8001192:	4095      	lsls	r5, r2
 8001194:	4093      	lsls	r3, r2
 8001196:	40c8      	lsrs	r0, r1
 8001198:	1e6a      	subs	r2, r5, #1
 800119a:	4195      	sbcs	r5, r2
 800119c:	4644      	mov	r4, r8
 800119e:	4303      	orrs	r3, r0
 80011a0:	432b      	orrs	r3, r5
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	075a      	lsls	r2, r3, #29
 80011a6:	d092      	beq.n	80010ce <__aeabi_ddiv+0x45e>
 80011a8:	220f      	movs	r2, #15
 80011aa:	401a      	ands	r2, r3
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d188      	bne.n	80010c2 <__aeabi_ddiv+0x452>
 80011b0:	e78d      	b.n	80010ce <__aeabi_ddiv+0x45e>
 80011b2:	0035      	movs	r5, r6
 80011b4:	4281      	cmp	r1, r0
 80011b6:	d000      	beq.n	80011ba <__aeabi_ddiv+0x54a>
 80011b8:	e74b      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d000      	beq.n	80011c2 <__aeabi_ddiv+0x552>
 80011c0:	e747      	b.n	8001052 <__aeabi_ddiv+0x3e2>
 80011c2:	e618      	b.n	8000df6 <__aeabi_ddiv+0x186>
 80011c4:	42ae      	cmp	r6, r5
 80011c6:	d99c      	bls.n	8001102 <__aeabi_ddiv+0x492>
 80011c8:	2302      	movs	r3, #2
 80011ca:	425b      	negs	r3, r3
 80011cc:	469c      	mov	ip, r3
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	44e0      	add	r8, ip
 80011d2:	469c      	mov	ip, r3
 80011d4:	4465      	add	r5, ip
 80011d6:	429d      	cmp	r5, r3
 80011d8:	419b      	sbcs	r3, r3
 80011da:	425b      	negs	r3, r3
 80011dc:	191b      	adds	r3, r3, r4
 80011de:	18c9      	adds	r1, r1, r3
 80011e0:	e6e4      	b.n	8000fac <__aeabi_ddiv+0x33c>
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <__aeabi_ddiv+0x5c8>)
 80011e4:	445a      	add	r2, fp
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	dc00      	bgt.n	80011ec <__aeabi_ddiv+0x57c>
 80011ea:	e744      	b.n	8001076 <__aeabi_ddiv+0x406>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2500      	movs	r5, #0
 80011f0:	4498      	add	r8, r3
 80011f2:	e609      	b.n	8000e08 <__aeabi_ddiv+0x198>
 80011f4:	0765      	lsls	r5, r4, #29
 80011f6:	0264      	lsls	r4, r4, #9
 80011f8:	0b24      	lsrs	r4, r4, #12
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	431d      	orrs	r5, r3
 80011fe:	2300      	movs	r3, #0
 8001200:	e590      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8001202:	9e00      	ldr	r6, [sp, #0]
 8001204:	3d02      	subs	r5, #2
 8001206:	0072      	lsls	r2, r6, #1
 8001208:	42b2      	cmp	r2, r6
 800120a:	41bf      	sbcs	r7, r7
 800120c:	427f      	negs	r7, r7
 800120e:	193c      	adds	r4, r7, r4
 8001210:	1909      	adds	r1, r1, r4
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	e7ce      	b.n	80011b4 <__aeabi_ddiv+0x544>
 8001216:	2480      	movs	r4, #128	; 0x80
 8001218:	4643      	mov	r3, r8
 800121a:	0324      	lsls	r4, r4, #12
 800121c:	431c      	orrs	r4, r3
 800121e:	0324      	lsls	r4, r4, #12
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <__aeabi_ddiv+0x5cc>)
 8001222:	0b24      	lsrs	r4, r4, #12
 8001224:	e57e      	b.n	8000d24 <__aeabi_ddiv+0xb4>
 8001226:	9a00      	ldr	r2, [sp, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3ea      	bcc.n	8001202 <__aeabi_ddiv+0x592>
 800122c:	0035      	movs	r5, r6
 800122e:	e7c4      	b.n	80011ba <__aeabi_ddiv+0x54a>
 8001230:	0000043e 	.word	0x0000043e
 8001234:	0000041e 	.word	0x0000041e
 8001238:	000003ff 	.word	0x000003ff
 800123c:	000007ff 	.word	0x000007ff

08001240 <__eqdf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	464f      	mov	r7, r9
 8001244:	4646      	mov	r6, r8
 8001246:	46d6      	mov	lr, sl
 8001248:	4694      	mov	ip, r2
 800124a:	4691      	mov	r9, r2
 800124c:	031a      	lsls	r2, r3, #12
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	4d18      	ldr	r5, [pc, #96]	; (80012b4 <__eqdf2+0x74>)
 8001252:	b5c0      	push	{r6, r7, lr}
 8001254:	004c      	lsls	r4, r1, #1
 8001256:	030f      	lsls	r7, r1, #12
 8001258:	4692      	mov	sl, r2
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	0006      	movs	r6, r0
 800125e:	4680      	mov	r8, r0
 8001260:	0b3f      	lsrs	r7, r7, #12
 8001262:	2001      	movs	r0, #1
 8001264:	0d64      	lsrs	r4, r4, #21
 8001266:	0fc9      	lsrs	r1, r1, #31
 8001268:	0d52      	lsrs	r2, r2, #21
 800126a:	0fdb      	lsrs	r3, r3, #31
 800126c:	42ac      	cmp	r4, r5
 800126e:	d00a      	beq.n	8001286 <__eqdf2+0x46>
 8001270:	42aa      	cmp	r2, r5
 8001272:	d003      	beq.n	800127c <__eqdf2+0x3c>
 8001274:	4294      	cmp	r4, r2
 8001276:	d101      	bne.n	800127c <__eqdf2+0x3c>
 8001278:	4557      	cmp	r7, sl
 800127a:	d00d      	beq.n	8001298 <__eqdf2+0x58>
 800127c:	bce0      	pop	{r5, r6, r7}
 800127e:	46ba      	mov	sl, r7
 8001280:	46b1      	mov	r9, r6
 8001282:	46a8      	mov	r8, r5
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	003d      	movs	r5, r7
 8001288:	4335      	orrs	r5, r6
 800128a:	d1f7      	bne.n	800127c <__eqdf2+0x3c>
 800128c:	42a2      	cmp	r2, r4
 800128e:	d1f5      	bne.n	800127c <__eqdf2+0x3c>
 8001290:	4652      	mov	r2, sl
 8001292:	4665      	mov	r5, ip
 8001294:	432a      	orrs	r2, r5
 8001296:	d1f1      	bne.n	800127c <__eqdf2+0x3c>
 8001298:	2001      	movs	r0, #1
 800129a:	45c8      	cmp	r8, r9
 800129c:	d1ee      	bne.n	800127c <__eqdf2+0x3c>
 800129e:	4299      	cmp	r1, r3
 80012a0:	d006      	beq.n	80012b0 <__eqdf2+0x70>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d1ea      	bne.n	800127c <__eqdf2+0x3c>
 80012a6:	433e      	orrs	r6, r7
 80012a8:	0030      	movs	r0, r6
 80012aa:	1e46      	subs	r6, r0, #1
 80012ac:	41b0      	sbcs	r0, r6
 80012ae:	e7e5      	b.n	800127c <__eqdf2+0x3c>
 80012b0:	2000      	movs	r0, #0
 80012b2:	e7e3      	b.n	800127c <__eqdf2+0x3c>
 80012b4:	000007ff 	.word	0x000007ff

080012b8 <__gedf2>:
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	464e      	mov	r6, r9
 80012bc:	4645      	mov	r5, r8
 80012be:	4657      	mov	r7, sl
 80012c0:	46de      	mov	lr, fp
 80012c2:	0004      	movs	r4, r0
 80012c4:	0018      	movs	r0, r3
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	0016      	movs	r6, r2
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	0b1b      	lsrs	r3, r3, #12
 80012ce:	4d32      	ldr	r5, [pc, #200]	; (8001398 <__gedf2+0xe0>)
 80012d0:	030f      	lsls	r7, r1, #12
 80012d2:	004a      	lsls	r2, r1, #1
 80012d4:	4699      	mov	r9, r3
 80012d6:	0043      	lsls	r3, r0, #1
 80012d8:	46a4      	mov	ip, r4
 80012da:	46b0      	mov	r8, r6
 80012dc:	0b3f      	lsrs	r7, r7, #12
 80012de:	0d52      	lsrs	r2, r2, #21
 80012e0:	0fc9      	lsrs	r1, r1, #31
 80012e2:	0d5b      	lsrs	r3, r3, #21
 80012e4:	0fc0      	lsrs	r0, r0, #31
 80012e6:	42aa      	cmp	r2, r5
 80012e8:	d029      	beq.n	800133e <__gedf2+0x86>
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	d018      	beq.n	8001320 <__gedf2+0x68>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d12a      	bne.n	8001348 <__gedf2+0x90>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	46a3      	mov	fp, r4
 80012f6:	4265      	negs	r5, r4
 80012f8:	4165      	adcs	r5, r4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <__gedf2+0x4c>
 80012fe:	464c      	mov	r4, r9
 8001300:	4326      	orrs	r6, r4
 8001302:	d027      	beq.n	8001354 <__gedf2+0x9c>
 8001304:	2d00      	cmp	r5, #0
 8001306:	d115      	bne.n	8001334 <__gedf2+0x7c>
 8001308:	4281      	cmp	r1, r0
 800130a:	d028      	beq.n	800135e <__gedf2+0xa6>
 800130c:	2002      	movs	r0, #2
 800130e:	3901      	subs	r1, #1
 8001310:	4008      	ands	r0, r1
 8001312:	3801      	subs	r0, #1
 8001314:	bcf0      	pop	{r4, r5, r6, r7}
 8001316:	46bb      	mov	fp, r7
 8001318:	46b2      	mov	sl, r6
 800131a:	46a9      	mov	r9, r5
 800131c:	46a0      	mov	r8, r4
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	464d      	mov	r5, r9
 8001322:	432e      	orrs	r6, r5
 8001324:	d12f      	bne.n	8001386 <__gedf2+0xce>
 8001326:	2a00      	cmp	r2, #0
 8001328:	d1ee      	bne.n	8001308 <__gedf2+0x50>
 800132a:	433c      	orrs	r4, r7
 800132c:	4265      	negs	r5, r4
 800132e:	4165      	adcs	r5, r4
 8001330:	2d00      	cmp	r5, #0
 8001332:	d0e9      	beq.n	8001308 <__gedf2+0x50>
 8001334:	2800      	cmp	r0, #0
 8001336:	d1ed      	bne.n	8001314 <__gedf2+0x5c>
 8001338:	2001      	movs	r0, #1
 800133a:	4240      	negs	r0, r0
 800133c:	e7ea      	b.n	8001314 <__gedf2+0x5c>
 800133e:	003d      	movs	r5, r7
 8001340:	4325      	orrs	r5, r4
 8001342:	d120      	bne.n	8001386 <__gedf2+0xce>
 8001344:	4293      	cmp	r3, r2
 8001346:	d0eb      	beq.n	8001320 <__gedf2+0x68>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1dd      	bne.n	8001308 <__gedf2+0x50>
 800134c:	464c      	mov	r4, r9
 800134e:	4326      	orrs	r6, r4
 8001350:	d1da      	bne.n	8001308 <__gedf2+0x50>
 8001352:	e7db      	b.n	800130c <__gedf2+0x54>
 8001354:	465b      	mov	r3, fp
 8001356:	2000      	movs	r0, #0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0db      	beq.n	8001314 <__gedf2+0x5c>
 800135c:	e7d6      	b.n	800130c <__gedf2+0x54>
 800135e:	429a      	cmp	r2, r3
 8001360:	dc0a      	bgt.n	8001378 <__gedf2+0xc0>
 8001362:	dbe7      	blt.n	8001334 <__gedf2+0x7c>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8d1      	bhi.n	800130c <__gedf2+0x54>
 8001368:	d010      	beq.n	800138c <__gedf2+0xd4>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2d1      	bcs.n	8001314 <__gedf2+0x5c>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e1      	beq.n	8001338 <__gedf2+0x80>
 8001374:	0008      	movs	r0, r1
 8001376:	e7cd      	b.n	8001314 <__gedf2+0x5c>
 8001378:	4243      	negs	r3, r0
 800137a:	4158      	adcs	r0, r3
 800137c:	2302      	movs	r3, #2
 800137e:	4240      	negs	r0, r0
 8001380:	4018      	ands	r0, r3
 8001382:	3801      	subs	r0, #1
 8001384:	e7c6      	b.n	8001314 <__gedf2+0x5c>
 8001386:	2002      	movs	r0, #2
 8001388:	4240      	negs	r0, r0
 800138a:	e7c3      	b.n	8001314 <__gedf2+0x5c>
 800138c:	45c4      	cmp	ip, r8
 800138e:	d8bd      	bhi.n	800130c <__gedf2+0x54>
 8001390:	2000      	movs	r0, #0
 8001392:	45c4      	cmp	ip, r8
 8001394:	d2be      	bcs.n	8001314 <__gedf2+0x5c>
 8001396:	e7eb      	b.n	8001370 <__gedf2+0xb8>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__ledf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	464e      	mov	r6, r9
 80013a0:	4645      	mov	r5, r8
 80013a2:	4657      	mov	r7, sl
 80013a4:	46de      	mov	lr, fp
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	0016      	movs	r6, r2
 80013ae:	031b      	lsls	r3, r3, #12
 80013b0:	0b1b      	lsrs	r3, r3, #12
 80013b2:	4d31      	ldr	r5, [pc, #196]	; (8001478 <__ledf2+0xdc>)
 80013b4:	030f      	lsls	r7, r1, #12
 80013b6:	004a      	lsls	r2, r1, #1
 80013b8:	4699      	mov	r9, r3
 80013ba:	0043      	lsls	r3, r0, #1
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d011      	beq.n	80013f2 <__ledf2+0x56>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d014      	beq.n	80013fc <__ledf2+0x60>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d12f      	bne.n	8001436 <__ledf2+0x9a>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	46a3      	mov	fp, r4
 80013da:	4265      	negs	r5, r4
 80013dc:	4165      	adcs	r5, r4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d114      	bne.n	800140c <__ledf2+0x70>
 80013e2:	464c      	mov	r4, r9
 80013e4:	4326      	orrs	r6, r4
 80013e6:	d111      	bne.n	800140c <__ledf2+0x70>
 80013e8:	465b      	mov	r3, fp
 80013ea:	2000      	movs	r0, #0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d017      	beq.n	8001420 <__ledf2+0x84>
 80013f0:	e010      	b.n	8001414 <__ledf2+0x78>
 80013f2:	003d      	movs	r5, r7
 80013f4:	4325      	orrs	r5, r4
 80013f6:	d112      	bne.n	800141e <__ledf2+0x82>
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d11c      	bne.n	8001436 <__ledf2+0x9a>
 80013fc:	464d      	mov	r5, r9
 80013fe:	432e      	orrs	r6, r5
 8001400:	d10d      	bne.n	800141e <__ledf2+0x82>
 8001402:	2a00      	cmp	r2, #0
 8001404:	d104      	bne.n	8001410 <__ledf2+0x74>
 8001406:	433c      	orrs	r4, r7
 8001408:	4265      	negs	r5, r4
 800140a:	4165      	adcs	r5, r4
 800140c:	2d00      	cmp	r5, #0
 800140e:	d10d      	bne.n	800142c <__ledf2+0x90>
 8001410:	4281      	cmp	r1, r0
 8001412:	d016      	beq.n	8001442 <__ledf2+0xa6>
 8001414:	2002      	movs	r0, #2
 8001416:	3901      	subs	r1, #1
 8001418:	4008      	ands	r0, r1
 800141a:	3801      	subs	r0, #1
 800141c:	e000      	b.n	8001420 <__ledf2+0x84>
 800141e:	2002      	movs	r0, #2
 8001420:	bcf0      	pop	{r4, r5, r6, r7}
 8001422:	46bb      	mov	fp, r7
 8001424:	46b2      	mov	sl, r6
 8001426:	46a9      	mov	r9, r5
 8001428:	46a0      	mov	r8, r4
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f7      	bne.n	8001420 <__ledf2+0x84>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7f4      	b.n	8001420 <__ledf2+0x84>
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ea      	bne.n	8001410 <__ledf2+0x74>
 800143a:	464c      	mov	r4, r9
 800143c:	4326      	orrs	r6, r4
 800143e:	d1e7      	bne.n	8001410 <__ledf2+0x74>
 8001440:	e7e8      	b.n	8001414 <__ledf2+0x78>
 8001442:	429a      	cmp	r2, r3
 8001444:	dd06      	ble.n	8001454 <__ledf2+0xb8>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	2302      	movs	r3, #2
 800144c:	4240      	negs	r0, r0
 800144e:	4018      	ands	r0, r3
 8001450:	3801      	subs	r0, #1
 8001452:	e7e5      	b.n	8001420 <__ledf2+0x84>
 8001454:	429a      	cmp	r2, r3
 8001456:	dbe9      	blt.n	800142c <__ledf2+0x90>
 8001458:	454f      	cmp	r7, r9
 800145a:	d8db      	bhi.n	8001414 <__ledf2+0x78>
 800145c:	d006      	beq.n	800146c <__ledf2+0xd0>
 800145e:	2000      	movs	r0, #0
 8001460:	454f      	cmp	r7, r9
 8001462:	d2dd      	bcs.n	8001420 <__ledf2+0x84>
 8001464:	2900      	cmp	r1, #0
 8001466:	d0e3      	beq.n	8001430 <__ledf2+0x94>
 8001468:	0008      	movs	r0, r1
 800146a:	e7d9      	b.n	8001420 <__ledf2+0x84>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8d1      	bhi.n	8001414 <__ledf2+0x78>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d2d4      	bcs.n	8001420 <__ledf2+0x84>
 8001476:	e7f5      	b.n	8001464 <__ledf2+0xc8>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__aeabi_dmul>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	4698      	mov	r8, r3
 800148a:	030c      	lsls	r4, r1, #12
 800148c:	004b      	lsls	r3, r1, #1
 800148e:	0006      	movs	r6, r0
 8001490:	4692      	mov	sl, r2
 8001492:	b087      	sub	sp, #28
 8001494:	0b24      	lsrs	r4, r4, #12
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	0fcf      	lsrs	r7, r1, #31
 800149a:	2b00      	cmp	r3, #0
 800149c:	d06c      	beq.n	8001578 <__aeabi_dmul+0xfc>
 800149e:	4add      	ldr	r2, [pc, #884]	; (8001814 <__aeabi_dmul+0x398>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dmul+0x2a>
 80014a4:	e086      	b.n	80015b4 <__aeabi_dmul+0x138>
 80014a6:	0f42      	lsrs	r2, r0, #29
 80014a8:	00e4      	lsls	r4, r4, #3
 80014aa:	4314      	orrs	r4, r2
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0412      	lsls	r2, r2, #16
 80014b0:	4314      	orrs	r4, r2
 80014b2:	4ad9      	ldr	r2, [pc, #868]	; (8001818 <__aeabi_dmul+0x39c>)
 80014b4:	00c5      	lsls	r5, r0, #3
 80014b6:	4694      	mov	ip, r2
 80014b8:	4463      	add	r3, ip
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	4699      	mov	r9, r3
 80014c0:	469b      	mov	fp, r3
 80014c2:	4643      	mov	r3, r8
 80014c4:	4642      	mov	r2, r8
 80014c6:	031e      	lsls	r6, r3, #12
 80014c8:	0fd2      	lsrs	r2, r2, #31
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4650      	mov	r0, sl
 80014ce:	4690      	mov	r8, r2
 80014d0:	0b36      	lsrs	r6, r6, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dmul+0x5c>
 80014d6:	e078      	b.n	80015ca <__aeabi_dmul+0x14e>
 80014d8:	4ace      	ldr	r2, [pc, #824]	; (8001814 <__aeabi_dmul+0x398>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <__aeabi_dmul+0x9e>
 80014de:	49ce      	ldr	r1, [pc, #824]	; (8001818 <__aeabi_dmul+0x39c>)
 80014e0:	0f42      	lsrs	r2, r0, #29
 80014e2:	468c      	mov	ip, r1
 80014e4:	9900      	ldr	r1, [sp, #0]
 80014e6:	4463      	add	r3, ip
 80014e8:	00f6      	lsls	r6, r6, #3
 80014ea:	468c      	mov	ip, r1
 80014ec:	4316      	orrs	r6, r2
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	449c      	add	ip, r3
 80014f2:	0412      	lsls	r2, r2, #16
 80014f4:	4663      	mov	r3, ip
 80014f6:	4316      	orrs	r6, r2
 80014f8:	00c2      	lsls	r2, r0, #3
 80014fa:	2000      	movs	r0, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	9900      	ldr	r1, [sp, #0]
 8001500:	4643      	mov	r3, r8
 8001502:	3101      	adds	r1, #1
 8001504:	468c      	mov	ip, r1
 8001506:	4649      	mov	r1, r9
 8001508:	407b      	eors	r3, r7
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	290f      	cmp	r1, #15
 800150e:	d900      	bls.n	8001512 <__aeabi_dmul+0x96>
 8001510:	e07e      	b.n	8001610 <__aeabi_dmul+0x194>
 8001512:	4bc2      	ldr	r3, [pc, #776]	; (800181c <__aeabi_dmul+0x3a0>)
 8001514:	0089      	lsls	r1, r1, #2
 8001516:	5859      	ldr	r1, [r3, r1]
 8001518:	468f      	mov	pc, r1
 800151a:	4652      	mov	r2, sl
 800151c:	9b00      	ldr	r3, [sp, #0]
 800151e:	4332      	orrs	r2, r6
 8001520:	d000      	beq.n	8001524 <__aeabi_dmul+0xa8>
 8001522:	e156      	b.n	80017d2 <__aeabi_dmul+0x356>
 8001524:	49bb      	ldr	r1, [pc, #748]	; (8001814 <__aeabi_dmul+0x398>)
 8001526:	2600      	movs	r6, #0
 8001528:	468c      	mov	ip, r1
 800152a:	4463      	add	r3, ip
 800152c:	4649      	mov	r1, r9
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	4319      	orrs	r1, r3
 8001534:	4689      	mov	r9, r1
 8001536:	2002      	movs	r0, #2
 8001538:	e7e1      	b.n	80014fe <__aeabi_dmul+0x82>
 800153a:	4643      	mov	r3, r8
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	0034      	movs	r4, r6
 8001540:	0015      	movs	r5, r2
 8001542:	4683      	mov	fp, r0
 8001544:	465b      	mov	r3, fp
 8001546:	2b02      	cmp	r3, #2
 8001548:	d05e      	beq.n	8001608 <__aeabi_dmul+0x18c>
 800154a:	2b03      	cmp	r3, #3
 800154c:	d100      	bne.n	8001550 <__aeabi_dmul+0xd4>
 800154e:	e1f3      	b.n	8001938 <__aeabi_dmul+0x4bc>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d000      	beq.n	8001556 <__aeabi_dmul+0xda>
 8001554:	e118      	b.n	8001788 <__aeabi_dmul+0x30c>
 8001556:	2200      	movs	r2, #0
 8001558:	2400      	movs	r4, #0
 800155a:	2500      	movs	r5, #0
 800155c:	9b01      	ldr	r3, [sp, #4]
 800155e:	0512      	lsls	r2, r2, #20
 8001560:	4322      	orrs	r2, r4
 8001562:	07db      	lsls	r3, r3, #31
 8001564:	431a      	orrs	r2, r3
 8001566:	0028      	movs	r0, r5
 8001568:	0011      	movs	r1, r2
 800156a:	b007      	add	sp, #28
 800156c:	bcf0      	pop	{r4, r5, r6, r7}
 800156e:	46bb      	mov	fp, r7
 8001570:	46b2      	mov	sl, r6
 8001572:	46a9      	mov	r9, r5
 8001574:	46a0      	mov	r8, r4
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	0025      	movs	r5, r4
 800157a:	4305      	orrs	r5, r0
 800157c:	d100      	bne.n	8001580 <__aeabi_dmul+0x104>
 800157e:	e141      	b.n	8001804 <__aeabi_dmul+0x388>
 8001580:	2c00      	cmp	r4, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dmul+0x10a>
 8001584:	e1ad      	b.n	80018e2 <__aeabi_dmul+0x466>
 8001586:	0020      	movs	r0, r4
 8001588:	f000 fef0 	bl	800236c <__clzsi2>
 800158c:	0001      	movs	r1, r0
 800158e:	0002      	movs	r2, r0
 8001590:	390b      	subs	r1, #11
 8001592:	231d      	movs	r3, #29
 8001594:	0010      	movs	r0, r2
 8001596:	1a5b      	subs	r3, r3, r1
 8001598:	0031      	movs	r1, r6
 800159a:	0035      	movs	r5, r6
 800159c:	3808      	subs	r0, #8
 800159e:	4084      	lsls	r4, r0
 80015a0:	40d9      	lsrs	r1, r3
 80015a2:	4085      	lsls	r5, r0
 80015a4:	430c      	orrs	r4, r1
 80015a6:	489e      	ldr	r0, [pc, #632]	; (8001820 <__aeabi_dmul+0x3a4>)
 80015a8:	1a83      	subs	r3, r0, r2
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	4699      	mov	r9, r3
 80015b0:	469b      	mov	fp, r3
 80015b2:	e786      	b.n	80014c2 <__aeabi_dmul+0x46>
 80015b4:	0005      	movs	r5, r0
 80015b6:	4325      	orrs	r5, r4
 80015b8:	d000      	beq.n	80015bc <__aeabi_dmul+0x140>
 80015ba:	e11c      	b.n	80017f6 <__aeabi_dmul+0x37a>
 80015bc:	2208      	movs	r2, #8
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2302      	movs	r3, #2
 80015c2:	2400      	movs	r4, #0
 80015c4:	4691      	mov	r9, r2
 80015c6:	469b      	mov	fp, r3
 80015c8:	e77b      	b.n	80014c2 <__aeabi_dmul+0x46>
 80015ca:	4652      	mov	r2, sl
 80015cc:	4332      	orrs	r2, r6
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x156>
 80015d0:	e10a      	b.n	80017e8 <__aeabi_dmul+0x36c>
 80015d2:	2e00      	cmp	r6, #0
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dmul+0x15c>
 80015d6:	e176      	b.n	80018c6 <__aeabi_dmul+0x44a>
 80015d8:	0030      	movs	r0, r6
 80015da:	f000 fec7 	bl	800236c <__clzsi2>
 80015de:	0002      	movs	r2, r0
 80015e0:	3a0b      	subs	r2, #11
 80015e2:	231d      	movs	r3, #29
 80015e4:	0001      	movs	r1, r0
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	4652      	mov	r2, sl
 80015ea:	3908      	subs	r1, #8
 80015ec:	40da      	lsrs	r2, r3
 80015ee:	408e      	lsls	r6, r1
 80015f0:	4316      	orrs	r6, r2
 80015f2:	4652      	mov	r2, sl
 80015f4:	408a      	lsls	r2, r1
 80015f6:	9b00      	ldr	r3, [sp, #0]
 80015f8:	4989      	ldr	r1, [pc, #548]	; (8001820 <__aeabi_dmul+0x3a4>)
 80015fa:	1a18      	subs	r0, r3, r0
 80015fc:	0003      	movs	r3, r0
 80015fe:	468c      	mov	ip, r1
 8001600:	4463      	add	r3, ip
 8001602:	2000      	movs	r0, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	e77a      	b.n	80014fe <__aeabi_dmul+0x82>
 8001608:	2400      	movs	r4, #0
 800160a:	2500      	movs	r5, #0
 800160c:	4a81      	ldr	r2, [pc, #516]	; (8001814 <__aeabi_dmul+0x398>)
 800160e:	e7a5      	b.n	800155c <__aeabi_dmul+0xe0>
 8001610:	0c2f      	lsrs	r7, r5, #16
 8001612:	042d      	lsls	r5, r5, #16
 8001614:	0c2d      	lsrs	r5, r5, #16
 8001616:	002b      	movs	r3, r5
 8001618:	0c11      	lsrs	r1, r2, #16
 800161a:	0412      	lsls	r2, r2, #16
 800161c:	0c12      	lsrs	r2, r2, #16
 800161e:	4353      	muls	r3, r2
 8001620:	4698      	mov	r8, r3
 8001622:	0013      	movs	r3, r2
 8001624:	0028      	movs	r0, r5
 8001626:	437b      	muls	r3, r7
 8001628:	4699      	mov	r9, r3
 800162a:	4348      	muls	r0, r1
 800162c:	4448      	add	r0, r9
 800162e:	4683      	mov	fp, r0
 8001630:	4640      	mov	r0, r8
 8001632:	000b      	movs	r3, r1
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	4682      	mov	sl, r0
 8001638:	4658      	mov	r0, fp
 800163a:	437b      	muls	r3, r7
 800163c:	4450      	add	r0, sl
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	4581      	cmp	r9, r0
 8001642:	d906      	bls.n	8001652 <__aeabi_dmul+0x1d6>
 8001644:	469a      	mov	sl, r3
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	4699      	mov	r9, r3
 800164c:	44ca      	add	sl, r9
 800164e:	4653      	mov	r3, sl
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	0c03      	lsrs	r3, r0, #16
 8001654:	469b      	mov	fp, r3
 8001656:	4643      	mov	r3, r8
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0400      	lsls	r0, r0, #16
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	4698      	mov	r8, r3
 8001660:	0003      	movs	r3, r0
 8001662:	4443      	add	r3, r8
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	0c33      	lsrs	r3, r6, #16
 8001668:	4699      	mov	r9, r3
 800166a:	002b      	movs	r3, r5
 800166c:	0436      	lsls	r6, r6, #16
 800166e:	0c36      	lsrs	r6, r6, #16
 8001670:	4373      	muls	r3, r6
 8001672:	4698      	mov	r8, r3
 8001674:	0033      	movs	r3, r6
 8001676:	437b      	muls	r3, r7
 8001678:	469a      	mov	sl, r3
 800167a:	464b      	mov	r3, r9
 800167c:	435d      	muls	r5, r3
 800167e:	435f      	muls	r7, r3
 8001680:	4643      	mov	r3, r8
 8001682:	4455      	add	r5, sl
 8001684:	0c18      	lsrs	r0, r3, #16
 8001686:	1940      	adds	r0, r0, r5
 8001688:	4582      	cmp	sl, r0
 800168a:	d903      	bls.n	8001694 <__aeabi_dmul+0x218>
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	469a      	mov	sl, r3
 8001692:	4457      	add	r7, sl
 8001694:	0c05      	lsrs	r5, r0, #16
 8001696:	19eb      	adds	r3, r5, r7
 8001698:	9305      	str	r3, [sp, #20]
 800169a:	4643      	mov	r3, r8
 800169c:	041d      	lsls	r5, r3, #16
 800169e:	0c2d      	lsrs	r5, r5, #16
 80016a0:	0400      	lsls	r0, r0, #16
 80016a2:	1940      	adds	r0, r0, r5
 80016a4:	0c25      	lsrs	r5, r4, #16
 80016a6:	0424      	lsls	r4, r4, #16
 80016a8:	0c24      	lsrs	r4, r4, #16
 80016aa:	0027      	movs	r7, r4
 80016ac:	4357      	muls	r7, r2
 80016ae:	436a      	muls	r2, r5
 80016b0:	4690      	mov	r8, r2
 80016b2:	002a      	movs	r2, r5
 80016b4:	0c3b      	lsrs	r3, r7, #16
 80016b6:	469a      	mov	sl, r3
 80016b8:	434a      	muls	r2, r1
 80016ba:	4361      	muls	r1, r4
 80016bc:	4441      	add	r1, r8
 80016be:	4451      	add	r1, sl
 80016c0:	4483      	add	fp, r0
 80016c2:	4588      	cmp	r8, r1
 80016c4:	d903      	bls.n	80016ce <__aeabi_dmul+0x252>
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	4698      	mov	r8, r3
 80016cc:	4442      	add	r2, r8
 80016ce:	043f      	lsls	r7, r7, #16
 80016d0:	0c0b      	lsrs	r3, r1, #16
 80016d2:	0c3f      	lsrs	r7, r7, #16
 80016d4:	0409      	lsls	r1, r1, #16
 80016d6:	19c9      	adds	r1, r1, r7
 80016d8:	0027      	movs	r7, r4
 80016da:	4698      	mov	r8, r3
 80016dc:	464b      	mov	r3, r9
 80016de:	4377      	muls	r7, r6
 80016e0:	435c      	muls	r4, r3
 80016e2:	436e      	muls	r6, r5
 80016e4:	435d      	muls	r5, r3
 80016e6:	0c3b      	lsrs	r3, r7, #16
 80016e8:	4699      	mov	r9, r3
 80016ea:	19a4      	adds	r4, r4, r6
 80016ec:	444c      	add	r4, r9
 80016ee:	4442      	add	r2, r8
 80016f0:	9503      	str	r5, [sp, #12]
 80016f2:	42a6      	cmp	r6, r4
 80016f4:	d904      	bls.n	8001700 <__aeabi_dmul+0x284>
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	4698      	mov	r8, r3
 80016fc:	4445      	add	r5, r8
 80016fe:	9503      	str	r5, [sp, #12]
 8001700:	9b02      	ldr	r3, [sp, #8]
 8001702:	043f      	lsls	r7, r7, #16
 8001704:	445b      	add	r3, fp
 8001706:	001e      	movs	r6, r3
 8001708:	4283      	cmp	r3, r0
 800170a:	4180      	sbcs	r0, r0
 800170c:	0423      	lsls	r3, r4, #16
 800170e:	4698      	mov	r8, r3
 8001710:	9b05      	ldr	r3, [sp, #20]
 8001712:	0c3f      	lsrs	r7, r7, #16
 8001714:	4447      	add	r7, r8
 8001716:	4698      	mov	r8, r3
 8001718:	1876      	adds	r6, r6, r1
 800171a:	428e      	cmp	r6, r1
 800171c:	4189      	sbcs	r1, r1
 800171e:	4447      	add	r7, r8
 8001720:	4240      	negs	r0, r0
 8001722:	183d      	adds	r5, r7, r0
 8001724:	46a8      	mov	r8, r5
 8001726:	4693      	mov	fp, r2
 8001728:	4249      	negs	r1, r1
 800172a:	468a      	mov	sl, r1
 800172c:	44c3      	add	fp, r8
 800172e:	429f      	cmp	r7, r3
 8001730:	41bf      	sbcs	r7, r7
 8001732:	4580      	cmp	r8, r0
 8001734:	4180      	sbcs	r0, r0
 8001736:	9b03      	ldr	r3, [sp, #12]
 8001738:	44da      	add	sl, fp
 800173a:	4698      	mov	r8, r3
 800173c:	4653      	mov	r3, sl
 800173e:	4240      	negs	r0, r0
 8001740:	427f      	negs	r7, r7
 8001742:	4307      	orrs	r7, r0
 8001744:	0c24      	lsrs	r4, r4, #16
 8001746:	4593      	cmp	fp, r2
 8001748:	4192      	sbcs	r2, r2
 800174a:	458a      	cmp	sl, r1
 800174c:	4189      	sbcs	r1, r1
 800174e:	193f      	adds	r7, r7, r4
 8001750:	0ddc      	lsrs	r4, r3, #23
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	0275      	lsls	r5, r6, #9
 8001756:	431d      	orrs	r5, r3
 8001758:	1e68      	subs	r0, r5, #1
 800175a:	4185      	sbcs	r5, r0
 800175c:	4653      	mov	r3, sl
 800175e:	4252      	negs	r2, r2
 8001760:	4249      	negs	r1, r1
 8001762:	430a      	orrs	r2, r1
 8001764:	18bf      	adds	r7, r7, r2
 8001766:	4447      	add	r7, r8
 8001768:	0df6      	lsrs	r6, r6, #23
 800176a:	027f      	lsls	r7, r7, #9
 800176c:	4335      	orrs	r5, r6
 800176e:	025a      	lsls	r2, r3, #9
 8001770:	433c      	orrs	r4, r7
 8001772:	4315      	orrs	r5, r2
 8001774:	01fb      	lsls	r3, r7, #7
 8001776:	d400      	bmi.n	800177a <__aeabi_dmul+0x2fe>
 8001778:	e0c1      	b.n	80018fe <__aeabi_dmul+0x482>
 800177a:	2101      	movs	r1, #1
 800177c:	086a      	lsrs	r2, r5, #1
 800177e:	400d      	ands	r5, r1
 8001780:	4315      	orrs	r5, r2
 8001782:	07e2      	lsls	r2, r4, #31
 8001784:	4315      	orrs	r5, r2
 8001786:	0864      	lsrs	r4, r4, #1
 8001788:	4926      	ldr	r1, [pc, #152]	; (8001824 <__aeabi_dmul+0x3a8>)
 800178a:	4461      	add	r1, ip
 800178c:	2900      	cmp	r1, #0
 800178e:	dd56      	ble.n	800183e <__aeabi_dmul+0x3c2>
 8001790:	076b      	lsls	r3, r5, #29
 8001792:	d009      	beq.n	80017a8 <__aeabi_dmul+0x32c>
 8001794:	220f      	movs	r2, #15
 8001796:	402a      	ands	r2, r5
 8001798:	2a04      	cmp	r2, #4
 800179a:	d005      	beq.n	80017a8 <__aeabi_dmul+0x32c>
 800179c:	1d2a      	adds	r2, r5, #4
 800179e:	42aa      	cmp	r2, r5
 80017a0:	41ad      	sbcs	r5, r5
 80017a2:	426d      	negs	r5, r5
 80017a4:	1964      	adds	r4, r4, r5
 80017a6:	0015      	movs	r5, r2
 80017a8:	01e3      	lsls	r3, r4, #7
 80017aa:	d504      	bpl.n	80017b6 <__aeabi_dmul+0x33a>
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <__aeabi_dmul+0x3ac>)
 80017b0:	00c9      	lsls	r1, r1, #3
 80017b2:	4014      	ands	r4, r2
 80017b4:	4461      	add	r1, ip
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <__aeabi_dmul+0x3b0>)
 80017b8:	4291      	cmp	r1, r2
 80017ba:	dd00      	ble.n	80017be <__aeabi_dmul+0x342>
 80017bc:	e724      	b.n	8001608 <__aeabi_dmul+0x18c>
 80017be:	0762      	lsls	r2, r4, #29
 80017c0:	08ed      	lsrs	r5, r5, #3
 80017c2:	0264      	lsls	r4, r4, #9
 80017c4:	0549      	lsls	r1, r1, #21
 80017c6:	4315      	orrs	r5, r2
 80017c8:	0b24      	lsrs	r4, r4, #12
 80017ca:	0d4a      	lsrs	r2, r1, #21
 80017cc:	e6c6      	b.n	800155c <__aeabi_dmul+0xe0>
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e6b8      	b.n	8001544 <__aeabi_dmul+0xc8>
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <__aeabi_dmul+0x398>)
 80017d4:	2003      	movs	r0, #3
 80017d6:	4694      	mov	ip, r2
 80017d8:	4463      	add	r3, ip
 80017da:	464a      	mov	r2, r9
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2303      	movs	r3, #3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	4691      	mov	r9, r2
 80017e4:	4652      	mov	r2, sl
 80017e6:	e68a      	b.n	80014fe <__aeabi_dmul+0x82>
 80017e8:	4649      	mov	r1, r9
 80017ea:	2301      	movs	r3, #1
 80017ec:	4319      	orrs	r1, r3
 80017ee:	4689      	mov	r9, r1
 80017f0:	2600      	movs	r6, #0
 80017f2:	2001      	movs	r0, #1
 80017f4:	e683      	b.n	80014fe <__aeabi_dmul+0x82>
 80017f6:	220c      	movs	r2, #12
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2303      	movs	r3, #3
 80017fc:	0005      	movs	r5, r0
 80017fe:	4691      	mov	r9, r2
 8001800:	469b      	mov	fp, r3
 8001802:	e65e      	b.n	80014c2 <__aeabi_dmul+0x46>
 8001804:	2304      	movs	r3, #4
 8001806:	4699      	mov	r9, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	2400      	movs	r4, #0
 8001810:	469b      	mov	fp, r3
 8001812:	e656      	b.n	80014c2 <__aeabi_dmul+0x46>
 8001814:	000007ff 	.word	0x000007ff
 8001818:	fffffc01 	.word	0xfffffc01
 800181c:	0800d7bc 	.word	0x0800d7bc
 8001820:	fffffc0d 	.word	0xfffffc0d
 8001824:	000003ff 	.word	0x000003ff
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	000007fe 	.word	0x000007fe
 8001830:	2300      	movs	r3, #0
 8001832:	2480      	movs	r4, #128	; 0x80
 8001834:	2500      	movs	r5, #0
 8001836:	4a44      	ldr	r2, [pc, #272]	; (8001948 <__aeabi_dmul+0x4cc>)
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	0324      	lsls	r4, r4, #12
 800183c:	e68e      	b.n	800155c <__aeabi_dmul+0xe0>
 800183e:	2001      	movs	r0, #1
 8001840:	1a40      	subs	r0, r0, r1
 8001842:	2838      	cmp	r0, #56	; 0x38
 8001844:	dd00      	ble.n	8001848 <__aeabi_dmul+0x3cc>
 8001846:	e686      	b.n	8001556 <__aeabi_dmul+0xda>
 8001848:	281f      	cmp	r0, #31
 800184a:	dd5b      	ble.n	8001904 <__aeabi_dmul+0x488>
 800184c:	221f      	movs	r2, #31
 800184e:	0023      	movs	r3, r4
 8001850:	4252      	negs	r2, r2
 8001852:	1a51      	subs	r1, r2, r1
 8001854:	40cb      	lsrs	r3, r1
 8001856:	0019      	movs	r1, r3
 8001858:	2820      	cmp	r0, #32
 800185a:	d003      	beq.n	8001864 <__aeabi_dmul+0x3e8>
 800185c:	4a3b      	ldr	r2, [pc, #236]	; (800194c <__aeabi_dmul+0x4d0>)
 800185e:	4462      	add	r2, ip
 8001860:	4094      	lsls	r4, r2
 8001862:	4325      	orrs	r5, r4
 8001864:	1e6a      	subs	r2, r5, #1
 8001866:	4195      	sbcs	r5, r2
 8001868:	002a      	movs	r2, r5
 800186a:	430a      	orrs	r2, r1
 800186c:	2107      	movs	r1, #7
 800186e:	000d      	movs	r5, r1
 8001870:	2400      	movs	r4, #0
 8001872:	4015      	ands	r5, r2
 8001874:	4211      	tst	r1, r2
 8001876:	d05b      	beq.n	8001930 <__aeabi_dmul+0x4b4>
 8001878:	210f      	movs	r1, #15
 800187a:	2400      	movs	r4, #0
 800187c:	4011      	ands	r1, r2
 800187e:	2904      	cmp	r1, #4
 8001880:	d053      	beq.n	800192a <__aeabi_dmul+0x4ae>
 8001882:	1d11      	adds	r1, r2, #4
 8001884:	4291      	cmp	r1, r2
 8001886:	4192      	sbcs	r2, r2
 8001888:	4252      	negs	r2, r2
 800188a:	18a4      	adds	r4, r4, r2
 800188c:	000a      	movs	r2, r1
 800188e:	0223      	lsls	r3, r4, #8
 8001890:	d54b      	bpl.n	800192a <__aeabi_dmul+0x4ae>
 8001892:	2201      	movs	r2, #1
 8001894:	2400      	movs	r4, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e660      	b.n	800155c <__aeabi_dmul+0xe0>
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	031b      	lsls	r3, r3, #12
 800189e:	421c      	tst	r4, r3
 80018a0:	d009      	beq.n	80018b6 <__aeabi_dmul+0x43a>
 80018a2:	421e      	tst	r6, r3
 80018a4:	d107      	bne.n	80018b6 <__aeabi_dmul+0x43a>
 80018a6:	4333      	orrs	r3, r6
 80018a8:	031c      	lsls	r4, r3, #12
 80018aa:	4643      	mov	r3, r8
 80018ac:	0015      	movs	r5, r2
 80018ae:	0b24      	lsrs	r4, r4, #12
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <__aeabi_dmul+0x4cc>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	e652      	b.n	800155c <__aeabi_dmul+0xe0>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	0312      	lsls	r2, r2, #12
 80018ba:	4314      	orrs	r4, r2
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <__aeabi_dmul+0x4cc>)
 80018c0:	0b24      	lsrs	r4, r4, #12
 80018c2:	9701      	str	r7, [sp, #4]
 80018c4:	e64a      	b.n	800155c <__aeabi_dmul+0xe0>
 80018c6:	f000 fd51 	bl	800236c <__clzsi2>
 80018ca:	0003      	movs	r3, r0
 80018cc:	001a      	movs	r2, r3
 80018ce:	3215      	adds	r2, #21
 80018d0:	3020      	adds	r0, #32
 80018d2:	2a1c      	cmp	r2, #28
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_dmul+0x45c>
 80018d6:	e684      	b.n	80015e2 <__aeabi_dmul+0x166>
 80018d8:	4656      	mov	r6, sl
 80018da:	3b08      	subs	r3, #8
 80018dc:	2200      	movs	r2, #0
 80018de:	409e      	lsls	r6, r3
 80018e0:	e689      	b.n	80015f6 <__aeabi_dmul+0x17a>
 80018e2:	f000 fd43 	bl	800236c <__clzsi2>
 80018e6:	0001      	movs	r1, r0
 80018e8:	0002      	movs	r2, r0
 80018ea:	3115      	adds	r1, #21
 80018ec:	3220      	adds	r2, #32
 80018ee:	291c      	cmp	r1, #28
 80018f0:	dc00      	bgt.n	80018f4 <__aeabi_dmul+0x478>
 80018f2:	e64e      	b.n	8001592 <__aeabi_dmul+0x116>
 80018f4:	0034      	movs	r4, r6
 80018f6:	3808      	subs	r0, #8
 80018f8:	2500      	movs	r5, #0
 80018fa:	4084      	lsls	r4, r0
 80018fc:	e653      	b.n	80015a6 <__aeabi_dmul+0x12a>
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	469c      	mov	ip, r3
 8001902:	e741      	b.n	8001788 <__aeabi_dmul+0x30c>
 8001904:	4912      	ldr	r1, [pc, #72]	; (8001950 <__aeabi_dmul+0x4d4>)
 8001906:	0022      	movs	r2, r4
 8001908:	4461      	add	r1, ip
 800190a:	002e      	movs	r6, r5
 800190c:	408d      	lsls	r5, r1
 800190e:	408a      	lsls	r2, r1
 8001910:	40c6      	lsrs	r6, r0
 8001912:	1e69      	subs	r1, r5, #1
 8001914:	418d      	sbcs	r5, r1
 8001916:	4332      	orrs	r2, r6
 8001918:	432a      	orrs	r2, r5
 800191a:	40c4      	lsrs	r4, r0
 800191c:	0753      	lsls	r3, r2, #29
 800191e:	d0b6      	beq.n	800188e <__aeabi_dmul+0x412>
 8001920:	210f      	movs	r1, #15
 8001922:	4011      	ands	r1, r2
 8001924:	2904      	cmp	r1, #4
 8001926:	d1ac      	bne.n	8001882 <__aeabi_dmul+0x406>
 8001928:	e7b1      	b.n	800188e <__aeabi_dmul+0x412>
 800192a:	0765      	lsls	r5, r4, #29
 800192c:	0264      	lsls	r4, r4, #9
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	08d2      	lsrs	r2, r2, #3
 8001932:	4315      	orrs	r5, r2
 8001934:	2200      	movs	r2, #0
 8001936:	e611      	b.n	800155c <__aeabi_dmul+0xe0>
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4314      	orrs	r4, r2
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4a01      	ldr	r2, [pc, #4]	; (8001948 <__aeabi_dmul+0x4cc>)
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	e60a      	b.n	800155c <__aeabi_dmul+0xe0>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff
 800194c:	0000043e 	.word	0x0000043e
 8001950:	0000041e 	.word	0x0000041e

08001954 <__aeabi_dsub>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	4657      	mov	r7, sl
 8001958:	464e      	mov	r6, r9
 800195a:	4645      	mov	r5, r8
 800195c:	46de      	mov	lr, fp
 800195e:	0004      	movs	r4, r0
 8001960:	b5e0      	push	{r5, r6, r7, lr}
 8001962:	001f      	movs	r7, r3
 8001964:	0010      	movs	r0, r2
 8001966:	030b      	lsls	r3, r1, #12
 8001968:	0f62      	lsrs	r2, r4, #29
 800196a:	004e      	lsls	r6, r1, #1
 800196c:	0fcd      	lsrs	r5, r1, #31
 800196e:	0a5b      	lsrs	r3, r3, #9
 8001970:	0339      	lsls	r1, r7, #12
 8001972:	4313      	orrs	r3, r2
 8001974:	0a49      	lsrs	r1, r1, #9
 8001976:	00e2      	lsls	r2, r4, #3
 8001978:	0f44      	lsrs	r4, r0, #29
 800197a:	4321      	orrs	r1, r4
 800197c:	4cc2      	ldr	r4, [pc, #776]	; (8001c88 <__aeabi_dsub+0x334>)
 800197e:	4691      	mov	r9, r2
 8001980:	4692      	mov	sl, r2
 8001982:	00c0      	lsls	r0, r0, #3
 8001984:	007a      	lsls	r2, r7, #1
 8001986:	4680      	mov	r8, r0
 8001988:	0d76      	lsrs	r6, r6, #21
 800198a:	0d52      	lsrs	r2, r2, #21
 800198c:	0fff      	lsrs	r7, r7, #31
 800198e:	42a2      	cmp	r2, r4
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x40>
 8001992:	e0b4      	b.n	8001afe <__aeabi_dsub+0x1aa>
 8001994:	2401      	movs	r4, #1
 8001996:	4067      	eors	r7, r4
 8001998:	46bb      	mov	fp, r7
 800199a:	42bd      	cmp	r5, r7
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x4c>
 800199e:	e088      	b.n	8001ab2 <__aeabi_dsub+0x15e>
 80019a0:	1ab4      	subs	r4, r6, r2
 80019a2:	46a4      	mov	ip, r4
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dsub+0x56>
 80019a8:	e0b2      	b.n	8001b10 <__aeabi_dsub+0x1bc>
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x5c>
 80019ae:	e0c5      	b.n	8001b3c <__aeabi_dsub+0x1e8>
 80019b0:	4ab5      	ldr	r2, [pc, #724]	; (8001c88 <__aeabi_dsub+0x334>)
 80019b2:	4296      	cmp	r6, r2
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dsub+0x64>
 80019b6:	e28b      	b.n	8001ed0 <__aeabi_dsub+0x57c>
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0412      	lsls	r2, r2, #16
 80019bc:	4311      	orrs	r1, r2
 80019be:	4662      	mov	r2, ip
 80019c0:	2a38      	cmp	r2, #56	; 0x38
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0x72>
 80019c4:	e1a1      	b.n	8001d0a <__aeabi_dsub+0x3b6>
 80019c6:	2a1f      	cmp	r2, #31
 80019c8:	dd00      	ble.n	80019cc <__aeabi_dsub+0x78>
 80019ca:	e216      	b.n	8001dfa <__aeabi_dsub+0x4a6>
 80019cc:	2720      	movs	r7, #32
 80019ce:	000c      	movs	r4, r1
 80019d0:	1abf      	subs	r7, r7, r2
 80019d2:	40bc      	lsls	r4, r7
 80019d4:	0002      	movs	r2, r0
 80019d6:	46a0      	mov	r8, r4
 80019d8:	4664      	mov	r4, ip
 80019da:	40b8      	lsls	r0, r7
 80019dc:	40e2      	lsrs	r2, r4
 80019de:	4644      	mov	r4, r8
 80019e0:	4314      	orrs	r4, r2
 80019e2:	0002      	movs	r2, r0
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	4660      	mov	r0, ip
 80019ea:	40c1      	lsrs	r1, r0
 80019ec:	4322      	orrs	r2, r4
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	4649      	mov	r1, r9
 80019f2:	1a8c      	subs	r4, r1, r2
 80019f4:	45a1      	cmp	r9, r4
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	4698      	mov	r8, r3
 80019fe:	4643      	mov	r3, r8
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	d400      	bmi.n	8001a06 <__aeabi_dsub+0xb2>
 8001a04:	e117      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001a06:	4643      	mov	r3, r8
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	0a5b      	lsrs	r3, r3, #9
 8001a0c:	4698      	mov	r8, r3
 8001a0e:	4643      	mov	r3, r8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0xc2>
 8001a14:	e16c      	b.n	8001cf0 <__aeabi_dsub+0x39c>
 8001a16:	4640      	mov	r0, r8
 8001a18:	f000 fca8 	bl	800236c <__clzsi2>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	3a08      	subs	r2, #8
 8001a20:	2120      	movs	r1, #32
 8001a22:	0020      	movs	r0, r4
 8001a24:	4643      	mov	r3, r8
 8001a26:	1a89      	subs	r1, r1, r2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	40c8      	lsrs	r0, r1
 8001a2c:	4094      	lsls	r4, r2
 8001a2e:	4303      	orrs	r3, r0
 8001a30:	4296      	cmp	r6, r2
 8001a32:	dd00      	ble.n	8001a36 <__aeabi_dsub+0xe2>
 8001a34:	e157      	b.n	8001ce6 <__aeabi_dsub+0x392>
 8001a36:	1b96      	subs	r6, r2, r6
 8001a38:	1c71      	adds	r1, r6, #1
 8001a3a:	291f      	cmp	r1, #31
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0xec>
 8001a3e:	e1cb      	b.n	8001dd8 <__aeabi_dsub+0x484>
 8001a40:	2220      	movs	r2, #32
 8001a42:	0018      	movs	r0, r3
 8001a44:	0026      	movs	r6, r4
 8001a46:	1a52      	subs	r2, r2, r1
 8001a48:	4094      	lsls	r4, r2
 8001a4a:	4090      	lsls	r0, r2
 8001a4c:	40ce      	lsrs	r6, r1
 8001a4e:	40cb      	lsrs	r3, r1
 8001a50:	1e62      	subs	r2, r4, #1
 8001a52:	4194      	sbcs	r4, r2
 8001a54:	4330      	orrs	r0, r6
 8001a56:	4698      	mov	r8, r3
 8001a58:	2600      	movs	r6, #0
 8001a5a:	4304      	orrs	r4, r0
 8001a5c:	0763      	lsls	r3, r4, #29
 8001a5e:	d009      	beq.n	8001a74 <__aeabi_dsub+0x120>
 8001a60:	230f      	movs	r3, #15
 8001a62:	4023      	ands	r3, r4
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <__aeabi_dsub+0x120>
 8001a68:	1d23      	adds	r3, r4, #4
 8001a6a:	42a3      	cmp	r3, r4
 8001a6c:	41a4      	sbcs	r4, r4
 8001a6e:	4264      	negs	r4, r4
 8001a70:	44a0      	add	r8, r4
 8001a72:	001c      	movs	r4, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0x128>
 8001a7a:	e0df      	b.n	8001c3c <__aeabi_dsub+0x2e8>
 8001a7c:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <__aeabi_dsub+0x334>)
 8001a7e:	3601      	adds	r6, #1
 8001a80:	429e      	cmp	r6, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x132>
 8001a84:	e0fb      	b.n	8001c7e <__aeabi_dsub+0x32a>
 8001a86:	4642      	mov	r2, r8
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <__aeabi_dsub+0x338>)
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	0571      	lsls	r1, r6, #21
 8001a92:	0752      	lsls	r2, r2, #29
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4322      	orrs	r2, r4
 8001a98:	0b1b      	lsrs	r3, r3, #12
 8001a9a:	0d49      	lsrs	r1, r1, #21
 8001a9c:	0509      	lsls	r1, r1, #20
 8001a9e:	07ed      	lsls	r5, r5, #31
 8001aa0:	4319      	orrs	r1, r3
 8001aa2:	4329      	orrs	r1, r5
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa8:	46bb      	mov	fp, r7
 8001aaa:	46b2      	mov	sl, r6
 8001aac:	46a9      	mov	r9, r5
 8001aae:	46a0      	mov	r8, r4
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	1ab4      	subs	r4, r6, r2
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	dd58      	ble.n	8001b6c <__aeabi_dsub+0x218>
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dsub+0x16c>
 8001abe:	e09e      	b.n	8001bfe <__aeabi_dsub+0x2aa>
 8001ac0:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <__aeabi_dsub+0x334>)
 8001ac2:	4296      	cmp	r6, r2
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x174>
 8001ac6:	e13b      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	0412      	lsls	r2, r2, #16
 8001acc:	4311      	orrs	r1, r2
 8001ace:	4662      	mov	r2, ip
 8001ad0:	2a38      	cmp	r2, #56	; 0x38
 8001ad2:	dd00      	ble.n	8001ad6 <__aeabi_dsub+0x182>
 8001ad4:	e0c1      	b.n	8001c5a <__aeabi_dsub+0x306>
 8001ad6:	2a1f      	cmp	r2, #31
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x188>
 8001ada:	e1bb      	b.n	8001e54 <__aeabi_dsub+0x500>
 8001adc:	000c      	movs	r4, r1
 8001ade:	3a20      	subs	r2, #32
 8001ae0:	40d4      	lsrs	r4, r2
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	4664      	mov	r4, ip
 8001ae6:	2c20      	cmp	r4, #32
 8001ae8:	d004      	beq.n	8001af4 <__aeabi_dsub+0x1a0>
 8001aea:	2740      	movs	r7, #64	; 0x40
 8001aec:	1b3f      	subs	r7, r7, r4
 8001aee:	40b9      	lsls	r1, r7
 8001af0:	4308      	orrs	r0, r1
 8001af2:	4680      	mov	r8, r0
 8001af4:	4644      	mov	r4, r8
 8001af6:	1e61      	subs	r1, r4, #1
 8001af8:	418c      	sbcs	r4, r1
 8001afa:	4314      	orrs	r4, r2
 8001afc:	e0b1      	b.n	8001c62 <__aeabi_dsub+0x30e>
 8001afe:	000c      	movs	r4, r1
 8001b00:	4304      	orrs	r4, r0
 8001b02:	d02a      	beq.n	8001b5a <__aeabi_dsub+0x206>
 8001b04:	46bb      	mov	fp, r7
 8001b06:	42bd      	cmp	r5, r7
 8001b08:	d02d      	beq.n	8001b66 <__aeabi_dsub+0x212>
 8001b0a:	4c61      	ldr	r4, [pc, #388]	; (8001c90 <__aeabi_dsub+0x33c>)
 8001b0c:	46a4      	mov	ip, r4
 8001b0e:	44b4      	add	ip, r6
 8001b10:	4664      	mov	r4, ip
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d05c      	beq.n	8001bd0 <__aeabi_dsub+0x27c>
 8001b16:	1b94      	subs	r4, r2, r6
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dsub+0x1cc>
 8001b1e:	e115      	b.n	8001d4c <__aeabi_dsub+0x3f8>
 8001b20:	464d      	mov	r5, r9
 8001b22:	431d      	orrs	r5, r3
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x1d4>
 8001b26:	e1c3      	b.n	8001eb0 <__aeabi_dsub+0x55c>
 8001b28:	1e65      	subs	r5, r4, #1
 8001b2a:	2c01      	cmp	r4, #1
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1dc>
 8001b2e:	e20c      	b.n	8001f4a <__aeabi_dsub+0x5f6>
 8001b30:	4e55      	ldr	r6, [pc, #340]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b32:	42b4      	cmp	r4, r6
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x1e4>
 8001b36:	e1f8      	b.n	8001f2a <__aeabi_dsub+0x5d6>
 8001b38:	46ac      	mov	ip, r5
 8001b3a:	e10e      	b.n	8001d5a <__aeabi_dsub+0x406>
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x1f0>
 8001b42:	e136      	b.n	8001db2 <__aeabi_dsub+0x45e>
 8001b44:	0022      	movs	r2, r4
 8001b46:	3a01      	subs	r2, #1
 8001b48:	2c01      	cmp	r4, #1
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x1fa>
 8001b4c:	e1c6      	b.n	8001edc <__aeabi_dsub+0x588>
 8001b4e:	4c4e      	ldr	r4, [pc, #312]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b50:	45a4      	cmp	ip, r4
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x202>
 8001b54:	e0f4      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001b56:	4694      	mov	ip, r2
 8001b58:	e731      	b.n	80019be <__aeabi_dsub+0x6a>
 8001b5a:	2401      	movs	r4, #1
 8001b5c:	4067      	eors	r7, r4
 8001b5e:	46bb      	mov	fp, r7
 8001b60:	42bd      	cmp	r5, r7
 8001b62:	d000      	beq.n	8001b66 <__aeabi_dsub+0x212>
 8001b64:	e71c      	b.n	80019a0 <__aeabi_dsub+0x4c>
 8001b66:	4c4a      	ldr	r4, [pc, #296]	; (8001c90 <__aeabi_dsub+0x33c>)
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	44b4      	add	ip, r6
 8001b6c:	4664      	mov	r4, ip
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x220>
 8001b72:	e0cf      	b.n	8001d14 <__aeabi_dsub+0x3c0>
 8001b74:	1b94      	subs	r4, r2, r6
 8001b76:	46a4      	mov	ip, r4
 8001b78:	2e00      	cmp	r6, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x22a>
 8001b7c:	e15c      	b.n	8001e38 <__aeabi_dsub+0x4e4>
 8001b7e:	4e42      	ldr	r6, [pc, #264]	; (8001c88 <__aeabi_dsub+0x334>)
 8001b80:	42b2      	cmp	r2, r6
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x232>
 8001b84:	e1ec      	b.n	8001f60 <__aeabi_dsub+0x60c>
 8001b86:	2680      	movs	r6, #128	; 0x80
 8001b88:	0436      	lsls	r6, r6, #16
 8001b8a:	4333      	orrs	r3, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c38      	cmp	r4, #56	; 0x38
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_dsub+0x240>
 8001b92:	e1b3      	b.n	8001efc <__aeabi_dsub+0x5a8>
 8001b94:	2c1f      	cmp	r4, #31
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dsub+0x246>
 8001b98:	e238      	b.n	800200c <__aeabi_dsub+0x6b8>
 8001b9a:	2620      	movs	r6, #32
 8001b9c:	1b36      	subs	r6, r6, r4
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	40b4      	lsls	r4, r6
 8001ba2:	464f      	mov	r7, r9
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	4664      	mov	r4, ip
 8001ba8:	40e7      	lsrs	r7, r4
 8001baa:	4644      	mov	r4, r8
 8001bac:	433c      	orrs	r4, r7
 8001bae:	464f      	mov	r7, r9
 8001bb0:	40b7      	lsls	r7, r6
 8001bb2:	003e      	movs	r6, r7
 8001bb4:	1e77      	subs	r7, r6, #1
 8001bb6:	41be      	sbcs	r6, r7
 8001bb8:	4334      	orrs	r4, r6
 8001bba:	4666      	mov	r6, ip
 8001bbc:	40f3      	lsrs	r3, r6
 8001bbe:	18c9      	adds	r1, r1, r3
 8001bc0:	1824      	adds	r4, r4, r0
 8001bc2:	4284      	cmp	r4, r0
 8001bc4:	419b      	sbcs	r3, r3
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	4698      	mov	r8, r3
 8001bca:	0016      	movs	r6, r2
 8001bcc:	4488      	add	r8, r1
 8001bce:	e04e      	b.n	8001c6e <__aeabi_dsub+0x31a>
 8001bd0:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <__aeabi_dsub+0x340>)
 8001bd2:	1c74      	adds	r4, r6, #1
 8001bd4:	4214      	tst	r4, r2
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x286>
 8001bd8:	e0d6      	b.n	8001d88 <__aeabi_dsub+0x434>
 8001bda:	464a      	mov	r2, r9
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	2e00      	cmp	r6, #0
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x290>
 8001be2:	e15b      	b.n	8001e9c <__aeabi_dsub+0x548>
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x296>
 8001be8:	e1a5      	b.n	8001f36 <__aeabi_dsub+0x5e2>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dsub+0x29e>
 8001bf0:	e1bb      	b.n	8001f6a <__aeabi_dsub+0x616>
 8001bf2:	464a      	mov	r2, r9
 8001bf4:	0759      	lsls	r1, r3, #29
 8001bf6:	08d2      	lsrs	r2, r2, #3
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	e027      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001bfe:	000a      	movs	r2, r1
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x2b2>
 8001c04:	e174      	b.n	8001ef0 <__aeabi_dsub+0x59c>
 8001c06:	0022      	movs	r2, r4
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	d005      	beq.n	8001c1a <__aeabi_dsub+0x2c6>
 8001c0e:	4c1e      	ldr	r4, [pc, #120]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c10:	45a4      	cmp	ip, r4
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x2c2>
 8001c14:	e094      	b.n	8001d40 <__aeabi_dsub+0x3ec>
 8001c16:	4694      	mov	ip, r2
 8001c18:	e759      	b.n	8001ace <__aeabi_dsub+0x17a>
 8001c1a:	4448      	add	r0, r9
 8001c1c:	4548      	cmp	r0, r9
 8001c1e:	4192      	sbcs	r2, r2
 8001c20:	185b      	adds	r3, r3, r1
 8001c22:	4698      	mov	r8, r3
 8001c24:	0004      	movs	r4, r0
 8001c26:	4252      	negs	r2, r2
 8001c28:	4490      	add	r8, r2
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	2602      	movs	r6, #2
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	d500      	bpl.n	8001c34 <__aeabi_dsub+0x2e0>
 8001c32:	e0c4      	b.n	8001dbe <__aeabi_dsub+0x46a>
 8001c34:	3e01      	subs	r6, #1
 8001c36:	0763      	lsls	r3, r4, #29
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dsub+0x2e8>
 8001c3a:	e711      	b.n	8001a60 <__aeabi_dsub+0x10c>
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	46b4      	mov	ip, r6
 8001c40:	0759      	lsls	r1, r3, #29
 8001c42:	08e2      	lsrs	r2, r4, #3
 8001c44:	430a      	orrs	r2, r1
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	490f      	ldr	r1, [pc, #60]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c4a:	458c      	cmp	ip, r1
 8001c4c:	d040      	beq.n	8001cd0 <__aeabi_dsub+0x37c>
 8001c4e:	4661      	mov	r1, ip
 8001c50:	031b      	lsls	r3, r3, #12
 8001c52:	0549      	lsls	r1, r1, #21
 8001c54:	0b1b      	lsrs	r3, r3, #12
 8001c56:	0d49      	lsrs	r1, r1, #21
 8001c58:	e720      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001c5a:	4301      	orrs	r1, r0
 8001c5c:	000c      	movs	r4, r1
 8001c5e:	1e61      	subs	r1, r4, #1
 8001c60:	418c      	sbcs	r4, r1
 8001c62:	444c      	add	r4, r9
 8001c64:	454c      	cmp	r4, r9
 8001c66:	4192      	sbcs	r2, r2
 8001c68:	4252      	negs	r2, r2
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4498      	add	r8, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	d5e0      	bpl.n	8001c36 <__aeabi_dsub+0x2e2>
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__aeabi_dsub+0x334>)
 8001c76:	3601      	adds	r6, #1
 8001c78:	429e      	cmp	r6, r3
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x32a>
 8001c7c:	e09f      	b.n	8001dbe <__aeabi_dsub+0x46a>
 8001c7e:	0031      	movs	r1, r6
 8001c80:	2300      	movs	r3, #0
 8001c82:	2200      	movs	r2, #0
 8001c84:	e70a      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	000007ff 	.word	0x000007ff
 8001c8c:	ff7fffff 	.word	0xff7fffff
 8001c90:	fffff801 	.word	0xfffff801
 8001c94:	000007fe 	.word	0x000007fe
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x34a>
 8001c9c:	e160      	b.n	8001f60 <__aeabi_dsub+0x60c>
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d04d      	beq.n	8001d40 <__aeabi_dsub+0x3ec>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	075c      	lsls	r4, r3, #29
 8001ca8:	08d2      	lsrs	r2, r2, #3
 8001caa:	4322      	orrs	r2, r4
 8001cac:	2480      	movs	r4, #128	; 0x80
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	4223      	tst	r3, r4
 8001cb4:	d007      	beq.n	8001cc6 <__aeabi_dsub+0x372>
 8001cb6:	08ce      	lsrs	r6, r1, #3
 8001cb8:	4226      	tst	r6, r4
 8001cba:	d104      	bne.n	8001cc6 <__aeabi_dsub+0x372>
 8001cbc:	465d      	mov	r5, fp
 8001cbe:	0033      	movs	r3, r6
 8001cc0:	08c2      	lsrs	r2, r0, #3
 8001cc2:	0749      	lsls	r1, r1, #29
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	0f51      	lsrs	r1, r2, #29
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	08d2      	lsrs	r2, r2, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	0011      	movs	r1, r2
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x384>
 8001cd6:	e1c8      	b.n	800206a <__aeabi_dsub+0x716>
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0309      	lsls	r1, r1, #12
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	031b      	lsls	r3, r3, #12
 8001ce0:	49d5      	ldr	r1, [pc, #852]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001ce2:	0b1b      	lsrs	r3, r3, #12
 8001ce4:	e6da      	b.n	8001a9c <__aeabi_dsub+0x148>
 8001ce6:	49d5      	ldr	r1, [pc, #852]	; (800203c <__aeabi_dsub+0x6e8>)
 8001ce8:	1ab6      	subs	r6, r6, r2
 8001cea:	400b      	ands	r3, r1
 8001cec:	4698      	mov	r8, r3
 8001cee:	e6b5      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f000 fb3b 	bl	800236c <__clzsi2>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	3218      	adds	r2, #24
 8001cfa:	2a1f      	cmp	r2, #31
 8001cfc:	dc00      	bgt.n	8001d00 <__aeabi_dsub+0x3ac>
 8001cfe:	e68f      	b.n	8001a20 <__aeabi_dsub+0xcc>
 8001d00:	0023      	movs	r3, r4
 8001d02:	3808      	subs	r0, #8
 8001d04:	4083      	lsls	r3, r0
 8001d06:	2400      	movs	r4, #0
 8001d08:	e692      	b.n	8001a30 <__aeabi_dsub+0xdc>
 8001d0a:	4308      	orrs	r0, r1
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	1e50      	subs	r0, r2, #1
 8001d10:	4182      	sbcs	r2, r0
 8001d12:	e66d      	b.n	80019f0 <__aeabi_dsub+0x9c>
 8001d14:	4cca      	ldr	r4, [pc, #808]	; (8002040 <__aeabi_dsub+0x6ec>)
 8001d16:	1c72      	adds	r2, r6, #1
 8001d18:	4222      	tst	r2, r4
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x3ca>
 8001d1c:	e0ad      	b.n	8001e7a <__aeabi_dsub+0x526>
 8001d1e:	464a      	mov	r2, r9
 8001d20:	431a      	orrs	r2, r3
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d1b8      	bne.n	8001c98 <__aeabi_dsub+0x344>
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x3d8>
 8001d2a:	e158      	b.n	8001fde <__aeabi_dsub+0x68a>
 8001d2c:	000a      	movs	r2, r1
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	d000      	beq.n	8001d34 <__aeabi_dsub+0x3e0>
 8001d32:	e159      	b.n	8001fe8 <__aeabi_dsub+0x694>
 8001d34:	464a      	mov	r2, r9
 8001d36:	0759      	lsls	r1, r3, #29
 8001d38:	08d2      	lsrs	r2, r2, #3
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	e786      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001d40:	464a      	mov	r2, r9
 8001d42:	0759      	lsls	r1, r3, #29
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	430a      	orrs	r2, r1
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	e7c1      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001d4c:	4dba      	ldr	r5, [pc, #744]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x400>
 8001d52:	e11e      	b.n	8001f92 <__aeabi_dsub+0x63e>
 8001d54:	2580      	movs	r5, #128	; 0x80
 8001d56:	042d      	lsls	r5, r5, #16
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	2c38      	cmp	r4, #56	; 0x38
 8001d5e:	dc5d      	bgt.n	8001e1c <__aeabi_dsub+0x4c8>
 8001d60:	2c1f      	cmp	r4, #31
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x412>
 8001d64:	e0d0      	b.n	8001f08 <__aeabi_dsub+0x5b4>
 8001d66:	2520      	movs	r5, #32
 8001d68:	4667      	mov	r7, ip
 8001d6a:	1b2d      	subs	r5, r5, r4
 8001d6c:	464e      	mov	r6, r9
 8001d6e:	001c      	movs	r4, r3
 8001d70:	40fe      	lsrs	r6, r7
 8001d72:	40ac      	lsls	r4, r5
 8001d74:	4334      	orrs	r4, r6
 8001d76:	464e      	mov	r6, r9
 8001d78:	40ae      	lsls	r6, r5
 8001d7a:	0035      	movs	r5, r6
 8001d7c:	40fb      	lsrs	r3, r7
 8001d7e:	1e6e      	subs	r6, r5, #1
 8001d80:	41b5      	sbcs	r5, r6
 8001d82:	1ac9      	subs	r1, r1, r3
 8001d84:	432c      	orrs	r4, r5
 8001d86:	e04e      	b.n	8001e26 <__aeabi_dsub+0x4d2>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	1a14      	subs	r4, r2, r0
 8001d8c:	45a1      	cmp	r9, r4
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4690      	mov	r8, r2
 8001d94:	1a5f      	subs	r7, r3, r1
 8001d96:	003a      	movs	r2, r7
 8001d98:	4647      	mov	r7, r8
 8001d9a:	1bd2      	subs	r2, r2, r7
 8001d9c:	4690      	mov	r8, r2
 8001d9e:	0212      	lsls	r2, r2, #8
 8001da0:	d500      	bpl.n	8001da4 <__aeabi_dsub+0x450>
 8001da2:	e08b      	b.n	8001ebc <__aeabi_dsub+0x568>
 8001da4:	4642      	mov	r2, r8
 8001da6:	4322      	orrs	r2, r4
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x458>
 8001daa:	e630      	b.n	8001a0e <__aeabi_dsub+0xba>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2500      	movs	r5, #0
 8001db0:	e74d      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001db2:	464a      	mov	r2, r9
 8001db4:	0759      	lsls	r1, r3, #29
 8001db6:	08d2      	lsrs	r2, r2, #3
 8001db8:	430a      	orrs	r2, r1
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	e744      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	4b9e      	ldr	r3, [pc, #632]	; (800203c <__aeabi_dsub+0x6e8>)
 8001dc2:	0861      	lsrs	r1, r4, #1
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4014      	ands	r4, r2
 8001dcc:	430c      	orrs	r4, r1
 8001dce:	07da      	lsls	r2, r3, #31
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	4698      	mov	r8, r3
 8001dd4:	4314      	orrs	r4, r2
 8001dd6:	e641      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001dd8:	001a      	movs	r2, r3
 8001dda:	3e1f      	subs	r6, #31
 8001ddc:	40f2      	lsrs	r2, r6
 8001dde:	0016      	movs	r6, r2
 8001de0:	2920      	cmp	r1, #32
 8001de2:	d003      	beq.n	8001dec <__aeabi_dsub+0x498>
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	1a51      	subs	r1, r2, r1
 8001de8:	408b      	lsls	r3, r1
 8001dea:	431c      	orrs	r4, r3
 8001dec:	1e62      	subs	r2, r4, #1
 8001dee:	4194      	sbcs	r4, r2
 8001df0:	2300      	movs	r3, #0
 8001df2:	4334      	orrs	r4, r6
 8001df4:	4698      	mov	r8, r3
 8001df6:	2600      	movs	r6, #0
 8001df8:	e71d      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	3a20      	subs	r2, #32
 8001dfe:	40d4      	lsrs	r4, r2
 8001e00:	0022      	movs	r2, r4
 8001e02:	4664      	mov	r4, ip
 8001e04:	2c20      	cmp	r4, #32
 8001e06:	d004      	beq.n	8001e12 <__aeabi_dsub+0x4be>
 8001e08:	2740      	movs	r7, #64	; 0x40
 8001e0a:	1b3f      	subs	r7, r7, r4
 8001e0c:	40b9      	lsls	r1, r7
 8001e0e:	4308      	orrs	r0, r1
 8001e10:	4680      	mov	r8, r0
 8001e12:	4644      	mov	r4, r8
 8001e14:	1e61      	subs	r1, r4, #1
 8001e16:	418c      	sbcs	r4, r1
 8001e18:	4322      	orrs	r2, r4
 8001e1a:	e5e9      	b.n	80019f0 <__aeabi_dsub+0x9c>
 8001e1c:	464c      	mov	r4, r9
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	001c      	movs	r4, r3
 8001e22:	1e63      	subs	r3, r4, #1
 8001e24:	419c      	sbcs	r4, r3
 8001e26:	1b04      	subs	r4, r0, r4
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	1acb      	subs	r3, r1, r3
 8001e30:	4698      	mov	r8, r3
 8001e32:	465d      	mov	r5, fp
 8001e34:	0016      	movs	r6, r2
 8001e36:	e5e2      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001e38:	464e      	mov	r6, r9
 8001e3a:	431e      	orrs	r6, r3
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x4ec>
 8001e3e:	e0ae      	b.n	8001f9e <__aeabi_dsub+0x64a>
 8001e40:	1e66      	subs	r6, r4, #1
 8001e42:	2c01      	cmp	r4, #1
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x4f4>
 8001e46:	e0fd      	b.n	8002044 <__aeabi_dsub+0x6f0>
 8001e48:	4f7b      	ldr	r7, [pc, #492]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001e4a:	42bc      	cmp	r4, r7
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x4fc>
 8001e4e:	e107      	b.n	8002060 <__aeabi_dsub+0x70c>
 8001e50:	46b4      	mov	ip, r6
 8001e52:	e69b      	b.n	8001b8c <__aeabi_dsub+0x238>
 8001e54:	4664      	mov	r4, ip
 8001e56:	2220      	movs	r2, #32
 8001e58:	1b12      	subs	r2, r2, r4
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	4094      	lsls	r4, r2
 8001e5e:	0007      	movs	r7, r0
 8001e60:	4090      	lsls	r0, r2
 8001e62:	46a0      	mov	r8, r4
 8001e64:	4664      	mov	r4, ip
 8001e66:	1e42      	subs	r2, r0, #1
 8001e68:	4190      	sbcs	r0, r2
 8001e6a:	4662      	mov	r2, ip
 8001e6c:	40e7      	lsrs	r7, r4
 8001e6e:	4644      	mov	r4, r8
 8001e70:	40d1      	lsrs	r1, r2
 8001e72:	433c      	orrs	r4, r7
 8001e74:	4304      	orrs	r4, r0
 8001e76:	185b      	adds	r3, r3, r1
 8001e78:	e6f3      	b.n	8001c62 <__aeabi_dsub+0x30e>
 8001e7a:	4c6f      	ldr	r4, [pc, #444]	; (8002038 <__aeabi_dsub+0x6e4>)
 8001e7c:	42a2      	cmp	r2, r4
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x52e>
 8001e80:	e0d5      	b.n	800202e <__aeabi_dsub+0x6da>
 8001e82:	4448      	add	r0, r9
 8001e84:	185b      	adds	r3, r3, r1
 8001e86:	4548      	cmp	r0, r9
 8001e88:	4189      	sbcs	r1, r1
 8001e8a:	4249      	negs	r1, r1
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	07dc      	lsls	r4, r3, #31
 8001e90:	0840      	lsrs	r0, r0, #1
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	4698      	mov	r8, r3
 8001e96:	0016      	movs	r6, r2
 8001e98:	4304      	orrs	r4, r0
 8001e9a:	e6cc      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x54e>
 8001ea0:	e082      	b.n	8001fa8 <__aeabi_dsub+0x654>
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	d140      	bne.n	8001f2a <__aeabi_dsub+0x5d6>
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	2500      	movs	r5, #0
 8001eac:	031b      	lsls	r3, r3, #12
 8001eae:	e713      	b.n	8001cd8 <__aeabi_dsub+0x384>
 8001eb0:	074b      	lsls	r3, r1, #29
 8001eb2:	08c2      	lsrs	r2, r0, #3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	465d      	mov	r5, fp
 8001eb8:	08cb      	lsrs	r3, r1, #3
 8001eba:	e6c5      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	1a84      	subs	r4, r0, r2
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	1acb      	subs	r3, r1, r3
 8001ec6:	4252      	negs	r2, r2
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	4698      	mov	r8, r3
 8001ecc:	465d      	mov	r5, fp
 8001ece:	e59e      	b.n	8001a0e <__aeabi_dsub+0xba>
 8001ed0:	464a      	mov	r2, r9
 8001ed2:	0759      	lsls	r1, r3, #29
 8001ed4:	08d2      	lsrs	r2, r2, #3
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	e6f9      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001edc:	464a      	mov	r2, r9
 8001ede:	1a14      	subs	r4, r2, r0
 8001ee0:	45a1      	cmp	r9, r4
 8001ee2:	4192      	sbcs	r2, r2
 8001ee4:	1a5b      	subs	r3, r3, r1
 8001ee6:	4252      	negs	r2, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	4698      	mov	r8, r3
 8001eec:	2601      	movs	r6, #1
 8001eee:	e586      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0759      	lsls	r1, r3, #29
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	e6a5      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001efc:	464c      	mov	r4, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	001c      	movs	r4, r3
 8001f02:	1e63      	subs	r3, r4, #1
 8001f04:	419c      	sbcs	r4, r3
 8001f06:	e65b      	b.n	8001bc0 <__aeabi_dsub+0x26c>
 8001f08:	4665      	mov	r5, ip
 8001f0a:	001e      	movs	r6, r3
 8001f0c:	3d20      	subs	r5, #32
 8001f0e:	40ee      	lsrs	r6, r5
 8001f10:	2c20      	cmp	r4, #32
 8001f12:	d005      	beq.n	8001f20 <__aeabi_dsub+0x5cc>
 8001f14:	2540      	movs	r5, #64	; 0x40
 8001f16:	1b2d      	subs	r5, r5, r4
 8001f18:	40ab      	lsls	r3, r5
 8001f1a:	464c      	mov	r4, r9
 8001f1c:	431c      	orrs	r4, r3
 8001f1e:	46a2      	mov	sl, r4
 8001f20:	4654      	mov	r4, sl
 8001f22:	1e63      	subs	r3, r4, #1
 8001f24:	419c      	sbcs	r4, r3
 8001f26:	4334      	orrs	r4, r6
 8001f28:	e77d      	b.n	8001e26 <__aeabi_dsub+0x4d2>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e6cc      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f36:	000a      	movs	r2, r1
 8001f38:	4302      	orrs	r2, r0
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x5ea>
 8001f3c:	e736      	b.n	8001dac <__aeabi_dsub+0x458>
 8001f3e:	074b      	lsls	r3, r1, #29
 8001f40:	08c2      	lsrs	r2, r0, #3
 8001f42:	431a      	orrs	r2, r3
 8001f44:	465d      	mov	r5, fp
 8001f46:	08cb      	lsrs	r3, r1, #3
 8001f48:	e681      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001f4a:	464a      	mov	r2, r9
 8001f4c:	1a84      	subs	r4, r0, r2
 8001f4e:	42a0      	cmp	r0, r4
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	4252      	negs	r2, r2
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	4698      	mov	r8, r3
 8001f5a:	465d      	mov	r5, fp
 8001f5c:	2601      	movs	r6, #1
 8001f5e:	e54e      	b.n	80019fe <__aeabi_dsub+0xaa>
 8001f60:	074b      	lsls	r3, r1, #29
 8001f62:	08c2      	lsrs	r2, r0, #3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	08cb      	lsrs	r3, r1, #3
 8001f68:	e6b2      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a14      	subs	r4, r2, r0
 8001f6e:	45a1      	cmp	r9, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1a5f      	subs	r7, r3, r1
 8001f74:	4252      	negs	r2, r2
 8001f76:	1aba      	subs	r2, r7, r2
 8001f78:	4690      	mov	r8, r2
 8001f7a:	0212      	lsls	r2, r2, #8
 8001f7c:	d56b      	bpl.n	8002056 <__aeabi_dsub+0x702>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	1a84      	subs	r4, r0, r2
 8001f82:	42a0      	cmp	r0, r4
 8001f84:	4192      	sbcs	r2, r2
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	4252      	negs	r2, r2
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	465d      	mov	r5, fp
 8001f90:	e564      	b.n	8001a5c <__aeabi_dsub+0x108>
 8001f92:	074b      	lsls	r3, r1, #29
 8001f94:	08c2      	lsrs	r2, r0, #3
 8001f96:	431a      	orrs	r2, r3
 8001f98:	465d      	mov	r5, fp
 8001f9a:	08cb      	lsrs	r3, r1, #3
 8001f9c:	e698      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001f9e:	074b      	lsls	r3, r1, #29
 8001fa0:	08c2      	lsrs	r2, r0, #3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	08cb      	lsrs	r3, r1, #3
 8001fa6:	e64f      	b.n	8001c48 <__aeabi_dsub+0x2f4>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	4302      	orrs	r2, r0
 8001fac:	d090      	beq.n	8001ed0 <__aeabi_dsub+0x57c>
 8001fae:	464a      	mov	r2, r9
 8001fb0:	075c      	lsls	r4, r3, #29
 8001fb2:	08d2      	lsrs	r2, r2, #3
 8001fb4:	4314      	orrs	r4, r2
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	0312      	lsls	r2, r2, #12
 8001fbc:	4213      	tst	r3, r2
 8001fbe:	d008      	beq.n	8001fd2 <__aeabi_dsub+0x67e>
 8001fc0:	08ce      	lsrs	r6, r1, #3
 8001fc2:	4216      	tst	r6, r2
 8001fc4:	d105      	bne.n	8001fd2 <__aeabi_dsub+0x67e>
 8001fc6:	08c0      	lsrs	r0, r0, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	0004      	movs	r4, r0
 8001fce:	465d      	mov	r5, fp
 8001fd0:	0033      	movs	r3, r6
 8001fd2:	0f61      	lsrs	r1, r4, #29
 8001fd4:	00e2      	lsls	r2, r4, #3
 8001fd6:	0749      	lsls	r1, r1, #29
 8001fd8:	08d2      	lsrs	r2, r2, #3
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	e678      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 8001fde:	074b      	lsls	r3, r1, #29
 8001fe0:	08c2      	lsrs	r2, r0, #3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	08cb      	lsrs	r3, r1, #3
 8001fe6:	e632      	b.n	8001c4e <__aeabi_dsub+0x2fa>
 8001fe8:	4448      	add	r0, r9
 8001fea:	185b      	adds	r3, r3, r1
 8001fec:	4548      	cmp	r0, r9
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	4490      	add	r8, r2
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	d400      	bmi.n	8002000 <__aeabi_dsub+0x6ac>
 8001ffe:	e61a      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8002000:	4642      	mov	r2, r8
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <__aeabi_dsub+0x6e8>)
 8002004:	2601      	movs	r6, #1
 8002006:	401a      	ands	r2, r3
 8002008:	4690      	mov	r8, r2
 800200a:	e614      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 800200c:	4666      	mov	r6, ip
 800200e:	001f      	movs	r7, r3
 8002010:	3e20      	subs	r6, #32
 8002012:	40f7      	lsrs	r7, r6
 8002014:	2c20      	cmp	r4, #32
 8002016:	d005      	beq.n	8002024 <__aeabi_dsub+0x6d0>
 8002018:	2640      	movs	r6, #64	; 0x40
 800201a:	1b36      	subs	r6, r6, r4
 800201c:	40b3      	lsls	r3, r6
 800201e:	464c      	mov	r4, r9
 8002020:	431c      	orrs	r4, r3
 8002022:	46a2      	mov	sl, r4
 8002024:	4654      	mov	r4, sl
 8002026:	1e63      	subs	r3, r4, #1
 8002028:	419c      	sbcs	r4, r3
 800202a:	433c      	orrs	r4, r7
 800202c:	e5c8      	b.n	8001bc0 <__aeabi_dsub+0x26c>
 800202e:	0011      	movs	r1, r2
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	e532      	b.n	8001a9c <__aeabi_dsub+0x148>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff
 800203c:	ff7fffff 	.word	0xff7fffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	464a      	mov	r2, r9
 8002046:	1814      	adds	r4, r2, r0
 8002048:	4284      	cmp	r4, r0
 800204a:	4192      	sbcs	r2, r2
 800204c:	185b      	adds	r3, r3, r1
 800204e:	4698      	mov	r8, r3
 8002050:	4252      	negs	r2, r2
 8002052:	4490      	add	r8, r2
 8002054:	e5e9      	b.n	8001c2a <__aeabi_dsub+0x2d6>
 8002056:	4642      	mov	r2, r8
 8002058:	4322      	orrs	r2, r4
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x70a>
 800205c:	e6a6      	b.n	8001dac <__aeabi_dsub+0x458>
 800205e:	e5ea      	b.n	8001c36 <__aeabi_dsub+0x2e2>
 8002060:	074b      	lsls	r3, r1, #29
 8002062:	08c2      	lsrs	r2, r0, #3
 8002064:	431a      	orrs	r2, r3
 8002066:	08cb      	lsrs	r3, r1, #3
 8002068:	e632      	b.n	8001cd0 <__aeabi_dsub+0x37c>
 800206a:	2200      	movs	r2, #0
 800206c:	4901      	ldr	r1, [pc, #4]	; (8002074 <__aeabi_dsub+0x720>)
 800206e:	0013      	movs	r3, r2
 8002070:	e514      	b.n	8001a9c <__aeabi_dsub+0x148>
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff

08002078 <__aeabi_dcmpun>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	0005      	movs	r5, r0
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <__aeabi_dcmpun+0x38>)
 800207e:	030c      	lsls	r4, r1, #12
 8002080:	0016      	movs	r6, r2
 8002082:	0049      	lsls	r1, r1, #1
 8002084:	031a      	lsls	r2, r3, #12
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	0b24      	lsrs	r4, r4, #12
 800208a:	0d49      	lsrs	r1, r1, #21
 800208c:	0b12      	lsrs	r2, r2, #12
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	4281      	cmp	r1, r0
 8002092:	d008      	beq.n	80020a6 <__aeabi_dcmpun+0x2e>
 8002094:	4906      	ldr	r1, [pc, #24]	; (80020b0 <__aeabi_dcmpun+0x38>)
 8002096:	2000      	movs	r0, #0
 8002098:	428b      	cmp	r3, r1
 800209a:	d103      	bne.n	80020a4 <__aeabi_dcmpun+0x2c>
 800209c:	4332      	orrs	r2, r6
 800209e:	0010      	movs	r0, r2
 80020a0:	1e42      	subs	r2, r0, #1
 80020a2:	4190      	sbcs	r0, r2
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	2001      	movs	r0, #1
 80020a8:	432c      	orrs	r4, r5
 80020aa:	d1fb      	bne.n	80020a4 <__aeabi_dcmpun+0x2c>
 80020ac:	e7f2      	b.n	8002094 <__aeabi_dcmpun+0x1c>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	000007ff 	.word	0x000007ff

080020b4 <__aeabi_d2iz>:
 80020b4:	000a      	movs	r2, r1
 80020b6:	b530      	push	{r4, r5, lr}
 80020b8:	4c13      	ldr	r4, [pc, #76]	; (8002108 <__aeabi_d2iz+0x54>)
 80020ba:	0053      	lsls	r3, r2, #1
 80020bc:	0309      	lsls	r1, r1, #12
 80020be:	0005      	movs	r5, r0
 80020c0:	0b09      	lsrs	r1, r1, #12
 80020c2:	2000      	movs	r0, #0
 80020c4:	0d5b      	lsrs	r3, r3, #21
 80020c6:	0fd2      	lsrs	r2, r2, #31
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	dd04      	ble.n	80020d6 <__aeabi_d2iz+0x22>
 80020cc:	480f      	ldr	r0, [pc, #60]	; (800210c <__aeabi_d2iz+0x58>)
 80020ce:	4283      	cmp	r3, r0
 80020d0:	dd02      	ble.n	80020d8 <__aeabi_d2iz+0x24>
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <__aeabi_d2iz+0x5c>)
 80020d4:	18d0      	adds	r0, r2, r3
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	2080      	movs	r0, #128	; 0x80
 80020da:	0340      	lsls	r0, r0, #13
 80020dc:	4301      	orrs	r1, r0
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <__aeabi_d2iz+0x60>)
 80020e0:	1ac0      	subs	r0, r0, r3
 80020e2:	281f      	cmp	r0, #31
 80020e4:	dd08      	ble.n	80020f8 <__aeabi_d2iz+0x44>
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <__aeabi_d2iz+0x64>)
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	40d9      	lsrs	r1, r3
 80020ec:	000b      	movs	r3, r1
 80020ee:	4258      	negs	r0, r3
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d1f0      	bne.n	80020d6 <__aeabi_d2iz+0x22>
 80020f4:	0018      	movs	r0, r3
 80020f6:	e7ee      	b.n	80020d6 <__aeabi_d2iz+0x22>
 80020f8:	4c08      	ldr	r4, [pc, #32]	; (800211c <__aeabi_d2iz+0x68>)
 80020fa:	40c5      	lsrs	r5, r0
 80020fc:	46a4      	mov	ip, r4
 80020fe:	4463      	add	r3, ip
 8002100:	4099      	lsls	r1, r3
 8002102:	000b      	movs	r3, r1
 8002104:	432b      	orrs	r3, r5
 8002106:	e7f2      	b.n	80020ee <__aeabi_d2iz+0x3a>
 8002108:	000003fe 	.word	0x000003fe
 800210c:	0000041d 	.word	0x0000041d
 8002110:	7fffffff 	.word	0x7fffffff
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	fffffbed 	.word	0xfffffbed

08002120 <__aeabi_i2d>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2800      	cmp	r0, #0
 8002124:	d016      	beq.n	8002154 <__aeabi_i2d+0x34>
 8002126:	17c3      	asrs	r3, r0, #31
 8002128:	18c5      	adds	r5, r0, r3
 800212a:	405d      	eors	r5, r3
 800212c:	0fc4      	lsrs	r4, r0, #31
 800212e:	0028      	movs	r0, r5
 8002130:	f000 f91c 	bl	800236c <__clzsi2>
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <__aeabi_i2d+0x5c>)
 8002136:	1a12      	subs	r2, r2, r0
 8002138:	280a      	cmp	r0, #10
 800213a:	dc16      	bgt.n	800216a <__aeabi_i2d+0x4a>
 800213c:	0003      	movs	r3, r0
 800213e:	002e      	movs	r6, r5
 8002140:	3315      	adds	r3, #21
 8002142:	409e      	lsls	r6, r3
 8002144:	230b      	movs	r3, #11
 8002146:	1a18      	subs	r0, r3, r0
 8002148:	40c5      	lsrs	r5, r0
 800214a:	0553      	lsls	r3, r2, #21
 800214c:	032d      	lsls	r5, r5, #12
 800214e:	0b2d      	lsrs	r5, r5, #12
 8002150:	0d5b      	lsrs	r3, r3, #21
 8002152:	e003      	b.n	800215c <__aeabi_i2d+0x3c>
 8002154:	2400      	movs	r4, #0
 8002156:	2300      	movs	r3, #0
 8002158:	2500      	movs	r5, #0
 800215a:	2600      	movs	r6, #0
 800215c:	051b      	lsls	r3, r3, #20
 800215e:	432b      	orrs	r3, r5
 8002160:	07e4      	lsls	r4, r4, #31
 8002162:	4323      	orrs	r3, r4
 8002164:	0030      	movs	r0, r6
 8002166:	0019      	movs	r1, r3
 8002168:	bd70      	pop	{r4, r5, r6, pc}
 800216a:	380b      	subs	r0, #11
 800216c:	4085      	lsls	r5, r0
 800216e:	0553      	lsls	r3, r2, #21
 8002170:	032d      	lsls	r5, r5, #12
 8002172:	2600      	movs	r6, #0
 8002174:	0b2d      	lsrs	r5, r5, #12
 8002176:	0d5b      	lsrs	r3, r3, #21
 8002178:	e7f0      	b.n	800215c <__aeabi_i2d+0x3c>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	0000041e 	.word	0x0000041e

08002180 <__aeabi_ui2d>:
 8002180:	b510      	push	{r4, lr}
 8002182:	1e04      	subs	r4, r0, #0
 8002184:	d010      	beq.n	80021a8 <__aeabi_ui2d+0x28>
 8002186:	f000 f8f1 	bl	800236c <__clzsi2>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <__aeabi_ui2d+0x48>)
 800218c:	1a1b      	subs	r3, r3, r0
 800218e:	280a      	cmp	r0, #10
 8002190:	dc11      	bgt.n	80021b6 <__aeabi_ui2d+0x36>
 8002192:	220b      	movs	r2, #11
 8002194:	0021      	movs	r1, r4
 8002196:	1a12      	subs	r2, r2, r0
 8002198:	40d1      	lsrs	r1, r2
 800219a:	3015      	adds	r0, #21
 800219c:	030a      	lsls	r2, r1, #12
 800219e:	055b      	lsls	r3, r3, #21
 80021a0:	4084      	lsls	r4, r0
 80021a2:	0b12      	lsrs	r2, r2, #12
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	e001      	b.n	80021ac <__aeabi_ui2d+0x2c>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2200      	movs	r2, #0
 80021ac:	051b      	lsls	r3, r3, #20
 80021ae:	4313      	orrs	r3, r2
 80021b0:	0020      	movs	r0, r4
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	0022      	movs	r2, r4
 80021b8:	380b      	subs	r0, #11
 80021ba:	4082      	lsls	r2, r0
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	0312      	lsls	r2, r2, #12
 80021c0:	2400      	movs	r4, #0
 80021c2:	0b12      	lsrs	r2, r2, #12
 80021c4:	0d5b      	lsrs	r3, r3, #21
 80021c6:	e7f1      	b.n	80021ac <__aeabi_ui2d+0x2c>
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_f2d>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	0043      	lsls	r3, r0, #1
 80021d0:	0246      	lsls	r6, r0, #9
 80021d2:	0fc4      	lsrs	r4, r0, #31
 80021d4:	20fe      	movs	r0, #254	; 0xfe
 80021d6:	0e1b      	lsrs	r3, r3, #24
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	0a75      	lsrs	r5, r6, #9
 80021dc:	4208      	tst	r0, r1
 80021de:	d00c      	beq.n	80021fa <__aeabi_f2d+0x2e>
 80021e0:	22e0      	movs	r2, #224	; 0xe0
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4694      	mov	ip, r2
 80021e6:	076d      	lsls	r5, r5, #29
 80021e8:	0b36      	lsrs	r6, r6, #12
 80021ea:	4463      	add	r3, ip
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	4333      	orrs	r3, r6
 80021f0:	07e4      	lsls	r4, r4, #31
 80021f2:	4323      	orrs	r3, r4
 80021f4:	0028      	movs	r0, r5
 80021f6:	0019      	movs	r1, r3
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <__aeabi_f2d+0x5c>
 80021fe:	2d00      	cmp	r5, #0
 8002200:	d01b      	beq.n	800223a <__aeabi_f2d+0x6e>
 8002202:	0028      	movs	r0, r5
 8002204:	f000 f8b2 	bl	800236c <__clzsi2>
 8002208:	280a      	cmp	r0, #10
 800220a:	dc1c      	bgt.n	8002246 <__aeabi_f2d+0x7a>
 800220c:	230b      	movs	r3, #11
 800220e:	002a      	movs	r2, r5
 8002210:	1a1b      	subs	r3, r3, r0
 8002212:	40da      	lsrs	r2, r3
 8002214:	0003      	movs	r3, r0
 8002216:	3315      	adds	r3, #21
 8002218:	409d      	lsls	r5, r3
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <__aeabi_f2d+0x88>)
 800221c:	0312      	lsls	r2, r2, #12
 800221e:	1a1b      	subs	r3, r3, r0
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	0b16      	lsrs	r6, r2, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e7e1      	b.n	80021ec <__aeabi_f2d+0x20>
 8002228:	2d00      	cmp	r5, #0
 800222a:	d009      	beq.n	8002240 <__aeabi_f2d+0x74>
 800222c:	0b32      	lsrs	r2, r6, #12
 800222e:	2680      	movs	r6, #128	; 0x80
 8002230:	0336      	lsls	r6, r6, #12
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <__aeabi_f2d+0x8c>)
 8002234:	076d      	lsls	r5, r5, #29
 8002236:	4316      	orrs	r6, r2
 8002238:	e7d8      	b.n	80021ec <__aeabi_f2d+0x20>
 800223a:	2300      	movs	r3, #0
 800223c:	2600      	movs	r6, #0
 800223e:	e7d5      	b.n	80021ec <__aeabi_f2d+0x20>
 8002240:	2600      	movs	r6, #0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <__aeabi_f2d+0x8c>)
 8002244:	e7d2      	b.n	80021ec <__aeabi_f2d+0x20>
 8002246:	0003      	movs	r3, r0
 8002248:	002a      	movs	r2, r5
 800224a:	3b0b      	subs	r3, #11
 800224c:	409a      	lsls	r2, r3
 800224e:	2500      	movs	r5, #0
 8002250:	e7e3      	b.n	800221a <__aeabi_f2d+0x4e>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	00000389 	.word	0x00000389
 8002258:	000007ff 	.word	0x000007ff

0800225c <__aeabi_d2f>:
 800225c:	0002      	movs	r2, r0
 800225e:	004b      	lsls	r3, r1, #1
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	0308      	lsls	r0, r1, #12
 8002264:	0d5b      	lsrs	r3, r3, #21
 8002266:	4e3d      	ldr	r6, [pc, #244]	; (800235c <__aeabi_d2f+0x100>)
 8002268:	0fcc      	lsrs	r4, r1, #31
 800226a:	0a40      	lsrs	r0, r0, #9
 800226c:	0f51      	lsrs	r1, r2, #29
 800226e:	1c5f      	adds	r7, r3, #1
 8002270:	4308      	orrs	r0, r1
 8002272:	00d5      	lsls	r5, r2, #3
 8002274:	4237      	tst	r7, r6
 8002276:	d00a      	beq.n	800228e <__aeabi_d2f+0x32>
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <__aeabi_d2f+0x104>)
 800227a:	185e      	adds	r6, r3, r1
 800227c:	2efe      	cmp	r6, #254	; 0xfe
 800227e:	dd16      	ble.n	80022ae <__aeabi_d2f+0x52>
 8002280:	23ff      	movs	r3, #255	; 0xff
 8002282:	2100      	movs	r1, #0
 8002284:	05db      	lsls	r3, r3, #23
 8002286:	430b      	orrs	r3, r1
 8002288:	07e0      	lsls	r0, r4, #31
 800228a:	4318      	orrs	r0, r3
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <__aeabi_d2f+0x44>
 8002292:	4328      	orrs	r0, r5
 8002294:	d027      	beq.n	80022e6 <__aeabi_d2f+0x8a>
 8002296:	2105      	movs	r1, #5
 8002298:	0189      	lsls	r1, r1, #6
 800229a:	0a49      	lsrs	r1, r1, #9
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e7f1      	b.n	8002284 <__aeabi_d2f+0x28>
 80022a0:	4305      	orrs	r5, r0
 80022a2:	d0ed      	beq.n	8002280 <__aeabi_d2f+0x24>
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	03c9      	lsls	r1, r1, #15
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	4301      	orrs	r1, r0
 80022ac:	e7ea      	b.n	8002284 <__aeabi_d2f+0x28>
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	dd1c      	ble.n	80022ec <__aeabi_d2f+0x90>
 80022b2:	0192      	lsls	r2, r2, #6
 80022b4:	0011      	movs	r1, r2
 80022b6:	1e4a      	subs	r2, r1, #1
 80022b8:	4191      	sbcs	r1, r2
 80022ba:	00c0      	lsls	r0, r0, #3
 80022bc:	0f6d      	lsrs	r5, r5, #29
 80022be:	4301      	orrs	r1, r0
 80022c0:	4329      	orrs	r1, r5
 80022c2:	074b      	lsls	r3, r1, #29
 80022c4:	d048      	beq.n	8002358 <__aeabi_d2f+0xfc>
 80022c6:	230f      	movs	r3, #15
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d000      	beq.n	80022d0 <__aeabi_d2f+0x74>
 80022ce:	3104      	adds	r1, #4
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	04db      	lsls	r3, r3, #19
 80022d4:	400b      	ands	r3, r1
 80022d6:	d03f      	beq.n	8002358 <__aeabi_d2f+0xfc>
 80022d8:	1c72      	adds	r2, r6, #1
 80022da:	2efe      	cmp	r6, #254	; 0xfe
 80022dc:	d0d0      	beq.n	8002280 <__aeabi_d2f+0x24>
 80022de:	0189      	lsls	r1, r1, #6
 80022e0:	0a49      	lsrs	r1, r1, #9
 80022e2:	b2d3      	uxtb	r3, r2
 80022e4:	e7ce      	b.n	8002284 <__aeabi_d2f+0x28>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	e7cb      	b.n	8002284 <__aeabi_d2f+0x28>
 80022ec:	0032      	movs	r2, r6
 80022ee:	3217      	adds	r2, #23
 80022f0:	db22      	blt.n	8002338 <__aeabi_d2f+0xdc>
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	221e      	movs	r2, #30
 80022f6:	0409      	lsls	r1, r1, #16
 80022f8:	4308      	orrs	r0, r1
 80022fa:	1b92      	subs	r2, r2, r6
 80022fc:	2a1f      	cmp	r2, #31
 80022fe:	dd1d      	ble.n	800233c <__aeabi_d2f+0xe0>
 8002300:	2102      	movs	r1, #2
 8002302:	4249      	negs	r1, r1
 8002304:	1b8e      	subs	r6, r1, r6
 8002306:	0001      	movs	r1, r0
 8002308:	40f1      	lsrs	r1, r6
 800230a:	000e      	movs	r6, r1
 800230c:	2a20      	cmp	r2, #32
 800230e:	d004      	beq.n	800231a <__aeabi_d2f+0xbe>
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <__aeabi_d2f+0x108>)
 8002312:	4694      	mov	ip, r2
 8002314:	4463      	add	r3, ip
 8002316:	4098      	lsls	r0, r3
 8002318:	4305      	orrs	r5, r0
 800231a:	0029      	movs	r1, r5
 800231c:	1e4d      	subs	r5, r1, #1
 800231e:	41a9      	sbcs	r1, r5
 8002320:	4331      	orrs	r1, r6
 8002322:	2600      	movs	r6, #0
 8002324:	074b      	lsls	r3, r1, #29
 8002326:	d1ce      	bne.n	80022c6 <__aeabi_d2f+0x6a>
 8002328:	2080      	movs	r0, #128	; 0x80
 800232a:	000b      	movs	r3, r1
 800232c:	04c0      	lsls	r0, r0, #19
 800232e:	2201      	movs	r2, #1
 8002330:	4003      	ands	r3, r0
 8002332:	4201      	tst	r1, r0
 8002334:	d1d3      	bne.n	80022de <__aeabi_d2f+0x82>
 8002336:	e7af      	b.n	8002298 <__aeabi_d2f+0x3c>
 8002338:	2300      	movs	r3, #0
 800233a:	e7ac      	b.n	8002296 <__aeabi_d2f+0x3a>
 800233c:	490a      	ldr	r1, [pc, #40]	; (8002368 <__aeabi_d2f+0x10c>)
 800233e:	468c      	mov	ip, r1
 8002340:	0029      	movs	r1, r5
 8002342:	4463      	add	r3, ip
 8002344:	40d1      	lsrs	r1, r2
 8002346:	409d      	lsls	r5, r3
 8002348:	000a      	movs	r2, r1
 800234a:	0029      	movs	r1, r5
 800234c:	4098      	lsls	r0, r3
 800234e:	1e4d      	subs	r5, r1, #1
 8002350:	41a9      	sbcs	r1, r5
 8002352:	4301      	orrs	r1, r0
 8002354:	4311      	orrs	r1, r2
 8002356:	e7e4      	b.n	8002322 <__aeabi_d2f+0xc6>
 8002358:	0033      	movs	r3, r6
 800235a:	e79d      	b.n	8002298 <__aeabi_d2f+0x3c>
 800235c:	000007fe 	.word	0x000007fe
 8002360:	fffffc80 	.word	0xfffffc80
 8002364:	fffffca2 	.word	0xfffffca2
 8002368:	fffffc82 	.word	0xfffffc82

0800236c <__clzsi2>:
 800236c:	211c      	movs	r1, #28
 800236e:	2301      	movs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0xe>
 8002376:	0c00      	lsrs	r0, r0, #16
 8002378:	3910      	subs	r1, #16
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	4298      	cmp	r0, r3
 800237e:	d301      	bcc.n	8002384 <__clzsi2+0x18>
 8002380:	0a00      	lsrs	r0, r0, #8
 8002382:	3908      	subs	r1, #8
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	4298      	cmp	r0, r3
 8002388:	d301      	bcc.n	800238e <__clzsi2+0x22>
 800238a:	0900      	lsrs	r0, r0, #4
 800238c:	3904      	subs	r1, #4
 800238e:	a202      	add	r2, pc, #8	; (adr r2, 8002398 <__clzsi2+0x2c>)
 8002390:	5c10      	ldrb	r0, [r2, r0]
 8002392:	1840      	adds	r0, r0, r1
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	02020304 	.word	0x02020304
 800239c:	01010101 	.word	0x01010101
	...

080023a8 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cfb      	adds	r3, r7, #3
 80023b4:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1cfa      	adds	r2, r7, #3
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set LOW
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4818      	ldr	r0, [pc, #96]	; (800243c <motor_wheel_init+0x94>)
 80023dc:	2201      	movs	r2, #1
 80023de:	0019      	movs	r1, r3
 80023e0:	f002 fb82 	bl	8004ae8 <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <motor_wheel_init+0x94>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	2101      	movs	r1, #1
 80023f2:	0018      	movs	r0, r3
 80023f4:	f002 fb78 	bl	8004ae8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
	}
}
 80023f8:	e01b      	b.n	8002432 <motor_wheel_init+0x8a>
	else if (str->id == 2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d106      	bne.n	8002410 <motor_wheel_init+0x68>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <motor_wheel_init+0x94>)
 8002404:	2200      	movs	r2, #0
 8002406:	2101      	movs	r1, #1
 8002408:	0018      	movs	r0, r3
 800240a:	f002 fb6d 	bl	8004ae8 <HAL_GPIO_WritePin>
}
 800240e:	e010      	b.n	8002432 <motor_wheel_init+0x8a>
	else if (str->id == 3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d106      	bne.n	8002426 <motor_wheel_init+0x7e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <motor_wheel_init+0x94>)
 800241a:	2201      	movs	r2, #1
 800241c:	2101      	movs	r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f002 fb62 	bl	8004ae8 <HAL_GPIO_WritePin>
}
 8002424:	e005      	b.n	8002432 <motor_wheel_init+0x8a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <motor_wheel_init+0x94>)
 8002428:	2200      	movs	r2, #0
 800242a:	2102      	movs	r1, #2
 800242c:	0018      	movs	r0, r3
 800242e:	f002 fb5b 	bl	8004ae8 <HAL_GPIO_WritePin>
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	48000800 	.word	0x48000800

08002440 <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, uint8_t LPU) // PWM Velocity Control
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	701a      	strb	r2, [r3, #0]
	uint8_t throttle = LPU;//fabs(LPU) * 100;
 800244e:	2117      	movs	r1, #23
 8002450:	187b      	adds	r3, r7, r1
 8002452:	1dfa      	adds	r2, r7, #7
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	701a      	strb	r2, [r3, #0]
	if (str->id == 1)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <motorPWM_pulse+0x2c>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	187a      	adds	r2, r7, r1
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
	else if (str->id == 3)
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
	else if (str->id == 4)
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};
 800246a:	e01f      	b.n	80024ac <motorPWM_pulse+0x6c>
	else if (str->id == 2)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d106      	bne.n	8002482 <motorPWM_pulse+0x42>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2217      	movs	r2, #23
 800247a:	18ba      	adds	r2, r7, r2
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
};
 8002480:	e014      	b.n	80024ac <motorPWM_pulse+0x6c>
	else if (str->id == 3)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d106      	bne.n	8002498 <motorPWM_pulse+0x58>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2217      	movs	r2, #23
 8002490:	18ba      	adds	r2, r7, r2
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c
};
 8002496:	e009      	b.n	80024ac <motorPWM_pulse+0x6c>
	else if (str->id == 4)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d105      	bne.n	80024ac <motorPWM_pulse+0x6c>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2217      	movs	r2, #23
 80024a6:	18ba      	adds	r2, r7, r2
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
};
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b006      	add	sp, #24
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	000a      	movs	r2, r1
 80024be:	1cfb      	adds	r3, r7, #3
 80024c0:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1cfa      	adds	r2, r7, #3
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	789b      	ldrb	r3, [r3, #2]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10a      	bne.n	80024e8 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	480a      	ldr	r0, [pc, #40]	; (8002500 <motor_break+0x4c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	0019      	movs	r1, r3
 80024dc:	f002 fb04 	bl	8004ae8 <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 80024e6:	e006      	b.n	80024f6 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <motor_break+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	0019      	movs	r1, r3
 80024f2:	f002 faf9 	bl	8004ae8 <HAL_GPIO_WritePin>
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	48000800 	.word	0x48000800

08002504 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	0008      	movs	r0, r1
 800250e:	0011      	movs	r1, r2
 8002510:	1cfb      	adds	r3, r7, #3
 8002512:	1c02      	adds	r2, r0, #0
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	1cbb      	adds	r3, r7, #2
 8002518:	1c0a      	adds	r2, r1, #0
 800251a:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1cfa      	adds	r2, r7, #3
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1cba      	adds	r2, r7, #2
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	705a      	strb	r2, [r3, #1]
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <linear_motor_set_target>:


void linear_motor_set_target(Linear_Motor *str, int32_t target)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	if (target > POSITION_MAX)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <linear_motor_set_target+0x34>)
 8002556:	4293      	cmp	r3, r2
 8002558:	dd02      	ble.n	8002560 <linear_motor_set_target+0x18>
	{
		target = POSITION_MAX;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <linear_motor_set_target+0x34>)
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	e005      	b.n	800256c <linear_motor_set_target+0x24>
	}
	else if (target < POSITION_MIN)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <linear_motor_set_target+0x38>)
 8002564:	4293      	cmp	r3, r2
 8002566:	da01      	bge.n	800256c <linear_motor_set_target+0x24>
	{
		target = POSITION_MIN;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <linear_motor_set_target+0x38>)
 800256a:	603b      	str	r3, [r7, #0]
	}
	str->target_position = target;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	609a      	str	r2, [r3, #8]
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	0000280a 	.word	0x0000280a
 8002580:	ffffd7f6 	.word	0xffffd7f6

08002584 <linear_motor_pulse>:
  * @param  timer_handle timer handle associated with linear motors
  * @param  counter_handle counter pointer to track number of pulses sent via interupt callback
  * @retval if(errors_occurred)
  */
uint8_t linear_motor_pulse(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	if (str->id == 1 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d107      	bne.n	80025a8 <linear_motor_pulse+0x24>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	223e      	movs	r2, #62	; 0x3e
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d101      	bne.n	80025a8 <linear_motor_pulse+0x24>
	{
		return 1; // error occurred
 80025a4:	2301      	movs	r3, #1
 80025a6:	e075      	b.n	8002694 <linear_motor_pulse+0x110>
	}
	else if (str->id == 2 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d107      	bne.n	80025c0 <linear_motor_pulse+0x3c>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	5c9b      	ldrb	r3, [r3, r2]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d101      	bne.n	80025c0 <linear_motor_pulse+0x3c>
	{
		return 1; // error occurred
 80025bc:	2301      	movs	r3, #1
 80025be:	e069      	b.n	8002694 <linear_motor_pulse+0x110>
	}
	uint32_t shift = abs(str->target_position - str->current_position);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	17da      	asrs	r2, r3, #31
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	4053      	eors	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
	if (shift == 0)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <linear_motor_pulse+0x58>
	{
		return 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	e05b      	b.n	8002694 <linear_motor_pulse+0x110>
	}
	if (str->target_position - str->current_position > 0)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	dd03      	ble.n	80025f2 <linear_motor_pulse+0x6e>
	{
		str->dir_q = 1;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	705a      	strb	r2, [r3, #1]
 80025f0:	e002      	b.n	80025f8 <linear_motor_pulse+0x74>
	}
	else
	{
		str->dir_q = 0;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	705a      	strb	r2, [r3, #1]
	}
	if (str->id == 1)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d120      	bne.n	8002642 <linear_motor_pulse+0xbe>
	{
		*counter_handle = shift;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
		// TODO: SET DIRECTION GPIO
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	001a      	movs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	17da      	asrs	r2, r3, #31
 8002614:	189b      	adds	r3, r3, r2
 8002616:	4053      	eors	r3, r2
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <linear_motor_pulse+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <linear_motor_pulse+0x118>)
 800261e:	2201      	movs	r2, #1
 8002620:	2104      	movs	r1, #4
 8002622:	0018      	movs	r0, r3
 8002624:	f002 fa60 	bl	8004ae8 <HAL_GPIO_WritePin>
 8002628:	e005      	b.n	8002636 <linear_motor_pulse+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <linear_motor_pulse+0x118>)
 800262c:	2200      	movs	r2, #0
 800262e:	2104      	movs	r1, #4
 8002630:	0018      	movs	r0, r3
 8002632:	f002 fa59 	bl	8004ae8 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2100      	movs	r1, #0
 800263a:	0018      	movs	r0, r3
 800263c:	f003 f83e 	bl	80056bc <HAL_TIM_PWM_Start_IT>
 8002640:	e023      	b.n	800268a <linear_motor_pulse+0x106>
	}
	else if (str->id == 2)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d11f      	bne.n	800268a <linear_motor_pulse+0x106>
	{
		*counter_handle = shift;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	001a      	movs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	789b      	ldrb	r3, [r3, #2]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	17da      	asrs	r2, r3, #31
 800265e:	189b      	adds	r3, r3, r2
 8002660:	4053      	eors	r3, r2
 8002662:	2b01      	cmp	r3, #1
 8002664:	d106      	bne.n	8002674 <linear_motor_pulse+0xf0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <linear_motor_pulse+0x118>)
 8002668:	2201      	movs	r2, #1
 800266a:	2108      	movs	r1, #8
 800266c:	0018      	movs	r0, r3
 800266e:	f002 fa3b 	bl	8004ae8 <HAL_GPIO_WritePin>
 8002672:	e005      	b.n	8002680 <linear_motor_pulse+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <linear_motor_pulse+0x118>)
 8002676:	2200      	movs	r2, #0
 8002678:	2108      	movs	r1, #8
 800267a:	0018      	movs	r0, r3
 800267c:	f002 fa34 	bl	8004ae8 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2104      	movs	r1, #4
 8002684:	0018      	movs	r0, r3
 8002686:	f003 f819 	bl	80056bc <HAL_TIM_PWM_Start_IT>
	}
	str->current_position = str->target_position;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]
	return 0;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b006      	add	sp, #24
 800269a:	bd80      	pop	{r7, pc}
 800269c:	48000800 	.word	0x48000800

080026a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	b0bb      	sub	sp, #236	; 0xec
 80026a4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026a6:	f001 fd33 	bl	8004110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026aa:	f000 fbdb 	bl	8002e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ae:	f000 fe75 	bl	800339c <MX_GPIO_Init>
  MX_TIM3_Init();
 80026b2:	f000 fceb 	bl	800308c <MX_TIM3_Init>
  MX_TIM1_Init();
 80026b6:	f000 fc15 	bl	8002ee4 <MX_TIM1_Init>
  MX_TIM15_Init();
 80026ba:	f000 fd63 	bl	8003184 <MX_TIM15_Init>
  MX_DMA_Init();
 80026be:	f000 fe4f 	bl	8003360 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026c2:	f000 fe1d 	bl	8003300 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80026c6:	4b6b      	ldr	r3, [pc, #428]	; (8002874 <main+0x1d4>)
 80026c8:	2100      	movs	r1, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f003 fa04 	bl	8005ad8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80026d0:	4b68      	ldr	r3, [pc, #416]	; (8002874 <main+0x1d4>)
 80026d2:	2104      	movs	r1, #4
 80026d4:	0018      	movs	r0, r3
 80026d6:	f003 f9ff 	bl	8005ad8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80026da:	4b66      	ldr	r3, [pc, #408]	; (8002874 <main+0x1d4>)
 80026dc:	2108      	movs	r1, #8
 80026de:	0018      	movs	r0, r3
 80026e0:	f003 f9fa 	bl	8005ad8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80026e4:	4b63      	ldr	r3, [pc, #396]	; (8002874 <main+0x1d4>)
 80026e6:	210c      	movs	r1, #12
 80026e8:	0018      	movs	r0, r3
 80026ea:	f003 f9f5 	bl	8005ad8 <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 80026ee:	2354      	movs	r3, #84	; 0x54
 80026f0:	2210      	movs	r2, #16
 80026f2:	4694      	mov	ip, r2
 80026f4:	44bc      	add	ip, r7
 80026f6:	4463      	add	r3, ip
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	3304      	adds	r3, #4
 80026fe:	223d      	movs	r2, #61	; 0x3d
 8002700:	2100      	movs	r1, #0
 8002702:	0018      	movs	r0, r3
 8002704:	f005 fe84 	bl	8008410 <memset>
  float speed1 = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	22bc      	movs	r2, #188	; 0xbc
 800270c:	2110      	movs	r1, #16
 800270e:	468c      	mov	ip, r1
 8002710:	44bc      	add	ip, r7
 8002712:	4462      	add	r2, ip
 8002714:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	22b8      	movs	r2, #184	; 0xb8
 800271a:	2110      	movs	r1, #16
 800271c:	468c      	mov	ip, r1
 800271e:	44bc      	add	ip, r7
 8002720:	4462      	add	r2, ip
 8002722:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	22b4      	movs	r2, #180	; 0xb4
 8002728:	2110      	movs	r1, #16
 800272a:	468c      	mov	ip, r1
 800272c:	44bc      	add	ip, r7
 800272e:	4462      	add	r2, ip
 8002730:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	22b0      	movs	r2, #176	; 0xb0
 8002736:	2110      	movs	r1, #16
 8002738:	468c      	mov	ip, r1
 800273a:	44bc      	add	ip, r7
 800273c:	4462      	add	r2, ip
 800273e:	6013      	str	r3, [r2, #0]
  uint8_t cycleCounter = 0;
 8002740:	23af      	movs	r3, #175	; 0xaf
 8002742:	2210      	movs	r2, #16
 8002744:	4694      	mov	ip, r2
 8002746:	44bc      	add	ip, r7
 8002748:	4463      	add	r3, ip
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 800274e:	2300      	movs	r3, #0
 8002750:	22a8      	movs	r2, #168	; 0xa8
 8002752:	2110      	movs	r1, #16
 8002754:	468c      	mov	ip, r1
 8002756:	44bc      	add	ip, r7
 8002758:	4462      	add	r2, ip
 800275a:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 800275c:	2314      	movs	r3, #20
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	0018      	movs	r0, r3
 8002762:	2350      	movs	r3, #80	; 0x50
 8002764:	001a      	movs	r2, r3
 8002766:	2100      	movs	r1, #0
 8002768:	f005 fe52 	bl	8008410 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800276c:	4b42      	ldr	r3, [pc, #264]	; (8002878 <main+0x1d8>)
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f002 fef1 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <main+0x1d8>)
 8002778:	2104      	movs	r1, #4
 800277a:	0018      	movs	r0, r3
 800277c:	f002 feec 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <main+0x1d8>)
 8002782:	2108      	movs	r1, #8
 8002784:	0018      	movs	r0, r3
 8002786:	f002 fee7 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <main+0x1d8>)
 800278c:	210c      	movs	r1, #12
 800278e:	0018      	movs	r0, r3
 8002790:	f002 fee2 	bl	8005558 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <main+0x1dc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2202      	movs	r2, #2
 800279a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 800279c:	4b37      	ldr	r3, [pc, #220]	; (800287c <main+0x1dc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2202      	movs	r2, #2
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38

  // SETUP
  for (int i = 0; i < 4; i++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	22a4      	movs	r2, #164	; 0xa4
 80027a8:	2110      	movs	r1, #16
 80027aa:	468c      	mov	ip, r1
 80027ac:	44bc      	add	ip, r7
 80027ae:	4462      	add	r2, ip
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e039      	b.n	8002828 <main+0x188>
  {
	  pMW[i] = &MW[i];
 80027b4:	24a4      	movs	r4, #164	; 0xa4
 80027b6:	2510      	movs	r5, #16
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	191b      	adds	r3, r3, r4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	00da      	lsls	r2, r3, #3
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <main+0x1e0>)
 80027c2:	18d1      	adds	r1, r2, r3
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <main+0x1e4>)
 80027c6:	197a      	adds	r2, r7, r5
 80027c8:	1912      	adds	r2, r2, r4
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <main+0x1e4>)
 80027d2:	197a      	adds	r2, r7, r5
 80027d4:	1912      	adds	r2, r2, r4
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	58d2      	ldr	r2, [r2, r3]
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	191b      	adds	r3, r3, r4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	0019      	movs	r1, r3
 80027ea:	0010      	movs	r0, r2
 80027ec:	f7ff fddc 	bl	80023a8 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <main+0x1e4>)
 80027f2:	197a      	adds	r2, r7, r5
 80027f4:	1912      	adds	r2, r2, r4
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	58d1      	ldr	r1, [r2, r3]
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <main+0x1d8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff fe1d 	bl	8002440 <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 8002806:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <main+0x1e4>)
 8002808:	197a      	adds	r2, r7, r5
 800280a:	1912      	adds	r2, r2, r4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	58d3      	ldr	r3, [r2, r3]
 8002812:	2100      	movs	r1, #0
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff fe4d 	bl	80024b4 <motor_break>
  for (int i = 0; i < 4; i++)
 800281a:	197b      	adds	r3, r7, r5
 800281c:	191b      	adds	r3, r3, r4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	197a      	adds	r2, r7, r5
 8002824:	1912      	adds	r2, r2, r4
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	23a4      	movs	r3, #164	; 0xa4
 800282a:	2210      	movs	r2, #16
 800282c:	4694      	mov	ip, r2
 800282e:	44bc      	add	ip, r7
 8002830:	4463      	add	r3, ip
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	ddbd      	ble.n	80027b4 <main+0x114>
  }


  // basicly - clear all uart queues
  HAL_UART_Receive_DMA(&huart2, &UART2_rxBuffer, 1);
 8002838:	4913      	ldr	r1, [pc, #76]	; (8002888 <main+0x1e8>)
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <main+0x1ec>)
 800283c:	2201      	movs	r2, #1
 800283e:	0018      	movs	r0, r3
 8002840:	f004 fca8 	bl	8007194 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, MSG, strlen(MSG), 50);
 8002844:	2454      	movs	r4, #84	; 0x54
 8002846:	2510      	movs	r5, #16
 8002848:	197b      	adds	r3, r7, r5
 800284a:	191b      	adds	r3, r3, r4
 800284c:	0018      	movs	r0, r3
 800284e:	f7fd fc65 	bl	800011c <strlen>
 8002852:	0003      	movs	r3, r0
 8002854:	b29a      	uxth	r2, r3
 8002856:	197b      	adds	r3, r7, r5
 8002858:	1919      	adds	r1, r3, r4
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <main+0x1ec>)
 800285c:	2332      	movs	r3, #50	; 0x32
 800285e:	f004 fb4d 	bl	8006efc <HAL_UART_Transmit>


  for (int i = 0; i < 2; i++)
 8002862:	2300      	movs	r3, #0
 8002864:	22a0      	movs	r2, #160	; 0xa0
 8002866:	2110      	movs	r1, #16
 8002868:	468c      	mov	ip, r1
 800286a:	44bc      	add	ip, r7
 800286c:	4462      	add	r2, ip
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e03e      	b.n	80028f0 <main+0x250>
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	2000040c 	.word	0x2000040c
 8002878:	200004c8 	.word	0x200004c8
 800287c:	200003c4 	.word	0x200003c4
 8002880:	200004a8 	.word	0x200004a8
 8002884:	20000498 	.word	0x20000498
 8002888:	2000028c 	.word	0x2000028c
 800288c:	20000510 	.word	0x20000510
  {
	  pLM[i] = &LM[i];
 8002890:	20a0      	movs	r0, #160	; 0xa0
 8002892:	2510      	movs	r5, #16
 8002894:	197b      	adds	r3, r7, r5
 8002896:	181b      	adds	r3, r3, r0
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	0013      	movs	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4ae7      	ldr	r2, [pc, #924]	; (8002c40 <main+0x5a0>)
 80028a4:	1899      	adds	r1, r3, r2
 80028a6:	4be7      	ldr	r3, [pc, #924]	; (8002c44 <main+0x5a4>)
 80028a8:	197a      	adds	r2, r7, r5
 80028aa:	1812      	adds	r2, r2, r0
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	50d1      	str	r1, [r2, r3]
	  linear_motor_init(pLM[i], i+1, i); // init structure
 80028b2:	4be4      	ldr	r3, [pc, #912]	; (8002c44 <main+0x5a4>)
 80028b4:	0001      	movs	r1, r0
 80028b6:	197a      	adds	r2, r7, r5
 80028b8:	1852      	adds	r2, r2, r1
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	58d0      	ldr	r0, [r2, r3]
 80028c0:	000a      	movs	r2, r1
 80028c2:	197b      	adds	r3, r7, r5
 80028c4:	189b      	adds	r3, r3, r2
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	0014      	movs	r4, r2
 80028d0:	2110      	movs	r1, #16
 80028d2:	468c      	mov	ip, r1
 80028d4:	44bc      	add	ip, r7
 80028d6:	4462      	add	r2, ip
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	f7ff fe11 	bl	8002504 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 80028e2:	197b      	adds	r3, r7, r5
 80028e4:	191b      	adds	r3, r3, r4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	197a      	adds	r2, r7, r5
 80028ec:	1912      	adds	r2, r2, r4
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	23a0      	movs	r3, #160	; 0xa0
 80028f2:	2210      	movs	r2, #16
 80028f4:	4694      	mov	ip, r2
 80028f6:	44bc      	add	ip, r7
 80028f8:	4463      	add	r3, ip
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	ddc7      	ble.n	8002890 <main+0x1f0>
  }

  // No incoming processing should be done before it is set
  Init_Done = 1;
 8002900:	4bd1      	ldr	r3, [pc, #836]	; (8002c48 <main+0x5a8>)
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 8002906:	21af      	movs	r1, #175	; 0xaf
 8002908:	2010      	movs	r0, #16
 800290a:	183b      	adds	r3, r7, r0
 800290c:	185b      	adds	r3, r3, r1
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	183b      	adds	r3, r7, r0
 8002912:	185b      	adds	r3, r3, r1
 8002914:	3201      	adds	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 8002918:	183b      	adds	r3, r7, r0
 800291a:	185b      	adds	r3, r3, r1
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2bff      	cmp	r3, #255	; 0xff
 8002920:	d103      	bne.n	800292a <main+0x28a>
	{
		cycleCounter = 1;
 8002922:	183b      	adds	r3, r7, r0
 8002924:	185b      	adds	r3, r3, r1
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 800292a:	2300      	movs	r3, #0
 800292c:	24bc      	movs	r4, #188	; 0xbc
 800292e:	2510      	movs	r5, #16
 8002930:	197a      	adds	r2, r7, r5
 8002932:	1912      	adds	r2, r2, r4
 8002934:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 8002936:	2300      	movs	r3, #0
 8002938:	22b8      	movs	r2, #184	; 0xb8
 800293a:	2110      	movs	r1, #16
 800293c:	468c      	mov	ip, r1
 800293e:	44bc      	add	ip, r7
 8002940:	4462      	add	r2, ip
 8002942:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 8002944:	2300      	movs	r3, #0
 8002946:	22b4      	movs	r2, #180	; 0xb4
 8002948:	2110      	movs	r1, #16
 800294a:	468c      	mov	ip, r1
 800294c:	44bc      	add	ip, r7
 800294e:	4462      	add	r2, ip
 8002950:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 8002952:	2300      	movs	r3, #0
 8002954:	22b0      	movs	r2, #176	; 0xb0
 8002956:	2110      	movs	r1, #16
 8002958:	468c      	mov	ip, r1
 800295a:	44bc      	add	ip, r7
 800295c:	4462      	add	r2, ip
 800295e:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 8002960:	4bba      	ldr	r3, [pc, #744]	; (8002c4c <main+0x5ac>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4aba      	ldr	r2, [pc, #744]	; (8002c50 <main+0x5b0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d818      	bhi.n	800299c <main+0x2fc>
 800296a:	4bb8      	ldr	r3, [pc, #736]	; (8002c4c <main+0x5ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <main+0x2fc>
		 {
			 speed1 = 13850.4 / T31pulseWidth;
 8002972:	4bb6      	ldr	r3, [pc, #728]	; (8002c4c <main+0x5ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0018      	movs	r0, r3
 8002978:	f7ff fc02 	bl	8002180 <__aeabi_ui2d>
 800297c:	0002      	movs	r2, r0
 800297e:	000b      	movs	r3, r1
 8002980:	48b4      	ldr	r0, [pc, #720]	; (8002c54 <main+0x5b4>)
 8002982:	49b5      	ldr	r1, [pc, #724]	; (8002c58 <main+0x5b8>)
 8002984:	f7fe f974 	bl	8000c70 <__aeabi_ddiv>
 8002988:	0002      	movs	r2, r0
 800298a:	000b      	movs	r3, r1
 800298c:	0010      	movs	r0, r2
 800298e:	0019      	movs	r1, r3
 8002990:	f7ff fc64 	bl	800225c <__aeabi_d2f>
 8002994:	1c03      	adds	r3, r0, #0
 8002996:	197a      	adds	r2, r7, r5
 8002998:	1912      	adds	r2, r2, r4
 800299a:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 800299c:	4baf      	ldr	r3, [pc, #700]	; (8002c5c <main+0x5bc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4aab      	ldr	r2, [pc, #684]	; (8002c50 <main+0x5b0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d81b      	bhi.n	80029de <main+0x33e>
 80029a6:	4bad      	ldr	r3, [pc, #692]	; (8002c5c <main+0x5bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d017      	beq.n	80029de <main+0x33e>
		 {
			 speed2 = 13850.4 / T32pulseWidth;
 80029ae:	4bab      	ldr	r3, [pc, #684]	; (8002c5c <main+0x5bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7ff fbe4 	bl	8002180 <__aeabi_ui2d>
 80029b8:	0002      	movs	r2, r0
 80029ba:	000b      	movs	r3, r1
 80029bc:	48a5      	ldr	r0, [pc, #660]	; (8002c54 <main+0x5b4>)
 80029be:	49a6      	ldr	r1, [pc, #664]	; (8002c58 <main+0x5b8>)
 80029c0:	f7fe f956 	bl	8000c70 <__aeabi_ddiv>
 80029c4:	0002      	movs	r2, r0
 80029c6:	000b      	movs	r3, r1
 80029c8:	0010      	movs	r0, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	f7ff fc46 	bl	800225c <__aeabi_d2f>
 80029d0:	1c03      	adds	r3, r0, #0
 80029d2:	22b8      	movs	r2, #184	; 0xb8
 80029d4:	2110      	movs	r1, #16
 80029d6:	468c      	mov	ip, r1
 80029d8:	44bc      	add	ip, r7
 80029da:	4462      	add	r2, ip
 80029dc:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 80029de:	4ba0      	ldr	r3, [pc, #640]	; (8002c60 <main+0x5c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a9b      	ldr	r2, [pc, #620]	; (8002c50 <main+0x5b0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d81b      	bhi.n	8002a20 <main+0x380>
 80029e8:	4b9d      	ldr	r3, [pc, #628]	; (8002c60 <main+0x5c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d017      	beq.n	8002a20 <main+0x380>
		 {
			 speed3 = 13850.4 / T33pulseWidth;
 80029f0:	4b9b      	ldr	r3, [pc, #620]	; (8002c60 <main+0x5c0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff fbc3 	bl	8002180 <__aeabi_ui2d>
 80029fa:	0002      	movs	r2, r0
 80029fc:	000b      	movs	r3, r1
 80029fe:	4895      	ldr	r0, [pc, #596]	; (8002c54 <main+0x5b4>)
 8002a00:	4995      	ldr	r1, [pc, #596]	; (8002c58 <main+0x5b8>)
 8002a02:	f7fe f935 	bl	8000c70 <__aeabi_ddiv>
 8002a06:	0002      	movs	r2, r0
 8002a08:	000b      	movs	r3, r1
 8002a0a:	0010      	movs	r0, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	f7ff fc25 	bl	800225c <__aeabi_d2f>
 8002a12:	1c03      	adds	r3, r0, #0
 8002a14:	22b4      	movs	r2, #180	; 0xb4
 8002a16:	2110      	movs	r1, #16
 8002a18:	468c      	mov	ip, r1
 8002a1a:	44bc      	add	ip, r7
 8002a1c:	4462      	add	r2, ip
 8002a1e:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 8002a20:	4b90      	ldr	r3, [pc, #576]	; (8002c64 <main+0x5c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <main+0x5b0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d81b      	bhi.n	8002a62 <main+0x3c2>
 8002a2a:	4b8e      	ldr	r3, [pc, #568]	; (8002c64 <main+0x5c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <main+0x3c2>
		 {
			 speed4 = 13850.4 / T34pulseWidth;
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <main+0x5c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff fba2 	bl	8002180 <__aeabi_ui2d>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	000b      	movs	r3, r1
 8002a40:	4884      	ldr	r0, [pc, #528]	; (8002c54 <main+0x5b4>)
 8002a42:	4985      	ldr	r1, [pc, #532]	; (8002c58 <main+0x5b8>)
 8002a44:	f7fe f914 	bl	8000c70 <__aeabi_ddiv>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	000b      	movs	r3, r1
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	f7ff fc04 	bl	800225c <__aeabi_d2f>
 8002a54:	1c03      	adds	r3, r0, #0
 8002a56:	22b0      	movs	r2, #176	; 0xb0
 8002a58:	2110      	movs	r1, #16
 8002a5a:	468c      	mov	ip, r1
 8002a5c:	44bc      	add	ip, r7
 8002a5e:	4462      	add	r2, ip
 8002a60:	6013      	str	r3, [r2, #0]
		 }
		 memset(MSG, 0, sizeof(MSG));
 8002a62:	2654      	movs	r6, #84	; 0x54
 8002a64:	2010      	movs	r0, #16
 8002a66:	183a      	adds	r2, r7, r0
 8002a68:	1993      	adds	r3, r2, r6
 8002a6a:	2241      	movs	r2, #65	; 0x41
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f005 fcce 	bl	8008410 <memset>
		 sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f\n", speed1, speed2, speed3, speed4);
 8002a74:	23bc      	movs	r3, #188	; 0xbc
 8002a76:	2210      	movs	r2, #16
 8002a78:	4694      	mov	ip, r2
 8002a7a:	44bc      	add	ip, r7
 8002a7c:	4463      	add	r3, ip
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	f7ff fba4 	bl	80021cc <__aeabi_f2d>
 8002a84:	60b8      	str	r0, [r7, #8]
 8002a86:	60f9      	str	r1, [r7, #12]
 8002a88:	23b8      	movs	r3, #184	; 0xb8
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	f7ff fb9a 	bl	80021cc <__aeabi_f2d>
 8002a98:	0004      	movs	r4, r0
 8002a9a:	000d      	movs	r5, r1
 8002a9c:	23b4      	movs	r3, #180	; 0xb4
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	4694      	mov	ip, r2
 8002aa2:	44bc      	add	ip, r7
 8002aa4:	4463      	add	r3, ip
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	f7ff fb90 	bl	80021cc <__aeabi_f2d>
 8002aac:	6038      	str	r0, [r7, #0]
 8002aae:	6079      	str	r1, [r7, #4]
 8002ab0:	23b0      	movs	r3, #176	; 0xb0
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	4694      	mov	ip, r2
 8002ab6:	44bc      	add	ip, r7
 8002ab8:	4463      	add	r3, ip
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	f7ff fb86 	bl	80021cc <__aeabi_f2d>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	4968      	ldr	r1, [pc, #416]	; (8002c68 <main+0x5c8>)
 8002ac6:	2010      	movs	r0, #16
 8002ac8:	1838      	adds	r0, r7, r0
 8002aca:	1980      	adds	r0, r0, r6
 8002acc:	9204      	str	r2, [sp, #16]
 8002ace:	9305      	str	r3, [sp, #20]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	9202      	str	r2, [sp, #8]
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	9400      	str	r4, [sp, #0]
 8002ada:	9501      	str	r5, [sp, #4]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f006 fb24 	bl	800912c <siprintf>
		 //sprintf(MSG, "[enc] %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth);
		 UART_Send(MSG);
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	199b      	adds	r3, r3, r6
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fcbc 	bl	8003468 <UART_Send>
	 }

	 for (int i=0; i < 4; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	229c      	movs	r2, #156	; 0x9c
 8002af4:	2110      	movs	r1, #16
 8002af6:	468c      	mov	ip, r1
 8002af8:	44bc      	add	ip, r7
 8002afa:	4462      	add	r2, ip
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e187      	b.n	8002e10 <main+0x770>
	 {
		 sumVect = 0.0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	22a8      	movs	r2, #168	; 0xa8
 8002b04:	2110      	movs	r1, #16
 8002b06:	468c      	mov	ip, r1
 8002b08:	44bc      	add	ip, r7
 8002b0a:	4462      	add	r2, ip
 8002b0c:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2298      	movs	r2, #152	; 0x98
 8002b12:	2110      	movs	r1, #16
 8002b14:	468c      	mov	ip, r1
 8002b16:	44bc      	add	ip, r7
 8002b18:	4462      	add	r2, ip
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e043      	b.n	8002ba6 <main+0x506>
		 {
			 vect[i][j] = vect[i][j+1];
 8002b1e:	2498      	movs	r4, #152	; 0x98
 8002b20:	2610      	movs	r6, #16
 8002b22:	19bb      	adds	r3, r7, r6
 8002b24:	191b      	adds	r3, r3, r4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c58      	adds	r0, r3, #1
 8002b2a:	2314      	movs	r3, #20
 8002b2c:	18f9      	adds	r1, r7, r3
 8002b2e:	259c      	movs	r5, #156	; 0x9c
 8002b30:	19ba      	adds	r2, r7, r6
 8002b32:	1953      	adds	r3, r2, r5
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	0013      	movs	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	181b      	adds	r3, r3, r0
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	5858      	ldr	r0, [r3, r1]
 8002b42:	2314      	movs	r3, #20
 8002b44:	18f9      	adds	r1, r7, r3
 8002b46:	19ba      	adds	r2, r7, r6
 8002b48:	1953      	adds	r3, r2, r5
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	19ba      	adds	r2, r7, r6
 8002b54:	1912      	adds	r2, r2, r4
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8002b5e:	2314      	movs	r3, #20
 8002b60:	18f9      	adds	r1, r7, r3
 8002b62:	19bb      	adds	r3, r7, r6
 8002b64:	195b      	adds	r3, r3, r5
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	0013      	movs	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	189b      	adds	r3, r3, r2
 8002b6e:	0035      	movs	r5, r6
 8002b70:	19ba      	adds	r2, r7, r6
 8002b72:	1912      	adds	r2, r2, r4
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	585b      	ldr	r3, [r3, r1]
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7fd fae8 	bl	8000154 <__udivsi3>
 8002b84:	0003      	movs	r3, r0
 8002b86:	001a      	movs	r2, r3
 8002b88:	21a8      	movs	r1, #168	; 0xa8
 8002b8a:	197b      	adds	r3, r7, r5
 8002b8c:	185b      	adds	r3, r3, r1
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	197a      	adds	r2, r7, r5
 8002b94:	1852      	adds	r2, r2, r1
 8002b96:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 8002b98:	197b      	adds	r3, r7, r5
 8002b9a:	191b      	adds	r3, r3, r4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	197a      	adds	r2, r7, r5
 8002ba2:	1912      	adds	r2, r2, r4
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	2398      	movs	r3, #152	; 0x98
 8002ba8:	2210      	movs	r2, #16
 8002baa:	4694      	mov	ip, r2
 8002bac:	44bc      	add	ip, r7
 8002bae:	4463      	add	r3, ip
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	ddb3      	ble.n	8002b1e <main+0x47e>
		 }
		 if (i==0)
 8002bb6:	249c      	movs	r4, #156	; 0x9c
 8002bb8:	2510      	movs	r5, #16
 8002bba:	197b      	adds	r3, r7, r5
 8002bbc:	191b      	adds	r3, r3, r4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d153      	bne.n	8002c6c <main+0x5cc>
		 {
			 vect[i][4] = T31pulseWidth;
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <main+0x5ac>)
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	2614      	movs	r6, #20
 8002bca:	19b8      	adds	r0, r7, r6
 8002bcc:	197b      	adds	r3, r7, r5
 8002bce:	191b      	adds	r3, r3, r4
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	18c3      	adds	r3, r0, r3
 8002bdc:	3310      	adds	r3, #16
 8002bde:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002be0:	19b9      	adds	r1, r7, r6
 8002be2:	197b      	adds	r3, r7, r5
 8002be4:	191b      	adds	r3, r3, r4
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	0013      	movs	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	189b      	adds	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	18cb      	adds	r3, r1, r3
 8002bf2:	3310      	adds	r3, #16
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2105      	movs	r1, #5
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fd faab 	bl	8000154 <__udivsi3>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	001a      	movs	r2, r3
 8002c02:	21a8      	movs	r1, #168	; 0xa8
 8002c04:	197b      	adds	r3, r7, r5
 8002c06:	185b      	adds	r3, r3, r1
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	197a      	adds	r2, r7, r5
 8002c0e:	1852      	adds	r2, r2, r1
 8002c10:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <main+0x5ac>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	197b      	adds	r3, r7, r5
 8002c18:	185b      	adds	r3, r3, r1
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	3305      	adds	r3, #5
 8002c20:	da00      	bge.n	8002c24 <main+0x584>
 8002c22:	e0ea      	b.n	8002dfa <main+0x75a>
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <main+0x5ac>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	197b      	adds	r3, r7, r5
 8002c2a:	185b      	adds	r3, r3, r1
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	dd00      	ble.n	8002c36 <main+0x596>
 8002c34:	e0e1      	b.n	8002dfa <main+0x75a>
				 T31pulseWidth = 0;
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <main+0x5ac>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e0dd      	b.n	8002dfa <main+0x75a>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000594 	.word	0x20000594
 8002c44:	20000378 	.word	0x20000378
 8002c48:	20000300 	.word	0x20000300
 8002c4c:	200001fc 	.word	0x200001fc
 8002c50:	0000752f 	.word	0x0000752f
 8002c54:	33333333 	.word	0x33333333
 8002c58:	40cb0d33 	.word	0x40cb0d33
 8002c5c:	20000220 	.word	0x20000220
 8002c60:	20000244 	.word	0x20000244
 8002c64:	20000268 	.word	0x20000268
 8002c68:	0800d6f4 	.word	0x0800d6f4
		 }
		 else if (i==1)
 8002c6c:	249c      	movs	r4, #156	; 0x9c
 8002c6e:	2510      	movs	r5, #16
 8002c70:	197b      	adds	r3, r7, r5
 8002c72:	191b      	adds	r3, r3, r4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d13c      	bne.n	8002cf4 <main+0x654>
		 {
			 vect[i][4] = T32pulseWidth;
 8002c7a:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <main+0x7b0>)
 8002c7c:	6819      	ldr	r1, [r3, #0]
 8002c7e:	2614      	movs	r6, #20
 8002c80:	19b8      	adds	r0, r7, r6
 8002c82:	197b      	adds	r3, r7, r5
 8002c84:	191b      	adds	r3, r3, r4
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	0013      	movs	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	18c3      	adds	r3, r0, r3
 8002c92:	3310      	adds	r3, #16
 8002c94:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002c96:	19b9      	adds	r1, r7, r6
 8002c98:	197b      	adds	r3, r7, r5
 8002c9a:	191b      	adds	r3, r3, r4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	18cb      	adds	r3, r1, r3
 8002ca8:	3310      	adds	r3, #16
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2105      	movs	r1, #5
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7fd fa50 	bl	8000154 <__udivsi3>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	21a8      	movs	r1, #168	; 0xa8
 8002cba:	197b      	adds	r3, r7, r5
 8002cbc:	185b      	adds	r3, r3, r1
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	197a      	adds	r2, r7, r5
 8002cc4:	1852      	adds	r2, r2, r1
 8002cc6:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <main+0x7b0>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	197b      	adds	r3, r7, r5
 8002cce:	185b      	adds	r3, r3, r1
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	3305      	adds	r3, #5
 8002cd6:	da00      	bge.n	8002cda <main+0x63a>
 8002cd8:	e08f      	b.n	8002dfa <main+0x75a>
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <main+0x7b0>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	185b      	adds	r3, r3, r1
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	dd00      	ble.n	8002cec <main+0x64c>
 8002cea:	e086      	b.n	8002dfa <main+0x75a>
				 T32pulseWidth = 0;
 8002cec:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <main+0x7b0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e082      	b.n	8002dfa <main+0x75a>
		 }
		 else if (i==2)
 8002cf4:	249c      	movs	r4, #156	; 0x9c
 8002cf6:	2510      	movs	r5, #16
 8002cf8:	197b      	adds	r3, r7, r5
 8002cfa:	191b      	adds	r3, r3, r4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d13a      	bne.n	8002d78 <main+0x6d8>
		 {
			 vect[i][4] = T33pulseWidth;
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <main+0x7b4>)
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	2614      	movs	r6, #20
 8002d08:	19b8      	adds	r0, r7, r6
 8002d0a:	197b      	adds	r3, r7, r5
 8002d0c:	191b      	adds	r3, r3, r4
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	0013      	movs	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	189b      	adds	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	18c3      	adds	r3, r0, r3
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002d1e:	19b9      	adds	r1, r7, r6
 8002d20:	197b      	adds	r3, r7, r5
 8002d22:	191b      	adds	r3, r3, r4
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	0013      	movs	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	18cb      	adds	r3, r1, r3
 8002d30:	3310      	adds	r3, #16
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2105      	movs	r1, #5
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7fd fa0c 	bl	8000154 <__udivsi3>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	001a      	movs	r2, r3
 8002d40:	21a8      	movs	r1, #168	; 0xa8
 8002d42:	197b      	adds	r3, r7, r5
 8002d44:	185b      	adds	r3, r3, r1
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	189b      	adds	r3, r3, r2
 8002d4a:	197a      	adds	r2, r7, r5
 8002d4c:	1852      	adds	r2, r2, r1
 8002d4e:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <main+0x7b4>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	197b      	adds	r3, r7, r5
 8002d56:	185b      	adds	r3, r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	3305      	adds	r3, #5
 8002d5e:	db4c      	blt.n	8002dfa <main+0x75a>
 8002d60:	4b3c      	ldr	r3, [pc, #240]	; (8002e54 <main+0x7b4>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	197b      	adds	r3, r7, r5
 8002d66:	185b      	adds	r3, r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	dc44      	bgt.n	8002dfa <main+0x75a>
				 T33pulseWidth = 0;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <main+0x7b4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e040      	b.n	8002dfa <main+0x75a>
		 }
		 else if (i==3)
 8002d78:	249c      	movs	r4, #156	; 0x9c
 8002d7a:	2510      	movs	r5, #16
 8002d7c:	197b      	adds	r3, r7, r5
 8002d7e:	191b      	adds	r3, r3, r4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d139      	bne.n	8002dfa <main+0x75a>
		 {
			 vect[i][4] = T34pulseWidth;
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <main+0x7b8>)
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	2614      	movs	r6, #20
 8002d8c:	19b8      	adds	r0, r7, r6
 8002d8e:	197b      	adds	r3, r7, r5
 8002d90:	191b      	adds	r3, r3, r4
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	0013      	movs	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	18c3      	adds	r3, r0, r3
 8002d9e:	3310      	adds	r3, #16
 8002da0:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 8002da2:	19b9      	adds	r1, r7, r6
 8002da4:	197b      	adds	r3, r7, r5
 8002da6:	191b      	adds	r3, r3, r4
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	0013      	movs	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	18cb      	adds	r3, r1, r3
 8002db4:	3310      	adds	r3, #16
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2105      	movs	r1, #5
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fd f9ca 	bl	8000154 <__udivsi3>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	21a8      	movs	r1, #168	; 0xa8
 8002dc6:	197b      	adds	r3, r7, r5
 8002dc8:	185b      	adds	r3, r3, r1
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	197a      	adds	r2, r7, r5
 8002dd0:	1852      	adds	r2, r2, r1
 8002dd2:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <main+0x7b8>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	197b      	adds	r3, r7, r5
 8002dda:	185b      	adds	r3, r3, r1
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	3305      	adds	r3, #5
 8002de2:	db0a      	blt.n	8002dfa <main+0x75a>
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <main+0x7b8>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	197b      	adds	r3, r7, r5
 8002dea:	185b      	adds	r3, r3, r1
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	dc02      	bgt.n	8002dfa <main+0x75a>
				 T34pulseWidth = 0;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <main+0x7b8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8002dfa:	229c      	movs	r2, #156	; 0x9c
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	2110      	movs	r1, #16
 8002e08:	468c      	mov	ip, r1
 8002e0a:	44bc      	add	ip, r7
 8002e0c:	4462      	add	r2, ip
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	239c      	movs	r3, #156	; 0x9c
 8002e12:	2210      	movs	r2, #16
 8002e14:	4694      	mov	ip, r2
 8002e16:	44bc      	add	ip, r7
 8002e18:	4463      	add	r3, ip
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	dc00      	bgt.n	8002e22 <main+0x782>
 8002e20:	e66e      	b.n	8002b00 <main+0x460>
		 }
	 }

	 HAL_Delay(100);
 8002e22:	2064      	movs	r0, #100	; 0x64
 8002e24:	f001 f9d8 	bl	80041d8 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 if (UART_newMessage == 1)
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <main+0x7bc>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d000      	beq.n	8002e32 <main+0x792>
 8002e30:	e569      	b.n	8002906 <main+0x266>
	 {
		 // check if received string contains [drv] message and parse it
		 drv_messageCheck(rxString);
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <main+0x7c0>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fb37 	bl	80034a8 <drv_messageCheck>
		 // clear received b
		 memset(rxString, 0, sizeof(rxString));
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <main+0x7c0>)
 8002e3c:	2264      	movs	r2, #100	; 0x64
 8002e3e:	2100      	movs	r1, #0
 8002e40:	0018      	movs	r0, r3
 8002e42:	f005 fae5 	bl	8008410 <memset>
		 // set newMessage flag to 0 to begin new string receive
		 UART_newMessage = 0;
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <main+0x7bc>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
	cycleCounter++;
 8002e4c:	e55b      	b.n	8002906 <main+0x266>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	20000220 	.word	0x20000220
 8002e54:	20000244 	.word	0x20000244
 8002e58:	20000268 	.word	0x20000268
 8002e5c:	2000028d 	.word	0x2000028d
 8002e60:	20000290 	.word	0x20000290

08002e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b091      	sub	sp, #68	; 0x44
 8002e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e6a:	2410      	movs	r4, #16
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	0018      	movs	r0, r3
 8002e70:	2330      	movs	r3, #48	; 0x30
 8002e72:	001a      	movs	r2, r3
 8002e74:	2100      	movs	r1, #0
 8002e76:	f005 facb 	bl	8008410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	2310      	movs	r3, #16
 8002e80:	001a      	movs	r2, r3
 8002e82:	2100      	movs	r1, #0
 8002e84:	f005 fac4 	bl	8008410 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e88:	0021      	movs	r1, r4
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	2201      	movs	r2, #1
 8002e94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	2210      	movs	r2, #16
 8002e9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f001 fe3d 	bl	8004b24 <HAL_RCC_OscConfig>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d001      	beq.n	8002eb2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002eae:	f000 fdf9 	bl	8003aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002eb8:	003b      	movs	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ebe:	003b      	movs	r3, r7
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ec4:	003b      	movs	r3, r7
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002eca:	003b      	movs	r3, r7
 8002ecc:	2100      	movs	r1, #0
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f002 f946 	bl	8005160 <HAL_RCC_ClockConfig>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d001      	beq.n	8002edc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002ed8:	f000 fde4 	bl	8003aa4 <Error_Handler>
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b011      	add	sp, #68	; 0x44
 8002ee2:	bd90      	pop	{r4, r7, pc}

08002ee4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b096      	sub	sp, #88	; 0x58
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eea:	2348      	movs	r3, #72	; 0x48
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	0018      	movs	r0, r3
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f005 fa8b 	bl	8008410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	0018      	movs	r0, r3
 8002f00:	2308      	movs	r3, #8
 8002f02:	001a      	movs	r2, r3
 8002f04:	2100      	movs	r1, #0
 8002f06:	f005 fa83 	bl	8008410 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0a:	2324      	movs	r3, #36	; 0x24
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	0018      	movs	r0, r3
 8002f10:	231c      	movs	r3, #28
 8002f12:	001a      	movs	r2, r3
 8002f14:	2100      	movs	r1, #0
 8002f16:	f005 fa7b 	bl	8008410 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	2320      	movs	r3, #32
 8002f20:	001a      	movs	r2, r3
 8002f22:	2100      	movs	r1, #0
 8002f24:	f005 fa74 	bl	8008410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f28:	4b56      	ldr	r3, [pc, #344]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f2a:	4a57      	ldr	r2, [pc, #348]	; (8003088 <MX_TIM1_Init+0x1a4>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8002f2e:	4b55      	ldr	r3, [pc, #340]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f30:	229f      	movs	r2, #159	; 0x9f
 8002f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b53      	ldr	r3, [pc, #332]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002f3a:	4b52      	ldr	r3, [pc, #328]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f3c:	2263      	movs	r2, #99	; 0x63
 8002f3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f46:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f52:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f54:	0018      	movs	r0, r3
 8002f56:	f002 fa57 	bl	8005408 <HAL_TIM_Base_Init>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002f5e:	f000 fda1 	bl	8003aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f62:	2148      	movs	r1, #72	; 0x48
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0152      	lsls	r2, r2, #5
 8002f6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f6c:	187a      	adds	r2, r7, r1
 8002f6e:	4b45      	ldr	r3, [pc, #276]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f003 f938 	bl	80061e8 <HAL_TIM_ConfigClockSource>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002f7c:	f000 fd92 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f002 fa90 	bl	80054a8 <HAL_TIM_PWM_Init>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002f8c:	f000 fd8a 	bl	8003aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f90:	2140      	movs	r1, #64	; 0x40
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f9e:	187a      	adds	r2, r7, r1
 8002fa0:	4b38      	ldr	r3, [pc, #224]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f003 fe8f 	bl	8006cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002fae:	f000 fd79 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fb2:	2124      	movs	r1, #36	; 0x24
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2260      	movs	r2, #96	; 0x60
 8002fb8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fde:	1879      	adds	r1, r7, r1
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f003 f839 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002fee:	f000 fd59 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff2:	2324      	movs	r3, #36	; 0x24
 8002ff4:	18f9      	adds	r1, r7, r3
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f003 f82e 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8003004:	f000 fd4e 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003008:	2324      	movs	r3, #36	; 0x24
 800300a:	18f9      	adds	r1, r7, r3
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <MX_TIM1_Init+0x1a0>)
 800300e:	2208      	movs	r2, #8
 8003010:	0018      	movs	r0, r3
 8003012:	f003 f823 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d001      	beq.n	800301e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800301a:	f000 fd43 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800301e:	2324      	movs	r3, #36	; 0x24
 8003020:	18f9      	adds	r1, r7, r3
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8003024:	220c      	movs	r2, #12
 8003026:	0018      	movs	r0, r3
 8003028:	f003 f818 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003030:	f000 fd38 	bl	8003aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	2200      	movs	r2, #0
 800303e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	0192      	lsls	r2, r2, #6
 8003058:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	2200      	movs	r2, #0
 800305e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003060:	1d3a      	adds	r2, r7, #4
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8003064:	0011      	movs	r1, r2
 8003066:	0018      	movs	r0, r3
 8003068:	f003 fe86 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 800306c:	1e03      	subs	r3, r0, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8003070:	f000 fd18 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <MX_TIM1_Init+0x1a0>)
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fdf6 	bl	8003c68 <HAL_TIM_MspPostInit>

}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b016      	add	sp, #88	; 0x58
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200004c8 	.word	0x200004c8
 8003088:	40012c00 	.word	0x40012c00

0800308c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003092:	2310      	movs	r3, #16
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	0018      	movs	r0, r3
 8003098:	2308      	movs	r3, #8
 800309a:	001a      	movs	r2, r3
 800309c:	2100      	movs	r1, #0
 800309e:	f005 f9b7 	bl	8008410 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030a2:	003b      	movs	r3, r7
 80030a4:	0018      	movs	r0, r3
 80030a6:	2310      	movs	r3, #16
 80030a8:	001a      	movs	r2, r3
 80030aa:	2100      	movs	r1, #0
 80030ac:	f005 f9b0 	bl	8008410 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030b0:	4b31      	ldr	r3, [pc, #196]	; (8003178 <MX_TIM3_Init+0xec>)
 80030b2:	4a32      	ldr	r2, [pc, #200]	; (800317c <MX_TIM3_Init+0xf0>)
 80030b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <MX_TIM3_Init+0xec>)
 80030b8:	224f      	movs	r2, #79	; 0x4f
 80030ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <MX_TIM3_Init+0xec>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <MX_TIM3_Init+0xec>)
 80030c4:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <MX_TIM3_Init+0xf4>)
 80030c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <MX_TIM3_Init+0xec>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <MX_TIM3_Init+0xec>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <MX_TIM3_Init+0xec>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f002 fcae 	bl	8005a38 <HAL_TIM_IC_Init>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80030e0:	f000 fce0 	bl	8003aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e4:	2110      	movs	r1, #16
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030f2:	187a      	adds	r2, r7, r1
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <MX_TIM3_Init+0xec>)
 80030f6:	0011      	movs	r1, r2
 80030f8:	0018      	movs	r0, r3
 80030fa:	f003 fde5 	bl	8006cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003102:	f000 fccf 	bl	8003aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003106:	003b      	movs	r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800310c:	003b      	movs	r3, r7
 800310e:	2201      	movs	r2, #1
 8003110:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003112:	003b      	movs	r3, r7
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 8003118:	003b      	movs	r3, r7
 800311a:	2203      	movs	r2, #3
 800311c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800311e:	0039      	movs	r1, r7
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <MX_TIM3_Init+0xec>)
 8003122:	2200      	movs	r2, #0
 8003124:	0018      	movs	r0, r3
 8003126:	f002 fef5 	bl	8005f14 <HAL_TIM_IC_ConfigChannel>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800312e:	f000 fcb9 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003132:	0039      	movs	r1, r7
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <MX_TIM3_Init+0xec>)
 8003136:	2204      	movs	r2, #4
 8003138:	0018      	movs	r0, r3
 800313a:	f002 feeb 	bl	8005f14 <HAL_TIM_IC_ConfigChannel>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8003142:	f000 fcaf 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003146:	0039      	movs	r1, r7
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <MX_TIM3_Init+0xec>)
 800314a:	2208      	movs	r2, #8
 800314c:	0018      	movs	r0, r3
 800314e:	f002 fee1 	bl	8005f14 <HAL_TIM_IC_ConfigChannel>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d001      	beq.n	800315a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8003156:	f000 fca5 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800315a:	0039      	movs	r1, r7
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <MX_TIM3_Init+0xec>)
 800315e:	220c      	movs	r2, #12
 8003160:	0018      	movs	r0, r3
 8003162:	f002 fed7 	bl	8005f14 <HAL_TIM_IC_ConfigChannel>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d001      	beq.n	800316e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800316a:	f000 fc9b 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b006      	add	sp, #24
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	2000040c 	.word	0x2000040c
 800317c:	40000400 	.word	0x40000400
 8003180:	0000c34f 	.word	0x0000c34f

08003184 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b096      	sub	sp, #88	; 0x58
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800318a:	2348      	movs	r3, #72	; 0x48
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	0018      	movs	r0, r3
 8003190:	2310      	movs	r3, #16
 8003192:	001a      	movs	r2, r3
 8003194:	2100      	movs	r1, #0
 8003196:	f005 f93b 	bl	8008410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	0018      	movs	r0, r3
 80031a0:	2308      	movs	r3, #8
 80031a2:	001a      	movs	r2, r3
 80031a4:	2100      	movs	r1, #0
 80031a6:	f005 f933 	bl	8008410 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031aa:	2324      	movs	r3, #36	; 0x24
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	0018      	movs	r0, r3
 80031b0:	231c      	movs	r3, #28
 80031b2:	001a      	movs	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	f005 f92b 	bl	8008410 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	0018      	movs	r0, r3
 80031be:	2320      	movs	r3, #32
 80031c0:	001a      	movs	r2, r3
 80031c2:	2100      	movs	r1, #0
 80031c4:	f005 f924 	bl	8008410 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031ca:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <MX_TIM15_Init+0x178>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 40-1;
 80031ce:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031d0:	2227      	movs	r2, #39	; 0x27
 80031d2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031dc:	2204      	movs	r2, #4
 80031de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031e8:	2264      	movs	r2, #100	; 0x64
 80031ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ec:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <MX_TIM15_Init+0x174>)
 80031f4:	0018      	movs	r0, r3
 80031f6:	f002 f907 	bl	8005408 <HAL_TIM_Base_Init>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80031fe:	f000 fc51 	bl	8003aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003202:	2148      	movs	r1, #72	; 0x48
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	0152      	lsls	r2, r2, #5
 800320a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800320c:	187a      	adds	r2, r7, r1
 800320e:	4b3a      	ldr	r3, [pc, #232]	; (80032f8 <MX_TIM15_Init+0x174>)
 8003210:	0011      	movs	r1, r2
 8003212:	0018      	movs	r0, r3
 8003214:	f002 ffe8 	bl	80061e8 <HAL_TIM_ConfigClockSource>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800321c:	f000 fc42 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <MX_TIM15_Init+0x174>)
 8003222:	0018      	movs	r0, r3
 8003224:	f002 f940 	bl	80054a8 <HAL_TIM_PWM_Init>
 8003228:	1e03      	subs	r3, r0, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 800322c:	f000 fc3a 	bl	8003aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003230:	2140      	movs	r1, #64	; 0x40
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800323e:	187a      	adds	r2, r7, r1
 8003240:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <MX_TIM15_Init+0x174>)
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f003 fd3f 	bl	8006cc8 <HAL_TIMEx_MasterConfigSynchronization>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800324e:	f000 fc29 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003252:	2124      	movs	r1, #36	; 0x24
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2260      	movs	r2, #96	; 0x60
 8003258:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800325a:	187b      	adds	r3, r7, r1
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003260:	187b      	adds	r3, r7, r1
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003266:	187b      	adds	r3, r7, r1
 8003268:	2200      	movs	r2, #0
 800326a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003272:	187b      	adds	r3, r7, r1
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003278:	187b      	adds	r3, r7, r1
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800327e:	1879      	adds	r1, r7, r1
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <MX_TIM15_Init+0x174>)
 8003282:	2200      	movs	r2, #0
 8003284:	0018      	movs	r0, r3
 8003286:	f002 fee9 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800328e:	f000 fc09 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003292:	2324      	movs	r3, #36	; 0x24
 8003294:	18f9      	adds	r1, r7, r3
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_TIM15_Init+0x174>)
 8003298:	2204      	movs	r2, #4
 800329a:	0018      	movs	r0, r3
 800329c:	f002 fede 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80032a4:	f000 fbfe 	bl	8003aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	0192      	lsls	r2, r2, #6
 80032cc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	2200      	movs	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80032d4:	1d3a      	adds	r2, r7, #4
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <MX_TIM15_Init+0x174>)
 80032d8:	0011      	movs	r1, r2
 80032da:	0018      	movs	r0, r3
 80032dc:	f003 fd4c 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 80032e4:	f000 fbde 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <MX_TIM15_Init+0x174>)
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 fcbc 	bl	8003c68 <HAL_TIM_MspPostInit>

}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b016      	add	sp, #88	; 0x58
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	200003c4 	.word	0x200003c4
 80032fc:	40014000 	.word	0x40014000

08003300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <MX_USART2_UART_Init+0x5c>)
 8003308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <MX_USART2_UART_Init+0x58>)
 800330c:	22e1      	movs	r2, #225	; 0xe1
 800330e:	0252      	lsls	r2, r2, #9
 8003310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <MX_USART2_UART_Init+0x58>)
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003320:	2200      	movs	r2, #0
 8003322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003326:	220c      	movs	r2, #12
 8003328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <MX_USART2_UART_Init+0x58>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003338:	2200      	movs	r2, #0
 800333a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <MX_USART2_UART_Init+0x58>)
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <MX_USART2_UART_Init+0x58>)
 8003344:	0018      	movs	r0, r3
 8003346:	f003 fd85 	bl	8006e54 <HAL_UART_Init>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d001      	beq.n	8003352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800334e:	f000 fba9 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000510 	.word	0x20000510
 800335c:	40004400 	.word	0x40004400

08003360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <MX_DMA_Init+0x38>)
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <MX_DMA_Init+0x38>)
 800336c:	2101      	movs	r1, #1
 800336e:	430a      	orrs	r2, r1
 8003370:	615a      	str	r2, [r3, #20]
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <MX_DMA_Init+0x38>)
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2201      	movs	r2, #1
 8003378:	4013      	ands	r3, r2
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	200b      	movs	r0, #11
 8003384:	f000 fff8 	bl	8004378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003388:	200b      	movs	r0, #11
 800338a:	f001 f80a 	bl	80043a2 <HAL_NVIC_EnableIRQ>

}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	40021000 	.word	0x40021000

0800339c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a2:	2414      	movs	r4, #20
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	0018      	movs	r0, r3
 80033a8:	2314      	movs	r3, #20
 80033aa:	001a      	movs	r2, r3
 80033ac:	2100      	movs	r1, #0
 80033ae:	f005 f82f 	bl	8008410 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <MX_GPIO_Init+0xc0>)
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <MX_GPIO_Init+0xc0>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	03c9      	lsls	r1, r1, #15
 80033bc:	430a      	orrs	r2, r1
 80033be:	615a      	str	r2, [r3, #20]
 80033c0:	4b26      	ldr	r3, [pc, #152]	; (800345c <MX_GPIO_Init+0xc0>)
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	03db      	lsls	r3, r3, #15
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <MX_GPIO_Init+0xc0>)
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <MX_GPIO_Init+0xc0>)
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	0309      	lsls	r1, r1, #12
 80033d8:	430a      	orrs	r2, r1
 80033da:	615a      	str	r2, [r3, #20]
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <MX_GPIO_Init+0xc0>)
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	031b      	lsls	r3, r3, #12
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <MX_GPIO_Init+0xc0>)
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <MX_GPIO_Init+0xc0>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0289      	lsls	r1, r1, #10
 80033f4:	430a      	orrs	r2, r1
 80033f6:	615a      	str	r2, [r3, #20]
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <MX_GPIO_Init+0xc0>)
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <MX_GPIO_Init+0xc0>)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <MX_GPIO_Init+0xc0>)
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	02c9      	lsls	r1, r1, #11
 8003410:	430a      	orrs	r2, r1
 8003412:	615a      	str	r2, [r3, #20]
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <MX_GPIO_Init+0xc0>)
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	02db      	lsls	r3, r3, #11
 800341c:	4013      	ands	r3, r2
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 8003422:	490f      	ldr	r1, [pc, #60]	; (8003460 <MX_GPIO_Init+0xc4>)
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <MX_GPIO_Init+0xc8>)
 8003426:	2200      	movs	r2, #0
 8003428:	0018      	movs	r0, r3
 800342a:	f001 fb5d 	bl	8004ae8 <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 800342e:	0021      	movs	r1, r4
 8003430:	187b      	adds	r3, r7, r1
 8003432:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <MX_GPIO_Init+0xc4>)
 8003434:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2201      	movs	r2, #1
 800343a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003448:	187b      	adds	r3, r7, r1
 800344a:	4a06      	ldr	r2, [pc, #24]	; (8003464 <MX_GPIO_Init+0xc8>)
 800344c:	0019      	movs	r1, r3
 800344e:	0010      	movs	r0, r2
 8003450:	f001 f9da 	bl	8004808 <HAL_GPIO_Init>

}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b00b      	add	sp, #44	; 0x2c
 800345a:	bd90      	pop	{r4, r7, pc}
 800345c:	40021000 	.word	0x40021000
 8003460:	0000040f 	.word	0x0000040f
 8003464:	48000800 	.word	0x48000800

08003468 <UART_Send>:

/* USER CODE BEGIN 4 */

void UART_Send(const char message[])
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	while(UART_TX_Busy){};
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <UART_Send+0x38>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1fa      	bne.n	8003472 <UART_Send+0xa>
	UART_TX_Busy = 1;
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <UART_Send+0x38>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)message, strlen(message));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f7fc fe49 	bl	800011c <strlen>
 800348a:	0003      	movs	r3, r0
 800348c:	b29a      	uxth	r2, r3
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <UART_Send+0x3c>)
 8003492:	0018      	movs	r0, r3
 8003494:	f003 fddc 	bl	8007050 <HAL_UART_Transmit_DMA>
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b002      	add	sp, #8
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	200002f4 	.word	0x200002f4
 80034a4:	20000510 	.word	0x20000510

080034a8 <drv_messageCheck>:

void drv_messageCheck(const char message[])
{
 80034a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034aa:	b09b      	sub	sp, #108	; 0x6c
 80034ac:	af06      	add	r7, sp, #24
 80034ae:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <drv_messageCheck+0x14c>)
 80034b4:	0011      	movs	r1, r2
 80034b6:	0018      	movs	r0, r3
 80034b8:	f005 fece 	bl	8009258 <strcpy>

	uint8_t MSG[5] = {'\0'};
 80034bc:	2548      	movs	r5, #72	; 0x48
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	2200      	movs	r2, #0
 80034c6:	711a      	strb	r2, [r3, #4]
	int arw1=0, arw2=0, arw3=0, arw4=0, motor_brk=0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	647b      	str	r3, [r7, #68]	; 0x44
 80034cc:	2300      	movs	r3, #0
 80034ce:	643b      	str	r3, [r7, #64]	; 0x40
 80034d0:	2300      	movs	r3, #0
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d4:	2300      	movs	r3, #0
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d8:	2300      	movs	r3, #0
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
	int turn=0;
 80034dc:	2300      	movs	r3, #0
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
	sscanf(cmd_buf, "%s %d %d %d %d %d %d", &MSG, &arw1, &arw2, &arw3, &arw4, &turn, &motor_brk);
 80034e0:	2344      	movs	r3, #68	; 0x44
 80034e2:	18fc      	adds	r4, r7, r3
 80034e4:	197a      	adds	r2, r7, r5
 80034e6:	4944      	ldr	r1, [pc, #272]	; (80035f8 <drv_messageCheck+0x150>)
 80034e8:	4842      	ldr	r0, [pc, #264]	; (80035f4 <drv_messageCheck+0x14c>)
 80034ea:	2334      	movs	r3, #52	; 0x34
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	9304      	str	r3, [sp, #16]
 80034f0:	2330      	movs	r3, #48	; 0x30
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	9303      	str	r3, [sp, #12]
 80034f6:	2338      	movs	r3, #56	; 0x38
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	233c      	movs	r3, #60	; 0x3c
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2340      	movs	r3, #64	; 0x40
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	0023      	movs	r3, r4
 800350a:	f005 fe2f 	bl	800916c <siscanf>
	if (!strcmp(MSG, "[drv]")) // returns 0 if strings are equal
 800350e:	4a3b      	ldr	r2, [pc, #236]	; (80035fc <drv_messageCheck+0x154>)
 8003510:	197b      	adds	r3, r7, r5
 8003512:	0011      	movs	r1, r2
 8003514:	0018      	movs	r0, r3
 8003516:	f7fc fdf7 	bl	8000108 <strcmp>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d165      	bne.n	80035ea <drv_messageCheck+0x142>
	{
		uint8_t reply[40] = {'\0'};
 800351e:	2408      	movs	r4, #8
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	3304      	adds	r3, #4
 8003528:	2224      	movs	r2, #36	; 0x24
 800352a:	2100      	movs	r1, #0
 800352c:	0018      	movs	r0, r3
 800352e:	f004 ff6f 	bl	8008410 <memset>
		sprintf(reply, "received: %d %d %d %d %d %d \n", arw1, arw2, arw3, arw4, turn, motor_brk);
 8003532:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	469c      	mov	ip, r3
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800353c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800353e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003540:	4d2f      	ldr	r5, [pc, #188]	; (8003600 <drv_messageCheck+0x158>)
 8003542:	193c      	adds	r4, r7, r4
 8003544:	9003      	str	r0, [sp, #12]
 8003546:	9102      	str	r1, [sp, #8]
 8003548:	9201      	str	r2, [sp, #4]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4663      	mov	r3, ip
 800354e:	0032      	movs	r2, r6
 8003550:	0029      	movs	r1, r5
 8003552:	0020      	movs	r0, r4
 8003554:	f005 fdea 	bl	800912c <siprintf>
		UART_Send(reply);
 8003558:	2408      	movs	r4, #8
 800355a:	193b      	adds	r3, r7, r4
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ff83 	bl	8003468 <UART_Send>
		motorPWM_pulse(&htim1, pMW[0], arw1 );
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <drv_messageCheck+0x15c>)
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4b27      	ldr	r3, [pc, #156]	; (8003608 <drv_messageCheck+0x160>)
 800356c:	0018      	movs	r0, r3
 800356e:	f7fe ff67 	bl	8002440 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[1], arw2 );
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <drv_messageCheck+0x15c>)
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <drv_messageCheck+0x160>)
 800357c:	0018      	movs	r0, r3
 800357e:	f7fe ff5f 	bl	8002440 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[2], arw3 );
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <drv_messageCheck+0x15c>)
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <drv_messageCheck+0x160>)
 800358c:	0018      	movs	r0, r3
 800358e:	f7fe ff57 	bl	8002440 <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[3], arw4 );
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <drv_messageCheck+0x15c>)
 8003594:	68d9      	ldr	r1, [r3, #12]
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <drv_messageCheck+0x160>)
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe ff4f 	bl	8002440 <motorPWM_pulse>
		// Since only 1 break pin is used, it is enough to call this function for only 1 wheel
		motor_break(pMW[0], motor_brk);
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <drv_messageCheck+0x15c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	0011      	movs	r1, r2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7fe ff81 	bl	80024b4 <motor_break>
		//motor_break(pMW[1], motor_brk);
		//motor_break(pMW[2], motor_brk);
		//motor_break(pMW[3], motor_brk);
		linear_motor_set_target(pLM[0], turn);
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <drv_messageCheck+0x164>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fe ffc4 	bl	8002548 <linear_motor_set_target>
		linear_motor_set_target(pLM[1], turn);
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <drv_messageCheck+0x164>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	0011      	movs	r1, r2
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fe ffbd 	bl	8002548 <linear_motor_set_target>
		linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <drv_messageCheck+0x164>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <drv_messageCheck+0x168>)
 80035d4:	490f      	ldr	r1, [pc, #60]	; (8003614 <drv_messageCheck+0x16c>)
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7fe ffd4 	bl	8002584 <linear_motor_pulse>
		linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <drv_messageCheck+0x164>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <drv_messageCheck+0x170>)
 80035e2:	490c      	ldr	r1, [pc, #48]	; (8003614 <drv_messageCheck+0x16c>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fe ffcd 	bl	8002584 <linear_motor_pulse>
	}
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b015      	add	sp, #84	; 0x54
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20000304 	.word	0x20000304
 80035f8:	0800d710 	.word	0x0800d710
 80035fc:	0800d728 	.word	0x0800d728
 8003600:	0800d730 	.word	0x0800d730
 8003604:	20000498 	.word	0x20000498
 8003608:	200004c8 	.word	0x200004c8
 800360c:	20000378 	.word	0x20000378
 8003610:	200002f8 	.word	0x200002f8
 8003614:	200003c4 	.word	0x200003c4
 8003618:	200002fc 	.word	0x200002fc

0800361c <HAL_TIM_PWM_PulseFinishedCallback>:

// Linear Motors Timers
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d12e      	bne.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7f1b      	ldrb	r3, [r3, #28]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d113      	bne.n	800365c <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 8003634:	4b18      	ldr	r3, [pc, #96]	; (8003698 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003644:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 8003646:	e020      	b.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11c      	bne.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003652:	2100      	movs	r1, #0
 8003654:	0018      	movs	r0, r3
 8003656:	f002 f92b 	bl	80058b0 <HAL_TIM_PWM_Stop_IT>
}
 800365a:	e016      	b.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7f1b      	ldrb	r3, [r3, #28]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d112      	bne.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1e5a      	subs	r2, r3, #1
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	e008      	b.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003682:	2104      	movs	r1, #4
 8003684:	0018      	movs	r0, r3
 8003686:	f002 f913 	bl	80058b0 <HAL_TIM_PWM_Stop_IT>
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b002      	add	sp, #8
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	200003c4 	.word	0x200003c4
 8003698:	200002f8 	.word	0x200002f8
 800369c:	200002fc 	.word	0x200002fc

080036a0 <HAL_TIM_IC_CaptureCallback>:

// ENCODERS READING
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4aa9      	ldr	r2, [pc, #676]	; (8003954 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d000      	beq.n	80036b4 <HAL_TIM_IC_CaptureCallback+0x14>
 80036b2:	e14a      	b.n	800394a <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7f1b      	ldrb	r3, [r3, #28]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d14e      	bne.n	800375a <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80036bc:	4ba6      	ldr	r3, [pc, #664]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80036be:	2100      	movs	r1, #0
 80036c0:	0018      	movs	r0, r3
 80036c2:	f002 fe65 	bl	8006390 <HAL_TIM_ReadCapturedValue>
 80036c6:	0002      	movs	r2, r0
 80036c8:	4ba4      	ldr	r3, [pc, #656]	; (800395c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80036ca:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 80036cc:	4ba3      	ldr	r3, [pc, #652]	; (800395c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4ba3      	ldr	r3, [pc, #652]	; (8003960 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d93b      	bls.n	8003750 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 80036d8:	4ba2      	ldr	r3, [pc, #648]	; (8003964 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e01a      	b.n	800371a <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	4b9f      	ldr	r3, [pc, #636]	; (8003968 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	58d1      	ldr	r1, [r2, r3]
 80036ee:	4b9e      	ldr	r3, [pc, #632]	; (8003968 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 80036f6:	4b9c      	ldr	r3, [pc, #624]	; (8003968 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	58d3      	ldr	r3, [r2, r3]
 80036fe:	2105      	movs	r1, #5
 8003700:	0018      	movs	r0, r3
 8003702:	f7fc fd27 	bl	8000154 <__udivsi3>
 8003706:	0003      	movs	r3, r0
 8003708:	001a      	movs	r2, r3
 800370a:	4b96      	ldr	r3, [pc, #600]	; (8003964 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	18d2      	adds	r2, r2, r3
 8003710:	4b94      	ldr	r3, [pc, #592]	; (8003964 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003712:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b03      	cmp	r3, #3
 800371e:	dde1      	ble.n	80036e4 <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 8003720:	4b8e      	ldr	r3, [pc, #568]	; (800395c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b8e      	ldr	r3, [pc, #568]	; (8003960 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1ad2      	subs	r2, r2, r3
 800372a:	4b8f      	ldr	r3, [pc, #572]	; (8003968 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800372c:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 800372e:	4b8e      	ldr	r3, [pc, #568]	; (8003968 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2105      	movs	r1, #5
 8003734:	0018      	movs	r0, r3
 8003736:	f7fc fd0d 	bl	8000154 <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	001a      	movs	r2, r3
 800373e:	4b89      	ldr	r3, [pc, #548]	; (8003964 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	18d2      	adds	r2, r2, r3
 8003744:	4b87      	ldr	r3, [pc, #540]	; (8003964 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003746:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 8003748:	4b86      	ldr	r3, [pc, #536]	; (8003964 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b87      	ldr	r3, [pc, #540]	; (800396c <HAL_TIM_IC_CaptureCallback+0x2cc>)
 800374e:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 8003750:	4b82      	ldr	r3, [pc, #520]	; (800395c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b82      	ldr	r3, [pc, #520]	; (8003960 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003756:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 8003758:	e0f7      	b.n	800394a <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7f1b      	ldrb	r3, [r3, #28]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d14e      	bne.n	8003800 <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8003762:	4b7d      	ldr	r3, [pc, #500]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003764:	2104      	movs	r1, #4
 8003766:	0018      	movs	r0, r3
 8003768:	f002 fe12 	bl	8006390 <HAL_TIM_ReadCapturedValue>
 800376c:	0002      	movs	r2, r0
 800376e:	4b80      	ldr	r3, [pc, #512]	; (8003970 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003770:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 8003772:	4b7f      	ldr	r3, [pc, #508]	; (8003970 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d93b      	bls.n	80037f6 <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 800377e:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e01a      	b.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	4b7b      	ldr	r3, [pc, #492]	; (800397c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003790:	0092      	lsls	r2, r2, #2
 8003792:	58d1      	ldr	r1, [r2, r3]
 8003794:	4b79      	ldr	r3, [pc, #484]	; (800397c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 800379c:	4b77      	ldr	r3, [pc, #476]	; (800397c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	58d3      	ldr	r3, [r2, r3]
 80037a4:	2105      	movs	r1, #5
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fc fcd4 	bl	8000154 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	001a      	movs	r2, r3
 80037b0:	4b71      	ldr	r3, [pc, #452]	; (8003978 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	18d2      	adds	r2, r2, r3
 80037b6:	4b70      	ldr	r3, [pc, #448]	; (8003978 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80037b8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3301      	adds	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	dde1      	ble.n	800378a <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80037d2:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 80037d4:	4b69      	ldr	r3, [pc, #420]	; (800397c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2105      	movs	r1, #5
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fc fcba 	bl	8000154 <__udivsi3>
 80037e0:	0003      	movs	r3, r0
 80037e2:	001a      	movs	r2, r3
 80037e4:	4b64      	ldr	r3, [pc, #400]	; (8003978 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	18d2      	adds	r2, r2, r3
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80037ec:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80037f4:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	e0a4      	b.n	800394a <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7f1b      	ldrb	r3, [r3, #28]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d14e      	bne.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800380a:	2108      	movs	r1, #8
 800380c:	0018      	movs	r0, r3
 800380e:	f002 fdbf 	bl	8006390 <HAL_TIM_ReadCapturedValue>
 8003812:	0002      	movs	r2, r0
 8003814:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003816:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 8003818:	4b5a      	ldr	r3, [pc, #360]	; (8003984 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b5a      	ldr	r3, [pc, #360]	; (8003988 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d93b      	bls.n	800389c <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 8003824:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e01a      	b.n	8003866 <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003836:	0092      	lsls	r2, r2, #2
 8003838:	58d1      	ldr	r1, [r2, r3]
 800383a:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	58d3      	ldr	r3, [r2, r3]
 800384a:	2105      	movs	r1, #5
 800384c:	0018      	movs	r0, r3
 800384e:	f7fc fc81 	bl	8000154 <__udivsi3>
 8003852:	0003      	movs	r3, r0
 8003854:	001a      	movs	r2, r3
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	18d2      	adds	r2, r2, r3
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800385e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3301      	adds	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b03      	cmp	r3, #3
 800386a:	dde1      	ble.n	8003830 <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 800386c:	4b45      	ldr	r3, [pc, #276]	; (8003984 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b45      	ldr	r3, [pc, #276]	; (8003988 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8003878:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 800387a:	4b45      	ldr	r3, [pc, #276]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2105      	movs	r1, #5
 8003880:	0018      	movs	r0, r3
 8003882:	f7fc fc67 	bl	8000154 <__udivsi3>
 8003886:	0003      	movs	r3, r0
 8003888:	001a      	movs	r2, r3
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	18d2      	adds	r2, r2, r3
 8003890:	4b3e      	ldr	r3, [pc, #248]	; (800398c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003892:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 8003894:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800389a:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	e051      	b.n	800394a <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7f1b      	ldrb	r3, [r3, #28]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d14d      	bne.n	800394a <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80038b0:	210c      	movs	r1, #12
 80038b2:	0018      	movs	r0, r3
 80038b4:	f002 fd6c 	bl	8006390 <HAL_TIM_ReadCapturedValue>
 80038b8:	0002      	movs	r2, r0
 80038ba:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80038bc:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 80038be:	4b36      	ldr	r3, [pc, #216]	; (8003998 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d93b      	bls.n	8003942 <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 80038ca:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_TIM_IC_CaptureCallback+0x300>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e01a      	b.n	800390c <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_TIM_IC_CaptureCallback+0x304>)
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	58d1      	ldr	r1, [r2, r3]
 80038e0:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_TIM_IC_CaptureCallback+0x304>)
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	0092      	lsls	r2, r2, #2
 80038e6:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_TIM_IC_CaptureCallback+0x304>)
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	58d3      	ldr	r3, [r2, r3]
 80038f0:	2105      	movs	r1, #5
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7fc fc2e 	bl	8000154 <__udivsi3>
 80038f8:	0003      	movs	r3, r0
 80038fa:	001a      	movs	r2, r3
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_TIM_IC_CaptureCallback+0x300>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	18d2      	adds	r2, r2, r3
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003904:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3301      	adds	r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b03      	cmp	r3, #3
 8003910:	dde1      	ble.n	80038d6 <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 8003912:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1ad2      	subs	r2, r2, r3
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_TIM_IC_CaptureCallback+0x304>)
 800391e:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 8003920:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_TIM_IC_CaptureCallback+0x304>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2105      	movs	r1, #5
 8003926:	0018      	movs	r0, r3
 8003928:	f7fc fc14 	bl	8000154 <__udivsi3>
 800392c:	0003      	movs	r3, r0
 800392e:	001a      	movs	r2, r3
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	18d2      	adds	r2, r2, r3
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8003938:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_TIM_IC_CaptureCallback+0x308>)
 8003940:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b006      	add	sp, #24
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	40000400 	.word	0x40000400
 8003958:	2000040c 	.word	0x2000040c
 800395c:	20000204 	.word	0x20000204
 8003960:	20000200 	.word	0x20000200
 8003964:	20000208 	.word	0x20000208
 8003968:	2000020c 	.word	0x2000020c
 800396c:	200001fc 	.word	0x200001fc
 8003970:	20000228 	.word	0x20000228
 8003974:	20000224 	.word	0x20000224
 8003978:	2000022c 	.word	0x2000022c
 800397c:	20000230 	.word	0x20000230
 8003980:	20000220 	.word	0x20000220
 8003984:	2000024c 	.word	0x2000024c
 8003988:	20000248 	.word	0x20000248
 800398c:	20000250 	.word	0x20000250
 8003990:	20000254 	.word	0x20000254
 8003994:	20000244 	.word	0x20000244
 8003998:	20000270 	.word	0x20000270
 800399c:	2000026c 	.word	0x2000026c
 80039a0:	20000274 	.word	0x20000274
 80039a4:	20000278 	.word	0x20000278
 80039a8:	20000268 	.word	0x20000268

080039ac <HAL_UART_TxCpltCallback>:

// --------------------------------------

// UART Processing
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	UART_TX_Busy = 0;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_UART_TxCpltCallback+0x18>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	200002f4 	.word	0x200002f4

080039c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2 && UART_newMessage != 1 && Init_Done == 1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <HAL_UART_RxCpltCallback+0xc0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d151      	bne.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_UART_RxCpltCallback+0xc4>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d04d      	beq.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_UART_RxCpltCallback+0xc8>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d149      	bne.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_UART_RxCpltCallback+0xcc>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b0a      	cmp	r3, #10
 80039f0:	d11a      	bne.n	8003a28 <HAL_UART_RxCpltCallback+0x60>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 80039f2:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_UART_RxCpltCallback+0xd0>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d112      	bne.n	8003a20 <HAL_UART_RxCpltCallback+0x58>
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	5e9b      	ldrsh	r3, [r3, r2]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_UART_RxCpltCallback+0x58>
			{
				rxString[UART2_rxindex] = 0;
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	5e9b      	ldrsh	r3, [r3, r2]
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_UART_RxCpltCallback+0xd8>)
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <HAL_UART_RxCpltCallback+0xc4>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]



	}

}
 8003a1e:	e02e      	b.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 8003a20:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <HAL_UART_RxCpltCallback+0xd0>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
}
 8003a26:	e02a      	b.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_UART_RxCpltCallback+0xcc>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b0d      	cmp	r3, #13
 8003a2e:	d026      	beq.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_UART_RxCpltCallback+0xd0>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d122      	bne.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	5e9b      	ldrsh	r3, [r3, r2]
 8003a3e:	001a      	movs	r2, r3
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_UART_RxCpltCallback+0xcc>)
 8003a42:	7819      	ldrb	r1, [r3, #0]
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_UART_RxCpltCallback+0xd8>)
 8003a46:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	5e9b      	ldrsh	r3, [r3, r2]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a58:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	5e9b      	ldrsh	r3, [r3, r2]
 8003a60:	2b63      	cmp	r3, #99	; 0x63
 8003a62:	dd0c      	ble.n	8003a7e <HAL_UART_RxCpltCallback+0xb6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_UART_RxCpltCallback+0xd0>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_UART_RxCpltCallback+0xd4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	5e9b      	ldrsh	r3, [r3, r2]
 8003a76:	001a      	movs	r2, r3
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_UART_RxCpltCallback+0xd8>)
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	40004400 	.word	0x40004400
 8003a8c:	2000028d 	.word	0x2000028d
 8003a90:	20000300 	.word	0x20000300
 8003a94:	2000028c 	.word	0x2000028c
 8003a98:	20000368 	.word	0x20000368
 8003a9c:	2000036a 	.word	0x2000036a
 8003aa0:	20000290 	.word	0x20000290

08003aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa8:	b672      	cpsid	i
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aac:	e7fe      	b.n	8003aac <Error_Handler+0x8>
	...

08003ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_MspInit+0x44>)
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_MspInit+0x44>)
 8003abc:	2101      	movs	r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	619a      	str	r2, [r3, #24]
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_MspInit+0x44>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	4013      	ands	r3, r2
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_MspInit+0x44>)
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_MspInit+0x44>)
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	0549      	lsls	r1, r1, #21
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	61da      	str	r2, [r3, #28]
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_MspInit+0x44>)
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	055b      	lsls	r3, r3, #21
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000

08003af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <HAL_TIM_Base_MspInit+0x70>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10e      	bne.n	8003b28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_TIM_Base_MspInit+0x74>)
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_TIM_Base_MspInit+0x74>)
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0109      	lsls	r1, r1, #4
 8003b14:	430a      	orrs	r2, r1
 8003b16:	619a      	str	r2, [r3, #24]
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_TIM_Base_MspInit+0x74>)
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003b26:	e01a      	b.n	8003b5e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIM_Base_MspInit+0x78>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d115      	bne.n	8003b5e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_TIM_Base_MspInit+0x74>)
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_TIM_Base_MspInit+0x74>)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0249      	lsls	r1, r1, #9
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_TIM_Base_MspInit+0x74>)
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	025b      	lsls	r3, r3, #9
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2014      	movs	r0, #20
 8003b54:	f000 fc10 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003b58:	2014      	movs	r0, #20
 8003b5a:	f000 fc22 	bl	80043a2 <HAL_NVIC_EnableIRQ>
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b004      	add	sp, #16
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40014000 	.word	0x40014000

08003b74 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b08b      	sub	sp, #44	; 0x2c
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	2414      	movs	r4, #20
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	0018      	movs	r0, r3
 8003b82:	2314      	movs	r3, #20
 8003b84:	001a      	movs	r2, r3
 8003b86:	2100      	movs	r1, #0
 8003b88:	f004 fc42 	bl	8008410 <memset>
  if(htim_ic->Instance==TIM3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a31      	ldr	r2, [pc, #196]	; (8003c58 <HAL_TIM_IC_MspInit+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d15b      	bne.n	8003c4e <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bae:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	02c9      	lsls	r1, r1, #11
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	02db      	lsls	r3, r3, #11
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0309      	lsls	r1, r1, #12
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	615a      	str	r2, [r3, #20]
 8003bd8:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_TIM_IC_MspInit+0xe8>)
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	031b      	lsls	r3, r3, #12
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	2221      	movs	r2, #33	; 0x21
 8003bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	2202      	movs	r2, #2
 8003bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf2:	193b      	adds	r3, r7, r4
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	2201      	movs	r2, #1
 8003c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <HAL_TIM_IC_MspInit+0xec>)
 8003c08:	0019      	movs	r1, r3
 8003c0a:	0010      	movs	r0, r2
 8003c0c:	f000 fdfc 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003c10:	0021      	movs	r1, r4
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2290      	movs	r2, #144	; 0x90
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2201      	movs	r2, #1
 8003c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <HAL_TIM_IC_MspInit+0xf0>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	0010      	movs	r0, r2
 8003c3a:	f000 fde5 	bl	8004808 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2101      	movs	r1, #1
 8003c42:	2010      	movs	r0, #16
 8003c44:	f000 fb98 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c48:	2010      	movs	r0, #16
 8003c4a:	f000 fbaa 	bl	80043a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b00b      	add	sp, #44	; 0x2c
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	48000400 	.word	0x48000400
 8003c64:	48000800 	.word	0x48000800

08003c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b08b      	sub	sp, #44	; 0x2c
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	2414      	movs	r4, #20
 8003c72:	193b      	adds	r3, r7, r4
 8003c74:	0018      	movs	r0, r3
 8003c76:	2314      	movs	r3, #20
 8003c78:	001a      	movs	r2, r3
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	f004 fbc8 	bl	8008410 <memset>
  if(htim->Instance==TIM1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2b      	ldr	r2, [pc, #172]	; (8003d34 <HAL_TIM_MspPostInit+0xcc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d126      	bne.n	8003cd8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <HAL_TIM_MspPostInit+0xd0>)
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_TIM_MspPostInit+0xd0>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0289      	lsls	r1, r1, #10
 8003c94:	430a      	orrs	r2, r1
 8003c96:	615a      	str	r2, [r3, #20]
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_TIM_MspPostInit+0xd0>)
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	029b      	lsls	r3, r3, #10
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003ca6:	193b      	adds	r3, r7, r4
 8003ca8:	22f0      	movs	r2, #240	; 0xf0
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	0021      	movs	r1, r4
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc8:	187a      	adds	r2, r7, r1
 8003cca:	2390      	movs	r3, #144	; 0x90
 8003ccc:	05db      	lsls	r3, r3, #23
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 fd99 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003cd6:	e029      	b.n	8003d2c <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_TIM_MspPostInit+0xd4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d124      	bne.n	8003d2c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <HAL_TIM_MspPostInit+0xd0>)
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_TIM_MspPostInit+0xd0>)
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	02c9      	lsls	r1, r1, #11
 8003cec:	430a      	orrs	r2, r1
 8003cee:	615a      	str	r2, [r3, #20]
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_TIM_MspPostInit+0xd0>)
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	02db      	lsls	r3, r3, #11
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003cfe:	2114      	movs	r1, #20
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	22c0      	movs	r2, #192	; 0xc0
 8003d04:	0212      	lsls	r2, r2, #8
 8003d06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	2200      	movs	r2, #0
 8003d12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_TIM_MspPostInit+0xd8>)
 8003d24:	0019      	movs	r1, r3
 8003d26:	0010      	movs	r0, r2
 8003d28:	f000 fd6e 	bl	8004808 <HAL_GPIO_Init>
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b00b      	add	sp, #44	; 0x2c
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	48000400 	.word	0x48000400

08003d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b08b      	sub	sp, #44	; 0x2c
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	2414      	movs	r4, #20
 8003d4e:	193b      	adds	r3, r7, r4
 8003d50:	0018      	movs	r0, r3
 8003d52:	2314      	movs	r3, #20
 8003d54:	001a      	movs	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f004 fb5a 	bl	8008410 <memset>
  if(huart->Instance==USART2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a47      	ldr	r2, [pc, #284]	; (8003e80 <HAL_UART_MspInit+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d000      	beq.n	8003d68 <HAL_UART_MspInit+0x24>
 8003d66:	e086      	b.n	8003e76 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d68:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <HAL_UART_MspInit+0x140>)
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_UART_MspInit+0x140>)
 8003d6e:	2180      	movs	r1, #128	; 0x80
 8003d70:	0289      	lsls	r1, r1, #10
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_UART_MspInit+0x140>)
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	029b      	lsls	r3, r3, #10
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_UART_MspInit+0x140>)
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <HAL_UART_MspInit+0x140>)
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0289      	lsls	r1, r1, #10
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	615a      	str	r2, [r3, #20]
 8003d92:	4b3c      	ldr	r3, [pc, #240]	; (8003e84 <HAL_UART_MspInit+0x140>)
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	029b      	lsls	r3, r3, #10
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003da0:	0021      	movs	r1, r4
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	220c      	movs	r2, #12
 8003da6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	2202      	movs	r2, #2
 8003dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	2200      	movs	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2203      	movs	r2, #3
 8003db8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc0:	187a      	adds	r2, r7, r1
 8003dc2:	2390      	movs	r3, #144	; 0x90
 8003dc4:	05db      	lsls	r3, r3, #23
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 fd1d 	bl	8004808 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8003dce:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <HAL_UART_MspInit+0x148>)
 8003dd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dda:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003de0:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003df4:	2220      	movs	r2, #32
 8003df6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 faeb 	bl	80043dc <HAL_DMA_Init>
 8003e06:	1e03      	subs	r3, r0, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003e0a:	f7ff fe4b 	bl	8003aa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003e12:	671a      	str	r2, [r3, #112]	; 0x70
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_UART_MspInit+0x144>)
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_UART_MspInit+0x150>)
 8003e1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e22:	2210      	movs	r2, #16
 8003e24:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e32:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fac5 	bl	80043dc <HAL_DMA_Init>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003e56:	f7ff fe25 	bl	8003aa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_UART_MspInit+0x14c>)
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	201c      	movs	r0, #28
 8003e6c:	f000 fa84 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e70:	201c      	movs	r0, #28
 8003e72:	f000 fa96 	bl	80043a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b00b      	add	sp, #44	; 0x2c
 8003e7c:	bd90      	pop	{r4, r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40004400 	.word	0x40004400
 8003e84:	40021000 	.word	0x40021000
 8003e88:	20000380 	.word	0x20000380
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	20000454 	.word	0x20000454
 8003e94:	40020044 	.word	0x40020044

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <NMI_Handler+0x4>

08003e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x4>

08003ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ebc:	f000 f970 	bl	80041a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 fbaf 	bl	8004632 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <DMA1_Channel4_5_IRQHandler+0x20>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fbab 	bl	8004632 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	20000454 	.word	0x20000454
 8003ee8:	20000380 	.word	0x20000380

08003eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <TIM3_IRQHandler+0x14>)
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f001 fef8 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	2000040c 	.word	0x2000040c

08003f04 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <TIM15_IRQHandler+0x14>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f001 feec 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	200003c4 	.word	0x200003c4

08003f1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <USART2_IRQHandler+0x14>)
 8003f22:	0018      	movs	r0, r3
 8003f24:	f003 f998 	bl	8007258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	20000510 	.word	0x20000510

08003f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
	return 1;
 8003f38:	2301      	movs	r3, #1
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_kill>:

int _kill(int pid, int sig)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f4a:	f004 fa37 	bl	80083bc <__errno>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	2216      	movs	r2, #22
 8003f52:	601a      	str	r2, [r3, #0]
	return -1;
 8003f54:	2301      	movs	r3, #1
 8003f56:	425b      	negs	r3, r3
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_exit>:

void _exit (int status)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425a      	negs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	0011      	movs	r1, r2
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff ffe5 	bl	8003f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f76:	e7fe      	b.n	8003f76 <_exit+0x16>

08003f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e00a      	b.n	8003fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f8a:	e000      	b.n	8003f8e <_read+0x16>
 8003f8c:	bf00      	nop
 8003f8e:	0001      	movs	r1, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	60ba      	str	r2, [r7, #8]
 8003f96:	b2ca      	uxtb	r2, r1
 8003f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	dbf0      	blt.n	8003f8a <_read+0x12>
	}

return len;
 8003fa8:	687b      	ldr	r3, [r7, #4]
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b006      	add	sp, #24
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b086      	sub	sp, #24
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e009      	b.n	8003fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	60ba      	str	r2, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	e000      	b.n	8003fd2 <_write+0x20>
 8003fd0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	dbf1      	blt.n	8003fc4 <_write+0x12>
	}
	return len;
 8003fe0:	687b      	ldr	r3, [r7, #4]
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_close>:

int _close(int file)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	425b      	negs	r3, r3
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	0192      	lsls	r2, r2, #6
 800400e:	605a      	str	r2, [r3, #4]
	return 0;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}

0800401a <_isatty>:

int _isatty(int file)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	return 1;
 8004022:	2301      	movs	r3, #1
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}

0800402c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
	return 0;
 8004038:	2300      	movs	r3, #0
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b004      	add	sp, #16
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <_sbrk+0x5c>)
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <_sbrk+0x60>)
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <_sbrk+0x64>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <_sbrk+0x64>)
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <_sbrk+0x68>)
 8004064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <_sbrk+0x64>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	18d3      	adds	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	429a      	cmp	r2, r3
 8004072:	d207      	bcs.n	8004084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004074:	f004 f9a2 	bl	80083bc <__errno>
 8004078:	0003      	movs	r3, r0
 800407a:	220c      	movs	r2, #12
 800407c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800407e:	2301      	movs	r3, #1
 8004080:	425b      	negs	r3, r3
 8004082:	e009      	b.n	8004098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <_sbrk+0x64>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <_sbrk+0x64>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	18d2      	adds	r2, r2, r3
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <_sbrk+0x64>)
 8004094:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004096:	68fb      	ldr	r3, [r7, #12]
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b006      	add	sp, #24
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20004000 	.word	0x20004000
 80040a4:	00000400 	.word	0x00000400
 80040a8:	2000036c 	.word	0x2000036c
 80040ac:	200005c0 	.word	0x200005c0

080040b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040c0:	480d      	ldr	r0, [pc, #52]	; (80040f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80040c2:	490e      	ldr	r1, [pc, #56]	; (80040fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <LoopForever+0xe>)
  movs r3, #0
 80040c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c8:	e002      	b.n	80040d0 <LoopCopyDataInit>

080040ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ce:	3304      	adds	r3, #4

080040d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040d4:	d3f9      	bcc.n	80040ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040d8:	4c0b      	ldr	r4, [pc, #44]	; (8004108 <LoopForever+0x16>)
  movs r3, #0
 80040da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040dc:	e001      	b.n	80040e2 <LoopFillZerobss>

080040de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040e0:	3204      	adds	r2, #4

080040e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040e4:	d3fb      	bcc.n	80040de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040e6:	f7ff ffe3 	bl	80040b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80040ea:	f004 f96d 	bl	80083c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040ee:	f7fe fad7 	bl	80026a0 <main>

080040f2 <LoopForever>:

LoopForever:
    b LoopForever
 80040f2:	e7fe      	b.n	80040f2 <LoopForever>
  ldr   r0, =_estack
 80040f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80040f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004100:	0800dce4 	.word	0x0800dce4
  ldr r2, =_sbss
 8004104:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004108:	200005c0 	.word	0x200005c0

0800410c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800410c:	e7fe      	b.n	800410c <ADC1_IRQHandler>
	...

08004110 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_Init+0x24>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_Init+0x24>)
 800411a:	2110      	movs	r1, #16
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004120:	2003      	movs	r0, #3
 8004122:	f000 f809 	bl	8004138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004126:	f7ff fcc3 	bl	8003ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	40022000 	.word	0x40022000

08004138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <HAL_InitTick+0x5c>)
 8004142:	681c      	ldr	r4, [r3, #0]
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_InitTick+0x60>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	0019      	movs	r1, r3
 800414a:	23fa      	movs	r3, #250	; 0xfa
 800414c:	0098      	lsls	r0, r3, #2
 800414e:	f7fc f801 	bl	8000154 <__udivsi3>
 8004152:	0003      	movs	r3, r0
 8004154:	0019      	movs	r1, r3
 8004156:	0020      	movs	r0, r4
 8004158:	f7fb fffc 	bl	8000154 <__udivsi3>
 800415c:	0003      	movs	r3, r0
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f92f 	bl	80043c2 <HAL_SYSTICK_Config>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d001      	beq.n	800416c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e00f      	b.n	800418c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d80b      	bhi.n	800418a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	2301      	movs	r3, #1
 8004176:	425b      	negs	r3, r3
 8004178:	2200      	movs	r2, #0
 800417a:	0018      	movs	r0, r3
 800417c:	f000 f8fc 	bl	8004378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_InitTick+0x64>)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b003      	add	sp, #12
 8004192:	bd90      	pop	{r4, r7, pc}
 8004194:	20000000 	.word	0x20000000
 8004198:	20000008 	.word	0x20000008
 800419c:	20000004 	.word	0x20000004

080041a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_IncTick+0x1c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	001a      	movs	r2, r3
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_IncTick+0x20>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	18d2      	adds	r2, r2, r3
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <HAL_IncTick+0x20>)
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	20000008 	.word	0x20000008
 80041c0:	200005ac 	.word	0x200005ac

080041c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  return uwTick;
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <HAL_GetTick+0x10>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	200005ac 	.word	0x200005ac

080041d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	d005      	beq.n	80041fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_Delay+0x44>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	001a      	movs	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	f7ff ffe0 	bl	80041c4 <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d8f7      	bhi.n	8004200 <HAL_Delay+0x28>
  {
  }
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	20000008 	.word	0x20000008

08004220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	0002      	movs	r2, r0
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b7f      	cmp	r3, #127	; 0x7f
 8004232:	d809      	bhi.n	8004248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	001a      	movs	r2, r3
 800423a:	231f      	movs	r3, #31
 800423c:	401a      	ands	r2, r3
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <__NVIC_EnableIRQ+0x30>)
 8004240:	2101      	movs	r1, #1
 8004242:	4091      	lsls	r1, r2
 8004244:	000a      	movs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
  }
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	0002      	movs	r2, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	1dfb      	adds	r3, r7, #7
 8004260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004262:	1dfb      	adds	r3, r7, #7
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b7f      	cmp	r3, #127	; 0x7f
 8004268:	d828      	bhi.n	80042bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800426a:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <__NVIC_SetPriority+0xd4>)
 800426c:	1dfb      	adds	r3, r7, #7
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b25b      	sxtb	r3, r3
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	33c0      	adds	r3, #192	; 0xc0
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	589b      	ldr	r3, [r3, r2]
 800427a:	1dfa      	adds	r2, r7, #7
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	0011      	movs	r1, r2
 8004280:	2203      	movs	r2, #3
 8004282:	400a      	ands	r2, r1
 8004284:	00d2      	lsls	r2, r2, #3
 8004286:	21ff      	movs	r1, #255	; 0xff
 8004288:	4091      	lsls	r1, r2
 800428a:	000a      	movs	r2, r1
 800428c:	43d2      	mvns	r2, r2
 800428e:	401a      	ands	r2, r3
 8004290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	019b      	lsls	r3, r3, #6
 8004296:	22ff      	movs	r2, #255	; 0xff
 8004298:	401a      	ands	r2, r3
 800429a:	1dfb      	adds	r3, r7, #7
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	0018      	movs	r0, r3
 80042a0:	2303      	movs	r3, #3
 80042a2:	4003      	ands	r3, r0
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042a8:	481f      	ldr	r0, [pc, #124]	; (8004328 <__NVIC_SetPriority+0xd4>)
 80042aa:	1dfb      	adds	r3, r7, #7
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	430a      	orrs	r2, r1
 80042b4:	33c0      	adds	r3, #192	; 0xc0
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80042ba:	e031      	b.n	8004320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <__NVIC_SetPriority+0xd8>)
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	0019      	movs	r1, r3
 80042c4:	230f      	movs	r3, #15
 80042c6:	400b      	ands	r3, r1
 80042c8:	3b08      	subs	r3, #8
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	3306      	adds	r3, #6
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	3304      	adds	r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	1dfa      	adds	r2, r7, #7
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	0011      	movs	r1, r2
 80042dc:	2203      	movs	r2, #3
 80042de:	400a      	ands	r2, r1
 80042e0:	00d2      	lsls	r2, r2, #3
 80042e2:	21ff      	movs	r1, #255	; 0xff
 80042e4:	4091      	lsls	r1, r2
 80042e6:	000a      	movs	r2, r1
 80042e8:	43d2      	mvns	r2, r2
 80042ea:	401a      	ands	r2, r3
 80042ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	22ff      	movs	r2, #255	; 0xff
 80042f4:	401a      	ands	r2, r3
 80042f6:	1dfb      	adds	r3, r7, #7
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	0018      	movs	r0, r3
 80042fc:	2303      	movs	r3, #3
 80042fe:	4003      	ands	r3, r0
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004304:	4809      	ldr	r0, [pc, #36]	; (800432c <__NVIC_SetPriority+0xd8>)
 8004306:	1dfb      	adds	r3, r7, #7
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	001c      	movs	r4, r3
 800430c:	230f      	movs	r3, #15
 800430e:	4023      	ands	r3, r4
 8004310:	3b08      	subs	r3, #8
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	430a      	orrs	r2, r1
 8004316:	3306      	adds	r3, #6
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	18c3      	adds	r3, r0, r3
 800431c:	3304      	adds	r3, #4
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b003      	add	sp, #12
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	045b      	lsls	r3, r3, #17
 8004340:	429a      	cmp	r2, r3
 8004342:	d301      	bcc.n	8004348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004344:	2301      	movs	r3, #1
 8004346:	e010      	b.n	800436a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <SysTick_Config+0x44>)
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	3a01      	subs	r2, #1
 800434e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004350:	2301      	movs	r3, #1
 8004352:	425b      	negs	r3, r3
 8004354:	2103      	movs	r1, #3
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff ff7c 	bl	8004254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <SysTick_Config+0x44>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <SysTick_Config+0x44>)
 8004364:	2207      	movs	r2, #7
 8004366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b002      	add	sp, #8
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	e000e010 	.word	0xe000e010

08004378 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	210f      	movs	r1, #15
 8004384:	187b      	adds	r3, r7, r1
 8004386:	1c02      	adds	r2, r0, #0
 8004388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	187b      	adds	r3, r7, r1
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b25b      	sxtb	r3, r3
 8004392:	0011      	movs	r1, r2
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff ff5d 	bl	8004254 <__NVIC_SetPriority>
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	0002      	movs	r2, r0
 80043aa:	1dfb      	adds	r3, r7, #7
 80043ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ae:	1dfb      	adds	r3, r7, #7
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff ff33 	bl	8004220 <__NVIC_EnableIRQ>
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b002      	add	sp, #8
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7ff ffaf 	bl	8004330 <SysTick_Config>
 80043d2:	0003      	movs	r3, r0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e036      	b.n	8004460 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2221      	movs	r2, #33	; 0x21
 80043f6:	2102      	movs	r1, #2
 80043f8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_DMA_Init+0x8c>)
 8004406:	4013      	ands	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f000 f9c4 	bl	80047d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2221      	movs	r2, #33	; 0x21
 8004452:	2101      	movs	r1, #1
 8004454:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	2100      	movs	r1, #0
 800445c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}  
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b004      	add	sp, #16
 8004466:	bd80      	pop	{r7, pc}
 8004468:	ffffc00f 	.word	0xffffc00f

0800446c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800447a:	2317      	movs	r3, #23
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	5c9b      	ldrb	r3, [r3, r2]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_DMA_Start_IT+0x24>
 800448c:	2302      	movs	r3, #2
 800448e:	e04f      	b.n	8004530 <HAL_DMA_Start_IT+0xc4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2221      	movs	r2, #33	; 0x21
 800449c:	5c9b      	ldrb	r3, [r3, r2]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d13a      	bne.n	800451a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2221      	movs	r2, #33	; 0x21
 80044a8:	2102      	movs	r1, #2
 80044aa:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	438a      	bics	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f954 	bl	8004776 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	210e      	movs	r1, #14
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e00f      	b.n	8004508 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	210a      	movs	r1, #10
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2104      	movs	r1, #4
 8004504:	438a      	bics	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2101      	movs	r1, #1
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e007      	b.n	800452a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004522:	2317      	movs	r3, #23
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2202      	movs	r2, #2
 8004528:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800452a:	2317      	movs	r3, #23
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	781b      	ldrb	r3, [r3, #0]
} 
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b006      	add	sp, #24
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2221      	movs	r2, #33	; 0x21
 8004544:	5c9b      	ldrb	r3, [r3, r2]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d008      	beq.n	800455e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2204      	movs	r2, #4
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e020      	b.n	80045a0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	210e      	movs	r1, #14
 800456a:	438a      	bics	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	438a      	bics	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	2101      	movs	r1, #1
 8004588:	4091      	lsls	r1, r2
 800458a:	000a      	movs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2221      	movs	r2, #33	; 0x21
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	2100      	movs	r1, #0
 800459c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b0:	210f      	movs	r1, #15
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2221      	movs	r2, #33	; 0x21
 80045bc:	5c9b      	ldrb	r3, [r3, r2]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d006      	beq.n	80045d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2204      	movs	r2, #4
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e028      	b.n	8004624 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	210e      	movs	r1, #14
 80045de:	438a      	bics	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	438a      	bics	r2, r1
 80045f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2101      	movs	r1, #1
 80045fc:	4091      	lsls	r1, r2
 80045fe:	000a      	movs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2221      	movs	r2, #33	; 0x21
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	0010      	movs	r0, r2
 8004622:	4798      	blx	r3
    } 
  }
  return status;
 8004624:	230f      	movs	r3, #15
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2204      	movs	r2, #4
 8004650:	409a      	lsls	r2, r3
 8004652:	0013      	movs	r3, r2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4013      	ands	r3, r2
 8004658:	d024      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x72>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2204      	movs	r2, #4
 800465e:	4013      	ands	r3, r2
 8004660:	d020      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2220      	movs	r2, #32
 800466a:	4013      	ands	r3, r2
 800466c:	d107      	bne.n	800467e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2104      	movs	r1, #4
 800467a:	438a      	bics	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	2104      	movs	r1, #4
 8004688:	4091      	lsls	r1, r2
 800468a:	000a      	movs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <HAL_DMA_IRQHandler+0x66>
 8004696:	e06a      	b.n	800476e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	0010      	movs	r0, r2
 80046a0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80046a2:	e064      	b.n	800476e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	2202      	movs	r2, #2
 80046aa:	409a      	lsls	r2, r3
 80046ac:	0013      	movs	r3, r2
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4013      	ands	r3, r2
 80046b2:	d02b      	beq.n	800470c <HAL_DMA_IRQHandler+0xda>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2202      	movs	r2, #2
 80046b8:	4013      	ands	r3, r2
 80046ba:	d027      	beq.n	800470c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	d10b      	bne.n	80046e0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	210a      	movs	r1, #10
 80046d4:	438a      	bics	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2221      	movs	r2, #33	; 0x21
 80046dc:	2101      	movs	r1, #1
 80046de:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	2102      	movs	r1, #2
 80046ea:	4091      	lsls	r1, r2
 80046ec:	000a      	movs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	2100      	movs	r1, #0
 80046f6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d036      	beq.n	800476e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	0010      	movs	r0, r2
 8004708:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800470a:	e030      	b.n	800476e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2208      	movs	r2, #8
 8004712:	409a      	lsls	r2, r3
 8004714:	0013      	movs	r3, r2
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	d028      	beq.n	800476e <HAL_DMA_IRQHandler+0x13c>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2208      	movs	r2, #8
 8004720:	4013      	ands	r3, r2
 8004722:	d024      	beq.n	800476e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	210e      	movs	r1, #14
 8004730:	438a      	bics	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	2101      	movs	r1, #1
 800473e:	4091      	lsls	r1, r2
 8004740:	000a      	movs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2221      	movs	r2, #33	; 0x21
 800474e:	2101      	movs	r1, #1
 8004750:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	0010      	movs	r0, r2
 800476a:	4798      	blx	r3
    }
   }
}  
 800476c:	e7ff      	b.n	800476e <HAL_DMA_IRQHandler+0x13c>
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}

08004776 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	2101      	movs	r1, #1
 800478e:	4091      	lsls	r1, r2
 8004790:	000a      	movs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d108      	bne.n	80047b6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047b4:	e007      	b.n	80047c6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b004      	add	sp, #16
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a08      	ldr	r2, [pc, #32]	; (8004800 <DMA_CalcBaseAndBitshift+0x30>)
 80047de:	4694      	mov	ip, r2
 80047e0:	4463      	add	r3, ip
 80047e2:	2114      	movs	r1, #20
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fb fcb5 	bl	8000154 <__udivsi3>
 80047ea:	0003      	movs	r3, r0
 80047ec:	009a      	lsls	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a03      	ldr	r2, [pc, #12]	; (8004804 <DMA_CalcBaseAndBitshift+0x34>)
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	bffdfff8 	.word	0xbffdfff8
 8004804:	40020000 	.word	0x40020000

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004816:	e14f      	b.n	8004ab8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4091      	lsls	r1, r2
 8004822:	000a      	movs	r2, r1
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d100      	bne.n	8004830 <HAL_GPIO_Init+0x28>
 800482e:	e140      	b.n	8004ab2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2203      	movs	r2, #3
 8004836:	4013      	ands	r3, r2
 8004838:	2b01      	cmp	r3, #1
 800483a:	d005      	beq.n	8004848 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2203      	movs	r2, #3
 8004842:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004844:	2b02      	cmp	r3, #2
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	409a      	lsls	r2, r3
 8004856:	0013      	movs	r3, r2
 8004858:	43da      	mvns	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	409a      	lsls	r2, r3
 800486a:	0013      	movs	r3, r2
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	409a      	lsls	r2, r3
 8004884:	0013      	movs	r3, r2
 8004886:	43da      	mvns	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	2201      	movs	r2, #1
 8004896:	401a      	ands	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	409a      	lsls	r2, r3
 800489c:	0013      	movs	r3, r2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2203      	movs	r2, #3
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d017      	beq.n	80048e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2203      	movs	r2, #3
 80048c2:	409a      	lsls	r2, r3
 80048c4:	0013      	movs	r3, r2
 80048c6:	43da      	mvns	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	409a      	lsls	r2, r3
 80048d8:	0013      	movs	r3, r2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2203      	movs	r2, #3
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d123      	bne.n	800493a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	58d3      	ldr	r3, [r2, r3]
 80048fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2207      	movs	r2, #7
 8004904:	4013      	ands	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	220f      	movs	r2, #15
 800490a:	409a      	lsls	r2, r3
 800490c:	0013      	movs	r3, r2
 800490e:	43da      	mvns	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2107      	movs	r1, #7
 800491e:	400b      	ands	r3, r1
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	409a      	lsls	r2, r3
 8004924:	0013      	movs	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	08da      	lsrs	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3208      	adds	r2, #8
 8004934:	0092      	lsls	r2, r2, #2
 8004936:	6939      	ldr	r1, [r7, #16]
 8004938:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	409a      	lsls	r2, r3
 8004948:	0013      	movs	r3, r2
 800494a:	43da      	mvns	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2203      	movs	r2, #3
 8004958:	401a      	ands	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	409a      	lsls	r2, r3
 8004960:	0013      	movs	r3, r2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	23c0      	movs	r3, #192	; 0xc0
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	4013      	ands	r3, r2
 8004978:	d100      	bne.n	800497c <HAL_GPIO_Init+0x174>
 800497a:	e09a      	b.n	8004ab2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497c:	4b54      	ldr	r3, [pc, #336]	; (8004ad0 <HAL_GPIO_Init+0x2c8>)
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_GPIO_Init+0x2c8>)
 8004982:	2101      	movs	r1, #1
 8004984:	430a      	orrs	r2, r1
 8004986:	619a      	str	r2, [r3, #24]
 8004988:	4b51      	ldr	r3, [pc, #324]	; (8004ad0 <HAL_GPIO_Init+0x2c8>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2201      	movs	r2, #1
 800498e:	4013      	ands	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004994:	4a4f      	ldr	r2, [pc, #316]	; (8004ad4 <HAL_GPIO_Init+0x2cc>)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	589b      	ldr	r3, [r3, r2]
 80049a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2203      	movs	r2, #3
 80049a6:	4013      	ands	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	220f      	movs	r2, #15
 80049ac:	409a      	lsls	r2, r3
 80049ae:	0013      	movs	r3, r2
 80049b0:	43da      	mvns	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	2390      	movs	r3, #144	; 0x90
 80049bc:	05db      	lsls	r3, r3, #23
 80049be:	429a      	cmp	r2, r3
 80049c0:	d013      	beq.n	80049ea <HAL_GPIO_Init+0x1e2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a44      	ldr	r2, [pc, #272]	; (8004ad8 <HAL_GPIO_Init+0x2d0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00d      	beq.n	80049e6 <HAL_GPIO_Init+0x1de>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a43      	ldr	r2, [pc, #268]	; (8004adc <HAL_GPIO_Init+0x2d4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <HAL_GPIO_Init+0x1da>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a42      	ldr	r2, [pc, #264]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_GPIO_Init+0x1d6>
 80049da:	2303      	movs	r3, #3
 80049dc:	e006      	b.n	80049ec <HAL_GPIO_Init+0x1e4>
 80049de:	2305      	movs	r3, #5
 80049e0:	e004      	b.n	80049ec <HAL_GPIO_Init+0x1e4>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e002      	b.n	80049ec <HAL_GPIO_Init+0x1e4>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x1e4>
 80049ea:	2300      	movs	r3, #0
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	2103      	movs	r1, #3
 80049f0:	400a      	ands	r2, r1
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4093      	lsls	r3, r2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049fc:	4935      	ldr	r1, [pc, #212]	; (8004ad4 <HAL_GPIO_Init+0x2cc>)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	43da      	mvns	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	025b      	lsls	r3, r3, #9
 8004a22:	4013      	ands	r3, r2
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	029b      	lsls	r3, r3, #10
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	43da      	mvns	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	035b      	lsls	r3, r3, #13
 8004a76:	4013      	ands	r3, r2
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a82:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a88:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	43da      	mvns	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	039b      	lsls	r3, r3, #14
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	40da      	lsrs	r2, r3
 8004ac0:	1e13      	subs	r3, r2, #0
 8004ac2:	d000      	beq.n	8004ac6 <HAL_GPIO_Init+0x2be>
 8004ac4:	e6a8      	b.n	8004818 <HAL_GPIO_Init+0x10>
  } 
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	48000400 	.word	0x48000400
 8004adc:	48000800 	.word	0x48000800
 8004ae0:	48000c00 	.word	0x48000c00
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	0008      	movs	r0, r1
 8004af2:	0011      	movs	r1, r2
 8004af4:	1cbb      	adds	r3, r7, #2
 8004af6:	1c02      	adds	r2, r0, #0
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	1c7b      	adds	r3, r7, #1
 8004afc:	1c0a      	adds	r2, r1, #0
 8004afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b00:	1c7b      	adds	r3, r7, #1
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b08:	1cbb      	adds	r3, r7, #2
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b10:	e003      	b.n	8004b1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b12:	1cbb      	adds	r3, r7, #2
 8004b14:	881a      	ldrh	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b002      	add	sp, #8
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e305      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d100      	bne.n	8004b42 <HAL_RCC_OscConfig+0x1e>
 8004b40:	e08d      	b.n	8004c5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b42:	4bc5      	ldr	r3, [pc, #788]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	220c      	movs	r2, #12
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d00e      	beq.n	8004b6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b4e:	4bc2      	ldr	r3, [pc, #776]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	220c      	movs	r2, #12
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d116      	bne.n	8004b88 <HAL_RCC_OscConfig+0x64>
 8004b5a:	4bbf      	ldr	r3, [pc, #764]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	401a      	ands	r2, r3
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	025b      	lsls	r3, r3, #9
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	4bba      	ldr	r3, [pc, #744]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	4013      	ands	r3, r2
 8004b76:	d100      	bne.n	8004b7a <HAL_RCC_OscConfig+0x56>
 8004b78:	e070      	b.n	8004c5c <HAL_RCC_OscConfig+0x138>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d000      	beq.n	8004b84 <HAL_RCC_OscConfig+0x60>
 8004b82:	e06b      	b.n	8004c5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e2dc      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x7c>
 8004b90:	4bb1      	ldr	r3, [pc, #708]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4bb0      	ldr	r3, [pc, #704]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	0249      	lsls	r1, r1, #9
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e02f      	b.n	8004c00 <HAL_RCC_OscConfig+0xdc>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x9e>
 8004ba8:	4bab      	ldr	r3, [pc, #684]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4baa      	ldr	r3, [pc, #680]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bae:	49ab      	ldr	r1, [pc, #684]	; (8004e5c <HAL_RCC_OscConfig+0x338>)
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	4ba8      	ldr	r3, [pc, #672]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4ba7      	ldr	r3, [pc, #668]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bba:	49a9      	ldr	r1, [pc, #676]	; (8004e60 <HAL_RCC_OscConfig+0x33c>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e01e      	b.n	8004c00 <HAL_RCC_OscConfig+0xdc>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d10e      	bne.n	8004be8 <HAL_RCC_OscConfig+0xc4>
 8004bca:	4ba3      	ldr	r3, [pc, #652]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4ba2      	ldr	r3, [pc, #648]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	02c9      	lsls	r1, r1, #11
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	4b9f      	ldr	r3, [pc, #636]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b9e      	ldr	r3, [pc, #632]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	0249      	lsls	r1, r1, #9
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0xdc>
 8004be8:	4b9b      	ldr	r3, [pc, #620]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b9a      	ldr	r3, [pc, #616]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bee:	499b      	ldr	r1, [pc, #620]	; (8004e5c <HAL_RCC_OscConfig+0x338>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	4b98      	ldr	r3, [pc, #608]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b97      	ldr	r3, [pc, #604]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bfa:	4999      	ldr	r1, [pc, #612]	; (8004e60 <HAL_RCC_OscConfig+0x33c>)
 8004bfc:	400a      	ands	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d014      	beq.n	8004c32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7ff fadc 	bl	80041c4 <HAL_GetTick>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c12:	f7ff fad7 	bl	80041c4 <HAL_GetTick>
 8004c16:	0002      	movs	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b64      	cmp	r3, #100	; 0x64
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e28e      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c24:	4b8c      	ldr	r3, [pc, #560]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	029b      	lsls	r3, r3, #10
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0xee>
 8004c30:	e015      	b.n	8004c5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7ff fac7 	bl	80041c4 <HAL_GetTick>
 8004c36:	0003      	movs	r3, r0
 8004c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7ff fac2 	bl	80041c4 <HAL_GetTick>
 8004c40:	0002      	movs	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e279      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	4b82      	ldr	r3, [pc, #520]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	029b      	lsls	r3, r3, #10
 8004c56:	4013      	ands	r3, r2
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x118>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2202      	movs	r2, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d100      	bne.n	8004c6a <HAL_RCC_OscConfig+0x146>
 8004c68:	e06c      	b.n	8004d44 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c6a:	4b7b      	ldr	r3, [pc, #492]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	220c      	movs	r2, #12
 8004c70:	4013      	ands	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c74:	4b78      	ldr	r3, [pc, #480]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	220c      	movs	r2, #12
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d11f      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x19c>
 8004c80:	4b75      	ldr	r3, [pc, #468]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	23c0      	movs	r3, #192	; 0xc0
 8004c86:	025b      	lsls	r3, r3, #9
 8004c88:	401a      	ands	r2, r3
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b71      	ldr	r3, [pc, #452]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2202      	movs	r2, #2
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x184>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e24c      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b6b      	ldr	r3, [pc, #428]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	22f8      	movs	r2, #248	; 0xf8
 8004cae:	4393      	bics	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00da      	lsls	r2, r3, #3
 8004cb8:	4b67      	ldr	r3, [pc, #412]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e041      	b.n	8004d44 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d024      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7ff fa76 	bl	80041c4 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cde:	f7ff fa71 	bl	80041c4 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e228      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	4b59      	ldr	r3, [pc, #356]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d0f1      	beq.n	8004cde <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfa:	4b57      	ldr	r3, [pc, #348]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	22f8      	movs	r2, #248	; 0xf8
 8004d00:	4393      	bics	r3, r2
 8004d02:	0019      	movs	r1, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	00da      	lsls	r2, r3, #3
 8004d0a:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e018      	b.n	8004d44 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	4b51      	ldr	r3, [pc, #324]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d18:	2101      	movs	r1, #1
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1e:	f7ff fa51 	bl	80041c4 <HAL_GetTick>
 8004d22:	0003      	movs	r3, r0
 8004d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d28:	f7ff fa4c 	bl	80041c4 <HAL_GetTick>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e203      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	d1f1      	bne.n	8004d28 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d036      	beq.n	8004dbc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d019      	beq.n	8004d8a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5a:	4b3f      	ldr	r3, [pc, #252]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7ff fa2f 	bl	80041c4 <HAL_GetTick>
 8004d66:	0003      	movs	r3, r0
 8004d68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7ff fa2a 	bl	80041c4 <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1e1      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	d0f1      	beq.n	8004d6c <HAL_RCC_OscConfig+0x248>
 8004d88:	e018      	b.n	8004dbc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8a:	4b33      	ldr	r3, [pc, #204]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8e:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	438a      	bics	r2, r1
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7ff fa15 	bl	80041c4 <HAL_GetTick>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da0:	f7ff fa10 	bl	80041c4 <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e1c7      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2202      	movs	r2, #2
 8004db8:	4013      	ands	r3, r2
 8004dba:	d1f1      	bne.n	8004da0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d100      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x2a4>
 8004dc6:	e0b5      	b.n	8004f34 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc8:	201f      	movs	r0, #31
 8004dca:	183b      	adds	r3, r7, r0
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd0:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	055b      	lsls	r3, r3, #21
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d110      	bne.n	8004dfe <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004de2:	2180      	movs	r1, #128	; 0x80
 8004de4:	0549      	lsls	r1, r1, #21
 8004de6:	430a      	orrs	r2, r1
 8004de8:	61da      	str	r2, [r3, #28]
 8004dea:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	055b      	lsls	r3, r3, #21
 8004df2:	4013      	ands	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004df8:	183b      	adds	r3, r7, r0
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_RCC_OscConfig+0x340>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	d11a      	bne.n	8004e40 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <HAL_RCC_OscConfig+0x340>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <HAL_RCC_OscConfig+0x340>)
 8004e10:	2180      	movs	r1, #128	; 0x80
 8004e12:	0049      	lsls	r1, r1, #1
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e18:	f7ff f9d4 	bl	80041c4 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7ff f9cf 	bl	80041c4 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b64      	cmp	r3, #100	; 0x64
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e186      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x340>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10f      	bne.n	8004e68 <HAL_RCC_OscConfig+0x344>
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	621a      	str	r2, [r3, #32]
 8004e54:	e036      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3a0>
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	fffeffff 	.word	0xfffeffff
 8004e60:	fffbffff 	.word	0xfffbffff
 8004e64:	40007000 	.word	0x40007000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x366>
 8004e70:	4bb6      	ldr	r3, [pc, #728]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	4bb5      	ldr	r3, [pc, #724]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004e76:	2101      	movs	r1, #1
 8004e78:	438a      	bics	r2, r1
 8004e7a:	621a      	str	r2, [r3, #32]
 8004e7c:	4bb3      	ldr	r3, [pc, #716]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	4bb2      	ldr	r3, [pc, #712]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004e82:	2104      	movs	r1, #4
 8004e84:	438a      	bics	r2, r1
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	e01c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3a0>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x388>
 8004e92:	4bae      	ldr	r3, [pc, #696]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	4bad      	ldr	r3, [pc, #692]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004e98:	2104      	movs	r1, #4
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	621a      	str	r2, [r3, #32]
 8004e9e:	4bab      	ldr	r3, [pc, #684]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	4baa      	ldr	r3, [pc, #680]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	621a      	str	r2, [r3, #32]
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3a0>
 8004eac:	4ba7      	ldr	r3, [pc, #668]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	4ba6      	ldr	r3, [pc, #664]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	621a      	str	r2, [r3, #32]
 8004eb8:	4ba4      	ldr	r3, [pc, #656]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	4ba3      	ldr	r3, [pc, #652]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d014      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ecc:	f7ff f97a 	bl	80041c4 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	e009      	b.n	8004eea <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7ff f975 	bl	80041c4 <HAL_GetTick>
 8004eda:	0002      	movs	r2, r0
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	4a9b      	ldr	r2, [pc, #620]	; (8005150 <HAL_RCC_OscConfig+0x62c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e12b      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	4b98      	ldr	r3, [pc, #608]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3b2>
 8004ef4:	e013      	b.n	8004f1e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef6:	f7ff f965 	bl	80041c4 <HAL_GetTick>
 8004efa:	0003      	movs	r3, r0
 8004efc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	e009      	b.n	8004f14 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7ff f960 	bl	80041c4 <HAL_GetTick>
 8004f04:	0002      	movs	r2, r0
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4a91      	ldr	r2, [pc, #580]	; (8005150 <HAL_RCC_OscConfig+0x62c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e116      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f14:	4b8d      	ldr	r3, [pc, #564]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f1e:	231f      	movs	r3, #31
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b88      	ldr	r3, [pc, #544]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	4b87      	ldr	r3, [pc, #540]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f2e:	4989      	ldr	r1, [pc, #548]	; (8005154 <HAL_RCC_OscConfig+0x630>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d063      	beq.n	8005006 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d12a      	bne.n	8004f9c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f46:	4b81      	ldr	r3, [pc, #516]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4a:	4b80      	ldr	r3, [pc, #512]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004f52:	4b7e      	ldr	r3, [pc, #504]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f56:	4b7d      	ldr	r3, [pc, #500]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f58:	2101      	movs	r1, #1
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7ff f931 	bl	80041c4 <HAL_GetTick>
 8004f62:	0003      	movs	r3, r0
 8004f64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f68:	f7ff f92c 	bl	80041c4 <HAL_GetTick>
 8004f6c:	0002      	movs	r2, r0
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0e3      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f7a:	4b74      	ldr	r3, [pc, #464]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	2202      	movs	r2, #2
 8004f80:	4013      	ands	r3, r2
 8004f82:	d0f1      	beq.n	8004f68 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f84:	4b71      	ldr	r3, [pc, #452]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	22f8      	movs	r2, #248	; 0xf8
 8004f8a:	4393      	bics	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	00da      	lsls	r2, r3, #3
 8004f94:	4b6d      	ldr	r3, [pc, #436]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004f96:	430a      	orrs	r2, r1
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
 8004f9a:	e034      	b.n	8005006 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	3305      	adds	r3, #5
 8004fa2:	d111      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004fa4:	4b69      	ldr	r3, [pc, #420]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa8:	4b68      	ldr	r3, [pc, #416]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004faa:	2104      	movs	r1, #4
 8004fac:	438a      	bics	r2, r1
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fb0:	4b66      	ldr	r3, [pc, #408]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	22f8      	movs	r2, #248	; 0xf8
 8004fb6:	4393      	bics	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	00da      	lsls	r2, r3, #3
 8004fc0:	4b62      	ldr	r3, [pc, #392]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8004fc6:	e01e      	b.n	8005006 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fc8:	4b60      	ldr	r3, [pc, #384]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fcc:	4b5f      	ldr	r3, [pc, #380]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fce:	2104      	movs	r1, #4
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004fd4:	4b5d      	ldr	r3, [pc, #372]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd8:	4b5c      	ldr	r3, [pc, #368]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004fda:	2101      	movs	r1, #1
 8004fdc:	438a      	bics	r2, r1
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe0:	f7ff f8f0 	bl	80041c4 <HAL_GetTick>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004fea:	f7ff f8eb 	bl	80041c4 <HAL_GetTick>
 8004fee:	0002      	movs	r2, r0
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e0a2      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ffc:	4b53      	ldr	r3, [pc, #332]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	2202      	movs	r2, #2
 8005002:	4013      	ands	r3, r2
 8005004:	d1f1      	bne.n	8004fea <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d100      	bne.n	8005010 <HAL_RCC_OscConfig+0x4ec>
 800500e:	e097      	b.n	8005140 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005010:	4b4e      	ldr	r3, [pc, #312]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	220c      	movs	r2, #12
 8005016:	4013      	ands	r3, r2
 8005018:	2b08      	cmp	r3, #8
 800501a:	d100      	bne.n	800501e <HAL_RCC_OscConfig+0x4fa>
 800501c:	e06b      	b.n	80050f6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d14c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005026:	4b49      	ldr	r3, [pc, #292]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b48      	ldr	r3, [pc, #288]	; (800514c <HAL_RCC_OscConfig+0x628>)
 800502c:	494a      	ldr	r1, [pc, #296]	; (8005158 <HAL_RCC_OscConfig+0x634>)
 800502e:	400a      	ands	r2, r1
 8005030:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7ff f8c7 	bl	80041c4 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7ff f8c2 	bl	80041c4 <HAL_GetTick>
 8005040:	0002      	movs	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e079      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504e:	4b3f      	ldr	r3, [pc, #252]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	049b      	lsls	r3, r3, #18
 8005056:	4013      	ands	r3, r2
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800505a:	4b3c      	ldr	r3, [pc, #240]	; (800514c <HAL_RCC_OscConfig+0x628>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	220f      	movs	r2, #15
 8005060:	4393      	bics	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_RCC_OscConfig+0x628>)
 800506a:	430a      	orrs	r2, r1
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c
 800506e:	4b37      	ldr	r3, [pc, #220]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4a3a      	ldr	r2, [pc, #232]	; (800515c <HAL_RCC_OscConfig+0x638>)
 8005074:	4013      	ands	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	431a      	orrs	r2, r3
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b30      	ldr	r3, [pc, #192]	; (800514c <HAL_RCC_OscConfig+0x628>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b2f      	ldr	r3, [pc, #188]	; (800514c <HAL_RCC_OscConfig+0x628>)
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	0449      	lsls	r1, r1, #17
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005096:	f7ff f895 	bl	80041c4 <HAL_GetTick>
 800509a:	0003      	movs	r3, r0
 800509c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7ff f890 	bl	80041c4 <HAL_GetTick>
 80050a4:	0002      	movs	r2, r0
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e047      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050b2:	4b26      	ldr	r3, [pc, #152]	; (800514c <HAL_RCC_OscConfig+0x628>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	049b      	lsls	r3, r3, #18
 80050ba:	4013      	ands	r3, r2
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x57c>
 80050be:	e03f      	b.n	8005140 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c0:	4b22      	ldr	r3, [pc, #136]	; (800514c <HAL_RCC_OscConfig+0x628>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b21      	ldr	r3, [pc, #132]	; (800514c <HAL_RCC_OscConfig+0x628>)
 80050c6:	4924      	ldr	r1, [pc, #144]	; (8005158 <HAL_RCC_OscConfig+0x634>)
 80050c8:	400a      	ands	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7ff f87a 	bl	80041c4 <HAL_GetTick>
 80050d0:	0003      	movs	r3, r0
 80050d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d6:	f7ff f875 	bl	80041c4 <HAL_GetTick>
 80050da:	0002      	movs	r2, r0
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e02c      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050e8:	4b18      	ldr	r3, [pc, #96]	; (800514c <HAL_RCC_OscConfig+0x628>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	049b      	lsls	r3, r3, #18
 80050f0:	4013      	ands	r3, r2
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x5b2>
 80050f4:	e024      	b.n	8005140 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e01f      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <HAL_RCC_OscConfig+0x628>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x628>)
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	23c0      	movs	r3, #192	; 0xc0
 8005112:	025b      	lsls	r3, r3, #9
 8005114:	401a      	ands	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	429a      	cmp	r2, r3
 800511c:	d10e      	bne.n	800513c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	220f      	movs	r2, #15
 8005122:	401a      	ands	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d107      	bne.n	800513c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	23f0      	movs	r3, #240	; 0xf0
 8005130:	039b      	lsls	r3, r3, #14
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b008      	add	sp, #32
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	40021000 	.word	0x40021000
 8005150:	00001388 	.word	0x00001388
 8005154:	efffffff 	.word	0xefffffff
 8005158:	feffffff 	.word	0xfeffffff
 800515c:	ffc27fff 	.word	0xffc27fff

08005160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0b3      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	4013      	ands	r3, r2
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d911      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b58      	ldr	r3, [pc, #352]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	4393      	bics	r3, r2
 800518a:	0019      	movs	r1, r3
 800518c:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005194:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	4013      	ands	r3, r2
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e09a      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2202      	movs	r2, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	d015      	beq.n	80051dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2204      	movs	r2, #4
 80051b6:	4013      	ands	r3, r2
 80051b8:	d006      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051ba:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80051c0:	21e0      	movs	r1, #224	; 0xe0
 80051c2:	00c9      	lsls	r1, r1, #3
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c8:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	22f0      	movs	r2, #240	; 0xf0
 80051ce:	4393      	bics	r3, r2
 80051d0:	0019      	movs	r1, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	4b44      	ldr	r3, [pc, #272]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	4013      	ands	r3, r2
 80051e4:	d040      	beq.n	8005268 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	4013      	ands	r3, r2
 80051f8:	d114      	bne.n	8005224 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e06e      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d107      	bne.n	8005216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	049b      	lsls	r3, r3, #18
 800520e:	4013      	ands	r3, r2
 8005210:	d108      	bne.n	8005224 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e062      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2202      	movs	r2, #2
 800521c:	4013      	ands	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e05b      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2203      	movs	r2, #3
 800522a:	4393      	bics	r3, r2
 800522c:	0019      	movs	r1, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005238:	f7fe ffc4 	bl	80041c4 <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005240:	e009      	b.n	8005256 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005242:	f7fe ffbf 	bl	80041c4 <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	4a27      	ldr	r2, [pc, #156]	; (80052ec <HAL_RCC_ClockConfig+0x18c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e042      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	220c      	movs	r2, #12
 800525c:	401a      	ands	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	429a      	cmp	r2, r3
 8005266:	d1ec      	bne.n	8005242 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005268:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	4013      	ands	r3, r2
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d211      	bcs.n	800529a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005276:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2201      	movs	r2, #1
 800527c:	4393      	bics	r3, r2
 800527e:	0019      	movs	r1, r3
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005288:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <HAL_RCC_ClockConfig+0x184>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	4013      	ands	r3, r2
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d001      	beq.n	800529a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e020      	b.n	80052dc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2204      	movs	r2, #4
 80052a0:	4013      	ands	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <HAL_RCC_ClockConfig+0x190>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	0019      	movs	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052b8:	f000 f820 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 80052bc:	0001      	movs	r1, r0
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_RCC_ClockConfig+0x188>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	220f      	movs	r2, #15
 80052c6:	4013      	ands	r3, r2
 80052c8:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <HAL_RCC_ClockConfig+0x194>)
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	000a      	movs	r2, r1
 80052ce:	40da      	lsrs	r2, r3
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RCC_ClockConfig+0x198>)
 80052d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052d4:	2003      	movs	r0, #3
 80052d6:	f7fe ff2f 	bl	8004138 <HAL_InitTick>
  
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b004      	add	sp, #16
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40022000 	.word	0x40022000
 80052e8:	40021000 	.word	0x40021000
 80052ec:	00001388 	.word	0x00001388
 80052f0:	fffff8ff 	.word	0xfffff8ff
 80052f4:	0800d7fc 	.word	0x0800d7fc
 80052f8:	20000000 	.word	0x20000000

080052fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b08f      	sub	sp, #60	; 0x3c
 8005300:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005302:	2314      	movs	r3, #20
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	4a2c      	ldr	r2, [pc, #176]	; (80053b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005308:	ca13      	ldmia	r2!, {r0, r1, r4}
 800530a:	c313      	stmia	r3!, {r0, r1, r4}
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005314:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005316:	c313      	stmia	r3!, {r0, r1, r4}
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005320:	2300      	movs	r3, #0
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
 8005324:	2300      	movs	r3, #0
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	2300      	movs	r3, #0
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005330:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	220c      	movs	r2, #12
 800533a:	4013      	ands	r3, r2
 800533c:	2b04      	cmp	r3, #4
 800533e:	d002      	beq.n	8005346 <HAL_RCC_GetSysClockFreq+0x4a>
 8005340:	2b08      	cmp	r3, #8
 8005342:	d003      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x50>
 8005344:	e02f      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005346:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005348:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800534a:	e02f      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	0c9b      	lsrs	r3, r3, #18
 8005350:	220f      	movs	r2, #15
 8005352:	4013      	ands	r3, r2
 8005354:	2214      	movs	r2, #20
 8005356:	18ba      	adds	r2, r7, r2
 8005358:	5cd3      	ldrb	r3, [r2, r3]
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800535c:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	220f      	movs	r2, #15
 8005362:	4013      	ands	r3, r2
 8005364:	1d3a      	adds	r2, r7, #4
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800536a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536c:	23c0      	movs	r3, #192	; 0xc0
 800536e:	025b      	lsls	r3, r3, #9
 8005370:	401a      	ands	r2, r3
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	025b      	lsls	r3, r3, #9
 8005376:	429a      	cmp	r2, r3
 8005378:	d109      	bne.n	800538e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800537a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537c:	4811      	ldr	r0, [pc, #68]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800537e:	f7fa fee9 	bl	8000154 <__udivsi3>
 8005382:	0003      	movs	r3, r0
 8005384:	001a      	movs	r2, r3
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	4353      	muls	r3, r2
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
 800538c:	e008      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800538e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005390:	480c      	ldr	r0, [pc, #48]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005392:	f7fa fedf 	bl	8000154 <__udivsi3>
 8005396:	0003      	movs	r3, r0
 8005398:	001a      	movs	r2, r3
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	4353      	muls	r3, r2
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053a4:	e002      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b00f      	add	sp, #60	; 0x3c
 80053b4:	bd90      	pop	{r4, r7, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	0800d750 	.word	0x0800d750
 80053bc:	0800d760 	.word	0x0800d760
 80053c0:	40021000 	.word	0x40021000
 80053c4:	007a1200 	.word	0x007a1200

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	20000000 	.word	0x20000000

080053dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80053e0:	f7ff fff2 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e4:	0001      	movs	r1, r0
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	2207      	movs	r2, #7
 80053ee:	4013      	ands	r3, r2
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053f2:	5cd3      	ldrb	r3, [r2, r3]
 80053f4:	40d9      	lsrs	r1, r3
 80053f6:	000b      	movs	r3, r1
}    
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	40021000 	.word	0x40021000
 8005404:	0800d80c 	.word	0x0800d80c

08005408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e042      	b.n	80054a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	223d      	movs	r2, #61	; 0x3d
 800541e:	5c9b      	ldrb	r3, [r3, r2]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223c      	movs	r2, #60	; 0x3c
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f7fe fb61 	bl	8003af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	223d      	movs	r2, #61	; 0x3d
 800543a:	2102      	movs	r1, #2
 800543c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	0019      	movs	r1, r3
 8005448:	0010      	movs	r0, r2
 800544a:	f000 ffed 	bl	8006428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2246      	movs	r2, #70	; 0x46
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	223e      	movs	r2, #62	; 0x3e
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	223f      	movs	r2, #63	; 0x3f
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	2101      	movs	r1, #1
 800546c:	5499      	strb	r1, [r3, r2]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2241      	movs	r2, #65	; 0x41
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2242      	movs	r2, #66	; 0x42
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2243      	movs	r2, #67	; 0x43
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2244      	movs	r2, #68	; 0x44
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2245      	movs	r2, #69	; 0x45
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	223d      	movs	r2, #61	; 0x3d
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e042      	b.n	8005540 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223d      	movs	r2, #61	; 0x3d
 80054be:	5c9b      	ldrb	r3, [r3, r2]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d107      	bne.n	80054d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	223c      	movs	r2, #60	; 0x3c
 80054ca:	2100      	movs	r1, #0
 80054cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 f839 	bl	8005548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223d      	movs	r2, #61	; 0x3d
 80054da:	2102      	movs	r1, #2
 80054dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	0019      	movs	r1, r3
 80054e8:	0010      	movs	r0, r2
 80054ea:	f000 ff9d 	bl	8006428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2246      	movs	r2, #70	; 0x46
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	223e      	movs	r2, #62	; 0x3e
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	223f      	movs	r2, #63	; 0x3f
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2240      	movs	r2, #64	; 0x40
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2241      	movs	r2, #65	; 0x41
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2242      	movs	r2, #66	; 0x42
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2243      	movs	r2, #67	; 0x43
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2244      	movs	r2, #68	; 0x44
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2245      	movs	r2, #69	; 0x45
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	223d      	movs	r2, #61	; 0x3d
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b002      	add	sp, #8
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <HAL_TIM_PWM_Start+0x22>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223e      	movs	r2, #62	; 0x3e
 800556c:	5c9b      	ldrb	r3, [r3, r2]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	1e5a      	subs	r2, r3, #1
 8005574:	4193      	sbcs	r3, r2
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e01f      	b.n	80055ba <HAL_TIM_PWM_Start+0x62>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d108      	bne.n	8005592 <HAL_TIM_PWM_Start+0x3a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	223f      	movs	r2, #63	; 0x3f
 8005584:	5c9b      	ldrb	r3, [r3, r2]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	4193      	sbcs	r3, r2
 800558e:	b2db      	uxtb	r3, r3
 8005590:	e013      	b.n	80055ba <HAL_TIM_PWM_Start+0x62>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d108      	bne.n	80055aa <HAL_TIM_PWM_Start+0x52>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2240      	movs	r2, #64	; 0x40
 800559c:	5c9b      	ldrb	r3, [r3, r2]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	1e5a      	subs	r2, r3, #1
 80055a4:	4193      	sbcs	r3, r2
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e007      	b.n	80055ba <HAL_TIM_PWM_Start+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2241      	movs	r2, #65	; 0x41
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	4193      	sbcs	r3, r2
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e06e      	b.n	80056a0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Start+0x7a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	223e      	movs	r2, #62	; 0x3e
 80055cc:	2102      	movs	r1, #2
 80055ce:	5499      	strb	r1, [r3, r2]
 80055d0:	e013      	b.n	80055fa <HAL_TIM_PWM_Start+0xa2>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Start+0x8a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	223f      	movs	r2, #63	; 0x3f
 80055dc:	2102      	movs	r1, #2
 80055de:	5499      	strb	r1, [r3, r2]
 80055e0:	e00b      	b.n	80055fa <HAL_TIM_PWM_Start+0xa2>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x9a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	2102      	movs	r1, #2
 80055ee:	5499      	strb	r1, [r3, r2]
 80055f0:	e003      	b.n	80055fa <HAL_TIM_PWM_Start+0xa2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2241      	movs	r2, #65	; 0x41
 80055f6:	2102      	movs	r1, #2
 80055f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	2201      	movs	r2, #1
 8005602:	0018      	movs	r0, r3
 8005604:	f001 fb3c 	bl	8006c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <HAL_TIM_PWM_Start+0x150>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_PWM_Start+0xd8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a25      	ldr	r2, [pc, #148]	; (80056ac <HAL_TIM_PWM_Start+0x154>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_PWM_Start+0xd8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <HAL_TIM_PWM_Start+0x158>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_PWM_Start+0xd8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_TIM_PWM_Start+0x15c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <HAL_TIM_PWM_Start+0xdc>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_TIM_PWM_Start+0xde>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	0209      	lsls	r1, r1, #8
 8005648:	430a      	orrs	r2, r1
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <HAL_TIM_PWM_Start+0x150>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_TIM_PWM_Start+0x112>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <HAL_TIM_PWM_Start+0x160>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_TIM_PWM_Start+0x112>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a11      	ldr	r2, [pc, #68]	; (80056ac <HAL_TIM_PWM_Start+0x154>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d111      	bne.n	800568e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2207      	movs	r2, #7
 8005672:	4013      	ands	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d010      	beq.n	800569e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	430a      	orrs	r2, r1
 800568a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	e007      	b.n	800569e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2101      	movs	r1, #1
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	0018      	movs	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b004      	add	sp, #16
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40000400 	.word	0x40000400

080056bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	230f      	movs	r3, #15
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <HAL_TIM_PWM_Start_IT+0x2a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	223e      	movs	r2, #62	; 0x3e
 80056d8:	5c9b      	ldrb	r3, [r3, r2]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	4193      	sbcs	r3, r2
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	e01f      	b.n	8005726 <HAL_TIM_PWM_Start_IT+0x6a>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d108      	bne.n	80056fe <HAL_TIM_PWM_Start_IT+0x42>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	223f      	movs	r2, #63	; 0x3f
 80056f0:	5c9b      	ldrb	r3, [r3, r2]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	4193      	sbcs	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e013      	b.n	8005726 <HAL_TIM_PWM_Start_IT+0x6a>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d108      	bne.n	8005716 <HAL_TIM_PWM_Start_IT+0x5a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2240      	movs	r2, #64	; 0x40
 8005708:	5c9b      	ldrb	r3, [r3, r2]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	4193      	sbcs	r3, r2
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e007      	b.n	8005726 <HAL_TIM_PWM_Start_IT+0x6a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2241      	movs	r2, #65	; 0x41
 800571a:	5c9b      	ldrb	r3, [r3, r2]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	1e5a      	subs	r2, r3, #1
 8005722:	4193      	sbcs	r3, r2
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0b1      	b.n	8005892 <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <HAL_TIM_PWM_Start_IT+0x82>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	223e      	movs	r2, #62	; 0x3e
 8005738:	2102      	movs	r1, #2
 800573a:	5499      	strb	r1, [r3, r2]
 800573c:	e013      	b.n	8005766 <HAL_TIM_PWM_Start_IT+0xaa>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b04      	cmp	r3, #4
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start_IT+0x92>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	223f      	movs	r2, #63	; 0x3f
 8005748:	2102      	movs	r1, #2
 800574a:	5499      	strb	r1, [r3, r2]
 800574c:	e00b      	b.n	8005766 <HAL_TIM_PWM_Start_IT+0xaa>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b08      	cmp	r3, #8
 8005752:	d104      	bne.n	800575e <HAL_TIM_PWM_Start_IT+0xa2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2240      	movs	r2, #64	; 0x40
 8005758:	2102      	movs	r1, #2
 800575a:	5499      	strb	r1, [r3, r2]
 800575c:	e003      	b.n	8005766 <HAL_TIM_PWM_Start_IT+0xaa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2241      	movs	r2, #65	; 0x41
 8005762:	2102      	movs	r1, #2
 8005764:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	d02a      	beq.n	80057c2 <HAL_TIM_PWM_Start_IT+0x106>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b0c      	cmp	r3, #12
 8005770:	d830      	bhi.n	80057d4 <HAL_TIM_PWM_Start_IT+0x118>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d01b      	beq.n	80057b0 <HAL_TIM_PWM_Start_IT+0xf4>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b08      	cmp	r3, #8
 800577c:	d82a      	bhi.n	80057d4 <HAL_TIM_PWM_Start_IT+0x118>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_TIM_PWM_Start_IT+0xd0>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d009      	beq.n	800579e <HAL_TIM_PWM_Start_IT+0xe2>
 800578a:	e023      	b.n	80057d4 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2102      	movs	r1, #2
 8005798:	430a      	orrs	r2, r1
 800579a:	60da      	str	r2, [r3, #12]
      break;
 800579c:	e01f      	b.n	80057de <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2104      	movs	r1, #4
 80057aa:	430a      	orrs	r2, r1
 80057ac:	60da      	str	r2, [r3, #12]
      break;
 80057ae:	e016      	b.n	80057de <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2108      	movs	r1, #8
 80057bc:	430a      	orrs	r2, r1
 80057be:	60da      	str	r2, [r3, #12]
      break;
 80057c0:	e00d      	b.n	80057de <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2110      	movs	r1, #16
 80057ce:	430a      	orrs	r2, r1
 80057d0:	60da      	str	r2, [r3, #12]
      break;
 80057d2:	e004      	b.n	80057de <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80057d4:	230f      	movs	r3, #15
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]
      break;
 80057dc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80057de:	230f      	movs	r3, #15
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d151      	bne.n	800588c <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	2201      	movs	r2, #1
 80057f0:	0018      	movs	r0, r3
 80057f2:	f001 fa45 	bl	8006c80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a28      	ldr	r2, [pc, #160]	; (800589c <HAL_TIM_PWM_Start_IT+0x1e0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_PWM_Start_IT+0x162>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_PWM_Start_IT+0x162>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_PWM_Start_IT+0x162>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a23      	ldr	r2, [pc, #140]	; (80058a8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_Start_IT+0x166>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_TIM_PWM_Start_IT+0x168>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	0209      	lsls	r1, r1, #8
 8005836:	430a      	orrs	r2, r1
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <HAL_TIM_PWM_Start_IT+0x1e0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x19c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_TIM_PWM_Start_IT+0x1f0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_TIM_PWM_Start_IT+0x19c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d111      	bne.n	800587c <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2207      	movs	r2, #7
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b06      	cmp	r3, #6
 8005868:	d010      	beq.n	800588c <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2101      	movs	r1, #1
 8005876:	430a      	orrs	r2, r1
 8005878:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	e007      	b.n	800588c <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2101      	movs	r1, #1
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800588c:	230f      	movs	r3, #15
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	b004      	add	sp, #16
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800
 80058ac:	40000400 	.word	0x40000400

080058b0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	230f      	movs	r3, #15
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	d02a      	beq.n	800591e <HAL_TIM_PWM_Stop_IT+0x6e>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d830      	bhi.n	8005930 <HAL_TIM_PWM_Stop_IT+0x80>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d01b      	beq.n	800590c <HAL_TIM_PWM_Stop_IT+0x5c>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d82a      	bhi.n	8005930 <HAL_TIM_PWM_Stop_IT+0x80>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_TIM_PWM_Stop_IT+0x38>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d009      	beq.n	80058fa <HAL_TIM_PWM_Stop_IT+0x4a>
 80058e6:	e023      	b.n	8005930 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2102      	movs	r1, #2
 80058f4:	438a      	bics	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]
      break;
 80058f8:	e01f      	b.n	800593a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2104      	movs	r1, #4
 8005906:	438a      	bics	r2, r1
 8005908:	60da      	str	r2, [r3, #12]
      break;
 800590a:	e016      	b.n	800593a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2108      	movs	r1, #8
 8005918:	438a      	bics	r2, r1
 800591a:	60da      	str	r2, [r3, #12]
      break;
 800591c:	e00d      	b.n	800593a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2110      	movs	r1, #16
 800592a:	438a      	bics	r2, r1
 800592c:	60da      	str	r2, [r3, #12]
      break;
 800592e:	e004      	b.n	800593a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005930:	230f      	movs	r3, #15
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	2201      	movs	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
      break;
 8005938:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800593a:	230f      	movs	r3, #15
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d000      	beq.n	8005946 <HAL_TIM_PWM_Stop_IT+0x96>
 8005944:	e063      	b.n	8005a0e <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	2200      	movs	r2, #0
 800594e:	0018      	movs	r0, r3
 8005950:	f001 f996 	bl	8006c80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a30      	ldr	r2, [pc, #192]	; (8005a1c <HAL_TIM_PWM_Stop_IT+0x16c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_PWM_Stop_IT+0xcc>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2f      	ldr	r2, [pc, #188]	; (8005a20 <HAL_TIM_PWM_Stop_IT+0x170>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_PWM_Stop_IT+0xcc>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a2d      	ldr	r2, [pc, #180]	; (8005a24 <HAL_TIM_PWM_Stop_IT+0x174>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_PWM_Stop_IT+0xcc>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <HAL_TIM_PWM_Stop_IT+0xd0>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <HAL_TIM_PWM_Stop_IT+0xd2>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d013      	beq.n	80059ae <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <HAL_TIM_PWM_Stop_IT+0x17c>)
 800598e:	4013      	ands	r3, r2
 8005990:	d10d      	bne.n	80059ae <HAL_TIM_PWM_Stop_IT+0xfe>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	4a25      	ldr	r2, [pc, #148]	; (8005a30 <HAL_TIM_PWM_Stop_IT+0x180>)
 800599a:	4013      	ands	r3, r2
 800599c:	d107      	bne.n	80059ae <HAL_TIM_PWM_Stop_IT+0xfe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4922      	ldr	r1, [pc, #136]	; (8005a34 <HAL_TIM_PWM_Stop_IT+0x184>)
 80059aa:	400a      	ands	r2, r1
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_TIM_PWM_Stop_IT+0x17c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	d10d      	bne.n	80059d6 <HAL_TIM_PWM_Stop_IT+0x126>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <HAL_TIM_PWM_Stop_IT+0x180>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	d107      	bne.n	80059d6 <HAL_TIM_PWM_Stop_IT+0x126>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2101      	movs	r1, #1
 80059d2:	438a      	bics	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Stop_IT+0x136>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223e      	movs	r2, #62	; 0x3e
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]
 80059e4:	e013      	b.n	8005a0e <HAL_TIM_PWM_Stop_IT+0x15e>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Stop_IT+0x146>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	223f      	movs	r2, #63	; 0x3f
 80059f0:	2101      	movs	r1, #1
 80059f2:	5499      	strb	r1, [r3, r2]
 80059f4:	e00b      	b.n	8005a0e <HAL_TIM_PWM_Stop_IT+0x15e>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Stop_IT+0x156>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2240      	movs	r2, #64	; 0x40
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]
 8005a04:	e003      	b.n	8005a0e <HAL_TIM_PWM_Stop_IT+0x15e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2241      	movs	r2, #65	; 0x41
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005a0e:	230f      	movs	r3, #15
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	781b      	ldrb	r3, [r3, #0]
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b004      	add	sp, #16
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800
 8005a2c:	00001111 	.word	0x00001111
 8005a30:	00000444 	.word	0x00000444
 8005a34:	ffff7fff 	.word	0xffff7fff

08005a38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e042      	b.n	8005ad0 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	223d      	movs	r2, #61	; 0x3d
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	223c      	movs	r2, #60	; 0x3c
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7fe f887 	bl	8003b74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	223d      	movs	r2, #61	; 0x3d
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	0019      	movs	r1, r3
 8005a78:	0010      	movs	r0, r2
 8005a7a:	f000 fcd5 	bl	8006428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2246      	movs	r2, #70	; 0x46
 8005a82:	2101      	movs	r1, #1
 8005a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	223e      	movs	r2, #62	; 0x3e
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	5499      	strb	r1, [r3, r2]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	223f      	movs	r2, #63	; 0x3f
 8005a92:	2101      	movs	r1, #1
 8005a94:	5499      	strb	r1, [r3, r2]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	5499      	strb	r1, [r3, r2]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2241      	movs	r2, #65	; 0x41
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2242      	movs	r2, #66	; 0x42
 8005aaa:	2101      	movs	r1, #1
 8005aac:	5499      	strb	r1, [r3, r2]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2243      	movs	r2, #67	; 0x43
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	5499      	strb	r1, [r3, r2]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2244      	movs	r2, #68	; 0x44
 8005aba:	2101      	movs	r1, #1
 8005abc:	5499      	strb	r1, [r3, r2]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2245      	movs	r2, #69	; 0x45
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	223d      	movs	r2, #61	; 0x3d
 8005aca:	2101      	movs	r1, #1
 8005acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	230f      	movs	r3, #15
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_IC_Start_IT+0x22>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	223e      	movs	r2, #62	; 0x3e
 8005af4:	5c9b      	ldrb	r3, [r3, r2]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e013      	b.n	8005b22 <HAL_TIM_IC_Start_IT+0x4a>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_IC_Start_IT+0x32>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	223f      	movs	r2, #63	; 0x3f
 8005b04:	5c9b      	ldrb	r3, [r3, r2]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e00b      	b.n	8005b22 <HAL_TIM_IC_Start_IT+0x4a>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_IC_Start_IT+0x42>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	e003      	b.n	8005b22 <HAL_TIM_IC_Start_IT+0x4a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2241      	movs	r2, #65	; 0x41
 8005b1e:	5c9b      	ldrb	r3, [r3, r2]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	220e      	movs	r2, #14
 8005b24:	18ba      	adds	r2, r7, r2
 8005b26:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_TIM_IC_Start_IT+0x60>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2242      	movs	r2, #66	; 0x42
 8005b32:	5c9b      	ldrb	r3, [r3, r2]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e013      	b.n	8005b60 <HAL_TIM_IC_Start_IT+0x88>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d104      	bne.n	8005b48 <HAL_TIM_IC_Start_IT+0x70>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2243      	movs	r2, #67	; 0x43
 8005b42:	5c9b      	ldrb	r3, [r3, r2]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e00b      	b.n	8005b60 <HAL_TIM_IC_Start_IT+0x88>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d104      	bne.n	8005b58 <HAL_TIM_IC_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2244      	movs	r2, #68	; 0x44
 8005b52:	5c9b      	ldrb	r3, [r3, r2]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e003      	b.n	8005b60 <HAL_TIM_IC_Start_IT+0x88>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2245      	movs	r2, #69	; 0x45
 8005b5c:	5c9b      	ldrb	r3, [r3, r2]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	210d      	movs	r1, #13
 8005b62:	187a      	adds	r2, r7, r1
 8005b64:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b66:	230e      	movs	r3, #14
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d103      	bne.n	8005b78 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0ab      	b.n	8005cd4 <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <HAL_TIM_IC_Start_IT+0xb4>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	223e      	movs	r2, #62	; 0x3e
 8005b86:	2102      	movs	r1, #2
 8005b88:	5499      	strb	r1, [r3, r2]
 8005b8a:	e013      	b.n	8005bb4 <HAL_TIM_IC_Start_IT+0xdc>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d104      	bne.n	8005b9c <HAL_TIM_IC_Start_IT+0xc4>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	223f      	movs	r2, #63	; 0x3f
 8005b96:	2102      	movs	r1, #2
 8005b98:	5499      	strb	r1, [r3, r2]
 8005b9a:	e00b      	b.n	8005bb4 <HAL_TIM_IC_Start_IT+0xdc>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d104      	bne.n	8005bac <HAL_TIM_IC_Start_IT+0xd4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2240      	movs	r2, #64	; 0x40
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	5499      	strb	r1, [r3, r2]
 8005baa:	e003      	b.n	8005bb4 <HAL_TIM_IC_Start_IT+0xdc>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2241      	movs	r2, #65	; 0x41
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_TIM_IC_Start_IT+0xec>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2242      	movs	r2, #66	; 0x42
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	5499      	strb	r1, [r3, r2]
 8005bc2:	e013      	b.n	8005bec <HAL_TIM_IC_Start_IT+0x114>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d104      	bne.n	8005bd4 <HAL_TIM_IC_Start_IT+0xfc>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2243      	movs	r2, #67	; 0x43
 8005bce:	2102      	movs	r1, #2
 8005bd0:	5499      	strb	r1, [r3, r2]
 8005bd2:	e00b      	b.n	8005bec <HAL_TIM_IC_Start_IT+0x114>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d104      	bne.n	8005be4 <HAL_TIM_IC_Start_IT+0x10c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2244      	movs	r2, #68	; 0x44
 8005bde:	2102      	movs	r1, #2
 8005be0:	5499      	strb	r1, [r3, r2]
 8005be2:	e003      	b.n	8005bec <HAL_TIM_IC_Start_IT+0x114>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2245      	movs	r2, #69	; 0x45
 8005be8:	2102      	movs	r1, #2
 8005bea:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b0c      	cmp	r3, #12
 8005bf0:	d02a      	beq.n	8005c48 <HAL_TIM_IC_Start_IT+0x170>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b0c      	cmp	r3, #12
 8005bf6:	d830      	bhi.n	8005c5a <HAL_TIM_IC_Start_IT+0x182>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d01b      	beq.n	8005c36 <HAL_TIM_IC_Start_IT+0x15e>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d82a      	bhi.n	8005c5a <HAL_TIM_IC_Start_IT+0x182>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IC_Start_IT+0x13a>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d009      	beq.n	8005c24 <HAL_TIM_IC_Start_IT+0x14c>
 8005c10:	e023      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	60da      	str	r2, [r3, #12]
      break;
 8005c22:	e01f      	b.n	8005c64 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2104      	movs	r1, #4
 8005c30:	430a      	orrs	r2, r1
 8005c32:	60da      	str	r2, [r3, #12]
      break;
 8005c34:	e016      	b.n	8005c64 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2108      	movs	r1, #8
 8005c42:	430a      	orrs	r2, r1
 8005c44:	60da      	str	r2, [r3, #12]
      break;
 8005c46:	e00d      	b.n	8005c64 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2110      	movs	r1, #16
 8005c54:	430a      	orrs	r2, r1
 8005c56:	60da      	str	r2, [r3, #12]
      break;
 8005c58:	e004      	b.n	8005c64 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8005c5a:	230f      	movs	r3, #15
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
      break;
 8005c62:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005c64:	230f      	movs	r3, #15
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12f      	bne.n	8005cce <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	2201      	movs	r2, #1
 8005c76:	0018      	movs	r0, r3
 8005c78:	f001 f802 	bl	8006c80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <HAL_TIM_IC_Start_IT+0x204>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_TIM_IC_Start_IT+0x1c2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <HAL_TIM_IC_Start_IT+0x208>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_TIM_IC_Start_IT+0x1c2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <HAL_TIM_IC_Start_IT+0x20c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d111      	bne.n	8005cbe <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d010      	beq.n	8005cce <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	e007      	b.n	8005cce <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2101      	movs	r1, #1
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cce:	230f      	movs	r3, #15
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	781b      	ldrb	r3, [r3, #0]
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b004      	add	sp, #16
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40014000 	.word	0x40014000

08005ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d124      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2202      	movs	r2, #2
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11d      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2203      	movs	r2, #3
 8005d12:	4252      	negs	r2, r2
 8005d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2203      	movs	r2, #3
 8005d24:	4013      	ands	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f7fd fcb8 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e007      	b.n	8005d42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fb67 	bl	8006408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fd fc6d 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d125      	bne.n	8005da2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d11e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2205      	movs	r2, #5
 8005d6a:	4252      	negs	r2, r2
 8005d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	23c0      	movs	r3, #192	; 0xc0
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fd fc8b 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8005d8a:	e007      	b.n	8005d9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 fb3a 	bl	8006408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7fd fc40 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2208      	movs	r2, #8
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d124      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2208      	movs	r2, #8
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d11d      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2209      	movs	r2, #9
 8005dc4:	4252      	negs	r2, r2
 8005dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7fd fc5f 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8005de2:	e007      	b.n	8005df4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0018      	movs	r0, r3
 8005de8:	f000 fb0e 	bl	8006408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	0018      	movs	r0, r3
 8005df0:	f7fd fc14 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2210      	movs	r2, #16
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d125      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d11e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2211      	movs	r2, #17
 8005e1c:	4252      	negs	r2, r2
 8005e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2208      	movs	r2, #8
 8005e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	23c0      	movs	r3, #192	; 0xc0
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4013      	ands	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7fd fc32 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e007      	b.n	8005e4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 fae1 	bl	8006408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7fd fbe7 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d10f      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d108      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2202      	movs	r2, #2
 8005e76:	4252      	negs	r2, r2
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 fabb 	bl	80063f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2280      	movs	r2, #128	; 0x80
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b80      	cmp	r3, #128	; 0x80
 8005e8e:	d10f      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d108      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2281      	movs	r2, #129	; 0x81
 8005ea4:	4252      	negs	r2, r2
 8005ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 ffca 	bl	8006e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2240      	movs	r2, #64	; 0x40
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d10f      	bne.n	8005ede <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d108      	bne.n	8005ede <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2241      	movs	r2, #65	; 0x41
 8005ed2:	4252      	negs	r2, r2
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f000 fa9d 	bl	8006418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d10f      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d108      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2221      	movs	r2, #33	; 0x21
 8005f00:	4252      	negs	r2, r2
 8005f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	0018      	movs	r0, r3
 8005f08:	f000 ff94 	bl	8006e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b002      	add	sp, #8
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2317      	movs	r3, #23
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	223c      	movs	r2, #60	; 0x3c
 8005f2c:	5c9b      	ldrb	r3, [r3, r2]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_IC_ConfigChannel+0x22>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e08c      	b.n	8006050 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	223c      	movs	r2, #60	; 0x3c
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6819      	ldr	r1, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f000 fcda 	bl	800690c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	210c      	movs	r1, #12
 8005f64:	438a      	bics	r2, r1
 8005f66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6999      	ldr	r1, [r3, #24]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	619a      	str	r2, [r3, #24]
 8005f7a:	e062      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d11c      	bne.n	8005fbc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f000 fd41 	bl	8006a18 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	492d      	ldr	r1, [pc, #180]	; (8006058 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005fa2:	400a      	ands	r2, r1
 8005fa4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6999      	ldr	r1, [r3, #24]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	021a      	lsls	r2, r3, #8
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	619a      	str	r2, [r3, #24]
 8005fba:	e042      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d11b      	bne.n	8005ffa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f000 fd95 	bl	8006b00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	210c      	movs	r1, #12
 8005fe2:	438a      	bics	r2, r1
 8005fe4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69d9      	ldr	r1, [r3, #28]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	61da      	str	r2, [r3, #28]
 8005ff8:	e023      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d11c      	bne.n	800603a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6819      	ldr	r1, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f000 fdb6 	bl	8006b80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	490e      	ldr	r1, [pc, #56]	; (8006058 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006020:	400a      	ands	r2, r1
 8006022:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69d9      	ldr	r1, [r3, #28]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	61da      	str	r2, [r3, #28]
 8006038:	e003      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800603a:	2317      	movs	r3, #23
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	2201      	movs	r2, #1
 8006040:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	223c      	movs	r2, #60	; 0x3c
 8006046:	2100      	movs	r1, #0
 8006048:	5499      	strb	r1, [r3, r2]

  return status;
 800604a:	2317      	movs	r3, #23
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	781b      	ldrb	r3, [r3, #0]
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b006      	add	sp, #24
 8006056:	bd80      	pop	{r7, pc}
 8006058:	fffff3ff 	.word	0xfffff3ff

0800605c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2317      	movs	r3, #23
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	223c      	movs	r2, #60	; 0x3c
 8006074:	5c9b      	ldrb	r3, [r3, r2]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_TIM_PWM_ConfigChannel+0x22>
 800607a:	2302      	movs	r3, #2
 800607c:	e0ad      	b.n	80061da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	223c      	movs	r2, #60	; 0x3c
 8006082:	2101      	movs	r1, #1
 8006084:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b0c      	cmp	r3, #12
 800608a:	d100      	bne.n	800608e <HAL_TIM_PWM_ConfigChannel+0x32>
 800608c:	e076      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x120>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b0c      	cmp	r3, #12
 8006092:	d900      	bls.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006094:	e095      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d04e      	beq.n	800613a <HAL_TIM_PWM_ConfigChannel+0xde>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d900      	bls.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80060a2:	e08e      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d021      	beq.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80060b0:	e087      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	0011      	movs	r1, r2
 80060ba:	0018      	movs	r0, r3
 80060bc:	f000 fa2a 	bl	8006514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2108      	movs	r1, #8
 80060cc:	430a      	orrs	r2, r1
 80060ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2104      	movs	r1, #4
 80060dc:	438a      	bics	r2, r1
 80060de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
      break;
 80060f2:	e06b      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f000 fa91 	bl	8006624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	0109      	lsls	r1, r1, #4
 8006110:	430a      	orrs	r2, r1
 8006112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4931      	ldr	r1, [pc, #196]	; (80061e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006120:	400a      	ands	r2, r1
 8006122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6999      	ldr	r1, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	619a      	str	r2, [r3, #24]
      break;
 8006138:	e048      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0011      	movs	r1, r2
 8006142:	0018      	movs	r0, r3
 8006144:	f000 faf2 	bl	800672c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2108      	movs	r1, #8
 8006154:	430a      	orrs	r2, r1
 8006156:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69da      	ldr	r2, [r3, #28]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2104      	movs	r1, #4
 8006164:	438a      	bics	r2, r1
 8006166:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69d9      	ldr	r1, [r3, #28]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	61da      	str	r2, [r3, #28]
      break;
 800617a:	e027      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	0011      	movs	r1, r2
 8006184:	0018      	movs	r0, r3
 8006186:	f000 fb57 	bl	8006838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	0109      	lsls	r1, r1, #4
 8006198:	430a      	orrs	r2, r1
 800619a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	490f      	ldr	r1, [pc, #60]	; (80061e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80061a8:	400a      	ands	r2, r1
 80061aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69d9      	ldr	r1, [r3, #28]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	61da      	str	r2, [r3, #28]
      break;
 80061c0:	e004      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80061c2:	2317      	movs	r3, #23
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
      break;
 80061ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	223c      	movs	r2, #60	; 0x3c
 80061d0:	2100      	movs	r1, #0
 80061d2:	5499      	strb	r1, [r3, r2]

  return status;
 80061d4:	2317      	movs	r3, #23
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	781b      	ldrb	r3, [r3, #0]
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b006      	add	sp, #24
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	fffffbff 	.word	0xfffffbff

080061e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	230f      	movs	r3, #15
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	223c      	movs	r2, #60	; 0x3c
 80061fe:	5c9b      	ldrb	r3, [r3, r2]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_TIM_ConfigClockSource+0x20>
 8006204:	2302      	movs	r3, #2
 8006206:	e0bc      	b.n	8006382 <HAL_TIM_ConfigClockSource+0x19a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	223c      	movs	r2, #60	; 0x3c
 800620c:	2101      	movs	r1, #1
 800620e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223d      	movs	r2, #61	; 0x3d
 8006214:	2102      	movs	r1, #2
 8006216:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2277      	movs	r2, #119	; 0x77
 8006224:	4393      	bics	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a58      	ldr	r2, [pc, #352]	; (800638c <HAL_TIM_ConfigClockSource+0x1a4>)
 800622c:	4013      	ands	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2280      	movs	r2, #128	; 0x80
 800623e:	0192      	lsls	r2, r2, #6
 8006240:	4293      	cmp	r3, r2
 8006242:	d040      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0xde>
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	0192      	lsls	r2, r2, #6
 8006248:	4293      	cmp	r3, r2
 800624a:	d900      	bls.n	800624e <HAL_TIM_ConfigClockSource+0x66>
 800624c:	e088      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 800624e:	2280      	movs	r2, #128	; 0x80
 8006250:	0152      	lsls	r2, r2, #5
 8006252:	4293      	cmp	r3, r2
 8006254:	d100      	bne.n	8006258 <HAL_TIM_ConfigClockSource+0x70>
 8006256:	e088      	b.n	800636a <HAL_TIM_ConfigClockSource+0x182>
 8006258:	2280      	movs	r2, #128	; 0x80
 800625a:	0152      	lsls	r2, r2, #5
 800625c:	4293      	cmp	r3, r2
 800625e:	d900      	bls.n	8006262 <HAL_TIM_ConfigClockSource+0x7a>
 8006260:	e07e      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 8006262:	2b70      	cmp	r3, #112	; 0x70
 8006264:	d018      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0xb0>
 8006266:	d900      	bls.n	800626a <HAL_TIM_ConfigClockSource+0x82>
 8006268:	e07a      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 800626a:	2b60      	cmp	r3, #96	; 0x60
 800626c:	d04f      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x126>
 800626e:	d900      	bls.n	8006272 <HAL_TIM_ConfigClockSource+0x8a>
 8006270:	e076      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 8006272:	2b50      	cmp	r3, #80	; 0x50
 8006274:	d03b      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x106>
 8006276:	d900      	bls.n	800627a <HAL_TIM_ConfigClockSource+0x92>
 8006278:	e072      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d057      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x146>
 800627e:	d900      	bls.n	8006282 <HAL_TIM_ConfigClockSource+0x9a>
 8006280:	e06e      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 8006282:	2b30      	cmp	r3, #48	; 0x30
 8006284:	d063      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x166>
 8006286:	d86b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d060      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x166>
 800628c:	d868      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d05d      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x166>
 8006292:	2b10      	cmp	r3, #16
 8006294:	d05b      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x166>
 8006296:	e063      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6899      	ldr	r1, [r3, #8]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f000 fcca 	bl	8006c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2277      	movs	r2, #119	; 0x77
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]
      break;
 80062c4:	e052      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6899      	ldr	r1, [r3, #8]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f000 fcb3 	bl	8006c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	01c9      	lsls	r1, r1, #7
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
      break;
 80062ec:	e03e      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	001a      	movs	r2, r3
 80062fc:	f000 fb5e 	bl	80069bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2150      	movs	r1, #80	; 0x50
 8006306:	0018      	movs	r0, r3
 8006308:	f000 fc80 	bl	8006c0c <TIM_ITRx_SetConfig>
      break;
 800630c:	e02e      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	001a      	movs	r2, r3
 800631c:	f000 fbbe 	bl	8006a9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2160      	movs	r1, #96	; 0x60
 8006326:	0018      	movs	r0, r3
 8006328:	f000 fc70 	bl	8006c0c <TIM_ITRx_SetConfig>
      break;
 800632c:	e01e      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	001a      	movs	r2, r3
 800633c:	f000 fb3e 	bl	80069bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2140      	movs	r1, #64	; 0x40
 8006346:	0018      	movs	r0, r3
 8006348:	f000 fc60 	bl	8006c0c <TIM_ITRx_SetConfig>
      break;
 800634c:	e00e      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	0019      	movs	r1, r3
 8006358:	0010      	movs	r0, r2
 800635a:	f000 fc57 	bl	8006c0c <TIM_ITRx_SetConfig>
      break;
 800635e:	e005      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006360:	230f      	movs	r3, #15
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
      break;
 8006368:	e000      	b.n	800636c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800636a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	223d      	movs	r2, #61	; 0x3d
 8006370:	2101      	movs	r1, #1
 8006372:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	223c      	movs	r2, #60	; 0x3c
 8006378:	2100      	movs	r1, #0
 800637a:	5499      	strb	r1, [r3, r2]

  return status;
 800637c:	230f      	movs	r3, #15
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	781b      	ldrb	r3, [r3, #0]
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b004      	add	sp, #16
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	ffff00ff 	.word	0xffff00ff

08006390 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	d01e      	beq.n	80063e2 <HAL_TIM_ReadCapturedValue+0x52>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b0c      	cmp	r3, #12
 80063a8:	d820      	bhi.n	80063ec <HAL_TIM_ReadCapturedValue+0x5c>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d013      	beq.n	80063d8 <HAL_TIM_ReadCapturedValue+0x48>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d81a      	bhi.n	80063ec <HAL_TIM_ReadCapturedValue+0x5c>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_TIM_ReadCapturedValue+0x34>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d005      	beq.n	80063ce <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80063c2:	e013      	b.n	80063ec <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	60fb      	str	r3, [r7, #12]
      break;
 80063cc:	e00f      	b.n	80063ee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	60fb      	str	r3, [r7, #12]
      break;
 80063d6:	e00a      	b.n	80063ee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	60fb      	str	r3, [r7, #12]
      break;
 80063e0:	e005      	b.n	80063ee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	60fb      	str	r3, [r7, #12]
      break;
 80063ea:	e000      	b.n	80063ee <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80063ec:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	0018      	movs	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b004      	add	sp, #16
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006410:	46c0      	nop			; (mov r8, r8)
 8006412:	46bd      	mov	sp, r7
 8006414:	b002      	add	sp, #8
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006420:	46c0      	nop			; (mov r8, r8)
 8006422:	46bd      	mov	sp, r7
 8006424:	b002      	add	sp, #8
 8006426:	bd80      	pop	{r7, pc}

08006428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <TIM_Base_SetConfig+0xd0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_Base_SetConfig+0x20>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <TIM_Base_SetConfig+0xd4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d108      	bne.n	800645a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2270      	movs	r2, #112	; 0x70
 800644c:	4393      	bics	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a26      	ldr	r2, [pc, #152]	; (80064f8 <TIM_Base_SetConfig+0xd0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <TIM_Base_SetConfig+0x62>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a25      	ldr	r2, [pc, #148]	; (80064fc <TIM_Base_SetConfig+0xd4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00f      	beq.n	800648a <TIM_Base_SetConfig+0x62>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a24      	ldr	r2, [pc, #144]	; (8006500 <TIM_Base_SetConfig+0xd8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00b      	beq.n	800648a <TIM_Base_SetConfig+0x62>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a23      	ldr	r2, [pc, #140]	; (8006504 <TIM_Base_SetConfig+0xdc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <TIM_Base_SetConfig+0x62>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a22      	ldr	r2, [pc, #136]	; (8006508 <TIM_Base_SetConfig+0xe0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_Base_SetConfig+0x62>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <TIM_Base_SetConfig+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d108      	bne.n	800649c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4a20      	ldr	r2, [pc, #128]	; (8006510 <TIM_Base_SetConfig+0xe8>)
 800648e:	4013      	ands	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	4393      	bics	r3, r2
 80064a2:	001a      	movs	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <TIM_Base_SetConfig+0xd0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <TIM_Base_SetConfig+0xba>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a0d      	ldr	r2, [pc, #52]	; (8006504 <TIM_Base_SetConfig+0xdc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d007      	beq.n	80064e2 <TIM_Base_SetConfig+0xba>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a0c      	ldr	r2, [pc, #48]	; (8006508 <TIM_Base_SetConfig+0xe0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_Base_SetConfig+0xba>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a0b      	ldr	r2, [pc, #44]	; (800650c <TIM_Base_SetConfig+0xe4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d103      	bne.n	80064ea <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	615a      	str	r2, [r3, #20]
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b004      	add	sp, #16
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40002000 	.word	0x40002000
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800
 8006510:	fffffcff 	.word	0xfffffcff

08006514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	2201      	movs	r2, #1
 8006524:	4393      	bics	r3, r2
 8006526:	001a      	movs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2270      	movs	r2, #112	; 0x70
 8006542:	4393      	bics	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2203      	movs	r2, #3
 800654a:	4393      	bics	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2202      	movs	r2, #2
 800655c:	4393      	bics	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a27      	ldr	r2, [pc, #156]	; (800660c <TIM_OC1_SetConfig+0xf8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_OC1_SetConfig+0x76>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a26      	ldr	r2, [pc, #152]	; (8006610 <TIM_OC1_SetConfig+0xfc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_OC1_SetConfig+0x76>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <TIM_OC1_SetConfig+0x100>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_OC1_SetConfig+0x76>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a24      	ldr	r2, [pc, #144]	; (8006618 <TIM_OC1_SetConfig+0x104>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d10c      	bne.n	80065a4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2208      	movs	r2, #8
 800658e:	4393      	bics	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2204      	movs	r2, #4
 80065a0:	4393      	bics	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a19      	ldr	r2, [pc, #100]	; (800660c <TIM_OC1_SetConfig+0xf8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_OC1_SetConfig+0xb0>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <TIM_OC1_SetConfig+0xfc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_OC1_SetConfig+0xb0>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a17      	ldr	r2, [pc, #92]	; (8006614 <TIM_OC1_SetConfig+0x100>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC1_SetConfig+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a16      	ldr	r2, [pc, #88]	; (8006618 <TIM_OC1_SetConfig+0x104>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d111      	bne.n	80065e8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	4a15      	ldr	r2, [pc, #84]	; (800661c <TIM_OC1_SetConfig+0x108>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <TIM_OC1_SetConfig+0x10c>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	46bd      	mov	sp, r7
 8006606:	b006      	add	sp, #24
 8006608:	bd80      	pop	{r7, pc}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800
 800661c:	fffffeff 	.word	0xfffffeff
 8006620:	fffffdff 	.word	0xfffffdff

08006624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	2210      	movs	r2, #16
 8006634:	4393      	bics	r3, r2
 8006636:	001a      	movs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4a2e      	ldr	r2, [pc, #184]	; (800670c <TIM_OC2_SetConfig+0xe8>)
 8006652:	4013      	ands	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a2d      	ldr	r2, [pc, #180]	; (8006710 <TIM_OC2_SetConfig+0xec>)
 800665a:	4013      	ands	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2220      	movs	r2, #32
 800666e:	4393      	bics	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a24      	ldr	r2, [pc, #144]	; (8006714 <TIM_OC2_SetConfig+0xf0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10d      	bne.n	80066a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	4393      	bics	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2240      	movs	r2, #64	; 0x40
 800669e:	4393      	bics	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <TIM_OC2_SetConfig+0xf0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_OC2_SetConfig+0x9e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <TIM_OC2_SetConfig+0xf4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_OC2_SetConfig+0x9e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a19      	ldr	r2, [pc, #100]	; (800671c <TIM_OC2_SetConfig+0xf8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC2_SetConfig+0x9e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <TIM_OC2_SetConfig+0xfc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d113      	bne.n	80066ea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4a17      	ldr	r2, [pc, #92]	; (8006724 <TIM_OC2_SetConfig+0x100>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4a16      	ldr	r2, [pc, #88]	; (8006728 <TIM_OC2_SetConfig+0x104>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	621a      	str	r2, [r3, #32]
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b006      	add	sp, #24
 800670a:	bd80      	pop	{r7, pc}
 800670c:	ffff8fff 	.word	0xffff8fff
 8006710:	fffffcff 	.word	0xfffffcff
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800
 8006724:	fffffbff 	.word	0xfffffbff
 8006728:	fffff7ff 	.word	0xfffff7ff

0800672c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	4a35      	ldr	r2, [pc, #212]	; (8006810 <TIM_OC3_SetConfig+0xe4>)
 800673c:	401a      	ands	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2270      	movs	r2, #112	; 0x70
 8006758:	4393      	bics	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2203      	movs	r2, #3
 8006760:	4393      	bics	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4a28      	ldr	r2, [pc, #160]	; (8006814 <TIM_OC3_SetConfig+0xe8>)
 8006772:	4013      	ands	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a24      	ldr	r2, [pc, #144]	; (8006818 <TIM_OC3_SetConfig+0xec>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d10d      	bne.n	80067a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4a23      	ldr	r2, [pc, #140]	; (800681c <TIM_OC3_SetConfig+0xf0>)
 800678e:	4013      	ands	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <TIM_OC3_SetConfig+0xf4>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <TIM_OC3_SetConfig+0xec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_OC3_SetConfig+0x9a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <TIM_OC3_SetConfig+0xf8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_OC3_SetConfig+0x9a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <TIM_OC3_SetConfig+0xfc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_OC3_SetConfig+0x9a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1a      	ldr	r2, [pc, #104]	; (800682c <TIM_OC3_SetConfig+0x100>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d113      	bne.n	80067ee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <TIM_OC3_SetConfig+0x104>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_OC3_SetConfig+0x108>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	621a      	str	r2, [r3, #32]
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b006      	add	sp, #24
 800680e:	bd80      	pop	{r7, pc}
 8006810:	fffffeff 	.word	0xfffffeff
 8006814:	fffffdff 	.word	0xfffffdff
 8006818:	40012c00 	.word	0x40012c00
 800681c:	fffff7ff 	.word	0xfffff7ff
 8006820:	fffffbff 	.word	0xfffffbff
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800
 8006830:	ffffefff 	.word	0xffffefff
 8006834:	ffffdfff 	.word	0xffffdfff

08006838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	4a28      	ldr	r2, [pc, #160]	; (80068e8 <TIM_OC4_SetConfig+0xb0>)
 8006848:	401a      	ands	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_OC4_SetConfig+0xb4>)
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_OC4_SetConfig+0xb8>)
 800686c:	4013      	ands	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <TIM_OC4_SetConfig+0xbc>)
 8006880:	4013      	ands	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	031b      	lsls	r3, r3, #12
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <TIM_OC4_SetConfig+0xc0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_OC4_SetConfig+0x78>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <TIM_OC4_SetConfig+0xc4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_OC4_SetConfig+0x78>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a17      	ldr	r2, [pc, #92]	; (8006900 <TIM_OC4_SetConfig+0xc8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC4_SetConfig+0x78>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a16      	ldr	r2, [pc, #88]	; (8006904 <TIM_OC4_SetConfig+0xcc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4a15      	ldr	r2, [pc, #84]	; (8006908 <TIM_OC4_SetConfig+0xd0>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b006      	add	sp, #24
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	ffffefff 	.word	0xffffefff
 80068ec:	ffff8fff 	.word	0xffff8fff
 80068f0:	fffffcff 	.word	0xfffffcff
 80068f4:	ffffdfff 	.word	0xffffdfff
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800
 8006908:	ffffbfff 	.word	0xffffbfff

0800690c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	2201      	movs	r2, #1
 8006920:	4393      	bics	r3, r2
 8006922:	001a      	movs	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4a1e      	ldr	r2, [pc, #120]	; (80069b0 <TIM_TI1_SetConfig+0xa4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_TI1_SetConfig+0x40>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <TIM_TI1_SetConfig+0xa8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_TI1_SetConfig+0x40>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a1c      	ldr	r2, [pc, #112]	; (80069b8 <TIM_TI1_SetConfig+0xac>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d101      	bne.n	8006950 <TIM_TI1_SetConfig+0x44>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <TIM_TI1_SetConfig+0x46>
 8006950:	2300      	movs	r3, #0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2203      	movs	r2, #3
 800695a:	4393      	bics	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e003      	b.n	8006970 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2201      	movs	r2, #1
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	22f0      	movs	r2, #240	; 0xf0
 8006974:	4393      	bics	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	4013      	ands	r3, r2
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	220a      	movs	r2, #10
 800698a:	4393      	bics	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	220a      	movs	r2, #10
 8006992:	4013      	ands	r3, r2
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b006      	add	sp, #24
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40014000 	.word	0x40014000

080069bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	2201      	movs	r2, #1
 80069d4:	4393      	bics	r3, r2
 80069d6:	001a      	movs	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	22f0      	movs	r2, #240	; 0xf0
 80069e6:	4393      	bics	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	220a      	movs	r2, #10
 80069f8:	4393      	bics	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b006      	add	sp, #24
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	4393      	bics	r3, r2
 8006a2e:	001a      	movs	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4a14      	ldr	r2, [pc, #80]	; (8006a94 <TIM_TI2_SetConfig+0x7c>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4a10      	ldr	r2, [pc, #64]	; (8006a98 <TIM_TI2_SetConfig+0x80>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	031b      	lsls	r3, r3, #12
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	22a0      	movs	r2, #160	; 0xa0
 8006a6c:	4393      	bics	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	22a0      	movs	r2, #160	; 0xa0
 8006a76:	4013      	ands	r3, r2
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b006      	add	sp, #24
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	fffffcff 	.word	0xfffffcff
 8006a98:	ffff0fff 	.word	0xffff0fff

08006a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	2210      	movs	r2, #16
 8006aae:	4393      	bics	r3, r2
 8006ab0:	001a      	movs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <TIM_TI2_ConfigInputStage+0x60>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	031b      	lsls	r3, r3, #12
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	22a0      	movs	r2, #160	; 0xa0
 8006ad8:	4393      	bics	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b006      	add	sp, #24
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	ffff0fff 	.word	0xffff0fff

08006b00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <TIM_TI3_SetConfig+0x78>)
 8006b14:	401a      	ands	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	4393      	bics	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	22f0      	movs	r2, #240	; 0xf0
 8006b3a:	4393      	bics	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	22ff      	movs	r2, #255	; 0xff
 8006b44:	4013      	ands	r3, r2
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <TIM_TI3_SetConfig+0x7c>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	23a0      	movs	r3, #160	; 0xa0
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b006      	add	sp, #24
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	fffffeff 	.word	0xfffffeff
 8006b7c:	fffff5ff 	.word	0xfffff5ff

08006b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <TIM_TI4_SetConfig+0x7c>)
 8006b94:	401a      	ands	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <TIM_TI4_SetConfig+0x80>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <TIM_TI4_SetConfig+0x84>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	031b      	lsls	r3, r3, #12
 8006bc4:	041b      	lsls	r3, r3, #16
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4a0d      	ldr	r2, [pc, #52]	; (8006c08 <TIM_TI4_SetConfig+0x88>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	031a      	lsls	r2, r3, #12
 8006bda:	23a0      	movs	r3, #160	; 0xa0
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	4013      	ands	r3, r2
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b006      	add	sp, #24
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	ffffefff 	.word	0xffffefff
 8006c00:	fffffcff 	.word	0xfffffcff
 8006c04:	ffff0fff 	.word	0xffff0fff
 8006c08:	ffff5fff 	.word	0xffff5fff

08006c0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2270      	movs	r2, #112	; 0x70
 8006c20:	4393      	bics	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	2207      	movs	r2, #7
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	609a      	str	r2, [r3, #8]
}
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b004      	add	sp, #16
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <TIM_ETR_SetConfig+0x3c>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	021a      	lsls	r2, r3, #8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b006      	add	sp, #24
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	ffff00ff 	.word	0xffff00ff

08006c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	221f      	movs	r2, #31
 8006c90:	4013      	ands	r3, r2
 8006c92:	2201      	movs	r2, #1
 8006c94:	409a      	lsls	r2, r3
 8006c96:	0013      	movs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	43d2      	mvns	r2, r2
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	211f      	movs	r1, #31
 8006cb0:	400b      	ands	r3, r1
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4099      	lsls	r1, r3
 8006cb6:	000b      	movs	r3, r1
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b006      	add	sp, #24
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	223c      	movs	r2, #60	; 0x3c
 8006cd6:	5c9b      	ldrb	r3, [r3, r2]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e041      	b.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	223c      	movs	r2, #60	; 0x3c
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	223d      	movs	r2, #61	; 0x3d
 8006cec:	2102      	movs	r1, #2
 8006cee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2270      	movs	r2, #112	; 0x70
 8006d04:	4393      	bics	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a11      	ldr	r2, [pc, #68]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a10      	ldr	r2, [pc, #64]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10c      	bne.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2280      	movs	r2, #128	; 0x80
 8006d3c:	4393      	bics	r3, r2
 8006d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	223d      	movs	r2, #61	; 0x3d
 8006d56:	2101      	movs	r1, #1
 8006d58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	223c      	movs	r2, #60	; 0x3c
 8006d5e:	2100      	movs	r1, #0
 8006d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b004      	add	sp, #16
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	223c      	movs	r2, #60	; 0x3c
 8006d8a:	5c9b      	ldrb	r3, [r3, r2]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e03e      	b.n	8006e12 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	223c      	movs	r2, #60	; 0x3c
 8006d98:	2101      	movs	r1, #1
 8006d9a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	22ff      	movs	r2, #255	; 0xff
 8006da0:	4393      	bics	r3, r2
 8006da2:	001a      	movs	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006db0:	401a      	ands	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006dcc:	401a      	ands	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006dda:	401a      	ands	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006de8:	401a      	ands	r2, r3
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a0e      	ldr	r2, [pc, #56]	; (8006e30 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006df6:	401a      	ands	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	223c      	movs	r2, #60	; 0x3c
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	0018      	movs	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b004      	add	sp, #16
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	fffffcff 	.word	0xfffffcff
 8006e20:	fffffbff 	.word	0xfffffbff
 8006e24:	fffff7ff 	.word	0xfffff7ff
 8006e28:	ffffefff 	.word	0xffffefff
 8006e2c:	ffffdfff 	.word	0xffffdfff
 8006e30:	ffffbfff 	.word	0xffffbfff

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	46c0      	nop			; (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b002      	add	sp, #8
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e044      	b.n	8006ef0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d107      	bne.n	8006e7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2274      	movs	r2, #116	; 0x74
 8006e72:	2100      	movs	r1, #0
 8006e74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f7fc ff63 	bl	8003d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2224      	movs	r2, #36	; 0x24
 8006e82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2101      	movs	r1, #1
 8006e90:	438a      	bics	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f000 fcc2 	bl	8007820 <UART_SetConfig>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e024      	b.n	8006ef0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f000 fe0d 	bl	8007ad0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	490d      	ldr	r1, [pc, #52]	; (8006ef8 <HAL_UART_Init+0xa4>)
 8006ec2:	400a      	ands	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2108      	movs	r1, #8
 8006ed2:	438a      	bics	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f000 fea5 	bl	8007c38 <UART_CheckIdleState>
 8006eee:	0003      	movs	r3, r0
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b002      	add	sp, #8
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	fffff7ff 	.word	0xfffff7ff

08006efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	1dbb      	adds	r3, r7, #6
 8006f0a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d000      	beq.n	8006f16 <HAL_UART_Transmit+0x1a>
 8006f14:	e096      	b.n	8007044 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_UART_Transmit+0x28>
 8006f1c:	1dbb      	adds	r3, r7, #6
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e08e      	b.n	8007046 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	2380      	movs	r3, #128	; 0x80
 8006f2e:	015b      	lsls	r3, r3, #5
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d109      	bne.n	8006f48 <HAL_UART_Transmit+0x4c>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4013      	ands	r3, r2
 8006f42:	d001      	beq.n	8006f48 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e07e      	b.n	8007046 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2274      	movs	r2, #116	; 0x74
 8006f4c:	5c9b      	ldrb	r3, [r3, r2]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Transmit+0x5a>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e077      	b.n	8007046 <HAL_UART_Transmit+0x14a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2274      	movs	r2, #116	; 0x74
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2280      	movs	r2, #128	; 0x80
 8006f62:	2100      	movs	r1, #0
 8006f64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2221      	movs	r2, #33	; 0x21
 8006f6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f6c:	f7fd f92a 	bl	80041c4 <HAL_GetTick>
 8006f70:	0003      	movs	r3, r0
 8006f72:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1dba      	adds	r2, r7, #6
 8006f78:	2150      	movs	r1, #80	; 0x50
 8006f7a:	8812      	ldrh	r2, [r2, #0]
 8006f7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1dba      	adds	r2, r7, #6
 8006f82:	2152      	movs	r1, #82	; 0x52
 8006f84:	8812      	ldrh	r2, [r2, #0]
 8006f86:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	015b      	lsls	r3, r3, #5
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d108      	bne.n	8006fa6 <HAL_UART_Transmit+0xaa>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e003      	b.n	8006fae <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2274      	movs	r2, #116	; 0x74
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006fb6:	e02d      	b.n	8007014 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	0013      	movs	r3, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2180      	movs	r1, #128	; 0x80
 8006fc6:	f000 fe7f 	bl	8007cc8 <UART_WaitOnFlagUntilTimeout>
 8006fca:	1e03      	subs	r3, r0, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e039      	b.n	8007046 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	881a      	ldrh	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	05d2      	lsls	r2, r2, #23
 8006fe2:	0dd2      	lsrs	r2, r2, #23
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	3302      	adds	r3, #2
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	e008      	b.n	8007002 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2252      	movs	r2, #82	; 0x52
 8007006:	5a9b      	ldrh	r3, [r3, r2]
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b299      	uxth	r1, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2252      	movs	r2, #82	; 0x52
 8007012:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2252      	movs	r2, #82	; 0x52
 8007018:	5a9b      	ldrh	r3, [r3, r2]
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1cb      	bne.n	8006fb8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	0013      	movs	r3, r2
 800702a:	2200      	movs	r2, #0
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	f000 fe4b 	bl	8007cc8 <UART_WaitOnFlagUntilTimeout>
 8007032:	1e03      	subs	r3, r0, #0
 8007034:	d001      	beq.n	800703a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e005      	b.n	8007046 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
  }
}
 8007046:	0018      	movs	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	b008      	add	sp, #32
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	1dbb      	adds	r3, r7, #6
 800705c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007062:	2b20      	cmp	r3, #32
 8007064:	d000      	beq.n	8007068 <HAL_UART_Transmit_DMA+0x18>
 8007066:	e08a      	b.n	800717e <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_UART_Transmit_DMA+0x26>
 800706e:	1dbb      	adds	r3, r7, #6
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e082      	b.n	8007180 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	015b      	lsls	r3, r3, #5
 8007082:	429a      	cmp	r2, r3
 8007084:	d109      	bne.n	800709a <HAL_UART_Transmit_DMA+0x4a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d105      	bne.n	800709a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2201      	movs	r2, #1
 8007092:	4013      	ands	r3, r2
 8007094:	d001      	beq.n	800709a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e072      	b.n	8007180 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2274      	movs	r2, #116	; 0x74
 800709e:	5c9b      	ldrb	r3, [r3, r2]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_UART_Transmit_DMA+0x58>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e06b      	b.n	8007180 <HAL_UART_Transmit_DMA+0x130>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2274      	movs	r2, #116	; 0x74
 80070ac:	2101      	movs	r1, #1
 80070ae:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1dba      	adds	r2, r7, #6
 80070ba:	2150      	movs	r1, #80	; 0x50
 80070bc:	8812      	ldrh	r2, [r2, #0]
 80070be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	1dba      	adds	r2, r7, #6
 80070c4:	2152      	movs	r1, #82	; 0x52
 80070c6:	8812      	ldrh	r2, [r2, #0]
 80070c8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	2100      	movs	r1, #0
 80070d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2221      	movs	r2, #33	; 0x21
 80070d6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02b      	beq.n	8007138 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e4:	4a28      	ldr	r2, [pc, #160]	; (8007188 <HAL_UART_Transmit_DMA+0x138>)
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ec:	4a27      	ldr	r2, [pc, #156]	; (800718c <HAL_UART_Transmit_DMA+0x13c>)
 80070ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f4:	4a26      	ldr	r2, [pc, #152]	; (8007190 <HAL_UART_Transmit_DMA+0x140>)
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fc:	2200      	movs	r2, #0
 80070fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007108:	0019      	movs	r1, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3328      	adds	r3, #40	; 0x28
 8007110:	001a      	movs	r2, r3
 8007112:	1dbb      	adds	r3, r7, #6
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	f7fd f9a9 	bl	800446c <HAL_DMA_Start_IT>
 800711a:	1e03      	subs	r3, r0, #0
 800711c:	d00c      	beq.n	8007138 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2280      	movs	r2, #128	; 0x80
 8007122:	2110      	movs	r1, #16
 8007124:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2274      	movs	r2, #116	; 0x74
 800712a:	2100      	movs	r1, #0
 800712c:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e023      	b.n	8007180 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2240      	movs	r2, #64	; 0x40
 800713e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2274      	movs	r2, #116	; 0x74
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007148:	f3ef 8310 	mrs	r3, PRIMASK
 800714c:	613b      	str	r3, [r7, #16]
  return(result);
 800714e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f383 8810 	msr	PRIMASK, r3
}
 800715c:	46c0      	nop			; (mov r8, r8)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2180      	movs	r1, #128	; 0x80
 800716a:	430a      	orrs	r2, r1
 800716c:	609a      	str	r2, [r3, #8]
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	f383 8810 	msr	PRIMASK, r3
}
 8007178:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	e000      	b.n	8007180 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 800717e:	2302      	movs	r3, #2
  }
}
 8007180:	0018      	movs	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	b008      	add	sp, #32
 8007186:	bd80      	pop	{r7, pc}
 8007188:	080080a1 	.word	0x080080a1
 800718c:	08008135 	.word	0x08008135
 8007190:	080082b5 	.word	0x080082b5

08007194 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	1dbb      	adds	r3, r7, #6
 80071a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d150      	bne.n	800724c <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_UART_Receive_DMA+0x24>
 80071b0:	1dbb      	adds	r3, r7, #6
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e048      	b.n	800724e <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	015b      	lsls	r3, r3, #5
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d109      	bne.n	80071dc <HAL_UART_Receive_DMA+0x48>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2201      	movs	r2, #1
 80071d4:	4013      	ands	r3, r2
 80071d6:	d001      	beq.n	80071dc <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e038      	b.n	800724e <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2274      	movs	r2, #116	; 0x74
 80071e0:	5c9b      	ldrb	r3, [r3, r2]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Receive_DMA+0x56>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e031      	b.n	800724e <HAL_UART_Receive_DMA+0xba>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2274      	movs	r2, #116	; 0x74
 80071ee:	2101      	movs	r1, #1
 80071f0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	2380      	movs	r3, #128	; 0x80
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	4013      	ands	r3, r2
 8007204:	d019      	beq.n	800723a <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007206:	f3ef 8310 	mrs	r3, PRIMASK
 800720a:	613b      	str	r3, [r7, #16]
  return(result);
 800720c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	2301      	movs	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f383 8810 	msr	PRIMASK, r3
}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2180      	movs	r1, #128	; 0x80
 8007228:	04c9      	lsls	r1, r1, #19
 800722a:	430a      	orrs	r2, r1
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800723a:	1dbb      	adds	r3, r7, #6
 800723c:	881a      	ldrh	r2, [r3, #0]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 fe04 	bl	8007e50 <UART_Start_Receive_DMA>
 8007248:	0003      	movs	r3, r0
 800724a:	e000      	b.n	800724e <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 800724c:	2302      	movs	r3, #2
  }
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b008      	add	sp, #32
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007258:	b590      	push	{r4, r7, lr}
 800725a:	b0ab      	sub	sp, #172	; 0xac
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	22a4      	movs	r2, #164	; 0xa4
 8007268:	18b9      	adds	r1, r7, r2
 800726a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	20a0      	movs	r0, #160	; 0xa0
 8007274:	1839      	adds	r1, r7, r0
 8007276:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	219c      	movs	r1, #156	; 0x9c
 8007280:	1879      	adds	r1, r7, r1
 8007282:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007284:	0011      	movs	r1, r2
 8007286:	18bb      	adds	r3, r7, r2
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a99      	ldr	r2, [pc, #612]	; (80074f0 <HAL_UART_IRQHandler+0x298>)
 800728c:	4013      	ands	r3, r2
 800728e:	2298      	movs	r2, #152	; 0x98
 8007290:	18bc      	adds	r4, r7, r2
 8007292:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007294:	18bb      	adds	r3, r7, r2
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d114      	bne.n	80072c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800729c:	187b      	adds	r3, r7, r1
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2220      	movs	r2, #32
 80072a2:	4013      	ands	r3, r2
 80072a4:	d00f      	beq.n	80072c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072a6:	183b      	adds	r3, r7, r0
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2220      	movs	r2, #32
 80072ac:	4013      	ands	r3, r2
 80072ae:	d00a      	beq.n	80072c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d100      	bne.n	80072ba <HAL_UART_IRQHandler+0x62>
 80072b8:	e27e      	b.n	80077b8 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	0010      	movs	r0, r2
 80072c2:	4798      	blx	r3
      }
      return;
 80072c4:	e278      	b.n	80077b8 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072c6:	2398      	movs	r3, #152	; 0x98
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d100      	bne.n	80072d2 <HAL_UART_IRQHandler+0x7a>
 80072d0:	e114      	b.n	80074fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80072d2:	239c      	movs	r3, #156	; 0x9c
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2201      	movs	r2, #1
 80072da:	4013      	ands	r3, r2
 80072dc:	d106      	bne.n	80072ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80072de:	23a0      	movs	r3, #160	; 0xa0
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a83      	ldr	r2, [pc, #524]	; (80074f4 <HAL_UART_IRQHandler+0x29c>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	d100      	bne.n	80072ec <HAL_UART_IRQHandler+0x94>
 80072ea:	e107      	b.n	80074fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072ec:	23a4      	movs	r3, #164	; 0xa4
 80072ee:	18fb      	adds	r3, r7, r3
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	4013      	ands	r3, r2
 80072f6:	d012      	beq.n	800731e <HAL_UART_IRQHandler+0xc6>
 80072f8:	23a0      	movs	r3, #160	; 0xa0
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	2380      	movs	r3, #128	; 0x80
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4013      	ands	r3, r2
 8007304:	d00b      	beq.n	800731e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2201      	movs	r2, #1
 800730c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	589b      	ldr	r3, [r3, r2]
 8007314:	2201      	movs	r2, #1
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2180      	movs	r1, #128	; 0x80
 800731c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800731e:	23a4      	movs	r3, #164	; 0xa4
 8007320:	18fb      	adds	r3, r7, r3
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2202      	movs	r2, #2
 8007326:	4013      	ands	r3, r2
 8007328:	d011      	beq.n	800734e <HAL_UART_IRQHandler+0xf6>
 800732a:	239c      	movs	r3, #156	; 0x9c
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2201      	movs	r2, #1
 8007332:	4013      	ands	r3, r2
 8007334:	d00b      	beq.n	800734e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2202      	movs	r2, #2
 800733c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2280      	movs	r2, #128	; 0x80
 8007342:	589b      	ldr	r3, [r3, r2]
 8007344:	2204      	movs	r2, #4
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2180      	movs	r1, #128	; 0x80
 800734c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800734e:	23a4      	movs	r3, #164	; 0xa4
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2204      	movs	r2, #4
 8007356:	4013      	ands	r3, r2
 8007358:	d011      	beq.n	800737e <HAL_UART_IRQHandler+0x126>
 800735a:	239c      	movs	r3, #156	; 0x9c
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2201      	movs	r2, #1
 8007362:	4013      	ands	r3, r2
 8007364:	d00b      	beq.n	800737e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2204      	movs	r2, #4
 800736c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2280      	movs	r2, #128	; 0x80
 8007372:	589b      	ldr	r3, [r3, r2]
 8007374:	2202      	movs	r2, #2
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800737e:	23a4      	movs	r3, #164	; 0xa4
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2208      	movs	r2, #8
 8007386:	4013      	ands	r3, r2
 8007388:	d017      	beq.n	80073ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800738a:	23a0      	movs	r3, #160	; 0xa0
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2220      	movs	r2, #32
 8007392:	4013      	ands	r3, r2
 8007394:	d105      	bne.n	80073a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007396:	239c      	movs	r3, #156	; 0x9c
 8007398:	18fb      	adds	r3, r7, r3
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2201      	movs	r2, #1
 800739e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073a0:	d00b      	beq.n	80073ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2208      	movs	r2, #8
 80073a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	589b      	ldr	r3, [r3, r2]
 80073b0:	2208      	movs	r2, #8
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073ba:	23a4      	movs	r3, #164	; 0xa4
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	2380      	movs	r3, #128	; 0x80
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	4013      	ands	r3, r2
 80073c6:	d013      	beq.n	80073f0 <HAL_UART_IRQHandler+0x198>
 80073c8:	23a0      	movs	r3, #160	; 0xa0
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	2380      	movs	r3, #128	; 0x80
 80073d0:	04db      	lsls	r3, r3, #19
 80073d2:	4013      	ands	r3, r2
 80073d4:	d00c      	beq.n	80073f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2280      	movs	r2, #128	; 0x80
 80073dc:	0112      	lsls	r2, r2, #4
 80073de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2280      	movs	r2, #128	; 0x80
 80073e4:	589b      	ldr	r3, [r3, r2]
 80073e6:	2220      	movs	r2, #32
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2180      	movs	r1, #128	; 0x80
 80073ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2280      	movs	r2, #128	; 0x80
 80073f4:	589b      	ldr	r3, [r3, r2]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d100      	bne.n	80073fc <HAL_UART_IRQHandler+0x1a4>
 80073fa:	e1df      	b.n	80077bc <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80073fc:	23a4      	movs	r3, #164	; 0xa4
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2220      	movs	r2, #32
 8007404:	4013      	ands	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007408:	23a0      	movs	r3, #160	; 0xa0
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2220      	movs	r2, #32
 8007410:	4013      	ands	r3, r2
 8007412:	d008      	beq.n	8007426 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	0010      	movs	r0, r2
 8007424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	589b      	ldr	r3, [r3, r2]
 800742c:	2194      	movs	r1, #148	; 0x94
 800742e:	187a      	adds	r2, r7, r1
 8007430:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2240      	movs	r2, #64	; 0x40
 800743a:	4013      	ands	r3, r2
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d004      	beq.n	800744a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007440:	187b      	adds	r3, r7, r1
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2228      	movs	r2, #40	; 0x28
 8007446:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007448:	d047      	beq.n	80074da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fdc5 	bl	8007fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2240      	movs	r2, #64	; 0x40
 800745a:	4013      	ands	r3, r2
 800745c:	2b40      	cmp	r3, #64	; 0x40
 800745e:	d137      	bne.n	80074d0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007460:	f3ef 8310 	mrs	r3, PRIMASK
 8007464:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007468:	2090      	movs	r0, #144	; 0x90
 800746a:	183a      	adds	r2, r7, r0
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	2301      	movs	r3, #1
 8007470:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007474:	f383 8810 	msr	PRIMASK, r3
}
 8007478:	46c0      	nop			; (mov r8, r8)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	438a      	bics	r2, r1
 8007488:	609a      	str	r2, [r3, #8]
 800748a:	183b      	adds	r3, r7, r0
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007492:	f383 8810 	msr	PRIMASK, r3
}
 8007496:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	2b00      	cmp	r3, #0
 800749e:	d012      	beq.n	80074c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a4:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <HAL_UART_IRQHandler+0x2a0>)
 80074a6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7fd f87b 	bl	80045a8 <HAL_DMA_Abort_IT>
 80074b2:	1e03      	subs	r3, r0, #0
 80074b4:	d01a      	beq.n	80074ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	0018      	movs	r0, r3
 80074c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	e012      	b.n	80074ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	0018      	movs	r0, r3
 80074ca:	f000 f995 	bl	80077f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ce:	e00d      	b.n	80074ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	0018      	movs	r0, r3
 80074d4:	f000 f990 	bl	80077f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	e008      	b.n	80074ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f000 f98b 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	2100      	movs	r1, #0
 80074e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80074ea:	e167      	b.n	80077bc <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	46c0      	nop			; (mov r8, r8)
    return;
 80074ee:	e165      	b.n	80077bc <HAL_UART_IRQHandler+0x564>
 80074f0:	0000080f 	.word	0x0000080f
 80074f4:	04000120 	.word	0x04000120
 80074f8:	08008337 	.word	0x08008337

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007500:	2b01      	cmp	r3, #1
 8007502:	d000      	beq.n	8007506 <HAL_UART_IRQHandler+0x2ae>
 8007504:	e131      	b.n	800776a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007506:	23a4      	movs	r3, #164	; 0xa4
 8007508:	18fb      	adds	r3, r7, r3
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2210      	movs	r2, #16
 800750e:	4013      	ands	r3, r2
 8007510:	d100      	bne.n	8007514 <HAL_UART_IRQHandler+0x2bc>
 8007512:	e12a      	b.n	800776a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007514:	23a0      	movs	r3, #160	; 0xa0
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2210      	movs	r2, #16
 800751c:	4013      	ands	r3, r2
 800751e:	d100      	bne.n	8007522 <HAL_UART_IRQHandler+0x2ca>
 8007520:	e123      	b.n	800776a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2210      	movs	r2, #16
 8007528:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	4013      	ands	r3, r2
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d000      	beq.n	800753a <HAL_UART_IRQHandler+0x2e2>
 8007538:	e09b      	b.n	8007672 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	217e      	movs	r1, #126	; 0x7e
 8007544:	187b      	adds	r3, r7, r1
 8007546:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007548:	187b      	adds	r3, r7, r1
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d100      	bne.n	8007552 <HAL_UART_IRQHandler+0x2fa>
 8007550:	e136      	b.n	80077c0 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2258      	movs	r2, #88	; 0x58
 8007556:	5a9b      	ldrh	r3, [r3, r2]
 8007558:	187a      	adds	r2, r7, r1
 800755a:	8812      	ldrh	r2, [r2, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d300      	bcc.n	8007562 <HAL_UART_IRQHandler+0x30a>
 8007560:	e12e      	b.n	80077c0 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	187a      	adds	r2, r7, r1
 8007566:	215a      	movs	r1, #90	; 0x5a
 8007568:	8812      	ldrh	r2, [r2, #0]
 800756a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b20      	cmp	r3, #32
 8007574:	d06e      	beq.n	8007654 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007576:	f3ef 8310 	mrs	r3, PRIMASK
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800757e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007580:	2301      	movs	r3, #1
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	f383 8810 	msr	PRIMASK, r3
}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	498e      	ldr	r1, [pc, #568]	; (80077d0 <HAL_UART_IRQHandler+0x578>)
 8007598:	400a      	ands	r2, r1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	f383 8810 	msr	PRIMASK, r3
}
 80075a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b0:	677b      	str	r3, [r7, #116]	; 0x74
 80075b2:	2301      	movs	r3, #1
 80075b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b8:	f383 8810 	msr	PRIMASK, r3
}
 80075bc:	46c0      	nop			; (mov r8, r8)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2101      	movs	r1, #1
 80075ca:	438a      	bics	r2, r1
 80075cc:	609a      	str	r2, [r3, #8]
 80075ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075da:	f3ef 8310 	mrs	r3, PRIMASK
 80075de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	673b      	str	r3, [r7, #112]	; 0x70
 80075e4:	2301      	movs	r3, #1
 80075e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ea:	f383 8810 	msr	PRIMASK, r3
}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2140      	movs	r1, #64	; 0x40
 80075fc:	438a      	bics	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007602:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007606:	f383 8810 	msr	PRIMASK, r3
}
 800760a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007618:	f3ef 8310 	mrs	r3, PRIMASK
 800761c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800761e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007622:	2301      	movs	r3, #1
 8007624:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007628:	f383 8810 	msr	PRIMASK, r3
}
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2110      	movs	r1, #16
 800763a:	438a      	bics	r2, r1
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007640:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007644:	f383 8810 	msr	PRIMASK, r3
}
 8007648:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	0018      	movs	r0, r3
 8007650:	f7fc ff72 	bl	8004538 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2258      	movs	r2, #88	; 0x58
 8007658:	5a9a      	ldrh	r2, [r3, r2]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	215a      	movs	r1, #90	; 0x5a
 800765e:	5a5b      	ldrh	r3, [r3, r1]
 8007660:	b29b      	uxth	r3, r3
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	0011      	movs	r1, r2
 800766a:	0018      	movs	r0, r3
 800766c:	f000 f8cc 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007670:	e0a6      	b.n	80077c0 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2258      	movs	r2, #88	; 0x58
 8007676:	5a99      	ldrh	r1, [r3, r2]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	225a      	movs	r2, #90	; 0x5a
 800767c:	5a9b      	ldrh	r3, [r3, r2]
 800767e:	b29a      	uxth	r2, r3
 8007680:	208e      	movs	r0, #142	; 0x8e
 8007682:	183b      	adds	r3, r7, r0
 8007684:	1a8a      	subs	r2, r1, r2
 8007686:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	225a      	movs	r2, #90	; 0x5a
 800768c:	5a9b      	ldrh	r3, [r3, r2]
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d100      	bne.n	8007696 <HAL_UART_IRQHandler+0x43e>
 8007694:	e096      	b.n	80077c4 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8007696:	183b      	adds	r3, r7, r0
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d100      	bne.n	80076a0 <HAL_UART_IRQHandler+0x448>
 800769e:	e091      	b.n	80077c4 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a0:	f3ef 8310 	mrs	r3, PRIMASK
 80076a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a8:	2488      	movs	r4, #136	; 0x88
 80076aa:	193a      	adds	r2, r7, r4
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	2301      	movs	r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4943      	ldr	r1, [pc, #268]	; (80077d4 <HAL_UART_IRQHandler+0x57c>)
 80076c6:	400a      	ands	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	193b      	adds	r3, r7, r4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f383 8810 	msr	PRIMASK, r3
}
 80076d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d8:	f3ef 8310 	mrs	r3, PRIMASK
 80076dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80076de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e0:	2484      	movs	r4, #132	; 0x84
 80076e2:	193a      	adds	r2, r7, r4
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	2301      	movs	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	f383 8810 	msr	PRIMASK, r3
}
 80076f0:	46c0      	nop			; (mov r8, r8)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2101      	movs	r1, #1
 80076fe:	438a      	bics	r2, r1
 8007700:	609a      	str	r2, [r3, #8]
 8007702:	193b      	adds	r3, r7, r4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f383 8810 	msr	PRIMASK, r3
}
 800770e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007722:	f3ef 8310 	mrs	r3, PRIMASK
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	2480      	movs	r4, #128	; 0x80
 800772c:	193a      	adds	r2, r7, r4
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	2301      	movs	r3, #1
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f383 8810 	msr	PRIMASK, r3
}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2110      	movs	r1, #16
 8007748:	438a      	bics	r2, r1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	193b      	adds	r3, r7, r4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	f383 8810 	msr	PRIMASK, r3
}
 8007758:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800775a:	183b      	adds	r3, r7, r0
 800775c:	881a      	ldrh	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	0011      	movs	r1, r2
 8007762:	0018      	movs	r0, r3
 8007764:	f000 f850 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007768:	e02c      	b.n	80077c4 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800776a:	23a4      	movs	r3, #164	; 0xa4
 800776c:	18fb      	adds	r3, r7, r3
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	4013      	ands	r3, r2
 8007774:	d00f      	beq.n	8007796 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007776:	23a0      	movs	r3, #160	; 0xa0
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2280      	movs	r2, #128	; 0x80
 800777e:	4013      	ands	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01e      	beq.n	80077c8 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	0010      	movs	r0, r2
 8007792:	4798      	blx	r3
    }
    return;
 8007794:	e018      	b.n	80077c8 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007796:	23a4      	movs	r3, #164	; 0xa4
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2240      	movs	r2, #64	; 0x40
 800779e:	4013      	ands	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_UART_IRQHandler+0x572>
 80077a2:	23a0      	movs	r3, #160	; 0xa0
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2240      	movs	r2, #64	; 0x40
 80077aa:	4013      	ands	r3, r2
 80077ac:	d00d      	beq.n	80077ca <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 fdd7 	bl	8008364 <UART_EndTransmit_IT>
    return;
 80077b6:	e008      	b.n	80077ca <HAL_UART_IRQHandler+0x572>
      return;
 80077b8:	46c0      	nop			; (mov r8, r8)
 80077ba:	e006      	b.n	80077ca <HAL_UART_IRQHandler+0x572>
    return;
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	e004      	b.n	80077ca <HAL_UART_IRQHandler+0x572>
      return;
 80077c0:	46c0      	nop			; (mov r8, r8)
 80077c2:	e002      	b.n	80077ca <HAL_UART_IRQHandler+0x572>
      return;
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	e000      	b.n	80077ca <HAL_UART_IRQHandler+0x572>
    return;
 80077c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b02b      	add	sp, #172	; 0xac
 80077ce:	bd90      	pop	{r4, r7, pc}
 80077d0:	fffffeff 	.word	0xfffffeff
 80077d4:	fffffedf 	.word	0xfffffedf

080077d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b002      	add	sp, #8
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007800:	46c0      	nop			; (mov r8, r8)
 8007802:	46bd      	mov	sp, r7
 8007804:	b002      	add	sp, #8
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	000a      	movs	r2, r1
 8007812:	1cbb      	adds	r3, r7, #2
 8007814:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b002      	add	sp, #8
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007828:	231e      	movs	r3, #30
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a97      	ldr	r2, [pc, #604]	; (8007aac <UART_SetConfig+0x28c>)
 8007850:	4013      	ands	r3, r2
 8007852:	0019      	movs	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	430a      	orrs	r2, r1
 800785c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a92      	ldr	r2, [pc, #584]	; (8007ab0 <UART_SetConfig+0x290>)
 8007866:	4013      	ands	r3, r2
 8007868:	0019      	movs	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4a89      	ldr	r2, [pc, #548]	; (8007ab4 <UART_SetConfig+0x294>)
 800788e:	4013      	ands	r3, r2
 8007890:	0019      	movs	r1, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	430a      	orrs	r2, r1
 800789a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a85      	ldr	r2, [pc, #532]	; (8007ab8 <UART_SetConfig+0x298>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d127      	bne.n	80078f6 <UART_SetConfig+0xd6>
 80078a6:	4b85      	ldr	r3, [pc, #532]	; (8007abc <UART_SetConfig+0x29c>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	2203      	movs	r2, #3
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d00d      	beq.n	80078ce <UART_SetConfig+0xae>
 80078b2:	d81b      	bhi.n	80078ec <UART_SetConfig+0xcc>
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d014      	beq.n	80078e2 <UART_SetConfig+0xc2>
 80078b8:	d818      	bhi.n	80078ec <UART_SetConfig+0xcc>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <UART_SetConfig+0xa4>
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d00a      	beq.n	80078d8 <UART_SetConfig+0xb8>
 80078c2:	e013      	b.n	80078ec <UART_SetConfig+0xcc>
 80078c4:	231f      	movs	r3, #31
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	e035      	b.n	800793a <UART_SetConfig+0x11a>
 80078ce:	231f      	movs	r3, #31
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	e030      	b.n	800793a <UART_SetConfig+0x11a>
 80078d8:	231f      	movs	r3, #31
 80078da:	18fb      	adds	r3, r7, r3
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e02b      	b.n	800793a <UART_SetConfig+0x11a>
 80078e2:	231f      	movs	r3, #31
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	2208      	movs	r2, #8
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e026      	b.n	800793a <UART_SetConfig+0x11a>
 80078ec:	231f      	movs	r3, #31
 80078ee:	18fb      	adds	r3, r7, r3
 80078f0:	2210      	movs	r2, #16
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e021      	b.n	800793a <UART_SetConfig+0x11a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a71      	ldr	r2, [pc, #452]	; (8007ac0 <UART_SetConfig+0x2a0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d104      	bne.n	800790a <UART_SetConfig+0xea>
 8007900:	231f      	movs	r3, #31
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e017      	b.n	800793a <UART_SetConfig+0x11a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a6d      	ldr	r2, [pc, #436]	; (8007ac4 <UART_SetConfig+0x2a4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d104      	bne.n	800791e <UART_SetConfig+0xfe>
 8007914:	231f      	movs	r3, #31
 8007916:	18fb      	adds	r3, r7, r3
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	e00d      	b.n	800793a <UART_SetConfig+0x11a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a69      	ldr	r2, [pc, #420]	; (8007ac8 <UART_SetConfig+0x2a8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d104      	bne.n	8007932 <UART_SetConfig+0x112>
 8007928:	231f      	movs	r3, #31
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e003      	b.n	800793a <UART_SetConfig+0x11a>
 8007932:	231f      	movs	r3, #31
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	2210      	movs	r2, #16
 8007938:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69da      	ldr	r2, [r3, #28]
 800793e:	2380      	movs	r3, #128	; 0x80
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	429a      	cmp	r2, r3
 8007944:	d15d      	bne.n	8007a02 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8007946:	231f      	movs	r3, #31
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d015      	beq.n	800797c <UART_SetConfig+0x15c>
 8007950:	dc18      	bgt.n	8007984 <UART_SetConfig+0x164>
 8007952:	2b04      	cmp	r3, #4
 8007954:	d00d      	beq.n	8007972 <UART_SetConfig+0x152>
 8007956:	dc15      	bgt.n	8007984 <UART_SetConfig+0x164>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <UART_SetConfig+0x142>
 800795c:	2b02      	cmp	r3, #2
 800795e:	d005      	beq.n	800796c <UART_SetConfig+0x14c>
 8007960:	e010      	b.n	8007984 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007962:	f7fd fd3b 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007966:	0003      	movs	r3, r0
 8007968:	61bb      	str	r3, [r7, #24]
        break;
 800796a:	e012      	b.n	8007992 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800796c:	4b57      	ldr	r3, [pc, #348]	; (8007acc <UART_SetConfig+0x2ac>)
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e00f      	b.n	8007992 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7fd fcc3 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 8007976:	0003      	movs	r3, r0
 8007978:	61bb      	str	r3, [r7, #24]
        break;
 800797a:	e00a      	b.n	8007992 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797c:	2380      	movs	r3, #128	; 0x80
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	61bb      	str	r3, [r7, #24]
        break;
 8007982:	e006      	b.n	8007992 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007988:	231e      	movs	r3, #30
 800798a:	18fb      	adds	r3, r7, r3
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
        break;
 8007990:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d100      	bne.n	800799a <UART_SetConfig+0x17a>
 8007998:	e07b      	b.n	8007a92 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	005a      	lsls	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	18d2      	adds	r2, r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	0019      	movs	r1, r3
 80079ac:	0010      	movs	r0, r2
 80079ae:	f7f8 fbd1 	bl	8000154 <__udivsi3>
 80079b2:	0003      	movs	r3, r0
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d91c      	bls.n	80079f8 <UART_SetConfig+0x1d8>
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	025b      	lsls	r3, r3, #9
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d217      	bcs.n	80079f8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	200e      	movs	r0, #14
 80079ce:	183b      	adds	r3, r7, r0
 80079d0:	210f      	movs	r1, #15
 80079d2:	438a      	bics	r2, r1
 80079d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2207      	movs	r2, #7
 80079de:	4013      	ands	r3, r2
 80079e0:	b299      	uxth	r1, r3
 80079e2:	183b      	adds	r3, r7, r0
 80079e4:	183a      	adds	r2, r7, r0
 80079e6:	8812      	ldrh	r2, [r2, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	183a      	adds	r2, r7, r0
 80079f2:	8812      	ldrh	r2, [r2, #0]
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	e04c      	b.n	8007a92 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80079f8:	231e      	movs	r3, #30
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e047      	b.n	8007a92 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a02:	231f      	movs	r3, #31
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d015      	beq.n	8007a38 <UART_SetConfig+0x218>
 8007a0c:	dc18      	bgt.n	8007a40 <UART_SetConfig+0x220>
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d00d      	beq.n	8007a2e <UART_SetConfig+0x20e>
 8007a12:	dc15      	bgt.n	8007a40 <UART_SetConfig+0x220>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <UART_SetConfig+0x1fe>
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d005      	beq.n	8007a28 <UART_SetConfig+0x208>
 8007a1c:	e010      	b.n	8007a40 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1e:	f7fd fcdd 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007a22:	0003      	movs	r3, r0
 8007a24:	61bb      	str	r3, [r7, #24]
        break;
 8007a26:	e012      	b.n	8007a4e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a28:	4b28      	ldr	r3, [pc, #160]	; (8007acc <UART_SetConfig+0x2ac>)
 8007a2a:	61bb      	str	r3, [r7, #24]
        break;
 8007a2c:	e00f      	b.n	8007a4e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a2e:	f7fd fc65 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 8007a32:	0003      	movs	r3, r0
 8007a34:	61bb      	str	r3, [r7, #24]
        break;
 8007a36:	e00a      	b.n	8007a4e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a38:	2380      	movs	r3, #128	; 0x80
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	61bb      	str	r3, [r7, #24]
        break;
 8007a3e:	e006      	b.n	8007a4e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a44:	231e      	movs	r3, #30
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
        break;
 8007a4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01e      	beq.n	8007a92 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	085a      	lsrs	r2, r3, #1
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	18d2      	adds	r2, r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	0019      	movs	r1, r3
 8007a64:	0010      	movs	r0, r2
 8007a66:	f7f8 fb75 	bl	8000154 <__udivsi3>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2b0f      	cmp	r3, #15
 8007a74:	d909      	bls.n	8007a8a <UART_SetConfig+0x26a>
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	025b      	lsls	r3, r3, #9
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d204      	bcs.n	8007a8a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	60da      	str	r2, [r3, #12]
 8007a88:	e003      	b.n	8007a92 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8a:	231e      	movs	r3, #30
 8007a8c:	18fb      	adds	r3, r7, r3
 8007a8e:	2201      	movs	r2, #1
 8007a90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a9e:	231e      	movs	r3, #30
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	781b      	ldrb	r3, [r3, #0]
}
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	b008      	add	sp, #32
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	efff69f3 	.word	0xefff69f3
 8007ab0:	ffffcfff 	.word	0xffffcfff
 8007ab4:	fffff4ff 	.word	0xfffff4ff
 8007ab8:	40013800 	.word	0x40013800
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40004400 	.word	0x40004400
 8007ac4:	40004800 	.word	0x40004800
 8007ac8:	40004c00 	.word	0x40004c00
 8007acc:	007a1200 	.word	0x007a1200

08007ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2201      	movs	r2, #1
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d00b      	beq.n	8007afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4a4a      	ldr	r2, [pc, #296]	; (8007c14 <UART_AdvFeatureConfig+0x144>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	0019      	movs	r1, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2202      	movs	r2, #2
 8007b00:	4013      	ands	r3, r2
 8007b02:	d00b      	beq.n	8007b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	4a43      	ldr	r2, [pc, #268]	; (8007c18 <UART_AdvFeatureConfig+0x148>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	0019      	movs	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2204      	movs	r2, #4
 8007b22:	4013      	ands	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	4a3b      	ldr	r2, [pc, #236]	; (8007c1c <UART_AdvFeatureConfig+0x14c>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	0019      	movs	r1, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	2208      	movs	r2, #8
 8007b44:	4013      	ands	r3, r2
 8007b46:	d00b      	beq.n	8007b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	4a34      	ldr	r2, [pc, #208]	; (8007c20 <UART_AdvFeatureConfig+0x150>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	0019      	movs	r1, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2210      	movs	r2, #16
 8007b66:	4013      	ands	r3, r2
 8007b68:	d00b      	beq.n	8007b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	4a2c      	ldr	r2, [pc, #176]	; (8007c24 <UART_AdvFeatureConfig+0x154>)
 8007b72:	4013      	ands	r3, r2
 8007b74:	0019      	movs	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2220      	movs	r2, #32
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <UART_AdvFeatureConfig+0x158>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	0019      	movs	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	2240      	movs	r2, #64	; 0x40
 8007baa:	4013      	ands	r3, r2
 8007bac:	d01d      	beq.n	8007bea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <UART_AdvFeatureConfig+0x15c>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	0019      	movs	r1, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bca:	2380      	movs	r3, #128	; 0x80
 8007bcc:	035b      	lsls	r3, r3, #13
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d10b      	bne.n	8007bea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <UART_AdvFeatureConfig+0x160>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	0019      	movs	r1, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2280      	movs	r2, #128	; 0x80
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d00b      	beq.n	8007c0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4a0e      	ldr	r2, [pc, #56]	; (8007c34 <UART_AdvFeatureConfig+0x164>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	0019      	movs	r1, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }
}
 8007c0c:	46c0      	nop			; (mov r8, r8)
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b002      	add	sp, #8
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	fffdffff 	.word	0xfffdffff
 8007c18:	fffeffff 	.word	0xfffeffff
 8007c1c:	fffbffff 	.word	0xfffbffff
 8007c20:	ffff7fff 	.word	0xffff7fff
 8007c24:	ffffefff 	.word	0xffffefff
 8007c28:	ffffdfff 	.word	0xffffdfff
 8007c2c:	ffefffff 	.word	0xffefffff
 8007c30:	ff9fffff 	.word	0xff9fffff
 8007c34:	fff7ffff 	.word	0xfff7ffff

08007c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2280      	movs	r2, #128	; 0x80
 8007c44:	2100      	movs	r1, #0
 8007c46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c48:	f7fc fabc 	bl	80041c4 <HAL_GetTick>
 8007c4c:	0003      	movs	r3, r0
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2208      	movs	r2, #8
 8007c58:	4013      	ands	r3, r2
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d10c      	bne.n	8007c78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2280      	movs	r2, #128	; 0x80
 8007c62:	0391      	lsls	r1, r2, #14
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <UART_CheckIdleState+0x8c>)
 8007c68:	9200      	str	r2, [sp, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f000 f82c 	bl	8007cc8 <UART_WaitOnFlagUntilTimeout>
 8007c70:	1e03      	subs	r3, r0, #0
 8007c72:	d001      	beq.n	8007c78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e021      	b.n	8007cbc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2204      	movs	r2, #4
 8007c80:	4013      	ands	r3, r2
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d10c      	bne.n	8007ca0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2280      	movs	r2, #128	; 0x80
 8007c8a:	03d1      	lsls	r1, r2, #15
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <UART_CheckIdleState+0x8c>)
 8007c90:	9200      	str	r2, [sp, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f000 f818 	bl	8007cc8 <UART_WaitOnFlagUntilTimeout>
 8007c98:	1e03      	subs	r3, r0, #0
 8007c9a:	d001      	beq.n	8007ca0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e00d      	b.n	8007cbc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2274      	movs	r2, #116	; 0x74
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b004      	add	sp, #16
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	01ffffff 	.word	0x01ffffff

08007cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b094      	sub	sp, #80	; 0x50
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	1dfb      	adds	r3, r7, #7
 8007cd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd8:	e0a3      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d100      	bne.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007ce0:	e09f      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce2:	f7fc fa6f 	bl	80041c4 <HAL_GetTick>
 8007ce6:	0002      	movs	r2, r0
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d302      	bcc.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d13d      	bne.n	8007d74 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d00:	647b      	str	r3, [r7, #68]	; 0x44
 8007d02:	2301      	movs	r3, #1
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	f383 8810 	msr	PRIMASK, r3
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	494c      	ldr	r1, [pc, #304]	; (8007e4c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007d1a:	400a      	ands	r2, r1
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	f383 8810 	msr	PRIMASK, r3
}
 8007d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d32:	643b      	str	r3, [r7, #64]	; 0x40
 8007d34:	2301      	movs	r3, #1
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f383 8810 	msr	PRIMASK, r3
}
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	438a      	bics	r2, r1
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d56:	f383 8810 	msr	PRIMASK, r3
}
 8007d5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2220      	movs	r2, #32
 8007d66:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2274      	movs	r2, #116	; 0x74
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e067      	b.n	8007e44 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	d050      	beq.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69da      	ldr	r2, [r3, #28]
 8007d86:	2380      	movs	r3, #128	; 0x80
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d146      	bne.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2280      	movs	r2, #128	; 0x80
 8007d9a:	0112      	lsls	r2, r2, #4
 8007d9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007da2:	613b      	str	r3, [r7, #16]
  return(result);
 8007da4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f383 8810 	msr	PRIMASK, r3
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4923      	ldr	r1, [pc, #140]	; (8007e4c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007dc0:	400a      	ands	r2, r1
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	f383 8810 	msr	PRIMASK, r3
}
 8007dce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dd6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dda:	2301      	movs	r3, #1
 8007ddc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f383 8810 	msr	PRIMASK, r3
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2101      	movs	r1, #1
 8007df2:	438a      	bics	r2, r1
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	f383 8810 	msr	PRIMASK, r3
}
 8007e00:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2280      	movs	r2, #128	; 0x80
 8007e12:	2120      	movs	r1, #32
 8007e14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2274      	movs	r2, #116	; 0x74
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e010      	b.n	8007e44 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	425a      	negs	r2, r3
 8007e32:	4153      	adcs	r3, r2
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	001a      	movs	r2, r3
 8007e38:	1dfb      	adds	r3, r7, #7
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d100      	bne.n	8007e42 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007e40:	e74b      	b.n	8007cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	0018      	movs	r0, r3
 8007e46:	46bd      	mov	sp, r7
 8007e48:	b014      	add	sp, #80	; 0x50
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	fffffe5f 	.word	0xfffffe5f

08007e50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b090      	sub	sp, #64	; 0x40
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	1dbb      	adds	r3, r7, #6
 8007e5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1dba      	adds	r2, r7, #6
 8007e68:	2158      	movs	r1, #88	; 0x58
 8007e6a:	8812      	ldrh	r2, [r2, #0]
 8007e6c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2280      	movs	r2, #128	; 0x80
 8007e72:	2100      	movs	r1, #0
 8007e74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2222      	movs	r2, #34	; 0x22
 8007e7a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d02b      	beq.n	8007edc <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e88:	4a3f      	ldr	r2, [pc, #252]	; (8007f88 <UART_Start_Receive_DMA+0x138>)
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e90:	4a3e      	ldr	r2, [pc, #248]	; (8007f8c <UART_Start_Receive_DMA+0x13c>)
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e98:	4a3d      	ldr	r2, [pc, #244]	; (8007f90 <UART_Start_Receive_DMA+0x140>)
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3324      	adds	r3, #36	; 0x24
 8007eae:	0019      	movs	r1, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb4:	001a      	movs	r2, r3
 8007eb6:	1dbb      	adds	r3, r7, #6
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	f7fc fad7 	bl	800446c <HAL_DMA_Start_IT>
 8007ebe:	1e03      	subs	r3, r0, #0
 8007ec0:	d00c      	beq.n	8007edc <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2280      	movs	r2, #128	; 0x80
 8007ec6:	2110      	movs	r1, #16
 8007ec8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2274      	movs	r2, #116	; 0x74
 8007ece:	2100      	movs	r1, #0
 8007ed0:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e050      	b.n	8007f7e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2274      	movs	r2, #116	; 0x74
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eea:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eee:	2301      	movs	r3, #1
 8007ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f383 8810 	msr	PRIMASK, r3
}
 8007ef8:	46c0      	nop			; (mov r8, r8)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2180      	movs	r1, #128	; 0x80
 8007f06:	0049      	lsls	r1, r1, #1
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f383 8810 	msr	PRIMASK, r3
}
 8007f16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f18:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f1e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f22:	2301      	movs	r3, #1
 8007f24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f383 8810 	msr	PRIMASK, r3
}
 8007f2c:	46c0      	nop			; (mov r8, r8)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2101      	movs	r1, #1
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	609a      	str	r2, [r3, #8]
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
 8007f54:	2301      	movs	r3, #1
 8007f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	f383 8810 	msr	PRIMASK, r3
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2140      	movs	r1, #64	; 0x40
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	0018      	movs	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b010      	add	sp, #64	; 0x40
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	08008155 	.word	0x08008155
 8007f8c:	08008279 	.word	0x08008279
 8007f90:	080082b5 	.word	0x080082b5

08007f94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f383 8810 	msr	PRIMASK, r3
}
 8007fb0:	46c0      	nop			; (mov r8, r8)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	21c0      	movs	r1, #192	; 0xc0
 8007fbe:	438a      	bics	r2, r1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f383 8810 	msr	PRIMASK, r3
}
 8007fcc:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007fd4:	46c0      	nop			; (mov r8, r8)
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b006      	add	sp, #24
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8007fea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
 8007fee:	2301      	movs	r3, #1
 8007ff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f383 8810 	msr	PRIMASK, r3
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4925      	ldr	r1, [pc, #148]	; (800809c <UART_EndRxTransfer+0xc0>)
 8008006:	400a      	ands	r2, r1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f383 8810 	msr	PRIMASK, r3
}
 8008014:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008016:	f3ef 8310 	mrs	r3, PRIMASK
 800801a:	623b      	str	r3, [r7, #32]
  return(result);
 800801c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
 8008020:	2301      	movs	r3, #1
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	f383 8810 	msr	PRIMASK, r3
}
 800802a:	46c0      	nop			; (mov r8, r8)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2101      	movs	r1, #1
 8008038:	438a      	bics	r2, r1
 800803a:	609a      	str	r2, [r3, #8]
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	f383 8810 	msr	PRIMASK, r3
}
 8008046:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804c:	2b01      	cmp	r3, #1
 800804e:	d118      	bne.n	8008082 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008050:	f3ef 8310 	mrs	r3, PRIMASK
 8008054:	60bb      	str	r3, [r7, #8]
  return(result);
 8008056:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805a:	2301      	movs	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f383 8810 	msr	PRIMASK, r3
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2110      	movs	r1, #16
 8008072:	438a      	bics	r2, r1
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f383 8810 	msr	PRIMASK, r3
}
 8008080:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008094:	46c0      	nop			; (mov r8, r8)
 8008096:	46bd      	mov	sp, r7
 8008098:	b00e      	add	sp, #56	; 0x38
 800809a:	bd80      	pop	{r7, pc}
 800809c:	fffffedf 	.word	0xfffffedf

080080a0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08c      	sub	sp, #48	; 0x30
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d035      	beq.n	8008122 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	2252      	movs	r2, #82	; 0x52
 80080ba:	2100      	movs	r1, #0
 80080bc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080be:	f3ef 8310 	mrs	r3, PRIMASK
 80080c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80080c4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c8:	2301      	movs	r3, #1
 80080ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f383 8810 	msr	PRIMASK, r3
}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2180      	movs	r1, #128	; 0x80
 80080e0:	438a      	bics	r2, r1
 80080e2:	609a      	str	r2, [r3, #8]
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f383 8810 	msr	PRIMASK, r3
}
 80080ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f0:	f3ef 8310 	mrs	r3, PRIMASK
 80080f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80080f6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
 80080fa:	2301      	movs	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f383 8810 	msr	PRIMASK, r3
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2140      	movs	r1, #64	; 0x40
 8008112:	430a      	orrs	r2, r1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	e004      	b.n	800812c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008124:	0018      	movs	r0, r3
 8008126:	f7fb fc41 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	46bd      	mov	sp, r7
 8008130:	b00c      	add	sp, #48	; 0x30
 8008132:	bd80      	pop	{r7, pc}

08008134 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	0018      	movs	r0, r3
 8008146:	f7ff fb47 	bl	80077d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	46bd      	mov	sp, r7
 800814e:	b004      	add	sp, #16
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b094      	sub	sp, #80	; 0x50
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	2b20      	cmp	r3, #32
 8008168:	d06e      	beq.n	8008248 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 800816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816c:	225a      	movs	r2, #90	; 0x5a
 800816e:	2100      	movs	r1, #0
 8008170:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008172:	f3ef 8310 	mrs	r3, PRIMASK
 8008176:	61bb      	str	r3, [r7, #24]
  return(result);
 8008178:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800817a:	64bb      	str	r3, [r7, #72]	; 0x48
 800817c:	2301      	movs	r3, #1
 800817e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f383 8810 	msr	PRIMASK, r3
}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4938      	ldr	r1, [pc, #224]	; (8008274 <UART_DMAReceiveCplt+0x120>)
 8008194:	400a      	ands	r2, r1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800819a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	f383 8810 	msr	PRIMASK, r3
}
 80081a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081a4:	f3ef 8310 	mrs	r3, PRIMASK
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ac:	647b      	str	r3, [r7, #68]	; 0x44
 80081ae:	2301      	movs	r3, #1
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	f383 8810 	msr	PRIMASK, r3
}
 80081b8:	46c0      	nop			; (mov r8, r8)
 80081ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2101      	movs	r1, #1
 80081c6:	438a      	bics	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
 80081ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	f383 8810 	msr	PRIMASK, r3
}
 80081d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d6:	f3ef 8310 	mrs	r3, PRIMASK
 80081da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081de:	643b      	str	r3, [r7, #64]	; 0x40
 80081e0:	2301      	movs	r3, #1
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e6:	f383 8810 	msr	PRIMASK, r3
}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2140      	movs	r1, #64	; 0x40
 80081f8:	438a      	bics	r2, r1
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f383 8810 	msr	PRIMASK, r3
}
 8008206:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820a:	2220      	movs	r2, #32
 800820c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008212:	2b01      	cmp	r3, #1
 8008214:	d118      	bne.n	8008248 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008216:	f3ef 8310 	mrs	r3, PRIMASK
 800821a:	60fb      	str	r3, [r7, #12]
  return(result);
 800821c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008220:	2301      	movs	r3, #1
 8008222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f383 8810 	msr	PRIMASK, r3
}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2110      	movs	r1, #16
 8008238:	438a      	bics	r2, r1
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f383 8810 	msr	PRIMASK, r3
}
 8008246:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	2b01      	cmp	r3, #1
 800824e:	d108      	bne.n	8008262 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	2258      	movs	r2, #88	; 0x58
 8008254:	5a9a      	ldrh	r2, [r3, r2]
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	0011      	movs	r1, r2
 800825a:	0018      	movs	r0, r3
 800825c:	f7ff fad4 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008260:	e003      	b.n	800826a <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8008262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008264:	0018      	movs	r0, r3
 8008266:	f7fb fbaf 	bl	80039c8 <HAL_UART_RxCpltCallback>
}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	46bd      	mov	sp, r7
 800826e:	b014      	add	sp, #80	; 0x50
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	fffffeff 	.word	0xfffffeff

08008278 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828a:	2b01      	cmp	r3, #1
 800828c:	d10a      	bne.n	80082a4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2258      	movs	r2, #88	; 0x58
 8008292:	5a9b      	ldrh	r3, [r3, r2]
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	0011      	movs	r1, r2
 800829c:	0018      	movs	r0, r3
 800829e:	f7ff fab3 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082a2:	e003      	b.n	80082ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7ff fa9e 	bl	80077e8 <HAL_UART_RxHalfCpltCallback>
}
 80082ac:	46c0      	nop			; (mov r8, r8)
 80082ae:	46bd      	mov	sp, r7
 80082b0:	b004      	add	sp, #16
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2280      	movs	r2, #128	; 0x80
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d10a      	bne.n	80082f2 <UART_DMAError+0x3e>
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b21      	cmp	r3, #33	; 0x21
 80082e0:	d107      	bne.n	80082f2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2252      	movs	r2, #82	; 0x52
 80082e6:	2100      	movs	r1, #0
 80082e8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7ff fe51 	bl	8007f94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2240      	movs	r2, #64	; 0x40
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	d10a      	bne.n	8008316 <UART_DMAError+0x62>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b22      	cmp	r3, #34	; 0x22
 8008304:	d107      	bne.n	8008316 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	225a      	movs	r2, #90	; 0x5a
 800830a:	2100      	movs	r1, #0
 800830c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	0018      	movs	r0, r3
 8008312:	f7ff fe63 	bl	8007fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2280      	movs	r2, #128	; 0x80
 800831a:	589b      	ldr	r3, [r3, r2]
 800831c:	2210      	movs	r2, #16
 800831e:	431a      	orrs	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2180      	movs	r1, #128	; 0x80
 8008324:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	0018      	movs	r0, r3
 800832a:	f7ff fa65 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	46bd      	mov	sp, r7
 8008332:	b006      	add	sp, #24
 8008334:	bd80      	pop	{r7, pc}

08008336 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	225a      	movs	r2, #90	; 0x5a
 8008348:	2100      	movs	r1, #0
 800834a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2252      	movs	r2, #82	; 0x52
 8008350:	2100      	movs	r1, #0
 8008352:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0018      	movs	r0, r3
 8008358:	f7ff fa4e 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835c:	46c0      	nop			; (mov r8, r8)
 800835e:	46bd      	mov	sp, r7
 8008360:	b004      	add	sp, #16
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800836c:	f3ef 8310 	mrs	r3, PRIMASK
 8008370:	60bb      	str	r3, [r7, #8]
  return(result);
 8008372:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	2301      	movs	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f383 8810 	msr	PRIMASK, r3
}
 8008380:	46c0      	nop			; (mov r8, r8)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2140      	movs	r1, #64	; 0x40
 800838e:	438a      	bics	r2, r1
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f383 8810 	msr	PRIMASK, r3
}
 800839c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	0018      	movs	r0, r3
 80083ae:	f7fb fafd 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b006      	add	sp, #24
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <__errno>:
 80083bc:	4b01      	ldr	r3, [pc, #4]	; (80083c4 <__errno+0x8>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	4770      	bx	lr
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	2000000c 	.word	0x2000000c

080083c8 <__libc_init_array>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	2600      	movs	r6, #0
 80083cc:	4d0c      	ldr	r5, [pc, #48]	; (8008400 <__libc_init_array+0x38>)
 80083ce:	4c0d      	ldr	r4, [pc, #52]	; (8008404 <__libc_init_array+0x3c>)
 80083d0:	1b64      	subs	r4, r4, r5
 80083d2:	10a4      	asrs	r4, r4, #2
 80083d4:	42a6      	cmp	r6, r4
 80083d6:	d109      	bne.n	80083ec <__libc_init_array+0x24>
 80083d8:	2600      	movs	r6, #0
 80083da:	f005 f975 	bl	800d6c8 <_init>
 80083de:	4d0a      	ldr	r5, [pc, #40]	; (8008408 <__libc_init_array+0x40>)
 80083e0:	4c0a      	ldr	r4, [pc, #40]	; (800840c <__libc_init_array+0x44>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	42a6      	cmp	r6, r4
 80083e8:	d105      	bne.n	80083f6 <__libc_init_array+0x2e>
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	00b3      	lsls	r3, r6, #2
 80083ee:	58eb      	ldr	r3, [r5, r3]
 80083f0:	4798      	blx	r3
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7ee      	b.n	80083d4 <__libc_init_array+0xc>
 80083f6:	00b3      	lsls	r3, r6, #2
 80083f8:	58eb      	ldr	r3, [r5, r3]
 80083fa:	4798      	blx	r3
 80083fc:	3601      	adds	r6, #1
 80083fe:	e7f2      	b.n	80083e6 <__libc_init_array+0x1e>
 8008400:	0800dcdc 	.word	0x0800dcdc
 8008404:	0800dcdc 	.word	0x0800dcdc
 8008408:	0800dcdc 	.word	0x0800dcdc
 800840c:	0800dce0 	.word	0x0800dce0

08008410 <memset>:
 8008410:	0003      	movs	r3, r0
 8008412:	1882      	adds	r2, r0, r2
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	7019      	strb	r1, [r3, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <__cvt>:
 8008420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008422:	001e      	movs	r6, r3
 8008424:	2300      	movs	r3, #0
 8008426:	0014      	movs	r4, r2
 8008428:	b08b      	sub	sp, #44	; 0x2c
 800842a:	429e      	cmp	r6, r3
 800842c:	da04      	bge.n	8008438 <__cvt+0x18>
 800842e:	2180      	movs	r1, #128	; 0x80
 8008430:	0609      	lsls	r1, r1, #24
 8008432:	1873      	adds	r3, r6, r1
 8008434:	001e      	movs	r6, r3
 8008436:	232d      	movs	r3, #45	; 0x2d
 8008438:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800843a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800843c:	7013      	strb	r3, [r2, #0]
 800843e:	2320      	movs	r3, #32
 8008440:	2203      	movs	r2, #3
 8008442:	439f      	bics	r7, r3
 8008444:	2f46      	cmp	r7, #70	; 0x46
 8008446:	d007      	beq.n	8008458 <__cvt+0x38>
 8008448:	003b      	movs	r3, r7
 800844a:	3b45      	subs	r3, #69	; 0x45
 800844c:	4259      	negs	r1, r3
 800844e:	414b      	adcs	r3, r1
 8008450:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008452:	3a01      	subs	r2, #1
 8008454:	18cb      	adds	r3, r1, r3
 8008456:	9310      	str	r3, [sp, #64]	; 0x40
 8008458:	ab09      	add	r3, sp, #36	; 0x24
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	ab08      	add	r3, sp, #32
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008462:	9200      	str	r2, [sp, #0]
 8008464:	9302      	str	r3, [sp, #8]
 8008466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008468:	0022      	movs	r2, r4
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	0033      	movs	r3, r6
 800846e:	f001 fe83 	bl	800a178 <_dtoa_r>
 8008472:	0005      	movs	r5, r0
 8008474:	2f47      	cmp	r7, #71	; 0x47
 8008476:	d102      	bne.n	800847e <__cvt+0x5e>
 8008478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800847a:	07db      	lsls	r3, r3, #31
 800847c:	d528      	bpl.n	80084d0 <__cvt+0xb0>
 800847e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008480:	18eb      	adds	r3, r5, r3
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	2f46      	cmp	r7, #70	; 0x46
 8008486:	d114      	bne.n	80084b2 <__cvt+0x92>
 8008488:	782b      	ldrb	r3, [r5, #0]
 800848a:	2b30      	cmp	r3, #48	; 0x30
 800848c:	d10c      	bne.n	80084a8 <__cvt+0x88>
 800848e:	2200      	movs	r2, #0
 8008490:	2300      	movs	r3, #0
 8008492:	0020      	movs	r0, r4
 8008494:	0031      	movs	r1, r6
 8008496:	f7f7 ffe3 	bl	8000460 <__aeabi_dcmpeq>
 800849a:	2800      	cmp	r0, #0
 800849c:	d104      	bne.n	80084a8 <__cvt+0x88>
 800849e:	2301      	movs	r3, #1
 80084a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	18d3      	adds	r3, r2, r3
 80084b0:	9307      	str	r3, [sp, #28]
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	0020      	movs	r0, r4
 80084b8:	0031      	movs	r1, r6
 80084ba:	f7f7 ffd1 	bl	8000460 <__aeabi_dcmpeq>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d001      	beq.n	80084c6 <__cvt+0xa6>
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	9309      	str	r3, [sp, #36]	; 0x24
 80084c6:	2230      	movs	r2, #48	; 0x30
 80084c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ca:	9907      	ldr	r1, [sp, #28]
 80084cc:	428b      	cmp	r3, r1
 80084ce:	d306      	bcc.n	80084de <__cvt+0xbe>
 80084d0:	0028      	movs	r0, r5
 80084d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084d6:	1b5b      	subs	r3, r3, r5
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	b00b      	add	sp, #44	; 0x2c
 80084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084de:	1c59      	adds	r1, r3, #1
 80084e0:	9109      	str	r1, [sp, #36]	; 0x24
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	e7f0      	b.n	80084c8 <__cvt+0xa8>

080084e6 <__exponent>:
 80084e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084e8:	1c83      	adds	r3, r0, #2
 80084ea:	b087      	sub	sp, #28
 80084ec:	9303      	str	r3, [sp, #12]
 80084ee:	0005      	movs	r5, r0
 80084f0:	000c      	movs	r4, r1
 80084f2:	232b      	movs	r3, #43	; 0x2b
 80084f4:	7002      	strb	r2, [r0, #0]
 80084f6:	2900      	cmp	r1, #0
 80084f8:	da01      	bge.n	80084fe <__exponent+0x18>
 80084fa:	424c      	negs	r4, r1
 80084fc:	3302      	adds	r3, #2
 80084fe:	706b      	strb	r3, [r5, #1]
 8008500:	2c09      	cmp	r4, #9
 8008502:	dd31      	ble.n	8008568 <__exponent+0x82>
 8008504:	270a      	movs	r7, #10
 8008506:	ab04      	add	r3, sp, #16
 8008508:	1dde      	adds	r6, r3, #7
 800850a:	0020      	movs	r0, r4
 800850c:	0039      	movs	r1, r7
 800850e:	9601      	str	r6, [sp, #4]
 8008510:	f7f7 ff90 	bl	8000434 <__aeabi_idivmod>
 8008514:	3e01      	subs	r6, #1
 8008516:	3130      	adds	r1, #48	; 0x30
 8008518:	0020      	movs	r0, r4
 800851a:	7031      	strb	r1, [r6, #0]
 800851c:	0039      	movs	r1, r7
 800851e:	9402      	str	r4, [sp, #8]
 8008520:	f7f7 fea2 	bl	8000268 <__divsi3>
 8008524:	9b02      	ldr	r3, [sp, #8]
 8008526:	0004      	movs	r4, r0
 8008528:	2b63      	cmp	r3, #99	; 0x63
 800852a:	dcee      	bgt.n	800850a <__exponent+0x24>
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	3430      	adds	r4, #48	; 0x30
 8008530:	1e9a      	subs	r2, r3, #2
 8008532:	0013      	movs	r3, r2
 8008534:	9903      	ldr	r1, [sp, #12]
 8008536:	7014      	strb	r4, [r2, #0]
 8008538:	a804      	add	r0, sp, #16
 800853a:	3007      	adds	r0, #7
 800853c:	4298      	cmp	r0, r3
 800853e:	d80e      	bhi.n	800855e <__exponent+0x78>
 8008540:	ab04      	add	r3, sp, #16
 8008542:	3307      	adds	r3, #7
 8008544:	2000      	movs	r0, #0
 8008546:	429a      	cmp	r2, r3
 8008548:	d804      	bhi.n	8008554 <__exponent+0x6e>
 800854a:	ab04      	add	r3, sp, #16
 800854c:	3009      	adds	r0, #9
 800854e:	18c0      	adds	r0, r0, r3
 8008550:	9b01      	ldr	r3, [sp, #4]
 8008552:	1ac0      	subs	r0, r0, r3
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1818      	adds	r0, r3, r0
 8008558:	1b40      	subs	r0, r0, r5
 800855a:	b007      	add	sp, #28
 800855c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855e:	7818      	ldrb	r0, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	7008      	strb	r0, [r1, #0]
 8008564:	3101      	adds	r1, #1
 8008566:	e7e7      	b.n	8008538 <__exponent+0x52>
 8008568:	2330      	movs	r3, #48	; 0x30
 800856a:	18e4      	adds	r4, r4, r3
 800856c:	70ab      	strb	r3, [r5, #2]
 800856e:	1d28      	adds	r0, r5, #4
 8008570:	70ec      	strb	r4, [r5, #3]
 8008572:	e7f1      	b.n	8008558 <__exponent+0x72>

08008574 <_printf_float>:
 8008574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008576:	b095      	sub	sp, #84	; 0x54
 8008578:	000c      	movs	r4, r1
 800857a:	9208      	str	r2, [sp, #32]
 800857c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800857e:	9309      	str	r3, [sp, #36]	; 0x24
 8008580:	0007      	movs	r7, r0
 8008582:	f002 ff89 	bl	800b498 <_localeconv_r>
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	0018      	movs	r0, r3
 800858a:	930b      	str	r3, [sp, #44]	; 0x2c
 800858c:	f7f7 fdc6 	bl	800011c <strlen>
 8008590:	2300      	movs	r3, #0
 8008592:	9312      	str	r3, [sp, #72]	; 0x48
 8008594:	7e23      	ldrb	r3, [r4, #24]
 8008596:	2207      	movs	r2, #7
 8008598:	001e      	movs	r6, r3
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	900d      	str	r0, [sp, #52]	; 0x34
 800859e:	930c      	str	r3, [sp, #48]	; 0x30
 80085a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	05c9      	lsls	r1, r1, #23
 80085a6:	d547      	bpl.n	8008638 <_printf_float+0xc4>
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	4393      	bics	r3, r2
 80085ac:	001a      	movs	r2, r3
 80085ae:	3208      	adds	r2, #8
 80085b0:	602a      	str	r2, [r5, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	64a2      	str	r2, [r4, #72]	; 0x48
 80085b8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80085ba:	2201      	movs	r2, #1
 80085bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80085be:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80085c0:	930a      	str	r3, [sp, #40]	; 0x28
 80085c2:	006b      	lsls	r3, r5, #1
 80085c4:	085b      	lsrs	r3, r3, #1
 80085c6:	930e      	str	r3, [sp, #56]	; 0x38
 80085c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085ca:	4ba8      	ldr	r3, [pc, #672]	; (800886c <_printf_float+0x2f8>)
 80085cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80085ce:	4252      	negs	r2, r2
 80085d0:	f7f9 fd52 	bl	8002078 <__aeabi_dcmpun>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d131      	bne.n	800863c <_printf_float+0xc8>
 80085d8:	2201      	movs	r2, #1
 80085da:	4ba4      	ldr	r3, [pc, #656]	; (800886c <_printf_float+0x2f8>)
 80085dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80085e0:	4252      	negs	r2, r2
 80085e2:	f7f7 ff4d 	bl	8000480 <__aeabi_dcmple>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d128      	bne.n	800863c <_printf_float+0xc8>
 80085ea:	2200      	movs	r2, #0
 80085ec:	2300      	movs	r3, #0
 80085ee:	0029      	movs	r1, r5
 80085f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085f2:	f7f7 ff3b 	bl	800046c <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d003      	beq.n	8008602 <_printf_float+0x8e>
 80085fa:	0023      	movs	r3, r4
 80085fc:	222d      	movs	r2, #45	; 0x2d
 80085fe:	3343      	adds	r3, #67	; 0x43
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	4d9b      	ldr	r5, [pc, #620]	; (8008870 <_printf_float+0x2fc>)
 8008604:	2e47      	cmp	r6, #71	; 0x47
 8008606:	d900      	bls.n	800860a <_printf_float+0x96>
 8008608:	4d9a      	ldr	r5, [pc, #616]	; (8008874 <_printf_float+0x300>)
 800860a:	2303      	movs	r3, #3
 800860c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	3301      	adds	r3, #1
 8008612:	439a      	bics	r2, r3
 8008614:	2300      	movs	r3, #0
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	930a      	str	r3, [sp, #40]	; 0x28
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	0021      	movs	r1, r4
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	0038      	movs	r0, r7
 8008622:	9b08      	ldr	r3, [sp, #32]
 8008624:	aa13      	add	r2, sp, #76	; 0x4c
 8008626:	f000 f9f3 	bl	8008a10 <_printf_common>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d000      	beq.n	8008630 <_printf_float+0xbc>
 800862e:	e09e      	b.n	800876e <_printf_float+0x1fa>
 8008630:	2001      	movs	r0, #1
 8008632:	4240      	negs	r0, r0
 8008634:	b015      	add	sp, #84	; 0x54
 8008636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008638:	3307      	adds	r3, #7
 800863a:	e7b6      	b.n	80085aa <_printf_float+0x36>
 800863c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863e:	002b      	movs	r3, r5
 8008640:	0010      	movs	r0, r2
 8008642:	0029      	movs	r1, r5
 8008644:	f7f9 fd18 	bl	8002078 <__aeabi_dcmpun>
 8008648:	2800      	cmp	r0, #0
 800864a:	d00a      	beq.n	8008662 <_printf_float+0xee>
 800864c:	2d00      	cmp	r5, #0
 800864e:	da03      	bge.n	8008658 <_printf_float+0xe4>
 8008650:	0023      	movs	r3, r4
 8008652:	222d      	movs	r2, #45	; 0x2d
 8008654:	3343      	adds	r3, #67	; 0x43
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	4d87      	ldr	r5, [pc, #540]	; (8008878 <_printf_float+0x304>)
 800865a:	2e47      	cmp	r6, #71	; 0x47
 800865c:	d9d5      	bls.n	800860a <_printf_float+0x96>
 800865e:	4d87      	ldr	r5, [pc, #540]	; (800887c <_printf_float+0x308>)
 8008660:	e7d3      	b.n	800860a <_printf_float+0x96>
 8008662:	2220      	movs	r2, #32
 8008664:	0031      	movs	r1, r6
 8008666:	6863      	ldr	r3, [r4, #4]
 8008668:	4391      	bics	r1, r2
 800866a:	910e      	str	r1, [sp, #56]	; 0x38
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	d147      	bne.n	8008700 <_printf_float+0x18c>
 8008670:	3307      	adds	r3, #7
 8008672:	6063      	str	r3, [r4, #4]
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	4313      	orrs	r3, r2
 800867c:	2200      	movs	r2, #0
 800867e:	9206      	str	r2, [sp, #24]
 8008680:	aa12      	add	r2, sp, #72	; 0x48
 8008682:	9205      	str	r2, [sp, #20]
 8008684:	aa11      	add	r2, sp, #68	; 0x44
 8008686:	9203      	str	r2, [sp, #12]
 8008688:	2223      	movs	r2, #35	; 0x23
 800868a:	a908      	add	r1, sp, #32
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	1852      	adds	r2, r2, r1
 8008694:	9202      	str	r2, [sp, #8]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	0038      	movs	r0, r7
 800869a:	002b      	movs	r3, r5
 800869c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800869e:	9604      	str	r6, [sp, #16]
 80086a0:	f7ff febe 	bl	8008420 <__cvt>
 80086a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a6:	0005      	movs	r5, r0
 80086a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086aa:	2b47      	cmp	r3, #71	; 0x47
 80086ac:	d108      	bne.n	80086c0 <_printf_float+0x14c>
 80086ae:	1ccb      	adds	r3, r1, #3
 80086b0:	db02      	blt.n	80086b8 <_printf_float+0x144>
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	4299      	cmp	r1, r3
 80086b6:	dd46      	ble.n	8008746 <_printf_float+0x1d2>
 80086b8:	0033      	movs	r3, r6
 80086ba:	3b02      	subs	r3, #2
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	001e      	movs	r6, r3
 80086c0:	2e65      	cmp	r6, #101	; 0x65
 80086c2:	d824      	bhi.n	800870e <_printf_float+0x19a>
 80086c4:	0020      	movs	r0, r4
 80086c6:	0032      	movs	r2, r6
 80086c8:	3901      	subs	r1, #1
 80086ca:	3050      	adds	r0, #80	; 0x50
 80086cc:	9111      	str	r1, [sp, #68]	; 0x44
 80086ce:	f7ff ff0a 	bl	80084e6 <__exponent>
 80086d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086d4:	900a      	str	r0, [sp, #40]	; 0x28
 80086d6:	1813      	adds	r3, r2, r0
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	2a01      	cmp	r2, #1
 80086dc:	dc02      	bgt.n	80086e4 <_printf_float+0x170>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	07d2      	lsls	r2, r2, #31
 80086e2:	d501      	bpl.n	80086e8 <_printf_float+0x174>
 80086e4:	3301      	adds	r3, #1
 80086e6:	6123      	str	r3, [r4, #16]
 80086e8:	2323      	movs	r3, #35	; 0x23
 80086ea:	aa08      	add	r2, sp, #32
 80086ec:	189b      	adds	r3, r3, r2
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d100      	bne.n	80086f6 <_printf_float+0x182>
 80086f4:	e791      	b.n	800861a <_printf_float+0xa6>
 80086f6:	0023      	movs	r3, r4
 80086f8:	222d      	movs	r2, #45	; 0x2d
 80086fa:	3343      	adds	r3, #67	; 0x43
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e78c      	b.n	800861a <_printf_float+0xa6>
 8008700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008702:	2a47      	cmp	r2, #71	; 0x47
 8008704:	d1b6      	bne.n	8008674 <_printf_float+0x100>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1b4      	bne.n	8008674 <_printf_float+0x100>
 800870a:	3301      	adds	r3, #1
 800870c:	e7b1      	b.n	8008672 <_printf_float+0xfe>
 800870e:	2e66      	cmp	r6, #102	; 0x66
 8008710:	d11b      	bne.n	800874a <_printf_float+0x1d6>
 8008712:	6863      	ldr	r3, [r4, #4]
 8008714:	2900      	cmp	r1, #0
 8008716:	dd0d      	ble.n	8008734 <_printf_float+0x1c0>
 8008718:	6121      	str	r1, [r4, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <_printf_float+0x1b0>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	07d2      	lsls	r2, r2, #31
 8008722:	d502      	bpl.n	800872a <_printf_float+0x1b6>
 8008724:	3301      	adds	r3, #1
 8008726:	1859      	adds	r1, r3, r1
 8008728:	6121      	str	r1, [r4, #16]
 800872a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800872c:	65a3      	str	r3, [r4, #88]	; 0x58
 800872e:	2300      	movs	r3, #0
 8008730:	930a      	str	r3, [sp, #40]	; 0x28
 8008732:	e7d9      	b.n	80086e8 <_printf_float+0x174>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d103      	bne.n	8008740 <_printf_float+0x1cc>
 8008738:	2201      	movs	r2, #1
 800873a:	6821      	ldr	r1, [r4, #0]
 800873c:	4211      	tst	r1, r2
 800873e:	d000      	beq.n	8008742 <_printf_float+0x1ce>
 8008740:	1c9a      	adds	r2, r3, #2
 8008742:	6122      	str	r2, [r4, #16]
 8008744:	e7f1      	b.n	800872a <_printf_float+0x1b6>
 8008746:	2367      	movs	r3, #103	; 0x67
 8008748:	001e      	movs	r6, r3
 800874a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800874c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800874e:	4293      	cmp	r3, r2
 8008750:	db06      	blt.n	8008760 <_printf_float+0x1ec>
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	07d2      	lsls	r2, r2, #31
 8008758:	d5e7      	bpl.n	800872a <_printf_float+0x1b6>
 800875a:	3301      	adds	r3, #1
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	e7e4      	b.n	800872a <_printf_float+0x1b6>
 8008760:	2101      	movs	r1, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	dc01      	bgt.n	800876a <_printf_float+0x1f6>
 8008766:	1849      	adds	r1, r1, r1
 8008768:	1ac9      	subs	r1, r1, r3
 800876a:	1852      	adds	r2, r2, r1
 800876c:	e7e9      	b.n	8008742 <_printf_float+0x1ce>
 800876e:	6822      	ldr	r2, [r4, #0]
 8008770:	0553      	lsls	r3, r2, #21
 8008772:	d408      	bmi.n	8008786 <_printf_float+0x212>
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	002a      	movs	r2, r5
 8008778:	0038      	movs	r0, r7
 800877a:	9908      	ldr	r1, [sp, #32]
 800877c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800877e:	47a8      	blx	r5
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d129      	bne.n	80087d8 <_printf_float+0x264>
 8008784:	e754      	b.n	8008630 <_printf_float+0xbc>
 8008786:	2e65      	cmp	r6, #101	; 0x65
 8008788:	d800      	bhi.n	800878c <_printf_float+0x218>
 800878a:	e0ec      	b.n	8008966 <_printf_float+0x3f2>
 800878c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800878e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008790:	2200      	movs	r2, #0
 8008792:	2300      	movs	r3, #0
 8008794:	f7f7 fe64 	bl	8000460 <__aeabi_dcmpeq>
 8008798:	2800      	cmp	r0, #0
 800879a:	d034      	beq.n	8008806 <_printf_float+0x292>
 800879c:	2301      	movs	r3, #1
 800879e:	0038      	movs	r0, r7
 80087a0:	4a37      	ldr	r2, [pc, #220]	; (8008880 <_printf_float+0x30c>)
 80087a2:	9908      	ldr	r1, [sp, #32]
 80087a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087a6:	47a8      	blx	r5
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d100      	bne.n	80087ae <_printf_float+0x23a>
 80087ac:	e740      	b.n	8008630 <_printf_float+0xbc>
 80087ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087b2:	4293      	cmp	r3, r2
 80087b4:	db02      	blt.n	80087bc <_printf_float+0x248>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	07db      	lsls	r3, r3, #31
 80087ba:	d50d      	bpl.n	80087d8 <_printf_float+0x264>
 80087bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087be:	0038      	movs	r0, r7
 80087c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087c4:	9908      	ldr	r1, [sp, #32]
 80087c6:	47a8      	blx	r5
 80087c8:	2500      	movs	r5, #0
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d100      	bne.n	80087d0 <_printf_float+0x25c>
 80087ce:	e72f      	b.n	8008630 <_printf_float+0xbc>
 80087d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087d2:	3b01      	subs	r3, #1
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	dc0a      	bgt.n	80087ee <_printf_float+0x27a>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	079b      	lsls	r3, r3, #30
 80087dc:	d500      	bpl.n	80087e0 <_printf_float+0x26c>
 80087de:	e114      	b.n	8008a0a <_printf_float+0x496>
 80087e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	4298      	cmp	r0, r3
 80087e6:	db00      	blt.n	80087ea <_printf_float+0x276>
 80087e8:	e724      	b.n	8008634 <_printf_float+0xc0>
 80087ea:	0018      	movs	r0, r3
 80087ec:	e722      	b.n	8008634 <_printf_float+0xc0>
 80087ee:	0022      	movs	r2, r4
 80087f0:	2301      	movs	r3, #1
 80087f2:	0038      	movs	r0, r7
 80087f4:	9908      	ldr	r1, [sp, #32]
 80087f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087f8:	321a      	adds	r2, #26
 80087fa:	47b0      	blx	r6
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d100      	bne.n	8008802 <_printf_float+0x28e>
 8008800:	e716      	b.n	8008630 <_printf_float+0xbc>
 8008802:	3501      	adds	r5, #1
 8008804:	e7e4      	b.n	80087d0 <_printf_float+0x25c>
 8008806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008808:	2b00      	cmp	r3, #0
 800880a:	dc3b      	bgt.n	8008884 <_printf_float+0x310>
 800880c:	2301      	movs	r3, #1
 800880e:	0038      	movs	r0, r7
 8008810:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <_printf_float+0x30c>)
 8008812:	9908      	ldr	r1, [sp, #32]
 8008814:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008816:	47b0      	blx	r6
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d100      	bne.n	800881e <_printf_float+0x2aa>
 800881c:	e708      	b.n	8008630 <_printf_float+0xbc>
 800881e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008820:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008822:	4313      	orrs	r3, r2
 8008824:	d102      	bne.n	800882c <_printf_float+0x2b8>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	07db      	lsls	r3, r3, #31
 800882a:	d5d5      	bpl.n	80087d8 <_printf_float+0x264>
 800882c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882e:	0038      	movs	r0, r7
 8008830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008832:	9908      	ldr	r1, [sp, #32]
 8008834:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008836:	47b0      	blx	r6
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d100      	bne.n	800883e <_printf_float+0x2ca>
 800883c:	e6f8      	b.n	8008630 <_printf_float+0xbc>
 800883e:	2300      	movs	r3, #0
 8008840:	930a      	str	r3, [sp, #40]	; 0x28
 8008842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008846:	425b      	negs	r3, r3
 8008848:	4293      	cmp	r3, r2
 800884a:	dc01      	bgt.n	8008850 <_printf_float+0x2dc>
 800884c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800884e:	e792      	b.n	8008776 <_printf_float+0x202>
 8008850:	0022      	movs	r2, r4
 8008852:	2301      	movs	r3, #1
 8008854:	0038      	movs	r0, r7
 8008856:	9908      	ldr	r1, [sp, #32]
 8008858:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800885a:	321a      	adds	r2, #26
 800885c:	47b0      	blx	r6
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d100      	bne.n	8008864 <_printf_float+0x2f0>
 8008862:	e6e5      	b.n	8008630 <_printf_float+0xbc>
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	3301      	adds	r3, #1
 8008868:	e7ea      	b.n	8008840 <_printf_float+0x2cc>
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	7fefffff 	.word	0x7fefffff
 8008870:	0800d818 	.word	0x0800d818
 8008874:	0800d81c 	.word	0x0800d81c
 8008878:	0800d820 	.word	0x0800d820
 800887c:	0800d824 	.word	0x0800d824
 8008880:	0800dc29 	.word	0x0800dc29
 8008884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008888:	920a      	str	r2, [sp, #40]	; 0x28
 800888a:	429a      	cmp	r2, r3
 800888c:	dd00      	ble.n	8008890 <_printf_float+0x31c>
 800888e:	930a      	str	r3, [sp, #40]	; 0x28
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc3d      	bgt.n	8008912 <_printf_float+0x39e>
 8008896:	2300      	movs	r3, #0
 8008898:	930e      	str	r3, [sp, #56]	; 0x38
 800889a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800889c:	43db      	mvns	r3, r3
 800889e:	17db      	asrs	r3, r3, #31
 80088a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088a6:	930c      	str	r3, [sp, #48]	; 0x30
 80088a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088aa:	4013      	ands	r3, r2
 80088ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088b2:	4293      	cmp	r3, r2
 80088b4:	dc36      	bgt.n	8008924 <_printf_float+0x3b0>
 80088b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088ba:	4293      	cmp	r3, r2
 80088bc:	db40      	blt.n	8008940 <_printf_float+0x3cc>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	07db      	lsls	r3, r3, #31
 80088c2:	d43d      	bmi.n	8008940 <_printf_float+0x3cc>
 80088c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	1a52      	subs	r2, r2, r1
 80088ce:	920a      	str	r2, [sp, #40]	; 0x28
 80088d0:	429a      	cmp	r2, r3
 80088d2:	dd00      	ble.n	80088d6 <_printf_float+0x362>
 80088d4:	930a      	str	r3, [sp, #40]	; 0x28
 80088d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc3a      	bgt.n	8008952 <_printf_float+0x3de>
 80088dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088de:	2500      	movs	r5, #0
 80088e0:	43db      	mvns	r3, r3
 80088e2:	17db      	asrs	r3, r3, #31
 80088e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088f0:	400a      	ands	r2, r1
 80088f2:	1a9b      	subs	r3, r3, r2
 80088f4:	42ab      	cmp	r3, r5
 80088f6:	dc00      	bgt.n	80088fa <_printf_float+0x386>
 80088f8:	e76e      	b.n	80087d8 <_printf_float+0x264>
 80088fa:	0022      	movs	r2, r4
 80088fc:	2301      	movs	r3, #1
 80088fe:	0038      	movs	r0, r7
 8008900:	9908      	ldr	r1, [sp, #32]
 8008902:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008904:	321a      	adds	r2, #26
 8008906:	47b0      	blx	r6
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d100      	bne.n	800890e <_printf_float+0x39a>
 800890c:	e690      	b.n	8008630 <_printf_float+0xbc>
 800890e:	3501      	adds	r5, #1
 8008910:	e7e9      	b.n	80088e6 <_printf_float+0x372>
 8008912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008914:	002a      	movs	r2, r5
 8008916:	0038      	movs	r0, r7
 8008918:	9908      	ldr	r1, [sp, #32]
 800891a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800891c:	47b0      	blx	r6
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d1b9      	bne.n	8008896 <_printf_float+0x322>
 8008922:	e685      	b.n	8008630 <_printf_float+0xbc>
 8008924:	0022      	movs	r2, r4
 8008926:	2301      	movs	r3, #1
 8008928:	0038      	movs	r0, r7
 800892a:	9908      	ldr	r1, [sp, #32]
 800892c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800892e:	321a      	adds	r2, #26
 8008930:	47b0      	blx	r6
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d100      	bne.n	8008938 <_printf_float+0x3c4>
 8008936:	e67b      	b.n	8008630 <_printf_float+0xbc>
 8008938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800893a:	3301      	adds	r3, #1
 800893c:	930e      	str	r3, [sp, #56]	; 0x38
 800893e:	e7b0      	b.n	80088a2 <_printf_float+0x32e>
 8008940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008942:	0038      	movs	r0, r7
 8008944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008946:	9908      	ldr	r1, [sp, #32]
 8008948:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800894a:	47b0      	blx	r6
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d1b9      	bne.n	80088c4 <_printf_float+0x350>
 8008950:	e66e      	b.n	8008630 <_printf_float+0xbc>
 8008952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008954:	0038      	movs	r0, r7
 8008956:	18ea      	adds	r2, r5, r3
 8008958:	9908      	ldr	r1, [sp, #32]
 800895a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800895e:	47a8      	blx	r5
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d1bb      	bne.n	80088dc <_printf_float+0x368>
 8008964:	e664      	b.n	8008630 <_printf_float+0xbc>
 8008966:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008968:	2b01      	cmp	r3, #1
 800896a:	dc02      	bgt.n	8008972 <_printf_float+0x3fe>
 800896c:	2301      	movs	r3, #1
 800896e:	421a      	tst	r2, r3
 8008970:	d038      	beq.n	80089e4 <_printf_float+0x470>
 8008972:	2301      	movs	r3, #1
 8008974:	002a      	movs	r2, r5
 8008976:	0038      	movs	r0, r7
 8008978:	9908      	ldr	r1, [sp, #32]
 800897a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800897c:	47b0      	blx	r6
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	d100      	bne.n	8008984 <_printf_float+0x410>
 8008982:	e655      	b.n	8008630 <_printf_float+0xbc>
 8008984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008986:	0038      	movs	r0, r7
 8008988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800898a:	9908      	ldr	r1, [sp, #32]
 800898c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800898e:	47b0      	blx	r6
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d100      	bne.n	8008996 <_printf_float+0x422>
 8008994:	e64c      	b.n	8008630 <_printf_float+0xbc>
 8008996:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008998:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800899a:	2200      	movs	r2, #0
 800899c:	2300      	movs	r3, #0
 800899e:	f7f7 fd5f 	bl	8000460 <__aeabi_dcmpeq>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d11c      	bne.n	80089e0 <_printf_float+0x46c>
 80089a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089a8:	1c6a      	adds	r2, r5, #1
 80089aa:	3b01      	subs	r3, #1
 80089ac:	0038      	movs	r0, r7
 80089ae:	9908      	ldr	r1, [sp, #32]
 80089b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089b2:	47a8      	blx	r5
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d10f      	bne.n	80089d8 <_printf_float+0x464>
 80089b8:	e63a      	b.n	8008630 <_printf_float+0xbc>
 80089ba:	0022      	movs	r2, r4
 80089bc:	2301      	movs	r3, #1
 80089be:	0038      	movs	r0, r7
 80089c0:	9908      	ldr	r1, [sp, #32]
 80089c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089c4:	321a      	adds	r2, #26
 80089c6:	47b0      	blx	r6
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d100      	bne.n	80089ce <_printf_float+0x45a>
 80089cc:	e630      	b.n	8008630 <_printf_float+0xbc>
 80089ce:	3501      	adds	r5, #1
 80089d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089d2:	3b01      	subs	r3, #1
 80089d4:	42ab      	cmp	r3, r5
 80089d6:	dcf0      	bgt.n	80089ba <_printf_float+0x446>
 80089d8:	0022      	movs	r2, r4
 80089da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089dc:	3250      	adds	r2, #80	; 0x50
 80089de:	e6cb      	b.n	8008778 <_printf_float+0x204>
 80089e0:	2500      	movs	r5, #0
 80089e2:	e7f5      	b.n	80089d0 <_printf_float+0x45c>
 80089e4:	002a      	movs	r2, r5
 80089e6:	e7e1      	b.n	80089ac <_printf_float+0x438>
 80089e8:	0022      	movs	r2, r4
 80089ea:	2301      	movs	r3, #1
 80089ec:	0038      	movs	r0, r7
 80089ee:	9908      	ldr	r1, [sp, #32]
 80089f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089f2:	3219      	adds	r2, #25
 80089f4:	47b0      	blx	r6
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d100      	bne.n	80089fc <_printf_float+0x488>
 80089fa:	e619      	b.n	8008630 <_printf_float+0xbc>
 80089fc:	3501      	adds	r5, #1
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	42ab      	cmp	r3, r5
 8008a06:	dcef      	bgt.n	80089e8 <_printf_float+0x474>
 8008a08:	e6ea      	b.n	80087e0 <_printf_float+0x26c>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	e7f7      	b.n	80089fe <_printf_float+0x48a>
 8008a0e:	46c0      	nop			; (mov r8, r8)

08008a10 <_printf_common>:
 8008a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a12:	0015      	movs	r5, r2
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	688a      	ldr	r2, [r1, #8]
 8008a18:	690b      	ldr	r3, [r1, #16]
 8008a1a:	000c      	movs	r4, r1
 8008a1c:	9000      	str	r0, [sp, #0]
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	da00      	bge.n	8008a24 <_printf_common+0x14>
 8008a22:	0013      	movs	r3, r2
 8008a24:	0022      	movs	r2, r4
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	3243      	adds	r2, #67	; 0x43
 8008a2a:	7812      	ldrb	r2, [r2, #0]
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	d001      	beq.n	8008a34 <_printf_common+0x24>
 8008a30:	3301      	adds	r3, #1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	069b      	lsls	r3, r3, #26
 8008a38:	d502      	bpl.n	8008a40 <_printf_common+0x30>
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	2306      	movs	r3, #6
 8008a44:	0017      	movs	r7, r2
 8008a46:	401f      	ands	r7, r3
 8008a48:	421a      	tst	r2, r3
 8008a4a:	d027      	beq.n	8008a9c <_printf_common+0x8c>
 8008a4c:	0023      	movs	r3, r4
 8008a4e:	3343      	adds	r3, #67	; 0x43
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	1e5a      	subs	r2, r3, #1
 8008a54:	4193      	sbcs	r3, r2
 8008a56:	6822      	ldr	r2, [r4, #0]
 8008a58:	0692      	lsls	r2, r2, #26
 8008a5a:	d430      	bmi.n	8008abe <_printf_common+0xae>
 8008a5c:	0022      	movs	r2, r4
 8008a5e:	9901      	ldr	r1, [sp, #4]
 8008a60:	9800      	ldr	r0, [sp, #0]
 8008a62:	9e08      	ldr	r6, [sp, #32]
 8008a64:	3243      	adds	r2, #67	; 0x43
 8008a66:	47b0      	blx	r6
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d025      	beq.n	8008ab8 <_printf_common+0xa8>
 8008a6c:	2306      	movs	r3, #6
 8008a6e:	6820      	ldr	r0, [r4, #0]
 8008a70:	682a      	ldr	r2, [r5, #0]
 8008a72:	68e1      	ldr	r1, [r4, #12]
 8008a74:	2500      	movs	r5, #0
 8008a76:	4003      	ands	r3, r0
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d103      	bne.n	8008a84 <_printf_common+0x74>
 8008a7c:	1a8d      	subs	r5, r1, r2
 8008a7e:	43eb      	mvns	r3, r5
 8008a80:	17db      	asrs	r3, r3, #31
 8008a82:	401d      	ands	r5, r3
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	6922      	ldr	r2, [r4, #16]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	dd01      	ble.n	8008a90 <_printf_common+0x80>
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	18ed      	adds	r5, r5, r3
 8008a90:	2700      	movs	r7, #0
 8008a92:	42bd      	cmp	r5, r7
 8008a94:	d120      	bne.n	8008ad8 <_printf_common+0xc8>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e010      	b.n	8008abc <_printf_common+0xac>
 8008a9a:	3701      	adds	r7, #1
 8008a9c:	68e3      	ldr	r3, [r4, #12]
 8008a9e:	682a      	ldr	r2, [r5, #0]
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	42bb      	cmp	r3, r7
 8008aa4:	ddd2      	ble.n	8008a4c <_printf_common+0x3c>
 8008aa6:	0022      	movs	r2, r4
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	9901      	ldr	r1, [sp, #4]
 8008aac:	9800      	ldr	r0, [sp, #0]
 8008aae:	9e08      	ldr	r6, [sp, #32]
 8008ab0:	3219      	adds	r2, #25
 8008ab2:	47b0      	blx	r6
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d1f0      	bne.n	8008a9a <_printf_common+0x8a>
 8008ab8:	2001      	movs	r0, #1
 8008aba:	4240      	negs	r0, r0
 8008abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008abe:	2030      	movs	r0, #48	; 0x30
 8008ac0:	18e1      	adds	r1, r4, r3
 8008ac2:	3143      	adds	r1, #67	; 0x43
 8008ac4:	7008      	strb	r0, [r1, #0]
 8008ac6:	0021      	movs	r1, r4
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	3145      	adds	r1, #69	; 0x45
 8008acc:	7809      	ldrb	r1, [r1, #0]
 8008ace:	18a2      	adds	r2, r4, r2
 8008ad0:	3243      	adds	r2, #67	; 0x43
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	7011      	strb	r1, [r2, #0]
 8008ad6:	e7c1      	b.n	8008a5c <_printf_common+0x4c>
 8008ad8:	0022      	movs	r2, r4
 8008ada:	2301      	movs	r3, #1
 8008adc:	9901      	ldr	r1, [sp, #4]
 8008ade:	9800      	ldr	r0, [sp, #0]
 8008ae0:	9e08      	ldr	r6, [sp, #32]
 8008ae2:	321a      	adds	r2, #26
 8008ae4:	47b0      	blx	r6
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d0e6      	beq.n	8008ab8 <_printf_common+0xa8>
 8008aea:	3701      	adds	r7, #1
 8008aec:	e7d1      	b.n	8008a92 <_printf_common+0x82>
	...

08008af0 <_printf_i>:
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b08b      	sub	sp, #44	; 0x2c
 8008af4:	9206      	str	r2, [sp, #24]
 8008af6:	000a      	movs	r2, r1
 8008af8:	3243      	adds	r2, #67	; 0x43
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	9005      	str	r0, [sp, #20]
 8008afe:	9204      	str	r2, [sp, #16]
 8008b00:	7e0a      	ldrb	r2, [r1, #24]
 8008b02:	000c      	movs	r4, r1
 8008b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b06:	2a78      	cmp	r2, #120	; 0x78
 8008b08:	d806      	bhi.n	8008b18 <_printf_i+0x28>
 8008b0a:	2a62      	cmp	r2, #98	; 0x62
 8008b0c:	d808      	bhi.n	8008b20 <_printf_i+0x30>
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d100      	bne.n	8008b14 <_printf_i+0x24>
 8008b12:	e0c0      	b.n	8008c96 <_printf_i+0x1a6>
 8008b14:	2a58      	cmp	r2, #88	; 0x58
 8008b16:	d052      	beq.n	8008bbe <_printf_i+0xce>
 8008b18:	0026      	movs	r6, r4
 8008b1a:	3642      	adds	r6, #66	; 0x42
 8008b1c:	7032      	strb	r2, [r6, #0]
 8008b1e:	e022      	b.n	8008b66 <_printf_i+0x76>
 8008b20:	0010      	movs	r0, r2
 8008b22:	3863      	subs	r0, #99	; 0x63
 8008b24:	2815      	cmp	r0, #21
 8008b26:	d8f7      	bhi.n	8008b18 <_printf_i+0x28>
 8008b28:	f7f7 fb0a 	bl	8000140 <__gnu_thumb1_case_shi>
 8008b2c:	001f0016 	.word	0x001f0016
 8008b30:	fff6fff6 	.word	0xfff6fff6
 8008b34:	fff6fff6 	.word	0xfff6fff6
 8008b38:	fff6001f 	.word	0xfff6001f
 8008b3c:	fff6fff6 	.word	0xfff6fff6
 8008b40:	00a8fff6 	.word	0x00a8fff6
 8008b44:	009a0036 	.word	0x009a0036
 8008b48:	fff6fff6 	.word	0xfff6fff6
 8008b4c:	fff600b9 	.word	0xfff600b9
 8008b50:	fff60036 	.word	0xfff60036
 8008b54:	009efff6 	.word	0x009efff6
 8008b58:	0026      	movs	r6, r4
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	3642      	adds	r6, #66	; 0x42
 8008b5e:	1d11      	adds	r1, r2, #4
 8008b60:	6019      	str	r1, [r3, #0]
 8008b62:	6813      	ldr	r3, [r2, #0]
 8008b64:	7033      	strb	r3, [r6, #0]
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0a7      	b.n	8008cba <_printf_i+0x1ca>
 8008b6a:	6808      	ldr	r0, [r1, #0]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	1d0a      	adds	r2, r1, #4
 8008b70:	0605      	lsls	r5, r0, #24
 8008b72:	d50b      	bpl.n	8008b8c <_printf_i+0x9c>
 8008b74:	680d      	ldr	r5, [r1, #0]
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	da03      	bge.n	8008b84 <_printf_i+0x94>
 8008b7c:	232d      	movs	r3, #45	; 0x2d
 8008b7e:	9a04      	ldr	r2, [sp, #16]
 8008b80:	426d      	negs	r5, r5
 8008b82:	7013      	strb	r3, [r2, #0]
 8008b84:	4b61      	ldr	r3, [pc, #388]	; (8008d0c <_printf_i+0x21c>)
 8008b86:	270a      	movs	r7, #10
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	e032      	b.n	8008bf2 <_printf_i+0x102>
 8008b8c:	680d      	ldr	r5, [r1, #0]
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	0641      	lsls	r1, r0, #25
 8008b92:	d5f1      	bpl.n	8008b78 <_printf_i+0x88>
 8008b94:	b22d      	sxth	r5, r5
 8008b96:	e7ef      	b.n	8008b78 <_printf_i+0x88>
 8008b98:	680d      	ldr	r5, [r1, #0]
 8008b9a:	6819      	ldr	r1, [r3, #0]
 8008b9c:	1d08      	adds	r0, r1, #4
 8008b9e:	6018      	str	r0, [r3, #0]
 8008ba0:	062e      	lsls	r6, r5, #24
 8008ba2:	d501      	bpl.n	8008ba8 <_printf_i+0xb8>
 8008ba4:	680d      	ldr	r5, [r1, #0]
 8008ba6:	e003      	b.n	8008bb0 <_printf_i+0xc0>
 8008ba8:	066d      	lsls	r5, r5, #25
 8008baa:	d5fb      	bpl.n	8008ba4 <_printf_i+0xb4>
 8008bac:	680d      	ldr	r5, [r1, #0]
 8008bae:	b2ad      	uxth	r5, r5
 8008bb0:	4b56      	ldr	r3, [pc, #344]	; (8008d0c <_printf_i+0x21c>)
 8008bb2:	270a      	movs	r7, #10
 8008bb4:	9303      	str	r3, [sp, #12]
 8008bb6:	2a6f      	cmp	r2, #111	; 0x6f
 8008bb8:	d117      	bne.n	8008bea <_printf_i+0xfa>
 8008bba:	2708      	movs	r7, #8
 8008bbc:	e015      	b.n	8008bea <_printf_i+0xfa>
 8008bbe:	3145      	adds	r1, #69	; 0x45
 8008bc0:	700a      	strb	r2, [r1, #0]
 8008bc2:	4a52      	ldr	r2, [pc, #328]	; (8008d0c <_printf_i+0x21c>)
 8008bc4:	9203      	str	r2, [sp, #12]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	6821      	ldr	r1, [r4, #0]
 8008bca:	ca20      	ldmia	r2!, {r5}
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	0608      	lsls	r0, r1, #24
 8008bd0:	d550      	bpl.n	8008c74 <_printf_i+0x184>
 8008bd2:	07cb      	lsls	r3, r1, #31
 8008bd4:	d502      	bpl.n	8008bdc <_printf_i+0xec>
 8008bd6:	2320      	movs	r3, #32
 8008bd8:	4319      	orrs	r1, r3
 8008bda:	6021      	str	r1, [r4, #0]
 8008bdc:	2710      	movs	r7, #16
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	d103      	bne.n	8008bea <_printf_i+0xfa>
 8008be2:	2320      	movs	r3, #32
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	439a      	bics	r2, r3
 8008be8:	6022      	str	r2, [r4, #0]
 8008bea:	0023      	movs	r3, r4
 8008bec:	2200      	movs	r2, #0
 8008bee:	3343      	adds	r3, #67	; 0x43
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	db03      	blt.n	8008c02 <_printf_i+0x112>
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	6821      	ldr	r1, [r4, #0]
 8008bfe:	4391      	bics	r1, r2
 8008c00:	6021      	str	r1, [r4, #0]
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	d102      	bne.n	8008c0c <_printf_i+0x11c>
 8008c06:	9e04      	ldr	r6, [sp, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <_printf_i+0x136>
 8008c0c:	9e04      	ldr	r6, [sp, #16]
 8008c0e:	0028      	movs	r0, r5
 8008c10:	0039      	movs	r1, r7
 8008c12:	f7f7 fb25 	bl	8000260 <__aeabi_uidivmod>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3e01      	subs	r6, #1
 8008c1a:	5c5b      	ldrb	r3, [r3, r1]
 8008c1c:	7033      	strb	r3, [r6, #0]
 8008c1e:	002b      	movs	r3, r5
 8008c20:	0005      	movs	r5, r0
 8008c22:	429f      	cmp	r7, r3
 8008c24:	d9f3      	bls.n	8008c0e <_printf_i+0x11e>
 8008c26:	2f08      	cmp	r7, #8
 8008c28:	d109      	bne.n	8008c3e <_printf_i+0x14e>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	07db      	lsls	r3, r3, #31
 8008c2e:	d506      	bpl.n	8008c3e <_printf_i+0x14e>
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	6922      	ldr	r2, [r4, #16]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	dc02      	bgt.n	8008c3e <_printf_i+0x14e>
 8008c38:	2330      	movs	r3, #48	; 0x30
 8008c3a:	3e01      	subs	r6, #1
 8008c3c:	7033      	strb	r3, [r6, #0]
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	1b9b      	subs	r3, r3, r6
 8008c42:	6123      	str	r3, [r4, #16]
 8008c44:	9b07      	ldr	r3, [sp, #28]
 8008c46:	0021      	movs	r1, r4
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	9805      	ldr	r0, [sp, #20]
 8008c4c:	9b06      	ldr	r3, [sp, #24]
 8008c4e:	aa09      	add	r2, sp, #36	; 0x24
 8008c50:	f7ff fede 	bl	8008a10 <_printf_common>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d135      	bne.n	8008cc4 <_printf_i+0x1d4>
 8008c58:	2001      	movs	r0, #1
 8008c5a:	4240      	negs	r0, r0
 8008c5c:	b00b      	add	sp, #44	; 0x2c
 8008c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c60:	2220      	movs	r2, #32
 8008c62:	6809      	ldr	r1, [r1, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	6022      	str	r2, [r4, #0]
 8008c68:	0022      	movs	r2, r4
 8008c6a:	2178      	movs	r1, #120	; 0x78
 8008c6c:	3245      	adds	r2, #69	; 0x45
 8008c6e:	7011      	strb	r1, [r2, #0]
 8008c70:	4a27      	ldr	r2, [pc, #156]	; (8008d10 <_printf_i+0x220>)
 8008c72:	e7a7      	b.n	8008bc4 <_printf_i+0xd4>
 8008c74:	0648      	lsls	r0, r1, #25
 8008c76:	d5ac      	bpl.n	8008bd2 <_printf_i+0xe2>
 8008c78:	b2ad      	uxth	r5, r5
 8008c7a:	e7aa      	b.n	8008bd2 <_printf_i+0xe2>
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	680d      	ldr	r5, [r1, #0]
 8008c80:	1d10      	adds	r0, r2, #4
 8008c82:	6949      	ldr	r1, [r1, #20]
 8008c84:	6018      	str	r0, [r3, #0]
 8008c86:	6813      	ldr	r3, [r2, #0]
 8008c88:	062e      	lsls	r6, r5, #24
 8008c8a:	d501      	bpl.n	8008c90 <_printf_i+0x1a0>
 8008c8c:	6019      	str	r1, [r3, #0]
 8008c8e:	e002      	b.n	8008c96 <_printf_i+0x1a6>
 8008c90:	066d      	lsls	r5, r5, #25
 8008c92:	d5fb      	bpl.n	8008c8c <_printf_i+0x19c>
 8008c94:	8019      	strh	r1, [r3, #0]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9e04      	ldr	r6, [sp, #16]
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	e7d2      	b.n	8008c44 <_printf_i+0x154>
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	1d11      	adds	r1, r2, #4
 8008ca2:	6019      	str	r1, [r3, #0]
 8008ca4:	6816      	ldr	r6, [r2, #0]
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	0030      	movs	r0, r6
 8008caa:	6862      	ldr	r2, [r4, #4]
 8008cac:	f002 fc28 	bl	800b500 <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d001      	beq.n	8008cb8 <_printf_i+0x1c8>
 8008cb4:	1b80      	subs	r0, r0, r6
 8008cb6:	6060      	str	r0, [r4, #4]
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	e7bf      	b.n	8008c44 <_printf_i+0x154>
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	0032      	movs	r2, r6
 8008cc8:	9906      	ldr	r1, [sp, #24]
 8008cca:	9805      	ldr	r0, [sp, #20]
 8008ccc:	9d07      	ldr	r5, [sp, #28]
 8008cce:	47a8      	blx	r5
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d0c1      	beq.n	8008c58 <_printf_i+0x168>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	079b      	lsls	r3, r3, #30
 8008cd8:	d415      	bmi.n	8008d06 <_printf_i+0x216>
 8008cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cdc:	68e0      	ldr	r0, [r4, #12]
 8008cde:	4298      	cmp	r0, r3
 8008ce0:	dabc      	bge.n	8008c5c <_printf_i+0x16c>
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	e7ba      	b.n	8008c5c <_printf_i+0x16c>
 8008ce6:	0022      	movs	r2, r4
 8008ce8:	2301      	movs	r3, #1
 8008cea:	9906      	ldr	r1, [sp, #24]
 8008cec:	9805      	ldr	r0, [sp, #20]
 8008cee:	9e07      	ldr	r6, [sp, #28]
 8008cf0:	3219      	adds	r2, #25
 8008cf2:	47b0      	blx	r6
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d0af      	beq.n	8008c58 <_printf_i+0x168>
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dcf0      	bgt.n	8008ce6 <_printf_i+0x1f6>
 8008d04:	e7e9      	b.n	8008cda <_printf_i+0x1ea>
 8008d06:	2500      	movs	r5, #0
 8008d08:	e7f7      	b.n	8008cfa <_printf_i+0x20a>
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	0800d828 	.word	0x0800d828
 8008d10:	0800d839 	.word	0x0800d839

08008d14 <_scanf_float>:
 8008d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d16:	b08b      	sub	sp, #44	; 0x2c
 8008d18:	0015      	movs	r5, r2
 8008d1a:	9001      	str	r0, [sp, #4]
 8008d1c:	22ae      	movs	r2, #174	; 0xae
 8008d1e:	2000      	movs	r0, #0
 8008d20:	9306      	str	r3, [sp, #24]
 8008d22:	688b      	ldr	r3, [r1, #8]
 8008d24:	000e      	movs	r6, r1
 8008d26:	1e59      	subs	r1, r3, #1
 8008d28:	0052      	lsls	r2, r2, #1
 8008d2a:	9005      	str	r0, [sp, #20]
 8008d2c:	4291      	cmp	r1, r2
 8008d2e:	d905      	bls.n	8008d3c <_scanf_float+0x28>
 8008d30:	3b5e      	subs	r3, #94	; 0x5e
 8008d32:	3bff      	subs	r3, #255	; 0xff
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	235e      	movs	r3, #94	; 0x5e
 8008d38:	33ff      	adds	r3, #255	; 0xff
 8008d3a:	60b3      	str	r3, [r6, #8]
 8008d3c:	23f0      	movs	r3, #240	; 0xf0
 8008d3e:	6832      	ldr	r2, [r6, #0]
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	4313      	orrs	r3, r2
 8008d44:	6033      	str	r3, [r6, #0]
 8008d46:	0033      	movs	r3, r6
 8008d48:	2400      	movs	r4, #0
 8008d4a:	331c      	adds	r3, #28
 8008d4c:	001f      	movs	r7, r3
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	9402      	str	r4, [sp, #8]
 8008d52:	9408      	str	r4, [sp, #32]
 8008d54:	9407      	str	r4, [sp, #28]
 8008d56:	9400      	str	r4, [sp, #0]
 8008d58:	9404      	str	r4, [sp, #16]
 8008d5a:	68b2      	ldr	r2, [r6, #8]
 8008d5c:	2a00      	cmp	r2, #0
 8008d5e:	d00a      	beq.n	8008d76 <_scanf_float+0x62>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b4e      	cmp	r3, #78	; 0x4e
 8008d66:	d844      	bhi.n	8008df2 <_scanf_float+0xde>
 8008d68:	0018      	movs	r0, r3
 8008d6a:	2b40      	cmp	r3, #64	; 0x40
 8008d6c:	d82c      	bhi.n	8008dc8 <_scanf_float+0xb4>
 8008d6e:	382b      	subs	r0, #43	; 0x2b
 8008d70:	b2c1      	uxtb	r1, r0
 8008d72:	290e      	cmp	r1, #14
 8008d74:	d92a      	bls.n	8008dcc <_scanf_float+0xb8>
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <_scanf_float+0x70>
 8008d7c:	6832      	ldr	r2, [r6, #0]
 8008d7e:	4ba4      	ldr	r3, [pc, #656]	; (8009010 <_scanf_float+0x2fc>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	6033      	str	r3, [r6, #0]
 8008d84:	9b02      	ldr	r3, [sp, #8]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d900      	bls.n	8008d8e <_scanf_float+0x7a>
 8008d8c:	e0f9      	b.n	8008f82 <_scanf_float+0x26e>
 8008d8e:	24be      	movs	r4, #190	; 0xbe
 8008d90:	0064      	lsls	r4, r4, #1
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	429f      	cmp	r7, r3
 8008d96:	d900      	bls.n	8008d9a <_scanf_float+0x86>
 8008d98:	e0e9      	b.n	8008f6e <_scanf_float+0x25a>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	9302      	str	r3, [sp, #8]
 8008d9e:	e185      	b.n	80090ac <_scanf_float+0x398>
 8008da0:	0018      	movs	r0, r3
 8008da2:	3861      	subs	r0, #97	; 0x61
 8008da4:	280d      	cmp	r0, #13
 8008da6:	d8e6      	bhi.n	8008d76 <_scanf_float+0x62>
 8008da8:	f7f7 f9ca 	bl	8000140 <__gnu_thumb1_case_shi>
 8008dac:	ffe50083 	.word	0xffe50083
 8008db0:	ffe5ffe5 	.word	0xffe5ffe5
 8008db4:	00a200b6 	.word	0x00a200b6
 8008db8:	ffe5ffe5 	.word	0xffe5ffe5
 8008dbc:	ffe50089 	.word	0xffe50089
 8008dc0:	ffe5ffe5 	.word	0xffe5ffe5
 8008dc4:	0065ffe5 	.word	0x0065ffe5
 8008dc8:	3841      	subs	r0, #65	; 0x41
 8008dca:	e7eb      	b.n	8008da4 <_scanf_float+0x90>
 8008dcc:	280e      	cmp	r0, #14
 8008dce:	d8d2      	bhi.n	8008d76 <_scanf_float+0x62>
 8008dd0:	f7f7 f9b6 	bl	8000140 <__gnu_thumb1_case_shi>
 8008dd4:	ffd1004b 	.word	0xffd1004b
 8008dd8:	0098004b 	.word	0x0098004b
 8008ddc:	0020ffd1 	.word	0x0020ffd1
 8008de0:	00400040 	.word	0x00400040
 8008de4:	00400040 	.word	0x00400040
 8008de8:	00400040 	.word	0x00400040
 8008dec:	00400040 	.word	0x00400040
 8008df0:	0040      	.short	0x0040
 8008df2:	2b6e      	cmp	r3, #110	; 0x6e
 8008df4:	d809      	bhi.n	8008e0a <_scanf_float+0xf6>
 8008df6:	2b60      	cmp	r3, #96	; 0x60
 8008df8:	d8d2      	bhi.n	8008da0 <_scanf_float+0x8c>
 8008dfa:	2b54      	cmp	r3, #84	; 0x54
 8008dfc:	d07d      	beq.n	8008efa <_scanf_float+0x1e6>
 8008dfe:	2b59      	cmp	r3, #89	; 0x59
 8008e00:	d1b9      	bne.n	8008d76 <_scanf_float+0x62>
 8008e02:	2c07      	cmp	r4, #7
 8008e04:	d1b7      	bne.n	8008d76 <_scanf_float+0x62>
 8008e06:	2408      	movs	r4, #8
 8008e08:	e02c      	b.n	8008e64 <_scanf_float+0x150>
 8008e0a:	2b74      	cmp	r3, #116	; 0x74
 8008e0c:	d075      	beq.n	8008efa <_scanf_float+0x1e6>
 8008e0e:	2b79      	cmp	r3, #121	; 0x79
 8008e10:	d0f7      	beq.n	8008e02 <_scanf_float+0xee>
 8008e12:	e7b0      	b.n	8008d76 <_scanf_float+0x62>
 8008e14:	6831      	ldr	r1, [r6, #0]
 8008e16:	05c8      	lsls	r0, r1, #23
 8008e18:	d51c      	bpl.n	8008e54 <_scanf_float+0x140>
 8008e1a:	2380      	movs	r3, #128	; 0x80
 8008e1c:	4399      	bics	r1, r3
 8008e1e:	9b00      	ldr	r3, [sp, #0]
 8008e20:	6031      	str	r1, [r6, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <_scanf_float+0x120>
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	3201      	adds	r2, #1
 8008e30:	9305      	str	r3, [sp, #20]
 8008e32:	60b2      	str	r2, [r6, #8]
 8008e34:	68b3      	ldr	r3, [r6, #8]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	60b3      	str	r3, [r6, #8]
 8008e3a:	6933      	ldr	r3, [r6, #16]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	6133      	str	r3, [r6, #16]
 8008e40:	686b      	ldr	r3, [r5, #4]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	606b      	str	r3, [r5, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dc00      	bgt.n	8008e4c <_scanf_float+0x138>
 8008e4a:	e086      	b.n	8008f5a <_scanf_float+0x246>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	e782      	b.n	8008d5a <_scanf_float+0x46>
 8008e54:	9a02      	ldr	r2, [sp, #8]
 8008e56:	1912      	adds	r2, r2, r4
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	d18c      	bne.n	8008d76 <_scanf_float+0x62>
 8008e5c:	4a6d      	ldr	r2, [pc, #436]	; (8009014 <_scanf_float+0x300>)
 8008e5e:	6831      	ldr	r1, [r6, #0]
 8008e60:	400a      	ands	r2, r1
 8008e62:	6032      	str	r2, [r6, #0]
 8008e64:	703b      	strb	r3, [r7, #0]
 8008e66:	3701      	adds	r7, #1
 8008e68:	e7e4      	b.n	8008e34 <_scanf_float+0x120>
 8008e6a:	2180      	movs	r1, #128	; 0x80
 8008e6c:	6832      	ldr	r2, [r6, #0]
 8008e6e:	420a      	tst	r2, r1
 8008e70:	d081      	beq.n	8008d76 <_scanf_float+0x62>
 8008e72:	438a      	bics	r2, r1
 8008e74:	e7f5      	b.n	8008e62 <_scanf_float+0x14e>
 8008e76:	9a02      	ldr	r2, [sp, #8]
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d10f      	bne.n	8008e9c <_scanf_float+0x188>
 8008e7c:	9a00      	ldr	r2, [sp, #0]
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	d10f      	bne.n	8008ea2 <_scanf_float+0x18e>
 8008e82:	6832      	ldr	r2, [r6, #0]
 8008e84:	21e0      	movs	r1, #224	; 0xe0
 8008e86:	0010      	movs	r0, r2
 8008e88:	00c9      	lsls	r1, r1, #3
 8008e8a:	4008      	ands	r0, r1
 8008e8c:	4288      	cmp	r0, r1
 8008e8e:	d108      	bne.n	8008ea2 <_scanf_float+0x18e>
 8008e90:	4961      	ldr	r1, [pc, #388]	; (8009018 <_scanf_float+0x304>)
 8008e92:	400a      	ands	r2, r1
 8008e94:	6032      	str	r2, [r6, #0]
 8008e96:	2201      	movs	r2, #1
 8008e98:	9202      	str	r2, [sp, #8]
 8008e9a:	e7e3      	b.n	8008e64 <_scanf_float+0x150>
 8008e9c:	9a02      	ldr	r2, [sp, #8]
 8008e9e:	2a02      	cmp	r2, #2
 8008ea0:	d059      	beq.n	8008f56 <_scanf_float+0x242>
 8008ea2:	2c01      	cmp	r4, #1
 8008ea4:	d002      	beq.n	8008eac <_scanf_float+0x198>
 8008ea6:	2c04      	cmp	r4, #4
 8008ea8:	d000      	beq.n	8008eac <_scanf_float+0x198>
 8008eaa:	e764      	b.n	8008d76 <_scanf_float+0x62>
 8008eac:	3401      	adds	r4, #1
 8008eae:	b2e4      	uxtb	r4, r4
 8008eb0:	e7d8      	b.n	8008e64 <_scanf_float+0x150>
 8008eb2:	9a02      	ldr	r2, [sp, #8]
 8008eb4:	2a01      	cmp	r2, #1
 8008eb6:	d000      	beq.n	8008eba <_scanf_float+0x1a6>
 8008eb8:	e75d      	b.n	8008d76 <_scanf_float+0x62>
 8008eba:	2202      	movs	r2, #2
 8008ebc:	e7ec      	b.n	8008e98 <_scanf_float+0x184>
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d110      	bne.n	8008ee4 <_scanf_float+0x1d0>
 8008ec2:	9a00      	ldr	r2, [sp, #0]
 8008ec4:	2a00      	cmp	r2, #0
 8008ec6:	d000      	beq.n	8008eca <_scanf_float+0x1b6>
 8008ec8:	e758      	b.n	8008d7c <_scanf_float+0x68>
 8008eca:	6832      	ldr	r2, [r6, #0]
 8008ecc:	21e0      	movs	r1, #224	; 0xe0
 8008ece:	0010      	movs	r0, r2
 8008ed0:	00c9      	lsls	r1, r1, #3
 8008ed2:	4008      	ands	r0, r1
 8008ed4:	4288      	cmp	r0, r1
 8008ed6:	d000      	beq.n	8008eda <_scanf_float+0x1c6>
 8008ed8:	e754      	b.n	8008d84 <_scanf_float+0x70>
 8008eda:	494f      	ldr	r1, [pc, #316]	; (8009018 <_scanf_float+0x304>)
 8008edc:	3401      	adds	r4, #1
 8008ede:	400a      	ands	r2, r1
 8008ee0:	6032      	str	r2, [r6, #0]
 8008ee2:	e7bf      	b.n	8008e64 <_scanf_float+0x150>
 8008ee4:	21fd      	movs	r1, #253	; 0xfd
 8008ee6:	1ee2      	subs	r2, r4, #3
 8008ee8:	420a      	tst	r2, r1
 8008eea:	d000      	beq.n	8008eee <_scanf_float+0x1da>
 8008eec:	e743      	b.n	8008d76 <_scanf_float+0x62>
 8008eee:	e7dd      	b.n	8008eac <_scanf_float+0x198>
 8008ef0:	2c02      	cmp	r4, #2
 8008ef2:	d000      	beq.n	8008ef6 <_scanf_float+0x1e2>
 8008ef4:	e73f      	b.n	8008d76 <_scanf_float+0x62>
 8008ef6:	2403      	movs	r4, #3
 8008ef8:	e7b4      	b.n	8008e64 <_scanf_float+0x150>
 8008efa:	2c06      	cmp	r4, #6
 8008efc:	d000      	beq.n	8008f00 <_scanf_float+0x1ec>
 8008efe:	e73a      	b.n	8008d76 <_scanf_float+0x62>
 8008f00:	2407      	movs	r4, #7
 8008f02:	e7af      	b.n	8008e64 <_scanf_float+0x150>
 8008f04:	6832      	ldr	r2, [r6, #0]
 8008f06:	0591      	lsls	r1, r2, #22
 8008f08:	d400      	bmi.n	8008f0c <_scanf_float+0x1f8>
 8008f0a:	e734      	b.n	8008d76 <_scanf_float+0x62>
 8008f0c:	4943      	ldr	r1, [pc, #268]	; (800901c <_scanf_float+0x308>)
 8008f0e:	400a      	ands	r2, r1
 8008f10:	6032      	str	r2, [r6, #0]
 8008f12:	9a00      	ldr	r2, [sp, #0]
 8008f14:	9204      	str	r2, [sp, #16]
 8008f16:	e7a5      	b.n	8008e64 <_scanf_float+0x150>
 8008f18:	21a0      	movs	r1, #160	; 0xa0
 8008f1a:	2080      	movs	r0, #128	; 0x80
 8008f1c:	6832      	ldr	r2, [r6, #0]
 8008f1e:	00c9      	lsls	r1, r1, #3
 8008f20:	4011      	ands	r1, r2
 8008f22:	00c0      	lsls	r0, r0, #3
 8008f24:	4281      	cmp	r1, r0
 8008f26:	d006      	beq.n	8008f36 <_scanf_float+0x222>
 8008f28:	4202      	tst	r2, r0
 8008f2a:	d100      	bne.n	8008f2e <_scanf_float+0x21a>
 8008f2c:	e723      	b.n	8008d76 <_scanf_float+0x62>
 8008f2e:	9900      	ldr	r1, [sp, #0]
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d100      	bne.n	8008f36 <_scanf_float+0x222>
 8008f34:	e726      	b.n	8008d84 <_scanf_float+0x70>
 8008f36:	0591      	lsls	r1, r2, #22
 8008f38:	d404      	bmi.n	8008f44 <_scanf_float+0x230>
 8008f3a:	9900      	ldr	r1, [sp, #0]
 8008f3c:	9804      	ldr	r0, [sp, #16]
 8008f3e:	9708      	str	r7, [sp, #32]
 8008f40:	1a09      	subs	r1, r1, r0
 8008f42:	9107      	str	r1, [sp, #28]
 8008f44:	4934      	ldr	r1, [pc, #208]	; (8009018 <_scanf_float+0x304>)
 8008f46:	400a      	ands	r2, r1
 8008f48:	21c0      	movs	r1, #192	; 0xc0
 8008f4a:	0049      	lsls	r1, r1, #1
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	6032      	str	r2, [r6, #0]
 8008f50:	2200      	movs	r2, #0
 8008f52:	9200      	str	r2, [sp, #0]
 8008f54:	e786      	b.n	8008e64 <_scanf_float+0x150>
 8008f56:	2203      	movs	r2, #3
 8008f58:	e79e      	b.n	8008e98 <_scanf_float+0x184>
 8008f5a:	23c0      	movs	r3, #192	; 0xc0
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	0029      	movs	r1, r5
 8008f60:	58f3      	ldr	r3, [r6, r3]
 8008f62:	9801      	ldr	r0, [sp, #4]
 8008f64:	4798      	blx	r3
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d100      	bne.n	8008f6c <_scanf_float+0x258>
 8008f6a:	e6f6      	b.n	8008d5a <_scanf_float+0x46>
 8008f6c:	e703      	b.n	8008d76 <_scanf_float+0x62>
 8008f6e:	3f01      	subs	r7, #1
 8008f70:	5933      	ldr	r3, [r6, r4]
 8008f72:	002a      	movs	r2, r5
 8008f74:	7839      	ldrb	r1, [r7, #0]
 8008f76:	9801      	ldr	r0, [sp, #4]
 8008f78:	4798      	blx	r3
 8008f7a:	6933      	ldr	r3, [r6, #16]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	6133      	str	r3, [r6, #16]
 8008f80:	e707      	b.n	8008d92 <_scanf_float+0x7e>
 8008f82:	1e63      	subs	r3, r4, #1
 8008f84:	2b06      	cmp	r3, #6
 8008f86:	d80e      	bhi.n	8008fa6 <_scanf_float+0x292>
 8008f88:	9702      	str	r7, [sp, #8]
 8008f8a:	2c02      	cmp	r4, #2
 8008f8c:	d920      	bls.n	8008fd0 <_scanf_float+0x2bc>
 8008f8e:	1be3      	subs	r3, r4, r7
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	9a05      	ldr	r2, [sp, #20]
 8008f98:	189b      	adds	r3, r3, r2
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d827      	bhi.n	8008ff0 <_scanf_float+0x2dc>
 8008fa0:	3c03      	subs	r4, #3
 8008fa2:	b2e4      	uxtb	r4, r4
 8008fa4:	1b3f      	subs	r7, r7, r4
 8008fa6:	6833      	ldr	r3, [r6, #0]
 8008fa8:	05da      	lsls	r2, r3, #23
 8008faa:	d554      	bpl.n	8009056 <_scanf_float+0x342>
 8008fac:	055b      	lsls	r3, r3, #21
 8008fae:	d537      	bpl.n	8009020 <_scanf_float+0x30c>
 8008fb0:	24be      	movs	r4, #190	; 0xbe
 8008fb2:	0064      	lsls	r4, r4, #1
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	429f      	cmp	r7, r3
 8008fb8:	d800      	bhi.n	8008fbc <_scanf_float+0x2a8>
 8008fba:	e6ee      	b.n	8008d9a <_scanf_float+0x86>
 8008fbc:	3f01      	subs	r7, #1
 8008fbe:	5933      	ldr	r3, [r6, r4]
 8008fc0:	002a      	movs	r2, r5
 8008fc2:	7839      	ldrb	r1, [r7, #0]
 8008fc4:	9801      	ldr	r0, [sp, #4]
 8008fc6:	4798      	blx	r3
 8008fc8:	6933      	ldr	r3, [r6, #16]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	6133      	str	r3, [r6, #16]
 8008fce:	e7f1      	b.n	8008fb4 <_scanf_float+0x2a0>
 8008fd0:	24be      	movs	r4, #190	; 0xbe
 8008fd2:	0064      	lsls	r4, r4, #1
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	429f      	cmp	r7, r3
 8008fd8:	d800      	bhi.n	8008fdc <_scanf_float+0x2c8>
 8008fda:	e6de      	b.n	8008d9a <_scanf_float+0x86>
 8008fdc:	3f01      	subs	r7, #1
 8008fde:	5933      	ldr	r3, [r6, r4]
 8008fe0:	002a      	movs	r2, r5
 8008fe2:	7839      	ldrb	r1, [r7, #0]
 8008fe4:	9801      	ldr	r0, [sp, #4]
 8008fe6:	4798      	blx	r3
 8008fe8:	6933      	ldr	r3, [r6, #16]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	6133      	str	r3, [r6, #16]
 8008fee:	e7f1      	b.n	8008fd4 <_scanf_float+0x2c0>
 8008ff0:	9b02      	ldr	r3, [sp, #8]
 8008ff2:	002a      	movs	r2, r5
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	7819      	ldrb	r1, [r3, #0]
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	23be      	movs	r3, #190	; 0xbe
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	58f3      	ldr	r3, [r6, r3]
 8009000:	9801      	ldr	r0, [sp, #4]
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	4798      	blx	r3
 8009006:	6933      	ldr	r3, [r6, #16]
 8009008:	3b01      	subs	r3, #1
 800900a:	6133      	str	r3, [r6, #16]
 800900c:	e7c2      	b.n	8008f94 <_scanf_float+0x280>
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	fffffeff 	.word	0xfffffeff
 8009014:	fffffe7f 	.word	0xfffffe7f
 8009018:	fffff87f 	.word	0xfffff87f
 800901c:	fffffd7f 	.word	0xfffffd7f
 8009020:	6933      	ldr	r3, [r6, #16]
 8009022:	1e7c      	subs	r4, r7, #1
 8009024:	7821      	ldrb	r1, [r4, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	6133      	str	r3, [r6, #16]
 800902a:	2965      	cmp	r1, #101	; 0x65
 800902c:	d00c      	beq.n	8009048 <_scanf_float+0x334>
 800902e:	2945      	cmp	r1, #69	; 0x45
 8009030:	d00a      	beq.n	8009048 <_scanf_float+0x334>
 8009032:	23be      	movs	r3, #190	; 0xbe
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	58f3      	ldr	r3, [r6, r3]
 8009038:	002a      	movs	r2, r5
 800903a:	9801      	ldr	r0, [sp, #4]
 800903c:	4798      	blx	r3
 800903e:	6933      	ldr	r3, [r6, #16]
 8009040:	1ebc      	subs	r4, r7, #2
 8009042:	3b01      	subs	r3, #1
 8009044:	7821      	ldrb	r1, [r4, #0]
 8009046:	6133      	str	r3, [r6, #16]
 8009048:	23be      	movs	r3, #190	; 0xbe
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	002a      	movs	r2, r5
 800904e:	58f3      	ldr	r3, [r6, r3]
 8009050:	9801      	ldr	r0, [sp, #4]
 8009052:	4798      	blx	r3
 8009054:	0027      	movs	r7, r4
 8009056:	6832      	ldr	r2, [r6, #0]
 8009058:	2310      	movs	r3, #16
 800905a:	0011      	movs	r1, r2
 800905c:	4019      	ands	r1, r3
 800905e:	9102      	str	r1, [sp, #8]
 8009060:	421a      	tst	r2, r3
 8009062:	d158      	bne.n	8009116 <_scanf_float+0x402>
 8009064:	23c0      	movs	r3, #192	; 0xc0
 8009066:	7039      	strb	r1, [r7, #0]
 8009068:	6832      	ldr	r2, [r6, #0]
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	4013      	ands	r3, r2
 800906e:	2280      	movs	r2, #128	; 0x80
 8009070:	00d2      	lsls	r2, r2, #3
 8009072:	4293      	cmp	r3, r2
 8009074:	d11d      	bne.n	80090b2 <_scanf_float+0x39e>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	9a00      	ldr	r2, [sp, #0]
 800907a:	9900      	ldr	r1, [sp, #0]
 800907c:	1a9a      	subs	r2, r3, r2
 800907e:	428b      	cmp	r3, r1
 8009080:	d124      	bne.n	80090cc <_scanf_float+0x3b8>
 8009082:	2200      	movs	r2, #0
 8009084:	9903      	ldr	r1, [sp, #12]
 8009086:	9801      	ldr	r0, [sp, #4]
 8009088:	f000 ff2a 	bl	8009ee0 <_strtod_r>
 800908c:	9b06      	ldr	r3, [sp, #24]
 800908e:	000d      	movs	r5, r1
 8009090:	6831      	ldr	r1, [r6, #0]
 8009092:	0004      	movs	r4, r0
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	078a      	lsls	r2, r1, #30
 8009098:	d525      	bpl.n	80090e6 <_scanf_float+0x3d2>
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	9906      	ldr	r1, [sp, #24]
 800909e:	600a      	str	r2, [r1, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	601c      	str	r4, [r3, #0]
 80090a4:	605d      	str	r5, [r3, #4]
 80090a6:	68f3      	ldr	r3, [r6, #12]
 80090a8:	3301      	adds	r3, #1
 80090aa:	60f3      	str	r3, [r6, #12]
 80090ac:	9802      	ldr	r0, [sp, #8]
 80090ae:	b00b      	add	sp, #44	; 0x2c
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	9b07      	ldr	r3, [sp, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0e4      	beq.n	8009082 <_scanf_float+0x36e>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	9a02      	ldr	r2, [sp, #8]
 80090bc:	1c59      	adds	r1, r3, #1
 80090be:	9801      	ldr	r0, [sp, #4]
 80090c0:	230a      	movs	r3, #10
 80090c2:	f000 ffa3 	bl	800a00c <_strtol_r>
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	9f08      	ldr	r7, [sp, #32]
 80090ca:	1ac2      	subs	r2, r0, r3
 80090cc:	0033      	movs	r3, r6
 80090ce:	3370      	adds	r3, #112	; 0x70
 80090d0:	33ff      	adds	r3, #255	; 0xff
 80090d2:	429f      	cmp	r7, r3
 80090d4:	d302      	bcc.n	80090dc <_scanf_float+0x3c8>
 80090d6:	0037      	movs	r7, r6
 80090d8:	376f      	adds	r7, #111	; 0x6f
 80090da:	37ff      	adds	r7, #255	; 0xff
 80090dc:	0038      	movs	r0, r7
 80090de:	490f      	ldr	r1, [pc, #60]	; (800911c <_scanf_float+0x408>)
 80090e0:	f000 f824 	bl	800912c <siprintf>
 80090e4:	e7cd      	b.n	8009082 <_scanf_float+0x36e>
 80090e6:	1d1a      	adds	r2, r3, #4
 80090e8:	0749      	lsls	r1, r1, #29
 80090ea:	d4d7      	bmi.n	800909c <_scanf_float+0x388>
 80090ec:	9906      	ldr	r1, [sp, #24]
 80090ee:	0020      	movs	r0, r4
 80090f0:	600a      	str	r2, [r1, #0]
 80090f2:	681f      	ldr	r7, [r3, #0]
 80090f4:	0022      	movs	r2, r4
 80090f6:	002b      	movs	r3, r5
 80090f8:	0029      	movs	r1, r5
 80090fa:	f7f8 ffbd 	bl	8002078 <__aeabi_dcmpun>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d004      	beq.n	800910c <_scanf_float+0x3f8>
 8009102:	4807      	ldr	r0, [pc, #28]	; (8009120 <_scanf_float+0x40c>)
 8009104:	f000 f80e 	bl	8009124 <nanf>
 8009108:	6038      	str	r0, [r7, #0]
 800910a:	e7cc      	b.n	80090a6 <_scanf_float+0x392>
 800910c:	0020      	movs	r0, r4
 800910e:	0029      	movs	r1, r5
 8009110:	f7f9 f8a4 	bl	800225c <__aeabi_d2f>
 8009114:	e7f8      	b.n	8009108 <_scanf_float+0x3f4>
 8009116:	2300      	movs	r3, #0
 8009118:	e640      	b.n	8008d9c <_scanf_float+0x88>
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	0800d84a 	.word	0x0800d84a
 8009120:	0800dc7b 	.word	0x0800dc7b

08009124 <nanf>:
 8009124:	4800      	ldr	r0, [pc, #0]	; (8009128 <nanf+0x4>)
 8009126:	4770      	bx	lr
 8009128:	7fc00000 	.word	0x7fc00000

0800912c <siprintf>:
 800912c:	b40e      	push	{r1, r2, r3}
 800912e:	b500      	push	{lr}
 8009130:	490b      	ldr	r1, [pc, #44]	; (8009160 <siprintf+0x34>)
 8009132:	b09c      	sub	sp, #112	; 0x70
 8009134:	ab1d      	add	r3, sp, #116	; 0x74
 8009136:	9002      	str	r0, [sp, #8]
 8009138:	9006      	str	r0, [sp, #24]
 800913a:	9107      	str	r1, [sp, #28]
 800913c:	9104      	str	r1, [sp, #16]
 800913e:	4809      	ldr	r0, [pc, #36]	; (8009164 <siprintf+0x38>)
 8009140:	4909      	ldr	r1, [pc, #36]	; (8009168 <siprintf+0x3c>)
 8009142:	cb04      	ldmia	r3!, {r2}
 8009144:	9105      	str	r1, [sp, #20]
 8009146:	6800      	ldr	r0, [r0, #0]
 8009148:	a902      	add	r1, sp, #8
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	f002 ffce 	bl	800c0ec <_svfiprintf_r>
 8009150:	2300      	movs	r3, #0
 8009152:	9a02      	ldr	r2, [sp, #8]
 8009154:	7013      	strb	r3, [r2, #0]
 8009156:	b01c      	add	sp, #112	; 0x70
 8009158:	bc08      	pop	{r3}
 800915a:	b003      	add	sp, #12
 800915c:	4718      	bx	r3
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	7fffffff 	.word	0x7fffffff
 8009164:	2000000c 	.word	0x2000000c
 8009168:	ffff0208 	.word	0xffff0208

0800916c <siscanf>:
 800916c:	b40e      	push	{r1, r2, r3}
 800916e:	b530      	push	{r4, r5, lr}
 8009170:	2381      	movs	r3, #129	; 0x81
 8009172:	b09c      	sub	sp, #112	; 0x70
 8009174:	466a      	mov	r2, sp
 8009176:	ac1f      	add	r4, sp, #124	; 0x7c
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	cc20      	ldmia	r4!, {r5}
 800917c:	8293      	strh	r3, [r2, #20]
 800917e:	9002      	str	r0, [sp, #8]
 8009180:	9006      	str	r0, [sp, #24]
 8009182:	f7f6 ffcb 	bl	800011c <strlen>
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <siscanf+0x48>)
 8009188:	466a      	mov	r2, sp
 800918a:	930b      	str	r3, [sp, #44]	; 0x2c
 800918c:	2300      	movs	r3, #0
 800918e:	9003      	str	r0, [sp, #12]
 8009190:	9007      	str	r0, [sp, #28]
 8009192:	4809      	ldr	r0, [pc, #36]	; (80091b8 <siscanf+0x4c>)
 8009194:	930f      	str	r3, [sp, #60]	; 0x3c
 8009196:	9314      	str	r3, [sp, #80]	; 0x50
 8009198:	3b01      	subs	r3, #1
 800919a:	82d3      	strh	r3, [r2, #22]
 800919c:	a902      	add	r1, sp, #8
 800919e:	0023      	movs	r3, r4
 80091a0:	002a      	movs	r2, r5
 80091a2:	6800      	ldr	r0, [r0, #0]
 80091a4:	9401      	str	r4, [sp, #4]
 80091a6:	f003 f8fd 	bl	800c3a4 <__ssvfiscanf_r>
 80091aa:	b01c      	add	sp, #112	; 0x70
 80091ac:	bc30      	pop	{r4, r5}
 80091ae:	bc08      	pop	{r3}
 80091b0:	b003      	add	sp, #12
 80091b2:	4718      	bx	r3
 80091b4:	080091e5 	.word	0x080091e5
 80091b8:	2000000c 	.word	0x2000000c

080091bc <__sread>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	000c      	movs	r4, r1
 80091c0:	250e      	movs	r5, #14
 80091c2:	5f49      	ldrsh	r1, [r1, r5]
 80091c4:	f003 fbc8 	bl	800c958 <_read_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	db03      	blt.n	80091d4 <__sread+0x18>
 80091cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80091ce:	181b      	adds	r3, r3, r0
 80091d0:	6563      	str	r3, [r4, #84]	; 0x54
 80091d2:	bd70      	pop	{r4, r5, r6, pc}
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	4a02      	ldr	r2, [pc, #8]	; (80091e0 <__sread+0x24>)
 80091d8:	4013      	ands	r3, r2
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	e7f9      	b.n	80091d2 <__sread+0x16>
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	ffffefff 	.word	0xffffefff

080091e4 <__seofread>:
 80091e4:	2000      	movs	r0, #0
 80091e6:	4770      	bx	lr

080091e8 <__swrite>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	001f      	movs	r7, r3
 80091ec:	898b      	ldrh	r3, [r1, #12]
 80091ee:	0005      	movs	r5, r0
 80091f0:	000c      	movs	r4, r1
 80091f2:	0016      	movs	r6, r2
 80091f4:	05db      	lsls	r3, r3, #23
 80091f6:	d505      	bpl.n	8009204 <__swrite+0x1c>
 80091f8:	230e      	movs	r3, #14
 80091fa:	5ec9      	ldrsh	r1, [r1, r3]
 80091fc:	2200      	movs	r2, #0
 80091fe:	2302      	movs	r3, #2
 8009200:	f002 f94e 	bl	800b4a0 <_lseek_r>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	4a05      	ldr	r2, [pc, #20]	; (800921c <__swrite+0x34>)
 8009208:	0028      	movs	r0, r5
 800920a:	4013      	ands	r3, r2
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	0032      	movs	r2, r6
 8009210:	230e      	movs	r3, #14
 8009212:	5ee1      	ldrsh	r1, [r4, r3]
 8009214:	003b      	movs	r3, r7
 8009216:	f000 fefd 	bl	800a014 <_write_r>
 800921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800921c:	ffffefff 	.word	0xffffefff

08009220 <__sseek>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	000c      	movs	r4, r1
 8009224:	250e      	movs	r5, #14
 8009226:	5f49      	ldrsh	r1, [r1, r5]
 8009228:	f002 f93a 	bl	800b4a0 <_lseek_r>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	1c42      	adds	r2, r0, #1
 8009230:	d103      	bne.n	800923a <__sseek+0x1a>
 8009232:	4a05      	ldr	r2, [pc, #20]	; (8009248 <__sseek+0x28>)
 8009234:	4013      	ands	r3, r2
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	0152      	lsls	r2, r2, #5
 800923e:	4313      	orrs	r3, r2
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	6560      	str	r0, [r4, #84]	; 0x54
 8009244:	e7f8      	b.n	8009238 <__sseek+0x18>
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	ffffefff 	.word	0xffffefff

0800924c <__sclose>:
 800924c:	b510      	push	{r4, lr}
 800924e:	230e      	movs	r3, #14
 8009250:	5ec9      	ldrsh	r1, [r1, r3]
 8009252:	f000 fef3 	bl	800a03c <_close_r>
 8009256:	bd10      	pop	{r4, pc}

08009258 <strcpy>:
 8009258:	0003      	movs	r3, r0
 800925a:	780a      	ldrb	r2, [r1, #0]
 800925c:	3101      	adds	r1, #1
 800925e:	701a      	strb	r2, [r3, #0]
 8009260:	3301      	adds	r3, #1
 8009262:	2a00      	cmp	r2, #0
 8009264:	d1f9      	bne.n	800925a <strcpy+0x2>
 8009266:	4770      	bx	lr

08009268 <sulp>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	0016      	movs	r6, r2
 800926c:	000d      	movs	r5, r1
 800926e:	f002 fce1 	bl	800bc34 <__ulp>
 8009272:	2e00      	cmp	r6, #0
 8009274:	d00d      	beq.n	8009292 <sulp+0x2a>
 8009276:	236b      	movs	r3, #107	; 0x6b
 8009278:	006a      	lsls	r2, r5, #1
 800927a:	0d52      	lsrs	r2, r2, #21
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	2b00      	cmp	r3, #0
 8009280:	dd07      	ble.n	8009292 <sulp+0x2a>
 8009282:	2400      	movs	r4, #0
 8009284:	4a03      	ldr	r2, [pc, #12]	; (8009294 <sulp+0x2c>)
 8009286:	051b      	lsls	r3, r3, #20
 8009288:	189d      	adds	r5, r3, r2
 800928a:	002b      	movs	r3, r5
 800928c:	0022      	movs	r2, r4
 800928e:	f7f8 f8f5 	bl	800147c <__aeabi_dmul>
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	3ff00000 	.word	0x3ff00000

08009298 <_strtod_l>:
 8009298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929a:	001d      	movs	r5, r3
 800929c:	2300      	movs	r3, #0
 800929e:	b0a7      	sub	sp, #156	; 0x9c
 80092a0:	9322      	str	r3, [sp, #136]	; 0x88
 80092a2:	4bae      	ldr	r3, [pc, #696]	; (800955c <_strtod_l+0x2c4>)
 80092a4:	9005      	str	r0, [sp, #20]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	9108      	str	r1, [sp, #32]
 80092aa:	0018      	movs	r0, r3
 80092ac:	9307      	str	r3, [sp, #28]
 80092ae:	921d      	str	r2, [sp, #116]	; 0x74
 80092b0:	f7f6 ff34 	bl	800011c <strlen>
 80092b4:	2600      	movs	r6, #0
 80092b6:	0004      	movs	r4, r0
 80092b8:	2700      	movs	r7, #0
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	9321      	str	r3, [sp, #132]	; 0x84
 80092be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092c0:	7813      	ldrb	r3, [r2, #0]
 80092c2:	2b2b      	cmp	r3, #43	; 0x2b
 80092c4:	d058      	beq.n	8009378 <_strtod_l+0xe0>
 80092c6:	d844      	bhi.n	8009352 <_strtod_l+0xba>
 80092c8:	2b0d      	cmp	r3, #13
 80092ca:	d83d      	bhi.n	8009348 <_strtod_l+0xb0>
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d83d      	bhi.n	800934c <_strtod_l+0xb4>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d047      	beq.n	8009364 <_strtod_l+0xcc>
 80092d4:	2300      	movs	r3, #0
 80092d6:	9310      	str	r3, [sp, #64]	; 0x40
 80092d8:	2200      	movs	r2, #0
 80092da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092dc:	920a      	str	r2, [sp, #40]	; 0x28
 80092de:	9306      	str	r3, [sp, #24]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b30      	cmp	r3, #48	; 0x30
 80092e4:	d000      	beq.n	80092e8 <_strtod_l+0x50>
 80092e6:	e083      	b.n	80093f0 <_strtod_l+0x158>
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	3220      	adds	r2, #32
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	4393      	bics	r3, r2
 80092f0:	2b58      	cmp	r3, #88	; 0x58
 80092f2:	d000      	beq.n	80092f6 <_strtod_l+0x5e>
 80092f4:	e072      	b.n	80093dc <_strtod_l+0x144>
 80092f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092f8:	9502      	str	r5, [sp, #8]
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	ab22      	add	r3, sp, #136	; 0x88
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4a97      	ldr	r2, [pc, #604]	; (8009560 <_strtod_l+0x2c8>)
 8009302:	ab23      	add	r3, sp, #140	; 0x8c
 8009304:	9805      	ldr	r0, [sp, #20]
 8009306:	a921      	add	r1, sp, #132	; 0x84
 8009308:	f001 fdbe 	bl	800ae88 <__gethex>
 800930c:	2307      	movs	r3, #7
 800930e:	0005      	movs	r5, r0
 8009310:	0004      	movs	r4, r0
 8009312:	401d      	ands	r5, r3
 8009314:	4218      	tst	r0, r3
 8009316:	d006      	beq.n	8009326 <_strtod_l+0x8e>
 8009318:	2d06      	cmp	r5, #6
 800931a:	d12f      	bne.n	800937c <_strtod_l+0xe4>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	3301      	adds	r3, #1
 8009320:	9321      	str	r3, [sp, #132]	; 0x84
 8009322:	2300      	movs	r3, #0
 8009324:	9310      	str	r3, [sp, #64]	; 0x40
 8009326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <_strtod_l+0x9a>
 800932c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800932e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01c      	beq.n	8009372 <_strtod_l+0xda>
 8009338:	2380      	movs	r3, #128	; 0x80
 800933a:	0032      	movs	r2, r6
 800933c:	061b      	lsls	r3, r3, #24
 800933e:	18fb      	adds	r3, r7, r3
 8009340:	0010      	movs	r0, r2
 8009342:	0019      	movs	r1, r3
 8009344:	b027      	add	sp, #156	; 0x9c
 8009346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009348:	2b20      	cmp	r3, #32
 800934a:	d1c3      	bne.n	80092d4 <_strtod_l+0x3c>
 800934c:	3201      	adds	r2, #1
 800934e:	9221      	str	r2, [sp, #132]	; 0x84
 8009350:	e7b5      	b.n	80092be <_strtod_l+0x26>
 8009352:	2b2d      	cmp	r3, #45	; 0x2d
 8009354:	d1be      	bne.n	80092d4 <_strtod_l+0x3c>
 8009356:	3b2c      	subs	r3, #44	; 0x2c
 8009358:	9310      	str	r3, [sp, #64]	; 0x40
 800935a:	1c53      	adds	r3, r2, #1
 800935c:	9321      	str	r3, [sp, #132]	; 0x84
 800935e:	7853      	ldrb	r3, [r2, #1]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1b9      	bne.n	80092d8 <_strtod_l+0x40>
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	9321      	str	r3, [sp, #132]	; 0x84
 8009368:	2300      	movs	r3, #0
 800936a:	9310      	str	r3, [sp, #64]	; 0x40
 800936c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1dc      	bne.n	800932c <_strtod_l+0x94>
 8009372:	0032      	movs	r2, r6
 8009374:	003b      	movs	r3, r7
 8009376:	e7e3      	b.n	8009340 <_strtod_l+0xa8>
 8009378:	2300      	movs	r3, #0
 800937a:	e7ed      	b.n	8009358 <_strtod_l+0xc0>
 800937c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800937e:	2a00      	cmp	r2, #0
 8009380:	d007      	beq.n	8009392 <_strtod_l+0xfa>
 8009382:	2135      	movs	r1, #53	; 0x35
 8009384:	a824      	add	r0, sp, #144	; 0x90
 8009386:	f002 fd54 	bl	800be32 <__copybits>
 800938a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800938c:	9805      	ldr	r0, [sp, #20]
 800938e:	f002 f90f 	bl	800b5b0 <_Bfree>
 8009392:	1e68      	subs	r0, r5, #1
 8009394:	2805      	cmp	r0, #5
 8009396:	d806      	bhi.n	80093a6 <_strtod_l+0x10e>
 8009398:	f7f6 fec8 	bl	800012c <__gnu_thumb1_case_uqi>
 800939c:	1c190b0e 	.word	0x1c190b0e
 80093a0:	030e      	.short	0x030e
 80093a2:	2700      	movs	r7, #0
 80093a4:	003e      	movs	r6, r7
 80093a6:	0723      	lsls	r3, r4, #28
 80093a8:	d5bd      	bpl.n	8009326 <_strtod_l+0x8e>
 80093aa:	2380      	movs	r3, #128	; 0x80
 80093ac:	061b      	lsls	r3, r3, #24
 80093ae:	431f      	orrs	r7, r3
 80093b0:	e7b9      	b.n	8009326 <_strtod_l+0x8e>
 80093b2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80093b4:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80093b6:	e7f6      	b.n	80093a6 <_strtod_l+0x10e>
 80093b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80093ba:	4a6a      	ldr	r2, [pc, #424]	; (8009564 <_strtod_l+0x2cc>)
 80093bc:	496a      	ldr	r1, [pc, #424]	; (8009568 <_strtod_l+0x2d0>)
 80093be:	401a      	ands	r2, r3
 80093c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093c2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80093c4:	185b      	adds	r3, r3, r1
 80093c6:	051b      	lsls	r3, r3, #20
 80093c8:	431a      	orrs	r2, r3
 80093ca:	0017      	movs	r7, r2
 80093cc:	e7eb      	b.n	80093a6 <_strtod_l+0x10e>
 80093ce:	2600      	movs	r6, #0
 80093d0:	4f66      	ldr	r7, [pc, #408]	; (800956c <_strtod_l+0x2d4>)
 80093d2:	e7e8      	b.n	80093a6 <_strtod_l+0x10e>
 80093d4:	2601      	movs	r6, #1
 80093d6:	4f66      	ldr	r7, [pc, #408]	; (8009570 <_strtod_l+0x2d8>)
 80093d8:	4276      	negs	r6, r6
 80093da:	e7e4      	b.n	80093a6 <_strtod_l+0x10e>
 80093dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	9221      	str	r2, [sp, #132]	; 0x84
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b30      	cmp	r3, #48	; 0x30
 80093e6:	d0f9      	beq.n	80093dc <_strtod_l+0x144>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d09c      	beq.n	8009326 <_strtod_l+0x8e>
 80093ec:	2301      	movs	r3, #1
 80093ee:	930a      	str	r3, [sp, #40]	; 0x28
 80093f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f2:	220a      	movs	r2, #10
 80093f4:	9311      	str	r3, [sp, #68]	; 0x44
 80093f6:	2300      	movs	r3, #0
 80093f8:	930e      	str	r3, [sp, #56]	; 0x38
 80093fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009400:	7805      	ldrb	r5, [r0, #0]
 8009402:	002b      	movs	r3, r5
 8009404:	3b30      	subs	r3, #48	; 0x30
 8009406:	b2d9      	uxtb	r1, r3
 8009408:	2909      	cmp	r1, #9
 800940a:	d927      	bls.n	800945c <_strtod_l+0x1c4>
 800940c:	0022      	movs	r2, r4
 800940e:	9907      	ldr	r1, [sp, #28]
 8009410:	f003 fb0a 	bl	800ca28 <strncmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	d033      	beq.n	8009480 <_strtod_l+0x1e8>
 8009418:	2000      	movs	r0, #0
 800941a:	002b      	movs	r3, r5
 800941c:	4684      	mov	ip, r0
 800941e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009420:	900c      	str	r0, [sp, #48]	; 0x30
 8009422:	9206      	str	r2, [sp, #24]
 8009424:	2220      	movs	r2, #32
 8009426:	0019      	movs	r1, r3
 8009428:	4391      	bics	r1, r2
 800942a:	000a      	movs	r2, r1
 800942c:	2100      	movs	r1, #0
 800942e:	9107      	str	r1, [sp, #28]
 8009430:	2a45      	cmp	r2, #69	; 0x45
 8009432:	d000      	beq.n	8009436 <_strtod_l+0x19e>
 8009434:	e0c5      	b.n	80095c2 <_strtod_l+0x32a>
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800943a:	4303      	orrs	r3, r0
 800943c:	4313      	orrs	r3, r2
 800943e:	428b      	cmp	r3, r1
 8009440:	d090      	beq.n	8009364 <_strtod_l+0xcc>
 8009442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009444:	9308      	str	r3, [sp, #32]
 8009446:	3301      	adds	r3, #1
 8009448:	9321      	str	r3, [sp, #132]	; 0x84
 800944a:	9b08      	ldr	r3, [sp, #32]
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	2b2b      	cmp	r3, #43	; 0x2b
 8009450:	d075      	beq.n	800953e <_strtod_l+0x2a6>
 8009452:	000c      	movs	r4, r1
 8009454:	2b2d      	cmp	r3, #45	; 0x2d
 8009456:	d178      	bne.n	800954a <_strtod_l+0x2b2>
 8009458:	2401      	movs	r4, #1
 800945a:	e071      	b.n	8009540 <_strtod_l+0x2a8>
 800945c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800945e:	2908      	cmp	r1, #8
 8009460:	dc09      	bgt.n	8009476 <_strtod_l+0x1de>
 8009462:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009464:	4351      	muls	r1, r2
 8009466:	185b      	adds	r3, r3, r1
 8009468:	930b      	str	r3, [sp, #44]	; 0x2c
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	3001      	adds	r0, #1
 800946e:	3301      	adds	r3, #1
 8009470:	9309      	str	r3, [sp, #36]	; 0x24
 8009472:	9021      	str	r0, [sp, #132]	; 0x84
 8009474:	e7c3      	b.n	80093fe <_strtod_l+0x166>
 8009476:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009478:	4351      	muls	r1, r2
 800947a:	185b      	adds	r3, r3, r1
 800947c:	930e      	str	r3, [sp, #56]	; 0x38
 800947e:	e7f4      	b.n	800946a <_strtod_l+0x1d2>
 8009480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009484:	191c      	adds	r4, r3, r4
 8009486:	9421      	str	r4, [sp, #132]	; 0x84
 8009488:	7823      	ldrb	r3, [r4, #0]
 800948a:	2a00      	cmp	r2, #0
 800948c:	d039      	beq.n	8009502 <_strtod_l+0x26a>
 800948e:	900c      	str	r0, [sp, #48]	; 0x30
 8009490:	9206      	str	r2, [sp, #24]
 8009492:	001a      	movs	r2, r3
 8009494:	3a30      	subs	r2, #48	; 0x30
 8009496:	2a09      	cmp	r2, #9
 8009498:	d912      	bls.n	80094c0 <_strtod_l+0x228>
 800949a:	2201      	movs	r2, #1
 800949c:	4694      	mov	ip, r2
 800949e:	e7c1      	b.n	8009424 <_strtod_l+0x18c>
 80094a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a2:	3001      	adds	r0, #1
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	9221      	str	r2, [sp, #132]	; 0x84
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b30      	cmp	r3, #48	; 0x30
 80094ac:	d0f8      	beq.n	80094a0 <_strtod_l+0x208>
 80094ae:	001a      	movs	r2, r3
 80094b0:	3a31      	subs	r2, #49	; 0x31
 80094b2:	2a08      	cmp	r2, #8
 80094b4:	d83e      	bhi.n	8009534 <_strtod_l+0x29c>
 80094b6:	900c      	str	r0, [sp, #48]	; 0x30
 80094b8:	2000      	movs	r0, #0
 80094ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094bc:	9006      	str	r0, [sp, #24]
 80094be:	9211      	str	r2, [sp, #68]	; 0x44
 80094c0:	001a      	movs	r2, r3
 80094c2:	9906      	ldr	r1, [sp, #24]
 80094c4:	1c44      	adds	r4, r0, #1
 80094c6:	3a30      	subs	r2, #48	; 0x30
 80094c8:	2b30      	cmp	r3, #48	; 0x30
 80094ca:	d013      	beq.n	80094f4 <_strtod_l+0x25c>
 80094cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ce:	191b      	adds	r3, r3, r4
 80094d0:	930c      	str	r3, [sp, #48]	; 0x30
 80094d2:	1844      	adds	r4, r0, r1
 80094d4:	000b      	movs	r3, r1
 80094d6:	210a      	movs	r1, #10
 80094d8:	429c      	cmp	r4, r3
 80094da:	d114      	bne.n	8009506 <_strtod_l+0x26e>
 80094dc:	9b06      	ldr	r3, [sp, #24]
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	1809      	adds	r1, r1, r0
 80094e2:	1818      	adds	r0, r3, r0
 80094e4:	2808      	cmp	r0, #8
 80094e6:	dc1c      	bgt.n	8009522 <_strtod_l+0x28a>
 80094e8:	230a      	movs	r3, #10
 80094ea:	2400      	movs	r4, #0
 80094ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094ee:	4343      	muls	r3, r0
 80094f0:	18d3      	adds	r3, r2, r3
 80094f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80094f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f6:	0020      	movs	r0, r4
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	9221      	str	r2, [sp, #132]	; 0x84
 80094fc:	785b      	ldrb	r3, [r3, #1]
 80094fe:	9106      	str	r1, [sp, #24]
 8009500:	e7c7      	b.n	8009492 <_strtod_l+0x1fa>
 8009502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009504:	e7d1      	b.n	80094aa <_strtod_l+0x212>
 8009506:	2b08      	cmp	r3, #8
 8009508:	dc04      	bgt.n	8009514 <_strtod_l+0x27c>
 800950a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800950c:	434d      	muls	r5, r1
 800950e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009510:	3301      	adds	r3, #1
 8009512:	e7e1      	b.n	80094d8 <_strtod_l+0x240>
 8009514:	1c5d      	adds	r5, r3, #1
 8009516:	2d10      	cmp	r5, #16
 8009518:	dcfa      	bgt.n	8009510 <_strtod_l+0x278>
 800951a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800951c:	434d      	muls	r5, r1
 800951e:	950e      	str	r5, [sp, #56]	; 0x38
 8009520:	e7f6      	b.n	8009510 <_strtod_l+0x278>
 8009522:	2400      	movs	r4, #0
 8009524:	2910      	cmp	r1, #16
 8009526:	dce5      	bgt.n	80094f4 <_strtod_l+0x25c>
 8009528:	230a      	movs	r3, #10
 800952a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800952c:	4343      	muls	r3, r0
 800952e:	18d3      	adds	r3, r2, r3
 8009530:	930e      	str	r3, [sp, #56]	; 0x38
 8009532:	e7df      	b.n	80094f4 <_strtod_l+0x25c>
 8009534:	2200      	movs	r2, #0
 8009536:	920c      	str	r2, [sp, #48]	; 0x30
 8009538:	9206      	str	r2, [sp, #24]
 800953a:	3201      	adds	r2, #1
 800953c:	e7ae      	b.n	800949c <_strtod_l+0x204>
 800953e:	2400      	movs	r4, #0
 8009540:	9b08      	ldr	r3, [sp, #32]
 8009542:	3302      	adds	r3, #2
 8009544:	9321      	str	r3, [sp, #132]	; 0x84
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	789b      	ldrb	r3, [r3, #2]
 800954a:	001a      	movs	r2, r3
 800954c:	3a30      	subs	r2, #48	; 0x30
 800954e:	2a09      	cmp	r2, #9
 8009550:	d914      	bls.n	800957c <_strtod_l+0x2e4>
 8009552:	9a08      	ldr	r2, [sp, #32]
 8009554:	9221      	str	r2, [sp, #132]	; 0x84
 8009556:	2200      	movs	r2, #0
 8009558:	e032      	b.n	80095c0 <_strtod_l+0x328>
 800955a:	46c0      	nop			; (mov r8, r8)
 800955c:	0800daa0 	.word	0x0800daa0
 8009560:	0800d850 	.word	0x0800d850
 8009564:	ffefffff 	.word	0xffefffff
 8009568:	00000433 	.word	0x00000433
 800956c:	7ff00000 	.word	0x7ff00000
 8009570:	7fffffff 	.word	0x7fffffff
 8009574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	9221      	str	r2, [sp, #132]	; 0x84
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b30      	cmp	r3, #48	; 0x30
 800957e:	d0f9      	beq.n	8009574 <_strtod_l+0x2dc>
 8009580:	2200      	movs	r2, #0
 8009582:	9207      	str	r2, [sp, #28]
 8009584:	001a      	movs	r2, r3
 8009586:	3a31      	subs	r2, #49	; 0x31
 8009588:	2a08      	cmp	r2, #8
 800958a:	d81a      	bhi.n	80095c2 <_strtod_l+0x32a>
 800958c:	3b30      	subs	r3, #48	; 0x30
 800958e:	001a      	movs	r2, r3
 8009590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009592:	9307      	str	r3, [sp, #28]
 8009594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009596:	1c59      	adds	r1, r3, #1
 8009598:	9121      	str	r1, [sp, #132]	; 0x84
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	001d      	movs	r5, r3
 800959e:	3d30      	subs	r5, #48	; 0x30
 80095a0:	2d09      	cmp	r5, #9
 80095a2:	d939      	bls.n	8009618 <_strtod_l+0x380>
 80095a4:	9d07      	ldr	r5, [sp, #28]
 80095a6:	1b49      	subs	r1, r1, r5
 80095a8:	4daf      	ldr	r5, [pc, #700]	; (8009868 <_strtod_l+0x5d0>)
 80095aa:	9507      	str	r5, [sp, #28]
 80095ac:	2908      	cmp	r1, #8
 80095ae:	dc03      	bgt.n	80095b8 <_strtod_l+0x320>
 80095b0:	9207      	str	r2, [sp, #28]
 80095b2:	42aa      	cmp	r2, r5
 80095b4:	dd00      	ble.n	80095b8 <_strtod_l+0x320>
 80095b6:	9507      	str	r5, [sp, #28]
 80095b8:	2c00      	cmp	r4, #0
 80095ba:	d002      	beq.n	80095c2 <_strtod_l+0x32a>
 80095bc:	9a07      	ldr	r2, [sp, #28]
 80095be:	4252      	negs	r2, r2
 80095c0:	9207      	str	r2, [sp, #28]
 80095c2:	9a06      	ldr	r2, [sp, #24]
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	d14b      	bne.n	8009660 <_strtod_l+0x3c8>
 80095c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ca:	4310      	orrs	r0, r2
 80095cc:	d000      	beq.n	80095d0 <_strtod_l+0x338>
 80095ce:	e6aa      	b.n	8009326 <_strtod_l+0x8e>
 80095d0:	4662      	mov	r2, ip
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	d000      	beq.n	80095d8 <_strtod_l+0x340>
 80095d6:	e6c5      	b.n	8009364 <_strtod_l+0xcc>
 80095d8:	2b69      	cmp	r3, #105	; 0x69
 80095da:	d025      	beq.n	8009628 <_strtod_l+0x390>
 80095dc:	dc21      	bgt.n	8009622 <_strtod_l+0x38a>
 80095de:	2b49      	cmp	r3, #73	; 0x49
 80095e0:	d022      	beq.n	8009628 <_strtod_l+0x390>
 80095e2:	2b4e      	cmp	r3, #78	; 0x4e
 80095e4:	d000      	beq.n	80095e8 <_strtod_l+0x350>
 80095e6:	e6bd      	b.n	8009364 <_strtod_l+0xcc>
 80095e8:	49a0      	ldr	r1, [pc, #640]	; (800986c <_strtod_l+0x5d4>)
 80095ea:	a821      	add	r0, sp, #132	; 0x84
 80095ec:	f001 fe9a 	bl	800b324 <__match>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d100      	bne.n	80095f6 <_strtod_l+0x35e>
 80095f4:	e6b6      	b.n	8009364 <_strtod_l+0xcc>
 80095f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b28      	cmp	r3, #40	; 0x28
 80095fc:	d12a      	bne.n	8009654 <_strtod_l+0x3bc>
 80095fe:	499c      	ldr	r1, [pc, #624]	; (8009870 <_strtod_l+0x5d8>)
 8009600:	aa24      	add	r2, sp, #144	; 0x90
 8009602:	a821      	add	r0, sp, #132	; 0x84
 8009604:	f001 fea2 	bl	800b34c <__hexnan>
 8009608:	2805      	cmp	r0, #5
 800960a:	d123      	bne.n	8009654 <_strtod_l+0x3bc>
 800960c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800960e:	4a99      	ldr	r2, [pc, #612]	; (8009874 <_strtod_l+0x5dc>)
 8009610:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009612:	431a      	orrs	r2, r3
 8009614:	0017      	movs	r7, r2
 8009616:	e686      	b.n	8009326 <_strtod_l+0x8e>
 8009618:	210a      	movs	r1, #10
 800961a:	434a      	muls	r2, r1
 800961c:	18d2      	adds	r2, r2, r3
 800961e:	3a30      	subs	r2, #48	; 0x30
 8009620:	e7b8      	b.n	8009594 <_strtod_l+0x2fc>
 8009622:	2b6e      	cmp	r3, #110	; 0x6e
 8009624:	d0e0      	beq.n	80095e8 <_strtod_l+0x350>
 8009626:	e69d      	b.n	8009364 <_strtod_l+0xcc>
 8009628:	4993      	ldr	r1, [pc, #588]	; (8009878 <_strtod_l+0x5e0>)
 800962a:	a821      	add	r0, sp, #132	; 0x84
 800962c:	f001 fe7a 	bl	800b324 <__match>
 8009630:	2800      	cmp	r0, #0
 8009632:	d100      	bne.n	8009636 <_strtod_l+0x39e>
 8009634:	e696      	b.n	8009364 <_strtod_l+0xcc>
 8009636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009638:	4990      	ldr	r1, [pc, #576]	; (800987c <_strtod_l+0x5e4>)
 800963a:	3b01      	subs	r3, #1
 800963c:	a821      	add	r0, sp, #132	; 0x84
 800963e:	9321      	str	r3, [sp, #132]	; 0x84
 8009640:	f001 fe70 	bl	800b324 <__match>
 8009644:	2800      	cmp	r0, #0
 8009646:	d102      	bne.n	800964e <_strtod_l+0x3b6>
 8009648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800964a:	3301      	adds	r3, #1
 800964c:	9321      	str	r3, [sp, #132]	; 0x84
 800964e:	2600      	movs	r6, #0
 8009650:	4f88      	ldr	r7, [pc, #544]	; (8009874 <_strtod_l+0x5dc>)
 8009652:	e668      	b.n	8009326 <_strtod_l+0x8e>
 8009654:	488a      	ldr	r0, [pc, #552]	; (8009880 <_strtod_l+0x5e8>)
 8009656:	f003 f993 	bl	800c980 <nan>
 800965a:	0006      	movs	r6, r0
 800965c:	000f      	movs	r7, r1
 800965e:	e662      	b.n	8009326 <_strtod_l+0x8e>
 8009660:	9b07      	ldr	r3, [sp, #28]
 8009662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	930a      	str	r3, [sp, #40]	; 0x28
 8009668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <_strtod_l+0x3da>
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	9309      	str	r3, [sp, #36]	; 0x24
 8009672:	9c06      	ldr	r4, [sp, #24]
 8009674:	2c10      	cmp	r4, #16
 8009676:	dd00      	ble.n	800967a <_strtod_l+0x3e2>
 8009678:	2410      	movs	r4, #16
 800967a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800967c:	f7f8 fd80 	bl	8002180 <__aeabi_ui2d>
 8009680:	9b06      	ldr	r3, [sp, #24]
 8009682:	0006      	movs	r6, r0
 8009684:	000f      	movs	r7, r1
 8009686:	2b09      	cmp	r3, #9
 8009688:	dd15      	ble.n	80096b6 <_strtod_l+0x41e>
 800968a:	0022      	movs	r2, r4
 800968c:	4b7d      	ldr	r3, [pc, #500]	; (8009884 <_strtod_l+0x5ec>)
 800968e:	3a09      	subs	r2, #9
 8009690:	00d2      	lsls	r2, r2, #3
 8009692:	189b      	adds	r3, r3, r2
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f7f7 fef0 	bl	800147c <__aeabi_dmul>
 800969c:	0006      	movs	r6, r0
 800969e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80096a0:	000f      	movs	r7, r1
 80096a2:	f7f8 fd6d 	bl	8002180 <__aeabi_ui2d>
 80096a6:	0002      	movs	r2, r0
 80096a8:	000b      	movs	r3, r1
 80096aa:	0030      	movs	r0, r6
 80096ac:	0039      	movs	r1, r7
 80096ae:	f7f6 ff75 	bl	800059c <__aeabi_dadd>
 80096b2:	0006      	movs	r6, r0
 80096b4:	000f      	movs	r7, r1
 80096b6:	9b06      	ldr	r3, [sp, #24]
 80096b8:	2b0f      	cmp	r3, #15
 80096ba:	dc39      	bgt.n	8009730 <_strtod_l+0x498>
 80096bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d100      	bne.n	80096c4 <_strtod_l+0x42c>
 80096c2:	e630      	b.n	8009326 <_strtod_l+0x8e>
 80096c4:	dd24      	ble.n	8009710 <_strtod_l+0x478>
 80096c6:	2b16      	cmp	r3, #22
 80096c8:	dc09      	bgt.n	80096de <_strtod_l+0x446>
 80096ca:	00dd      	lsls	r5, r3, #3
 80096cc:	0032      	movs	r2, r6
 80096ce:	003b      	movs	r3, r7
 80096d0:	4c6c      	ldr	r4, [pc, #432]	; (8009884 <_strtod_l+0x5ec>)
 80096d2:	1964      	adds	r4, r4, r5
 80096d4:	6820      	ldr	r0, [r4, #0]
 80096d6:	6861      	ldr	r1, [r4, #4]
 80096d8:	f7f7 fed0 	bl	800147c <__aeabi_dmul>
 80096dc:	e7bd      	b.n	800965a <_strtod_l+0x3c2>
 80096de:	2325      	movs	r3, #37	; 0x25
 80096e0:	9a06      	ldr	r2, [sp, #24]
 80096e2:	1a9b      	subs	r3, r3, r2
 80096e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e6:	4293      	cmp	r3, r2
 80096e8:	db22      	blt.n	8009730 <_strtod_l+0x498>
 80096ea:	240f      	movs	r4, #15
 80096ec:	9b06      	ldr	r3, [sp, #24]
 80096ee:	4d65      	ldr	r5, [pc, #404]	; (8009884 <_strtod_l+0x5ec>)
 80096f0:	1ae4      	subs	r4, r4, r3
 80096f2:	00e1      	lsls	r1, r4, #3
 80096f4:	1869      	adds	r1, r5, r1
 80096f6:	0032      	movs	r2, r6
 80096f8:	6808      	ldr	r0, [r1, #0]
 80096fa:	6849      	ldr	r1, [r1, #4]
 80096fc:	003b      	movs	r3, r7
 80096fe:	f7f7 febd 	bl	800147c <__aeabi_dmul>
 8009702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009704:	1b1c      	subs	r4, r3, r4
 8009706:	00e4      	lsls	r4, r4, #3
 8009708:	192c      	adds	r4, r5, r4
 800970a:	6822      	ldr	r2, [r4, #0]
 800970c:	6863      	ldr	r3, [r4, #4]
 800970e:	e7e3      	b.n	80096d8 <_strtod_l+0x440>
 8009710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009712:	3316      	adds	r3, #22
 8009714:	db0c      	blt.n	8009730 <_strtod_l+0x498>
 8009716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009718:	9a07      	ldr	r2, [sp, #28]
 800971a:	0030      	movs	r0, r6
 800971c:	1a9a      	subs	r2, r3, r2
 800971e:	4b59      	ldr	r3, [pc, #356]	; (8009884 <_strtod_l+0x5ec>)
 8009720:	00d2      	lsls	r2, r2, #3
 8009722:	189b      	adds	r3, r3, r2
 8009724:	0039      	movs	r1, r7
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f7f7 faa1 	bl	8000c70 <__aeabi_ddiv>
 800972e:	e794      	b.n	800965a <_strtod_l+0x3c2>
 8009730:	9b06      	ldr	r3, [sp, #24]
 8009732:	1b1c      	subs	r4, r3, r4
 8009734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009736:	18e4      	adds	r4, r4, r3
 8009738:	2c00      	cmp	r4, #0
 800973a:	dd70      	ble.n	800981e <_strtod_l+0x586>
 800973c:	230f      	movs	r3, #15
 800973e:	0021      	movs	r1, r4
 8009740:	4019      	ands	r1, r3
 8009742:	421c      	tst	r4, r3
 8009744:	d00a      	beq.n	800975c <_strtod_l+0x4c4>
 8009746:	00cb      	lsls	r3, r1, #3
 8009748:	494e      	ldr	r1, [pc, #312]	; (8009884 <_strtod_l+0x5ec>)
 800974a:	0032      	movs	r2, r6
 800974c:	18c9      	adds	r1, r1, r3
 800974e:	6808      	ldr	r0, [r1, #0]
 8009750:	6849      	ldr	r1, [r1, #4]
 8009752:	003b      	movs	r3, r7
 8009754:	f7f7 fe92 	bl	800147c <__aeabi_dmul>
 8009758:	0006      	movs	r6, r0
 800975a:	000f      	movs	r7, r1
 800975c:	230f      	movs	r3, #15
 800975e:	439c      	bics	r4, r3
 8009760:	d048      	beq.n	80097f4 <_strtod_l+0x55c>
 8009762:	3326      	adds	r3, #38	; 0x26
 8009764:	33ff      	adds	r3, #255	; 0xff
 8009766:	429c      	cmp	r4, r3
 8009768:	dd22      	ble.n	80097b0 <_strtod_l+0x518>
 800976a:	2300      	movs	r3, #0
 800976c:	9306      	str	r3, [sp, #24]
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	930b      	str	r3, [sp, #44]	; 0x2c
 8009772:	9309      	str	r3, [sp, #36]	; 0x24
 8009774:	2322      	movs	r3, #34	; 0x22
 8009776:	2600      	movs	r6, #0
 8009778:	9a05      	ldr	r2, [sp, #20]
 800977a:	4f3e      	ldr	r7, [pc, #248]	; (8009874 <_strtod_l+0x5dc>)
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009780:	42b3      	cmp	r3, r6
 8009782:	d100      	bne.n	8009786 <_strtod_l+0x4ee>
 8009784:	e5cf      	b.n	8009326 <_strtod_l+0x8e>
 8009786:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009788:	9805      	ldr	r0, [sp, #20]
 800978a:	f001 ff11 	bl	800b5b0 <_Bfree>
 800978e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009790:	9805      	ldr	r0, [sp, #20]
 8009792:	f001 ff0d 	bl	800b5b0 <_Bfree>
 8009796:	9907      	ldr	r1, [sp, #28]
 8009798:	9805      	ldr	r0, [sp, #20]
 800979a:	f001 ff09 	bl	800b5b0 <_Bfree>
 800979e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097a0:	9805      	ldr	r0, [sp, #20]
 80097a2:	f001 ff05 	bl	800b5b0 <_Bfree>
 80097a6:	9906      	ldr	r1, [sp, #24]
 80097a8:	9805      	ldr	r0, [sp, #20]
 80097aa:	f001 ff01 	bl	800b5b0 <_Bfree>
 80097ae:	e5ba      	b.n	8009326 <_strtod_l+0x8e>
 80097b0:	2300      	movs	r3, #0
 80097b2:	0030      	movs	r0, r6
 80097b4:	0039      	movs	r1, r7
 80097b6:	001d      	movs	r5, r3
 80097b8:	1124      	asrs	r4, r4, #4
 80097ba:	2c01      	cmp	r4, #1
 80097bc:	dc1d      	bgt.n	80097fa <_strtod_l+0x562>
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <_strtod_l+0x52e>
 80097c2:	0006      	movs	r6, r0
 80097c4:	000f      	movs	r7, r1
 80097c6:	4b30      	ldr	r3, [pc, #192]	; (8009888 <_strtod_l+0x5f0>)
 80097c8:	00ed      	lsls	r5, r5, #3
 80097ca:	18ff      	adds	r7, r7, r3
 80097cc:	4b2f      	ldr	r3, [pc, #188]	; (800988c <_strtod_l+0x5f4>)
 80097ce:	0032      	movs	r2, r6
 80097d0:	195d      	adds	r5, r3, r5
 80097d2:	6828      	ldr	r0, [r5, #0]
 80097d4:	6869      	ldr	r1, [r5, #4]
 80097d6:	003b      	movs	r3, r7
 80097d8:	f7f7 fe50 	bl	800147c <__aeabi_dmul>
 80097dc:	4b25      	ldr	r3, [pc, #148]	; (8009874 <_strtod_l+0x5dc>)
 80097de:	4a2c      	ldr	r2, [pc, #176]	; (8009890 <_strtod_l+0x5f8>)
 80097e0:	0006      	movs	r6, r0
 80097e2:	400b      	ands	r3, r1
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d8c0      	bhi.n	800976a <_strtod_l+0x4d2>
 80097e8:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <_strtod_l+0x5fc>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d913      	bls.n	8009816 <_strtod_l+0x57e>
 80097ee:	2601      	movs	r6, #1
 80097f0:	4f29      	ldr	r7, [pc, #164]	; (8009898 <_strtod_l+0x600>)
 80097f2:	4276      	negs	r6, r6
 80097f4:	2300      	movs	r3, #0
 80097f6:	9308      	str	r3, [sp, #32]
 80097f8:	e087      	b.n	800990a <_strtod_l+0x672>
 80097fa:	2201      	movs	r2, #1
 80097fc:	4214      	tst	r4, r2
 80097fe:	d007      	beq.n	8009810 <_strtod_l+0x578>
 8009800:	4a22      	ldr	r2, [pc, #136]	; (800988c <_strtod_l+0x5f4>)
 8009802:	00eb      	lsls	r3, r5, #3
 8009804:	189b      	adds	r3, r3, r2
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f7f7 fe37 	bl	800147c <__aeabi_dmul>
 800980e:	2301      	movs	r3, #1
 8009810:	3501      	adds	r5, #1
 8009812:	1064      	asrs	r4, r4, #1
 8009814:	e7d1      	b.n	80097ba <_strtod_l+0x522>
 8009816:	23d4      	movs	r3, #212	; 0xd4
 8009818:	049b      	lsls	r3, r3, #18
 800981a:	18cf      	adds	r7, r1, r3
 800981c:	e7ea      	b.n	80097f4 <_strtod_l+0x55c>
 800981e:	2c00      	cmp	r4, #0
 8009820:	d0e8      	beq.n	80097f4 <_strtod_l+0x55c>
 8009822:	4264      	negs	r4, r4
 8009824:	220f      	movs	r2, #15
 8009826:	0023      	movs	r3, r4
 8009828:	4013      	ands	r3, r2
 800982a:	4214      	tst	r4, r2
 800982c:	d00a      	beq.n	8009844 <_strtod_l+0x5ac>
 800982e:	00da      	lsls	r2, r3, #3
 8009830:	4b14      	ldr	r3, [pc, #80]	; (8009884 <_strtod_l+0x5ec>)
 8009832:	0030      	movs	r0, r6
 8009834:	189b      	adds	r3, r3, r2
 8009836:	0039      	movs	r1, r7
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f7f7 fa18 	bl	8000c70 <__aeabi_ddiv>
 8009840:	0006      	movs	r6, r0
 8009842:	000f      	movs	r7, r1
 8009844:	1124      	asrs	r4, r4, #4
 8009846:	d0d5      	beq.n	80097f4 <_strtod_l+0x55c>
 8009848:	2c1f      	cmp	r4, #31
 800984a:	dd27      	ble.n	800989c <_strtod_l+0x604>
 800984c:	2300      	movs	r3, #0
 800984e:	9306      	str	r3, [sp, #24]
 8009850:	9307      	str	r3, [sp, #28]
 8009852:	930b      	str	r3, [sp, #44]	; 0x2c
 8009854:	9309      	str	r3, [sp, #36]	; 0x24
 8009856:	2322      	movs	r3, #34	; 0x22
 8009858:	9a05      	ldr	r2, [sp, #20]
 800985a:	2600      	movs	r6, #0
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009860:	2700      	movs	r7, #0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d18f      	bne.n	8009786 <_strtod_l+0x4ee>
 8009866:	e55e      	b.n	8009326 <_strtod_l+0x8e>
 8009868:	00004e1f 	.word	0x00004e1f
 800986c:	0800d825 	.word	0x0800d825
 8009870:	0800d864 	.word	0x0800d864
 8009874:	7ff00000 	.word	0x7ff00000
 8009878:	0800d81d 	.word	0x0800d81d
 800987c:	0800d9a4 	.word	0x0800d9a4
 8009880:	0800dc7b 	.word	0x0800dc7b
 8009884:	0800db40 	.word	0x0800db40
 8009888:	fcb00000 	.word	0xfcb00000
 800988c:	0800db18 	.word	0x0800db18
 8009890:	7ca00000 	.word	0x7ca00000
 8009894:	7c900000 	.word	0x7c900000
 8009898:	7fefffff 	.word	0x7fefffff
 800989c:	2310      	movs	r3, #16
 800989e:	0022      	movs	r2, r4
 80098a0:	401a      	ands	r2, r3
 80098a2:	9208      	str	r2, [sp, #32]
 80098a4:	421c      	tst	r4, r3
 80098a6:	d001      	beq.n	80098ac <_strtod_l+0x614>
 80098a8:	335a      	adds	r3, #90	; 0x5a
 80098aa:	9308      	str	r3, [sp, #32]
 80098ac:	0030      	movs	r0, r6
 80098ae:	0039      	movs	r1, r7
 80098b0:	2300      	movs	r3, #0
 80098b2:	4dca      	ldr	r5, [pc, #808]	; (8009bdc <_strtod_l+0x944>)
 80098b4:	2201      	movs	r2, #1
 80098b6:	4214      	tst	r4, r2
 80098b8:	d004      	beq.n	80098c4 <_strtod_l+0x62c>
 80098ba:	682a      	ldr	r2, [r5, #0]
 80098bc:	686b      	ldr	r3, [r5, #4]
 80098be:	f7f7 fddd 	bl	800147c <__aeabi_dmul>
 80098c2:	2301      	movs	r3, #1
 80098c4:	1064      	asrs	r4, r4, #1
 80098c6:	3508      	adds	r5, #8
 80098c8:	2c00      	cmp	r4, #0
 80098ca:	d1f3      	bne.n	80098b4 <_strtod_l+0x61c>
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <_strtod_l+0x63c>
 80098d0:	0006      	movs	r6, r0
 80098d2:	000f      	movs	r7, r1
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00f      	beq.n	80098fa <_strtod_l+0x662>
 80098da:	236b      	movs	r3, #107	; 0x6b
 80098dc:	0079      	lsls	r1, r7, #1
 80098de:	0d49      	lsrs	r1, r1, #21
 80098e0:	003a      	movs	r2, r7
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dd08      	ble.n	80098fa <_strtod_l+0x662>
 80098e8:	2b1f      	cmp	r3, #31
 80098ea:	dc00      	bgt.n	80098ee <_strtod_l+0x656>
 80098ec:	e126      	b.n	8009b3c <_strtod_l+0x8a4>
 80098ee:	2600      	movs	r6, #0
 80098f0:	2b34      	cmp	r3, #52	; 0x34
 80098f2:	dc00      	bgt.n	80098f6 <_strtod_l+0x65e>
 80098f4:	e11b      	b.n	8009b2e <_strtod_l+0x896>
 80098f6:	27dc      	movs	r7, #220	; 0xdc
 80098f8:	04bf      	lsls	r7, r7, #18
 80098fa:	2200      	movs	r2, #0
 80098fc:	2300      	movs	r3, #0
 80098fe:	0030      	movs	r0, r6
 8009900:	0039      	movs	r1, r7
 8009902:	f7f6 fdad 	bl	8000460 <__aeabi_dcmpeq>
 8009906:	2800      	cmp	r0, #0
 8009908:	d1a0      	bne.n	800984c <_strtod_l+0x5b4>
 800990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009912:	9b06      	ldr	r3, [sp, #24]
 8009914:	9805      	ldr	r0, [sp, #20]
 8009916:	f001 feb3 	bl	800b680 <__s2b>
 800991a:	900b      	str	r0, [sp, #44]	; 0x2c
 800991c:	2800      	cmp	r0, #0
 800991e:	d100      	bne.n	8009922 <_strtod_l+0x68a>
 8009920:	e723      	b.n	800976a <_strtod_l+0x4d2>
 8009922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009924:	9907      	ldr	r1, [sp, #28]
 8009926:	17da      	asrs	r2, r3, #31
 8009928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800992a:	1a5b      	subs	r3, r3, r1
 800992c:	401a      	ands	r2, r3
 800992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009930:	9215      	str	r2, [sp, #84]	; 0x54
 8009932:	43db      	mvns	r3, r3
 8009934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009936:	17db      	asrs	r3, r3, #31
 8009938:	401a      	ands	r2, r3
 800993a:	2300      	movs	r3, #0
 800993c:	921c      	str	r2, [sp, #112]	; 0x70
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	9307      	str	r3, [sp, #28]
 8009942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	6859      	ldr	r1, [r3, #4]
 8009948:	f001 fdee 	bl	800b528 <_Balloc>
 800994c:	9009      	str	r0, [sp, #36]	; 0x24
 800994e:	2800      	cmp	r0, #0
 8009950:	d100      	bne.n	8009954 <_strtod_l+0x6bc>
 8009952:	e70f      	b.n	8009774 <_strtod_l+0x4dc>
 8009954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	310c      	adds	r1, #12
 800995c:	1c9a      	adds	r2, r3, #2
 800995e:	0092      	lsls	r2, r2, #2
 8009960:	300c      	adds	r0, #12
 8009962:	930c      	str	r3, [sp, #48]	; 0x30
 8009964:	f001 fdd7 	bl	800b516 <memcpy>
 8009968:	ab24      	add	r3, sp, #144	; 0x90
 800996a:	9301      	str	r3, [sp, #4]
 800996c:	ab23      	add	r3, sp, #140	; 0x8c
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	0032      	movs	r2, r6
 8009972:	003b      	movs	r3, r7
 8009974:	9805      	ldr	r0, [sp, #20]
 8009976:	960e      	str	r6, [sp, #56]	; 0x38
 8009978:	970f      	str	r7, [sp, #60]	; 0x3c
 800997a:	f002 f9cf 	bl	800bd1c <__d2b>
 800997e:	9022      	str	r0, [sp, #136]	; 0x88
 8009980:	2800      	cmp	r0, #0
 8009982:	d100      	bne.n	8009986 <_strtod_l+0x6ee>
 8009984:	e6f6      	b.n	8009774 <_strtod_l+0x4dc>
 8009986:	2101      	movs	r1, #1
 8009988:	9805      	ldr	r0, [sp, #20]
 800998a:	f001 ff0d 	bl	800b7a8 <__i2b>
 800998e:	9007      	str	r0, [sp, #28]
 8009990:	2800      	cmp	r0, #0
 8009992:	d100      	bne.n	8009996 <_strtod_l+0x6fe>
 8009994:	e6ee      	b.n	8009774 <_strtod_l+0x4dc>
 8009996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009998:	2b00      	cmp	r3, #0
 800999a:	da00      	bge.n	800999e <_strtod_l+0x706>
 800999c:	e0d3      	b.n	8009b46 <_strtod_l+0x8ae>
 800999e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80099a0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80099a2:	189d      	adds	r5, r3, r2
 80099a4:	9908      	ldr	r1, [sp, #32]
 80099a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099a8:	1a5b      	subs	r3, r3, r1
 80099aa:	2136      	movs	r1, #54	; 0x36
 80099ac:	189b      	adds	r3, r3, r2
 80099ae:	1a8a      	subs	r2, r1, r2
 80099b0:	498b      	ldr	r1, [pc, #556]	; (8009be0 <_strtod_l+0x948>)
 80099b2:	3b01      	subs	r3, #1
 80099b4:	2001      	movs	r0, #1
 80099b6:	428b      	cmp	r3, r1
 80099b8:	db00      	blt.n	80099bc <_strtod_l+0x724>
 80099ba:	e0cf      	b.n	8009b5c <_strtod_l+0x8c4>
 80099bc:	1ac9      	subs	r1, r1, r3
 80099be:	1a52      	subs	r2, r2, r1
 80099c0:	291f      	cmp	r1, #31
 80099c2:	dd00      	ble.n	80099c6 <_strtod_l+0x72e>
 80099c4:	e0c3      	b.n	8009b4e <_strtod_l+0x8b6>
 80099c6:	4088      	lsls	r0, r1
 80099c8:	2300      	movs	r3, #0
 80099ca:	9014      	str	r0, [sp, #80]	; 0x50
 80099cc:	9312      	str	r3, [sp, #72]	; 0x48
 80099ce:	18ab      	adds	r3, r5, r2
 80099d0:	930c      	str	r3, [sp, #48]	; 0x30
 80099d2:	18a4      	adds	r4, r4, r2
 80099d4:	9b08      	ldr	r3, [sp, #32]
 80099d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d8:	191c      	adds	r4, r3, r4
 80099da:	002b      	movs	r3, r5
 80099dc:	4295      	cmp	r5, r2
 80099de:	dd00      	ble.n	80099e2 <_strtod_l+0x74a>
 80099e0:	0013      	movs	r3, r2
 80099e2:	42a3      	cmp	r3, r4
 80099e4:	dd00      	ble.n	80099e8 <_strtod_l+0x750>
 80099e6:	0023      	movs	r3, r4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dd04      	ble.n	80099f6 <_strtod_l+0x75e>
 80099ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099ee:	1ae4      	subs	r4, r4, r3
 80099f0:	1ad2      	subs	r2, r2, r3
 80099f2:	920c      	str	r2, [sp, #48]	; 0x30
 80099f4:	1aed      	subs	r5, r5, r3
 80099f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dd17      	ble.n	8009a2c <_strtod_l+0x794>
 80099fc:	001a      	movs	r2, r3
 80099fe:	9907      	ldr	r1, [sp, #28]
 8009a00:	9805      	ldr	r0, [sp, #20]
 8009a02:	f001 ff97 	bl	800b934 <__pow5mult>
 8009a06:	9007      	str	r0, [sp, #28]
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d100      	bne.n	8009a0e <_strtod_l+0x776>
 8009a0c:	e6b2      	b.n	8009774 <_strtod_l+0x4dc>
 8009a0e:	0001      	movs	r1, r0
 8009a10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a12:	9805      	ldr	r0, [sp, #20]
 8009a14:	f001 fede 	bl	800b7d4 <__multiply>
 8009a18:	9011      	str	r0, [sp, #68]	; 0x44
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d100      	bne.n	8009a20 <_strtod_l+0x788>
 8009a1e:	e6a9      	b.n	8009774 <_strtod_l+0x4dc>
 8009a20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a22:	9805      	ldr	r0, [sp, #20]
 8009a24:	f001 fdc4 	bl	800b5b0 <_Bfree>
 8009a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a2a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd00      	ble.n	8009a34 <_strtod_l+0x79c>
 8009a32:	e096      	b.n	8009b62 <_strtod_l+0x8ca>
 8009a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dd08      	ble.n	8009a4c <_strtod_l+0x7b4>
 8009a3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	f001 ff78 	bl	800b934 <__pow5mult>
 8009a44:	9009      	str	r0, [sp, #36]	; 0x24
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d100      	bne.n	8009a4c <_strtod_l+0x7b4>
 8009a4a:	e693      	b.n	8009774 <_strtod_l+0x4dc>
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	dd08      	ble.n	8009a62 <_strtod_l+0x7ca>
 8009a50:	0022      	movs	r2, r4
 8009a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a54:	9805      	ldr	r0, [sp, #20]
 8009a56:	f001 ffc9 	bl	800b9ec <__lshift>
 8009a5a:	9009      	str	r0, [sp, #36]	; 0x24
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d100      	bne.n	8009a62 <_strtod_l+0x7ca>
 8009a60:	e688      	b.n	8009774 <_strtod_l+0x4dc>
 8009a62:	2d00      	cmp	r5, #0
 8009a64:	dd08      	ble.n	8009a78 <_strtod_l+0x7e0>
 8009a66:	002a      	movs	r2, r5
 8009a68:	9907      	ldr	r1, [sp, #28]
 8009a6a:	9805      	ldr	r0, [sp, #20]
 8009a6c:	f001 ffbe 	bl	800b9ec <__lshift>
 8009a70:	9007      	str	r0, [sp, #28]
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d100      	bne.n	8009a78 <_strtod_l+0x7e0>
 8009a76:	e67d      	b.n	8009774 <_strtod_l+0x4dc>
 8009a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a7c:	9805      	ldr	r0, [sp, #20]
 8009a7e:	f002 f841 	bl	800bb04 <__mdiff>
 8009a82:	9006      	str	r0, [sp, #24]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d100      	bne.n	8009a8a <_strtod_l+0x7f2>
 8009a88:	e674      	b.n	8009774 <_strtod_l+0x4dc>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	68c3      	ldr	r3, [r0, #12]
 8009a8e:	9907      	ldr	r1, [sp, #28]
 8009a90:	60c2      	str	r2, [r0, #12]
 8009a92:	9311      	str	r3, [sp, #68]	; 0x44
 8009a94:	f002 f81a 	bl	800bacc <__mcmp>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	da6c      	bge.n	8009b76 <_strtod_l+0x8de>
 8009a9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a9e:	4333      	orrs	r3, r6
 8009aa0:	d000      	beq.n	8009aa4 <_strtod_l+0x80c>
 8009aa2:	e097      	b.n	8009bd4 <_strtod_l+0x93c>
 8009aa4:	033b      	lsls	r3, r7, #12
 8009aa6:	d000      	beq.n	8009aaa <_strtod_l+0x812>
 8009aa8:	e094      	b.n	8009bd4 <_strtod_l+0x93c>
 8009aaa:	22d6      	movs	r2, #214	; 0xd6
 8009aac:	4b4d      	ldr	r3, [pc, #308]	; (8009be4 <_strtod_l+0x94c>)
 8009aae:	04d2      	lsls	r2, r2, #19
 8009ab0:	403b      	ands	r3, r7
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d800      	bhi.n	8009ab8 <_strtod_l+0x820>
 8009ab6:	e08d      	b.n	8009bd4 <_strtod_l+0x93c>
 8009ab8:	9b06      	ldr	r3, [sp, #24]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	930a      	str	r3, [sp, #40]	; 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <_strtod_l+0x836>
 8009ac2:	9b06      	ldr	r3, [sp, #24]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	dc00      	bgt.n	8009ace <_strtod_l+0x836>
 8009acc:	e082      	b.n	8009bd4 <_strtod_l+0x93c>
 8009ace:	9906      	ldr	r1, [sp, #24]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	9805      	ldr	r0, [sp, #20]
 8009ad4:	f001 ff8a 	bl	800b9ec <__lshift>
 8009ad8:	9907      	ldr	r1, [sp, #28]
 8009ada:	9006      	str	r0, [sp, #24]
 8009adc:	f001 fff6 	bl	800bacc <__mcmp>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	dd77      	ble.n	8009bd4 <_strtod_l+0x93c>
 8009ae4:	9908      	ldr	r1, [sp, #32]
 8009ae6:	003b      	movs	r3, r7
 8009ae8:	4a3e      	ldr	r2, [pc, #248]	; (8009be4 <_strtod_l+0x94c>)
 8009aea:	2900      	cmp	r1, #0
 8009aec:	d100      	bne.n	8009af0 <_strtod_l+0x858>
 8009aee:	e09e      	b.n	8009c2e <_strtod_l+0x996>
 8009af0:	0011      	movs	r1, r2
 8009af2:	20d6      	movs	r0, #214	; 0xd6
 8009af4:	4039      	ands	r1, r7
 8009af6:	04c0      	lsls	r0, r0, #19
 8009af8:	4281      	cmp	r1, r0
 8009afa:	dd00      	ble.n	8009afe <_strtod_l+0x866>
 8009afc:	e097      	b.n	8009c2e <_strtod_l+0x996>
 8009afe:	23dc      	movs	r3, #220	; 0xdc
 8009b00:	049b      	lsls	r3, r3, #18
 8009b02:	4299      	cmp	r1, r3
 8009b04:	dc00      	bgt.n	8009b08 <_strtod_l+0x870>
 8009b06:	e6a6      	b.n	8009856 <_strtod_l+0x5be>
 8009b08:	4b37      	ldr	r3, [pc, #220]	; (8009be8 <_strtod_l+0x950>)
 8009b0a:	0030      	movs	r0, r6
 8009b0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b0e:	2300      	movs	r3, #0
 8009b10:	931a      	str	r3, [sp, #104]	; 0x68
 8009b12:	0039      	movs	r1, r7
 8009b14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b18:	f7f7 fcb0 	bl	800147c <__aeabi_dmul>
 8009b1c:	0006      	movs	r6, r0
 8009b1e:	000f      	movs	r7, r1
 8009b20:	4308      	orrs	r0, r1
 8009b22:	d000      	beq.n	8009b26 <_strtod_l+0x88e>
 8009b24:	e62f      	b.n	8009786 <_strtod_l+0x4ee>
 8009b26:	2322      	movs	r3, #34	; 0x22
 8009b28:	9a05      	ldr	r2, [sp, #20]
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	e62b      	b.n	8009786 <_strtod_l+0x4ee>
 8009b2e:	2101      	movs	r1, #1
 8009b30:	3b20      	subs	r3, #32
 8009b32:	4249      	negs	r1, r1
 8009b34:	4099      	lsls	r1, r3
 8009b36:	400a      	ands	r2, r1
 8009b38:	0017      	movs	r7, r2
 8009b3a:	e6de      	b.n	80098fa <_strtod_l+0x662>
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	4252      	negs	r2, r2
 8009b40:	409a      	lsls	r2, r3
 8009b42:	4016      	ands	r6, r2
 8009b44:	e6d9      	b.n	80098fa <_strtod_l+0x662>
 8009b46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009b4a:	1ad4      	subs	r4, r2, r3
 8009b4c:	e72a      	b.n	80099a4 <_strtod_l+0x70c>
 8009b4e:	4927      	ldr	r1, [pc, #156]	; (8009bec <_strtod_l+0x954>)
 8009b50:	1acb      	subs	r3, r1, r3
 8009b52:	0001      	movs	r1, r0
 8009b54:	4099      	lsls	r1, r3
 8009b56:	9112      	str	r1, [sp, #72]	; 0x48
 8009b58:	9014      	str	r0, [sp, #80]	; 0x50
 8009b5a:	e738      	b.n	80099ce <_strtod_l+0x736>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9312      	str	r3, [sp, #72]	; 0x48
 8009b60:	e7fa      	b.n	8009b58 <_strtod_l+0x8c0>
 8009b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b64:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009b66:	9805      	ldr	r0, [sp, #20]
 8009b68:	f001 ff40 	bl	800b9ec <__lshift>
 8009b6c:	9022      	str	r0, [sp, #136]	; 0x88
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d000      	beq.n	8009b74 <_strtod_l+0x8dc>
 8009b72:	e75f      	b.n	8009a34 <_strtod_l+0x79c>
 8009b74:	e5fe      	b.n	8009774 <_strtod_l+0x4dc>
 8009b76:	970c      	str	r7, [sp, #48]	; 0x30
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d176      	bne.n	8009c6a <_strtod_l+0x9d2>
 8009b7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b7e:	033b      	lsls	r3, r7, #12
 8009b80:	0b1b      	lsrs	r3, r3, #12
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	d038      	beq.n	8009bf8 <_strtod_l+0x960>
 8009b86:	4a1a      	ldr	r2, [pc, #104]	; (8009bf0 <_strtod_l+0x958>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d138      	bne.n	8009bfe <_strtod_l+0x966>
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	4252      	negs	r2, r2
 8009b92:	0031      	movs	r1, r6
 8009b94:	0010      	movs	r0, r2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <_strtod_l+0x91a>
 8009b9a:	24d4      	movs	r4, #212	; 0xd4
 8009b9c:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <_strtod_l+0x94c>)
 8009b9e:	0010      	movs	r0, r2
 8009ba0:	403b      	ands	r3, r7
 8009ba2:	04e4      	lsls	r4, r4, #19
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	d804      	bhi.n	8009bb2 <_strtod_l+0x91a>
 8009ba8:	306c      	adds	r0, #108	; 0x6c
 8009baa:	0d1b      	lsrs	r3, r3, #20
 8009bac:	1ac3      	subs	r3, r0, r3
 8009bae:	409a      	lsls	r2, r3
 8009bb0:	0010      	movs	r0, r2
 8009bb2:	4281      	cmp	r1, r0
 8009bb4:	d123      	bne.n	8009bfe <_strtod_l+0x966>
 8009bb6:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <_strtod_l+0x95c>)
 8009bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d102      	bne.n	8009bc4 <_strtod_l+0x92c>
 8009bbe:	1c4b      	adds	r3, r1, #1
 8009bc0:	d100      	bne.n	8009bc4 <_strtod_l+0x92c>
 8009bc2:	e5d7      	b.n	8009774 <_strtod_l+0x4dc>
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <_strtod_l+0x94c>)
 8009bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bc8:	2600      	movs	r6, #0
 8009bca:	401a      	ands	r2, r3
 8009bcc:	0013      	movs	r3, r2
 8009bce:	2280      	movs	r2, #128	; 0x80
 8009bd0:	0352      	lsls	r2, r2, #13
 8009bd2:	189f      	adds	r7, r3, r2
 8009bd4:	9b08      	ldr	r3, [sp, #32]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d196      	bne.n	8009b08 <_strtod_l+0x870>
 8009bda:	e5d4      	b.n	8009786 <_strtod_l+0x4ee>
 8009bdc:	0800d878 	.word	0x0800d878
 8009be0:	fffffc02 	.word	0xfffffc02
 8009be4:	7ff00000 	.word	0x7ff00000
 8009be8:	39500000 	.word	0x39500000
 8009bec:	fffffbe2 	.word	0xfffffbe2
 8009bf0:	000fffff 	.word	0x000fffff
 8009bf4:	7fefffff 	.word	0x7fefffff
 8009bf8:	4333      	orrs	r3, r6
 8009bfa:	d100      	bne.n	8009bfe <_strtod_l+0x966>
 8009bfc:	e772      	b.n	8009ae4 <_strtod_l+0x84c>
 8009bfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01d      	beq.n	8009c40 <_strtod_l+0x9a8>
 8009c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c08:	4213      	tst	r3, r2
 8009c0a:	d0e3      	beq.n	8009bd4 <_strtod_l+0x93c>
 8009c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c0e:	0030      	movs	r0, r6
 8009c10:	0039      	movs	r1, r7
 8009c12:	9a08      	ldr	r2, [sp, #32]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d017      	beq.n	8009c48 <_strtod_l+0x9b0>
 8009c18:	f7ff fb26 	bl	8009268 <sulp>
 8009c1c:	0002      	movs	r2, r0
 8009c1e:	000b      	movs	r3, r1
 8009c20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009c22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c24:	f7f6 fcba 	bl	800059c <__aeabi_dadd>
 8009c28:	0006      	movs	r6, r0
 8009c2a:	000f      	movs	r7, r1
 8009c2c:	e7d2      	b.n	8009bd4 <_strtod_l+0x93c>
 8009c2e:	2601      	movs	r6, #1
 8009c30:	4013      	ands	r3, r2
 8009c32:	4a9b      	ldr	r2, [pc, #620]	; (8009ea0 <_strtod_l+0xc08>)
 8009c34:	4276      	negs	r6, r6
 8009c36:	189b      	adds	r3, r3, r2
 8009c38:	4a9a      	ldr	r2, [pc, #616]	; (8009ea4 <_strtod_l+0xc0c>)
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	0017      	movs	r7, r2
 8009c3e:	e7c9      	b.n	8009bd4 <_strtod_l+0x93c>
 8009c40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c42:	4233      	tst	r3, r6
 8009c44:	d0c6      	beq.n	8009bd4 <_strtod_l+0x93c>
 8009c46:	e7e1      	b.n	8009c0c <_strtod_l+0x974>
 8009c48:	f7ff fb0e 	bl	8009268 <sulp>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	000b      	movs	r3, r1
 8009c50:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009c52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c54:	f7f7 fe7e 	bl	8001954 <__aeabi_dsub>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	0006      	movs	r6, r0
 8009c5e:	000f      	movs	r7, r1
 8009c60:	f7f6 fbfe 	bl	8000460 <__aeabi_dcmpeq>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d0b5      	beq.n	8009bd4 <_strtod_l+0x93c>
 8009c68:	e5f5      	b.n	8009856 <_strtod_l+0x5be>
 8009c6a:	9907      	ldr	r1, [sp, #28]
 8009c6c:	9806      	ldr	r0, [sp, #24]
 8009c6e:	f002 f8b9 	bl	800bde4 <__ratio>
 8009c72:	2380      	movs	r3, #128	; 0x80
 8009c74:	2200      	movs	r2, #0
 8009c76:	05db      	lsls	r3, r3, #23
 8009c78:	0004      	movs	r4, r0
 8009c7a:	000d      	movs	r5, r1
 8009c7c:	f7f6 fc00 	bl	8000480 <__aeabi_dcmple>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d079      	beq.n	8009d78 <_strtod_l+0xae0>
 8009c84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d04b      	beq.n	8009d22 <_strtod_l+0xa8a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4c86      	ldr	r4, [pc, #536]	; (8009ea8 <_strtod_l+0xc10>)
 8009c8e:	2500      	movs	r5, #0
 8009c90:	9312      	str	r3, [sp, #72]	; 0x48
 8009c92:	9413      	str	r4, [sp, #76]	; 0x4c
 8009c94:	4c84      	ldr	r4, [pc, #528]	; (8009ea8 <_strtod_l+0xc10>)
 8009c96:	4a85      	ldr	r2, [pc, #532]	; (8009eac <_strtod_l+0xc14>)
 8009c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	9314      	str	r3, [sp, #80]	; 0x50
 8009c9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ca0:	4b83      	ldr	r3, [pc, #524]	; (8009eb0 <_strtod_l+0xc18>)
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d000      	beq.n	8009ca8 <_strtod_l+0xa10>
 8009ca6:	e0b0      	b.n	8009e0a <_strtod_l+0xb72>
 8009ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cac:	921a      	str	r2, [sp, #104]	; 0x68
 8009cae:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cb0:	4a80      	ldr	r2, [pc, #512]	; (8009eb4 <_strtod_l+0xc1c>)
 8009cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cb4:	4694      	mov	ip, r2
 8009cb6:	4463      	add	r3, ip
 8009cb8:	001f      	movs	r7, r3
 8009cba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cbe:	0030      	movs	r0, r6
 8009cc0:	0039      	movs	r1, r7
 8009cc2:	920c      	str	r2, [sp, #48]	; 0x30
 8009cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc6:	f001 ffb5 	bl	800bc34 <__ulp>
 8009cca:	0002      	movs	r2, r0
 8009ccc:	000b      	movs	r3, r1
 8009cce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cd2:	f7f7 fbd3 	bl	800147c <__aeabi_dmul>
 8009cd6:	0032      	movs	r2, r6
 8009cd8:	003b      	movs	r3, r7
 8009cda:	f7f6 fc5f 	bl	800059c <__aeabi_dadd>
 8009cde:	4a73      	ldr	r2, [pc, #460]	; (8009eac <_strtod_l+0xc14>)
 8009ce0:	4b75      	ldr	r3, [pc, #468]	; (8009eb8 <_strtod_l+0xc20>)
 8009ce2:	0006      	movs	r6, r0
 8009ce4:	400a      	ands	r2, r1
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d95e      	bls.n	8009da8 <_strtod_l+0xb10>
 8009cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cec:	4a73      	ldr	r2, [pc, #460]	; (8009ebc <_strtod_l+0xc24>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d103      	bne.n	8009cfa <_strtod_l+0xa62>
 8009cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	d100      	bne.n	8009cfa <_strtod_l+0xa62>
 8009cf8:	e53c      	b.n	8009774 <_strtod_l+0x4dc>
 8009cfa:	2601      	movs	r6, #1
 8009cfc:	4f6f      	ldr	r7, [pc, #444]	; (8009ebc <_strtod_l+0xc24>)
 8009cfe:	4276      	negs	r6, r6
 8009d00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d02:	9805      	ldr	r0, [sp, #20]
 8009d04:	f001 fc54 	bl	800b5b0 <_Bfree>
 8009d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d0a:	9805      	ldr	r0, [sp, #20]
 8009d0c:	f001 fc50 	bl	800b5b0 <_Bfree>
 8009d10:	9907      	ldr	r1, [sp, #28]
 8009d12:	9805      	ldr	r0, [sp, #20]
 8009d14:	f001 fc4c 	bl	800b5b0 <_Bfree>
 8009d18:	9906      	ldr	r1, [sp, #24]
 8009d1a:	9805      	ldr	r0, [sp, #20]
 8009d1c:	f001 fc48 	bl	800b5b0 <_Bfree>
 8009d20:	e60f      	b.n	8009942 <_strtod_l+0x6aa>
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d11c      	bne.n	8009d60 <_strtod_l+0xac8>
 8009d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d28:	031b      	lsls	r3, r3, #12
 8009d2a:	d11f      	bne.n	8009d6c <_strtod_l+0xad4>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	0020      	movs	r0, r4
 8009d30:	0029      	movs	r1, r5
 8009d32:	4b5d      	ldr	r3, [pc, #372]	; (8009ea8 <_strtod_l+0xc10>)
 8009d34:	f7f6 fb9a 	bl	800046c <__aeabi_dcmplt>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d11a      	bne.n	8009d72 <_strtod_l+0xada>
 8009d3c:	0020      	movs	r0, r4
 8009d3e:	0029      	movs	r1, r5
 8009d40:	2200      	movs	r2, #0
 8009d42:	4b5f      	ldr	r3, [pc, #380]	; (8009ec0 <_strtod_l+0xc28>)
 8009d44:	f7f7 fb9a 	bl	800147c <__aeabi_dmul>
 8009d48:	0005      	movs	r5, r0
 8009d4a:	000c      	movs	r4, r1
 8009d4c:	2380      	movs	r3, #128	; 0x80
 8009d4e:	061b      	lsls	r3, r3, #24
 8009d50:	18e3      	adds	r3, r4, r3
 8009d52:	951e      	str	r5, [sp, #120]	; 0x78
 8009d54:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d5a:	9212      	str	r2, [sp, #72]	; 0x48
 8009d5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d5e:	e79a      	b.n	8009c96 <_strtod_l+0x9fe>
 8009d60:	2e01      	cmp	r6, #1
 8009d62:	d103      	bne.n	8009d6c <_strtod_l+0xad4>
 8009d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d100      	bne.n	8009d6c <_strtod_l+0xad4>
 8009d6a:	e574      	b.n	8009856 <_strtod_l+0x5be>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4c55      	ldr	r4, [pc, #340]	; (8009ec4 <_strtod_l+0xc2c>)
 8009d70:	e78d      	b.n	8009c8e <_strtod_l+0x9f6>
 8009d72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009d74:	4c52      	ldr	r4, [pc, #328]	; (8009ec0 <_strtod_l+0xc28>)
 8009d76:	e7e9      	b.n	8009d4c <_strtod_l+0xab4>
 8009d78:	2200      	movs	r2, #0
 8009d7a:	0020      	movs	r0, r4
 8009d7c:	0029      	movs	r1, r5
 8009d7e:	4b50      	ldr	r3, [pc, #320]	; (8009ec0 <_strtod_l+0xc28>)
 8009d80:	f7f7 fb7c 	bl	800147c <__aeabi_dmul>
 8009d84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d86:	0005      	movs	r5, r0
 8009d88:	000b      	movs	r3, r1
 8009d8a:	000c      	movs	r4, r1
 8009d8c:	2a00      	cmp	r2, #0
 8009d8e:	d107      	bne.n	8009da0 <_strtod_l+0xb08>
 8009d90:	2280      	movs	r2, #128	; 0x80
 8009d92:	0612      	lsls	r2, r2, #24
 8009d94:	188b      	adds	r3, r1, r2
 8009d96:	9016      	str	r0, [sp, #88]	; 0x58
 8009d98:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d9e:	e7dc      	b.n	8009d5a <_strtod_l+0xac2>
 8009da0:	0002      	movs	r2, r0
 8009da2:	9216      	str	r2, [sp, #88]	; 0x58
 8009da4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009da6:	e7f8      	b.n	8009d9a <_strtod_l+0xb02>
 8009da8:	23d4      	movs	r3, #212	; 0xd4
 8009daa:	049b      	lsls	r3, r3, #18
 8009dac:	18cf      	adds	r7, r1, r3
 8009dae:	9b08      	ldr	r3, [sp, #32]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1a5      	bne.n	8009d00 <_strtod_l+0xa68>
 8009db4:	4b3d      	ldr	r3, [pc, #244]	; (8009eac <_strtod_l+0xc14>)
 8009db6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009db8:	403b      	ands	r3, r7
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d1a0      	bne.n	8009d00 <_strtod_l+0xa68>
 8009dbe:	0028      	movs	r0, r5
 8009dc0:	0021      	movs	r1, r4
 8009dc2:	f7f6 fb99 	bl	80004f8 <__aeabi_d2lz>
 8009dc6:	f7f6 fbd3 	bl	8000570 <__aeabi_l2d>
 8009dca:	0002      	movs	r2, r0
 8009dcc:	000b      	movs	r3, r1
 8009dce:	0028      	movs	r0, r5
 8009dd0:	0021      	movs	r1, r4
 8009dd2:	f7f7 fdbf 	bl	8001954 <__aeabi_dsub>
 8009dd6:	033b      	lsls	r3, r7, #12
 8009dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009dda:	0b1b      	lsrs	r3, r3, #12
 8009ddc:	4333      	orrs	r3, r6
 8009dde:	4313      	orrs	r3, r2
 8009de0:	0004      	movs	r4, r0
 8009de2:	000d      	movs	r5, r1
 8009de4:	4a38      	ldr	r2, [pc, #224]	; (8009ec8 <_strtod_l+0xc30>)
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d055      	beq.n	8009e96 <_strtod_l+0xbfe>
 8009dea:	4b38      	ldr	r3, [pc, #224]	; (8009ecc <_strtod_l+0xc34>)
 8009dec:	f7f6 fb3e 	bl	800046c <__aeabi_dcmplt>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d000      	beq.n	8009df6 <_strtod_l+0xb5e>
 8009df4:	e4c7      	b.n	8009786 <_strtod_l+0x4ee>
 8009df6:	0020      	movs	r0, r4
 8009df8:	0029      	movs	r1, r5
 8009dfa:	4a35      	ldr	r2, [pc, #212]	; (8009ed0 <_strtod_l+0xc38>)
 8009dfc:	4b30      	ldr	r3, [pc, #192]	; (8009ec0 <_strtod_l+0xc28>)
 8009dfe:	f7f6 fb49 	bl	8000494 <__aeabi_dcmpgt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d100      	bne.n	8009e08 <_strtod_l+0xb70>
 8009e06:	e77b      	b.n	8009d00 <_strtod_l+0xa68>
 8009e08:	e4bd      	b.n	8009786 <_strtod_l+0x4ee>
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d02b      	beq.n	8009e68 <_strtod_l+0xbd0>
 8009e10:	23d4      	movs	r3, #212	; 0xd4
 8009e12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e14:	04db      	lsls	r3, r3, #19
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d826      	bhi.n	8009e68 <_strtod_l+0xbd0>
 8009e1a:	0028      	movs	r0, r5
 8009e1c:	0021      	movs	r1, r4
 8009e1e:	4a2d      	ldr	r2, [pc, #180]	; (8009ed4 <_strtod_l+0xc3c>)
 8009e20:	4b2d      	ldr	r3, [pc, #180]	; (8009ed8 <_strtod_l+0xc40>)
 8009e22:	f7f6 fb2d 	bl	8000480 <__aeabi_dcmple>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d017      	beq.n	8009e5a <_strtod_l+0xbc2>
 8009e2a:	0028      	movs	r0, r5
 8009e2c:	0021      	movs	r1, r4
 8009e2e:	f7f6 fb45 	bl	80004bc <__aeabi_d2uiz>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d100      	bne.n	8009e38 <_strtod_l+0xba0>
 8009e36:	3001      	adds	r0, #1
 8009e38:	f7f8 f9a2 	bl	8002180 <__aeabi_ui2d>
 8009e3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e3e:	0005      	movs	r5, r0
 8009e40:	000b      	movs	r3, r1
 8009e42:	000c      	movs	r4, r1
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d122      	bne.n	8009e8e <_strtod_l+0xbf6>
 8009e48:	2280      	movs	r2, #128	; 0x80
 8009e4a:	0612      	lsls	r2, r2, #24
 8009e4c:	188b      	adds	r3, r1, r2
 8009e4e:	9018      	str	r0, [sp, #96]	; 0x60
 8009e50:	9319      	str	r3, [sp, #100]	; 0x64
 8009e52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e56:	9212      	str	r2, [sp, #72]	; 0x48
 8009e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e5a:	22d6      	movs	r2, #214	; 0xd6
 8009e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e5e:	04d2      	lsls	r2, r2, #19
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e6c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009e6e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8009e70:	f001 fee0 	bl	800bc34 <__ulp>
 8009e74:	0002      	movs	r2, r0
 8009e76:	000b      	movs	r3, r1
 8009e78:	0030      	movs	r0, r6
 8009e7a:	0039      	movs	r1, r7
 8009e7c:	f7f7 fafe 	bl	800147c <__aeabi_dmul>
 8009e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e84:	f7f6 fb8a 	bl	800059c <__aeabi_dadd>
 8009e88:	0006      	movs	r6, r0
 8009e8a:	000f      	movs	r7, r1
 8009e8c:	e78f      	b.n	8009dae <_strtod_l+0xb16>
 8009e8e:	0002      	movs	r2, r0
 8009e90:	9218      	str	r2, [sp, #96]	; 0x60
 8009e92:	9319      	str	r3, [sp, #100]	; 0x64
 8009e94:	e7dd      	b.n	8009e52 <_strtod_l+0xbba>
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <_strtod_l+0xc44>)
 8009e98:	f7f6 fae8 	bl	800046c <__aeabi_dcmplt>
 8009e9c:	e7b1      	b.n	8009e02 <_strtod_l+0xb6a>
 8009e9e:	46c0      	nop			; (mov r8, r8)
 8009ea0:	fff00000 	.word	0xfff00000
 8009ea4:	000fffff 	.word	0x000fffff
 8009ea8:	3ff00000 	.word	0x3ff00000
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	7fe00000 	.word	0x7fe00000
 8009eb4:	fcb00000 	.word	0xfcb00000
 8009eb8:	7c9fffff 	.word	0x7c9fffff
 8009ebc:	7fefffff 	.word	0x7fefffff
 8009ec0:	3fe00000 	.word	0x3fe00000
 8009ec4:	bff00000 	.word	0xbff00000
 8009ec8:	94a03595 	.word	0x94a03595
 8009ecc:	3fdfffff 	.word	0x3fdfffff
 8009ed0:	35afe535 	.word	0x35afe535
 8009ed4:	ffc00000 	.word	0xffc00000
 8009ed8:	41dfffff 	.word	0x41dfffff
 8009edc:	3fcfffff 	.word	0x3fcfffff

08009ee0 <_strtod_r>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	4b02      	ldr	r3, [pc, #8]	; (8009eec <_strtod_r+0xc>)
 8009ee4:	f7ff f9d8 	bl	8009298 <_strtod_l>
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	20000074 	.word	0x20000074

08009ef0 <_strtol_l.isra.0>:
 8009ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	001e      	movs	r6, r3
 8009ef6:	9005      	str	r0, [sp, #20]
 8009ef8:	9101      	str	r1, [sp, #4]
 8009efa:	9202      	str	r2, [sp, #8]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d045      	beq.n	8009f8c <_strtol_l.isra.0+0x9c>
 8009f00:	0008      	movs	r0, r1
 8009f02:	2b24      	cmp	r3, #36	; 0x24
 8009f04:	d842      	bhi.n	8009f8c <_strtol_l.isra.0+0x9c>
 8009f06:	4b3f      	ldr	r3, [pc, #252]	; (800a004 <_strtol_l.isra.0+0x114>)
 8009f08:	2208      	movs	r2, #8
 8009f0a:	469c      	mov	ip, r3
 8009f0c:	0003      	movs	r3, r0
 8009f0e:	4661      	mov	r1, ip
 8009f10:	781c      	ldrb	r4, [r3, #0]
 8009f12:	1c45      	adds	r5, r0, #1
 8009f14:	5d09      	ldrb	r1, [r1, r4]
 8009f16:	0028      	movs	r0, r5
 8009f18:	000f      	movs	r7, r1
 8009f1a:	4017      	ands	r7, r2
 8009f1c:	4211      	tst	r1, r2
 8009f1e:	d1f5      	bne.n	8009f0c <_strtol_l.isra.0+0x1c>
 8009f20:	2c2d      	cmp	r4, #45	; 0x2d
 8009f22:	d13a      	bne.n	8009f9a <_strtol_l.isra.0+0xaa>
 8009f24:	2701      	movs	r7, #1
 8009f26:	782c      	ldrb	r4, [r5, #0]
 8009f28:	1c9d      	adds	r5, r3, #2
 8009f2a:	2e00      	cmp	r6, #0
 8009f2c:	d065      	beq.n	8009ffa <_strtol_l.isra.0+0x10a>
 8009f2e:	2e10      	cmp	r6, #16
 8009f30:	d109      	bne.n	8009f46 <_strtol_l.isra.0+0x56>
 8009f32:	2c30      	cmp	r4, #48	; 0x30
 8009f34:	d107      	bne.n	8009f46 <_strtol_l.isra.0+0x56>
 8009f36:	2220      	movs	r2, #32
 8009f38:	782b      	ldrb	r3, [r5, #0]
 8009f3a:	4393      	bics	r3, r2
 8009f3c:	2b58      	cmp	r3, #88	; 0x58
 8009f3e:	d157      	bne.n	8009ff0 <_strtol_l.isra.0+0x100>
 8009f40:	2610      	movs	r6, #16
 8009f42:	786c      	ldrb	r4, [r5, #1]
 8009f44:	3502      	adds	r5, #2
 8009f46:	4b30      	ldr	r3, [pc, #192]	; (800a008 <_strtol_l.isra.0+0x118>)
 8009f48:	0031      	movs	r1, r6
 8009f4a:	18fb      	adds	r3, r7, r3
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	9303      	str	r3, [sp, #12]
 8009f50:	f7f6 f986 	bl	8000260 <__aeabi_uidivmod>
 8009f54:	2300      	movs	r3, #0
 8009f56:	2201      	movs	r2, #1
 8009f58:	4684      	mov	ip, r0
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	9104      	str	r1, [sp, #16]
 8009f5e:	4252      	negs	r2, r2
 8009f60:	0021      	movs	r1, r4
 8009f62:	3930      	subs	r1, #48	; 0x30
 8009f64:	2909      	cmp	r1, #9
 8009f66:	d81d      	bhi.n	8009fa4 <_strtol_l.isra.0+0xb4>
 8009f68:	000c      	movs	r4, r1
 8009f6a:	42a6      	cmp	r6, r4
 8009f6c:	dd28      	ble.n	8009fc0 <_strtol_l.isra.0+0xd0>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	db24      	blt.n	8009fbc <_strtol_l.isra.0+0xcc>
 8009f72:	0013      	movs	r3, r2
 8009f74:	4584      	cmp	ip, r0
 8009f76:	d306      	bcc.n	8009f86 <_strtol_l.isra.0+0x96>
 8009f78:	d102      	bne.n	8009f80 <_strtol_l.isra.0+0x90>
 8009f7a:	9904      	ldr	r1, [sp, #16]
 8009f7c:	42a1      	cmp	r1, r4
 8009f7e:	db02      	blt.n	8009f86 <_strtol_l.isra.0+0x96>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4370      	muls	r0, r6
 8009f84:	1820      	adds	r0, r4, r0
 8009f86:	782c      	ldrb	r4, [r5, #0]
 8009f88:	3501      	adds	r5, #1
 8009f8a:	e7e9      	b.n	8009f60 <_strtol_l.isra.0+0x70>
 8009f8c:	f7fe fa16 	bl	80083bc <__errno>
 8009f90:	2316      	movs	r3, #22
 8009f92:	6003      	str	r3, [r0, #0]
 8009f94:	2000      	movs	r0, #0
 8009f96:	b007      	add	sp, #28
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f9c:	d1c5      	bne.n	8009f2a <_strtol_l.isra.0+0x3a>
 8009f9e:	782c      	ldrb	r4, [r5, #0]
 8009fa0:	1c9d      	adds	r5, r3, #2
 8009fa2:	e7c2      	b.n	8009f2a <_strtol_l.isra.0+0x3a>
 8009fa4:	0021      	movs	r1, r4
 8009fa6:	3941      	subs	r1, #65	; 0x41
 8009fa8:	2919      	cmp	r1, #25
 8009faa:	d801      	bhi.n	8009fb0 <_strtol_l.isra.0+0xc0>
 8009fac:	3c37      	subs	r4, #55	; 0x37
 8009fae:	e7dc      	b.n	8009f6a <_strtol_l.isra.0+0x7a>
 8009fb0:	0021      	movs	r1, r4
 8009fb2:	3961      	subs	r1, #97	; 0x61
 8009fb4:	2919      	cmp	r1, #25
 8009fb6:	d803      	bhi.n	8009fc0 <_strtol_l.isra.0+0xd0>
 8009fb8:	3c57      	subs	r4, #87	; 0x57
 8009fba:	e7d6      	b.n	8009f6a <_strtol_l.isra.0+0x7a>
 8009fbc:	0013      	movs	r3, r2
 8009fbe:	e7e2      	b.n	8009f86 <_strtol_l.isra.0+0x96>
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	da09      	bge.n	8009fd8 <_strtol_l.isra.0+0xe8>
 8009fc4:	2322      	movs	r3, #34	; 0x22
 8009fc6:	9a05      	ldr	r2, [sp, #20]
 8009fc8:	9803      	ldr	r0, [sp, #12]
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	9b02      	ldr	r3, [sp, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0e1      	beq.n	8009f96 <_strtol_l.isra.0+0xa6>
 8009fd2:	1e6b      	subs	r3, r5, #1
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	e007      	b.n	8009fe8 <_strtol_l.isra.0+0xf8>
 8009fd8:	2f00      	cmp	r7, #0
 8009fda:	d000      	beq.n	8009fde <_strtol_l.isra.0+0xee>
 8009fdc:	4240      	negs	r0, r0
 8009fde:	9a02      	ldr	r2, [sp, #8]
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	d0d8      	beq.n	8009f96 <_strtol_l.isra.0+0xa6>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1f4      	bne.n	8009fd2 <_strtol_l.isra.0+0xe2>
 8009fe8:	9b02      	ldr	r3, [sp, #8]
 8009fea:	9a01      	ldr	r2, [sp, #4]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e7d2      	b.n	8009f96 <_strtol_l.isra.0+0xa6>
 8009ff0:	2430      	movs	r4, #48	; 0x30
 8009ff2:	2e00      	cmp	r6, #0
 8009ff4:	d1a7      	bne.n	8009f46 <_strtol_l.isra.0+0x56>
 8009ff6:	3608      	adds	r6, #8
 8009ff8:	e7a5      	b.n	8009f46 <_strtol_l.isra.0+0x56>
 8009ffa:	2c30      	cmp	r4, #48	; 0x30
 8009ffc:	d09b      	beq.n	8009f36 <_strtol_l.isra.0+0x46>
 8009ffe:	260a      	movs	r6, #10
 800a000:	e7a1      	b.n	8009f46 <_strtol_l.isra.0+0x56>
 800a002:	46c0      	nop			; (mov r8, r8)
 800a004:	0800d8a1 	.word	0x0800d8a1
 800a008:	7fffffff 	.word	0x7fffffff

0800a00c <_strtol_r>:
 800a00c:	b510      	push	{r4, lr}
 800a00e:	f7ff ff6f 	bl	8009ef0 <_strtol_l.isra.0>
 800a012:	bd10      	pop	{r4, pc}

0800a014 <_write_r>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	0004      	movs	r4, r0
 800a018:	0008      	movs	r0, r1
 800a01a:	0011      	movs	r1, r2
 800a01c:	001a      	movs	r2, r3
 800a01e:	2300      	movs	r3, #0
 800a020:	4d05      	ldr	r5, [pc, #20]	; (800a038 <_write_r+0x24>)
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f9 ffc5 	bl	8003fb2 <_write>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d103      	bne.n	800a034 <_write_r+0x20>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d000      	beq.n	800a034 <_write_r+0x20>
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	bd70      	pop	{r4, r5, r6, pc}
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	200005b0 	.word	0x200005b0

0800a03c <_close_r>:
 800a03c:	2300      	movs	r3, #0
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	4d06      	ldr	r5, [pc, #24]	; (800a05c <_close_r+0x20>)
 800a042:	0004      	movs	r4, r0
 800a044:	0008      	movs	r0, r1
 800a046:	602b      	str	r3, [r5, #0]
 800a048:	f7f9 ffcf 	bl	8003fea <_close>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d103      	bne.n	800a058 <_close_r+0x1c>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d000      	beq.n	800a058 <_close_r+0x1c>
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	200005b0 	.word	0x200005b0

0800a060 <quorem>:
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	0006      	movs	r6, r0
 800a064:	690d      	ldr	r5, [r1, #16]
 800a066:	6933      	ldr	r3, [r6, #16]
 800a068:	b087      	sub	sp, #28
 800a06a:	2000      	movs	r0, #0
 800a06c:	9102      	str	r1, [sp, #8]
 800a06e:	42ab      	cmp	r3, r5
 800a070:	db6b      	blt.n	800a14a <quorem+0xea>
 800a072:	000b      	movs	r3, r1
 800a074:	3d01      	subs	r5, #1
 800a076:	00ac      	lsls	r4, r5, #2
 800a078:	3314      	adds	r3, #20
 800a07a:	9305      	str	r3, [sp, #20]
 800a07c:	191b      	adds	r3, r3, r4
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	0033      	movs	r3, r6
 800a082:	3314      	adds	r3, #20
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	191c      	adds	r4, r3, r4
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	6827      	ldr	r7, [r4, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	0038      	movs	r0, r7
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	0019      	movs	r1, r3
 800a096:	9304      	str	r3, [sp, #16]
 800a098:	f7f6 f85c 	bl	8000154 <__udivsi3>
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	9000      	str	r0, [sp, #0]
 800a0a0:	429f      	cmp	r7, r3
 800a0a2:	d329      	bcc.n	800a0f8 <quorem+0x98>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	469c      	mov	ip, r3
 800a0a8:	9801      	ldr	r0, [sp, #4]
 800a0aa:	9f05      	ldr	r7, [sp, #20]
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	cf08      	ldmia	r7!, {r3}
 800a0b0:	9a00      	ldr	r2, [sp, #0]
 800a0b2:	b299      	uxth	r1, r3
 800a0b4:	4351      	muls	r1, r2
 800a0b6:	0c1b      	lsrs	r3, r3, #16
 800a0b8:	4353      	muls	r3, r2
 800a0ba:	4461      	add	r1, ip
 800a0bc:	0c0a      	lsrs	r2, r1, #16
 800a0be:	189b      	adds	r3, r3, r2
 800a0c0:	0c1a      	lsrs	r2, r3, #16
 800a0c2:	9305      	str	r3, [sp, #20]
 800a0c4:	6803      	ldr	r3, [r0, #0]
 800a0c6:	4694      	mov	ip, r2
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	b289      	uxth	r1, r1
 800a0ce:	18d2      	adds	r2, r2, r3
 800a0d0:	6803      	ldr	r3, [r0, #0]
 800a0d2:	1a52      	subs	r2, r2, r1
 800a0d4:	0c19      	lsrs	r1, r3, #16
 800a0d6:	466b      	mov	r3, sp
 800a0d8:	8a9b      	ldrh	r3, [r3, #20]
 800a0da:	1acb      	subs	r3, r1, r3
 800a0dc:	1411      	asrs	r1, r2, #16
 800a0de:	185b      	adds	r3, r3, r1
 800a0e0:	1419      	asrs	r1, r3, #16
 800a0e2:	b292      	uxth	r2, r2
 800a0e4:	041b      	lsls	r3, r3, #16
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	9104      	str	r1, [sp, #16]
 800a0ec:	c004      	stmia	r0!, {r2}
 800a0ee:	42bb      	cmp	r3, r7
 800a0f0:	d2dd      	bcs.n	800a0ae <quorem+0x4e>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d02e      	beq.n	800a156 <quorem+0xf6>
 800a0f8:	0030      	movs	r0, r6
 800a0fa:	9902      	ldr	r1, [sp, #8]
 800a0fc:	f001 fce6 	bl	800bacc <__mcmp>
 800a100:	2800      	cmp	r0, #0
 800a102:	db21      	blt.n	800a148 <quorem+0xe8>
 800a104:	0030      	movs	r0, r6
 800a106:	2400      	movs	r4, #0
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	9902      	ldr	r1, [sp, #8]
 800a10c:	3301      	adds	r3, #1
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	3014      	adds	r0, #20
 800a112:	3114      	adds	r1, #20
 800a114:	6802      	ldr	r2, [r0, #0]
 800a116:	c908      	ldmia	r1!, {r3}
 800a118:	b292      	uxth	r2, r2
 800a11a:	1914      	adds	r4, r2, r4
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	1aa2      	subs	r2, r4, r2
 800a120:	6804      	ldr	r4, [r0, #0]
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	0c24      	lsrs	r4, r4, #16
 800a126:	1ae3      	subs	r3, r4, r3
 800a128:	1414      	asrs	r4, r2, #16
 800a12a:	191b      	adds	r3, r3, r4
 800a12c:	141c      	asrs	r4, r3, #16
 800a12e:	b292      	uxth	r2, r2
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	4313      	orrs	r3, r2
 800a134:	c008      	stmia	r0!, {r3}
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	428b      	cmp	r3, r1
 800a13a:	d2eb      	bcs.n	800a114 <quorem+0xb4>
 800a13c:	9a01      	ldr	r2, [sp, #4]
 800a13e:	00ab      	lsls	r3, r5, #2
 800a140:	18d3      	adds	r3, r2, r3
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	2a00      	cmp	r2, #0
 800a146:	d010      	beq.n	800a16a <quorem+0x10a>
 800a148:	9800      	ldr	r0, [sp, #0]
 800a14a:	b007      	add	sp, #28
 800a14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d104      	bne.n	800a15e <quorem+0xfe>
 800a154:	3d01      	subs	r5, #1
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	3c04      	subs	r4, #4
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	d3f7      	bcc.n	800a14e <quorem+0xee>
 800a15e:	6135      	str	r5, [r6, #16]
 800a160:	e7ca      	b.n	800a0f8 <quorem+0x98>
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	2a00      	cmp	r2, #0
 800a166:	d104      	bne.n	800a172 <quorem+0x112>
 800a168:	3d01      	subs	r5, #1
 800a16a:	9a01      	ldr	r2, [sp, #4]
 800a16c:	3b04      	subs	r3, #4
 800a16e:	429a      	cmp	r2, r3
 800a170:	d3f7      	bcc.n	800a162 <quorem+0x102>
 800a172:	6135      	str	r5, [r6, #16]
 800a174:	e7e8      	b.n	800a148 <quorem+0xe8>
	...

0800a178 <_dtoa_r>:
 800a178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17a:	b09d      	sub	sp, #116	; 0x74
 800a17c:	9202      	str	r2, [sp, #8]
 800a17e:	9303      	str	r3, [sp, #12]
 800a180:	9b02      	ldr	r3, [sp, #8]
 800a182:	9c03      	ldr	r4, [sp, #12]
 800a184:	930a      	str	r3, [sp, #40]	; 0x28
 800a186:	940b      	str	r4, [sp, #44]	; 0x2c
 800a188:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a18a:	0007      	movs	r7, r0
 800a18c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a18e:	2c00      	cmp	r4, #0
 800a190:	d10e      	bne.n	800a1b0 <_dtoa_r+0x38>
 800a192:	2010      	movs	r0, #16
 800a194:	f001 f998 	bl	800b4c8 <malloc>
 800a198:	1e02      	subs	r2, r0, #0
 800a19a:	6278      	str	r0, [r7, #36]	; 0x24
 800a19c:	d104      	bne.n	800a1a8 <_dtoa_r+0x30>
 800a19e:	21ea      	movs	r1, #234	; 0xea
 800a1a0:	4bc0      	ldr	r3, [pc, #768]	; (800a4a4 <_dtoa_r+0x32c>)
 800a1a2:	48c1      	ldr	r0, [pc, #772]	; (800a4a8 <_dtoa_r+0x330>)
 800a1a4:	f002 fd2e 	bl	800cc04 <__assert_func>
 800a1a8:	6044      	str	r4, [r0, #4]
 800a1aa:	6084      	str	r4, [r0, #8]
 800a1ac:	6004      	str	r4, [r0, #0]
 800a1ae:	60c4      	str	r4, [r0, #12]
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d00a      	beq.n	800a1ce <_dtoa_r+0x56>
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4093      	lsls	r3, r2
 800a1be:	604a      	str	r2, [r1, #4]
 800a1c0:	608b      	str	r3, [r1, #8]
 800a1c2:	0038      	movs	r0, r7
 800a1c4:	f001 f9f4 	bl	800b5b0 <_Bfree>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da21      	bge.n	800a218 <_dtoa_r+0xa0>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	602b      	str	r3, [r5, #0]
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	085b      	lsrs	r3, r3, #1
 800a1de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a1e2:	4bb2      	ldr	r3, [pc, #712]	; (800a4ac <_dtoa_r+0x334>)
 800a1e4:	002a      	movs	r2, r5
 800a1e6:	9318      	str	r3, [sp, #96]	; 0x60
 800a1e8:	401a      	ands	r2, r3
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d117      	bne.n	800a21e <_dtoa_r+0xa6>
 800a1ee:	4bb0      	ldr	r3, [pc, #704]	; (800a4b0 <_dtoa_r+0x338>)
 800a1f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1f2:	0328      	lsls	r0, r5, #12
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	0b00      	lsrs	r0, r0, #12
 800a1fa:	4318      	orrs	r0, r3
 800a1fc:	d101      	bne.n	800a202 <_dtoa_r+0x8a>
 800a1fe:	f000 fdc3 	bl	800ad88 <_dtoa_r+0xc10>
 800a202:	48ac      	ldr	r0, [pc, #688]	; (800a4b4 <_dtoa_r+0x33c>)
 800a204:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a206:	9005      	str	r0, [sp, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <_dtoa_r+0x9a>
 800a20c:	4baa      	ldr	r3, [pc, #680]	; (800a4b8 <_dtoa_r+0x340>)
 800a20e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	9805      	ldr	r0, [sp, #20]
 800a214:	b01d      	add	sp, #116	; 0x74
 800a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a218:	2300      	movs	r3, #0
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	e7e0      	b.n	800a1e0 <_dtoa_r+0x68>
 800a21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a220:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a222:	9312      	str	r3, [sp, #72]	; 0x48
 800a224:	9413      	str	r4, [sp, #76]	; 0x4c
 800a226:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a228:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a22a:	2200      	movs	r2, #0
 800a22c:	2300      	movs	r3, #0
 800a22e:	f7f6 f917 	bl	8000460 <__aeabi_dcmpeq>
 800a232:	1e04      	subs	r4, r0, #0
 800a234:	d00b      	beq.n	800a24e <_dtoa_r+0xd6>
 800a236:	2301      	movs	r3, #1
 800a238:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	4b9f      	ldr	r3, [pc, #636]	; (800a4bc <_dtoa_r+0x344>)
 800a23e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	2a00      	cmp	r2, #0
 800a244:	d0e5      	beq.n	800a212 <_dtoa_r+0x9a>
 800a246:	4a9e      	ldr	r2, [pc, #632]	; (800a4c0 <_dtoa_r+0x348>)
 800a248:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a24a:	600a      	str	r2, [r1, #0]
 800a24c:	e7e1      	b.n	800a212 <_dtoa_r+0x9a>
 800a24e:	ab1a      	add	r3, sp, #104	; 0x68
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	ab1b      	add	r3, sp, #108	; 0x6c
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	0038      	movs	r0, r7
 800a258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a25a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a25c:	f001 fd5e 	bl	800bd1c <__d2b>
 800a260:	006e      	lsls	r6, r5, #1
 800a262:	9004      	str	r0, [sp, #16]
 800a264:	0d76      	lsrs	r6, r6, #21
 800a266:	d100      	bne.n	800a26a <_dtoa_r+0xf2>
 800a268:	e07c      	b.n	800a364 <_dtoa_r+0x1ec>
 800a26a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a26c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a26e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a270:	4a94      	ldr	r2, [pc, #592]	; (800a4c4 <_dtoa_r+0x34c>)
 800a272:	031b      	lsls	r3, r3, #12
 800a274:	0b1b      	lsrs	r3, r3, #12
 800a276:	431a      	orrs	r2, r3
 800a278:	0011      	movs	r1, r2
 800a27a:	4b93      	ldr	r3, [pc, #588]	; (800a4c8 <_dtoa_r+0x350>)
 800a27c:	9416      	str	r4, [sp, #88]	; 0x58
 800a27e:	18f6      	adds	r6, r6, r3
 800a280:	2200      	movs	r2, #0
 800a282:	4b92      	ldr	r3, [pc, #584]	; (800a4cc <_dtoa_r+0x354>)
 800a284:	f7f7 fb66 	bl	8001954 <__aeabi_dsub>
 800a288:	4a91      	ldr	r2, [pc, #580]	; (800a4d0 <_dtoa_r+0x358>)
 800a28a:	4b92      	ldr	r3, [pc, #584]	; (800a4d4 <_dtoa_r+0x35c>)
 800a28c:	f7f7 f8f6 	bl	800147c <__aeabi_dmul>
 800a290:	4a91      	ldr	r2, [pc, #580]	; (800a4d8 <_dtoa_r+0x360>)
 800a292:	4b92      	ldr	r3, [pc, #584]	; (800a4dc <_dtoa_r+0x364>)
 800a294:	f7f6 f982 	bl	800059c <__aeabi_dadd>
 800a298:	0004      	movs	r4, r0
 800a29a:	0030      	movs	r0, r6
 800a29c:	000d      	movs	r5, r1
 800a29e:	f7f7 ff3f 	bl	8002120 <__aeabi_i2d>
 800a2a2:	4a8f      	ldr	r2, [pc, #572]	; (800a4e0 <_dtoa_r+0x368>)
 800a2a4:	4b8f      	ldr	r3, [pc, #572]	; (800a4e4 <_dtoa_r+0x36c>)
 800a2a6:	f7f7 f8e9 	bl	800147c <__aeabi_dmul>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	000b      	movs	r3, r1
 800a2ae:	0020      	movs	r0, r4
 800a2b0:	0029      	movs	r1, r5
 800a2b2:	f7f6 f973 	bl	800059c <__aeabi_dadd>
 800a2b6:	0004      	movs	r4, r0
 800a2b8:	000d      	movs	r5, r1
 800a2ba:	f7f7 fefb 	bl	80020b4 <__aeabi_d2iz>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	9002      	str	r0, [sp, #8]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	0020      	movs	r0, r4
 800a2c6:	0029      	movs	r1, r5
 800a2c8:	f7f6 f8d0 	bl	800046c <__aeabi_dcmplt>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d00b      	beq.n	800a2e8 <_dtoa_r+0x170>
 800a2d0:	9802      	ldr	r0, [sp, #8]
 800a2d2:	f7f7 ff25 	bl	8002120 <__aeabi_i2d>
 800a2d6:	002b      	movs	r3, r5
 800a2d8:	0022      	movs	r2, r4
 800a2da:	f7f6 f8c1 	bl	8000460 <__aeabi_dcmpeq>
 800a2de:	4243      	negs	r3, r0
 800a2e0:	4158      	adcs	r0, r3
 800a2e2:	9b02      	ldr	r3, [sp, #8]
 800a2e4:	1a1b      	subs	r3, r3, r0
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	9315      	str	r3, [sp, #84]	; 0x54
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	2b16      	cmp	r3, #22
 800a2f0:	d80f      	bhi.n	800a312 <_dtoa_r+0x19a>
 800a2f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a2f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2f6:	00da      	lsls	r2, r3, #3
 800a2f8:	4b7b      	ldr	r3, [pc, #492]	; (800a4e8 <_dtoa_r+0x370>)
 800a2fa:	189b      	adds	r3, r3, r2
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f7f6 f8b4 	bl	800046c <__aeabi_dcmplt>
 800a304:	2800      	cmp	r0, #0
 800a306:	d049      	beq.n	800a39c <_dtoa_r+0x224>
 800a308:	9b02      	ldr	r3, [sp, #8]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	9302      	str	r3, [sp, #8]
 800a30e:	2300      	movs	r3, #0
 800a310:	9315      	str	r3, [sp, #84]	; 0x54
 800a312:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a314:	1b9e      	subs	r6, r3, r6
 800a316:	2300      	movs	r3, #0
 800a318:	9308      	str	r3, [sp, #32]
 800a31a:	0033      	movs	r3, r6
 800a31c:	3b01      	subs	r3, #1
 800a31e:	930d      	str	r3, [sp, #52]	; 0x34
 800a320:	d504      	bpl.n	800a32c <_dtoa_r+0x1b4>
 800a322:	2301      	movs	r3, #1
 800a324:	1b9b      	subs	r3, r3, r6
 800a326:	9308      	str	r3, [sp, #32]
 800a328:	2300      	movs	r3, #0
 800a32a:	930d      	str	r3, [sp, #52]	; 0x34
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	db36      	blt.n	800a3a0 <_dtoa_r+0x228>
 800a332:	9a02      	ldr	r2, [sp, #8]
 800a334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a336:	4694      	mov	ip, r2
 800a338:	4463      	add	r3, ip
 800a33a:	930d      	str	r3, [sp, #52]	; 0x34
 800a33c:	2300      	movs	r3, #0
 800a33e:	9214      	str	r2, [sp, #80]	; 0x50
 800a340:	930e      	str	r3, [sp, #56]	; 0x38
 800a342:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a344:	2401      	movs	r4, #1
 800a346:	2b09      	cmp	r3, #9
 800a348:	d862      	bhi.n	800a410 <_dtoa_r+0x298>
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	dd02      	ble.n	800a354 <_dtoa_r+0x1dc>
 800a34e:	2400      	movs	r4, #0
 800a350:	3b04      	subs	r3, #4
 800a352:	9322      	str	r3, [sp, #136]	; 0x88
 800a354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a356:	1e98      	subs	r0, r3, #2
 800a358:	2803      	cmp	r0, #3
 800a35a:	d862      	bhi.n	800a422 <_dtoa_r+0x2aa>
 800a35c:	f7f5 fee6 	bl	800012c <__gnu_thumb1_case_uqi>
 800a360:	56343629 	.word	0x56343629
 800a364:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a366:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a368:	189e      	adds	r6, r3, r2
 800a36a:	4b60      	ldr	r3, [pc, #384]	; (800a4ec <_dtoa_r+0x374>)
 800a36c:	18f2      	adds	r2, r6, r3
 800a36e:	2a20      	cmp	r2, #32
 800a370:	dd0f      	ble.n	800a392 <_dtoa_r+0x21a>
 800a372:	2340      	movs	r3, #64	; 0x40
 800a374:	1a9b      	subs	r3, r3, r2
 800a376:	409d      	lsls	r5, r3
 800a378:	4b5d      	ldr	r3, [pc, #372]	; (800a4f0 <_dtoa_r+0x378>)
 800a37a:	9802      	ldr	r0, [sp, #8]
 800a37c:	18f3      	adds	r3, r6, r3
 800a37e:	40d8      	lsrs	r0, r3
 800a380:	4328      	orrs	r0, r5
 800a382:	f7f7 fefd 	bl	8002180 <__aeabi_ui2d>
 800a386:	2301      	movs	r3, #1
 800a388:	4c5a      	ldr	r4, [pc, #360]	; (800a4f4 <_dtoa_r+0x37c>)
 800a38a:	3e01      	subs	r6, #1
 800a38c:	1909      	adds	r1, r1, r4
 800a38e:	9316      	str	r3, [sp, #88]	; 0x58
 800a390:	e776      	b.n	800a280 <_dtoa_r+0x108>
 800a392:	2320      	movs	r3, #32
 800a394:	9802      	ldr	r0, [sp, #8]
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	4098      	lsls	r0, r3
 800a39a:	e7f2      	b.n	800a382 <_dtoa_r+0x20a>
 800a39c:	9015      	str	r0, [sp, #84]	; 0x54
 800a39e:	e7b8      	b.n	800a312 <_dtoa_r+0x19a>
 800a3a0:	9b08      	ldr	r3, [sp, #32]
 800a3a2:	9a02      	ldr	r2, [sp, #8]
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	9308      	str	r3, [sp, #32]
 800a3a8:	4253      	negs	r3, r2
 800a3aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9314      	str	r3, [sp, #80]	; 0x50
 800a3b0:	e7c7      	b.n	800a342 <_dtoa_r+0x1ca>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dc36      	bgt.n	800a42a <_dtoa_r+0x2b2>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	001a      	movs	r2, r3
 800a3c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a3c2:	9306      	str	r3, [sp, #24]
 800a3c4:	9223      	str	r2, [sp, #140]	; 0x8c
 800a3c6:	e00d      	b.n	800a3e4 <_dtoa_r+0x26c>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7f3      	b.n	800a3b4 <_dtoa_r+0x23c>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a3d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3d2:	4694      	mov	ip, r2
 800a3d4:	9b02      	ldr	r3, [sp, #8]
 800a3d6:	4463      	add	r3, ip
 800a3d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a3da:	3301      	adds	r3, #1
 800a3dc:	9306      	str	r3, [sp, #24]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dc00      	bgt.n	800a3e4 <_dtoa_r+0x26c>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3e8:	6042      	str	r2, [r0, #4]
 800a3ea:	3204      	adds	r2, #4
 800a3ec:	0015      	movs	r5, r2
 800a3ee:	3514      	adds	r5, #20
 800a3f0:	6841      	ldr	r1, [r0, #4]
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	d91d      	bls.n	800a432 <_dtoa_r+0x2ba>
 800a3f6:	0038      	movs	r0, r7
 800a3f8:	f001 f896 	bl	800b528 <_Balloc>
 800a3fc:	9005      	str	r0, [sp, #20]
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d11b      	bne.n	800a43a <_dtoa_r+0x2c2>
 800a402:	21d5      	movs	r1, #213	; 0xd5
 800a404:	0002      	movs	r2, r0
 800a406:	4b3c      	ldr	r3, [pc, #240]	; (800a4f8 <_dtoa_r+0x380>)
 800a408:	0049      	lsls	r1, r1, #1
 800a40a:	e6ca      	b.n	800a1a2 <_dtoa_r+0x2a>
 800a40c:	2301      	movs	r3, #1
 800a40e:	e7de      	b.n	800a3ce <_dtoa_r+0x256>
 800a410:	2300      	movs	r3, #0
 800a412:	940f      	str	r4, [sp, #60]	; 0x3c
 800a414:	9322      	str	r3, [sp, #136]	; 0x88
 800a416:	3b01      	subs	r3, #1
 800a418:	930c      	str	r3, [sp, #48]	; 0x30
 800a41a:	9306      	str	r3, [sp, #24]
 800a41c:	2200      	movs	r2, #0
 800a41e:	3313      	adds	r3, #19
 800a420:	e7d0      	b.n	800a3c4 <_dtoa_r+0x24c>
 800a422:	2301      	movs	r3, #1
 800a424:	930f      	str	r3, [sp, #60]	; 0x3c
 800a426:	3b02      	subs	r3, #2
 800a428:	e7f6      	b.n	800a418 <_dtoa_r+0x2a0>
 800a42a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a42c:	930c      	str	r3, [sp, #48]	; 0x30
 800a42e:	9306      	str	r3, [sp, #24]
 800a430:	e7d8      	b.n	800a3e4 <_dtoa_r+0x26c>
 800a432:	3101      	adds	r1, #1
 800a434:	6041      	str	r1, [r0, #4]
 800a436:	0052      	lsls	r2, r2, #1
 800a438:	e7d8      	b.n	800a3ec <_dtoa_r+0x274>
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	9a05      	ldr	r2, [sp, #20]
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	9b06      	ldr	r3, [sp, #24]
 800a442:	2b0e      	cmp	r3, #14
 800a444:	d900      	bls.n	800a448 <_dtoa_r+0x2d0>
 800a446:	e0eb      	b.n	800a620 <_dtoa_r+0x4a8>
 800a448:	2c00      	cmp	r4, #0
 800a44a:	d100      	bne.n	800a44e <_dtoa_r+0x2d6>
 800a44c:	e0e8      	b.n	800a620 <_dtoa_r+0x4a8>
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	dd68      	ble.n	800a526 <_dtoa_r+0x3ae>
 800a454:	001a      	movs	r2, r3
 800a456:	210f      	movs	r1, #15
 800a458:	4b23      	ldr	r3, [pc, #140]	; (800a4e8 <_dtoa_r+0x370>)
 800a45a:	400a      	ands	r2, r1
 800a45c:	00d2      	lsls	r2, r2, #3
 800a45e:	189b      	adds	r3, r3, r2
 800a460:	681d      	ldr	r5, [r3, #0]
 800a462:	685e      	ldr	r6, [r3, #4]
 800a464:	9b02      	ldr	r3, [sp, #8]
 800a466:	111c      	asrs	r4, r3, #4
 800a468:	2302      	movs	r3, #2
 800a46a:	9310      	str	r3, [sp, #64]	; 0x40
 800a46c:	9b02      	ldr	r3, [sp, #8]
 800a46e:	05db      	lsls	r3, r3, #23
 800a470:	d50b      	bpl.n	800a48a <_dtoa_r+0x312>
 800a472:	4b22      	ldr	r3, [pc, #136]	; (800a4fc <_dtoa_r+0x384>)
 800a474:	400c      	ands	r4, r1
 800a476:	6a1a      	ldr	r2, [r3, #32]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a47c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a47e:	f7f6 fbf7 	bl	8000c70 <__aeabi_ddiv>
 800a482:	2303      	movs	r3, #3
 800a484:	900a      	str	r0, [sp, #40]	; 0x28
 800a486:	910b      	str	r1, [sp, #44]	; 0x2c
 800a488:	9310      	str	r3, [sp, #64]	; 0x40
 800a48a:	4b1c      	ldr	r3, [pc, #112]	; (800a4fc <_dtoa_r+0x384>)
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	2c00      	cmp	r4, #0
 800a490:	d136      	bne.n	800a500 <_dtoa_r+0x388>
 800a492:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a496:	002a      	movs	r2, r5
 800a498:	0033      	movs	r3, r6
 800a49a:	f7f6 fbe9 	bl	8000c70 <__aeabi_ddiv>
 800a49e:	900a      	str	r0, [sp, #40]	; 0x28
 800a4a0:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4a2:	e05c      	b.n	800a55e <_dtoa_r+0x3e6>
 800a4a4:	0800d9ae 	.word	0x0800d9ae
 800a4a8:	0800d9c5 	.word	0x0800d9c5
 800a4ac:	7ff00000 	.word	0x7ff00000
 800a4b0:	0000270f 	.word	0x0000270f
 800a4b4:	0800d9aa 	.word	0x0800d9aa
 800a4b8:	0800d9ad 	.word	0x0800d9ad
 800a4bc:	0800dc29 	.word	0x0800dc29
 800a4c0:	0800dc2a 	.word	0x0800dc2a
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	fffffc01 	.word	0xfffffc01
 800a4cc:	3ff80000 	.word	0x3ff80000
 800a4d0:	636f4361 	.word	0x636f4361
 800a4d4:	3fd287a7 	.word	0x3fd287a7
 800a4d8:	8b60c8b3 	.word	0x8b60c8b3
 800a4dc:	3fc68a28 	.word	0x3fc68a28
 800a4e0:	509f79fb 	.word	0x509f79fb
 800a4e4:	3fd34413 	.word	0x3fd34413
 800a4e8:	0800db40 	.word	0x0800db40
 800a4ec:	00000432 	.word	0x00000432
 800a4f0:	00000412 	.word	0x00000412
 800a4f4:	fe100000 	.word	0xfe100000
 800a4f8:	0800da24 	.word	0x0800da24
 800a4fc:	0800db18 	.word	0x0800db18
 800a500:	2301      	movs	r3, #1
 800a502:	421c      	tst	r4, r3
 800a504:	d00b      	beq.n	800a51e <_dtoa_r+0x3a6>
 800a506:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a508:	0028      	movs	r0, r5
 800a50a:	3301      	adds	r3, #1
 800a50c:	9310      	str	r3, [sp, #64]	; 0x40
 800a50e:	9b07      	ldr	r3, [sp, #28]
 800a510:	0031      	movs	r1, r6
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f7f6 ffb1 	bl	800147c <__aeabi_dmul>
 800a51a:	0005      	movs	r5, r0
 800a51c:	000e      	movs	r6, r1
 800a51e:	9b07      	ldr	r3, [sp, #28]
 800a520:	1064      	asrs	r4, r4, #1
 800a522:	3308      	adds	r3, #8
 800a524:	e7b2      	b.n	800a48c <_dtoa_r+0x314>
 800a526:	2302      	movs	r3, #2
 800a528:	9310      	str	r3, [sp, #64]	; 0x40
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d016      	beq.n	800a55e <_dtoa_r+0x3e6>
 800a530:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a532:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a534:	425c      	negs	r4, r3
 800a536:	230f      	movs	r3, #15
 800a538:	4ab5      	ldr	r2, [pc, #724]	; (800a810 <_dtoa_r+0x698>)
 800a53a:	4023      	ands	r3, r4
 800a53c:	00db      	lsls	r3, r3, #3
 800a53e:	18d3      	adds	r3, r2, r3
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f7f6 ff9a 	bl	800147c <__aeabi_dmul>
 800a548:	2601      	movs	r6, #1
 800a54a:	2300      	movs	r3, #0
 800a54c:	900a      	str	r0, [sp, #40]	; 0x28
 800a54e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a550:	4db0      	ldr	r5, [pc, #704]	; (800a814 <_dtoa_r+0x69c>)
 800a552:	1124      	asrs	r4, r4, #4
 800a554:	2c00      	cmp	r4, #0
 800a556:	d000      	beq.n	800a55a <_dtoa_r+0x3e2>
 800a558:	e094      	b.n	800a684 <_dtoa_r+0x50c>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d19f      	bne.n	800a49e <_dtoa_r+0x326>
 800a55e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a560:	2b00      	cmp	r3, #0
 800a562:	d100      	bne.n	800a566 <_dtoa_r+0x3ee>
 800a564:	e09b      	b.n	800a69e <_dtoa_r+0x526>
 800a566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a568:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a56a:	2200      	movs	r2, #0
 800a56c:	0020      	movs	r0, r4
 800a56e:	0029      	movs	r1, r5
 800a570:	4ba9      	ldr	r3, [pc, #676]	; (800a818 <_dtoa_r+0x6a0>)
 800a572:	f7f5 ff7b 	bl	800046c <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	d100      	bne.n	800a57c <_dtoa_r+0x404>
 800a57a:	e090      	b.n	800a69e <_dtoa_r+0x526>
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d100      	bne.n	800a584 <_dtoa_r+0x40c>
 800a582:	e08c      	b.n	800a69e <_dtoa_r+0x526>
 800a584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a586:	2b00      	cmp	r3, #0
 800a588:	dd46      	ble.n	800a618 <_dtoa_r+0x4a0>
 800a58a:	9b02      	ldr	r3, [sp, #8]
 800a58c:	2200      	movs	r2, #0
 800a58e:	0020      	movs	r0, r4
 800a590:	0029      	movs	r1, r5
 800a592:	1e5e      	subs	r6, r3, #1
 800a594:	4ba1      	ldr	r3, [pc, #644]	; (800a81c <_dtoa_r+0x6a4>)
 800a596:	f7f6 ff71 	bl	800147c <__aeabi_dmul>
 800a59a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a59c:	900a      	str	r0, [sp, #40]	; 0x28
 800a59e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	9310      	str	r3, [sp, #64]	; 0x40
 800a5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a5ac:	9307      	str	r3, [sp, #28]
 800a5ae:	f7f7 fdb7 	bl	8002120 <__aeabi_i2d>
 800a5b2:	0022      	movs	r2, r4
 800a5b4:	002b      	movs	r3, r5
 800a5b6:	f7f6 ff61 	bl	800147c <__aeabi_dmul>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4b98      	ldr	r3, [pc, #608]	; (800a820 <_dtoa_r+0x6a8>)
 800a5be:	f7f5 ffed 	bl	800059c <__aeabi_dadd>
 800a5c2:	9010      	str	r0, [sp, #64]	; 0x40
 800a5c4:	9111      	str	r1, [sp, #68]	; 0x44
 800a5c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5ca:	920a      	str	r2, [sp, #40]	; 0x28
 800a5cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ce:	4a95      	ldr	r2, [pc, #596]	; (800a824 <_dtoa_r+0x6ac>)
 800a5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5d2:	4694      	mov	ip, r2
 800a5d4:	4463      	add	r3, ip
 800a5d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5da:	9b07      	ldr	r3, [sp, #28]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d161      	bne.n	800a6a4 <_dtoa_r+0x52c>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	0020      	movs	r0, r4
 800a5e4:	0029      	movs	r1, r5
 800a5e6:	4b90      	ldr	r3, [pc, #576]	; (800a828 <_dtoa_r+0x6b0>)
 800a5e8:	f7f7 f9b4 	bl	8001954 <__aeabi_dsub>
 800a5ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f0:	0004      	movs	r4, r0
 800a5f2:	000d      	movs	r5, r1
 800a5f4:	f7f5 ff4e 	bl	8000494 <__aeabi_dcmpgt>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d000      	beq.n	800a5fe <_dtoa_r+0x486>
 800a5fc:	e2b5      	b.n	800ab6a <_dtoa_r+0x9f2>
 800a5fe:	488b      	ldr	r0, [pc, #556]	; (800a82c <_dtoa_r+0x6b4>)
 800a600:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a602:	4684      	mov	ip, r0
 800a604:	4461      	add	r1, ip
 800a606:	000b      	movs	r3, r1
 800a608:	0020      	movs	r0, r4
 800a60a:	0029      	movs	r1, r5
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	f7f5 ff2d 	bl	800046c <__aeabi_dcmplt>
 800a612:	2800      	cmp	r0, #0
 800a614:	d000      	beq.n	800a618 <_dtoa_r+0x4a0>
 800a616:	e2a5      	b.n	800ab64 <_dtoa_r+0x9ec>
 800a618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a61a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a61c:	930a      	str	r3, [sp, #40]	; 0x28
 800a61e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a622:	2b00      	cmp	r3, #0
 800a624:	da00      	bge.n	800a628 <_dtoa_r+0x4b0>
 800a626:	e171      	b.n	800a90c <_dtoa_r+0x794>
 800a628:	9a02      	ldr	r2, [sp, #8]
 800a62a:	2a0e      	cmp	r2, #14
 800a62c:	dd00      	ble.n	800a630 <_dtoa_r+0x4b8>
 800a62e:	e16d      	b.n	800a90c <_dtoa_r+0x794>
 800a630:	4b77      	ldr	r3, [pc, #476]	; (800a810 <_dtoa_r+0x698>)
 800a632:	00d2      	lsls	r2, r2, #3
 800a634:	189b      	adds	r3, r3, r2
 800a636:	685c      	ldr	r4, [r3, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	9308      	str	r3, [sp, #32]
 800a63c:	9409      	str	r4, [sp, #36]	; 0x24
 800a63e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a640:	2b00      	cmp	r3, #0
 800a642:	db00      	blt.n	800a646 <_dtoa_r+0x4ce>
 800a644:	e0f6      	b.n	800a834 <_dtoa_r+0x6bc>
 800a646:	9b06      	ldr	r3, [sp, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dd00      	ble.n	800a64e <_dtoa_r+0x4d6>
 800a64c:	e0f2      	b.n	800a834 <_dtoa_r+0x6bc>
 800a64e:	d000      	beq.n	800a652 <_dtoa_r+0x4da>
 800a650:	e288      	b.n	800ab64 <_dtoa_r+0x9ec>
 800a652:	9808      	ldr	r0, [sp, #32]
 800a654:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a656:	2200      	movs	r2, #0
 800a658:	4b73      	ldr	r3, [pc, #460]	; (800a828 <_dtoa_r+0x6b0>)
 800a65a:	f7f6 ff0f 	bl	800147c <__aeabi_dmul>
 800a65e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a662:	f7f5 ff21 	bl	80004a8 <__aeabi_dcmpge>
 800a666:	9e06      	ldr	r6, [sp, #24]
 800a668:	0035      	movs	r5, r6
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d000      	beq.n	800a670 <_dtoa_r+0x4f8>
 800a66e:	e25f      	b.n	800ab30 <_dtoa_r+0x9b8>
 800a670:	9b05      	ldr	r3, [sp, #20]
 800a672:	9a05      	ldr	r2, [sp, #20]
 800a674:	3301      	adds	r3, #1
 800a676:	9307      	str	r3, [sp, #28]
 800a678:	2331      	movs	r3, #49	; 0x31
 800a67a:	7013      	strb	r3, [r2, #0]
 800a67c:	9b02      	ldr	r3, [sp, #8]
 800a67e:	3301      	adds	r3, #1
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	e25a      	b.n	800ab3a <_dtoa_r+0x9c2>
 800a684:	4234      	tst	r4, r6
 800a686:	d007      	beq.n	800a698 <_dtoa_r+0x520>
 800a688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a68a:	3301      	adds	r3, #1
 800a68c:	9310      	str	r3, [sp, #64]	; 0x40
 800a68e:	682a      	ldr	r2, [r5, #0]
 800a690:	686b      	ldr	r3, [r5, #4]
 800a692:	f7f6 fef3 	bl	800147c <__aeabi_dmul>
 800a696:	0033      	movs	r3, r6
 800a698:	1064      	asrs	r4, r4, #1
 800a69a:	3508      	adds	r5, #8
 800a69c:	e75a      	b.n	800a554 <_dtoa_r+0x3dc>
 800a69e:	9e02      	ldr	r6, [sp, #8]
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	e780      	b.n	800a5a6 <_dtoa_r+0x42e>
 800a6a4:	9b07      	ldr	r3, [sp, #28]
 800a6a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6a8:	1e5a      	subs	r2, r3, #1
 800a6aa:	4b59      	ldr	r3, [pc, #356]	; (800a810 <_dtoa_r+0x698>)
 800a6ac:	00d2      	lsls	r2, r2, #3
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	2900      	cmp	r1, #0
 800a6b6:	d051      	beq.n	800a75c <_dtoa_r+0x5e4>
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	495d      	ldr	r1, [pc, #372]	; (800a830 <_dtoa_r+0x6b8>)
 800a6bc:	f7f6 fad8 	bl	8000c70 <__aeabi_ddiv>
 800a6c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c4:	f7f7 f946 	bl	8001954 <__aeabi_dsub>
 800a6c8:	9a05      	ldr	r2, [sp, #20]
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	4694      	mov	ip, r2
 800a6ce:	9310      	str	r3, [sp, #64]	; 0x40
 800a6d0:	9b07      	ldr	r3, [sp, #28]
 800a6d2:	900a      	str	r0, [sp, #40]	; 0x28
 800a6d4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6d6:	4463      	add	r3, ip
 800a6d8:	9319      	str	r3, [sp, #100]	; 0x64
 800a6da:	0029      	movs	r1, r5
 800a6dc:	0020      	movs	r0, r4
 800a6de:	f7f7 fce9 	bl	80020b4 <__aeabi_d2iz>
 800a6e2:	9017      	str	r0, [sp, #92]	; 0x5c
 800a6e4:	f7f7 fd1c 	bl	8002120 <__aeabi_i2d>
 800a6e8:	0002      	movs	r2, r0
 800a6ea:	000b      	movs	r3, r1
 800a6ec:	0020      	movs	r0, r4
 800a6ee:	0029      	movs	r1, r5
 800a6f0:	f7f7 f930 	bl	8001954 <__aeabi_dsub>
 800a6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6fe:	0004      	movs	r4, r0
 800a700:	3330      	adds	r3, #48	; 0x30
 800a702:	7013      	strb	r3, [r2, #0]
 800a704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a708:	000d      	movs	r5, r1
 800a70a:	f7f5 feaf 	bl	800046c <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d175      	bne.n	800a7fe <_dtoa_r+0x686>
 800a712:	0022      	movs	r2, r4
 800a714:	002b      	movs	r3, r5
 800a716:	2000      	movs	r0, #0
 800a718:	493f      	ldr	r1, [pc, #252]	; (800a818 <_dtoa_r+0x6a0>)
 800a71a:	f7f7 f91b 	bl	8001954 <__aeabi_dsub>
 800a71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a722:	f7f5 fea3 	bl	800046c <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d000      	beq.n	800a72c <_dtoa_r+0x5b4>
 800a72a:	e0d1      	b.n	800a8d0 <_dtoa_r+0x758>
 800a72c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a72e:	9a07      	ldr	r2, [sp, #28]
 800a730:	4293      	cmp	r3, r2
 800a732:	d100      	bne.n	800a736 <_dtoa_r+0x5be>
 800a734:	e770      	b.n	800a618 <_dtoa_r+0x4a0>
 800a736:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a738:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a73a:	2200      	movs	r2, #0
 800a73c:	4b37      	ldr	r3, [pc, #220]	; (800a81c <_dtoa_r+0x6a4>)
 800a73e:	f7f6 fe9d 	bl	800147c <__aeabi_dmul>
 800a742:	4b36      	ldr	r3, [pc, #216]	; (800a81c <_dtoa_r+0x6a4>)
 800a744:	900a      	str	r0, [sp, #40]	; 0x28
 800a746:	910b      	str	r1, [sp, #44]	; 0x2c
 800a748:	2200      	movs	r2, #0
 800a74a:	0020      	movs	r0, r4
 800a74c:	0029      	movs	r1, r5
 800a74e:	f7f6 fe95 	bl	800147c <__aeabi_dmul>
 800a752:	9b07      	ldr	r3, [sp, #28]
 800a754:	0004      	movs	r4, r0
 800a756:	000d      	movs	r5, r1
 800a758:	9310      	str	r3, [sp, #64]	; 0x40
 800a75a:	e7be      	b.n	800a6da <_dtoa_r+0x562>
 800a75c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a75e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a760:	f7f6 fe8c 	bl	800147c <__aeabi_dmul>
 800a764:	9a05      	ldr	r2, [sp, #20]
 800a766:	9b05      	ldr	r3, [sp, #20]
 800a768:	4694      	mov	ip, r2
 800a76a:	930a      	str	r3, [sp, #40]	; 0x28
 800a76c:	9b07      	ldr	r3, [sp, #28]
 800a76e:	9010      	str	r0, [sp, #64]	; 0x40
 800a770:	9111      	str	r1, [sp, #68]	; 0x44
 800a772:	4463      	add	r3, ip
 800a774:	9319      	str	r3, [sp, #100]	; 0x64
 800a776:	0029      	movs	r1, r5
 800a778:	0020      	movs	r0, r4
 800a77a:	f7f7 fc9b 	bl	80020b4 <__aeabi_d2iz>
 800a77e:	9017      	str	r0, [sp, #92]	; 0x5c
 800a780:	f7f7 fcce 	bl	8002120 <__aeabi_i2d>
 800a784:	0002      	movs	r2, r0
 800a786:	000b      	movs	r3, r1
 800a788:	0020      	movs	r0, r4
 800a78a:	0029      	movs	r1, r5
 800a78c:	f7f7 f8e2 	bl	8001954 <__aeabi_dsub>
 800a790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a794:	3330      	adds	r3, #48	; 0x30
 800a796:	7013      	strb	r3, [r2, #0]
 800a798:	0013      	movs	r3, r2
 800a79a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a79c:	3301      	adds	r3, #1
 800a79e:	0004      	movs	r4, r0
 800a7a0:	000d      	movs	r5, r1
 800a7a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d12c      	bne.n	800a802 <_dtoa_r+0x68a>
 800a7a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a7aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7ac:	9a05      	ldr	r2, [sp, #20]
 800a7ae:	9b07      	ldr	r3, [sp, #28]
 800a7b0:	4694      	mov	ip, r2
 800a7b2:	4463      	add	r3, ip
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	9307      	str	r3, [sp, #28]
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <_dtoa_r+0x6b8>)
 800a7ba:	f7f5 feef 	bl	800059c <__aeabi_dadd>
 800a7be:	0002      	movs	r2, r0
 800a7c0:	000b      	movs	r3, r1
 800a7c2:	0020      	movs	r0, r4
 800a7c4:	0029      	movs	r1, r5
 800a7c6:	f7f5 fe65 	bl	8000494 <__aeabi_dcmpgt>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d000      	beq.n	800a7d0 <_dtoa_r+0x658>
 800a7ce:	e07f      	b.n	800a8d0 <_dtoa_r+0x758>
 800a7d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	4916      	ldr	r1, [pc, #88]	; (800a830 <_dtoa_r+0x6b8>)
 800a7d8:	f7f7 f8bc 	bl	8001954 <__aeabi_dsub>
 800a7dc:	0002      	movs	r2, r0
 800a7de:	000b      	movs	r3, r1
 800a7e0:	0020      	movs	r0, r4
 800a7e2:	0029      	movs	r1, r5
 800a7e4:	f7f5 fe42 	bl	800046c <__aeabi_dcmplt>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d100      	bne.n	800a7ee <_dtoa_r+0x676>
 800a7ec:	e714      	b.n	800a618 <_dtoa_r+0x4a0>
 800a7ee:	9b07      	ldr	r3, [sp, #28]
 800a7f0:	001a      	movs	r2, r3
 800a7f2:	3a01      	subs	r2, #1
 800a7f4:	9207      	str	r2, [sp, #28]
 800a7f6:	7812      	ldrb	r2, [r2, #0]
 800a7f8:	2a30      	cmp	r2, #48	; 0x30
 800a7fa:	d0f8      	beq.n	800a7ee <_dtoa_r+0x676>
 800a7fc:	9307      	str	r3, [sp, #28]
 800a7fe:	9602      	str	r6, [sp, #8]
 800a800:	e054      	b.n	800a8ac <_dtoa_r+0x734>
 800a802:	2200      	movs	r2, #0
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <_dtoa_r+0x6a4>)
 800a806:	f7f6 fe39 	bl	800147c <__aeabi_dmul>
 800a80a:	0004      	movs	r4, r0
 800a80c:	000d      	movs	r5, r1
 800a80e:	e7b2      	b.n	800a776 <_dtoa_r+0x5fe>
 800a810:	0800db40 	.word	0x0800db40
 800a814:	0800db18 	.word	0x0800db18
 800a818:	3ff00000 	.word	0x3ff00000
 800a81c:	40240000 	.word	0x40240000
 800a820:	401c0000 	.word	0x401c0000
 800a824:	fcc00000 	.word	0xfcc00000
 800a828:	40140000 	.word	0x40140000
 800a82c:	7cc00000 	.word	0x7cc00000
 800a830:	3fe00000 	.word	0x3fe00000
 800a834:	9b06      	ldr	r3, [sp, #24]
 800a836:	9e05      	ldr	r6, [sp, #20]
 800a838:	3b01      	subs	r3, #1
 800a83a:	199b      	adds	r3, r3, r6
 800a83c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a83e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a840:	930a      	str	r3, [sp, #40]	; 0x28
 800a842:	9a08      	ldr	r2, [sp, #32]
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	0020      	movs	r0, r4
 800a848:	0029      	movs	r1, r5
 800a84a:	f7f6 fa11 	bl	8000c70 <__aeabi_ddiv>
 800a84e:	f7f7 fc31 	bl	80020b4 <__aeabi_d2iz>
 800a852:	9006      	str	r0, [sp, #24]
 800a854:	f7f7 fc64 	bl	8002120 <__aeabi_i2d>
 800a858:	9a08      	ldr	r2, [sp, #32]
 800a85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85c:	f7f6 fe0e 	bl	800147c <__aeabi_dmul>
 800a860:	0002      	movs	r2, r0
 800a862:	000b      	movs	r3, r1
 800a864:	0020      	movs	r0, r4
 800a866:	0029      	movs	r1, r5
 800a868:	f7f7 f874 	bl	8001954 <__aeabi_dsub>
 800a86c:	0033      	movs	r3, r6
 800a86e:	9a06      	ldr	r2, [sp, #24]
 800a870:	3601      	adds	r6, #1
 800a872:	3230      	adds	r2, #48	; 0x30
 800a874:	701a      	strb	r2, [r3, #0]
 800a876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a878:	9607      	str	r6, [sp, #28]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d139      	bne.n	800a8f2 <_dtoa_r+0x77a>
 800a87e:	0002      	movs	r2, r0
 800a880:	000b      	movs	r3, r1
 800a882:	f7f5 fe8b 	bl	800059c <__aeabi_dadd>
 800a886:	9a08      	ldr	r2, [sp, #32]
 800a888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88a:	0004      	movs	r4, r0
 800a88c:	000d      	movs	r5, r1
 800a88e:	f7f5 fe01 	bl	8000494 <__aeabi_dcmpgt>
 800a892:	2800      	cmp	r0, #0
 800a894:	d11b      	bne.n	800a8ce <_dtoa_r+0x756>
 800a896:	9a08      	ldr	r2, [sp, #32]
 800a898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89a:	0020      	movs	r0, r4
 800a89c:	0029      	movs	r1, r5
 800a89e:	f7f5 fddf 	bl	8000460 <__aeabi_dcmpeq>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d002      	beq.n	800a8ac <_dtoa_r+0x734>
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	07db      	lsls	r3, r3, #31
 800a8aa:	d410      	bmi.n	800a8ce <_dtoa_r+0x756>
 800a8ac:	0038      	movs	r0, r7
 800a8ae:	9904      	ldr	r1, [sp, #16]
 800a8b0:	f000 fe7e 	bl	800b5b0 <_Bfree>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9a07      	ldr	r2, [sp, #28]
 800a8b8:	9802      	ldr	r0, [sp, #8]
 800a8ba:	7013      	strb	r3, [r2, #0]
 800a8bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a8be:	3001      	adds	r0, #1
 800a8c0:	6018      	str	r0, [r3, #0]
 800a8c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d100      	bne.n	800a8ca <_dtoa_r+0x752>
 800a8c8:	e4a3      	b.n	800a212 <_dtoa_r+0x9a>
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	e4a1      	b.n	800a212 <_dtoa_r+0x9a>
 800a8ce:	9e02      	ldr	r6, [sp, #8]
 800a8d0:	9b07      	ldr	r3, [sp, #28]
 800a8d2:	9307      	str	r3, [sp, #28]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	2a39      	cmp	r2, #57	; 0x39
 800a8da:	d106      	bne.n	800a8ea <_dtoa_r+0x772>
 800a8dc:	9a05      	ldr	r2, [sp, #20]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d1f7      	bne.n	800a8d2 <_dtoa_r+0x75a>
 800a8e2:	2230      	movs	r2, #48	; 0x30
 800a8e4:	9905      	ldr	r1, [sp, #20]
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	700a      	strb	r2, [r1, #0]
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e785      	b.n	800a7fe <_dtoa_r+0x686>
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4bad      	ldr	r3, [pc, #692]	; (800abac <_dtoa_r+0xa34>)
 800a8f6:	f7f6 fdc1 	bl	800147c <__aeabi_dmul>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	0004      	movs	r4, r0
 800a900:	000d      	movs	r5, r1
 800a902:	f7f5 fdad 	bl	8000460 <__aeabi_dcmpeq>
 800a906:	2800      	cmp	r0, #0
 800a908:	d09b      	beq.n	800a842 <_dtoa_r+0x6ca>
 800a90a:	e7cf      	b.n	800a8ac <_dtoa_r+0x734>
 800a90c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a90e:	2a00      	cmp	r2, #0
 800a910:	d100      	bne.n	800a914 <_dtoa_r+0x79c>
 800a912:	e082      	b.n	800aa1a <_dtoa_r+0x8a2>
 800a914:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a916:	2a01      	cmp	r2, #1
 800a918:	dc66      	bgt.n	800a9e8 <_dtoa_r+0x870>
 800a91a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a91c:	2a00      	cmp	r2, #0
 800a91e:	d05f      	beq.n	800a9e0 <_dtoa_r+0x868>
 800a920:	4aa3      	ldr	r2, [pc, #652]	; (800abb0 <_dtoa_r+0xa38>)
 800a922:	189b      	adds	r3, r3, r2
 800a924:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a926:	9c08      	ldr	r4, [sp, #32]
 800a928:	9a08      	ldr	r2, [sp, #32]
 800a92a:	2101      	movs	r1, #1
 800a92c:	18d2      	adds	r2, r2, r3
 800a92e:	9208      	str	r2, [sp, #32]
 800a930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a932:	0038      	movs	r0, r7
 800a934:	18d3      	adds	r3, r2, r3
 800a936:	930d      	str	r3, [sp, #52]	; 0x34
 800a938:	f000 ff36 	bl	800b7a8 <__i2b>
 800a93c:	0005      	movs	r5, r0
 800a93e:	2c00      	cmp	r4, #0
 800a940:	dd0e      	ble.n	800a960 <_dtoa_r+0x7e8>
 800a942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a944:	2b00      	cmp	r3, #0
 800a946:	dd0b      	ble.n	800a960 <_dtoa_r+0x7e8>
 800a948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a94a:	0023      	movs	r3, r4
 800a94c:	4294      	cmp	r4, r2
 800a94e:	dd00      	ble.n	800a952 <_dtoa_r+0x7da>
 800a950:	0013      	movs	r3, r2
 800a952:	9a08      	ldr	r2, [sp, #32]
 800a954:	1ae4      	subs	r4, r4, r3
 800a956:	1ad2      	subs	r2, r2, r3
 800a958:	9208      	str	r2, [sp, #32]
 800a95a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	930d      	str	r3, [sp, #52]	; 0x34
 800a960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01f      	beq.n	800a9a6 <_dtoa_r+0x82e>
 800a966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d05a      	beq.n	800aa22 <_dtoa_r+0x8aa>
 800a96c:	2e00      	cmp	r6, #0
 800a96e:	dd11      	ble.n	800a994 <_dtoa_r+0x81c>
 800a970:	0029      	movs	r1, r5
 800a972:	0032      	movs	r2, r6
 800a974:	0038      	movs	r0, r7
 800a976:	f000 ffdd 	bl	800b934 <__pow5mult>
 800a97a:	9a04      	ldr	r2, [sp, #16]
 800a97c:	0001      	movs	r1, r0
 800a97e:	0005      	movs	r5, r0
 800a980:	0038      	movs	r0, r7
 800a982:	f000 ff27 	bl	800b7d4 <__multiply>
 800a986:	9904      	ldr	r1, [sp, #16]
 800a988:	9007      	str	r0, [sp, #28]
 800a98a:	0038      	movs	r0, r7
 800a98c:	f000 fe10 	bl	800b5b0 <_Bfree>
 800a990:	9b07      	ldr	r3, [sp, #28]
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a996:	1b9a      	subs	r2, r3, r6
 800a998:	42b3      	cmp	r3, r6
 800a99a:	d004      	beq.n	800a9a6 <_dtoa_r+0x82e>
 800a99c:	0038      	movs	r0, r7
 800a99e:	9904      	ldr	r1, [sp, #16]
 800a9a0:	f000 ffc8 	bl	800b934 <__pow5mult>
 800a9a4:	9004      	str	r0, [sp, #16]
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	0038      	movs	r0, r7
 800a9aa:	f000 fefd 	bl	800b7a8 <__i2b>
 800a9ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9b0:	0006      	movs	r6, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dd37      	ble.n	800aa26 <_dtoa_r+0x8ae>
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	0001      	movs	r1, r0
 800a9ba:	0038      	movs	r0, r7
 800a9bc:	f000 ffba 	bl	800b934 <__pow5mult>
 800a9c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9c2:	0006      	movs	r6, r0
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	dd33      	ble.n	800aa30 <_dtoa_r+0x8b8>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9307      	str	r3, [sp, #28]
 800a9cc:	6933      	ldr	r3, [r6, #16]
 800a9ce:	3303      	adds	r3, #3
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	18f3      	adds	r3, r6, r3
 800a9d4:	6858      	ldr	r0, [r3, #4]
 800a9d6:	f000 fe9f 	bl	800b718 <__hi0bits>
 800a9da:	2320      	movs	r3, #32
 800a9dc:	1a18      	subs	r0, r3, r0
 800a9de:	e03f      	b.n	800aa60 <_dtoa_r+0x8e8>
 800a9e0:	2336      	movs	r3, #54	; 0x36
 800a9e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	e79d      	b.n	800a924 <_dtoa_r+0x7ac>
 800a9e8:	9b06      	ldr	r3, [sp, #24]
 800a9ea:	1e5e      	subs	r6, r3, #1
 800a9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ee:	42b3      	cmp	r3, r6
 800a9f0:	db08      	blt.n	800aa04 <_dtoa_r+0x88c>
 800a9f2:	1b9e      	subs	r6, r3, r6
 800a9f4:	9b06      	ldr	r3, [sp, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	da0c      	bge.n	800aa14 <_dtoa_r+0x89c>
 800a9fa:	9b08      	ldr	r3, [sp, #32]
 800a9fc:	9a06      	ldr	r2, [sp, #24]
 800a9fe:	1a9c      	subs	r4, r3, r2
 800aa00:	2300      	movs	r3, #0
 800aa02:	e791      	b.n	800a928 <_dtoa_r+0x7b0>
 800aa04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa08:	1af3      	subs	r3, r6, r3
 800aa0a:	18d3      	adds	r3, r2, r3
 800aa0c:	960e      	str	r6, [sp, #56]	; 0x38
 800aa0e:	9314      	str	r3, [sp, #80]	; 0x50
 800aa10:	2600      	movs	r6, #0
 800aa12:	e7ef      	b.n	800a9f4 <_dtoa_r+0x87c>
 800aa14:	9c08      	ldr	r4, [sp, #32]
 800aa16:	9b06      	ldr	r3, [sp, #24]
 800aa18:	e786      	b.n	800a928 <_dtoa_r+0x7b0>
 800aa1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aa1c:	9c08      	ldr	r4, [sp, #32]
 800aa1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa20:	e78d      	b.n	800a93e <_dtoa_r+0x7c6>
 800aa22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa24:	e7ba      	b.n	800a99c <_dtoa_r+0x824>
 800aa26:	2300      	movs	r3, #0
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	dc13      	bgt.n	800aa58 <_dtoa_r+0x8e0>
 800aa30:	2300      	movs	r3, #0
 800aa32:	9307      	str	r3, [sp, #28]
 800aa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10e      	bne.n	800aa58 <_dtoa_r+0x8e0>
 800aa3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa3c:	031b      	lsls	r3, r3, #12
 800aa3e:	d10b      	bne.n	800aa58 <_dtoa_r+0x8e0>
 800aa40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa44:	4213      	tst	r3, r2
 800aa46:	d007      	beq.n	800aa58 <_dtoa_r+0x8e0>
 800aa48:	9b08      	ldr	r3, [sp, #32]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	9308      	str	r3, [sp, #32]
 800aa4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa50:	3301      	adds	r3, #1
 800aa52:	930d      	str	r3, [sp, #52]	; 0x34
 800aa54:	2301      	movs	r3, #1
 800aa56:	9307      	str	r3, [sp, #28]
 800aa58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa5a:	2001      	movs	r0, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1b5      	bne.n	800a9cc <_dtoa_r+0x854>
 800aa60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa62:	221f      	movs	r2, #31
 800aa64:	1818      	adds	r0, r3, r0
 800aa66:	0003      	movs	r3, r0
 800aa68:	4013      	ands	r3, r2
 800aa6a:	4210      	tst	r0, r2
 800aa6c:	d046      	beq.n	800aafc <_dtoa_r+0x984>
 800aa6e:	3201      	adds	r2, #1
 800aa70:	1ad2      	subs	r2, r2, r3
 800aa72:	2a04      	cmp	r2, #4
 800aa74:	dd3f      	ble.n	800aaf6 <_dtoa_r+0x97e>
 800aa76:	221c      	movs	r2, #28
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	9a08      	ldr	r2, [sp, #32]
 800aa7c:	18e4      	adds	r4, r4, r3
 800aa7e:	18d2      	adds	r2, r2, r3
 800aa80:	9208      	str	r2, [sp, #32]
 800aa82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa84:	18d3      	adds	r3, r2, r3
 800aa86:	930d      	str	r3, [sp, #52]	; 0x34
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd05      	ble.n	800aa9a <_dtoa_r+0x922>
 800aa8e:	001a      	movs	r2, r3
 800aa90:	0038      	movs	r0, r7
 800aa92:	9904      	ldr	r1, [sp, #16]
 800aa94:	f000 ffaa 	bl	800b9ec <__lshift>
 800aa98:	9004      	str	r0, [sp, #16]
 800aa9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dd05      	ble.n	800aaac <_dtoa_r+0x934>
 800aaa0:	0031      	movs	r1, r6
 800aaa2:	001a      	movs	r2, r3
 800aaa4:	0038      	movs	r0, r7
 800aaa6:	f000 ffa1 	bl	800b9ec <__lshift>
 800aaaa:	0006      	movs	r6, r0
 800aaac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d026      	beq.n	800ab00 <_dtoa_r+0x988>
 800aab2:	0031      	movs	r1, r6
 800aab4:	9804      	ldr	r0, [sp, #16]
 800aab6:	f001 f809 	bl	800bacc <__mcmp>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	da20      	bge.n	800ab00 <_dtoa_r+0x988>
 800aabe:	9b02      	ldr	r3, [sp, #8]
 800aac0:	220a      	movs	r2, #10
 800aac2:	3b01      	subs	r3, #1
 800aac4:	9302      	str	r3, [sp, #8]
 800aac6:	0038      	movs	r0, r7
 800aac8:	2300      	movs	r3, #0
 800aaca:	9904      	ldr	r1, [sp, #16]
 800aacc:	f000 fd94 	bl	800b5f8 <__multadd>
 800aad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aad2:	9004      	str	r0, [sp, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d100      	bne.n	800aada <_dtoa_r+0x962>
 800aad8:	e160      	b.n	800ad9c <_dtoa_r+0xc24>
 800aada:	2300      	movs	r3, #0
 800aadc:	0029      	movs	r1, r5
 800aade:	220a      	movs	r2, #10
 800aae0:	0038      	movs	r0, r7
 800aae2:	f000 fd89 	bl	800b5f8 <__multadd>
 800aae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae8:	0005      	movs	r5, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc47      	bgt.n	800ab7e <_dtoa_r+0xa06>
 800aaee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	dc0d      	bgt.n	800ab10 <_dtoa_r+0x998>
 800aaf4:	e043      	b.n	800ab7e <_dtoa_r+0xa06>
 800aaf6:	2a04      	cmp	r2, #4
 800aaf8:	d0c6      	beq.n	800aa88 <_dtoa_r+0x910>
 800aafa:	0013      	movs	r3, r2
 800aafc:	331c      	adds	r3, #28
 800aafe:	e7bc      	b.n	800aa7a <_dtoa_r+0x902>
 800ab00:	9b06      	ldr	r3, [sp, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	dc35      	bgt.n	800ab72 <_dtoa_r+0x9fa>
 800ab06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	dd32      	ble.n	800ab72 <_dtoa_r+0x9fa>
 800ab0c:	9b06      	ldr	r3, [sp, #24]
 800ab0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10c      	bne.n	800ab30 <_dtoa_r+0x9b8>
 800ab16:	0031      	movs	r1, r6
 800ab18:	2205      	movs	r2, #5
 800ab1a:	0038      	movs	r0, r7
 800ab1c:	f000 fd6c 	bl	800b5f8 <__multadd>
 800ab20:	0006      	movs	r6, r0
 800ab22:	0001      	movs	r1, r0
 800ab24:	9804      	ldr	r0, [sp, #16]
 800ab26:	f000 ffd1 	bl	800bacc <__mcmp>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	dd00      	ble.n	800ab30 <_dtoa_r+0x9b8>
 800ab2e:	e59f      	b.n	800a670 <_dtoa_r+0x4f8>
 800ab30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab32:	43db      	mvns	r3, r3
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	9b05      	ldr	r3, [sp, #20]
 800ab38:	9307      	str	r3, [sp, #28]
 800ab3a:	2400      	movs	r4, #0
 800ab3c:	0031      	movs	r1, r6
 800ab3e:	0038      	movs	r0, r7
 800ab40:	f000 fd36 	bl	800b5b0 <_Bfree>
 800ab44:	2d00      	cmp	r5, #0
 800ab46:	d100      	bne.n	800ab4a <_dtoa_r+0x9d2>
 800ab48:	e6b0      	b.n	800a8ac <_dtoa_r+0x734>
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	d005      	beq.n	800ab5a <_dtoa_r+0x9e2>
 800ab4e:	42ac      	cmp	r4, r5
 800ab50:	d003      	beq.n	800ab5a <_dtoa_r+0x9e2>
 800ab52:	0021      	movs	r1, r4
 800ab54:	0038      	movs	r0, r7
 800ab56:	f000 fd2b 	bl	800b5b0 <_Bfree>
 800ab5a:	0029      	movs	r1, r5
 800ab5c:	0038      	movs	r0, r7
 800ab5e:	f000 fd27 	bl	800b5b0 <_Bfree>
 800ab62:	e6a3      	b.n	800a8ac <_dtoa_r+0x734>
 800ab64:	2600      	movs	r6, #0
 800ab66:	0035      	movs	r5, r6
 800ab68:	e7e2      	b.n	800ab30 <_dtoa_r+0x9b8>
 800ab6a:	9602      	str	r6, [sp, #8]
 800ab6c:	9e07      	ldr	r6, [sp, #28]
 800ab6e:	0035      	movs	r5, r6
 800ab70:	e57e      	b.n	800a670 <_dtoa_r+0x4f8>
 800ab72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d100      	bne.n	800ab7a <_dtoa_r+0xa02>
 800ab78:	e0c8      	b.n	800ad0c <_dtoa_r+0xb94>
 800ab7a:	9b06      	ldr	r3, [sp, #24]
 800ab7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	dd05      	ble.n	800ab8e <_dtoa_r+0xa16>
 800ab82:	0029      	movs	r1, r5
 800ab84:	0022      	movs	r2, r4
 800ab86:	0038      	movs	r0, r7
 800ab88:	f000 ff30 	bl	800b9ec <__lshift>
 800ab8c:	0005      	movs	r5, r0
 800ab8e:	9b07      	ldr	r3, [sp, #28]
 800ab90:	0028      	movs	r0, r5
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01f      	beq.n	800abd6 <_dtoa_r+0xa5e>
 800ab96:	0038      	movs	r0, r7
 800ab98:	6869      	ldr	r1, [r5, #4]
 800ab9a:	f000 fcc5 	bl	800b528 <_Balloc>
 800ab9e:	1e04      	subs	r4, r0, #0
 800aba0:	d10c      	bne.n	800abbc <_dtoa_r+0xa44>
 800aba2:	0002      	movs	r2, r0
 800aba4:	4b03      	ldr	r3, [pc, #12]	; (800abb4 <_dtoa_r+0xa3c>)
 800aba6:	4904      	ldr	r1, [pc, #16]	; (800abb8 <_dtoa_r+0xa40>)
 800aba8:	f7ff fafb 	bl	800a1a2 <_dtoa_r+0x2a>
 800abac:	40240000 	.word	0x40240000
 800abb0:	00000433 	.word	0x00000433
 800abb4:	0800da24 	.word	0x0800da24
 800abb8:	000002ea 	.word	0x000002ea
 800abbc:	0029      	movs	r1, r5
 800abbe:	692b      	ldr	r3, [r5, #16]
 800abc0:	310c      	adds	r1, #12
 800abc2:	1c9a      	adds	r2, r3, #2
 800abc4:	0092      	lsls	r2, r2, #2
 800abc6:	300c      	adds	r0, #12
 800abc8:	f000 fca5 	bl	800b516 <memcpy>
 800abcc:	2201      	movs	r2, #1
 800abce:	0021      	movs	r1, r4
 800abd0:	0038      	movs	r0, r7
 800abd2:	f000 ff0b 	bl	800b9ec <__lshift>
 800abd6:	002c      	movs	r4, r5
 800abd8:	0005      	movs	r5, r0
 800abda:	9b05      	ldr	r3, [sp, #20]
 800abdc:	9308      	str	r3, [sp, #32]
 800abde:	0031      	movs	r1, r6
 800abe0:	9804      	ldr	r0, [sp, #16]
 800abe2:	f7ff fa3d 	bl	800a060 <quorem>
 800abe6:	0003      	movs	r3, r0
 800abe8:	0021      	movs	r1, r4
 800abea:	3330      	adds	r3, #48	; 0x30
 800abec:	900e      	str	r0, [sp, #56]	; 0x38
 800abee:	9804      	ldr	r0, [sp, #16]
 800abf0:	9306      	str	r3, [sp, #24]
 800abf2:	f000 ff6b 	bl	800bacc <__mcmp>
 800abf6:	002a      	movs	r2, r5
 800abf8:	900f      	str	r0, [sp, #60]	; 0x3c
 800abfa:	0031      	movs	r1, r6
 800abfc:	0038      	movs	r0, r7
 800abfe:	f000 ff81 	bl	800bb04 <__mdiff>
 800ac02:	68c3      	ldr	r3, [r0, #12]
 800ac04:	9007      	str	r0, [sp, #28]
 800ac06:	9310      	str	r3, [sp, #64]	; 0x40
 800ac08:	2301      	movs	r3, #1
 800ac0a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d104      	bne.n	800ac1c <_dtoa_r+0xaa4>
 800ac12:	0001      	movs	r1, r0
 800ac14:	9804      	ldr	r0, [sp, #16]
 800ac16:	f000 ff59 	bl	800bacc <__mcmp>
 800ac1a:	900d      	str	r0, [sp, #52]	; 0x34
 800ac1c:	0038      	movs	r0, r7
 800ac1e:	9907      	ldr	r1, [sp, #28]
 800ac20:	f000 fcc6 	bl	800b5b0 <_Bfree>
 800ac24:	2301      	movs	r3, #1
 800ac26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac2a:	4018      	ands	r0, r3
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	9307      	str	r3, [sp, #28]
 800ac32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac34:	4313      	orrs	r3, r2
 800ac36:	4303      	orrs	r3, r0
 800ac38:	d10c      	bne.n	800ac54 <_dtoa_r+0xadc>
 800ac3a:	9b06      	ldr	r3, [sp, #24]
 800ac3c:	2b39      	cmp	r3, #57	; 0x39
 800ac3e:	d025      	beq.n	800ac8c <_dtoa_r+0xb14>
 800ac40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dd02      	ble.n	800ac4c <_dtoa_r+0xad4>
 800ac46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac48:	3331      	adds	r3, #49	; 0x31
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	9b08      	ldr	r3, [sp, #32]
 800ac4e:	9a06      	ldr	r2, [sp, #24]
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	e773      	b.n	800ab3c <_dtoa_r+0x9c4>
 800ac54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	db03      	blt.n	800ac62 <_dtoa_r+0xaea>
 800ac5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	4303      	orrs	r3, r0
 800ac60:	d11f      	bne.n	800aca2 <_dtoa_r+0xb2a>
 800ac62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	ddf1      	ble.n	800ac4c <_dtoa_r+0xad4>
 800ac68:	9904      	ldr	r1, [sp, #16]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	f000 febd 	bl	800b9ec <__lshift>
 800ac72:	0031      	movs	r1, r6
 800ac74:	9004      	str	r0, [sp, #16]
 800ac76:	f000 ff29 	bl	800bacc <__mcmp>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	dc03      	bgt.n	800ac86 <_dtoa_r+0xb0e>
 800ac7e:	d1e5      	bne.n	800ac4c <_dtoa_r+0xad4>
 800ac80:	9b06      	ldr	r3, [sp, #24]
 800ac82:	07db      	lsls	r3, r3, #31
 800ac84:	d5e2      	bpl.n	800ac4c <_dtoa_r+0xad4>
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	2b39      	cmp	r3, #57	; 0x39
 800ac8a:	d1dc      	bne.n	800ac46 <_dtoa_r+0xace>
 800ac8c:	2339      	movs	r3, #57	; 0x39
 800ac8e:	9a08      	ldr	r2, [sp, #32]
 800ac90:	7013      	strb	r3, [r2, #0]
 800ac92:	9b07      	ldr	r3, [sp, #28]
 800ac94:	9307      	str	r3, [sp, #28]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	781a      	ldrb	r2, [r3, #0]
 800ac9a:	2a39      	cmp	r2, #57	; 0x39
 800ac9c:	d06c      	beq.n	800ad78 <_dtoa_r+0xc00>
 800ac9e:	3201      	adds	r2, #1
 800aca0:	e7d6      	b.n	800ac50 <_dtoa_r+0xad8>
 800aca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dd07      	ble.n	800acb8 <_dtoa_r+0xb40>
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	2b39      	cmp	r3, #57	; 0x39
 800acac:	d0ee      	beq.n	800ac8c <_dtoa_r+0xb14>
 800acae:	9b06      	ldr	r3, [sp, #24]
 800acb0:	9a08      	ldr	r2, [sp, #32]
 800acb2:	3301      	adds	r3, #1
 800acb4:	7013      	strb	r3, [r2, #0]
 800acb6:	e741      	b.n	800ab3c <_dtoa_r+0x9c4>
 800acb8:	9b08      	ldr	r3, [sp, #32]
 800acba:	9a06      	ldr	r2, [sp, #24]
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	2301      	movs	r3, #1
 800acc0:	9a05      	ldr	r2, [sp, #20]
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	9a08      	ldr	r2, [sp, #32]
 800acc6:	189b      	adds	r3, r3, r2
 800acc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acca:	429a      	cmp	r2, r3
 800accc:	d03e      	beq.n	800ad4c <_dtoa_r+0xbd4>
 800acce:	2300      	movs	r3, #0
 800acd0:	220a      	movs	r2, #10
 800acd2:	9904      	ldr	r1, [sp, #16]
 800acd4:	0038      	movs	r0, r7
 800acd6:	f000 fc8f 	bl	800b5f8 <__multadd>
 800acda:	2300      	movs	r3, #0
 800acdc:	9004      	str	r0, [sp, #16]
 800acde:	220a      	movs	r2, #10
 800ace0:	0021      	movs	r1, r4
 800ace2:	0038      	movs	r0, r7
 800ace4:	42ac      	cmp	r4, r5
 800ace6:	d106      	bne.n	800acf6 <_dtoa_r+0xb7e>
 800ace8:	f000 fc86 	bl	800b5f8 <__multadd>
 800acec:	0004      	movs	r4, r0
 800acee:	0005      	movs	r5, r0
 800acf0:	9b07      	ldr	r3, [sp, #28]
 800acf2:	9308      	str	r3, [sp, #32]
 800acf4:	e773      	b.n	800abde <_dtoa_r+0xa66>
 800acf6:	f000 fc7f 	bl	800b5f8 <__multadd>
 800acfa:	0029      	movs	r1, r5
 800acfc:	0004      	movs	r4, r0
 800acfe:	2300      	movs	r3, #0
 800ad00:	220a      	movs	r2, #10
 800ad02:	0038      	movs	r0, r7
 800ad04:	f000 fc78 	bl	800b5f8 <__multadd>
 800ad08:	0005      	movs	r5, r0
 800ad0a:	e7f1      	b.n	800acf0 <_dtoa_r+0xb78>
 800ad0c:	9b06      	ldr	r3, [sp, #24]
 800ad0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad10:	2400      	movs	r4, #0
 800ad12:	0031      	movs	r1, r6
 800ad14:	9804      	ldr	r0, [sp, #16]
 800ad16:	f7ff f9a3 	bl	800a060 <quorem>
 800ad1a:	9b05      	ldr	r3, [sp, #20]
 800ad1c:	3030      	adds	r0, #48	; 0x30
 800ad1e:	5518      	strb	r0, [r3, r4]
 800ad20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad22:	3401      	adds	r4, #1
 800ad24:	9006      	str	r0, [sp, #24]
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	dd07      	ble.n	800ad3a <_dtoa_r+0xbc2>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	220a      	movs	r2, #10
 800ad2e:	0038      	movs	r0, r7
 800ad30:	9904      	ldr	r1, [sp, #16]
 800ad32:	f000 fc61 	bl	800b5f8 <__multadd>
 800ad36:	9004      	str	r0, [sp, #16]
 800ad38:	e7eb      	b.n	800ad12 <_dtoa_r+0xb9a>
 800ad3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dd00      	ble.n	800ad44 <_dtoa_r+0xbcc>
 800ad42:	0018      	movs	r0, r3
 800ad44:	2400      	movs	r4, #0
 800ad46:	9b05      	ldr	r3, [sp, #20]
 800ad48:	181b      	adds	r3, r3, r0
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	9904      	ldr	r1, [sp, #16]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	0038      	movs	r0, r7
 800ad52:	f000 fe4b 	bl	800b9ec <__lshift>
 800ad56:	0031      	movs	r1, r6
 800ad58:	9004      	str	r0, [sp, #16]
 800ad5a:	f000 feb7 	bl	800bacc <__mcmp>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	dc97      	bgt.n	800ac92 <_dtoa_r+0xb1a>
 800ad62:	d102      	bne.n	800ad6a <_dtoa_r+0xbf2>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	07db      	lsls	r3, r3, #31
 800ad68:	d493      	bmi.n	800ac92 <_dtoa_r+0xb1a>
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	781a      	ldrb	r2, [r3, #0]
 800ad72:	2a30      	cmp	r2, #48	; 0x30
 800ad74:	d0fa      	beq.n	800ad6c <_dtoa_r+0xbf4>
 800ad76:	e6e1      	b.n	800ab3c <_dtoa_r+0x9c4>
 800ad78:	9a05      	ldr	r2, [sp, #20]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d18a      	bne.n	800ac94 <_dtoa_r+0xb1c>
 800ad7e:	9b02      	ldr	r3, [sp, #8]
 800ad80:	3301      	adds	r3, #1
 800ad82:	9302      	str	r3, [sp, #8]
 800ad84:	2331      	movs	r3, #49	; 0x31
 800ad86:	e795      	b.n	800acb4 <_dtoa_r+0xb3c>
 800ad88:	4b08      	ldr	r3, [pc, #32]	; (800adac <_dtoa_r+0xc34>)
 800ad8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <_dtoa_r+0xc38>)
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	d001      	beq.n	800ad98 <_dtoa_r+0xc20>
 800ad94:	f7ff fa3b 	bl	800a20e <_dtoa_r+0x96>
 800ad98:	f7ff fa3b 	bl	800a212 <_dtoa_r+0x9a>
 800ad9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dcb6      	bgt.n	800ad10 <_dtoa_r+0xb98>
 800ada2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	dd00      	ble.n	800adaa <_dtoa_r+0xc32>
 800ada8:	e6b2      	b.n	800ab10 <_dtoa_r+0x998>
 800adaa:	e7b1      	b.n	800ad10 <_dtoa_r+0xb98>
 800adac:	0800d9a1 	.word	0x0800d9a1
 800adb0:	0800d9a9 	.word	0x0800d9a9

0800adb4 <rshift>:
 800adb4:	0002      	movs	r2, r0
 800adb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb8:	6907      	ldr	r7, [r0, #16]
 800adba:	3214      	adds	r2, #20
 800adbc:	0013      	movs	r3, r2
 800adbe:	b085      	sub	sp, #20
 800adc0:	114e      	asrs	r6, r1, #5
 800adc2:	42b7      	cmp	r7, r6
 800adc4:	dd31      	ble.n	800ae2a <rshift+0x76>
 800adc6:	00b3      	lsls	r3, r6, #2
 800adc8:	18d3      	adds	r3, r2, r3
 800adca:	251f      	movs	r5, #31
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	000b      	movs	r3, r1
 800add0:	00bc      	lsls	r4, r7, #2
 800add2:	402b      	ands	r3, r5
 800add4:	1914      	adds	r4, r2, r4
 800add6:	9302      	str	r3, [sp, #8]
 800add8:	4229      	tst	r1, r5
 800adda:	d10c      	bne.n	800adf6 <rshift+0x42>
 800addc:	0015      	movs	r5, r2
 800adde:	9901      	ldr	r1, [sp, #4]
 800ade0:	428c      	cmp	r4, r1
 800ade2:	d838      	bhi.n	800ae56 <rshift+0xa2>
 800ade4:	9901      	ldr	r1, [sp, #4]
 800ade6:	2300      	movs	r3, #0
 800ade8:	3903      	subs	r1, #3
 800adea:	428c      	cmp	r4, r1
 800adec:	d301      	bcc.n	800adf2 <rshift+0x3e>
 800adee:	1bbb      	subs	r3, r7, r6
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	18d3      	adds	r3, r2, r3
 800adf4:	e019      	b.n	800ae2a <rshift+0x76>
 800adf6:	2120      	movs	r1, #32
 800adf8:	9b02      	ldr	r3, [sp, #8]
 800adfa:	9d01      	ldr	r5, [sp, #4]
 800adfc:	1acb      	subs	r3, r1, r3
 800adfe:	9303      	str	r3, [sp, #12]
 800ae00:	cd02      	ldmia	r5!, {r1}
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	4694      	mov	ip, r2
 800ae06:	40d9      	lsrs	r1, r3
 800ae08:	9100      	str	r1, [sp, #0]
 800ae0a:	42ac      	cmp	r4, r5
 800ae0c:	d816      	bhi.n	800ae3c <rshift+0x88>
 800ae0e:	9d01      	ldr	r5, [sp, #4]
 800ae10:	2300      	movs	r3, #0
 800ae12:	3501      	adds	r5, #1
 800ae14:	42ac      	cmp	r4, r5
 800ae16:	d302      	bcc.n	800ae1e <rshift+0x6a>
 800ae18:	1bbb      	subs	r3, r7, r6
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	9900      	ldr	r1, [sp, #0]
 800ae20:	18d3      	adds	r3, r2, r3
 800ae22:	6019      	str	r1, [r3, #0]
 800ae24:	2900      	cmp	r1, #0
 800ae26:	d000      	beq.n	800ae2a <rshift+0x76>
 800ae28:	3304      	adds	r3, #4
 800ae2a:	1a99      	subs	r1, r3, r2
 800ae2c:	1089      	asrs	r1, r1, #2
 800ae2e:	6101      	str	r1, [r0, #16]
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d101      	bne.n	800ae38 <rshift+0x84>
 800ae34:	2300      	movs	r3, #0
 800ae36:	6143      	str	r3, [r0, #20]
 800ae38:	b005      	add	sp, #20
 800ae3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	9903      	ldr	r1, [sp, #12]
 800ae40:	408b      	lsls	r3, r1
 800ae42:	9900      	ldr	r1, [sp, #0]
 800ae44:	4319      	orrs	r1, r3
 800ae46:	4663      	mov	r3, ip
 800ae48:	c302      	stmia	r3!, {r1}
 800ae4a:	469c      	mov	ip, r3
 800ae4c:	cd02      	ldmia	r5!, {r1}
 800ae4e:	9b02      	ldr	r3, [sp, #8]
 800ae50:	40d9      	lsrs	r1, r3
 800ae52:	9100      	str	r1, [sp, #0]
 800ae54:	e7d9      	b.n	800ae0a <rshift+0x56>
 800ae56:	c908      	ldmia	r1!, {r3}
 800ae58:	c508      	stmia	r5!, {r3}
 800ae5a:	e7c1      	b.n	800ade0 <rshift+0x2c>

0800ae5c <__hexdig_fun>:
 800ae5c:	0002      	movs	r2, r0
 800ae5e:	3a30      	subs	r2, #48	; 0x30
 800ae60:	0003      	movs	r3, r0
 800ae62:	2a09      	cmp	r2, #9
 800ae64:	d802      	bhi.n	800ae6c <__hexdig_fun+0x10>
 800ae66:	3b20      	subs	r3, #32
 800ae68:	b2d8      	uxtb	r0, r3
 800ae6a:	4770      	bx	lr
 800ae6c:	0002      	movs	r2, r0
 800ae6e:	3a61      	subs	r2, #97	; 0x61
 800ae70:	2a05      	cmp	r2, #5
 800ae72:	d801      	bhi.n	800ae78 <__hexdig_fun+0x1c>
 800ae74:	3b47      	subs	r3, #71	; 0x47
 800ae76:	e7f7      	b.n	800ae68 <__hexdig_fun+0xc>
 800ae78:	001a      	movs	r2, r3
 800ae7a:	3a41      	subs	r2, #65	; 0x41
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	2a05      	cmp	r2, #5
 800ae80:	d8f3      	bhi.n	800ae6a <__hexdig_fun+0xe>
 800ae82:	3b27      	subs	r3, #39	; 0x27
 800ae84:	e7f0      	b.n	800ae68 <__hexdig_fun+0xc>
	...

0800ae88 <__gethex>:
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae8a:	b08d      	sub	sp, #52	; 0x34
 800ae8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae8e:	4bbd      	ldr	r3, [pc, #756]	; (800b184 <__gethex+0x2fc>)
 800ae90:	9005      	str	r0, [sp, #20]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	9109      	str	r1, [sp, #36]	; 0x24
 800ae96:	0018      	movs	r0, r3
 800ae98:	9202      	str	r2, [sp, #8]
 800ae9a:	9307      	str	r3, [sp, #28]
 800ae9c:	f7f5 f93e 	bl	800011c <strlen>
 800aea0:	2202      	movs	r2, #2
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	4252      	negs	r2, r2
 800aea6:	181b      	adds	r3, r3, r0
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	9003      	str	r0, [sp, #12]
 800aeae:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	1c8b      	adds	r3, r1, #2
 800aeb6:	1a52      	subs	r2, r2, r1
 800aeb8:	18d1      	adds	r1, r2, r3
 800aeba:	9301      	str	r3, [sp, #4]
 800aebc:	9108      	str	r1, [sp, #32]
 800aebe:	9901      	ldr	r1, [sp, #4]
 800aec0:	3301      	adds	r3, #1
 800aec2:	7808      	ldrb	r0, [r1, #0]
 800aec4:	2830      	cmp	r0, #48	; 0x30
 800aec6:	d0f7      	beq.n	800aeb8 <__gethex+0x30>
 800aec8:	f7ff ffc8 	bl	800ae5c <__hexdig_fun>
 800aecc:	1e04      	subs	r4, r0, #0
 800aece:	d13e      	bne.n	800af4e <__gethex+0xc6>
 800aed0:	9a03      	ldr	r2, [sp, #12]
 800aed2:	9907      	ldr	r1, [sp, #28]
 800aed4:	9801      	ldr	r0, [sp, #4]
 800aed6:	f001 fda7 	bl	800ca28 <strncmp>
 800aeda:	1e07      	subs	r7, r0, #0
 800aedc:	d000      	beq.n	800aee0 <__gethex+0x58>
 800aede:	e06f      	b.n	800afc0 <__gethex+0x138>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	9a03      	ldr	r2, [sp, #12]
 800aee4:	5c98      	ldrb	r0, [r3, r2]
 800aee6:	189d      	adds	r5, r3, r2
 800aee8:	f7ff ffb8 	bl	800ae5c <__hexdig_fun>
 800aeec:	2301      	movs	r3, #1
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d034      	beq.n	800af5e <__gethex+0xd6>
 800aef4:	9501      	str	r5, [sp, #4]
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	7818      	ldrb	r0, [r3, #0]
 800aefa:	2830      	cmp	r0, #48	; 0x30
 800aefc:	d009      	beq.n	800af12 <__gethex+0x8a>
 800aefe:	f7ff ffad 	bl	800ae5c <__hexdig_fun>
 800af02:	4243      	negs	r3, r0
 800af04:	4143      	adcs	r3, r0
 800af06:	9304      	str	r3, [sp, #16]
 800af08:	2301      	movs	r3, #1
 800af0a:	002c      	movs	r4, r5
 800af0c:	9308      	str	r3, [sp, #32]
 800af0e:	9d01      	ldr	r5, [sp, #4]
 800af10:	e004      	b.n	800af1c <__gethex+0x94>
 800af12:	9b01      	ldr	r3, [sp, #4]
 800af14:	3301      	adds	r3, #1
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	e7ed      	b.n	800aef6 <__gethex+0x6e>
 800af1a:	3501      	adds	r5, #1
 800af1c:	7828      	ldrb	r0, [r5, #0]
 800af1e:	f7ff ff9d 	bl	800ae5c <__hexdig_fun>
 800af22:	1e07      	subs	r7, r0, #0
 800af24:	d1f9      	bne.n	800af1a <__gethex+0x92>
 800af26:	0028      	movs	r0, r5
 800af28:	9a03      	ldr	r2, [sp, #12]
 800af2a:	9907      	ldr	r1, [sp, #28]
 800af2c:	f001 fd7c 	bl	800ca28 <strncmp>
 800af30:	2800      	cmp	r0, #0
 800af32:	d112      	bne.n	800af5a <__gethex+0xd2>
 800af34:	2c00      	cmp	r4, #0
 800af36:	d107      	bne.n	800af48 <__gethex+0xc0>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	18ed      	adds	r5, r5, r3
 800af3c:	002c      	movs	r4, r5
 800af3e:	7828      	ldrb	r0, [r5, #0]
 800af40:	f7ff ff8c 	bl	800ae5c <__hexdig_fun>
 800af44:	2800      	cmp	r0, #0
 800af46:	d106      	bne.n	800af56 <__gethex+0xce>
 800af48:	1b67      	subs	r7, r4, r5
 800af4a:	00bf      	lsls	r7, r7, #2
 800af4c:	e007      	b.n	800af5e <__gethex+0xd6>
 800af4e:	2300      	movs	r3, #0
 800af50:	001c      	movs	r4, r3
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	e7db      	b.n	800af0e <__gethex+0x86>
 800af56:	3501      	adds	r5, #1
 800af58:	e7f1      	b.n	800af3e <__gethex+0xb6>
 800af5a:	2c00      	cmp	r4, #0
 800af5c:	d1f4      	bne.n	800af48 <__gethex+0xc0>
 800af5e:	2220      	movs	r2, #32
 800af60:	782b      	ldrb	r3, [r5, #0]
 800af62:	002e      	movs	r6, r5
 800af64:	4393      	bics	r3, r2
 800af66:	2b50      	cmp	r3, #80	; 0x50
 800af68:	d11d      	bne.n	800afa6 <__gethex+0x11e>
 800af6a:	786b      	ldrb	r3, [r5, #1]
 800af6c:	2b2b      	cmp	r3, #43	; 0x2b
 800af6e:	d02c      	beq.n	800afca <__gethex+0x142>
 800af70:	2b2d      	cmp	r3, #45	; 0x2d
 800af72:	d02e      	beq.n	800afd2 <__gethex+0x14a>
 800af74:	2300      	movs	r3, #0
 800af76:	1c6e      	adds	r6, r5, #1
 800af78:	9306      	str	r3, [sp, #24]
 800af7a:	7830      	ldrb	r0, [r6, #0]
 800af7c:	f7ff ff6e 	bl	800ae5c <__hexdig_fun>
 800af80:	1e43      	subs	r3, r0, #1
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b18      	cmp	r3, #24
 800af86:	d82b      	bhi.n	800afe0 <__gethex+0x158>
 800af88:	3810      	subs	r0, #16
 800af8a:	0004      	movs	r4, r0
 800af8c:	7870      	ldrb	r0, [r6, #1]
 800af8e:	f7ff ff65 	bl	800ae5c <__hexdig_fun>
 800af92:	1e43      	subs	r3, r0, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	3601      	adds	r6, #1
 800af98:	2b18      	cmp	r3, #24
 800af9a:	d91c      	bls.n	800afd6 <__gethex+0x14e>
 800af9c:	9b06      	ldr	r3, [sp, #24]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d000      	beq.n	800afa4 <__gethex+0x11c>
 800afa2:	4264      	negs	r4, r4
 800afa4:	193f      	adds	r7, r7, r4
 800afa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa8:	601e      	str	r6, [r3, #0]
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d019      	beq.n	800afe4 <__gethex+0x15c>
 800afb0:	2600      	movs	r6, #0
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	42b3      	cmp	r3, r6
 800afb6:	d100      	bne.n	800afba <__gethex+0x132>
 800afb8:	3606      	adds	r6, #6
 800afba:	0030      	movs	r0, r6
 800afbc:	b00d      	add	sp, #52	; 0x34
 800afbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc0:	2301      	movs	r3, #1
 800afc2:	0027      	movs	r7, r4
 800afc4:	9d01      	ldr	r5, [sp, #4]
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	e7c9      	b.n	800af5e <__gethex+0xd6>
 800afca:	2300      	movs	r3, #0
 800afcc:	9306      	str	r3, [sp, #24]
 800afce:	1cae      	adds	r6, r5, #2
 800afd0:	e7d3      	b.n	800af7a <__gethex+0xf2>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e7fa      	b.n	800afcc <__gethex+0x144>
 800afd6:	230a      	movs	r3, #10
 800afd8:	435c      	muls	r4, r3
 800afda:	1824      	adds	r4, r4, r0
 800afdc:	3c10      	subs	r4, #16
 800afde:	e7d5      	b.n	800af8c <__gethex+0x104>
 800afe0:	002e      	movs	r6, r5
 800afe2:	e7e0      	b.n	800afa6 <__gethex+0x11e>
 800afe4:	9b01      	ldr	r3, [sp, #4]
 800afe6:	9904      	ldr	r1, [sp, #16]
 800afe8:	1aeb      	subs	r3, r5, r3
 800afea:	3b01      	subs	r3, #1
 800afec:	2b07      	cmp	r3, #7
 800afee:	dc0a      	bgt.n	800b006 <__gethex+0x17e>
 800aff0:	9805      	ldr	r0, [sp, #20]
 800aff2:	f000 fa99 	bl	800b528 <_Balloc>
 800aff6:	1e04      	subs	r4, r0, #0
 800aff8:	d108      	bne.n	800b00c <__gethex+0x184>
 800affa:	0002      	movs	r2, r0
 800affc:	21de      	movs	r1, #222	; 0xde
 800affe:	4b62      	ldr	r3, [pc, #392]	; (800b188 <__gethex+0x300>)
 800b000:	4862      	ldr	r0, [pc, #392]	; (800b18c <__gethex+0x304>)
 800b002:	f001 fdff 	bl	800cc04 <__assert_func>
 800b006:	3101      	adds	r1, #1
 800b008:	105b      	asrs	r3, r3, #1
 800b00a:	e7ef      	b.n	800afec <__gethex+0x164>
 800b00c:	0003      	movs	r3, r0
 800b00e:	3314      	adds	r3, #20
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	9309      	str	r3, [sp, #36]	; 0x24
 800b014:	2300      	movs	r3, #0
 800b016:	001e      	movs	r6, r3
 800b018:	9306      	str	r3, [sp, #24]
 800b01a:	9b01      	ldr	r3, [sp, #4]
 800b01c:	42ab      	cmp	r3, r5
 800b01e:	d340      	bcc.n	800b0a2 <__gethex+0x21a>
 800b020:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b022:	9b04      	ldr	r3, [sp, #16]
 800b024:	c540      	stmia	r5!, {r6}
 800b026:	1aed      	subs	r5, r5, r3
 800b028:	10ad      	asrs	r5, r5, #2
 800b02a:	0030      	movs	r0, r6
 800b02c:	6125      	str	r5, [r4, #16]
 800b02e:	f000 fb73 	bl	800b718 <__hi0bits>
 800b032:	9b02      	ldr	r3, [sp, #8]
 800b034:	016d      	lsls	r5, r5, #5
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	1a2e      	subs	r6, r5, r0
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	429e      	cmp	r6, r3
 800b03e:	dd5a      	ble.n	800b0f6 <__gethex+0x26e>
 800b040:	1af6      	subs	r6, r6, r3
 800b042:	0031      	movs	r1, r6
 800b044:	0020      	movs	r0, r4
 800b046:	f000 ff16 	bl	800be76 <__any_on>
 800b04a:	1e05      	subs	r5, r0, #0
 800b04c:	d016      	beq.n	800b07c <__gethex+0x1f4>
 800b04e:	2501      	movs	r5, #1
 800b050:	211f      	movs	r1, #31
 800b052:	0028      	movs	r0, r5
 800b054:	1e73      	subs	r3, r6, #1
 800b056:	4019      	ands	r1, r3
 800b058:	4088      	lsls	r0, r1
 800b05a:	0001      	movs	r1, r0
 800b05c:	115a      	asrs	r2, r3, #5
 800b05e:	9804      	ldr	r0, [sp, #16]
 800b060:	0092      	lsls	r2, r2, #2
 800b062:	5812      	ldr	r2, [r2, r0]
 800b064:	420a      	tst	r2, r1
 800b066:	d009      	beq.n	800b07c <__gethex+0x1f4>
 800b068:	42ab      	cmp	r3, r5
 800b06a:	dd06      	ble.n	800b07a <__gethex+0x1f2>
 800b06c:	0020      	movs	r0, r4
 800b06e:	1eb1      	subs	r1, r6, #2
 800b070:	f000 ff01 	bl	800be76 <__any_on>
 800b074:	3502      	adds	r5, #2
 800b076:	2800      	cmp	r0, #0
 800b078:	d100      	bne.n	800b07c <__gethex+0x1f4>
 800b07a:	2502      	movs	r5, #2
 800b07c:	0031      	movs	r1, r6
 800b07e:	0020      	movs	r0, r4
 800b080:	f7ff fe98 	bl	800adb4 <rshift>
 800b084:	19bf      	adds	r7, r7, r6
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	42bb      	cmp	r3, r7
 800b08e:	da42      	bge.n	800b116 <__gethex+0x28e>
 800b090:	0021      	movs	r1, r4
 800b092:	9805      	ldr	r0, [sp, #20]
 800b094:	f000 fa8c 	bl	800b5b0 <_Bfree>
 800b098:	2300      	movs	r3, #0
 800b09a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b09c:	26a3      	movs	r6, #163	; 0xa3
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	e78b      	b.n	800afba <__gethex+0x132>
 800b0a2:	1e6b      	subs	r3, r5, #1
 800b0a4:	9308      	str	r3, [sp, #32]
 800b0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d014      	beq.n	800b0d8 <__gethex+0x250>
 800b0ae:	9b06      	ldr	r3, [sp, #24]
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	d104      	bne.n	800b0be <__gethex+0x236>
 800b0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b6:	c340      	stmia	r3!, {r6}
 800b0b8:	2600      	movs	r6, #0
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	9606      	str	r6, [sp, #24]
 800b0be:	9b08      	ldr	r3, [sp, #32]
 800b0c0:	7818      	ldrb	r0, [r3, #0]
 800b0c2:	f7ff fecb 	bl	800ae5c <__hexdig_fun>
 800b0c6:	230f      	movs	r3, #15
 800b0c8:	4018      	ands	r0, r3
 800b0ca:	9b06      	ldr	r3, [sp, #24]
 800b0cc:	9d08      	ldr	r5, [sp, #32]
 800b0ce:	4098      	lsls	r0, r3
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	4306      	orrs	r6, r0
 800b0d4:	9306      	str	r3, [sp, #24]
 800b0d6:	e7a0      	b.n	800b01a <__gethex+0x192>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	9a03      	ldr	r2, [sp, #12]
 800b0dc:	1a9d      	subs	r5, r3, r2
 800b0de:	9b08      	ldr	r3, [sp, #32]
 800b0e0:	195d      	adds	r5, r3, r5
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	429d      	cmp	r5, r3
 800b0e6:	d3e2      	bcc.n	800b0ae <__gethex+0x226>
 800b0e8:	0028      	movs	r0, r5
 800b0ea:	9907      	ldr	r1, [sp, #28]
 800b0ec:	f001 fc9c 	bl	800ca28 <strncmp>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d1dc      	bne.n	800b0ae <__gethex+0x226>
 800b0f4:	e791      	b.n	800b01a <__gethex+0x192>
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	2500      	movs	r5, #0
 800b0fa:	429e      	cmp	r6, r3
 800b0fc:	dac3      	bge.n	800b086 <__gethex+0x1fe>
 800b0fe:	1b9e      	subs	r6, r3, r6
 800b100:	0021      	movs	r1, r4
 800b102:	0032      	movs	r2, r6
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	f000 fc71 	bl	800b9ec <__lshift>
 800b10a:	0003      	movs	r3, r0
 800b10c:	3314      	adds	r3, #20
 800b10e:	0004      	movs	r4, r0
 800b110:	1bbf      	subs	r7, r7, r6
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	e7b7      	b.n	800b086 <__gethex+0x1fe>
 800b116:	9b02      	ldr	r3, [sp, #8]
 800b118:	685e      	ldr	r6, [r3, #4]
 800b11a:	42be      	cmp	r6, r7
 800b11c:	dd71      	ble.n	800b202 <__gethex+0x37a>
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	1bf6      	subs	r6, r6, r7
 800b122:	42b3      	cmp	r3, r6
 800b124:	dc38      	bgt.n	800b198 <__gethex+0x310>
 800b126:	9b02      	ldr	r3, [sp, #8]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d026      	beq.n	800b17c <__gethex+0x2f4>
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d02e      	beq.n	800b190 <__gethex+0x308>
 800b132:	2b01      	cmp	r3, #1
 800b134:	d119      	bne.n	800b16a <__gethex+0x2e2>
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	42b3      	cmp	r3, r6
 800b13a:	d116      	bne.n	800b16a <__gethex+0x2e2>
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d10d      	bne.n	800b15c <__gethex+0x2d4>
 800b140:	9b02      	ldr	r3, [sp, #8]
 800b142:	2662      	movs	r6, #98	; 0x62
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	9a01      	ldr	r2, [sp, #4]
 800b14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	2301      	movs	r3, #1
 800b150:	9a04      	ldr	r2, [sp, #16]
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b158:	601c      	str	r4, [r3, #0]
 800b15a:	e72e      	b.n	800afba <__gethex+0x132>
 800b15c:	9901      	ldr	r1, [sp, #4]
 800b15e:	0020      	movs	r0, r4
 800b160:	3901      	subs	r1, #1
 800b162:	f000 fe88 	bl	800be76 <__any_on>
 800b166:	2800      	cmp	r0, #0
 800b168:	d1ea      	bne.n	800b140 <__gethex+0x2b8>
 800b16a:	0021      	movs	r1, r4
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	f000 fa1f 	bl	800b5b0 <_Bfree>
 800b172:	2300      	movs	r3, #0
 800b174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b176:	2650      	movs	r6, #80	; 0x50
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	e71e      	b.n	800afba <__gethex+0x132>
 800b17c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1f3      	bne.n	800b16a <__gethex+0x2e2>
 800b182:	e7dd      	b.n	800b140 <__gethex+0x2b8>
 800b184:	0800daa0 	.word	0x0800daa0
 800b188:	0800da24 	.word	0x0800da24
 800b18c:	0800da35 	.word	0x0800da35
 800b190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1d4      	bne.n	800b140 <__gethex+0x2b8>
 800b196:	e7e8      	b.n	800b16a <__gethex+0x2e2>
 800b198:	1e77      	subs	r7, r6, #1
 800b19a:	2d00      	cmp	r5, #0
 800b19c:	d12f      	bne.n	800b1fe <__gethex+0x376>
 800b19e:	2f00      	cmp	r7, #0
 800b1a0:	d004      	beq.n	800b1ac <__gethex+0x324>
 800b1a2:	0039      	movs	r1, r7
 800b1a4:	0020      	movs	r0, r4
 800b1a6:	f000 fe66 	bl	800be76 <__any_on>
 800b1aa:	0005      	movs	r5, r0
 800b1ac:	231f      	movs	r3, #31
 800b1ae:	117a      	asrs	r2, r7, #5
 800b1b0:	401f      	ands	r7, r3
 800b1b2:	3b1e      	subs	r3, #30
 800b1b4:	40bb      	lsls	r3, r7
 800b1b6:	9904      	ldr	r1, [sp, #16]
 800b1b8:	0092      	lsls	r2, r2, #2
 800b1ba:	5852      	ldr	r2, [r2, r1]
 800b1bc:	421a      	tst	r2, r3
 800b1be:	d001      	beq.n	800b1c4 <__gethex+0x33c>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	431d      	orrs	r5, r3
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	0031      	movs	r1, r6
 800b1c8:	1b9b      	subs	r3, r3, r6
 800b1ca:	2602      	movs	r6, #2
 800b1cc:	0020      	movs	r0, r4
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	f7ff fdf0 	bl	800adb4 <rshift>
 800b1d4:	9b02      	ldr	r3, [sp, #8]
 800b1d6:	685f      	ldr	r7, [r3, #4]
 800b1d8:	2d00      	cmp	r5, #0
 800b1da:	d041      	beq.n	800b260 <__gethex+0x3d8>
 800b1dc:	9b02      	ldr	r3, [sp, #8]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d010      	beq.n	800b206 <__gethex+0x37e>
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d012      	beq.n	800b20e <__gethex+0x386>
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d106      	bne.n	800b1fa <__gethex+0x372>
 800b1ec:	07aa      	lsls	r2, r5, #30
 800b1ee:	d504      	bpl.n	800b1fa <__gethex+0x372>
 800b1f0:	9a04      	ldr	r2, [sp, #16]
 800b1f2:	6810      	ldr	r0, [r2, #0]
 800b1f4:	4305      	orrs	r5, r0
 800b1f6:	421d      	tst	r5, r3
 800b1f8:	d10c      	bne.n	800b214 <__gethex+0x38c>
 800b1fa:	2310      	movs	r3, #16
 800b1fc:	e02f      	b.n	800b25e <__gethex+0x3d6>
 800b1fe:	2501      	movs	r5, #1
 800b200:	e7d4      	b.n	800b1ac <__gethex+0x324>
 800b202:	2601      	movs	r6, #1
 800b204:	e7e8      	b.n	800b1d8 <__gethex+0x350>
 800b206:	2301      	movs	r3, #1
 800b208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b20a:	1a9b      	subs	r3, r3, r2
 800b20c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b20e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0f2      	beq.n	800b1fa <__gethex+0x372>
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	2000      	movs	r0, #0
 800b218:	9303      	str	r3, [sp, #12]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	0023      	movs	r3, r4
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	3314      	adds	r3, #20
 800b224:	1899      	adds	r1, r3, r2
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	1c55      	adds	r5, r2, #1
 800b22a:	d01e      	beq.n	800b26a <__gethex+0x3e2>
 800b22c:	3201      	adds	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	0023      	movs	r3, r4
 800b232:	3314      	adds	r3, #20
 800b234:	2e02      	cmp	r6, #2
 800b236:	d140      	bne.n	800b2ba <__gethex+0x432>
 800b238:	9a02      	ldr	r2, [sp, #8]
 800b23a:	9901      	ldr	r1, [sp, #4]
 800b23c:	6812      	ldr	r2, [r2, #0]
 800b23e:	3a01      	subs	r2, #1
 800b240:	428a      	cmp	r2, r1
 800b242:	d10b      	bne.n	800b25c <__gethex+0x3d4>
 800b244:	114a      	asrs	r2, r1, #5
 800b246:	211f      	movs	r1, #31
 800b248:	9801      	ldr	r0, [sp, #4]
 800b24a:	0092      	lsls	r2, r2, #2
 800b24c:	4001      	ands	r1, r0
 800b24e:	2001      	movs	r0, #1
 800b250:	0005      	movs	r5, r0
 800b252:	408d      	lsls	r5, r1
 800b254:	58d3      	ldr	r3, [r2, r3]
 800b256:	422b      	tst	r3, r5
 800b258:	d000      	beq.n	800b25c <__gethex+0x3d4>
 800b25a:	2601      	movs	r6, #1
 800b25c:	2320      	movs	r3, #32
 800b25e:	431e      	orrs	r6, r3
 800b260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b262:	601c      	str	r4, [r3, #0]
 800b264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b266:	601f      	str	r7, [r3, #0]
 800b268:	e6a7      	b.n	800afba <__gethex+0x132>
 800b26a:	c301      	stmia	r3!, {r0}
 800b26c:	4299      	cmp	r1, r3
 800b26e:	d8da      	bhi.n	800b226 <__gethex+0x39e>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	68a2      	ldr	r2, [r4, #8]
 800b274:	4293      	cmp	r3, r2
 800b276:	db17      	blt.n	800b2a8 <__gethex+0x420>
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	9805      	ldr	r0, [sp, #20]
 800b27c:	1c59      	adds	r1, r3, #1
 800b27e:	f000 f953 	bl	800b528 <_Balloc>
 800b282:	1e05      	subs	r5, r0, #0
 800b284:	d103      	bne.n	800b28e <__gethex+0x406>
 800b286:	0002      	movs	r2, r0
 800b288:	2184      	movs	r1, #132	; 0x84
 800b28a:	4b1c      	ldr	r3, [pc, #112]	; (800b2fc <__gethex+0x474>)
 800b28c:	e6b8      	b.n	800b000 <__gethex+0x178>
 800b28e:	0021      	movs	r1, r4
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	310c      	adds	r1, #12
 800b294:	1c9a      	adds	r2, r3, #2
 800b296:	0092      	lsls	r2, r2, #2
 800b298:	300c      	adds	r0, #12
 800b29a:	f000 f93c 	bl	800b516 <memcpy>
 800b29e:	0021      	movs	r1, r4
 800b2a0:	9805      	ldr	r0, [sp, #20]
 800b2a2:	f000 f985 	bl	800b5b0 <_Bfree>
 800b2a6:	002c      	movs	r4, r5
 800b2a8:	6923      	ldr	r3, [r4, #16]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	6122      	str	r2, [r4, #16]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	18e3      	adds	r3, r4, r3
 800b2b6:	605a      	str	r2, [r3, #4]
 800b2b8:	e7ba      	b.n	800b230 <__gethex+0x3a8>
 800b2ba:	6922      	ldr	r2, [r4, #16]
 800b2bc:	9903      	ldr	r1, [sp, #12]
 800b2be:	428a      	cmp	r2, r1
 800b2c0:	dd09      	ble.n	800b2d6 <__gethex+0x44e>
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	0020      	movs	r0, r4
 800b2c6:	f7ff fd75 	bl	800adb4 <rshift>
 800b2ca:	9b02      	ldr	r3, [sp, #8]
 800b2cc:	3701      	adds	r7, #1
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	42bb      	cmp	r3, r7
 800b2d2:	dac2      	bge.n	800b25a <__gethex+0x3d2>
 800b2d4:	e6dc      	b.n	800b090 <__gethex+0x208>
 800b2d6:	221f      	movs	r2, #31
 800b2d8:	9d01      	ldr	r5, [sp, #4]
 800b2da:	9901      	ldr	r1, [sp, #4]
 800b2dc:	2601      	movs	r6, #1
 800b2de:	4015      	ands	r5, r2
 800b2e0:	4211      	tst	r1, r2
 800b2e2:	d0bb      	beq.n	800b25c <__gethex+0x3d4>
 800b2e4:	9a04      	ldr	r2, [sp, #16]
 800b2e6:	189b      	adds	r3, r3, r2
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	6818      	ldr	r0, [r3, #0]
 800b2ec:	f000 fa14 	bl	800b718 <__hi0bits>
 800b2f0:	2320      	movs	r3, #32
 800b2f2:	1b5d      	subs	r5, r3, r5
 800b2f4:	42a8      	cmp	r0, r5
 800b2f6:	dbe4      	blt.n	800b2c2 <__gethex+0x43a>
 800b2f8:	e7b0      	b.n	800b25c <__gethex+0x3d4>
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	0800da24 	.word	0x0800da24

0800b300 <L_shift>:
 800b300:	2308      	movs	r3, #8
 800b302:	b570      	push	{r4, r5, r6, lr}
 800b304:	2520      	movs	r5, #32
 800b306:	1a9a      	subs	r2, r3, r2
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	1aad      	subs	r5, r5, r2
 800b30c:	6843      	ldr	r3, [r0, #4]
 800b30e:	6806      	ldr	r6, [r0, #0]
 800b310:	001c      	movs	r4, r3
 800b312:	40ac      	lsls	r4, r5
 800b314:	40d3      	lsrs	r3, r2
 800b316:	4334      	orrs	r4, r6
 800b318:	6004      	str	r4, [r0, #0]
 800b31a:	6043      	str	r3, [r0, #4]
 800b31c:	3004      	adds	r0, #4
 800b31e:	4288      	cmp	r0, r1
 800b320:	d3f4      	bcc.n	800b30c <L_shift+0xc>
 800b322:	bd70      	pop	{r4, r5, r6, pc}

0800b324 <__match>:
 800b324:	b530      	push	{r4, r5, lr}
 800b326:	6803      	ldr	r3, [r0, #0]
 800b328:	780c      	ldrb	r4, [r1, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	2c00      	cmp	r4, #0
 800b32e:	d102      	bne.n	800b336 <__match+0x12>
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	2001      	movs	r0, #1
 800b334:	bd30      	pop	{r4, r5, pc}
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	0015      	movs	r5, r2
 800b33a:	3d41      	subs	r5, #65	; 0x41
 800b33c:	2d19      	cmp	r5, #25
 800b33e:	d800      	bhi.n	800b342 <__match+0x1e>
 800b340:	3220      	adds	r2, #32
 800b342:	3101      	adds	r1, #1
 800b344:	42a2      	cmp	r2, r4
 800b346:	d0ef      	beq.n	800b328 <__match+0x4>
 800b348:	2000      	movs	r0, #0
 800b34a:	e7f3      	b.n	800b334 <__match+0x10>

0800b34c <__hexnan>:
 800b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34e:	680b      	ldr	r3, [r1, #0]
 800b350:	b08b      	sub	sp, #44	; 0x2c
 800b352:	115c      	asrs	r4, r3, #5
 800b354:	00a4      	lsls	r4, r4, #2
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	1912      	adds	r2, r2, r4
 800b35a:	0019      	movs	r1, r3
 800b35c:	9202      	str	r2, [sp, #8]
 800b35e:	221f      	movs	r2, #31
 800b360:	4011      	ands	r1, r2
 800b362:	9008      	str	r0, [sp, #32]
 800b364:	9106      	str	r1, [sp, #24]
 800b366:	4213      	tst	r3, r2
 800b368:	d002      	beq.n	800b370 <__hexnan+0x24>
 800b36a:	9b02      	ldr	r3, [sp, #8]
 800b36c:	3304      	adds	r3, #4
 800b36e:	9302      	str	r3, [sp, #8]
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	2500      	movs	r5, #0
 800b374:	1f1e      	subs	r6, r3, #4
 800b376:	0037      	movs	r7, r6
 800b378:	0034      	movs	r4, r6
 800b37a:	9b08      	ldr	r3, [sp, #32]
 800b37c:	6035      	str	r5, [r6, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	9507      	str	r5, [sp, #28]
 800b382:	9305      	str	r3, [sp, #20]
 800b384:	9503      	str	r5, [sp, #12]
 800b386:	9b05      	ldr	r3, [sp, #20]
 800b388:	3301      	adds	r3, #1
 800b38a:	9309      	str	r3, [sp, #36]	; 0x24
 800b38c:	9b05      	ldr	r3, [sp, #20]
 800b38e:	785b      	ldrb	r3, [r3, #1]
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d028      	beq.n	800b3e8 <__hexnan+0x9c>
 800b396:	9804      	ldr	r0, [sp, #16]
 800b398:	f7ff fd60 	bl	800ae5c <__hexdig_fun>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d154      	bne.n	800b44a <__hexnan+0xfe>
 800b3a0:	9b04      	ldr	r3, [sp, #16]
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	d819      	bhi.n	800b3da <__hexnan+0x8e>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	9a07      	ldr	r2, [sp, #28]
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	dd12      	ble.n	800b3d4 <__hexnan+0x88>
 800b3ae:	42bc      	cmp	r4, r7
 800b3b0:	d206      	bcs.n	800b3c0 <__hexnan+0x74>
 800b3b2:	2d07      	cmp	r5, #7
 800b3b4:	dc04      	bgt.n	800b3c0 <__hexnan+0x74>
 800b3b6:	002a      	movs	r2, r5
 800b3b8:	0039      	movs	r1, r7
 800b3ba:	0020      	movs	r0, r4
 800b3bc:	f7ff ffa0 	bl	800b300 <L_shift>
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	2508      	movs	r5, #8
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	d905      	bls.n	800b3d4 <__hexnan+0x88>
 800b3c8:	1f27      	subs	r7, r4, #4
 800b3ca:	2500      	movs	r5, #0
 800b3cc:	003c      	movs	r4, r7
 800b3ce:	9b03      	ldr	r3, [sp, #12]
 800b3d0:	603d      	str	r5, [r7, #0]
 800b3d2:	9307      	str	r3, [sp, #28]
 800b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	e7d5      	b.n	800b386 <__hexnan+0x3a>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2b29      	cmp	r3, #41	; 0x29
 800b3de:	d158      	bne.n	800b492 <__hexnan+0x146>
 800b3e0:	9b05      	ldr	r3, [sp, #20]
 800b3e2:	9a08      	ldr	r2, [sp, #32]
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d051      	beq.n	800b492 <__hexnan+0x146>
 800b3ee:	42bc      	cmp	r4, r7
 800b3f0:	d206      	bcs.n	800b400 <__hexnan+0xb4>
 800b3f2:	2d07      	cmp	r5, #7
 800b3f4:	dc04      	bgt.n	800b400 <__hexnan+0xb4>
 800b3f6:	002a      	movs	r2, r5
 800b3f8:	0039      	movs	r1, r7
 800b3fa:	0020      	movs	r0, r4
 800b3fc:	f7ff ff80 	bl	800b300 <L_shift>
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	429c      	cmp	r4, r3
 800b404:	d935      	bls.n	800b472 <__hexnan+0x126>
 800b406:	001a      	movs	r2, r3
 800b408:	0023      	movs	r3, r4
 800b40a:	cb02      	ldmia	r3!, {r1}
 800b40c:	c202      	stmia	r2!, {r1}
 800b40e:	429e      	cmp	r6, r3
 800b410:	d2fb      	bcs.n	800b40a <__hexnan+0xbe>
 800b412:	9b02      	ldr	r3, [sp, #8]
 800b414:	1c61      	adds	r1, r4, #1
 800b416:	1eda      	subs	r2, r3, #3
 800b418:	2304      	movs	r3, #4
 800b41a:	4291      	cmp	r1, r2
 800b41c:	d805      	bhi.n	800b42a <__hexnan+0xde>
 800b41e:	9b02      	ldr	r3, [sp, #8]
 800b420:	3b04      	subs	r3, #4
 800b422:	1b1c      	subs	r4, r3, r4
 800b424:	08a4      	lsrs	r4, r4, #2
 800b426:	3401      	adds	r4, #1
 800b428:	00a3      	lsls	r3, r4, #2
 800b42a:	9a01      	ldr	r2, [sp, #4]
 800b42c:	18d4      	adds	r4, r2, r3
 800b42e:	2300      	movs	r3, #0
 800b430:	c408      	stmia	r4!, {r3}
 800b432:	42a6      	cmp	r6, r4
 800b434:	d2fc      	bcs.n	800b430 <__hexnan+0xe4>
 800b436:	6833      	ldr	r3, [r6, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d104      	bne.n	800b446 <__hexnan+0xfa>
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	429e      	cmp	r6, r3
 800b440:	d125      	bne.n	800b48e <__hexnan+0x142>
 800b442:	2301      	movs	r3, #1
 800b444:	6033      	str	r3, [r6, #0]
 800b446:	2005      	movs	r0, #5
 800b448:	e024      	b.n	800b494 <__hexnan+0x148>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	3501      	adds	r5, #1
 800b44e:	3301      	adds	r3, #1
 800b450:	9303      	str	r3, [sp, #12]
 800b452:	2d08      	cmp	r5, #8
 800b454:	dd06      	ble.n	800b464 <__hexnan+0x118>
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	429c      	cmp	r4, r3
 800b45a:	d9bb      	bls.n	800b3d4 <__hexnan+0x88>
 800b45c:	2300      	movs	r3, #0
 800b45e:	2501      	movs	r5, #1
 800b460:	3c04      	subs	r4, #4
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	220f      	movs	r2, #15
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	4010      	ands	r0, r2
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	4318      	orrs	r0, r3
 800b46e:	6020      	str	r0, [r4, #0]
 800b470:	e7b0      	b.n	800b3d4 <__hexnan+0x88>
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0de      	beq.n	800b436 <__hexnan+0xea>
 800b478:	2220      	movs	r2, #32
 800b47a:	1ad2      	subs	r2, r2, r3
 800b47c:	2301      	movs	r3, #1
 800b47e:	425b      	negs	r3, r3
 800b480:	40d3      	lsrs	r3, r2
 800b482:	9c02      	ldr	r4, [sp, #8]
 800b484:	3c04      	subs	r4, #4
 800b486:	6822      	ldr	r2, [r4, #0]
 800b488:	4013      	ands	r3, r2
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	e7d3      	b.n	800b436 <__hexnan+0xea>
 800b48e:	3e04      	subs	r6, #4
 800b490:	e7d1      	b.n	800b436 <__hexnan+0xea>
 800b492:	2004      	movs	r0, #4
 800b494:	b00b      	add	sp, #44	; 0x2c
 800b496:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b498 <_localeconv_r>:
 800b498:	4800      	ldr	r0, [pc, #0]	; (800b49c <_localeconv_r+0x4>)
 800b49a:	4770      	bx	lr
 800b49c:	20000164 	.word	0x20000164

0800b4a0 <_lseek_r>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	0004      	movs	r4, r0
 800b4a4:	0008      	movs	r0, r1
 800b4a6:	0011      	movs	r1, r2
 800b4a8:	001a      	movs	r2, r3
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	4d05      	ldr	r5, [pc, #20]	; (800b4c4 <_lseek_r+0x24>)
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f8 fdbc 	bl	800402c <_lseek>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d103      	bne.n	800b4c0 <_lseek_r+0x20>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d000      	beq.n	800b4c0 <_lseek_r+0x20>
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	bd70      	pop	{r4, r5, r6, pc}
 800b4c2:	46c0      	nop			; (mov r8, r8)
 800b4c4:	200005b0 	.word	0x200005b0

0800b4c8 <malloc>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4b03      	ldr	r3, [pc, #12]	; (800b4d8 <malloc+0x10>)
 800b4cc:	0001      	movs	r1, r0
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	f000 fd4c 	bl	800bf6c <_malloc_r>
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	46c0      	nop			; (mov r8, r8)
 800b4d8:	2000000c 	.word	0x2000000c

0800b4dc <__ascii_mbtowc>:
 800b4dc:	b082      	sub	sp, #8
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	d100      	bne.n	800b4e4 <__ascii_mbtowc+0x8>
 800b4e2:	a901      	add	r1, sp, #4
 800b4e4:	1e10      	subs	r0, r2, #0
 800b4e6:	d006      	beq.n	800b4f6 <__ascii_mbtowc+0x1a>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <__ascii_mbtowc+0x1e>
 800b4ec:	7813      	ldrb	r3, [r2, #0]
 800b4ee:	600b      	str	r3, [r1, #0]
 800b4f0:	7810      	ldrb	r0, [r2, #0]
 800b4f2:	1e43      	subs	r3, r0, #1
 800b4f4:	4198      	sbcs	r0, r3
 800b4f6:	b002      	add	sp, #8
 800b4f8:	4770      	bx	lr
 800b4fa:	2002      	movs	r0, #2
 800b4fc:	4240      	negs	r0, r0
 800b4fe:	e7fa      	b.n	800b4f6 <__ascii_mbtowc+0x1a>

0800b500 <memchr>:
 800b500:	b2c9      	uxtb	r1, r1
 800b502:	1882      	adds	r2, r0, r2
 800b504:	4290      	cmp	r0, r2
 800b506:	d101      	bne.n	800b50c <memchr+0xc>
 800b508:	2000      	movs	r0, #0
 800b50a:	4770      	bx	lr
 800b50c:	7803      	ldrb	r3, [r0, #0]
 800b50e:	428b      	cmp	r3, r1
 800b510:	d0fb      	beq.n	800b50a <memchr+0xa>
 800b512:	3001      	adds	r0, #1
 800b514:	e7f6      	b.n	800b504 <memchr+0x4>

0800b516 <memcpy>:
 800b516:	2300      	movs	r3, #0
 800b518:	b510      	push	{r4, lr}
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d100      	bne.n	800b520 <memcpy+0xa>
 800b51e:	bd10      	pop	{r4, pc}
 800b520:	5ccc      	ldrb	r4, [r1, r3]
 800b522:	54c4      	strb	r4, [r0, r3]
 800b524:	3301      	adds	r3, #1
 800b526:	e7f8      	b.n	800b51a <memcpy+0x4>

0800b528 <_Balloc>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b52c:	0006      	movs	r6, r0
 800b52e:	000c      	movs	r4, r1
 800b530:	2d00      	cmp	r5, #0
 800b532:	d10e      	bne.n	800b552 <_Balloc+0x2a>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff ffc7 	bl	800b4c8 <malloc>
 800b53a:	1e02      	subs	r2, r0, #0
 800b53c:	6270      	str	r0, [r6, #36]	; 0x24
 800b53e:	d104      	bne.n	800b54a <_Balloc+0x22>
 800b540:	2166      	movs	r1, #102	; 0x66
 800b542:	4b19      	ldr	r3, [pc, #100]	; (800b5a8 <_Balloc+0x80>)
 800b544:	4819      	ldr	r0, [pc, #100]	; (800b5ac <_Balloc+0x84>)
 800b546:	f001 fb5d 	bl	800cc04 <__assert_func>
 800b54a:	6045      	str	r5, [r0, #4]
 800b54c:	6085      	str	r5, [r0, #8]
 800b54e:	6005      	str	r5, [r0, #0]
 800b550:	60c5      	str	r5, [r0, #12]
 800b552:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b554:	68eb      	ldr	r3, [r5, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d013      	beq.n	800b582 <_Balloc+0x5a>
 800b55a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b55c:	00a2      	lsls	r2, r4, #2
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	189b      	adds	r3, r3, r2
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	2800      	cmp	r0, #0
 800b566:	d118      	bne.n	800b59a <_Balloc+0x72>
 800b568:	2101      	movs	r1, #1
 800b56a:	000d      	movs	r5, r1
 800b56c:	40a5      	lsls	r5, r4
 800b56e:	1d6a      	adds	r2, r5, #5
 800b570:	0030      	movs	r0, r6
 800b572:	0092      	lsls	r2, r2, #2
 800b574:	f000 fca2 	bl	800bebc <_calloc_r>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d00c      	beq.n	800b596 <_Balloc+0x6e>
 800b57c:	6044      	str	r4, [r0, #4]
 800b57e:	6085      	str	r5, [r0, #8]
 800b580:	e00d      	b.n	800b59e <_Balloc+0x76>
 800b582:	2221      	movs	r2, #33	; 0x21
 800b584:	2104      	movs	r1, #4
 800b586:	0030      	movs	r0, r6
 800b588:	f000 fc98 	bl	800bebc <_calloc_r>
 800b58c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b58e:	60e8      	str	r0, [r5, #12]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e1      	bne.n	800b55a <_Balloc+0x32>
 800b596:	2000      	movs	r0, #0
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	6802      	ldr	r2, [r0, #0]
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	6103      	str	r3, [r0, #16]
 800b5a2:	60c3      	str	r3, [r0, #12]
 800b5a4:	e7f8      	b.n	800b598 <_Balloc+0x70>
 800b5a6:	46c0      	nop			; (mov r8, r8)
 800b5a8:	0800d9ae 	.word	0x0800d9ae
 800b5ac:	0800dab4 	.word	0x0800dab4

0800b5b0 <_Bfree>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5b4:	0005      	movs	r5, r0
 800b5b6:	000c      	movs	r4, r1
 800b5b8:	2e00      	cmp	r6, #0
 800b5ba:	d10e      	bne.n	800b5da <_Bfree+0x2a>
 800b5bc:	2010      	movs	r0, #16
 800b5be:	f7ff ff83 	bl	800b4c8 <malloc>
 800b5c2:	1e02      	subs	r2, r0, #0
 800b5c4:	6268      	str	r0, [r5, #36]	; 0x24
 800b5c6:	d104      	bne.n	800b5d2 <_Bfree+0x22>
 800b5c8:	218a      	movs	r1, #138	; 0x8a
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <_Bfree+0x40>)
 800b5cc:	4809      	ldr	r0, [pc, #36]	; (800b5f4 <_Bfree+0x44>)
 800b5ce:	f001 fb19 	bl	800cc04 <__assert_func>
 800b5d2:	6046      	str	r6, [r0, #4]
 800b5d4:	6086      	str	r6, [r0, #8]
 800b5d6:	6006      	str	r6, [r0, #0]
 800b5d8:	60c6      	str	r6, [r0, #12]
 800b5da:	2c00      	cmp	r4, #0
 800b5dc:	d007      	beq.n	800b5ee <_Bfree+0x3e>
 800b5de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5e0:	6862      	ldr	r2, [r4, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	0092      	lsls	r2, r2, #2
 800b5e6:	189b      	adds	r3, r3, r2
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	6022      	str	r2, [r4, #0]
 800b5ec:	601c      	str	r4, [r3, #0]
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	0800d9ae 	.word	0x0800d9ae
 800b5f4:	0800dab4 	.word	0x0800dab4

0800b5f8 <__multadd>:
 800b5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5fa:	000e      	movs	r6, r1
 800b5fc:	9001      	str	r0, [sp, #4]
 800b5fe:	000c      	movs	r4, r1
 800b600:	001d      	movs	r5, r3
 800b602:	2000      	movs	r0, #0
 800b604:	690f      	ldr	r7, [r1, #16]
 800b606:	3614      	adds	r6, #20
 800b608:	6833      	ldr	r3, [r6, #0]
 800b60a:	3001      	adds	r0, #1
 800b60c:	b299      	uxth	r1, r3
 800b60e:	4351      	muls	r1, r2
 800b610:	0c1b      	lsrs	r3, r3, #16
 800b612:	4353      	muls	r3, r2
 800b614:	1949      	adds	r1, r1, r5
 800b616:	0c0d      	lsrs	r5, r1, #16
 800b618:	195b      	adds	r3, r3, r5
 800b61a:	0c1d      	lsrs	r5, r3, #16
 800b61c:	b289      	uxth	r1, r1
 800b61e:	041b      	lsls	r3, r3, #16
 800b620:	185b      	adds	r3, r3, r1
 800b622:	c608      	stmia	r6!, {r3}
 800b624:	4287      	cmp	r7, r0
 800b626:	dcef      	bgt.n	800b608 <__multadd+0x10>
 800b628:	2d00      	cmp	r5, #0
 800b62a:	d022      	beq.n	800b672 <__multadd+0x7a>
 800b62c:	68a3      	ldr	r3, [r4, #8]
 800b62e:	42bb      	cmp	r3, r7
 800b630:	dc19      	bgt.n	800b666 <__multadd+0x6e>
 800b632:	6863      	ldr	r3, [r4, #4]
 800b634:	9801      	ldr	r0, [sp, #4]
 800b636:	1c59      	adds	r1, r3, #1
 800b638:	f7ff ff76 	bl	800b528 <_Balloc>
 800b63c:	1e06      	subs	r6, r0, #0
 800b63e:	d105      	bne.n	800b64c <__multadd+0x54>
 800b640:	0002      	movs	r2, r0
 800b642:	21b5      	movs	r1, #181	; 0xb5
 800b644:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <__multadd+0x80>)
 800b646:	480d      	ldr	r0, [pc, #52]	; (800b67c <__multadd+0x84>)
 800b648:	f001 fadc 	bl	800cc04 <__assert_func>
 800b64c:	0021      	movs	r1, r4
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	310c      	adds	r1, #12
 800b652:	1c9a      	adds	r2, r3, #2
 800b654:	0092      	lsls	r2, r2, #2
 800b656:	300c      	adds	r0, #12
 800b658:	f7ff ff5d 	bl	800b516 <memcpy>
 800b65c:	0021      	movs	r1, r4
 800b65e:	9801      	ldr	r0, [sp, #4]
 800b660:	f7ff ffa6 	bl	800b5b0 <_Bfree>
 800b664:	0034      	movs	r4, r6
 800b666:	1d3b      	adds	r3, r7, #4
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	18e3      	adds	r3, r4, r3
 800b66c:	605d      	str	r5, [r3, #4]
 800b66e:	1c7b      	adds	r3, r7, #1
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	0020      	movs	r0, r4
 800b674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	0800da24 	.word	0x0800da24
 800b67c:	0800dab4 	.word	0x0800dab4

0800b680 <__s2b>:
 800b680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b682:	0006      	movs	r6, r0
 800b684:	0018      	movs	r0, r3
 800b686:	000c      	movs	r4, r1
 800b688:	3008      	adds	r0, #8
 800b68a:	2109      	movs	r1, #9
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	0015      	movs	r5, r2
 800b690:	f7f4 fdea 	bl	8000268 <__divsi3>
 800b694:	2301      	movs	r3, #1
 800b696:	2100      	movs	r1, #0
 800b698:	4283      	cmp	r3, r0
 800b69a:	db0a      	blt.n	800b6b2 <__s2b+0x32>
 800b69c:	0030      	movs	r0, r6
 800b69e:	f7ff ff43 	bl	800b528 <_Balloc>
 800b6a2:	1e01      	subs	r1, r0, #0
 800b6a4:	d108      	bne.n	800b6b8 <__s2b+0x38>
 800b6a6:	0002      	movs	r2, r0
 800b6a8:	4b19      	ldr	r3, [pc, #100]	; (800b710 <__s2b+0x90>)
 800b6aa:	481a      	ldr	r0, [pc, #104]	; (800b714 <__s2b+0x94>)
 800b6ac:	31ce      	adds	r1, #206	; 0xce
 800b6ae:	f001 faa9 	bl	800cc04 <__assert_func>
 800b6b2:	005b      	lsls	r3, r3, #1
 800b6b4:	3101      	adds	r1, #1
 800b6b6:	e7ef      	b.n	800b698 <__s2b+0x18>
 800b6b8:	9b08      	ldr	r3, [sp, #32]
 800b6ba:	6143      	str	r3, [r0, #20]
 800b6bc:	2301      	movs	r3, #1
 800b6be:	6103      	str	r3, [r0, #16]
 800b6c0:	2d09      	cmp	r5, #9
 800b6c2:	dd18      	ble.n	800b6f6 <__s2b+0x76>
 800b6c4:	0023      	movs	r3, r4
 800b6c6:	3309      	adds	r3, #9
 800b6c8:	001f      	movs	r7, r3
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	1964      	adds	r4, r4, r5
 800b6ce:	783b      	ldrb	r3, [r7, #0]
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	0030      	movs	r0, r6
 800b6d4:	3b30      	subs	r3, #48	; 0x30
 800b6d6:	f7ff ff8f 	bl	800b5f8 <__multadd>
 800b6da:	3701      	adds	r7, #1
 800b6dc:	0001      	movs	r1, r0
 800b6de:	42a7      	cmp	r7, r4
 800b6e0:	d1f5      	bne.n	800b6ce <__s2b+0x4e>
 800b6e2:	002c      	movs	r4, r5
 800b6e4:	9b00      	ldr	r3, [sp, #0]
 800b6e6:	3c08      	subs	r4, #8
 800b6e8:	191c      	adds	r4, r3, r4
 800b6ea:	002f      	movs	r7, r5
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	429f      	cmp	r7, r3
 800b6f0:	db04      	blt.n	800b6fc <__s2b+0x7c>
 800b6f2:	0008      	movs	r0, r1
 800b6f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6f6:	2509      	movs	r5, #9
 800b6f8:	340a      	adds	r4, #10
 800b6fa:	e7f6      	b.n	800b6ea <__s2b+0x6a>
 800b6fc:	1b63      	subs	r3, r4, r5
 800b6fe:	5ddb      	ldrb	r3, [r3, r7]
 800b700:	220a      	movs	r2, #10
 800b702:	0030      	movs	r0, r6
 800b704:	3b30      	subs	r3, #48	; 0x30
 800b706:	f7ff ff77 	bl	800b5f8 <__multadd>
 800b70a:	3701      	adds	r7, #1
 800b70c:	0001      	movs	r1, r0
 800b70e:	e7ed      	b.n	800b6ec <__s2b+0x6c>
 800b710:	0800da24 	.word	0x0800da24
 800b714:	0800dab4 	.word	0x0800dab4

0800b718 <__hi0bits>:
 800b718:	0003      	movs	r3, r0
 800b71a:	0c02      	lsrs	r2, r0, #16
 800b71c:	2000      	movs	r0, #0
 800b71e:	4282      	cmp	r2, r0
 800b720:	d101      	bne.n	800b726 <__hi0bits+0xe>
 800b722:	041b      	lsls	r3, r3, #16
 800b724:	3010      	adds	r0, #16
 800b726:	0e1a      	lsrs	r2, r3, #24
 800b728:	d101      	bne.n	800b72e <__hi0bits+0x16>
 800b72a:	3008      	adds	r0, #8
 800b72c:	021b      	lsls	r3, r3, #8
 800b72e:	0f1a      	lsrs	r2, r3, #28
 800b730:	d101      	bne.n	800b736 <__hi0bits+0x1e>
 800b732:	3004      	adds	r0, #4
 800b734:	011b      	lsls	r3, r3, #4
 800b736:	0f9a      	lsrs	r2, r3, #30
 800b738:	d101      	bne.n	800b73e <__hi0bits+0x26>
 800b73a:	3002      	adds	r0, #2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	db03      	blt.n	800b74a <__hi0bits+0x32>
 800b742:	3001      	adds	r0, #1
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	d400      	bmi.n	800b74a <__hi0bits+0x32>
 800b748:	2020      	movs	r0, #32
 800b74a:	4770      	bx	lr

0800b74c <__lo0bits>:
 800b74c:	6803      	ldr	r3, [r0, #0]
 800b74e:	0002      	movs	r2, r0
 800b750:	2107      	movs	r1, #7
 800b752:	0018      	movs	r0, r3
 800b754:	4008      	ands	r0, r1
 800b756:	420b      	tst	r3, r1
 800b758:	d00d      	beq.n	800b776 <__lo0bits+0x2a>
 800b75a:	3906      	subs	r1, #6
 800b75c:	2000      	movs	r0, #0
 800b75e:	420b      	tst	r3, r1
 800b760:	d105      	bne.n	800b76e <__lo0bits+0x22>
 800b762:	3002      	adds	r0, #2
 800b764:	4203      	tst	r3, r0
 800b766:	d003      	beq.n	800b770 <__lo0bits+0x24>
 800b768:	40cb      	lsrs	r3, r1
 800b76a:	0008      	movs	r0, r1
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	4770      	bx	lr
 800b770:	089b      	lsrs	r3, r3, #2
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	e7fb      	b.n	800b76e <__lo0bits+0x22>
 800b776:	b299      	uxth	r1, r3
 800b778:	2900      	cmp	r1, #0
 800b77a:	d101      	bne.n	800b780 <__lo0bits+0x34>
 800b77c:	2010      	movs	r0, #16
 800b77e:	0c1b      	lsrs	r3, r3, #16
 800b780:	b2d9      	uxtb	r1, r3
 800b782:	2900      	cmp	r1, #0
 800b784:	d101      	bne.n	800b78a <__lo0bits+0x3e>
 800b786:	3008      	adds	r0, #8
 800b788:	0a1b      	lsrs	r3, r3, #8
 800b78a:	0719      	lsls	r1, r3, #28
 800b78c:	d101      	bne.n	800b792 <__lo0bits+0x46>
 800b78e:	3004      	adds	r0, #4
 800b790:	091b      	lsrs	r3, r3, #4
 800b792:	0799      	lsls	r1, r3, #30
 800b794:	d101      	bne.n	800b79a <__lo0bits+0x4e>
 800b796:	3002      	adds	r0, #2
 800b798:	089b      	lsrs	r3, r3, #2
 800b79a:	07d9      	lsls	r1, r3, #31
 800b79c:	d4e9      	bmi.n	800b772 <__lo0bits+0x26>
 800b79e:	3001      	adds	r0, #1
 800b7a0:	085b      	lsrs	r3, r3, #1
 800b7a2:	d1e6      	bne.n	800b772 <__lo0bits+0x26>
 800b7a4:	2020      	movs	r0, #32
 800b7a6:	e7e2      	b.n	800b76e <__lo0bits+0x22>

0800b7a8 <__i2b>:
 800b7a8:	b510      	push	{r4, lr}
 800b7aa:	000c      	movs	r4, r1
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	f7ff febb 	bl	800b528 <_Balloc>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d106      	bne.n	800b7c4 <__i2b+0x1c>
 800b7b6:	21a0      	movs	r1, #160	; 0xa0
 800b7b8:	0002      	movs	r2, r0
 800b7ba:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <__i2b+0x24>)
 800b7bc:	4804      	ldr	r0, [pc, #16]	; (800b7d0 <__i2b+0x28>)
 800b7be:	0049      	lsls	r1, r1, #1
 800b7c0:	f001 fa20 	bl	800cc04 <__assert_func>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	6144      	str	r4, [r0, #20]
 800b7c8:	6103      	str	r3, [r0, #16]
 800b7ca:	bd10      	pop	{r4, pc}
 800b7cc:	0800da24 	.word	0x0800da24
 800b7d0:	0800dab4 	.word	0x0800dab4

0800b7d4 <__multiply>:
 800b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d6:	690b      	ldr	r3, [r1, #16]
 800b7d8:	0014      	movs	r4, r2
 800b7da:	6912      	ldr	r2, [r2, #16]
 800b7dc:	000d      	movs	r5, r1
 800b7de:	b089      	sub	sp, #36	; 0x24
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	da01      	bge.n	800b7e8 <__multiply+0x14>
 800b7e4:	0025      	movs	r5, r4
 800b7e6:	000c      	movs	r4, r1
 800b7e8:	692f      	ldr	r7, [r5, #16]
 800b7ea:	6926      	ldr	r6, [r4, #16]
 800b7ec:	6869      	ldr	r1, [r5, #4]
 800b7ee:	19bb      	adds	r3, r7, r6
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	68ab      	ldr	r3, [r5, #8]
 800b7f4:	19ba      	adds	r2, r7, r6
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	da00      	bge.n	800b7fc <__multiply+0x28>
 800b7fa:	3101      	adds	r1, #1
 800b7fc:	f7ff fe94 	bl	800b528 <_Balloc>
 800b800:	9001      	str	r0, [sp, #4]
 800b802:	2800      	cmp	r0, #0
 800b804:	d106      	bne.n	800b814 <__multiply+0x40>
 800b806:	215e      	movs	r1, #94	; 0x5e
 800b808:	0002      	movs	r2, r0
 800b80a:	4b48      	ldr	r3, [pc, #288]	; (800b92c <__multiply+0x158>)
 800b80c:	4848      	ldr	r0, [pc, #288]	; (800b930 <__multiply+0x15c>)
 800b80e:	31ff      	adds	r1, #255	; 0xff
 800b810:	f001 f9f8 	bl	800cc04 <__assert_func>
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	3314      	adds	r3, #20
 800b81a:	469c      	mov	ip, r3
 800b81c:	19bb      	adds	r3, r7, r6
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4463      	add	r3, ip
 800b822:	9303      	str	r3, [sp, #12]
 800b824:	4663      	mov	r3, ip
 800b826:	9903      	ldr	r1, [sp, #12]
 800b828:	428b      	cmp	r3, r1
 800b82a:	d32c      	bcc.n	800b886 <__multiply+0xb2>
 800b82c:	002b      	movs	r3, r5
 800b82e:	0022      	movs	r2, r4
 800b830:	3314      	adds	r3, #20
 800b832:	00bf      	lsls	r7, r7, #2
 800b834:	3214      	adds	r2, #20
 800b836:	9306      	str	r3, [sp, #24]
 800b838:	00b6      	lsls	r6, r6, #2
 800b83a:	19db      	adds	r3, r3, r7
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	1993      	adds	r3, r2, r6
 800b840:	9307      	str	r3, [sp, #28]
 800b842:	2304      	movs	r3, #4
 800b844:	9305      	str	r3, [sp, #20]
 800b846:	002b      	movs	r3, r5
 800b848:	9904      	ldr	r1, [sp, #16]
 800b84a:	3315      	adds	r3, #21
 800b84c:	9200      	str	r2, [sp, #0]
 800b84e:	4299      	cmp	r1, r3
 800b850:	d305      	bcc.n	800b85e <__multiply+0x8a>
 800b852:	1b4b      	subs	r3, r1, r5
 800b854:	3b15      	subs	r3, #21
 800b856:	089b      	lsrs	r3, r3, #2
 800b858:	3301      	adds	r3, #1
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	9305      	str	r3, [sp, #20]
 800b85e:	9b07      	ldr	r3, [sp, #28]
 800b860:	9a00      	ldr	r2, [sp, #0]
 800b862:	429a      	cmp	r2, r3
 800b864:	d311      	bcc.n	800b88a <__multiply+0xb6>
 800b866:	9b02      	ldr	r3, [sp, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	dd06      	ble.n	800b87a <__multiply+0xa6>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	3b04      	subs	r3, #4
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d054      	beq.n	800b924 <__multiply+0x150>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	9a02      	ldr	r2, [sp, #8]
 800b87e:	0018      	movs	r0, r3
 800b880:	611a      	str	r2, [r3, #16]
 800b882:	b009      	add	sp, #36	; 0x24
 800b884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b886:	c304      	stmia	r3!, {r2}
 800b888:	e7cd      	b.n	800b826 <__multiply+0x52>
 800b88a:	9b00      	ldr	r3, [sp, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	b298      	uxth	r0, r3
 800b890:	2800      	cmp	r0, #0
 800b892:	d01c      	beq.n	800b8ce <__multiply+0xfa>
 800b894:	4667      	mov	r7, ip
 800b896:	2400      	movs	r4, #0
 800b898:	9e06      	ldr	r6, [sp, #24]
 800b89a:	ce02      	ldmia	r6!, {r1}
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	b28b      	uxth	r3, r1
 800b8a0:	4343      	muls	r3, r0
 800b8a2:	0c09      	lsrs	r1, r1, #16
 800b8a4:	4341      	muls	r1, r0
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	189b      	adds	r3, r3, r2
 800b8aa:	191b      	adds	r3, r3, r4
 800b8ac:	000c      	movs	r4, r1
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	0c11      	lsrs	r1, r2, #16
 800b8b2:	1861      	adds	r1, r4, r1
 800b8b4:	0c1c      	lsrs	r4, r3, #16
 800b8b6:	1909      	adds	r1, r1, r4
 800b8b8:	0c0c      	lsrs	r4, r1, #16
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	0409      	lsls	r1, r1, #16
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	c708      	stmia	r7!, {r3}
 800b8c2:	9b04      	ldr	r3, [sp, #16]
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	d8e8      	bhi.n	800b89a <__multiply+0xc6>
 800b8c8:	4663      	mov	r3, ip
 800b8ca:	9a05      	ldr	r2, [sp, #20]
 800b8cc:	509c      	str	r4, [r3, r2]
 800b8ce:	9b00      	ldr	r3, [sp, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	0c1e      	lsrs	r6, r3, #16
 800b8d4:	d020      	beq.n	800b918 <__multiply+0x144>
 800b8d6:	4663      	mov	r3, ip
 800b8d8:	002c      	movs	r4, r5
 800b8da:	4660      	mov	r0, ip
 800b8dc:	2700      	movs	r7, #0
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3414      	adds	r4, #20
 800b8e2:	6822      	ldr	r2, [r4, #0]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	b291      	uxth	r1, r2
 800b8e8:	4371      	muls	r1, r6
 800b8ea:	6802      	ldr	r2, [r0, #0]
 800b8ec:	0c12      	lsrs	r2, r2, #16
 800b8ee:	1889      	adds	r1, r1, r2
 800b8f0:	19cf      	adds	r7, r1, r7
 800b8f2:	0439      	lsls	r1, r7, #16
 800b8f4:	430b      	orrs	r3, r1
 800b8f6:	6003      	str	r3, [r0, #0]
 800b8f8:	cc02      	ldmia	r4!, {r1}
 800b8fa:	6843      	ldr	r3, [r0, #4]
 800b8fc:	0c09      	lsrs	r1, r1, #16
 800b8fe:	4371      	muls	r1, r6
 800b900:	b29b      	uxth	r3, r3
 800b902:	0c3f      	lsrs	r7, r7, #16
 800b904:	18cb      	adds	r3, r1, r3
 800b906:	9a04      	ldr	r2, [sp, #16]
 800b908:	19db      	adds	r3, r3, r7
 800b90a:	0c1f      	lsrs	r7, r3, #16
 800b90c:	3004      	adds	r0, #4
 800b90e:	42a2      	cmp	r2, r4
 800b910:	d8e7      	bhi.n	800b8e2 <__multiply+0x10e>
 800b912:	4662      	mov	r2, ip
 800b914:	9905      	ldr	r1, [sp, #20]
 800b916:	5053      	str	r3, [r2, r1]
 800b918:	9b00      	ldr	r3, [sp, #0]
 800b91a:	3304      	adds	r3, #4
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	2304      	movs	r3, #4
 800b920:	449c      	add	ip, r3
 800b922:	e79c      	b.n	800b85e <__multiply+0x8a>
 800b924:	9b02      	ldr	r3, [sp, #8]
 800b926:	3b01      	subs	r3, #1
 800b928:	9302      	str	r3, [sp, #8]
 800b92a:	e79c      	b.n	800b866 <__multiply+0x92>
 800b92c:	0800da24 	.word	0x0800da24
 800b930:	0800dab4 	.word	0x0800dab4

0800b934 <__pow5mult>:
 800b934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b936:	2303      	movs	r3, #3
 800b938:	0015      	movs	r5, r2
 800b93a:	0007      	movs	r7, r0
 800b93c:	000e      	movs	r6, r1
 800b93e:	401a      	ands	r2, r3
 800b940:	421d      	tst	r5, r3
 800b942:	d008      	beq.n	800b956 <__pow5mult+0x22>
 800b944:	4925      	ldr	r1, [pc, #148]	; (800b9dc <__pow5mult+0xa8>)
 800b946:	3a01      	subs	r2, #1
 800b948:	0092      	lsls	r2, r2, #2
 800b94a:	5852      	ldr	r2, [r2, r1]
 800b94c:	2300      	movs	r3, #0
 800b94e:	0031      	movs	r1, r6
 800b950:	f7ff fe52 	bl	800b5f8 <__multadd>
 800b954:	0006      	movs	r6, r0
 800b956:	10ad      	asrs	r5, r5, #2
 800b958:	d03d      	beq.n	800b9d6 <__pow5mult+0xa2>
 800b95a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b95c:	2c00      	cmp	r4, #0
 800b95e:	d10f      	bne.n	800b980 <__pow5mult+0x4c>
 800b960:	2010      	movs	r0, #16
 800b962:	f7ff fdb1 	bl	800b4c8 <malloc>
 800b966:	1e02      	subs	r2, r0, #0
 800b968:	6278      	str	r0, [r7, #36]	; 0x24
 800b96a:	d105      	bne.n	800b978 <__pow5mult+0x44>
 800b96c:	21d7      	movs	r1, #215	; 0xd7
 800b96e:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <__pow5mult+0xac>)
 800b970:	481c      	ldr	r0, [pc, #112]	; (800b9e4 <__pow5mult+0xb0>)
 800b972:	0049      	lsls	r1, r1, #1
 800b974:	f001 f946 	bl	800cc04 <__assert_func>
 800b978:	6044      	str	r4, [r0, #4]
 800b97a:	6084      	str	r4, [r0, #8]
 800b97c:	6004      	str	r4, [r0, #0]
 800b97e:	60c4      	str	r4, [r0, #12]
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	689c      	ldr	r4, [r3, #8]
 800b984:	9301      	str	r3, [sp, #4]
 800b986:	2c00      	cmp	r4, #0
 800b988:	d108      	bne.n	800b99c <__pow5mult+0x68>
 800b98a:	0038      	movs	r0, r7
 800b98c:	4916      	ldr	r1, [pc, #88]	; (800b9e8 <__pow5mult+0xb4>)
 800b98e:	f7ff ff0b 	bl	800b7a8 <__i2b>
 800b992:	9b01      	ldr	r3, [sp, #4]
 800b994:	0004      	movs	r4, r0
 800b996:	6098      	str	r0, [r3, #8]
 800b998:	2300      	movs	r3, #0
 800b99a:	6003      	str	r3, [r0, #0]
 800b99c:	2301      	movs	r3, #1
 800b99e:	421d      	tst	r5, r3
 800b9a0:	d00a      	beq.n	800b9b8 <__pow5mult+0x84>
 800b9a2:	0031      	movs	r1, r6
 800b9a4:	0022      	movs	r2, r4
 800b9a6:	0038      	movs	r0, r7
 800b9a8:	f7ff ff14 	bl	800b7d4 <__multiply>
 800b9ac:	0031      	movs	r1, r6
 800b9ae:	9001      	str	r0, [sp, #4]
 800b9b0:	0038      	movs	r0, r7
 800b9b2:	f7ff fdfd 	bl	800b5b0 <_Bfree>
 800b9b6:	9e01      	ldr	r6, [sp, #4]
 800b9b8:	106d      	asrs	r5, r5, #1
 800b9ba:	d00c      	beq.n	800b9d6 <__pow5mult+0xa2>
 800b9bc:	6820      	ldr	r0, [r4, #0]
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d107      	bne.n	800b9d2 <__pow5mult+0x9e>
 800b9c2:	0022      	movs	r2, r4
 800b9c4:	0021      	movs	r1, r4
 800b9c6:	0038      	movs	r0, r7
 800b9c8:	f7ff ff04 	bl	800b7d4 <__multiply>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6020      	str	r0, [r4, #0]
 800b9d0:	6003      	str	r3, [r0, #0]
 800b9d2:	0004      	movs	r4, r0
 800b9d4:	e7e2      	b.n	800b99c <__pow5mult+0x68>
 800b9d6:	0030      	movs	r0, r6
 800b9d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	0800dc08 	.word	0x0800dc08
 800b9e0:	0800d9ae 	.word	0x0800d9ae
 800b9e4:	0800dab4 	.word	0x0800dab4
 800b9e8:	00000271 	.word	0x00000271

0800b9ec <__lshift>:
 800b9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ee:	000c      	movs	r4, r1
 800b9f0:	0017      	movs	r7, r2
 800b9f2:	6923      	ldr	r3, [r4, #16]
 800b9f4:	1155      	asrs	r5, r2, #5
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	18eb      	adds	r3, r5, r3
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	6849      	ldr	r1, [r1, #4]
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	9004      	str	r0, [sp, #16]
 800ba06:	9a01      	ldr	r2, [sp, #4]
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	db11      	blt.n	800ba30 <__lshift+0x44>
 800ba0c:	9804      	ldr	r0, [sp, #16]
 800ba0e:	f7ff fd8b 	bl	800b528 <_Balloc>
 800ba12:	0002      	movs	r2, r0
 800ba14:	2300      	movs	r3, #0
 800ba16:	3214      	adds	r2, #20
 800ba18:	0006      	movs	r6, r0
 800ba1a:	0011      	movs	r1, r2
 800ba1c:	9203      	str	r2, [sp, #12]
 800ba1e:	4298      	cmp	r0, r3
 800ba20:	d10d      	bne.n	800ba3e <__lshift+0x52>
 800ba22:	21da      	movs	r1, #218	; 0xda
 800ba24:	0002      	movs	r2, r0
 800ba26:	4b27      	ldr	r3, [pc, #156]	; (800bac4 <__lshift+0xd8>)
 800ba28:	4827      	ldr	r0, [pc, #156]	; (800bac8 <__lshift+0xdc>)
 800ba2a:	31ff      	adds	r1, #255	; 0xff
 800ba2c:	f001 f8ea 	bl	800cc04 <__assert_func>
 800ba30:	3101      	adds	r1, #1
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	e7e7      	b.n	800ba06 <__lshift+0x1a>
 800ba36:	2200      	movs	r2, #0
 800ba38:	0098      	lsls	r0, r3, #2
 800ba3a:	500a      	str	r2, [r1, r0]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	42ab      	cmp	r3, r5
 800ba40:	dbf9      	blt.n	800ba36 <__lshift+0x4a>
 800ba42:	43eb      	mvns	r3, r5
 800ba44:	17db      	asrs	r3, r3, #31
 800ba46:	401d      	ands	r5, r3
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	00ad      	lsls	r5, r5, #2
 800ba4c:	211f      	movs	r1, #31
 800ba4e:	0038      	movs	r0, r7
 800ba50:	195d      	adds	r5, r3, r5
 800ba52:	0023      	movs	r3, r4
 800ba54:	6922      	ldr	r2, [r4, #16]
 800ba56:	3314      	adds	r3, #20
 800ba58:	0092      	lsls	r2, r2, #2
 800ba5a:	4008      	ands	r0, r1
 800ba5c:	4684      	mov	ip, r0
 800ba5e:	189a      	adds	r2, r3, r2
 800ba60:	420f      	tst	r7, r1
 800ba62:	d02a      	beq.n	800baba <__lshift+0xce>
 800ba64:	3101      	adds	r1, #1
 800ba66:	1a09      	subs	r1, r1, r0
 800ba68:	9105      	str	r1, [sp, #20]
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	9503      	str	r5, [sp, #12]
 800ba6e:	4667      	mov	r7, ip
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	40b8      	lsls	r0, r7
 800ba74:	4301      	orrs	r1, r0
 800ba76:	9803      	ldr	r0, [sp, #12]
 800ba78:	c002      	stmia	r0!, {r1}
 800ba7a:	cb02      	ldmia	r3!, {r1}
 800ba7c:	9003      	str	r0, [sp, #12]
 800ba7e:	9805      	ldr	r0, [sp, #20]
 800ba80:	40c1      	lsrs	r1, r0
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d8f3      	bhi.n	800ba6e <__lshift+0x82>
 800ba86:	0020      	movs	r0, r4
 800ba88:	3015      	adds	r0, #21
 800ba8a:	2304      	movs	r3, #4
 800ba8c:	4282      	cmp	r2, r0
 800ba8e:	d304      	bcc.n	800ba9a <__lshift+0xae>
 800ba90:	1b13      	subs	r3, r2, r4
 800ba92:	3b15      	subs	r3, #21
 800ba94:	089b      	lsrs	r3, r3, #2
 800ba96:	3301      	adds	r3, #1
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	50e9      	str	r1, [r5, r3]
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	d002      	beq.n	800baa6 <__lshift+0xba>
 800baa0:	9b02      	ldr	r3, [sp, #8]
 800baa2:	3302      	adds	r3, #2
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	9b01      	ldr	r3, [sp, #4]
 800baa8:	9804      	ldr	r0, [sp, #16]
 800baaa:	3b01      	subs	r3, #1
 800baac:	0021      	movs	r1, r4
 800baae:	6133      	str	r3, [r6, #16]
 800bab0:	f7ff fd7e 	bl	800b5b0 <_Bfree>
 800bab4:	0030      	movs	r0, r6
 800bab6:	b007      	add	sp, #28
 800bab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baba:	cb02      	ldmia	r3!, {r1}
 800babc:	c502      	stmia	r5!, {r1}
 800babe:	429a      	cmp	r2, r3
 800bac0:	d8fb      	bhi.n	800baba <__lshift+0xce>
 800bac2:	e7f0      	b.n	800baa6 <__lshift+0xba>
 800bac4:	0800da24 	.word	0x0800da24
 800bac8:	0800dab4 	.word	0x0800dab4

0800bacc <__mcmp>:
 800bacc:	6902      	ldr	r2, [r0, #16]
 800bace:	690b      	ldr	r3, [r1, #16]
 800bad0:	b530      	push	{r4, r5, lr}
 800bad2:	0004      	movs	r4, r0
 800bad4:	1ad0      	subs	r0, r2, r3
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d10d      	bne.n	800baf6 <__mcmp+0x2a>
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	3414      	adds	r4, #20
 800bade:	3114      	adds	r1, #20
 800bae0:	18e2      	adds	r2, r4, r3
 800bae2:	18c9      	adds	r1, r1, r3
 800bae4:	3a04      	subs	r2, #4
 800bae6:	3904      	subs	r1, #4
 800bae8:	6815      	ldr	r5, [r2, #0]
 800baea:	680b      	ldr	r3, [r1, #0]
 800baec:	429d      	cmp	r5, r3
 800baee:	d003      	beq.n	800baf8 <__mcmp+0x2c>
 800baf0:	2001      	movs	r0, #1
 800baf2:	429d      	cmp	r5, r3
 800baf4:	d303      	bcc.n	800bafe <__mcmp+0x32>
 800baf6:	bd30      	pop	{r4, r5, pc}
 800baf8:	4294      	cmp	r4, r2
 800bafa:	d3f3      	bcc.n	800bae4 <__mcmp+0x18>
 800bafc:	e7fb      	b.n	800baf6 <__mcmp+0x2a>
 800bafe:	4240      	negs	r0, r0
 800bb00:	e7f9      	b.n	800baf6 <__mcmp+0x2a>
	...

0800bb04 <__mdiff>:
 800bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb06:	000e      	movs	r6, r1
 800bb08:	0007      	movs	r7, r0
 800bb0a:	0011      	movs	r1, r2
 800bb0c:	0030      	movs	r0, r6
 800bb0e:	b087      	sub	sp, #28
 800bb10:	0014      	movs	r4, r2
 800bb12:	f7ff ffdb 	bl	800bacc <__mcmp>
 800bb16:	1e05      	subs	r5, r0, #0
 800bb18:	d110      	bne.n	800bb3c <__mdiff+0x38>
 800bb1a:	0001      	movs	r1, r0
 800bb1c:	0038      	movs	r0, r7
 800bb1e:	f7ff fd03 	bl	800b528 <_Balloc>
 800bb22:	1e02      	subs	r2, r0, #0
 800bb24:	d104      	bne.n	800bb30 <__mdiff+0x2c>
 800bb26:	4b40      	ldr	r3, [pc, #256]	; (800bc28 <__mdiff+0x124>)
 800bb28:	4940      	ldr	r1, [pc, #256]	; (800bc2c <__mdiff+0x128>)
 800bb2a:	4841      	ldr	r0, [pc, #260]	; (800bc30 <__mdiff+0x12c>)
 800bb2c:	f001 f86a 	bl	800cc04 <__assert_func>
 800bb30:	2301      	movs	r3, #1
 800bb32:	6145      	str	r5, [r0, #20]
 800bb34:	6103      	str	r3, [r0, #16]
 800bb36:	0010      	movs	r0, r2
 800bb38:	b007      	add	sp, #28
 800bb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	2800      	cmp	r0, #0
 800bb42:	db04      	blt.n	800bb4e <__mdiff+0x4a>
 800bb44:	0023      	movs	r3, r4
 800bb46:	0034      	movs	r4, r6
 800bb48:	001e      	movs	r6, r3
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	9301      	str	r3, [sp, #4]
 800bb4e:	0038      	movs	r0, r7
 800bb50:	6861      	ldr	r1, [r4, #4]
 800bb52:	f7ff fce9 	bl	800b528 <_Balloc>
 800bb56:	1e02      	subs	r2, r0, #0
 800bb58:	d103      	bne.n	800bb62 <__mdiff+0x5e>
 800bb5a:	2190      	movs	r1, #144	; 0x90
 800bb5c:	4b32      	ldr	r3, [pc, #200]	; (800bc28 <__mdiff+0x124>)
 800bb5e:	0089      	lsls	r1, r1, #2
 800bb60:	e7e3      	b.n	800bb2a <__mdiff+0x26>
 800bb62:	9b01      	ldr	r3, [sp, #4]
 800bb64:	2700      	movs	r7, #0
 800bb66:	60c3      	str	r3, [r0, #12]
 800bb68:	6920      	ldr	r0, [r4, #16]
 800bb6a:	3414      	adds	r4, #20
 800bb6c:	9401      	str	r4, [sp, #4]
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	0084      	lsls	r4, r0, #2
 800bb72:	191b      	adds	r3, r3, r4
 800bb74:	0034      	movs	r4, r6
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	6933      	ldr	r3, [r6, #16]
 800bb7a:	3414      	adds	r4, #20
 800bb7c:	0099      	lsls	r1, r3, #2
 800bb7e:	1863      	adds	r3, r4, r1
 800bb80:	9303      	str	r3, [sp, #12]
 800bb82:	0013      	movs	r3, r2
 800bb84:	3314      	adds	r3, #20
 800bb86:	469c      	mov	ip, r3
 800bb88:	9305      	str	r3, [sp, #20]
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	cc02      	ldmia	r4!, {r1}
 800bb92:	cb20      	ldmia	r3!, {r5}
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	b2ab      	uxth	r3, r5
 800bb98:	19df      	adds	r7, r3, r7
 800bb9a:	b28b      	uxth	r3, r1
 800bb9c:	1afb      	subs	r3, r7, r3
 800bb9e:	0c2d      	lsrs	r5, r5, #16
 800bba0:	0c09      	lsrs	r1, r1, #16
 800bba2:	1a69      	subs	r1, r5, r1
 800bba4:	141d      	asrs	r5, r3, #16
 800bba6:	1949      	adds	r1, r1, r5
 800bba8:	140f      	asrs	r7, r1, #16
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	0409      	lsls	r1, r1, #16
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	4661      	mov	r1, ip
 800bbb2:	c108      	stmia	r1!, {r3}
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	468c      	mov	ip, r1
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	d8e8      	bhi.n	800bb8e <__mdiff+0x8a>
 800bbbc:	0031      	movs	r1, r6
 800bbbe:	9c03      	ldr	r4, [sp, #12]
 800bbc0:	3115      	adds	r1, #21
 800bbc2:	2304      	movs	r3, #4
 800bbc4:	428c      	cmp	r4, r1
 800bbc6:	d304      	bcc.n	800bbd2 <__mdiff+0xce>
 800bbc8:	1ba3      	subs	r3, r4, r6
 800bbca:	3b15      	subs	r3, #21
 800bbcc:	089b      	lsrs	r3, r3, #2
 800bbce:	3301      	adds	r3, #1
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	9901      	ldr	r1, [sp, #4]
 800bbd4:	18cc      	adds	r4, r1, r3
 800bbd6:	9905      	ldr	r1, [sp, #20]
 800bbd8:	0026      	movs	r6, r4
 800bbda:	18cb      	adds	r3, r1, r3
 800bbdc:	469c      	mov	ip, r3
 800bbde:	9902      	ldr	r1, [sp, #8]
 800bbe0:	428e      	cmp	r6, r1
 800bbe2:	d310      	bcc.n	800bc06 <__mdiff+0x102>
 800bbe4:	9e02      	ldr	r6, [sp, #8]
 800bbe6:	1ee5      	subs	r5, r4, #3
 800bbe8:	2100      	movs	r1, #0
 800bbea:	42ae      	cmp	r6, r5
 800bbec:	d304      	bcc.n	800bbf8 <__mdiff+0xf4>
 800bbee:	0031      	movs	r1, r6
 800bbf0:	3103      	adds	r1, #3
 800bbf2:	1b09      	subs	r1, r1, r4
 800bbf4:	0889      	lsrs	r1, r1, #2
 800bbf6:	0089      	lsls	r1, r1, #2
 800bbf8:	185b      	adds	r3, r3, r1
 800bbfa:	3b04      	subs	r3, #4
 800bbfc:	6819      	ldr	r1, [r3, #0]
 800bbfe:	2900      	cmp	r1, #0
 800bc00:	d00f      	beq.n	800bc22 <__mdiff+0x11e>
 800bc02:	6110      	str	r0, [r2, #16]
 800bc04:	e797      	b.n	800bb36 <__mdiff+0x32>
 800bc06:	ce02      	ldmia	r6!, {r1}
 800bc08:	b28d      	uxth	r5, r1
 800bc0a:	19ed      	adds	r5, r5, r7
 800bc0c:	0c0f      	lsrs	r7, r1, #16
 800bc0e:	1429      	asrs	r1, r5, #16
 800bc10:	1879      	adds	r1, r7, r1
 800bc12:	140f      	asrs	r7, r1, #16
 800bc14:	b2ad      	uxth	r5, r5
 800bc16:	0409      	lsls	r1, r1, #16
 800bc18:	430d      	orrs	r5, r1
 800bc1a:	4661      	mov	r1, ip
 800bc1c:	c120      	stmia	r1!, {r5}
 800bc1e:	468c      	mov	ip, r1
 800bc20:	e7dd      	b.n	800bbde <__mdiff+0xda>
 800bc22:	3801      	subs	r0, #1
 800bc24:	e7e9      	b.n	800bbfa <__mdiff+0xf6>
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	0800da24 	.word	0x0800da24
 800bc2c:	00000232 	.word	0x00000232
 800bc30:	0800dab4 	.word	0x0800dab4

0800bc34 <__ulp>:
 800bc34:	4b0f      	ldr	r3, [pc, #60]	; (800bc74 <__ulp+0x40>)
 800bc36:	4019      	ands	r1, r3
 800bc38:	4b0f      	ldr	r3, [pc, #60]	; (800bc78 <__ulp+0x44>)
 800bc3a:	18c9      	adds	r1, r1, r3
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	dd04      	ble.n	800bc4a <__ulp+0x16>
 800bc40:	2200      	movs	r2, #0
 800bc42:	000b      	movs	r3, r1
 800bc44:	0010      	movs	r0, r2
 800bc46:	0019      	movs	r1, r3
 800bc48:	4770      	bx	lr
 800bc4a:	4249      	negs	r1, r1
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	1509      	asrs	r1, r1, #20
 800bc52:	2913      	cmp	r1, #19
 800bc54:	dc04      	bgt.n	800bc60 <__ulp+0x2c>
 800bc56:	2080      	movs	r0, #128	; 0x80
 800bc58:	0300      	lsls	r0, r0, #12
 800bc5a:	4108      	asrs	r0, r1
 800bc5c:	0003      	movs	r3, r0
 800bc5e:	e7f1      	b.n	800bc44 <__ulp+0x10>
 800bc60:	3914      	subs	r1, #20
 800bc62:	2001      	movs	r0, #1
 800bc64:	291e      	cmp	r1, #30
 800bc66:	dc02      	bgt.n	800bc6e <__ulp+0x3a>
 800bc68:	2080      	movs	r0, #128	; 0x80
 800bc6a:	0600      	lsls	r0, r0, #24
 800bc6c:	40c8      	lsrs	r0, r1
 800bc6e:	0002      	movs	r2, r0
 800bc70:	e7e8      	b.n	800bc44 <__ulp+0x10>
 800bc72:	46c0      	nop			; (mov r8, r8)
 800bc74:	7ff00000 	.word	0x7ff00000
 800bc78:	fcc00000 	.word	0xfcc00000

0800bc7c <__b2d>:
 800bc7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc7e:	0006      	movs	r6, r0
 800bc80:	6903      	ldr	r3, [r0, #16]
 800bc82:	3614      	adds	r6, #20
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	18f3      	adds	r3, r6, r3
 800bc88:	1f1d      	subs	r5, r3, #4
 800bc8a:	682c      	ldr	r4, [r5, #0]
 800bc8c:	000f      	movs	r7, r1
 800bc8e:	0020      	movs	r0, r4
 800bc90:	9301      	str	r3, [sp, #4]
 800bc92:	f7ff fd41 	bl	800b718 <__hi0bits>
 800bc96:	2320      	movs	r3, #32
 800bc98:	1a1b      	subs	r3, r3, r0
 800bc9a:	491f      	ldr	r1, [pc, #124]	; (800bd18 <__b2d+0x9c>)
 800bc9c:	603b      	str	r3, [r7, #0]
 800bc9e:	280a      	cmp	r0, #10
 800bca0:	dc16      	bgt.n	800bcd0 <__b2d+0x54>
 800bca2:	230b      	movs	r3, #11
 800bca4:	0027      	movs	r7, r4
 800bca6:	1a1b      	subs	r3, r3, r0
 800bca8:	40df      	lsrs	r7, r3
 800bcaa:	4339      	orrs	r1, r7
 800bcac:	469c      	mov	ip, r3
 800bcae:	000b      	movs	r3, r1
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	42ae      	cmp	r6, r5
 800bcb4:	d202      	bcs.n	800bcbc <__b2d+0x40>
 800bcb6:	9901      	ldr	r1, [sp, #4]
 800bcb8:	3908      	subs	r1, #8
 800bcba:	6809      	ldr	r1, [r1, #0]
 800bcbc:	3015      	adds	r0, #21
 800bcbe:	4084      	lsls	r4, r0
 800bcc0:	4660      	mov	r0, ip
 800bcc2:	40c1      	lsrs	r1, r0
 800bcc4:	430c      	orrs	r4, r1
 800bcc6:	0022      	movs	r2, r4
 800bcc8:	0010      	movs	r0, r2
 800bcca:	0019      	movs	r1, r3
 800bccc:	b003      	add	sp, #12
 800bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd0:	2700      	movs	r7, #0
 800bcd2:	42ae      	cmp	r6, r5
 800bcd4:	d202      	bcs.n	800bcdc <__b2d+0x60>
 800bcd6:	9d01      	ldr	r5, [sp, #4]
 800bcd8:	3d08      	subs	r5, #8
 800bcda:	682f      	ldr	r7, [r5, #0]
 800bcdc:	230b      	movs	r3, #11
 800bcde:	425b      	negs	r3, r3
 800bce0:	469c      	mov	ip, r3
 800bce2:	4484      	add	ip, r0
 800bce4:	280b      	cmp	r0, #11
 800bce6:	d013      	beq.n	800bd10 <__b2d+0x94>
 800bce8:	4663      	mov	r3, ip
 800bcea:	2020      	movs	r0, #32
 800bcec:	409c      	lsls	r4, r3
 800bcee:	1ac0      	subs	r0, r0, r3
 800bcf0:	003b      	movs	r3, r7
 800bcf2:	40c3      	lsrs	r3, r0
 800bcf4:	431c      	orrs	r4, r3
 800bcf6:	4321      	orrs	r1, r4
 800bcf8:	000b      	movs	r3, r1
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	42b5      	cmp	r5, r6
 800bcfe:	d901      	bls.n	800bd04 <__b2d+0x88>
 800bd00:	3d04      	subs	r5, #4
 800bd02:	6829      	ldr	r1, [r5, #0]
 800bd04:	4664      	mov	r4, ip
 800bd06:	40c1      	lsrs	r1, r0
 800bd08:	40a7      	lsls	r7, r4
 800bd0a:	430f      	orrs	r7, r1
 800bd0c:	003a      	movs	r2, r7
 800bd0e:	e7db      	b.n	800bcc8 <__b2d+0x4c>
 800bd10:	4321      	orrs	r1, r4
 800bd12:	000b      	movs	r3, r1
 800bd14:	e7fa      	b.n	800bd0c <__b2d+0x90>
 800bd16:	46c0      	nop			; (mov r8, r8)
 800bd18:	3ff00000 	.word	0x3ff00000

0800bd1c <__d2b>:
 800bd1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd1e:	2101      	movs	r1, #1
 800bd20:	0014      	movs	r4, r2
 800bd22:	001e      	movs	r6, r3
 800bd24:	9f08      	ldr	r7, [sp, #32]
 800bd26:	f7ff fbff 	bl	800b528 <_Balloc>
 800bd2a:	1e05      	subs	r5, r0, #0
 800bd2c:	d105      	bne.n	800bd3a <__d2b+0x1e>
 800bd2e:	0002      	movs	r2, r0
 800bd30:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <__d2b+0xb0>)
 800bd32:	4927      	ldr	r1, [pc, #156]	; (800bdd0 <__d2b+0xb4>)
 800bd34:	4827      	ldr	r0, [pc, #156]	; (800bdd4 <__d2b+0xb8>)
 800bd36:	f000 ff65 	bl	800cc04 <__assert_func>
 800bd3a:	0333      	lsls	r3, r6, #12
 800bd3c:	0076      	lsls	r6, r6, #1
 800bd3e:	0b1b      	lsrs	r3, r3, #12
 800bd40:	0d76      	lsrs	r6, r6, #21
 800bd42:	d124      	bne.n	800bd8e <__d2b+0x72>
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	2c00      	cmp	r4, #0
 800bd48:	d027      	beq.n	800bd9a <__d2b+0x7e>
 800bd4a:	4668      	mov	r0, sp
 800bd4c:	9400      	str	r4, [sp, #0]
 800bd4e:	f7ff fcfd 	bl	800b74c <__lo0bits>
 800bd52:	9c00      	ldr	r4, [sp, #0]
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d01e      	beq.n	800bd96 <__d2b+0x7a>
 800bd58:	9b01      	ldr	r3, [sp, #4]
 800bd5a:	2120      	movs	r1, #32
 800bd5c:	001a      	movs	r2, r3
 800bd5e:	1a09      	subs	r1, r1, r0
 800bd60:	408a      	lsls	r2, r1
 800bd62:	40c3      	lsrs	r3, r0
 800bd64:	4322      	orrs	r2, r4
 800bd66:	616a      	str	r2, [r5, #20]
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	9c01      	ldr	r4, [sp, #4]
 800bd6c:	61ac      	str	r4, [r5, #24]
 800bd6e:	1e63      	subs	r3, r4, #1
 800bd70:	419c      	sbcs	r4, r3
 800bd72:	3401      	adds	r4, #1
 800bd74:	612c      	str	r4, [r5, #16]
 800bd76:	2e00      	cmp	r6, #0
 800bd78:	d018      	beq.n	800bdac <__d2b+0x90>
 800bd7a:	4b17      	ldr	r3, [pc, #92]	; (800bdd8 <__d2b+0xbc>)
 800bd7c:	18f6      	adds	r6, r6, r3
 800bd7e:	2335      	movs	r3, #53	; 0x35
 800bd80:	1836      	adds	r6, r6, r0
 800bd82:	1a18      	subs	r0, r3, r0
 800bd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd86:	603e      	str	r6, [r7, #0]
 800bd88:	6018      	str	r0, [r3, #0]
 800bd8a:	0028      	movs	r0, r5
 800bd8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd8e:	2280      	movs	r2, #128	; 0x80
 800bd90:	0352      	lsls	r2, r2, #13
 800bd92:	4313      	orrs	r3, r2
 800bd94:	e7d6      	b.n	800bd44 <__d2b+0x28>
 800bd96:	616c      	str	r4, [r5, #20]
 800bd98:	e7e7      	b.n	800bd6a <__d2b+0x4e>
 800bd9a:	a801      	add	r0, sp, #4
 800bd9c:	f7ff fcd6 	bl	800b74c <__lo0bits>
 800bda0:	2401      	movs	r4, #1
 800bda2:	9b01      	ldr	r3, [sp, #4]
 800bda4:	612c      	str	r4, [r5, #16]
 800bda6:	616b      	str	r3, [r5, #20]
 800bda8:	3020      	adds	r0, #32
 800bdaa:	e7e4      	b.n	800bd76 <__d2b+0x5a>
 800bdac:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <__d2b+0xc0>)
 800bdae:	18c0      	adds	r0, r0, r3
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <__d2b+0xc4>)
 800bdb2:	6038      	str	r0, [r7, #0]
 800bdb4:	18e3      	adds	r3, r4, r3
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	18eb      	adds	r3, r5, r3
 800bdba:	6958      	ldr	r0, [r3, #20]
 800bdbc:	f7ff fcac 	bl	800b718 <__hi0bits>
 800bdc0:	0164      	lsls	r4, r4, #5
 800bdc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc4:	1a24      	subs	r4, r4, r0
 800bdc6:	601c      	str	r4, [r3, #0]
 800bdc8:	e7df      	b.n	800bd8a <__d2b+0x6e>
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	0800da24 	.word	0x0800da24
 800bdd0:	0000030a 	.word	0x0000030a
 800bdd4:	0800dab4 	.word	0x0800dab4
 800bdd8:	fffffbcd 	.word	0xfffffbcd
 800bddc:	fffffbce 	.word	0xfffffbce
 800bde0:	3fffffff 	.word	0x3fffffff

0800bde4 <__ratio>:
 800bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde6:	b085      	sub	sp, #20
 800bde8:	000d      	movs	r5, r1
 800bdea:	a902      	add	r1, sp, #8
 800bdec:	0004      	movs	r4, r0
 800bdee:	f7ff ff45 	bl	800bc7c <__b2d>
 800bdf2:	9000      	str	r0, [sp, #0]
 800bdf4:	9101      	str	r1, [sp, #4]
 800bdf6:	9e00      	ldr	r6, [sp, #0]
 800bdf8:	9f01      	ldr	r7, [sp, #4]
 800bdfa:	0028      	movs	r0, r5
 800bdfc:	a903      	add	r1, sp, #12
 800bdfe:	f7ff ff3d 	bl	800bc7c <__b2d>
 800be02:	6924      	ldr	r4, [r4, #16]
 800be04:	692d      	ldr	r5, [r5, #16]
 800be06:	0002      	movs	r2, r0
 800be08:	1b65      	subs	r5, r4, r5
 800be0a:	016c      	lsls	r4, r5, #5
 800be0c:	46a4      	mov	ip, r4
 800be0e:	9d03      	ldr	r5, [sp, #12]
 800be10:	9c02      	ldr	r4, [sp, #8]
 800be12:	000b      	movs	r3, r1
 800be14:	1b64      	subs	r4, r4, r5
 800be16:	4464      	add	r4, ip
 800be18:	0525      	lsls	r5, r4, #20
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	dd07      	ble.n	800be2e <__ratio+0x4a>
 800be1e:	9901      	ldr	r1, [sp, #4]
 800be20:	186f      	adds	r7, r5, r1
 800be22:	0030      	movs	r0, r6
 800be24:	0039      	movs	r1, r7
 800be26:	f7f4 ff23 	bl	8000c70 <__aeabi_ddiv>
 800be2a:	b005      	add	sp, #20
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2e:	1b4b      	subs	r3, r1, r5
 800be30:	e7f7      	b.n	800be22 <__ratio+0x3e>

0800be32 <__copybits>:
 800be32:	b570      	push	{r4, r5, r6, lr}
 800be34:	0015      	movs	r5, r2
 800be36:	6913      	ldr	r3, [r2, #16]
 800be38:	3514      	adds	r5, #20
 800be3a:	009c      	lsls	r4, r3, #2
 800be3c:	0006      	movs	r6, r0
 800be3e:	002b      	movs	r3, r5
 800be40:	3901      	subs	r1, #1
 800be42:	1149      	asrs	r1, r1, #5
 800be44:	3101      	adds	r1, #1
 800be46:	0089      	lsls	r1, r1, #2
 800be48:	1841      	adds	r1, r0, r1
 800be4a:	192c      	adds	r4, r5, r4
 800be4c:	429c      	cmp	r4, r3
 800be4e:	d80d      	bhi.n	800be6c <__copybits+0x3a>
 800be50:	0015      	movs	r5, r2
 800be52:	3511      	adds	r5, #17
 800be54:	2300      	movs	r3, #0
 800be56:	42a5      	cmp	r5, r4
 800be58:	d803      	bhi.n	800be62 <__copybits+0x30>
 800be5a:	1aa3      	subs	r3, r4, r2
 800be5c:	3b11      	subs	r3, #17
 800be5e:	089b      	lsrs	r3, r3, #2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	18c0      	adds	r0, r0, r3
 800be64:	2300      	movs	r3, #0
 800be66:	4281      	cmp	r1, r0
 800be68:	d803      	bhi.n	800be72 <__copybits+0x40>
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	cb20      	ldmia	r3!, {r5}
 800be6e:	c620      	stmia	r6!, {r5}
 800be70:	e7ec      	b.n	800be4c <__copybits+0x1a>
 800be72:	c008      	stmia	r0!, {r3}
 800be74:	e7f7      	b.n	800be66 <__copybits+0x34>

0800be76 <__any_on>:
 800be76:	0002      	movs	r2, r0
 800be78:	6900      	ldr	r0, [r0, #16]
 800be7a:	b510      	push	{r4, lr}
 800be7c:	3214      	adds	r2, #20
 800be7e:	114b      	asrs	r3, r1, #5
 800be80:	4298      	cmp	r0, r3
 800be82:	db13      	blt.n	800beac <__any_on+0x36>
 800be84:	dd0c      	ble.n	800bea0 <__any_on+0x2a>
 800be86:	241f      	movs	r4, #31
 800be88:	0008      	movs	r0, r1
 800be8a:	4020      	ands	r0, r4
 800be8c:	4221      	tst	r1, r4
 800be8e:	d007      	beq.n	800bea0 <__any_on+0x2a>
 800be90:	0099      	lsls	r1, r3, #2
 800be92:	588c      	ldr	r4, [r1, r2]
 800be94:	0021      	movs	r1, r4
 800be96:	40c1      	lsrs	r1, r0
 800be98:	4081      	lsls	r1, r0
 800be9a:	2001      	movs	r0, #1
 800be9c:	428c      	cmp	r4, r1
 800be9e:	d104      	bne.n	800beaa <__any_on+0x34>
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	18d3      	adds	r3, r2, r3
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d803      	bhi.n	800beb0 <__any_on+0x3a>
 800bea8:	2000      	movs	r0, #0
 800beaa:	bd10      	pop	{r4, pc}
 800beac:	0003      	movs	r3, r0
 800beae:	e7f7      	b.n	800bea0 <__any_on+0x2a>
 800beb0:	3b04      	subs	r3, #4
 800beb2:	6819      	ldr	r1, [r3, #0]
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d0f5      	beq.n	800bea4 <__any_on+0x2e>
 800beb8:	2001      	movs	r0, #1
 800beba:	e7f6      	b.n	800beaa <__any_on+0x34>

0800bebc <_calloc_r>:
 800bebc:	434a      	muls	r2, r1
 800bebe:	b570      	push	{r4, r5, r6, lr}
 800bec0:	0011      	movs	r1, r2
 800bec2:	0015      	movs	r5, r2
 800bec4:	f000 f852 	bl	800bf6c <_malloc_r>
 800bec8:	1e04      	subs	r4, r0, #0
 800beca:	d003      	beq.n	800bed4 <_calloc_r+0x18>
 800becc:	002a      	movs	r2, r5
 800bece:	2100      	movs	r1, #0
 800bed0:	f7fc fa9e 	bl	8008410 <memset>
 800bed4:	0020      	movs	r0, r4
 800bed6:	bd70      	pop	{r4, r5, r6, pc}

0800bed8 <_free_r>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	0005      	movs	r5, r0
 800bedc:	2900      	cmp	r1, #0
 800bede:	d010      	beq.n	800bf02 <_free_r+0x2a>
 800bee0:	1f0c      	subs	r4, r1, #4
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	da00      	bge.n	800beea <_free_r+0x12>
 800bee8:	18e4      	adds	r4, r4, r3
 800beea:	0028      	movs	r0, r5
 800beec:	f001 f89c 	bl	800d028 <__malloc_lock>
 800bef0:	4a1d      	ldr	r2, [pc, #116]	; (800bf68 <_free_r+0x90>)
 800bef2:	6813      	ldr	r3, [r2, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d105      	bne.n	800bf04 <_free_r+0x2c>
 800bef8:	6063      	str	r3, [r4, #4]
 800befa:	6014      	str	r4, [r2, #0]
 800befc:	0028      	movs	r0, r5
 800befe:	f001 f89b 	bl	800d038 <__malloc_unlock>
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	d908      	bls.n	800bf1a <_free_r+0x42>
 800bf08:	6821      	ldr	r1, [r4, #0]
 800bf0a:	1860      	adds	r0, r4, r1
 800bf0c:	4283      	cmp	r3, r0
 800bf0e:	d1f3      	bne.n	800bef8 <_free_r+0x20>
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	1841      	adds	r1, r0, r1
 800bf16:	6021      	str	r1, [r4, #0]
 800bf18:	e7ee      	b.n	800bef8 <_free_r+0x20>
 800bf1a:	001a      	movs	r2, r3
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <_free_r+0x4e>
 800bf22:	42a3      	cmp	r3, r4
 800bf24:	d9f9      	bls.n	800bf1a <_free_r+0x42>
 800bf26:	6811      	ldr	r1, [r2, #0]
 800bf28:	1850      	adds	r0, r2, r1
 800bf2a:	42a0      	cmp	r0, r4
 800bf2c:	d10b      	bne.n	800bf46 <_free_r+0x6e>
 800bf2e:	6820      	ldr	r0, [r4, #0]
 800bf30:	1809      	adds	r1, r1, r0
 800bf32:	1850      	adds	r0, r2, r1
 800bf34:	6011      	str	r1, [r2, #0]
 800bf36:	4283      	cmp	r3, r0
 800bf38:	d1e0      	bne.n	800befc <_free_r+0x24>
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	1841      	adds	r1, r0, r1
 800bf40:	6011      	str	r1, [r2, #0]
 800bf42:	6053      	str	r3, [r2, #4]
 800bf44:	e7da      	b.n	800befc <_free_r+0x24>
 800bf46:	42a0      	cmp	r0, r4
 800bf48:	d902      	bls.n	800bf50 <_free_r+0x78>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	602b      	str	r3, [r5, #0]
 800bf4e:	e7d5      	b.n	800befc <_free_r+0x24>
 800bf50:	6821      	ldr	r1, [r4, #0]
 800bf52:	1860      	adds	r0, r4, r1
 800bf54:	4283      	cmp	r3, r0
 800bf56:	d103      	bne.n	800bf60 <_free_r+0x88>
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	1841      	adds	r1, r0, r1
 800bf5e:	6021      	str	r1, [r4, #0]
 800bf60:	6063      	str	r3, [r4, #4]
 800bf62:	6054      	str	r4, [r2, #4]
 800bf64:	e7ca      	b.n	800befc <_free_r+0x24>
 800bf66:	46c0      	nop			; (mov r8, r8)
 800bf68:	20000370 	.word	0x20000370

0800bf6c <_malloc_r>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	2303      	movs	r3, #3
 800bf70:	1ccd      	adds	r5, r1, #3
 800bf72:	439d      	bics	r5, r3
 800bf74:	3508      	adds	r5, #8
 800bf76:	0006      	movs	r6, r0
 800bf78:	2d0c      	cmp	r5, #12
 800bf7a:	d21f      	bcs.n	800bfbc <_malloc_r+0x50>
 800bf7c:	250c      	movs	r5, #12
 800bf7e:	42a9      	cmp	r1, r5
 800bf80:	d81e      	bhi.n	800bfc0 <_malloc_r+0x54>
 800bf82:	0030      	movs	r0, r6
 800bf84:	f001 f850 	bl	800d028 <__malloc_lock>
 800bf88:	4925      	ldr	r1, [pc, #148]	; (800c020 <_malloc_r+0xb4>)
 800bf8a:	680a      	ldr	r2, [r1, #0]
 800bf8c:	0014      	movs	r4, r2
 800bf8e:	2c00      	cmp	r4, #0
 800bf90:	d11a      	bne.n	800bfc8 <_malloc_r+0x5c>
 800bf92:	4f24      	ldr	r7, [pc, #144]	; (800c024 <_malloc_r+0xb8>)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d104      	bne.n	800bfa4 <_malloc_r+0x38>
 800bf9a:	0021      	movs	r1, r4
 800bf9c:	0030      	movs	r0, r6
 800bf9e:	f000 fcf5 	bl	800c98c <_sbrk_r>
 800bfa2:	6038      	str	r0, [r7, #0]
 800bfa4:	0029      	movs	r1, r5
 800bfa6:	0030      	movs	r0, r6
 800bfa8:	f000 fcf0 	bl	800c98c <_sbrk_r>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d12b      	bne.n	800c008 <_malloc_r+0x9c>
 800bfb0:	230c      	movs	r3, #12
 800bfb2:	0030      	movs	r0, r6
 800bfb4:	6033      	str	r3, [r6, #0]
 800bfb6:	f001 f83f 	bl	800d038 <__malloc_unlock>
 800bfba:	e003      	b.n	800bfc4 <_malloc_r+0x58>
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	dade      	bge.n	800bf7e <_malloc_r+0x12>
 800bfc0:	230c      	movs	r3, #12
 800bfc2:	6033      	str	r3, [r6, #0]
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	1b5b      	subs	r3, r3, r5
 800bfcc:	d419      	bmi.n	800c002 <_malloc_r+0x96>
 800bfce:	2b0b      	cmp	r3, #11
 800bfd0:	d903      	bls.n	800bfda <_malloc_r+0x6e>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	18e4      	adds	r4, r4, r3
 800bfd6:	6025      	str	r5, [r4, #0]
 800bfd8:	e003      	b.n	800bfe2 <_malloc_r+0x76>
 800bfda:	6863      	ldr	r3, [r4, #4]
 800bfdc:	42a2      	cmp	r2, r4
 800bfde:	d10e      	bne.n	800bffe <_malloc_r+0x92>
 800bfe0:	600b      	str	r3, [r1, #0]
 800bfe2:	0030      	movs	r0, r6
 800bfe4:	f001 f828 	bl	800d038 <__malloc_unlock>
 800bfe8:	0020      	movs	r0, r4
 800bfea:	2207      	movs	r2, #7
 800bfec:	300b      	adds	r0, #11
 800bfee:	1d23      	adds	r3, r4, #4
 800bff0:	4390      	bics	r0, r2
 800bff2:	1ac2      	subs	r2, r0, r3
 800bff4:	4298      	cmp	r0, r3
 800bff6:	d0e6      	beq.n	800bfc6 <_malloc_r+0x5a>
 800bff8:	1a1b      	subs	r3, r3, r0
 800bffa:	50a3      	str	r3, [r4, r2]
 800bffc:	e7e3      	b.n	800bfc6 <_malloc_r+0x5a>
 800bffe:	6053      	str	r3, [r2, #4]
 800c000:	e7ef      	b.n	800bfe2 <_malloc_r+0x76>
 800c002:	0022      	movs	r2, r4
 800c004:	6864      	ldr	r4, [r4, #4]
 800c006:	e7c2      	b.n	800bf8e <_malloc_r+0x22>
 800c008:	2303      	movs	r3, #3
 800c00a:	1cc4      	adds	r4, r0, #3
 800c00c:	439c      	bics	r4, r3
 800c00e:	42a0      	cmp	r0, r4
 800c010:	d0e1      	beq.n	800bfd6 <_malloc_r+0x6a>
 800c012:	1a21      	subs	r1, r4, r0
 800c014:	0030      	movs	r0, r6
 800c016:	f000 fcb9 	bl	800c98c <_sbrk_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d1db      	bne.n	800bfd6 <_malloc_r+0x6a>
 800c01e:	e7c7      	b.n	800bfb0 <_malloc_r+0x44>
 800c020:	20000370 	.word	0x20000370
 800c024:	20000374 	.word	0x20000374

0800c028 <__ssputs_r>:
 800c028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02a:	688e      	ldr	r6, [r1, #8]
 800c02c:	b085      	sub	sp, #20
 800c02e:	0007      	movs	r7, r0
 800c030:	000c      	movs	r4, r1
 800c032:	9203      	str	r2, [sp, #12]
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	429e      	cmp	r6, r3
 800c038:	d83c      	bhi.n	800c0b4 <__ssputs_r+0x8c>
 800c03a:	2390      	movs	r3, #144	; 0x90
 800c03c:	898a      	ldrh	r2, [r1, #12]
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	421a      	tst	r2, r3
 800c042:	d034      	beq.n	800c0ae <__ssputs_r+0x86>
 800c044:	2503      	movs	r5, #3
 800c046:	6909      	ldr	r1, [r1, #16]
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	1a5b      	subs	r3, r3, r1
 800c04c:	9302      	str	r3, [sp, #8]
 800c04e:	6963      	ldr	r3, [r4, #20]
 800c050:	9802      	ldr	r0, [sp, #8]
 800c052:	435d      	muls	r5, r3
 800c054:	0feb      	lsrs	r3, r5, #31
 800c056:	195d      	adds	r5, r3, r5
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	106d      	asrs	r5, r5, #1
 800c05c:	3301      	adds	r3, #1
 800c05e:	181b      	adds	r3, r3, r0
 800c060:	42ab      	cmp	r3, r5
 800c062:	d900      	bls.n	800c066 <__ssputs_r+0x3e>
 800c064:	001d      	movs	r5, r3
 800c066:	0553      	lsls	r3, r2, #21
 800c068:	d532      	bpl.n	800c0d0 <__ssputs_r+0xa8>
 800c06a:	0029      	movs	r1, r5
 800c06c:	0038      	movs	r0, r7
 800c06e:	f7ff ff7d 	bl	800bf6c <_malloc_r>
 800c072:	1e06      	subs	r6, r0, #0
 800c074:	d109      	bne.n	800c08a <__ssputs_r+0x62>
 800c076:	230c      	movs	r3, #12
 800c078:	603b      	str	r3, [r7, #0]
 800c07a:	2340      	movs	r3, #64	; 0x40
 800c07c:	2001      	movs	r0, #1
 800c07e:	89a2      	ldrh	r2, [r4, #12]
 800c080:	4240      	negs	r0, r0
 800c082:	4313      	orrs	r3, r2
 800c084:	81a3      	strh	r3, [r4, #12]
 800c086:	b005      	add	sp, #20
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08a:	9a02      	ldr	r2, [sp, #8]
 800c08c:	6921      	ldr	r1, [r4, #16]
 800c08e:	f7ff fa42 	bl	800b516 <memcpy>
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	4a14      	ldr	r2, [pc, #80]	; (800c0e8 <__ssputs_r+0xc0>)
 800c096:	401a      	ands	r2, r3
 800c098:	2380      	movs	r3, #128	; 0x80
 800c09a:	4313      	orrs	r3, r2
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	9b02      	ldr	r3, [sp, #8]
 800c0a0:	6126      	str	r6, [r4, #16]
 800c0a2:	18f6      	adds	r6, r6, r3
 800c0a4:	6026      	str	r6, [r4, #0]
 800c0a6:	6165      	str	r5, [r4, #20]
 800c0a8:	9e01      	ldr	r6, [sp, #4]
 800c0aa:	1aed      	subs	r5, r5, r3
 800c0ac:	60a5      	str	r5, [r4, #8]
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	429e      	cmp	r6, r3
 800c0b2:	d900      	bls.n	800c0b6 <__ssputs_r+0x8e>
 800c0b4:	9e01      	ldr	r6, [sp, #4]
 800c0b6:	0032      	movs	r2, r6
 800c0b8:	9903      	ldr	r1, [sp, #12]
 800c0ba:	6820      	ldr	r0, [r4, #0]
 800c0bc:	f000 ffa1 	bl	800d002 <memmove>
 800c0c0:	68a3      	ldr	r3, [r4, #8]
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	1b9b      	subs	r3, r3, r6
 800c0c6:	60a3      	str	r3, [r4, #8]
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	199e      	adds	r6, r3, r6
 800c0cc:	6026      	str	r6, [r4, #0]
 800c0ce:	e7da      	b.n	800c086 <__ssputs_r+0x5e>
 800c0d0:	002a      	movs	r2, r5
 800c0d2:	0038      	movs	r0, r7
 800c0d4:	f000 ffb8 	bl	800d048 <_realloc_r>
 800c0d8:	1e06      	subs	r6, r0, #0
 800c0da:	d1e0      	bne.n	800c09e <__ssputs_r+0x76>
 800c0dc:	0038      	movs	r0, r7
 800c0de:	6921      	ldr	r1, [r4, #16]
 800c0e0:	f7ff fefa 	bl	800bed8 <_free_r>
 800c0e4:	e7c7      	b.n	800c076 <__ssputs_r+0x4e>
 800c0e6:	46c0      	nop			; (mov r8, r8)
 800c0e8:	fffffb7f 	.word	0xfffffb7f

0800c0ec <_svfiprintf_r>:
 800c0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ee:	b0a1      	sub	sp, #132	; 0x84
 800c0f0:	9003      	str	r0, [sp, #12]
 800c0f2:	001d      	movs	r5, r3
 800c0f4:	898b      	ldrh	r3, [r1, #12]
 800c0f6:	000f      	movs	r7, r1
 800c0f8:	0016      	movs	r6, r2
 800c0fa:	061b      	lsls	r3, r3, #24
 800c0fc:	d511      	bpl.n	800c122 <_svfiprintf_r+0x36>
 800c0fe:	690b      	ldr	r3, [r1, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10e      	bne.n	800c122 <_svfiprintf_r+0x36>
 800c104:	2140      	movs	r1, #64	; 0x40
 800c106:	f7ff ff31 	bl	800bf6c <_malloc_r>
 800c10a:	6038      	str	r0, [r7, #0]
 800c10c:	6138      	str	r0, [r7, #16]
 800c10e:	2800      	cmp	r0, #0
 800c110:	d105      	bne.n	800c11e <_svfiprintf_r+0x32>
 800c112:	230c      	movs	r3, #12
 800c114:	9a03      	ldr	r2, [sp, #12]
 800c116:	3801      	subs	r0, #1
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	b021      	add	sp, #132	; 0x84
 800c11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	2300      	movs	r3, #0
 800c124:	ac08      	add	r4, sp, #32
 800c126:	6163      	str	r3, [r4, #20]
 800c128:	3320      	adds	r3, #32
 800c12a:	7663      	strb	r3, [r4, #25]
 800c12c:	3310      	adds	r3, #16
 800c12e:	76a3      	strb	r3, [r4, #26]
 800c130:	9507      	str	r5, [sp, #28]
 800c132:	0035      	movs	r5, r6
 800c134:	782b      	ldrb	r3, [r5, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <_svfiprintf_r+0x52>
 800c13a:	2b25      	cmp	r3, #37	; 0x25
 800c13c:	d147      	bne.n	800c1ce <_svfiprintf_r+0xe2>
 800c13e:	1bab      	subs	r3, r5, r6
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	42b5      	cmp	r5, r6
 800c144:	d00c      	beq.n	800c160 <_svfiprintf_r+0x74>
 800c146:	0032      	movs	r2, r6
 800c148:	0039      	movs	r1, r7
 800c14a:	9803      	ldr	r0, [sp, #12]
 800c14c:	f7ff ff6c 	bl	800c028 <__ssputs_r>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d100      	bne.n	800c156 <_svfiprintf_r+0x6a>
 800c154:	e0ae      	b.n	800c2b4 <_svfiprintf_r+0x1c8>
 800c156:	6962      	ldr	r2, [r4, #20]
 800c158:	9b05      	ldr	r3, [sp, #20]
 800c15a:	4694      	mov	ip, r2
 800c15c:	4463      	add	r3, ip
 800c15e:	6163      	str	r3, [r4, #20]
 800c160:	782b      	ldrb	r3, [r5, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d100      	bne.n	800c168 <_svfiprintf_r+0x7c>
 800c166:	e0a5      	b.n	800c2b4 <_svfiprintf_r+0x1c8>
 800c168:	2201      	movs	r2, #1
 800c16a:	2300      	movs	r3, #0
 800c16c:	4252      	negs	r2, r2
 800c16e:	6062      	str	r2, [r4, #4]
 800c170:	a904      	add	r1, sp, #16
 800c172:	3254      	adds	r2, #84	; 0x54
 800c174:	1852      	adds	r2, r2, r1
 800c176:	1c6e      	adds	r6, r5, #1
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	60e3      	str	r3, [r4, #12]
 800c17c:	60a3      	str	r3, [r4, #8]
 800c17e:	7013      	strb	r3, [r2, #0]
 800c180:	65a3      	str	r3, [r4, #88]	; 0x58
 800c182:	2205      	movs	r2, #5
 800c184:	7831      	ldrb	r1, [r6, #0]
 800c186:	4854      	ldr	r0, [pc, #336]	; (800c2d8 <_svfiprintf_r+0x1ec>)
 800c188:	f7ff f9ba 	bl	800b500 <memchr>
 800c18c:	1c75      	adds	r5, r6, #1
 800c18e:	2800      	cmp	r0, #0
 800c190:	d11f      	bne.n	800c1d2 <_svfiprintf_r+0xe6>
 800c192:	6822      	ldr	r2, [r4, #0]
 800c194:	06d3      	lsls	r3, r2, #27
 800c196:	d504      	bpl.n	800c1a2 <_svfiprintf_r+0xb6>
 800c198:	2353      	movs	r3, #83	; 0x53
 800c19a:	a904      	add	r1, sp, #16
 800c19c:	185b      	adds	r3, r3, r1
 800c19e:	2120      	movs	r1, #32
 800c1a0:	7019      	strb	r1, [r3, #0]
 800c1a2:	0713      	lsls	r3, r2, #28
 800c1a4:	d504      	bpl.n	800c1b0 <_svfiprintf_r+0xc4>
 800c1a6:	2353      	movs	r3, #83	; 0x53
 800c1a8:	a904      	add	r1, sp, #16
 800c1aa:	185b      	adds	r3, r3, r1
 800c1ac:	212b      	movs	r1, #43	; 0x2b
 800c1ae:	7019      	strb	r1, [r3, #0]
 800c1b0:	7833      	ldrb	r3, [r6, #0]
 800c1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b4:	d016      	beq.n	800c1e4 <_svfiprintf_r+0xf8>
 800c1b6:	0035      	movs	r5, r6
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	200a      	movs	r0, #10
 800c1bc:	68e3      	ldr	r3, [r4, #12]
 800c1be:	782a      	ldrb	r2, [r5, #0]
 800c1c0:	1c6e      	adds	r6, r5, #1
 800c1c2:	3a30      	subs	r2, #48	; 0x30
 800c1c4:	2a09      	cmp	r2, #9
 800c1c6:	d94e      	bls.n	800c266 <_svfiprintf_r+0x17a>
 800c1c8:	2900      	cmp	r1, #0
 800c1ca:	d111      	bne.n	800c1f0 <_svfiprintf_r+0x104>
 800c1cc:	e017      	b.n	800c1fe <_svfiprintf_r+0x112>
 800c1ce:	3501      	adds	r5, #1
 800c1d0:	e7b0      	b.n	800c134 <_svfiprintf_r+0x48>
 800c1d2:	4b41      	ldr	r3, [pc, #260]	; (800c2d8 <_svfiprintf_r+0x1ec>)
 800c1d4:	6822      	ldr	r2, [r4, #0]
 800c1d6:	1ac0      	subs	r0, r0, r3
 800c1d8:	2301      	movs	r3, #1
 800c1da:	4083      	lsls	r3, r0
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	002e      	movs	r6, r5
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	e7ce      	b.n	800c182 <_svfiprintf_r+0x96>
 800c1e4:	9b07      	ldr	r3, [sp, #28]
 800c1e6:	1d19      	adds	r1, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	9107      	str	r1, [sp, #28]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	db01      	blt.n	800c1f4 <_svfiprintf_r+0x108>
 800c1f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1f2:	e004      	b.n	800c1fe <_svfiprintf_r+0x112>
 800c1f4:	425b      	negs	r3, r3
 800c1f6:	60e3      	str	r3, [r4, #12]
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	782b      	ldrb	r3, [r5, #0]
 800c200:	2b2e      	cmp	r3, #46	; 0x2e
 800c202:	d10a      	bne.n	800c21a <_svfiprintf_r+0x12e>
 800c204:	786b      	ldrb	r3, [r5, #1]
 800c206:	2b2a      	cmp	r3, #42	; 0x2a
 800c208:	d135      	bne.n	800c276 <_svfiprintf_r+0x18a>
 800c20a:	9b07      	ldr	r3, [sp, #28]
 800c20c:	3502      	adds	r5, #2
 800c20e:	1d1a      	adds	r2, r3, #4
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	9207      	str	r2, [sp, #28]
 800c214:	2b00      	cmp	r3, #0
 800c216:	db2b      	blt.n	800c270 <_svfiprintf_r+0x184>
 800c218:	9309      	str	r3, [sp, #36]	; 0x24
 800c21a:	4e30      	ldr	r6, [pc, #192]	; (800c2dc <_svfiprintf_r+0x1f0>)
 800c21c:	2203      	movs	r2, #3
 800c21e:	0030      	movs	r0, r6
 800c220:	7829      	ldrb	r1, [r5, #0]
 800c222:	f7ff f96d 	bl	800b500 <memchr>
 800c226:	2800      	cmp	r0, #0
 800c228:	d006      	beq.n	800c238 <_svfiprintf_r+0x14c>
 800c22a:	2340      	movs	r3, #64	; 0x40
 800c22c:	1b80      	subs	r0, r0, r6
 800c22e:	4083      	lsls	r3, r0
 800c230:	6822      	ldr	r2, [r4, #0]
 800c232:	3501      	adds	r5, #1
 800c234:	4313      	orrs	r3, r2
 800c236:	6023      	str	r3, [r4, #0]
 800c238:	7829      	ldrb	r1, [r5, #0]
 800c23a:	2206      	movs	r2, #6
 800c23c:	4828      	ldr	r0, [pc, #160]	; (800c2e0 <_svfiprintf_r+0x1f4>)
 800c23e:	1c6e      	adds	r6, r5, #1
 800c240:	7621      	strb	r1, [r4, #24]
 800c242:	f7ff f95d 	bl	800b500 <memchr>
 800c246:	2800      	cmp	r0, #0
 800c248:	d03c      	beq.n	800c2c4 <_svfiprintf_r+0x1d8>
 800c24a:	4b26      	ldr	r3, [pc, #152]	; (800c2e4 <_svfiprintf_r+0x1f8>)
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d125      	bne.n	800c29c <_svfiprintf_r+0x1b0>
 800c250:	2207      	movs	r2, #7
 800c252:	9b07      	ldr	r3, [sp, #28]
 800c254:	3307      	adds	r3, #7
 800c256:	4393      	bics	r3, r2
 800c258:	3308      	adds	r3, #8
 800c25a:	9307      	str	r3, [sp, #28]
 800c25c:	6963      	ldr	r3, [r4, #20]
 800c25e:	9a04      	ldr	r2, [sp, #16]
 800c260:	189b      	adds	r3, r3, r2
 800c262:	6163      	str	r3, [r4, #20]
 800c264:	e765      	b.n	800c132 <_svfiprintf_r+0x46>
 800c266:	4343      	muls	r3, r0
 800c268:	0035      	movs	r5, r6
 800c26a:	2101      	movs	r1, #1
 800c26c:	189b      	adds	r3, r3, r2
 800c26e:	e7a6      	b.n	800c1be <_svfiprintf_r+0xd2>
 800c270:	2301      	movs	r3, #1
 800c272:	425b      	negs	r3, r3
 800c274:	e7d0      	b.n	800c218 <_svfiprintf_r+0x12c>
 800c276:	2300      	movs	r3, #0
 800c278:	200a      	movs	r0, #10
 800c27a:	001a      	movs	r2, r3
 800c27c:	3501      	adds	r5, #1
 800c27e:	6063      	str	r3, [r4, #4]
 800c280:	7829      	ldrb	r1, [r5, #0]
 800c282:	1c6e      	adds	r6, r5, #1
 800c284:	3930      	subs	r1, #48	; 0x30
 800c286:	2909      	cmp	r1, #9
 800c288:	d903      	bls.n	800c292 <_svfiprintf_r+0x1a6>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d0c5      	beq.n	800c21a <_svfiprintf_r+0x12e>
 800c28e:	9209      	str	r2, [sp, #36]	; 0x24
 800c290:	e7c3      	b.n	800c21a <_svfiprintf_r+0x12e>
 800c292:	4342      	muls	r2, r0
 800c294:	0035      	movs	r5, r6
 800c296:	2301      	movs	r3, #1
 800c298:	1852      	adds	r2, r2, r1
 800c29a:	e7f1      	b.n	800c280 <_svfiprintf_r+0x194>
 800c29c:	ab07      	add	r3, sp, #28
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	003a      	movs	r2, r7
 800c2a2:	0021      	movs	r1, r4
 800c2a4:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <_svfiprintf_r+0x1fc>)
 800c2a6:	9803      	ldr	r0, [sp, #12]
 800c2a8:	f7fc f964 	bl	8008574 <_printf_float>
 800c2ac:	9004      	str	r0, [sp, #16]
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	d1d3      	bne.n	800c25c <_svfiprintf_r+0x170>
 800c2b4:	89bb      	ldrh	r3, [r7, #12]
 800c2b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c2b8:	065b      	lsls	r3, r3, #25
 800c2ba:	d400      	bmi.n	800c2be <_svfiprintf_r+0x1d2>
 800c2bc:	e72d      	b.n	800c11a <_svfiprintf_r+0x2e>
 800c2be:	2001      	movs	r0, #1
 800c2c0:	4240      	negs	r0, r0
 800c2c2:	e72a      	b.n	800c11a <_svfiprintf_r+0x2e>
 800c2c4:	ab07      	add	r3, sp, #28
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	003a      	movs	r2, r7
 800c2ca:	0021      	movs	r1, r4
 800c2cc:	4b06      	ldr	r3, [pc, #24]	; (800c2e8 <_svfiprintf_r+0x1fc>)
 800c2ce:	9803      	ldr	r0, [sp, #12]
 800c2d0:	f7fc fc0e 	bl	8008af0 <_printf_i>
 800c2d4:	e7ea      	b.n	800c2ac <_svfiprintf_r+0x1c0>
 800c2d6:	46c0      	nop			; (mov r8, r8)
 800c2d8:	0800dc14 	.word	0x0800dc14
 800c2dc:	0800dc1a 	.word	0x0800dc1a
 800c2e0:	0800dc1e 	.word	0x0800dc1e
 800c2e4:	08008575 	.word	0x08008575
 800c2e8:	0800c029 	.word	0x0800c029

0800c2ec <_sungetc_r>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	0014      	movs	r4, r2
 800c2f0:	1c4b      	adds	r3, r1, #1
 800c2f2:	d103      	bne.n	800c2fc <_sungetc_r+0x10>
 800c2f4:	2501      	movs	r5, #1
 800c2f6:	426d      	negs	r5, r5
 800c2f8:	0028      	movs	r0, r5
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	8993      	ldrh	r3, [r2, #12]
 800c2fe:	2220      	movs	r2, #32
 800c300:	4393      	bics	r3, r2
 800c302:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c304:	81a3      	strh	r3, [r4, #12]
 800c306:	b2ce      	uxtb	r6, r1
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	b2cd      	uxtb	r5, r1
 800c30c:	2a00      	cmp	r2, #0
 800c30e:	d010      	beq.n	800c332 <_sungetc_r+0x46>
 800c310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c312:	429a      	cmp	r2, r3
 800c314:	dd07      	ble.n	800c326 <_sungetc_r+0x3a>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	3b01      	subs	r3, #1
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	701e      	strb	r6, [r3, #0]
 800c31e:	6863      	ldr	r3, [r4, #4]
 800c320:	3301      	adds	r3, #1
 800c322:	6063      	str	r3, [r4, #4]
 800c324:	e7e8      	b.n	800c2f8 <_sungetc_r+0xc>
 800c326:	0021      	movs	r1, r4
 800c328:	f000 fc20 	bl	800cb6c <__submore>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0f2      	beq.n	800c316 <_sungetc_r+0x2a>
 800c330:	e7e0      	b.n	800c2f4 <_sungetc_r+0x8>
 800c332:	6921      	ldr	r1, [r4, #16]
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	2900      	cmp	r1, #0
 800c338:	d007      	beq.n	800c34a <_sungetc_r+0x5e>
 800c33a:	4291      	cmp	r1, r2
 800c33c:	d205      	bcs.n	800c34a <_sungetc_r+0x5e>
 800c33e:	1e51      	subs	r1, r2, #1
 800c340:	7808      	ldrb	r0, [r1, #0]
 800c342:	42a8      	cmp	r0, r5
 800c344:	d101      	bne.n	800c34a <_sungetc_r+0x5e>
 800c346:	6021      	str	r1, [r4, #0]
 800c348:	e7ea      	b.n	800c320 <_sungetc_r+0x34>
 800c34a:	6423      	str	r3, [r4, #64]	; 0x40
 800c34c:	0023      	movs	r3, r4
 800c34e:	3344      	adds	r3, #68	; 0x44
 800c350:	6363      	str	r3, [r4, #52]	; 0x34
 800c352:	2303      	movs	r3, #3
 800c354:	63a3      	str	r3, [r4, #56]	; 0x38
 800c356:	0023      	movs	r3, r4
 800c358:	3346      	adds	r3, #70	; 0x46
 800c35a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c35c:	701e      	strb	r6, [r3, #0]
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	2301      	movs	r3, #1
 800c362:	e7de      	b.n	800c322 <_sungetc_r+0x36>

0800c364 <__ssrefill_r>:
 800c364:	b510      	push	{r4, lr}
 800c366:	000c      	movs	r4, r1
 800c368:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d00e      	beq.n	800c38c <__ssrefill_r+0x28>
 800c36e:	0023      	movs	r3, r4
 800c370:	3344      	adds	r3, #68	; 0x44
 800c372:	4299      	cmp	r1, r3
 800c374:	d001      	beq.n	800c37a <__ssrefill_r+0x16>
 800c376:	f7ff fdaf 	bl	800bed8 <_free_r>
 800c37a:	2000      	movs	r0, #0
 800c37c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c37e:	6360      	str	r0, [r4, #52]	; 0x34
 800c380:	6063      	str	r3, [r4, #4]
 800c382:	4283      	cmp	r3, r0
 800c384:	d002      	beq.n	800c38c <__ssrefill_r+0x28>
 800c386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd10      	pop	{r4, pc}
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	2001      	movs	r0, #1
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	89a2      	ldrh	r2, [r4, #12]
 800c396:	6063      	str	r3, [r4, #4]
 800c398:	3320      	adds	r3, #32
 800c39a:	4313      	orrs	r3, r2
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	4240      	negs	r0, r0
 800c3a0:	e7f3      	b.n	800c38a <__ssrefill_r+0x26>
	...

0800c3a4 <__ssvfiscanf_r>:
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	4cb5      	ldr	r4, [pc, #724]	; (800c67c <__ssvfiscanf_r+0x2d8>)
 800c3a8:	0005      	movs	r5, r0
 800c3aa:	44a5      	add	sp, r4
 800c3ac:	000c      	movs	r4, r1
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	9148      	str	r1, [sp, #288]	; 0x120
 800c3b2:	9149      	str	r1, [sp, #292]	; 0x124
 800c3b4:	a905      	add	r1, sp, #20
 800c3b6:	914a      	str	r1, [sp, #296]	; 0x128
 800c3b8:	21be      	movs	r1, #190	; 0xbe
 800c3ba:	48b1      	ldr	r0, [pc, #708]	; (800c680 <__ssvfiscanf_r+0x2dc>)
 800c3bc:	0049      	lsls	r1, r1, #1
 800c3be:	ae45      	add	r6, sp, #276	; 0x114
 800c3c0:	5070      	str	r0, [r6, r1]
 800c3c2:	48b0      	ldr	r0, [pc, #704]	; (800c684 <__ssvfiscanf_r+0x2e0>)
 800c3c4:	3104      	adds	r1, #4
 800c3c6:	ae45      	add	r6, sp, #276	; 0x114
 800c3c8:	5070      	str	r0, [r6, r1]
 800c3ca:	9304      	str	r3, [sp, #16]
 800c3cc:	9101      	str	r1, [sp, #4]
 800c3ce:	7813      	ldrb	r3, [r2, #0]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d100      	bne.n	800c3d8 <__ssvfiscanf_r+0x34>
 800c3d6:	e14f      	b.n	800c678 <__ssvfiscanf_r+0x2d4>
 800c3d8:	4fab      	ldr	r7, [pc, #684]	; (800c688 <__ssvfiscanf_r+0x2e4>)
 800c3da:	2008      	movs	r0, #8
 800c3dc:	5cf9      	ldrb	r1, [r7, r3]
 800c3de:	2308      	movs	r3, #8
 800c3e0:	1c56      	adds	r6, r2, #1
 800c3e2:	400b      	ands	r3, r1
 800c3e4:	4201      	tst	r1, r0
 800c3e6:	d01e      	beq.n	800c426 <__ssvfiscanf_r+0x82>
 800c3e8:	6863      	ldr	r3, [r4, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	dd11      	ble.n	800c412 <__ssvfiscanf_r+0x6e>
 800c3ee:	2108      	movs	r1, #8
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	781a      	ldrb	r2, [r3, #0]
 800c3f4:	5cba      	ldrb	r2, [r7, r2]
 800c3f6:	420a      	tst	r2, r1
 800c3f8:	d101      	bne.n	800c3fe <__ssvfiscanf_r+0x5a>
 800c3fa:	0032      	movs	r2, r6
 800c3fc:	e7e7      	b.n	800c3ce <__ssvfiscanf_r+0x2a>
 800c3fe:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c400:	3301      	adds	r3, #1
 800c402:	9200      	str	r2, [sp, #0]
 800c404:	3201      	adds	r2, #1
 800c406:	9249      	str	r2, [sp, #292]	; 0x124
 800c408:	6862      	ldr	r2, [r4, #4]
 800c40a:	6023      	str	r3, [r4, #0]
 800c40c:	3a01      	subs	r2, #1
 800c40e:	6062      	str	r2, [r4, #4]
 800c410:	e7ea      	b.n	800c3e8 <__ssvfiscanf_r+0x44>
 800c412:	9a01      	ldr	r2, [sp, #4]
 800c414:	ab45      	add	r3, sp, #276	; 0x114
 800c416:	589b      	ldr	r3, [r3, r2]
 800c418:	0021      	movs	r1, r4
 800c41a:	0028      	movs	r0, r5
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	4798      	blx	r3
 800c420:	2800      	cmp	r0, #0
 800c422:	d0e4      	beq.n	800c3ee <__ssvfiscanf_r+0x4a>
 800c424:	e7e9      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c426:	9900      	ldr	r1, [sp, #0]
 800c428:	2925      	cmp	r1, #37	; 0x25
 800c42a:	d164      	bne.n	800c4f6 <__ssvfiscanf_r+0x152>
 800c42c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c42e:	9345      	str	r3, [sp, #276]	; 0x114
 800c430:	7853      	ldrb	r3, [r2, #1]
 800c432:	2b2a      	cmp	r3, #42	; 0x2a
 800c434:	d102      	bne.n	800c43c <__ssvfiscanf_r+0x98>
 800c436:	3b1a      	subs	r3, #26
 800c438:	9345      	str	r3, [sp, #276]	; 0x114
 800c43a:	1c96      	adds	r6, r2, #2
 800c43c:	0037      	movs	r7, r6
 800c43e:	200a      	movs	r0, #10
 800c440:	7839      	ldrb	r1, [r7, #0]
 800c442:	1c7b      	adds	r3, r7, #1
 800c444:	9302      	str	r3, [sp, #8]
 800c446:	000b      	movs	r3, r1
 800c448:	3b30      	subs	r3, #48	; 0x30
 800c44a:	2b09      	cmp	r3, #9
 800c44c:	d91f      	bls.n	800c48e <__ssvfiscanf_r+0xea>
 800c44e:	4e8f      	ldr	r6, [pc, #572]	; (800c68c <__ssvfiscanf_r+0x2e8>)
 800c450:	2203      	movs	r2, #3
 800c452:	0030      	movs	r0, r6
 800c454:	f7ff f854 	bl	800b500 <memchr>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d007      	beq.n	800c46c <__ssvfiscanf_r+0xc8>
 800c45c:	2301      	movs	r3, #1
 800c45e:	1b80      	subs	r0, r0, r6
 800c460:	4083      	lsls	r3, r0
 800c462:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c464:	9f02      	ldr	r7, [sp, #8]
 800c466:	4313      	orrs	r3, r2
 800c468:	9203      	str	r2, [sp, #12]
 800c46a:	9345      	str	r3, [sp, #276]	; 0x114
 800c46c:	783b      	ldrb	r3, [r7, #0]
 800c46e:	1c7e      	adds	r6, r7, #1
 800c470:	2b78      	cmp	r3, #120	; 0x78
 800c472:	d807      	bhi.n	800c484 <__ssvfiscanf_r+0xe0>
 800c474:	2b57      	cmp	r3, #87	; 0x57
 800c476:	d812      	bhi.n	800c49e <__ssvfiscanf_r+0xfa>
 800c478:	2b25      	cmp	r3, #37	; 0x25
 800c47a:	d03c      	beq.n	800c4f6 <__ssvfiscanf_r+0x152>
 800c47c:	d836      	bhi.n	800c4ec <__ssvfiscanf_r+0x148>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d100      	bne.n	800c484 <__ssvfiscanf_r+0xe0>
 800c482:	e0f6      	b.n	800c672 <__ssvfiscanf_r+0x2ce>
 800c484:	2303      	movs	r3, #3
 800c486:	934b      	str	r3, [sp, #300]	; 0x12c
 800c488:	3307      	adds	r3, #7
 800c48a:	9346      	str	r3, [sp, #280]	; 0x118
 800c48c:	e076      	b.n	800c57c <__ssvfiscanf_r+0x1d8>
 800c48e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c490:	9f02      	ldr	r7, [sp, #8]
 800c492:	9303      	str	r3, [sp, #12]
 800c494:	4343      	muls	r3, r0
 800c496:	3b30      	subs	r3, #48	; 0x30
 800c498:	185b      	adds	r3, r3, r1
 800c49a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c49c:	e7d0      	b.n	800c440 <__ssvfiscanf_r+0x9c>
 800c49e:	0018      	movs	r0, r3
 800c4a0:	3858      	subs	r0, #88	; 0x58
 800c4a2:	2820      	cmp	r0, #32
 800c4a4:	d8ee      	bhi.n	800c484 <__ssvfiscanf_r+0xe0>
 800c4a6:	f7f3 fe4b 	bl	8000140 <__gnu_thumb1_case_shi>
 800c4aa:	0051      	.short	0x0051
 800c4ac:	ffedffed 	.word	0xffedffed
 800c4b0:	ffed0086 	.word	0xffed0086
 800c4b4:	ffedffed 	.word	0xffedffed
 800c4b8:	ffedffed 	.word	0xffedffed
 800c4bc:	ffedffed 	.word	0xffedffed
 800c4c0:	00600093 	.word	0x00600093
 800c4c4:	00240024 	.word	0x00240024
 800c4c8:	ffed0024 	.word	0xffed0024
 800c4cc:	ffed0062 	.word	0xffed0062
 800c4d0:	ffedffed 	.word	0xffedffed
 800c4d4:	009dffed 	.word	0x009dffed
 800c4d8:	004b0065 	.word	0x004b0065
 800c4dc:	ffedffed 	.word	0xffedffed
 800c4e0:	ffed009b 	.word	0xffed009b
 800c4e4:	ffed0060 	.word	0xffed0060
 800c4e8:	0051ffed 	.word	0x0051ffed
 800c4ec:	3b45      	subs	r3, #69	; 0x45
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d8c8      	bhi.n	800c484 <__ssvfiscanf_r+0xe0>
 800c4f2:	2305      	movs	r3, #5
 800c4f4:	e041      	b.n	800c57a <__ssvfiscanf_r+0x1d6>
 800c4f6:	6863      	ldr	r3, [r4, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	dd0f      	ble.n	800c51c <__ssvfiscanf_r+0x178>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	9900      	ldr	r1, [sp, #0]
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	428a      	cmp	r2, r1
 800c504:	d000      	beq.n	800c508 <__ssvfiscanf_r+0x164>
 800c506:	e0b7      	b.n	800c678 <__ssvfiscanf_r+0x2d4>
 800c508:	3301      	adds	r3, #1
 800c50a:	6862      	ldr	r2, [r4, #4]
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c510:	3a01      	subs	r2, #1
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	3301      	adds	r3, #1
 800c516:	6062      	str	r2, [r4, #4]
 800c518:	9349      	str	r3, [sp, #292]	; 0x124
 800c51a:	e76e      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c51c:	9a01      	ldr	r2, [sp, #4]
 800c51e:	ab45      	add	r3, sp, #276	; 0x114
 800c520:	589b      	ldr	r3, [r3, r2]
 800c522:	0021      	movs	r1, r4
 800c524:	0028      	movs	r0, r5
 800c526:	9302      	str	r3, [sp, #8]
 800c528:	4798      	blx	r3
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0e6      	beq.n	800c4fc <__ssvfiscanf_r+0x158>
 800c52e:	9848      	ldr	r0, [sp, #288]	; 0x120
 800c530:	2800      	cmp	r0, #0
 800c532:	d000      	beq.n	800c536 <__ssvfiscanf_r+0x192>
 800c534:	e099      	b.n	800c66a <__ssvfiscanf_r+0x2c6>
 800c536:	3801      	subs	r0, #1
 800c538:	23a7      	movs	r3, #167	; 0xa7
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	449d      	add	sp, r3
 800c53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c540:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c542:	9200      	str	r2, [sp, #0]
 800c544:	2220      	movs	r2, #32
 800c546:	9900      	ldr	r1, [sp, #0]
 800c548:	430a      	orrs	r2, r1
 800c54a:	9245      	str	r2, [sp, #276]	; 0x114
 800c54c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c54e:	9200      	str	r2, [sp, #0]
 800c550:	2280      	movs	r2, #128	; 0x80
 800c552:	9900      	ldr	r1, [sp, #0]
 800c554:	0092      	lsls	r2, r2, #2
 800c556:	430a      	orrs	r2, r1
 800c558:	9245      	str	r2, [sp, #276]	; 0x114
 800c55a:	2210      	movs	r2, #16
 800c55c:	9246      	str	r2, [sp, #280]	; 0x118
 800c55e:	226e      	movs	r2, #110	; 0x6e
 800c560:	429a      	cmp	r2, r3
 800c562:	419b      	sbcs	r3, r3
 800c564:	425b      	negs	r3, r3
 800c566:	3303      	adds	r3, #3
 800c568:	e007      	b.n	800c57a <__ssvfiscanf_r+0x1d6>
 800c56a:	220a      	movs	r2, #10
 800c56c:	e7f6      	b.n	800c55c <__ssvfiscanf_r+0x1b8>
 800c56e:	2300      	movs	r3, #0
 800c570:	9346      	str	r3, [sp, #280]	; 0x118
 800c572:	e7f8      	b.n	800c566 <__ssvfiscanf_r+0x1c2>
 800c574:	2308      	movs	r3, #8
 800c576:	9346      	str	r3, [sp, #280]	; 0x118
 800c578:	3b04      	subs	r3, #4
 800c57a:	934b      	str	r3, [sp, #300]	; 0x12c
 800c57c:	6863      	ldr	r3, [r4, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	dd3f      	ble.n	800c602 <__ssvfiscanf_r+0x25e>
 800c582:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	065b      	lsls	r3, r3, #25
 800c588:	d406      	bmi.n	800c598 <__ssvfiscanf_r+0x1f4>
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	493e      	ldr	r1, [pc, #248]	; (800c688 <__ssvfiscanf_r+0x2e4>)
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	5c8a      	ldrb	r2, [r1, r2]
 800c592:	2108      	movs	r1, #8
 800c594:	420a      	tst	r2, r1
 800c596:	d13e      	bne.n	800c616 <__ssvfiscanf_r+0x272>
 800c598:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	dc51      	bgt.n	800c642 <__ssvfiscanf_r+0x29e>
 800c59e:	0022      	movs	r2, r4
 800c5a0:	0028      	movs	r0, r5
 800c5a2:	ab04      	add	r3, sp, #16
 800c5a4:	a945      	add	r1, sp, #276	; 0x114
 800c5a6:	f000 f875 	bl	800c694 <_scanf_chars>
 800c5aa:	2801      	cmp	r0, #1
 800c5ac:	d064      	beq.n	800c678 <__ssvfiscanf_r+0x2d4>
 800c5ae:	2802      	cmp	r0, #2
 800c5b0:	d000      	beq.n	800c5b4 <__ssvfiscanf_r+0x210>
 800c5b2:	e722      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c5b4:	e7bb      	b.n	800c52e <__ssvfiscanf_r+0x18a>
 800c5b6:	0031      	movs	r1, r6
 800c5b8:	a805      	add	r0, sp, #20
 800c5ba:	f000 f9f9 	bl	800c9b0 <__sccl>
 800c5be:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c5c0:	0006      	movs	r6, r0
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	2340      	movs	r3, #64	; 0x40
 800c5c6:	9a00      	ldr	r2, [sp, #0]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	9345      	str	r3, [sp, #276]	; 0x114
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e7d4      	b.n	800c57a <__ssvfiscanf_r+0x1d6>
 800c5d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	2340      	movs	r3, #64	; 0x40
 800c5d6:	9a00      	ldr	r2, [sp, #0]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	9345      	str	r3, [sp, #276]	; 0x114
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e7cc      	b.n	800c57a <__ssvfiscanf_r+0x1d6>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e7ca      	b.n	800c57a <__ssvfiscanf_r+0x1d6>
 800c5e4:	9845      	ldr	r0, [sp, #276]	; 0x114
 800c5e6:	06c3      	lsls	r3, r0, #27
 800c5e8:	d500      	bpl.n	800c5ec <__ssvfiscanf_r+0x248>
 800c5ea:	e706      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c5f0:	1d19      	adds	r1, r3, #4
 800c5f2:	9104      	str	r1, [sp, #16]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	07c7      	lsls	r7, r0, #31
 800c5f8:	d501      	bpl.n	800c5fe <__ssvfiscanf_r+0x25a>
 800c5fa:	801a      	strh	r2, [r3, #0]
 800c5fc:	e6fd      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	e6fb      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c602:	9a01      	ldr	r2, [sp, #4]
 800c604:	ab45      	add	r3, sp, #276	; 0x114
 800c606:	589b      	ldr	r3, [r3, r2]
 800c608:	0021      	movs	r1, r4
 800c60a:	0028      	movs	r0, r5
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	4798      	blx	r3
 800c610:	2800      	cmp	r0, #0
 800c612:	d0b6      	beq.n	800c582 <__ssvfiscanf_r+0x1de>
 800c614:	e78b      	b.n	800c52e <__ssvfiscanf_r+0x18a>
 800c616:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c618:	9200      	str	r2, [sp, #0]
 800c61a:	3201      	adds	r2, #1
 800c61c:	9249      	str	r2, [sp, #292]	; 0x124
 800c61e:	6862      	ldr	r2, [r4, #4]
 800c620:	3a01      	subs	r2, #1
 800c622:	6062      	str	r2, [r4, #4]
 800c624:	2a00      	cmp	r2, #0
 800c626:	dd02      	ble.n	800c62e <__ssvfiscanf_r+0x28a>
 800c628:	3301      	adds	r3, #1
 800c62a:	6023      	str	r3, [r4, #0]
 800c62c:	e7ad      	b.n	800c58a <__ssvfiscanf_r+0x1e6>
 800c62e:	9a01      	ldr	r2, [sp, #4]
 800c630:	ab45      	add	r3, sp, #276	; 0x114
 800c632:	589b      	ldr	r3, [r3, r2]
 800c634:	0021      	movs	r1, r4
 800c636:	0028      	movs	r0, r5
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	4798      	blx	r3
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d0a4      	beq.n	800c58a <__ssvfiscanf_r+0x1e6>
 800c640:	e775      	b.n	800c52e <__ssvfiscanf_r+0x18a>
 800c642:	2b04      	cmp	r3, #4
 800c644:	dc06      	bgt.n	800c654 <__ssvfiscanf_r+0x2b0>
 800c646:	0022      	movs	r2, r4
 800c648:	0028      	movs	r0, r5
 800c64a:	ab04      	add	r3, sp, #16
 800c64c:	a945      	add	r1, sp, #276	; 0x114
 800c64e:	f000 f87f 	bl	800c750 <_scanf_i>
 800c652:	e7aa      	b.n	800c5aa <__ssvfiscanf_r+0x206>
 800c654:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <__ssvfiscanf_r+0x2ec>)
 800c656:	2b00      	cmp	r3, #0
 800c658:	d100      	bne.n	800c65c <__ssvfiscanf_r+0x2b8>
 800c65a:	e6ce      	b.n	800c3fa <__ssvfiscanf_r+0x56>
 800c65c:	0022      	movs	r2, r4
 800c65e:	0028      	movs	r0, r5
 800c660:	ab04      	add	r3, sp, #16
 800c662:	a945      	add	r1, sp, #276	; 0x114
 800c664:	f7fc fb56 	bl	8008d14 <_scanf_float>
 800c668:	e79f      	b.n	800c5aa <__ssvfiscanf_r+0x206>
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	065b      	lsls	r3, r3, #25
 800c66e:	d400      	bmi.n	800c672 <__ssvfiscanf_r+0x2ce>
 800c670:	e762      	b.n	800c538 <__ssvfiscanf_r+0x194>
 800c672:	2001      	movs	r0, #1
 800c674:	4240      	negs	r0, r0
 800c676:	e75f      	b.n	800c538 <__ssvfiscanf_r+0x194>
 800c678:	9848      	ldr	r0, [sp, #288]	; 0x120
 800c67a:	e75d      	b.n	800c538 <__ssvfiscanf_r+0x194>
 800c67c:	fffffd64 	.word	0xfffffd64
 800c680:	0800c2ed 	.word	0x0800c2ed
 800c684:	0800c365 	.word	0x0800c365
 800c688:	0800d8a1 	.word	0x0800d8a1
 800c68c:	0800dc1a 	.word	0x0800dc1a
 800c690:	08008d15 	.word	0x08008d15

0800c694 <_scanf_chars>:
 800c694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c696:	0015      	movs	r5, r2
 800c698:	688a      	ldr	r2, [r1, #8]
 800c69a:	000c      	movs	r4, r1
 800c69c:	9001      	str	r0, [sp, #4]
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	d105      	bne.n	800c6ae <_scanf_chars+0x1a>
 800c6a2:	6989      	ldr	r1, [r1, #24]
 800c6a4:	3201      	adds	r2, #1
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	d000      	beq.n	800c6ac <_scanf_chars+0x18>
 800c6aa:	3a02      	subs	r2, #2
 800c6ac:	60a2      	str	r2, [r4, #8]
 800c6ae:	6822      	ldr	r2, [r4, #0]
 800c6b0:	06d2      	lsls	r2, r2, #27
 800c6b2:	d403      	bmi.n	800c6bc <_scanf_chars+0x28>
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	1d11      	adds	r1, r2, #4
 800c6b8:	6019      	str	r1, [r3, #0]
 800c6ba:	6817      	ldr	r7, [r2, #0]
 800c6bc:	2600      	movs	r6, #0
 800c6be:	69a0      	ldr	r0, [r4, #24]
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d013      	beq.n	800c6ec <_scanf_chars+0x58>
 800c6c4:	2801      	cmp	r0, #1
 800c6c6:	d108      	bne.n	800c6da <_scanf_chars+0x46>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	6962      	ldr	r2, [r4, #20]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	5cd3      	ldrb	r3, [r2, r3]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10b      	bne.n	800c6ec <_scanf_chars+0x58>
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	d127      	bne.n	800c728 <_scanf_chars+0x94>
 800c6d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6da:	2802      	cmp	r0, #2
 800c6dc:	d124      	bne.n	800c728 <_scanf_chars+0x94>
 800c6de:	682b      	ldr	r3, [r5, #0]
 800c6e0:	4a1a      	ldr	r2, [pc, #104]	; (800c74c <_scanf_chars+0xb8>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	5cd3      	ldrb	r3, [r2, r3]
 800c6e6:	2208      	movs	r2, #8
 800c6e8:	4213      	tst	r3, r2
 800c6ea:	d11d      	bne.n	800c728 <_scanf_chars+0x94>
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	3601      	adds	r6, #1
 800c6f2:	4213      	tst	r3, r2
 800c6f4:	d103      	bne.n	800c6fe <_scanf_chars+0x6a>
 800c6f6:	682b      	ldr	r3, [r5, #0]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	703b      	strb	r3, [r7, #0]
 800c6fc:	3701      	adds	r7, #1
 800c6fe:	682a      	ldr	r2, [r5, #0]
 800c700:	686b      	ldr	r3, [r5, #4]
 800c702:	3201      	adds	r2, #1
 800c704:	602a      	str	r2, [r5, #0]
 800c706:	68a2      	ldr	r2, [r4, #8]
 800c708:	3b01      	subs	r3, #1
 800c70a:	3a01      	subs	r2, #1
 800c70c:	606b      	str	r3, [r5, #4]
 800c70e:	60a2      	str	r2, [r4, #8]
 800c710:	2a00      	cmp	r2, #0
 800c712:	d009      	beq.n	800c728 <_scanf_chars+0x94>
 800c714:	2b00      	cmp	r3, #0
 800c716:	dcd2      	bgt.n	800c6be <_scanf_chars+0x2a>
 800c718:	23c0      	movs	r3, #192	; 0xc0
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	0029      	movs	r1, r5
 800c71e:	58e3      	ldr	r3, [r4, r3]
 800c720:	9801      	ldr	r0, [sp, #4]
 800c722:	4798      	blx	r3
 800c724:	2800      	cmp	r0, #0
 800c726:	d0ca      	beq.n	800c6be <_scanf_chars+0x2a>
 800c728:	6822      	ldr	r2, [r4, #0]
 800c72a:	2310      	movs	r3, #16
 800c72c:	0011      	movs	r1, r2
 800c72e:	4019      	ands	r1, r3
 800c730:	421a      	tst	r2, r3
 800c732:	d106      	bne.n	800c742 <_scanf_chars+0xae>
 800c734:	68e3      	ldr	r3, [r4, #12]
 800c736:	3301      	adds	r3, #1
 800c738:	60e3      	str	r3, [r4, #12]
 800c73a:	69a3      	ldr	r3, [r4, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d000      	beq.n	800c742 <_scanf_chars+0xae>
 800c740:	7039      	strb	r1, [r7, #0]
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	2000      	movs	r0, #0
 800c746:	199e      	adds	r6, r3, r6
 800c748:	6126      	str	r6, [r4, #16]
 800c74a:	e7c5      	b.n	800c6d8 <_scanf_chars+0x44>
 800c74c:	0800d8a1 	.word	0x0800d8a1

0800c750 <_scanf_i>:
 800c750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c752:	000c      	movs	r4, r1
 800c754:	b08d      	sub	sp, #52	; 0x34
 800c756:	9302      	str	r3, [sp, #8]
 800c758:	4b79      	ldr	r3, [pc, #484]	; (800c940 <_scanf_i+0x1f0>)
 800c75a:	0016      	movs	r6, r2
 800c75c:	9005      	str	r0, [sp, #20]
 800c75e:	aa09      	add	r2, sp, #36	; 0x24
 800c760:	cb23      	ldmia	r3!, {r0, r1, r5}
 800c762:	c223      	stmia	r2!, {r0, r1, r5}
 800c764:	4b77      	ldr	r3, [pc, #476]	; (800c944 <_scanf_i+0x1f4>)
 800c766:	9306      	str	r3, [sp, #24]
 800c768:	69a3      	ldr	r3, [r4, #24]
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d001      	beq.n	800c772 <_scanf_i+0x22>
 800c76e:	4b76      	ldr	r3, [pc, #472]	; (800c948 <_scanf_i+0x1f8>)
 800c770:	9306      	str	r3, [sp, #24]
 800c772:	22ae      	movs	r2, #174	; 0xae
 800c774:	2000      	movs	r0, #0
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	0052      	lsls	r2, r2, #1
 800c77a:	1e59      	subs	r1, r3, #1
 800c77c:	9004      	str	r0, [sp, #16]
 800c77e:	4291      	cmp	r1, r2
 800c780:	d905      	bls.n	800c78e <_scanf_i+0x3e>
 800c782:	3b5e      	subs	r3, #94	; 0x5e
 800c784:	3bff      	subs	r3, #255	; 0xff
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	235e      	movs	r3, #94	; 0x5e
 800c78a:	33ff      	adds	r3, #255	; 0xff
 800c78c:	60a3      	str	r3, [r4, #8]
 800c78e:	0023      	movs	r3, r4
 800c790:	331c      	adds	r3, #28
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	23d0      	movs	r3, #208	; 0xd0
 800c796:	2700      	movs	r7, #0
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	011b      	lsls	r3, r3, #4
 800c79c:	4313      	orrs	r3, r2
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	9b01      	ldr	r3, [sp, #4]
 800c7a2:	9303      	str	r3, [sp, #12]
 800c7a4:	6833      	ldr	r3, [r6, #0]
 800c7a6:	a809      	add	r0, sp, #36	; 0x24
 800c7a8:	7819      	ldrb	r1, [r3, #0]
 800c7aa:	00bb      	lsls	r3, r7, #2
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	5818      	ldr	r0, [r3, r0]
 800c7b0:	f7fe fea6 	bl	800b500 <memchr>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d02b      	beq.n	800c810 <_scanf_i+0xc0>
 800c7b8:	2f01      	cmp	r7, #1
 800c7ba:	d162      	bne.n	800c882 <_scanf_i+0x132>
 800c7bc:	6863      	ldr	r3, [r4, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <_scanf_i+0x80>
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	6822      	ldr	r2, [r4, #0]
 800c7c6:	6063      	str	r3, [r4, #4]
 800c7c8:	33f9      	adds	r3, #249	; 0xf9
 800c7ca:	33ff      	adds	r3, #255	; 0xff
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	6023      	str	r3, [r4, #0]
 800c7d0:	4b5e      	ldr	r3, [pc, #376]	; (800c94c <_scanf_i+0x1fc>)
 800c7d2:	6822      	ldr	r2, [r4, #0]
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	6023      	str	r3, [r4, #0]
 800c7d8:	68a3      	ldr	r3, [r4, #8]
 800c7da:	1e5a      	subs	r2, r3, #1
 800c7dc:	60a2      	str	r2, [r4, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d016      	beq.n	800c810 <_scanf_i+0xc0>
 800c7e2:	6833      	ldr	r3, [r6, #0]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	6032      	str	r2, [r6, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	9a03      	ldr	r2, [sp, #12]
 800c7ec:	7013      	strb	r3, [r2, #0]
 800c7ee:	6873      	ldr	r3, [r6, #4]
 800c7f0:	1c55      	adds	r5, r2, #1
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	6073      	str	r3, [r6, #4]
 800c7f6:	9503      	str	r5, [sp, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc09      	bgt.n	800c810 <_scanf_i+0xc0>
 800c7fc:	23c0      	movs	r3, #192	; 0xc0
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	58e3      	ldr	r3, [r4, r3]
 800c802:	0031      	movs	r1, r6
 800c804:	9805      	ldr	r0, [sp, #20]
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	4798      	blx	r3
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d000      	beq.n	800c810 <_scanf_i+0xc0>
 800c80e:	e081      	b.n	800c914 <_scanf_i+0x1c4>
 800c810:	3701      	adds	r7, #1
 800c812:	2f03      	cmp	r7, #3
 800c814:	d1c6      	bne.n	800c7a4 <_scanf_i+0x54>
 800c816:	6863      	ldr	r3, [r4, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d101      	bne.n	800c820 <_scanf_i+0xd0>
 800c81c:	330a      	adds	r3, #10
 800c81e:	6063      	str	r3, [r4, #4]
 800c820:	2110      	movs	r1, #16
 800c822:	2700      	movs	r7, #0
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	6960      	ldr	r0, [r4, #20]
 800c828:	1ac9      	subs	r1, r1, r3
 800c82a:	4b49      	ldr	r3, [pc, #292]	; (800c950 <_scanf_i+0x200>)
 800c82c:	18c9      	adds	r1, r1, r3
 800c82e:	f000 f8bf 	bl	800c9b0 <__sccl>
 800c832:	9d03      	ldr	r5, [sp, #12]
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	9303      	str	r3, [sp, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d041      	beq.n	800c8c2 <_scanf_i+0x172>
 800c83e:	6831      	ldr	r1, [r6, #0]
 800c840:	6963      	ldr	r3, [r4, #20]
 800c842:	7808      	ldrb	r0, [r1, #0]
 800c844:	5c1b      	ldrb	r3, [r3, r0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d03b      	beq.n	800c8c2 <_scanf_i+0x172>
 800c84a:	2830      	cmp	r0, #48	; 0x30
 800c84c:	d129      	bne.n	800c8a2 <_scanf_i+0x152>
 800c84e:	2380      	movs	r3, #128	; 0x80
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	421a      	tst	r2, r3
 800c854:	d025      	beq.n	800c8a2 <_scanf_i+0x152>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	3701      	adds	r7, #1
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d005      	beq.n	800c86a <_scanf_i+0x11a>
 800c85e:	001a      	movs	r2, r3
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	3a01      	subs	r2, #1
 800c864:	3301      	adds	r3, #1
 800c866:	9204      	str	r2, [sp, #16]
 800c868:	60a3      	str	r3, [r4, #8]
 800c86a:	6873      	ldr	r3, [r6, #4]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	6073      	str	r3, [r6, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	dd1d      	ble.n	800c8b0 <_scanf_i+0x160>
 800c874:	6833      	ldr	r3, [r6, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	6033      	str	r3, [r6, #0]
 800c87a:	68a3      	ldr	r3, [r4, #8]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	60a3      	str	r3, [r4, #8]
 800c880:	e7d8      	b.n	800c834 <_scanf_i+0xe4>
 800c882:	2f02      	cmp	r7, #2
 800c884:	d1a8      	bne.n	800c7d8 <_scanf_i+0x88>
 800c886:	21c0      	movs	r1, #192	; 0xc0
 800c888:	2380      	movs	r3, #128	; 0x80
 800c88a:	6822      	ldr	r2, [r4, #0]
 800c88c:	00c9      	lsls	r1, r1, #3
 800c88e:	4011      	ands	r1, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4299      	cmp	r1, r3
 800c894:	d1bf      	bne.n	800c816 <_scanf_i+0xc6>
 800c896:	3bf1      	subs	r3, #241	; 0xf1
 800c898:	3bff      	subs	r3, #255	; 0xff
 800c89a:	6063      	str	r3, [r4, #4]
 800c89c:	33f0      	adds	r3, #240	; 0xf0
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	e799      	b.n	800c7d6 <_scanf_i+0x86>
 800c8a2:	4b2c      	ldr	r3, [pc, #176]	; (800c954 <_scanf_i+0x204>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	780b      	ldrb	r3, [r1, #0]
 800c8aa:	702b      	strb	r3, [r5, #0]
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	e7dc      	b.n	800c86a <_scanf_i+0x11a>
 800c8b0:	23c0      	movs	r3, #192	; 0xc0
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	58e3      	ldr	r3, [r4, r3]
 800c8b6:	0031      	movs	r1, r6
 800c8b8:	9805      	ldr	r0, [sp, #20]
 800c8ba:	9303      	str	r3, [sp, #12]
 800c8bc:	4798      	blx	r3
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0db      	beq.n	800c87a <_scanf_i+0x12a>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	05db      	lsls	r3, r3, #23
 800c8c6:	d50e      	bpl.n	800c8e6 <_scanf_i+0x196>
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	429d      	cmp	r5, r3
 800c8cc:	d907      	bls.n	800c8de <_scanf_i+0x18e>
 800c8ce:	23be      	movs	r3, #190	; 0xbe
 800c8d0:	3d01      	subs	r5, #1
 800c8d2:	005b      	lsls	r3, r3, #1
 800c8d4:	0032      	movs	r2, r6
 800c8d6:	7829      	ldrb	r1, [r5, #0]
 800c8d8:	58e3      	ldr	r3, [r4, r3]
 800c8da:	9805      	ldr	r0, [sp, #20]
 800c8dc:	4798      	blx	r3
 800c8de:	9b01      	ldr	r3, [sp, #4]
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	429d      	cmp	r5, r3
 800c8e4:	d029      	beq.n	800c93a <_scanf_i+0x1ea>
 800c8e6:	6821      	ldr	r1, [r4, #0]
 800c8e8:	2310      	movs	r3, #16
 800c8ea:	000a      	movs	r2, r1
 800c8ec:	401a      	ands	r2, r3
 800c8ee:	4219      	tst	r1, r3
 800c8f0:	d11c      	bne.n	800c92c <_scanf_i+0x1dc>
 800c8f2:	702a      	strb	r2, [r5, #0]
 800c8f4:	6863      	ldr	r3, [r4, #4]
 800c8f6:	9901      	ldr	r1, [sp, #4]
 800c8f8:	9805      	ldr	r0, [sp, #20]
 800c8fa:	9e06      	ldr	r6, [sp, #24]
 800c8fc:	47b0      	blx	r6
 800c8fe:	9b02      	ldr	r3, [sp, #8]
 800c900:	6821      	ldr	r1, [r4, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	068a      	lsls	r2, r1, #26
 800c906:	d507      	bpl.n	800c918 <_scanf_i+0x1c8>
 800c908:	1d1a      	adds	r2, r3, #4
 800c90a:	9902      	ldr	r1, [sp, #8]
 800c90c:	600a      	str	r2, [r1, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6018      	str	r0, [r3, #0]
 800c912:	e008      	b.n	800c926 <_scanf_i+0x1d6>
 800c914:	2700      	movs	r7, #0
 800c916:	e7d4      	b.n	800c8c2 <_scanf_i+0x172>
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	07ce      	lsls	r6, r1, #31
 800c91c:	d5f5      	bpl.n	800c90a <_scanf_i+0x1ba>
 800c91e:	9902      	ldr	r1, [sp, #8]
 800c920:	600a      	str	r2, [r1, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	8018      	strh	r0, [r3, #0]
 800c926:	68e3      	ldr	r3, [r4, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	60e3      	str	r3, [r4, #12]
 800c92c:	2000      	movs	r0, #0
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	1aed      	subs	r5, r5, r3
 800c932:	6923      	ldr	r3, [r4, #16]
 800c934:	19ef      	adds	r7, r5, r7
 800c936:	19df      	adds	r7, r3, r7
 800c938:	6127      	str	r7, [r4, #16]
 800c93a:	b00d      	add	sp, #52	; 0x34
 800c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	0800d770 	.word	0x0800d770
 800c944:	0800a00d 	.word	0x0800a00d
 800c948:	0800cb65 	.word	0x0800cb65
 800c94c:	fffffaff 	.word	0xfffffaff
 800c950:	0800dc2e 	.word	0x0800dc2e
 800c954:	fffff6ff 	.word	0xfffff6ff

0800c958 <_read_r>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	0004      	movs	r4, r0
 800c95c:	0008      	movs	r0, r1
 800c95e:	0011      	movs	r1, r2
 800c960:	001a      	movs	r2, r3
 800c962:	2300      	movs	r3, #0
 800c964:	4d05      	ldr	r5, [pc, #20]	; (800c97c <_read_r+0x24>)
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	f7f7 fb06 	bl	8003f78 <_read>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d103      	bne.n	800c978 <_read_r+0x20>
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d000      	beq.n	800c978 <_read_r+0x20>
 800c976:	6023      	str	r3, [r4, #0]
 800c978:	bd70      	pop	{r4, r5, r6, pc}
 800c97a:	46c0      	nop			; (mov r8, r8)
 800c97c:	200005b0 	.word	0x200005b0

0800c980 <nan>:
 800c980:	2000      	movs	r0, #0
 800c982:	4901      	ldr	r1, [pc, #4]	; (800c988 <nan+0x8>)
 800c984:	4770      	bx	lr
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	7ff80000 	.word	0x7ff80000

0800c98c <_sbrk_r>:
 800c98c:	2300      	movs	r3, #0
 800c98e:	b570      	push	{r4, r5, r6, lr}
 800c990:	4d06      	ldr	r5, [pc, #24]	; (800c9ac <_sbrk_r+0x20>)
 800c992:	0004      	movs	r4, r0
 800c994:	0008      	movs	r0, r1
 800c996:	602b      	str	r3, [r5, #0]
 800c998:	f7f7 fb54 	bl	8004044 <_sbrk>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d103      	bne.n	800c9a8 <_sbrk_r+0x1c>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d000      	beq.n	800c9a8 <_sbrk_r+0x1c>
 800c9a6:	6023      	str	r3, [r4, #0]
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
 800c9aa:	46c0      	nop			; (mov r8, r8)
 800c9ac:	200005b0 	.word	0x200005b0

0800c9b0 <__sccl>:
 800c9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9b2:	780b      	ldrb	r3, [r1, #0]
 800c9b4:	0004      	movs	r4, r0
 800c9b6:	2b5e      	cmp	r3, #94	; 0x5e
 800c9b8:	d00c      	beq.n	800c9d4 <__sccl+0x24>
 800c9ba:	1c48      	adds	r0, r1, #1
 800c9bc:	2100      	movs	r1, #0
 800c9be:	0022      	movs	r2, r4
 800c9c0:	1c65      	adds	r5, r4, #1
 800c9c2:	35ff      	adds	r5, #255	; 0xff
 800c9c4:	7011      	strb	r1, [r2, #0]
 800c9c6:	3201      	adds	r2, #1
 800c9c8:	42aa      	cmp	r2, r5
 800c9ca:	d1fb      	bne.n	800c9c4 <__sccl+0x14>
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d105      	bne.n	800c9dc <__sccl+0x2c>
 800c9d0:	3801      	subs	r0, #1
 800c9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9d4:	784b      	ldrb	r3, [r1, #1]
 800c9d6:	1c88      	adds	r0, r1, #2
 800c9d8:	2101      	movs	r1, #1
 800c9da:	e7f0      	b.n	800c9be <__sccl+0xe>
 800c9dc:	2201      	movs	r2, #1
 800c9de:	262d      	movs	r6, #45	; 0x2d
 800c9e0:	4051      	eors	r1, r2
 800c9e2:	0002      	movs	r2, r0
 800c9e4:	54e1      	strb	r1, [r4, r3]
 800c9e6:	7815      	ldrb	r5, [r2, #0]
 800c9e8:	1c50      	adds	r0, r2, #1
 800c9ea:	2d2d      	cmp	r5, #45	; 0x2d
 800c9ec:	d009      	beq.n	800ca02 <__sccl+0x52>
 800c9ee:	2d5d      	cmp	r5, #93	; 0x5d
 800c9f0:	d0ef      	beq.n	800c9d2 <__sccl+0x22>
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	d101      	bne.n	800c9fa <__sccl+0x4a>
 800c9f6:	0010      	movs	r0, r2
 800c9f8:	e7eb      	b.n	800c9d2 <__sccl+0x22>
 800c9fa:	002b      	movs	r3, r5
 800c9fc:	e7f1      	b.n	800c9e2 <__sccl+0x32>
 800c9fe:	0033      	movs	r3, r6
 800ca00:	e7ef      	b.n	800c9e2 <__sccl+0x32>
 800ca02:	7855      	ldrb	r5, [r2, #1]
 800ca04:	2d5d      	cmp	r5, #93	; 0x5d
 800ca06:	d0fa      	beq.n	800c9fe <__sccl+0x4e>
 800ca08:	42ab      	cmp	r3, r5
 800ca0a:	dcf8      	bgt.n	800c9fe <__sccl+0x4e>
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	3202      	adds	r2, #2
 800ca10:	3001      	adds	r0, #1
 800ca12:	5421      	strb	r1, [r4, r0]
 800ca14:	4285      	cmp	r5, r0
 800ca16:	dcfb      	bgt.n	800ca10 <__sccl+0x60>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	1c5f      	adds	r7, r3, #1
 800ca1c:	42ab      	cmp	r3, r5
 800ca1e:	da01      	bge.n	800ca24 <__sccl+0x74>
 800ca20:	1ae8      	subs	r0, r5, r3
 800ca22:	3801      	subs	r0, #1
 800ca24:	183b      	adds	r3, r7, r0
 800ca26:	e7de      	b.n	800c9e6 <__sccl+0x36>

0800ca28 <strncmp>:
 800ca28:	b530      	push	{r4, r5, lr}
 800ca2a:	0005      	movs	r5, r0
 800ca2c:	1e10      	subs	r0, r2, #0
 800ca2e:	d00b      	beq.n	800ca48 <strncmp+0x20>
 800ca30:	2400      	movs	r4, #0
 800ca32:	3a01      	subs	r2, #1
 800ca34:	5d2b      	ldrb	r3, [r5, r4]
 800ca36:	5d08      	ldrb	r0, [r1, r4]
 800ca38:	4283      	cmp	r3, r0
 800ca3a:	d104      	bne.n	800ca46 <strncmp+0x1e>
 800ca3c:	4294      	cmp	r4, r2
 800ca3e:	d002      	beq.n	800ca46 <strncmp+0x1e>
 800ca40:	3401      	adds	r4, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1f6      	bne.n	800ca34 <strncmp+0xc>
 800ca46:	1a18      	subs	r0, r3, r0
 800ca48:	bd30      	pop	{r4, r5, pc}
	...

0800ca4c <_strtoul_l.isra.0>:
 800ca4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca4e:	001e      	movs	r6, r3
 800ca50:	4b43      	ldr	r3, [pc, #268]	; (800cb60 <_strtoul_l.isra.0+0x114>)
 800ca52:	b087      	sub	sp, #28
 800ca54:	000f      	movs	r7, r1
 800ca56:	9101      	str	r1, [sp, #4]
 800ca58:	469c      	mov	ip, r3
 800ca5a:	2108      	movs	r1, #8
 800ca5c:	9005      	str	r0, [sp, #20]
 800ca5e:	9202      	str	r2, [sp, #8]
 800ca60:	003b      	movs	r3, r7
 800ca62:	4662      	mov	r2, ip
 800ca64:	781c      	ldrb	r4, [r3, #0]
 800ca66:	1c7d      	adds	r5, r7, #1
 800ca68:	5d10      	ldrb	r0, [r2, r4]
 800ca6a:	002f      	movs	r7, r5
 800ca6c:	0002      	movs	r2, r0
 800ca6e:	400a      	ands	r2, r1
 800ca70:	4208      	tst	r0, r1
 800ca72:	d1f5      	bne.n	800ca60 <_strtoul_l.isra.0+0x14>
 800ca74:	2c2d      	cmp	r4, #45	; 0x2d
 800ca76:	d13a      	bne.n	800caee <_strtoul_l.isra.0+0xa2>
 800ca78:	2701      	movs	r7, #1
 800ca7a:	782c      	ldrb	r4, [r5, #0]
 800ca7c:	1c9d      	adds	r5, r3, #2
 800ca7e:	2e00      	cmp	r6, #0
 800ca80:	d069      	beq.n	800cb56 <_strtoul_l.isra.0+0x10a>
 800ca82:	2e10      	cmp	r6, #16
 800ca84:	d109      	bne.n	800ca9a <_strtoul_l.isra.0+0x4e>
 800ca86:	2c30      	cmp	r4, #48	; 0x30
 800ca88:	d107      	bne.n	800ca9a <_strtoul_l.isra.0+0x4e>
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	782b      	ldrb	r3, [r5, #0]
 800ca8e:	4393      	bics	r3, r2
 800ca90:	2b58      	cmp	r3, #88	; 0x58
 800ca92:	d15b      	bne.n	800cb4c <_strtoul_l.isra.0+0x100>
 800ca94:	2610      	movs	r6, #16
 800ca96:	786c      	ldrb	r4, [r5, #1]
 800ca98:	3502      	adds	r5, #2
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	0031      	movs	r1, r6
 800ca9e:	4240      	negs	r0, r0
 800caa0:	f7f3 fb58 	bl	8000154 <__udivsi3>
 800caa4:	9003      	str	r0, [sp, #12]
 800caa6:	2001      	movs	r0, #1
 800caa8:	0031      	movs	r1, r6
 800caaa:	4240      	negs	r0, r0
 800caac:	f7f3 fbd8 	bl	8000260 <__aeabi_uidivmod>
 800cab0:	2300      	movs	r3, #0
 800cab2:	9104      	str	r1, [sp, #16]
 800cab4:	2101      	movs	r1, #1
 800cab6:	2201      	movs	r2, #1
 800cab8:	0018      	movs	r0, r3
 800caba:	468c      	mov	ip, r1
 800cabc:	4252      	negs	r2, r2
 800cabe:	0021      	movs	r1, r4
 800cac0:	3930      	subs	r1, #48	; 0x30
 800cac2:	2909      	cmp	r1, #9
 800cac4:	d81a      	bhi.n	800cafc <_strtoul_l.isra.0+0xb0>
 800cac6:	000c      	movs	r4, r1
 800cac8:	42a6      	cmp	r6, r4
 800caca:	dd25      	ble.n	800cb18 <_strtoul_l.isra.0+0xcc>
 800cacc:	2b00      	cmp	r3, #0
 800cace:	db21      	blt.n	800cb14 <_strtoul_l.isra.0+0xc8>
 800cad0:	9903      	ldr	r1, [sp, #12]
 800cad2:	0013      	movs	r3, r2
 800cad4:	4281      	cmp	r1, r0
 800cad6:	d307      	bcc.n	800cae8 <_strtoul_l.isra.0+0x9c>
 800cad8:	d103      	bne.n	800cae2 <_strtoul_l.isra.0+0x96>
 800cada:	9904      	ldr	r1, [sp, #16]
 800cadc:	0013      	movs	r3, r2
 800cade:	42a1      	cmp	r1, r4
 800cae0:	db02      	blt.n	800cae8 <_strtoul_l.isra.0+0x9c>
 800cae2:	4663      	mov	r3, ip
 800cae4:	4370      	muls	r0, r6
 800cae6:	1820      	adds	r0, r4, r0
 800cae8:	782c      	ldrb	r4, [r5, #0]
 800caea:	3501      	adds	r5, #1
 800caec:	e7e7      	b.n	800cabe <_strtoul_l.isra.0+0x72>
 800caee:	2c2b      	cmp	r4, #43	; 0x2b
 800caf0:	d001      	beq.n	800caf6 <_strtoul_l.isra.0+0xaa>
 800caf2:	0017      	movs	r7, r2
 800caf4:	e7c3      	b.n	800ca7e <_strtoul_l.isra.0+0x32>
 800caf6:	782c      	ldrb	r4, [r5, #0]
 800caf8:	1c9d      	adds	r5, r3, #2
 800cafa:	e7fa      	b.n	800caf2 <_strtoul_l.isra.0+0xa6>
 800cafc:	0021      	movs	r1, r4
 800cafe:	3941      	subs	r1, #65	; 0x41
 800cb00:	2919      	cmp	r1, #25
 800cb02:	d801      	bhi.n	800cb08 <_strtoul_l.isra.0+0xbc>
 800cb04:	3c37      	subs	r4, #55	; 0x37
 800cb06:	e7df      	b.n	800cac8 <_strtoul_l.isra.0+0x7c>
 800cb08:	0021      	movs	r1, r4
 800cb0a:	3961      	subs	r1, #97	; 0x61
 800cb0c:	2919      	cmp	r1, #25
 800cb0e:	d803      	bhi.n	800cb18 <_strtoul_l.isra.0+0xcc>
 800cb10:	3c57      	subs	r4, #87	; 0x57
 800cb12:	e7d9      	b.n	800cac8 <_strtoul_l.isra.0+0x7c>
 800cb14:	0013      	movs	r3, r2
 800cb16:	e7e7      	b.n	800cae8 <_strtoul_l.isra.0+0x9c>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	da09      	bge.n	800cb30 <_strtoul_l.isra.0+0xe4>
 800cb1c:	2322      	movs	r3, #34	; 0x22
 800cb1e:	2001      	movs	r0, #1
 800cb20:	9a05      	ldr	r2, [sp, #20]
 800cb22:	4240      	negs	r0, r0
 800cb24:	6013      	str	r3, [r2, #0]
 800cb26:	9b02      	ldr	r3, [sp, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d109      	bne.n	800cb40 <_strtoul_l.isra.0+0xf4>
 800cb2c:	b007      	add	sp, #28
 800cb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	d000      	beq.n	800cb36 <_strtoul_l.isra.0+0xea>
 800cb34:	4240      	negs	r0, r0
 800cb36:	9a02      	ldr	r2, [sp, #8]
 800cb38:	2a00      	cmp	r2, #0
 800cb3a:	d0f7      	beq.n	800cb2c <_strtoul_l.isra.0+0xe0>
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <_strtoul_l.isra.0+0xf8>
 800cb40:	1e6b      	subs	r3, r5, #1
 800cb42:	9301      	str	r3, [sp, #4]
 800cb44:	9b02      	ldr	r3, [sp, #8]
 800cb46:	9a01      	ldr	r2, [sp, #4]
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	e7ef      	b.n	800cb2c <_strtoul_l.isra.0+0xe0>
 800cb4c:	2430      	movs	r4, #48	; 0x30
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	d1a3      	bne.n	800ca9a <_strtoul_l.isra.0+0x4e>
 800cb52:	3608      	adds	r6, #8
 800cb54:	e7a1      	b.n	800ca9a <_strtoul_l.isra.0+0x4e>
 800cb56:	2c30      	cmp	r4, #48	; 0x30
 800cb58:	d097      	beq.n	800ca8a <_strtoul_l.isra.0+0x3e>
 800cb5a:	260a      	movs	r6, #10
 800cb5c:	e79d      	b.n	800ca9a <_strtoul_l.isra.0+0x4e>
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	0800d8a1 	.word	0x0800d8a1

0800cb64 <_strtoul_r>:
 800cb64:	b510      	push	{r4, lr}
 800cb66:	f7ff ff71 	bl	800ca4c <_strtoul_l.isra.0>
 800cb6a:	bd10      	pop	{r4, pc}

0800cb6c <__submore>:
 800cb6c:	000b      	movs	r3, r1
 800cb6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb70:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800cb72:	3344      	adds	r3, #68	; 0x44
 800cb74:	000c      	movs	r4, r1
 800cb76:	429d      	cmp	r5, r3
 800cb78:	d11c      	bne.n	800cbb4 <__submore+0x48>
 800cb7a:	2680      	movs	r6, #128	; 0x80
 800cb7c:	00f6      	lsls	r6, r6, #3
 800cb7e:	0031      	movs	r1, r6
 800cb80:	f7ff f9f4 	bl	800bf6c <_malloc_r>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d102      	bne.n	800cb8e <__submore+0x22>
 800cb88:	2001      	movs	r0, #1
 800cb8a:	4240      	negs	r0, r0
 800cb8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb8e:	0023      	movs	r3, r4
 800cb90:	6360      	str	r0, [r4, #52]	; 0x34
 800cb92:	63a6      	str	r6, [r4, #56]	; 0x38
 800cb94:	3346      	adds	r3, #70	; 0x46
 800cb96:	781a      	ldrb	r2, [r3, #0]
 800cb98:	4b10      	ldr	r3, [pc, #64]	; (800cbdc <__submore+0x70>)
 800cb9a:	54c2      	strb	r2, [r0, r3]
 800cb9c:	0023      	movs	r3, r4
 800cb9e:	3345      	adds	r3, #69	; 0x45
 800cba0:	781a      	ldrb	r2, [r3, #0]
 800cba2:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <__submore+0x74>)
 800cba4:	54c2      	strb	r2, [r0, r3]
 800cba6:	782a      	ldrb	r2, [r5, #0]
 800cba8:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <__submore+0x78>)
 800cbaa:	54c2      	strb	r2, [r0, r3]
 800cbac:	18c0      	adds	r0, r0, r3
 800cbae:	6020      	str	r0, [r4, #0]
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	e7eb      	b.n	800cb8c <__submore+0x20>
 800cbb4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800cbb6:	0029      	movs	r1, r5
 800cbb8:	0073      	lsls	r3, r6, #1
 800cbba:	001a      	movs	r2, r3
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	f000 fa43 	bl	800d048 <_realloc_r>
 800cbc2:	1e05      	subs	r5, r0, #0
 800cbc4:	d0e0      	beq.n	800cb88 <__submore+0x1c>
 800cbc6:	1987      	adds	r7, r0, r6
 800cbc8:	0001      	movs	r1, r0
 800cbca:	0032      	movs	r2, r6
 800cbcc:	0038      	movs	r0, r7
 800cbce:	f7fe fca2 	bl	800b516 <memcpy>
 800cbd2:	9b01      	ldr	r3, [sp, #4]
 800cbd4:	6027      	str	r7, [r4, #0]
 800cbd6:	6365      	str	r5, [r4, #52]	; 0x34
 800cbd8:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbda:	e7e9      	b.n	800cbb0 <__submore+0x44>
 800cbdc:	000003ff 	.word	0x000003ff
 800cbe0:	000003fe 	.word	0x000003fe
 800cbe4:	000003fd 	.word	0x000003fd

0800cbe8 <__ascii_wctomb>:
 800cbe8:	0003      	movs	r3, r0
 800cbea:	1e08      	subs	r0, r1, #0
 800cbec:	d005      	beq.n	800cbfa <__ascii_wctomb+0x12>
 800cbee:	2aff      	cmp	r2, #255	; 0xff
 800cbf0:	d904      	bls.n	800cbfc <__ascii_wctomb+0x14>
 800cbf2:	228a      	movs	r2, #138	; 0x8a
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	4240      	negs	r0, r0
 800cbfa:	4770      	bx	lr
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	700a      	strb	r2, [r1, #0]
 800cc00:	e7fb      	b.n	800cbfa <__ascii_wctomb+0x12>
	...

0800cc04 <__assert_func>:
 800cc04:	b530      	push	{r4, r5, lr}
 800cc06:	0014      	movs	r4, r2
 800cc08:	001a      	movs	r2, r3
 800cc0a:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <__assert_func+0x2c>)
 800cc0c:	0005      	movs	r5, r0
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	b085      	sub	sp, #20
 800cc12:	68d8      	ldr	r0, [r3, #12]
 800cc14:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <__assert_func+0x30>)
 800cc16:	2c00      	cmp	r4, #0
 800cc18:	d101      	bne.n	800cc1e <__assert_func+0x1a>
 800cc1a:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <__assert_func+0x34>)
 800cc1c:	001c      	movs	r4, r3
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	9100      	str	r1, [sp, #0]
 800cc22:	002b      	movs	r3, r5
 800cc24:	4905      	ldr	r1, [pc, #20]	; (800cc3c <__assert_func+0x38>)
 800cc26:	9402      	str	r4, [sp, #8]
 800cc28:	f000 f9b8 	bl	800cf9c <fiprintf>
 800cc2c:	f000 fc62 	bl	800d4f4 <abort>
 800cc30:	2000000c 	.word	0x2000000c
 800cc34:	0800dc40 	.word	0x0800dc40
 800cc38:	0800dc7b 	.word	0x0800dc7b
 800cc3c:	0800dc4d 	.word	0x0800dc4d

0800cc40 <__sflush_r>:
 800cc40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc42:	898b      	ldrh	r3, [r1, #12]
 800cc44:	0005      	movs	r5, r0
 800cc46:	000c      	movs	r4, r1
 800cc48:	071a      	lsls	r2, r3, #28
 800cc4a:	d45f      	bmi.n	800cd0c <__sflush_r+0xcc>
 800cc4c:	684a      	ldr	r2, [r1, #4]
 800cc4e:	2a00      	cmp	r2, #0
 800cc50:	dc04      	bgt.n	800cc5c <__sflush_r+0x1c>
 800cc52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cc54:	2a00      	cmp	r2, #0
 800cc56:	dc01      	bgt.n	800cc5c <__sflush_r+0x1c>
 800cc58:	2000      	movs	r0, #0
 800cc5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cc5e:	2f00      	cmp	r7, #0
 800cc60:	d0fa      	beq.n	800cc58 <__sflush_r+0x18>
 800cc62:	2200      	movs	r2, #0
 800cc64:	2180      	movs	r1, #128	; 0x80
 800cc66:	682e      	ldr	r6, [r5, #0]
 800cc68:	602a      	str	r2, [r5, #0]
 800cc6a:	001a      	movs	r2, r3
 800cc6c:	0149      	lsls	r1, r1, #5
 800cc6e:	400a      	ands	r2, r1
 800cc70:	420b      	tst	r3, r1
 800cc72:	d034      	beq.n	800ccde <__sflush_r+0x9e>
 800cc74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	075b      	lsls	r3, r3, #29
 800cc7a:	d506      	bpl.n	800cc8a <__sflush_r+0x4a>
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	1ac0      	subs	r0, r0, r3
 800cc80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <__sflush_r+0x4a>
 800cc86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc88:	1ac0      	subs	r0, r0, r3
 800cc8a:	0002      	movs	r2, r0
 800cc8c:	6a21      	ldr	r1, [r4, #32]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	0028      	movs	r0, r5
 800cc92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cc94:	47b8      	blx	r7
 800cc96:	89a1      	ldrh	r1, [r4, #12]
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d106      	bne.n	800ccaa <__sflush_r+0x6a>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	2b1d      	cmp	r3, #29
 800cca0:	d831      	bhi.n	800cd06 <__sflush_r+0xc6>
 800cca2:	4a2c      	ldr	r2, [pc, #176]	; (800cd54 <__sflush_r+0x114>)
 800cca4:	40da      	lsrs	r2, r3
 800cca6:	07d3      	lsls	r3, r2, #31
 800cca8:	d52d      	bpl.n	800cd06 <__sflush_r+0xc6>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6063      	str	r3, [r4, #4]
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	04cb      	lsls	r3, r1, #19
 800ccb4:	d505      	bpl.n	800ccc2 <__sflush_r+0x82>
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	d102      	bne.n	800ccc0 <__sflush_r+0x80>
 800ccba:	682b      	ldr	r3, [r5, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d100      	bne.n	800ccc2 <__sflush_r+0x82>
 800ccc0:	6560      	str	r0, [r4, #84]	; 0x54
 800ccc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccc4:	602e      	str	r6, [r5, #0]
 800ccc6:	2900      	cmp	r1, #0
 800ccc8:	d0c6      	beq.n	800cc58 <__sflush_r+0x18>
 800ccca:	0023      	movs	r3, r4
 800cccc:	3344      	adds	r3, #68	; 0x44
 800ccce:	4299      	cmp	r1, r3
 800ccd0:	d002      	beq.n	800ccd8 <__sflush_r+0x98>
 800ccd2:	0028      	movs	r0, r5
 800ccd4:	f7ff f900 	bl	800bed8 <_free_r>
 800ccd8:	2000      	movs	r0, #0
 800ccda:	6360      	str	r0, [r4, #52]	; 0x34
 800ccdc:	e7bd      	b.n	800cc5a <__sflush_r+0x1a>
 800ccde:	2301      	movs	r3, #1
 800cce0:	0028      	movs	r0, r5
 800cce2:	6a21      	ldr	r1, [r4, #32]
 800cce4:	47b8      	blx	r7
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	d1c5      	bne.n	800cc76 <__sflush_r+0x36>
 800ccea:	682b      	ldr	r3, [r5, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0c2      	beq.n	800cc76 <__sflush_r+0x36>
 800ccf0:	2b1d      	cmp	r3, #29
 800ccf2:	d001      	beq.n	800ccf8 <__sflush_r+0xb8>
 800ccf4:	2b16      	cmp	r3, #22
 800ccf6:	d101      	bne.n	800ccfc <__sflush_r+0xbc>
 800ccf8:	602e      	str	r6, [r5, #0]
 800ccfa:	e7ad      	b.n	800cc58 <__sflush_r+0x18>
 800ccfc:	2340      	movs	r3, #64	; 0x40
 800ccfe:	89a2      	ldrh	r2, [r4, #12]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	e7a9      	b.n	800cc5a <__sflush_r+0x1a>
 800cd06:	2340      	movs	r3, #64	; 0x40
 800cd08:	430b      	orrs	r3, r1
 800cd0a:	e7fa      	b.n	800cd02 <__sflush_r+0xc2>
 800cd0c:	690f      	ldr	r7, [r1, #16]
 800cd0e:	2f00      	cmp	r7, #0
 800cd10:	d0a2      	beq.n	800cc58 <__sflush_r+0x18>
 800cd12:	680a      	ldr	r2, [r1, #0]
 800cd14:	600f      	str	r7, [r1, #0]
 800cd16:	1bd2      	subs	r2, r2, r7
 800cd18:	9201      	str	r2, [sp, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	079b      	lsls	r3, r3, #30
 800cd1e:	d100      	bne.n	800cd22 <__sflush_r+0xe2>
 800cd20:	694a      	ldr	r2, [r1, #20]
 800cd22:	60a2      	str	r2, [r4, #8]
 800cd24:	9b01      	ldr	r3, [sp, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	dc00      	bgt.n	800cd2c <__sflush_r+0xec>
 800cd2a:	e795      	b.n	800cc58 <__sflush_r+0x18>
 800cd2c:	003a      	movs	r2, r7
 800cd2e:	0028      	movs	r0, r5
 800cd30:	9b01      	ldr	r3, [sp, #4]
 800cd32:	6a21      	ldr	r1, [r4, #32]
 800cd34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd36:	47b0      	blx	r6
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	dc06      	bgt.n	800cd4a <__sflush_r+0x10a>
 800cd3c:	2340      	movs	r3, #64	; 0x40
 800cd3e:	2001      	movs	r0, #1
 800cd40:	89a2      	ldrh	r2, [r4, #12]
 800cd42:	4240      	negs	r0, r0
 800cd44:	4313      	orrs	r3, r2
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	e787      	b.n	800cc5a <__sflush_r+0x1a>
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	183f      	adds	r7, r7, r0
 800cd4e:	1a1b      	subs	r3, r3, r0
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	e7e7      	b.n	800cd24 <__sflush_r+0xe4>
 800cd54:	20400001 	.word	0x20400001

0800cd58 <_fflush_r>:
 800cd58:	690b      	ldr	r3, [r1, #16]
 800cd5a:	b570      	push	{r4, r5, r6, lr}
 800cd5c:	0005      	movs	r5, r0
 800cd5e:	000c      	movs	r4, r1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <_fflush_r+0x12>
 800cd64:	2500      	movs	r5, #0
 800cd66:	0028      	movs	r0, r5
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d004      	beq.n	800cd78 <_fflush_r+0x20>
 800cd6e:	6983      	ldr	r3, [r0, #24]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d101      	bne.n	800cd78 <_fflush_r+0x20>
 800cd74:	f000 f892 	bl	800ce9c <__sinit>
 800cd78:	4b14      	ldr	r3, [pc, #80]	; (800cdcc <_fflush_r+0x74>)
 800cd7a:	429c      	cmp	r4, r3
 800cd7c:	d11b      	bne.n	800cdb6 <_fflush_r+0x5e>
 800cd7e:	686c      	ldr	r4, [r5, #4]
 800cd80:	220c      	movs	r2, #12
 800cd82:	5ea3      	ldrsh	r3, [r4, r2]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0ed      	beq.n	800cd64 <_fflush_r+0xc>
 800cd88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd8a:	07d2      	lsls	r2, r2, #31
 800cd8c:	d404      	bmi.n	800cd98 <_fflush_r+0x40>
 800cd8e:	059b      	lsls	r3, r3, #22
 800cd90:	d402      	bmi.n	800cd98 <_fflush_r+0x40>
 800cd92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd94:	f000 f933 	bl	800cffe <__retarget_lock_acquire_recursive>
 800cd98:	0028      	movs	r0, r5
 800cd9a:	0021      	movs	r1, r4
 800cd9c:	f7ff ff50 	bl	800cc40 <__sflush_r>
 800cda0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda2:	0005      	movs	r5, r0
 800cda4:	07db      	lsls	r3, r3, #31
 800cda6:	d4de      	bmi.n	800cd66 <_fflush_r+0xe>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	059b      	lsls	r3, r3, #22
 800cdac:	d4db      	bmi.n	800cd66 <_fflush_r+0xe>
 800cdae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdb0:	f000 f926 	bl	800d000 <__retarget_lock_release_recursive>
 800cdb4:	e7d7      	b.n	800cd66 <_fflush_r+0xe>
 800cdb6:	4b06      	ldr	r3, [pc, #24]	; (800cdd0 <_fflush_r+0x78>)
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	d101      	bne.n	800cdc0 <_fflush_r+0x68>
 800cdbc:	68ac      	ldr	r4, [r5, #8]
 800cdbe:	e7df      	b.n	800cd80 <_fflush_r+0x28>
 800cdc0:	4b04      	ldr	r3, [pc, #16]	; (800cdd4 <_fflush_r+0x7c>)
 800cdc2:	429c      	cmp	r4, r3
 800cdc4:	d1dc      	bne.n	800cd80 <_fflush_r+0x28>
 800cdc6:	68ec      	ldr	r4, [r5, #12]
 800cdc8:	e7da      	b.n	800cd80 <_fflush_r+0x28>
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	0800dc9c 	.word	0x0800dc9c
 800cdd0:	0800dcbc 	.word	0x0800dcbc
 800cdd4:	0800dc7c 	.word	0x0800dc7c

0800cdd8 <std>:
 800cdd8:	2300      	movs	r3, #0
 800cdda:	b510      	push	{r4, lr}
 800cddc:	0004      	movs	r4, r0
 800cdde:	6003      	str	r3, [r0, #0]
 800cde0:	6043      	str	r3, [r0, #4]
 800cde2:	6083      	str	r3, [r0, #8]
 800cde4:	8181      	strh	r1, [r0, #12]
 800cde6:	6643      	str	r3, [r0, #100]	; 0x64
 800cde8:	0019      	movs	r1, r3
 800cdea:	81c2      	strh	r2, [r0, #14]
 800cdec:	6103      	str	r3, [r0, #16]
 800cdee:	6143      	str	r3, [r0, #20]
 800cdf0:	6183      	str	r3, [r0, #24]
 800cdf2:	2208      	movs	r2, #8
 800cdf4:	305c      	adds	r0, #92	; 0x5c
 800cdf6:	f7fb fb0b 	bl	8008410 <memset>
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <std+0x38>)
 800cdfc:	6263      	str	r3, [r4, #36]	; 0x24
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <std+0x3c>)
 800ce00:	6224      	str	r4, [r4, #32]
 800ce02:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <std+0x40>)
 800ce06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <std+0x44>)
 800ce0a:	6323      	str	r3, [r4, #48]	; 0x30
 800ce0c:	bd10      	pop	{r4, pc}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	080091bd 	.word	0x080091bd
 800ce14:	080091e9 	.word	0x080091e9
 800ce18:	08009221 	.word	0x08009221
 800ce1c:	0800924d 	.word	0x0800924d

0800ce20 <_cleanup_r>:
 800ce20:	b510      	push	{r4, lr}
 800ce22:	4902      	ldr	r1, [pc, #8]	; (800ce2c <_cleanup_r+0xc>)
 800ce24:	f000 f8ca 	bl	800cfbc <_fwalk_reent>
 800ce28:	bd10      	pop	{r4, pc}
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	0800cd59 	.word	0x0800cd59

0800ce30 <__sfmoreglue>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	2568      	movs	r5, #104	; 0x68
 800ce34:	1e4a      	subs	r2, r1, #1
 800ce36:	4355      	muls	r5, r2
 800ce38:	000e      	movs	r6, r1
 800ce3a:	0029      	movs	r1, r5
 800ce3c:	3174      	adds	r1, #116	; 0x74
 800ce3e:	f7ff f895 	bl	800bf6c <_malloc_r>
 800ce42:	1e04      	subs	r4, r0, #0
 800ce44:	d008      	beq.n	800ce58 <__sfmoreglue+0x28>
 800ce46:	2100      	movs	r1, #0
 800ce48:	002a      	movs	r2, r5
 800ce4a:	6001      	str	r1, [r0, #0]
 800ce4c:	6046      	str	r6, [r0, #4]
 800ce4e:	300c      	adds	r0, #12
 800ce50:	60a0      	str	r0, [r4, #8]
 800ce52:	3268      	adds	r2, #104	; 0x68
 800ce54:	f7fb fadc 	bl	8008410 <memset>
 800ce58:	0020      	movs	r0, r4
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}

0800ce5c <__sfp_lock_acquire>:
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	4802      	ldr	r0, [pc, #8]	; (800ce68 <__sfp_lock_acquire+0xc>)
 800ce60:	f000 f8cd 	bl	800cffe <__retarget_lock_acquire_recursive>
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	46c0      	nop			; (mov r8, r8)
 800ce68:	200005bc 	.word	0x200005bc

0800ce6c <__sfp_lock_release>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	4802      	ldr	r0, [pc, #8]	; (800ce78 <__sfp_lock_release+0xc>)
 800ce70:	f000 f8c6 	bl	800d000 <__retarget_lock_release_recursive>
 800ce74:	bd10      	pop	{r4, pc}
 800ce76:	46c0      	nop			; (mov r8, r8)
 800ce78:	200005bc 	.word	0x200005bc

0800ce7c <__sinit_lock_acquire>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	4802      	ldr	r0, [pc, #8]	; (800ce88 <__sinit_lock_acquire+0xc>)
 800ce80:	f000 f8bd 	bl	800cffe <__retarget_lock_acquire_recursive>
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	46c0      	nop			; (mov r8, r8)
 800ce88:	200005b7 	.word	0x200005b7

0800ce8c <__sinit_lock_release>:
 800ce8c:	b510      	push	{r4, lr}
 800ce8e:	4802      	ldr	r0, [pc, #8]	; (800ce98 <__sinit_lock_release+0xc>)
 800ce90:	f000 f8b6 	bl	800d000 <__retarget_lock_release_recursive>
 800ce94:	bd10      	pop	{r4, pc}
 800ce96:	46c0      	nop			; (mov r8, r8)
 800ce98:	200005b7 	.word	0x200005b7

0800ce9c <__sinit>:
 800ce9c:	b513      	push	{r0, r1, r4, lr}
 800ce9e:	0004      	movs	r4, r0
 800cea0:	f7ff ffec 	bl	800ce7c <__sinit_lock_acquire>
 800cea4:	69a3      	ldr	r3, [r4, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d002      	beq.n	800ceb0 <__sinit+0x14>
 800ceaa:	f7ff ffef 	bl	800ce8c <__sinit_lock_release>
 800ceae:	bd13      	pop	{r0, r1, r4, pc}
 800ceb0:	64a3      	str	r3, [r4, #72]	; 0x48
 800ceb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ceb4:	6523      	str	r3, [r4, #80]	; 0x50
 800ceb6:	4b13      	ldr	r3, [pc, #76]	; (800cf04 <__sinit+0x68>)
 800ceb8:	4a13      	ldr	r2, [pc, #76]	; (800cf08 <__sinit+0x6c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d101      	bne.n	800cec8 <__sinit+0x2c>
 800cec4:	2301      	movs	r3, #1
 800cec6:	61a3      	str	r3, [r4, #24]
 800cec8:	0020      	movs	r0, r4
 800ceca:	f000 f81f 	bl	800cf0c <__sfp>
 800cece:	6060      	str	r0, [r4, #4]
 800ced0:	0020      	movs	r0, r4
 800ced2:	f000 f81b 	bl	800cf0c <__sfp>
 800ced6:	60a0      	str	r0, [r4, #8]
 800ced8:	0020      	movs	r0, r4
 800ceda:	f000 f817 	bl	800cf0c <__sfp>
 800cede:	2200      	movs	r2, #0
 800cee0:	2104      	movs	r1, #4
 800cee2:	60e0      	str	r0, [r4, #12]
 800cee4:	6860      	ldr	r0, [r4, #4]
 800cee6:	f7ff ff77 	bl	800cdd8 <std>
 800ceea:	2201      	movs	r2, #1
 800ceec:	2109      	movs	r1, #9
 800ceee:	68a0      	ldr	r0, [r4, #8]
 800cef0:	f7ff ff72 	bl	800cdd8 <std>
 800cef4:	2202      	movs	r2, #2
 800cef6:	2112      	movs	r1, #18
 800cef8:	68e0      	ldr	r0, [r4, #12]
 800cefa:	f7ff ff6d 	bl	800cdd8 <std>
 800cefe:	2301      	movs	r3, #1
 800cf00:	61a3      	str	r3, [r4, #24]
 800cf02:	e7d2      	b.n	800ceaa <__sinit+0xe>
 800cf04:	0800d814 	.word	0x0800d814
 800cf08:	0800ce21 	.word	0x0800ce21

0800cf0c <__sfp>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	0007      	movs	r7, r0
 800cf10:	f7ff ffa4 	bl	800ce5c <__sfp_lock_acquire>
 800cf14:	4b1f      	ldr	r3, [pc, #124]	; (800cf94 <__sfp+0x88>)
 800cf16:	681e      	ldr	r6, [r3, #0]
 800cf18:	69b3      	ldr	r3, [r6, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d102      	bne.n	800cf24 <__sfp+0x18>
 800cf1e:	0030      	movs	r0, r6
 800cf20:	f7ff ffbc 	bl	800ce9c <__sinit>
 800cf24:	3648      	adds	r6, #72	; 0x48
 800cf26:	68b4      	ldr	r4, [r6, #8]
 800cf28:	6873      	ldr	r3, [r6, #4]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	d504      	bpl.n	800cf38 <__sfp+0x2c>
 800cf2e:	6833      	ldr	r3, [r6, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d022      	beq.n	800cf7a <__sfp+0x6e>
 800cf34:	6836      	ldr	r6, [r6, #0]
 800cf36:	e7f6      	b.n	800cf26 <__sfp+0x1a>
 800cf38:	220c      	movs	r2, #12
 800cf3a:	5ea5      	ldrsh	r5, [r4, r2]
 800cf3c:	2d00      	cmp	r5, #0
 800cf3e:	d11a      	bne.n	800cf76 <__sfp+0x6a>
 800cf40:	0020      	movs	r0, r4
 800cf42:	4b15      	ldr	r3, [pc, #84]	; (800cf98 <__sfp+0x8c>)
 800cf44:	3058      	adds	r0, #88	; 0x58
 800cf46:	60e3      	str	r3, [r4, #12]
 800cf48:	6665      	str	r5, [r4, #100]	; 0x64
 800cf4a:	f000 f857 	bl	800cffc <__retarget_lock_init_recursive>
 800cf4e:	f7ff ff8d 	bl	800ce6c <__sfp_lock_release>
 800cf52:	0020      	movs	r0, r4
 800cf54:	2208      	movs	r2, #8
 800cf56:	0029      	movs	r1, r5
 800cf58:	6025      	str	r5, [r4, #0]
 800cf5a:	60a5      	str	r5, [r4, #8]
 800cf5c:	6065      	str	r5, [r4, #4]
 800cf5e:	6125      	str	r5, [r4, #16]
 800cf60:	6165      	str	r5, [r4, #20]
 800cf62:	61a5      	str	r5, [r4, #24]
 800cf64:	305c      	adds	r0, #92	; 0x5c
 800cf66:	f7fb fa53 	bl	8008410 <memset>
 800cf6a:	6365      	str	r5, [r4, #52]	; 0x34
 800cf6c:	63a5      	str	r5, [r4, #56]	; 0x38
 800cf6e:	64a5      	str	r5, [r4, #72]	; 0x48
 800cf70:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cf72:	0020      	movs	r0, r4
 800cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf76:	3468      	adds	r4, #104	; 0x68
 800cf78:	e7d7      	b.n	800cf2a <__sfp+0x1e>
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	0038      	movs	r0, r7
 800cf7e:	f7ff ff57 	bl	800ce30 <__sfmoreglue>
 800cf82:	1e04      	subs	r4, r0, #0
 800cf84:	6030      	str	r0, [r6, #0]
 800cf86:	d1d5      	bne.n	800cf34 <__sfp+0x28>
 800cf88:	f7ff ff70 	bl	800ce6c <__sfp_lock_release>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	e7ef      	b.n	800cf72 <__sfp+0x66>
 800cf92:	46c0      	nop			; (mov r8, r8)
 800cf94:	0800d814 	.word	0x0800d814
 800cf98:	ffff0001 	.word	0xffff0001

0800cf9c <fiprintf>:
 800cf9c:	b40e      	push	{r1, r2, r3}
 800cf9e:	b503      	push	{r0, r1, lr}
 800cfa0:	0001      	movs	r1, r0
 800cfa2:	ab03      	add	r3, sp, #12
 800cfa4:	4804      	ldr	r0, [pc, #16]	; (800cfb8 <fiprintf+0x1c>)
 800cfa6:	cb04      	ldmia	r3!, {r2}
 800cfa8:	6800      	ldr	r0, [r0, #0]
 800cfaa:	9301      	str	r3, [sp, #4]
 800cfac:	f000 f89a 	bl	800d0e4 <_vfiprintf_r>
 800cfb0:	b002      	add	sp, #8
 800cfb2:	bc08      	pop	{r3}
 800cfb4:	b003      	add	sp, #12
 800cfb6:	4718      	bx	r3
 800cfb8:	2000000c 	.word	0x2000000c

0800cfbc <_fwalk_reent>:
 800cfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfbe:	0004      	movs	r4, r0
 800cfc0:	0006      	movs	r6, r0
 800cfc2:	2700      	movs	r7, #0
 800cfc4:	9101      	str	r1, [sp, #4]
 800cfc6:	3448      	adds	r4, #72	; 0x48
 800cfc8:	6863      	ldr	r3, [r4, #4]
 800cfca:	68a5      	ldr	r5, [r4, #8]
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	9b00      	ldr	r3, [sp, #0]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	d504      	bpl.n	800cfe0 <_fwalk_reent+0x24>
 800cfd6:	6824      	ldr	r4, [r4, #0]
 800cfd8:	2c00      	cmp	r4, #0
 800cfda:	d1f5      	bne.n	800cfc8 <_fwalk_reent+0xc>
 800cfdc:	0038      	movs	r0, r7
 800cfde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfe0:	89ab      	ldrh	r3, [r5, #12]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d908      	bls.n	800cff8 <_fwalk_reent+0x3c>
 800cfe6:	220e      	movs	r2, #14
 800cfe8:	5eab      	ldrsh	r3, [r5, r2]
 800cfea:	3301      	adds	r3, #1
 800cfec:	d004      	beq.n	800cff8 <_fwalk_reent+0x3c>
 800cfee:	0029      	movs	r1, r5
 800cff0:	0030      	movs	r0, r6
 800cff2:	9b01      	ldr	r3, [sp, #4]
 800cff4:	4798      	blx	r3
 800cff6:	4307      	orrs	r7, r0
 800cff8:	3568      	adds	r5, #104	; 0x68
 800cffa:	e7e8      	b.n	800cfce <_fwalk_reent+0x12>

0800cffc <__retarget_lock_init_recursive>:
 800cffc:	4770      	bx	lr

0800cffe <__retarget_lock_acquire_recursive>:
 800cffe:	4770      	bx	lr

0800d000 <__retarget_lock_release_recursive>:
 800d000:	4770      	bx	lr

0800d002 <memmove>:
 800d002:	b510      	push	{r4, lr}
 800d004:	4288      	cmp	r0, r1
 800d006:	d902      	bls.n	800d00e <memmove+0xc>
 800d008:	188b      	adds	r3, r1, r2
 800d00a:	4298      	cmp	r0, r3
 800d00c:	d303      	bcc.n	800d016 <memmove+0x14>
 800d00e:	2300      	movs	r3, #0
 800d010:	e007      	b.n	800d022 <memmove+0x20>
 800d012:	5c8b      	ldrb	r3, [r1, r2]
 800d014:	5483      	strb	r3, [r0, r2]
 800d016:	3a01      	subs	r2, #1
 800d018:	d2fb      	bcs.n	800d012 <memmove+0x10>
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	5ccc      	ldrb	r4, [r1, r3]
 800d01e:	54c4      	strb	r4, [r0, r3]
 800d020:	3301      	adds	r3, #1
 800d022:	429a      	cmp	r2, r3
 800d024:	d1fa      	bne.n	800d01c <memmove+0x1a>
 800d026:	e7f8      	b.n	800d01a <memmove+0x18>

0800d028 <__malloc_lock>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	4802      	ldr	r0, [pc, #8]	; (800d034 <__malloc_lock+0xc>)
 800d02c:	f7ff ffe7 	bl	800cffe <__retarget_lock_acquire_recursive>
 800d030:	bd10      	pop	{r4, pc}
 800d032:	46c0      	nop			; (mov r8, r8)
 800d034:	200005b8 	.word	0x200005b8

0800d038 <__malloc_unlock>:
 800d038:	b510      	push	{r4, lr}
 800d03a:	4802      	ldr	r0, [pc, #8]	; (800d044 <__malloc_unlock+0xc>)
 800d03c:	f7ff ffe0 	bl	800d000 <__retarget_lock_release_recursive>
 800d040:	bd10      	pop	{r4, pc}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	200005b8 	.word	0x200005b8

0800d048 <_realloc_r>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	0007      	movs	r7, r0
 800d04c:	000d      	movs	r5, r1
 800d04e:	0016      	movs	r6, r2
 800d050:	2900      	cmp	r1, #0
 800d052:	d105      	bne.n	800d060 <_realloc_r+0x18>
 800d054:	0011      	movs	r1, r2
 800d056:	f7fe ff89 	bl	800bf6c <_malloc_r>
 800d05a:	0004      	movs	r4, r0
 800d05c:	0020      	movs	r0, r4
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d060:	2a00      	cmp	r2, #0
 800d062:	d103      	bne.n	800d06c <_realloc_r+0x24>
 800d064:	f7fe ff38 	bl	800bed8 <_free_r>
 800d068:	0034      	movs	r4, r6
 800d06a:	e7f7      	b.n	800d05c <_realloc_r+0x14>
 800d06c:	f000 fab6 	bl	800d5dc <_malloc_usable_size_r>
 800d070:	002c      	movs	r4, r5
 800d072:	42b0      	cmp	r0, r6
 800d074:	d2f2      	bcs.n	800d05c <_realloc_r+0x14>
 800d076:	0031      	movs	r1, r6
 800d078:	0038      	movs	r0, r7
 800d07a:	f7fe ff77 	bl	800bf6c <_malloc_r>
 800d07e:	1e04      	subs	r4, r0, #0
 800d080:	d0ec      	beq.n	800d05c <_realloc_r+0x14>
 800d082:	0029      	movs	r1, r5
 800d084:	0032      	movs	r2, r6
 800d086:	f7fe fa46 	bl	800b516 <memcpy>
 800d08a:	0029      	movs	r1, r5
 800d08c:	0038      	movs	r0, r7
 800d08e:	f7fe ff23 	bl	800bed8 <_free_r>
 800d092:	e7e3      	b.n	800d05c <_realloc_r+0x14>

0800d094 <__sfputc_r>:
 800d094:	6893      	ldr	r3, [r2, #8]
 800d096:	b510      	push	{r4, lr}
 800d098:	3b01      	subs	r3, #1
 800d09a:	6093      	str	r3, [r2, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	da04      	bge.n	800d0aa <__sfputc_r+0x16>
 800d0a0:	6994      	ldr	r4, [r2, #24]
 800d0a2:	42a3      	cmp	r3, r4
 800d0a4:	db07      	blt.n	800d0b6 <__sfputc_r+0x22>
 800d0a6:	290a      	cmp	r1, #10
 800d0a8:	d005      	beq.n	800d0b6 <__sfputc_r+0x22>
 800d0aa:	6813      	ldr	r3, [r2, #0]
 800d0ac:	1c58      	adds	r0, r3, #1
 800d0ae:	6010      	str	r0, [r2, #0]
 800d0b0:	7019      	strb	r1, [r3, #0]
 800d0b2:	0008      	movs	r0, r1
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	f000 f94f 	bl	800d358 <__swbuf_r>
 800d0ba:	0001      	movs	r1, r0
 800d0bc:	e7f9      	b.n	800d0b2 <__sfputc_r+0x1e>

0800d0be <__sfputs_r>:
 800d0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c0:	0006      	movs	r6, r0
 800d0c2:	000f      	movs	r7, r1
 800d0c4:	0014      	movs	r4, r2
 800d0c6:	18d5      	adds	r5, r2, r3
 800d0c8:	42ac      	cmp	r4, r5
 800d0ca:	d101      	bne.n	800d0d0 <__sfputs_r+0x12>
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e007      	b.n	800d0e0 <__sfputs_r+0x22>
 800d0d0:	7821      	ldrb	r1, [r4, #0]
 800d0d2:	003a      	movs	r2, r7
 800d0d4:	0030      	movs	r0, r6
 800d0d6:	f7ff ffdd 	bl	800d094 <__sfputc_r>
 800d0da:	3401      	adds	r4, #1
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d1f3      	bne.n	800d0c8 <__sfputs_r+0xa>
 800d0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0e4 <_vfiprintf_r>:
 800d0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e6:	b0a1      	sub	sp, #132	; 0x84
 800d0e8:	0006      	movs	r6, r0
 800d0ea:	000c      	movs	r4, r1
 800d0ec:	001f      	movs	r7, r3
 800d0ee:	9203      	str	r2, [sp, #12]
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d004      	beq.n	800d0fe <_vfiprintf_r+0x1a>
 800d0f4:	6983      	ldr	r3, [r0, #24]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <_vfiprintf_r+0x1a>
 800d0fa:	f7ff fecf 	bl	800ce9c <__sinit>
 800d0fe:	4b8e      	ldr	r3, [pc, #568]	; (800d338 <_vfiprintf_r+0x254>)
 800d100:	429c      	cmp	r4, r3
 800d102:	d11c      	bne.n	800d13e <_vfiprintf_r+0x5a>
 800d104:	6874      	ldr	r4, [r6, #4]
 800d106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d108:	07db      	lsls	r3, r3, #31
 800d10a:	d405      	bmi.n	800d118 <_vfiprintf_r+0x34>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	059b      	lsls	r3, r3, #22
 800d110:	d402      	bmi.n	800d118 <_vfiprintf_r+0x34>
 800d112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d114:	f7ff ff73 	bl	800cffe <__retarget_lock_acquire_recursive>
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	071b      	lsls	r3, r3, #28
 800d11c:	d502      	bpl.n	800d124 <_vfiprintf_r+0x40>
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d11d      	bne.n	800d160 <_vfiprintf_r+0x7c>
 800d124:	0021      	movs	r1, r4
 800d126:	0030      	movs	r0, r6
 800d128:	f000 f96c 	bl	800d404 <__swsetup_r>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d017      	beq.n	800d160 <_vfiprintf_r+0x7c>
 800d130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d132:	07db      	lsls	r3, r3, #31
 800d134:	d50d      	bpl.n	800d152 <_vfiprintf_r+0x6e>
 800d136:	2001      	movs	r0, #1
 800d138:	4240      	negs	r0, r0
 800d13a:	b021      	add	sp, #132	; 0x84
 800d13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d13e:	4b7f      	ldr	r3, [pc, #508]	; (800d33c <_vfiprintf_r+0x258>)
 800d140:	429c      	cmp	r4, r3
 800d142:	d101      	bne.n	800d148 <_vfiprintf_r+0x64>
 800d144:	68b4      	ldr	r4, [r6, #8]
 800d146:	e7de      	b.n	800d106 <_vfiprintf_r+0x22>
 800d148:	4b7d      	ldr	r3, [pc, #500]	; (800d340 <_vfiprintf_r+0x25c>)
 800d14a:	429c      	cmp	r4, r3
 800d14c:	d1db      	bne.n	800d106 <_vfiprintf_r+0x22>
 800d14e:	68f4      	ldr	r4, [r6, #12]
 800d150:	e7d9      	b.n	800d106 <_vfiprintf_r+0x22>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	059b      	lsls	r3, r3, #22
 800d156:	d4ee      	bmi.n	800d136 <_vfiprintf_r+0x52>
 800d158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d15a:	f7ff ff51 	bl	800d000 <__retarget_lock_release_recursive>
 800d15e:	e7ea      	b.n	800d136 <_vfiprintf_r+0x52>
 800d160:	2300      	movs	r3, #0
 800d162:	ad08      	add	r5, sp, #32
 800d164:	616b      	str	r3, [r5, #20]
 800d166:	3320      	adds	r3, #32
 800d168:	766b      	strb	r3, [r5, #25]
 800d16a:	3310      	adds	r3, #16
 800d16c:	76ab      	strb	r3, [r5, #26]
 800d16e:	9707      	str	r7, [sp, #28]
 800d170:	9f03      	ldr	r7, [sp, #12]
 800d172:	783b      	ldrb	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <_vfiprintf_r+0x98>
 800d178:	2b25      	cmp	r3, #37	; 0x25
 800d17a:	d14e      	bne.n	800d21a <_vfiprintf_r+0x136>
 800d17c:	9b03      	ldr	r3, [sp, #12]
 800d17e:	1afb      	subs	r3, r7, r3
 800d180:	9305      	str	r3, [sp, #20]
 800d182:	9b03      	ldr	r3, [sp, #12]
 800d184:	429f      	cmp	r7, r3
 800d186:	d00d      	beq.n	800d1a4 <_vfiprintf_r+0xc0>
 800d188:	9b05      	ldr	r3, [sp, #20]
 800d18a:	0021      	movs	r1, r4
 800d18c:	0030      	movs	r0, r6
 800d18e:	9a03      	ldr	r2, [sp, #12]
 800d190:	f7ff ff95 	bl	800d0be <__sfputs_r>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d100      	bne.n	800d19a <_vfiprintf_r+0xb6>
 800d198:	e0b5      	b.n	800d306 <_vfiprintf_r+0x222>
 800d19a:	696a      	ldr	r2, [r5, #20]
 800d19c:	9b05      	ldr	r3, [sp, #20]
 800d19e:	4694      	mov	ip, r2
 800d1a0:	4463      	add	r3, ip
 800d1a2:	616b      	str	r3, [r5, #20]
 800d1a4:	783b      	ldrb	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d100      	bne.n	800d1ac <_vfiprintf_r+0xc8>
 800d1aa:	e0ac      	b.n	800d306 <_vfiprintf_r+0x222>
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	1c7b      	adds	r3, r7, #1
 800d1b0:	9303      	str	r3, [sp, #12]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	4252      	negs	r2, r2
 800d1b6:	606a      	str	r2, [r5, #4]
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	3254      	adds	r2, #84	; 0x54
 800d1bc:	1852      	adds	r2, r2, r1
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	60eb      	str	r3, [r5, #12]
 800d1c2:	60ab      	str	r3, [r5, #8]
 800d1c4:	7013      	strb	r3, [r2, #0]
 800d1c6:	65ab      	str	r3, [r5, #88]	; 0x58
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	2205      	movs	r2, #5
 800d1cc:	7819      	ldrb	r1, [r3, #0]
 800d1ce:	485d      	ldr	r0, [pc, #372]	; (800d344 <_vfiprintf_r+0x260>)
 800d1d0:	f7fe f996 	bl	800b500 <memchr>
 800d1d4:	9b03      	ldr	r3, [sp, #12]
 800d1d6:	1c5f      	adds	r7, r3, #1
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d120      	bne.n	800d21e <_vfiprintf_r+0x13a>
 800d1dc:	682a      	ldr	r2, [r5, #0]
 800d1de:	06d3      	lsls	r3, r2, #27
 800d1e0:	d504      	bpl.n	800d1ec <_vfiprintf_r+0x108>
 800d1e2:	2353      	movs	r3, #83	; 0x53
 800d1e4:	a904      	add	r1, sp, #16
 800d1e6:	185b      	adds	r3, r3, r1
 800d1e8:	2120      	movs	r1, #32
 800d1ea:	7019      	strb	r1, [r3, #0]
 800d1ec:	0713      	lsls	r3, r2, #28
 800d1ee:	d504      	bpl.n	800d1fa <_vfiprintf_r+0x116>
 800d1f0:	2353      	movs	r3, #83	; 0x53
 800d1f2:	a904      	add	r1, sp, #16
 800d1f4:	185b      	adds	r3, r3, r1
 800d1f6:	212b      	movs	r1, #43	; 0x2b
 800d1f8:	7019      	strb	r1, [r3, #0]
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d200:	d016      	beq.n	800d230 <_vfiprintf_r+0x14c>
 800d202:	2100      	movs	r1, #0
 800d204:	68eb      	ldr	r3, [r5, #12]
 800d206:	9f03      	ldr	r7, [sp, #12]
 800d208:	783a      	ldrb	r2, [r7, #0]
 800d20a:	1c78      	adds	r0, r7, #1
 800d20c:	3a30      	subs	r2, #48	; 0x30
 800d20e:	4684      	mov	ip, r0
 800d210:	2a09      	cmp	r2, #9
 800d212:	d94f      	bls.n	800d2b4 <_vfiprintf_r+0x1d0>
 800d214:	2900      	cmp	r1, #0
 800d216:	d111      	bne.n	800d23c <_vfiprintf_r+0x158>
 800d218:	e017      	b.n	800d24a <_vfiprintf_r+0x166>
 800d21a:	3701      	adds	r7, #1
 800d21c:	e7a9      	b.n	800d172 <_vfiprintf_r+0x8e>
 800d21e:	4b49      	ldr	r3, [pc, #292]	; (800d344 <_vfiprintf_r+0x260>)
 800d220:	682a      	ldr	r2, [r5, #0]
 800d222:	1ac0      	subs	r0, r0, r3
 800d224:	2301      	movs	r3, #1
 800d226:	4083      	lsls	r3, r0
 800d228:	4313      	orrs	r3, r2
 800d22a:	602b      	str	r3, [r5, #0]
 800d22c:	9703      	str	r7, [sp, #12]
 800d22e:	e7cb      	b.n	800d1c8 <_vfiprintf_r+0xe4>
 800d230:	9b07      	ldr	r3, [sp, #28]
 800d232:	1d19      	adds	r1, r3, #4
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	9107      	str	r1, [sp, #28]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	db01      	blt.n	800d240 <_vfiprintf_r+0x15c>
 800d23c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d23e:	e004      	b.n	800d24a <_vfiprintf_r+0x166>
 800d240:	425b      	negs	r3, r3
 800d242:	60eb      	str	r3, [r5, #12]
 800d244:	2302      	movs	r3, #2
 800d246:	4313      	orrs	r3, r2
 800d248:	602b      	str	r3, [r5, #0]
 800d24a:	783b      	ldrb	r3, [r7, #0]
 800d24c:	2b2e      	cmp	r3, #46	; 0x2e
 800d24e:	d10a      	bne.n	800d266 <_vfiprintf_r+0x182>
 800d250:	787b      	ldrb	r3, [r7, #1]
 800d252:	2b2a      	cmp	r3, #42	; 0x2a
 800d254:	d137      	bne.n	800d2c6 <_vfiprintf_r+0x1e2>
 800d256:	9b07      	ldr	r3, [sp, #28]
 800d258:	3702      	adds	r7, #2
 800d25a:	1d1a      	adds	r2, r3, #4
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	9207      	str	r2, [sp, #28]
 800d260:	2b00      	cmp	r3, #0
 800d262:	db2d      	blt.n	800d2c0 <_vfiprintf_r+0x1dc>
 800d264:	9309      	str	r3, [sp, #36]	; 0x24
 800d266:	2203      	movs	r2, #3
 800d268:	7839      	ldrb	r1, [r7, #0]
 800d26a:	4837      	ldr	r0, [pc, #220]	; (800d348 <_vfiprintf_r+0x264>)
 800d26c:	f7fe f948 	bl	800b500 <memchr>
 800d270:	2800      	cmp	r0, #0
 800d272:	d007      	beq.n	800d284 <_vfiprintf_r+0x1a0>
 800d274:	4b34      	ldr	r3, [pc, #208]	; (800d348 <_vfiprintf_r+0x264>)
 800d276:	682a      	ldr	r2, [r5, #0]
 800d278:	1ac0      	subs	r0, r0, r3
 800d27a:	2340      	movs	r3, #64	; 0x40
 800d27c:	4083      	lsls	r3, r0
 800d27e:	4313      	orrs	r3, r2
 800d280:	3701      	adds	r7, #1
 800d282:	602b      	str	r3, [r5, #0]
 800d284:	7839      	ldrb	r1, [r7, #0]
 800d286:	1c7b      	adds	r3, r7, #1
 800d288:	2206      	movs	r2, #6
 800d28a:	4830      	ldr	r0, [pc, #192]	; (800d34c <_vfiprintf_r+0x268>)
 800d28c:	9303      	str	r3, [sp, #12]
 800d28e:	7629      	strb	r1, [r5, #24]
 800d290:	f7fe f936 	bl	800b500 <memchr>
 800d294:	2800      	cmp	r0, #0
 800d296:	d045      	beq.n	800d324 <_vfiprintf_r+0x240>
 800d298:	4b2d      	ldr	r3, [pc, #180]	; (800d350 <_vfiprintf_r+0x26c>)
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d127      	bne.n	800d2ee <_vfiprintf_r+0x20a>
 800d29e:	2207      	movs	r2, #7
 800d2a0:	9b07      	ldr	r3, [sp, #28]
 800d2a2:	3307      	adds	r3, #7
 800d2a4:	4393      	bics	r3, r2
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	9307      	str	r3, [sp, #28]
 800d2aa:	696b      	ldr	r3, [r5, #20]
 800d2ac:	9a04      	ldr	r2, [sp, #16]
 800d2ae:	189b      	adds	r3, r3, r2
 800d2b0:	616b      	str	r3, [r5, #20]
 800d2b2:	e75d      	b.n	800d170 <_vfiprintf_r+0x8c>
 800d2b4:	210a      	movs	r1, #10
 800d2b6:	434b      	muls	r3, r1
 800d2b8:	4667      	mov	r7, ip
 800d2ba:	189b      	adds	r3, r3, r2
 800d2bc:	3909      	subs	r1, #9
 800d2be:	e7a3      	b.n	800d208 <_vfiprintf_r+0x124>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	425b      	negs	r3, r3
 800d2c4:	e7ce      	b.n	800d264 <_vfiprintf_r+0x180>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	001a      	movs	r2, r3
 800d2ca:	3701      	adds	r7, #1
 800d2cc:	606b      	str	r3, [r5, #4]
 800d2ce:	7839      	ldrb	r1, [r7, #0]
 800d2d0:	1c78      	adds	r0, r7, #1
 800d2d2:	3930      	subs	r1, #48	; 0x30
 800d2d4:	4684      	mov	ip, r0
 800d2d6:	2909      	cmp	r1, #9
 800d2d8:	d903      	bls.n	800d2e2 <_vfiprintf_r+0x1fe>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0c3      	beq.n	800d266 <_vfiprintf_r+0x182>
 800d2de:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e0:	e7c1      	b.n	800d266 <_vfiprintf_r+0x182>
 800d2e2:	230a      	movs	r3, #10
 800d2e4:	435a      	muls	r2, r3
 800d2e6:	4667      	mov	r7, ip
 800d2e8:	1852      	adds	r2, r2, r1
 800d2ea:	3b09      	subs	r3, #9
 800d2ec:	e7ef      	b.n	800d2ce <_vfiprintf_r+0x1ea>
 800d2ee:	ab07      	add	r3, sp, #28
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	0022      	movs	r2, r4
 800d2f4:	0029      	movs	r1, r5
 800d2f6:	0030      	movs	r0, r6
 800d2f8:	4b16      	ldr	r3, [pc, #88]	; (800d354 <_vfiprintf_r+0x270>)
 800d2fa:	f7fb f93b 	bl	8008574 <_printf_float>
 800d2fe:	9004      	str	r0, [sp, #16]
 800d300:	9b04      	ldr	r3, [sp, #16]
 800d302:	3301      	adds	r3, #1
 800d304:	d1d1      	bne.n	800d2aa <_vfiprintf_r+0x1c6>
 800d306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d308:	07db      	lsls	r3, r3, #31
 800d30a:	d405      	bmi.n	800d318 <_vfiprintf_r+0x234>
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	059b      	lsls	r3, r3, #22
 800d310:	d402      	bmi.n	800d318 <_vfiprintf_r+0x234>
 800d312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d314:	f7ff fe74 	bl	800d000 <__retarget_lock_release_recursive>
 800d318:	89a3      	ldrh	r3, [r4, #12]
 800d31a:	065b      	lsls	r3, r3, #25
 800d31c:	d500      	bpl.n	800d320 <_vfiprintf_r+0x23c>
 800d31e:	e70a      	b.n	800d136 <_vfiprintf_r+0x52>
 800d320:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d322:	e70a      	b.n	800d13a <_vfiprintf_r+0x56>
 800d324:	ab07      	add	r3, sp, #28
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	0022      	movs	r2, r4
 800d32a:	0029      	movs	r1, r5
 800d32c:	0030      	movs	r0, r6
 800d32e:	4b09      	ldr	r3, [pc, #36]	; (800d354 <_vfiprintf_r+0x270>)
 800d330:	f7fb fbde 	bl	8008af0 <_printf_i>
 800d334:	e7e3      	b.n	800d2fe <_vfiprintf_r+0x21a>
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	0800dc9c 	.word	0x0800dc9c
 800d33c:	0800dcbc 	.word	0x0800dcbc
 800d340:	0800dc7c 	.word	0x0800dc7c
 800d344:	0800dc14 	.word	0x0800dc14
 800d348:	0800dc1a 	.word	0x0800dc1a
 800d34c:	0800dc1e 	.word	0x0800dc1e
 800d350:	08008575 	.word	0x08008575
 800d354:	0800d0bf 	.word	0x0800d0bf

0800d358 <__swbuf_r>:
 800d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35a:	0005      	movs	r5, r0
 800d35c:	000e      	movs	r6, r1
 800d35e:	0014      	movs	r4, r2
 800d360:	2800      	cmp	r0, #0
 800d362:	d004      	beq.n	800d36e <__swbuf_r+0x16>
 800d364:	6983      	ldr	r3, [r0, #24]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <__swbuf_r+0x16>
 800d36a:	f7ff fd97 	bl	800ce9c <__sinit>
 800d36e:	4b22      	ldr	r3, [pc, #136]	; (800d3f8 <__swbuf_r+0xa0>)
 800d370:	429c      	cmp	r4, r3
 800d372:	d12e      	bne.n	800d3d2 <__swbuf_r+0x7a>
 800d374:	686c      	ldr	r4, [r5, #4]
 800d376:	69a3      	ldr	r3, [r4, #24]
 800d378:	60a3      	str	r3, [r4, #8]
 800d37a:	89a3      	ldrh	r3, [r4, #12]
 800d37c:	071b      	lsls	r3, r3, #28
 800d37e:	d532      	bpl.n	800d3e6 <__swbuf_r+0x8e>
 800d380:	6923      	ldr	r3, [r4, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d02f      	beq.n	800d3e6 <__swbuf_r+0x8e>
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	6922      	ldr	r2, [r4, #16]
 800d38a:	b2f7      	uxtb	r7, r6
 800d38c:	1a98      	subs	r0, r3, r2
 800d38e:	6963      	ldr	r3, [r4, #20]
 800d390:	b2f6      	uxtb	r6, r6
 800d392:	4283      	cmp	r3, r0
 800d394:	dc05      	bgt.n	800d3a2 <__swbuf_r+0x4a>
 800d396:	0021      	movs	r1, r4
 800d398:	0028      	movs	r0, r5
 800d39a:	f7ff fcdd 	bl	800cd58 <_fflush_r>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d127      	bne.n	800d3f2 <__swbuf_r+0x9a>
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	60a3      	str	r3, [r4, #8]
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	1c5a      	adds	r2, r3, #1
 800d3ae:	6022      	str	r2, [r4, #0]
 800d3b0:	701f      	strb	r7, [r3, #0]
 800d3b2:	6963      	ldr	r3, [r4, #20]
 800d3b4:	4283      	cmp	r3, r0
 800d3b6:	d004      	beq.n	800d3c2 <__swbuf_r+0x6a>
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	07db      	lsls	r3, r3, #31
 800d3bc:	d507      	bpl.n	800d3ce <__swbuf_r+0x76>
 800d3be:	2e0a      	cmp	r6, #10
 800d3c0:	d105      	bne.n	800d3ce <__swbuf_r+0x76>
 800d3c2:	0021      	movs	r1, r4
 800d3c4:	0028      	movs	r0, r5
 800d3c6:	f7ff fcc7 	bl	800cd58 <_fflush_r>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d111      	bne.n	800d3f2 <__swbuf_r+0x9a>
 800d3ce:	0030      	movs	r0, r6
 800d3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d2:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <__swbuf_r+0xa4>)
 800d3d4:	429c      	cmp	r4, r3
 800d3d6:	d101      	bne.n	800d3dc <__swbuf_r+0x84>
 800d3d8:	68ac      	ldr	r4, [r5, #8]
 800d3da:	e7cc      	b.n	800d376 <__swbuf_r+0x1e>
 800d3dc:	4b08      	ldr	r3, [pc, #32]	; (800d400 <__swbuf_r+0xa8>)
 800d3de:	429c      	cmp	r4, r3
 800d3e0:	d1c9      	bne.n	800d376 <__swbuf_r+0x1e>
 800d3e2:	68ec      	ldr	r4, [r5, #12]
 800d3e4:	e7c7      	b.n	800d376 <__swbuf_r+0x1e>
 800d3e6:	0021      	movs	r1, r4
 800d3e8:	0028      	movs	r0, r5
 800d3ea:	f000 f80b 	bl	800d404 <__swsetup_r>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d0c9      	beq.n	800d386 <__swbuf_r+0x2e>
 800d3f2:	2601      	movs	r6, #1
 800d3f4:	4276      	negs	r6, r6
 800d3f6:	e7ea      	b.n	800d3ce <__swbuf_r+0x76>
 800d3f8:	0800dc9c 	.word	0x0800dc9c
 800d3fc:	0800dcbc 	.word	0x0800dcbc
 800d400:	0800dc7c 	.word	0x0800dc7c

0800d404 <__swsetup_r>:
 800d404:	4b37      	ldr	r3, [pc, #220]	; (800d4e4 <__swsetup_r+0xe0>)
 800d406:	b570      	push	{r4, r5, r6, lr}
 800d408:	681d      	ldr	r5, [r3, #0]
 800d40a:	0006      	movs	r6, r0
 800d40c:	000c      	movs	r4, r1
 800d40e:	2d00      	cmp	r5, #0
 800d410:	d005      	beq.n	800d41e <__swsetup_r+0x1a>
 800d412:	69ab      	ldr	r3, [r5, #24]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d102      	bne.n	800d41e <__swsetup_r+0x1a>
 800d418:	0028      	movs	r0, r5
 800d41a:	f7ff fd3f 	bl	800ce9c <__sinit>
 800d41e:	4b32      	ldr	r3, [pc, #200]	; (800d4e8 <__swsetup_r+0xe4>)
 800d420:	429c      	cmp	r4, r3
 800d422:	d10f      	bne.n	800d444 <__swsetup_r+0x40>
 800d424:	686c      	ldr	r4, [r5, #4]
 800d426:	230c      	movs	r3, #12
 800d428:	5ee2      	ldrsh	r2, [r4, r3]
 800d42a:	b293      	uxth	r3, r2
 800d42c:	0711      	lsls	r1, r2, #28
 800d42e:	d42d      	bmi.n	800d48c <__swsetup_r+0x88>
 800d430:	06d9      	lsls	r1, r3, #27
 800d432:	d411      	bmi.n	800d458 <__swsetup_r+0x54>
 800d434:	2309      	movs	r3, #9
 800d436:	2001      	movs	r0, #1
 800d438:	6033      	str	r3, [r6, #0]
 800d43a:	3337      	adds	r3, #55	; 0x37
 800d43c:	4313      	orrs	r3, r2
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	4240      	negs	r0, r0
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	4b29      	ldr	r3, [pc, #164]	; (800d4ec <__swsetup_r+0xe8>)
 800d446:	429c      	cmp	r4, r3
 800d448:	d101      	bne.n	800d44e <__swsetup_r+0x4a>
 800d44a:	68ac      	ldr	r4, [r5, #8]
 800d44c:	e7eb      	b.n	800d426 <__swsetup_r+0x22>
 800d44e:	4b28      	ldr	r3, [pc, #160]	; (800d4f0 <__swsetup_r+0xec>)
 800d450:	429c      	cmp	r4, r3
 800d452:	d1e8      	bne.n	800d426 <__swsetup_r+0x22>
 800d454:	68ec      	ldr	r4, [r5, #12]
 800d456:	e7e6      	b.n	800d426 <__swsetup_r+0x22>
 800d458:	075b      	lsls	r3, r3, #29
 800d45a:	d513      	bpl.n	800d484 <__swsetup_r+0x80>
 800d45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d45e:	2900      	cmp	r1, #0
 800d460:	d008      	beq.n	800d474 <__swsetup_r+0x70>
 800d462:	0023      	movs	r3, r4
 800d464:	3344      	adds	r3, #68	; 0x44
 800d466:	4299      	cmp	r1, r3
 800d468:	d002      	beq.n	800d470 <__swsetup_r+0x6c>
 800d46a:	0030      	movs	r0, r6
 800d46c:	f7fe fd34 	bl	800bed8 <_free_r>
 800d470:	2300      	movs	r3, #0
 800d472:	6363      	str	r3, [r4, #52]	; 0x34
 800d474:	2224      	movs	r2, #36	; 0x24
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	4393      	bics	r3, r2
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	2300      	movs	r3, #0
 800d47e:	6063      	str	r3, [r4, #4]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	2308      	movs	r3, #8
 800d486:	89a2      	ldrh	r2, [r4, #12]
 800d488:	4313      	orrs	r3, r2
 800d48a:	81a3      	strh	r3, [r4, #12]
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10b      	bne.n	800d4aa <__swsetup_r+0xa6>
 800d492:	21a0      	movs	r1, #160	; 0xa0
 800d494:	2280      	movs	r2, #128	; 0x80
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	0089      	lsls	r1, r1, #2
 800d49a:	0092      	lsls	r2, r2, #2
 800d49c:	400b      	ands	r3, r1
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d003      	beq.n	800d4aa <__swsetup_r+0xa6>
 800d4a2:	0021      	movs	r1, r4
 800d4a4:	0030      	movs	r0, r6
 800d4a6:	f000 f855 	bl	800d554 <__smakebuf_r>
 800d4aa:	220c      	movs	r2, #12
 800d4ac:	5ea3      	ldrsh	r3, [r4, r2]
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	001a      	movs	r2, r3
 800d4b2:	b299      	uxth	r1, r3
 800d4b4:	4002      	ands	r2, r0
 800d4b6:	4203      	tst	r3, r0
 800d4b8:	d00f      	beq.n	800d4da <__swsetup_r+0xd6>
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	60a2      	str	r2, [r4, #8]
 800d4be:	6962      	ldr	r2, [r4, #20]
 800d4c0:	4252      	negs	r2, r2
 800d4c2:	61a2      	str	r2, [r4, #24]
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	6922      	ldr	r2, [r4, #16]
 800d4c8:	4282      	cmp	r2, r0
 800d4ca:	d1ba      	bne.n	800d442 <__swsetup_r+0x3e>
 800d4cc:	060a      	lsls	r2, r1, #24
 800d4ce:	d5b8      	bpl.n	800d442 <__swsetup_r+0x3e>
 800d4d0:	2240      	movs	r2, #64	; 0x40
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	3801      	subs	r0, #1
 800d4d8:	e7b3      	b.n	800d442 <__swsetup_r+0x3e>
 800d4da:	0788      	lsls	r0, r1, #30
 800d4dc:	d400      	bmi.n	800d4e0 <__swsetup_r+0xdc>
 800d4de:	6962      	ldr	r2, [r4, #20]
 800d4e0:	60a2      	str	r2, [r4, #8]
 800d4e2:	e7ef      	b.n	800d4c4 <__swsetup_r+0xc0>
 800d4e4:	2000000c 	.word	0x2000000c
 800d4e8:	0800dc9c 	.word	0x0800dc9c
 800d4ec:	0800dcbc 	.word	0x0800dcbc
 800d4f0:	0800dc7c 	.word	0x0800dc7c

0800d4f4 <abort>:
 800d4f4:	2006      	movs	r0, #6
 800d4f6:	b510      	push	{r4, lr}
 800d4f8:	f000 f8a2 	bl	800d640 <raise>
 800d4fc:	2001      	movs	r0, #1
 800d4fe:	f7f6 fd2f 	bl	8003f60 <_exit>
	...

0800d504 <__swhatbuf_r>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	000e      	movs	r6, r1
 800d508:	001d      	movs	r5, r3
 800d50a:	230e      	movs	r3, #14
 800d50c:	5ec9      	ldrsh	r1, [r1, r3]
 800d50e:	0014      	movs	r4, r2
 800d510:	b096      	sub	sp, #88	; 0x58
 800d512:	2900      	cmp	r1, #0
 800d514:	da07      	bge.n	800d526 <__swhatbuf_r+0x22>
 800d516:	2300      	movs	r3, #0
 800d518:	602b      	str	r3, [r5, #0]
 800d51a:	89b3      	ldrh	r3, [r6, #12]
 800d51c:	061b      	lsls	r3, r3, #24
 800d51e:	d411      	bmi.n	800d544 <__swhatbuf_r+0x40>
 800d520:	2380      	movs	r3, #128	; 0x80
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	e00f      	b.n	800d546 <__swhatbuf_r+0x42>
 800d526:	466a      	mov	r2, sp
 800d528:	f000 f8aa 	bl	800d680 <_fstat_r>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	dbf2      	blt.n	800d516 <__swhatbuf_r+0x12>
 800d530:	23f0      	movs	r3, #240	; 0xf0
 800d532:	9901      	ldr	r1, [sp, #4]
 800d534:	021b      	lsls	r3, r3, #8
 800d536:	4019      	ands	r1, r3
 800d538:	4b05      	ldr	r3, [pc, #20]	; (800d550 <__swhatbuf_r+0x4c>)
 800d53a:	18c9      	adds	r1, r1, r3
 800d53c:	424b      	negs	r3, r1
 800d53e:	4159      	adcs	r1, r3
 800d540:	6029      	str	r1, [r5, #0]
 800d542:	e7ed      	b.n	800d520 <__swhatbuf_r+0x1c>
 800d544:	2340      	movs	r3, #64	; 0x40
 800d546:	2000      	movs	r0, #0
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	b016      	add	sp, #88	; 0x58
 800d54c:	bd70      	pop	{r4, r5, r6, pc}
 800d54e:	46c0      	nop			; (mov r8, r8)
 800d550:	ffffe000 	.word	0xffffe000

0800d554 <__smakebuf_r>:
 800d554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d556:	2602      	movs	r6, #2
 800d558:	898b      	ldrh	r3, [r1, #12]
 800d55a:	0005      	movs	r5, r0
 800d55c:	000c      	movs	r4, r1
 800d55e:	4233      	tst	r3, r6
 800d560:	d006      	beq.n	800d570 <__smakebuf_r+0x1c>
 800d562:	0023      	movs	r3, r4
 800d564:	3347      	adds	r3, #71	; 0x47
 800d566:	6023      	str	r3, [r4, #0]
 800d568:	6123      	str	r3, [r4, #16]
 800d56a:	2301      	movs	r3, #1
 800d56c:	6163      	str	r3, [r4, #20]
 800d56e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d570:	466a      	mov	r2, sp
 800d572:	ab01      	add	r3, sp, #4
 800d574:	f7ff ffc6 	bl	800d504 <__swhatbuf_r>
 800d578:	9900      	ldr	r1, [sp, #0]
 800d57a:	0007      	movs	r7, r0
 800d57c:	0028      	movs	r0, r5
 800d57e:	f7fe fcf5 	bl	800bf6c <_malloc_r>
 800d582:	2800      	cmp	r0, #0
 800d584:	d108      	bne.n	800d598 <__smakebuf_r+0x44>
 800d586:	220c      	movs	r2, #12
 800d588:	5ea3      	ldrsh	r3, [r4, r2]
 800d58a:	059a      	lsls	r2, r3, #22
 800d58c:	d4ef      	bmi.n	800d56e <__smakebuf_r+0x1a>
 800d58e:	2203      	movs	r2, #3
 800d590:	4393      	bics	r3, r2
 800d592:	431e      	orrs	r6, r3
 800d594:	81a6      	strh	r6, [r4, #12]
 800d596:	e7e4      	b.n	800d562 <__smakebuf_r+0xe>
 800d598:	4b0f      	ldr	r3, [pc, #60]	; (800d5d8 <__smakebuf_r+0x84>)
 800d59a:	62ab      	str	r3, [r5, #40]	; 0x28
 800d59c:	2380      	movs	r3, #128	; 0x80
 800d59e:	89a2      	ldrh	r2, [r4, #12]
 800d5a0:	6020      	str	r0, [r4, #0]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	9b00      	ldr	r3, [sp, #0]
 800d5a8:	6120      	str	r0, [r4, #16]
 800d5aa:	6163      	str	r3, [r4, #20]
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00d      	beq.n	800d5ce <__smakebuf_r+0x7a>
 800d5b2:	0028      	movs	r0, r5
 800d5b4:	230e      	movs	r3, #14
 800d5b6:	5ee1      	ldrsh	r1, [r4, r3]
 800d5b8:	f000 f874 	bl	800d6a4 <_isatty_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d006      	beq.n	800d5ce <__smakebuf_r+0x7a>
 800d5c0:	2203      	movs	r2, #3
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	4393      	bics	r3, r2
 800d5c6:	001a      	movs	r2, r3
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	81a3      	strh	r3, [r4, #12]
 800d5ce:	89a0      	ldrh	r0, [r4, #12]
 800d5d0:	4307      	orrs	r7, r0
 800d5d2:	81a7      	strh	r7, [r4, #12]
 800d5d4:	e7cb      	b.n	800d56e <__smakebuf_r+0x1a>
 800d5d6:	46c0      	nop			; (mov r8, r8)
 800d5d8:	0800ce21 	.word	0x0800ce21

0800d5dc <_malloc_usable_size_r>:
 800d5dc:	1f0b      	subs	r3, r1, #4
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	1f18      	subs	r0, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	da01      	bge.n	800d5ea <_malloc_usable_size_r+0xe>
 800d5e6:	580b      	ldr	r3, [r1, r0]
 800d5e8:	18c0      	adds	r0, r0, r3
 800d5ea:	4770      	bx	lr

0800d5ec <_raise_r>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	0004      	movs	r4, r0
 800d5f0:	000d      	movs	r5, r1
 800d5f2:	291f      	cmp	r1, #31
 800d5f4:	d904      	bls.n	800d600 <_raise_r+0x14>
 800d5f6:	2316      	movs	r3, #22
 800d5f8:	6003      	str	r3, [r0, #0]
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	4240      	negs	r0, r0
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
 800d600:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d602:	2b00      	cmp	r3, #0
 800d604:	d004      	beq.n	800d610 <_raise_r+0x24>
 800d606:	008a      	lsls	r2, r1, #2
 800d608:	189b      	adds	r3, r3, r2
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	2a00      	cmp	r2, #0
 800d60e:	d108      	bne.n	800d622 <_raise_r+0x36>
 800d610:	0020      	movs	r0, r4
 800d612:	f000 f831 	bl	800d678 <_getpid_r>
 800d616:	002a      	movs	r2, r5
 800d618:	0001      	movs	r1, r0
 800d61a:	0020      	movs	r0, r4
 800d61c:	f000 f81a 	bl	800d654 <_kill_r>
 800d620:	e7ed      	b.n	800d5fe <_raise_r+0x12>
 800d622:	2000      	movs	r0, #0
 800d624:	2a01      	cmp	r2, #1
 800d626:	d0ea      	beq.n	800d5fe <_raise_r+0x12>
 800d628:	1c51      	adds	r1, r2, #1
 800d62a:	d103      	bne.n	800d634 <_raise_r+0x48>
 800d62c:	2316      	movs	r3, #22
 800d62e:	3001      	adds	r0, #1
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	e7e4      	b.n	800d5fe <_raise_r+0x12>
 800d634:	2400      	movs	r4, #0
 800d636:	0028      	movs	r0, r5
 800d638:	601c      	str	r4, [r3, #0]
 800d63a:	4790      	blx	r2
 800d63c:	0020      	movs	r0, r4
 800d63e:	e7de      	b.n	800d5fe <_raise_r+0x12>

0800d640 <raise>:
 800d640:	b510      	push	{r4, lr}
 800d642:	4b03      	ldr	r3, [pc, #12]	; (800d650 <raise+0x10>)
 800d644:	0001      	movs	r1, r0
 800d646:	6818      	ldr	r0, [r3, #0]
 800d648:	f7ff ffd0 	bl	800d5ec <_raise_r>
 800d64c:	bd10      	pop	{r4, pc}
 800d64e:	46c0      	nop			; (mov r8, r8)
 800d650:	2000000c 	.word	0x2000000c

0800d654 <_kill_r>:
 800d654:	2300      	movs	r3, #0
 800d656:	b570      	push	{r4, r5, r6, lr}
 800d658:	4d06      	ldr	r5, [pc, #24]	; (800d674 <_kill_r+0x20>)
 800d65a:	0004      	movs	r4, r0
 800d65c:	0008      	movs	r0, r1
 800d65e:	0011      	movs	r1, r2
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	f7f6 fc6d 	bl	8003f40 <_kill>
 800d666:	1c43      	adds	r3, r0, #1
 800d668:	d103      	bne.n	800d672 <_kill_r+0x1e>
 800d66a:	682b      	ldr	r3, [r5, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d000      	beq.n	800d672 <_kill_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd70      	pop	{r4, r5, r6, pc}
 800d674:	200005b0 	.word	0x200005b0

0800d678 <_getpid_r>:
 800d678:	b510      	push	{r4, lr}
 800d67a:	f7f6 fc5b 	bl	8003f34 <_getpid>
 800d67e:	bd10      	pop	{r4, pc}

0800d680 <_fstat_r>:
 800d680:	2300      	movs	r3, #0
 800d682:	b570      	push	{r4, r5, r6, lr}
 800d684:	4d06      	ldr	r5, [pc, #24]	; (800d6a0 <_fstat_r+0x20>)
 800d686:	0004      	movs	r4, r0
 800d688:	0008      	movs	r0, r1
 800d68a:	0011      	movs	r1, r2
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f7f6 fcb6 	bl	8003ffe <_fstat>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d103      	bne.n	800d69e <_fstat_r+0x1e>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d000      	beq.n	800d69e <_fstat_r+0x1e>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	200005b0 	.word	0x200005b0

0800d6a4 <_isatty_r>:
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	b570      	push	{r4, r5, r6, lr}
 800d6a8:	4d06      	ldr	r5, [pc, #24]	; (800d6c4 <_isatty_r+0x20>)
 800d6aa:	0004      	movs	r4, r0
 800d6ac:	0008      	movs	r0, r1
 800d6ae:	602b      	str	r3, [r5, #0]
 800d6b0:	f7f6 fcb3 	bl	800401a <_isatty>
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d103      	bne.n	800d6c0 <_isatty_r+0x1c>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d000      	beq.n	800d6c0 <_isatty_r+0x1c>
 800d6be:	6023      	str	r3, [r4, #0]
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	46c0      	nop			; (mov r8, r8)
 800d6c4:	200005b0 	.word	0x200005b0

0800d6c8 <_init>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	46c0      	nop			; (mov r8, r8)
 800d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ce:	bc08      	pop	{r3}
 800d6d0:	469e      	mov	lr, r3
 800d6d2:	4770      	bx	lr

0800d6d4 <_fini>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	46c0      	nop			; (mov r8, r8)
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr
