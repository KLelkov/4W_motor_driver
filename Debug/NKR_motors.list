
NKR_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e308  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800e3c8  0800e3c8  0001e3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea7c  0800ea7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea7c  0800ea7c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea7c  0800ea7c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea7c  0800ea7c  0001ea7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ea84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001e0  0800ec64  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800ec64  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb7e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002fd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00031cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118f3  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec6a  00000000  00000000  00044fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ac19  00000000  00000000  00053c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  000be87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e3b0 	.word	0x0800e3b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e3b0 	.word	0x0800e3b0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fa4b 	bl	80018ec <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f995 	bl	8001790 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa3d 	bl	80018ec <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa33 	bl	80018ec <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9b7 	bl	8001808 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9ad 	bl	8001808 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f002 f897 	bl	8002604 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fce0 	bl	8001ea4 <__aeabi_dsub>
 80004e4:	f002 f88e 	bl	8002604 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f001 fa45 	bl	80019cc <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f002 f8c2 	bl	80026d0 <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f001 fa3c 	bl	80019cc <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fca2 	bl	8001ea4 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f002 f87b 	bl	8002670 <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f001 fa25 	bl	80019cc <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f002 f8a2 	bl	80026d0 <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 faac 	bl	8000aec <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_fadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	4646      	mov	r6, r8
 80005a0:	46d6      	mov	lr, sl
 80005a2:	464f      	mov	r7, r9
 80005a4:	024d      	lsls	r5, r1, #9
 80005a6:	0242      	lsls	r2, r0, #9
 80005a8:	b5c0      	push	{r6, r7, lr}
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	0a6e      	lsrs	r6, r5, #9
 80005ae:	0047      	lsls	r7, r0, #1
 80005b0:	46b0      	mov	r8, r6
 80005b2:	0e3f      	lsrs	r7, r7, #24
 80005b4:	004e      	lsls	r6, r1, #1
 80005b6:	0fc4      	lsrs	r4, r0, #31
 80005b8:	00d0      	lsls	r0, r2, #3
 80005ba:	4694      	mov	ip, r2
 80005bc:	003b      	movs	r3, r7
 80005be:	4682      	mov	sl, r0
 80005c0:	0e36      	lsrs	r6, r6, #24
 80005c2:	0fc9      	lsrs	r1, r1, #31
 80005c4:	09ad      	lsrs	r5, r5, #6
 80005c6:	428c      	cmp	r4, r1
 80005c8:	d06d      	beq.n	80006a6 <__aeabi_fadd+0x10a>
 80005ca:	1bb8      	subs	r0, r7, r6
 80005cc:	4681      	mov	r9, r0
 80005ce:	2800      	cmp	r0, #0
 80005d0:	dd4d      	ble.n	800066e <__aeabi_fadd+0xd2>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x3c>
 80005d6:	e088      	b.n	80006ea <__aeabi_fadd+0x14e>
 80005d8:	2fff      	cmp	r7, #255	; 0xff
 80005da:	d05a      	beq.n	8000692 <__aeabi_fadd+0xf6>
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	04db      	lsls	r3, r3, #19
 80005e0:	431d      	orrs	r5, r3
 80005e2:	464b      	mov	r3, r9
 80005e4:	2201      	movs	r2, #1
 80005e6:	2b1b      	cmp	r3, #27
 80005e8:	dc0a      	bgt.n	8000600 <__aeabi_fadd+0x64>
 80005ea:	002b      	movs	r3, r5
 80005ec:	464a      	mov	r2, r9
 80005ee:	4649      	mov	r1, r9
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	2220      	movs	r2, #32
 80005f4:	1a52      	subs	r2, r2, r1
 80005f6:	4095      	lsls	r5, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	1e55      	subs	r5, r2, #1
 80005fc:	41aa      	sbcs	r2, r5
 80005fe:	431a      	orrs	r2, r3
 8000600:	4653      	mov	r3, sl
 8000602:	1a9a      	subs	r2, r3, r2
 8000604:	0153      	lsls	r3, r2, #5
 8000606:	d400      	bmi.n	800060a <__aeabi_fadd+0x6e>
 8000608:	e0b9      	b.n	800077e <__aeabi_fadd+0x1e2>
 800060a:	0192      	lsls	r2, r2, #6
 800060c:	0996      	lsrs	r6, r2, #6
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f954 	bl	80028bc <__clzsi2>
 8000614:	3805      	subs	r0, #5
 8000616:	4086      	lsls	r6, r0
 8000618:	4287      	cmp	r7, r0
 800061a:	dd00      	ble.n	800061e <__aeabi_fadd+0x82>
 800061c:	e0d4      	b.n	80007c8 <__aeabi_fadd+0x22c>
 800061e:	0033      	movs	r3, r6
 8000620:	1bc7      	subs	r7, r0, r7
 8000622:	2020      	movs	r0, #32
 8000624:	3701      	adds	r7, #1
 8000626:	40fb      	lsrs	r3, r7
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	40be      	lsls	r6, r7
 800062c:	0032      	movs	r2, r6
 800062e:	1e56      	subs	r6, r2, #1
 8000630:	41b2      	sbcs	r2, r6
 8000632:	2700      	movs	r7, #0
 8000634:	431a      	orrs	r2, r3
 8000636:	0753      	lsls	r3, r2, #29
 8000638:	d004      	beq.n	8000644 <__aeabi_fadd+0xa8>
 800063a:	230f      	movs	r3, #15
 800063c:	4013      	ands	r3, r2
 800063e:	2b04      	cmp	r3, #4
 8000640:	d000      	beq.n	8000644 <__aeabi_fadd+0xa8>
 8000642:	3204      	adds	r2, #4
 8000644:	0153      	lsls	r3, r2, #5
 8000646:	d400      	bmi.n	800064a <__aeabi_fadd+0xae>
 8000648:	e09c      	b.n	8000784 <__aeabi_fadd+0x1e8>
 800064a:	1c7b      	adds	r3, r7, #1
 800064c:	2ffe      	cmp	r7, #254	; 0xfe
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0xb6>
 8000650:	e09a      	b.n	8000788 <__aeabi_fadd+0x1ec>
 8000652:	0192      	lsls	r2, r2, #6
 8000654:	0a52      	lsrs	r2, r2, #9
 8000656:	4694      	mov	ip, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	05d8      	lsls	r0, r3, #23
 800065c:	4663      	mov	r3, ip
 800065e:	07e4      	lsls	r4, r4, #31
 8000660:	4318      	orrs	r0, r3
 8000662:	4320      	orrs	r0, r4
 8000664:	bce0      	pop	{r5, r6, r7}
 8000666:	46ba      	mov	sl, r7
 8000668:	46b1      	mov	r9, r6
 800066a:	46a8      	mov	r8, r5
 800066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066e:	2800      	cmp	r0, #0
 8000670:	d049      	beq.n	8000706 <__aeabi_fadd+0x16a>
 8000672:	1bf3      	subs	r3, r6, r7
 8000674:	2f00      	cmp	r7, #0
 8000676:	d000      	beq.n	800067a <__aeabi_fadd+0xde>
 8000678:	e0b6      	b.n	80007e8 <__aeabi_fadd+0x24c>
 800067a:	4652      	mov	r2, sl
 800067c:	2a00      	cmp	r2, #0
 800067e:	d060      	beq.n	8000742 <__aeabi_fadd+0x1a6>
 8000680:	3b01      	subs	r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0xec>
 8000686:	e0fc      	b.n	8000882 <__aeabi_fadd+0x2e6>
 8000688:	2eff      	cmp	r6, #255	; 0xff
 800068a:	d000      	beq.n	800068e <__aeabi_fadd+0xf2>
 800068c:	e0b4      	b.n	80007f8 <__aeabi_fadd+0x25c>
 800068e:	000c      	movs	r4, r1
 8000690:	4642      	mov	r2, r8
 8000692:	2a00      	cmp	r2, #0
 8000694:	d078      	beq.n	8000788 <__aeabi_fadd+0x1ec>
 8000696:	2080      	movs	r0, #128	; 0x80
 8000698:	03c0      	lsls	r0, r0, #15
 800069a:	4310      	orrs	r0, r2
 800069c:	0242      	lsls	r2, r0, #9
 800069e:	0a53      	lsrs	r3, r2, #9
 80006a0:	469c      	mov	ip, r3
 80006a2:	23ff      	movs	r3, #255	; 0xff
 80006a4:	e7d9      	b.n	800065a <__aeabi_fadd+0xbe>
 80006a6:	1bb9      	subs	r1, r7, r6
 80006a8:	2900      	cmp	r1, #0
 80006aa:	dd71      	ble.n	8000790 <__aeabi_fadd+0x1f4>
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d03f      	beq.n	8000730 <__aeabi_fadd+0x194>
 80006b0:	2fff      	cmp	r7, #255	; 0xff
 80006b2:	d0ee      	beq.n	8000692 <__aeabi_fadd+0xf6>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	431d      	orrs	r5, r3
 80006ba:	2201      	movs	r2, #1
 80006bc:	291b      	cmp	r1, #27
 80006be:	dc07      	bgt.n	80006d0 <__aeabi_fadd+0x134>
 80006c0:	002a      	movs	r2, r5
 80006c2:	2320      	movs	r3, #32
 80006c4:	40ca      	lsrs	r2, r1
 80006c6:	1a59      	subs	r1, r3, r1
 80006c8:	408d      	lsls	r5, r1
 80006ca:	1e6b      	subs	r3, r5, #1
 80006cc:	419d      	sbcs	r5, r3
 80006ce:	432a      	orrs	r2, r5
 80006d0:	4452      	add	r2, sl
 80006d2:	0153      	lsls	r3, r2, #5
 80006d4:	d553      	bpl.n	800077e <__aeabi_fadd+0x1e2>
 80006d6:	3701      	adds	r7, #1
 80006d8:	2fff      	cmp	r7, #255	; 0xff
 80006da:	d055      	beq.n	8000788 <__aeabi_fadd+0x1ec>
 80006dc:	2301      	movs	r3, #1
 80006de:	497b      	ldr	r1, [pc, #492]	; (80008cc <__aeabi_fadd+0x330>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	0852      	lsrs	r2, r2, #1
 80006e4:	400a      	ands	r2, r1
 80006e6:	431a      	orrs	r2, r3
 80006e8:	e7a5      	b.n	8000636 <__aeabi_fadd+0x9a>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d02c      	beq.n	8000748 <__aeabi_fadd+0x1ac>
 80006ee:	2301      	movs	r3, #1
 80006f0:	425b      	negs	r3, r3
 80006f2:	469c      	mov	ip, r3
 80006f4:	44e1      	add	r9, ip
 80006f6:	464b      	mov	r3, r9
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x162>
 80006fc:	e0ad      	b.n	800085a <__aeabi_fadd+0x2be>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x168>
 8000702:	e76e      	b.n	80005e2 <__aeabi_fadd+0x46>
 8000704:	e7c5      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000706:	20fe      	movs	r0, #254	; 0xfe
 8000708:	1c7e      	adds	r6, r7, #1
 800070a:	4230      	tst	r0, r6
 800070c:	d160      	bne.n	80007d0 <__aeabi_fadd+0x234>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x178>
 8000712:	e093      	b.n	800083c <__aeabi_fadd+0x2a0>
 8000714:	4652      	mov	r2, sl
 8000716:	2a00      	cmp	r2, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0x180>
 800071a:	e0b6      	b.n	800088a <__aeabi_fadd+0x2ee>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d09c      	beq.n	800065a <__aeabi_fadd+0xbe>
 8000720:	1b52      	subs	r2, r2, r5
 8000722:	0150      	lsls	r0, r2, #5
 8000724:	d400      	bmi.n	8000728 <__aeabi_fadd+0x18c>
 8000726:	e0c3      	b.n	80008b0 <__aeabi_fadd+0x314>
 8000728:	4653      	mov	r3, sl
 800072a:	000c      	movs	r4, r1
 800072c:	1aea      	subs	r2, r5, r3
 800072e:	e782      	b.n	8000636 <__aeabi_fadd+0x9a>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d009      	beq.n	8000748 <__aeabi_fadd+0x1ac>
 8000734:	3901      	subs	r1, #1
 8000736:	2900      	cmp	r1, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x1a0>
 800073a:	e08b      	b.n	8000854 <__aeabi_fadd+0x2b8>
 800073c:	2fff      	cmp	r7, #255	; 0xff
 800073e:	d1bc      	bne.n	80006ba <__aeabi_fadd+0x11e>
 8000740:	e7a7      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000742:	000c      	movs	r4, r1
 8000744:	4642      	mov	r2, r8
 8000746:	0037      	movs	r7, r6
 8000748:	2fff      	cmp	r7, #255	; 0xff
 800074a:	d0a2      	beq.n	8000692 <__aeabi_fadd+0xf6>
 800074c:	0252      	lsls	r2, r2, #9
 800074e:	0a53      	lsrs	r3, r2, #9
 8000750:	469c      	mov	ip, r3
 8000752:	b2fb      	uxtb	r3, r7
 8000754:	e781      	b.n	800065a <__aeabi_fadd+0xbe>
 8000756:	21fe      	movs	r1, #254	; 0xfe
 8000758:	3701      	adds	r7, #1
 800075a:	4239      	tst	r1, r7
 800075c:	d165      	bne.n	800082a <__aeabi_fadd+0x28e>
 800075e:	2b00      	cmp	r3, #0
 8000760:	d17e      	bne.n	8000860 <__aeabi_fadd+0x2c4>
 8000762:	2800      	cmp	r0, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x1cc>
 8000766:	e0aa      	b.n	80008be <__aeabi_fadd+0x322>
 8000768:	2d00      	cmp	r5, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x1d2>
 800076c:	e775      	b.n	800065a <__aeabi_fadd+0xbe>
 800076e:	002a      	movs	r2, r5
 8000770:	4452      	add	r2, sl
 8000772:	2700      	movs	r7, #0
 8000774:	0153      	lsls	r3, r2, #5
 8000776:	d502      	bpl.n	800077e <__aeabi_fadd+0x1e2>
 8000778:	4b55      	ldr	r3, [pc, #340]	; (80008d0 <__aeabi_fadd+0x334>)
 800077a:	3701      	adds	r7, #1
 800077c:	401a      	ands	r2, r3
 800077e:	0753      	lsls	r3, r2, #29
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x1e8>
 8000782:	e75a      	b.n	800063a <__aeabi_fadd+0x9e>
 8000784:	08d2      	lsrs	r2, r2, #3
 8000786:	e7df      	b.n	8000748 <__aeabi_fadd+0x1ac>
 8000788:	2200      	movs	r2, #0
 800078a:	23ff      	movs	r3, #255	; 0xff
 800078c:	4694      	mov	ip, r2
 800078e:	e764      	b.n	800065a <__aeabi_fadd+0xbe>
 8000790:	2900      	cmp	r1, #0
 8000792:	d0e0      	beq.n	8000756 <__aeabi_fadd+0x1ba>
 8000794:	1bf3      	subs	r3, r6, r7
 8000796:	2f00      	cmp	r7, #0
 8000798:	d03e      	beq.n	8000818 <__aeabi_fadd+0x27c>
 800079a:	2eff      	cmp	r6, #255	; 0xff
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x204>
 800079e:	e777      	b.n	8000690 <__aeabi_fadd+0xf4>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0001      	movs	r1, r0
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4311      	orrs	r1, r2
 80007a8:	468a      	mov	sl, r1
 80007aa:	2201      	movs	r2, #1
 80007ac:	2b1b      	cmp	r3, #27
 80007ae:	dc08      	bgt.n	80007c2 <__aeabi_fadd+0x226>
 80007b0:	4652      	mov	r2, sl
 80007b2:	2120      	movs	r1, #32
 80007b4:	4650      	mov	r0, sl
 80007b6:	40da      	lsrs	r2, r3
 80007b8:	1acb      	subs	r3, r1, r3
 80007ba:	4098      	lsls	r0, r3
 80007bc:	1e43      	subs	r3, r0, #1
 80007be:	4198      	sbcs	r0, r3
 80007c0:	4302      	orrs	r2, r0
 80007c2:	0037      	movs	r7, r6
 80007c4:	1952      	adds	r2, r2, r5
 80007c6:	e784      	b.n	80006d2 <__aeabi_fadd+0x136>
 80007c8:	4a41      	ldr	r2, [pc, #260]	; (80008d0 <__aeabi_fadd+0x334>)
 80007ca:	1a3f      	subs	r7, r7, r0
 80007cc:	4032      	ands	r2, r6
 80007ce:	e732      	b.n	8000636 <__aeabi_fadd+0x9a>
 80007d0:	4653      	mov	r3, sl
 80007d2:	1b5e      	subs	r6, r3, r5
 80007d4:	0173      	lsls	r3, r6, #5
 80007d6:	d42d      	bmi.n	8000834 <__aeabi_fadd+0x298>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x242>
 80007dc:	e717      	b.n	800060e <__aeabi_fadd+0x72>
 80007de:	2200      	movs	r2, #0
 80007e0:	2400      	movs	r4, #0
 80007e2:	2300      	movs	r3, #0
 80007e4:	4694      	mov	ip, r2
 80007e6:	e738      	b.n	800065a <__aeabi_fadd+0xbe>
 80007e8:	2eff      	cmp	r6, #255	; 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x252>
 80007ec:	e74f      	b.n	800068e <__aeabi_fadd+0xf2>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	4650      	mov	r0, sl
 80007f2:	04d2      	lsls	r2, r2, #19
 80007f4:	4310      	orrs	r0, r2
 80007f6:	4682      	mov	sl, r0
 80007f8:	2201      	movs	r2, #1
 80007fa:	2b1b      	cmp	r3, #27
 80007fc:	dc08      	bgt.n	8000810 <__aeabi_fadd+0x274>
 80007fe:	4652      	mov	r2, sl
 8000800:	2420      	movs	r4, #32
 8000802:	4650      	mov	r0, sl
 8000804:	40da      	lsrs	r2, r3
 8000806:	1ae3      	subs	r3, r4, r3
 8000808:	4098      	lsls	r0, r3
 800080a:	1e43      	subs	r3, r0, #1
 800080c:	4198      	sbcs	r0, r3
 800080e:	4302      	orrs	r2, r0
 8000810:	000c      	movs	r4, r1
 8000812:	0037      	movs	r7, r6
 8000814:	1aaa      	subs	r2, r5, r2
 8000816:	e6f5      	b.n	8000604 <__aeabi_fadd+0x68>
 8000818:	2800      	cmp	r0, #0
 800081a:	d093      	beq.n	8000744 <__aeabi_fadd+0x1a8>
 800081c:	3b01      	subs	r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04f      	beq.n	80008c2 <__aeabi_fadd+0x326>
 8000822:	2eff      	cmp	r6, #255	; 0xff
 8000824:	d1c1      	bne.n	80007aa <__aeabi_fadd+0x20e>
 8000826:	4642      	mov	r2, r8
 8000828:	e733      	b.n	8000692 <__aeabi_fadd+0xf6>
 800082a:	2fff      	cmp	r7, #255	; 0xff
 800082c:	d0ac      	beq.n	8000788 <__aeabi_fadd+0x1ec>
 800082e:	4455      	add	r5, sl
 8000830:	086a      	lsrs	r2, r5, #1
 8000832:	e7a4      	b.n	800077e <__aeabi_fadd+0x1e2>
 8000834:	4653      	mov	r3, sl
 8000836:	000c      	movs	r4, r1
 8000838:	1aee      	subs	r6, r5, r3
 800083a:	e6e8      	b.n	800060e <__aeabi_fadd+0x72>
 800083c:	4653      	mov	r3, sl
 800083e:	2b00      	cmp	r3, #0
 8000840:	d128      	bne.n	8000894 <__aeabi_fadd+0x2f8>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x2ac>
 8000846:	e722      	b.n	800068e <__aeabi_fadd+0xf2>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	03db      	lsls	r3, r3, #15
 800084c:	469c      	mov	ip, r3
 800084e:	2400      	movs	r4, #0
 8000850:	23ff      	movs	r3, #255	; 0xff
 8000852:	e702      	b.n	800065a <__aeabi_fadd+0xbe>
 8000854:	002a      	movs	r2, r5
 8000856:	4452      	add	r2, sl
 8000858:	e73b      	b.n	80006d2 <__aeabi_fadd+0x136>
 800085a:	4653      	mov	r3, sl
 800085c:	1b5a      	subs	r2, r3, r5
 800085e:	e6d1      	b.n	8000604 <__aeabi_fadd+0x68>
 8000860:	2800      	cmp	r0, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x2ca>
 8000864:	e714      	b.n	8000690 <__aeabi_fadd+0xf4>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x2d0>
 800086a:	e712      	b.n	8000692 <__aeabi_fadd+0xf6>
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	03db      	lsls	r3, r3, #15
 8000870:	421a      	tst	r2, r3
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x2da>
 8000874:	e70d      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000876:	4641      	mov	r1, r8
 8000878:	4219      	tst	r1, r3
 800087a:	d000      	beq.n	800087e <__aeabi_fadd+0x2e2>
 800087c:	e709      	b.n	8000692 <__aeabi_fadd+0xf6>
 800087e:	4642      	mov	r2, r8
 8000880:	e707      	b.n	8000692 <__aeabi_fadd+0xf6>
 8000882:	000c      	movs	r4, r1
 8000884:	0037      	movs	r7, r6
 8000886:	1aaa      	subs	r2, r5, r2
 8000888:	e6bc      	b.n	8000604 <__aeabi_fadd+0x68>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d013      	beq.n	80008b6 <__aeabi_fadd+0x31a>
 800088e:	000c      	movs	r4, r1
 8000890:	46c4      	mov	ip, r8
 8000892:	e6e2      	b.n	800065a <__aeabi_fadd+0xbe>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0x2fe>
 8000898:	e6fb      	b.n	8000692 <__aeabi_fadd+0xf6>
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	03db      	lsls	r3, r3, #15
 800089e:	421a      	tst	r2, r3
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x308>
 80008a2:	e6f6      	b.n	8000692 <__aeabi_fadd+0xf6>
 80008a4:	4640      	mov	r0, r8
 80008a6:	4218      	tst	r0, r3
 80008a8:	d000      	beq.n	80008ac <__aeabi_fadd+0x310>
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0xf6>
 80008ac:	000c      	movs	r4, r1
 80008ae:	e6ef      	b.n	8000690 <__aeabi_fadd+0xf4>
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0x31a>
 80008b4:	e763      	b.n	800077e <__aeabi_fadd+0x1e2>
 80008b6:	2200      	movs	r2, #0
 80008b8:	2400      	movs	r4, #0
 80008ba:	4694      	mov	ip, r2
 80008bc:	e6cd      	b.n	800065a <__aeabi_fadd+0xbe>
 80008be:	46c4      	mov	ip, r8
 80008c0:	e6cb      	b.n	800065a <__aeabi_fadd+0xbe>
 80008c2:	002a      	movs	r2, r5
 80008c4:	0037      	movs	r7, r6
 80008c6:	4452      	add	r2, sl
 80008c8:	e703      	b.n	80006d2 <__aeabi_fadd+0x136>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	7dffffff 	.word	0x7dffffff
 80008d0:	fbffffff 	.word	0xfbffffff

080008d4 <__aeabi_fdiv>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	464f      	mov	r7, r9
 80008d8:	4646      	mov	r6, r8
 80008da:	46d6      	mov	lr, sl
 80008dc:	0245      	lsls	r5, r0, #9
 80008de:	b5c0      	push	{r6, r7, lr}
 80008e0:	0047      	lsls	r7, r0, #1
 80008e2:	1c0c      	adds	r4, r1, #0
 80008e4:	0a6d      	lsrs	r5, r5, #9
 80008e6:	0e3f      	lsrs	r7, r7, #24
 80008e8:	0fc6      	lsrs	r6, r0, #31
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d066      	beq.n	80009bc <__aeabi_fdiv+0xe8>
 80008ee:	2fff      	cmp	r7, #255	; 0xff
 80008f0:	d06c      	beq.n	80009cc <__aeabi_fdiv+0xf8>
 80008f2:	2300      	movs	r3, #0
 80008f4:	00ea      	lsls	r2, r5, #3
 80008f6:	2580      	movs	r5, #128	; 0x80
 80008f8:	4699      	mov	r9, r3
 80008fa:	469a      	mov	sl, r3
 80008fc:	04ed      	lsls	r5, r5, #19
 80008fe:	4315      	orrs	r5, r2
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0061      	lsls	r1, r4, #1
 8000906:	0a43      	lsrs	r3, r0, #9
 8000908:	4698      	mov	r8, r3
 800090a:	0e09      	lsrs	r1, r1, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2900      	cmp	r1, #0
 8000910:	d048      	beq.n	80009a4 <__aeabi_fdiv+0xd0>
 8000912:	29ff      	cmp	r1, #255	; 0xff
 8000914:	d010      	beq.n	8000938 <__aeabi_fdiv+0x64>
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	00d8      	lsls	r0, r3, #3
 800091a:	04d2      	lsls	r2, r2, #19
 800091c:	4302      	orrs	r2, r0
 800091e:	4690      	mov	r8, r2
 8000920:	2000      	movs	r0, #0
 8000922:	397f      	subs	r1, #127	; 0x7f
 8000924:	464a      	mov	r2, r9
 8000926:	0033      	movs	r3, r6
 8000928:	1a7f      	subs	r7, r7, r1
 800092a:	4302      	orrs	r2, r0
 800092c:	496c      	ldr	r1, [pc, #432]	; (8000ae0 <__aeabi_fdiv+0x20c>)
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	588a      	ldr	r2, [r1, r2]
 8000932:	4063      	eors	r3, r4
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4697      	mov	pc, r2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d16d      	bne.n	8000a18 <__aeabi_fdiv+0x144>
 800093c:	2002      	movs	r0, #2
 800093e:	3fff      	subs	r7, #255	; 0xff
 8000940:	e033      	b.n	80009aa <__aeabi_fdiv+0xd6>
 8000942:	2300      	movs	r3, #0
 8000944:	4698      	mov	r8, r3
 8000946:	0026      	movs	r6, r4
 8000948:	4645      	mov	r5, r8
 800094a:	4682      	mov	sl, r0
 800094c:	4653      	mov	r3, sl
 800094e:	2b02      	cmp	r3, #2
 8000950:	d100      	bne.n	8000954 <__aeabi_fdiv+0x80>
 8000952:	e07f      	b.n	8000a54 <__aeabi_fdiv+0x180>
 8000954:	2b03      	cmp	r3, #3
 8000956:	d100      	bne.n	800095a <__aeabi_fdiv+0x86>
 8000958:	e094      	b.n	8000a84 <__aeabi_fdiv+0x1b0>
 800095a:	2b01      	cmp	r3, #1
 800095c:	d017      	beq.n	800098e <__aeabi_fdiv+0xba>
 800095e:	0038      	movs	r0, r7
 8000960:	307f      	adds	r0, #127	; 0x7f
 8000962:	2800      	cmp	r0, #0
 8000964:	dd5f      	ble.n	8000a26 <__aeabi_fdiv+0x152>
 8000966:	076b      	lsls	r3, r5, #29
 8000968:	d004      	beq.n	8000974 <__aeabi_fdiv+0xa0>
 800096a:	230f      	movs	r3, #15
 800096c:	402b      	ands	r3, r5
 800096e:	2b04      	cmp	r3, #4
 8000970:	d000      	beq.n	8000974 <__aeabi_fdiv+0xa0>
 8000972:	3504      	adds	r5, #4
 8000974:	012b      	lsls	r3, r5, #4
 8000976:	d503      	bpl.n	8000980 <__aeabi_fdiv+0xac>
 8000978:	0038      	movs	r0, r7
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <__aeabi_fdiv+0x210>)
 800097c:	3080      	adds	r0, #128	; 0x80
 800097e:	401d      	ands	r5, r3
 8000980:	28fe      	cmp	r0, #254	; 0xfe
 8000982:	dc67      	bgt.n	8000a54 <__aeabi_fdiv+0x180>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2c0      	uxtb	r0, r0
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xbe>
 800098c:	001e      	movs	r6, r3
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d12b      	bne.n	8000a00 <__aeabi_fdiv+0x12c>
 80009a8:	2001      	movs	r0, #1
 80009aa:	464a      	mov	r2, r9
 80009ac:	0033      	movs	r3, r6
 80009ae:	494e      	ldr	r1, [pc, #312]	; (8000ae8 <__aeabi_fdiv+0x214>)
 80009b0:	4302      	orrs	r2, r0
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	588a      	ldr	r2, [r1, r2]
 80009b6:	4063      	eors	r3, r4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4697      	mov	pc, r2
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d113      	bne.n	80009e8 <__aeabi_fdiv+0x114>
 80009c0:	2304      	movs	r3, #4
 80009c2:	4699      	mov	r9, r3
 80009c4:	3b03      	subs	r3, #3
 80009c6:	2700      	movs	r7, #0
 80009c8:	469a      	mov	sl, r3
 80009ca:	e79a      	b.n	8000902 <__aeabi_fdiv+0x2e>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d105      	bne.n	80009dc <__aeabi_fdiv+0x108>
 80009d0:	2308      	movs	r3, #8
 80009d2:	4699      	mov	r9, r3
 80009d4:	3b06      	subs	r3, #6
 80009d6:	27ff      	movs	r7, #255	; 0xff
 80009d8:	469a      	mov	sl, r3
 80009da:	e792      	b.n	8000902 <__aeabi_fdiv+0x2e>
 80009dc:	230c      	movs	r3, #12
 80009de:	4699      	mov	r9, r3
 80009e0:	3b09      	subs	r3, #9
 80009e2:	27ff      	movs	r7, #255	; 0xff
 80009e4:	469a      	mov	sl, r3
 80009e6:	e78c      	b.n	8000902 <__aeabi_fdiv+0x2e>
 80009e8:	0028      	movs	r0, r5
 80009ea:	f001 ff67 	bl	80028bc <__clzsi2>
 80009ee:	2776      	movs	r7, #118	; 0x76
 80009f0:	1f43      	subs	r3, r0, #5
 80009f2:	409d      	lsls	r5, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	427f      	negs	r7, r7
 80009f8:	4699      	mov	r9, r3
 80009fa:	469a      	mov	sl, r3
 80009fc:	1a3f      	subs	r7, r7, r0
 80009fe:	e780      	b.n	8000902 <__aeabi_fdiv+0x2e>
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 ff5b 	bl	80028bc <__clzsi2>
 8000a06:	4642      	mov	r2, r8
 8000a08:	1f43      	subs	r3, r0, #5
 8000a0a:	2176      	movs	r1, #118	; 0x76
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	4249      	negs	r1, r1
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	4690      	mov	r8, r2
 8000a14:	2000      	movs	r0, #0
 8000a16:	e785      	b.n	8000924 <__aeabi_fdiv+0x50>
 8000a18:	21ff      	movs	r1, #255	; 0xff
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	e782      	b.n	8000924 <__aeabi_fdiv+0x50>
 8000a1e:	001e      	movs	r6, r3
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	2500      	movs	r5, #0
 8000a24:	e7b5      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a26:	2301      	movs	r3, #1
 8000a28:	1a1b      	subs	r3, r3, r0
 8000a2a:	2b1b      	cmp	r3, #27
 8000a2c:	dcaf      	bgt.n	800098e <__aeabi_fdiv+0xba>
 8000a2e:	379e      	adds	r7, #158	; 0x9e
 8000a30:	0029      	movs	r1, r5
 8000a32:	40bd      	lsls	r5, r7
 8000a34:	40d9      	lsrs	r1, r3
 8000a36:	1e6a      	subs	r2, r5, #1
 8000a38:	4195      	sbcs	r5, r2
 8000a3a:	430d      	orrs	r5, r1
 8000a3c:	076b      	lsls	r3, r5, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fdiv+0x176>
 8000a40:	230f      	movs	r3, #15
 8000a42:	402b      	ands	r3, r5
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fdiv+0x176>
 8000a48:	3504      	adds	r5, #4
 8000a4a:	016b      	lsls	r3, r5, #5
 8000a4c:	d544      	bpl.n	8000ad8 <__aeabi_fdiv+0x204>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2500      	movs	r5, #0
 8000a52:	e79e      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	2500      	movs	r5, #0
 8000a58:	e79b      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a5a:	2580      	movs	r5, #128	; 0x80
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	03ed      	lsls	r5, r5, #15
 8000a62:	e796      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a64:	2300      	movs	r3, #0
 8000a66:	4698      	mov	r8, r3
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	03c0      	lsls	r0, r0, #15
 8000a6c:	4205      	tst	r5, r0
 8000a6e:	d009      	beq.n	8000a84 <__aeabi_fdiv+0x1b0>
 8000a70:	4643      	mov	r3, r8
 8000a72:	4203      	tst	r3, r0
 8000a74:	d106      	bne.n	8000a84 <__aeabi_fdiv+0x1b0>
 8000a76:	4645      	mov	r5, r8
 8000a78:	4305      	orrs	r5, r0
 8000a7a:	026d      	lsls	r5, r5, #9
 8000a7c:	0026      	movs	r6, r4
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	0a6d      	lsrs	r5, r5, #9
 8000a82:	e786      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a84:	2080      	movs	r0, #128	; 0x80
 8000a86:	03c0      	lsls	r0, r0, #15
 8000a88:	4305      	orrs	r5, r0
 8000a8a:	026d      	lsls	r5, r5, #9
 8000a8c:	20ff      	movs	r0, #255	; 0xff
 8000a8e:	0a6d      	lsrs	r5, r5, #9
 8000a90:	e77f      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000a92:	4641      	mov	r1, r8
 8000a94:	016a      	lsls	r2, r5, #5
 8000a96:	0148      	lsls	r0, r1, #5
 8000a98:	4282      	cmp	r2, r0
 8000a9a:	d219      	bcs.n	8000ad0 <__aeabi_fdiv+0x1fc>
 8000a9c:	211b      	movs	r1, #27
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	3f01      	subs	r7, #1
 8000aa2:	2601      	movs	r6, #1
 8000aa4:	0014      	movs	r4, r2
 8000aa6:	006d      	lsls	r5, r5, #1
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	db01      	blt.n	8000ab2 <__aeabi_fdiv+0x1de>
 8000aae:	4290      	cmp	r0, r2
 8000ab0:	d801      	bhi.n	8000ab6 <__aeabi_fdiv+0x1e2>
 8000ab2:	1a12      	subs	r2, r2, r0
 8000ab4:	4335      	orrs	r5, r6
 8000ab6:	3901      	subs	r1, #1
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	d1f3      	bne.n	8000aa4 <__aeabi_fdiv+0x1d0>
 8000abc:	1e50      	subs	r0, r2, #1
 8000abe:	4182      	sbcs	r2, r0
 8000ac0:	0038      	movs	r0, r7
 8000ac2:	307f      	adds	r0, #127	; 0x7f
 8000ac4:	001e      	movs	r6, r3
 8000ac6:	4315      	orrs	r5, r2
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	dd00      	ble.n	8000ace <__aeabi_fdiv+0x1fa>
 8000acc:	e74b      	b.n	8000966 <__aeabi_fdiv+0x92>
 8000ace:	e7aa      	b.n	8000a26 <__aeabi_fdiv+0x152>
 8000ad0:	211a      	movs	r1, #26
 8000ad2:	2501      	movs	r5, #1
 8000ad4:	1a12      	subs	r2, r2, r0
 8000ad6:	e7e4      	b.n	8000aa2 <__aeabi_fdiv+0x1ce>
 8000ad8:	01ad      	lsls	r5, r5, #6
 8000ada:	2000      	movs	r0, #0
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	e758      	b.n	8000992 <__aeabi_fdiv+0xbe>
 8000ae0:	0800e49c 	.word	0x0800e49c
 8000ae4:	f7ffffff 	.word	0xf7ffffff
 8000ae8:	0800e4dc 	.word	0x0800e4dc

08000aec <__aeabi_dadd>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	46d6      	mov	lr, sl
 8000af2:	4646      	mov	r6, r8
 8000af4:	000d      	movs	r5, r1
 8000af6:	0001      	movs	r1, r0
 8000af8:	0018      	movs	r0, r3
 8000afa:	b5c0      	push	{r6, r7, lr}
 8000afc:	0017      	movs	r7, r2
 8000afe:	032b      	lsls	r3, r5, #12
 8000b00:	0a5a      	lsrs	r2, r3, #9
 8000b02:	0f4b      	lsrs	r3, r1, #29
 8000b04:	4313      	orrs	r3, r2
 8000b06:	00ca      	lsls	r2, r1, #3
 8000b08:	4691      	mov	r9, r2
 8000b0a:	0302      	lsls	r2, r0, #12
 8000b0c:	006e      	lsls	r6, r5, #1
 8000b0e:	0041      	lsls	r1, r0, #1
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	0fec      	lsrs	r4, r5, #31
 8000b14:	0f7d      	lsrs	r5, r7, #29
 8000b16:	4315      	orrs	r5, r2
 8000b18:	0d76      	lsrs	r6, r6, #21
 8000b1a:	0d49      	lsrs	r1, r1, #21
 8000b1c:	0fc0      	lsrs	r0, r0, #31
 8000b1e:	4682      	mov	sl, r0
 8000b20:	46ac      	mov	ip, r5
 8000b22:	00ff      	lsls	r7, r7, #3
 8000b24:	1a72      	subs	r2, r6, r1
 8000b26:	4284      	cmp	r4, r0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x40>
 8000b2a:	e098      	b.n	8000c5e <__aeabi_dadd+0x172>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	dc00      	bgt.n	8000b32 <__aeabi_dadd+0x46>
 8000b30:	e081      	b.n	8000c36 <__aeabi_dadd+0x14a>
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4c>
 8000b36:	e0b6      	b.n	8000ca6 <__aeabi_dadd+0x1ba>
 8000b38:	49c9      	ldr	r1, [pc, #804]	; (8000e60 <__aeabi_dadd+0x374>)
 8000b3a:	428e      	cmp	r6, r1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x54>
 8000b3e:	e172      	b.n	8000e26 <__aeabi_dadd+0x33a>
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0028      	movs	r0, r5
 8000b44:	0409      	lsls	r1, r1, #16
 8000b46:	4308      	orrs	r0, r1
 8000b48:	4684      	mov	ip, r0
 8000b4a:	2a38      	cmp	r2, #56	; 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x64>
 8000b4e:	e15e      	b.n	8000e0e <__aeabi_dadd+0x322>
 8000b50:	2a1f      	cmp	r2, #31
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x6a>
 8000b54:	e1ee      	b.n	8000f34 <__aeabi_dadd+0x448>
 8000b56:	2020      	movs	r0, #32
 8000b58:	0039      	movs	r1, r7
 8000b5a:	4665      	mov	r5, ip
 8000b5c:	1a80      	subs	r0, r0, r2
 8000b5e:	4087      	lsls	r7, r0
 8000b60:	40d1      	lsrs	r1, r2
 8000b62:	4085      	lsls	r5, r0
 8000b64:	430d      	orrs	r5, r1
 8000b66:	0039      	movs	r1, r7
 8000b68:	1e4f      	subs	r7, r1, #1
 8000b6a:	41b9      	sbcs	r1, r7
 8000b6c:	4667      	mov	r7, ip
 8000b6e:	40d7      	lsrs	r7, r2
 8000b70:	4329      	orrs	r1, r5
 8000b72:	1bdb      	subs	r3, r3, r7
 8000b74:	464a      	mov	r2, r9
 8000b76:	1a55      	subs	r5, r2, r1
 8000b78:	45a9      	cmp	r9, r5
 8000b7a:	4189      	sbcs	r1, r1
 8000b7c:	4249      	negs	r1, r1
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	4643      	mov	r3, r8
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	d400      	bmi.n	8000b8a <__aeabi_dadd+0x9e>
 8000b88:	e0cc      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	0a5b      	lsrs	r3, r3, #9
 8000b90:	4698      	mov	r8, r3
 8000b92:	4643      	mov	r3, r8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0xae>
 8000b98:	e12c      	b.n	8000df4 <__aeabi_dadd+0x308>
 8000b9a:	4640      	mov	r0, r8
 8000b9c:	f001 fe8e 	bl	80028bc <__clzsi2>
 8000ba0:	0001      	movs	r1, r0
 8000ba2:	3908      	subs	r1, #8
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	0028      	movs	r0, r5
 8000ba8:	4643      	mov	r3, r8
 8000baa:	1a52      	subs	r2, r2, r1
 8000bac:	408b      	lsls	r3, r1
 8000bae:	40d0      	lsrs	r0, r2
 8000bb0:	408d      	lsls	r5, r1
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	428e      	cmp	r6, r1
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0xce>
 8000bb8:	e117      	b.n	8000dea <__aeabi_dadd+0x2fe>
 8000bba:	1b8e      	subs	r6, r1, r6
 8000bbc:	1c72      	adds	r2, r6, #1
 8000bbe:	2a1f      	cmp	r2, #31
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dadd+0xd8>
 8000bc2:	e1a7      	b.n	8000f14 <__aeabi_dadd+0x428>
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	002e      	movs	r6, r5
 8000bca:	1a89      	subs	r1, r1, r2
 8000bcc:	408d      	lsls	r5, r1
 8000bce:	4088      	lsls	r0, r1
 8000bd0:	40d6      	lsrs	r6, r2
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	1e69      	subs	r1, r5, #1
 8000bd6:	418d      	sbcs	r5, r1
 8000bd8:	4330      	orrs	r0, r6
 8000bda:	4698      	mov	r8, r3
 8000bdc:	2600      	movs	r6, #0
 8000bde:	4305      	orrs	r5, r0
 8000be0:	076b      	lsls	r3, r5, #29
 8000be2:	d009      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000be4:	230f      	movs	r3, #15
 8000be6:	402b      	ands	r3, r5
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d005      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000bec:	1d2b      	adds	r3, r5, #4
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	41ad      	sbcs	r5, r5
 8000bf2:	426d      	negs	r5, r5
 8000bf4:	44a8      	add	r8, r5
 8000bf6:	001d      	movs	r5, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	d400      	bmi.n	8000c00 <__aeabi_dadd+0x114>
 8000bfe:	e094      	b.n	8000d2a <__aeabi_dadd+0x23e>
 8000c00:	4b97      	ldr	r3, [pc, #604]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c02:	1c72      	adds	r2, r6, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x11e>
 8000c08:	e09d      	b.n	8000d46 <__aeabi_dadd+0x25a>
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4b95      	ldr	r3, [pc, #596]	; (8000e64 <__aeabi_dadd+0x378>)
 8000c0e:	08ed      	lsrs	r5, r5, #3
 8000c10:	4019      	ands	r1, r3
 8000c12:	000b      	movs	r3, r1
 8000c14:	0552      	lsls	r2, r2, #21
 8000c16:	0749      	lsls	r1, r1, #29
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4329      	orrs	r1, r5
 8000c1c:	0b1b      	lsrs	r3, r3, #12
 8000c1e:	0d52      	lsrs	r2, r2, #21
 8000c20:	0512      	lsls	r2, r2, #20
 8000c22:	4313      	orrs	r3, r2
 8000c24:	07e4      	lsls	r4, r4, #31
 8000c26:	4323      	orrs	r3, r4
 8000c28:	0008      	movs	r0, r1
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	bce0      	pop	{r5, r6, r7}
 8000c2e:	46ba      	mov	sl, r7
 8000c30:	46b1      	mov	r9, r6
 8000c32:	46a8      	mov	r8, r5
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d043      	beq.n	8000cc2 <__aeabi_dadd+0x1d6>
 8000c3a:	1b8a      	subs	r2, r1, r6
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_dadd+0x156>
 8000c40:	e12a      	b.n	8000e98 <__aeabi_dadd+0x3ac>
 8000c42:	464c      	mov	r4, r9
 8000c44:	431c      	orrs	r4, r3
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x15e>
 8000c48:	e1d1      	b.n	8000fee <__aeabi_dadd+0x502>
 8000c4a:	1e54      	subs	r4, r2, #1
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x166>
 8000c50:	e21f      	b.n	8001092 <__aeabi_dadd+0x5a6>
 8000c52:	4d83      	ldr	r5, [pc, #524]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c54:	42aa      	cmp	r2, r5
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x16e>
 8000c58:	e272      	b.n	8001140 <__aeabi_dadd+0x654>
 8000c5a:	0022      	movs	r2, r4
 8000c5c:	e123      	b.n	8000ea6 <__aeabi_dadd+0x3ba>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	dc00      	bgt.n	8000c64 <__aeabi_dadd+0x178>
 8000c62:	e098      	b.n	8000d96 <__aeabi_dadd+0x2aa>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d042      	beq.n	8000cee <__aeabi_dadd+0x202>
 8000c68:	497d      	ldr	r1, [pc, #500]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c6a:	428e      	cmp	r6, r1
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x184>
 8000c6e:	e0da      	b.n	8000e26 <__aeabi_dadd+0x33a>
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0028      	movs	r0, r5
 8000c74:	0409      	lsls	r1, r1, #16
 8000c76:	4308      	orrs	r0, r1
 8000c78:	4684      	mov	ip, r0
 8000c7a:	2a38      	cmp	r2, #56	; 0x38
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0x194>
 8000c7e:	e129      	b.n	8000ed4 <__aeabi_dadd+0x3e8>
 8000c80:	2a1f      	cmp	r2, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x19a>
 8000c84:	e187      	b.n	8000f96 <__aeabi_dadd+0x4aa>
 8000c86:	0011      	movs	r1, r2
 8000c88:	4665      	mov	r5, ip
 8000c8a:	3920      	subs	r1, #32
 8000c8c:	40cd      	lsrs	r5, r1
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d004      	beq.n	8000c9c <__aeabi_dadd+0x1b0>
 8000c92:	2040      	movs	r0, #64	; 0x40
 8000c94:	4661      	mov	r1, ip
 8000c96:	1a82      	subs	r2, r0, r2
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	430f      	orrs	r7, r1
 8000c9c:	0039      	movs	r1, r7
 8000c9e:	1e4f      	subs	r7, r1, #1
 8000ca0:	41b9      	sbcs	r1, r7
 8000ca2:	430d      	orrs	r5, r1
 8000ca4:	e11b      	b.n	8000ede <__aeabi_dadd+0x3f2>
 8000ca6:	0029      	movs	r1, r5
 8000ca8:	4339      	orrs	r1, r7
 8000caa:	d100      	bne.n	8000cae <__aeabi_dadd+0x1c2>
 8000cac:	e0b5      	b.n	8000e1a <__aeabi_dadd+0x32e>
 8000cae:	1e51      	subs	r1, r2, #1
 8000cb0:	2a01      	cmp	r2, #1
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x1ca>
 8000cb4:	e1ab      	b.n	800100e <__aeabi_dadd+0x522>
 8000cb6:	486a      	ldr	r0, [pc, #424]	; (8000e60 <__aeabi_dadd+0x374>)
 8000cb8:	4282      	cmp	r2, r0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x1d2>
 8000cbc:	e1b2      	b.n	8001024 <__aeabi_dadd+0x538>
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	e743      	b.n	8000b4a <__aeabi_dadd+0x5e>
 8000cc2:	4969      	ldr	r1, [pc, #420]	; (8000e68 <__aeabi_dadd+0x37c>)
 8000cc4:	1c75      	adds	r5, r6, #1
 8000cc6:	420d      	tst	r5, r1
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dadd+0x1e0>
 8000cca:	e0cf      	b.n	8000e6c <__aeabi_dadd+0x380>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_dadd+0x1e6>
 8000cd0:	e193      	b.n	8000ffa <__aeabi_dadd+0x50e>
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x1ee>
 8000cd8:	e1d1      	b.n	800107e <__aeabi_dadd+0x592>
 8000cda:	4661      	mov	r1, ip
 8000cdc:	4339      	orrs	r1, r7
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x1f6>
 8000ce0:	e1e3      	b.n	80010aa <__aeabi_dadd+0x5be>
 8000ce2:	4649      	mov	r1, r9
 8000ce4:	0758      	lsls	r0, r3, #29
 8000ce6:	08c9      	lsrs	r1, r1, #3
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	e026      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000cee:	0029      	movs	r1, r5
 8000cf0:	4339      	orrs	r1, r7
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x20a>
 8000cf4:	e091      	b.n	8000e1a <__aeabi_dadd+0x32e>
 8000cf6:	1e51      	subs	r1, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d005      	beq.n	8000d08 <__aeabi_dadd+0x21c>
 8000cfc:	4858      	ldr	r0, [pc, #352]	; (8000e60 <__aeabi_dadd+0x374>)
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x218>
 8000d02:	e18f      	b.n	8001024 <__aeabi_dadd+0x538>
 8000d04:	000a      	movs	r2, r1
 8000d06:	e7b8      	b.n	8000c7a <__aeabi_dadd+0x18e>
 8000d08:	003d      	movs	r5, r7
 8000d0a:	444d      	add	r5, r9
 8000d0c:	454d      	cmp	r5, r9
 8000d0e:	4189      	sbcs	r1, r1
 8000d10:	4463      	add	r3, ip
 8000d12:	4698      	mov	r8, r3
 8000d14:	4249      	negs	r1, r1
 8000d16:	4488      	add	r8, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	2602      	movs	r6, #2
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	d500      	bpl.n	8000d22 <__aeabi_dadd+0x236>
 8000d20:	e0eb      	b.n	8000efa <__aeabi_dadd+0x40e>
 8000d22:	3e01      	subs	r6, #1
 8000d24:	076b      	lsls	r3, r5, #29
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x23e>
 8000d28:	e75c      	b.n	8000be4 <__aeabi_dadd+0xf8>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	08e9      	lsrs	r1, r5, #3
 8000d2e:	075a      	lsls	r2, r3, #29
 8000d30:	4311      	orrs	r1, r2
 8000d32:	0032      	movs	r2, r6
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <__aeabi_dadd+0x374>)
 8000d38:	4282      	cmp	r2, r0
 8000d3a:	d021      	beq.n	8000d80 <__aeabi_dadd+0x294>
 8000d3c:	031b      	lsls	r3, r3, #12
 8000d3e:	0552      	lsls	r2, r2, #21
 8000d40:	0b1b      	lsrs	r3, r3, #12
 8000d42:	0d52      	lsrs	r2, r2, #21
 8000d44:	e76c      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e769      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d4c:	002a      	movs	r2, r5
 8000d4e:	433a      	orrs	r2, r7
 8000d50:	d069      	beq.n	8000e26 <__aeabi_dadd+0x33a>
 8000d52:	464a      	mov	r2, r9
 8000d54:	0758      	lsls	r0, r3, #29
 8000d56:	08d1      	lsrs	r1, r2, #3
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	4308      	orrs	r0, r1
 8000d60:	421a      	tst	r2, r3
 8000d62:	d007      	beq.n	8000d74 <__aeabi_dadd+0x288>
 8000d64:	0029      	movs	r1, r5
 8000d66:	08ed      	lsrs	r5, r5, #3
 8000d68:	421d      	tst	r5, r3
 8000d6a:	d103      	bne.n	8000d74 <__aeabi_dadd+0x288>
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	08ff      	lsrs	r7, r7, #3
 8000d70:	0748      	lsls	r0, r1, #29
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0f43      	lsrs	r3, r0, #29
 8000d76:	00c1      	lsls	r1, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	08c9      	lsrs	r1, r1, #3
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dadd+0x29c>
 8000d86:	e213      	b.n	80011b0 <__aeabi_dadd+0x6c4>
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0312      	lsls	r2, r2, #12
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	031b      	lsls	r3, r3, #12
 8000d90:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <__aeabi_dadd+0x374>)
 8000d92:	0b1b      	lsrs	r3, r3, #12
 8000d94:	e744      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d04b      	beq.n	8000e32 <__aeabi_dadd+0x346>
 8000d9a:	1b8a      	subs	r2, r1, r6
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dadd+0x2b6>
 8000da0:	e0e7      	b.n	8000f72 <__aeabi_dadd+0x486>
 8000da2:	482f      	ldr	r0, [pc, #188]	; (8000e60 <__aeabi_dadd+0x374>)
 8000da4:	4281      	cmp	r1, r0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x2be>
 8000da8:	e195      	b.n	80010d6 <__aeabi_dadd+0x5ea>
 8000daa:	2080      	movs	r0, #128	; 0x80
 8000dac:	0400      	lsls	r0, r0, #16
 8000dae:	4303      	orrs	r3, r0
 8000db0:	2a38      	cmp	r2, #56	; 0x38
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_dadd+0x2ca>
 8000db4:	e143      	b.n	800103e <__aeabi_dadd+0x552>
 8000db6:	2a1f      	cmp	r2, #31
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_dadd+0x2d0>
 8000dba:	e1db      	b.n	8001174 <__aeabi_dadd+0x688>
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	001d      	movs	r5, r3
 8000dc0:	464e      	mov	r6, r9
 8000dc2:	1a80      	subs	r0, r0, r2
 8000dc4:	4085      	lsls	r5, r0
 8000dc6:	40d6      	lsrs	r6, r2
 8000dc8:	4335      	orrs	r5, r6
 8000dca:	464e      	mov	r6, r9
 8000dcc:	4086      	lsls	r6, r0
 8000dce:	0030      	movs	r0, r6
 8000dd0:	40d3      	lsrs	r3, r2
 8000dd2:	1e46      	subs	r6, r0, #1
 8000dd4:	41b0      	sbcs	r0, r6
 8000dd6:	449c      	add	ip, r3
 8000dd8:	4305      	orrs	r5, r0
 8000dda:	19ed      	adds	r5, r5, r7
 8000ddc:	42bd      	cmp	r5, r7
 8000dde:	419b      	sbcs	r3, r3
 8000de0:	425b      	negs	r3, r3
 8000de2:	4463      	add	r3, ip
 8000de4:	4698      	mov	r8, r3
 8000de6:	000e      	movs	r6, r1
 8000de8:	e07f      	b.n	8000eea <__aeabi_dadd+0x3fe>
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <__aeabi_dadd+0x378>)
 8000dec:	1a76      	subs	r6, r6, r1
 8000dee:	4013      	ands	r3, r2
 8000df0:	4698      	mov	r8, r3
 8000df2:	e6f5      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000df4:	0028      	movs	r0, r5
 8000df6:	f001 fd61 	bl	80028bc <__clzsi2>
 8000dfa:	0001      	movs	r1, r0
 8000dfc:	3118      	adds	r1, #24
 8000dfe:	291f      	cmp	r1, #31
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x318>
 8000e02:	e6cf      	b.n	8000ba4 <__aeabi_dadd+0xb8>
 8000e04:	002b      	movs	r3, r5
 8000e06:	3808      	subs	r0, #8
 8000e08:	4083      	lsls	r3, r0
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	e6d2      	b.n	8000bb4 <__aeabi_dadd+0xc8>
 8000e0e:	4662      	mov	r2, ip
 8000e10:	433a      	orrs	r2, r7
 8000e12:	0011      	movs	r1, r2
 8000e14:	1e4f      	subs	r7, r1, #1
 8000e16:	41b9      	sbcs	r1, r7
 8000e18:	e6ac      	b.n	8000b74 <__aeabi_dadd+0x88>
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	0758      	lsls	r0, r3, #29
 8000e1e:	08c9      	lsrs	r1, r1, #3
 8000e20:	4301      	orrs	r1, r0
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	e787      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000e26:	4649      	mov	r1, r9
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	08c9      	lsrs	r1, r1, #3
 8000e2c:	4311      	orrs	r1, r2
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	e7a6      	b.n	8000d80 <__aeabi_dadd+0x294>
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <__aeabi_dadd+0x37c>)
 8000e34:	1c70      	adds	r0, r6, #1
 8000e36:	4208      	tst	r0, r1
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x350>
 8000e3a:	e0bb      	b.n	8000fb4 <__aeabi_dadd+0x4c8>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x356>
 8000e40:	e114      	b.n	800106c <__aeabi_dadd+0x580>
 8000e42:	4649      	mov	r1, r9
 8000e44:	4319      	orrs	r1, r3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dadd+0x35e>
 8000e48:	e175      	b.n	8001136 <__aeabi_dadd+0x64a>
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	4339      	orrs	r1, r7
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x366>
 8000e50:	e17e      	b.n	8001150 <__aeabi_dadd+0x664>
 8000e52:	4649      	mov	r1, r9
 8000e54:	0758      	lsls	r0, r3, #29
 8000e56:	08c9      	lsrs	r1, r1, #3
 8000e58:	4301      	orrs	r1, r0
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	e76e      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	ff7fffff 	.word	0xff7fffff
 8000e68:	000007fe 	.word	0x000007fe
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	1bcd      	subs	r5, r1, r7
 8000e70:	4661      	mov	r1, ip
 8000e72:	1a58      	subs	r0, r3, r1
 8000e74:	45a9      	cmp	r9, r5
 8000e76:	4189      	sbcs	r1, r1
 8000e78:	4249      	negs	r1, r1
 8000e7a:	4688      	mov	r8, r1
 8000e7c:	0001      	movs	r1, r0
 8000e7e:	4640      	mov	r0, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	4688      	mov	r8, r1
 8000e84:	0209      	lsls	r1, r1, #8
 8000e86:	d500      	bpl.n	8000e8a <__aeabi_dadd+0x39e>
 8000e88:	e0a6      	b.n	8000fd8 <__aeabi_dadd+0x4ec>
 8000e8a:	4641      	mov	r1, r8
 8000e8c:	4329      	orrs	r1, r5
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x3a6>
 8000e90:	e67f      	b.n	8000b92 <__aeabi_dadd+0xa6>
 8000e92:	2300      	movs	r3, #0
 8000e94:	2400      	movs	r4, #0
 8000e96:	e751      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000e98:	4cc7      	ldr	r4, [pc, #796]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x3b4>
 8000e9e:	e0c7      	b.n	8001030 <__aeabi_dadd+0x544>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	0424      	lsls	r4, r4, #16
 8000ea4:	4323      	orrs	r3, r4
 8000ea6:	2a38      	cmp	r2, #56	; 0x38
 8000ea8:	dc54      	bgt.n	8000f54 <__aeabi_dadd+0x468>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x3c4>
 8000eae:	e0cc      	b.n	800104a <__aeabi_dadd+0x55e>
 8000eb0:	2420      	movs	r4, #32
 8000eb2:	4648      	mov	r0, r9
 8000eb4:	1aa4      	subs	r4, r4, r2
 8000eb6:	001d      	movs	r5, r3
 8000eb8:	464e      	mov	r6, r9
 8000eba:	40a0      	lsls	r0, r4
 8000ebc:	40d6      	lsrs	r6, r2
 8000ebe:	40a5      	lsls	r5, r4
 8000ec0:	0004      	movs	r4, r0
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	4335      	orrs	r5, r6
 8000ec8:	1e66      	subs	r6, r4, #1
 8000eca:	41b4      	sbcs	r4, r6
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	469c      	mov	ip, r3
 8000ed0:	4325      	orrs	r5, r4
 8000ed2:	e044      	b.n	8000f5e <__aeabi_dadd+0x472>
 8000ed4:	4662      	mov	r2, ip
 8000ed6:	433a      	orrs	r2, r7
 8000ed8:	0015      	movs	r5, r2
 8000eda:	1e6f      	subs	r7, r5, #1
 8000edc:	41bd      	sbcs	r5, r7
 8000ede:	444d      	add	r5, r9
 8000ee0:	454d      	cmp	r5, r9
 8000ee2:	4189      	sbcs	r1, r1
 8000ee4:	4249      	negs	r1, r1
 8000ee6:	4688      	mov	r8, r1
 8000ee8:	4498      	add	r8, r3
 8000eea:	4643      	mov	r3, r8
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	d400      	bmi.n	8000ef2 <__aeabi_dadd+0x406>
 8000ef0:	e718      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000ef2:	4bb1      	ldr	r3, [pc, #708]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000ef4:	3601      	adds	r6, #1
 8000ef6:	429e      	cmp	r6, r3
 8000ef8:	d049      	beq.n	8000f8e <__aeabi_dadd+0x4a2>
 8000efa:	4642      	mov	r2, r8
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <__aeabi_dadd+0x6d0>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	401a      	ands	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	086a      	lsrs	r2, r5, #1
 8000f06:	400d      	ands	r5, r1
 8000f08:	4315      	orrs	r5, r2
 8000f0a:	07d9      	lsls	r1, r3, #31
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	4698      	mov	r8, r3
 8000f10:	430d      	orrs	r5, r1
 8000f12:	e665      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000f14:	0018      	movs	r0, r3
 8000f16:	3e1f      	subs	r6, #31
 8000f18:	40f0      	lsrs	r0, r6
 8000f1a:	2a20      	cmp	r2, #32
 8000f1c:	d003      	beq.n	8000f26 <__aeabi_dadd+0x43a>
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	1a8a      	subs	r2, r1, r2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	431d      	orrs	r5, r3
 8000f26:	1e69      	subs	r1, r5, #1
 8000f28:	418d      	sbcs	r5, r1
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	4698      	mov	r8, r3
 8000f30:	4305      	orrs	r5, r0
 8000f32:	e6f7      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000f34:	0011      	movs	r1, r2
 8000f36:	4665      	mov	r5, ip
 8000f38:	3920      	subs	r1, #32
 8000f3a:	40cd      	lsrs	r5, r1
 8000f3c:	2a20      	cmp	r2, #32
 8000f3e:	d004      	beq.n	8000f4a <__aeabi_dadd+0x45e>
 8000f40:	2040      	movs	r0, #64	; 0x40
 8000f42:	4661      	mov	r1, ip
 8000f44:	1a82      	subs	r2, r0, r2
 8000f46:	4091      	lsls	r1, r2
 8000f48:	430f      	orrs	r7, r1
 8000f4a:	0039      	movs	r1, r7
 8000f4c:	1e4f      	subs	r7, r1, #1
 8000f4e:	41b9      	sbcs	r1, r7
 8000f50:	4329      	orrs	r1, r5
 8000f52:	e60f      	b.n	8000b74 <__aeabi_dadd+0x88>
 8000f54:	464a      	mov	r2, r9
 8000f56:	4313      	orrs	r3, r2
 8000f58:	001d      	movs	r5, r3
 8000f5a:	1e6b      	subs	r3, r5, #1
 8000f5c:	419d      	sbcs	r5, r3
 8000f5e:	1b7d      	subs	r5, r7, r5
 8000f60:	42af      	cmp	r7, r5
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	4662      	mov	r2, ip
 8000f66:	425b      	negs	r3, r3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	4654      	mov	r4, sl
 8000f6e:	000e      	movs	r6, r1
 8000f70:	e607      	b.n	8000b82 <__aeabi_dadd+0x96>
 8000f72:	4648      	mov	r0, r9
 8000f74:	4318      	orrs	r0, r3
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x48e>
 8000f78:	e0b3      	b.n	80010e2 <__aeabi_dadd+0x5f6>
 8000f7a:	1e50      	subs	r0, r2, #1
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x496>
 8000f80:	e10d      	b.n	800119e <__aeabi_dadd+0x6b2>
 8000f82:	4d8d      	ldr	r5, [pc, #564]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x49e>
 8000f88:	e0a5      	b.n	80010d6 <__aeabi_dadd+0x5ea>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	e710      	b.n	8000db0 <__aeabi_dadd+0x2c4>
 8000f8e:	0032      	movs	r2, r6
 8000f90:	2300      	movs	r3, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	e644      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000f96:	2120      	movs	r1, #32
 8000f98:	0038      	movs	r0, r7
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	408f      	lsls	r7, r1
 8000fa0:	408d      	lsls	r5, r1
 8000fa2:	40d0      	lsrs	r0, r2
 8000fa4:	1e79      	subs	r1, r7, #1
 8000fa6:	418f      	sbcs	r7, r1
 8000fa8:	4305      	orrs	r5, r0
 8000faa:	433d      	orrs	r5, r7
 8000fac:	4667      	mov	r7, ip
 8000fae:	40d7      	lsrs	r7, r2
 8000fb0:	19db      	adds	r3, r3, r7
 8000fb2:	e794      	b.n	8000ede <__aeabi_dadd+0x3f2>
 8000fb4:	4a80      	ldr	r2, [pc, #512]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dadd+0x4d0>
 8000fba:	e0ec      	b.n	8001196 <__aeabi_dadd+0x6aa>
 8000fbc:	0039      	movs	r1, r7
 8000fbe:	4449      	add	r1, r9
 8000fc0:	4549      	cmp	r1, r9
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4463      	add	r3, ip
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	07dd      	lsls	r5, r3, #31
 8000fcc:	0849      	lsrs	r1, r1, #1
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	0006      	movs	r6, r0
 8000fd4:	430d      	orrs	r5, r1
 8000fd6:	e6a5      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	1abd      	subs	r5, r7, r2
 8000fdc:	42af      	cmp	r7, r5
 8000fde:	4189      	sbcs	r1, r1
 8000fe0:	4662      	mov	r2, ip
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	1a5b      	subs	r3, r3, r1
 8000fe8:	4698      	mov	r8, r3
 8000fea:	4654      	mov	r4, sl
 8000fec:	e5d1      	b.n	8000b92 <__aeabi_dadd+0xa6>
 8000fee:	076c      	lsls	r4, r5, #29
 8000ff0:	08f9      	lsrs	r1, r7, #3
 8000ff2:	4321      	orrs	r1, r4
 8000ff4:	08eb      	lsrs	r3, r5, #3
 8000ff6:	0004      	movs	r4, r0
 8000ff8:	e69d      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000ffa:	464a      	mov	r2, r9
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	d175      	bne.n	80010ec <__aeabi_dadd+0x600>
 8001000:	4661      	mov	r1, ip
 8001002:	4339      	orrs	r1, r7
 8001004:	d114      	bne.n	8001030 <__aeabi_dadd+0x544>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	2400      	movs	r4, #0
 800100a:	031b      	lsls	r3, r3, #12
 800100c:	e6bc      	b.n	8000d88 <__aeabi_dadd+0x29c>
 800100e:	464a      	mov	r2, r9
 8001010:	1bd5      	subs	r5, r2, r7
 8001012:	45a9      	cmp	r9, r5
 8001014:	4189      	sbcs	r1, r1
 8001016:	4662      	mov	r2, ip
 8001018:	4249      	negs	r1, r1
 800101a:	1a9b      	subs	r3, r3, r2
 800101c:	1a5b      	subs	r3, r3, r1
 800101e:	4698      	mov	r8, r3
 8001020:	2601      	movs	r6, #1
 8001022:	e5ae      	b.n	8000b82 <__aeabi_dadd+0x96>
 8001024:	464a      	mov	r2, r9
 8001026:	08d1      	lsrs	r1, r2, #3
 8001028:	075a      	lsls	r2, r3, #29
 800102a:	4311      	orrs	r1, r2
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	e6a7      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001030:	4663      	mov	r3, ip
 8001032:	08f9      	lsrs	r1, r7, #3
 8001034:	075a      	lsls	r2, r3, #29
 8001036:	4654      	mov	r4, sl
 8001038:	4311      	orrs	r1, r2
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	e6a0      	b.n	8000d80 <__aeabi_dadd+0x294>
 800103e:	464a      	mov	r2, r9
 8001040:	4313      	orrs	r3, r2
 8001042:	001d      	movs	r5, r3
 8001044:	1e6b      	subs	r3, r5, #1
 8001046:	419d      	sbcs	r5, r3
 8001048:	e6c7      	b.n	8000dda <__aeabi_dadd+0x2ee>
 800104a:	0014      	movs	r4, r2
 800104c:	001e      	movs	r6, r3
 800104e:	3c20      	subs	r4, #32
 8001050:	40e6      	lsrs	r6, r4
 8001052:	2a20      	cmp	r2, #32
 8001054:	d005      	beq.n	8001062 <__aeabi_dadd+0x576>
 8001056:	2440      	movs	r4, #64	; 0x40
 8001058:	1aa2      	subs	r2, r4, r2
 800105a:	4093      	lsls	r3, r2
 800105c:	464a      	mov	r2, r9
 800105e:	431a      	orrs	r2, r3
 8001060:	4691      	mov	r9, r2
 8001062:	464d      	mov	r5, r9
 8001064:	1e6b      	subs	r3, r5, #1
 8001066:	419d      	sbcs	r5, r3
 8001068:	4335      	orrs	r5, r6
 800106a:	e778      	b.n	8000f5e <__aeabi_dadd+0x472>
 800106c:	464a      	mov	r2, r9
 800106e:	431a      	orrs	r2, r3
 8001070:	d000      	beq.n	8001074 <__aeabi_dadd+0x588>
 8001072:	e66b      	b.n	8000d4c <__aeabi_dadd+0x260>
 8001074:	076b      	lsls	r3, r5, #29
 8001076:	08f9      	lsrs	r1, r7, #3
 8001078:	4319      	orrs	r1, r3
 800107a:	08eb      	lsrs	r3, r5, #3
 800107c:	e680      	b.n	8000d80 <__aeabi_dadd+0x294>
 800107e:	4661      	mov	r1, ip
 8001080:	4339      	orrs	r1, r7
 8001082:	d054      	beq.n	800112e <__aeabi_dadd+0x642>
 8001084:	4663      	mov	r3, ip
 8001086:	08f9      	lsrs	r1, r7, #3
 8001088:	075c      	lsls	r4, r3, #29
 800108a:	4321      	orrs	r1, r4
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	0004      	movs	r4, r0
 8001090:	e654      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001092:	464a      	mov	r2, r9
 8001094:	1abd      	subs	r5, r7, r2
 8001096:	42af      	cmp	r7, r5
 8001098:	4189      	sbcs	r1, r1
 800109a:	4662      	mov	r2, ip
 800109c:	4249      	negs	r1, r1
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	1a5b      	subs	r3, r3, r1
 80010a2:	4698      	mov	r8, r3
 80010a4:	0004      	movs	r4, r0
 80010a6:	2601      	movs	r6, #1
 80010a8:	e56b      	b.n	8000b82 <__aeabi_dadd+0x96>
 80010aa:	464a      	mov	r2, r9
 80010ac:	1bd5      	subs	r5, r2, r7
 80010ae:	45a9      	cmp	r9, r5
 80010b0:	4189      	sbcs	r1, r1
 80010b2:	4662      	mov	r2, ip
 80010b4:	4249      	negs	r1, r1
 80010b6:	1a9a      	subs	r2, r3, r2
 80010b8:	1a52      	subs	r2, r2, r1
 80010ba:	4690      	mov	r8, r2
 80010bc:	0212      	lsls	r2, r2, #8
 80010be:	d532      	bpl.n	8001126 <__aeabi_dadd+0x63a>
 80010c0:	464a      	mov	r2, r9
 80010c2:	1abd      	subs	r5, r7, r2
 80010c4:	42af      	cmp	r7, r5
 80010c6:	4189      	sbcs	r1, r1
 80010c8:	4662      	mov	r2, ip
 80010ca:	4249      	negs	r1, r1
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	4698      	mov	r8, r3
 80010d2:	0004      	movs	r4, r0
 80010d4:	e584      	b.n	8000be0 <__aeabi_dadd+0xf4>
 80010d6:	4663      	mov	r3, ip
 80010d8:	08f9      	lsrs	r1, r7, #3
 80010da:	075a      	lsls	r2, r3, #29
 80010dc:	4311      	orrs	r1, r2
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	e64e      	b.n	8000d80 <__aeabi_dadd+0x294>
 80010e2:	08f9      	lsrs	r1, r7, #3
 80010e4:	0768      	lsls	r0, r5, #29
 80010e6:	4301      	orrs	r1, r0
 80010e8:	08eb      	lsrs	r3, r5, #3
 80010ea:	e624      	b.n	8000d36 <__aeabi_dadd+0x24a>
 80010ec:	4662      	mov	r2, ip
 80010ee:	433a      	orrs	r2, r7
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dadd+0x608>
 80010f2:	e698      	b.n	8000e26 <__aeabi_dadd+0x33a>
 80010f4:	464a      	mov	r2, r9
 80010f6:	08d1      	lsrs	r1, r2, #3
 80010f8:	075a      	lsls	r2, r3, #29
 80010fa:	4311      	orrs	r1, r2
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	031b      	lsls	r3, r3, #12
 8001102:	421a      	tst	r2, r3
 8001104:	d008      	beq.n	8001118 <__aeabi_dadd+0x62c>
 8001106:	4660      	mov	r0, ip
 8001108:	08c5      	lsrs	r5, r0, #3
 800110a:	421d      	tst	r5, r3
 800110c:	d104      	bne.n	8001118 <__aeabi_dadd+0x62c>
 800110e:	4654      	mov	r4, sl
 8001110:	002a      	movs	r2, r5
 8001112:	08f9      	lsrs	r1, r7, #3
 8001114:	0743      	lsls	r3, r0, #29
 8001116:	4319      	orrs	r1, r3
 8001118:	0f4b      	lsrs	r3, r1, #29
 800111a:	00c9      	lsls	r1, r1, #3
 800111c:	075b      	lsls	r3, r3, #29
 800111e:	08c9      	lsrs	r1, r1, #3
 8001120:	4319      	orrs	r1, r3
 8001122:	0013      	movs	r3, r2
 8001124:	e62c      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001126:	4641      	mov	r1, r8
 8001128:	4329      	orrs	r1, r5
 800112a:	d000      	beq.n	800112e <__aeabi_dadd+0x642>
 800112c:	e5fa      	b.n	8000d24 <__aeabi_dadd+0x238>
 800112e:	2300      	movs	r3, #0
 8001130:	000a      	movs	r2, r1
 8001132:	2400      	movs	r4, #0
 8001134:	e602      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001136:	076b      	lsls	r3, r5, #29
 8001138:	08f9      	lsrs	r1, r7, #3
 800113a:	4319      	orrs	r1, r3
 800113c:	08eb      	lsrs	r3, r5, #3
 800113e:	e5fd      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001140:	4663      	mov	r3, ip
 8001142:	08f9      	lsrs	r1, r7, #3
 8001144:	075b      	lsls	r3, r3, #29
 8001146:	4319      	orrs	r1, r3
 8001148:	4663      	mov	r3, ip
 800114a:	0004      	movs	r4, r0
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	e617      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001150:	003d      	movs	r5, r7
 8001152:	444d      	add	r5, r9
 8001154:	4463      	add	r3, ip
 8001156:	454d      	cmp	r5, r9
 8001158:	4189      	sbcs	r1, r1
 800115a:	4698      	mov	r8, r3
 800115c:	4249      	negs	r1, r1
 800115e:	4488      	add	r8, r1
 8001160:	4643      	mov	r3, r8
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	d400      	bmi.n	8001168 <__aeabi_dadd+0x67c>
 8001166:	e5dd      	b.n	8000d24 <__aeabi_dadd+0x238>
 8001168:	4642      	mov	r2, r8
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <__aeabi_dadd+0x6d0>)
 800116c:	2601      	movs	r6, #1
 800116e:	401a      	ands	r2, r3
 8001170:	4690      	mov	r8, r2
 8001172:	e5d7      	b.n	8000d24 <__aeabi_dadd+0x238>
 8001174:	0010      	movs	r0, r2
 8001176:	001e      	movs	r6, r3
 8001178:	3820      	subs	r0, #32
 800117a:	40c6      	lsrs	r6, r0
 800117c:	2a20      	cmp	r2, #32
 800117e:	d005      	beq.n	800118c <__aeabi_dadd+0x6a0>
 8001180:	2040      	movs	r0, #64	; 0x40
 8001182:	1a82      	subs	r2, r0, r2
 8001184:	4093      	lsls	r3, r2
 8001186:	464a      	mov	r2, r9
 8001188:	431a      	orrs	r2, r3
 800118a:	4691      	mov	r9, r2
 800118c:	464d      	mov	r5, r9
 800118e:	1e6b      	subs	r3, r5, #1
 8001190:	419d      	sbcs	r5, r3
 8001192:	4335      	orrs	r5, r6
 8001194:	e621      	b.n	8000dda <__aeabi_dadd+0x2ee>
 8001196:	0002      	movs	r2, r0
 8001198:	2300      	movs	r3, #0
 800119a:	2100      	movs	r1, #0
 800119c:	e540      	b.n	8000c20 <__aeabi_dadd+0x134>
 800119e:	464a      	mov	r2, r9
 80011a0:	19d5      	adds	r5, r2, r7
 80011a2:	42bd      	cmp	r5, r7
 80011a4:	4189      	sbcs	r1, r1
 80011a6:	4463      	add	r3, ip
 80011a8:	4698      	mov	r8, r3
 80011aa:	4249      	negs	r1, r1
 80011ac:	4488      	add	r8, r1
 80011ae:	e5b3      	b.n	8000d18 <__aeabi_dadd+0x22c>
 80011b0:	2100      	movs	r1, #0
 80011b2:	4a01      	ldr	r2, [pc, #4]	; (80011b8 <__aeabi_dadd+0x6cc>)
 80011b4:	000b      	movs	r3, r1
 80011b6:	e533      	b.n	8000c20 <__aeabi_dadd+0x134>
 80011b8:	000007ff 	.word	0x000007ff
 80011bc:	ff7fffff 	.word	0xff7fffff

080011c0 <__aeabi_ddiv>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	4657      	mov	r7, sl
 80011c4:	464e      	mov	r6, r9
 80011c6:	4645      	mov	r5, r8
 80011c8:	46de      	mov	lr, fp
 80011ca:	b5e0      	push	{r5, r6, r7, lr}
 80011cc:	4681      	mov	r9, r0
 80011ce:	0005      	movs	r5, r0
 80011d0:	030c      	lsls	r4, r1, #12
 80011d2:	0048      	lsls	r0, r1, #1
 80011d4:	4692      	mov	sl, r2
 80011d6:	001f      	movs	r7, r3
 80011d8:	b085      	sub	sp, #20
 80011da:	0b24      	lsrs	r4, r4, #12
 80011dc:	0d40      	lsrs	r0, r0, #21
 80011de:	0fce      	lsrs	r6, r1, #31
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d059      	beq.n	8001298 <__aeabi_ddiv+0xd8>
 80011e4:	4b87      	ldr	r3, [pc, #540]	; (8001404 <__aeabi_ddiv+0x244>)
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x2c>
 80011ea:	e098      	b.n	800131e <__aeabi_ddiv+0x15e>
 80011ec:	0f6b      	lsrs	r3, r5, #29
 80011ee:	00e4      	lsls	r4, r4, #3
 80011f0:	431c      	orrs	r4, r3
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	4323      	orrs	r3, r4
 80011f8:	4698      	mov	r8, r3
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <__aeabi_ddiv+0x248>)
 80011fc:	00ed      	lsls	r5, r5, #3
 80011fe:	469b      	mov	fp, r3
 8001200:	2300      	movs	r3, #0
 8001202:	4699      	mov	r9, r3
 8001204:	4483      	add	fp, r0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	033c      	lsls	r4, r7, #12
 800120a:	007b      	lsls	r3, r7, #1
 800120c:	4650      	mov	r0, sl
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	0fff      	lsrs	r7, r7, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d067      	beq.n	80012e8 <__aeabi_ddiv+0x128>
 8001218:	4a7a      	ldr	r2, [pc, #488]	; (8001404 <__aeabi_ddiv+0x244>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d018      	beq.n	8001250 <__aeabi_ddiv+0x90>
 800121e:	497a      	ldr	r1, [pc, #488]	; (8001408 <__aeabi_ddiv+0x248>)
 8001220:	0f42      	lsrs	r2, r0, #29
 8001222:	468c      	mov	ip, r1
 8001224:	00e4      	lsls	r4, r4, #3
 8001226:	4659      	mov	r1, fp
 8001228:	4314      	orrs	r4, r2
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	4463      	add	r3, ip
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	1acb      	subs	r3, r1, r3
 8001232:	4314      	orrs	r4, r2
 8001234:	469b      	mov	fp, r3
 8001236:	00c2      	lsls	r2, r0, #3
 8001238:	2000      	movs	r0, #0
 800123a:	0033      	movs	r3, r6
 800123c:	407b      	eors	r3, r7
 800123e:	469a      	mov	sl, r3
 8001240:	464b      	mov	r3, r9
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d900      	bls.n	8001248 <__aeabi_ddiv+0x88>
 8001246:	e0ef      	b.n	8001428 <__aeabi_ddiv+0x268>
 8001248:	4970      	ldr	r1, [pc, #448]	; (800140c <__aeabi_ddiv+0x24c>)
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	58cb      	ldr	r3, [r1, r3]
 800124e:	469f      	mov	pc, r3
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <__aeabi_ddiv+0x250>)
 8001252:	4652      	mov	r2, sl
 8001254:	469c      	mov	ip, r3
 8001256:	4322      	orrs	r2, r4
 8001258:	44e3      	add	fp, ip
 800125a:	2a00      	cmp	r2, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_ddiv+0xa0>
 800125e:	e095      	b.n	800138c <__aeabi_ddiv+0x1cc>
 8001260:	4649      	mov	r1, r9
 8001262:	2302      	movs	r3, #2
 8001264:	4319      	orrs	r1, r3
 8001266:	4689      	mov	r9, r1
 8001268:	2400      	movs	r4, #0
 800126a:	2002      	movs	r0, #2
 800126c:	e7e5      	b.n	800123a <__aeabi_ddiv+0x7a>
 800126e:	2300      	movs	r3, #0
 8001270:	2400      	movs	r4, #0
 8001272:	2500      	movs	r5, #0
 8001274:	4652      	mov	r2, sl
 8001276:	051b      	lsls	r3, r3, #20
 8001278:	4323      	orrs	r3, r4
 800127a:	07d2      	lsls	r2, r2, #31
 800127c:	4313      	orrs	r3, r2
 800127e:	0028      	movs	r0, r5
 8001280:	0019      	movs	r1, r3
 8001282:	b005      	add	sp, #20
 8001284:	bcf0      	pop	{r4, r5, r6, r7}
 8001286:	46bb      	mov	fp, r7
 8001288:	46b2      	mov	sl, r6
 800128a:	46a9      	mov	r9, r5
 800128c:	46a0      	mov	r8, r4
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001290:	2400      	movs	r4, #0
 8001292:	2500      	movs	r5, #0
 8001294:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <__aeabi_ddiv+0x244>)
 8001296:	e7ed      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001298:	464b      	mov	r3, r9
 800129a:	4323      	orrs	r3, r4
 800129c:	4698      	mov	r8, r3
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0xe2>
 80012a0:	e089      	b.n	80013b6 <__aeabi_ddiv+0x1f6>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_ddiv+0xe8>
 80012a6:	e1e0      	b.n	800166a <__aeabi_ddiv+0x4aa>
 80012a8:	0020      	movs	r0, r4
 80012aa:	f001 fb07 	bl	80028bc <__clzsi2>
 80012ae:	0001      	movs	r1, r0
 80012b0:	0002      	movs	r2, r0
 80012b2:	390b      	subs	r1, #11
 80012b4:	231d      	movs	r3, #29
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	4649      	mov	r1, r9
 80012ba:	0010      	movs	r0, r2
 80012bc:	40d9      	lsrs	r1, r3
 80012be:	3808      	subs	r0, #8
 80012c0:	4084      	lsls	r4, r0
 80012c2:	000b      	movs	r3, r1
 80012c4:	464d      	mov	r5, r9
 80012c6:	4323      	orrs	r3, r4
 80012c8:	4698      	mov	r8, r3
 80012ca:	4085      	lsls	r5, r0
 80012cc:	4851      	ldr	r0, [pc, #324]	; (8001414 <__aeabi_ddiv+0x254>)
 80012ce:	033c      	lsls	r4, r7, #12
 80012d0:	1a83      	subs	r3, r0, r2
 80012d2:	469b      	mov	fp, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	4699      	mov	r9, r3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	007b      	lsls	r3, r7, #1
 80012dc:	4650      	mov	r0, sl
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	0fff      	lsrs	r7, r7, #31
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d197      	bne.n	8001218 <__aeabi_ddiv+0x58>
 80012e8:	4652      	mov	r2, sl
 80012ea:	4322      	orrs	r2, r4
 80012ec:	d055      	beq.n	800139a <__aeabi_ddiv+0x1da>
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_ddiv+0x134>
 80012f2:	e1ca      	b.n	800168a <__aeabi_ddiv+0x4ca>
 80012f4:	0020      	movs	r0, r4
 80012f6:	f001 fae1 	bl	80028bc <__clzsi2>
 80012fa:	0002      	movs	r2, r0
 80012fc:	3a0b      	subs	r2, #11
 80012fe:	231d      	movs	r3, #29
 8001300:	0001      	movs	r1, r0
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	4652      	mov	r2, sl
 8001306:	3908      	subs	r1, #8
 8001308:	40da      	lsrs	r2, r3
 800130a:	408c      	lsls	r4, r1
 800130c:	4314      	orrs	r4, r2
 800130e:	4652      	mov	r2, sl
 8001310:	408a      	lsls	r2, r1
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <__aeabi_ddiv+0x258>)
 8001314:	4458      	add	r0, fp
 8001316:	469b      	mov	fp, r3
 8001318:	4483      	add	fp, r0
 800131a:	2000      	movs	r0, #0
 800131c:	e78d      	b.n	800123a <__aeabi_ddiv+0x7a>
 800131e:	464b      	mov	r3, r9
 8001320:	4323      	orrs	r3, r4
 8001322:	4698      	mov	r8, r3
 8001324:	d140      	bne.n	80013a8 <__aeabi_ddiv+0x1e8>
 8001326:	2308      	movs	r3, #8
 8001328:	4699      	mov	r9, r3
 800132a:	3b06      	subs	r3, #6
 800132c:	2500      	movs	r5, #0
 800132e:	4683      	mov	fp, r0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	e769      	b.n	8001208 <__aeabi_ddiv+0x48>
 8001334:	46b2      	mov	sl, r6
 8001336:	9b00      	ldr	r3, [sp, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d0a9      	beq.n	8001290 <__aeabi_ddiv+0xd0>
 800133c:	2b03      	cmp	r3, #3
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x182>
 8001340:	e211      	b.n	8001766 <__aeabi_ddiv+0x5a6>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d093      	beq.n	800126e <__aeabi_ddiv+0xae>
 8001346:	4a35      	ldr	r2, [pc, #212]	; (800141c <__aeabi_ddiv+0x25c>)
 8001348:	445a      	add	r2, fp
 800134a:	2a00      	cmp	r2, #0
 800134c:	dc00      	bgt.n	8001350 <__aeabi_ddiv+0x190>
 800134e:	e13c      	b.n	80015ca <__aeabi_ddiv+0x40a>
 8001350:	076b      	lsls	r3, r5, #29
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x196>
 8001354:	e1a7      	b.n	80016a6 <__aeabi_ddiv+0x4e6>
 8001356:	08ed      	lsrs	r5, r5, #3
 8001358:	4643      	mov	r3, r8
 800135a:	01db      	lsls	r3, r3, #7
 800135c:	d506      	bpl.n	800136c <__aeabi_ddiv+0x1ac>
 800135e:	4642      	mov	r2, r8
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <__aeabi_ddiv+0x260>)
 8001362:	401a      	ands	r2, r3
 8001364:	4690      	mov	r8, r2
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	445a      	add	r2, fp
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <__aeabi_ddiv+0x264>)
 800136e:	429a      	cmp	r2, r3
 8001370:	dc8e      	bgt.n	8001290 <__aeabi_ddiv+0xd0>
 8001372:	4643      	mov	r3, r8
 8001374:	0552      	lsls	r2, r2, #21
 8001376:	0758      	lsls	r0, r3, #29
 8001378:	025c      	lsls	r4, r3, #9
 800137a:	4305      	orrs	r5, r0
 800137c:	0b24      	lsrs	r4, r4, #12
 800137e:	0d53      	lsrs	r3, r2, #21
 8001380:	e778      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001382:	46ba      	mov	sl, r7
 8001384:	46a0      	mov	r8, r4
 8001386:	0015      	movs	r5, r2
 8001388:	9000      	str	r0, [sp, #0]
 800138a:	e7d4      	b.n	8001336 <__aeabi_ddiv+0x176>
 800138c:	464a      	mov	r2, r9
 800138e:	2303      	movs	r3, #3
 8001390:	431a      	orrs	r2, r3
 8001392:	4691      	mov	r9, r2
 8001394:	2003      	movs	r0, #3
 8001396:	4652      	mov	r2, sl
 8001398:	e74f      	b.n	800123a <__aeabi_ddiv+0x7a>
 800139a:	4649      	mov	r1, r9
 800139c:	2301      	movs	r3, #1
 800139e:	4319      	orrs	r1, r3
 80013a0:	4689      	mov	r9, r1
 80013a2:	2400      	movs	r4, #0
 80013a4:	2001      	movs	r0, #1
 80013a6:	e748      	b.n	800123a <__aeabi_ddiv+0x7a>
 80013a8:	230c      	movs	r3, #12
 80013aa:	4699      	mov	r9, r3
 80013ac:	3b09      	subs	r3, #9
 80013ae:	46a0      	mov	r8, r4
 80013b0:	4683      	mov	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	e728      	b.n	8001208 <__aeabi_ddiv+0x48>
 80013b6:	2304      	movs	r3, #4
 80013b8:	4699      	mov	r9, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	469b      	mov	fp, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	2500      	movs	r5, #0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	e720      	b.n	8001208 <__aeabi_ddiv+0x48>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	469a      	mov	sl, r3
 80013cc:	2500      	movs	r5, #0
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <__aeabi_ddiv+0x244>)
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	e74f      	b.n	8001274 <__aeabi_ddiv+0xb4>
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	4641      	mov	r1, r8
 80013d8:	031b      	lsls	r3, r3, #12
 80013da:	4219      	tst	r1, r3
 80013dc:	d008      	beq.n	80013f0 <__aeabi_ddiv+0x230>
 80013de:	421c      	tst	r4, r3
 80013e0:	d106      	bne.n	80013f0 <__aeabi_ddiv+0x230>
 80013e2:	431c      	orrs	r4, r3
 80013e4:	0324      	lsls	r4, r4, #12
 80013e6:	46ba      	mov	sl, r7
 80013e8:	0015      	movs	r5, r2
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__aeabi_ddiv+0x244>)
 80013ec:	0b24      	lsrs	r4, r4, #12
 80013ee:	e741      	b.n	8001274 <__aeabi_ddiv+0xb4>
 80013f0:	2480      	movs	r4, #128	; 0x80
 80013f2:	4643      	mov	r3, r8
 80013f4:	0324      	lsls	r4, r4, #12
 80013f6:	431c      	orrs	r4, r3
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	46b2      	mov	sl, r6
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <__aeabi_ddiv+0x244>)
 80013fe:	0b24      	lsrs	r4, r4, #12
 8001400:	e738      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	000007ff 	.word	0x000007ff
 8001408:	fffffc01 	.word	0xfffffc01
 800140c:	0800e51c 	.word	0x0800e51c
 8001410:	fffff801 	.word	0xfffff801
 8001414:	fffffc0d 	.word	0xfffffc0d
 8001418:	000003f3 	.word	0x000003f3
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	4544      	cmp	r4, r8
 800142a:	d200      	bcs.n	800142e <__aeabi_ddiv+0x26e>
 800142c:	e116      	b.n	800165c <__aeabi_ddiv+0x49c>
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x272>
 8001430:	e111      	b.n	8001656 <__aeabi_ddiv+0x496>
 8001432:	2301      	movs	r3, #1
 8001434:	425b      	negs	r3, r3
 8001436:	469c      	mov	ip, r3
 8001438:	002e      	movs	r6, r5
 800143a:	4640      	mov	r0, r8
 800143c:	2500      	movs	r5, #0
 800143e:	44e3      	add	fp, ip
 8001440:	0223      	lsls	r3, r4, #8
 8001442:	0e14      	lsrs	r4, r2, #24
 8001444:	431c      	orrs	r4, r3
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	4699      	mov	r9, r3
 800144a:	0423      	lsls	r3, r4, #16
 800144c:	0c1f      	lsrs	r7, r3, #16
 800144e:	0212      	lsls	r2, r2, #8
 8001450:	4649      	mov	r1, r9
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	9701      	str	r7, [sp, #4]
 8001456:	f7fe ff03 	bl	8000260 <__aeabi_uidivmod>
 800145a:	0002      	movs	r2, r0
 800145c:	437a      	muls	r2, r7
 800145e:	040b      	lsls	r3, r1, #16
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	4680      	mov	r8, r0
 8001464:	4319      	orrs	r1, r3
 8001466:	428a      	cmp	r2, r1
 8001468:	d90b      	bls.n	8001482 <__aeabi_ddiv+0x2c2>
 800146a:	2301      	movs	r3, #1
 800146c:	425b      	negs	r3, r3
 800146e:	469c      	mov	ip, r3
 8001470:	1909      	adds	r1, r1, r4
 8001472:	44e0      	add	r8, ip
 8001474:	428c      	cmp	r4, r1
 8001476:	d804      	bhi.n	8001482 <__aeabi_ddiv+0x2c2>
 8001478:	428a      	cmp	r2, r1
 800147a:	d902      	bls.n	8001482 <__aeabi_ddiv+0x2c2>
 800147c:	1e83      	subs	r3, r0, #2
 800147e:	4698      	mov	r8, r3
 8001480:	1909      	adds	r1, r1, r4
 8001482:	1a88      	subs	r0, r1, r2
 8001484:	4649      	mov	r1, r9
 8001486:	f7fe feeb 	bl	8000260 <__aeabi_uidivmod>
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	468c      	mov	ip, r1
 800148e:	0431      	lsls	r1, r6, #16
 8001490:	4666      	mov	r6, ip
 8001492:	9a01      	ldr	r2, [sp, #4]
 8001494:	0c09      	lsrs	r1, r1, #16
 8001496:	4342      	muls	r2, r0
 8001498:	0003      	movs	r3, r0
 800149a:	4331      	orrs	r1, r6
 800149c:	428a      	cmp	r2, r1
 800149e:	d904      	bls.n	80014aa <__aeabi_ddiv+0x2ea>
 80014a0:	1909      	adds	r1, r1, r4
 80014a2:	3b01      	subs	r3, #1
 80014a4:	428c      	cmp	r4, r1
 80014a6:	d800      	bhi.n	80014aa <__aeabi_ddiv+0x2ea>
 80014a8:	e111      	b.n	80016ce <__aeabi_ddiv+0x50e>
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	4642      	mov	r2, r8
 80014ae:	9e00      	ldr	r6, [sp, #0]
 80014b0:	0412      	lsls	r2, r2, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	0c33      	lsrs	r3, r6, #16
 80014b6:	001f      	movs	r7, r3
 80014b8:	0c10      	lsrs	r0, r2, #16
 80014ba:	4690      	mov	r8, r2
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	0413      	lsls	r3, r2, #16
 80014c0:	0432      	lsls	r2, r6, #16
 80014c2:	0c16      	lsrs	r6, r2, #16
 80014c4:	0032      	movs	r2, r6
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	435a      	muls	r2, r3
 80014ca:	9603      	str	r6, [sp, #12]
 80014cc:	437b      	muls	r3, r7
 80014ce:	4346      	muls	r6, r0
 80014d0:	4378      	muls	r0, r7
 80014d2:	0c17      	lsrs	r7, r2, #16
 80014d4:	46bc      	mov	ip, r7
 80014d6:	199b      	adds	r3, r3, r6
 80014d8:	4463      	add	r3, ip
 80014da:	429e      	cmp	r6, r3
 80014dc:	d903      	bls.n	80014e6 <__aeabi_ddiv+0x326>
 80014de:	2680      	movs	r6, #128	; 0x80
 80014e0:	0276      	lsls	r6, r6, #9
 80014e2:	46b4      	mov	ip, r6
 80014e4:	4460      	add	r0, ip
 80014e6:	0c1e      	lsrs	r6, r3, #16
 80014e8:	1830      	adds	r0, r6, r0
 80014ea:	0416      	lsls	r6, r2, #16
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c36      	lsrs	r6, r6, #16
 80014f0:	199e      	adds	r6, r3, r6
 80014f2:	4281      	cmp	r1, r0
 80014f4:	d200      	bcs.n	80014f8 <__aeabi_ddiv+0x338>
 80014f6:	e09c      	b.n	8001632 <__aeabi_ddiv+0x472>
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x33c>
 80014fa:	e097      	b.n	800162c <__aeabi_ddiv+0x46c>
 80014fc:	1bae      	subs	r6, r5, r6
 80014fe:	1a09      	subs	r1, r1, r0
 8001500:	42b5      	cmp	r5, r6
 8001502:	4180      	sbcs	r0, r0
 8001504:	4240      	negs	r0, r0
 8001506:	1a08      	subs	r0, r1, r0
 8001508:	4284      	cmp	r4, r0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x34e>
 800150c:	e111      	b.n	8001732 <__aeabi_ddiv+0x572>
 800150e:	4649      	mov	r1, r9
 8001510:	f7fe fea6 	bl	8000260 <__aeabi_uidivmod>
 8001514:	9a01      	ldr	r2, [sp, #4]
 8001516:	040b      	lsls	r3, r1, #16
 8001518:	4342      	muls	r2, r0
 800151a:	0c31      	lsrs	r1, r6, #16
 800151c:	0005      	movs	r5, r0
 800151e:	4319      	orrs	r1, r3
 8001520:	428a      	cmp	r2, r1
 8001522:	d907      	bls.n	8001534 <__aeabi_ddiv+0x374>
 8001524:	1909      	adds	r1, r1, r4
 8001526:	3d01      	subs	r5, #1
 8001528:	428c      	cmp	r4, r1
 800152a:	d803      	bhi.n	8001534 <__aeabi_ddiv+0x374>
 800152c:	428a      	cmp	r2, r1
 800152e:	d901      	bls.n	8001534 <__aeabi_ddiv+0x374>
 8001530:	1e85      	subs	r5, r0, #2
 8001532:	1909      	adds	r1, r1, r4
 8001534:	1a88      	subs	r0, r1, r2
 8001536:	4649      	mov	r1, r9
 8001538:	f7fe fe92 	bl	8000260 <__aeabi_uidivmod>
 800153c:	0409      	lsls	r1, r1, #16
 800153e:	468c      	mov	ip, r1
 8001540:	0431      	lsls	r1, r6, #16
 8001542:	4666      	mov	r6, ip
 8001544:	9a01      	ldr	r2, [sp, #4]
 8001546:	0c09      	lsrs	r1, r1, #16
 8001548:	4342      	muls	r2, r0
 800154a:	0003      	movs	r3, r0
 800154c:	4331      	orrs	r1, r6
 800154e:	428a      	cmp	r2, r1
 8001550:	d907      	bls.n	8001562 <__aeabi_ddiv+0x3a2>
 8001552:	1909      	adds	r1, r1, r4
 8001554:	3b01      	subs	r3, #1
 8001556:	428c      	cmp	r4, r1
 8001558:	d803      	bhi.n	8001562 <__aeabi_ddiv+0x3a2>
 800155a:	428a      	cmp	r2, r1
 800155c:	d901      	bls.n	8001562 <__aeabi_ddiv+0x3a2>
 800155e:	1e83      	subs	r3, r0, #2
 8001560:	1909      	adds	r1, r1, r4
 8001562:	9e03      	ldr	r6, [sp, #12]
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	0032      	movs	r2, r6
 8001568:	042d      	lsls	r5, r5, #16
 800156a:	431d      	orrs	r5, r3
 800156c:	9f02      	ldr	r7, [sp, #8]
 800156e:	042b      	lsls	r3, r5, #16
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	435a      	muls	r2, r3
 8001574:	437b      	muls	r3, r7
 8001576:	469c      	mov	ip, r3
 8001578:	0c28      	lsrs	r0, r5, #16
 800157a:	4346      	muls	r6, r0
 800157c:	0c13      	lsrs	r3, r2, #16
 800157e:	44b4      	add	ip, r6
 8001580:	4463      	add	r3, ip
 8001582:	4378      	muls	r0, r7
 8001584:	429e      	cmp	r6, r3
 8001586:	d903      	bls.n	8001590 <__aeabi_ddiv+0x3d0>
 8001588:	2680      	movs	r6, #128	; 0x80
 800158a:	0276      	lsls	r6, r6, #9
 800158c:	46b4      	mov	ip, r6
 800158e:	4460      	add	r0, ip
 8001590:	0c1e      	lsrs	r6, r3, #16
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	1830      	adds	r0, r6, r0
 800159a:	189b      	adds	r3, r3, r2
 800159c:	4281      	cmp	r1, r0
 800159e:	d306      	bcc.n	80015ae <__aeabi_ddiv+0x3ee>
 80015a0:	d002      	beq.n	80015a8 <__aeabi_ddiv+0x3e8>
 80015a2:	2301      	movs	r3, #1
 80015a4:	431d      	orrs	r5, r3
 80015a6:	e6ce      	b.n	8001346 <__aeabi_ddiv+0x186>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_ddiv+0x3ee>
 80015ac:	e6cb      	b.n	8001346 <__aeabi_ddiv+0x186>
 80015ae:	1861      	adds	r1, r4, r1
 80015b0:	1e6e      	subs	r6, r5, #1
 80015b2:	42a1      	cmp	r1, r4
 80015b4:	d200      	bcs.n	80015b8 <__aeabi_ddiv+0x3f8>
 80015b6:	e0a4      	b.n	8001702 <__aeabi_ddiv+0x542>
 80015b8:	4281      	cmp	r1, r0
 80015ba:	d200      	bcs.n	80015be <__aeabi_ddiv+0x3fe>
 80015bc:	e0c9      	b.n	8001752 <__aeabi_ddiv+0x592>
 80015be:	d100      	bne.n	80015c2 <__aeabi_ddiv+0x402>
 80015c0:	e0d9      	b.n	8001776 <__aeabi_ddiv+0x5b6>
 80015c2:	0035      	movs	r5, r6
 80015c4:	e7ed      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 80015c6:	2501      	movs	r5, #1
 80015c8:	426d      	negs	r5, r5
 80015ca:	2101      	movs	r1, #1
 80015cc:	1a89      	subs	r1, r1, r2
 80015ce:	2938      	cmp	r1, #56	; 0x38
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_ddiv+0x414>
 80015d2:	e64c      	b.n	800126e <__aeabi_ddiv+0xae>
 80015d4:	291f      	cmp	r1, #31
 80015d6:	dc00      	bgt.n	80015da <__aeabi_ddiv+0x41a>
 80015d8:	e07f      	b.n	80016da <__aeabi_ddiv+0x51a>
 80015da:	231f      	movs	r3, #31
 80015dc:	425b      	negs	r3, r3
 80015de:	1a9a      	subs	r2, r3, r2
 80015e0:	4643      	mov	r3, r8
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	2920      	cmp	r1, #32
 80015e6:	d004      	beq.n	80015f2 <__aeabi_ddiv+0x432>
 80015e8:	4644      	mov	r4, r8
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <__aeabi_ddiv+0x5c0>)
 80015ec:	445a      	add	r2, fp
 80015ee:	4094      	lsls	r4, r2
 80015f0:	4325      	orrs	r5, r4
 80015f2:	1e6a      	subs	r2, r5, #1
 80015f4:	4195      	sbcs	r5, r2
 80015f6:	2207      	movs	r2, #7
 80015f8:	432b      	orrs	r3, r5
 80015fa:	0015      	movs	r5, r2
 80015fc:	2400      	movs	r4, #0
 80015fe:	401d      	ands	r5, r3
 8001600:	421a      	tst	r2, r3
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x446>
 8001604:	e0a1      	b.n	800174a <__aeabi_ddiv+0x58a>
 8001606:	220f      	movs	r2, #15
 8001608:	2400      	movs	r4, #0
 800160a:	401a      	ands	r2, r3
 800160c:	2a04      	cmp	r2, #4
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x452>
 8001610:	e098      	b.n	8001744 <__aeabi_ddiv+0x584>
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	429a      	cmp	r2, r3
 8001616:	419b      	sbcs	r3, r3
 8001618:	425b      	negs	r3, r3
 800161a:	18e4      	adds	r4, r4, r3
 800161c:	0013      	movs	r3, r2
 800161e:	0222      	lsls	r2, r4, #8
 8001620:	d400      	bmi.n	8001624 <__aeabi_ddiv+0x464>
 8001622:	e08f      	b.n	8001744 <__aeabi_ddiv+0x584>
 8001624:	2301      	movs	r3, #1
 8001626:	2400      	movs	r4, #0
 8001628:	2500      	movs	r5, #0
 800162a:	e623      	b.n	8001274 <__aeabi_ddiv+0xb4>
 800162c:	42b5      	cmp	r5, r6
 800162e:	d300      	bcc.n	8001632 <__aeabi_ddiv+0x472>
 8001630:	e764      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001632:	4643      	mov	r3, r8
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	469c      	mov	ip, r3
 800163a:	4465      	add	r5, ip
 800163c:	001f      	movs	r7, r3
 800163e:	429d      	cmp	r5, r3
 8001640:	419b      	sbcs	r3, r3
 8001642:	425b      	negs	r3, r3
 8001644:	191b      	adds	r3, r3, r4
 8001646:	18c9      	adds	r1, r1, r3
 8001648:	428c      	cmp	r4, r1
 800164a:	d23a      	bcs.n	80016c2 <__aeabi_ddiv+0x502>
 800164c:	4288      	cmp	r0, r1
 800164e:	d863      	bhi.n	8001718 <__aeabi_ddiv+0x558>
 8001650:	d060      	beq.n	8001714 <__aeabi_ddiv+0x554>
 8001652:	4690      	mov	r8, r2
 8001654:	e752      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001656:	42aa      	cmp	r2, r5
 8001658:	d900      	bls.n	800165c <__aeabi_ddiv+0x49c>
 800165a:	e6ea      	b.n	8001432 <__aeabi_ddiv+0x272>
 800165c:	4643      	mov	r3, r8
 800165e:	07de      	lsls	r6, r3, #31
 8001660:	0858      	lsrs	r0, r3, #1
 8001662:	086b      	lsrs	r3, r5, #1
 8001664:	431e      	orrs	r6, r3
 8001666:	07ed      	lsls	r5, r5, #31
 8001668:	e6ea      	b.n	8001440 <__aeabi_ddiv+0x280>
 800166a:	4648      	mov	r0, r9
 800166c:	f001 f926 	bl	80028bc <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	0002      	movs	r2, r0
 8001674:	3115      	adds	r1, #21
 8001676:	3220      	adds	r2, #32
 8001678:	291c      	cmp	r1, #28
 800167a:	dc00      	bgt.n	800167e <__aeabi_ddiv+0x4be>
 800167c:	e61a      	b.n	80012b4 <__aeabi_ddiv+0xf4>
 800167e:	464b      	mov	r3, r9
 8001680:	3808      	subs	r0, #8
 8001682:	4083      	lsls	r3, r0
 8001684:	2500      	movs	r5, #0
 8001686:	4698      	mov	r8, r3
 8001688:	e620      	b.n	80012cc <__aeabi_ddiv+0x10c>
 800168a:	f001 f917 	bl	80028bc <__clzsi2>
 800168e:	0003      	movs	r3, r0
 8001690:	001a      	movs	r2, r3
 8001692:	3215      	adds	r2, #21
 8001694:	3020      	adds	r0, #32
 8001696:	2a1c      	cmp	r2, #28
 8001698:	dc00      	bgt.n	800169c <__aeabi_ddiv+0x4dc>
 800169a:	e630      	b.n	80012fe <__aeabi_ddiv+0x13e>
 800169c:	4654      	mov	r4, sl
 800169e:	3b08      	subs	r3, #8
 80016a0:	2200      	movs	r2, #0
 80016a2:	409c      	lsls	r4, r3
 80016a4:	e635      	b.n	8001312 <__aeabi_ddiv+0x152>
 80016a6:	230f      	movs	r3, #15
 80016a8:	402b      	ands	r3, r5
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x4f0>
 80016ae:	e652      	b.n	8001356 <__aeabi_ddiv+0x196>
 80016b0:	2305      	movs	r3, #5
 80016b2:	425b      	negs	r3, r3
 80016b4:	42ab      	cmp	r3, r5
 80016b6:	419b      	sbcs	r3, r3
 80016b8:	3504      	adds	r5, #4
 80016ba:	425b      	negs	r3, r3
 80016bc:	08ed      	lsrs	r5, r5, #3
 80016be:	4498      	add	r8, r3
 80016c0:	e64a      	b.n	8001358 <__aeabi_ddiv+0x198>
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d1c5      	bne.n	8001652 <__aeabi_ddiv+0x492>
 80016c6:	42af      	cmp	r7, r5
 80016c8:	d9c0      	bls.n	800164c <__aeabi_ddiv+0x48c>
 80016ca:	4690      	mov	r8, r2
 80016cc:	e716      	b.n	80014fc <__aeabi_ddiv+0x33c>
 80016ce:	428a      	cmp	r2, r1
 80016d0:	d800      	bhi.n	80016d4 <__aeabi_ddiv+0x514>
 80016d2:	e6ea      	b.n	80014aa <__aeabi_ddiv+0x2ea>
 80016d4:	1e83      	subs	r3, r0, #2
 80016d6:	1909      	adds	r1, r1, r4
 80016d8:	e6e7      	b.n	80014aa <__aeabi_ddiv+0x2ea>
 80016da:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <__aeabi_ddiv+0x5c4>)
 80016dc:	0028      	movs	r0, r5
 80016de:	445a      	add	r2, fp
 80016e0:	4643      	mov	r3, r8
 80016e2:	4095      	lsls	r5, r2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	40c8      	lsrs	r0, r1
 80016e8:	1e6a      	subs	r2, r5, #1
 80016ea:	4195      	sbcs	r5, r2
 80016ec:	4644      	mov	r4, r8
 80016ee:	4303      	orrs	r3, r0
 80016f0:	432b      	orrs	r3, r5
 80016f2:	40cc      	lsrs	r4, r1
 80016f4:	075a      	lsls	r2, r3, #29
 80016f6:	d092      	beq.n	800161e <__aeabi_ddiv+0x45e>
 80016f8:	220f      	movs	r2, #15
 80016fa:	401a      	ands	r2, r3
 80016fc:	2a04      	cmp	r2, #4
 80016fe:	d188      	bne.n	8001612 <__aeabi_ddiv+0x452>
 8001700:	e78d      	b.n	800161e <__aeabi_ddiv+0x45e>
 8001702:	0035      	movs	r5, r6
 8001704:	4281      	cmp	r1, r0
 8001706:	d000      	beq.n	800170a <__aeabi_ddiv+0x54a>
 8001708:	e74b      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 800170a:	9a00      	ldr	r2, [sp, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d000      	beq.n	8001712 <__aeabi_ddiv+0x552>
 8001710:	e747      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 8001712:	e618      	b.n	8001346 <__aeabi_ddiv+0x186>
 8001714:	42ae      	cmp	r6, r5
 8001716:	d99c      	bls.n	8001652 <__aeabi_ddiv+0x492>
 8001718:	2302      	movs	r3, #2
 800171a:	425b      	negs	r3, r3
 800171c:	469c      	mov	ip, r3
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	44e0      	add	r8, ip
 8001722:	469c      	mov	ip, r3
 8001724:	4465      	add	r5, ip
 8001726:	429d      	cmp	r5, r3
 8001728:	419b      	sbcs	r3, r3
 800172a:	425b      	negs	r3, r3
 800172c:	191b      	adds	r3, r3, r4
 800172e:	18c9      	adds	r1, r1, r3
 8001730:	e6e4      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <__aeabi_ddiv+0x5c8>)
 8001734:	445a      	add	r2, fp
 8001736:	2a00      	cmp	r2, #0
 8001738:	dc00      	bgt.n	800173c <__aeabi_ddiv+0x57c>
 800173a:	e744      	b.n	80015c6 <__aeabi_ddiv+0x406>
 800173c:	2301      	movs	r3, #1
 800173e:	2500      	movs	r5, #0
 8001740:	4498      	add	r8, r3
 8001742:	e609      	b.n	8001358 <__aeabi_ddiv+0x198>
 8001744:	0765      	lsls	r5, r4, #29
 8001746:	0264      	lsls	r4, r4, #9
 8001748:	0b24      	lsrs	r4, r4, #12
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	431d      	orrs	r5, r3
 800174e:	2300      	movs	r3, #0
 8001750:	e590      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001752:	9e00      	ldr	r6, [sp, #0]
 8001754:	3d02      	subs	r5, #2
 8001756:	0072      	lsls	r2, r6, #1
 8001758:	42b2      	cmp	r2, r6
 800175a:	41bf      	sbcs	r7, r7
 800175c:	427f      	negs	r7, r7
 800175e:	193c      	adds	r4, r7, r4
 8001760:	1909      	adds	r1, r1, r4
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	e7ce      	b.n	8001704 <__aeabi_ddiv+0x544>
 8001766:	2480      	movs	r4, #128	; 0x80
 8001768:	4643      	mov	r3, r8
 800176a:	0324      	lsls	r4, r4, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <__aeabi_ddiv+0x5cc>)
 8001772:	0b24      	lsrs	r4, r4, #12
 8001774:	e57e      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001776:	9a00      	ldr	r2, [sp, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3ea      	bcc.n	8001752 <__aeabi_ddiv+0x592>
 800177c:	0035      	movs	r5, r6
 800177e:	e7c4      	b.n	800170a <__aeabi_ddiv+0x54a>
 8001780:	0000043e 	.word	0x0000043e
 8001784:	0000041e 	.word	0x0000041e
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	464f      	mov	r7, r9
 8001794:	4646      	mov	r6, r8
 8001796:	46d6      	mov	lr, sl
 8001798:	4694      	mov	ip, r2
 800179a:	4691      	mov	r9, r2
 800179c:	031a      	lsls	r2, r3, #12
 800179e:	0b12      	lsrs	r2, r2, #12
 80017a0:	4d18      	ldr	r5, [pc, #96]	; (8001804 <__eqdf2+0x74>)
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	004c      	lsls	r4, r1, #1
 80017a6:	030f      	lsls	r7, r1, #12
 80017a8:	4692      	mov	sl, r2
 80017aa:	005a      	lsls	r2, r3, #1
 80017ac:	0006      	movs	r6, r0
 80017ae:	4680      	mov	r8, r0
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	2001      	movs	r0, #1
 80017b4:	0d64      	lsrs	r4, r4, #21
 80017b6:	0fc9      	lsrs	r1, r1, #31
 80017b8:	0d52      	lsrs	r2, r2, #21
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	42ac      	cmp	r4, r5
 80017be:	d00a      	beq.n	80017d6 <__eqdf2+0x46>
 80017c0:	42aa      	cmp	r2, r5
 80017c2:	d003      	beq.n	80017cc <__eqdf2+0x3c>
 80017c4:	4294      	cmp	r4, r2
 80017c6:	d101      	bne.n	80017cc <__eqdf2+0x3c>
 80017c8:	4557      	cmp	r7, sl
 80017ca:	d00d      	beq.n	80017e8 <__eqdf2+0x58>
 80017cc:	bce0      	pop	{r5, r6, r7}
 80017ce:	46ba      	mov	sl, r7
 80017d0:	46b1      	mov	r9, r6
 80017d2:	46a8      	mov	r8, r5
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	003d      	movs	r5, r7
 80017d8:	4335      	orrs	r5, r6
 80017da:	d1f7      	bne.n	80017cc <__eqdf2+0x3c>
 80017dc:	42a2      	cmp	r2, r4
 80017de:	d1f5      	bne.n	80017cc <__eqdf2+0x3c>
 80017e0:	4652      	mov	r2, sl
 80017e2:	4665      	mov	r5, ip
 80017e4:	432a      	orrs	r2, r5
 80017e6:	d1f1      	bne.n	80017cc <__eqdf2+0x3c>
 80017e8:	2001      	movs	r0, #1
 80017ea:	45c8      	cmp	r8, r9
 80017ec:	d1ee      	bne.n	80017cc <__eqdf2+0x3c>
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d006      	beq.n	8001800 <__eqdf2+0x70>
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	d1ea      	bne.n	80017cc <__eqdf2+0x3c>
 80017f6:	433e      	orrs	r6, r7
 80017f8:	0030      	movs	r0, r6
 80017fa:	1e46      	subs	r6, r0, #1
 80017fc:	41b0      	sbcs	r0, r6
 80017fe:	e7e5      	b.n	80017cc <__eqdf2+0x3c>
 8001800:	2000      	movs	r0, #0
 8001802:	e7e3      	b.n	80017cc <__eqdf2+0x3c>
 8001804:	000007ff 	.word	0x000007ff

08001808 <__gedf2>:
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	464e      	mov	r6, r9
 800180c:	4645      	mov	r5, r8
 800180e:	4657      	mov	r7, sl
 8001810:	46de      	mov	lr, fp
 8001812:	0004      	movs	r4, r0
 8001814:	0018      	movs	r0, r3
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	0016      	movs	r6, r2
 800181a:	031b      	lsls	r3, r3, #12
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	4d32      	ldr	r5, [pc, #200]	; (80018e8 <__gedf2+0xe0>)
 8001820:	030f      	lsls	r7, r1, #12
 8001822:	004a      	lsls	r2, r1, #1
 8001824:	4699      	mov	r9, r3
 8001826:	0043      	lsls	r3, r0, #1
 8001828:	46a4      	mov	ip, r4
 800182a:	46b0      	mov	r8, r6
 800182c:	0b3f      	lsrs	r7, r7, #12
 800182e:	0d52      	lsrs	r2, r2, #21
 8001830:	0fc9      	lsrs	r1, r1, #31
 8001832:	0d5b      	lsrs	r3, r3, #21
 8001834:	0fc0      	lsrs	r0, r0, #31
 8001836:	42aa      	cmp	r2, r5
 8001838:	d029      	beq.n	800188e <__gedf2+0x86>
 800183a:	42ab      	cmp	r3, r5
 800183c:	d018      	beq.n	8001870 <__gedf2+0x68>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d12a      	bne.n	8001898 <__gedf2+0x90>
 8001842:	433c      	orrs	r4, r7
 8001844:	46a3      	mov	fp, r4
 8001846:	4265      	negs	r5, r4
 8001848:	4165      	adcs	r5, r4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <__gedf2+0x4c>
 800184e:	464c      	mov	r4, r9
 8001850:	4326      	orrs	r6, r4
 8001852:	d027      	beq.n	80018a4 <__gedf2+0x9c>
 8001854:	2d00      	cmp	r5, #0
 8001856:	d115      	bne.n	8001884 <__gedf2+0x7c>
 8001858:	4281      	cmp	r1, r0
 800185a:	d028      	beq.n	80018ae <__gedf2+0xa6>
 800185c:	2002      	movs	r0, #2
 800185e:	3901      	subs	r1, #1
 8001860:	4008      	ands	r0, r1
 8001862:	3801      	subs	r0, #1
 8001864:	bcf0      	pop	{r4, r5, r6, r7}
 8001866:	46bb      	mov	fp, r7
 8001868:	46b2      	mov	sl, r6
 800186a:	46a9      	mov	r9, r5
 800186c:	46a0      	mov	r8, r4
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001870:	464d      	mov	r5, r9
 8001872:	432e      	orrs	r6, r5
 8001874:	d12f      	bne.n	80018d6 <__gedf2+0xce>
 8001876:	2a00      	cmp	r2, #0
 8001878:	d1ee      	bne.n	8001858 <__gedf2+0x50>
 800187a:	433c      	orrs	r4, r7
 800187c:	4265      	negs	r5, r4
 800187e:	4165      	adcs	r5, r4
 8001880:	2d00      	cmp	r5, #0
 8001882:	d0e9      	beq.n	8001858 <__gedf2+0x50>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1ed      	bne.n	8001864 <__gedf2+0x5c>
 8001888:	2001      	movs	r0, #1
 800188a:	4240      	negs	r0, r0
 800188c:	e7ea      	b.n	8001864 <__gedf2+0x5c>
 800188e:	003d      	movs	r5, r7
 8001890:	4325      	orrs	r5, r4
 8001892:	d120      	bne.n	80018d6 <__gedf2+0xce>
 8001894:	4293      	cmp	r3, r2
 8001896:	d0eb      	beq.n	8001870 <__gedf2+0x68>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1dd      	bne.n	8001858 <__gedf2+0x50>
 800189c:	464c      	mov	r4, r9
 800189e:	4326      	orrs	r6, r4
 80018a0:	d1da      	bne.n	8001858 <__gedf2+0x50>
 80018a2:	e7db      	b.n	800185c <__gedf2+0x54>
 80018a4:	465b      	mov	r3, fp
 80018a6:	2000      	movs	r0, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0db      	beq.n	8001864 <__gedf2+0x5c>
 80018ac:	e7d6      	b.n	800185c <__gedf2+0x54>
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dc0a      	bgt.n	80018c8 <__gedf2+0xc0>
 80018b2:	dbe7      	blt.n	8001884 <__gedf2+0x7c>
 80018b4:	454f      	cmp	r7, r9
 80018b6:	d8d1      	bhi.n	800185c <__gedf2+0x54>
 80018b8:	d010      	beq.n	80018dc <__gedf2+0xd4>
 80018ba:	2000      	movs	r0, #0
 80018bc:	454f      	cmp	r7, r9
 80018be:	d2d1      	bcs.n	8001864 <__gedf2+0x5c>
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d0e1      	beq.n	8001888 <__gedf2+0x80>
 80018c4:	0008      	movs	r0, r1
 80018c6:	e7cd      	b.n	8001864 <__gedf2+0x5c>
 80018c8:	4243      	negs	r3, r0
 80018ca:	4158      	adcs	r0, r3
 80018cc:	2302      	movs	r3, #2
 80018ce:	4240      	negs	r0, r0
 80018d0:	4018      	ands	r0, r3
 80018d2:	3801      	subs	r0, #1
 80018d4:	e7c6      	b.n	8001864 <__gedf2+0x5c>
 80018d6:	2002      	movs	r0, #2
 80018d8:	4240      	negs	r0, r0
 80018da:	e7c3      	b.n	8001864 <__gedf2+0x5c>
 80018dc:	45c4      	cmp	ip, r8
 80018de:	d8bd      	bhi.n	800185c <__gedf2+0x54>
 80018e0:	2000      	movs	r0, #0
 80018e2:	45c4      	cmp	ip, r8
 80018e4:	d2be      	bcs.n	8001864 <__gedf2+0x5c>
 80018e6:	e7eb      	b.n	80018c0 <__gedf2+0xb8>
 80018e8:	000007ff 	.word	0x000007ff

080018ec <__ledf2>:
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	464e      	mov	r6, r9
 80018f0:	4645      	mov	r5, r8
 80018f2:	4657      	mov	r7, sl
 80018f4:	46de      	mov	lr, fp
 80018f6:	0004      	movs	r4, r0
 80018f8:	0018      	movs	r0, r3
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	0016      	movs	r6, r2
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	0b1b      	lsrs	r3, r3, #12
 8001902:	4d31      	ldr	r5, [pc, #196]	; (80019c8 <__ledf2+0xdc>)
 8001904:	030f      	lsls	r7, r1, #12
 8001906:	004a      	lsls	r2, r1, #1
 8001908:	4699      	mov	r9, r3
 800190a:	0043      	lsls	r3, r0, #1
 800190c:	46a4      	mov	ip, r4
 800190e:	46b0      	mov	r8, r6
 8001910:	0b3f      	lsrs	r7, r7, #12
 8001912:	0d52      	lsrs	r2, r2, #21
 8001914:	0fc9      	lsrs	r1, r1, #31
 8001916:	0d5b      	lsrs	r3, r3, #21
 8001918:	0fc0      	lsrs	r0, r0, #31
 800191a:	42aa      	cmp	r2, r5
 800191c:	d011      	beq.n	8001942 <__ledf2+0x56>
 800191e:	42ab      	cmp	r3, r5
 8001920:	d014      	beq.n	800194c <__ledf2+0x60>
 8001922:	2a00      	cmp	r2, #0
 8001924:	d12f      	bne.n	8001986 <__ledf2+0x9a>
 8001926:	433c      	orrs	r4, r7
 8001928:	46a3      	mov	fp, r4
 800192a:	4265      	negs	r5, r4
 800192c:	4165      	adcs	r5, r4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d114      	bne.n	800195c <__ledf2+0x70>
 8001932:	464c      	mov	r4, r9
 8001934:	4326      	orrs	r6, r4
 8001936:	d111      	bne.n	800195c <__ledf2+0x70>
 8001938:	465b      	mov	r3, fp
 800193a:	2000      	movs	r0, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <__ledf2+0x84>
 8001940:	e010      	b.n	8001964 <__ledf2+0x78>
 8001942:	003d      	movs	r5, r7
 8001944:	4325      	orrs	r5, r4
 8001946:	d112      	bne.n	800196e <__ledf2+0x82>
 8001948:	4293      	cmp	r3, r2
 800194a:	d11c      	bne.n	8001986 <__ledf2+0x9a>
 800194c:	464d      	mov	r5, r9
 800194e:	432e      	orrs	r6, r5
 8001950:	d10d      	bne.n	800196e <__ledf2+0x82>
 8001952:	2a00      	cmp	r2, #0
 8001954:	d104      	bne.n	8001960 <__ledf2+0x74>
 8001956:	433c      	orrs	r4, r7
 8001958:	4265      	negs	r5, r4
 800195a:	4165      	adcs	r5, r4
 800195c:	2d00      	cmp	r5, #0
 800195e:	d10d      	bne.n	800197c <__ledf2+0x90>
 8001960:	4281      	cmp	r1, r0
 8001962:	d016      	beq.n	8001992 <__ledf2+0xa6>
 8001964:	2002      	movs	r0, #2
 8001966:	3901      	subs	r1, #1
 8001968:	4008      	ands	r0, r1
 800196a:	3801      	subs	r0, #1
 800196c:	e000      	b.n	8001970 <__ledf2+0x84>
 800196e:	2002      	movs	r0, #2
 8001970:	bcf0      	pop	{r4, r5, r6, r7}
 8001972:	46bb      	mov	fp, r7
 8001974:	46b2      	mov	sl, r6
 8001976:	46a9      	mov	r9, r5
 8001978:	46a0      	mov	r8, r4
 800197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197c:	2800      	cmp	r0, #0
 800197e:	d1f7      	bne.n	8001970 <__ledf2+0x84>
 8001980:	2001      	movs	r0, #1
 8001982:	4240      	negs	r0, r0
 8001984:	e7f4      	b.n	8001970 <__ledf2+0x84>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ea      	bne.n	8001960 <__ledf2+0x74>
 800198a:	464c      	mov	r4, r9
 800198c:	4326      	orrs	r6, r4
 800198e:	d1e7      	bne.n	8001960 <__ledf2+0x74>
 8001990:	e7e8      	b.n	8001964 <__ledf2+0x78>
 8001992:	429a      	cmp	r2, r3
 8001994:	dd06      	ble.n	80019a4 <__ledf2+0xb8>
 8001996:	4243      	negs	r3, r0
 8001998:	4158      	adcs	r0, r3
 800199a:	2302      	movs	r3, #2
 800199c:	4240      	negs	r0, r0
 800199e:	4018      	ands	r0, r3
 80019a0:	3801      	subs	r0, #1
 80019a2:	e7e5      	b.n	8001970 <__ledf2+0x84>
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbe9      	blt.n	800197c <__ledf2+0x90>
 80019a8:	454f      	cmp	r7, r9
 80019aa:	d8db      	bhi.n	8001964 <__ledf2+0x78>
 80019ac:	d006      	beq.n	80019bc <__ledf2+0xd0>
 80019ae:	2000      	movs	r0, #0
 80019b0:	454f      	cmp	r7, r9
 80019b2:	d2dd      	bcs.n	8001970 <__ledf2+0x84>
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d0e3      	beq.n	8001980 <__ledf2+0x94>
 80019b8:	0008      	movs	r0, r1
 80019ba:	e7d9      	b.n	8001970 <__ledf2+0x84>
 80019bc:	45c4      	cmp	ip, r8
 80019be:	d8d1      	bhi.n	8001964 <__ledf2+0x78>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c4      	cmp	ip, r8
 80019c4:	d2d4      	bcs.n	8001970 <__ledf2+0x84>
 80019c6:	e7f5      	b.n	80019b4 <__ledf2+0xc8>
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_dmul>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	464e      	mov	r6, r9
 80019d2:	4645      	mov	r5, r8
 80019d4:	46de      	mov	lr, fp
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	4698      	mov	r8, r3
 80019da:	030c      	lsls	r4, r1, #12
 80019dc:	004b      	lsls	r3, r1, #1
 80019de:	0006      	movs	r6, r0
 80019e0:	4692      	mov	sl, r2
 80019e2:	b087      	sub	sp, #28
 80019e4:	0b24      	lsrs	r4, r4, #12
 80019e6:	0d5b      	lsrs	r3, r3, #21
 80019e8:	0fcf      	lsrs	r7, r1, #31
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <__aeabi_dmul+0xfc>
 80019ee:	4add      	ldr	r2, [pc, #884]	; (8001d64 <__aeabi_dmul+0x398>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dmul+0x2a>
 80019f4:	e086      	b.n	8001b04 <__aeabi_dmul+0x138>
 80019f6:	0f42      	lsrs	r2, r0, #29
 80019f8:	00e4      	lsls	r4, r4, #3
 80019fa:	4314      	orrs	r4, r2
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	4314      	orrs	r4, r2
 8001a02:	4ad9      	ldr	r2, [pc, #868]	; (8001d68 <__aeabi_dmul+0x39c>)
 8001a04:	00c5      	lsls	r5, r0, #3
 8001a06:	4694      	mov	ip, r2
 8001a08:	4463      	add	r3, ip
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4699      	mov	r9, r3
 8001a10:	469b      	mov	fp, r3
 8001a12:	4643      	mov	r3, r8
 8001a14:	4642      	mov	r2, r8
 8001a16:	031e      	lsls	r6, r3, #12
 8001a18:	0fd2      	lsrs	r2, r2, #31
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4650      	mov	r0, sl
 8001a1e:	4690      	mov	r8, r2
 8001a20:	0b36      	lsrs	r6, r6, #12
 8001a22:	0d5b      	lsrs	r3, r3, #21
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dmul+0x5c>
 8001a26:	e078      	b.n	8001b1a <__aeabi_dmul+0x14e>
 8001a28:	4ace      	ldr	r2, [pc, #824]	; (8001d64 <__aeabi_dmul+0x398>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01d      	beq.n	8001a6a <__aeabi_dmul+0x9e>
 8001a2e:	49ce      	ldr	r1, [pc, #824]	; (8001d68 <__aeabi_dmul+0x39c>)
 8001a30:	0f42      	lsrs	r2, r0, #29
 8001a32:	468c      	mov	ip, r1
 8001a34:	9900      	ldr	r1, [sp, #0]
 8001a36:	4463      	add	r3, ip
 8001a38:	00f6      	lsls	r6, r6, #3
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	4316      	orrs	r6, r2
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	449c      	add	ip, r3
 8001a42:	0412      	lsls	r2, r2, #16
 8001a44:	4663      	mov	r3, ip
 8001a46:	4316      	orrs	r6, r2
 8001a48:	00c2      	lsls	r2, r0, #3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	9900      	ldr	r1, [sp, #0]
 8001a50:	4643      	mov	r3, r8
 8001a52:	3101      	adds	r1, #1
 8001a54:	468c      	mov	ip, r1
 8001a56:	4649      	mov	r1, r9
 8001a58:	407b      	eors	r3, r7
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	290f      	cmp	r1, #15
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_dmul+0x96>
 8001a60:	e07e      	b.n	8001b60 <__aeabi_dmul+0x194>
 8001a62:	4bc2      	ldr	r3, [pc, #776]	; (8001d6c <__aeabi_dmul+0x3a0>)
 8001a64:	0089      	lsls	r1, r1, #2
 8001a66:	5859      	ldr	r1, [r3, r1]
 8001a68:	468f      	mov	pc, r1
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	4332      	orrs	r2, r6
 8001a70:	d000      	beq.n	8001a74 <__aeabi_dmul+0xa8>
 8001a72:	e156      	b.n	8001d22 <__aeabi_dmul+0x356>
 8001a74:	49bb      	ldr	r1, [pc, #748]	; (8001d64 <__aeabi_dmul+0x398>)
 8001a76:	2600      	movs	r6, #0
 8001a78:	468c      	mov	ip, r1
 8001a7a:	4463      	add	r3, ip
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2302      	movs	r3, #2
 8001a82:	4319      	orrs	r1, r3
 8001a84:	4689      	mov	r9, r1
 8001a86:	2002      	movs	r0, #2
 8001a88:	e7e1      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001a8a:	4643      	mov	r3, r8
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	0034      	movs	r4, r6
 8001a90:	0015      	movs	r5, r2
 8001a92:	4683      	mov	fp, r0
 8001a94:	465b      	mov	r3, fp
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d05e      	beq.n	8001b58 <__aeabi_dmul+0x18c>
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dmul+0xd4>
 8001a9e:	e1f3      	b.n	8001e88 <__aeabi_dmul+0x4bc>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dmul+0xda>
 8001aa4:	e118      	b.n	8001cd8 <__aeabi_dmul+0x30c>
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2500      	movs	r5, #0
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	0512      	lsls	r2, r2, #20
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	07db      	lsls	r3, r3, #31
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	0011      	movs	r1, r2
 8001aba:	b007      	add	sp, #28
 8001abc:	bcf0      	pop	{r4, r5, r6, r7}
 8001abe:	46bb      	mov	fp, r7
 8001ac0:	46b2      	mov	sl, r6
 8001ac2:	46a9      	mov	r9, r5
 8001ac4:	46a0      	mov	r8, r4
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	0025      	movs	r5, r4
 8001aca:	4305      	orrs	r5, r0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dmul+0x104>
 8001ace:	e141      	b.n	8001d54 <__aeabi_dmul+0x388>
 8001ad0:	2c00      	cmp	r4, #0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dmul+0x10a>
 8001ad4:	e1ad      	b.n	8001e32 <__aeabi_dmul+0x466>
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f000 fef0 	bl	80028bc <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0002      	movs	r2, r0
 8001ae0:	390b      	subs	r1, #11
 8001ae2:	231d      	movs	r3, #29
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	1a5b      	subs	r3, r3, r1
 8001ae8:	0031      	movs	r1, r6
 8001aea:	0035      	movs	r5, r6
 8001aec:	3808      	subs	r0, #8
 8001aee:	4084      	lsls	r4, r0
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	4085      	lsls	r5, r0
 8001af4:	430c      	orrs	r4, r1
 8001af6:	489e      	ldr	r0, [pc, #632]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001af8:	1a83      	subs	r3, r0, r2
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2300      	movs	r3, #0
 8001afe:	4699      	mov	r9, r3
 8001b00:	469b      	mov	fp, r3
 8001b02:	e786      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001b04:	0005      	movs	r5, r0
 8001b06:	4325      	orrs	r5, r4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dmul+0x140>
 8001b0a:	e11c      	b.n	8001d46 <__aeabi_dmul+0x37a>
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2302      	movs	r3, #2
 8001b12:	2400      	movs	r4, #0
 8001b14:	4691      	mov	r9, r2
 8001b16:	469b      	mov	fp, r3
 8001b18:	e77b      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001b1a:	4652      	mov	r2, sl
 8001b1c:	4332      	orrs	r2, r6
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x156>
 8001b20:	e10a      	b.n	8001d38 <__aeabi_dmul+0x36c>
 8001b22:	2e00      	cmp	r6, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x15c>
 8001b26:	e176      	b.n	8001e16 <__aeabi_dmul+0x44a>
 8001b28:	0030      	movs	r0, r6
 8001b2a:	f000 fec7 	bl	80028bc <__clzsi2>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	3a0b      	subs	r2, #11
 8001b32:	231d      	movs	r3, #29
 8001b34:	0001      	movs	r1, r0
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	4652      	mov	r2, sl
 8001b3a:	3908      	subs	r1, #8
 8001b3c:	40da      	lsrs	r2, r3
 8001b3e:	408e      	lsls	r6, r1
 8001b40:	4316      	orrs	r6, r2
 8001b42:	4652      	mov	r2, sl
 8001b44:	408a      	lsls	r2, r1
 8001b46:	9b00      	ldr	r3, [sp, #0]
 8001b48:	4989      	ldr	r1, [pc, #548]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001b4a:	1a18      	subs	r0, r3, r0
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	468c      	mov	ip, r1
 8001b50:	4463      	add	r3, ip
 8001b52:	2000      	movs	r0, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	e77a      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001b58:	2400      	movs	r4, #0
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	4a81      	ldr	r2, [pc, #516]	; (8001d64 <__aeabi_dmul+0x398>)
 8001b5e:	e7a5      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001b60:	0c2f      	lsrs	r7, r5, #16
 8001b62:	042d      	lsls	r5, r5, #16
 8001b64:	0c2d      	lsrs	r5, r5, #16
 8001b66:	002b      	movs	r3, r5
 8001b68:	0c11      	lsrs	r1, r2, #16
 8001b6a:	0412      	lsls	r2, r2, #16
 8001b6c:	0c12      	lsrs	r2, r2, #16
 8001b6e:	4353      	muls	r3, r2
 8001b70:	4698      	mov	r8, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	0028      	movs	r0, r5
 8001b76:	437b      	muls	r3, r7
 8001b78:	4699      	mov	r9, r3
 8001b7a:	4348      	muls	r0, r1
 8001b7c:	4448      	add	r0, r9
 8001b7e:	4683      	mov	fp, r0
 8001b80:	4640      	mov	r0, r8
 8001b82:	000b      	movs	r3, r1
 8001b84:	0c00      	lsrs	r0, r0, #16
 8001b86:	4682      	mov	sl, r0
 8001b88:	4658      	mov	r0, fp
 8001b8a:	437b      	muls	r3, r7
 8001b8c:	4450      	add	r0, sl
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	4581      	cmp	r9, r0
 8001b92:	d906      	bls.n	8001ba2 <__aeabi_dmul+0x1d6>
 8001b94:	469a      	mov	sl, r3
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	44ca      	add	sl, r9
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	0c03      	lsrs	r3, r0, #16
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	0400      	lsls	r0, r0, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	4698      	mov	r8, r3
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	4443      	add	r3, r8
 8001bb4:	9304      	str	r3, [sp, #16]
 8001bb6:	0c33      	lsrs	r3, r6, #16
 8001bb8:	4699      	mov	r9, r3
 8001bba:	002b      	movs	r3, r5
 8001bbc:	0436      	lsls	r6, r6, #16
 8001bbe:	0c36      	lsrs	r6, r6, #16
 8001bc0:	4373      	muls	r3, r6
 8001bc2:	4698      	mov	r8, r3
 8001bc4:	0033      	movs	r3, r6
 8001bc6:	437b      	muls	r3, r7
 8001bc8:	469a      	mov	sl, r3
 8001bca:	464b      	mov	r3, r9
 8001bcc:	435d      	muls	r5, r3
 8001bce:	435f      	muls	r7, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	4455      	add	r5, sl
 8001bd4:	0c18      	lsrs	r0, r3, #16
 8001bd6:	1940      	adds	r0, r0, r5
 8001bd8:	4582      	cmp	sl, r0
 8001bda:	d903      	bls.n	8001be4 <__aeabi_dmul+0x218>
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	469a      	mov	sl, r3
 8001be2:	4457      	add	r7, sl
 8001be4:	0c05      	lsrs	r5, r0, #16
 8001be6:	19eb      	adds	r3, r5, r7
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	4643      	mov	r3, r8
 8001bec:	041d      	lsls	r5, r3, #16
 8001bee:	0c2d      	lsrs	r5, r5, #16
 8001bf0:	0400      	lsls	r0, r0, #16
 8001bf2:	1940      	adds	r0, r0, r5
 8001bf4:	0c25      	lsrs	r5, r4, #16
 8001bf6:	0424      	lsls	r4, r4, #16
 8001bf8:	0c24      	lsrs	r4, r4, #16
 8001bfa:	0027      	movs	r7, r4
 8001bfc:	4357      	muls	r7, r2
 8001bfe:	436a      	muls	r2, r5
 8001c00:	4690      	mov	r8, r2
 8001c02:	002a      	movs	r2, r5
 8001c04:	0c3b      	lsrs	r3, r7, #16
 8001c06:	469a      	mov	sl, r3
 8001c08:	434a      	muls	r2, r1
 8001c0a:	4361      	muls	r1, r4
 8001c0c:	4441      	add	r1, r8
 8001c0e:	4451      	add	r1, sl
 8001c10:	4483      	add	fp, r0
 8001c12:	4588      	cmp	r8, r1
 8001c14:	d903      	bls.n	8001c1e <__aeabi_dmul+0x252>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4442      	add	r2, r8
 8001c1e:	043f      	lsls	r7, r7, #16
 8001c20:	0c0b      	lsrs	r3, r1, #16
 8001c22:	0c3f      	lsrs	r7, r7, #16
 8001c24:	0409      	lsls	r1, r1, #16
 8001c26:	19c9      	adds	r1, r1, r7
 8001c28:	0027      	movs	r7, r4
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	4377      	muls	r7, r6
 8001c30:	435c      	muls	r4, r3
 8001c32:	436e      	muls	r6, r5
 8001c34:	435d      	muls	r5, r3
 8001c36:	0c3b      	lsrs	r3, r7, #16
 8001c38:	4699      	mov	r9, r3
 8001c3a:	19a4      	adds	r4, r4, r6
 8001c3c:	444c      	add	r4, r9
 8001c3e:	4442      	add	r2, r8
 8001c40:	9503      	str	r5, [sp, #12]
 8001c42:	42a6      	cmp	r6, r4
 8001c44:	d904      	bls.n	8001c50 <__aeabi_dmul+0x284>
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4445      	add	r5, r8
 8001c4e:	9503      	str	r5, [sp, #12]
 8001c50:	9b02      	ldr	r3, [sp, #8]
 8001c52:	043f      	lsls	r7, r7, #16
 8001c54:	445b      	add	r3, fp
 8001c56:	001e      	movs	r6, r3
 8001c58:	4283      	cmp	r3, r0
 8001c5a:	4180      	sbcs	r0, r0
 8001c5c:	0423      	lsls	r3, r4, #16
 8001c5e:	4698      	mov	r8, r3
 8001c60:	9b05      	ldr	r3, [sp, #20]
 8001c62:	0c3f      	lsrs	r7, r7, #16
 8001c64:	4447      	add	r7, r8
 8001c66:	4698      	mov	r8, r3
 8001c68:	1876      	adds	r6, r6, r1
 8001c6a:	428e      	cmp	r6, r1
 8001c6c:	4189      	sbcs	r1, r1
 8001c6e:	4447      	add	r7, r8
 8001c70:	4240      	negs	r0, r0
 8001c72:	183d      	adds	r5, r7, r0
 8001c74:	46a8      	mov	r8, r5
 8001c76:	4693      	mov	fp, r2
 8001c78:	4249      	negs	r1, r1
 8001c7a:	468a      	mov	sl, r1
 8001c7c:	44c3      	add	fp, r8
 8001c7e:	429f      	cmp	r7, r3
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4580      	cmp	r8, r0
 8001c84:	4180      	sbcs	r0, r0
 8001c86:	9b03      	ldr	r3, [sp, #12]
 8001c88:	44da      	add	sl, fp
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4653      	mov	r3, sl
 8001c8e:	4240      	negs	r0, r0
 8001c90:	427f      	negs	r7, r7
 8001c92:	4307      	orrs	r7, r0
 8001c94:	0c24      	lsrs	r4, r4, #16
 8001c96:	4593      	cmp	fp, r2
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	458a      	cmp	sl, r1
 8001c9c:	4189      	sbcs	r1, r1
 8001c9e:	193f      	adds	r7, r7, r4
 8001ca0:	0ddc      	lsrs	r4, r3, #23
 8001ca2:	9b04      	ldr	r3, [sp, #16]
 8001ca4:	0275      	lsls	r5, r6, #9
 8001ca6:	431d      	orrs	r5, r3
 8001ca8:	1e68      	subs	r0, r5, #1
 8001caa:	4185      	sbcs	r5, r0
 8001cac:	4653      	mov	r3, sl
 8001cae:	4252      	negs	r2, r2
 8001cb0:	4249      	negs	r1, r1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	18bf      	adds	r7, r7, r2
 8001cb6:	4447      	add	r7, r8
 8001cb8:	0df6      	lsrs	r6, r6, #23
 8001cba:	027f      	lsls	r7, r7, #9
 8001cbc:	4335      	orrs	r5, r6
 8001cbe:	025a      	lsls	r2, r3, #9
 8001cc0:	433c      	orrs	r4, r7
 8001cc2:	4315      	orrs	r5, r2
 8001cc4:	01fb      	lsls	r3, r7, #7
 8001cc6:	d400      	bmi.n	8001cca <__aeabi_dmul+0x2fe>
 8001cc8:	e0c1      	b.n	8001e4e <__aeabi_dmul+0x482>
 8001cca:	2101      	movs	r1, #1
 8001ccc:	086a      	lsrs	r2, r5, #1
 8001cce:	400d      	ands	r5, r1
 8001cd0:	4315      	orrs	r5, r2
 8001cd2:	07e2      	lsls	r2, r4, #31
 8001cd4:	4315      	orrs	r5, r2
 8001cd6:	0864      	lsrs	r4, r4, #1
 8001cd8:	4926      	ldr	r1, [pc, #152]	; (8001d74 <__aeabi_dmul+0x3a8>)
 8001cda:	4461      	add	r1, ip
 8001cdc:	2900      	cmp	r1, #0
 8001cde:	dd56      	ble.n	8001d8e <__aeabi_dmul+0x3c2>
 8001ce0:	076b      	lsls	r3, r5, #29
 8001ce2:	d009      	beq.n	8001cf8 <__aeabi_dmul+0x32c>
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	402a      	ands	r2, r5
 8001ce8:	2a04      	cmp	r2, #4
 8001cea:	d005      	beq.n	8001cf8 <__aeabi_dmul+0x32c>
 8001cec:	1d2a      	adds	r2, r5, #4
 8001cee:	42aa      	cmp	r2, r5
 8001cf0:	41ad      	sbcs	r5, r5
 8001cf2:	426d      	negs	r5, r5
 8001cf4:	1964      	adds	r4, r4, r5
 8001cf6:	0015      	movs	r5, r2
 8001cf8:	01e3      	lsls	r3, r4, #7
 8001cfa:	d504      	bpl.n	8001d06 <__aeabi_dmul+0x33a>
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <__aeabi_dmul+0x3ac>)
 8001d00:	00c9      	lsls	r1, r1, #3
 8001d02:	4014      	ands	r4, r2
 8001d04:	4461      	add	r1, ip
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <__aeabi_dmul+0x3b0>)
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dmul+0x342>
 8001d0c:	e724      	b.n	8001b58 <__aeabi_dmul+0x18c>
 8001d0e:	0762      	lsls	r2, r4, #29
 8001d10:	08ed      	lsrs	r5, r5, #3
 8001d12:	0264      	lsls	r4, r4, #9
 8001d14:	0549      	lsls	r1, r1, #21
 8001d16:	4315      	orrs	r5, r2
 8001d18:	0b24      	lsrs	r4, r4, #12
 8001d1a:	0d4a      	lsrs	r2, r1, #21
 8001d1c:	e6c6      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001d1e:	9701      	str	r7, [sp, #4]
 8001d20:	e6b8      	b.n	8001a94 <__aeabi_dmul+0xc8>
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <__aeabi_dmul+0x398>)
 8001d24:	2003      	movs	r0, #3
 8001d26:	4694      	mov	ip, r2
 8001d28:	4463      	add	r3, ip
 8001d2a:	464a      	mov	r2, r9
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2303      	movs	r3, #3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4691      	mov	r9, r2
 8001d34:	4652      	mov	r2, sl
 8001d36:	e68a      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d38:	4649      	mov	r1, r9
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4319      	orrs	r1, r3
 8001d3e:	4689      	mov	r9, r1
 8001d40:	2600      	movs	r6, #0
 8001d42:	2001      	movs	r0, #1
 8001d44:	e683      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d46:	220c      	movs	r2, #12
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	0005      	movs	r5, r0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e65e      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001d54:	2304      	movs	r3, #4
 8001d56:	4699      	mov	r9, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	2400      	movs	r4, #0
 8001d60:	469b      	mov	fp, r3
 8001d62:	e656      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001d64:	000007ff 	.word	0x000007ff
 8001d68:	fffffc01 	.word	0xfffffc01
 8001d6c:	0800e55c 	.word	0x0800e55c
 8001d70:	fffffc0d 	.word	0xfffffc0d
 8001d74:	000003ff 	.word	0x000003ff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	000007fe 	.word	0x000007fe
 8001d80:	2300      	movs	r3, #0
 8001d82:	2480      	movs	r4, #128	; 0x80
 8001d84:	2500      	movs	r5, #0
 8001d86:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	0324      	lsls	r4, r4, #12
 8001d8c:	e68e      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001d8e:	2001      	movs	r0, #1
 8001d90:	1a40      	subs	r0, r0, r1
 8001d92:	2838      	cmp	r0, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x3cc>
 8001d96:	e686      	b.n	8001aa6 <__aeabi_dmul+0xda>
 8001d98:	281f      	cmp	r0, #31
 8001d9a:	dd5b      	ble.n	8001e54 <__aeabi_dmul+0x488>
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	0023      	movs	r3, r4
 8001da0:	4252      	negs	r2, r2
 8001da2:	1a51      	subs	r1, r2, r1
 8001da4:	40cb      	lsrs	r3, r1
 8001da6:	0019      	movs	r1, r3
 8001da8:	2820      	cmp	r0, #32
 8001daa:	d003      	beq.n	8001db4 <__aeabi_dmul+0x3e8>
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <__aeabi_dmul+0x4d0>)
 8001dae:	4462      	add	r2, ip
 8001db0:	4094      	lsls	r4, r2
 8001db2:	4325      	orrs	r5, r4
 8001db4:	1e6a      	subs	r2, r5, #1
 8001db6:	4195      	sbcs	r5, r2
 8001db8:	002a      	movs	r2, r5
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	000d      	movs	r5, r1
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	4015      	ands	r5, r2
 8001dc4:	4211      	tst	r1, r2
 8001dc6:	d05b      	beq.n	8001e80 <__aeabi_dmul+0x4b4>
 8001dc8:	210f      	movs	r1, #15
 8001dca:	2400      	movs	r4, #0
 8001dcc:	4011      	ands	r1, r2
 8001dce:	2904      	cmp	r1, #4
 8001dd0:	d053      	beq.n	8001e7a <__aeabi_dmul+0x4ae>
 8001dd2:	1d11      	adds	r1, r2, #4
 8001dd4:	4291      	cmp	r1, r2
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	4252      	negs	r2, r2
 8001dda:	18a4      	adds	r4, r4, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	0223      	lsls	r3, r4, #8
 8001de0:	d54b      	bpl.n	8001e7a <__aeabi_dmul+0x4ae>
 8001de2:	2201      	movs	r2, #1
 8001de4:	2400      	movs	r4, #0
 8001de6:	2500      	movs	r5, #0
 8001de8:	e660      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	031b      	lsls	r3, r3, #12
 8001dee:	421c      	tst	r4, r3
 8001df0:	d009      	beq.n	8001e06 <__aeabi_dmul+0x43a>
 8001df2:	421e      	tst	r6, r3
 8001df4:	d107      	bne.n	8001e06 <__aeabi_dmul+0x43a>
 8001df6:	4333      	orrs	r3, r6
 8001df8:	031c      	lsls	r4, r3, #12
 8001dfa:	4643      	mov	r3, r8
 8001dfc:	0015      	movs	r5, r2
 8001dfe:	0b24      	lsrs	r4, r4, #12
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	e652      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0312      	lsls	r2, r2, #12
 8001e0a:	4314      	orrs	r4, r2
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e10:	0b24      	lsrs	r4, r4, #12
 8001e12:	9701      	str	r7, [sp, #4]
 8001e14:	e64a      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e16:	f000 fd51 	bl	80028bc <__clzsi2>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	3215      	adds	r2, #21
 8001e20:	3020      	adds	r0, #32
 8001e22:	2a1c      	cmp	r2, #28
 8001e24:	dc00      	bgt.n	8001e28 <__aeabi_dmul+0x45c>
 8001e26:	e684      	b.n	8001b32 <__aeabi_dmul+0x166>
 8001e28:	4656      	mov	r6, sl
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	409e      	lsls	r6, r3
 8001e30:	e689      	b.n	8001b46 <__aeabi_dmul+0x17a>
 8001e32:	f000 fd43 	bl	80028bc <__clzsi2>
 8001e36:	0001      	movs	r1, r0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	3115      	adds	r1, #21
 8001e3c:	3220      	adds	r2, #32
 8001e3e:	291c      	cmp	r1, #28
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dmul+0x478>
 8001e42:	e64e      	b.n	8001ae2 <__aeabi_dmul+0x116>
 8001e44:	0034      	movs	r4, r6
 8001e46:	3808      	subs	r0, #8
 8001e48:	2500      	movs	r5, #0
 8001e4a:	4084      	lsls	r4, r0
 8001e4c:	e653      	b.n	8001af6 <__aeabi_dmul+0x12a>
 8001e4e:	9b00      	ldr	r3, [sp, #0]
 8001e50:	469c      	mov	ip, r3
 8001e52:	e741      	b.n	8001cd8 <__aeabi_dmul+0x30c>
 8001e54:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <__aeabi_dmul+0x4d4>)
 8001e56:	0022      	movs	r2, r4
 8001e58:	4461      	add	r1, ip
 8001e5a:	002e      	movs	r6, r5
 8001e5c:	408d      	lsls	r5, r1
 8001e5e:	408a      	lsls	r2, r1
 8001e60:	40c6      	lsrs	r6, r0
 8001e62:	1e69      	subs	r1, r5, #1
 8001e64:	418d      	sbcs	r5, r1
 8001e66:	4332      	orrs	r2, r6
 8001e68:	432a      	orrs	r2, r5
 8001e6a:	40c4      	lsrs	r4, r0
 8001e6c:	0753      	lsls	r3, r2, #29
 8001e6e:	d0b6      	beq.n	8001dde <__aeabi_dmul+0x412>
 8001e70:	210f      	movs	r1, #15
 8001e72:	4011      	ands	r1, r2
 8001e74:	2904      	cmp	r1, #4
 8001e76:	d1ac      	bne.n	8001dd2 <__aeabi_dmul+0x406>
 8001e78:	e7b1      	b.n	8001dde <__aeabi_dmul+0x412>
 8001e7a:	0765      	lsls	r5, r4, #29
 8001e7c:	0264      	lsls	r4, r4, #9
 8001e7e:	0b24      	lsrs	r4, r4, #12
 8001e80:	08d2      	lsrs	r2, r2, #3
 8001e82:	4315      	orrs	r5, r2
 8001e84:	2200      	movs	r2, #0
 8001e86:	e611      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0312      	lsls	r2, r2, #12
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4a01      	ldr	r2, [pc, #4]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e92:	0b24      	lsrs	r4, r4, #12
 8001e94:	e60a      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	0000043e 	.word	0x0000043e
 8001ea0:	0000041e 	.word	0x0000041e

08001ea4 <__aeabi_dsub>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	4657      	mov	r7, sl
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	4645      	mov	r5, r8
 8001eac:	46de      	mov	lr, fp
 8001eae:	0004      	movs	r4, r0
 8001eb0:	b5e0      	push	{r5, r6, r7, lr}
 8001eb2:	001f      	movs	r7, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	030b      	lsls	r3, r1, #12
 8001eb8:	0f62      	lsrs	r2, r4, #29
 8001eba:	004e      	lsls	r6, r1, #1
 8001ebc:	0fcd      	lsrs	r5, r1, #31
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	0339      	lsls	r1, r7, #12
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	0a49      	lsrs	r1, r1, #9
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	0f44      	lsrs	r4, r0, #29
 8001eca:	4321      	orrs	r1, r4
 8001ecc:	4cc2      	ldr	r4, [pc, #776]	; (80021d8 <__aeabi_dsub+0x334>)
 8001ece:	4691      	mov	r9, r2
 8001ed0:	4692      	mov	sl, r2
 8001ed2:	00c0      	lsls	r0, r0, #3
 8001ed4:	007a      	lsls	r2, r7, #1
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	0d76      	lsrs	r6, r6, #21
 8001eda:	0d52      	lsrs	r2, r2, #21
 8001edc:	0fff      	lsrs	r7, r7, #31
 8001ede:	42a2      	cmp	r2, r4
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x40>
 8001ee2:	e0b4      	b.n	800204e <__aeabi_dsub+0x1aa>
 8001ee4:	2401      	movs	r4, #1
 8001ee6:	4067      	eors	r7, r4
 8001ee8:	46bb      	mov	fp, r7
 8001eea:	42bd      	cmp	r5, r7
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x4c>
 8001eee:	e088      	b.n	8002002 <__aeabi_dsub+0x15e>
 8001ef0:	1ab4      	subs	r4, r6, r2
 8001ef2:	46a4      	mov	ip, r4
 8001ef4:	2c00      	cmp	r4, #0
 8001ef6:	dc00      	bgt.n	8001efa <__aeabi_dsub+0x56>
 8001ef8:	e0b2      	b.n	8002060 <__aeabi_dsub+0x1bc>
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x5c>
 8001efe:	e0c5      	b.n	800208c <__aeabi_dsub+0x1e8>
 8001f00:	4ab5      	ldr	r2, [pc, #724]	; (80021d8 <__aeabi_dsub+0x334>)
 8001f02:	4296      	cmp	r6, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x64>
 8001f06:	e28b      	b.n	8002420 <__aeabi_dsub+0x57c>
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0412      	lsls	r2, r2, #16
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	4662      	mov	r2, ip
 8001f10:	2a38      	cmp	r2, #56	; 0x38
 8001f12:	dd00      	ble.n	8001f16 <__aeabi_dsub+0x72>
 8001f14:	e1a1      	b.n	800225a <__aeabi_dsub+0x3b6>
 8001f16:	2a1f      	cmp	r2, #31
 8001f18:	dd00      	ble.n	8001f1c <__aeabi_dsub+0x78>
 8001f1a:	e216      	b.n	800234a <__aeabi_dsub+0x4a6>
 8001f1c:	2720      	movs	r7, #32
 8001f1e:	000c      	movs	r4, r1
 8001f20:	1abf      	subs	r7, r7, r2
 8001f22:	40bc      	lsls	r4, r7
 8001f24:	0002      	movs	r2, r0
 8001f26:	46a0      	mov	r8, r4
 8001f28:	4664      	mov	r4, ip
 8001f2a:	40b8      	lsls	r0, r7
 8001f2c:	40e2      	lsrs	r2, r4
 8001f2e:	4644      	mov	r4, r8
 8001f30:	4314      	orrs	r4, r2
 8001f32:	0002      	movs	r2, r0
 8001f34:	1e50      	subs	r0, r2, #1
 8001f36:	4182      	sbcs	r2, r0
 8001f38:	4660      	mov	r0, ip
 8001f3a:	40c1      	lsrs	r1, r0
 8001f3c:	4322      	orrs	r2, r4
 8001f3e:	1a5b      	subs	r3, r3, r1
 8001f40:	4649      	mov	r1, r9
 8001f42:	1a8c      	subs	r4, r1, r2
 8001f44:	45a1      	cmp	r9, r4
 8001f46:	4192      	sbcs	r2, r2
 8001f48:	4252      	negs	r2, r2
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	4643      	mov	r3, r8
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	d400      	bmi.n	8001f56 <__aeabi_dsub+0xb2>
 8001f54:	e117      	b.n	8002186 <__aeabi_dsub+0x2e2>
 8001f56:	4643      	mov	r3, r8
 8001f58:	025b      	lsls	r3, r3, #9
 8001f5a:	0a5b      	lsrs	r3, r3, #9
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	4643      	mov	r3, r8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0xc2>
 8001f64:	e16c      	b.n	8002240 <__aeabi_dsub+0x39c>
 8001f66:	4640      	mov	r0, r8
 8001f68:	f000 fca8 	bl	80028bc <__clzsi2>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	3a08      	subs	r2, #8
 8001f70:	2120      	movs	r1, #32
 8001f72:	0020      	movs	r0, r4
 8001f74:	4643      	mov	r3, r8
 8001f76:	1a89      	subs	r1, r1, r2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	40c8      	lsrs	r0, r1
 8001f7c:	4094      	lsls	r4, r2
 8001f7e:	4303      	orrs	r3, r0
 8001f80:	4296      	cmp	r6, r2
 8001f82:	dd00      	ble.n	8001f86 <__aeabi_dsub+0xe2>
 8001f84:	e157      	b.n	8002236 <__aeabi_dsub+0x392>
 8001f86:	1b96      	subs	r6, r2, r6
 8001f88:	1c71      	adds	r1, r6, #1
 8001f8a:	291f      	cmp	r1, #31
 8001f8c:	dd00      	ble.n	8001f90 <__aeabi_dsub+0xec>
 8001f8e:	e1cb      	b.n	8002328 <__aeabi_dsub+0x484>
 8001f90:	2220      	movs	r2, #32
 8001f92:	0018      	movs	r0, r3
 8001f94:	0026      	movs	r6, r4
 8001f96:	1a52      	subs	r2, r2, r1
 8001f98:	4094      	lsls	r4, r2
 8001f9a:	4090      	lsls	r0, r2
 8001f9c:	40ce      	lsrs	r6, r1
 8001f9e:	40cb      	lsrs	r3, r1
 8001fa0:	1e62      	subs	r2, r4, #1
 8001fa2:	4194      	sbcs	r4, r2
 8001fa4:	4330      	orrs	r0, r6
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4304      	orrs	r4, r0
 8001fac:	0763      	lsls	r3, r4, #29
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dsub+0x120>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4023      	ands	r3, r4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x120>
 8001fb8:	1d23      	adds	r3, r4, #4
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	41a4      	sbcs	r4, r4
 8001fbe:	4264      	negs	r4, r4
 8001fc0:	44a0      	add	r8, r4
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	d400      	bmi.n	8001fcc <__aeabi_dsub+0x128>
 8001fca:	e0df      	b.n	800218c <__aeabi_dsub+0x2e8>
 8001fcc:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <__aeabi_dsub+0x334>)
 8001fce:	3601      	adds	r6, #1
 8001fd0:	429e      	cmp	r6, r3
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dsub+0x132>
 8001fd4:	e0fb      	b.n	80021ce <__aeabi_dsub+0x32a>
 8001fd6:	4642      	mov	r2, r8
 8001fd8:	4b80      	ldr	r3, [pc, #512]	; (80021dc <__aeabi_dsub+0x338>)
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	0013      	movs	r3, r2
 8001fe0:	0571      	lsls	r1, r6, #21
 8001fe2:	0752      	lsls	r2, r2, #29
 8001fe4:	025b      	lsls	r3, r3, #9
 8001fe6:	4322      	orrs	r2, r4
 8001fe8:	0b1b      	lsrs	r3, r3, #12
 8001fea:	0d49      	lsrs	r1, r1, #21
 8001fec:	0509      	lsls	r1, r1, #20
 8001fee:	07ed      	lsls	r5, r5, #31
 8001ff0:	4319      	orrs	r1, r3
 8001ff2:	4329      	orrs	r1, r5
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff8:	46bb      	mov	fp, r7
 8001ffa:	46b2      	mov	sl, r6
 8001ffc:	46a9      	mov	r9, r5
 8001ffe:	46a0      	mov	r8, r4
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002002:	1ab4      	subs	r4, r6, r2
 8002004:	46a4      	mov	ip, r4
 8002006:	2c00      	cmp	r4, #0
 8002008:	dd58      	ble.n	80020bc <__aeabi_dsub+0x218>
 800200a:	2a00      	cmp	r2, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x16c>
 800200e:	e09e      	b.n	800214e <__aeabi_dsub+0x2aa>
 8002010:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <__aeabi_dsub+0x334>)
 8002012:	4296      	cmp	r6, r2
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x174>
 8002016:	e13b      	b.n	8002290 <__aeabi_dsub+0x3ec>
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	0412      	lsls	r2, r2, #16
 800201c:	4311      	orrs	r1, r2
 800201e:	4662      	mov	r2, ip
 8002020:	2a38      	cmp	r2, #56	; 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x182>
 8002024:	e0c1      	b.n	80021aa <__aeabi_dsub+0x306>
 8002026:	2a1f      	cmp	r2, #31
 8002028:	dc00      	bgt.n	800202c <__aeabi_dsub+0x188>
 800202a:	e1bb      	b.n	80023a4 <__aeabi_dsub+0x500>
 800202c:	000c      	movs	r4, r1
 800202e:	3a20      	subs	r2, #32
 8002030:	40d4      	lsrs	r4, r2
 8002032:	0022      	movs	r2, r4
 8002034:	4664      	mov	r4, ip
 8002036:	2c20      	cmp	r4, #32
 8002038:	d004      	beq.n	8002044 <__aeabi_dsub+0x1a0>
 800203a:	2740      	movs	r7, #64	; 0x40
 800203c:	1b3f      	subs	r7, r7, r4
 800203e:	40b9      	lsls	r1, r7
 8002040:	4308      	orrs	r0, r1
 8002042:	4680      	mov	r8, r0
 8002044:	4644      	mov	r4, r8
 8002046:	1e61      	subs	r1, r4, #1
 8002048:	418c      	sbcs	r4, r1
 800204a:	4314      	orrs	r4, r2
 800204c:	e0b1      	b.n	80021b2 <__aeabi_dsub+0x30e>
 800204e:	000c      	movs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	d02a      	beq.n	80020aa <__aeabi_dsub+0x206>
 8002054:	46bb      	mov	fp, r7
 8002056:	42bd      	cmp	r5, r7
 8002058:	d02d      	beq.n	80020b6 <__aeabi_dsub+0x212>
 800205a:	4c61      	ldr	r4, [pc, #388]	; (80021e0 <__aeabi_dsub+0x33c>)
 800205c:	46a4      	mov	ip, r4
 800205e:	44b4      	add	ip, r6
 8002060:	4664      	mov	r4, ip
 8002062:	2c00      	cmp	r4, #0
 8002064:	d05c      	beq.n	8002120 <__aeabi_dsub+0x27c>
 8002066:	1b94      	subs	r4, r2, r6
 8002068:	46a4      	mov	ip, r4
 800206a:	2e00      	cmp	r6, #0
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x1cc>
 800206e:	e115      	b.n	800229c <__aeabi_dsub+0x3f8>
 8002070:	464d      	mov	r5, r9
 8002072:	431d      	orrs	r5, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x1d4>
 8002076:	e1c3      	b.n	8002400 <__aeabi_dsub+0x55c>
 8002078:	1e65      	subs	r5, r4, #1
 800207a:	2c01      	cmp	r4, #1
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x1dc>
 800207e:	e20c      	b.n	800249a <__aeabi_dsub+0x5f6>
 8002080:	4e55      	ldr	r6, [pc, #340]	; (80021d8 <__aeabi_dsub+0x334>)
 8002082:	42b4      	cmp	r4, r6
 8002084:	d100      	bne.n	8002088 <__aeabi_dsub+0x1e4>
 8002086:	e1f8      	b.n	800247a <__aeabi_dsub+0x5d6>
 8002088:	46ac      	mov	ip, r5
 800208a:	e10e      	b.n	80022aa <__aeabi_dsub+0x406>
 800208c:	000a      	movs	r2, r1
 800208e:	4302      	orrs	r2, r0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x1f0>
 8002092:	e136      	b.n	8002302 <__aeabi_dsub+0x45e>
 8002094:	0022      	movs	r2, r4
 8002096:	3a01      	subs	r2, #1
 8002098:	2c01      	cmp	r4, #1
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x1fa>
 800209c:	e1c6      	b.n	800242c <__aeabi_dsub+0x588>
 800209e:	4c4e      	ldr	r4, [pc, #312]	; (80021d8 <__aeabi_dsub+0x334>)
 80020a0:	45a4      	cmp	ip, r4
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x202>
 80020a4:	e0f4      	b.n	8002290 <__aeabi_dsub+0x3ec>
 80020a6:	4694      	mov	ip, r2
 80020a8:	e731      	b.n	8001f0e <__aeabi_dsub+0x6a>
 80020aa:	2401      	movs	r4, #1
 80020ac:	4067      	eors	r7, r4
 80020ae:	46bb      	mov	fp, r7
 80020b0:	42bd      	cmp	r5, r7
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x212>
 80020b4:	e71c      	b.n	8001ef0 <__aeabi_dsub+0x4c>
 80020b6:	4c4a      	ldr	r4, [pc, #296]	; (80021e0 <__aeabi_dsub+0x33c>)
 80020b8:	46a4      	mov	ip, r4
 80020ba:	44b4      	add	ip, r6
 80020bc:	4664      	mov	r4, ip
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x220>
 80020c2:	e0cf      	b.n	8002264 <__aeabi_dsub+0x3c0>
 80020c4:	1b94      	subs	r4, r2, r6
 80020c6:	46a4      	mov	ip, r4
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x22a>
 80020cc:	e15c      	b.n	8002388 <__aeabi_dsub+0x4e4>
 80020ce:	4e42      	ldr	r6, [pc, #264]	; (80021d8 <__aeabi_dsub+0x334>)
 80020d0:	42b2      	cmp	r2, r6
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x232>
 80020d4:	e1ec      	b.n	80024b0 <__aeabi_dsub+0x60c>
 80020d6:	2680      	movs	r6, #128	; 0x80
 80020d8:	0436      	lsls	r6, r6, #16
 80020da:	4333      	orrs	r3, r6
 80020dc:	4664      	mov	r4, ip
 80020de:	2c38      	cmp	r4, #56	; 0x38
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x240>
 80020e2:	e1b3      	b.n	800244c <__aeabi_dsub+0x5a8>
 80020e4:	2c1f      	cmp	r4, #31
 80020e6:	dd00      	ble.n	80020ea <__aeabi_dsub+0x246>
 80020e8:	e238      	b.n	800255c <__aeabi_dsub+0x6b8>
 80020ea:	2620      	movs	r6, #32
 80020ec:	1b36      	subs	r6, r6, r4
 80020ee:	001c      	movs	r4, r3
 80020f0:	40b4      	lsls	r4, r6
 80020f2:	464f      	mov	r7, r9
 80020f4:	46a0      	mov	r8, r4
 80020f6:	4664      	mov	r4, ip
 80020f8:	40e7      	lsrs	r7, r4
 80020fa:	4644      	mov	r4, r8
 80020fc:	433c      	orrs	r4, r7
 80020fe:	464f      	mov	r7, r9
 8002100:	40b7      	lsls	r7, r6
 8002102:	003e      	movs	r6, r7
 8002104:	1e77      	subs	r7, r6, #1
 8002106:	41be      	sbcs	r6, r7
 8002108:	4334      	orrs	r4, r6
 800210a:	4666      	mov	r6, ip
 800210c:	40f3      	lsrs	r3, r6
 800210e:	18c9      	adds	r1, r1, r3
 8002110:	1824      	adds	r4, r4, r0
 8002112:	4284      	cmp	r4, r0
 8002114:	419b      	sbcs	r3, r3
 8002116:	425b      	negs	r3, r3
 8002118:	4698      	mov	r8, r3
 800211a:	0016      	movs	r6, r2
 800211c:	4488      	add	r8, r1
 800211e:	e04e      	b.n	80021be <__aeabi_dsub+0x31a>
 8002120:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <__aeabi_dsub+0x340>)
 8002122:	1c74      	adds	r4, r6, #1
 8002124:	4214      	tst	r4, r2
 8002126:	d000      	beq.n	800212a <__aeabi_dsub+0x286>
 8002128:	e0d6      	b.n	80022d8 <__aeabi_dsub+0x434>
 800212a:	464a      	mov	r2, r9
 800212c:	431a      	orrs	r2, r3
 800212e:	2e00      	cmp	r6, #0
 8002130:	d000      	beq.n	8002134 <__aeabi_dsub+0x290>
 8002132:	e15b      	b.n	80023ec <__aeabi_dsub+0x548>
 8002134:	2a00      	cmp	r2, #0
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x296>
 8002138:	e1a5      	b.n	8002486 <__aeabi_dsub+0x5e2>
 800213a:	000a      	movs	r2, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x29e>
 8002140:	e1bb      	b.n	80024ba <__aeabi_dsub+0x616>
 8002142:	464a      	mov	r2, r9
 8002144:	0759      	lsls	r1, r3, #29
 8002146:	08d2      	lsrs	r2, r2, #3
 8002148:	430a      	orrs	r2, r1
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	e027      	b.n	800219e <__aeabi_dsub+0x2fa>
 800214e:	000a      	movs	r2, r1
 8002150:	4302      	orrs	r2, r0
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2b2>
 8002154:	e174      	b.n	8002440 <__aeabi_dsub+0x59c>
 8002156:	0022      	movs	r2, r4
 8002158:	3a01      	subs	r2, #1
 800215a:	2c01      	cmp	r4, #1
 800215c:	d005      	beq.n	800216a <__aeabi_dsub+0x2c6>
 800215e:	4c1e      	ldr	r4, [pc, #120]	; (80021d8 <__aeabi_dsub+0x334>)
 8002160:	45a4      	cmp	ip, r4
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x2c2>
 8002164:	e094      	b.n	8002290 <__aeabi_dsub+0x3ec>
 8002166:	4694      	mov	ip, r2
 8002168:	e759      	b.n	800201e <__aeabi_dsub+0x17a>
 800216a:	4448      	add	r0, r9
 800216c:	4548      	cmp	r0, r9
 800216e:	4192      	sbcs	r2, r2
 8002170:	185b      	adds	r3, r3, r1
 8002172:	4698      	mov	r8, r3
 8002174:	0004      	movs	r4, r0
 8002176:	4252      	negs	r2, r2
 8002178:	4490      	add	r8, r2
 800217a:	4643      	mov	r3, r8
 800217c:	2602      	movs	r6, #2
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	d500      	bpl.n	8002184 <__aeabi_dsub+0x2e0>
 8002182:	e0c4      	b.n	800230e <__aeabi_dsub+0x46a>
 8002184:	3e01      	subs	r6, #1
 8002186:	0763      	lsls	r3, r4, #29
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x2e8>
 800218a:	e711      	b.n	8001fb0 <__aeabi_dsub+0x10c>
 800218c:	4643      	mov	r3, r8
 800218e:	46b4      	mov	ip, r6
 8002190:	0759      	lsls	r1, r3, #29
 8002192:	08e2      	lsrs	r2, r4, #3
 8002194:	430a      	orrs	r2, r1
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	490f      	ldr	r1, [pc, #60]	; (80021d8 <__aeabi_dsub+0x334>)
 800219a:	458c      	cmp	ip, r1
 800219c:	d040      	beq.n	8002220 <__aeabi_dsub+0x37c>
 800219e:	4661      	mov	r1, ip
 80021a0:	031b      	lsls	r3, r3, #12
 80021a2:	0549      	lsls	r1, r1, #21
 80021a4:	0b1b      	lsrs	r3, r3, #12
 80021a6:	0d49      	lsrs	r1, r1, #21
 80021a8:	e720      	b.n	8001fec <__aeabi_dsub+0x148>
 80021aa:	4301      	orrs	r1, r0
 80021ac:	000c      	movs	r4, r1
 80021ae:	1e61      	subs	r1, r4, #1
 80021b0:	418c      	sbcs	r4, r1
 80021b2:	444c      	add	r4, r9
 80021b4:	454c      	cmp	r4, r9
 80021b6:	4192      	sbcs	r2, r2
 80021b8:	4252      	negs	r2, r2
 80021ba:	4690      	mov	r8, r2
 80021bc:	4498      	add	r8, r3
 80021be:	4643      	mov	r3, r8
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	d5e0      	bpl.n	8002186 <__aeabi_dsub+0x2e2>
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__aeabi_dsub+0x334>)
 80021c6:	3601      	adds	r6, #1
 80021c8:	429e      	cmp	r6, r3
 80021ca:	d000      	beq.n	80021ce <__aeabi_dsub+0x32a>
 80021cc:	e09f      	b.n	800230e <__aeabi_dsub+0x46a>
 80021ce:	0031      	movs	r1, r6
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	e70a      	b.n	8001fec <__aeabi_dsub+0x148>
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	000007ff 	.word	0x000007ff
 80021dc:	ff7fffff 	.word	0xff7fffff
 80021e0:	fffff801 	.word	0xfffff801
 80021e4:	000007fe 	.word	0x000007fe
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x34a>
 80021ec:	e160      	b.n	80024b0 <__aeabi_dsub+0x60c>
 80021ee:	000a      	movs	r2, r1
 80021f0:	4302      	orrs	r2, r0
 80021f2:	d04d      	beq.n	8002290 <__aeabi_dsub+0x3ec>
 80021f4:	464a      	mov	r2, r9
 80021f6:	075c      	lsls	r4, r3, #29
 80021f8:	08d2      	lsrs	r2, r2, #3
 80021fa:	4322      	orrs	r2, r4
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4223      	tst	r3, r4
 8002204:	d007      	beq.n	8002216 <__aeabi_dsub+0x372>
 8002206:	08ce      	lsrs	r6, r1, #3
 8002208:	4226      	tst	r6, r4
 800220a:	d104      	bne.n	8002216 <__aeabi_dsub+0x372>
 800220c:	465d      	mov	r5, fp
 800220e:	0033      	movs	r3, r6
 8002210:	08c2      	lsrs	r2, r0, #3
 8002212:	0749      	lsls	r1, r1, #29
 8002214:	430a      	orrs	r2, r1
 8002216:	0f51      	lsrs	r1, r2, #29
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	08d2      	lsrs	r2, r2, #3
 800221c:	0749      	lsls	r1, r1, #29
 800221e:	430a      	orrs	r2, r1
 8002220:	0011      	movs	r1, r2
 8002222:	4319      	orrs	r1, r3
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x384>
 8002226:	e1c8      	b.n	80025ba <__aeabi_dsub+0x716>
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	0309      	lsls	r1, r1, #12
 800222c:	430b      	orrs	r3, r1
 800222e:	031b      	lsls	r3, r3, #12
 8002230:	49d5      	ldr	r1, [pc, #852]	; (8002588 <__aeabi_dsub+0x6e4>)
 8002232:	0b1b      	lsrs	r3, r3, #12
 8002234:	e6da      	b.n	8001fec <__aeabi_dsub+0x148>
 8002236:	49d5      	ldr	r1, [pc, #852]	; (800258c <__aeabi_dsub+0x6e8>)
 8002238:	1ab6      	subs	r6, r6, r2
 800223a:	400b      	ands	r3, r1
 800223c:	4698      	mov	r8, r3
 800223e:	e6b5      	b.n	8001fac <__aeabi_dsub+0x108>
 8002240:	0020      	movs	r0, r4
 8002242:	f000 fb3b 	bl	80028bc <__clzsi2>
 8002246:	0002      	movs	r2, r0
 8002248:	3218      	adds	r2, #24
 800224a:	2a1f      	cmp	r2, #31
 800224c:	dc00      	bgt.n	8002250 <__aeabi_dsub+0x3ac>
 800224e:	e68f      	b.n	8001f70 <__aeabi_dsub+0xcc>
 8002250:	0023      	movs	r3, r4
 8002252:	3808      	subs	r0, #8
 8002254:	4083      	lsls	r3, r0
 8002256:	2400      	movs	r4, #0
 8002258:	e692      	b.n	8001f80 <__aeabi_dsub+0xdc>
 800225a:	4308      	orrs	r0, r1
 800225c:	0002      	movs	r2, r0
 800225e:	1e50      	subs	r0, r2, #1
 8002260:	4182      	sbcs	r2, r0
 8002262:	e66d      	b.n	8001f40 <__aeabi_dsub+0x9c>
 8002264:	4cca      	ldr	r4, [pc, #808]	; (8002590 <__aeabi_dsub+0x6ec>)
 8002266:	1c72      	adds	r2, r6, #1
 8002268:	4222      	tst	r2, r4
 800226a:	d000      	beq.n	800226e <__aeabi_dsub+0x3ca>
 800226c:	e0ad      	b.n	80023ca <__aeabi_dsub+0x526>
 800226e:	464a      	mov	r2, r9
 8002270:	431a      	orrs	r2, r3
 8002272:	2e00      	cmp	r6, #0
 8002274:	d1b8      	bne.n	80021e8 <__aeabi_dsub+0x344>
 8002276:	2a00      	cmp	r2, #0
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x3d8>
 800227a:	e158      	b.n	800252e <__aeabi_dsub+0x68a>
 800227c:	000a      	movs	r2, r1
 800227e:	4302      	orrs	r2, r0
 8002280:	d000      	beq.n	8002284 <__aeabi_dsub+0x3e0>
 8002282:	e159      	b.n	8002538 <__aeabi_dsub+0x694>
 8002284:	464a      	mov	r2, r9
 8002286:	0759      	lsls	r1, r3, #29
 8002288:	08d2      	lsrs	r2, r2, #3
 800228a:	430a      	orrs	r2, r1
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	e786      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002290:	464a      	mov	r2, r9
 8002292:	0759      	lsls	r1, r3, #29
 8002294:	08d2      	lsrs	r2, r2, #3
 8002296:	430a      	orrs	r2, r1
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	e7c1      	b.n	8002220 <__aeabi_dsub+0x37c>
 800229c:	4dba      	ldr	r5, [pc, #744]	; (8002588 <__aeabi_dsub+0x6e4>)
 800229e:	42aa      	cmp	r2, r5
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x400>
 80022a2:	e11e      	b.n	80024e2 <__aeabi_dsub+0x63e>
 80022a4:	2580      	movs	r5, #128	; 0x80
 80022a6:	042d      	lsls	r5, r5, #16
 80022a8:	432b      	orrs	r3, r5
 80022aa:	4664      	mov	r4, ip
 80022ac:	2c38      	cmp	r4, #56	; 0x38
 80022ae:	dc5d      	bgt.n	800236c <__aeabi_dsub+0x4c8>
 80022b0:	2c1f      	cmp	r4, #31
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dsub+0x412>
 80022b4:	e0d0      	b.n	8002458 <__aeabi_dsub+0x5b4>
 80022b6:	2520      	movs	r5, #32
 80022b8:	4667      	mov	r7, ip
 80022ba:	1b2d      	subs	r5, r5, r4
 80022bc:	464e      	mov	r6, r9
 80022be:	001c      	movs	r4, r3
 80022c0:	40fe      	lsrs	r6, r7
 80022c2:	40ac      	lsls	r4, r5
 80022c4:	4334      	orrs	r4, r6
 80022c6:	464e      	mov	r6, r9
 80022c8:	40ae      	lsls	r6, r5
 80022ca:	0035      	movs	r5, r6
 80022cc:	40fb      	lsrs	r3, r7
 80022ce:	1e6e      	subs	r6, r5, #1
 80022d0:	41b5      	sbcs	r5, r6
 80022d2:	1ac9      	subs	r1, r1, r3
 80022d4:	432c      	orrs	r4, r5
 80022d6:	e04e      	b.n	8002376 <__aeabi_dsub+0x4d2>
 80022d8:	464a      	mov	r2, r9
 80022da:	1a14      	subs	r4, r2, r0
 80022dc:	45a1      	cmp	r9, r4
 80022de:	4192      	sbcs	r2, r2
 80022e0:	4252      	negs	r2, r2
 80022e2:	4690      	mov	r8, r2
 80022e4:	1a5f      	subs	r7, r3, r1
 80022e6:	003a      	movs	r2, r7
 80022e8:	4647      	mov	r7, r8
 80022ea:	1bd2      	subs	r2, r2, r7
 80022ec:	4690      	mov	r8, r2
 80022ee:	0212      	lsls	r2, r2, #8
 80022f0:	d500      	bpl.n	80022f4 <__aeabi_dsub+0x450>
 80022f2:	e08b      	b.n	800240c <__aeabi_dsub+0x568>
 80022f4:	4642      	mov	r2, r8
 80022f6:	4322      	orrs	r2, r4
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x458>
 80022fa:	e630      	b.n	8001f5e <__aeabi_dsub+0xba>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2500      	movs	r5, #0
 8002300:	e74d      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002302:	464a      	mov	r2, r9
 8002304:	0759      	lsls	r1, r3, #29
 8002306:	08d2      	lsrs	r2, r2, #3
 8002308:	430a      	orrs	r2, r1
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	e744      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800230e:	4642      	mov	r2, r8
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <__aeabi_dsub+0x6e8>)
 8002312:	0861      	lsrs	r1, r4, #1
 8002314:	401a      	ands	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	2201      	movs	r2, #1
 800231a:	4014      	ands	r4, r2
 800231c:	430c      	orrs	r4, r1
 800231e:	07da      	lsls	r2, r3, #31
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	4698      	mov	r8, r3
 8002324:	4314      	orrs	r4, r2
 8002326:	e641      	b.n	8001fac <__aeabi_dsub+0x108>
 8002328:	001a      	movs	r2, r3
 800232a:	3e1f      	subs	r6, #31
 800232c:	40f2      	lsrs	r2, r6
 800232e:	0016      	movs	r6, r2
 8002330:	2920      	cmp	r1, #32
 8002332:	d003      	beq.n	800233c <__aeabi_dsub+0x498>
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	1a51      	subs	r1, r2, r1
 8002338:	408b      	lsls	r3, r1
 800233a:	431c      	orrs	r4, r3
 800233c:	1e62      	subs	r2, r4, #1
 800233e:	4194      	sbcs	r4, r2
 8002340:	2300      	movs	r3, #0
 8002342:	4334      	orrs	r4, r6
 8002344:	4698      	mov	r8, r3
 8002346:	2600      	movs	r6, #0
 8002348:	e71d      	b.n	8002186 <__aeabi_dsub+0x2e2>
 800234a:	000c      	movs	r4, r1
 800234c:	3a20      	subs	r2, #32
 800234e:	40d4      	lsrs	r4, r2
 8002350:	0022      	movs	r2, r4
 8002352:	4664      	mov	r4, ip
 8002354:	2c20      	cmp	r4, #32
 8002356:	d004      	beq.n	8002362 <__aeabi_dsub+0x4be>
 8002358:	2740      	movs	r7, #64	; 0x40
 800235a:	1b3f      	subs	r7, r7, r4
 800235c:	40b9      	lsls	r1, r7
 800235e:	4308      	orrs	r0, r1
 8002360:	4680      	mov	r8, r0
 8002362:	4644      	mov	r4, r8
 8002364:	1e61      	subs	r1, r4, #1
 8002366:	418c      	sbcs	r4, r1
 8002368:	4322      	orrs	r2, r4
 800236a:	e5e9      	b.n	8001f40 <__aeabi_dsub+0x9c>
 800236c:	464c      	mov	r4, r9
 800236e:	4323      	orrs	r3, r4
 8002370:	001c      	movs	r4, r3
 8002372:	1e63      	subs	r3, r4, #1
 8002374:	419c      	sbcs	r4, r3
 8002376:	1b04      	subs	r4, r0, r4
 8002378:	42a0      	cmp	r0, r4
 800237a:	419b      	sbcs	r3, r3
 800237c:	425b      	negs	r3, r3
 800237e:	1acb      	subs	r3, r1, r3
 8002380:	4698      	mov	r8, r3
 8002382:	465d      	mov	r5, fp
 8002384:	0016      	movs	r6, r2
 8002386:	e5e2      	b.n	8001f4e <__aeabi_dsub+0xaa>
 8002388:	464e      	mov	r6, r9
 800238a:	431e      	orrs	r6, r3
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4ec>
 800238e:	e0ae      	b.n	80024ee <__aeabi_dsub+0x64a>
 8002390:	1e66      	subs	r6, r4, #1
 8002392:	2c01      	cmp	r4, #1
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x4f4>
 8002396:	e0fd      	b.n	8002594 <__aeabi_dsub+0x6f0>
 8002398:	4f7b      	ldr	r7, [pc, #492]	; (8002588 <__aeabi_dsub+0x6e4>)
 800239a:	42bc      	cmp	r4, r7
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4fc>
 800239e:	e107      	b.n	80025b0 <__aeabi_dsub+0x70c>
 80023a0:	46b4      	mov	ip, r6
 80023a2:	e69b      	b.n	80020dc <__aeabi_dsub+0x238>
 80023a4:	4664      	mov	r4, ip
 80023a6:	2220      	movs	r2, #32
 80023a8:	1b12      	subs	r2, r2, r4
 80023aa:	000c      	movs	r4, r1
 80023ac:	4094      	lsls	r4, r2
 80023ae:	0007      	movs	r7, r0
 80023b0:	4090      	lsls	r0, r2
 80023b2:	46a0      	mov	r8, r4
 80023b4:	4664      	mov	r4, ip
 80023b6:	1e42      	subs	r2, r0, #1
 80023b8:	4190      	sbcs	r0, r2
 80023ba:	4662      	mov	r2, ip
 80023bc:	40e7      	lsrs	r7, r4
 80023be:	4644      	mov	r4, r8
 80023c0:	40d1      	lsrs	r1, r2
 80023c2:	433c      	orrs	r4, r7
 80023c4:	4304      	orrs	r4, r0
 80023c6:	185b      	adds	r3, r3, r1
 80023c8:	e6f3      	b.n	80021b2 <__aeabi_dsub+0x30e>
 80023ca:	4c6f      	ldr	r4, [pc, #444]	; (8002588 <__aeabi_dsub+0x6e4>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x52e>
 80023d0:	e0d5      	b.n	800257e <__aeabi_dsub+0x6da>
 80023d2:	4448      	add	r0, r9
 80023d4:	185b      	adds	r3, r3, r1
 80023d6:	4548      	cmp	r0, r9
 80023d8:	4189      	sbcs	r1, r1
 80023da:	4249      	negs	r1, r1
 80023dc:	185b      	adds	r3, r3, r1
 80023de:	07dc      	lsls	r4, r3, #31
 80023e0:	0840      	lsrs	r0, r0, #1
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	4698      	mov	r8, r3
 80023e6:	0016      	movs	r6, r2
 80023e8:	4304      	orrs	r4, r0
 80023ea:	e6cc      	b.n	8002186 <__aeabi_dsub+0x2e2>
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d000      	beq.n	80023f2 <__aeabi_dsub+0x54e>
 80023f0:	e082      	b.n	80024f8 <__aeabi_dsub+0x654>
 80023f2:	000a      	movs	r2, r1
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d140      	bne.n	800247a <__aeabi_dsub+0x5d6>
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	2500      	movs	r5, #0
 80023fc:	031b      	lsls	r3, r3, #12
 80023fe:	e713      	b.n	8002228 <__aeabi_dsub+0x384>
 8002400:	074b      	lsls	r3, r1, #29
 8002402:	08c2      	lsrs	r2, r0, #3
 8002404:	431a      	orrs	r2, r3
 8002406:	465d      	mov	r5, fp
 8002408:	08cb      	lsrs	r3, r1, #3
 800240a:	e6c5      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800240c:	464a      	mov	r2, r9
 800240e:	1a84      	subs	r4, r0, r2
 8002410:	42a0      	cmp	r0, r4
 8002412:	4192      	sbcs	r2, r2
 8002414:	1acb      	subs	r3, r1, r3
 8002416:	4252      	negs	r2, r2
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	4698      	mov	r8, r3
 800241c:	465d      	mov	r5, fp
 800241e:	e59e      	b.n	8001f5e <__aeabi_dsub+0xba>
 8002420:	464a      	mov	r2, r9
 8002422:	0759      	lsls	r1, r3, #29
 8002424:	08d2      	lsrs	r2, r2, #3
 8002426:	430a      	orrs	r2, r1
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	e6f9      	b.n	8002220 <__aeabi_dsub+0x37c>
 800242c:	464a      	mov	r2, r9
 800242e:	1a14      	subs	r4, r2, r0
 8002430:	45a1      	cmp	r9, r4
 8002432:	4192      	sbcs	r2, r2
 8002434:	1a5b      	subs	r3, r3, r1
 8002436:	4252      	negs	r2, r2
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	4698      	mov	r8, r3
 800243c:	2601      	movs	r6, #1
 800243e:	e586      	b.n	8001f4e <__aeabi_dsub+0xaa>
 8002440:	464a      	mov	r2, r9
 8002442:	0759      	lsls	r1, r3, #29
 8002444:	08d2      	lsrs	r2, r2, #3
 8002446:	430a      	orrs	r2, r1
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	e6a5      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800244c:	464c      	mov	r4, r9
 800244e:	4323      	orrs	r3, r4
 8002450:	001c      	movs	r4, r3
 8002452:	1e63      	subs	r3, r4, #1
 8002454:	419c      	sbcs	r4, r3
 8002456:	e65b      	b.n	8002110 <__aeabi_dsub+0x26c>
 8002458:	4665      	mov	r5, ip
 800245a:	001e      	movs	r6, r3
 800245c:	3d20      	subs	r5, #32
 800245e:	40ee      	lsrs	r6, r5
 8002460:	2c20      	cmp	r4, #32
 8002462:	d005      	beq.n	8002470 <__aeabi_dsub+0x5cc>
 8002464:	2540      	movs	r5, #64	; 0x40
 8002466:	1b2d      	subs	r5, r5, r4
 8002468:	40ab      	lsls	r3, r5
 800246a:	464c      	mov	r4, r9
 800246c:	431c      	orrs	r4, r3
 800246e:	46a2      	mov	sl, r4
 8002470:	4654      	mov	r4, sl
 8002472:	1e63      	subs	r3, r4, #1
 8002474:	419c      	sbcs	r4, r3
 8002476:	4334      	orrs	r4, r6
 8002478:	e77d      	b.n	8002376 <__aeabi_dsub+0x4d2>
 800247a:	074b      	lsls	r3, r1, #29
 800247c:	08c2      	lsrs	r2, r0, #3
 800247e:	431a      	orrs	r2, r3
 8002480:	465d      	mov	r5, fp
 8002482:	08cb      	lsrs	r3, r1, #3
 8002484:	e6cc      	b.n	8002220 <__aeabi_dsub+0x37c>
 8002486:	000a      	movs	r2, r1
 8002488:	4302      	orrs	r2, r0
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x5ea>
 800248c:	e736      	b.n	80022fc <__aeabi_dsub+0x458>
 800248e:	074b      	lsls	r3, r1, #29
 8002490:	08c2      	lsrs	r2, r0, #3
 8002492:	431a      	orrs	r2, r3
 8002494:	465d      	mov	r5, fp
 8002496:	08cb      	lsrs	r3, r1, #3
 8002498:	e681      	b.n	800219e <__aeabi_dsub+0x2fa>
 800249a:	464a      	mov	r2, r9
 800249c:	1a84      	subs	r4, r0, r2
 800249e:	42a0      	cmp	r0, r4
 80024a0:	4192      	sbcs	r2, r2
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	4252      	negs	r2, r2
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	4698      	mov	r8, r3
 80024aa:	465d      	mov	r5, fp
 80024ac:	2601      	movs	r6, #1
 80024ae:	e54e      	b.n	8001f4e <__aeabi_dsub+0xaa>
 80024b0:	074b      	lsls	r3, r1, #29
 80024b2:	08c2      	lsrs	r2, r0, #3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	08cb      	lsrs	r3, r1, #3
 80024b8:	e6b2      	b.n	8002220 <__aeabi_dsub+0x37c>
 80024ba:	464a      	mov	r2, r9
 80024bc:	1a14      	subs	r4, r2, r0
 80024be:	45a1      	cmp	r9, r4
 80024c0:	4192      	sbcs	r2, r2
 80024c2:	1a5f      	subs	r7, r3, r1
 80024c4:	4252      	negs	r2, r2
 80024c6:	1aba      	subs	r2, r7, r2
 80024c8:	4690      	mov	r8, r2
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	d56b      	bpl.n	80025a6 <__aeabi_dsub+0x702>
 80024ce:	464a      	mov	r2, r9
 80024d0:	1a84      	subs	r4, r0, r2
 80024d2:	42a0      	cmp	r0, r4
 80024d4:	4192      	sbcs	r2, r2
 80024d6:	1acb      	subs	r3, r1, r3
 80024d8:	4252      	negs	r2, r2
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	4698      	mov	r8, r3
 80024de:	465d      	mov	r5, fp
 80024e0:	e564      	b.n	8001fac <__aeabi_dsub+0x108>
 80024e2:	074b      	lsls	r3, r1, #29
 80024e4:	08c2      	lsrs	r2, r0, #3
 80024e6:	431a      	orrs	r2, r3
 80024e8:	465d      	mov	r5, fp
 80024ea:	08cb      	lsrs	r3, r1, #3
 80024ec:	e698      	b.n	8002220 <__aeabi_dsub+0x37c>
 80024ee:	074b      	lsls	r3, r1, #29
 80024f0:	08c2      	lsrs	r2, r0, #3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	08cb      	lsrs	r3, r1, #3
 80024f6:	e64f      	b.n	8002198 <__aeabi_dsub+0x2f4>
 80024f8:	000a      	movs	r2, r1
 80024fa:	4302      	orrs	r2, r0
 80024fc:	d090      	beq.n	8002420 <__aeabi_dsub+0x57c>
 80024fe:	464a      	mov	r2, r9
 8002500:	075c      	lsls	r4, r3, #29
 8002502:	08d2      	lsrs	r2, r2, #3
 8002504:	4314      	orrs	r4, r2
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	0312      	lsls	r2, r2, #12
 800250c:	4213      	tst	r3, r2
 800250e:	d008      	beq.n	8002522 <__aeabi_dsub+0x67e>
 8002510:	08ce      	lsrs	r6, r1, #3
 8002512:	4216      	tst	r6, r2
 8002514:	d105      	bne.n	8002522 <__aeabi_dsub+0x67e>
 8002516:	08c0      	lsrs	r0, r0, #3
 8002518:	0749      	lsls	r1, r1, #29
 800251a:	4308      	orrs	r0, r1
 800251c:	0004      	movs	r4, r0
 800251e:	465d      	mov	r5, fp
 8002520:	0033      	movs	r3, r6
 8002522:	0f61      	lsrs	r1, r4, #29
 8002524:	00e2      	lsls	r2, r4, #3
 8002526:	0749      	lsls	r1, r1, #29
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	430a      	orrs	r2, r1
 800252c:	e678      	b.n	8002220 <__aeabi_dsub+0x37c>
 800252e:	074b      	lsls	r3, r1, #29
 8002530:	08c2      	lsrs	r2, r0, #3
 8002532:	431a      	orrs	r2, r3
 8002534:	08cb      	lsrs	r3, r1, #3
 8002536:	e632      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002538:	4448      	add	r0, r9
 800253a:	185b      	adds	r3, r3, r1
 800253c:	4548      	cmp	r0, r9
 800253e:	4192      	sbcs	r2, r2
 8002540:	4698      	mov	r8, r3
 8002542:	4252      	negs	r2, r2
 8002544:	4490      	add	r8, r2
 8002546:	4643      	mov	r3, r8
 8002548:	0004      	movs	r4, r0
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0x6ac>
 800254e:	e61a      	b.n	8002186 <__aeabi_dsub+0x2e2>
 8002550:	4642      	mov	r2, r8
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <__aeabi_dsub+0x6e8>)
 8002554:	2601      	movs	r6, #1
 8002556:	401a      	ands	r2, r3
 8002558:	4690      	mov	r8, r2
 800255a:	e614      	b.n	8002186 <__aeabi_dsub+0x2e2>
 800255c:	4666      	mov	r6, ip
 800255e:	001f      	movs	r7, r3
 8002560:	3e20      	subs	r6, #32
 8002562:	40f7      	lsrs	r7, r6
 8002564:	2c20      	cmp	r4, #32
 8002566:	d005      	beq.n	8002574 <__aeabi_dsub+0x6d0>
 8002568:	2640      	movs	r6, #64	; 0x40
 800256a:	1b36      	subs	r6, r6, r4
 800256c:	40b3      	lsls	r3, r6
 800256e:	464c      	mov	r4, r9
 8002570:	431c      	orrs	r4, r3
 8002572:	46a2      	mov	sl, r4
 8002574:	4654      	mov	r4, sl
 8002576:	1e63      	subs	r3, r4, #1
 8002578:	419c      	sbcs	r4, r3
 800257a:	433c      	orrs	r4, r7
 800257c:	e5c8      	b.n	8002110 <__aeabi_dsub+0x26c>
 800257e:	0011      	movs	r1, r2
 8002580:	2300      	movs	r3, #0
 8002582:	2200      	movs	r2, #0
 8002584:	e532      	b.n	8001fec <__aeabi_dsub+0x148>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	000007ff 	.word	0x000007ff
 800258c:	ff7fffff 	.word	0xff7fffff
 8002590:	000007fe 	.word	0x000007fe
 8002594:	464a      	mov	r2, r9
 8002596:	1814      	adds	r4, r2, r0
 8002598:	4284      	cmp	r4, r0
 800259a:	4192      	sbcs	r2, r2
 800259c:	185b      	adds	r3, r3, r1
 800259e:	4698      	mov	r8, r3
 80025a0:	4252      	negs	r2, r2
 80025a2:	4490      	add	r8, r2
 80025a4:	e5e9      	b.n	800217a <__aeabi_dsub+0x2d6>
 80025a6:	4642      	mov	r2, r8
 80025a8:	4322      	orrs	r2, r4
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x70a>
 80025ac:	e6a6      	b.n	80022fc <__aeabi_dsub+0x458>
 80025ae:	e5ea      	b.n	8002186 <__aeabi_dsub+0x2e2>
 80025b0:	074b      	lsls	r3, r1, #29
 80025b2:	08c2      	lsrs	r2, r0, #3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	08cb      	lsrs	r3, r1, #3
 80025b8:	e632      	b.n	8002220 <__aeabi_dsub+0x37c>
 80025ba:	2200      	movs	r2, #0
 80025bc:	4901      	ldr	r1, [pc, #4]	; (80025c4 <__aeabi_dsub+0x720>)
 80025be:	0013      	movs	r3, r2
 80025c0:	e514      	b.n	8001fec <__aeabi_dsub+0x148>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	000007ff 	.word	0x000007ff

080025c8 <__aeabi_dcmpun>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	0005      	movs	r5, r0
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <__aeabi_dcmpun+0x38>)
 80025ce:	030c      	lsls	r4, r1, #12
 80025d0:	0016      	movs	r6, r2
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	031a      	lsls	r2, r3, #12
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	0b24      	lsrs	r4, r4, #12
 80025da:	0d49      	lsrs	r1, r1, #21
 80025dc:	0b12      	lsrs	r2, r2, #12
 80025de:	0d5b      	lsrs	r3, r3, #21
 80025e0:	4281      	cmp	r1, r0
 80025e2:	d008      	beq.n	80025f6 <__aeabi_dcmpun+0x2e>
 80025e4:	4906      	ldr	r1, [pc, #24]	; (8002600 <__aeabi_dcmpun+0x38>)
 80025e6:	2000      	movs	r0, #0
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d103      	bne.n	80025f4 <__aeabi_dcmpun+0x2c>
 80025ec:	4332      	orrs	r2, r6
 80025ee:	0010      	movs	r0, r2
 80025f0:	1e42      	subs	r2, r0, #1
 80025f2:	4190      	sbcs	r0, r2
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	2001      	movs	r0, #1
 80025f8:	432c      	orrs	r4, r5
 80025fa:	d1fb      	bne.n	80025f4 <__aeabi_dcmpun+0x2c>
 80025fc:	e7f2      	b.n	80025e4 <__aeabi_dcmpun+0x1c>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	000007ff 	.word	0x000007ff

08002604 <__aeabi_d2iz>:
 8002604:	000a      	movs	r2, r1
 8002606:	b530      	push	{r4, r5, lr}
 8002608:	4c13      	ldr	r4, [pc, #76]	; (8002658 <__aeabi_d2iz+0x54>)
 800260a:	0053      	lsls	r3, r2, #1
 800260c:	0309      	lsls	r1, r1, #12
 800260e:	0005      	movs	r5, r0
 8002610:	0b09      	lsrs	r1, r1, #12
 8002612:	2000      	movs	r0, #0
 8002614:	0d5b      	lsrs	r3, r3, #21
 8002616:	0fd2      	lsrs	r2, r2, #31
 8002618:	42a3      	cmp	r3, r4
 800261a:	dd04      	ble.n	8002626 <__aeabi_d2iz+0x22>
 800261c:	480f      	ldr	r0, [pc, #60]	; (800265c <__aeabi_d2iz+0x58>)
 800261e:	4283      	cmp	r3, r0
 8002620:	dd02      	ble.n	8002628 <__aeabi_d2iz+0x24>
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <__aeabi_d2iz+0x5c>)
 8002624:	18d0      	adds	r0, r2, r3
 8002626:	bd30      	pop	{r4, r5, pc}
 8002628:	2080      	movs	r0, #128	; 0x80
 800262a:	0340      	lsls	r0, r0, #13
 800262c:	4301      	orrs	r1, r0
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <__aeabi_d2iz+0x60>)
 8002630:	1ac0      	subs	r0, r0, r3
 8002632:	281f      	cmp	r0, #31
 8002634:	dd08      	ble.n	8002648 <__aeabi_d2iz+0x44>
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <__aeabi_d2iz+0x64>)
 8002638:	1ac3      	subs	r3, r0, r3
 800263a:	40d9      	lsrs	r1, r3
 800263c:	000b      	movs	r3, r1
 800263e:	4258      	negs	r0, r3
 8002640:	2a00      	cmp	r2, #0
 8002642:	d1f0      	bne.n	8002626 <__aeabi_d2iz+0x22>
 8002644:	0018      	movs	r0, r3
 8002646:	e7ee      	b.n	8002626 <__aeabi_d2iz+0x22>
 8002648:	4c08      	ldr	r4, [pc, #32]	; (800266c <__aeabi_d2iz+0x68>)
 800264a:	40c5      	lsrs	r5, r0
 800264c:	46a4      	mov	ip, r4
 800264e:	4463      	add	r3, ip
 8002650:	4099      	lsls	r1, r3
 8002652:	000b      	movs	r3, r1
 8002654:	432b      	orrs	r3, r5
 8002656:	e7f2      	b.n	800263e <__aeabi_d2iz+0x3a>
 8002658:	000003fe 	.word	0x000003fe
 800265c:	0000041d 	.word	0x0000041d
 8002660:	7fffffff 	.word	0x7fffffff
 8002664:	00000433 	.word	0x00000433
 8002668:	00000413 	.word	0x00000413
 800266c:	fffffbed 	.word	0xfffffbed

08002670 <__aeabi_i2d>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2800      	cmp	r0, #0
 8002674:	d016      	beq.n	80026a4 <__aeabi_i2d+0x34>
 8002676:	17c3      	asrs	r3, r0, #31
 8002678:	18c5      	adds	r5, r0, r3
 800267a:	405d      	eors	r5, r3
 800267c:	0fc4      	lsrs	r4, r0, #31
 800267e:	0028      	movs	r0, r5
 8002680:	f000 f91c 	bl	80028bc <__clzsi2>
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <__aeabi_i2d+0x5c>)
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	280a      	cmp	r0, #10
 800268a:	dc16      	bgt.n	80026ba <__aeabi_i2d+0x4a>
 800268c:	0003      	movs	r3, r0
 800268e:	002e      	movs	r6, r5
 8002690:	3315      	adds	r3, #21
 8002692:	409e      	lsls	r6, r3
 8002694:	230b      	movs	r3, #11
 8002696:	1a18      	subs	r0, r3, r0
 8002698:	40c5      	lsrs	r5, r0
 800269a:	0553      	lsls	r3, r2, #21
 800269c:	032d      	lsls	r5, r5, #12
 800269e:	0b2d      	lsrs	r5, r5, #12
 80026a0:	0d5b      	lsrs	r3, r3, #21
 80026a2:	e003      	b.n	80026ac <__aeabi_i2d+0x3c>
 80026a4:	2400      	movs	r4, #0
 80026a6:	2300      	movs	r3, #0
 80026a8:	2500      	movs	r5, #0
 80026aa:	2600      	movs	r6, #0
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	432b      	orrs	r3, r5
 80026b0:	07e4      	lsls	r4, r4, #31
 80026b2:	4323      	orrs	r3, r4
 80026b4:	0030      	movs	r0, r6
 80026b6:	0019      	movs	r1, r3
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	380b      	subs	r0, #11
 80026bc:	4085      	lsls	r5, r0
 80026be:	0553      	lsls	r3, r2, #21
 80026c0:	032d      	lsls	r5, r5, #12
 80026c2:	2600      	movs	r6, #0
 80026c4:	0b2d      	lsrs	r5, r5, #12
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	e7f0      	b.n	80026ac <__aeabi_i2d+0x3c>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	0000041e 	.word	0x0000041e

080026d0 <__aeabi_ui2d>:
 80026d0:	b510      	push	{r4, lr}
 80026d2:	1e04      	subs	r4, r0, #0
 80026d4:	d010      	beq.n	80026f8 <__aeabi_ui2d+0x28>
 80026d6:	f000 f8f1 	bl	80028bc <__clzsi2>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <__aeabi_ui2d+0x48>)
 80026dc:	1a1b      	subs	r3, r3, r0
 80026de:	280a      	cmp	r0, #10
 80026e0:	dc11      	bgt.n	8002706 <__aeabi_ui2d+0x36>
 80026e2:	220b      	movs	r2, #11
 80026e4:	0021      	movs	r1, r4
 80026e6:	1a12      	subs	r2, r2, r0
 80026e8:	40d1      	lsrs	r1, r2
 80026ea:	3015      	adds	r0, #21
 80026ec:	030a      	lsls	r2, r1, #12
 80026ee:	055b      	lsls	r3, r3, #21
 80026f0:	4084      	lsls	r4, r0
 80026f2:	0b12      	lsrs	r2, r2, #12
 80026f4:	0d5b      	lsrs	r3, r3, #21
 80026f6:	e001      	b.n	80026fc <__aeabi_ui2d+0x2c>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2200      	movs	r2, #0
 80026fc:	051b      	lsls	r3, r3, #20
 80026fe:	4313      	orrs	r3, r2
 8002700:	0020      	movs	r0, r4
 8002702:	0019      	movs	r1, r3
 8002704:	bd10      	pop	{r4, pc}
 8002706:	0022      	movs	r2, r4
 8002708:	380b      	subs	r0, #11
 800270a:	4082      	lsls	r2, r0
 800270c:	055b      	lsls	r3, r3, #21
 800270e:	0312      	lsls	r2, r2, #12
 8002710:	2400      	movs	r4, #0
 8002712:	0b12      	lsrs	r2, r2, #12
 8002714:	0d5b      	lsrs	r3, r3, #21
 8002716:	e7f1      	b.n	80026fc <__aeabi_ui2d+0x2c>
 8002718:	0000041e 	.word	0x0000041e

0800271c <__aeabi_f2d>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	0043      	lsls	r3, r0, #1
 8002720:	0246      	lsls	r6, r0, #9
 8002722:	0fc4      	lsrs	r4, r0, #31
 8002724:	20fe      	movs	r0, #254	; 0xfe
 8002726:	0e1b      	lsrs	r3, r3, #24
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	0a75      	lsrs	r5, r6, #9
 800272c:	4208      	tst	r0, r1
 800272e:	d00c      	beq.n	800274a <__aeabi_f2d+0x2e>
 8002730:	22e0      	movs	r2, #224	; 0xe0
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4694      	mov	ip, r2
 8002736:	076d      	lsls	r5, r5, #29
 8002738:	0b36      	lsrs	r6, r6, #12
 800273a:	4463      	add	r3, ip
 800273c:	051b      	lsls	r3, r3, #20
 800273e:	4333      	orrs	r3, r6
 8002740:	07e4      	lsls	r4, r4, #31
 8002742:	4323      	orrs	r3, r4
 8002744:	0028      	movs	r0, r5
 8002746:	0019      	movs	r1, r3
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	2b00      	cmp	r3, #0
 800274c:	d114      	bne.n	8002778 <__aeabi_f2d+0x5c>
 800274e:	2d00      	cmp	r5, #0
 8002750:	d01b      	beq.n	800278a <__aeabi_f2d+0x6e>
 8002752:	0028      	movs	r0, r5
 8002754:	f000 f8b2 	bl	80028bc <__clzsi2>
 8002758:	280a      	cmp	r0, #10
 800275a:	dc1c      	bgt.n	8002796 <__aeabi_f2d+0x7a>
 800275c:	230b      	movs	r3, #11
 800275e:	002a      	movs	r2, r5
 8002760:	1a1b      	subs	r3, r3, r0
 8002762:	40da      	lsrs	r2, r3
 8002764:	0003      	movs	r3, r0
 8002766:	3315      	adds	r3, #21
 8002768:	409d      	lsls	r5, r3
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <__aeabi_f2d+0x88>)
 800276c:	0312      	lsls	r2, r2, #12
 800276e:	1a1b      	subs	r3, r3, r0
 8002770:	055b      	lsls	r3, r3, #21
 8002772:	0b16      	lsrs	r6, r2, #12
 8002774:	0d5b      	lsrs	r3, r3, #21
 8002776:	e7e1      	b.n	800273c <__aeabi_f2d+0x20>
 8002778:	2d00      	cmp	r5, #0
 800277a:	d009      	beq.n	8002790 <__aeabi_f2d+0x74>
 800277c:	0b32      	lsrs	r2, r6, #12
 800277e:	2680      	movs	r6, #128	; 0x80
 8002780:	0336      	lsls	r6, r6, #12
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <__aeabi_f2d+0x8c>)
 8002784:	076d      	lsls	r5, r5, #29
 8002786:	4316      	orrs	r6, r2
 8002788:	e7d8      	b.n	800273c <__aeabi_f2d+0x20>
 800278a:	2300      	movs	r3, #0
 800278c:	2600      	movs	r6, #0
 800278e:	e7d5      	b.n	800273c <__aeabi_f2d+0x20>
 8002790:	2600      	movs	r6, #0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <__aeabi_f2d+0x8c>)
 8002794:	e7d2      	b.n	800273c <__aeabi_f2d+0x20>
 8002796:	0003      	movs	r3, r0
 8002798:	002a      	movs	r2, r5
 800279a:	3b0b      	subs	r3, #11
 800279c:	409a      	lsls	r2, r3
 800279e:	2500      	movs	r5, #0
 80027a0:	e7e3      	b.n	800276a <__aeabi_f2d+0x4e>
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	00000389 	.word	0x00000389
 80027a8:	000007ff 	.word	0x000007ff

080027ac <__aeabi_d2f>:
 80027ac:	0002      	movs	r2, r0
 80027ae:	004b      	lsls	r3, r1, #1
 80027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b2:	0308      	lsls	r0, r1, #12
 80027b4:	0d5b      	lsrs	r3, r3, #21
 80027b6:	4e3d      	ldr	r6, [pc, #244]	; (80028ac <__aeabi_d2f+0x100>)
 80027b8:	0fcc      	lsrs	r4, r1, #31
 80027ba:	0a40      	lsrs	r0, r0, #9
 80027bc:	0f51      	lsrs	r1, r2, #29
 80027be:	1c5f      	adds	r7, r3, #1
 80027c0:	4308      	orrs	r0, r1
 80027c2:	00d5      	lsls	r5, r2, #3
 80027c4:	4237      	tst	r7, r6
 80027c6:	d00a      	beq.n	80027de <__aeabi_d2f+0x32>
 80027c8:	4939      	ldr	r1, [pc, #228]	; (80028b0 <__aeabi_d2f+0x104>)
 80027ca:	185e      	adds	r6, r3, r1
 80027cc:	2efe      	cmp	r6, #254	; 0xfe
 80027ce:	dd16      	ble.n	80027fe <__aeabi_d2f+0x52>
 80027d0:	23ff      	movs	r3, #255	; 0xff
 80027d2:	2100      	movs	r1, #0
 80027d4:	05db      	lsls	r3, r3, #23
 80027d6:	430b      	orrs	r3, r1
 80027d8:	07e0      	lsls	r0, r4, #31
 80027da:	4318      	orrs	r0, r3
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <__aeabi_d2f+0x44>
 80027e2:	4328      	orrs	r0, r5
 80027e4:	d027      	beq.n	8002836 <__aeabi_d2f+0x8a>
 80027e6:	2105      	movs	r1, #5
 80027e8:	0189      	lsls	r1, r1, #6
 80027ea:	0a49      	lsrs	r1, r1, #9
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e7f1      	b.n	80027d4 <__aeabi_d2f+0x28>
 80027f0:	4305      	orrs	r5, r0
 80027f2:	d0ed      	beq.n	80027d0 <__aeabi_d2f+0x24>
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	03c9      	lsls	r1, r1, #15
 80027f8:	23ff      	movs	r3, #255	; 0xff
 80027fa:	4301      	orrs	r1, r0
 80027fc:	e7ea      	b.n	80027d4 <__aeabi_d2f+0x28>
 80027fe:	2e00      	cmp	r6, #0
 8002800:	dd1c      	ble.n	800283c <__aeabi_d2f+0x90>
 8002802:	0192      	lsls	r2, r2, #6
 8002804:	0011      	movs	r1, r2
 8002806:	1e4a      	subs	r2, r1, #1
 8002808:	4191      	sbcs	r1, r2
 800280a:	00c0      	lsls	r0, r0, #3
 800280c:	0f6d      	lsrs	r5, r5, #29
 800280e:	4301      	orrs	r1, r0
 8002810:	4329      	orrs	r1, r5
 8002812:	074b      	lsls	r3, r1, #29
 8002814:	d048      	beq.n	80028a8 <__aeabi_d2f+0xfc>
 8002816:	230f      	movs	r3, #15
 8002818:	400b      	ands	r3, r1
 800281a:	2b04      	cmp	r3, #4
 800281c:	d000      	beq.n	8002820 <__aeabi_d2f+0x74>
 800281e:	3104      	adds	r1, #4
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	04db      	lsls	r3, r3, #19
 8002824:	400b      	ands	r3, r1
 8002826:	d03f      	beq.n	80028a8 <__aeabi_d2f+0xfc>
 8002828:	1c72      	adds	r2, r6, #1
 800282a:	2efe      	cmp	r6, #254	; 0xfe
 800282c:	d0d0      	beq.n	80027d0 <__aeabi_d2f+0x24>
 800282e:	0189      	lsls	r1, r1, #6
 8002830:	0a49      	lsrs	r1, r1, #9
 8002832:	b2d3      	uxtb	r3, r2
 8002834:	e7ce      	b.n	80027d4 <__aeabi_d2f+0x28>
 8002836:	2300      	movs	r3, #0
 8002838:	2100      	movs	r1, #0
 800283a:	e7cb      	b.n	80027d4 <__aeabi_d2f+0x28>
 800283c:	0032      	movs	r2, r6
 800283e:	3217      	adds	r2, #23
 8002840:	db22      	blt.n	8002888 <__aeabi_d2f+0xdc>
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	221e      	movs	r2, #30
 8002846:	0409      	lsls	r1, r1, #16
 8002848:	4308      	orrs	r0, r1
 800284a:	1b92      	subs	r2, r2, r6
 800284c:	2a1f      	cmp	r2, #31
 800284e:	dd1d      	ble.n	800288c <__aeabi_d2f+0xe0>
 8002850:	2102      	movs	r1, #2
 8002852:	4249      	negs	r1, r1
 8002854:	1b8e      	subs	r6, r1, r6
 8002856:	0001      	movs	r1, r0
 8002858:	40f1      	lsrs	r1, r6
 800285a:	000e      	movs	r6, r1
 800285c:	2a20      	cmp	r2, #32
 800285e:	d004      	beq.n	800286a <__aeabi_d2f+0xbe>
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <__aeabi_d2f+0x108>)
 8002862:	4694      	mov	ip, r2
 8002864:	4463      	add	r3, ip
 8002866:	4098      	lsls	r0, r3
 8002868:	4305      	orrs	r5, r0
 800286a:	0029      	movs	r1, r5
 800286c:	1e4d      	subs	r5, r1, #1
 800286e:	41a9      	sbcs	r1, r5
 8002870:	4331      	orrs	r1, r6
 8002872:	2600      	movs	r6, #0
 8002874:	074b      	lsls	r3, r1, #29
 8002876:	d1ce      	bne.n	8002816 <__aeabi_d2f+0x6a>
 8002878:	2080      	movs	r0, #128	; 0x80
 800287a:	000b      	movs	r3, r1
 800287c:	04c0      	lsls	r0, r0, #19
 800287e:	2201      	movs	r2, #1
 8002880:	4003      	ands	r3, r0
 8002882:	4201      	tst	r1, r0
 8002884:	d1d3      	bne.n	800282e <__aeabi_d2f+0x82>
 8002886:	e7af      	b.n	80027e8 <__aeabi_d2f+0x3c>
 8002888:	2300      	movs	r3, #0
 800288a:	e7ac      	b.n	80027e6 <__aeabi_d2f+0x3a>
 800288c:	490a      	ldr	r1, [pc, #40]	; (80028b8 <__aeabi_d2f+0x10c>)
 800288e:	468c      	mov	ip, r1
 8002890:	0029      	movs	r1, r5
 8002892:	4463      	add	r3, ip
 8002894:	40d1      	lsrs	r1, r2
 8002896:	409d      	lsls	r5, r3
 8002898:	000a      	movs	r2, r1
 800289a:	0029      	movs	r1, r5
 800289c:	4098      	lsls	r0, r3
 800289e:	1e4d      	subs	r5, r1, #1
 80028a0:	41a9      	sbcs	r1, r5
 80028a2:	4301      	orrs	r1, r0
 80028a4:	4311      	orrs	r1, r2
 80028a6:	e7e4      	b.n	8002872 <__aeabi_d2f+0xc6>
 80028a8:	0033      	movs	r3, r6
 80028aa:	e79d      	b.n	80027e8 <__aeabi_d2f+0x3c>
 80028ac:	000007fe 	.word	0x000007fe
 80028b0:	fffffc80 	.word	0xfffffc80
 80028b4:	fffffca2 	.word	0xfffffca2
 80028b8:	fffffc82 	.word	0xfffffc82

080028bc <__clzsi2>:
 80028bc:	211c      	movs	r1, #28
 80028be:	2301      	movs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	4298      	cmp	r0, r3
 80028c4:	d301      	bcc.n	80028ca <__clzsi2+0xe>
 80028c6:	0c00      	lsrs	r0, r0, #16
 80028c8:	3910      	subs	r1, #16
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	4298      	cmp	r0, r3
 80028ce:	d301      	bcc.n	80028d4 <__clzsi2+0x18>
 80028d0:	0a00      	lsrs	r0, r0, #8
 80028d2:	3908      	subs	r1, #8
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	4298      	cmp	r0, r3
 80028d8:	d301      	bcc.n	80028de <__clzsi2+0x22>
 80028da:	0900      	lsrs	r0, r0, #4
 80028dc:	3904      	subs	r1, #4
 80028de:	a202      	add	r2, pc, #8	; (adr r2, 80028e8 <__clzsi2+0x2c>)
 80028e0:	5c10      	ldrb	r0, [r2, r0]
 80028e2:	1840      	adds	r0, r0, r1
 80028e4:	4770      	bx	lr
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	02020304 	.word	0x02020304
 80028ec:	01010101 	.word	0x01010101
	...

080028f8 <motor_wheel_init>:
};

typedef struct motor_wheel Motor_Wheel ;

void motor_wheel_init(Motor_Wheel *str, uint8_t motor_num)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	000a      	movs	r2, r1
 8002902:	1cfb      	adds	r3, r7, #3
 8002904:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1cfa      	adds	r2, r7, #3
 800290a:	7812      	ldrb	r2, [r2, #0]
 800290c:	701a      	strb	r2, [r3, #0]
	str->inverse_q = 0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	70da      	strb	r2, [r3, #3]
	str->break_q = 0;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	709a      	strb	r2, [r3, #2]
	str->dir_q = 0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	705a      	strb	r2, [r3, #1]
	str->duty_cycle = 0.0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	605a      	str	r2, [r3, #4]
	// BREAK PIN
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set HIGH
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	481b      	ldr	r0, [pc, #108]	; (8002998 <motor_wheel_init+0xa0>)
 800292c:	2200      	movs	r2, #0
 800292e:	0019      	movs	r1, r3
 8002930:	f002 ff4f 	bl	80057d2 <HAL_GPIO_WritePin>
	// DIRECTION PIN
	if (str->id == 1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <motor_wheel_init+0x52>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <motor_wheel_init+0xa0>)
 800293e:	2201      	movs	r2, #1
 8002940:	2101      	movs	r1, #1
 8002942:	0018      	movs	r0, r3
 8002944:	f002 ff45 	bl	80057d2 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
		str->inverse_q = 1;
	}
}
 8002948:	e021      	b.n	800298e <motor_wheel_init+0x96>
	else if (str->id == 2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d109      	bne.n	8002966 <motor_wheel_init+0x6e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <motor_wheel_init+0xa0>)
 8002954:	2200      	movs	r2, #0
 8002956:	2102      	movs	r1, #2
 8002958:	0018      	movs	r0, r3
 800295a:	f002 ff3a 	bl	80057d2 <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	70da      	strb	r2, [r3, #3]
}
 8002964:	e013      	b.n	800298e <motor_wheel_init+0x96>
	else if (str->id == 3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d106      	bne.n	800297c <motor_wheel_init+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set LOW
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <motor_wheel_init+0xa0>)
 8002970:	2201      	movs	r2, #1
 8002972:	2101      	movs	r1, #1
 8002974:	0018      	movs	r0, r3
 8002976:	f002 ff2c 	bl	80057d2 <HAL_GPIO_WritePin>
}
 800297a:	e008      	b.n	800298e <motor_wheel_init+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set HIGH
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <motor_wheel_init+0xa0>)
 800297e:	2200      	movs	r2, #0
 8002980:	2102      	movs	r1, #2
 8002982:	0018      	movs	r0, r3
 8002984:	f002 ff25 	bl	80057d2 <HAL_GPIO_WritePin>
		str->inverse_q = 1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	70da      	strb	r2, [r3, #3]
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	48000800 	.word	0x48000800

0800299c <motorPWM_pulse>:


void motorPWM_pulse(TIM_HandleTypeDef* timer_handle, Motor_Wheel *str, int LPU) // PWM Velocity Control
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]

	uint8_t throttle = abs(LPU);//fabs(LPU) * 100;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	17d9      	asrs	r1, r3, #31
 80029ac:	185a      	adds	r2, r3, r1
 80029ae:	404a      	eors	r2, r1
 80029b0:	2117      	movs	r1, #23
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	701a      	strb	r2, [r3, #0]
	if (abs(LPU) > 100)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	17da      	asrs	r2, r3, #31
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	4053      	eors	r3, r2
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	dc2a      	bgt.n	8002a18 <motorPWM_pulse+0x7c>
	{
		return;
	}

	if (str->id == 1)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <motorPWM_pulse+0x3a>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_1, throttle);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	187a      	adds	r2, r7, r1
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
 80029d4:	e021      	b.n	8002a1a <motorPWM_pulse+0x7e>
	else if (str->id == 2)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d106      	bne.n	80029ec <motorPWM_pulse+0x50>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_2, throttle);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2217      	movs	r2, #23
 80029e4:	18ba      	adds	r2, r7, r2
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
 80029ea:	e016      	b.n	8002a1a <motorPWM_pulse+0x7e>
	else if (str->id == 3)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d106      	bne.n	8002a02 <motorPWM_pulse+0x66>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_3, throttle);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2217      	movs	r2, #23
 80029fa:	18ba      	adds	r2, r7, r2
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a00:	e00b      	b.n	8002a1a <motorPWM_pulse+0x7e>
	else if (str->id == 4)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d107      	bne.n	8002a1a <motorPWM_pulse+0x7e>
		__HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2217      	movs	r2, #23
 8002a10:	18ba      	adds	r2, r7, r2
 8002a12:	7812      	ldrb	r2, [r2, #0]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
 8002a16:	e000      	b.n	8002a1a <motorPWM_pulse+0x7e>
		return;
 8002a18:	46c0      	nop			; (mov r8, r8)
};
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b006      	add	sp, #24
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <motor_DIR>:
  else if (str->id == 4)
	  __HAL_TIM_SET_COMPARE(timer_handle, TIM_CHANNEL_4, throttle);
};

void motor_DIR(Motor_Wheel *str, const uint8_t Direction) // Send direction change command
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	000a      	movs	r2, r1
 8002a2a:	1cfb      	adds	r3, r7, #3
 8002a2c:	701a      	strb	r2, [r3, #0]

	str->dir_q = Direction;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	1cfa      	adds	r2, r7, #3
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	705a      	strb	r2, [r3, #1]
	// 0 = Forward
	// 1 = backward


  // DIRECTION PIN
  if (str->dir_q == 1) // Backward
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d115      	bne.n	8002a6a <motor_DIR+0x4a>
  {
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d003      	beq.n	8002a4e <motor_DIR+0x2e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d106      	bne.n	8002a5c <motor_DIR+0x3c>
	  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Set LOW
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <motor_DIR+0x80>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	2101      	movs	r1, #1
 8002a54:	0018      	movs	r0, r3
 8002a56:	f002 febc 	bl	80057d2 <HAL_GPIO_WritePin>
 8002a5a:	e01c      	b.n	8002a96 <motor_DIR+0x76>
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Set HIGH
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <motor_DIR+0x80>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	2102      	movs	r1, #2
 8002a62:	0018      	movs	r0, r3
 8002a64:	f002 feb5 	bl	80057d2 <HAL_GPIO_WritePin>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
	 else // RIGHT MOTORS
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
  }
}
 8002a68:	e015      	b.n	8002a96 <motor_DIR+0x76>
	 if (str->id == 1 || str->id == 3) // LEFT MOTORS
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d003      	beq.n	8002a7a <motor_DIR+0x5a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d106      	bne.n	8002a88 <motor_DIR+0x68>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Set HIGH
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <motor_DIR+0x80>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2101      	movs	r1, #1
 8002a80:	0018      	movs	r0, r3
 8002a82:	f002 fea6 	bl	80057d2 <HAL_GPIO_WritePin>
 8002a86:	e006      	b.n	8002a96 <motor_DIR+0x76>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set LOW
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <motor_DIR+0x80>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f002 fe9f 	bl	80057d2 <HAL_GPIO_WritePin>
}
 8002a94:	e7ff      	b.n	8002a96 <motor_DIR+0x76>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	48000800 	.word	0x48000800

08002aa4 <motor_break>:
	str->inverse_q = abs(str->inverse_q - 1);
	//if (abs(str->dir_q - str->inverse_q) == 1)
}

void motor_break(Motor_Wheel *str, uint8_t br) // Send break signal
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	000a      	movs	r2, r1
 8002aae:	1cfb      	adds	r3, r7, #3
 8002ab0:	701a      	strb	r2, [r3, #0]
  str->break_q = br;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1cfa      	adds	r2, r7, #3
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	709a      	strb	r2, [r3, #2]
  // BREAK PIN
  if (str->break_q == 1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	789b      	ldrb	r3, [r3, #2]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10a      	bne.n	8002ad8 <motor_break+0x34>
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Set HIGH
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	480a      	ldr	r0, [pc, #40]	; (8002af0 <motor_break+0x4c>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	0019      	movs	r1, r3
 8002acc:	f002 fe81 	bl	80057d2 <HAL_GPIO_WritePin>
	  str->duty_cycle = 0.0;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	605a      	str	r2, [r3, #4]
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
  }
}
 8002ad6:	e006      	b.n	8002ae6 <motor_break+0x42>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Set LOW
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <motor_break+0x4c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	f002 fe76 	bl	80057d2 <HAL_GPIO_WritePin>
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	48000800 	.word	0x48000800

08002af4 <linear_motor_init>:
};

typedef struct linear_motor Linear_Motor ;

void linear_motor_init(Linear_Motor *str, uint8_t motor_num, uint8_t inverse)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	0008      	movs	r0, r1
 8002afe:	0011      	movs	r1, r2
 8002b00:	1cfb      	adds	r3, r7, #3
 8002b02:	1c02      	adds	r2, r0, #0
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	1cbb      	adds	r3, r7, #2
 8002b08:	1c0a      	adds	r2, r1, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
	str->id = motor_num;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1cfa      	adds	r2, r7, #3
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	701a      	strb	r2, [r3, #0]
	str->inverse_q = inverse;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1cba      	adds	r2, r7, #2
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	709a      	strb	r2, [r3, #2]
	str->current_position = 0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
	str->target_position = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
	str->dir_q = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	705a      	strb	r2, [r3, #1]
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b002      	add	sp, #8
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <linear_motor_set_target>:


void linear_motor_set_target(Linear_Motor *str, int32_t target)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
	if (target > POSITION_MAX)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <linear_motor_set_target+0x34>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	dd02      	ble.n	8002b50 <linear_motor_set_target+0x18>
	{
		target = POSITION_MAX;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <linear_motor_set_target+0x34>)
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	e005      	b.n	8002b5c <linear_motor_set_target+0x24>
	}
	else if (target < POSITION_MIN)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <linear_motor_set_target+0x38>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	da01      	bge.n	8002b5c <linear_motor_set_target+0x24>
	{
		target = POSITION_MIN;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <linear_motor_set_target+0x38>)
 8002b5a:	603b      	str	r3, [r7, #0]
	}
	str->target_position = target;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	609a      	str	r2, [r3, #8]
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	0000280a 	.word	0x0000280a
 8002b70:	ffffd7f6 	.word	0xffffd7f6

08002b74 <linear_motor_get_position>:


int32_t linear_motor_get_position(Linear_Motor *str)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	return str->current_position;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <linear_motor_pulse>:
  * @param  timer_handle timer handle associated with linear motors
  * @param  counter_handle counter pointer to track number of pulses sent via interupt callback
  * @retval if(errors_occurred)
  */
uint8_t linear_motor_pulse(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
	if (str->id == 1 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <linear_motor_pulse+0x24>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	223e      	movs	r2, #62	; 0x3e
 8002ba0:	5c9b      	ldrb	r3, [r3, r2]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d101      	bne.n	8002bac <linear_motor_pulse+0x24>
	{
		return 1; // error occurred
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e075      	b.n	8002c98 <linear_motor_pulse+0x110>
	}
	else if (str->id == 2 && TIM_CHANNEL_STATE_GET(timer_handle, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d107      	bne.n	8002bc4 <linear_motor_pulse+0x3c>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	223f      	movs	r2, #63	; 0x3f
 8002bb8:	5c9b      	ldrb	r3, [r3, r2]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d101      	bne.n	8002bc4 <linear_motor_pulse+0x3c>
	{
		return 1; // error occurred
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e069      	b.n	8002c98 <linear_motor_pulse+0x110>
	}
	uint32_t shift = abs(str->target_position - str->current_position);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	17da      	asrs	r2, r3, #31
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	4053      	eors	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
	if (shift == 0)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <linear_motor_pulse+0x58>
	{
		return 1;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e05b      	b.n	8002c98 <linear_motor_pulse+0x110>
	}
	if (str->target_position - str->current_position > 0)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd03      	ble.n	8002bf6 <linear_motor_pulse+0x6e>
	{
		str->dir_q = 1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	705a      	strb	r2, [r3, #1]
 8002bf4:	e002      	b.n	8002bfc <linear_motor_pulse+0x74>
	}
	else
	{
		str->dir_q = 0;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	705a      	strb	r2, [r3, #1]
	}
	if (str->id == 1)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d120      	bne.n	8002c46 <linear_motor_pulse+0xbe>
	{
		*counter_handle = shift;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	601a      	str	r2, [r3, #0]
		// TODO: SET DIRECTION GPIO
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	001a      	movs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	789b      	ldrb	r3, [r3, #2]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	17da      	asrs	r2, r3, #31
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	4053      	eors	r3, r2
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <linear_motor_pulse+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <linear_motor_pulse+0x118>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	2104      	movs	r1, #4
 8002c26:	0018      	movs	r0, r3
 8002c28:	f002 fdd3 	bl	80057d2 <HAL_GPIO_WritePin>
 8002c2c:	e005      	b.n	8002c3a <linear_motor_pulse+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <linear_motor_pulse+0x118>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	2104      	movs	r1, #4
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 fdcc 	bl	80057d2 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f003 fbb0 	bl	80063a4 <HAL_TIM_PWM_Start_IT>
 8002c44:	e023      	b.n	8002c8e <linear_motor_pulse+0x106>
	}
	else if (str->id == 2)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d11f      	bne.n	8002c8e <linear_motor_pulse+0x106>
	{
		*counter_handle = shift;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]
		if (abs(str->dir_q - str->inverse_q) == 1)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	001a      	movs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	789b      	ldrb	r3, [r3, #2]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	17da      	asrs	r2, r3, #31
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	4053      	eors	r3, r2
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <linear_motor_pulse+0xf0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <linear_motor_pulse+0x118>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	2108      	movs	r1, #8
 8002c70:	0018      	movs	r0, r3
 8002c72:	f002 fdae 	bl	80057d2 <HAL_GPIO_WritePin>
 8002c76:	e005      	b.n	8002c84 <linear_motor_pulse+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <linear_motor_pulse+0x118>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2108      	movs	r1, #8
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f002 fda7 	bl	80057d2 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2104      	movs	r1, #4
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f003 fb8b 	bl	80063a4 <HAL_TIM_PWM_Start_IT>
	}
	str->current_position = str->target_position;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]
	return 0;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	48000800 	.word	0x48000800

08002ca4 <linear_motor_calibrate>:


uint32_t linear_motor_calibrate(Linear_Motor *str, TIM_HandleTypeDef* timer_handle, uint32_t* counter_handle)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
	uint32_t stepSize = 100;
 8002cb0:	2364      	movs	r3, #100	; 0x64
 8002cb2:	617b      	str	r3, [r7, #20]
	uint32_t distanceTraveled = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
	uint8_t edgeReached1 = 0;
 8002cb8:	231b      	movs	r3, #27
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
	uint8_t edgeReached2 = 0;
 8002cc0:	2313      	movs	r3, #19
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
	if (str->id == 1)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <linear_motor_calibrate+0x3a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Set HIGH
 8002cd0:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <linear_motor_calibrate+0x138>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f002 fd7b 	bl	80057d2 <HAL_GPIO_WritePin>
 8002cdc:	e046      	b.n	8002d6c <linear_motor_calibrate+0xc8>
	}
	else if (str->id == 2)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d142      	bne.n	8002d6c <linear_motor_calibrate+0xc8>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set HIGH
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <linear_motor_calibrate+0x138>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2108      	movs	r1, #8
 8002cec:	0018      	movs	r0, r3
 8002cee:	f002 fd70 	bl	80057d2 <HAL_GPIO_WritePin>
	}
	while (edgeReached1 == 0)
 8002cf2:	e03b      	b.n	8002d6c <linear_motor_calibrate+0xc8>
	{
		*counter_handle = stepSize;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	601a      	str	r2, [r3, #0]
		if (str->id == 1)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d115      	bne.n	8002d2e <linear_motor_calibrate+0x8a>
		{
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2100      	movs	r1, #0
 8002d06:	0018      	movs	r0, r3
 8002d08:	f003 fb4c 	bl	80063a4 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0)
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <linear_motor_calibrate+0x13c>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0018      	movs	r0, r3
 8002d12:	f002 fd41 	bl	8005798 <HAL_GPIO_ReadPin>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d104      	bne.n	8002d24 <linear_motor_calibrate+0x80>
			{
				edgeReached1 = 1;
 8002d1a:	231b      	movs	r3, #27
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e023      	b.n	8002d6c <linear_motor_calibrate+0xc8>
			}
			else
			{
				distanceTraveled += stepSize;
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	18d3      	adds	r3, r2, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	e01e      	b.n	8002d6c <linear_motor_calibrate+0xc8>
			}
			// TODO: add timeout
		}
		else if (str->id == 2)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	241b      	movs	r4, #27
 8002d34:	193a      	adds	r2, r7, r4
 8002d36:	1939      	adds	r1, r7, r4
 8002d38:	7809      	ldrb	r1, [r1, #0]
 8002d3a:	7011      	strb	r1, [r2, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d115      	bne.n	8002d6c <linear_motor_calibrate+0xc8>
		{
			HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2104      	movs	r1, #4
 8002d44:	0018      	movs	r0, r3
 8002d46:	f003 fb2d 	bl	80063a4 <HAL_TIM_PWM_Start_IT>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	4a23      	ldr	r2, [pc, #140]	; (8002ddc <linear_motor_calibrate+0x138>)
 8002d50:	0019      	movs	r1, r3
 8002d52:	0010      	movs	r0, r2
 8002d54:	f002 fd20 	bl	8005798 <HAL_GPIO_ReadPin>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d103      	bne.n	8002d64 <linear_motor_calibrate+0xc0>
			{
				edgeReached1 = 1;
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e003      	b.n	8002d6c <linear_motor_calibrate+0xc8>
			}
			else
			{
				distanceTraveled += stepSize;
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	18d3      	adds	r3, r2, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
	while (edgeReached1 == 0)
 8002d6c:	231b      	movs	r3, #27
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0be      	beq.n	8002cf4 <linear_motor_calibrate+0x50>
			}
			// TODO: add timeout
		}

	}
	if (str->id == 1)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d112      	bne.n	8002da4 <linear_motor_calibrate+0x100>
	{
		// Change direction of the front motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Set LOW
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <linear_motor_calibrate+0x138>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	2104      	movs	r1, #4
 8002d84:	0018      	movs	r0, r3
 8002d86:	f002 fd24 	bl	80057d2 <HAL_GPIO_WritePin>
		*counter_handle = 9300;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <linear_motor_calibrate+0x140>)
 8002d8e:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_1);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2100      	movs	r1, #0
 8002d94:	0018      	movs	r0, r3
 8002d96:	f003 fb05 	bl	80063a4 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	e017      	b.n	8002dd4 <linear_motor_calibrate+0x130>
	}
	else if (str->id == 2)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d112      	bne.n	8002dd2 <linear_motor_calibrate+0x12e>
	{
		// Change direction of the rear motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Set LOW
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <linear_motor_calibrate+0x138>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	2108      	movs	r1, #8
 8002db2:	0018      	movs	r0, r3
 8002db4:	f002 fd0d 	bl	80057d2 <HAL_GPIO_WritePin>
		*counter_handle = 9300;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <linear_motor_calibrate+0x140>)
 8002dbc:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(timer_handle, TIM_CHANNEL_2);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f003 faee 	bl	80063a4 <HAL_TIM_PWM_Start_IT>
		str->current_position = 0;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
		return distanceTraveled;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	e000      	b.n	8002dd4 <linear_motor_calibrate+0x130>
	}
	return 0;
 8002dd2:	2300      	movs	r3, #0

}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b009      	add	sp, #36	; 0x24
 8002dda:	bd90      	pop	{r4, r7, pc}
 8002ddc:	48000800 	.word	0x48000800
 8002de0:	48000400 	.word	0x48000400
 8002de4:	00002454 	.word	0x00002454

08002de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b0c5      	sub	sp, #276	; 0x114
 8002dec:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dee:	f001 ffe7 	bl	8004dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df2:	f000 fc15 	bl	8003620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002df6:	f000 feaf 	bl	8003b58 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002dfa:	f000 fd25 	bl	8003848 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002dfe:	f000 fc4f 	bl	80036a0 <MX_TIM1_Init>
  MX_TIM15_Init();
 8002e02:	f000 fd9d 	bl	8003940 <MX_TIM15_Init>
  MX_DMA_Init();
 8002e06:	f000 fe89 	bl	8003b1c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002e0a:	f000 fe57 	bl	8003abc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8002e0e:	23fa      	movs	r3, #250	; 0xfa
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f002 f838 	bl	8004e88 <HAL_Delay>

  // --------------------------------------
  // ENCODERS READING
  // --------------------------------------
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002e18:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <main+0x1e4>)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f003 fccf 	bl	80067c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002e22:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <main+0x1e4>)
 8002e24:	2104      	movs	r1, #4
 8002e26:	0018      	movs	r0, r3
 8002e28:	f003 fcca 	bl	80067c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002e2c:	4b67      	ldr	r3, [pc, #412]	; (8002fcc <main+0x1e4>)
 8002e2e:	2108      	movs	r1, #8
 8002e30:	0018      	movs	r0, r3
 8002e32:	f003 fcc5 	bl	80067c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <main+0x1e4>)
 8002e38:	210c      	movs	r1, #12
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f003 fcc0 	bl	80067c0 <HAL_TIM_IC_Start_IT>
  uint8_t MSG[65] = {'\0'};
 8002e40:	235c      	movs	r3, #92	; 0x5c
 8002e42:	2220      	movs	r2, #32
 8002e44:	4694      	mov	ip, r2
 8002e46:	44bc      	add	ip, r7
 8002e48:	4463      	add	r3, ip
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	223d      	movs	r2, #61	; 0x3d
 8002e52:	2100      	movs	r1, #0
 8002e54:	0018      	movs	r0, r3
 8002e56:	f006 f94f 	bl	80090f8 <memset>
  float speed1 = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	22c4      	movs	r2, #196	; 0xc4
 8002e5e:	2120      	movs	r1, #32
 8002e60:	468c      	mov	ip, r1
 8002e62:	44bc      	add	ip, r7
 8002e64:	4462      	add	r2, ip
 8002e66:	6013      	str	r3, [r2, #0]
  float speed2 = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	22c0      	movs	r2, #192	; 0xc0
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	468c      	mov	ip, r1
 8002e70:	44bc      	add	ip, r7
 8002e72:	4462      	add	r2, ip
 8002e74:	6013      	str	r3, [r2, #0]
  float speed3 = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	22bc      	movs	r2, #188	; 0xbc
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	468c      	mov	ip, r1
 8002e7e:	44bc      	add	ip, r7
 8002e80:	4462      	add	r2, ip
 8002e82:	6013      	str	r3, [r2, #0]
  float speed4 = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	22b8      	movs	r2, #184	; 0xb8
 8002e88:	2120      	movs	r1, #32
 8002e8a:	468c      	mov	ip, r1
 8002e8c:	44bc      	add	ip, r7
 8002e8e:	4462      	add	r2, ip
 8002e90:	6013      	str	r3, [r2, #0]
  float gamma1 = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	67bb      	str	r3, [r7, #120]	; 0x78
  float gamma2 = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t cycleCounter = 0;
 8002e9a:	23b7      	movs	r3, #183	; 0xb7
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	4694      	mov	ip, r2
 8002ea0:	44bc      	add	ip, r7
 8002ea2:	4463      	add	r3, ip
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]

  uint32_t sumVect = 0.0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	22b0      	movs	r2, #176	; 0xb0
 8002eac:	2120      	movs	r1, #32
 8002eae:	468c      	mov	ip, r1
 8002eb0:	44bc      	add	ip, r7
 8002eb2:	4462      	add	r2, ip
 8002eb4:	6013      	str	r3, [r2, #0]
  uint32_t vect[4][5] = { 0.0 };
 8002eb6:	2324      	movs	r3, #36	; 0x24
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	0018      	movs	r0, r3
 8002ebc:	2350      	movs	r3, #80	; 0x50
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f006 f919 	bl	80090f8 <memset>

  // --------------------------------------
  // MOTORS CONTROL
  // --------------------------------------
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ec6:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <main+0x1e8>)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f003 f9b8 	bl	8006240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <main+0x1e8>)
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f003 f9b3 	bl	8006240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <main+0x1e8>)
 8002edc:	2108      	movs	r1, #8
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f003 f9ae 	bl	8006240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <main+0x1e8>)
 8002ee6:	210c      	movs	r1, #12
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f003 f9a9 	bl	8006240 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2);
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <main+0x1ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 2);
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <main+0x1ec>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2202      	movs	r2, #2
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38

  // SETUP
  for (int i = 0; i < 4; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	22ac      	movs	r2, #172	; 0xac
 8002f02:	2120      	movs	r1, #32
 8002f04:	468c      	mov	ip, r1
 8002f06:	44bc      	add	ip, r7
 8002f08:	4462      	add	r2, ip
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e039      	b.n	8002f82 <main+0x19a>
  {
	  pMW[i] = &MW[i];
 8002f0e:	24ac      	movs	r4, #172	; 0xac
 8002f10:	2520      	movs	r5, #32
 8002f12:	197b      	adds	r3, r7, r5
 8002f14:	191b      	adds	r3, r3, r4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	00da      	lsls	r2, r3, #3
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <main+0x1f0>)
 8002f1c:	18d1      	adds	r1, r2, r3
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <main+0x1f4>)
 8002f20:	197a      	adds	r2, r7, r5
 8002f22:	1912      	adds	r2, r2, r4
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	50d1      	str	r1, [r2, r3]
	  motor_wheel_init(pMW[i], i+1); // init structure
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <main+0x1f4>)
 8002f2c:	197a      	adds	r2, r7, r5
 8002f2e:	1912      	adds	r2, r2, r4
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	58d2      	ldr	r2, [r2, r3]
 8002f36:	197b      	adds	r3, r7, r5
 8002f38:	191b      	adds	r3, r3, r4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f7ff fcd7 	bl	80028f8 <motor_wheel_init>
	  motorPWM_pulse(&htim1, pMW[i], 0.0); // send zero velocities
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <main+0x1f4>)
 8002f4c:	197a      	adds	r2, r7, r5
 8002f4e:	1912      	adds	r2, r2, r4
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	58d1      	ldr	r1, [r2, r3]
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <main+0x1e8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff fd1e 	bl	800299c <motorPWM_pulse>
	  motor_break(pMW[i], 0);  // set brake to false
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <main+0x1f4>)
 8002f62:	197a      	adds	r2, r7, r5
 8002f64:	1912      	adds	r2, r2, r4
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	58d3      	ldr	r3, [r2, r3]
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff fd98 	bl	8002aa4 <motor_break>
  for (int i = 0; i < 4; i++)
 8002f74:	197b      	adds	r3, r7, r5
 8002f76:	191b      	adds	r3, r3, r4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	197a      	adds	r2, r7, r5
 8002f7e:	1912      	adds	r2, r2, r4
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	23ac      	movs	r3, #172	; 0xac
 8002f84:	2220      	movs	r2, #32
 8002f86:	4694      	mov	ip, r2
 8002f88:	44bc      	add	ip, r7
 8002f8a:	4463      	add	r3, ip
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	ddbd      	ble.n	8002f0e <main+0x126>
  }


  // basicly - clear all uart queues
  HAL_UART_Receive_DMA(&huart3, &UART2_rxBuffer, 1);
 8002f92:	4913      	ldr	r1, [pc, #76]	; (8002fe0 <main+0x1f8>)
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <main+0x1fc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f004 ff6f 	bl	8007e7c <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart3, MSG, strlen(MSG), 50);
 8002f9e:	245c      	movs	r4, #92	; 0x5c
 8002fa0:	2520      	movs	r5, #32
 8002fa2:	197b      	adds	r3, r7, r5
 8002fa4:	191b      	adds	r3, r3, r4
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fd f8b8 	bl	800011c <strlen>
 8002fac:	0003      	movs	r3, r0
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	197b      	adds	r3, r7, r5
 8002fb2:	1919      	adds	r1, r3, r4
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <main+0x1fc>)
 8002fb6:	2332      	movs	r3, #50	; 0x32
 8002fb8:	f004 fe14 	bl	8007be4 <HAL_UART_Transmit>


  for (int i = 0; i < 2; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	22a8      	movs	r2, #168	; 0xa8
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	468c      	mov	ip, r1
 8002fc4:	44bc      	add	ip, r7
 8002fc6:	4462      	add	r2, ip
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e03d      	b.n	8003048 <main+0x260>
 8002fcc:	20000538 	.word	0x20000538
 8002fd0:	200005b0 	.word	0x200005b0
 8002fd4:	200004ac 	.word	0x200004ac
 8002fd8:	20000590 	.word	0x20000590
 8002fdc:	20000580 	.word	0x20000580
 8002fe0:	2000028c 	.word	0x2000028c
 8002fe4:	20000428 	.word	0x20000428
  {
	  pLM[i] = &LM[i];
 8002fe8:	20a8      	movs	r0, #168	; 0xa8
 8002fea:	2520      	movs	r5, #32
 8002fec:	197b      	adds	r3, r7, r5
 8002fee:	181b      	adds	r3, r3, r0
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4aaf      	ldr	r2, [pc, #700]	; (80032b8 <main+0x4d0>)
 8002ffc:	1899      	adds	r1, r3, r2
 8002ffe:	4baf      	ldr	r3, [pc, #700]	; (80032bc <main+0x4d4>)
 8003000:	197a      	adds	r2, r7, r5
 8003002:	1812      	adds	r2, r2, r0
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	50d1      	str	r1, [r2, r3]
	  linear_motor_init(pLM[i], i+1, i); // init structure
 800300a:	4bac      	ldr	r3, [pc, #688]	; (80032bc <main+0x4d4>)
 800300c:	0001      	movs	r1, r0
 800300e:	197a      	adds	r2, r7, r5
 8003010:	1852      	adds	r2, r2, r1
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	58d0      	ldr	r0, [r2, r3]
 8003018:	000a      	movs	r2, r1
 800301a:	197b      	adds	r3, r7, r5
 800301c:	189b      	adds	r3, r3, r2
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	3301      	adds	r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	0014      	movs	r4, r2
 8003028:	2120      	movs	r1, #32
 800302a:	468c      	mov	ip, r1
 800302c:	44bc      	add	ip, r7
 800302e:	4462      	add	r2, ip
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	0019      	movs	r1, r3
 8003036:	f7ff fd5d 	bl	8002af4 <linear_motor_init>
  for (int i = 0; i < 2; i++)
 800303a:	197b      	adds	r3, r7, r5
 800303c:	191b      	adds	r3, r3, r4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	197a      	adds	r2, r7, r5
 8003044:	1912      	adds	r2, r2, r4
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	23a8      	movs	r3, #168	; 0xa8
 800304a:	2220      	movs	r2, #32
 800304c:	4694      	mov	ip, r2
 800304e:	44bc      	add	ip, r7
 8003050:	4463      	add	r3, ip
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	ddc7      	ble.n	8002fe8 <main+0x200>




  // No incoming processing should be done before it is set
  Init_Done = 1;
 8003058:	4b99      	ldr	r3, [pc, #612]	; (80032c0 <main+0x4d8>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	cycleCounter++;
 800305e:	21b7      	movs	r1, #183	; 0xb7
 8003060:	2020      	movs	r0, #32
 8003062:	183b      	adds	r3, r7, r0
 8003064:	185b      	adds	r3, r3, r1
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	183b      	adds	r3, r7, r0
 800306a:	185b      	adds	r3, r3, r1
 800306c:	3201      	adds	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
	if (cycleCounter == 255)
 8003070:	183b      	adds	r3, r7, r0
 8003072:	185b      	adds	r3, r3, r1
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2bff      	cmp	r3, #255	; 0xff
 8003078:	d103      	bne.n	8003082 <main+0x29a>
	{
		cycleCounter = 1;
 800307a:	183b      	adds	r3, r7, r0
 800307c:	185b      	adds	r3, r3, r1
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
	// --------------------------------------
	// ENCODERS READING
	// --------------------------------------
    if (cycleCounter % 1 == 0) // send odometry every second cycle
	 {
		 speed1 = 0.0;
 8003082:	2300      	movs	r3, #0
 8003084:	24c4      	movs	r4, #196	; 0xc4
 8003086:	2520      	movs	r5, #32
 8003088:	197a      	adds	r2, r7, r5
 800308a:	1912      	adds	r2, r2, r4
 800308c:	6013      	str	r3, [r2, #0]
		 speed2 = 0.0;
 800308e:	2300      	movs	r3, #0
 8003090:	22c0      	movs	r2, #192	; 0xc0
 8003092:	2120      	movs	r1, #32
 8003094:	468c      	mov	ip, r1
 8003096:	44bc      	add	ip, r7
 8003098:	4462      	add	r2, ip
 800309a:	6013      	str	r3, [r2, #0]
		 speed3 = 0.0;
 800309c:	2300      	movs	r3, #0
 800309e:	22bc      	movs	r2, #188	; 0xbc
 80030a0:	2120      	movs	r1, #32
 80030a2:	468c      	mov	ip, r1
 80030a4:	44bc      	add	ip, r7
 80030a6:	4462      	add	r2, ip
 80030a8:	6013      	str	r3, [r2, #0]
		 speed4 = 0.0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	22b8      	movs	r2, #184	; 0xb8
 80030ae:	2120      	movs	r1, #32
 80030b0:	468c      	mov	ip, r1
 80030b2:	44bc      	add	ip, r7
 80030b4:	4462      	add	r2, ip
 80030b6:	6013      	str	r3, [r2, #0]

		 if (T31pulseWidth < 30000 && T31pulseWidth != 0)
 80030b8:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <main+0x4dc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a82      	ldr	r2, [pc, #520]	; (80032c8 <main+0x4e0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d818      	bhi.n	80030f4 <main+0x30c>
 80030c2:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <main+0x4dc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d014      	beq.n	80030f4 <main+0x30c>
		 {
			 speed1 = 13850.4 / T31pulseWidth;
 80030ca:	4b7e      	ldr	r3, [pc, #504]	; (80032c4 <main+0x4dc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff fafe 	bl	80026d0 <__aeabi_ui2d>
 80030d4:	0002      	movs	r2, r0
 80030d6:	000b      	movs	r3, r1
 80030d8:	487c      	ldr	r0, [pc, #496]	; (80032cc <main+0x4e4>)
 80030da:	497d      	ldr	r1, [pc, #500]	; (80032d0 <main+0x4e8>)
 80030dc:	f7fe f870 	bl	80011c0 <__aeabi_ddiv>
 80030e0:	0002      	movs	r2, r0
 80030e2:	000b      	movs	r3, r1
 80030e4:	0010      	movs	r0, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	f7ff fb60 	bl	80027ac <__aeabi_d2f>
 80030ec:	1c03      	adds	r3, r0, #0
 80030ee:	197a      	adds	r2, r7, r5
 80030f0:	1912      	adds	r2, r2, r4
 80030f2:	6013      	str	r3, [r2, #0]
		 }
		 if (T32pulseWidth < 30000 && T32pulseWidth != 0)
 80030f4:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <main+0x4ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <main+0x4e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d81b      	bhi.n	8003136 <main+0x34e>
 80030fe:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <main+0x4ec>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d017      	beq.n	8003136 <main+0x34e>
		 {
			 speed2 = 13850.4 / T32pulseWidth;
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <main+0x4ec>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0018      	movs	r0, r3
 800310c:	f7ff fae0 	bl	80026d0 <__aeabi_ui2d>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	486d      	ldr	r0, [pc, #436]	; (80032cc <main+0x4e4>)
 8003116:	496e      	ldr	r1, [pc, #440]	; (80032d0 <main+0x4e8>)
 8003118:	f7fe f852 	bl	80011c0 <__aeabi_ddiv>
 800311c:	0002      	movs	r2, r0
 800311e:	000b      	movs	r3, r1
 8003120:	0010      	movs	r0, r2
 8003122:	0019      	movs	r1, r3
 8003124:	f7ff fb42 	bl	80027ac <__aeabi_d2f>
 8003128:	1c03      	adds	r3, r0, #0
 800312a:	22c0      	movs	r2, #192	; 0xc0
 800312c:	2120      	movs	r1, #32
 800312e:	468c      	mov	ip, r1
 8003130:	44bc      	add	ip, r7
 8003132:	4462      	add	r2, ip
 8003134:	6013      	str	r3, [r2, #0]
		 }
		 if (T33pulseWidth < 30000 && T33pulseWidth != 0)
 8003136:	4b68      	ldr	r3, [pc, #416]	; (80032d8 <main+0x4f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <main+0x4e0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d81b      	bhi.n	8003178 <main+0x390>
 8003140:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <main+0x4f0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d017      	beq.n	8003178 <main+0x390>
		 {
			 speed3 = 13850.4 / T33pulseWidth;
 8003148:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <main+0x4f0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fabf 	bl	80026d0 <__aeabi_ui2d>
 8003152:	0002      	movs	r2, r0
 8003154:	000b      	movs	r3, r1
 8003156:	485d      	ldr	r0, [pc, #372]	; (80032cc <main+0x4e4>)
 8003158:	495d      	ldr	r1, [pc, #372]	; (80032d0 <main+0x4e8>)
 800315a:	f7fe f831 	bl	80011c0 <__aeabi_ddiv>
 800315e:	0002      	movs	r2, r0
 8003160:	000b      	movs	r3, r1
 8003162:	0010      	movs	r0, r2
 8003164:	0019      	movs	r1, r3
 8003166:	f7ff fb21 	bl	80027ac <__aeabi_d2f>
 800316a:	1c03      	adds	r3, r0, #0
 800316c:	22bc      	movs	r2, #188	; 0xbc
 800316e:	2120      	movs	r1, #32
 8003170:	468c      	mov	ip, r1
 8003172:	44bc      	add	ip, r7
 8003174:	4462      	add	r2, ip
 8003176:	6013      	str	r3, [r2, #0]
		 }
		 if (T34pulseWidth < 30000 && T34pulseWidth != 0)
 8003178:	4b58      	ldr	r3, [pc, #352]	; (80032dc <main+0x4f4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <main+0x4e0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d81b      	bhi.n	80031ba <main+0x3d2>
 8003182:	4b56      	ldr	r3, [pc, #344]	; (80032dc <main+0x4f4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <main+0x3d2>
		 {
			 speed4 = 13850.4 / T34pulseWidth;
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <main+0x4f4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0018      	movs	r0, r3
 8003190:	f7ff fa9e 	bl	80026d0 <__aeabi_ui2d>
 8003194:	0002      	movs	r2, r0
 8003196:	000b      	movs	r3, r1
 8003198:	484c      	ldr	r0, [pc, #304]	; (80032cc <main+0x4e4>)
 800319a:	494d      	ldr	r1, [pc, #308]	; (80032d0 <main+0x4e8>)
 800319c:	f7fe f810 	bl	80011c0 <__aeabi_ddiv>
 80031a0:	0002      	movs	r2, r0
 80031a2:	000b      	movs	r3, r1
 80031a4:	0010      	movs	r0, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	f7ff fb00 	bl	80027ac <__aeabi_d2f>
 80031ac:	1c03      	adds	r3, r0, #0
 80031ae:	22b8      	movs	r2, #184	; 0xb8
 80031b0:	2120      	movs	r1, #32
 80031b2:	468c      	mov	ip, r1
 80031b4:	44bc      	add	ip, r7
 80031b6:	4462      	add	r2, ip
 80031b8:	6013      	str	r3, [r2, #0]
		 }
		 calculate_angles(&gamma1, &gamma2);
 80031ba:	2354      	movs	r3, #84	; 0x54
 80031bc:	2420      	movs	r4, #32
 80031be:	193a      	adds	r2, r7, r4
 80031c0:	18d2      	adds	r2, r2, r3
 80031c2:	2358      	movs	r3, #88	; 0x58
 80031c4:	2120      	movs	r1, #32
 80031c6:	468c      	mov	ip, r1
 80031c8:	44bc      	add	ip, r7
 80031ca:	4463      	add	r3, ip
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fe88 	bl	8003ee4 <calculate_angles>
		 memset(MSG, 0, sizeof(MSG));
 80031d4:	265c      	movs	r6, #92	; 0x5c
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	199b      	adds	r3, r3, r6
 80031da:	2241      	movs	r2, #65	; 0x41
 80031dc:	2100      	movs	r1, #0
 80031de:	0018      	movs	r0, r3
 80031e0:	f005 ff8a 	bl	80090f8 <memset>
		 sprintf(MSG, "[enc] %.2f %.2f %.2f %.2f %.2f %.2f\n", speed1, speed2, speed3, speed4, gamma1, gamma2);
 80031e4:	23c4      	movs	r3, #196	; 0xc4
 80031e6:	2220      	movs	r2, #32
 80031e8:	4694      	mov	ip, r2
 80031ea:	44bc      	add	ip, r7
 80031ec:	4463      	add	r3, ip
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	f7ff fa94 	bl	800271c <__aeabi_f2d>
 80031f4:	61b8      	str	r0, [r7, #24]
 80031f6:	61f9      	str	r1, [r7, #28]
 80031f8:	23c0      	movs	r3, #192	; 0xc0
 80031fa:	2220      	movs	r2, #32
 80031fc:	4694      	mov	ip, r2
 80031fe:	44bc      	add	ip, r7
 8003200:	4463      	add	r3, ip
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	f7ff fa8a 	bl	800271c <__aeabi_f2d>
 8003208:	0004      	movs	r4, r0
 800320a:	000d      	movs	r5, r1
 800320c:	23bc      	movs	r3, #188	; 0xbc
 800320e:	2220      	movs	r2, #32
 8003210:	4694      	mov	ip, r2
 8003212:	44bc      	add	ip, r7
 8003214:	4463      	add	r3, ip
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	f7ff fa80 	bl	800271c <__aeabi_f2d>
 800321c:	6138      	str	r0, [r7, #16]
 800321e:	6179      	str	r1, [r7, #20]
 8003220:	23b8      	movs	r3, #184	; 0xb8
 8003222:	2220      	movs	r2, #32
 8003224:	4694      	mov	ip, r2
 8003226:	44bc      	add	ip, r7
 8003228:	4463      	add	r3, ip
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	f7ff fa76 	bl	800271c <__aeabi_f2d>
 8003230:	60b8      	str	r0, [r7, #8]
 8003232:	60f9      	str	r1, [r7, #12]
 8003234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003236:	1c18      	adds	r0, r3, #0
 8003238:	f7ff fa70 	bl	800271c <__aeabi_f2d>
 800323c:	6038      	str	r0, [r7, #0]
 800323e:	6079      	str	r1, [r7, #4]
 8003240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003242:	1c18      	adds	r0, r3, #0
 8003244:	f7ff fa6a 	bl	800271c <__aeabi_f2d>
 8003248:	0002      	movs	r2, r0
 800324a:	000b      	movs	r3, r1
 800324c:	4924      	ldr	r1, [pc, #144]	; (80032e0 <main+0x4f8>)
 800324e:	2020      	movs	r0, #32
 8003250:	1838      	adds	r0, r7, r0
 8003252:	1980      	adds	r0, r0, r6
 8003254:	9208      	str	r2, [sp, #32]
 8003256:	9309      	str	r3, [sp, #36]	; 0x24
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	9206      	str	r2, [sp, #24]
 800325e:	9307      	str	r3, [sp, #28]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	9204      	str	r2, [sp, #16]
 8003266:	9305      	str	r3, [sp, #20]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	9202      	str	r2, [sp, #8]
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	9400      	str	r4, [sp, #0]
 8003272:	9501      	str	r5, [sp, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f006 fdcc 	bl	8009e14 <siprintf>
		 //sprintf(MSG, "[enc] %d %d %d %d\n", T31pulseWidth, T32pulseWidth, T33pulseWidth, T34pulseWidth);
		 UART_Send(MSG);
 800327c:	2420      	movs	r4, #32
 800327e:	193b      	adds	r3, r7, r4
 8003280:	199b      	adds	r3, r3, r6
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fcf0 	bl	8003c68 <UART_Send>
		 //memset(MSG, 0, sizeof(MSG));
		 //sprintf(MSG, "status: %d %d\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7), HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		 //UART_Send(MSG);
	 }

	 for (int i=0; i < 4; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	22a4      	movs	r2, #164	; 0xa4
 800328c:	2120      	movs	r1, #32
 800328e:	468c      	mov	ip, r1
 8003290:	44bc      	add	ip, r7
 8003292:	4462      	add	r2, ip
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e187      	b.n	80035a8 <main+0x7c0>
	 {
		 sumVect = 0.0;
 8003298:	2300      	movs	r3, #0
 800329a:	22b0      	movs	r2, #176	; 0xb0
 800329c:	2120      	movs	r1, #32
 800329e:	468c      	mov	ip, r1
 80032a0:	44bc      	add	ip, r7
 80032a2:	4462      	add	r2, ip
 80032a4:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	22a0      	movs	r2, #160	; 0xa0
 80032aa:	2120      	movs	r1, #32
 80032ac:	468c      	mov	ip, r1
 80032ae:	44bc      	add	ip, r7
 80032b0:	4462      	add	r2, ip
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e05a      	b.n	800336c <main+0x584>
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	200005f8 	.word	0x200005f8
 80032bc:	200003dc 	.word	0x200003dc
 80032c0:	20000300 	.word	0x20000300
 80032c4:	200001fc 	.word	0x200001fc
 80032c8:	0000752f 	.word	0x0000752f
 80032cc:	33333333 	.word	0x33333333
 80032d0:	40cb0d33 	.word	0x40cb0d33
 80032d4:	20000220 	.word	0x20000220
 80032d8:	20000244 	.word	0x20000244
 80032dc:	20000268 	.word	0x20000268
 80032e0:	0800e3dc 	.word	0x0800e3dc
		 {
			 vect[i][j] = vect[i][j+1];
 80032e4:	24a0      	movs	r4, #160	; 0xa0
 80032e6:	2620      	movs	r6, #32
 80032e8:	19bb      	adds	r3, r7, r6
 80032ea:	191b      	adds	r3, r3, r4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1c58      	adds	r0, r3, #1
 80032f0:	2324      	movs	r3, #36	; 0x24
 80032f2:	18f9      	adds	r1, r7, r3
 80032f4:	25a4      	movs	r5, #164	; 0xa4
 80032f6:	19ba      	adds	r2, r7, r6
 80032f8:	1953      	adds	r3, r2, r5
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	0013      	movs	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	189b      	adds	r3, r3, r2
 8003302:	181b      	adds	r3, r3, r0
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	5858      	ldr	r0, [r3, r1]
 8003308:	2324      	movs	r3, #36	; 0x24
 800330a:	18f9      	adds	r1, r7, r3
 800330c:	19ba      	adds	r2, r7, r6
 800330e:	1953      	adds	r3, r2, r5
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	0013      	movs	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	189b      	adds	r3, r3, r2
 8003318:	19ba      	adds	r2, r7, r6
 800331a:	1912      	adds	r2, r2, r4
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	189b      	adds	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	5058      	str	r0, [r3, r1]
			 sumVect += vect[i][j] / 5;
 8003324:	2324      	movs	r3, #36	; 0x24
 8003326:	18f9      	adds	r1, r7, r3
 8003328:	19bb      	adds	r3, r7, r6
 800332a:	195b      	adds	r3, r3, r5
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	0013      	movs	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	189b      	adds	r3, r3, r2
 8003334:	0035      	movs	r5, r6
 8003336:	19ba      	adds	r2, r7, r6
 8003338:	1912      	adds	r2, r2, r4
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	189b      	adds	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	585b      	ldr	r3, [r3, r1]
 8003342:	2105      	movs	r1, #5
 8003344:	0018      	movs	r0, r3
 8003346:	f7fc ff05 	bl	8000154 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	001a      	movs	r2, r3
 800334e:	21b0      	movs	r1, #176	; 0xb0
 8003350:	197b      	adds	r3, r7, r5
 8003352:	185b      	adds	r3, r3, r1
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	189b      	adds	r3, r3, r2
 8003358:	197a      	adds	r2, r7, r5
 800335a:	1852      	adds	r2, r2, r1
 800335c:	6013      	str	r3, [r2, #0]
		 for (int j=0; j < 4; j++)
 800335e:	197b      	adds	r3, r7, r5
 8003360:	191b      	adds	r3, r3, r4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	197a      	adds	r2, r7, r5
 8003368:	1912      	adds	r2, r2, r4
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	23a0      	movs	r3, #160	; 0xa0
 800336e:	2220      	movs	r2, #32
 8003370:	4694      	mov	ip, r2
 8003372:	44bc      	add	ip, r7
 8003374:	4463      	add	r3, ip
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b03      	cmp	r3, #3
 800337a:	ddb3      	ble.n	80032e4 <main+0x4fc>
		 }
		 if (i==0)
 800337c:	24a4      	movs	r4, #164	; 0xa4
 800337e:	2520      	movs	r5, #32
 8003380:	197b      	adds	r3, r7, r5
 8003382:	191b      	adds	r3, r3, r4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d13c      	bne.n	8003404 <main+0x61c>
		 {
			 vect[i][4] = T31pulseWidth;
 800338a:	4b9f      	ldr	r3, [pc, #636]	; (8003608 <main+0x820>)
 800338c:	6819      	ldr	r1, [r3, #0]
 800338e:	2624      	movs	r6, #36	; 0x24
 8003390:	19b8      	adds	r0, r7, r6
 8003392:	197b      	adds	r3, r7, r5
 8003394:	191b      	adds	r3, r3, r4
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	0013      	movs	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	189b      	adds	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	18c3      	adds	r3, r0, r3
 80033a2:	3310      	adds	r3, #16
 80033a4:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 80033a6:	19b9      	adds	r1, r7, r6
 80033a8:	197b      	adds	r3, r7, r5
 80033aa:	191b      	adds	r3, r3, r4
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	0013      	movs	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	18cb      	adds	r3, r1, r3
 80033b8:	3310      	adds	r3, #16
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2105      	movs	r1, #5
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fc fec8 	bl	8000154 <__udivsi3>
 80033c4:	0003      	movs	r3, r0
 80033c6:	001a      	movs	r2, r3
 80033c8:	21b0      	movs	r1, #176	; 0xb0
 80033ca:	197b      	adds	r3, r7, r5
 80033cc:	185b      	adds	r3, r3, r1
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	189b      	adds	r3, r3, r2
 80033d2:	197a      	adds	r2, r7, r5
 80033d4:	1852      	adds	r2, r2, r1
 80033d6:	6013      	str	r3, [r2, #0]
			 if (abs(T31pulseWidth - sumVect) <= 5) // exact match may differ by 5 or less
 80033d8:	4b8b      	ldr	r3, [pc, #556]	; (8003608 <main+0x820>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	197b      	adds	r3, r7, r5
 80033de:	185b      	adds	r3, r3, r1
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	3305      	adds	r3, #5
 80033e6:	da00      	bge.n	80033ea <main+0x602>
 80033e8:	e0d3      	b.n	8003592 <main+0x7aa>
 80033ea:	4b87      	ldr	r3, [pc, #540]	; (8003608 <main+0x820>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	197b      	adds	r3, r7, r5
 80033f0:	185b      	adds	r3, r3, r1
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	dd00      	ble.n	80033fc <main+0x614>
 80033fa:	e0ca      	b.n	8003592 <main+0x7aa>
				 T31pulseWidth = 0;
 80033fc:	4b82      	ldr	r3, [pc, #520]	; (8003608 <main+0x820>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e0c6      	b.n	8003592 <main+0x7aa>
		 }
		 else if (i==1)
 8003404:	24a4      	movs	r4, #164	; 0xa4
 8003406:	2520      	movs	r5, #32
 8003408:	197b      	adds	r3, r7, r5
 800340a:	191b      	adds	r3, r3, r4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d13c      	bne.n	800348c <main+0x6a4>
		 {
			 vect[i][4] = T32pulseWidth;
 8003412:	4b7e      	ldr	r3, [pc, #504]	; (800360c <main+0x824>)
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	2624      	movs	r6, #36	; 0x24
 8003418:	19b8      	adds	r0, r7, r6
 800341a:	197b      	adds	r3, r7, r5
 800341c:	191b      	adds	r3, r3, r4
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	0013      	movs	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	189b      	adds	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	18c3      	adds	r3, r0, r3
 800342a:	3310      	adds	r3, #16
 800342c:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 800342e:	19b9      	adds	r1, r7, r6
 8003430:	197b      	adds	r3, r7, r5
 8003432:	191b      	adds	r3, r3, r4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	0013      	movs	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	189b      	adds	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	18cb      	adds	r3, r1, r3
 8003440:	3310      	adds	r3, #16
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2105      	movs	r1, #5
 8003446:	0018      	movs	r0, r3
 8003448:	f7fc fe84 	bl	8000154 <__udivsi3>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	21b0      	movs	r1, #176	; 0xb0
 8003452:	197b      	adds	r3, r7, r5
 8003454:	185b      	adds	r3, r3, r1
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	189b      	adds	r3, r3, r2
 800345a:	197a      	adds	r2, r7, r5
 800345c:	1852      	adds	r2, r2, r1
 800345e:	6013      	str	r3, [r2, #0]
			 if (abs(T32pulseWidth - sumVect) <= 5)
 8003460:	4b6a      	ldr	r3, [pc, #424]	; (800360c <main+0x824>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	197b      	adds	r3, r7, r5
 8003466:	185b      	adds	r3, r3, r1
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	3305      	adds	r3, #5
 800346e:	da00      	bge.n	8003472 <main+0x68a>
 8003470:	e08f      	b.n	8003592 <main+0x7aa>
 8003472:	4b66      	ldr	r3, [pc, #408]	; (800360c <main+0x824>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	197b      	adds	r3, r7, r5
 8003478:	185b      	adds	r3, r3, r1
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b05      	cmp	r3, #5
 8003480:	dd00      	ble.n	8003484 <main+0x69c>
 8003482:	e086      	b.n	8003592 <main+0x7aa>
				 T32pulseWidth = 0;
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <main+0x824>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e082      	b.n	8003592 <main+0x7aa>
		 }
		 else if (i==2)
 800348c:	24a4      	movs	r4, #164	; 0xa4
 800348e:	2520      	movs	r5, #32
 8003490:	197b      	adds	r3, r7, r5
 8003492:	191b      	adds	r3, r3, r4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d13a      	bne.n	8003510 <main+0x728>
		 {
			 vect[i][4] = T33pulseWidth;
 800349a:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <main+0x828>)
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	2624      	movs	r6, #36	; 0x24
 80034a0:	19b8      	adds	r0, r7, r6
 80034a2:	197b      	adds	r3, r7, r5
 80034a4:	191b      	adds	r3, r3, r4
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	0013      	movs	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	18c3      	adds	r3, r0, r3
 80034b2:	3310      	adds	r3, #16
 80034b4:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 80034b6:	19b9      	adds	r1, r7, r6
 80034b8:	197b      	adds	r3, r7, r5
 80034ba:	191b      	adds	r3, r3, r4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	0013      	movs	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	18cb      	adds	r3, r1, r3
 80034c8:	3310      	adds	r3, #16
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2105      	movs	r1, #5
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fc fe40 	bl	8000154 <__udivsi3>
 80034d4:	0003      	movs	r3, r0
 80034d6:	001a      	movs	r2, r3
 80034d8:	21b0      	movs	r1, #176	; 0xb0
 80034da:	197b      	adds	r3, r7, r5
 80034dc:	185b      	adds	r3, r3, r1
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	197a      	adds	r2, r7, r5
 80034e4:	1852      	adds	r2, r2, r1
 80034e6:	6013      	str	r3, [r2, #0]
			 if (abs(T33pulseWidth - sumVect) <= 5)
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <main+0x828>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	185b      	adds	r3, r3, r1
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	3305      	adds	r3, #5
 80034f6:	db4c      	blt.n	8003592 <main+0x7aa>
 80034f8:	4b45      	ldr	r3, [pc, #276]	; (8003610 <main+0x828>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	197b      	adds	r3, r7, r5
 80034fe:	185b      	adds	r3, r3, r1
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b05      	cmp	r3, #5
 8003506:	dc44      	bgt.n	8003592 <main+0x7aa>
				 T33pulseWidth = 0;
 8003508:	4b41      	ldr	r3, [pc, #260]	; (8003610 <main+0x828>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e040      	b.n	8003592 <main+0x7aa>
		 }
		 else if (i==3)
 8003510:	24a4      	movs	r4, #164	; 0xa4
 8003512:	2520      	movs	r5, #32
 8003514:	197b      	adds	r3, r7, r5
 8003516:	191b      	adds	r3, r3, r4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d139      	bne.n	8003592 <main+0x7aa>
		 {
			 vect[i][4] = T34pulseWidth;
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <main+0x82c>)
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	2624      	movs	r6, #36	; 0x24
 8003524:	19b8      	adds	r0, r7, r6
 8003526:	197b      	adds	r3, r7, r5
 8003528:	191b      	adds	r3, r3, r4
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	0013      	movs	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	189b      	adds	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	18c3      	adds	r3, r0, r3
 8003536:	3310      	adds	r3, #16
 8003538:	6019      	str	r1, [r3, #0]
			 sumVect += vect[i][4] / 5;
 800353a:	19b9      	adds	r1, r7, r6
 800353c:	197b      	adds	r3, r7, r5
 800353e:	191b      	adds	r3, r3, r4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	0013      	movs	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	189b      	adds	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	18cb      	adds	r3, r1, r3
 800354c:	3310      	adds	r3, #16
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2105      	movs	r1, #5
 8003552:	0018      	movs	r0, r3
 8003554:	f7fc fdfe 	bl	8000154 <__udivsi3>
 8003558:	0003      	movs	r3, r0
 800355a:	001a      	movs	r2, r3
 800355c:	21b0      	movs	r1, #176	; 0xb0
 800355e:	197b      	adds	r3, r7, r5
 8003560:	185b      	adds	r3, r3, r1
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	189b      	adds	r3, r3, r2
 8003566:	197a      	adds	r2, r7, r5
 8003568:	1852      	adds	r2, r2, r1
 800356a:	6013      	str	r3, [r2, #0]
			 if (abs(T34pulseWidth - sumVect) <= 5)
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <main+0x82c>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	197b      	adds	r3, r7, r5
 8003572:	185b      	adds	r3, r3, r1
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	3305      	adds	r3, #5
 800357a:	db0a      	blt.n	8003592 <main+0x7aa>
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <main+0x82c>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	197b      	adds	r3, r7, r5
 8003582:	185b      	adds	r3, r3, r1
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b05      	cmp	r3, #5
 800358a:	dc02      	bgt.n	8003592 <main+0x7aa>
				 T34pulseWidth = 0;
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <main+0x82c>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
	 for (int i=0; i < 4; i++)
 8003592:	22a4      	movs	r2, #164	; 0xa4
 8003594:	2320      	movs	r3, #32
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	189b      	adds	r3, r3, r2
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	2120      	movs	r1, #32
 80035a0:	468c      	mov	ip, r1
 80035a2:	44bc      	add	ip, r7
 80035a4:	4462      	add	r2, ip
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	23a4      	movs	r3, #164	; 0xa4
 80035aa:	2220      	movs	r2, #32
 80035ac:	4694      	mov	ip, r2
 80035ae:	44bc      	add	ip, r7
 80035b0:	4463      	add	r3, ip
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	dc00      	bgt.n	80035ba <main+0x7d2>
 80035b8:	e66e      	b.n	8003298 <main+0x4b0>
		 }
	 }

	 HAL_Delay(50);
 80035ba:	2032      	movs	r0, #50	; 0x32
 80035bc:	f001 fc64 	bl	8004e88 <HAL_Delay>
	// --------------------------------------
	// MOTORS CONTROL
	// --------------------------------------
	 if ((UART_newMessage == 1) && (cycleCounter % 2 == 0))
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <main+0x830>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d000      	beq.n	80035ca <main+0x7e2>
 80035c8:	e549      	b.n	800305e <main+0x276>
 80035ca:	23b7      	movs	r3, #183	; 0xb7
 80035cc:	2220      	movs	r2, #32
 80035ce:	4694      	mov	ip, r2
 80035d0:	44bc      	add	ip, r7
 80035d2:	4463      	add	r3, ip
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d000      	beq.n	80035e2 <main+0x7fa>
 80035e0:	e53d      	b.n	800305e <main+0x276>
	 {
		 // check if received string contains [drv] message and parse it
		 drv_messageCheck(rxString);
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <main+0x834>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 fb5f 	bl	8003ca8 <drv_messageCheck>
		 cal_messageCheck(rxString);
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <main+0x834>)
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fc29 	bl	8003e44 <cal_messageCheck>
		 // clear received b
		 memset(rxString, 0, sizeof(rxString));
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <main+0x834>)
 80035f4:	2264      	movs	r2, #100	; 0x64
 80035f6:	2100      	movs	r1, #0
 80035f8:	0018      	movs	r0, r3
 80035fa:	f005 fd7d 	bl	80090f8 <memset>
		 // set newMessage flag to 0 to begin new string receive
		 UART_newMessage = 0;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <main+0x830>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	cycleCounter++;
 8003604:	e52b      	b.n	800305e <main+0x276>
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	200001fc 	.word	0x200001fc
 800360c:	20000220 	.word	0x20000220
 8003610:	20000244 	.word	0x20000244
 8003614:	20000268 	.word	0x20000268
 8003618:	2000028d 	.word	0x2000028d
 800361c:	20000290 	.word	0x20000290

08003620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b091      	sub	sp, #68	; 0x44
 8003624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003626:	2410      	movs	r4, #16
 8003628:	193b      	adds	r3, r7, r4
 800362a:	0018      	movs	r0, r3
 800362c:	2330      	movs	r3, #48	; 0x30
 800362e:	001a      	movs	r2, r3
 8003630:	2100      	movs	r1, #0
 8003632:	f005 fd61 	bl	80090f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003636:	003b      	movs	r3, r7
 8003638:	0018      	movs	r0, r3
 800363a:	2310      	movs	r3, #16
 800363c:	001a      	movs	r2, r3
 800363e:	2100      	movs	r1, #0
 8003640:	f005 fd5a 	bl	80090f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003644:	0021      	movs	r1, r4
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2202      	movs	r2, #2
 800364a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2201      	movs	r2, #1
 8003650:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2210      	movs	r2, #16
 8003656:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2200      	movs	r2, #0
 800365c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365e:	187b      	adds	r3, r7, r1
 8003660:	0018      	movs	r0, r3
 8003662:	f002 f8d3 	bl	800580c <HAL_RCC_OscConfig>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800366a:	f001 f861 	bl	8004730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800366e:	003b      	movs	r3, r7
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003674:	003b      	movs	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800367a:	003b      	movs	r3, r7
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003680:	003b      	movs	r3, r7
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003686:	003b      	movs	r3, r7
 8003688:	2100      	movs	r1, #0
 800368a:	0018      	movs	r0, r3
 800368c:	f002 fbdc 	bl	8005e48 <HAL_RCC_ClockConfig>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003694:	f001 f84c 	bl	8004730 <Error_Handler>
  }
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b011      	add	sp, #68	; 0x44
 800369e:	bd90      	pop	{r4, r7, pc}

080036a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b096      	sub	sp, #88	; 0x58
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036a6:	2348      	movs	r3, #72	; 0x48
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	0018      	movs	r0, r3
 80036ac:	2310      	movs	r3, #16
 80036ae:	001a      	movs	r2, r3
 80036b0:	2100      	movs	r1, #0
 80036b2:	f005 fd21 	bl	80090f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	0018      	movs	r0, r3
 80036bc:	2308      	movs	r3, #8
 80036be:	001a      	movs	r2, r3
 80036c0:	2100      	movs	r1, #0
 80036c2:	f005 fd19 	bl	80090f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036c6:	2324      	movs	r3, #36	; 0x24
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	0018      	movs	r0, r3
 80036cc:	231c      	movs	r3, #28
 80036ce:	001a      	movs	r2, r3
 80036d0:	2100      	movs	r1, #0
 80036d2:	f005 fd11 	bl	80090f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	0018      	movs	r0, r3
 80036da:	2320      	movs	r3, #32
 80036dc:	001a      	movs	r2, r3
 80036de:	2100      	movs	r1, #0
 80036e0:	f005 fd0a 	bl	80090f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036e4:	4b56      	ldr	r3, [pc, #344]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80036e6:	4a57      	ldr	r2, [pc, #348]	; (8003844 <MX_TIM1_Init+0x1a4>)
 80036e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 80036ea:	4b55      	ldr	r3, [pc, #340]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80036ec:	229f      	movs	r2, #159	; 0x9f
 80036ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80036f6:	4b52      	ldr	r3, [pc, #328]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80036f8:	2263      	movs	r2, #99	; 0x63
 80036fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003702:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <MX_TIM1_Init+0x1a0>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <MX_TIM1_Init+0x1a0>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <MX_TIM1_Init+0x1a0>)
 8003710:	0018      	movs	r0, r3
 8003712:	f002 fced 	bl	80060f0 <HAL_TIM_Base_Init>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800371a:	f001 f809 	bl	8004730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800371e:	2148      	movs	r1, #72	; 0x48
 8003720:	187b      	adds	r3, r7, r1
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	0152      	lsls	r2, r2, #5
 8003726:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003728:	187a      	adds	r2, r7, r1
 800372a:	4b45      	ldr	r3, [pc, #276]	; (8003840 <MX_TIM1_Init+0x1a0>)
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f003 fbce 	bl	8006ed0 <HAL_TIM_ConfigClockSource>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003738:	f000 fffa 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <MX_TIM1_Init+0x1a0>)
 800373e:	0018      	movs	r0, r3
 8003740:	f002 fd26 	bl	8006190 <HAL_TIM_PWM_Init>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d001      	beq.n	800374c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003748:	f000 fff2 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800375a:	187a      	adds	r2, r7, r1
 800375c:	4b38      	ldr	r3, [pc, #224]	; (8003840 <MX_TIM1_Init+0x1a0>)
 800375e:	0011      	movs	r1, r2
 8003760:	0018      	movs	r0, r3
 8003762:	f004 f925 	bl	80079b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d001      	beq.n	800376e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800376a:	f000 ffe1 	bl	8004730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800376e:	2124      	movs	r1, #36	; 0x24
 8003770:	187b      	adds	r3, r7, r1
 8003772:	2260      	movs	r2, #96	; 0x60
 8003774:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003776:	187b      	adds	r3, r7, r1
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800377c:	187b      	adds	r3, r7, r1
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2200      	movs	r2, #0
 8003786:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800378e:	187b      	adds	r3, r7, r1
 8003790:	2200      	movs	r2, #0
 8003792:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003794:	187b      	adds	r3, r7, r1
 8003796:	2200      	movs	r2, #0
 8003798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800379a:	1879      	adds	r1, r7, r1
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <MX_TIM1_Init+0x1a0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	0018      	movs	r0, r3
 80037a2:	f003 facf 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80037aa:	f000 ffc1 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037ae:	2324      	movs	r3, #36	; 0x24
 80037b0:	18f9      	adds	r1, r7, r3
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80037b4:	2204      	movs	r2, #4
 80037b6:	0018      	movs	r0, r3
 80037b8:	f003 fac4 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80037c0:	f000 ffb6 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037c4:	2324      	movs	r3, #36	; 0x24
 80037c6:	18f9      	adds	r1, r7, r3
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80037ca:	2208      	movs	r2, #8
 80037cc:	0018      	movs	r0, r3
 80037ce:	f003 fab9 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80037d6:	f000 ffab 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037da:	2324      	movs	r3, #36	; 0x24
 80037dc:	18f9      	adds	r1, r7, r3
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <MX_TIM1_Init+0x1a0>)
 80037e0:	220c      	movs	r2, #12
 80037e2:	0018      	movs	r0, r3
 80037e4:	f003 faae 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80037ec:	f000 ffa0 	bl	8004730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	2200      	movs	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2200      	movs	r2, #0
 8003806:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	0192      	lsls	r2, r2, #6
 8003814:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	2200      	movs	r2, #0
 800381a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800381c:	1d3a      	adds	r2, r7, #4
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <MX_TIM1_Init+0x1a0>)
 8003820:	0011      	movs	r1, r2
 8003822:	0018      	movs	r0, r3
 8003824:	f004 f91c 	bl	8007a60 <HAL_TIMEx_ConfigBreakDeadTime>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800382c:	f000 ff80 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <MX_TIM1_Init+0x1a0>)
 8003832:	0018      	movs	r0, r3
 8003834:	f001 f85e 	bl	80048f4 <HAL_TIM_MspPostInit>

}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b016      	add	sp, #88	; 0x58
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200005b0 	.word	0x200005b0
 8003844:	40012c00 	.word	0x40012c00

08003848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384e:	2310      	movs	r3, #16
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	0018      	movs	r0, r3
 8003854:	2308      	movs	r3, #8
 8003856:	001a      	movs	r2, r3
 8003858:	2100      	movs	r1, #0
 800385a:	f005 fc4d 	bl	80090f8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800385e:	003b      	movs	r3, r7
 8003860:	0018      	movs	r0, r3
 8003862:	2310      	movs	r3, #16
 8003864:	001a      	movs	r2, r3
 8003866:	2100      	movs	r1, #0
 8003868:	f005 fc46 	bl	80090f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800386c:	4b31      	ldr	r3, [pc, #196]	; (8003934 <MX_TIM3_Init+0xec>)
 800386e:	4a32      	ldr	r2, [pc, #200]	; (8003938 <MX_TIM3_Init+0xf0>)
 8003870:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8003872:	4b30      	ldr	r3, [pc, #192]	; (8003934 <MX_TIM3_Init+0xec>)
 8003874:	224f      	movs	r2, #79	; 0x4f
 8003876:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <MX_TIM3_Init+0xec>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800387e:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <MX_TIM3_Init+0xec>)
 8003880:	4a2e      	ldr	r2, [pc, #184]	; (800393c <MX_TIM3_Init+0xf4>)
 8003882:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <MX_TIM3_Init+0xec>)
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388a:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <MX_TIM3_Init+0xec>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <MX_TIM3_Init+0xec>)
 8003892:	0018      	movs	r0, r3
 8003894:	f002 ff44 	bl	8006720 <HAL_TIM_IC_Init>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d001      	beq.n	80038a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800389c:	f000 ff48 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a0:	2110      	movs	r1, #16
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	2200      	movs	r2, #0
 80038ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ae:	187a      	adds	r2, r7, r1
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <MX_TIM3_Init+0xec>)
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f004 f87b 	bl	80079b0 <HAL_TIMEx_MasterConfigSynchronization>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80038be:	f000 ff37 	bl	8004730 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038c2:	003b      	movs	r3, r7
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038c8:	003b      	movs	r3, r7
 80038ca:	2201      	movs	r2, #1
 80038cc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038ce:	003b      	movs	r3, r7
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 3;
 80038d4:	003b      	movs	r3, r7
 80038d6:	2203      	movs	r2, #3
 80038d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038da:	0039      	movs	r1, r7
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <MX_TIM3_Init+0xec>)
 80038de:	2200      	movs	r2, #0
 80038e0:	0018      	movs	r0, r3
 80038e2:	f003 f98b 	bl	8006bfc <HAL_TIM_IC_ConfigChannel>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80038ea:	f000 ff21 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80038ee:	0039      	movs	r1, r7
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <MX_TIM3_Init+0xec>)
 80038f2:	2204      	movs	r2, #4
 80038f4:	0018      	movs	r0, r3
 80038f6:	f003 f981 	bl	8006bfc <HAL_TIM_IC_ConfigChannel>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80038fe:	f000 ff17 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003902:	0039      	movs	r1, r7
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <MX_TIM3_Init+0xec>)
 8003906:	2208      	movs	r2, #8
 8003908:	0018      	movs	r0, r3
 800390a:	f003 f977 	bl	8006bfc <HAL_TIM_IC_ConfigChannel>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8003912:	f000 ff0d 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003916:	0039      	movs	r1, r7
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <MX_TIM3_Init+0xec>)
 800391a:	220c      	movs	r2, #12
 800391c:	0018      	movs	r0, r3
 800391e:	f003 f96d 	bl	8006bfc <HAL_TIM_IC_ConfigChannel>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d001      	beq.n	800392a <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8003926:	f000 ff03 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	20000538 	.word	0x20000538
 8003938:	40000400 	.word	0x40000400
 800393c:	0000c34f 	.word	0x0000c34f

08003940 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b096      	sub	sp, #88	; 0x58
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003946:	2348      	movs	r3, #72	; 0x48
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	0018      	movs	r0, r3
 800394c:	2310      	movs	r3, #16
 800394e:	001a      	movs	r2, r3
 8003950:	2100      	movs	r1, #0
 8003952:	f005 fbd1 	bl	80090f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	0018      	movs	r0, r3
 800395c:	2308      	movs	r3, #8
 800395e:	001a      	movs	r2, r3
 8003960:	2100      	movs	r1, #0
 8003962:	f005 fbc9 	bl	80090f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003966:	2324      	movs	r3, #36	; 0x24
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	0018      	movs	r0, r3
 800396c:	231c      	movs	r3, #28
 800396e:	001a      	movs	r2, r3
 8003970:	2100      	movs	r1, #0
 8003972:	f005 fbc1 	bl	80090f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	0018      	movs	r0, r3
 800397a:	2320      	movs	r3, #32
 800397c:	001a      	movs	r2, r3
 800397e:	2100      	movs	r1, #0
 8003980:	f005 fbba 	bl	80090f8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003986:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <MX_TIM15_Init+0x178>)
 8003988:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 160-1;
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <MX_TIM15_Init+0x174>)
 800398c:	229f      	movs	r2, #159	; 0x9f
 800398e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003990:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5-1;
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003998:	2204      	movs	r2, #4
 800399a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <MX_TIM15_Init+0x174>)
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 100;
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <MX_TIM15_Init+0x174>)
 80039a4:	2264      	movs	r2, #100	; 0x64
 80039a6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <MX_TIM15_Init+0x174>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80039ae:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <MX_TIM15_Init+0x174>)
 80039b0:	0018      	movs	r0, r3
 80039b2:	f002 fb9d 	bl	80060f0 <HAL_TIM_Base_Init>
 80039b6:	1e03      	subs	r3, r0, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80039ba:	f000 feb9 	bl	8004730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039be:	2148      	movs	r1, #72	; 0x48
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	0152      	lsls	r2, r2, #5
 80039c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80039c8:	187a      	adds	r2, r7, r1
 80039ca:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <MX_TIM15_Init+0x174>)
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f003 fa7e 	bl	8006ed0 <HAL_TIM_ConfigClockSource>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80039d8:	f000 feaa 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <MX_TIM15_Init+0x174>)
 80039de:	0018      	movs	r0, r3
 80039e0:	f002 fbd6 	bl	8006190 <HAL_TIM_PWM_Init>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80039e8:	f000 fea2 	bl	8004730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80039fa:	187a      	adds	r2, r7, r1
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <MX_TIM15_Init+0x174>)
 80039fe:	0011      	movs	r1, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f003 ffd5 	bl	80079b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d001      	beq.n	8003a0e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8003a0a:	f000 fe91 	bl	8004730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a0e:	2124      	movs	r1, #36	; 0x24
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	2260      	movs	r2, #96	; 0x60
 8003a14:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	2200      	movs	r2, #0
 8003a1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	2200      	movs	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	2200      	movs	r2, #0
 8003a32:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a34:	187b      	adds	r3, r7, r1
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a3a:	1879      	adds	r1, r7, r1
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	0018      	movs	r0, r3
 8003a42:	f003 f97f 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8003a4a:	f000 fe71 	bl	8004730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a4e:	2324      	movs	r3, #36	; 0x24
 8003a50:	18f9      	adds	r1, r7, r3
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003a54:	2204      	movs	r2, #4
 8003a56:	0018      	movs	r0, r3
 8003a58:	f003 f974 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8003a60:	f000 fe66 	bl	8004730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a7c:	1d3b      	adds	r3, r7, #4
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	0192      	lsls	r2, r2, #6
 8003a88:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003a90:	1d3a      	adds	r2, r7, #4
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f003 ffe2 	bl	8007a60 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 8003aa0:	f000 fe46 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <MX_TIM15_Init+0x174>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 ff24 	bl	80048f4 <HAL_TIM_MspPostInit>

}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b016      	add	sp, #88	; 0x58
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	200004ac 	.word	0x200004ac
 8003ab8:	40014000 	.word	0x40014000

08003abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003ac2:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <MX_USART3_UART_Init+0x5c>)
 8003ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003ac8:	22e1      	movs	r2, #225	; 0xe1
 8003aca:	0252      	lsls	r2, r2, #9
 8003acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <MX_USART3_UART_Init+0x58>)
 8003b00:	0018      	movs	r0, r3
 8003b02:	f004 f81b 	bl	8007b3c <HAL_UART_Init>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d001      	beq.n	8003b0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003b0a:	f000 fe11 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000428 	.word	0x20000428
 8003b18:	40004800 	.word	0x40004800

08003b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <MX_DMA_Init+0x38>)
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <MX_DMA_Init+0x38>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	615a      	str	r2, [r3, #20]
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <MX_DMA_Init+0x38>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2201      	movs	r2, #1
 8003b34:	4013      	ands	r3, r2
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	200a      	movs	r0, #10
 8003b40:	f001 fa72 	bl	8005028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003b44:	200a      	movs	r0, #10
 8003b46:	f001 fa84 	bl	8005052 <HAL_NVIC_EnableIRQ>

}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	40021000 	.word	0x40021000

08003b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b08b      	sub	sp, #44	; 0x2c
 8003b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5e:	2414      	movs	r4, #20
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	0018      	movs	r0, r3
 8003b64:	2314      	movs	r3, #20
 8003b66:	001a      	movs	r2, r3
 8003b68:	2100      	movs	r1, #0
 8003b6a:	f005 fac5 	bl	80090f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	0309      	lsls	r1, r1, #12
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	615a      	str	r2, [r3, #20]
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	031b      	lsls	r3, r3, #12
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	03c9      	lsls	r1, r1, #15
 8003b94:	430a      	orrs	r2, r1
 8003b96:	615a      	str	r2, [r3, #20]
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	03db      	lsls	r3, r3, #15
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	02c9      	lsls	r1, r1, #11
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	615a      	str	r2, [r3, #20]
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	02db      	lsls	r3, r3, #11
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc2:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0289      	lsls	r1, r1, #10
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	615a      	str	r2, [r3, #20]
 8003bd0:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <MX_GPIO_Init+0x100>)
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	4013      	ands	r3, r2
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 8003bde:	491f      	ldr	r1, [pc, #124]	; (8003c5c <MX_GPIO_Init+0x104>)
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <MX_GPIO_Init+0x108>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	0018      	movs	r0, r3
 8003be6:	f001 fdf4 	bl	80057d2 <HAL_GPIO_WritePin>
                          |BREAK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	0192      	lsls	r2, r2, #6
 8003bf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bf2:	193b      	adds	r3, r7, r4
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <MX_GPIO_Init+0x108>)
 8003c02:	0019      	movs	r1, r3
 8003c04:	0010      	movs	r0, r2
 8003c06:	f001 fc57 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin DIR_RIGHT_Pin DIR_FRONT_Pin DIR_REAR_Pin
                           BREAK_Pin */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|DIR_RIGHT_Pin|DIR_FRONT_Pin|DIR_REAR_Pin
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <MX_GPIO_Init+0x104>)
 8003c0e:	601a      	str	r2, [r3, #0]
                          |BREAK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c10:	193b      	adds	r3, r7, r4
 8003c12:	2201      	movs	r2, #1
 8003c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <MX_GPIO_Init+0x108>)
 8003c26:	0019      	movs	r1, r3
 8003c28:	0010      	movs	r0, r2
 8003c2a:	f001 fc45 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c2e:	0021      	movs	r1, r4
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2201      	movs	r2, #1
 8003c40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <MX_GPIO_Init+0x10c>)
 8003c46:	0019      	movs	r1, r3
 8003c48:	0010      	movs	r0, r2
 8003c4a:	f001 fc35 	bl	80054b8 <HAL_GPIO_Init>

}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b00b      	add	sp, #44	; 0x2c
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	0000040f 	.word	0x0000040f
 8003c60:	48000800 	.word	0x48000800
 8003c64:	48000400 	.word	0x48000400

08003c68 <UART_Send>:

/* USER CODE BEGIN 4 */

void UART_Send(const uint8_t message[])
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	while(UART_TX_Busy){};
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <UART_Send+0x38>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1fa      	bne.n	8003c72 <UART_Send+0xa>
	UART_TX_Busy = 1;
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <UART_Send+0x38>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)message, strlen(message));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fc fa49 	bl	800011c <strlen>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <UART_Send+0x3c>)
 8003c92:	0018      	movs	r0, r3
 8003c94:	f004 f850 	bl	8007d38 <HAL_UART_Transmit_DMA>
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200002f4 	.word	0x200002f4
 8003ca4:	20000428 	.word	0x20000428

08003ca8 <drv_messageCheck>:

void drv_messageCheck(const char message[])
{
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003caa:	b09b      	sub	sp, #108	; 0x6c
 8003cac:	af06      	add	r7, sp, #24
 8003cae:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4b5e      	ldr	r3, [pc, #376]	; (8003e2c <drv_messageCheck+0x184>)
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f006 f942 	bl	8009f40 <strcpy>

	uint8_t MSG[5] = {'\0'};
 8003cbc:	2548      	movs	r5, #72	; 0x48
 8003cbe:	197b      	adds	r3, r7, r5
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	711a      	strb	r2, [r3, #4]
	int arw1=0, arw2=0, arw3=0, arw4=0, motor_brk=0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	2300      	movs	r3, #0
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd8:	2300      	movs	r3, #0
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
	int turn = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	633b      	str	r3, [r7, #48]	; 0x30
	sscanf(cmd_buf, "%s %d %d %d %d %d %d", &MSG, &arw1, &arw2, &arw3, &arw4, &turn, &motor_brk);
 8003ce0:	2344      	movs	r3, #68	; 0x44
 8003ce2:	18fc      	adds	r4, r7, r3
 8003ce4:	197a      	adds	r2, r7, r5
 8003ce6:	4952      	ldr	r1, [pc, #328]	; (8003e30 <drv_messageCheck+0x188>)
 8003ce8:	4850      	ldr	r0, [pc, #320]	; (8003e2c <drv_messageCheck+0x184>)
 8003cea:	2334      	movs	r3, #52	; 0x34
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	2330      	movs	r3, #48	; 0x30
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	2338      	movs	r3, #56	; 0x38
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	9302      	str	r3, [sp, #8]
 8003cfc:	233c      	movs	r3, #60	; 0x3c
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	2340      	movs	r3, #64	; 0x40
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	0023      	movs	r3, r4
 8003d0a:	f006 f8a3 	bl	8009e54 <siscanf>
	if (!strcmp(MSG, "[drv]")) // returns 0 if strings are equal
 8003d0e:	4a49      	ldr	r2, [pc, #292]	; (8003e34 <drv_messageCheck+0x18c>)
 8003d10:	197b      	adds	r3, r7, r5
 8003d12:	0011      	movs	r1, r2
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc f9f7 	bl	8000108 <strcmp>
 8003d1a:	1e03      	subs	r3, r0, #0
 8003d1c:	d000      	beq.n	8003d20 <drv_messageCheck+0x78>
 8003d1e:	e080      	b.n	8003e22 <drv_messageCheck+0x17a>
	{
		uint8_t reply[40] = {'\0'};
 8003d20:	2408      	movs	r4, #8
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f005 f9e2 	bl	80090f8 <memset>
		sprintf(reply, "received: %d %d %d %d %d %d \n", arw1, arw2, arw3, arw4, turn, motor_brk);
 8003d34:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	469c      	mov	ip, r3
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d42:	4d3d      	ldr	r5, [pc, #244]	; (8003e38 <drv_messageCheck+0x190>)
 8003d44:	193c      	adds	r4, r7, r4
 8003d46:	9003      	str	r0, [sp, #12]
 8003d48:	9102      	str	r1, [sp, #8]
 8003d4a:	9201      	str	r2, [sp, #4]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	4663      	mov	r3, ip
 8003d50:	0032      	movs	r2, r6
 8003d52:	0029      	movs	r1, r5
 8003d54:	0020      	movs	r0, r4
 8003d56:	f006 f85d 	bl	8009e14 <siprintf>
		UART_Send(reply);
 8003d5a:	2408      	movs	r4, #8
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff ff82 	bl	8003c68 <UART_Send>

		// Since only 1 break pin is used, it is enough to call this function for only 1 wheel
		motor_break(pMW[0], motor_brk);
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <drv_messageCheck+0x194>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fe fe98 	bl	8002aa4 <motor_break>

		// Direction is set separately for left and right sided wheels
		if (arw1 < 0 && arw3 < 0)
 8003d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	da09      	bge.n	8003d8e <drv_messageCheck+0xe6>
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da06      	bge.n	8003d8e <drv_messageCheck+0xe6>
		{
			motor_DIR(pMW[0], 1); // set direction to backward
 8003d80:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <drv_messageCheck+0x194>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fe fe4a 	bl	8002a20 <motor_DIR>
 8003d8c:	e005      	b.n	8003d9a <drv_messageCheck+0xf2>
		}
		else
		{
			motor_DIR(pMW[0], 0); // set direction to forward
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <drv_messageCheck+0x194>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2100      	movs	r1, #0
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fe fe43 	bl	8002a20 <motor_DIR>
		}
		if (arw2 < 0 && arw4 < 0)
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	da09      	bge.n	8003db4 <drv_messageCheck+0x10c>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da06      	bge.n	8003db4 <drv_messageCheck+0x10c>
		{
			motor_DIR(pMW[1], 1); // set direction to backward
 8003da6:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <drv_messageCheck+0x194>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2101      	movs	r1, #1
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7fe fe37 	bl	8002a20 <motor_DIR>
 8003db2:	e005      	b.n	8003dc0 <drv_messageCheck+0x118>
		}
		else
		{
			motor_DIR(pMW[1], 0); // set direction to forward
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <drv_messageCheck+0x194>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2100      	movs	r1, #0
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fe fe30 	bl	8002a20 <motor_DIR>
		}

		motorPWM_pulse(&htim1, pMW[0], arw1 );
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <drv_messageCheck+0x194>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <drv_messageCheck+0x198>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fe fde7 	bl	800299c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[1], arw2 );
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <drv_messageCheck+0x194>)
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <drv_messageCheck+0x198>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fe fde0 	bl	800299c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[2], arw3 );
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <drv_messageCheck+0x194>)
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de2:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <drv_messageCheck+0x198>)
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fe fdd9 	bl	800299c <motorPWM_pulse>
		motorPWM_pulse(&htim1, pMW[3], arw4 );
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <drv_messageCheck+0x194>)
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <drv_messageCheck+0x198>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe fdd2 	bl	800299c <motorPWM_pulse>

		// Positive turn direction is RIGHT
		if (abs(turn) > 30)
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	17da      	asrs	r2, r3, #31
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	4053      	eors	r3, r2
 8003e00:	2b1e      	cmp	r3, #30
 8003e02:	dd07      	ble.n	8003e14 <drv_messageCheck+0x16c>
		{
			turn = turn / abs(turn) * 30;
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da02      	bge.n	8003e10 <drv_messageCheck+0x168>
 8003e0a:	231e      	movs	r3, #30
 8003e0c:	425b      	negs	r3, r3
 8003e0e:	e000      	b.n	8003e12 <drv_messageCheck+0x16a>
 8003e10:	231e      	movs	r3, #30
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
		}
		calculate_pulses(turn, -turn);
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	425b      	negs	r3, r3
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	f000 f9d7 	bl	80041d0 <calculate_pulses>
		//linear_motor_set_target(pLM[0], turn);
		//linear_motor_set_target(pLM[1], turn);
		//linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
		//linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
	}
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b015      	add	sp, #84	; 0x54
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	20000304 	.word	0x20000304
 8003e30:	0800e404 	.word	0x0800e404
 8003e34:	0800e41c 	.word	0x0800e41c
 8003e38:	0800e424 	.word	0x0800e424
 8003e3c:	20000580 	.word	0x20000580
 8003e40:	200005b0 	.word	0x200005b0

08003e44 <cal_messageCheck>:

void cal_messageCheck(const char message[])
{
 8003e44:	b5b0      	push	{r4, r5, r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	// create a local copy of the incoming string, just it case
	static char cmd_buf[100];
	strcpy(cmd_buf, message);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <cal_messageCheck+0x80>)
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f006 f874 	bl	8009f40 <strcpy>

	uint8_t MSG[5] = {'\0'};
 8003e58:	2128      	movs	r1, #40	; 0x28
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	711a      	strb	r2, [r3, #4]
	sscanf(cmd_buf, "%s", &MSG);
 8003e64:	000c      	movs	r4, r1
 8003e66:	187a      	adds	r2, r7, r1
 8003e68:	4917      	ldr	r1, [pc, #92]	; (8003ec8 <cal_messageCheck+0x84>)
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <cal_messageCheck+0x80>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f005 fff1 	bl	8009e54 <siscanf>
	if (!strcmp(MSG, "[cal]")) // returns 0 if strings are equal
 8003e72:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <cal_messageCheck+0x88>)
 8003e74:	193b      	adds	r3, r7, r4
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7fc f945 	bl	8000108 <strcmp>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	d11c      	bne.n	8003ebc <cal_messageCheck+0x78>
	{
		uint8_t reply[] = "received calibration command\n";
 8003e82:	2008      	movs	r0, #8
 8003e84:	183b      	adds	r3, r7, r0
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <cal_messageCheck+0x8c>)
 8003e88:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003e8a:	c332      	stmia	r3!, {r1, r4, r5}
 8003e8c:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003e8e:	c332      	stmia	r3!, {r1, r4, r5}
 8003e90:	6811      	ldr	r1, [r2, #0]
 8003e92:	6019      	str	r1, [r3, #0]
 8003e94:	8892      	ldrh	r2, [r2, #4]
 8003e96:	809a      	strh	r2, [r3, #4]
		UART_Send(reply);
 8003e98:	183b      	adds	r3, r7, r0
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff fee4 	bl	8003c68 <UART_Send>
		linear_motor_calibrate(pLM[0], &htim15, &linearPulse_1);
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <cal_messageCheck+0x90>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <cal_messageCheck+0x94>)
 8003ea6:	490d      	ldr	r1, [pc, #52]	; (8003edc <cal_messageCheck+0x98>)
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fe fefb 	bl	8002ca4 <linear_motor_calibrate>
		linear_motor_calibrate(pLM[1], &htim15, &linearPulse_2);
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <cal_messageCheck+0x90>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <cal_messageCheck+0x9c>)
 8003eb4:	4909      	ldr	r1, [pc, #36]	; (8003edc <cal_messageCheck+0x98>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fe fef4 	bl	8002ca4 <linear_motor_calibrate>
	}
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b00c      	add	sp, #48	; 0x30
 8003ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec4:	20000368 	.word	0x20000368
 8003ec8:	0800e444 	.word	0x0800e444
 8003ecc:	0800e448 	.word	0x0800e448
 8003ed0:	0800e450 	.word	0x0800e450
 8003ed4:	200003dc 	.word	0x200003dc
 8003ed8:	200002f8 	.word	0x200002f8
 8003edc:	200004ac 	.word	0x200004ac
 8003ee0:	200002fc 	.word	0x200002fc

08003ee4 <calculate_angles>:

void calculate_angles(float *frontAngle, float *rearAngle)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	int32_t posFront = linear_motor_get_position(pLM[0]);
 8003eee:	4b99      	ldr	r3, [pc, #612]	; (8004154 <calculate_angles+0x270>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fe fe3e 	bl	8002b74 <linear_motor_get_position>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	61fb      	str	r3, [r7, #28]
	int32_t posRear = linear_motor_get_position(pLM[1]);
 8003efc:	4b95      	ldr	r3, [pc, #596]	; (8004154 <calculate_angles+0x270>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fe fe37 	bl	8002b74 <linear_motor_get_position>
 8003f06:	0003      	movs	r3, r0
 8003f08:	61bb      	str	r3, [r7, #24]
	float angle1 =  -3.6131e-08 * posFront*posFront - 0.0041*posFront - 0.3205;
 8003f0a:	69f8      	ldr	r0, [r7, #28]
 8003f0c:	f7fe fbb0 	bl	8002670 <__aeabi_i2d>
 8003f10:	4a91      	ldr	r2, [pc, #580]	; (8004158 <calculate_angles+0x274>)
 8003f12:	4b92      	ldr	r3, [pc, #584]	; (800415c <calculate_angles+0x278>)
 8003f14:	f7fd fd5a 	bl	80019cc <__aeabi_dmul>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	000b      	movs	r3, r1
 8003f1c:	0014      	movs	r4, r2
 8003f1e:	001d      	movs	r5, r3
 8003f20:	69f8      	ldr	r0, [r7, #28]
 8003f22:	f7fe fba5 	bl	8002670 <__aeabi_i2d>
 8003f26:	0002      	movs	r2, r0
 8003f28:	000b      	movs	r3, r1
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	0029      	movs	r1, r5
 8003f2e:	f7fd fd4d 	bl	80019cc <__aeabi_dmul>
 8003f32:	0002      	movs	r2, r0
 8003f34:	000b      	movs	r3, r1
 8003f36:	0014      	movs	r4, r2
 8003f38:	001d      	movs	r5, r3
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	f7fe fb98 	bl	8002670 <__aeabi_i2d>
 8003f40:	4a87      	ldr	r2, [pc, #540]	; (8004160 <calculate_angles+0x27c>)
 8003f42:	4b88      	ldr	r3, [pc, #544]	; (8004164 <calculate_angles+0x280>)
 8003f44:	f7fd fd42 	bl	80019cc <__aeabi_dmul>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	0029      	movs	r1, r5
 8003f50:	f7fd ffa8 	bl	8001ea4 <__aeabi_dsub>
 8003f54:	0002      	movs	r2, r0
 8003f56:	000b      	movs	r3, r1
 8003f58:	0010      	movs	r0, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	4a82      	ldr	r2, [pc, #520]	; (8004168 <calculate_angles+0x284>)
 8003f5e:	4b83      	ldr	r3, [pc, #524]	; (800416c <calculate_angles+0x288>)
 8003f60:	f7fd ffa0 	bl	8001ea4 <__aeabi_dsub>
 8003f64:	0002      	movs	r2, r0
 8003f66:	000b      	movs	r3, r1
 8003f68:	0010      	movs	r0, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	f7fe fc1e 	bl	80027ac <__aeabi_d2f>
 8003f70:	1c03      	adds	r3, r0, #0
 8003f72:	617b      	str	r3, [r7, #20]
	float angle2 =   1.0956e-07 * posFront*posFront - 0.0038*posFront + 0.1772;
 8003f74:	69f8      	ldr	r0, [r7, #28]
 8003f76:	f7fe fb7b 	bl	8002670 <__aeabi_i2d>
 8003f7a:	4a7d      	ldr	r2, [pc, #500]	; (8004170 <calculate_angles+0x28c>)
 8003f7c:	4b7d      	ldr	r3, [pc, #500]	; (8004174 <calculate_angles+0x290>)
 8003f7e:	f7fd fd25 	bl	80019cc <__aeabi_dmul>
 8003f82:	0002      	movs	r2, r0
 8003f84:	000b      	movs	r3, r1
 8003f86:	0014      	movs	r4, r2
 8003f88:	001d      	movs	r5, r3
 8003f8a:	69f8      	ldr	r0, [r7, #28]
 8003f8c:	f7fe fb70 	bl	8002670 <__aeabi_i2d>
 8003f90:	0002      	movs	r2, r0
 8003f92:	000b      	movs	r3, r1
 8003f94:	0020      	movs	r0, r4
 8003f96:	0029      	movs	r1, r5
 8003f98:	f7fd fd18 	bl	80019cc <__aeabi_dmul>
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	000b      	movs	r3, r1
 8003fa0:	0014      	movs	r4, r2
 8003fa2:	001d      	movs	r5, r3
 8003fa4:	69f8      	ldr	r0, [r7, #28]
 8003fa6:	f7fe fb63 	bl	8002670 <__aeabi_i2d>
 8003faa:	4a73      	ldr	r2, [pc, #460]	; (8004178 <calculate_angles+0x294>)
 8003fac:	4b73      	ldr	r3, [pc, #460]	; (800417c <calculate_angles+0x298>)
 8003fae:	f7fd fd0d 	bl	80019cc <__aeabi_dmul>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	000b      	movs	r3, r1
 8003fb6:	0020      	movs	r0, r4
 8003fb8:	0029      	movs	r1, r5
 8003fba:	f7fd ff73 	bl	8001ea4 <__aeabi_dsub>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	000b      	movs	r3, r1
 8003fc2:	0010      	movs	r0, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	; (8004180 <calculate_angles+0x29c>)
 8003fc8:	4b6e      	ldr	r3, [pc, #440]	; (8004184 <calculate_angles+0x2a0>)
 8003fca:	f7fc fd8f 	bl	8000aec <__aeabi_dadd>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	000b      	movs	r3, r1
 8003fd2:	0010      	movs	r0, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	f7fe fbe9 	bl	80027ac <__aeabi_d2f>
 8003fda:	1c03      	adds	r3, r0, #0
 8003fdc:	613b      	str	r3, [r7, #16]
	float angle3 =   -6.9930e-08 * posFront*posRear + 0.0041*posRear + 0.0629;
 8003fde:	69f8      	ldr	r0, [r7, #28]
 8003fe0:	f7fe fb46 	bl	8002670 <__aeabi_i2d>
 8003fe4:	4a68      	ldr	r2, [pc, #416]	; (8004188 <calculate_angles+0x2a4>)
 8003fe6:	4b69      	ldr	r3, [pc, #420]	; (800418c <calculate_angles+0x2a8>)
 8003fe8:	f7fd fcf0 	bl	80019cc <__aeabi_dmul>
 8003fec:	0002      	movs	r2, r0
 8003fee:	000b      	movs	r3, r1
 8003ff0:	0014      	movs	r4, r2
 8003ff2:	001d      	movs	r5, r3
 8003ff4:	69b8      	ldr	r0, [r7, #24]
 8003ff6:	f7fe fb3b 	bl	8002670 <__aeabi_i2d>
 8003ffa:	0002      	movs	r2, r0
 8003ffc:	000b      	movs	r3, r1
 8003ffe:	0020      	movs	r0, r4
 8004000:	0029      	movs	r1, r5
 8004002:	f7fd fce3 	bl	80019cc <__aeabi_dmul>
 8004006:	0002      	movs	r2, r0
 8004008:	000b      	movs	r3, r1
 800400a:	0014      	movs	r4, r2
 800400c:	001d      	movs	r5, r3
 800400e:	69b8      	ldr	r0, [r7, #24]
 8004010:	f7fe fb2e 	bl	8002670 <__aeabi_i2d>
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <calculate_angles+0x27c>)
 8004016:	4b53      	ldr	r3, [pc, #332]	; (8004164 <calculate_angles+0x280>)
 8004018:	f7fd fcd8 	bl	80019cc <__aeabi_dmul>
 800401c:	0002      	movs	r2, r0
 800401e:	000b      	movs	r3, r1
 8004020:	0020      	movs	r0, r4
 8004022:	0029      	movs	r1, r5
 8004024:	f7fc fd62 	bl	8000aec <__aeabi_dadd>
 8004028:	0002      	movs	r2, r0
 800402a:	000b      	movs	r3, r1
 800402c:	0010      	movs	r0, r2
 800402e:	0019      	movs	r1, r3
 8004030:	4a57      	ldr	r2, [pc, #348]	; (8004190 <calculate_angles+0x2ac>)
 8004032:	4b58      	ldr	r3, [pc, #352]	; (8004194 <calculate_angles+0x2b0>)
 8004034:	f7fc fd5a 	bl	8000aec <__aeabi_dadd>
 8004038:	0002      	movs	r2, r0
 800403a:	000b      	movs	r3, r1
 800403c:	0010      	movs	r0, r2
 800403e:	0019      	movs	r1, r3
 8004040:	f7fe fbb4 	bl	80027ac <__aeabi_d2f>
 8004044:	1c03      	adds	r3, r0, #0
 8004046:	60fb      	str	r3, [r7, #12]
	float angle4 =  -1.2005e-07 * posFront*posRear + 0.0039*posRear + 0.0641;
 8004048:	69f8      	ldr	r0, [r7, #28]
 800404a:	f7fe fb11 	bl	8002670 <__aeabi_i2d>
 800404e:	4a52      	ldr	r2, [pc, #328]	; (8004198 <calculate_angles+0x2b4>)
 8004050:	4b52      	ldr	r3, [pc, #328]	; (800419c <calculate_angles+0x2b8>)
 8004052:	f7fd fcbb 	bl	80019cc <__aeabi_dmul>
 8004056:	0002      	movs	r2, r0
 8004058:	000b      	movs	r3, r1
 800405a:	0014      	movs	r4, r2
 800405c:	001d      	movs	r5, r3
 800405e:	69b8      	ldr	r0, [r7, #24]
 8004060:	f7fe fb06 	bl	8002670 <__aeabi_i2d>
 8004064:	0002      	movs	r2, r0
 8004066:	000b      	movs	r3, r1
 8004068:	0020      	movs	r0, r4
 800406a:	0029      	movs	r1, r5
 800406c:	f7fd fcae 	bl	80019cc <__aeabi_dmul>
 8004070:	0002      	movs	r2, r0
 8004072:	000b      	movs	r3, r1
 8004074:	0014      	movs	r4, r2
 8004076:	001d      	movs	r5, r3
 8004078:	69b8      	ldr	r0, [r7, #24]
 800407a:	f7fe faf9 	bl	8002670 <__aeabi_i2d>
 800407e:	4a48      	ldr	r2, [pc, #288]	; (80041a0 <calculate_angles+0x2bc>)
 8004080:	4b48      	ldr	r3, [pc, #288]	; (80041a4 <calculate_angles+0x2c0>)
 8004082:	f7fd fca3 	bl	80019cc <__aeabi_dmul>
 8004086:	0002      	movs	r2, r0
 8004088:	000b      	movs	r3, r1
 800408a:	0020      	movs	r0, r4
 800408c:	0029      	movs	r1, r5
 800408e:	f7fc fd2d 	bl	8000aec <__aeabi_dadd>
 8004092:	0002      	movs	r2, r0
 8004094:	000b      	movs	r3, r1
 8004096:	0010      	movs	r0, r2
 8004098:	0019      	movs	r1, r3
 800409a:	4a43      	ldr	r2, [pc, #268]	; (80041a8 <calculate_angles+0x2c4>)
 800409c:	4b43      	ldr	r3, [pc, #268]	; (80041ac <calculate_angles+0x2c8>)
 800409e:	f7fc fd25 	bl	8000aec <__aeabi_dadd>
 80040a2:	0002      	movs	r2, r0
 80040a4:	000b      	movs	r3, r1
 80040a6:	0010      	movs	r0, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	f7fe fb7f 	bl	80027ac <__aeabi_d2f>
 80040ae:	1c03      	adds	r3, r0, #0
 80040b0:	60bb      	str	r3, [r7, #8]
	*frontAngle = (angle1 + angle2) / 2;
 80040b2:	6939      	ldr	r1, [r7, #16]
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7fc fa71 	bl	800059c <__aeabi_fadd>
 80040ba:	1c03      	adds	r3, r0, #0
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	05c9      	lsls	r1, r1, #23
 80040c0:	1c18      	adds	r0, r3, #0
 80040c2:	f7fc fc07 	bl	80008d4 <__aeabi_fdiv>
 80040c6:	1c03      	adds	r3, r0, #0
 80040c8:	1c1a      	adds	r2, r3, #0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	601a      	str	r2, [r3, #0]
	*rearAngle = (angle3 + angle4) / 2;
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7fc fa63 	bl	800059c <__aeabi_fadd>
 80040d6:	1c03      	adds	r3, r0, #0
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	05c9      	lsls	r1, r1, #23
 80040dc:	1c18      	adds	r0, r3, #0
 80040de:	f7fc fbf9 	bl	80008d4 <__aeabi_fdiv>
 80040e2:	1c03      	adds	r3, r0, #0
 80040e4:	1c1a      	adds	r2, r3, #0
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	601a      	str	r2, [r3, #0]
	*frontAngle = (posFront - 145.1114) / (-255.5008);
 80040ea:	69f8      	ldr	r0, [r7, #28]
 80040ec:	f7fe fac0 	bl	8002670 <__aeabi_i2d>
 80040f0:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <calculate_angles+0x2cc>)
 80040f2:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <calculate_angles+0x2d0>)
 80040f4:	f7fd fed6 	bl	8001ea4 <__aeabi_dsub>
 80040f8:	0002      	movs	r2, r0
 80040fa:	000b      	movs	r3, r1
 80040fc:	0010      	movs	r0, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <calculate_angles+0x2d4>)
 8004102:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <calculate_angles+0x2d8>)
 8004104:	f7fd f85c 	bl	80011c0 <__aeabi_ddiv>
 8004108:	0002      	movs	r2, r0
 800410a:	000b      	movs	r3, r1
 800410c:	0010      	movs	r0, r2
 800410e:	0019      	movs	r1, r3
 8004110:	f7fe fb4c 	bl	80027ac <__aeabi_d2f>
 8004114:	1c02      	adds	r2, r0, #0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
	*rearAngle = (posRear - 394.3129) / (247.7792);
 800411a:	69b8      	ldr	r0, [r7, #24]
 800411c:	f7fe faa8 	bl	8002670 <__aeabi_i2d>
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <calculate_angles+0x2dc>)
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <calculate_angles+0x2e0>)
 8004124:	f7fd febe 	bl	8001ea4 <__aeabi_dsub>
 8004128:	0002      	movs	r2, r0
 800412a:	000b      	movs	r3, r1
 800412c:	0010      	movs	r0, r2
 800412e:	0019      	movs	r1, r3
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <calculate_angles+0x2e4>)
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <calculate_angles+0x2e8>)
 8004134:	f7fd f844 	bl	80011c0 <__aeabi_ddiv>
 8004138:	0002      	movs	r2, r0
 800413a:	000b      	movs	r3, r1
 800413c:	0010      	movs	r0, r2
 800413e:	0019      	movs	r1, r3
 8004140:	f7fe fb34 	bl	80027ac <__aeabi_d2f>
 8004144:	1c02      	adds	r2, r0, #0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	601a      	str	r2, [r3, #0]
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b008      	add	sp, #32
 8004150:	bdb0      	pop	{r4, r5, r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	200003dc 	.word	0x200003dc
 8004158:	8c45e665 	.word	0x8c45e665
 800415c:	be6365ce 	.word	0xbe6365ce
 8004160:	5e9e1b09 	.word	0x5e9e1b09
 8004164:	3f70cb29 	.word	0x3f70cb29
 8004168:	6e978d50 	.word	0x6e978d50
 800416c:	3fd48312 	.word	0x3fd48312
 8004170:	e72cb9e5 	.word	0xe72cb9e5
 8004174:	3e7d68e7 	.word	0x3e7d68e7
 8004178:	77318fc5 	.word	0x77318fc5
 800417c:	3f6f212d 	.word	0x3f6f212d
 8004180:	566cf41f 	.word	0x566cf41f
 8004184:	3fc6ae7d 	.word	0x3fc6ae7d
 8004188:	91f12825 	.word	0x91f12825
 800418c:	be72c58d 	.word	0xbe72c58d
 8004190:	e2eb1c43 	.word	0xe2eb1c43
 8004194:	3fb01a36 	.word	0x3fb01a36
 8004198:	f7a206a7 	.word	0xf7a206a7
 800419c:	be801ce2 	.word	0xbe801ce2
 80041a0:	8e8a71de 	.word	0x8e8a71de
 80041a4:	3f6ff2e4 	.word	0x3f6ff2e4
 80041a8:	8bac710d 	.word	0x8bac710d
 80041ac:	3fb068db 	.word	0x3fb068db
 80041b0:	96bb98c8 	.word	0x96bb98c8
 80041b4:	40622390 	.word	0x40622390
 80041b8:	8db8bac7 	.word	0x8db8bac7
 80041bc:	c06ff006 	.word	0xc06ff006
 80041c0:	a36e2eb2 	.word	0xa36e2eb2
 80041c4:	4078a501 	.word	0x4078a501
 80041c8:	34d6a162 	.word	0x34d6a162
 80041cc:	406ef8ef 	.word	0x406ef8ef

080041d0 <calculate_pulses>:

void calculate_pulses(int32_t frontAngle, int32_t rearAngle)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
    // Positive turn direction is RIGHT
	//int32_t posFront = linear_motor_get_position(pLM[0]);
	//int32_t posRear = linear_motor_get_position(pLM[1]);
	int32_t pulses_front = -255.5008 * frontAngle + 145.1114;
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fe fa48 	bl	8002670 <__aeabi_i2d>
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <calculate_pulses+0xa8>)
 80041e2:	4b26      	ldr	r3, [pc, #152]	; (800427c <calculate_pulses+0xac>)
 80041e4:	f7fd fbf2 	bl	80019cc <__aeabi_dmul>
 80041e8:	0002      	movs	r2, r0
 80041ea:	000b      	movs	r3, r1
 80041ec:	0010      	movs	r0, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	4a23      	ldr	r2, [pc, #140]	; (8004280 <calculate_pulses+0xb0>)
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <calculate_pulses+0xb4>)
 80041f4:	f7fc fc7a 	bl	8000aec <__aeabi_dadd>
 80041f8:	0002      	movs	r2, r0
 80041fa:	000b      	movs	r3, r1
 80041fc:	0010      	movs	r0, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	f7fe fa00 	bl	8002604 <__aeabi_d2iz>
 8004204:	0003      	movs	r3, r0
 8004206:	60fb      	str	r3, [r7, #12]
	int32_t pulses_rear = 247.7792 * rearAngle + 394.3129;
 8004208:	6838      	ldr	r0, [r7, #0]
 800420a:	f7fe fa31 	bl	8002670 <__aeabi_i2d>
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <calculate_pulses+0xb8>)
 8004210:	4b1e      	ldr	r3, [pc, #120]	; (800428c <calculate_pulses+0xbc>)
 8004212:	f7fd fbdb 	bl	80019cc <__aeabi_dmul>
 8004216:	0002      	movs	r2, r0
 8004218:	000b      	movs	r3, r1
 800421a:	0010      	movs	r0, r2
 800421c:	0019      	movs	r1, r3
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <calculate_pulses+0xc0>)
 8004220:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <calculate_pulses+0xc4>)
 8004222:	f7fc fc63 	bl	8000aec <__aeabi_dadd>
 8004226:	0002      	movs	r2, r0
 8004228:	000b      	movs	r3, r1
 800422a:	0010      	movs	r0, r2
 800422c:	0019      	movs	r1, r3
 800422e:	f7fe f9e9 	bl	8002604 <__aeabi_d2iz>
 8004232:	0003      	movs	r3, r0
 8004234:	60bb      	str	r3, [r7, #8]

	// Positive turn direction is RIGHT
	linear_motor_set_target(pLM[0], pulses_front);
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <calculate_pulses+0xc8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	0011      	movs	r1, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fe fc7a 	bl	8002b38 <linear_motor_set_target>
	linear_motor_set_target(pLM[1], pulses_rear);
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <calculate_pulses+0xc8>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f7fe fc73 	bl	8002b38 <linear_motor_set_target>
	linear_motor_pulse(pLM[0], &htim15, &linearPulse_1);
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <calculate_pulses+0xc8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a11      	ldr	r2, [pc, #68]	; (800429c <calculate_pulses+0xcc>)
 8004258:	4911      	ldr	r1, [pc, #68]	; (80042a0 <calculate_pulses+0xd0>)
 800425a:	0018      	movs	r0, r3
 800425c:	f7fe fc94 	bl	8002b88 <linear_motor_pulse>
	linear_motor_pulse(pLM[1], &htim15, &linearPulse_2);
 8004260:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <calculate_pulses+0xc8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <calculate_pulses+0xd4>)
 8004266:	490e      	ldr	r1, [pc, #56]	; (80042a0 <calculate_pulses+0xd0>)
 8004268:	0018      	movs	r0, r3
 800426a:	f7fe fc8d 	bl	8002b88 <linear_motor_pulse>
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b004      	add	sp, #16
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	8db8bac7 	.word	0x8db8bac7
 800427c:	c06ff006 	.word	0xc06ff006
 8004280:	96bb98c8 	.word	0x96bb98c8
 8004284:	40622390 	.word	0x40622390
 8004288:	34d6a162 	.word	0x34d6a162
 800428c:	406ef8ef 	.word	0x406ef8ef
 8004290:	a36e2eb2 	.word	0xa36e2eb2
 8004294:	4078a501 	.word	0x4078a501
 8004298:	200003dc 	.word	0x200003dc
 800429c:	200002f8 	.word	0x200002f8
 80042a0:	200004ac 	.word	0x200004ac
 80042a4:	200002fc 	.word	0x200002fc

080042a8 <HAL_TIM_PWM_PulseFinishedCallback>:

// Linear Motors Timers
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim15)
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d12e      	bne.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7f1b      	ldrb	r3, [r3, #28]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d113      	bne.n	80042e8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			if (linearPulse_1 > 0)
 80042c0:	4b18      	ldr	r3, [pc, #96]	; (8004324 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			{
				linearPulse_1--;
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1e5a      	subs	r2, r3, #1
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80042d0:	601a      	str	r2, [r3, #0]
			{
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
			}
		}
	}
}
 80042d2:	e020      	b.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_1 == 0)
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11c      	bne.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80042de:	2100      	movs	r1, #0
 80042e0:	0018      	movs	r0, r3
 80042e2:	f002 f959 	bl	8006598 <HAL_TIM_PWM_Stop_IT>
}
 80042e6:	e016      	b.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7f1b      	ldrb	r3, [r3, #28]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d112      	bne.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			if (linearPulse_2 > 0)
 80042f0:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
				linearPulse_2--;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	e008      	b.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			else if (linearPulse_2 == 0)
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_2);
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800430e:	2104      	movs	r1, #4
 8004310:	0018      	movs	r0, r3
 8004312:	f002 f941 	bl	8006598 <HAL_TIM_PWM_Stop_IT>
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	200004ac 	.word	0x200004ac
 8004324:	200002f8 	.word	0x200002f8
 8004328:	200002fc 	.word	0x200002fc

0800432c <HAL_TIM_IC_CaptureCallback>:

// ENCODERS READING
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4aa9      	ldr	r2, [pc, #676]	; (80045e0 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d000      	beq.n	8004340 <HAL_TIM_IC_CaptureCallback+0x14>
 800433e:	e14a      	b.n	80045d6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    {
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7f1b      	ldrb	r3, [r3, #28]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d14e      	bne.n	80043e6 <HAL_TIM_IC_CaptureCallback+0xba>
		{
			T31Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8004348:	4ba6      	ldr	r3, [pc, #664]	; (80045e4 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800434a:	2100      	movs	r1, #0
 800434c:	0018      	movs	r0, r3
 800434e:	f002 fe93 	bl	8007078 <HAL_TIM_ReadCapturedValue>
 8004352:	0002      	movs	r2, r0
 8004354:	4ba4      	ldr	r3, [pc, #656]	; (80045e8 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8004356:	601a      	str	r2, [r3, #0]
			if (T31Tick > T31Rising)
 8004358:	4ba3      	ldr	r3, [pc, #652]	; (80045e8 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4ba3      	ldr	r3, [pc, #652]	; (80045ec <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d93b      	bls.n	80043dc <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				T31vectSum = 0;
 8004364:	4ba2      	ldr	r3, [pc, #648]	; (80045f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e01a      	b.n	80043a6 <HAL_TIM_IC_CaptureCallback+0x7a>
				{
					T31vect[i] = T31vect[i+1];
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	4b9f      	ldr	r3, [pc, #636]	; (80045f4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004376:	0092      	lsls	r2, r2, #2
 8004378:	58d1      	ldr	r1, [r2, r3]
 800437a:	4b9e      	ldr	r3, [pc, #632]	; (80045f4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	50d1      	str	r1, [r2, r3]
					T31vectSum += T31vect[i] / 5;
 8004382:	4b9c      	ldr	r3, [pc, #624]	; (80045f4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	0092      	lsls	r2, r2, #2
 8004388:	58d3      	ldr	r3, [r2, r3]
 800438a:	2105      	movs	r1, #5
 800438c:	0018      	movs	r0, r3
 800438e:	f7fb fee1 	bl	8000154 <__udivsi3>
 8004392:	0003      	movs	r3, r0
 8004394:	001a      	movs	r2, r3
 8004396:	4b96      	ldr	r3, [pc, #600]	; (80045f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	18d2      	adds	r2, r2, r3
 800439c:	4b94      	ldr	r3, [pc, #592]	; (80045f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800439e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	dde1      	ble.n	8004370 <HAL_TIM_IC_CaptureCallback+0x44>
				}
				T31vect[4] = T31Tick - T31Rising;
 80043ac:	4b8e      	ldr	r3, [pc, #568]	; (80045e8 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1ad2      	subs	r2, r2, r3
 80043b6:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80043b8:	611a      	str	r2, [r3, #16]
				T31vectSum += T31vect[4] / 5;
 80043ba:	4b8e      	ldr	r3, [pc, #568]	; (80045f4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2105      	movs	r1, #5
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7fb fec7 	bl	8000154 <__udivsi3>
 80043c6:	0003      	movs	r3, r0
 80043c8:	001a      	movs	r2, r3
 80043ca:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	18d2      	adds	r2, r2, r3
 80043d0:	4b87      	ldr	r3, [pc, #540]	; (80045f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80043d2:	601a      	str	r2, [r3, #0]
				T31pulseWidth = T31vectSum;
 80043d4:	4b86      	ldr	r3, [pc, #536]	; (80045f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b87      	ldr	r3, [pc, #540]	; (80045f8 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80043da:	601a      	str	r2, [r3, #0]
			}
			T31Rising = T31Tick;
 80043dc:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b82      	ldr	r3, [pc, #520]	; (80045ec <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80043e2:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
			}
			T34Rising = T34Tick;
		}
    }
}
 80043e4:	e0f7      	b.n	80045d6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7f1b      	ldrb	r3, [r3, #28]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d14e      	bne.n	800448c <HAL_TIM_IC_CaptureCallback+0x160>
    		T32Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80043ee:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80043f0:	2104      	movs	r1, #4
 80043f2:	0018      	movs	r0, r3
 80043f4:	f002 fe40 	bl	8007078 <HAL_TIM_ReadCapturedValue>
 80043f8:	0002      	movs	r2, r0
 80043fa:	4b80      	ldr	r3, [pc, #512]	; (80045fc <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80043fc:	601a      	str	r2, [r3, #0]
			if (T32Tick > T32Rising)
 80043fe:	4b7f      	ldr	r3, [pc, #508]	; (80045fc <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b7f      	ldr	r3, [pc, #508]	; (8004600 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d93b      	bls.n	8004482 <HAL_TIM_IC_CaptureCallback+0x156>
				T32vectSum = 0;
 800440a:	4b7e      	ldr	r3, [pc, #504]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e01a      	b.n	800444c <HAL_TIM_IC_CaptureCallback+0x120>
					T32vect[i] = T32vect[i+1];
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	4b7b      	ldr	r3, [pc, #492]	; (8004608 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	58d1      	ldr	r1, [r2, r3]
 8004420:	4b79      	ldr	r3, [pc, #484]	; (8004608 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	0092      	lsls	r2, r2, #2
 8004426:	50d1      	str	r1, [r2, r3]
					T32vectSum += T32vect[i] / 5;
 8004428:	4b77      	ldr	r3, [pc, #476]	; (8004608 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	0092      	lsls	r2, r2, #2
 800442e:	58d3      	ldr	r3, [r2, r3]
 8004430:	2105      	movs	r1, #5
 8004432:	0018      	movs	r0, r3
 8004434:	f7fb fe8e 	bl	8000154 <__udivsi3>
 8004438:	0003      	movs	r3, r0
 800443a:	001a      	movs	r2, r3
 800443c:	4b71      	ldr	r3, [pc, #452]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	18d2      	adds	r2, r2, r3
 8004442:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004444:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3301      	adds	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b03      	cmp	r3, #3
 8004450:	dde1      	ble.n	8004416 <HAL_TIM_IC_CaptureCallback+0xea>
				T32vect[4] = T32Tick - T32Rising;
 8004452:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b6a      	ldr	r3, [pc, #424]	; (8004600 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1ad2      	subs	r2, r2, r3
 800445c:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800445e:	611a      	str	r2, [r3, #16]
				T32vectSum += T32vect[4] / 5;
 8004460:	4b69      	ldr	r3, [pc, #420]	; (8004608 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2105      	movs	r1, #5
 8004466:	0018      	movs	r0, r3
 8004468:	f7fb fe74 	bl	8000154 <__udivsi3>
 800446c:	0003      	movs	r3, r0
 800446e:	001a      	movs	r2, r3
 8004470:	4b64      	ldr	r3, [pc, #400]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	18d2      	adds	r2, r2, r3
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004478:	601a      	str	r2, [r3, #0]
				T32pulseWidth = T32vectSum;
 800447a:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8004480:	601a      	str	r2, [r3, #0]
			T32Rising = T32Tick;
 8004482:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b5e      	ldr	r3, [pc, #376]	; (8004600 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	e0a4      	b.n	80045d6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7f1b      	ldrb	r3, [r3, #28]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d14e      	bne.n	8004532 <HAL_TIM_IC_CaptureCallback+0x206>
    		T33Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8004494:	4b53      	ldr	r3, [pc, #332]	; (80045e4 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8004496:	2108      	movs	r1, #8
 8004498:	0018      	movs	r0, r3
 800449a:	f002 fded 	bl	8007078 <HAL_TIM_ReadCapturedValue>
 800449e:	0002      	movs	r2, r0
 80044a0:	4b5b      	ldr	r3, [pc, #364]	; (8004610 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80044a2:	601a      	str	r2, [r3, #0]
			if (T33Tick > T33Rising)
 80044a4:	4b5a      	ldr	r3, [pc, #360]	; (8004610 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b5a      	ldr	r3, [pc, #360]	; (8004614 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d93b      	bls.n	8004528 <HAL_TIM_IC_CaptureCallback+0x1fc>
				T33vectSum = 0;
 80044b0:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e01a      	b.n	80044f2 <HAL_TIM_IC_CaptureCallback+0x1c6>
					T33vect[i] = T33vect[i+1];
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80044c2:	0092      	lsls	r2, r2, #2
 80044c4:	58d1      	ldr	r1, [r2, r3]
 80044c6:	4b55      	ldr	r3, [pc, #340]	; (800461c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	0092      	lsls	r2, r2, #2
 80044cc:	50d1      	str	r1, [r2, r3]
					T33vectSum += T33vect[i] / 5;
 80044ce:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	0092      	lsls	r2, r2, #2
 80044d4:	58d3      	ldr	r3, [r2, r3]
 80044d6:	2105      	movs	r1, #5
 80044d8:	0018      	movs	r0, r3
 80044da:	f7fb fe3b 	bl	8000154 <__udivsi3>
 80044de:	0003      	movs	r3, r0
 80044e0:	001a      	movs	r2, r3
 80044e2:	4b4d      	ldr	r3, [pc, #308]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	18d2      	adds	r2, r2, r3
 80044e8:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80044ea:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	dde1      	ble.n	80044bc <HAL_TIM_IC_CaptureCallback+0x190>
				T33vect[4] = T33Tick - T33Rising;
 80044f8:	4b45      	ldr	r3, [pc, #276]	; (8004610 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b45      	ldr	r3, [pc, #276]	; (8004614 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8004504:	611a      	str	r2, [r3, #16]
				T33vectSum += T33vect[4] / 5;
 8004506:	4b45      	ldr	r3, [pc, #276]	; (800461c <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2105      	movs	r1, #5
 800450c:	0018      	movs	r0, r3
 800450e:	f7fb fe21 	bl	8000154 <__udivsi3>
 8004512:	0003      	movs	r3, r0
 8004514:	001a      	movs	r2, r3
 8004516:	4b40      	ldr	r3, [pc, #256]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	18d2      	adds	r2, r2, r3
 800451c:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800451e:	601a      	str	r2, [r3, #0]
				T33pulseWidth = T33vectSum;
 8004520:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8004526:	601a      	str	r2, [r3, #0]
			T33Rising = T33Tick;
 8004528:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b39      	ldr	r3, [pc, #228]	; (8004614 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	e051      	b.n	80045d6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7f1b      	ldrb	r3, [r3, #28]
 8004536:	2b08      	cmp	r3, #8
 8004538:	d14d      	bne.n	80045d6 <HAL_TIM_IC_CaptureCallback+0x2aa>
    		T34Tick = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800453c:	210c      	movs	r1, #12
 800453e:	0018      	movs	r0, r3
 8004540:	f002 fd9a 	bl	8007078 <HAL_TIM_ReadCapturedValue>
 8004544:	0002      	movs	r2, r0
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8004548:	601a      	str	r2, [r3, #0]
			if (T34Tick > T34Rising)
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d93b      	bls.n	80045ce <HAL_TIM_IC_CaptureCallback+0x2a2>
				T34vectSum = 0;
 8004556:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_TIM_IC_CaptureCallback+0x300>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	e01a      	b.n	8004598 <HAL_TIM_IC_CaptureCallback+0x26c>
					T34vect[i] = T34vect[i+1];
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	4b32      	ldr	r3, [pc, #200]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x304>)
 8004568:	0092      	lsls	r2, r2, #2
 800456a:	58d1      	ldr	r1, [r2, r3]
 800456c:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x304>)
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	50d1      	str	r1, [r2, r3]
					T34vectSum += T34vect[i] / 5;
 8004574:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x304>)
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0092      	lsls	r2, r2, #2
 800457a:	58d3      	ldr	r3, [r2, r3]
 800457c:	2105      	movs	r1, #5
 800457e:	0018      	movs	r0, r3
 8004580:	f7fb fde8 	bl	8000154 <__udivsi3>
 8004584:	0003      	movs	r3, r0
 8004586:	001a      	movs	r2, r3
 8004588:	4b28      	ldr	r3, [pc, #160]	; (800462c <HAL_TIM_IC_CaptureCallback+0x300>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	18d2      	adds	r2, r2, r3
 800458e:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_TIM_IC_CaptureCallback+0x300>)
 8004590:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3301      	adds	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b03      	cmp	r3, #3
 800459c:	dde1      	ble.n	8004562 <HAL_TIM_IC_CaptureCallback+0x236>
				T34vect[4] = T34Tick - T34Rising;
 800459e:	4b21      	ldr	r3, [pc, #132]	; (8004624 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b21      	ldr	r3, [pc, #132]	; (8004628 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1ad2      	subs	r2, r2, r3
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x304>)
 80045aa:	611a      	str	r2, [r3, #16]
				T34vectSum += T34vect[4] / 5;
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x304>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2105      	movs	r1, #5
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7fb fdce 	bl	8000154 <__udivsi3>
 80045b8:	0003      	movs	r3, r0
 80045ba:	001a      	movs	r2, r3
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_TIM_IC_CaptureCallback+0x300>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	18d2      	adds	r2, r2, r3
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_TIM_IC_CaptureCallback+0x300>)
 80045c4:	601a      	str	r2, [r3, #0]
				T34pulseWidth = T34vectSum;
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_TIM_IC_CaptureCallback+0x300>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_TIM_IC_CaptureCallback+0x308>)
 80045cc:	601a      	str	r2, [r3, #0]
			T34Rising = T34Tick;
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80045d4:	601a      	str	r2, [r3, #0]
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b006      	add	sp, #24
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40000400 	.word	0x40000400
 80045e4:	20000538 	.word	0x20000538
 80045e8:	20000204 	.word	0x20000204
 80045ec:	20000200 	.word	0x20000200
 80045f0:	20000208 	.word	0x20000208
 80045f4:	2000020c 	.word	0x2000020c
 80045f8:	200001fc 	.word	0x200001fc
 80045fc:	20000228 	.word	0x20000228
 8004600:	20000224 	.word	0x20000224
 8004604:	2000022c 	.word	0x2000022c
 8004608:	20000230 	.word	0x20000230
 800460c:	20000220 	.word	0x20000220
 8004610:	2000024c 	.word	0x2000024c
 8004614:	20000248 	.word	0x20000248
 8004618:	20000250 	.word	0x20000250
 800461c:	20000254 	.word	0x20000254
 8004620:	20000244 	.word	0x20000244
 8004624:	20000270 	.word	0x20000270
 8004628:	2000026c 	.word	0x2000026c
 800462c:	20000274 	.word	0x20000274
 8004630:	20000278 	.word	0x20000278
 8004634:	20000268 	.word	0x20000268

08004638 <HAL_UART_TxCpltCallback>:

// --------------------------------------

// UART Processing
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	UART_TX_Busy = 0;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <HAL_UART_TxCpltCallback+0x18>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b002      	add	sp, #8
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	200002f4 	.word	0x200002f4

08004654 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3 && UART_newMessage != 1 && Init_Done == 1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <HAL_UART_RxCpltCallback+0xc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d151      	bne.n	800470a <HAL_UART_RxCpltCallback+0xb6>
 8004666:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <HAL_UART_RxCpltCallback+0xc4>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d04d      	beq.n	800470a <HAL_UART_RxCpltCallback+0xb6>
 800466e:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_UART_RxCpltCallback+0xc8>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d149      	bne.n	800470a <HAL_UART_RxCpltCallback+0xb6>
	{ // Current UART
		static short int UART2_rxindex = 0;
		static uint8_t UART2_ErrorFlag = UART_PACKET_OK;

		if (UART2_rxBuffer == '\n') // If Enter
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_UART_RxCpltCallback+0xcc>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b0a      	cmp	r3, #10
 800467c:	d11a      	bne.n	80046b4 <HAL_UART_RxCpltCallback+0x60>
		{
			if (UART2_ErrorFlag == UART_PACKET_OK && UART2_rxindex)
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <HAL_UART_RxCpltCallback+0xd0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d112      	bne.n	80046ac <HAL_UART_RxCpltCallback+0x58>
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 8004688:	2200      	movs	r2, #0
 800468a:	5e9b      	ldrsh	r3, [r3, r2]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_UART_RxCpltCallback+0x58>
			{
				rxString[UART2_rxindex] = 0;
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 8004692:	2200      	movs	r2, #0
 8004694:	5e9b      	ldrsh	r3, [r3, r2]
 8004696:	001a      	movs	r2, r3
 8004698:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_UART_RxCpltCallback+0xd8>)
 800469a:	2100      	movs	r1, #0
 800469c:	5499      	strb	r1, [r3, r2]
				UART2_rxindex = 0;
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	801a      	strh	r2, [r3, #0]
				UART_newMessage = 1;
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_UART_RxCpltCallback+0xc4>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]



	}

}
 80046aa:	e02e      	b.n	800470a <HAL_UART_RxCpltCallback+0xb6>
				UART2_ErrorFlag = UART_PACKET_OK; // reset error state
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_UART_RxCpltCallback+0xd0>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
}
 80046b2:	e02a      	b.n	800470a <HAL_UART_RxCpltCallback+0xb6>
			if (UART2_rxBuffer != '\r' && UART2_ErrorFlag == UART_PACKET_OK) // Ignore return
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_UART_RxCpltCallback+0xcc>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b0d      	cmp	r3, #13
 80046ba:	d026      	beq.n	800470a <HAL_UART_RxCpltCallback+0xb6>
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_UART_RxCpltCallback+0xd0>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d122      	bne.n	800470a <HAL_UART_RxCpltCallback+0xb6>
				rxString[UART2_rxindex] = UART2_rxBuffer; // Add that character to the string
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	5e9b      	ldrsh	r3, [r3, r2]
 80046ca:	001a      	movs	r2, r3
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_UART_RxCpltCallback+0xcc>)
 80046ce:	7819      	ldrb	r1, [r3, #0]
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_UART_RxCpltCallback+0xd8>)
 80046d2:	5499      	strb	r1, [r3, r2]
				UART2_rxindex++;
 80046d4:	4b14      	ldr	r3, [pc, #80]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	5e9b      	ldrsh	r3, [r3, r2]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	b21a      	sxth	r2, r3
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046e4:	801a      	strh	r2, [r3, #0]
				if (UART2_rxindex >= 100) // User typing too much, we can't have commands that big
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	5e9b      	ldrsh	r3, [r3, r2]
 80046ec:	2b63      	cmp	r3, #99	; 0x63
 80046ee:	dd0c      	ble.n	800470a <HAL_UART_RxCpltCallback+0xb6>
					UART2_ErrorFlag = UART_PACKET_TOO_LONG;
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_UART_RxCpltCallback+0xd0>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
					UART2_rxindex = 0;
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	801a      	strh	r2, [r3, #0]
					rxString[UART2_rxindex] = '\000';
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_UART_RxCpltCallback+0xd4>)
 80046fe:	2200      	movs	r2, #0
 8004700:	5e9b      	ldrsh	r3, [r3, r2]
 8004702:	001a      	movs	r2, r3
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_UART_RxCpltCallback+0xd8>)
 8004706:	2100      	movs	r1, #0
 8004708:	5499      	strb	r1, [r3, r2]
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	40004800 	.word	0x40004800
 8004718:	2000028d 	.word	0x2000028d
 800471c:	20000300 	.word	0x20000300
 8004720:	2000028c 	.word	0x2000028c
 8004724:	200003cc 	.word	0x200003cc
 8004728:	200003ce 	.word	0x200003ce
 800472c:	20000290 	.word	0x20000290

08004730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004738:	e7fe      	b.n	8004738 <Error_Handler+0x8>
	...

0800473c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <HAL_MspInit+0x44>)
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <HAL_MspInit+0x44>)
 8004748:	2101      	movs	r1, #1
 800474a:	430a      	orrs	r2, r1
 800474c:	619a      	str	r2, [r3, #24]
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_MspInit+0x44>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2201      	movs	r2, #1
 8004754:	4013      	ands	r3, r2
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_MspInit+0x44>)
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_MspInit+0x44>)
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	0549      	lsls	r1, r1, #21
 8004764:	430a      	orrs	r2, r1
 8004766:	61da      	str	r2, [r3, #28]
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_MspInit+0x44>)
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	055b      	lsls	r3, r3, #21
 8004770:	4013      	ands	r3, r2
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	40021000 	.word	0x40021000

08004784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_TIM_Base_MspInit+0x70>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10e      	bne.n	80047b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <HAL_TIM_Base_MspInit+0x74>)
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <HAL_TIM_Base_MspInit+0x74>)
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0109      	lsls	r1, r1, #4
 80047a0:	430a      	orrs	r2, r1
 80047a2:	619a      	str	r2, [r3, #24]
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <HAL_TIM_Base_MspInit+0x74>)
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80047b2:	e01a      	b.n	80047ea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM15)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a10      	ldr	r2, [pc, #64]	; (80047fc <HAL_TIM_Base_MspInit+0x78>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d115      	bne.n	80047ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <HAL_TIM_Base_MspInit+0x74>)
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_TIM_Base_MspInit+0x74>)
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	0249      	lsls	r1, r1, #9
 80047c8:	430a      	orrs	r2, r1
 80047ca:	619a      	str	r2, [r3, #24]
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_TIM_Base_MspInit+0x74>)
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	4013      	ands	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	2014      	movs	r0, #20
 80047e0:	f000 fc22 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80047e4:	2014      	movs	r0, #20
 80047e6:	f000 fc34 	bl	8005052 <HAL_NVIC_EnableIRQ>
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b004      	add	sp, #16
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40014000 	.word	0x40014000

08004800 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b08b      	sub	sp, #44	; 0x2c
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	2414      	movs	r4, #20
 800480a:	193b      	adds	r3, r7, r4
 800480c:	0018      	movs	r0, r3
 800480e:	2314      	movs	r3, #20
 8004810:	001a      	movs	r2, r3
 8004812:	2100      	movs	r1, #0
 8004814:	f004 fc70 	bl	80090f8 <memset>
  if(htim_ic->Instance==TIM3)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a31      	ldr	r2, [pc, #196]	; (80048e4 <HAL_TIM_IC_MspInit+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d15b      	bne.n	80048da <HAL_TIM_IC_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 8004828:	2102      	movs	r1, #2
 800482a:	430a      	orrs	r2, r1
 800482c:	61da      	str	r2, [r3, #28]
 800482e:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	2202      	movs	r2, #2
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483a:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	02c9      	lsls	r1, r1, #11
 8004844:	430a      	orrs	r2, r1
 8004846:	615a      	str	r2, [r3, #20]
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	02db      	lsls	r3, r3, #11
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	0309      	lsls	r1, r1, #12
 8004860:	430a      	orrs	r2, r1
 8004862:	615a      	str	r2, [r3, #20]
 8004864:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_TIM_IC_MspInit+0xe8>)
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	031b      	lsls	r3, r3, #12
 800486c:	4013      	ands	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8004872:	193b      	adds	r3, r7, r4
 8004874:	2221      	movs	r2, #33	; 0x21
 8004876:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004878:	193b      	adds	r3, r7, r4
 800487a:	2202      	movs	r2, #2
 800487c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800487e:	193b      	adds	r3, r7, r4
 8004880:	2201      	movs	r2, #1
 8004882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004884:	193b      	adds	r3, r7, r4
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800488a:	193b      	adds	r3, r7, r4
 800488c:	2201      	movs	r2, #1
 800488e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004890:	193b      	adds	r3, r7, r4
 8004892:	4a16      	ldr	r2, [pc, #88]	; (80048ec <HAL_TIM_IC_MspInit+0xec>)
 8004894:	0019      	movs	r1, r3
 8004896:	0010      	movs	r0, r2
 8004898:	f000 fe0e 	bl	80054b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800489c:	0021      	movs	r1, r4
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	2290      	movs	r2, #144	; 0x90
 80048a2:	0092      	lsls	r2, r2, #2
 80048a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	2202      	movs	r2, #2
 80048aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	2201      	movs	r2, #1
 80048b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <HAL_TIM_IC_MspInit+0xf0>)
 80048c2:	0019      	movs	r1, r3
 80048c4:	0010      	movs	r0, r2
 80048c6:	f000 fdf7 	bl	80054b8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80048ca:	2200      	movs	r2, #0
 80048cc:	2101      	movs	r1, #1
 80048ce:	2010      	movs	r0, #16
 80048d0:	f000 fbaa 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048d4:	2010      	movs	r0, #16
 80048d6:	f000 fbbc 	bl	8005052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	b00b      	add	sp, #44	; 0x2c
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40021000 	.word	0x40021000
 80048ec:	48000400 	.word	0x48000400
 80048f0:	48000800 	.word	0x48000800

080048f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b08b      	sub	sp, #44	; 0x2c
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	2414      	movs	r4, #20
 80048fe:	193b      	adds	r3, r7, r4
 8004900:	0018      	movs	r0, r3
 8004902:	2314      	movs	r3, #20
 8004904:	001a      	movs	r2, r3
 8004906:	2100      	movs	r1, #0
 8004908:	f004 fbf6 	bl	80090f8 <memset>
  if(htim->Instance==TIM1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <HAL_TIM_MspPostInit+0xcc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d126      	bne.n	8004964 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_TIM_MspPostInit+0xd0>)
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <HAL_TIM_MspPostInit+0xd0>)
 800491c:	2180      	movs	r1, #128	; 0x80
 800491e:	0289      	lsls	r1, r1, #10
 8004920:	430a      	orrs	r2, r1
 8004922:	615a      	str	r2, [r3, #20]
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_TIM_MspPostInit+0xd0>)
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	029b      	lsls	r3, r3, #10
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004932:	193b      	adds	r3, r7, r4
 8004934:	22f0      	movs	r2, #240	; 0xf0
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493a:	0021      	movs	r1, r4
 800493c:	187b      	adds	r3, r7, r1
 800493e:	2202      	movs	r2, #2
 8004940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	187b      	adds	r3, r7, r1
 8004944:	2200      	movs	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004948:	187b      	adds	r3, r7, r1
 800494a:	2200      	movs	r2, #0
 800494c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800494e:	187b      	adds	r3, r7, r1
 8004950:	2202      	movs	r2, #2
 8004952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004954:	187a      	adds	r2, r7, r1
 8004956:	2390      	movs	r3, #144	; 0x90
 8004958:	05db      	lsls	r3, r3, #23
 800495a:	0011      	movs	r1, r2
 800495c:	0018      	movs	r0, r3
 800495e:	f000 fdab 	bl	80054b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004962:	e029      	b.n	80049b8 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM15)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_TIM_MspPostInit+0xd4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d124      	bne.n	80049b8 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_TIM_MspPostInit+0xd0>)
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_TIM_MspPostInit+0xd0>)
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	02c9      	lsls	r1, r1, #11
 8004978:	430a      	orrs	r2, r1
 800497a:	615a      	str	r2, [r3, #20]
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_TIM_MspPostInit+0xd0>)
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	02db      	lsls	r3, r3, #11
 8004984:	4013      	ands	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800498a:	2114      	movs	r1, #20
 800498c:	187b      	adds	r3, r7, r1
 800498e:	22c0      	movs	r2, #192	; 0xc0
 8004990:	0212      	lsls	r2, r2, #8
 8004992:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004994:	187b      	adds	r3, r7, r1
 8004996:	2202      	movs	r2, #2
 8004998:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	187b      	adds	r3, r7, r1
 800499c:	2200      	movs	r2, #0
 800499e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	2200      	movs	r2, #0
 80049a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80049a6:	187b      	adds	r3, r7, r1
 80049a8:	2201      	movs	r2, #1
 80049aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_TIM_MspPostInit+0xd8>)
 80049b0:	0019      	movs	r1, r3
 80049b2:	0010      	movs	r0, r2
 80049b4:	f000 fd80 	bl	80054b8 <HAL_GPIO_Init>
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b00b      	add	sp, #44	; 0x2c
 80049be:	bd90      	pop	{r4, r7, pc}
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40014000 	.word	0x40014000
 80049cc:	48000400 	.word	0x48000400

080049d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b08b      	sub	sp, #44	; 0x2c
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	2414      	movs	r4, #20
 80049da:	193b      	adds	r3, r7, r4
 80049dc:	0018      	movs	r0, r3
 80049de:	2314      	movs	r3, #20
 80049e0:	001a      	movs	r2, r3
 80049e2:	2100      	movs	r1, #0
 80049e4:	f004 fb88 	bl	80090f8 <memset>
  if(huart->Instance==USART3)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4e      	ldr	r2, [pc, #312]	; (8004b28 <HAL_UART_MspInit+0x158>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d000      	beq.n	80049f4 <HAL_UART_MspInit+0x24>
 80049f2:	e094      	b.n	8004b1e <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049f4:	4b4d      	ldr	r3, [pc, #308]	; (8004b2c <HAL_UART_MspInit+0x15c>)
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <HAL_UART_MspInit+0x15c>)
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	02c9      	lsls	r1, r1, #11
 80049fe:	430a      	orrs	r2, r1
 8004a00:	61da      	str	r2, [r3, #28]
 8004a02:	4b4a      	ldr	r3, [pc, #296]	; (8004b2c <HAL_UART_MspInit+0x15c>)
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	02db      	lsls	r3, r3, #11
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a10:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_UART_MspInit+0x15c>)
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	4b45      	ldr	r3, [pc, #276]	; (8004b2c <HAL_UART_MspInit+0x15c>)
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	0309      	lsls	r1, r1, #12
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	615a      	str	r2, [r3, #20]
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_UART_MspInit+0x15c>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	4013      	ands	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8004a2c:	193b      	adds	r3, r7, r4
 8004a2e:	2281      	movs	r2, #129	; 0x81
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a34:	0021      	movs	r1, r4
 8004a36:	187b      	adds	r3, r7, r1
 8004a38:	2202      	movs	r2, #2
 8004a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	2200      	movs	r2, #0
 8004a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	2203      	movs	r2, #3
 8004a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8004a48:	187b      	adds	r3, r7, r1
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a4e:	187b      	adds	r3, r7, r1
 8004a50:	4a37      	ldr	r2, [pc, #220]	; (8004b30 <HAL_UART_MspInit+0x160>)
 8004a52:	0019      	movs	r1, r3
 8004a54:	0010      	movs	r0, r2
 8004a56:	f000 fd2f 	bl	80054b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004a5a:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a5c:	4a36      	ldr	r2, [pc, #216]	; (8004b38 <HAL_UART_MspInit+0x168>)
 8004a5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a60:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a6c:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a72:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a78:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a80:	2220      	movs	r2, #32
 8004a82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a84:	4b2b      	ldr	r3, [pc, #172]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 fafd 	bl	800508c <HAL_DMA_Init>
 8004a92:	1e03      	subs	r3, r0, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004a96:	f7ff fe4b 	bl	8004730 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_UART_MspInit+0x16c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <HAL_UART_MspInit+0x16c>)
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	04c9      	lsls	r1, r1, #19
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004aac:	671a      	str	r2, [r3, #112]	; 0x70
 8004aae:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <HAL_UART_MspInit+0x164>)
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004ab4:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ab6:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <HAL_UART_MspInit+0x174>)
 8004ab8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aba:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004abc:	2210      	movs	r2, #16
 8004abe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ac0:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ac8:	2280      	movs	r2, #128	; 0x80
 8004aca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 fad0 	bl	800508c <HAL_DMA_Init>
 8004aec:	1e03      	subs	r3, r0, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004af0:	f7ff fe1e 	bl	8004730 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8004af4:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <HAL_UART_MspInit+0x16c>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_UART_MspInit+0x16c>)
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	04c9      	lsls	r1, r1, #19
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004b06:	66da      	str	r2, [r3, #108]	; 0x6c
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <HAL_UART_MspInit+0x170>)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	201d      	movs	r0, #29
 8004b14:	f000 fa88 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8004b18:	201d      	movs	r0, #29
 8004b1a:	f000 fa9a 	bl	8005052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b00b      	add	sp, #44	; 0x2c
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	40004800 	.word	0x40004800
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	48000800 	.word	0x48000800
 8004b34:	200003e4 	.word	0x200003e4
 8004b38:	40020030 	.word	0x40020030
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	200004f4 	.word	0x200004f4
 8004b44:	4002001c 	.word	0x4002001c

08004b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <NMI_Handler+0x4>

08004b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <HardFault_Handler+0x4>

08004b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b6c:	f000 f970 	bl	8004e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 fbaf 	bl	80052e2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 fbab 	bl	80052e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	200004f4 	.word	0x200004f4
 8004b98:	200003e4 	.word	0x200003e4

08004b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <TIM3_IRQHandler+0x14>)
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f001 ff14 	bl	80069d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	20000538 	.word	0x20000538

08004bb4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <TIM15_IRQHandler+0x14>)
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f001 ff08 	bl	80069d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	200004ac 	.word	0x200004ac

08004bcc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <USART3_4_IRQHandler+0x14>)
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f003 f9b4 	bl	8007f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	20000428 	.word	0x20000428

08004be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
	return 1;
 8004be8:	2301      	movs	r3, #1
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_kill>:

int _kill(int pid, int sig)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004bfa:	f004 fa53 	bl	80090a4 <__errno>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	2216      	movs	r2, #22
 8004c02:	601a      	str	r2, [r3, #0]
	return -1;
 8004c04:	2301      	movs	r3, #1
 8004c06:	425b      	negs	r3, r3
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_exit>:

void _exit (int status)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c18:	2301      	movs	r3, #1
 8004c1a:	425a      	negs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0011      	movs	r1, r2
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7ff ffe5 	bl	8004bf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c26:	e7fe      	b.n	8004c26 <_exit+0x16>

08004c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e00a      	b.n	8004c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c3a:	e000      	b.n	8004c3e <_read+0x16>
 8004c3c:	bf00      	nop
 8004c3e:	0001      	movs	r1, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	60ba      	str	r2, [r7, #8]
 8004c46:	b2ca      	uxtb	r2, r1
 8004c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	dbf0      	blt.n	8004c3a <_read+0x12>
	}

return len;
 8004c58:	687b      	ldr	r3, [r7, #4]
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b006      	add	sp, #24
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e009      	b.n	8004c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	60ba      	str	r2, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	e000      	b.n	8004c82 <_write+0x20>
 8004c80:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	3301      	adds	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	dbf1      	blt.n	8004c74 <_write+0x12>
	}
	return len;
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b006      	add	sp, #24
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <_close>:

int _close(int file)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	425b      	negs	r3, r3
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b002      	add	sp, #8
 8004cac:	bd80      	pop	{r7, pc}

08004cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	0192      	lsls	r2, r2, #6
 8004cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b002      	add	sp, #8
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_isatty>:

int _isatty(int file)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8004cd2:	2301      	movs	r3, #1
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <_sbrk+0x5c>)
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <_sbrk+0x60>)
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <_sbrk+0x64>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <_sbrk+0x64>)
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <_sbrk+0x68>)
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <_sbrk+0x64>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	18d3      	adds	r3, r2, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d207      	bcs.n	8004d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d24:	f004 f9be 	bl	80090a4 <__errno>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	220c      	movs	r2, #12
 8004d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	425b      	negs	r3, r3
 8004d32:	e009      	b.n	8004d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <_sbrk+0x64>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <_sbrk+0x64>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	18d2      	adds	r2, r2, r3
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <_sbrk+0x64>)
 8004d44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b006      	add	sp, #24
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20004000 	.word	0x20004000
 8004d54:	00000400 	.word	0x00000400
 8004d58:	200003d0 	.word	0x200003d0
 8004d5c:	20000628 	.word	0x20000628

08004d60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d6c:	480d      	ldr	r0, [pc, #52]	; (8004da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d70:	480d      	ldr	r0, [pc, #52]	; (8004da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d72:	490e      	ldr	r1, [pc, #56]	; (8004dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d74:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <LoopForever+0xe>)
  movs r3, #0
 8004d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d78:	e002      	b.n	8004d80 <LoopCopyDataInit>

08004d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d7e:	3304      	adds	r3, #4

08004d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d84:	d3f9      	bcc.n	8004d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d86:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d88:	4c0b      	ldr	r4, [pc, #44]	; (8004db8 <LoopForever+0x16>)
  movs r3, #0
 8004d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d8c:	e001      	b.n	8004d92 <LoopFillZerobss>

08004d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d90:	3204      	adds	r2, #4

08004d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d94:	d3fb      	bcc.n	8004d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004d96:	f7ff ffe3 	bl	8004d60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004d9a:	f004 f989 	bl	80090b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d9e:	f7fe f823 	bl	8002de8 <main>

08004da2 <LoopForever>:

LoopForever:
    b LoopForever
 8004da2:	e7fe      	b.n	8004da2 <LoopForever>
  ldr   r0, =_estack
 8004da4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004db0:	0800ea84 	.word	0x0800ea84
  ldr r2, =_sbss
 8004db4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004db8:	20000624 	.word	0x20000624

08004dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004dbc:	e7fe      	b.n	8004dbc <ADC1_IRQHandler>
	...

08004dc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_Init+0x24>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_Init+0x24>)
 8004dca:	2110      	movs	r1, #16
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004dd0:	2003      	movs	r0, #3
 8004dd2:	f000 f809 	bl	8004de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dd6:	f7ff fcb1 	bl	800473c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	40022000 	.word	0x40022000

08004de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004df0:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <HAL_InitTick+0x5c>)
 8004df2:	681c      	ldr	r4, [r3, #0]
 8004df4:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <HAL_InitTick+0x60>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	0019      	movs	r1, r3
 8004dfa:	23fa      	movs	r3, #250	; 0xfa
 8004dfc:	0098      	lsls	r0, r3, #2
 8004dfe:	f7fb f9a9 	bl	8000154 <__udivsi3>
 8004e02:	0003      	movs	r3, r0
 8004e04:	0019      	movs	r1, r3
 8004e06:	0020      	movs	r0, r4
 8004e08:	f7fb f9a4 	bl	8000154 <__udivsi3>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 f92f 	bl	8005072 <HAL_SYSTICK_Config>
 8004e14:	1e03      	subs	r3, r0, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e00f      	b.n	8004e3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d80b      	bhi.n	8004e3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	2301      	movs	r3, #1
 8004e26:	425b      	negs	r3, r3
 8004e28:	2200      	movs	r2, #0
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 f8fc 	bl	8005028 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_InitTick+0x64>)
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b003      	add	sp, #12
 8004e42:	bd90      	pop	{r4, r7, pc}
 8004e44:	20000000 	.word	0x20000000
 8004e48:	20000008 	.word	0x20000008
 8004e4c:	20000004 	.word	0x20000004

08004e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_IncTick+0x1c>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	001a      	movs	r2, r3
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_IncTick+0x20>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	18d2      	adds	r2, r2, r3
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_IncTick+0x20>)
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20000008 	.word	0x20000008
 8004e70:	20000610 	.word	0x20000610

08004e74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  return uwTick;
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <HAL_GetTick+0x10>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	20000610 	.word	0x20000610

08004e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	d005      	beq.n	8004eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <HAL_Delay+0x44>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	f7ff ffe0 	bl	8004e74 <HAL_GetTick>
 8004eb4:	0002      	movs	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d8f7      	bhi.n	8004eb0 <HAL_Delay+0x28>
  {
  }
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000008 	.word	0x20000008

08004ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004edc:	1dfb      	adds	r3, r7, #7
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee2:	d809      	bhi.n	8004ef8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee4:	1dfb      	adds	r3, r7, #7
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	001a      	movs	r2, r3
 8004eea:	231f      	movs	r3, #31
 8004eec:	401a      	ands	r2, r3
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <__NVIC_EnableIRQ+0x30>)
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4091      	lsls	r1, r2
 8004ef4:	000a      	movs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]
  }
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	e000e100 	.word	0xe000e100

08004f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	1dfb      	adds	r3, r7, #7
 8004f10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f12:	1dfb      	adds	r3, r7, #7
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b7f      	cmp	r3, #127	; 0x7f
 8004f18:	d828      	bhi.n	8004f6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f1a:	4a2f      	ldr	r2, [pc, #188]	; (8004fd8 <__NVIC_SetPriority+0xd4>)
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	33c0      	adds	r3, #192	; 0xc0
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	589b      	ldr	r3, [r3, r2]
 8004f2a:	1dfa      	adds	r2, r7, #7
 8004f2c:	7812      	ldrb	r2, [r2, #0]
 8004f2e:	0011      	movs	r1, r2
 8004f30:	2203      	movs	r2, #3
 8004f32:	400a      	ands	r2, r1
 8004f34:	00d2      	lsls	r2, r2, #3
 8004f36:	21ff      	movs	r1, #255	; 0xff
 8004f38:	4091      	lsls	r1, r2
 8004f3a:	000a      	movs	r2, r1
 8004f3c:	43d2      	mvns	r2, r2
 8004f3e:	401a      	ands	r2, r3
 8004f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	401a      	ands	r2, r3
 8004f4a:	1dfb      	adds	r3, r7, #7
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	2303      	movs	r3, #3
 8004f52:	4003      	ands	r3, r0
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f58:	481f      	ldr	r0, [pc, #124]	; (8004fd8 <__NVIC_SetPriority+0xd4>)
 8004f5a:	1dfb      	adds	r3, r7, #7
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	430a      	orrs	r2, r1
 8004f64:	33c0      	adds	r3, #192	; 0xc0
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f6a:	e031      	b.n	8004fd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <__NVIC_SetPriority+0xd8>)
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	0019      	movs	r1, r3
 8004f74:	230f      	movs	r3, #15
 8004f76:	400b      	ands	r3, r1
 8004f78:	3b08      	subs	r3, #8
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3306      	adds	r3, #6
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	18d3      	adds	r3, r2, r3
 8004f82:	3304      	adds	r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1dfa      	adds	r2, r7, #7
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	0011      	movs	r1, r2
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	400a      	ands	r2, r1
 8004f90:	00d2      	lsls	r2, r2, #3
 8004f92:	21ff      	movs	r1, #255	; 0xff
 8004f94:	4091      	lsls	r1, r2
 8004f96:	000a      	movs	r2, r1
 8004f98:	43d2      	mvns	r2, r2
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	22ff      	movs	r2, #255	; 0xff
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	0018      	movs	r0, r3
 8004fac:	2303      	movs	r3, #3
 8004fae:	4003      	ands	r3, r0
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fb4:	4809      	ldr	r0, [pc, #36]	; (8004fdc <__NVIC_SetPriority+0xd8>)
 8004fb6:	1dfb      	adds	r3, r7, #7
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	001c      	movs	r4, r3
 8004fbc:	230f      	movs	r3, #15
 8004fbe:	4023      	ands	r3, r4
 8004fc0:	3b08      	subs	r3, #8
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	3306      	adds	r3, #6
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	18c3      	adds	r3, r0, r3
 8004fcc:	3304      	adds	r3, #4
 8004fce:	601a      	str	r2, [r3, #0]
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bd90      	pop	{r4, r7, pc}
 8004fd8:	e000e100 	.word	0xe000e100
 8004fdc:	e000ed00 	.word	0xe000ed00

08004fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	1e5a      	subs	r2, r3, #1
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	045b      	lsls	r3, r3, #17
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d301      	bcc.n	8004ff8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e010      	b.n	800501a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <SysTick_Config+0x44>)
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	3a01      	subs	r2, #1
 8004ffe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005000:	2301      	movs	r3, #1
 8005002:	425b      	negs	r3, r3
 8005004:	2103      	movs	r1, #3
 8005006:	0018      	movs	r0, r3
 8005008:	f7ff ff7c 	bl	8004f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <SysTick_Config+0x44>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <SysTick_Config+0x44>)
 8005014:	2207      	movs	r2, #7
 8005016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005018:	2300      	movs	r3, #0
}
 800501a:	0018      	movs	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	b002      	add	sp, #8
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	e000e010 	.word	0xe000e010

08005028 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	210f      	movs	r1, #15
 8005034:	187b      	adds	r3, r7, r1
 8005036:	1c02      	adds	r2, r0, #0
 8005038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	187b      	adds	r3, r7, r1
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b25b      	sxtb	r3, r3
 8005042:	0011      	movs	r1, r2
 8005044:	0018      	movs	r0, r3
 8005046:	f7ff ff5d 	bl	8004f04 <__NVIC_SetPriority>
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b004      	add	sp, #16
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	0002      	movs	r2, r0
 800505a:	1dfb      	adds	r3, r7, #7
 800505c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b25b      	sxtb	r3, r3
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff ff33 	bl	8004ed0 <__NVIC_EnableIRQ>
}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	46bd      	mov	sp, r7
 800506e:	b002      	add	sp, #8
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff ffaf 	bl	8004fe0 <SysTick_Config>
 8005082:	0003      	movs	r3, r0
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e036      	b.n	8005110 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2221      	movs	r2, #33	; 0x21
 80050a6:	2102      	movs	r1, #2
 80050a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_DMA_Init+0x8c>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80050c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 f9c4 	bl	8005480 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2221      	movs	r2, #33	; 0x21
 8005102:	2101      	movs	r1, #1
 8005104:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}  
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	b004      	add	sp, #16
 8005116:	bd80      	pop	{r7, pc}
 8005118:	ffffc00f 	.word	0xffffc00f

0800511c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800512a:	2317      	movs	r3, #23
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	5c9b      	ldrb	r3, [r3, r2]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_DMA_Start_IT+0x24>
 800513c:	2302      	movs	r3, #2
 800513e:	e04f      	b.n	80051e0 <HAL_DMA_Start_IT+0xc4>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	2101      	movs	r1, #1
 8005146:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2221      	movs	r2, #33	; 0x21
 800514c:	5c9b      	ldrb	r3, [r3, r2]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d13a      	bne.n	80051ca <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2221      	movs	r2, #33	; 0x21
 8005158:	2102      	movs	r1, #2
 800515a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2101      	movs	r1, #1
 800516e:	438a      	bics	r2, r1
 8005170:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f954 	bl	8005426 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	210e      	movs	r1, #14
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e00f      	b.n	80051b8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	210a      	movs	r1, #10
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2104      	movs	r1, #4
 80051b4:	438a      	bics	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2101      	movs	r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e007      	b.n	80051da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80051d2:	2317      	movs	r3, #23
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2202      	movs	r2, #2
 80051d8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80051da:	2317      	movs	r3, #23
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	781b      	ldrb	r3, [r3, #0]
} 
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2221      	movs	r2, #33	; 0x21
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d008      	beq.n	800520e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e020      	b.n	8005250 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	210e      	movs	r1, #14
 800521a:	438a      	bics	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2101      	movs	r1, #1
 800522a:	438a      	bics	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	2101      	movs	r1, #1
 8005238:	4091      	lsls	r1, r2
 800523a:	000a      	movs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2221      	movs	r2, #33	; 0x21
 8005242:	2101      	movs	r1, #1
 8005244:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	2100      	movs	r1, #0
 800524c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	0018      	movs	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	210f      	movs	r1, #15
 8005262:	187b      	adds	r3, r7, r1
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2221      	movs	r2, #33	; 0x21
 800526c:	5c9b      	ldrb	r3, [r3, r2]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d006      	beq.n	8005282 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2204      	movs	r2, #4
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800527a:	187b      	adds	r3, r7, r1
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e028      	b.n	80052d4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	210e      	movs	r1, #14
 800528e:	438a      	bics	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2101      	movs	r1, #1
 800529e:	438a      	bics	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	2101      	movs	r1, #1
 80052ac:	4091      	lsls	r1, r2
 80052ae:	000a      	movs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2221      	movs	r2, #33	; 0x21
 80052b6:	2101      	movs	r1, #1
 80052b8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	2100      	movs	r1, #0
 80052c0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	0010      	movs	r0, r2
 80052d2:	4798      	blx	r3
    } 
  }
  return status;
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2204      	movs	r2, #4
 8005300:	409a      	lsls	r2, r3
 8005302:	0013      	movs	r3, r2
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4013      	ands	r3, r2
 8005308:	d024      	beq.n	8005354 <HAL_DMA_IRQHandler+0x72>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2204      	movs	r2, #4
 800530e:	4013      	ands	r3, r2
 8005310:	d020      	beq.n	8005354 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2220      	movs	r2, #32
 800531a:	4013      	ands	r3, r2
 800531c:	d107      	bne.n	800532e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2104      	movs	r1, #4
 800532a:	438a      	bics	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	2104      	movs	r1, #4
 8005338:	4091      	lsls	r1, r2
 800533a:	000a      	movs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d100      	bne.n	8005348 <HAL_DMA_IRQHandler+0x66>
 8005346:	e06a      	b.n	800541e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	0010      	movs	r0, r2
 8005350:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005352:	e064      	b.n	800541e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2202      	movs	r2, #2
 800535a:	409a      	lsls	r2, r3
 800535c:	0013      	movs	r3, r2
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4013      	ands	r3, r2
 8005362:	d02b      	beq.n	80053bc <HAL_DMA_IRQHandler+0xda>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2202      	movs	r2, #2
 8005368:	4013      	ands	r3, r2
 800536a:	d027      	beq.n	80053bc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2220      	movs	r2, #32
 8005374:	4013      	ands	r3, r2
 8005376:	d10b      	bne.n	8005390 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	210a      	movs	r1, #10
 8005384:	438a      	bics	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2221      	movs	r2, #33	; 0x21
 800538c:	2101      	movs	r1, #1
 800538e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	2102      	movs	r1, #2
 800539a:	4091      	lsls	r1, r2
 800539c:	000a      	movs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	2100      	movs	r1, #0
 80053a6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d036      	beq.n	800541e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	0010      	movs	r0, r2
 80053b8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80053ba:	e030      	b.n	800541e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	2208      	movs	r2, #8
 80053c2:	409a      	lsls	r2, r3
 80053c4:	0013      	movs	r3, r2
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4013      	ands	r3, r2
 80053ca:	d028      	beq.n	800541e <HAL_DMA_IRQHandler+0x13c>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2208      	movs	r2, #8
 80053d0:	4013      	ands	r3, r2
 80053d2:	d024      	beq.n	800541e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	210e      	movs	r1, #14
 80053e0:	438a      	bics	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	2101      	movs	r1, #1
 80053ee:	4091      	lsls	r1, r2
 80053f0:	000a      	movs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2221      	movs	r2, #33	; 0x21
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	2100      	movs	r1, #0
 8005408:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	0010      	movs	r0, r2
 800541a:	4798      	blx	r3
    }
   }
}  
 800541c:	e7ff      	b.n	800541e <HAL_DMA_IRQHandler+0x13c>
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b004      	add	sp, #16
 8005424:	bd80      	pop	{r7, pc}

08005426 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	2101      	movs	r1, #1
 800543e:	4091      	lsls	r1, r2
 8005440:	000a      	movs	r2, r1
 8005442:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b10      	cmp	r3, #16
 8005452:	d108      	bne.n	8005466 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005464:	e007      	b.n	8005476 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	60da      	str	r2, [r3, #12]
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	46bd      	mov	sp, r7
 800547a:	b004      	add	sp, #16
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <DMA_CalcBaseAndBitshift+0x30>)
 800548e:	4694      	mov	ip, r2
 8005490:	4463      	add	r3, ip
 8005492:	2114      	movs	r1, #20
 8005494:	0018      	movs	r0, r3
 8005496:	f7fa fe5d 	bl	8000154 <__udivsi3>
 800549a:	0003      	movs	r3, r0
 800549c:	009a      	lsls	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <DMA_CalcBaseAndBitshift+0x34>)
 80054a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	bffdfff8 	.word	0xbffdfff8
 80054b4:	40020000 	.word	0x40020000

080054b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054c6:	e14f      	b.n	8005768 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2101      	movs	r1, #1
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4091      	lsls	r1, r2
 80054d2:	000a      	movs	r2, r1
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d100      	bne.n	80054e0 <HAL_GPIO_Init+0x28>
 80054de:	e140      	b.n	8005762 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2203      	movs	r2, #3
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d005      	beq.n	80054f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2203      	movs	r2, #3
 80054f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d130      	bne.n	800555a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	2203      	movs	r2, #3
 8005504:	409a      	lsls	r2, r3
 8005506:	0013      	movs	r3, r2
 8005508:	43da      	mvns	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4013      	ands	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	409a      	lsls	r2, r3
 800551a:	0013      	movs	r3, r2
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800552e:	2201      	movs	r2, #1
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	409a      	lsls	r2, r3
 8005534:	0013      	movs	r3, r2
 8005536:	43da      	mvns	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	091b      	lsrs	r3, r3, #4
 8005544:	2201      	movs	r2, #1
 8005546:	401a      	ands	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	409a      	lsls	r2, r3
 800554c:	0013      	movs	r3, r2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2203      	movs	r2, #3
 8005560:	4013      	ands	r3, r2
 8005562:	2b03      	cmp	r3, #3
 8005564:	d017      	beq.n	8005596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	2203      	movs	r2, #3
 8005572:	409a      	lsls	r2, r3
 8005574:	0013      	movs	r3, r2
 8005576:	43da      	mvns	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	409a      	lsls	r2, r3
 8005588:	0013      	movs	r3, r2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2203      	movs	r2, #3
 800559c:	4013      	ands	r3, r2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d123      	bne.n	80055ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	08da      	lsrs	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3208      	adds	r2, #8
 80055aa:	0092      	lsls	r2, r2, #2
 80055ac:	58d3      	ldr	r3, [r2, r3]
 80055ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2207      	movs	r2, #7
 80055b4:	4013      	ands	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	220f      	movs	r2, #15
 80055ba:	409a      	lsls	r2, r3
 80055bc:	0013      	movs	r3, r2
 80055be:	43da      	mvns	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2107      	movs	r1, #7
 80055ce:	400b      	ands	r3, r1
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	409a      	lsls	r2, r3
 80055d4:	0013      	movs	r3, r2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	08da      	lsrs	r2, r3, #3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3208      	adds	r2, #8
 80055e4:	0092      	lsls	r2, r2, #2
 80055e6:	6939      	ldr	r1, [r7, #16]
 80055e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	2203      	movs	r2, #3
 80055f6:	409a      	lsls	r2, r3
 80055f8:	0013      	movs	r3, r2
 80055fa:	43da      	mvns	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	401a      	ands	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	409a      	lsls	r2, r3
 8005610:	0013      	movs	r3, r2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	23c0      	movs	r3, #192	; 0xc0
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	4013      	ands	r3, r2
 8005628:	d100      	bne.n	800562c <HAL_GPIO_Init+0x174>
 800562a:	e09a      	b.n	8005762 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800562c:	4b54      	ldr	r3, [pc, #336]	; (8005780 <HAL_GPIO_Init+0x2c8>)
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	4b53      	ldr	r3, [pc, #332]	; (8005780 <HAL_GPIO_Init+0x2c8>)
 8005632:	2101      	movs	r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	619a      	str	r2, [r3, #24]
 8005638:	4b51      	ldr	r3, [pc, #324]	; (8005780 <HAL_GPIO_Init+0x2c8>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2201      	movs	r2, #1
 800563e:	4013      	ands	r3, r2
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005644:	4a4f      	ldr	r2, [pc, #316]	; (8005784 <HAL_GPIO_Init+0x2cc>)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	3302      	adds	r3, #2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	589b      	ldr	r3, [r3, r2]
 8005650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2203      	movs	r2, #3
 8005656:	4013      	ands	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	220f      	movs	r2, #15
 800565c:	409a      	lsls	r2, r3
 800565e:	0013      	movs	r3, r2
 8005660:	43da      	mvns	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	2390      	movs	r3, #144	; 0x90
 800566c:	05db      	lsls	r3, r3, #23
 800566e:	429a      	cmp	r2, r3
 8005670:	d013      	beq.n	800569a <HAL_GPIO_Init+0x1e2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a44      	ldr	r2, [pc, #272]	; (8005788 <HAL_GPIO_Init+0x2d0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00d      	beq.n	8005696 <HAL_GPIO_Init+0x1de>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a43      	ldr	r2, [pc, #268]	; (800578c <HAL_GPIO_Init+0x2d4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <HAL_GPIO_Init+0x1da>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a42      	ldr	r2, [pc, #264]	; (8005790 <HAL_GPIO_Init+0x2d8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_GPIO_Init+0x1d6>
 800568a:	2303      	movs	r3, #3
 800568c:	e006      	b.n	800569c <HAL_GPIO_Init+0x1e4>
 800568e:	2305      	movs	r3, #5
 8005690:	e004      	b.n	800569c <HAL_GPIO_Init+0x1e4>
 8005692:	2302      	movs	r3, #2
 8005694:	e002      	b.n	800569c <HAL_GPIO_Init+0x1e4>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <HAL_GPIO_Init+0x1e4>
 800569a:	2300      	movs	r3, #0
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	2103      	movs	r1, #3
 80056a0:	400a      	ands	r2, r1
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	4093      	lsls	r3, r2
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056ac:	4935      	ldr	r1, [pc, #212]	; (8005784 <HAL_GPIO_Init+0x2cc>)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	3302      	adds	r3, #2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ba:	4b36      	ldr	r3, [pc, #216]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43da      	mvns	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	025b      	lsls	r3, r3, #9
 80056d2:	4013      	ands	r3, r2
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80056de:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	4013      	ands	r3, r2
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800570e:	4b21      	ldr	r3, [pc, #132]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	43da      	mvns	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	035b      	lsls	r3, r3, #13
 8005726:	4013      	ands	r3, r2
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005732:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005738:	4b16      	ldr	r3, [pc, #88]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	43da      	mvns	r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	039b      	lsls	r3, r3, #14
 8005750:	4013      	ands	r3, r2
 8005752:	d003      	beq.n	800575c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <HAL_GPIO_Init+0x2dc>)
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	3301      	adds	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	40da      	lsrs	r2, r3
 8005770:	1e13      	subs	r3, r2, #0
 8005772:	d000      	beq.n	8005776 <HAL_GPIO_Init+0x2be>
 8005774:	e6a8      	b.n	80054c8 <HAL_GPIO_Init+0x10>
  } 
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	b006      	add	sp, #24
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40021000 	.word	0x40021000
 8005784:	40010000 	.word	0x40010000
 8005788:	48000400 	.word	0x48000400
 800578c:	48000800 	.word	0x48000800
 8005790:	48000c00 	.word	0x48000c00
 8005794:	40010400 	.word	0x40010400

08005798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	000a      	movs	r2, r1
 80057a2:	1cbb      	adds	r3, r7, #2
 80057a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	1cba      	adds	r2, r7, #2
 80057ac:	8812      	ldrh	r2, [r2, #0]
 80057ae:	4013      	ands	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80057b2:	230f      	movs	r3, #15
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e003      	b.n	80057c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057bc:	230f      	movs	r3, #15
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80057c4:	230f      	movs	r3, #15
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	781b      	ldrb	r3, [r3, #0]
  }
 80057ca:	0018      	movs	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b004      	add	sp, #16
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	0008      	movs	r0, r1
 80057dc:	0011      	movs	r1, r2
 80057de:	1cbb      	adds	r3, r7, #2
 80057e0:	1c02      	adds	r2, r0, #0
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	1c7b      	adds	r3, r7, #1
 80057e6:	1c0a      	adds	r2, r1, #0
 80057e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057ea:	1c7b      	adds	r3, r7, #1
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057f2:	1cbb      	adds	r3, r7, #2
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057fa:	e003      	b.n	8005804 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057fc:	1cbb      	adds	r3, r7, #2
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b002      	add	sp, #8
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e305      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2201      	movs	r2, #1
 8005824:	4013      	ands	r3, r2
 8005826:	d100      	bne.n	800582a <HAL_RCC_OscConfig+0x1e>
 8005828:	e08d      	b.n	8005946 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800582a:	4bc5      	ldr	r3, [pc, #788]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	220c      	movs	r2, #12
 8005830:	4013      	ands	r3, r2
 8005832:	2b04      	cmp	r3, #4
 8005834:	d00e      	beq.n	8005854 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005836:	4bc2      	ldr	r3, [pc, #776]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	220c      	movs	r2, #12
 800583c:	4013      	ands	r3, r2
 800583e:	2b08      	cmp	r3, #8
 8005840:	d116      	bne.n	8005870 <HAL_RCC_OscConfig+0x64>
 8005842:	4bbf      	ldr	r3, [pc, #764]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	23c0      	movs	r3, #192	; 0xc0
 8005848:	025b      	lsls	r3, r3, #9
 800584a:	401a      	ands	r2, r3
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	025b      	lsls	r3, r3, #9
 8005850:	429a      	cmp	r2, r3
 8005852:	d10d      	bne.n	8005870 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005854:	4bba      	ldr	r3, [pc, #744]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	4013      	ands	r3, r2
 800585e:	d100      	bne.n	8005862 <HAL_RCC_OscConfig+0x56>
 8005860:	e070      	b.n	8005944 <HAL_RCC_OscConfig+0x138>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d000      	beq.n	800586c <HAL_RCC_OscConfig+0x60>
 800586a:	e06b      	b.n	8005944 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e2dc      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_RCC_OscConfig+0x7c>
 8005878:	4bb1      	ldr	r3, [pc, #708]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4bb0      	ldr	r3, [pc, #704]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	0249      	lsls	r1, r1, #9
 8005882:	430a      	orrs	r2, r1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e02f      	b.n	80058e8 <HAL_RCC_OscConfig+0xdc>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10c      	bne.n	80058aa <HAL_RCC_OscConfig+0x9e>
 8005890:	4bab      	ldr	r3, [pc, #684]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4baa      	ldr	r3, [pc, #680]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005896:	49ab      	ldr	r1, [pc, #684]	; (8005b44 <HAL_RCC_OscConfig+0x338>)
 8005898:	400a      	ands	r2, r1
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	4ba8      	ldr	r3, [pc, #672]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4ba7      	ldr	r3, [pc, #668]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058a2:	49a9      	ldr	r1, [pc, #676]	; (8005b48 <HAL_RCC_OscConfig+0x33c>)
 80058a4:	400a      	ands	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e01e      	b.n	80058e8 <HAL_RCC_OscConfig+0xdc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	d10e      	bne.n	80058d0 <HAL_RCC_OscConfig+0xc4>
 80058b2:	4ba3      	ldr	r3, [pc, #652]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4ba2      	ldr	r3, [pc, #648]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058b8:	2180      	movs	r1, #128	; 0x80
 80058ba:	02c9      	lsls	r1, r1, #11
 80058bc:	430a      	orrs	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	4b9f      	ldr	r3, [pc, #636]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b9e      	ldr	r3, [pc, #632]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	0249      	lsls	r1, r1, #9
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0xdc>
 80058d0:	4b9b      	ldr	r3, [pc, #620]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b9a      	ldr	r3, [pc, #616]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058d6:	499b      	ldr	r1, [pc, #620]	; (8005b44 <HAL_RCC_OscConfig+0x338>)
 80058d8:	400a      	ands	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	4b98      	ldr	r3, [pc, #608]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b97      	ldr	r3, [pc, #604]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80058e2:	4999      	ldr	r1, [pc, #612]	; (8005b48 <HAL_RCC_OscConfig+0x33c>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d014      	beq.n	800591a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7ff fac0 	bl	8004e74 <HAL_GetTick>
 80058f4:	0003      	movs	r3, r0
 80058f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058fa:	f7ff fabb 	bl	8004e74 <HAL_GetTick>
 80058fe:	0002      	movs	r2, r0
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b64      	cmp	r3, #100	; 0x64
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e28e      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590c:	4b8c      	ldr	r3, [pc, #560]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	4013      	ands	r3, r2
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0xee>
 8005918:	e015      	b.n	8005946 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7ff faab 	bl	8004e74 <HAL_GetTick>
 800591e:	0003      	movs	r3, r0
 8005920:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005924:	f7ff faa6 	bl	8004e74 <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e279      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005936:	4b82      	ldr	r3, [pc, #520]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	4013      	ands	r3, r2
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x118>
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2202      	movs	r2, #2
 800594c:	4013      	ands	r3, r2
 800594e:	d100      	bne.n	8005952 <HAL_RCC_OscConfig+0x146>
 8005950:	e06c      	b.n	8005a2c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005952:	4b7b      	ldr	r3, [pc, #492]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	220c      	movs	r2, #12
 8005958:	4013      	ands	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800595c:	4b78      	ldr	r3, [pc, #480]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	220c      	movs	r2, #12
 8005962:	4013      	ands	r3, r2
 8005964:	2b08      	cmp	r3, #8
 8005966:	d11f      	bne.n	80059a8 <HAL_RCC_OscConfig+0x19c>
 8005968:	4b75      	ldr	r3, [pc, #468]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	23c0      	movs	r3, #192	; 0xc0
 800596e:	025b      	lsls	r3, r3, #9
 8005970:	401a      	ands	r2, r3
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	429a      	cmp	r2, r3
 8005978:	d116      	bne.n	80059a8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800597a:	4b71      	ldr	r3, [pc, #452]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2202      	movs	r2, #2
 8005980:	4013      	ands	r3, r2
 8005982:	d005      	beq.n	8005990 <HAL_RCC_OscConfig+0x184>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e24c      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005990:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	22f8      	movs	r2, #248	; 0xf8
 8005996:	4393      	bics	r3, r2
 8005998:	0019      	movs	r1, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	00da      	lsls	r2, r3, #3
 80059a0:	4b67      	ldr	r3, [pc, #412]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059a2:	430a      	orrs	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a6:	e041      	b.n	8005a2c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d024      	beq.n	80059fa <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b0:	4b63      	ldr	r3, [pc, #396]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b62      	ldr	r3, [pc, #392]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059b6:	2101      	movs	r1, #1
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059bc:	f7ff fa5a 	bl	8004e74 <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c6:	f7ff fa55 	bl	8004e74 <HAL_GetTick>
 80059ca:	0002      	movs	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e228      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d8:	4b59      	ldr	r3, [pc, #356]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2202      	movs	r2, #2
 80059de:	4013      	ands	r3, r2
 80059e0:	d0f1      	beq.n	80059c6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e2:	4b57      	ldr	r3, [pc, #348]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	22f8      	movs	r2, #248	; 0xf8
 80059e8:	4393      	bics	r3, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	00da      	lsls	r2, r3, #3
 80059f2:	4b53      	ldr	r3, [pc, #332]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e018      	b.n	8005a2c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fa:	4b51      	ldr	r3, [pc, #324]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b50      	ldr	r3, [pc, #320]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a00:	2101      	movs	r1, #1
 8005a02:	438a      	bics	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a06:	f7ff fa35 	bl	8004e74 <HAL_GetTick>
 8005a0a:	0003      	movs	r3, r0
 8005a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a10:	f7ff fa30 	bl	8004e74 <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e203      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a22:	4b47      	ldr	r3, [pc, #284]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2202      	movs	r2, #2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d1f1      	bne.n	8005a10 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	4013      	ands	r3, r2
 8005a34:	d036      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d019      	beq.n	8005a72 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3e:	4b40      	ldr	r3, [pc, #256]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a42:	4b3f      	ldr	r3, [pc, #252]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a44:	2101      	movs	r1, #1
 8005a46:	430a      	orrs	r2, r1
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4a:	f7ff fa13 	bl	8004e74 <HAL_GetTick>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a54:	f7ff fa0e 	bl	8004e74 <HAL_GetTick>
 8005a58:	0002      	movs	r2, r0
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e1e1      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d0f1      	beq.n	8005a54 <HAL_RCC_OscConfig+0x248>
 8005a70:	e018      	b.n	8005aa4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a72:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a76:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a78:	2101      	movs	r1, #1
 8005a7a:	438a      	bics	r2, r1
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7ff f9f9 	bl	8004e74 <HAL_GetTick>
 8005a82:	0003      	movs	r3, r0
 8005a84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a88:	f7ff f9f4 	bl	8004e74 <HAL_GetTick>
 8005a8c:	0002      	movs	r2, r0
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e1c7      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d1f1      	bne.n	8005a88 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d100      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x2a4>
 8005aae:	e0b5      	b.n	8005c1c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab0:	201f      	movs	r0, #31
 8005ab2:	183b      	adds	r3, r7, r0
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab8:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	055b      	lsls	r3, r3, #21
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d110      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	0549      	lsls	r1, r1, #21
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	61da      	str	r2, [r3, #28]
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	055b      	lsls	r3, r3, #21
 8005ada:	4013      	ands	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ae0:	183b      	adds	r3, r7, r0
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae6:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_RCC_OscConfig+0x340>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4013      	ands	r3, r2
 8005af0:	d11a      	bne.n	8005b28 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005af2:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <HAL_RCC_OscConfig+0x340>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_RCC_OscConfig+0x340>)
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	0049      	lsls	r1, r1, #1
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b00:	f7ff f9b8 	bl	8004e74 <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0a:	f7ff f9b3 	bl	8004e74 <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b64      	cmp	r3, #100	; 0x64
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e186      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_OscConfig+0x340>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4013      	ands	r3, r2
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10f      	bne.n	8005b50 <HAL_RCC_OscConfig+0x344>
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <HAL_RCC_OscConfig+0x334>)
 8005b36:	2101      	movs	r1, #1
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	621a      	str	r2, [r3, #32]
 8005b3c:	e036      	b.n	8005bac <HAL_RCC_OscConfig+0x3a0>
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	40021000 	.word	0x40021000
 8005b44:	fffeffff 	.word	0xfffeffff
 8005b48:	fffbffff 	.word	0xfffbffff
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10c      	bne.n	8005b72 <HAL_RCC_OscConfig+0x366>
 8005b58:	4bb6      	ldr	r3, [pc, #728]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	4bb5      	ldr	r3, [pc, #724]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b5e:	2101      	movs	r1, #1
 8005b60:	438a      	bics	r2, r1
 8005b62:	621a      	str	r2, [r3, #32]
 8005b64:	4bb3      	ldr	r3, [pc, #716]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	4bb2      	ldr	r3, [pc, #712]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b6a:	2104      	movs	r1, #4
 8005b6c:	438a      	bics	r2, r1
 8005b6e:	621a      	str	r2, [r3, #32]
 8005b70:	e01c      	b.n	8005bac <HAL_RCC_OscConfig+0x3a0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x388>
 8005b7a:	4bae      	ldr	r3, [pc, #696]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b7c:	6a1a      	ldr	r2, [r3, #32]
 8005b7e:	4bad      	ldr	r3, [pc, #692]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b80:	2104      	movs	r1, #4
 8005b82:	430a      	orrs	r2, r1
 8005b84:	621a      	str	r2, [r3, #32]
 8005b86:	4bab      	ldr	r3, [pc, #684]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b88:	6a1a      	ldr	r2, [r3, #32]
 8005b8a:	4baa      	ldr	r3, [pc, #680]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	621a      	str	r2, [r3, #32]
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_OscConfig+0x3a0>
 8005b94:	4ba7      	ldr	r3, [pc, #668]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b96:	6a1a      	ldr	r2, [r3, #32]
 8005b98:	4ba6      	ldr	r3, [pc, #664]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	621a      	str	r2, [r3, #32]
 8005ba0:	4ba4      	ldr	r3, [pc, #656]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	4ba3      	ldr	r3, [pc, #652]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005ba6:	2104      	movs	r1, #4
 8005ba8:	438a      	bics	r2, r1
 8005baa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d014      	beq.n	8005bde <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb4:	f7ff f95e 	bl	8004e74 <HAL_GetTick>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbc:	e009      	b.n	8005bd2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7ff f959 	bl	8004e74 <HAL_GetTick>
 8005bc2:	0002      	movs	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	4a9b      	ldr	r2, [pc, #620]	; (8005e38 <HAL_RCC_OscConfig+0x62c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e12b      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd2:	4b98      	ldr	r3, [pc, #608]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x3b2>
 8005bdc:	e013      	b.n	8005c06 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bde:	f7ff f949 	bl	8004e74 <HAL_GetTick>
 8005be2:	0003      	movs	r3, r0
 8005be4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be6:	e009      	b.n	8005bfc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be8:	f7ff f944 	bl	8004e74 <HAL_GetTick>
 8005bec:	0002      	movs	r2, r0
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	4a91      	ldr	r2, [pc, #580]	; (8005e38 <HAL_RCC_OscConfig+0x62c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e116      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bfc:	4b8d      	ldr	r3, [pc, #564]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	2202      	movs	r2, #2
 8005c02:	4013      	ands	r3, r2
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c06:	231f      	movs	r3, #31
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c10:	4b88      	ldr	r3, [pc, #544]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	4b87      	ldr	r3, [pc, #540]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c16:	4989      	ldr	r1, [pc, #548]	; (8005e3c <HAL_RCC_OscConfig+0x630>)
 8005c18:	400a      	ands	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2210      	movs	r2, #16
 8005c22:	4013      	ands	r3, r2
 8005c24:	d063      	beq.n	8005cee <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12a      	bne.n	8005c84 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c2e:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c32:	4b80      	ldr	r3, [pc, #512]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c34:	2104      	movs	r1, #4
 8005c36:	430a      	orrs	r2, r1
 8005c38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005c3a:	4b7e      	ldr	r3, [pc, #504]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	4b7d      	ldr	r3, [pc, #500]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c40:	2101      	movs	r1, #1
 8005c42:	430a      	orrs	r2, r1
 8005c44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c46:	f7ff f915 	bl	8004e74 <HAL_GetTick>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005c50:	f7ff f910 	bl	8004e74 <HAL_GetTick>
 8005c54:	0002      	movs	r2, r0
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e0e3      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c62:	4b74      	ldr	r3, [pc, #464]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	2202      	movs	r2, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d0f1      	beq.n	8005c50 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c6c:	4b71      	ldr	r3, [pc, #452]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	22f8      	movs	r2, #248	; 0xf8
 8005c72:	4393      	bics	r3, r2
 8005c74:	0019      	movs	r1, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	00da      	lsls	r2, r3, #3
 8005c7c:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	635a      	str	r2, [r3, #52]	; 0x34
 8005c82:	e034      	b.n	8005cee <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	3305      	adds	r3, #5
 8005c8a:	d111      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005c8c:	4b69      	ldr	r3, [pc, #420]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c90:	4b68      	ldr	r3, [pc, #416]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c92:	2104      	movs	r1, #4
 8005c94:	438a      	bics	r2, r1
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c98:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	22f8      	movs	r2, #248	; 0xf8
 8005c9e:	4393      	bics	r3, r2
 8005ca0:	0019      	movs	r1, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	00da      	lsls	r2, r3, #3
 8005ca8:	4b62      	ldr	r3, [pc, #392]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005caa:	430a      	orrs	r2, r1
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34
 8005cae:	e01e      	b.n	8005cee <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005cb0:	4b60      	ldr	r3, [pc, #384]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb4:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005cb6:	2104      	movs	r1, #4
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005cbc:	4b5d      	ldr	r3, [pc, #372]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	4b5c      	ldr	r3, [pc, #368]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	438a      	bics	r2, r1
 8005cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc8:	f7ff f8d4 	bl	8004e74 <HAL_GetTick>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005cd2:	f7ff f8cf 	bl	8004e74 <HAL_GetTick>
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e0a2      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005ce4:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	2202      	movs	r2, #2
 8005cea:	4013      	ands	r3, r2
 8005cec:	d1f1      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d100      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x4ec>
 8005cf6:	e097      	b.n	8005e28 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cf8:	4b4e      	ldr	r3, [pc, #312]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	220c      	movs	r2, #12
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d100      	bne.n	8005d06 <HAL_RCC_OscConfig+0x4fa>
 8005d04:	e06b      	b.n	8005dde <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d14c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0e:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b48      	ldr	r3, [pc, #288]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d14:	494a      	ldr	r1, [pc, #296]	; (8005e40 <HAL_RCC_OscConfig+0x634>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1a:	f7ff f8ab 	bl	8004e74 <HAL_GetTick>
 8005d1e:	0003      	movs	r3, r0
 8005d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7ff f8a6 	bl	8004e74 <HAL_GetTick>
 8005d28:	0002      	movs	r2, r0
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e079      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d36:	4b3f      	ldr	r3, [pc, #252]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	049b      	lsls	r3, r3, #18
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d42:	4b3c      	ldr	r3, [pc, #240]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	220f      	movs	r2, #15
 8005d48:	4393      	bics	r3, r2
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d50:	4b38      	ldr	r3, [pc, #224]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d52:	430a      	orrs	r2, r1
 8005d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d56:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <HAL_RCC_OscConfig+0x638>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	0019      	movs	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	4b32      	ldr	r3, [pc, #200]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d70:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b2f      	ldr	r3, [pc, #188]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d76:	2180      	movs	r1, #128	; 0x80
 8005d78:	0449      	lsls	r1, r1, #17
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7e:	f7ff f879 	bl	8004e74 <HAL_GetTick>
 8005d82:	0003      	movs	r3, r0
 8005d84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d88:	f7ff f874 	bl	8004e74 <HAL_GetTick>
 8005d8c:	0002      	movs	r2, r0
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e047      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	049b      	lsls	r3, r3, #18
 8005da2:	4013      	ands	r3, r2
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x57c>
 8005da6:	e03f      	b.n	8005e28 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005dae:	4924      	ldr	r1, [pc, #144]	; (8005e40 <HAL_RCC_OscConfig+0x634>)
 8005db0:	400a      	ands	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7ff f85e 	bl	8004e74 <HAL_GetTick>
 8005db8:	0003      	movs	r3, r0
 8005dba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dbe:	f7ff f859 	bl	8004e74 <HAL_GetTick>
 8005dc2:	0002      	movs	r2, r0
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e02c      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dd0:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	049b      	lsls	r3, r3, #18
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCC_OscConfig+0x5b2>
 8005ddc:	e024      	b.n	8005e28 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e01f      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005df0:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <HAL_RCC_OscConfig+0x628>)
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	23c0      	movs	r3, #192	; 0xc0
 8005dfa:	025b      	lsls	r3, r3, #9
 8005dfc:	401a      	ands	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d10e      	bne.n	8005e24 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	220f      	movs	r2, #15
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d107      	bne.n	8005e24 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	23f0      	movs	r3, #240	; 0xf0
 8005e18:	039b      	lsls	r3, r3, #14
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b008      	add	sp, #32
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	40021000 	.word	0x40021000
 8005e38:	00001388 	.word	0x00001388
 8005e3c:	efffffff 	.word	0xefffffff
 8005e40:	feffffff 	.word	0xfeffffff
 8005e44:	ffc27fff 	.word	0xffc27fff

08005e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0b3      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b5b      	ldr	r3, [pc, #364]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d911      	bls.n	8005e8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4393      	bics	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	4b55      	ldr	r3, [pc, #340]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7c:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e09a      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2202      	movs	r2, #2
 8005e94:	4013      	ands	r3, r2
 8005e96:	d015      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d006      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ea2:	4b4b      	ldr	r3, [pc, #300]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	4b4a      	ldr	r3, [pc, #296]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005ea8:	21e0      	movs	r1, #224	; 0xe0
 8005eaa:	00c9      	lsls	r1, r1, #3
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb0:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	22f0      	movs	r2, #240	; 0xf0
 8005eb6:	4393      	bics	r3, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	4b44      	ldr	r3, [pc, #272]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d040      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b3e      	ldr	r3, [pc, #248]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	029b      	lsls	r3, r3, #10
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d114      	bne.n	8005f0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e06e      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d107      	bne.n	8005efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eee:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	049b      	lsls	r3, r3, #18
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e062      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efe:	4b34      	ldr	r3, [pc, #208]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2202      	movs	r2, #2
 8005f04:	4013      	ands	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e05b      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f0c:	4b30      	ldr	r3, [pc, #192]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2203      	movs	r2, #3
 8005f12:	4393      	bics	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f20:	f7fe ffa8 	bl	8004e74 <HAL_GetTick>
 8005f24:	0003      	movs	r3, r0
 8005f26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f28:	e009      	b.n	8005f3e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f2a:	f7fe ffa3 	bl	8004e74 <HAL_GetTick>
 8005f2e:	0002      	movs	r2, r0
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	4a27      	ldr	r2, [pc, #156]	; (8005fd4 <HAL_RCC_ClockConfig+0x18c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e042      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	220c      	movs	r2, #12
 8005f44:	401a      	ands	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d1ec      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f50:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4013      	ands	r3, r2
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d211      	bcs.n	8005f82 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4393      	bics	r3, r2
 8005f66:	0019      	movs	r1, r3
 8005f68:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <HAL_RCC_ClockConfig+0x184>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2201      	movs	r2, #1
 8005f76:	4013      	ands	r3, r2
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d001      	beq.n	8005f82 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e020      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2204      	movs	r2, #4
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <HAL_RCC_ClockConfig+0x190>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	0019      	movs	r1, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005fa0:	f000 f820 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 8005fa4:	0001      	movs	r1, r0
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <HAL_RCC_ClockConfig+0x188>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	220f      	movs	r2, #15
 8005fae:	4013      	ands	r3, r2
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <HAL_RCC_ClockConfig+0x194>)
 8005fb2:	5cd3      	ldrb	r3, [r2, r3]
 8005fb4:	000a      	movs	r2, r1
 8005fb6:	40da      	lsrs	r2, r3
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x198>)
 8005fba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005fbc:	2003      	movs	r0, #3
 8005fbe:	f7fe ff13 	bl	8004de8 <HAL_InitTick>
  
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b004      	add	sp, #16
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40022000 	.word	0x40022000
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	00001388 	.word	0x00001388
 8005fd8:	fffff8ff 	.word	0xfffff8ff
 8005fdc:	0800e59c 	.word	0x0800e59c
 8005fe0:	20000000 	.word	0x20000000

08005fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b08f      	sub	sp, #60	; 0x3c
 8005fe8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005fea:	2314      	movs	r3, #20
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ff0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ff2:	c313      	stmia	r3!, {r0, r1, r4}
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ffc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ffe:	c313      	stmia	r3!, {r0, r1, r4}
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006008:	2300      	movs	r3, #0
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
 800600c:	2300      	movs	r3, #0
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006018:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	220c      	movs	r2, #12
 8006022:	4013      	ands	r3, r2
 8006024:	2b04      	cmp	r3, #4
 8006026:	d002      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0x4a>
 8006028:	2b08      	cmp	r3, #8
 800602a:	d003      	beq.n	8006034 <HAL_RCC_GetSysClockFreq+0x50>
 800602c:	e02f      	b.n	800608e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800602e:	4b1f      	ldr	r3, [pc, #124]	; (80060ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006032:	e02f      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	0c9b      	lsrs	r3, r3, #18
 8006038:	220f      	movs	r2, #15
 800603a:	4013      	ands	r3, r2
 800603c:	2214      	movs	r2, #20
 800603e:	18ba      	adds	r2, r7, r2
 8006040:	5cd3      	ldrb	r3, [r2, r3]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006044:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	220f      	movs	r2, #15
 800604a:	4013      	ands	r3, r2
 800604c:	1d3a      	adds	r2, r7, #4
 800604e:	5cd3      	ldrb	r3, [r2, r3]
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006054:	23c0      	movs	r3, #192	; 0xc0
 8006056:	025b      	lsls	r3, r3, #9
 8006058:	401a      	ands	r2, r3
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	025b      	lsls	r3, r3, #9
 800605e:	429a      	cmp	r2, r3
 8006060:	d109      	bne.n	8006076 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006064:	4811      	ldr	r0, [pc, #68]	; (80060ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8006066:	f7fa f875 	bl	8000154 <__udivsi3>
 800606a:	0003      	movs	r3, r0
 800606c:	001a      	movs	r2, r3
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	4353      	muls	r3, r2
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
 8006074:	e008      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006078:	480c      	ldr	r0, [pc, #48]	; (80060ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800607a:	f7fa f86b 	bl	8000154 <__udivsi3>
 800607e:	0003      	movs	r3, r0
 8006080:	001a      	movs	r2, r3
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	4353      	muls	r3, r2
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800608c:	e002      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006092:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b00f      	add	sp, #60	; 0x3c
 800609c:	bd90      	pop	{r4, r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	0800e470 	.word	0x0800e470
 80060a4:	0800e480 	.word	0x0800e480
 80060a8:	40021000 	.word	0x40021000
 80060ac:	007a1200 	.word	0x007a1200

080060b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b4:	4b02      	ldr	r3, [pc, #8]	; (80060c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	20000000 	.word	0x20000000

080060c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80060c8:	f7ff fff2 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 80060cc:	0001      	movs	r1, r0
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	2207      	movs	r2, #7
 80060d6:	4013      	ands	r3, r2
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80060da:	5cd3      	ldrb	r3, [r2, r3]
 80060dc:	40d9      	lsrs	r1, r3
 80060de:	000b      	movs	r3, r1
}    
 80060e0:	0018      	movs	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	40021000 	.word	0x40021000
 80060ec:	0800e5ac 	.word	0x0800e5ac

080060f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e042      	b.n	8006188 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	223d      	movs	r2, #61	; 0x3d
 8006106:	5c9b      	ldrb	r3, [r3, r2]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d107      	bne.n	800611e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	223c      	movs	r2, #60	; 0x3c
 8006112:	2100      	movs	r1, #0
 8006114:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	0018      	movs	r0, r3
 800611a:	f7fe fb33 	bl	8004784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	223d      	movs	r2, #61	; 0x3d
 8006122:	2102      	movs	r1, #2
 8006124:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f000 ffed 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2246      	movs	r2, #70	; 0x46
 800613a:	2101      	movs	r1, #1
 800613c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	223e      	movs	r2, #62	; 0x3e
 8006142:	2101      	movs	r1, #1
 8006144:	5499      	strb	r1, [r3, r2]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	223f      	movs	r2, #63	; 0x3f
 800614a:	2101      	movs	r1, #1
 800614c:	5499      	strb	r1, [r3, r2]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2240      	movs	r2, #64	; 0x40
 8006152:	2101      	movs	r1, #1
 8006154:	5499      	strb	r1, [r3, r2]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2241      	movs	r2, #65	; 0x41
 800615a:	2101      	movs	r1, #1
 800615c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2242      	movs	r2, #66	; 0x42
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2243      	movs	r2, #67	; 0x43
 800616a:	2101      	movs	r1, #1
 800616c:	5499      	strb	r1, [r3, r2]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2244      	movs	r2, #68	; 0x44
 8006172:	2101      	movs	r1, #1
 8006174:	5499      	strb	r1, [r3, r2]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2245      	movs	r2, #69	; 0x45
 800617a:	2101      	movs	r1, #1
 800617c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	223d      	movs	r2, #61	; 0x3d
 8006182:	2101      	movs	r1, #1
 8006184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e042      	b.n	8006228 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	223d      	movs	r2, #61	; 0x3d
 80061a6:	5c9b      	ldrb	r3, [r3, r2]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	223c      	movs	r2, #60	; 0x3c
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 f839 	bl	8006230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	223d      	movs	r2, #61	; 0x3d
 80061c2:	2102      	movs	r1, #2
 80061c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	0019      	movs	r1, r3
 80061d0:	0010      	movs	r0, r2
 80061d2:	f000 ff9d 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2246      	movs	r2, #70	; 0x46
 80061da:	2101      	movs	r1, #1
 80061dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	223e      	movs	r2, #62	; 0x3e
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	223f      	movs	r2, #63	; 0x3f
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2241      	movs	r2, #65	; 0x41
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2242      	movs	r2, #66	; 0x42
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2243      	movs	r2, #67	; 0x43
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2244      	movs	r2, #68	; 0x44
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2245      	movs	r2, #69	; 0x45
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	223d      	movs	r2, #61	; 0x3d
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	0018      	movs	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	b002      	add	sp, #8
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d108      	bne.n	8006262 <HAL_TIM_PWM_Start+0x22>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	223e      	movs	r2, #62	; 0x3e
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	1e5a      	subs	r2, r3, #1
 800625c:	4193      	sbcs	r3, r2
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e01f      	b.n	80062a2 <HAL_TIM_PWM_Start+0x62>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d108      	bne.n	800627a <HAL_TIM_PWM_Start+0x3a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	223f      	movs	r2, #63	; 0x3f
 800626c:	5c9b      	ldrb	r3, [r3, r2]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	1e5a      	subs	r2, r3, #1
 8006274:	4193      	sbcs	r3, r2
 8006276:	b2db      	uxtb	r3, r3
 8006278:	e013      	b.n	80062a2 <HAL_TIM_PWM_Start+0x62>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d108      	bne.n	8006292 <HAL_TIM_PWM_Start+0x52>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	5c9b      	ldrb	r3, [r3, r2]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	4193      	sbcs	r3, r2
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e007      	b.n	80062a2 <HAL_TIM_PWM_Start+0x62>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2241      	movs	r2, #65	; 0x41
 8006296:	5c9b      	ldrb	r3, [r3, r2]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	4193      	sbcs	r3, r2
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e06e      	b.n	8006388 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_PWM_Start+0x7a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	223e      	movs	r2, #62	; 0x3e
 80062b4:	2102      	movs	r1, #2
 80062b6:	5499      	strb	r1, [r3, r2]
 80062b8:	e013      	b.n	80062e2 <HAL_TIM_PWM_Start+0xa2>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start+0x8a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	223f      	movs	r2, #63	; 0x3f
 80062c4:	2102      	movs	r1, #2
 80062c6:	5499      	strb	r1, [r3, r2]
 80062c8:	e00b      	b.n	80062e2 <HAL_TIM_PWM_Start+0xa2>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d104      	bne.n	80062da <HAL_TIM_PWM_Start+0x9a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2240      	movs	r2, #64	; 0x40
 80062d4:	2102      	movs	r1, #2
 80062d6:	5499      	strb	r1, [r3, r2]
 80062d8:	e003      	b.n	80062e2 <HAL_TIM_PWM_Start+0xa2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2241      	movs	r2, #65	; 0x41
 80062de:	2102      	movs	r1, #2
 80062e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	2201      	movs	r2, #1
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 fb3c 	bl	8007968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_TIM_PWM_Start+0x150>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_TIM_PWM_Start+0xd8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a25      	ldr	r2, [pc, #148]	; (8006394 <HAL_TIM_PWM_Start+0x154>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_TIM_PWM_Start+0xd8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a23      	ldr	r2, [pc, #140]	; (8006398 <HAL_TIM_PWM_Start+0x158>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_PWM_Start+0xd8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_TIM_PWM_Start+0x15c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d101      	bne.n	800631c <HAL_TIM_PWM_Start+0xdc>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <HAL_TIM_PWM_Start+0xde>
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	0209      	lsls	r1, r1, #8
 8006330:	430a      	orrs	r2, r1
 8006332:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a15      	ldr	r2, [pc, #84]	; (8006390 <HAL_TIM_PWM_Start+0x150>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_TIM_PWM_Start+0x112>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a17      	ldr	r2, [pc, #92]	; (80063a0 <HAL_TIM_PWM_Start+0x160>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_TIM_PWM_Start+0x112>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a11      	ldr	r2, [pc, #68]	; (8006394 <HAL_TIM_PWM_Start+0x154>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d111      	bne.n	8006376 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2207      	movs	r2, #7
 800635a:	4013      	ands	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d010      	beq.n	8006386 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2101      	movs	r1, #1
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006374:	e007      	b.n	8006386 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2101      	movs	r1, #1
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b004      	add	sp, #16
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800
 80063a0:	40000400 	.word	0x40000400

080063a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ae:	230f      	movs	r3, #15
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d108      	bne.n	80063ce <HAL_TIM_PWM_Start_IT+0x2a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	223e      	movs	r2, #62	; 0x3e
 80063c0:	5c9b      	ldrb	r3, [r3, r2]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	1e5a      	subs	r2, r3, #1
 80063c8:	4193      	sbcs	r3, r2
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	e01f      	b.n	800640e <HAL_TIM_PWM_Start_IT+0x6a>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d108      	bne.n	80063e6 <HAL_TIM_PWM_Start_IT+0x42>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	223f      	movs	r2, #63	; 0x3f
 80063d8:	5c9b      	ldrb	r3, [r3, r2]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	1e5a      	subs	r2, r3, #1
 80063e0:	4193      	sbcs	r3, r2
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e013      	b.n	800640e <HAL_TIM_PWM_Start_IT+0x6a>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d108      	bne.n	80063fe <HAL_TIM_PWM_Start_IT+0x5a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2240      	movs	r2, #64	; 0x40
 80063f0:	5c9b      	ldrb	r3, [r3, r2]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	1e5a      	subs	r2, r3, #1
 80063f8:	4193      	sbcs	r3, r2
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	e007      	b.n	800640e <HAL_TIM_PWM_Start_IT+0x6a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2241      	movs	r2, #65	; 0x41
 8006402:	5c9b      	ldrb	r3, [r3, r2]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	4193      	sbcs	r3, r2
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0b1      	b.n	800657a <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_TIM_PWM_Start_IT+0x82>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	223e      	movs	r2, #62	; 0x3e
 8006420:	2102      	movs	r1, #2
 8006422:	5499      	strb	r1, [r3, r2]
 8006424:	e013      	b.n	800644e <HAL_TIM_PWM_Start_IT+0xaa>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b04      	cmp	r3, #4
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start_IT+0x92>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	223f      	movs	r2, #63	; 0x3f
 8006430:	2102      	movs	r1, #2
 8006432:	5499      	strb	r1, [r3, r2]
 8006434:	e00b      	b.n	800644e <HAL_TIM_PWM_Start_IT+0xaa>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b08      	cmp	r3, #8
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Start_IT+0xa2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2240      	movs	r2, #64	; 0x40
 8006440:	2102      	movs	r1, #2
 8006442:	5499      	strb	r1, [r3, r2]
 8006444:	e003      	b.n	800644e <HAL_TIM_PWM_Start_IT+0xaa>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2241      	movs	r2, #65	; 0x41
 800644a:	2102      	movs	r1, #2
 800644c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d02a      	beq.n	80064aa <HAL_TIM_PWM_Start_IT+0x106>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d830      	bhi.n	80064bc <HAL_TIM_PWM_Start_IT+0x118>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d01b      	beq.n	8006498 <HAL_TIM_PWM_Start_IT+0xf4>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b08      	cmp	r3, #8
 8006464:	d82a      	bhi.n	80064bc <HAL_TIM_PWM_Start_IT+0x118>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_TIM_PWM_Start_IT+0xd0>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d009      	beq.n	8006486 <HAL_TIM_PWM_Start_IT+0xe2>
 8006472:	e023      	b.n	80064bc <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2102      	movs	r1, #2
 8006480:	430a      	orrs	r2, r1
 8006482:	60da      	str	r2, [r3, #12]
      break;
 8006484:	e01f      	b.n	80064c6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2104      	movs	r1, #4
 8006492:	430a      	orrs	r2, r1
 8006494:	60da      	str	r2, [r3, #12]
      break;
 8006496:	e016      	b.n	80064c6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2108      	movs	r1, #8
 80064a4:	430a      	orrs	r2, r1
 80064a6:	60da      	str	r2, [r3, #12]
      break;
 80064a8:	e00d      	b.n	80064c6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2110      	movs	r1, #16
 80064b6:	430a      	orrs	r2, r1
 80064b8:	60da      	str	r2, [r3, #12]
      break;
 80064ba:	e004      	b.n	80064c6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80064bc:	230f      	movs	r3, #15
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	2201      	movs	r2, #1
 80064c2:	701a      	strb	r2, [r3, #0]
      break;
 80064c4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80064c6:	230f      	movs	r3, #15
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d151      	bne.n	8006574 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	0018      	movs	r0, r3
 80064da:	f001 fa45 	bl	8007968 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a28      	ldr	r2, [pc, #160]	; (8006584 <HAL_TIM_PWM_Start_IT+0x1e0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_TIM_PWM_Start_IT+0x162>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a26      	ldr	r2, [pc, #152]	; (8006588 <HAL_TIM_PWM_Start_IT+0x1e4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_TIM_PWM_Start_IT+0x162>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a25      	ldr	r2, [pc, #148]	; (800658c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_TIM_PWM_Start_IT+0x162>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a23      	ldr	r2, [pc, #140]	; (8006590 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_TIM_PWM_Start_IT+0x166>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <HAL_TIM_PWM_Start_IT+0x168>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	0209      	lsls	r1, r1, #8
 800651e:	430a      	orrs	r2, r1
 8006520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x19c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x19c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a13      	ldr	r2, [pc, #76]	; (8006588 <HAL_TIM_PWM_Start_IT+0x1e4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d111      	bne.n	8006564 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2207      	movs	r2, #7
 8006548:	4013      	ands	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b06      	cmp	r3, #6
 8006550:	d010      	beq.n	8006574 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2101      	movs	r1, #1
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e007      	b.n	8006574 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2101      	movs	r1, #1
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006574:	230f      	movs	r3, #15
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	781b      	ldrb	r3, [r3, #0]
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b004      	add	sp, #16
 8006580:	bd80      	pop	{r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40014000 	.word	0x40014000
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800
 8006594:	40000400 	.word	0x40000400

08006598 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a2:	230f      	movs	r3, #15
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b0c      	cmp	r3, #12
 80065ae:	d02a      	beq.n	8006606 <HAL_TIM_PWM_Stop_IT+0x6e>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b0c      	cmp	r3, #12
 80065b4:	d830      	bhi.n	8006618 <HAL_TIM_PWM_Stop_IT+0x80>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d01b      	beq.n	80065f4 <HAL_TIM_PWM_Stop_IT+0x5c>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d82a      	bhi.n	8006618 <HAL_TIM_PWM_Stop_IT+0x80>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_TIM_PWM_Stop_IT+0x38>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d009      	beq.n	80065e2 <HAL_TIM_PWM_Stop_IT+0x4a>
 80065ce:	e023      	b.n	8006618 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2102      	movs	r1, #2
 80065dc:	438a      	bics	r2, r1
 80065de:	60da      	str	r2, [r3, #12]
      break;
 80065e0:	e01f      	b.n	8006622 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2104      	movs	r1, #4
 80065ee:	438a      	bics	r2, r1
 80065f0:	60da      	str	r2, [r3, #12]
      break;
 80065f2:	e016      	b.n	8006622 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2108      	movs	r1, #8
 8006600:	438a      	bics	r2, r1
 8006602:	60da      	str	r2, [r3, #12]
      break;
 8006604:	e00d      	b.n	8006622 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2110      	movs	r1, #16
 8006612:	438a      	bics	r2, r1
 8006614:	60da      	str	r2, [r3, #12]
      break;
 8006616:	e004      	b.n	8006622 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8006618:	230f      	movs	r3, #15
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
      break;
 8006620:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006622:	230f      	movs	r3, #15
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d000      	beq.n	800662e <HAL_TIM_PWM_Stop_IT+0x96>
 800662c:	e063      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	2200      	movs	r2, #0
 8006636:	0018      	movs	r0, r3
 8006638:	f001 f996 	bl	8007968 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a30      	ldr	r2, [pc, #192]	; (8006704 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00e      	beq.n	8006664 <HAL_TIM_PWM_Stop_IT+0xcc>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2f      	ldr	r2, [pc, #188]	; (8006708 <HAL_TIM_PWM_Stop_IT+0x170>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_TIM_PWM_Stop_IT+0xcc>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2d      	ldr	r2, [pc, #180]	; (800670c <HAL_TIM_PWM_Stop_IT+0x174>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_TIM_PWM_Stop_IT+0xcc>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2c      	ldr	r2, [pc, #176]	; (8006710 <HAL_TIM_PWM_Stop_IT+0x178>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d101      	bne.n	8006668 <HAL_TIM_PWM_Stop_IT+0xd0>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <HAL_TIM_PWM_Stop_IT+0xd2>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d013      	beq.n	8006696 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	4a27      	ldr	r2, [pc, #156]	; (8006714 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8006676:	4013      	ands	r3, r2
 8006678:	d10d      	bne.n	8006696 <HAL_TIM_PWM_Stop_IT+0xfe>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	4a25      	ldr	r2, [pc, #148]	; (8006718 <HAL_TIM_PWM_Stop_IT+0x180>)
 8006682:	4013      	ands	r3, r2
 8006684:	d107      	bne.n	8006696 <HAL_TIM_PWM_Stop_IT+0xfe>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4922      	ldr	r1, [pc, #136]	; (800671c <HAL_TIM_PWM_Stop_IT+0x184>)
 8006692:	400a      	ands	r2, r1
 8006694:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <HAL_TIM_PWM_Stop_IT+0x17c>)
 800669e:	4013      	ands	r3, r2
 80066a0:	d10d      	bne.n	80066be <HAL_TIM_PWM_Stop_IT+0x126>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <HAL_TIM_PWM_Stop_IT+0x180>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	d107      	bne.n	80066be <HAL_TIM_PWM_Stop_IT+0x126>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2101      	movs	r1, #1
 80066ba:	438a      	bics	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <HAL_TIM_PWM_Stop_IT+0x136>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	223e      	movs	r2, #62	; 0x3e
 80066c8:	2101      	movs	r1, #1
 80066ca:	5499      	strb	r1, [r3, r2]
 80066cc:	e013      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x15e>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d104      	bne.n	80066de <HAL_TIM_PWM_Stop_IT+0x146>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	223f      	movs	r2, #63	; 0x3f
 80066d8:	2101      	movs	r1, #1
 80066da:	5499      	strb	r1, [r3, r2]
 80066dc:	e00b      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x15e>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_PWM_Stop_IT+0x156>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	2101      	movs	r1, #1
 80066ea:	5499      	strb	r1, [r3, r2]
 80066ec:	e003      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x15e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2241      	movs	r2, #65	; 0x41
 80066f2:	2101      	movs	r1, #1
 80066f4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80066f6:	230f      	movs	r3, #15
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	781b      	ldrb	r3, [r3, #0]
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b004      	add	sp, #16
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800
 8006714:	00001111 	.word	0x00001111
 8006718:	00000444 	.word	0x00000444
 800671c:	ffff7fff 	.word	0xffff7fff

08006720 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e042      	b.n	80067b8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	223d      	movs	r2, #61	; 0x3d
 8006736:	5c9b      	ldrb	r3, [r3, r2]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	223c      	movs	r2, #60	; 0x3c
 8006742:	2100      	movs	r1, #0
 8006744:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	0018      	movs	r0, r3
 800674a:	f7fe f859 	bl	8004800 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	223d      	movs	r2, #61	; 0x3d
 8006752:	2102      	movs	r1, #2
 8006754:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3304      	adds	r3, #4
 800675e:	0019      	movs	r1, r3
 8006760:	0010      	movs	r0, r2
 8006762:	f000 fcd5 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2246      	movs	r2, #70	; 0x46
 800676a:	2101      	movs	r1, #1
 800676c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	223e      	movs	r2, #62	; 0x3e
 8006772:	2101      	movs	r1, #1
 8006774:	5499      	strb	r1, [r3, r2]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	223f      	movs	r2, #63	; 0x3f
 800677a:	2101      	movs	r1, #1
 800677c:	5499      	strb	r1, [r3, r2]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2240      	movs	r2, #64	; 0x40
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2241      	movs	r2, #65	; 0x41
 800678a:	2101      	movs	r1, #1
 800678c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2242      	movs	r2, #66	; 0x42
 8006792:	2101      	movs	r1, #1
 8006794:	5499      	strb	r1, [r3, r2]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2243      	movs	r2, #67	; 0x43
 800679a:	2101      	movs	r1, #1
 800679c:	5499      	strb	r1, [r3, r2]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2244      	movs	r2, #68	; 0x44
 80067a2:	2101      	movs	r1, #1
 80067a4:	5499      	strb	r1, [r3, r2]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2245      	movs	r2, #69	; 0x45
 80067aa:	2101      	movs	r1, #1
 80067ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	223d      	movs	r2, #61	; 0x3d
 80067b2:	2101      	movs	r1, #1
 80067b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	0018      	movs	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b002      	add	sp, #8
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	230f      	movs	r3, #15
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	2200      	movs	r2, #0
 80067d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_IC_Start_IT+0x22>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	223e      	movs	r2, #62	; 0x3e
 80067dc:	5c9b      	ldrb	r3, [r3, r2]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	e013      	b.n	800680a <HAL_TIM_IC_Start_IT+0x4a>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_IC_Start_IT+0x32>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	223f      	movs	r2, #63	; 0x3f
 80067ec:	5c9b      	ldrb	r3, [r3, r2]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e00b      	b.n	800680a <HAL_TIM_IC_Start_IT+0x4a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_IC_Start_IT+0x42>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2240      	movs	r2, #64	; 0x40
 80067fc:	5c9b      	ldrb	r3, [r3, r2]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e003      	b.n	800680a <HAL_TIM_IC_Start_IT+0x4a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2241      	movs	r2, #65	; 0x41
 8006806:	5c9b      	ldrb	r3, [r3, r2]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	220e      	movs	r2, #14
 800680c:	18ba      	adds	r2, r7, r2
 800680e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <HAL_TIM_IC_Start_IT+0x60>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2242      	movs	r2, #66	; 0x42
 800681a:	5c9b      	ldrb	r3, [r3, r2]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e013      	b.n	8006848 <HAL_TIM_IC_Start_IT+0x88>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b04      	cmp	r3, #4
 8006824:	d104      	bne.n	8006830 <HAL_TIM_IC_Start_IT+0x70>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2243      	movs	r2, #67	; 0x43
 800682a:	5c9b      	ldrb	r3, [r3, r2]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e00b      	b.n	8006848 <HAL_TIM_IC_Start_IT+0x88>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b08      	cmp	r3, #8
 8006834:	d104      	bne.n	8006840 <HAL_TIM_IC_Start_IT+0x80>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2244      	movs	r2, #68	; 0x44
 800683a:	5c9b      	ldrb	r3, [r3, r2]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e003      	b.n	8006848 <HAL_TIM_IC_Start_IT+0x88>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2245      	movs	r2, #69	; 0x45
 8006844:	5c9b      	ldrb	r3, [r3, r2]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	210d      	movs	r1, #13
 800684a:	187a      	adds	r2, r7, r1
 800684c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800684e:	230e      	movs	r3, #14
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d103      	bne.n	8006860 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006858:	187b      	adds	r3, r7, r1
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d001      	beq.n	8006864 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0ab      	b.n	80069bc <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <HAL_TIM_IC_Start_IT+0xb4>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	223e      	movs	r2, #62	; 0x3e
 800686e:	2102      	movs	r1, #2
 8006870:	5499      	strb	r1, [r3, r2]
 8006872:	e013      	b.n	800689c <HAL_TIM_IC_Start_IT+0xdc>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d104      	bne.n	8006884 <HAL_TIM_IC_Start_IT+0xc4>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	223f      	movs	r2, #63	; 0x3f
 800687e:	2102      	movs	r1, #2
 8006880:	5499      	strb	r1, [r3, r2]
 8006882:	e00b      	b.n	800689c <HAL_TIM_IC_Start_IT+0xdc>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d104      	bne.n	8006894 <HAL_TIM_IC_Start_IT+0xd4>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2240      	movs	r2, #64	; 0x40
 800688e:	2102      	movs	r1, #2
 8006890:	5499      	strb	r1, [r3, r2]
 8006892:	e003      	b.n	800689c <HAL_TIM_IC_Start_IT+0xdc>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2241      	movs	r2, #65	; 0x41
 8006898:	2102      	movs	r1, #2
 800689a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_TIM_IC_Start_IT+0xec>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2242      	movs	r2, #66	; 0x42
 80068a6:	2102      	movs	r1, #2
 80068a8:	5499      	strb	r1, [r3, r2]
 80068aa:	e013      	b.n	80068d4 <HAL_TIM_IC_Start_IT+0x114>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d104      	bne.n	80068bc <HAL_TIM_IC_Start_IT+0xfc>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2243      	movs	r2, #67	; 0x43
 80068b6:	2102      	movs	r1, #2
 80068b8:	5499      	strb	r1, [r3, r2]
 80068ba:	e00b      	b.n	80068d4 <HAL_TIM_IC_Start_IT+0x114>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d104      	bne.n	80068cc <HAL_TIM_IC_Start_IT+0x10c>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2244      	movs	r2, #68	; 0x44
 80068c6:	2102      	movs	r1, #2
 80068c8:	5499      	strb	r1, [r3, r2]
 80068ca:	e003      	b.n	80068d4 <HAL_TIM_IC_Start_IT+0x114>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2245      	movs	r2, #69	; 0x45
 80068d0:	2102      	movs	r1, #2
 80068d2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b0c      	cmp	r3, #12
 80068d8:	d02a      	beq.n	8006930 <HAL_TIM_IC_Start_IT+0x170>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b0c      	cmp	r3, #12
 80068de:	d830      	bhi.n	8006942 <HAL_TIM_IC_Start_IT+0x182>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d01b      	beq.n	800691e <HAL_TIM_IC_Start_IT+0x15e>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d82a      	bhi.n	8006942 <HAL_TIM_IC_Start_IT+0x182>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IC_Start_IT+0x13a>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d009      	beq.n	800690c <HAL_TIM_IC_Start_IT+0x14c>
 80068f8:	e023      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2102      	movs	r1, #2
 8006906:	430a      	orrs	r2, r1
 8006908:	60da      	str	r2, [r3, #12]
      break;
 800690a:	e01f      	b.n	800694c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2104      	movs	r1, #4
 8006918:	430a      	orrs	r2, r1
 800691a:	60da      	str	r2, [r3, #12]
      break;
 800691c:	e016      	b.n	800694c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2108      	movs	r1, #8
 800692a:	430a      	orrs	r2, r1
 800692c:	60da      	str	r2, [r3, #12]
      break;
 800692e:	e00d      	b.n	800694c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2110      	movs	r1, #16
 800693c:	430a      	orrs	r2, r1
 800693e:	60da      	str	r2, [r3, #12]
      break;
 8006940:	e004      	b.n	800694c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8006942:	230f      	movs	r3, #15
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
      break;
 800694a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800694c:	230f      	movs	r3, #15
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d12f      	bne.n	80069b6 <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	2201      	movs	r2, #1
 800695e:	0018      	movs	r0, r3
 8006960:	f001 f802 	bl	8007968 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <HAL_TIM_IC_Start_IT+0x204>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_TIM_IC_Start_IT+0x1c2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <HAL_TIM_IC_Start_IT+0x208>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_TIM_IC_Start_IT+0x1c2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a13      	ldr	r2, [pc, #76]	; (80069cc <HAL_TIM_IC_Start_IT+0x20c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2207      	movs	r2, #7
 800698a:	4013      	ands	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b06      	cmp	r3, #6
 8006992:	d010      	beq.n	80069b6 <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2101      	movs	r1, #1
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	e007      	b.n	80069b6 <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2101      	movs	r1, #1
 80069b2:	430a      	orrs	r2, r1
 80069b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069b6:	230f      	movs	r3, #15
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	781b      	ldrb	r3, [r3, #0]
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b004      	add	sp, #16
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40014000 	.word	0x40014000

080069d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2202      	movs	r2, #2
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d124      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2202      	movs	r2, #2
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d11d      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2203      	movs	r2, #3
 80069fa:	4252      	negs	r2, r2
 80069fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7fd fc8a 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8006a18:	e007      	b.n	8006a2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 fb67 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fd fc3f 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2204      	movs	r2, #4
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d125      	bne.n	8006a8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2204      	movs	r2, #4
 8006a46:	4013      	ands	r3, r2
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d11e      	bne.n	8006a8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2205      	movs	r2, #5
 8006a52:	4252      	negs	r2, r2
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	23c0      	movs	r3, #192	; 0xc0
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4013      	ands	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7fd fc5d 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8006a72:	e007      	b.n	8006a84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 fb3a 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f7fd fc12 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2208      	movs	r2, #8
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d124      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d11d      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2209      	movs	r2, #9
 8006aac:	4252      	negs	r2, r2
 8006aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	2203      	movs	r2, #3
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d004      	beq.n	8006acc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f7fd fc31 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8006aca:	e007      	b.n	8006adc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f000 fb0e 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f7fd fbe6 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2210      	movs	r2, #16
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d125      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2210      	movs	r2, #16
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b10      	cmp	r3, #16
 8006afc:	d11e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2211      	movs	r2, #17
 8006b04:	4252      	negs	r2, r2
 8006b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	23c0      	movs	r3, #192	; 0xc0
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d004      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fd fc04 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8006b24:	e007      	b.n	8006b36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 fae1 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7fd fbb9 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2201      	movs	r2, #1
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10f      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	4013      	ands	r3, r2
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d108      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4252      	negs	r2, r2
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0018      	movs	r0, r3
 8006b66:	f000 fabb 	bl	80070e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d10f      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2280      	movs	r2, #128	; 0x80
 8006b80:	4013      	ands	r3, r2
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d108      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2281      	movs	r2, #129	; 0x81
 8006b8c:	4252      	negs	r2, r2
 8006b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	0018      	movs	r0, r3
 8006b94:	f000 ffca 	bl	8007b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2240      	movs	r2, #64	; 0x40
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2240      	movs	r2, #64	; 0x40
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d108      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2241      	movs	r2, #65	; 0x41
 8006bba:	4252      	negs	r2, r2
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 fa9d 	bl	8007100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d108      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2221      	movs	r2, #33	; 0x21
 8006be8:	4252      	negs	r2, r2
 8006bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 ff94 	bl	8007b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bf4:	46c0      	nop			; (mov r8, r8)
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	b002      	add	sp, #8
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c08:	2317      	movs	r3, #23
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	223c      	movs	r2, #60	; 0x3c
 8006c14:	5c9b      	ldrb	r3, [r3, r2]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_IC_ConfigChannel+0x22>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e08c      	b.n	8006d38 <HAL_TIM_IC_ConfigChannel+0x13c>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	223c      	movs	r2, #60	; 0x3c
 8006c22:	2101      	movs	r1, #1
 8006c24:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d11b      	bne.n	8006c64 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f000 fcda 	bl	80075f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	210c      	movs	r1, #12
 8006c4c:	438a      	bics	r2, r1
 8006c4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6999      	ldr	r1, [r3, #24]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	619a      	str	r2, [r3, #24]
 8006c62:	e062      	b.n	8006d2a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d11c      	bne.n	8006ca4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6819      	ldr	r1, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f000 fd41 	bl	8007700 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	492d      	ldr	r1, [pc, #180]	; (8006d40 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006c8a:	400a      	ands	r2, r1
 8006c8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6999      	ldr	r1, [r3, #24]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	021a      	lsls	r2, r3, #8
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	619a      	str	r2, [r3, #24]
 8006ca2:	e042      	b.n	8006d2a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d11b      	bne.n	8006ce2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f000 fd95 	bl	80077e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	210c      	movs	r1, #12
 8006cca:	438a      	bics	r2, r1
 8006ccc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	61da      	str	r2, [r3, #28]
 8006ce0:	e023      	b.n	8006d2a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d11c      	bne.n	8006d22 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f000 fdb6 	bl	8007868 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69da      	ldr	r2, [r3, #28]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	490e      	ldr	r1, [pc, #56]	; (8006d40 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006d08:	400a      	ands	r2, r1
 8006d0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69d9      	ldr	r1, [r3, #28]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	021a      	lsls	r2, r3, #8
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	61da      	str	r2, [r3, #28]
 8006d20:	e003      	b.n	8006d2a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8006d22:	2317      	movs	r3, #23
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	2201      	movs	r2, #1
 8006d28:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	223c      	movs	r2, #60	; 0x3c
 8006d2e:	2100      	movs	r1, #0
 8006d30:	5499      	strb	r1, [r3, r2]

  return status;
 8006d32:	2317      	movs	r3, #23
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b006      	add	sp, #24
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	fffff3ff 	.word	0xfffff3ff

08006d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d50:	2317      	movs	r3, #23
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	223c      	movs	r2, #60	; 0x3c
 8006d5c:	5c9b      	ldrb	r3, [r3, r2]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e0ad      	b.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	223c      	movs	r2, #60	; 0x3c
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d100      	bne.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006d74:	e076      	b.n	8006e64 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b0c      	cmp	r3, #12
 8006d7a:	d900      	bls.n	8006d7e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006d7c:	e095      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x166>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d04e      	beq.n	8006e22 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d900      	bls.n	8006d8c <HAL_TIM_PWM_ConfigChannel+0x48>
 8006d8a:	e08e      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x166>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x56>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d021      	beq.n	8006ddc <HAL_TIM_PWM_ConfigChannel+0x98>
 8006d98:	e087      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	0011      	movs	r1, r2
 8006da2:	0018      	movs	r0, r3
 8006da4:	f000 fa2a 	bl	80071fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2108      	movs	r1, #8
 8006db4:	430a      	orrs	r2, r1
 8006db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6999      	ldr	r1, [r3, #24]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	619a      	str	r2, [r3, #24]
      break;
 8006dda:	e06b      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	0011      	movs	r1, r2
 8006de4:	0018      	movs	r0, r3
 8006de6:	f000 fa91 	bl	800730c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	699a      	ldr	r2, [r3, #24]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	0109      	lsls	r1, r1, #4
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4931      	ldr	r1, [pc, #196]	; (8006ecc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006e08:	400a      	ands	r2, r1
 8006e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6999      	ldr	r1, [r3, #24]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	021a      	lsls	r2, r3, #8
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	619a      	str	r2, [r3, #24]
      break;
 8006e20:	e048      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0011      	movs	r1, r2
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f000 faf2 	bl	8007414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2108      	movs	r1, #8
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69da      	ldr	r2, [r3, #28]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2104      	movs	r1, #4
 8006e4c:	438a      	bics	r2, r1
 8006e4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69d9      	ldr	r1, [r3, #28]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	61da      	str	r2, [r3, #28]
      break;
 8006e62:	e027      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	0011      	movs	r1, r2
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fb57 	bl	8007520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	0109      	lsls	r1, r1, #4
 8006e80:	430a      	orrs	r2, r1
 8006e82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	490f      	ldr	r1, [pc, #60]	; (8006ecc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006e90:	400a      	ands	r2, r1
 8006e92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69d9      	ldr	r1, [r3, #28]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	61da      	str	r2, [r3, #28]
      break;
 8006ea8:	e004      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006eaa:	2317      	movs	r3, #23
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	223c      	movs	r2, #60	; 0x3c
 8006eb8:	2100      	movs	r1, #0
 8006eba:	5499      	strb	r1, [r3, r2]

  return status;
 8006ebc:	2317      	movs	r3, #23
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	781b      	ldrb	r3, [r3, #0]
}
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b006      	add	sp, #24
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	fffffbff 	.word	0xfffffbff

08006ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eda:	230f      	movs	r3, #15
 8006edc:	18fb      	adds	r3, r7, r3
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	223c      	movs	r2, #60	; 0x3c
 8006ee6:	5c9b      	ldrb	r3, [r3, r2]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIM_ConfigClockSource+0x20>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e0bc      	b.n	800706a <HAL_TIM_ConfigClockSource+0x19a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	223c      	movs	r2, #60	; 0x3c
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	223d      	movs	r2, #61	; 0x3d
 8006efc:	2102      	movs	r1, #2
 8006efe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2277      	movs	r2, #119	; 0x77
 8006f0c:	4393      	bics	r3, r2
 8006f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4a58      	ldr	r2, [pc, #352]	; (8007074 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2280      	movs	r2, #128	; 0x80
 8006f26:	0192      	lsls	r2, r2, #6
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d040      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0xde>
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	0192      	lsls	r2, r2, #6
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d900      	bls.n	8006f36 <HAL_TIM_ConfigClockSource+0x66>
 8006f34:	e088      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f36:	2280      	movs	r2, #128	; 0x80
 8006f38:	0152      	lsls	r2, r2, #5
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d100      	bne.n	8006f40 <HAL_TIM_ConfigClockSource+0x70>
 8006f3e:	e088      	b.n	8007052 <HAL_TIM_ConfigClockSource+0x182>
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	0152      	lsls	r2, r2, #5
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d900      	bls.n	8006f4a <HAL_TIM_ConfigClockSource+0x7a>
 8006f48:	e07e      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f4a:	2b70      	cmp	r3, #112	; 0x70
 8006f4c:	d018      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0xb0>
 8006f4e:	d900      	bls.n	8006f52 <HAL_TIM_ConfigClockSource+0x82>
 8006f50:	e07a      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f52:	2b60      	cmp	r3, #96	; 0x60
 8006f54:	d04f      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x126>
 8006f56:	d900      	bls.n	8006f5a <HAL_TIM_ConfigClockSource+0x8a>
 8006f58:	e076      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f5a:	2b50      	cmp	r3, #80	; 0x50
 8006f5c:	d03b      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x106>
 8006f5e:	d900      	bls.n	8006f62 <HAL_TIM_ConfigClockSource+0x92>
 8006f60:	e072      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d057      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x146>
 8006f66:	d900      	bls.n	8006f6a <HAL_TIM_ConfigClockSource+0x9a>
 8006f68:	e06e      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f6a:	2b30      	cmp	r3, #48	; 0x30
 8006f6c:	d063      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x166>
 8006f6e:	d86b      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d060      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x166>
 8006f74:	d868      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d05d      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x166>
 8006f7a:	2b10      	cmp	r3, #16
 8006f7c:	d05b      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x166>
 8006f7e:	e063      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f000 fcca 	bl	8007928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2277      	movs	r2, #119	; 0x77
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
      break;
 8006fac:	e052      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6899      	ldr	r1, [r3, #8]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f000 fcb3 	bl	8007928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2180      	movs	r1, #128	; 0x80
 8006fce:	01c9      	lsls	r1, r1, #7
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]
      break;
 8006fd4:	e03e      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	001a      	movs	r2, r3
 8006fe4:	f000 fb5e 	bl	80076a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2150      	movs	r1, #80	; 0x50
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 fc80 	bl	80078f4 <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e02e      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	001a      	movs	r2, r3
 8007004:	f000 fbbe 	bl	8007784 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2160      	movs	r1, #96	; 0x60
 800700e:	0018      	movs	r0, r3
 8007010:	f000 fc70 	bl	80078f4 <TIM_ITRx_SetConfig>
      break;
 8007014:	e01e      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	001a      	movs	r2, r3
 8007024:	f000 fb3e 	bl	80076a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	0018      	movs	r0, r3
 8007030:	f000 fc60 	bl	80078f4 <TIM_ITRx_SetConfig>
      break;
 8007034:	e00e      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	0019      	movs	r1, r3
 8007040:	0010      	movs	r0, r2
 8007042:	f000 fc57 	bl	80078f4 <TIM_ITRx_SetConfig>
      break;
 8007046:	e005      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007048:	230f      	movs	r3, #15
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	2201      	movs	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
      break;
 8007050:	e000      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007052:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	223d      	movs	r2, #61	; 0x3d
 8007058:	2101      	movs	r1, #1
 800705a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	223c      	movs	r2, #60	; 0x3c
 8007060:	2100      	movs	r1, #0
 8007062:	5499      	strb	r1, [r3, r2]

  return status;
 8007064:	230f      	movs	r3, #15
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	781b      	ldrb	r3, [r3, #0]
}
 800706a:	0018      	movs	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	b004      	add	sp, #16
 8007070:	bd80      	pop	{r7, pc}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	ffff00ff 	.word	0xffff00ff

08007078 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b0c      	cmp	r3, #12
 800708a:	d01e      	beq.n	80070ca <HAL_TIM_ReadCapturedValue+0x52>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d820      	bhi.n	80070d4 <HAL_TIM_ReadCapturedValue+0x5c>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b08      	cmp	r3, #8
 8007096:	d013      	beq.n	80070c0 <HAL_TIM_ReadCapturedValue+0x48>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b08      	cmp	r3, #8
 800709c:	d81a      	bhi.n	80070d4 <HAL_TIM_ReadCapturedValue+0x5c>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_TIM_ReadCapturedValue+0x34>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d005      	beq.n	80070b6 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80070aa:	e013      	b.n	80070d4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b2:	60fb      	str	r3, [r7, #12]
      break;
 80070b4:	e00f      	b.n	80070d6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	60fb      	str	r3, [r7, #12]
      break;
 80070be:	e00a      	b.n	80070d6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	60fb      	str	r3, [r7, #12]
      break;
 80070c8:	e005      	b.n	80070d6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	60fb      	str	r3, [r7, #12]
      break;
 80070d2:	e000      	b.n	80070d6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80070d4:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80070d6:	68fb      	ldr	r3, [r7, #12]
}
 80070d8:	0018      	movs	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	b004      	add	sp, #16
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b002      	add	sp, #8
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b002      	add	sp, #8
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b002      	add	sp, #8
 800710e:	bd80      	pop	{r7, pc}

08007110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <TIM_Base_SetConfig+0xd0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0x20>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a2e      	ldr	r2, [pc, #184]	; (80071e4 <TIM_Base_SetConfig+0xd4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d108      	bne.n	8007142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2270      	movs	r2, #112	; 0x70
 8007134:	4393      	bics	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a26      	ldr	r2, [pc, #152]	; (80071e0 <TIM_Base_SetConfig+0xd0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_Base_SetConfig+0x62>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a25      	ldr	r2, [pc, #148]	; (80071e4 <TIM_Base_SetConfig+0xd4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_Base_SetConfig+0x62>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a24      	ldr	r2, [pc, #144]	; (80071e8 <TIM_Base_SetConfig+0xd8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_Base_SetConfig+0x62>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a23      	ldr	r2, [pc, #140]	; (80071ec <TIM_Base_SetConfig+0xdc>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_Base_SetConfig+0x62>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <TIM_Base_SetConfig+0xe0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_Base_SetConfig+0x62>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <TIM_Base_SetConfig+0xe4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d108      	bne.n	8007184 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <TIM_Base_SetConfig+0xe8>)
 8007176:	4013      	ands	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	4393      	bics	r3, r2
 800718a:	001a      	movs	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <TIM_Base_SetConfig+0xd0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00b      	beq.n	80071ca <TIM_Base_SetConfig+0xba>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <TIM_Base_SetConfig+0xdc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d007      	beq.n	80071ca <TIM_Base_SetConfig+0xba>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <TIM_Base_SetConfig+0xe0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d003      	beq.n	80071ca <TIM_Base_SetConfig+0xba>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a0b      	ldr	r2, [pc, #44]	; (80071f4 <TIM_Base_SetConfig+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d103      	bne.n	80071d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	615a      	str	r2, [r3, #20]
}
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	46bd      	mov	sp, r7
 80071dc:	b004      	add	sp, #16
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40002000 	.word	0x40002000
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800
 80071f8:	fffffcff 	.word	0xfffffcff

080071fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	2201      	movs	r2, #1
 800720c:	4393      	bics	r3, r2
 800720e:	001a      	movs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2270      	movs	r2, #112	; 0x70
 800722a:	4393      	bics	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2203      	movs	r2, #3
 8007232:	4393      	bics	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2202      	movs	r2, #2
 8007244:	4393      	bics	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a27      	ldr	r2, [pc, #156]	; (80072f4 <TIM_OC1_SetConfig+0xf8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00b      	beq.n	8007272 <TIM_OC1_SetConfig+0x76>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a26      	ldr	r2, [pc, #152]	; (80072f8 <TIM_OC1_SetConfig+0xfc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_OC1_SetConfig+0x76>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a25      	ldr	r2, [pc, #148]	; (80072fc <TIM_OC1_SetConfig+0x100>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC1_SetConfig+0x76>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <TIM_OC1_SetConfig+0x104>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d10c      	bne.n	800728c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2208      	movs	r2, #8
 8007276:	4393      	bics	r3, r2
 8007278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2204      	movs	r2, #4
 8007288:	4393      	bics	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <TIM_OC1_SetConfig+0xf8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00b      	beq.n	80072ac <TIM_OC1_SetConfig+0xb0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a18      	ldr	r2, [pc, #96]	; (80072f8 <TIM_OC1_SetConfig+0xfc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_OC1_SetConfig+0xb0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <TIM_OC1_SetConfig+0x100>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC1_SetConfig+0xb0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a16      	ldr	r2, [pc, #88]	; (8007300 <TIM_OC1_SetConfig+0x104>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d111      	bne.n	80072d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4a15      	ldr	r2, [pc, #84]	; (8007304 <TIM_OC1_SetConfig+0x108>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4a14      	ldr	r2, [pc, #80]	; (8007308 <TIM_OC1_SetConfig+0x10c>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b006      	add	sp, #24
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800
 8007304:	fffffeff 	.word	0xfffffeff
 8007308:	fffffdff 	.word	0xfffffdff

0800730c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	2210      	movs	r2, #16
 800731c:	4393      	bics	r3, r2
 800731e:	001a      	movs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4a2e      	ldr	r2, [pc, #184]	; (80073f4 <TIM_OC2_SetConfig+0xe8>)
 800733a:	4013      	ands	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a2d      	ldr	r2, [pc, #180]	; (80073f8 <TIM_OC2_SetConfig+0xec>)
 8007342:	4013      	ands	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2220      	movs	r2, #32
 8007356:	4393      	bics	r3, r2
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a24      	ldr	r2, [pc, #144]	; (80073fc <TIM_OC2_SetConfig+0xf0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d10d      	bne.n	800738a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2280      	movs	r2, #128	; 0x80
 8007372:	4393      	bics	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2240      	movs	r2, #64	; 0x40
 8007386:	4393      	bics	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <TIM_OC2_SetConfig+0xf0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00b      	beq.n	80073aa <TIM_OC2_SetConfig+0x9e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1a      	ldr	r2, [pc, #104]	; (8007400 <TIM_OC2_SetConfig+0xf4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d007      	beq.n	80073aa <TIM_OC2_SetConfig+0x9e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <TIM_OC2_SetConfig+0xf8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d003      	beq.n	80073aa <TIM_OC2_SetConfig+0x9e>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a18      	ldr	r2, [pc, #96]	; (8007408 <TIM_OC2_SetConfig+0xfc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d113      	bne.n	80073d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	4a17      	ldr	r2, [pc, #92]	; (800740c <TIM_OC2_SetConfig+0x100>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC2_SetConfig+0x104>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	621a      	str	r2, [r3, #32]
}
 80073ec:	46c0      	nop			; (mov r8, r8)
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b006      	add	sp, #24
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	ffff8fff 	.word	0xffff8fff
 80073f8:	fffffcff 	.word	0xfffffcff
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800
 800740c:	fffffbff 	.word	0xfffffbff
 8007410:	fffff7ff 	.word	0xfffff7ff

08007414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	4a35      	ldr	r2, [pc, #212]	; (80074f8 <TIM_OC3_SetConfig+0xe4>)
 8007424:	401a      	ands	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2270      	movs	r2, #112	; 0x70
 8007440:	4393      	bics	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2203      	movs	r2, #3
 8007448:	4393      	bics	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <TIM_OC3_SetConfig+0xe8>)
 800745a:	4013      	ands	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a24      	ldr	r2, [pc, #144]	; (8007500 <TIM_OC3_SetConfig+0xec>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d10d      	bne.n	800748e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	4a23      	ldr	r2, [pc, #140]	; (8007504 <TIM_OC3_SetConfig+0xf0>)
 8007476:	4013      	ands	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <TIM_OC3_SetConfig+0xf4>)
 800748a:	4013      	ands	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1b      	ldr	r2, [pc, #108]	; (8007500 <TIM_OC3_SetConfig+0xec>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00b      	beq.n	80074ae <TIM_OC3_SetConfig+0x9a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <TIM_OC3_SetConfig+0xf8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d007      	beq.n	80074ae <TIM_OC3_SetConfig+0x9a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <TIM_OC3_SetConfig+0xfc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_OC3_SetConfig+0x9a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <TIM_OC3_SetConfig+0x100>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d113      	bne.n	80074d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4a19      	ldr	r2, [pc, #100]	; (8007518 <TIM_OC3_SetConfig+0x104>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4a18      	ldr	r2, [pc, #96]	; (800751c <TIM_OC3_SetConfig+0x108>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	621a      	str	r2, [r3, #32]
}
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b006      	add	sp, #24
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	fffffeff 	.word	0xfffffeff
 80074fc:	fffffdff 	.word	0xfffffdff
 8007500:	40012c00 	.word	0x40012c00
 8007504:	fffff7ff 	.word	0xfffff7ff
 8007508:	fffffbff 	.word	0xfffffbff
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800
 8007518:	ffffefff 	.word	0xffffefff
 800751c:	ffffdfff 	.word	0xffffdfff

08007520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	4a28      	ldr	r2, [pc, #160]	; (80075d0 <TIM_OC4_SetConfig+0xb0>)
 8007530:	401a      	ands	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <TIM_OC4_SetConfig+0xb4>)
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <TIM_OC4_SetConfig+0xb8>)
 8007554:	4013      	ands	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <TIM_OC4_SetConfig+0xbc>)
 8007568:	4013      	ands	r3, r2
 800756a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <TIM_OC4_SetConfig+0xc0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_OC4_SetConfig+0x78>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <TIM_OC4_SetConfig+0xc4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_OC4_SetConfig+0x78>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <TIM_OC4_SetConfig+0xc8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC4_SetConfig+0x78>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a16      	ldr	r2, [pc, #88]	; (80075ec <TIM_OC4_SetConfig+0xcc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d109      	bne.n	80075ac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <TIM_OC4_SetConfig+0xd0>)
 800759c:	4013      	ands	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	019b      	lsls	r3, r3, #6
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	621a      	str	r2, [r3, #32]
}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b006      	add	sp, #24
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	ffffefff 	.word	0xffffefff
 80075d4:	ffff8fff 	.word	0xffff8fff
 80075d8:	fffffcff 	.word	0xfffffcff
 80075dc:	ffffdfff 	.word	0xffffdfff
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800
 80075f0:	ffffbfff 	.word	0xffffbfff

080075f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	2201      	movs	r2, #1
 8007608:	4393      	bics	r3, r2
 800760a:	001a      	movs	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <TIM_TI1_SetConfig+0xa4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_TI1_SetConfig+0x40>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a1d      	ldr	r2, [pc, #116]	; (800769c <TIM_TI1_SetConfig+0xa8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_TI1_SetConfig+0x40>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <TIM_TI1_SetConfig+0xac>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d101      	bne.n	8007638 <TIM_TI1_SetConfig+0x44>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <TIM_TI1_SetConfig+0x46>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2203      	movs	r2, #3
 8007642:	4393      	bics	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e003      	b.n	8007658 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2201      	movs	r2, #1
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	22f0      	movs	r2, #240	; 0xf0
 800765c:	4393      	bics	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	4013      	ands	r3, r2
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	220a      	movs	r2, #10
 8007672:	4393      	bics	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	220a      	movs	r2, #10
 800767a:	4013      	ands	r3, r2
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b006      	add	sp, #24
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40000400 	.word	0x40000400
 80076a0:	40014000 	.word	0x40014000

080076a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	2201      	movs	r2, #1
 80076bc:	4393      	bics	r3, r2
 80076be:	001a      	movs	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	22f0      	movs	r2, #240	; 0xf0
 80076ce:	4393      	bics	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	220a      	movs	r2, #10
 80076e0:	4393      	bics	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	46c0      	nop			; (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b006      	add	sp, #24
 80076fe:	bd80      	pop	{r7, pc}

08007700 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	2210      	movs	r2, #16
 8007714:	4393      	bics	r3, r2
 8007716:	001a      	movs	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4a14      	ldr	r2, [pc, #80]	; (800777c <TIM_TI2_SetConfig+0x7c>)
 800772c:	4013      	ands	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	4a10      	ldr	r2, [pc, #64]	; (8007780 <TIM_TI2_SetConfig+0x80>)
 800773e:	4013      	ands	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	031b      	lsls	r3, r3, #12
 8007746:	041b      	lsls	r3, r3, #16
 8007748:	0c1b      	lsrs	r3, r3, #16
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	22a0      	movs	r2, #160	; 0xa0
 8007754:	4393      	bics	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	22a0      	movs	r2, #160	; 0xa0
 800775e:	4013      	ands	r3, r2
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b006      	add	sp, #24
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	fffffcff 	.word	0xfffffcff
 8007780:	ffff0fff 	.word	0xffff0fff

08007784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	2210      	movs	r2, #16
 8007796:	4393      	bics	r3, r2
 8007798:	001a      	movs	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	4a0d      	ldr	r2, [pc, #52]	; (80077e4 <TIM_TI2_ConfigInputStage+0x60>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	031b      	lsls	r3, r3, #12
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	22a0      	movs	r2, #160	; 0xa0
 80077c0:	4393      	bics	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	46bd      	mov	sp, r7
 80077de:	b006      	add	sp, #24
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	ffff0fff 	.word	0xffff0fff

080077e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	4a19      	ldr	r2, [pc, #100]	; (8007860 <TIM_TI3_SetConfig+0x78>)
 80077fc:	401a      	ands	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2203      	movs	r2, #3
 8007812:	4393      	bics	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	22f0      	movs	r2, #240	; 0xf0
 8007822:	4393      	bics	r3, r2
 8007824:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	22ff      	movs	r2, #255	; 0xff
 800782c:	4013      	ands	r3, r2
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4a0b      	ldr	r2, [pc, #44]	; (8007864 <TIM_TI3_SetConfig+0x7c>)
 8007838:	4013      	ands	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	021a      	lsls	r2, r3, #8
 8007840:	23a0      	movs	r3, #160	; 0xa0
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	4013      	ands	r3, r2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	621a      	str	r2, [r3, #32]
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b006      	add	sp, #24
 800785e:	bd80      	pop	{r7, pc}
 8007860:	fffffeff 	.word	0xfffffeff
 8007864:	fffff5ff 	.word	0xfffff5ff

08007868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	4a1a      	ldr	r2, [pc, #104]	; (80078e4 <TIM_TI4_SetConfig+0x7c>)
 800787c:	401a      	ands	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <TIM_TI4_SetConfig+0x80>)
 8007892:	4013      	ands	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4a12      	ldr	r2, [pc, #72]	; (80078ec <TIM_TI4_SetConfig+0x84>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	031b      	lsls	r3, r3, #12
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	0c1b      	lsrs	r3, r3, #16
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4a0d      	ldr	r2, [pc, #52]	; (80078f0 <TIM_TI4_SetConfig+0x88>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	031a      	lsls	r2, r3, #12
 80078c2:	23a0      	movs	r3, #160	; 0xa0
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	4013      	ands	r3, r2
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	46bd      	mov	sp, r7
 80078de:	b006      	add	sp, #24
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	ffffefff 	.word	0xffffefff
 80078e8:	fffffcff 	.word	0xfffffcff
 80078ec:	ffff0fff 	.word	0xffff0fff
 80078f0:	ffff5fff 	.word	0xffff5fff

080078f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2270      	movs	r2, #112	; 0x70
 8007908:	4393      	bics	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	2207      	movs	r2, #7
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	609a      	str	r2, [r3, #8]
}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <TIM_ETR_SetConfig+0x3c>)
 8007940:	4013      	ands	r3, r2
 8007942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	021a      	lsls	r2, r3, #8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	431a      	orrs	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4313      	orrs	r3, r2
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	609a      	str	r2, [r3, #8]
}
 800795c:	46c0      	nop			; (mov r8, r8)
 800795e:	46bd      	mov	sp, r7
 8007960:	b006      	add	sp, #24
 8007962:	bd80      	pop	{r7, pc}
 8007964:	ffff00ff 	.word	0xffff00ff

08007968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	221f      	movs	r2, #31
 8007978:	4013      	ands	r3, r2
 800797a:	2201      	movs	r2, #1
 800797c:	409a      	lsls	r2, r3
 800797e:	0013      	movs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	43d2      	mvns	r2, r2
 800798a:	401a      	ands	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	211f      	movs	r1, #31
 8007998:	400b      	ands	r3, r1
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4099      	lsls	r1, r3
 800799e:	000b      	movs	r3, r1
 80079a0:	431a      	orrs	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b006      	add	sp, #24
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	223c      	movs	r2, #60	; 0x3c
 80079be:	5c9b      	ldrb	r3, [r3, r2]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e041      	b.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	223c      	movs	r2, #60	; 0x3c
 80079cc:	2101      	movs	r1, #1
 80079ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	223d      	movs	r2, #61	; 0x3d
 80079d4:	2102      	movs	r1, #2
 80079d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2270      	movs	r2, #112	; 0x70
 80079ec:	4393      	bics	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a11      	ldr	r2, [pc, #68]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a10      	ldr	r2, [pc, #64]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10c      	bne.n	8007a3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2280      	movs	r2, #128	; 0x80
 8007a24:	4393      	bics	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	223d      	movs	r2, #61	; 0x3d
 8007a3e:	2101      	movs	r1, #1
 8007a40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	223c      	movs	r2, #60	; 0x3c
 8007a46:	2100      	movs	r1, #0
 8007a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b004      	add	sp, #16
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40014000 	.word	0x40014000

08007a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	223c      	movs	r2, #60	; 0x3c
 8007a72:	5c9b      	ldrb	r3, [r3, r2]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e03e      	b.n	8007afa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	223c      	movs	r2, #60	; 0x3c
 8007a80:	2101      	movs	r1, #1
 8007a82:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	22ff      	movs	r2, #255	; 0xff
 8007a88:	4393      	bics	r3, r2
 8007a8a:	001a      	movs	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a1b      	ldr	r2, [pc, #108]	; (8007b04 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007a98:	401a      	ands	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007ab4:	401a      	ands	r2, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007ad0:	401a      	ands	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4a0e      	ldr	r2, [pc, #56]	; (8007b18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007ade:	401a      	ands	r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	223c      	movs	r2, #60	; 0x3c
 8007af4:	2100      	movs	r1, #0
 8007af6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	0018      	movs	r0, r3
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b004      	add	sp, #16
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	fffffcff 	.word	0xfffffcff
 8007b08:	fffffbff 	.word	0xfffffbff
 8007b0c:	fffff7ff 	.word	0xfffff7ff
 8007b10:	ffffefff 	.word	0xffffefff
 8007b14:	ffffdfff 	.word	0xffffdfff
 8007b18:	ffffbfff 	.word	0xffffbfff

08007b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b002      	add	sp, #8
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b34:	46c0      	nop			; (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b002      	add	sp, #8
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e044      	b.n	8007bd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d107      	bne.n	8007b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2274      	movs	r2, #116	; 0x74
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7fc ff35 	bl	80049d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2224      	movs	r2, #36	; 0x24
 8007b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2101      	movs	r1, #1
 8007b78:	438a      	bics	r2, r1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f000 fcc2 	bl	8008508 <UART_SetConfig>
 8007b84:	0003      	movs	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e024      	b.n	8007bd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f000 fe0d 	bl	80087b8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	490d      	ldr	r1, [pc, #52]	; (8007be0 <HAL_UART_Init+0xa4>)
 8007baa:	400a      	ands	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2108      	movs	r1, #8
 8007bba:	438a      	bics	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2101      	movs	r1, #1
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fea5 	bl	8008920 <UART_CheckIdleState>
 8007bd6:	0003      	movs	r3, r0
}
 8007bd8:	0018      	movs	r0, r3
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	fffff7ff 	.word	0xfffff7ff

08007be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	; 0x28
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	1dbb      	adds	r3, r7, #6
 8007bf2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d000      	beq.n	8007bfe <HAL_UART_Transmit+0x1a>
 8007bfc:	e096      	b.n	8007d2c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_UART_Transmit+0x28>
 8007c04:	1dbb      	adds	r3, r7, #6
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e08e      	b.n	8007d2e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	015b      	lsls	r3, r3, #5
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d109      	bne.n	8007c30 <HAL_UART_Transmit+0x4c>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d105      	bne.n	8007c30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2201      	movs	r2, #1
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d001      	beq.n	8007c30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e07e      	b.n	8007d2e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2274      	movs	r2, #116	; 0x74
 8007c34:	5c9b      	ldrb	r3, [r3, r2]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_UART_Transmit+0x5a>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e077      	b.n	8007d2e <HAL_UART_Transmit+0x14a>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2274      	movs	r2, #116	; 0x74
 8007c42:	2101      	movs	r1, #1
 8007c44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2221      	movs	r2, #33	; 0x21
 8007c52:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c54:	f7fd f90e 	bl	8004e74 <HAL_GetTick>
 8007c58:	0003      	movs	r3, r0
 8007c5a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	1dba      	adds	r2, r7, #6
 8007c60:	2150      	movs	r1, #80	; 0x50
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1dba      	adds	r2, r7, #6
 8007c6a:	2152      	movs	r1, #82	; 0x52
 8007c6c:	8812      	ldrh	r2, [r2, #0]
 8007c6e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	015b      	lsls	r3, r3, #5
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d108      	bne.n	8007c8e <HAL_UART_Transmit+0xaa>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	e003      	b.n	8007c96 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2274      	movs	r2, #116	; 0x74
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007c9e:	e02d      	b.n	8007cfc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	0013      	movs	r3, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	2180      	movs	r1, #128	; 0x80
 8007cae:	f000 fe7f 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8007cb2:	1e03      	subs	r3, r0, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e039      	b.n	8007d2e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	881a      	ldrh	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	05d2      	lsls	r2, r2, #23
 8007cca:	0dd2      	lsrs	r2, r2, #23
 8007ccc:	b292      	uxth	r2, r2
 8007cce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	e008      	b.n	8007cea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2252      	movs	r2, #82	; 0x52
 8007cee:	5a9b      	ldrh	r3, [r3, r2]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b299      	uxth	r1, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2252      	movs	r2, #82	; 0x52
 8007cfa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2252      	movs	r2, #82	; 0x52
 8007d00:	5a9b      	ldrh	r3, [r3, r2]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1cb      	bne.n	8007ca0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	0013      	movs	r3, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	f000 fe4b 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e005      	b.n	8007d2e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007d2c:	2302      	movs	r3, #2
  }
}
 8007d2e:	0018      	movs	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b008      	add	sp, #32
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	1dbb      	adds	r3, r7, #6
 8007d44:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d000      	beq.n	8007d50 <HAL_UART_Transmit_DMA+0x18>
 8007d4e:	e08a      	b.n	8007e66 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_UART_Transmit_DMA+0x26>
 8007d56:	1dbb      	adds	r3, r7, #6
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e082      	b.n	8007e68 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	2380      	movs	r3, #128	; 0x80
 8007d68:	015b      	lsls	r3, r3, #5
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d109      	bne.n	8007d82 <HAL_UART_Transmit_DMA+0x4a>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d105      	bne.n	8007d82 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	d001      	beq.n	8007d82 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e072      	b.n	8007e68 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2274      	movs	r2, #116	; 0x74
 8007d86:	5c9b      	ldrb	r3, [r3, r2]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <HAL_UART_Transmit_DMA+0x58>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e06b      	b.n	8007e68 <HAL_UART_Transmit_DMA+0x130>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2274      	movs	r2, #116	; 0x74
 8007d94:	2101      	movs	r1, #1
 8007d96:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1dba      	adds	r2, r7, #6
 8007da2:	2150      	movs	r1, #80	; 0x50
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1dba      	adds	r2, r7, #6
 8007dac:	2152      	movs	r1, #82	; 0x52
 8007dae:	8812      	ldrh	r2, [r2, #0]
 8007db0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2280      	movs	r2, #128	; 0x80
 8007db6:	2100      	movs	r1, #0
 8007db8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2221      	movs	r2, #33	; 0x21
 8007dbe:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d02b      	beq.n	8007e20 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dcc:	4a28      	ldr	r2, [pc, #160]	; (8007e70 <HAL_UART_Transmit_DMA+0x138>)
 8007dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd4:	4a27      	ldr	r2, [pc, #156]	; (8007e74 <HAL_UART_Transmit_DMA+0x13c>)
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ddc:	4a26      	ldr	r2, [pc, #152]	; (8007e78 <HAL_UART_Transmit_DMA+0x140>)
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de4:	2200      	movs	r2, #0
 8007de6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df0:	0019      	movs	r1, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3328      	adds	r3, #40	; 0x28
 8007df8:	001a      	movs	r2, r3
 8007dfa:	1dbb      	adds	r3, r7, #6
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	f7fd f98d 	bl	800511c <HAL_DMA_Start_IT>
 8007e02:	1e03      	subs	r3, r0, #0
 8007e04:	d00c      	beq.n	8007e20 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2280      	movs	r2, #128	; 0x80
 8007e0a:	2110      	movs	r1, #16
 8007e0c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2274      	movs	r2, #116	; 0x74
 8007e12:	2100      	movs	r1, #0
 8007e14:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e023      	b.n	8007e68 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2240      	movs	r2, #64	; 0x40
 8007e26:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2274      	movs	r2, #116	; 0x74
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e30:	f3ef 8310 	mrs	r3, PRIMASK
 8007e34:	613b      	str	r3, [r7, #16]
  return(result);
 8007e36:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f383 8810 	msr	PRIMASK, r3
}
 8007e44:	46c0      	nop			; (mov r8, r8)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	430a      	orrs	r2, r1
 8007e54:	609a      	str	r2, [r3, #8]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f383 8810 	msr	PRIMASK, r3
}
 8007e60:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b008      	add	sp, #32
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08008d89 	.word	0x08008d89
 8007e74:	08008e1d 	.word	0x08008e1d
 8007e78:	08008f9d 	.word	0x08008f9d

08007e7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	1dbb      	adds	r3, r7, #6
 8007e88:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d150      	bne.n	8007f34 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_UART_Receive_DMA+0x24>
 8007e98:	1dbb      	adds	r3, r7, #6
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e048      	b.n	8007f36 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	2380      	movs	r3, #128	; 0x80
 8007eaa:	015b      	lsls	r3, r3, #5
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d109      	bne.n	8007ec4 <HAL_UART_Receive_DMA+0x48>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d105      	bne.n	8007ec4 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d001      	beq.n	8007ec4 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e038      	b.n	8007f36 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2274      	movs	r2, #116	; 0x74
 8007ec8:	5c9b      	ldrb	r3, [r3, r2]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UART_Receive_DMA+0x56>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e031      	b.n	8007f36 <HAL_UART_Receive_DMA+0xba>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2274      	movs	r2, #116	; 0x74
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	2380      	movs	r3, #128	; 0x80
 8007ee8:	041b      	lsls	r3, r3, #16
 8007eea:	4013      	ands	r3, r2
 8007eec:	d019      	beq.n	8007f22 <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eee:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ef4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	2301      	movs	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f383 8810 	msr	PRIMASK, r3
}
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	04c9      	lsls	r1, r1, #19
 8007f12:	430a      	orrs	r2, r1
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	f383 8810 	msr	PRIMASK, r3
}
 8007f20:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f22:	1dbb      	adds	r3, r7, #6
 8007f24:	881a      	ldrh	r2, [r3, #0]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f000 fe04 	bl	8008b38 <UART_Start_Receive_DMA>
 8007f30:	0003      	movs	r3, r0
 8007f32:	e000      	b.n	8007f36 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b008      	add	sp, #32
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b0ab      	sub	sp, #172	; 0xac
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	22a4      	movs	r2, #164	; 0xa4
 8007f50:	18b9      	adds	r1, r7, r2
 8007f52:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	20a0      	movs	r0, #160	; 0xa0
 8007f5c:	1839      	adds	r1, r7, r0
 8007f5e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	219c      	movs	r1, #156	; 0x9c
 8007f68:	1879      	adds	r1, r7, r1
 8007f6a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f6c:	0011      	movs	r1, r2
 8007f6e:	18bb      	adds	r3, r7, r2
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a99      	ldr	r2, [pc, #612]	; (80081d8 <HAL_UART_IRQHandler+0x298>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	2298      	movs	r2, #152	; 0x98
 8007f78:	18bc      	adds	r4, r7, r2
 8007f7a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007f7c:	18bb      	adds	r3, r7, r2
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d114      	bne.n	8007fae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f84:	187b      	adds	r3, r7, r1
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d00f      	beq.n	8007fae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f8e:	183b      	adds	r3, r7, r0
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2220      	movs	r2, #32
 8007f94:	4013      	ands	r3, r2
 8007f96:	d00a      	beq.n	8007fae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d100      	bne.n	8007fa2 <HAL_UART_IRQHandler+0x62>
 8007fa0:	e27e      	b.n	80084a0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	0010      	movs	r0, r2
 8007faa:	4798      	blx	r3
      }
      return;
 8007fac:	e278      	b.n	80084a0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fae:	2398      	movs	r3, #152	; 0x98
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d100      	bne.n	8007fba <HAL_UART_IRQHandler+0x7a>
 8007fb8:	e114      	b.n	80081e4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fba:	239c      	movs	r3, #156	; 0x9c
 8007fbc:	18fb      	adds	r3, r7, r3
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	d106      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fc6:	23a0      	movs	r3, #160	; 0xa0
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a83      	ldr	r2, [pc, #524]	; (80081dc <HAL_UART_IRQHandler+0x29c>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d100      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x94>
 8007fd2:	e107      	b.n	80081e4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fd4:	23a4      	movs	r3, #164	; 0xa4
 8007fd6:	18fb      	adds	r3, r7, r3
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4013      	ands	r3, r2
 8007fde:	d012      	beq.n	8008006 <HAL_UART_IRQHandler+0xc6>
 8007fe0:	23a0      	movs	r3, #160	; 0xa0
 8007fe2:	18fb      	adds	r3, r7, r3
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	4013      	ands	r3, r2
 8007fec:	d00b      	beq.n	8008006 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2280      	movs	r2, #128	; 0x80
 8007ffa:	589b      	ldr	r3, [r3, r2]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2180      	movs	r1, #128	; 0x80
 8008004:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008006:	23a4      	movs	r3, #164	; 0xa4
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2202      	movs	r2, #2
 800800e:	4013      	ands	r3, r2
 8008010:	d011      	beq.n	8008036 <HAL_UART_IRQHandler+0xf6>
 8008012:	239c      	movs	r3, #156	; 0x9c
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2201      	movs	r2, #1
 800801a:	4013      	ands	r3, r2
 800801c:	d00b      	beq.n	8008036 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2202      	movs	r2, #2
 8008024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2280      	movs	r2, #128	; 0x80
 800802a:	589b      	ldr	r3, [r3, r2]
 800802c:	2204      	movs	r2, #4
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2180      	movs	r1, #128	; 0x80
 8008034:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008036:	23a4      	movs	r3, #164	; 0xa4
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2204      	movs	r2, #4
 800803e:	4013      	ands	r3, r2
 8008040:	d011      	beq.n	8008066 <HAL_UART_IRQHandler+0x126>
 8008042:	239c      	movs	r3, #156	; 0x9c
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2201      	movs	r2, #1
 800804a:	4013      	ands	r3, r2
 800804c:	d00b      	beq.n	8008066 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2204      	movs	r2, #4
 8008054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2280      	movs	r2, #128	; 0x80
 800805a:	589b      	ldr	r3, [r3, r2]
 800805c:	2202      	movs	r2, #2
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2180      	movs	r1, #128	; 0x80
 8008064:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008066:	23a4      	movs	r3, #164	; 0xa4
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2208      	movs	r2, #8
 800806e:	4013      	ands	r3, r2
 8008070:	d017      	beq.n	80080a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008072:	23a0      	movs	r3, #160	; 0xa0
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2220      	movs	r2, #32
 800807a:	4013      	ands	r3, r2
 800807c:	d105      	bne.n	800808a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800807e:	239c      	movs	r3, #156	; 0x9c
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2201      	movs	r2, #1
 8008086:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008088:	d00b      	beq.n	80080a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2208      	movs	r2, #8
 8008090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2280      	movs	r2, #128	; 0x80
 8008096:	589b      	ldr	r3, [r3, r2]
 8008098:	2208      	movs	r2, #8
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080a2:	23a4      	movs	r3, #164	; 0xa4
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	4013      	ands	r3, r2
 80080ae:	d013      	beq.n	80080d8 <HAL_UART_IRQHandler+0x198>
 80080b0:	23a0      	movs	r3, #160	; 0xa0
 80080b2:	18fb      	adds	r3, r7, r3
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	04db      	lsls	r3, r3, #19
 80080ba:	4013      	ands	r3, r2
 80080bc:	d00c      	beq.n	80080d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2280      	movs	r2, #128	; 0x80
 80080c4:	0112      	lsls	r2, r2, #4
 80080c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2280      	movs	r2, #128	; 0x80
 80080cc:	589b      	ldr	r3, [r3, r2]
 80080ce:	2220      	movs	r2, #32
 80080d0:	431a      	orrs	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2180      	movs	r1, #128	; 0x80
 80080d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2280      	movs	r2, #128	; 0x80
 80080dc:	589b      	ldr	r3, [r3, r2]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d100      	bne.n	80080e4 <HAL_UART_IRQHandler+0x1a4>
 80080e2:	e1df      	b.n	80084a4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080e4:	23a4      	movs	r3, #164	; 0xa4
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2220      	movs	r2, #32
 80080ec:	4013      	ands	r3, r2
 80080ee:	d00e      	beq.n	800810e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080f0:	23a0      	movs	r3, #160	; 0xa0
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2220      	movs	r2, #32
 80080f8:	4013      	ands	r3, r2
 80080fa:	d008      	beq.n	800810e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	0010      	movs	r0, r2
 800810c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	589b      	ldr	r3, [r3, r2]
 8008114:	2194      	movs	r1, #148	; 0x94
 8008116:	187a      	adds	r2, r7, r1
 8008118:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2240      	movs	r2, #64	; 0x40
 8008122:	4013      	ands	r3, r2
 8008124:	2b40      	cmp	r3, #64	; 0x40
 8008126:	d004      	beq.n	8008132 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008128:	187b      	adds	r3, r7, r1
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2228      	movs	r2, #40	; 0x28
 800812e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008130:	d047      	beq.n	80081c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0018      	movs	r0, r3
 8008136:	f000 fdc5 	bl	8008cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	2240      	movs	r2, #64	; 0x40
 8008142:	4013      	ands	r3, r2
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d137      	bne.n	80081b8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008148:	f3ef 8310 	mrs	r3, PRIMASK
 800814c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800814e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008150:	2090      	movs	r0, #144	; 0x90
 8008152:	183a      	adds	r2, r7, r0
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	2301      	movs	r3, #1
 8008158:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815c:	f383 8810 	msr	PRIMASK, r3
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	438a      	bics	r2, r1
 8008170:	609a      	str	r2, [r3, #8]
 8008172:	183b      	adds	r3, r7, r0
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800817a:	f383 8810 	msr	PRIMASK, r3
}
 800817e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008184:	2b00      	cmp	r3, #0
 8008186:	d012      	beq.n	80081ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818c:	4a14      	ldr	r2, [pc, #80]	; (80081e0 <HAL_UART_IRQHandler+0x2a0>)
 800818e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008194:	0018      	movs	r0, r3
 8008196:	f7fd f85f 	bl	8005258 <HAL_DMA_Abort_IT>
 800819a:	1e03      	subs	r3, r0, #0
 800819c:	d01a      	beq.n	80081d4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	0018      	movs	r0, r3
 80081aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	e012      	b.n	80081d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	0018      	movs	r0, r3
 80081b2:	f000 f995 	bl	80084e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b6:	e00d      	b.n	80081d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	0018      	movs	r0, r3
 80081bc:	f000 f990 	bl	80084e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	e008      	b.n	80081d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f000 f98b 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2280      	movs	r2, #128	; 0x80
 80081ce:	2100      	movs	r1, #0
 80081d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80081d2:	e167      	b.n	80084a4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d4:	46c0      	nop			; (mov r8, r8)
    return;
 80081d6:	e165      	b.n	80084a4 <HAL_UART_IRQHandler+0x564>
 80081d8:	0000080f 	.word	0x0000080f
 80081dc:	04000120 	.word	0x04000120
 80081e0:	0800901f 	.word	0x0800901f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d000      	beq.n	80081ee <HAL_UART_IRQHandler+0x2ae>
 80081ec:	e131      	b.n	8008452 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081ee:	23a4      	movs	r3, #164	; 0xa4
 80081f0:	18fb      	adds	r3, r7, r3
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2210      	movs	r2, #16
 80081f6:	4013      	ands	r3, r2
 80081f8:	d100      	bne.n	80081fc <HAL_UART_IRQHandler+0x2bc>
 80081fa:	e12a      	b.n	8008452 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081fc:	23a0      	movs	r3, #160	; 0xa0
 80081fe:	18fb      	adds	r3, r7, r3
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2210      	movs	r2, #16
 8008204:	4013      	ands	r3, r2
 8008206:	d100      	bne.n	800820a <HAL_UART_IRQHandler+0x2ca>
 8008208:	e123      	b.n	8008452 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2210      	movs	r2, #16
 8008210:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2240      	movs	r2, #64	; 0x40
 800821a:	4013      	ands	r3, r2
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	d000      	beq.n	8008222 <HAL_UART_IRQHandler+0x2e2>
 8008220:	e09b      	b.n	800835a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	217e      	movs	r1, #126	; 0x7e
 800822c:	187b      	adds	r3, r7, r1
 800822e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008230:	187b      	adds	r3, r7, r1
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d100      	bne.n	800823a <HAL_UART_IRQHandler+0x2fa>
 8008238:	e136      	b.n	80084a8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2258      	movs	r2, #88	; 0x58
 800823e:	5a9b      	ldrh	r3, [r3, r2]
 8008240:	187a      	adds	r2, r7, r1
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d300      	bcc.n	800824a <HAL_UART_IRQHandler+0x30a>
 8008248:	e12e      	b.n	80084a8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	187a      	adds	r2, r7, r1
 800824e:	215a      	movs	r1, #90	; 0x5a
 8008250:	8812      	ldrh	r2, [r2, #0]
 8008252:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b20      	cmp	r3, #32
 800825c:	d06e      	beq.n	800833c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800825e:	f3ef 8310 	mrs	r3, PRIMASK
 8008262:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008266:	67bb      	str	r3, [r7, #120]	; 0x78
 8008268:	2301      	movs	r3, #1
 800826a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	f383 8810 	msr	PRIMASK, r3
}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	498e      	ldr	r1, [pc, #568]	; (80084b8 <HAL_UART_IRQHandler+0x578>)
 8008280:	400a      	ands	r2, r1
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	f383 8810 	msr	PRIMASK, r3
}
 800828e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008290:	f3ef 8310 	mrs	r3, PRIMASK
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008298:	677b      	str	r3, [r7, #116]	; 0x74
 800829a:	2301      	movs	r3, #1
 800829c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a0:	f383 8810 	msr	PRIMASK, r3
}
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2101      	movs	r1, #1
 80082b2:	438a      	bics	r2, r1
 80082b4:	609a      	str	r2, [r3, #8]
 80082b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082bc:	f383 8810 	msr	PRIMASK, r3
}
 80082c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c2:	f3ef 8310 	mrs	r3, PRIMASK
 80082c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80082c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ca:	673b      	str	r3, [r7, #112]	; 0x70
 80082cc:	2301      	movs	r3, #1
 80082ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d2:	f383 8810 	msr	PRIMASK, r3
}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2140      	movs	r1, #64	; 0x40
 80082e4:	438a      	bics	r2, r1
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ee:	f383 8810 	msr	PRIMASK, r3
}
 80082f2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008300:	f3ef 8310 	mrs	r3, PRIMASK
 8008304:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008306:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800830a:	2301      	movs	r3, #1
 800830c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008310:	f383 8810 	msr	PRIMASK, r3
}
 8008314:	46c0      	nop			; (mov r8, r8)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2110      	movs	r1, #16
 8008322:	438a      	bics	r2, r1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008328:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800832c:	f383 8810 	msr	PRIMASK, r3
}
 8008330:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008336:	0018      	movs	r0, r3
 8008338:	f7fc ff56 	bl	80051e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2258      	movs	r2, #88	; 0x58
 8008340:	5a9a      	ldrh	r2, [r3, r2]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	215a      	movs	r1, #90	; 0x5a
 8008346:	5a5b      	ldrh	r3, [r3, r1]
 8008348:	b29b      	uxth	r3, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	b29a      	uxth	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	0011      	movs	r1, r2
 8008352:	0018      	movs	r0, r3
 8008354:	f000 f8cc 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008358:	e0a6      	b.n	80084a8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2258      	movs	r2, #88	; 0x58
 800835e:	5a99      	ldrh	r1, [r3, r2]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	225a      	movs	r2, #90	; 0x5a
 8008364:	5a9b      	ldrh	r3, [r3, r2]
 8008366:	b29a      	uxth	r2, r3
 8008368:	208e      	movs	r0, #142	; 0x8e
 800836a:	183b      	adds	r3, r7, r0
 800836c:	1a8a      	subs	r2, r1, r2
 800836e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	225a      	movs	r2, #90	; 0x5a
 8008374:	5a9b      	ldrh	r3, [r3, r2]
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d100      	bne.n	800837e <HAL_UART_IRQHandler+0x43e>
 800837c:	e096      	b.n	80084ac <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800837e:	183b      	adds	r3, r7, r0
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d100      	bne.n	8008388 <HAL_UART_IRQHandler+0x448>
 8008386:	e091      	b.n	80084ac <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008388:	f3ef 8310 	mrs	r3, PRIMASK
 800838c:	60fb      	str	r3, [r7, #12]
  return(result);
 800838e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008390:	2488      	movs	r4, #136	; 0x88
 8008392:	193a      	adds	r2, r7, r4
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	2301      	movs	r3, #1
 8008398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f383 8810 	msr	PRIMASK, r3
}
 80083a0:	46c0      	nop			; (mov r8, r8)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4943      	ldr	r1, [pc, #268]	; (80084bc <HAL_UART_IRQHandler+0x57c>)
 80083ae:	400a      	ands	r2, r1
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	193b      	adds	r3, r7, r4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f383 8810 	msr	PRIMASK, r3
}
 80083be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c0:	f3ef 8310 	mrs	r3, PRIMASK
 80083c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80083c6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c8:	2484      	movs	r4, #132	; 0x84
 80083ca:	193a      	adds	r2, r7, r4
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	2301      	movs	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f383 8810 	msr	PRIMASK, r3
}
 80083d8:	46c0      	nop			; (mov r8, r8)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2101      	movs	r1, #1
 80083e6:	438a      	bics	r2, r1
 80083e8:	609a      	str	r2, [r3, #8]
 80083ea:	193b      	adds	r3, r7, r4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840a:	f3ef 8310 	mrs	r3, PRIMASK
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008412:	2480      	movs	r4, #128	; 0x80
 8008414:	193a      	adds	r2, r7, r4
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	2301      	movs	r3, #1
 800841a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f383 8810 	msr	PRIMASK, r3
}
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2110      	movs	r1, #16
 8008430:	438a      	bics	r2, r1
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	193b      	adds	r3, r7, r4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	f383 8810 	msr	PRIMASK, r3
}
 8008440:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008442:	183b      	adds	r3, r7, r0
 8008444:	881a      	ldrh	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	0011      	movs	r1, r2
 800844a:	0018      	movs	r0, r3
 800844c:	f000 f850 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008450:	e02c      	b.n	80084ac <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008452:	23a4      	movs	r3, #164	; 0xa4
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2280      	movs	r2, #128	; 0x80
 800845a:	4013      	ands	r3, r2
 800845c:	d00f      	beq.n	800847e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800845e:	23a0      	movs	r3, #160	; 0xa0
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2280      	movs	r2, #128	; 0x80
 8008466:	4013      	ands	r3, r2
 8008468:	d009      	beq.n	800847e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01e      	beq.n	80084b0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	0010      	movs	r0, r2
 800847a:	4798      	blx	r3
    }
    return;
 800847c:	e018      	b.n	80084b0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800847e:	23a4      	movs	r3, #164	; 0xa4
 8008480:	18fb      	adds	r3, r7, r3
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2240      	movs	r2, #64	; 0x40
 8008486:	4013      	ands	r3, r2
 8008488:	d013      	beq.n	80084b2 <HAL_UART_IRQHandler+0x572>
 800848a:	23a0      	movs	r3, #160	; 0xa0
 800848c:	18fb      	adds	r3, r7, r3
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2240      	movs	r2, #64	; 0x40
 8008492:	4013      	ands	r3, r2
 8008494:	d00d      	beq.n	80084b2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	0018      	movs	r0, r3
 800849a:	f000 fdd7 	bl	800904c <UART_EndTransmit_IT>
    return;
 800849e:	e008      	b.n	80084b2 <HAL_UART_IRQHandler+0x572>
      return;
 80084a0:	46c0      	nop			; (mov r8, r8)
 80084a2:	e006      	b.n	80084b2 <HAL_UART_IRQHandler+0x572>
    return;
 80084a4:	46c0      	nop			; (mov r8, r8)
 80084a6:	e004      	b.n	80084b2 <HAL_UART_IRQHandler+0x572>
      return;
 80084a8:	46c0      	nop			; (mov r8, r8)
 80084aa:	e002      	b.n	80084b2 <HAL_UART_IRQHandler+0x572>
      return;
 80084ac:	46c0      	nop			; (mov r8, r8)
 80084ae:	e000      	b.n	80084b2 <HAL_UART_IRQHandler+0x572>
    return;
 80084b0:	46c0      	nop			; (mov r8, r8)
  }

}
 80084b2:	46bd      	mov	sp, r7
 80084b4:	b02b      	add	sp, #172	; 0xac
 80084b6:	bd90      	pop	{r4, r7, pc}
 80084b8:	fffffeff 	.word	0xfffffeff
 80084bc:	fffffedf 	.word	0xfffffedf

080084c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80084c8:	46c0      	nop			; (mov r8, r8)
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b002      	add	sp, #8
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084d8:	46c0      	nop			; (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	b002      	add	sp, #8
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084e8:	46c0      	nop			; (mov r8, r8)
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b002      	add	sp, #8
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	000a      	movs	r2, r1
 80084fa:	1cbb      	adds	r3, r7, #2
 80084fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b002      	add	sp, #8
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008510:	231e      	movs	r3, #30
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a97      	ldr	r2, [pc, #604]	; (8008794 <UART_SetConfig+0x28c>)
 8008538:	4013      	ands	r3, r2
 800853a:	0019      	movs	r1, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	430a      	orrs	r2, r1
 8008544:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4a92      	ldr	r2, [pc, #584]	; (8008798 <UART_SetConfig+0x290>)
 800854e:	4013      	ands	r3, r2
 8008550:	0019      	movs	r1, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4a89      	ldr	r2, [pc, #548]	; (800879c <UART_SetConfig+0x294>)
 8008576:	4013      	ands	r3, r2
 8008578:	0019      	movs	r1, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	430a      	orrs	r2, r1
 8008582:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a85      	ldr	r2, [pc, #532]	; (80087a0 <UART_SetConfig+0x298>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d127      	bne.n	80085de <UART_SetConfig+0xd6>
 800858e:	4b85      	ldr	r3, [pc, #532]	; (80087a4 <UART_SetConfig+0x29c>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	2203      	movs	r2, #3
 8008594:	4013      	ands	r3, r2
 8008596:	2b03      	cmp	r3, #3
 8008598:	d00d      	beq.n	80085b6 <UART_SetConfig+0xae>
 800859a:	d81b      	bhi.n	80085d4 <UART_SetConfig+0xcc>
 800859c:	2b02      	cmp	r3, #2
 800859e:	d014      	beq.n	80085ca <UART_SetConfig+0xc2>
 80085a0:	d818      	bhi.n	80085d4 <UART_SetConfig+0xcc>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <UART_SetConfig+0xa4>
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d00a      	beq.n	80085c0 <UART_SetConfig+0xb8>
 80085aa:	e013      	b.n	80085d4 <UART_SetConfig+0xcc>
 80085ac:	231f      	movs	r3, #31
 80085ae:	18fb      	adds	r3, r7, r3
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e035      	b.n	8008622 <UART_SetConfig+0x11a>
 80085b6:	231f      	movs	r3, #31
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	e030      	b.n	8008622 <UART_SetConfig+0x11a>
 80085c0:	231f      	movs	r3, #31
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2204      	movs	r2, #4
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	e02b      	b.n	8008622 <UART_SetConfig+0x11a>
 80085ca:	231f      	movs	r3, #31
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	2208      	movs	r2, #8
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e026      	b.n	8008622 <UART_SetConfig+0x11a>
 80085d4:	231f      	movs	r3, #31
 80085d6:	18fb      	adds	r3, r7, r3
 80085d8:	2210      	movs	r2, #16
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	e021      	b.n	8008622 <UART_SetConfig+0x11a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a71      	ldr	r2, [pc, #452]	; (80087a8 <UART_SetConfig+0x2a0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d104      	bne.n	80085f2 <UART_SetConfig+0xea>
 80085e8:	231f      	movs	r3, #31
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	2200      	movs	r2, #0
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	e017      	b.n	8008622 <UART_SetConfig+0x11a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a6d      	ldr	r2, [pc, #436]	; (80087ac <UART_SetConfig+0x2a4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d104      	bne.n	8008606 <UART_SetConfig+0xfe>
 80085fc:	231f      	movs	r3, #31
 80085fe:	18fb      	adds	r3, r7, r3
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e00d      	b.n	8008622 <UART_SetConfig+0x11a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a69      	ldr	r2, [pc, #420]	; (80087b0 <UART_SetConfig+0x2a8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d104      	bne.n	800861a <UART_SetConfig+0x112>
 8008610:	231f      	movs	r3, #31
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e003      	b.n	8008622 <UART_SetConfig+0x11a>
 800861a:	231f      	movs	r3, #31
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	2210      	movs	r2, #16
 8008620:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69da      	ldr	r2, [r3, #28]
 8008626:	2380      	movs	r3, #128	; 0x80
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	429a      	cmp	r2, r3
 800862c:	d15d      	bne.n	80086ea <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800862e:	231f      	movs	r3, #31
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d015      	beq.n	8008664 <UART_SetConfig+0x15c>
 8008638:	dc18      	bgt.n	800866c <UART_SetConfig+0x164>
 800863a:	2b04      	cmp	r3, #4
 800863c:	d00d      	beq.n	800865a <UART_SetConfig+0x152>
 800863e:	dc15      	bgt.n	800866c <UART_SetConfig+0x164>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <UART_SetConfig+0x142>
 8008644:	2b02      	cmp	r3, #2
 8008646:	d005      	beq.n	8008654 <UART_SetConfig+0x14c>
 8008648:	e010      	b.n	800866c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864a:	f7fd fd3b 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 800864e:	0003      	movs	r3, r0
 8008650:	61bb      	str	r3, [r7, #24]
        break;
 8008652:	e012      	b.n	800867a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008654:	4b57      	ldr	r3, [pc, #348]	; (80087b4 <UART_SetConfig+0x2ac>)
 8008656:	61bb      	str	r3, [r7, #24]
        break;
 8008658:	e00f      	b.n	800867a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800865a:	f7fd fcc3 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 800865e:	0003      	movs	r3, r0
 8008660:	61bb      	str	r3, [r7, #24]
        break;
 8008662:	e00a      	b.n	800867a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008664:	2380      	movs	r3, #128	; 0x80
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	61bb      	str	r3, [r7, #24]
        break;
 800866a:	e006      	b.n	800867a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008670:	231e      	movs	r3, #30
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	2201      	movs	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]
        break;
 8008678:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d100      	bne.n	8008682 <UART_SetConfig+0x17a>
 8008680:	e07b      	b.n	800877a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	005a      	lsls	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	18d2      	adds	r2, r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	0019      	movs	r1, r3
 8008694:	0010      	movs	r0, r2
 8008696:	f7f7 fd5d 	bl	8000154 <__udivsi3>
 800869a:	0003      	movs	r3, r0
 800869c:	b29b      	uxth	r3, r3
 800869e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b0f      	cmp	r3, #15
 80086a4:	d91c      	bls.n	80086e0 <UART_SetConfig+0x1d8>
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	2380      	movs	r3, #128	; 0x80
 80086aa:	025b      	lsls	r3, r3, #9
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d217      	bcs.n	80086e0 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	200e      	movs	r0, #14
 80086b6:	183b      	adds	r3, r7, r0
 80086b8:	210f      	movs	r1, #15
 80086ba:	438a      	bics	r2, r1
 80086bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2207      	movs	r2, #7
 80086c6:	4013      	ands	r3, r2
 80086c8:	b299      	uxth	r1, r3
 80086ca:	183b      	adds	r3, r7, r0
 80086cc:	183a      	adds	r2, r7, r0
 80086ce:	8812      	ldrh	r2, [r2, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	183a      	adds	r2, r7, r0
 80086da:	8812      	ldrh	r2, [r2, #0]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e04c      	b.n	800877a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80086e0:	231e      	movs	r3, #30
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e047      	b.n	800877a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086ea:	231f      	movs	r3, #31
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d015      	beq.n	8008720 <UART_SetConfig+0x218>
 80086f4:	dc18      	bgt.n	8008728 <UART_SetConfig+0x220>
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d00d      	beq.n	8008716 <UART_SetConfig+0x20e>
 80086fa:	dc15      	bgt.n	8008728 <UART_SetConfig+0x220>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <UART_SetConfig+0x1fe>
 8008700:	2b02      	cmp	r3, #2
 8008702:	d005      	beq.n	8008710 <UART_SetConfig+0x208>
 8008704:	e010      	b.n	8008728 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008706:	f7fd fcdd 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 800870a:	0003      	movs	r3, r0
 800870c:	61bb      	str	r3, [r7, #24]
        break;
 800870e:	e012      	b.n	8008736 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008710:	4b28      	ldr	r3, [pc, #160]	; (80087b4 <UART_SetConfig+0x2ac>)
 8008712:	61bb      	str	r3, [r7, #24]
        break;
 8008714:	e00f      	b.n	8008736 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008716:	f7fd fc65 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 800871a:	0003      	movs	r3, r0
 800871c:	61bb      	str	r3, [r7, #24]
        break;
 800871e:	e00a      	b.n	8008736 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008720:	2380      	movs	r3, #128	; 0x80
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	61bb      	str	r3, [r7, #24]
        break;
 8008726:	e006      	b.n	8008736 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800872c:	231e      	movs	r3, #30
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]
        break;
 8008734:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01e      	beq.n	800877a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	085a      	lsrs	r2, r3, #1
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	18d2      	adds	r2, r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	0019      	movs	r1, r3
 800874c:	0010      	movs	r0, r2
 800874e:	f7f7 fd01 	bl	8000154 <__udivsi3>
 8008752:	0003      	movs	r3, r0
 8008754:	b29b      	uxth	r3, r3
 8008756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b0f      	cmp	r3, #15
 800875c:	d909      	bls.n	8008772 <UART_SetConfig+0x26a>
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	025b      	lsls	r3, r3, #9
 8008764:	429a      	cmp	r2, r3
 8008766:	d204      	bcs.n	8008772 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	60da      	str	r2, [r3, #12]
 8008770:	e003      	b.n	800877a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8008772:	231e      	movs	r3, #30
 8008774:	18fb      	adds	r3, r7, r3
 8008776:	2201      	movs	r2, #1
 8008778:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008786:	231e      	movs	r3, #30
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	781b      	ldrb	r3, [r3, #0]
}
 800878c:	0018      	movs	r0, r3
 800878e:	46bd      	mov	sp, r7
 8008790:	b008      	add	sp, #32
 8008792:	bd80      	pop	{r7, pc}
 8008794:	efff69f3 	.word	0xefff69f3
 8008798:	ffffcfff 	.word	0xffffcfff
 800879c:	fffff4ff 	.word	0xfffff4ff
 80087a0:	40013800 	.word	0x40013800
 80087a4:	40021000 	.word	0x40021000
 80087a8:	40004400 	.word	0x40004400
 80087ac:	40004800 	.word	0x40004800
 80087b0:	40004c00 	.word	0x40004c00
 80087b4:	007a1200 	.word	0x007a1200

080087b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2201      	movs	r2, #1
 80087c6:	4013      	ands	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4a4a      	ldr	r2, [pc, #296]	; (80088fc <UART_AdvFeatureConfig+0x144>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	0019      	movs	r1, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2202      	movs	r2, #2
 80087e8:	4013      	ands	r3, r2
 80087ea:	d00b      	beq.n	8008804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4a43      	ldr	r2, [pc, #268]	; (8008900 <UART_AdvFeatureConfig+0x148>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	0019      	movs	r1, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2204      	movs	r2, #4
 800880a:	4013      	ands	r3, r2
 800880c:	d00b      	beq.n	8008826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	4a3b      	ldr	r2, [pc, #236]	; (8008904 <UART_AdvFeatureConfig+0x14c>)
 8008816:	4013      	ands	r3, r2
 8008818:	0019      	movs	r1, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	2208      	movs	r2, #8
 800882c:	4013      	ands	r3, r2
 800882e:	d00b      	beq.n	8008848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	4a34      	ldr	r2, [pc, #208]	; (8008908 <UART_AdvFeatureConfig+0x150>)
 8008838:	4013      	ands	r3, r2
 800883a:	0019      	movs	r1, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	2210      	movs	r2, #16
 800884e:	4013      	ands	r3, r2
 8008850:	d00b      	beq.n	800886a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <UART_AdvFeatureConfig+0x154>)
 800885a:	4013      	ands	r3, r2
 800885c:	0019      	movs	r1, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2220      	movs	r2, #32
 8008870:	4013      	ands	r3, r2
 8008872:	d00b      	beq.n	800888c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	4a25      	ldr	r2, [pc, #148]	; (8008910 <UART_AdvFeatureConfig+0x158>)
 800887c:	4013      	ands	r3, r2
 800887e:	0019      	movs	r1, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2240      	movs	r2, #64	; 0x40
 8008892:	4013      	ands	r3, r2
 8008894:	d01d      	beq.n	80088d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	4a1d      	ldr	r2, [pc, #116]	; (8008914 <UART_AdvFeatureConfig+0x15c>)
 800889e:	4013      	ands	r3, r2
 80088a0:	0019      	movs	r1, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088b2:	2380      	movs	r3, #128	; 0x80
 80088b4:	035b      	lsls	r3, r3, #13
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d10b      	bne.n	80088d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4a15      	ldr	r2, [pc, #84]	; (8008918 <UART_AdvFeatureConfig+0x160>)
 80088c2:	4013      	ands	r3, r2
 80088c4:	0019      	movs	r1, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2280      	movs	r2, #128	; 0x80
 80088d8:	4013      	ands	r3, r2
 80088da:	d00b      	beq.n	80088f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4a0e      	ldr	r2, [pc, #56]	; (800891c <UART_AdvFeatureConfig+0x164>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	0019      	movs	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }
}
 80088f4:	46c0      	nop			; (mov r8, r8)
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b002      	add	sp, #8
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	fffdffff 	.word	0xfffdffff
 8008900:	fffeffff 	.word	0xfffeffff
 8008904:	fffbffff 	.word	0xfffbffff
 8008908:	ffff7fff 	.word	0xffff7fff
 800890c:	ffffefff 	.word	0xffffefff
 8008910:	ffffdfff 	.word	0xffffdfff
 8008914:	ffefffff 	.word	0xffefffff
 8008918:	ff9fffff 	.word	0xff9fffff
 800891c:	fff7ffff 	.word	0xfff7ffff

08008920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2280      	movs	r2, #128	; 0x80
 800892c:	2100      	movs	r1, #0
 800892e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008930:	f7fc faa0 	bl	8004e74 <HAL_GetTick>
 8008934:	0003      	movs	r3, r0
 8008936:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2208      	movs	r2, #8
 8008940:	4013      	ands	r3, r2
 8008942:	2b08      	cmp	r3, #8
 8008944:	d10c      	bne.n	8008960 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2280      	movs	r2, #128	; 0x80
 800894a:	0391      	lsls	r1, r2, #14
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	4a17      	ldr	r2, [pc, #92]	; (80089ac <UART_CheckIdleState+0x8c>)
 8008950:	9200      	str	r2, [sp, #0]
 8008952:	2200      	movs	r2, #0
 8008954:	f000 f82c 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008958:	1e03      	subs	r3, r0, #0
 800895a:	d001      	beq.n	8008960 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e021      	b.n	80089a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2204      	movs	r2, #4
 8008968:	4013      	ands	r3, r2
 800896a:	2b04      	cmp	r3, #4
 800896c:	d10c      	bne.n	8008988 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2280      	movs	r2, #128	; 0x80
 8008972:	03d1      	lsls	r1, r2, #15
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4a0d      	ldr	r2, [pc, #52]	; (80089ac <UART_CheckIdleState+0x8c>)
 8008978:	9200      	str	r2, [sp, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	f000 f818 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008980:	1e03      	subs	r3, r0, #0
 8008982:	d001      	beq.n	8008988 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e00d      	b.n	80089a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2274      	movs	r2, #116	; 0x74
 800899e:	2100      	movs	r1, #0
 80089a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b004      	add	sp, #16
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	01ffffff 	.word	0x01ffffff

080089b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b094      	sub	sp, #80	; 0x50
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	1dfb      	adds	r3, r7, #7
 80089be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c0:	e0a3      	b.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089c4:	3301      	adds	r3, #1
 80089c6:	d100      	bne.n	80089ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80089c8:	e09f      	b.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ca:	f7fc fa53 	bl	8004e74 <HAL_GetTick>
 80089ce:	0002      	movs	r2, r0
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d302      	bcc.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d13d      	bne.n	8008a5c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e0:	f3ef 8310 	mrs	r3, PRIMASK
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089e8:	647b      	str	r3, [r7, #68]	; 0x44
 80089ea:	2301      	movs	r3, #1
 80089ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	f383 8810 	msr	PRIMASK, r3
}
 80089f4:	46c0      	nop			; (mov r8, r8)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	494c      	ldr	r1, [pc, #304]	; (8008b34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008a02:	400a      	ands	r2, r1
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	f383 8810 	msr	PRIMASK, r3
}
 8008a10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a12:	f3ef 8310 	mrs	r3, PRIMASK
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	f383 8810 	msr	PRIMASK, r3
}
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2101      	movs	r1, #1
 8008a34:	438a      	bics	r2, r1
 8008a36:	609a      	str	r2, [r3, #8]
 8008a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	f383 8810 	msr	PRIMASK, r3
}
 8008a42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2274      	movs	r2, #116	; 0x74
 8008a54:	2100      	movs	r1, #0
 8008a56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e067      	b.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2204      	movs	r2, #4
 8008a64:	4013      	ands	r3, r2
 8008a66:	d050      	beq.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69da      	ldr	r2, [r3, #28]
 8008a6e:	2380      	movs	r3, #128	; 0x80
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	401a      	ands	r2, r3
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d146      	bne.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2280      	movs	r2, #128	; 0x80
 8008a82:	0112      	lsls	r2, r2, #4
 8008a84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a86:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8a:	613b      	str	r3, [r7, #16]
  return(result);
 8008a8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a90:	2301      	movs	r3, #1
 8008a92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f383 8810 	msr	PRIMASK, r3
}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4923      	ldr	r1, [pc, #140]	; (8008b34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008aa8:	400a      	ands	r2, r1
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f383 8810 	msr	PRIMASK, r3
}
 8008ab6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8008abc:	61fb      	str	r3, [r7, #28]
  return(result);
 8008abe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	f383 8810 	msr	PRIMASK, r3
}
 8008acc:	46c0      	nop			; (mov r8, r8)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2101      	movs	r1, #1
 8008ada:	438a      	bics	r2, r1
 8008adc:	609a      	str	r2, [r3, #8]
 8008ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	f383 8810 	msr	PRIMASK, r3
}
 8008ae8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2280      	movs	r2, #128	; 0x80
 8008afa:	2120      	movs	r1, #32
 8008afc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2274      	movs	r2, #116	; 0x74
 8008b02:	2100      	movs	r1, #0
 8008b04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e010      	b.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4013      	ands	r3, r2
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	425a      	negs	r2, r3
 8008b1a:	4153      	adcs	r3, r2
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	001a      	movs	r2, r3
 8008b20:	1dfb      	adds	r3, r7, #7
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d100      	bne.n	8008b2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008b28:	e74b      	b.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b014      	add	sp, #80	; 0x50
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	fffffe5f 	.word	0xfffffe5f

08008b38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b090      	sub	sp, #64	; 0x40
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	1dbb      	adds	r3, r7, #6
 8008b44:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	1dba      	adds	r2, r7, #6
 8008b50:	2158      	movs	r1, #88	; 0x58
 8008b52:	8812      	ldrh	r2, [r2, #0]
 8008b54:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2280      	movs	r2, #128	; 0x80
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2222      	movs	r2, #34	; 0x22
 8008b62:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d02b      	beq.n	8008bc4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b70:	4a3f      	ldr	r2, [pc, #252]	; (8008c70 <UART_Start_Receive_DMA+0x138>)
 8008b72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b78:	4a3e      	ldr	r2, [pc, #248]	; (8008c74 <UART_Start_Receive_DMA+0x13c>)
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	4a3d      	ldr	r2, [pc, #244]	; (8008c78 <UART_Start_Receive_DMA+0x140>)
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	2200      	movs	r2, #0
 8008b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3324      	adds	r3, #36	; 0x24
 8008b96:	0019      	movs	r1, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	001a      	movs	r2, r3
 8008b9e:	1dbb      	adds	r3, r7, #6
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	f7fc fabb 	bl	800511c <HAL_DMA_Start_IT>
 8008ba6:	1e03      	subs	r3, r0, #0
 8008ba8:	d00c      	beq.n	8008bc4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2280      	movs	r2, #128	; 0x80
 8008bae:	2110      	movs	r1, #16
 8008bb0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2274      	movs	r2, #116	; 0x74
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e050      	b.n	8008c66 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2274      	movs	r2, #116	; 0x74
 8008bc8:	2100      	movs	r1, #0
 8008bca:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008bd2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f383 8810 	msr	PRIMASK, r3
}
 8008be0:	46c0      	nop			; (mov r8, r8)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2180      	movs	r1, #128	; 0x80
 8008bee:	0049      	lsls	r1, r1, #1
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f383 8810 	msr	PRIMASK, r3
}
 8008bfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c00:	f3ef 8310 	mrs	r3, PRIMASK
 8008c04:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c06:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	f383 8810 	msr	PRIMASK, r3
}
 8008c14:	46c0      	nop			; (mov r8, r8)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2101      	movs	r1, #1
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	f383 8810 	msr	PRIMASK, r3
}
 8008c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c32:	f3ef 8310 	mrs	r3, PRIMASK
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	f383 8810 	msr	PRIMASK, r3
}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2140      	movs	r1, #64	; 0x40
 8008c54:	430a      	orrs	r2, r1
 8008c56:	609a      	str	r2, [r3, #8]
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	f383 8810 	msr	PRIMASK, r3
}
 8008c62:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	0018      	movs	r0, r3
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b010      	add	sp, #64	; 0x40
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	08008e3d 	.word	0x08008e3d
 8008c74:	08008f61 	.word	0x08008f61
 8008c78:	08008f9d 	.word	0x08008f9d

08008c7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c84:	f3ef 8310 	mrs	r3, PRIMASK
 8008c88:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	2301      	movs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f383 8810 	msr	PRIMASK, r3
}
 8008c98:	46c0      	nop			; (mov r8, r8)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	21c0      	movs	r1, #192	; 0xc0
 8008ca6:	438a      	bics	r2, r1
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f383 8810 	msr	PRIMASK, r3
}
 8008cb4:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008cbc:	46c0      	nop			; (mov r8, r8)
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	b006      	add	sp, #24
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08e      	sub	sp, #56	; 0x38
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8008cd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	f383 8810 	msr	PRIMASK, r3
}
 8008ce0:	46c0      	nop			; (mov r8, r8)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4925      	ldr	r1, [pc, #148]	; (8008d84 <UART_EndRxTransfer+0xc0>)
 8008cee:	400a      	ands	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	f383 8810 	msr	PRIMASK, r3
}
 8008cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8008d02:	623b      	str	r3, [r7, #32]
  return(result);
 8008d04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	633b      	str	r3, [r7, #48]	; 0x30
 8008d08:	2301      	movs	r3, #1
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	f383 8810 	msr	PRIMASK, r3
}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2101      	movs	r1, #1
 8008d20:	438a      	bics	r2, r1
 8008d22:	609a      	str	r2, [r3, #8]
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	f383 8810 	msr	PRIMASK, r3
}
 8008d2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d118      	bne.n	8008d6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d38:	f3ef 8310 	mrs	r3, PRIMASK
 8008d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d42:	2301      	movs	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f383 8810 	msr	PRIMASK, r3
}
 8008d4c:	46c0      	nop			; (mov r8, r8)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2110      	movs	r1, #16
 8008d5a:	438a      	bics	r2, r1
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f383 8810 	msr	PRIMASK, r3
}
 8008d68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008d7c:	46c0      	nop			; (mov r8, r8)
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	b00e      	add	sp, #56	; 0x38
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	fffffedf 	.word	0xfffffedf

08008d88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08c      	sub	sp, #48	; 0x30
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	d035      	beq.n	8008e0a <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2252      	movs	r2, #82	; 0x52
 8008da2:	2100      	movs	r1, #0
 8008da4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da6:	f3ef 8310 	mrs	r3, PRIMASK
 8008daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dac:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008db0:	2301      	movs	r3, #1
 8008db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f383 8810 	msr	PRIMASK, r3
}
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2180      	movs	r1, #128	; 0x80
 8008dc8:	438a      	bics	r2, r1
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f383 8810 	msr	PRIMASK, r3
}
 8008dd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ddc:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dde:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
 8008de2:	2301      	movs	r3, #1
 8008de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	f383 8810 	msr	PRIMASK, r3
}
 8008dec:	46c0      	nop			; (mov r8, r8)
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	f383 8810 	msr	PRIMASK, r3
}
 8008e08:	e004      	b.n	8008e14 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f7fb fc13 	bl	8004638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e12:	46c0      	nop			; (mov r8, r8)
 8008e14:	46c0      	nop			; (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b00c      	add	sp, #48	; 0x30
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	f7ff fb47 	bl	80084c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	46bd      	mov	sp, r7
 8008e36:	b004      	add	sp, #16
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b094      	sub	sp, #80	; 0x50
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d06e      	beq.n	8008f30 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8008e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e54:	225a      	movs	r2, #90	; 0x5a
 8008e56:	2100      	movs	r1, #0
 8008e58:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e60:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e64:	2301      	movs	r3, #1
 8008e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f383 8810 	msr	PRIMASK, r3
}
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4938      	ldr	r1, [pc, #224]	; (8008f5c <UART_DMAReceiveCplt+0x120>)
 8008e7c:	400a      	ands	r2, r1
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	f383 8810 	msr	PRIMASK, r3
}
 8008e8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e94:	647b      	str	r3, [r7, #68]	; 0x44
 8008e96:	2301      	movs	r3, #1
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	f383 8810 	msr	PRIMASK, r3
}
 8008ea0:	46c0      	nop			; (mov r8, r8)
 8008ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2101      	movs	r1, #1
 8008eae:	438a      	bics	r2, r1
 8008eb0:	609a      	str	r2, [r3, #8]
 8008eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	f383 8810 	msr	PRIMASK, r3
}
 8008ebc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ec8:	2301      	movs	r3, #1
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	f383 8810 	msr	PRIMASK, r3
}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2140      	movs	r1, #64	; 0x40
 8008ee0:	438a      	bics	r2, r1
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	f383 8810 	msr	PRIMASK, r3
}
 8008eee:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d118      	bne.n	8008f30 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efe:	f3ef 8310 	mrs	r3, PRIMASK
 8008f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f04:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f08:	2301      	movs	r3, #1
 8008f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f383 8810 	msr	PRIMASK, r3
}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2110      	movs	r1, #16
 8008f20:	438a      	bics	r2, r1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f383 8810 	msr	PRIMASK, r3
}
 8008f2e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d108      	bne.n	8008f4a <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3a:	2258      	movs	r2, #88	; 0x58
 8008f3c:	5a9a      	ldrh	r2, [r3, r2]
 8008f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f40:	0011      	movs	r1, r2
 8008f42:	0018      	movs	r0, r3
 8008f44:	f7ff fad4 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f48:	e003      	b.n	8008f52 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8008f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	f7fb fb81 	bl	8004654 <HAL_UART_RxCpltCallback>
}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b014      	add	sp, #80	; 0x50
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	fffffeff 	.word	0xfffffeff

08008f60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10a      	bne.n	8008f8c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2258      	movs	r2, #88	; 0x58
 8008f7a:	5a9b      	ldrh	r3, [r3, r2]
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0011      	movs	r1, r2
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7ff fab3 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f8a:	e003      	b.n	8008f94 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	0018      	movs	r0, r3
 8008f90:	f7ff fa9e 	bl	80084d0 <HAL_UART_RxHalfCpltCallback>
}
 8008f94:	46c0      	nop			; (mov r8, r8)
 8008f96:	46bd      	mov	sp, r7
 8008f98:	b004      	add	sp, #16
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	2280      	movs	r2, #128	; 0x80
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b80      	cmp	r3, #128	; 0x80
 8008fc2:	d10a      	bne.n	8008fda <UART_DMAError+0x3e>
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b21      	cmp	r3, #33	; 0x21
 8008fc8:	d107      	bne.n	8008fda <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2252      	movs	r2, #82	; 0x52
 8008fce:	2100      	movs	r1, #0
 8008fd0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f7ff fe51 	bl	8008c7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2240      	movs	r2, #64	; 0x40
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	2b40      	cmp	r3, #64	; 0x40
 8008fe6:	d10a      	bne.n	8008ffe <UART_DMAError+0x62>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b22      	cmp	r3, #34	; 0x22
 8008fec:	d107      	bne.n	8008ffe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	225a      	movs	r2, #90	; 0x5a
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7ff fe63 	bl	8008cc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2280      	movs	r2, #128	; 0x80
 8009002:	589b      	ldr	r3, [r3, r2]
 8009004:	2210      	movs	r2, #16
 8009006:	431a      	orrs	r2, r3
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2180      	movs	r1, #128	; 0x80
 800900c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	0018      	movs	r0, r3
 8009012:	f7ff fa65 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	46bd      	mov	sp, r7
 800901a:	b006      	add	sp, #24
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	225a      	movs	r2, #90	; 0x5a
 8009030:	2100      	movs	r1, #0
 8009032:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2252      	movs	r2, #82	; 0x52
 8009038:	2100      	movs	r1, #0
 800903a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	0018      	movs	r0, r3
 8009040:	f7ff fa4e 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009044:	46c0      	nop			; (mov r8, r8)
 8009046:	46bd      	mov	sp, r7
 8009048:	b004      	add	sp, #16
 800904a:	bd80      	pop	{r7, pc}

0800904c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009054:	f3ef 8310 	mrs	r3, PRIMASK
 8009058:	60bb      	str	r3, [r7, #8]
  return(result);
 800905a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	2301      	movs	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f383 8810 	msr	PRIMASK, r3
}
 8009068:	46c0      	nop			; (mov r8, r8)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2140      	movs	r1, #64	; 0x40
 8009076:	438a      	bics	r2, r1
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f383 8810 	msr	PRIMASK, r3
}
 8009084:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	0018      	movs	r0, r3
 8009096:	f7fb facf 	bl	8004638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	46bd      	mov	sp, r7
 800909e:	b006      	add	sp, #24
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <__errno>:
 80090a4:	4b01      	ldr	r3, [pc, #4]	; (80090ac <__errno+0x8>)
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	4770      	bx	lr
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	2000000c 	.word	0x2000000c

080090b0 <__libc_init_array>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	2600      	movs	r6, #0
 80090b4:	4d0c      	ldr	r5, [pc, #48]	; (80090e8 <__libc_init_array+0x38>)
 80090b6:	4c0d      	ldr	r4, [pc, #52]	; (80090ec <__libc_init_array+0x3c>)
 80090b8:	1b64      	subs	r4, r4, r5
 80090ba:	10a4      	asrs	r4, r4, #2
 80090bc:	42a6      	cmp	r6, r4
 80090be:	d109      	bne.n	80090d4 <__libc_init_array+0x24>
 80090c0:	2600      	movs	r6, #0
 80090c2:	f005 f975 	bl	800e3b0 <_init>
 80090c6:	4d0a      	ldr	r5, [pc, #40]	; (80090f0 <__libc_init_array+0x40>)
 80090c8:	4c0a      	ldr	r4, [pc, #40]	; (80090f4 <__libc_init_array+0x44>)
 80090ca:	1b64      	subs	r4, r4, r5
 80090cc:	10a4      	asrs	r4, r4, #2
 80090ce:	42a6      	cmp	r6, r4
 80090d0:	d105      	bne.n	80090de <__libc_init_array+0x2e>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	00b3      	lsls	r3, r6, #2
 80090d6:	58eb      	ldr	r3, [r5, r3]
 80090d8:	4798      	blx	r3
 80090da:	3601      	adds	r6, #1
 80090dc:	e7ee      	b.n	80090bc <__libc_init_array+0xc>
 80090de:	00b3      	lsls	r3, r6, #2
 80090e0:	58eb      	ldr	r3, [r5, r3]
 80090e2:	4798      	blx	r3
 80090e4:	3601      	adds	r6, #1
 80090e6:	e7f2      	b.n	80090ce <__libc_init_array+0x1e>
 80090e8:	0800ea7c 	.word	0x0800ea7c
 80090ec:	0800ea7c 	.word	0x0800ea7c
 80090f0:	0800ea7c 	.word	0x0800ea7c
 80090f4:	0800ea80 	.word	0x0800ea80

080090f8 <memset>:
 80090f8:	0003      	movs	r3, r0
 80090fa:	1882      	adds	r2, r0, r2
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d100      	bne.n	8009102 <memset+0xa>
 8009100:	4770      	bx	lr
 8009102:	7019      	strb	r1, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	e7f9      	b.n	80090fc <memset+0x4>

08009108 <__cvt>:
 8009108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910a:	001e      	movs	r6, r3
 800910c:	2300      	movs	r3, #0
 800910e:	0014      	movs	r4, r2
 8009110:	b08b      	sub	sp, #44	; 0x2c
 8009112:	429e      	cmp	r6, r3
 8009114:	da04      	bge.n	8009120 <__cvt+0x18>
 8009116:	2180      	movs	r1, #128	; 0x80
 8009118:	0609      	lsls	r1, r1, #24
 800911a:	1873      	adds	r3, r6, r1
 800911c:	001e      	movs	r6, r3
 800911e:	232d      	movs	r3, #45	; 0x2d
 8009120:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009122:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009124:	7013      	strb	r3, [r2, #0]
 8009126:	2320      	movs	r3, #32
 8009128:	2203      	movs	r2, #3
 800912a:	439f      	bics	r7, r3
 800912c:	2f46      	cmp	r7, #70	; 0x46
 800912e:	d007      	beq.n	8009140 <__cvt+0x38>
 8009130:	003b      	movs	r3, r7
 8009132:	3b45      	subs	r3, #69	; 0x45
 8009134:	4259      	negs	r1, r3
 8009136:	414b      	adcs	r3, r1
 8009138:	9910      	ldr	r1, [sp, #64]	; 0x40
 800913a:	3a01      	subs	r2, #1
 800913c:	18cb      	adds	r3, r1, r3
 800913e:	9310      	str	r3, [sp, #64]	; 0x40
 8009140:	ab09      	add	r3, sp, #36	; 0x24
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	ab08      	add	r3, sp, #32
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800914a:	9200      	str	r2, [sp, #0]
 800914c:	9302      	str	r3, [sp, #8]
 800914e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009150:	0022      	movs	r2, r4
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	0033      	movs	r3, r6
 8009156:	f001 fe83 	bl	800ae60 <_dtoa_r>
 800915a:	0005      	movs	r5, r0
 800915c:	2f47      	cmp	r7, #71	; 0x47
 800915e:	d102      	bne.n	8009166 <__cvt+0x5e>
 8009160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009162:	07db      	lsls	r3, r3, #31
 8009164:	d528      	bpl.n	80091b8 <__cvt+0xb0>
 8009166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009168:	18eb      	adds	r3, r5, r3
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	2f46      	cmp	r7, #70	; 0x46
 800916e:	d114      	bne.n	800919a <__cvt+0x92>
 8009170:	782b      	ldrb	r3, [r5, #0]
 8009172:	2b30      	cmp	r3, #48	; 0x30
 8009174:	d10c      	bne.n	8009190 <__cvt+0x88>
 8009176:	2200      	movs	r2, #0
 8009178:	2300      	movs	r3, #0
 800917a:	0020      	movs	r0, r4
 800917c:	0031      	movs	r1, r6
 800917e:	f7f7 f96f 	bl	8000460 <__aeabi_dcmpeq>
 8009182:	2800      	cmp	r0, #0
 8009184:	d104      	bne.n	8009190 <__cvt+0x88>
 8009186:	2301      	movs	r3, #1
 8009188:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009192:	9a07      	ldr	r2, [sp, #28]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	18d3      	adds	r3, r2, r3
 8009198:	9307      	str	r3, [sp, #28]
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	0020      	movs	r0, r4
 80091a0:	0031      	movs	r1, r6
 80091a2:	f7f7 f95d 	bl	8000460 <__aeabi_dcmpeq>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d001      	beq.n	80091ae <__cvt+0xa6>
 80091aa:	9b07      	ldr	r3, [sp, #28]
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	2230      	movs	r2, #48	; 0x30
 80091b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b2:	9907      	ldr	r1, [sp, #28]
 80091b4:	428b      	cmp	r3, r1
 80091b6:	d306      	bcc.n	80091c6 <__cvt+0xbe>
 80091b8:	0028      	movs	r0, r5
 80091ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091be:	1b5b      	subs	r3, r3, r5
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	b00b      	add	sp, #44	; 0x2c
 80091c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c6:	1c59      	adds	r1, r3, #1
 80091c8:	9109      	str	r1, [sp, #36]	; 0x24
 80091ca:	701a      	strb	r2, [r3, #0]
 80091cc:	e7f0      	b.n	80091b0 <__cvt+0xa8>

080091ce <__exponent>:
 80091ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d0:	1c83      	adds	r3, r0, #2
 80091d2:	b087      	sub	sp, #28
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	0005      	movs	r5, r0
 80091d8:	000c      	movs	r4, r1
 80091da:	232b      	movs	r3, #43	; 0x2b
 80091dc:	7002      	strb	r2, [r0, #0]
 80091de:	2900      	cmp	r1, #0
 80091e0:	da01      	bge.n	80091e6 <__exponent+0x18>
 80091e2:	424c      	negs	r4, r1
 80091e4:	3302      	adds	r3, #2
 80091e6:	706b      	strb	r3, [r5, #1]
 80091e8:	2c09      	cmp	r4, #9
 80091ea:	dd31      	ble.n	8009250 <__exponent+0x82>
 80091ec:	270a      	movs	r7, #10
 80091ee:	ab04      	add	r3, sp, #16
 80091f0:	1dde      	adds	r6, r3, #7
 80091f2:	0020      	movs	r0, r4
 80091f4:	0039      	movs	r1, r7
 80091f6:	9601      	str	r6, [sp, #4]
 80091f8:	f7f7 f91c 	bl	8000434 <__aeabi_idivmod>
 80091fc:	3e01      	subs	r6, #1
 80091fe:	3130      	adds	r1, #48	; 0x30
 8009200:	0020      	movs	r0, r4
 8009202:	7031      	strb	r1, [r6, #0]
 8009204:	0039      	movs	r1, r7
 8009206:	9402      	str	r4, [sp, #8]
 8009208:	f7f7 f82e 	bl	8000268 <__divsi3>
 800920c:	9b02      	ldr	r3, [sp, #8]
 800920e:	0004      	movs	r4, r0
 8009210:	2b63      	cmp	r3, #99	; 0x63
 8009212:	dcee      	bgt.n	80091f2 <__exponent+0x24>
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	3430      	adds	r4, #48	; 0x30
 8009218:	1e9a      	subs	r2, r3, #2
 800921a:	0013      	movs	r3, r2
 800921c:	9903      	ldr	r1, [sp, #12]
 800921e:	7014      	strb	r4, [r2, #0]
 8009220:	a804      	add	r0, sp, #16
 8009222:	3007      	adds	r0, #7
 8009224:	4298      	cmp	r0, r3
 8009226:	d80e      	bhi.n	8009246 <__exponent+0x78>
 8009228:	ab04      	add	r3, sp, #16
 800922a:	3307      	adds	r3, #7
 800922c:	2000      	movs	r0, #0
 800922e:	429a      	cmp	r2, r3
 8009230:	d804      	bhi.n	800923c <__exponent+0x6e>
 8009232:	ab04      	add	r3, sp, #16
 8009234:	3009      	adds	r0, #9
 8009236:	18c0      	adds	r0, r0, r3
 8009238:	9b01      	ldr	r3, [sp, #4]
 800923a:	1ac0      	subs	r0, r0, r3
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	1818      	adds	r0, r3, r0
 8009240:	1b40      	subs	r0, r0, r5
 8009242:	b007      	add	sp, #28
 8009244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009246:	7818      	ldrb	r0, [r3, #0]
 8009248:	3301      	adds	r3, #1
 800924a:	7008      	strb	r0, [r1, #0]
 800924c:	3101      	adds	r1, #1
 800924e:	e7e7      	b.n	8009220 <__exponent+0x52>
 8009250:	2330      	movs	r3, #48	; 0x30
 8009252:	18e4      	adds	r4, r4, r3
 8009254:	70ab      	strb	r3, [r5, #2]
 8009256:	1d28      	adds	r0, r5, #4
 8009258:	70ec      	strb	r4, [r5, #3]
 800925a:	e7f1      	b.n	8009240 <__exponent+0x72>

0800925c <_printf_float>:
 800925c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800925e:	b095      	sub	sp, #84	; 0x54
 8009260:	000c      	movs	r4, r1
 8009262:	9208      	str	r2, [sp, #32]
 8009264:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009266:	9309      	str	r3, [sp, #36]	; 0x24
 8009268:	0007      	movs	r7, r0
 800926a:	f002 ff89 	bl	800c180 <_localeconv_r>
 800926e:	6803      	ldr	r3, [r0, #0]
 8009270:	0018      	movs	r0, r3
 8009272:	930b      	str	r3, [sp, #44]	; 0x2c
 8009274:	f7f6 ff52 	bl	800011c <strlen>
 8009278:	2300      	movs	r3, #0
 800927a:	9312      	str	r3, [sp, #72]	; 0x48
 800927c:	7e23      	ldrb	r3, [r4, #24]
 800927e:	2207      	movs	r2, #7
 8009280:	001e      	movs	r6, r3
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	900d      	str	r0, [sp, #52]	; 0x34
 8009286:	930c      	str	r3, [sp, #48]	; 0x30
 8009288:	990c      	ldr	r1, [sp, #48]	; 0x30
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	05c9      	lsls	r1, r1, #23
 800928e:	d547      	bpl.n	8009320 <_printf_float+0xc4>
 8009290:	189b      	adds	r3, r3, r2
 8009292:	4393      	bics	r3, r2
 8009294:	001a      	movs	r2, r3
 8009296:	3208      	adds	r2, #8
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	64a2      	str	r2, [r4, #72]	; 0x48
 80092a0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80092a2:	2201      	movs	r2, #1
 80092a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80092a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80092a8:	930a      	str	r3, [sp, #40]	; 0x28
 80092aa:	006b      	lsls	r3, r5, #1
 80092ac:	085b      	lsrs	r3, r3, #1
 80092ae:	930e      	str	r3, [sp, #56]	; 0x38
 80092b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092b2:	4ba8      	ldr	r3, [pc, #672]	; (8009554 <_printf_float+0x2f8>)
 80092b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80092b6:	4252      	negs	r2, r2
 80092b8:	f7f9 f986 	bl	80025c8 <__aeabi_dcmpun>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d131      	bne.n	8009324 <_printf_float+0xc8>
 80092c0:	2201      	movs	r2, #1
 80092c2:	4ba4      	ldr	r3, [pc, #656]	; (8009554 <_printf_float+0x2f8>)
 80092c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80092c8:	4252      	negs	r2, r2
 80092ca:	f7f7 f8d9 	bl	8000480 <__aeabi_dcmple>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d128      	bne.n	8009324 <_printf_float+0xc8>
 80092d2:	2200      	movs	r2, #0
 80092d4:	2300      	movs	r3, #0
 80092d6:	0029      	movs	r1, r5
 80092d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092da:	f7f7 f8c7 	bl	800046c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d003      	beq.n	80092ea <_printf_float+0x8e>
 80092e2:	0023      	movs	r3, r4
 80092e4:	222d      	movs	r2, #45	; 0x2d
 80092e6:	3343      	adds	r3, #67	; 0x43
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	4d9b      	ldr	r5, [pc, #620]	; (8009558 <_printf_float+0x2fc>)
 80092ec:	2e47      	cmp	r6, #71	; 0x47
 80092ee:	d900      	bls.n	80092f2 <_printf_float+0x96>
 80092f0:	4d9a      	ldr	r5, [pc, #616]	; (800955c <_printf_float+0x300>)
 80092f2:	2303      	movs	r3, #3
 80092f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	3301      	adds	r3, #1
 80092fa:	439a      	bics	r2, r3
 80092fc:	2300      	movs	r3, #0
 80092fe:	6022      	str	r2, [r4, #0]
 8009300:	930a      	str	r3, [sp, #40]	; 0x28
 8009302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009304:	0021      	movs	r1, r4
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	0038      	movs	r0, r7
 800930a:	9b08      	ldr	r3, [sp, #32]
 800930c:	aa13      	add	r2, sp, #76	; 0x4c
 800930e:	f000 f9f3 	bl	80096f8 <_printf_common>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	d000      	beq.n	8009318 <_printf_float+0xbc>
 8009316:	e09e      	b.n	8009456 <_printf_float+0x1fa>
 8009318:	2001      	movs	r0, #1
 800931a:	4240      	negs	r0, r0
 800931c:	b015      	add	sp, #84	; 0x54
 800931e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009320:	3307      	adds	r3, #7
 8009322:	e7b6      	b.n	8009292 <_printf_float+0x36>
 8009324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009326:	002b      	movs	r3, r5
 8009328:	0010      	movs	r0, r2
 800932a:	0029      	movs	r1, r5
 800932c:	f7f9 f94c 	bl	80025c8 <__aeabi_dcmpun>
 8009330:	2800      	cmp	r0, #0
 8009332:	d00a      	beq.n	800934a <_printf_float+0xee>
 8009334:	2d00      	cmp	r5, #0
 8009336:	da03      	bge.n	8009340 <_printf_float+0xe4>
 8009338:	0023      	movs	r3, r4
 800933a:	222d      	movs	r2, #45	; 0x2d
 800933c:	3343      	adds	r3, #67	; 0x43
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	4d87      	ldr	r5, [pc, #540]	; (8009560 <_printf_float+0x304>)
 8009342:	2e47      	cmp	r6, #71	; 0x47
 8009344:	d9d5      	bls.n	80092f2 <_printf_float+0x96>
 8009346:	4d87      	ldr	r5, [pc, #540]	; (8009564 <_printf_float+0x308>)
 8009348:	e7d3      	b.n	80092f2 <_printf_float+0x96>
 800934a:	2220      	movs	r2, #32
 800934c:	0031      	movs	r1, r6
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	4391      	bics	r1, r2
 8009352:	910e      	str	r1, [sp, #56]	; 0x38
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	d147      	bne.n	80093e8 <_printf_float+0x18c>
 8009358:	3307      	adds	r3, #7
 800935a:	6063      	str	r3, [r4, #4]
 800935c:	2380      	movs	r3, #128	; 0x80
 800935e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4313      	orrs	r3, r2
 8009364:	2200      	movs	r2, #0
 8009366:	9206      	str	r2, [sp, #24]
 8009368:	aa12      	add	r2, sp, #72	; 0x48
 800936a:	9205      	str	r2, [sp, #20]
 800936c:	aa11      	add	r2, sp, #68	; 0x44
 800936e:	9203      	str	r2, [sp, #12]
 8009370:	2223      	movs	r2, #35	; 0x23
 8009372:	a908      	add	r1, sp, #32
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	1852      	adds	r2, r2, r1
 800937c:	9202      	str	r2, [sp, #8]
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	0038      	movs	r0, r7
 8009382:	002b      	movs	r3, r5
 8009384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009386:	9604      	str	r6, [sp, #16]
 8009388:	f7ff febe 	bl	8009108 <__cvt>
 800938c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800938e:	0005      	movs	r5, r0
 8009390:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009392:	2b47      	cmp	r3, #71	; 0x47
 8009394:	d108      	bne.n	80093a8 <_printf_float+0x14c>
 8009396:	1ccb      	adds	r3, r1, #3
 8009398:	db02      	blt.n	80093a0 <_printf_float+0x144>
 800939a:	6863      	ldr	r3, [r4, #4]
 800939c:	4299      	cmp	r1, r3
 800939e:	dd46      	ble.n	800942e <_printf_float+0x1d2>
 80093a0:	0033      	movs	r3, r6
 80093a2:	3b02      	subs	r3, #2
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	001e      	movs	r6, r3
 80093a8:	2e65      	cmp	r6, #101	; 0x65
 80093aa:	d824      	bhi.n	80093f6 <_printf_float+0x19a>
 80093ac:	0020      	movs	r0, r4
 80093ae:	0032      	movs	r2, r6
 80093b0:	3901      	subs	r1, #1
 80093b2:	3050      	adds	r0, #80	; 0x50
 80093b4:	9111      	str	r1, [sp, #68]	; 0x44
 80093b6:	f7ff ff0a 	bl	80091ce <__exponent>
 80093ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093bc:	900a      	str	r0, [sp, #40]	; 0x28
 80093be:	1813      	adds	r3, r2, r0
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	2a01      	cmp	r2, #1
 80093c4:	dc02      	bgt.n	80093cc <_printf_float+0x170>
 80093c6:	6822      	ldr	r2, [r4, #0]
 80093c8:	07d2      	lsls	r2, r2, #31
 80093ca:	d501      	bpl.n	80093d0 <_printf_float+0x174>
 80093cc:	3301      	adds	r3, #1
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	2323      	movs	r3, #35	; 0x23
 80093d2:	aa08      	add	r2, sp, #32
 80093d4:	189b      	adds	r3, r3, r2
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d100      	bne.n	80093de <_printf_float+0x182>
 80093dc:	e791      	b.n	8009302 <_printf_float+0xa6>
 80093de:	0023      	movs	r3, r4
 80093e0:	222d      	movs	r2, #45	; 0x2d
 80093e2:	3343      	adds	r3, #67	; 0x43
 80093e4:	701a      	strb	r2, [r3, #0]
 80093e6:	e78c      	b.n	8009302 <_printf_float+0xa6>
 80093e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ea:	2a47      	cmp	r2, #71	; 0x47
 80093ec:	d1b6      	bne.n	800935c <_printf_float+0x100>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1b4      	bne.n	800935c <_printf_float+0x100>
 80093f2:	3301      	adds	r3, #1
 80093f4:	e7b1      	b.n	800935a <_printf_float+0xfe>
 80093f6:	2e66      	cmp	r6, #102	; 0x66
 80093f8:	d11b      	bne.n	8009432 <_printf_float+0x1d6>
 80093fa:	6863      	ldr	r3, [r4, #4]
 80093fc:	2900      	cmp	r1, #0
 80093fe:	dd0d      	ble.n	800941c <_printf_float+0x1c0>
 8009400:	6121      	str	r1, [r4, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <_printf_float+0x1b0>
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	07d2      	lsls	r2, r2, #31
 800940a:	d502      	bpl.n	8009412 <_printf_float+0x1b6>
 800940c:	3301      	adds	r3, #1
 800940e:	1859      	adds	r1, r3, r1
 8009410:	6121      	str	r1, [r4, #16]
 8009412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009414:	65a3      	str	r3, [r4, #88]	; 0x58
 8009416:	2300      	movs	r3, #0
 8009418:	930a      	str	r3, [sp, #40]	; 0x28
 800941a:	e7d9      	b.n	80093d0 <_printf_float+0x174>
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <_printf_float+0x1cc>
 8009420:	2201      	movs	r2, #1
 8009422:	6821      	ldr	r1, [r4, #0]
 8009424:	4211      	tst	r1, r2
 8009426:	d000      	beq.n	800942a <_printf_float+0x1ce>
 8009428:	1c9a      	adds	r2, r3, #2
 800942a:	6122      	str	r2, [r4, #16]
 800942c:	e7f1      	b.n	8009412 <_printf_float+0x1b6>
 800942e:	2367      	movs	r3, #103	; 0x67
 8009430:	001e      	movs	r6, r3
 8009432:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009436:	4293      	cmp	r3, r2
 8009438:	db06      	blt.n	8009448 <_printf_float+0x1ec>
 800943a:	6822      	ldr	r2, [r4, #0]
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	07d2      	lsls	r2, r2, #31
 8009440:	d5e7      	bpl.n	8009412 <_printf_float+0x1b6>
 8009442:	3301      	adds	r3, #1
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	e7e4      	b.n	8009412 <_printf_float+0x1b6>
 8009448:	2101      	movs	r1, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	dc01      	bgt.n	8009452 <_printf_float+0x1f6>
 800944e:	1849      	adds	r1, r1, r1
 8009450:	1ac9      	subs	r1, r1, r3
 8009452:	1852      	adds	r2, r2, r1
 8009454:	e7e9      	b.n	800942a <_printf_float+0x1ce>
 8009456:	6822      	ldr	r2, [r4, #0]
 8009458:	0553      	lsls	r3, r2, #21
 800945a:	d408      	bmi.n	800946e <_printf_float+0x212>
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	002a      	movs	r2, r5
 8009460:	0038      	movs	r0, r7
 8009462:	9908      	ldr	r1, [sp, #32]
 8009464:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009466:	47a8      	blx	r5
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d129      	bne.n	80094c0 <_printf_float+0x264>
 800946c:	e754      	b.n	8009318 <_printf_float+0xbc>
 800946e:	2e65      	cmp	r6, #101	; 0x65
 8009470:	d800      	bhi.n	8009474 <_printf_float+0x218>
 8009472:	e0ec      	b.n	800964e <_printf_float+0x3f2>
 8009474:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009476:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009478:	2200      	movs	r2, #0
 800947a:	2300      	movs	r3, #0
 800947c:	f7f6 fff0 	bl	8000460 <__aeabi_dcmpeq>
 8009480:	2800      	cmp	r0, #0
 8009482:	d034      	beq.n	80094ee <_printf_float+0x292>
 8009484:	2301      	movs	r3, #1
 8009486:	0038      	movs	r0, r7
 8009488:	4a37      	ldr	r2, [pc, #220]	; (8009568 <_printf_float+0x30c>)
 800948a:	9908      	ldr	r1, [sp, #32]
 800948c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800948e:	47a8      	blx	r5
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d100      	bne.n	8009496 <_printf_float+0x23a>
 8009494:	e740      	b.n	8009318 <_printf_float+0xbc>
 8009496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009498:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800949a:	4293      	cmp	r3, r2
 800949c:	db02      	blt.n	80094a4 <_printf_float+0x248>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	07db      	lsls	r3, r3, #31
 80094a2:	d50d      	bpl.n	80094c0 <_printf_float+0x264>
 80094a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80094a6:	0038      	movs	r0, r7
 80094a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ac:	9908      	ldr	r1, [sp, #32]
 80094ae:	47a8      	blx	r5
 80094b0:	2500      	movs	r5, #0
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d100      	bne.n	80094b8 <_printf_float+0x25c>
 80094b6:	e72f      	b.n	8009318 <_printf_float+0xbc>
 80094b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ba:	3b01      	subs	r3, #1
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dc0a      	bgt.n	80094d6 <_printf_float+0x27a>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	079b      	lsls	r3, r3, #30
 80094c4:	d500      	bpl.n	80094c8 <_printf_float+0x26c>
 80094c6:	e114      	b.n	80096f2 <_printf_float+0x496>
 80094c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ca:	68e0      	ldr	r0, [r4, #12]
 80094cc:	4298      	cmp	r0, r3
 80094ce:	db00      	blt.n	80094d2 <_printf_float+0x276>
 80094d0:	e724      	b.n	800931c <_printf_float+0xc0>
 80094d2:	0018      	movs	r0, r3
 80094d4:	e722      	b.n	800931c <_printf_float+0xc0>
 80094d6:	0022      	movs	r2, r4
 80094d8:	2301      	movs	r3, #1
 80094da:	0038      	movs	r0, r7
 80094dc:	9908      	ldr	r1, [sp, #32]
 80094de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094e0:	321a      	adds	r2, #26
 80094e2:	47b0      	blx	r6
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d100      	bne.n	80094ea <_printf_float+0x28e>
 80094e8:	e716      	b.n	8009318 <_printf_float+0xbc>
 80094ea:	3501      	adds	r5, #1
 80094ec:	e7e4      	b.n	80094b8 <_printf_float+0x25c>
 80094ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc3b      	bgt.n	800956c <_printf_float+0x310>
 80094f4:	2301      	movs	r3, #1
 80094f6:	0038      	movs	r0, r7
 80094f8:	4a1b      	ldr	r2, [pc, #108]	; (8009568 <_printf_float+0x30c>)
 80094fa:	9908      	ldr	r1, [sp, #32]
 80094fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094fe:	47b0      	blx	r6
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d100      	bne.n	8009506 <_printf_float+0x2aa>
 8009504:	e708      	b.n	8009318 <_printf_float+0xbc>
 8009506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009508:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800950a:	4313      	orrs	r3, r2
 800950c:	d102      	bne.n	8009514 <_printf_float+0x2b8>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	07db      	lsls	r3, r3, #31
 8009512:	d5d5      	bpl.n	80094c0 <_printf_float+0x264>
 8009514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009516:	0038      	movs	r0, r7
 8009518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800951a:	9908      	ldr	r1, [sp, #32]
 800951c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800951e:	47b0      	blx	r6
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d100      	bne.n	8009526 <_printf_float+0x2ca>
 8009524:	e6f8      	b.n	8009318 <_printf_float+0xbc>
 8009526:	2300      	movs	r3, #0
 8009528:	930a      	str	r3, [sp, #40]	; 0x28
 800952a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800952c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800952e:	425b      	negs	r3, r3
 8009530:	4293      	cmp	r3, r2
 8009532:	dc01      	bgt.n	8009538 <_printf_float+0x2dc>
 8009534:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009536:	e792      	b.n	800945e <_printf_float+0x202>
 8009538:	0022      	movs	r2, r4
 800953a:	2301      	movs	r3, #1
 800953c:	0038      	movs	r0, r7
 800953e:	9908      	ldr	r1, [sp, #32]
 8009540:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009542:	321a      	adds	r2, #26
 8009544:	47b0      	blx	r6
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d100      	bne.n	800954c <_printf_float+0x2f0>
 800954a:	e6e5      	b.n	8009318 <_printf_float+0xbc>
 800954c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954e:	3301      	adds	r3, #1
 8009550:	e7ea      	b.n	8009528 <_printf_float+0x2cc>
 8009552:	46c0      	nop			; (mov r8, r8)
 8009554:	7fefffff 	.word	0x7fefffff
 8009558:	0800e5b8 	.word	0x0800e5b8
 800955c:	0800e5bc 	.word	0x0800e5bc
 8009560:	0800e5c0 	.word	0x0800e5c0
 8009564:	0800e5c4 	.word	0x0800e5c4
 8009568:	0800e9c9 	.word	0x0800e9c9
 800956c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800956e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009570:	920a      	str	r2, [sp, #40]	; 0x28
 8009572:	429a      	cmp	r2, r3
 8009574:	dd00      	ble.n	8009578 <_printf_float+0x31c>
 8009576:	930a      	str	r3, [sp, #40]	; 0x28
 8009578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957a:	2b00      	cmp	r3, #0
 800957c:	dc3d      	bgt.n	80095fa <_printf_float+0x39e>
 800957e:	2300      	movs	r3, #0
 8009580:	930e      	str	r3, [sp, #56]	; 0x38
 8009582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009584:	43db      	mvns	r3, r3
 8009586:	17db      	asrs	r3, r3, #31
 8009588:	930f      	str	r3, [sp, #60]	; 0x3c
 800958a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800958c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800958e:	930c      	str	r3, [sp, #48]	; 0x30
 8009590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009592:	4013      	ands	r3, r2
 8009594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800959a:	4293      	cmp	r3, r2
 800959c:	dc36      	bgt.n	800960c <_printf_float+0x3b0>
 800959e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095a2:	4293      	cmp	r3, r2
 80095a4:	db40      	blt.n	8009628 <_printf_float+0x3cc>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	07db      	lsls	r3, r3, #31
 80095aa:	d43d      	bmi.n	8009628 <_printf_float+0x3cc>
 80095ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	1a52      	subs	r2, r2, r1
 80095b6:	920a      	str	r2, [sp, #40]	; 0x28
 80095b8:	429a      	cmp	r2, r3
 80095ba:	dd00      	ble.n	80095be <_printf_float+0x362>
 80095bc:	930a      	str	r3, [sp, #40]	; 0x28
 80095be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	dc3a      	bgt.n	800963a <_printf_float+0x3de>
 80095c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c6:	2500      	movs	r5, #0
 80095c8:	43db      	mvns	r3, r3
 80095ca:	17db      	asrs	r3, r3, #31
 80095cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095d8:	400a      	ands	r2, r1
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc00      	bgt.n	80095e2 <_printf_float+0x386>
 80095e0:	e76e      	b.n	80094c0 <_printf_float+0x264>
 80095e2:	0022      	movs	r2, r4
 80095e4:	2301      	movs	r3, #1
 80095e6:	0038      	movs	r0, r7
 80095e8:	9908      	ldr	r1, [sp, #32]
 80095ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095ec:	321a      	adds	r2, #26
 80095ee:	47b0      	blx	r6
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d100      	bne.n	80095f6 <_printf_float+0x39a>
 80095f4:	e690      	b.n	8009318 <_printf_float+0xbc>
 80095f6:	3501      	adds	r5, #1
 80095f8:	e7e9      	b.n	80095ce <_printf_float+0x372>
 80095fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fc:	002a      	movs	r2, r5
 80095fe:	0038      	movs	r0, r7
 8009600:	9908      	ldr	r1, [sp, #32]
 8009602:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009604:	47b0      	blx	r6
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d1b9      	bne.n	800957e <_printf_float+0x322>
 800960a:	e685      	b.n	8009318 <_printf_float+0xbc>
 800960c:	0022      	movs	r2, r4
 800960e:	2301      	movs	r3, #1
 8009610:	0038      	movs	r0, r7
 8009612:	9908      	ldr	r1, [sp, #32]
 8009614:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009616:	321a      	adds	r2, #26
 8009618:	47b0      	blx	r6
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d100      	bne.n	8009620 <_printf_float+0x3c4>
 800961e:	e67b      	b.n	8009318 <_printf_float+0xbc>
 8009620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009622:	3301      	adds	r3, #1
 8009624:	930e      	str	r3, [sp, #56]	; 0x38
 8009626:	e7b0      	b.n	800958a <_printf_float+0x32e>
 8009628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800962a:	0038      	movs	r0, r7
 800962c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800962e:	9908      	ldr	r1, [sp, #32]
 8009630:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009632:	47b0      	blx	r6
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d1b9      	bne.n	80095ac <_printf_float+0x350>
 8009638:	e66e      	b.n	8009318 <_printf_float+0xbc>
 800963a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800963c:	0038      	movs	r0, r7
 800963e:	18ea      	adds	r2, r5, r3
 8009640:	9908      	ldr	r1, [sp, #32]
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009646:	47a8      	blx	r5
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d1bb      	bne.n	80095c4 <_printf_float+0x368>
 800964c:	e664      	b.n	8009318 <_printf_float+0xbc>
 800964e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009650:	2b01      	cmp	r3, #1
 8009652:	dc02      	bgt.n	800965a <_printf_float+0x3fe>
 8009654:	2301      	movs	r3, #1
 8009656:	421a      	tst	r2, r3
 8009658:	d038      	beq.n	80096cc <_printf_float+0x470>
 800965a:	2301      	movs	r3, #1
 800965c:	002a      	movs	r2, r5
 800965e:	0038      	movs	r0, r7
 8009660:	9908      	ldr	r1, [sp, #32]
 8009662:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009664:	47b0      	blx	r6
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d100      	bne.n	800966c <_printf_float+0x410>
 800966a:	e655      	b.n	8009318 <_printf_float+0xbc>
 800966c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800966e:	0038      	movs	r0, r7
 8009670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009672:	9908      	ldr	r1, [sp, #32]
 8009674:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009676:	47b0      	blx	r6
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d100      	bne.n	800967e <_printf_float+0x422>
 800967c:	e64c      	b.n	8009318 <_printf_float+0xbc>
 800967e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009680:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009682:	2200      	movs	r2, #0
 8009684:	2300      	movs	r3, #0
 8009686:	f7f6 feeb 	bl	8000460 <__aeabi_dcmpeq>
 800968a:	2800      	cmp	r0, #0
 800968c:	d11c      	bne.n	80096c8 <_printf_float+0x46c>
 800968e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009690:	1c6a      	adds	r2, r5, #1
 8009692:	3b01      	subs	r3, #1
 8009694:	0038      	movs	r0, r7
 8009696:	9908      	ldr	r1, [sp, #32]
 8009698:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800969a:	47a8      	blx	r5
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d10f      	bne.n	80096c0 <_printf_float+0x464>
 80096a0:	e63a      	b.n	8009318 <_printf_float+0xbc>
 80096a2:	0022      	movs	r2, r4
 80096a4:	2301      	movs	r3, #1
 80096a6:	0038      	movs	r0, r7
 80096a8:	9908      	ldr	r1, [sp, #32]
 80096aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80096ac:	321a      	adds	r2, #26
 80096ae:	47b0      	blx	r6
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d100      	bne.n	80096b6 <_printf_float+0x45a>
 80096b4:	e630      	b.n	8009318 <_printf_float+0xbc>
 80096b6:	3501      	adds	r5, #1
 80096b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ba:	3b01      	subs	r3, #1
 80096bc:	42ab      	cmp	r3, r5
 80096be:	dcf0      	bgt.n	80096a2 <_printf_float+0x446>
 80096c0:	0022      	movs	r2, r4
 80096c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c4:	3250      	adds	r2, #80	; 0x50
 80096c6:	e6cb      	b.n	8009460 <_printf_float+0x204>
 80096c8:	2500      	movs	r5, #0
 80096ca:	e7f5      	b.n	80096b8 <_printf_float+0x45c>
 80096cc:	002a      	movs	r2, r5
 80096ce:	e7e1      	b.n	8009694 <_printf_float+0x438>
 80096d0:	0022      	movs	r2, r4
 80096d2:	2301      	movs	r3, #1
 80096d4:	0038      	movs	r0, r7
 80096d6:	9908      	ldr	r1, [sp, #32]
 80096d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80096da:	3219      	adds	r2, #25
 80096dc:	47b0      	blx	r6
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	d100      	bne.n	80096e4 <_printf_float+0x488>
 80096e2:	e619      	b.n	8009318 <_printf_float+0xbc>
 80096e4:	3501      	adds	r5, #1
 80096e6:	68e3      	ldr	r3, [r4, #12]
 80096e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096ea:	1a9b      	subs	r3, r3, r2
 80096ec:	42ab      	cmp	r3, r5
 80096ee:	dcef      	bgt.n	80096d0 <_printf_float+0x474>
 80096f0:	e6ea      	b.n	80094c8 <_printf_float+0x26c>
 80096f2:	2500      	movs	r5, #0
 80096f4:	e7f7      	b.n	80096e6 <_printf_float+0x48a>
 80096f6:	46c0      	nop			; (mov r8, r8)

080096f8 <_printf_common>:
 80096f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096fa:	0015      	movs	r5, r2
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	688a      	ldr	r2, [r1, #8]
 8009700:	690b      	ldr	r3, [r1, #16]
 8009702:	000c      	movs	r4, r1
 8009704:	9000      	str	r0, [sp, #0]
 8009706:	4293      	cmp	r3, r2
 8009708:	da00      	bge.n	800970c <_printf_common+0x14>
 800970a:	0013      	movs	r3, r2
 800970c:	0022      	movs	r2, r4
 800970e:	602b      	str	r3, [r5, #0]
 8009710:	3243      	adds	r2, #67	; 0x43
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	2a00      	cmp	r2, #0
 8009716:	d001      	beq.n	800971c <_printf_common+0x24>
 8009718:	3301      	adds	r3, #1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	069b      	lsls	r3, r3, #26
 8009720:	d502      	bpl.n	8009728 <_printf_common+0x30>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	3302      	adds	r3, #2
 8009726:	602b      	str	r3, [r5, #0]
 8009728:	6822      	ldr	r2, [r4, #0]
 800972a:	2306      	movs	r3, #6
 800972c:	0017      	movs	r7, r2
 800972e:	401f      	ands	r7, r3
 8009730:	421a      	tst	r2, r3
 8009732:	d027      	beq.n	8009784 <_printf_common+0x8c>
 8009734:	0023      	movs	r3, r4
 8009736:	3343      	adds	r3, #67	; 0x43
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	4193      	sbcs	r3, r2
 800973e:	6822      	ldr	r2, [r4, #0]
 8009740:	0692      	lsls	r2, r2, #26
 8009742:	d430      	bmi.n	80097a6 <_printf_common+0xae>
 8009744:	0022      	movs	r2, r4
 8009746:	9901      	ldr	r1, [sp, #4]
 8009748:	9800      	ldr	r0, [sp, #0]
 800974a:	9e08      	ldr	r6, [sp, #32]
 800974c:	3243      	adds	r2, #67	; 0x43
 800974e:	47b0      	blx	r6
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d025      	beq.n	80097a0 <_printf_common+0xa8>
 8009754:	2306      	movs	r3, #6
 8009756:	6820      	ldr	r0, [r4, #0]
 8009758:	682a      	ldr	r2, [r5, #0]
 800975a:	68e1      	ldr	r1, [r4, #12]
 800975c:	2500      	movs	r5, #0
 800975e:	4003      	ands	r3, r0
 8009760:	2b04      	cmp	r3, #4
 8009762:	d103      	bne.n	800976c <_printf_common+0x74>
 8009764:	1a8d      	subs	r5, r1, r2
 8009766:	43eb      	mvns	r3, r5
 8009768:	17db      	asrs	r3, r3, #31
 800976a:	401d      	ands	r5, r3
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	4293      	cmp	r3, r2
 8009772:	dd01      	ble.n	8009778 <_printf_common+0x80>
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	18ed      	adds	r5, r5, r3
 8009778:	2700      	movs	r7, #0
 800977a:	42bd      	cmp	r5, r7
 800977c:	d120      	bne.n	80097c0 <_printf_common+0xc8>
 800977e:	2000      	movs	r0, #0
 8009780:	e010      	b.n	80097a4 <_printf_common+0xac>
 8009782:	3701      	adds	r7, #1
 8009784:	68e3      	ldr	r3, [r4, #12]
 8009786:	682a      	ldr	r2, [r5, #0]
 8009788:	1a9b      	subs	r3, r3, r2
 800978a:	42bb      	cmp	r3, r7
 800978c:	ddd2      	ble.n	8009734 <_printf_common+0x3c>
 800978e:	0022      	movs	r2, r4
 8009790:	2301      	movs	r3, #1
 8009792:	9901      	ldr	r1, [sp, #4]
 8009794:	9800      	ldr	r0, [sp, #0]
 8009796:	9e08      	ldr	r6, [sp, #32]
 8009798:	3219      	adds	r2, #25
 800979a:	47b0      	blx	r6
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d1f0      	bne.n	8009782 <_printf_common+0x8a>
 80097a0:	2001      	movs	r0, #1
 80097a2:	4240      	negs	r0, r0
 80097a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097a6:	2030      	movs	r0, #48	; 0x30
 80097a8:	18e1      	adds	r1, r4, r3
 80097aa:	3143      	adds	r1, #67	; 0x43
 80097ac:	7008      	strb	r0, [r1, #0]
 80097ae:	0021      	movs	r1, r4
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	3145      	adds	r1, #69	; 0x45
 80097b4:	7809      	ldrb	r1, [r1, #0]
 80097b6:	18a2      	adds	r2, r4, r2
 80097b8:	3243      	adds	r2, #67	; 0x43
 80097ba:	3302      	adds	r3, #2
 80097bc:	7011      	strb	r1, [r2, #0]
 80097be:	e7c1      	b.n	8009744 <_printf_common+0x4c>
 80097c0:	0022      	movs	r2, r4
 80097c2:	2301      	movs	r3, #1
 80097c4:	9901      	ldr	r1, [sp, #4]
 80097c6:	9800      	ldr	r0, [sp, #0]
 80097c8:	9e08      	ldr	r6, [sp, #32]
 80097ca:	321a      	adds	r2, #26
 80097cc:	47b0      	blx	r6
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d0e6      	beq.n	80097a0 <_printf_common+0xa8>
 80097d2:	3701      	adds	r7, #1
 80097d4:	e7d1      	b.n	800977a <_printf_common+0x82>
	...

080097d8 <_printf_i>:
 80097d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097da:	b08b      	sub	sp, #44	; 0x2c
 80097dc:	9206      	str	r2, [sp, #24]
 80097de:	000a      	movs	r2, r1
 80097e0:	3243      	adds	r2, #67	; 0x43
 80097e2:	9307      	str	r3, [sp, #28]
 80097e4:	9005      	str	r0, [sp, #20]
 80097e6:	9204      	str	r2, [sp, #16]
 80097e8:	7e0a      	ldrb	r2, [r1, #24]
 80097ea:	000c      	movs	r4, r1
 80097ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097ee:	2a78      	cmp	r2, #120	; 0x78
 80097f0:	d806      	bhi.n	8009800 <_printf_i+0x28>
 80097f2:	2a62      	cmp	r2, #98	; 0x62
 80097f4:	d808      	bhi.n	8009808 <_printf_i+0x30>
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	d100      	bne.n	80097fc <_printf_i+0x24>
 80097fa:	e0c0      	b.n	800997e <_printf_i+0x1a6>
 80097fc:	2a58      	cmp	r2, #88	; 0x58
 80097fe:	d052      	beq.n	80098a6 <_printf_i+0xce>
 8009800:	0026      	movs	r6, r4
 8009802:	3642      	adds	r6, #66	; 0x42
 8009804:	7032      	strb	r2, [r6, #0]
 8009806:	e022      	b.n	800984e <_printf_i+0x76>
 8009808:	0010      	movs	r0, r2
 800980a:	3863      	subs	r0, #99	; 0x63
 800980c:	2815      	cmp	r0, #21
 800980e:	d8f7      	bhi.n	8009800 <_printf_i+0x28>
 8009810:	f7f6 fc96 	bl	8000140 <__gnu_thumb1_case_shi>
 8009814:	001f0016 	.word	0x001f0016
 8009818:	fff6fff6 	.word	0xfff6fff6
 800981c:	fff6fff6 	.word	0xfff6fff6
 8009820:	fff6001f 	.word	0xfff6001f
 8009824:	fff6fff6 	.word	0xfff6fff6
 8009828:	00a8fff6 	.word	0x00a8fff6
 800982c:	009a0036 	.word	0x009a0036
 8009830:	fff6fff6 	.word	0xfff6fff6
 8009834:	fff600b9 	.word	0xfff600b9
 8009838:	fff60036 	.word	0xfff60036
 800983c:	009efff6 	.word	0x009efff6
 8009840:	0026      	movs	r6, r4
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	3642      	adds	r6, #66	; 0x42
 8009846:	1d11      	adds	r1, r2, #4
 8009848:	6019      	str	r1, [r3, #0]
 800984a:	6813      	ldr	r3, [r2, #0]
 800984c:	7033      	strb	r3, [r6, #0]
 800984e:	2301      	movs	r3, #1
 8009850:	e0a7      	b.n	80099a2 <_printf_i+0x1ca>
 8009852:	6808      	ldr	r0, [r1, #0]
 8009854:	6819      	ldr	r1, [r3, #0]
 8009856:	1d0a      	adds	r2, r1, #4
 8009858:	0605      	lsls	r5, r0, #24
 800985a:	d50b      	bpl.n	8009874 <_printf_i+0x9c>
 800985c:	680d      	ldr	r5, [r1, #0]
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	2d00      	cmp	r5, #0
 8009862:	da03      	bge.n	800986c <_printf_i+0x94>
 8009864:	232d      	movs	r3, #45	; 0x2d
 8009866:	9a04      	ldr	r2, [sp, #16]
 8009868:	426d      	negs	r5, r5
 800986a:	7013      	strb	r3, [r2, #0]
 800986c:	4b61      	ldr	r3, [pc, #388]	; (80099f4 <_printf_i+0x21c>)
 800986e:	270a      	movs	r7, #10
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	e032      	b.n	80098da <_printf_i+0x102>
 8009874:	680d      	ldr	r5, [r1, #0]
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	0641      	lsls	r1, r0, #25
 800987a:	d5f1      	bpl.n	8009860 <_printf_i+0x88>
 800987c:	b22d      	sxth	r5, r5
 800987e:	e7ef      	b.n	8009860 <_printf_i+0x88>
 8009880:	680d      	ldr	r5, [r1, #0]
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	1d08      	adds	r0, r1, #4
 8009886:	6018      	str	r0, [r3, #0]
 8009888:	062e      	lsls	r6, r5, #24
 800988a:	d501      	bpl.n	8009890 <_printf_i+0xb8>
 800988c:	680d      	ldr	r5, [r1, #0]
 800988e:	e003      	b.n	8009898 <_printf_i+0xc0>
 8009890:	066d      	lsls	r5, r5, #25
 8009892:	d5fb      	bpl.n	800988c <_printf_i+0xb4>
 8009894:	680d      	ldr	r5, [r1, #0]
 8009896:	b2ad      	uxth	r5, r5
 8009898:	4b56      	ldr	r3, [pc, #344]	; (80099f4 <_printf_i+0x21c>)
 800989a:	270a      	movs	r7, #10
 800989c:	9303      	str	r3, [sp, #12]
 800989e:	2a6f      	cmp	r2, #111	; 0x6f
 80098a0:	d117      	bne.n	80098d2 <_printf_i+0xfa>
 80098a2:	2708      	movs	r7, #8
 80098a4:	e015      	b.n	80098d2 <_printf_i+0xfa>
 80098a6:	3145      	adds	r1, #69	; 0x45
 80098a8:	700a      	strb	r2, [r1, #0]
 80098aa:	4a52      	ldr	r2, [pc, #328]	; (80099f4 <_printf_i+0x21c>)
 80098ac:	9203      	str	r2, [sp, #12]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	6821      	ldr	r1, [r4, #0]
 80098b2:	ca20      	ldmia	r2!, {r5}
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	0608      	lsls	r0, r1, #24
 80098b8:	d550      	bpl.n	800995c <_printf_i+0x184>
 80098ba:	07cb      	lsls	r3, r1, #31
 80098bc:	d502      	bpl.n	80098c4 <_printf_i+0xec>
 80098be:	2320      	movs	r3, #32
 80098c0:	4319      	orrs	r1, r3
 80098c2:	6021      	str	r1, [r4, #0]
 80098c4:	2710      	movs	r7, #16
 80098c6:	2d00      	cmp	r5, #0
 80098c8:	d103      	bne.n	80098d2 <_printf_i+0xfa>
 80098ca:	2320      	movs	r3, #32
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	439a      	bics	r2, r3
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	0023      	movs	r3, r4
 80098d4:	2200      	movs	r2, #0
 80098d6:	3343      	adds	r3, #67	; 0x43
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	db03      	blt.n	80098ea <_printf_i+0x112>
 80098e2:	2204      	movs	r2, #4
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	4391      	bics	r1, r2
 80098e8:	6021      	str	r1, [r4, #0]
 80098ea:	2d00      	cmp	r5, #0
 80098ec:	d102      	bne.n	80098f4 <_printf_i+0x11c>
 80098ee:	9e04      	ldr	r6, [sp, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00c      	beq.n	800990e <_printf_i+0x136>
 80098f4:	9e04      	ldr	r6, [sp, #16]
 80098f6:	0028      	movs	r0, r5
 80098f8:	0039      	movs	r1, r7
 80098fa:	f7f6 fcb1 	bl	8000260 <__aeabi_uidivmod>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	3e01      	subs	r6, #1
 8009902:	5c5b      	ldrb	r3, [r3, r1]
 8009904:	7033      	strb	r3, [r6, #0]
 8009906:	002b      	movs	r3, r5
 8009908:	0005      	movs	r5, r0
 800990a:	429f      	cmp	r7, r3
 800990c:	d9f3      	bls.n	80098f6 <_printf_i+0x11e>
 800990e:	2f08      	cmp	r7, #8
 8009910:	d109      	bne.n	8009926 <_printf_i+0x14e>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	07db      	lsls	r3, r3, #31
 8009916:	d506      	bpl.n	8009926 <_printf_i+0x14e>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	6922      	ldr	r2, [r4, #16]
 800991c:	4293      	cmp	r3, r2
 800991e:	dc02      	bgt.n	8009926 <_printf_i+0x14e>
 8009920:	2330      	movs	r3, #48	; 0x30
 8009922:	3e01      	subs	r6, #1
 8009924:	7033      	strb	r3, [r6, #0]
 8009926:	9b04      	ldr	r3, [sp, #16]
 8009928:	1b9b      	subs	r3, r3, r6
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	9b07      	ldr	r3, [sp, #28]
 800992e:	0021      	movs	r1, r4
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	9805      	ldr	r0, [sp, #20]
 8009934:	9b06      	ldr	r3, [sp, #24]
 8009936:	aa09      	add	r2, sp, #36	; 0x24
 8009938:	f7ff fede 	bl	80096f8 <_printf_common>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d135      	bne.n	80099ac <_printf_i+0x1d4>
 8009940:	2001      	movs	r0, #1
 8009942:	4240      	negs	r0, r0
 8009944:	b00b      	add	sp, #44	; 0x2c
 8009946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009948:	2220      	movs	r2, #32
 800994a:	6809      	ldr	r1, [r1, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	0022      	movs	r2, r4
 8009952:	2178      	movs	r1, #120	; 0x78
 8009954:	3245      	adds	r2, #69	; 0x45
 8009956:	7011      	strb	r1, [r2, #0]
 8009958:	4a27      	ldr	r2, [pc, #156]	; (80099f8 <_printf_i+0x220>)
 800995a:	e7a7      	b.n	80098ac <_printf_i+0xd4>
 800995c:	0648      	lsls	r0, r1, #25
 800995e:	d5ac      	bpl.n	80098ba <_printf_i+0xe2>
 8009960:	b2ad      	uxth	r5, r5
 8009962:	e7aa      	b.n	80098ba <_printf_i+0xe2>
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	680d      	ldr	r5, [r1, #0]
 8009968:	1d10      	adds	r0, r2, #4
 800996a:	6949      	ldr	r1, [r1, #20]
 800996c:	6018      	str	r0, [r3, #0]
 800996e:	6813      	ldr	r3, [r2, #0]
 8009970:	062e      	lsls	r6, r5, #24
 8009972:	d501      	bpl.n	8009978 <_printf_i+0x1a0>
 8009974:	6019      	str	r1, [r3, #0]
 8009976:	e002      	b.n	800997e <_printf_i+0x1a6>
 8009978:	066d      	lsls	r5, r5, #25
 800997a:	d5fb      	bpl.n	8009974 <_printf_i+0x19c>
 800997c:	8019      	strh	r1, [r3, #0]
 800997e:	2300      	movs	r3, #0
 8009980:	9e04      	ldr	r6, [sp, #16]
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	e7d2      	b.n	800992c <_printf_i+0x154>
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	1d11      	adds	r1, r2, #4
 800998a:	6019      	str	r1, [r3, #0]
 800998c:	6816      	ldr	r6, [r2, #0]
 800998e:	2100      	movs	r1, #0
 8009990:	0030      	movs	r0, r6
 8009992:	6862      	ldr	r2, [r4, #4]
 8009994:	f002 fc28 	bl	800c1e8 <memchr>
 8009998:	2800      	cmp	r0, #0
 800999a:	d001      	beq.n	80099a0 <_printf_i+0x1c8>
 800999c:	1b80      	subs	r0, r0, r6
 800999e:	6060      	str	r0, [r4, #4]
 80099a0:	6863      	ldr	r3, [r4, #4]
 80099a2:	6123      	str	r3, [r4, #16]
 80099a4:	2300      	movs	r3, #0
 80099a6:	9a04      	ldr	r2, [sp, #16]
 80099a8:	7013      	strb	r3, [r2, #0]
 80099aa:	e7bf      	b.n	800992c <_printf_i+0x154>
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	0032      	movs	r2, r6
 80099b0:	9906      	ldr	r1, [sp, #24]
 80099b2:	9805      	ldr	r0, [sp, #20]
 80099b4:	9d07      	ldr	r5, [sp, #28]
 80099b6:	47a8      	blx	r5
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d0c1      	beq.n	8009940 <_printf_i+0x168>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	079b      	lsls	r3, r3, #30
 80099c0:	d415      	bmi.n	80099ee <_printf_i+0x216>
 80099c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c4:	68e0      	ldr	r0, [r4, #12]
 80099c6:	4298      	cmp	r0, r3
 80099c8:	dabc      	bge.n	8009944 <_printf_i+0x16c>
 80099ca:	0018      	movs	r0, r3
 80099cc:	e7ba      	b.n	8009944 <_printf_i+0x16c>
 80099ce:	0022      	movs	r2, r4
 80099d0:	2301      	movs	r3, #1
 80099d2:	9906      	ldr	r1, [sp, #24]
 80099d4:	9805      	ldr	r0, [sp, #20]
 80099d6:	9e07      	ldr	r6, [sp, #28]
 80099d8:	3219      	adds	r2, #25
 80099da:	47b0      	blx	r6
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d0af      	beq.n	8009940 <_printf_i+0x168>
 80099e0:	3501      	adds	r5, #1
 80099e2:	68e3      	ldr	r3, [r4, #12]
 80099e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	dcf0      	bgt.n	80099ce <_printf_i+0x1f6>
 80099ec:	e7e9      	b.n	80099c2 <_printf_i+0x1ea>
 80099ee:	2500      	movs	r5, #0
 80099f0:	e7f7      	b.n	80099e2 <_printf_i+0x20a>
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	0800e5c8 	.word	0x0800e5c8
 80099f8:	0800e5d9 	.word	0x0800e5d9

080099fc <_scanf_float>:
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fe:	b08b      	sub	sp, #44	; 0x2c
 8009a00:	0015      	movs	r5, r2
 8009a02:	9001      	str	r0, [sp, #4]
 8009a04:	22ae      	movs	r2, #174	; 0xae
 8009a06:	2000      	movs	r0, #0
 8009a08:	9306      	str	r3, [sp, #24]
 8009a0a:	688b      	ldr	r3, [r1, #8]
 8009a0c:	000e      	movs	r6, r1
 8009a0e:	1e59      	subs	r1, r3, #1
 8009a10:	0052      	lsls	r2, r2, #1
 8009a12:	9005      	str	r0, [sp, #20]
 8009a14:	4291      	cmp	r1, r2
 8009a16:	d905      	bls.n	8009a24 <_scanf_float+0x28>
 8009a18:	3b5e      	subs	r3, #94	; 0x5e
 8009a1a:	3bff      	subs	r3, #255	; 0xff
 8009a1c:	9305      	str	r3, [sp, #20]
 8009a1e:	235e      	movs	r3, #94	; 0x5e
 8009a20:	33ff      	adds	r3, #255	; 0xff
 8009a22:	60b3      	str	r3, [r6, #8]
 8009a24:	23f0      	movs	r3, #240	; 0xf0
 8009a26:	6832      	ldr	r2, [r6, #0]
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	6033      	str	r3, [r6, #0]
 8009a2e:	0033      	movs	r3, r6
 8009a30:	2400      	movs	r4, #0
 8009a32:	331c      	adds	r3, #28
 8009a34:	001f      	movs	r7, r3
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	9402      	str	r4, [sp, #8]
 8009a3a:	9408      	str	r4, [sp, #32]
 8009a3c:	9407      	str	r4, [sp, #28]
 8009a3e:	9400      	str	r4, [sp, #0]
 8009a40:	9404      	str	r4, [sp, #16]
 8009a42:	68b2      	ldr	r2, [r6, #8]
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	d00a      	beq.n	8009a5e <_scanf_float+0x62>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b4e      	cmp	r3, #78	; 0x4e
 8009a4e:	d844      	bhi.n	8009ada <_scanf_float+0xde>
 8009a50:	0018      	movs	r0, r3
 8009a52:	2b40      	cmp	r3, #64	; 0x40
 8009a54:	d82c      	bhi.n	8009ab0 <_scanf_float+0xb4>
 8009a56:	382b      	subs	r0, #43	; 0x2b
 8009a58:	b2c1      	uxtb	r1, r0
 8009a5a:	290e      	cmp	r1, #14
 8009a5c:	d92a      	bls.n	8009ab4 <_scanf_float+0xb8>
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <_scanf_float+0x70>
 8009a64:	6832      	ldr	r2, [r6, #0]
 8009a66:	4ba4      	ldr	r3, [pc, #656]	; (8009cf8 <_scanf_float+0x2fc>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	6033      	str	r3, [r6, #0]
 8009a6c:	9b02      	ldr	r3, [sp, #8]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d900      	bls.n	8009a76 <_scanf_float+0x7a>
 8009a74:	e0f9      	b.n	8009c6a <_scanf_float+0x26e>
 8009a76:	24be      	movs	r4, #190	; 0xbe
 8009a78:	0064      	lsls	r4, r4, #1
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	429f      	cmp	r7, r3
 8009a7e:	d900      	bls.n	8009a82 <_scanf_float+0x86>
 8009a80:	e0e9      	b.n	8009c56 <_scanf_float+0x25a>
 8009a82:	2301      	movs	r3, #1
 8009a84:	9302      	str	r3, [sp, #8]
 8009a86:	e185      	b.n	8009d94 <_scanf_float+0x398>
 8009a88:	0018      	movs	r0, r3
 8009a8a:	3861      	subs	r0, #97	; 0x61
 8009a8c:	280d      	cmp	r0, #13
 8009a8e:	d8e6      	bhi.n	8009a5e <_scanf_float+0x62>
 8009a90:	f7f6 fb56 	bl	8000140 <__gnu_thumb1_case_shi>
 8009a94:	ffe50083 	.word	0xffe50083
 8009a98:	ffe5ffe5 	.word	0xffe5ffe5
 8009a9c:	00a200b6 	.word	0x00a200b6
 8009aa0:	ffe5ffe5 	.word	0xffe5ffe5
 8009aa4:	ffe50089 	.word	0xffe50089
 8009aa8:	ffe5ffe5 	.word	0xffe5ffe5
 8009aac:	0065ffe5 	.word	0x0065ffe5
 8009ab0:	3841      	subs	r0, #65	; 0x41
 8009ab2:	e7eb      	b.n	8009a8c <_scanf_float+0x90>
 8009ab4:	280e      	cmp	r0, #14
 8009ab6:	d8d2      	bhi.n	8009a5e <_scanf_float+0x62>
 8009ab8:	f7f6 fb42 	bl	8000140 <__gnu_thumb1_case_shi>
 8009abc:	ffd1004b 	.word	0xffd1004b
 8009ac0:	0098004b 	.word	0x0098004b
 8009ac4:	0020ffd1 	.word	0x0020ffd1
 8009ac8:	00400040 	.word	0x00400040
 8009acc:	00400040 	.word	0x00400040
 8009ad0:	00400040 	.word	0x00400040
 8009ad4:	00400040 	.word	0x00400040
 8009ad8:	0040      	.short	0x0040
 8009ada:	2b6e      	cmp	r3, #110	; 0x6e
 8009adc:	d809      	bhi.n	8009af2 <_scanf_float+0xf6>
 8009ade:	2b60      	cmp	r3, #96	; 0x60
 8009ae0:	d8d2      	bhi.n	8009a88 <_scanf_float+0x8c>
 8009ae2:	2b54      	cmp	r3, #84	; 0x54
 8009ae4:	d07d      	beq.n	8009be2 <_scanf_float+0x1e6>
 8009ae6:	2b59      	cmp	r3, #89	; 0x59
 8009ae8:	d1b9      	bne.n	8009a5e <_scanf_float+0x62>
 8009aea:	2c07      	cmp	r4, #7
 8009aec:	d1b7      	bne.n	8009a5e <_scanf_float+0x62>
 8009aee:	2408      	movs	r4, #8
 8009af0:	e02c      	b.n	8009b4c <_scanf_float+0x150>
 8009af2:	2b74      	cmp	r3, #116	; 0x74
 8009af4:	d075      	beq.n	8009be2 <_scanf_float+0x1e6>
 8009af6:	2b79      	cmp	r3, #121	; 0x79
 8009af8:	d0f7      	beq.n	8009aea <_scanf_float+0xee>
 8009afa:	e7b0      	b.n	8009a5e <_scanf_float+0x62>
 8009afc:	6831      	ldr	r1, [r6, #0]
 8009afe:	05c8      	lsls	r0, r1, #23
 8009b00:	d51c      	bpl.n	8009b3c <_scanf_float+0x140>
 8009b02:	2380      	movs	r3, #128	; 0x80
 8009b04:	4399      	bics	r1, r3
 8009b06:	9b00      	ldr	r3, [sp, #0]
 8009b08:	6031      	str	r1, [r6, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	9b05      	ldr	r3, [sp, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <_scanf_float+0x120>
 8009b14:	3b01      	subs	r3, #1
 8009b16:	3201      	adds	r2, #1
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	60b2      	str	r2, [r6, #8]
 8009b1c:	68b3      	ldr	r3, [r6, #8]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	60b3      	str	r3, [r6, #8]
 8009b22:	6933      	ldr	r3, [r6, #16]
 8009b24:	3301      	adds	r3, #1
 8009b26:	6133      	str	r3, [r6, #16]
 8009b28:	686b      	ldr	r3, [r5, #4]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	606b      	str	r3, [r5, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dc00      	bgt.n	8009b34 <_scanf_float+0x138>
 8009b32:	e086      	b.n	8009c42 <_scanf_float+0x246>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	3301      	adds	r3, #1
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	e782      	b.n	8009a42 <_scanf_float+0x46>
 8009b3c:	9a02      	ldr	r2, [sp, #8]
 8009b3e:	1912      	adds	r2, r2, r4
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	d18c      	bne.n	8009a5e <_scanf_float+0x62>
 8009b44:	4a6d      	ldr	r2, [pc, #436]	; (8009cfc <_scanf_float+0x300>)
 8009b46:	6831      	ldr	r1, [r6, #0]
 8009b48:	400a      	ands	r2, r1
 8009b4a:	6032      	str	r2, [r6, #0]
 8009b4c:	703b      	strb	r3, [r7, #0]
 8009b4e:	3701      	adds	r7, #1
 8009b50:	e7e4      	b.n	8009b1c <_scanf_float+0x120>
 8009b52:	2180      	movs	r1, #128	; 0x80
 8009b54:	6832      	ldr	r2, [r6, #0]
 8009b56:	420a      	tst	r2, r1
 8009b58:	d081      	beq.n	8009a5e <_scanf_float+0x62>
 8009b5a:	438a      	bics	r2, r1
 8009b5c:	e7f5      	b.n	8009b4a <_scanf_float+0x14e>
 8009b5e:	9a02      	ldr	r2, [sp, #8]
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	d10f      	bne.n	8009b84 <_scanf_float+0x188>
 8009b64:	9a00      	ldr	r2, [sp, #0]
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	d10f      	bne.n	8009b8a <_scanf_float+0x18e>
 8009b6a:	6832      	ldr	r2, [r6, #0]
 8009b6c:	21e0      	movs	r1, #224	; 0xe0
 8009b6e:	0010      	movs	r0, r2
 8009b70:	00c9      	lsls	r1, r1, #3
 8009b72:	4008      	ands	r0, r1
 8009b74:	4288      	cmp	r0, r1
 8009b76:	d108      	bne.n	8009b8a <_scanf_float+0x18e>
 8009b78:	4961      	ldr	r1, [pc, #388]	; (8009d00 <_scanf_float+0x304>)
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	6032      	str	r2, [r6, #0]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	9202      	str	r2, [sp, #8]
 8009b82:	e7e3      	b.n	8009b4c <_scanf_float+0x150>
 8009b84:	9a02      	ldr	r2, [sp, #8]
 8009b86:	2a02      	cmp	r2, #2
 8009b88:	d059      	beq.n	8009c3e <_scanf_float+0x242>
 8009b8a:	2c01      	cmp	r4, #1
 8009b8c:	d002      	beq.n	8009b94 <_scanf_float+0x198>
 8009b8e:	2c04      	cmp	r4, #4
 8009b90:	d000      	beq.n	8009b94 <_scanf_float+0x198>
 8009b92:	e764      	b.n	8009a5e <_scanf_float+0x62>
 8009b94:	3401      	adds	r4, #1
 8009b96:	b2e4      	uxtb	r4, r4
 8009b98:	e7d8      	b.n	8009b4c <_scanf_float+0x150>
 8009b9a:	9a02      	ldr	r2, [sp, #8]
 8009b9c:	2a01      	cmp	r2, #1
 8009b9e:	d000      	beq.n	8009ba2 <_scanf_float+0x1a6>
 8009ba0:	e75d      	b.n	8009a5e <_scanf_float+0x62>
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	e7ec      	b.n	8009b80 <_scanf_float+0x184>
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	d110      	bne.n	8009bcc <_scanf_float+0x1d0>
 8009baa:	9a00      	ldr	r2, [sp, #0]
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	d000      	beq.n	8009bb2 <_scanf_float+0x1b6>
 8009bb0:	e758      	b.n	8009a64 <_scanf_float+0x68>
 8009bb2:	6832      	ldr	r2, [r6, #0]
 8009bb4:	21e0      	movs	r1, #224	; 0xe0
 8009bb6:	0010      	movs	r0, r2
 8009bb8:	00c9      	lsls	r1, r1, #3
 8009bba:	4008      	ands	r0, r1
 8009bbc:	4288      	cmp	r0, r1
 8009bbe:	d000      	beq.n	8009bc2 <_scanf_float+0x1c6>
 8009bc0:	e754      	b.n	8009a6c <_scanf_float+0x70>
 8009bc2:	494f      	ldr	r1, [pc, #316]	; (8009d00 <_scanf_float+0x304>)
 8009bc4:	3401      	adds	r4, #1
 8009bc6:	400a      	ands	r2, r1
 8009bc8:	6032      	str	r2, [r6, #0]
 8009bca:	e7bf      	b.n	8009b4c <_scanf_float+0x150>
 8009bcc:	21fd      	movs	r1, #253	; 0xfd
 8009bce:	1ee2      	subs	r2, r4, #3
 8009bd0:	420a      	tst	r2, r1
 8009bd2:	d000      	beq.n	8009bd6 <_scanf_float+0x1da>
 8009bd4:	e743      	b.n	8009a5e <_scanf_float+0x62>
 8009bd6:	e7dd      	b.n	8009b94 <_scanf_float+0x198>
 8009bd8:	2c02      	cmp	r4, #2
 8009bda:	d000      	beq.n	8009bde <_scanf_float+0x1e2>
 8009bdc:	e73f      	b.n	8009a5e <_scanf_float+0x62>
 8009bde:	2403      	movs	r4, #3
 8009be0:	e7b4      	b.n	8009b4c <_scanf_float+0x150>
 8009be2:	2c06      	cmp	r4, #6
 8009be4:	d000      	beq.n	8009be8 <_scanf_float+0x1ec>
 8009be6:	e73a      	b.n	8009a5e <_scanf_float+0x62>
 8009be8:	2407      	movs	r4, #7
 8009bea:	e7af      	b.n	8009b4c <_scanf_float+0x150>
 8009bec:	6832      	ldr	r2, [r6, #0]
 8009bee:	0591      	lsls	r1, r2, #22
 8009bf0:	d400      	bmi.n	8009bf4 <_scanf_float+0x1f8>
 8009bf2:	e734      	b.n	8009a5e <_scanf_float+0x62>
 8009bf4:	4943      	ldr	r1, [pc, #268]	; (8009d04 <_scanf_float+0x308>)
 8009bf6:	400a      	ands	r2, r1
 8009bf8:	6032      	str	r2, [r6, #0]
 8009bfa:	9a00      	ldr	r2, [sp, #0]
 8009bfc:	9204      	str	r2, [sp, #16]
 8009bfe:	e7a5      	b.n	8009b4c <_scanf_float+0x150>
 8009c00:	21a0      	movs	r1, #160	; 0xa0
 8009c02:	2080      	movs	r0, #128	; 0x80
 8009c04:	6832      	ldr	r2, [r6, #0]
 8009c06:	00c9      	lsls	r1, r1, #3
 8009c08:	4011      	ands	r1, r2
 8009c0a:	00c0      	lsls	r0, r0, #3
 8009c0c:	4281      	cmp	r1, r0
 8009c0e:	d006      	beq.n	8009c1e <_scanf_float+0x222>
 8009c10:	4202      	tst	r2, r0
 8009c12:	d100      	bne.n	8009c16 <_scanf_float+0x21a>
 8009c14:	e723      	b.n	8009a5e <_scanf_float+0x62>
 8009c16:	9900      	ldr	r1, [sp, #0]
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	d100      	bne.n	8009c1e <_scanf_float+0x222>
 8009c1c:	e726      	b.n	8009a6c <_scanf_float+0x70>
 8009c1e:	0591      	lsls	r1, r2, #22
 8009c20:	d404      	bmi.n	8009c2c <_scanf_float+0x230>
 8009c22:	9900      	ldr	r1, [sp, #0]
 8009c24:	9804      	ldr	r0, [sp, #16]
 8009c26:	9708      	str	r7, [sp, #32]
 8009c28:	1a09      	subs	r1, r1, r0
 8009c2a:	9107      	str	r1, [sp, #28]
 8009c2c:	4934      	ldr	r1, [pc, #208]	; (8009d00 <_scanf_float+0x304>)
 8009c2e:	400a      	ands	r2, r1
 8009c30:	21c0      	movs	r1, #192	; 0xc0
 8009c32:	0049      	lsls	r1, r1, #1
 8009c34:	430a      	orrs	r2, r1
 8009c36:	6032      	str	r2, [r6, #0]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	9200      	str	r2, [sp, #0]
 8009c3c:	e786      	b.n	8009b4c <_scanf_float+0x150>
 8009c3e:	2203      	movs	r2, #3
 8009c40:	e79e      	b.n	8009b80 <_scanf_float+0x184>
 8009c42:	23c0      	movs	r3, #192	; 0xc0
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	0029      	movs	r1, r5
 8009c48:	58f3      	ldr	r3, [r6, r3]
 8009c4a:	9801      	ldr	r0, [sp, #4]
 8009c4c:	4798      	blx	r3
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d100      	bne.n	8009c54 <_scanf_float+0x258>
 8009c52:	e6f6      	b.n	8009a42 <_scanf_float+0x46>
 8009c54:	e703      	b.n	8009a5e <_scanf_float+0x62>
 8009c56:	3f01      	subs	r7, #1
 8009c58:	5933      	ldr	r3, [r6, r4]
 8009c5a:	002a      	movs	r2, r5
 8009c5c:	7839      	ldrb	r1, [r7, #0]
 8009c5e:	9801      	ldr	r0, [sp, #4]
 8009c60:	4798      	blx	r3
 8009c62:	6933      	ldr	r3, [r6, #16]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	6133      	str	r3, [r6, #16]
 8009c68:	e707      	b.n	8009a7a <_scanf_float+0x7e>
 8009c6a:	1e63      	subs	r3, r4, #1
 8009c6c:	2b06      	cmp	r3, #6
 8009c6e:	d80e      	bhi.n	8009c8e <_scanf_float+0x292>
 8009c70:	9702      	str	r7, [sp, #8]
 8009c72:	2c02      	cmp	r4, #2
 8009c74:	d920      	bls.n	8009cb8 <_scanf_float+0x2bc>
 8009c76:	1be3      	subs	r3, r4, r7
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	9305      	str	r3, [sp, #20]
 8009c7c:	9b02      	ldr	r3, [sp, #8]
 8009c7e:	9a05      	ldr	r2, [sp, #20]
 8009c80:	189b      	adds	r3, r3, r2
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d827      	bhi.n	8009cd8 <_scanf_float+0x2dc>
 8009c88:	3c03      	subs	r4, #3
 8009c8a:	b2e4      	uxtb	r4, r4
 8009c8c:	1b3f      	subs	r7, r7, r4
 8009c8e:	6833      	ldr	r3, [r6, #0]
 8009c90:	05da      	lsls	r2, r3, #23
 8009c92:	d554      	bpl.n	8009d3e <_scanf_float+0x342>
 8009c94:	055b      	lsls	r3, r3, #21
 8009c96:	d537      	bpl.n	8009d08 <_scanf_float+0x30c>
 8009c98:	24be      	movs	r4, #190	; 0xbe
 8009c9a:	0064      	lsls	r4, r4, #1
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	429f      	cmp	r7, r3
 8009ca0:	d800      	bhi.n	8009ca4 <_scanf_float+0x2a8>
 8009ca2:	e6ee      	b.n	8009a82 <_scanf_float+0x86>
 8009ca4:	3f01      	subs	r7, #1
 8009ca6:	5933      	ldr	r3, [r6, r4]
 8009ca8:	002a      	movs	r2, r5
 8009caa:	7839      	ldrb	r1, [r7, #0]
 8009cac:	9801      	ldr	r0, [sp, #4]
 8009cae:	4798      	blx	r3
 8009cb0:	6933      	ldr	r3, [r6, #16]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	6133      	str	r3, [r6, #16]
 8009cb6:	e7f1      	b.n	8009c9c <_scanf_float+0x2a0>
 8009cb8:	24be      	movs	r4, #190	; 0xbe
 8009cba:	0064      	lsls	r4, r4, #1
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	429f      	cmp	r7, r3
 8009cc0:	d800      	bhi.n	8009cc4 <_scanf_float+0x2c8>
 8009cc2:	e6de      	b.n	8009a82 <_scanf_float+0x86>
 8009cc4:	3f01      	subs	r7, #1
 8009cc6:	5933      	ldr	r3, [r6, r4]
 8009cc8:	002a      	movs	r2, r5
 8009cca:	7839      	ldrb	r1, [r7, #0]
 8009ccc:	9801      	ldr	r0, [sp, #4]
 8009cce:	4798      	blx	r3
 8009cd0:	6933      	ldr	r3, [r6, #16]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	6133      	str	r3, [r6, #16]
 8009cd6:	e7f1      	b.n	8009cbc <_scanf_float+0x2c0>
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	002a      	movs	r2, r5
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	7819      	ldrb	r1, [r3, #0]
 8009ce0:	9302      	str	r3, [sp, #8]
 8009ce2:	23be      	movs	r3, #190	; 0xbe
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	58f3      	ldr	r3, [r6, r3]
 8009ce8:	9801      	ldr	r0, [sp, #4]
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	4798      	blx	r3
 8009cee:	6933      	ldr	r3, [r6, #16]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	6133      	str	r3, [r6, #16]
 8009cf4:	e7c2      	b.n	8009c7c <_scanf_float+0x280>
 8009cf6:	46c0      	nop			; (mov r8, r8)
 8009cf8:	fffffeff 	.word	0xfffffeff
 8009cfc:	fffffe7f 	.word	0xfffffe7f
 8009d00:	fffff87f 	.word	0xfffff87f
 8009d04:	fffffd7f 	.word	0xfffffd7f
 8009d08:	6933      	ldr	r3, [r6, #16]
 8009d0a:	1e7c      	subs	r4, r7, #1
 8009d0c:	7821      	ldrb	r1, [r4, #0]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	6133      	str	r3, [r6, #16]
 8009d12:	2965      	cmp	r1, #101	; 0x65
 8009d14:	d00c      	beq.n	8009d30 <_scanf_float+0x334>
 8009d16:	2945      	cmp	r1, #69	; 0x45
 8009d18:	d00a      	beq.n	8009d30 <_scanf_float+0x334>
 8009d1a:	23be      	movs	r3, #190	; 0xbe
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	58f3      	ldr	r3, [r6, r3]
 8009d20:	002a      	movs	r2, r5
 8009d22:	9801      	ldr	r0, [sp, #4]
 8009d24:	4798      	blx	r3
 8009d26:	6933      	ldr	r3, [r6, #16]
 8009d28:	1ebc      	subs	r4, r7, #2
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	7821      	ldrb	r1, [r4, #0]
 8009d2e:	6133      	str	r3, [r6, #16]
 8009d30:	23be      	movs	r3, #190	; 0xbe
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	002a      	movs	r2, r5
 8009d36:	58f3      	ldr	r3, [r6, r3]
 8009d38:	9801      	ldr	r0, [sp, #4]
 8009d3a:	4798      	blx	r3
 8009d3c:	0027      	movs	r7, r4
 8009d3e:	6832      	ldr	r2, [r6, #0]
 8009d40:	2310      	movs	r3, #16
 8009d42:	0011      	movs	r1, r2
 8009d44:	4019      	ands	r1, r3
 8009d46:	9102      	str	r1, [sp, #8]
 8009d48:	421a      	tst	r2, r3
 8009d4a:	d158      	bne.n	8009dfe <_scanf_float+0x402>
 8009d4c:	23c0      	movs	r3, #192	; 0xc0
 8009d4e:	7039      	strb	r1, [r7, #0]
 8009d50:	6832      	ldr	r2, [r6, #0]
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	4013      	ands	r3, r2
 8009d56:	2280      	movs	r2, #128	; 0x80
 8009d58:	00d2      	lsls	r2, r2, #3
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d11d      	bne.n	8009d9a <_scanf_float+0x39e>
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	9a00      	ldr	r2, [sp, #0]
 8009d62:	9900      	ldr	r1, [sp, #0]
 8009d64:	1a9a      	subs	r2, r3, r2
 8009d66:	428b      	cmp	r3, r1
 8009d68:	d124      	bne.n	8009db4 <_scanf_float+0x3b8>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	9903      	ldr	r1, [sp, #12]
 8009d6e:	9801      	ldr	r0, [sp, #4]
 8009d70:	f000 ff2a 	bl	800abc8 <_strtod_r>
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	000d      	movs	r5, r1
 8009d78:	6831      	ldr	r1, [r6, #0]
 8009d7a:	0004      	movs	r4, r0
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	078a      	lsls	r2, r1, #30
 8009d80:	d525      	bpl.n	8009dce <_scanf_float+0x3d2>
 8009d82:	1d1a      	adds	r2, r3, #4
 8009d84:	9906      	ldr	r1, [sp, #24]
 8009d86:	600a      	str	r2, [r1, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	601c      	str	r4, [r3, #0]
 8009d8c:	605d      	str	r5, [r3, #4]
 8009d8e:	68f3      	ldr	r3, [r6, #12]
 8009d90:	3301      	adds	r3, #1
 8009d92:	60f3      	str	r3, [r6, #12]
 8009d94:	9802      	ldr	r0, [sp, #8]
 8009d96:	b00b      	add	sp, #44	; 0x2c
 8009d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d9a:	9b07      	ldr	r3, [sp, #28]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0e4      	beq.n	8009d6a <_scanf_float+0x36e>
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	9a02      	ldr	r2, [sp, #8]
 8009da4:	1c59      	adds	r1, r3, #1
 8009da6:	9801      	ldr	r0, [sp, #4]
 8009da8:	230a      	movs	r3, #10
 8009daa:	f000 ffa3 	bl	800acf4 <_strtol_r>
 8009dae:	9b07      	ldr	r3, [sp, #28]
 8009db0:	9f08      	ldr	r7, [sp, #32]
 8009db2:	1ac2      	subs	r2, r0, r3
 8009db4:	0033      	movs	r3, r6
 8009db6:	3370      	adds	r3, #112	; 0x70
 8009db8:	33ff      	adds	r3, #255	; 0xff
 8009dba:	429f      	cmp	r7, r3
 8009dbc:	d302      	bcc.n	8009dc4 <_scanf_float+0x3c8>
 8009dbe:	0037      	movs	r7, r6
 8009dc0:	376f      	adds	r7, #111	; 0x6f
 8009dc2:	37ff      	adds	r7, #255	; 0xff
 8009dc4:	0038      	movs	r0, r7
 8009dc6:	490f      	ldr	r1, [pc, #60]	; (8009e04 <_scanf_float+0x408>)
 8009dc8:	f000 f824 	bl	8009e14 <siprintf>
 8009dcc:	e7cd      	b.n	8009d6a <_scanf_float+0x36e>
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	0749      	lsls	r1, r1, #29
 8009dd2:	d4d7      	bmi.n	8009d84 <_scanf_float+0x388>
 8009dd4:	9906      	ldr	r1, [sp, #24]
 8009dd6:	0020      	movs	r0, r4
 8009dd8:	600a      	str	r2, [r1, #0]
 8009dda:	681f      	ldr	r7, [r3, #0]
 8009ddc:	0022      	movs	r2, r4
 8009dde:	002b      	movs	r3, r5
 8009de0:	0029      	movs	r1, r5
 8009de2:	f7f8 fbf1 	bl	80025c8 <__aeabi_dcmpun>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d004      	beq.n	8009df4 <_scanf_float+0x3f8>
 8009dea:	4807      	ldr	r0, [pc, #28]	; (8009e08 <_scanf_float+0x40c>)
 8009dec:	f000 f80e 	bl	8009e0c <nanf>
 8009df0:	6038      	str	r0, [r7, #0]
 8009df2:	e7cc      	b.n	8009d8e <_scanf_float+0x392>
 8009df4:	0020      	movs	r0, r4
 8009df6:	0029      	movs	r1, r5
 8009df8:	f7f8 fcd8 	bl	80027ac <__aeabi_d2f>
 8009dfc:	e7f8      	b.n	8009df0 <_scanf_float+0x3f4>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e640      	b.n	8009a84 <_scanf_float+0x88>
 8009e02:	46c0      	nop			; (mov r8, r8)
 8009e04:	0800e5ea 	.word	0x0800e5ea
 8009e08:	0800ea1b 	.word	0x0800ea1b

08009e0c <nanf>:
 8009e0c:	4800      	ldr	r0, [pc, #0]	; (8009e10 <nanf+0x4>)
 8009e0e:	4770      	bx	lr
 8009e10:	7fc00000 	.word	0x7fc00000

08009e14 <siprintf>:
 8009e14:	b40e      	push	{r1, r2, r3}
 8009e16:	b500      	push	{lr}
 8009e18:	490b      	ldr	r1, [pc, #44]	; (8009e48 <siprintf+0x34>)
 8009e1a:	b09c      	sub	sp, #112	; 0x70
 8009e1c:	ab1d      	add	r3, sp, #116	; 0x74
 8009e1e:	9002      	str	r0, [sp, #8]
 8009e20:	9006      	str	r0, [sp, #24]
 8009e22:	9107      	str	r1, [sp, #28]
 8009e24:	9104      	str	r1, [sp, #16]
 8009e26:	4809      	ldr	r0, [pc, #36]	; (8009e4c <siprintf+0x38>)
 8009e28:	4909      	ldr	r1, [pc, #36]	; (8009e50 <siprintf+0x3c>)
 8009e2a:	cb04      	ldmia	r3!, {r2}
 8009e2c:	9105      	str	r1, [sp, #20]
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	a902      	add	r1, sp, #8
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	f002 ffce 	bl	800cdd4 <_svfiprintf_r>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9a02      	ldr	r2, [sp, #8]
 8009e3c:	7013      	strb	r3, [r2, #0]
 8009e3e:	b01c      	add	sp, #112	; 0x70
 8009e40:	bc08      	pop	{r3}
 8009e42:	b003      	add	sp, #12
 8009e44:	4718      	bx	r3
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	7fffffff 	.word	0x7fffffff
 8009e4c:	2000000c 	.word	0x2000000c
 8009e50:	ffff0208 	.word	0xffff0208

08009e54 <siscanf>:
 8009e54:	b40e      	push	{r1, r2, r3}
 8009e56:	b530      	push	{r4, r5, lr}
 8009e58:	2381      	movs	r3, #129	; 0x81
 8009e5a:	b09c      	sub	sp, #112	; 0x70
 8009e5c:	466a      	mov	r2, sp
 8009e5e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	cc20      	ldmia	r4!, {r5}
 8009e64:	8293      	strh	r3, [r2, #20]
 8009e66:	9002      	str	r0, [sp, #8]
 8009e68:	9006      	str	r0, [sp, #24]
 8009e6a:	f7f6 f957 	bl	800011c <strlen>
 8009e6e:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <siscanf+0x48>)
 8009e70:	466a      	mov	r2, sp
 8009e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e74:	2300      	movs	r3, #0
 8009e76:	9003      	str	r0, [sp, #12]
 8009e78:	9007      	str	r0, [sp, #28]
 8009e7a:	4809      	ldr	r0, [pc, #36]	; (8009ea0 <siscanf+0x4c>)
 8009e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e7e:	9314      	str	r3, [sp, #80]	; 0x50
 8009e80:	3b01      	subs	r3, #1
 8009e82:	82d3      	strh	r3, [r2, #22]
 8009e84:	a902      	add	r1, sp, #8
 8009e86:	0023      	movs	r3, r4
 8009e88:	002a      	movs	r2, r5
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	9401      	str	r4, [sp, #4]
 8009e8e:	f003 f8fd 	bl	800d08c <__ssvfiscanf_r>
 8009e92:	b01c      	add	sp, #112	; 0x70
 8009e94:	bc30      	pop	{r4, r5}
 8009e96:	bc08      	pop	{r3}
 8009e98:	b003      	add	sp, #12
 8009e9a:	4718      	bx	r3
 8009e9c:	08009ecd 	.word	0x08009ecd
 8009ea0:	2000000c 	.word	0x2000000c

08009ea4 <__sread>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	000c      	movs	r4, r1
 8009ea8:	250e      	movs	r5, #14
 8009eaa:	5f49      	ldrsh	r1, [r1, r5]
 8009eac:	f003 fbc8 	bl	800d640 <_read_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	db03      	blt.n	8009ebc <__sread+0x18>
 8009eb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009eb6:	181b      	adds	r3, r3, r0
 8009eb8:	6563      	str	r3, [r4, #84]	; 0x54
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	4a02      	ldr	r2, [pc, #8]	; (8009ec8 <__sread+0x24>)
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	e7f9      	b.n	8009eba <__sread+0x16>
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	ffffefff 	.word	0xffffefff

08009ecc <__seofread>:
 8009ecc:	2000      	movs	r0, #0
 8009ece:	4770      	bx	lr

08009ed0 <__swrite>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	001f      	movs	r7, r3
 8009ed4:	898b      	ldrh	r3, [r1, #12]
 8009ed6:	0005      	movs	r5, r0
 8009ed8:	000c      	movs	r4, r1
 8009eda:	0016      	movs	r6, r2
 8009edc:	05db      	lsls	r3, r3, #23
 8009ede:	d505      	bpl.n	8009eec <__swrite+0x1c>
 8009ee0:	230e      	movs	r3, #14
 8009ee2:	5ec9      	ldrsh	r1, [r1, r3]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	f002 f94e 	bl	800c188 <_lseek_r>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	4a05      	ldr	r2, [pc, #20]	; (8009f04 <__swrite+0x34>)
 8009ef0:	0028      	movs	r0, r5
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	81a3      	strh	r3, [r4, #12]
 8009ef6:	0032      	movs	r2, r6
 8009ef8:	230e      	movs	r3, #14
 8009efa:	5ee1      	ldrsh	r1, [r4, r3]
 8009efc:	003b      	movs	r3, r7
 8009efe:	f000 fefd 	bl	800acfc <_write_r>
 8009f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f04:	ffffefff 	.word	0xffffefff

08009f08 <__sseek>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	000c      	movs	r4, r1
 8009f0c:	250e      	movs	r5, #14
 8009f0e:	5f49      	ldrsh	r1, [r1, r5]
 8009f10:	f002 f93a 	bl	800c188 <_lseek_r>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	1c42      	adds	r2, r0, #1
 8009f18:	d103      	bne.n	8009f22 <__sseek+0x1a>
 8009f1a:	4a05      	ldr	r2, [pc, #20]	; (8009f30 <__sseek+0x28>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	bd70      	pop	{r4, r5, r6, pc}
 8009f22:	2280      	movs	r2, #128	; 0x80
 8009f24:	0152      	lsls	r2, r2, #5
 8009f26:	4313      	orrs	r3, r2
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f2c:	e7f8      	b.n	8009f20 <__sseek+0x18>
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	ffffefff 	.word	0xffffefff

08009f34 <__sclose>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	230e      	movs	r3, #14
 8009f38:	5ec9      	ldrsh	r1, [r1, r3]
 8009f3a:	f000 fef3 	bl	800ad24 <_close_r>
 8009f3e:	bd10      	pop	{r4, pc}

08009f40 <strcpy>:
 8009f40:	0003      	movs	r3, r0
 8009f42:	780a      	ldrb	r2, [r1, #0]
 8009f44:	3101      	adds	r1, #1
 8009f46:	701a      	strb	r2, [r3, #0]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	d1f9      	bne.n	8009f42 <strcpy+0x2>
 8009f4e:	4770      	bx	lr

08009f50 <sulp>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	0016      	movs	r6, r2
 8009f54:	000d      	movs	r5, r1
 8009f56:	f002 fce1 	bl	800c91c <__ulp>
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	d00d      	beq.n	8009f7a <sulp+0x2a>
 8009f5e:	236b      	movs	r3, #107	; 0x6b
 8009f60:	006a      	lsls	r2, r5, #1
 8009f62:	0d52      	lsrs	r2, r2, #21
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dd07      	ble.n	8009f7a <sulp+0x2a>
 8009f6a:	2400      	movs	r4, #0
 8009f6c:	4a03      	ldr	r2, [pc, #12]	; (8009f7c <sulp+0x2c>)
 8009f6e:	051b      	lsls	r3, r3, #20
 8009f70:	189d      	adds	r5, r3, r2
 8009f72:	002b      	movs	r3, r5
 8009f74:	0022      	movs	r2, r4
 8009f76:	f7f7 fd29 	bl	80019cc <__aeabi_dmul>
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	3ff00000 	.word	0x3ff00000

08009f80 <_strtod_l>:
 8009f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f82:	001d      	movs	r5, r3
 8009f84:	2300      	movs	r3, #0
 8009f86:	b0a7      	sub	sp, #156	; 0x9c
 8009f88:	9322      	str	r3, [sp, #136]	; 0x88
 8009f8a:	4bae      	ldr	r3, [pc, #696]	; (800a244 <_strtod_l+0x2c4>)
 8009f8c:	9005      	str	r0, [sp, #20]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	9108      	str	r1, [sp, #32]
 8009f92:	0018      	movs	r0, r3
 8009f94:	9307      	str	r3, [sp, #28]
 8009f96:	921d      	str	r2, [sp, #116]	; 0x74
 8009f98:	f7f6 f8c0 	bl	800011c <strlen>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	0004      	movs	r4, r0
 8009fa0:	2700      	movs	r7, #0
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	9321      	str	r3, [sp, #132]	; 0x84
 8009fa6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fa8:	7813      	ldrb	r3, [r2, #0]
 8009faa:	2b2b      	cmp	r3, #43	; 0x2b
 8009fac:	d058      	beq.n	800a060 <_strtod_l+0xe0>
 8009fae:	d844      	bhi.n	800a03a <_strtod_l+0xba>
 8009fb0:	2b0d      	cmp	r3, #13
 8009fb2:	d83d      	bhi.n	800a030 <_strtod_l+0xb0>
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d83d      	bhi.n	800a034 <_strtod_l+0xb4>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d047      	beq.n	800a04c <_strtod_l+0xcc>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9310      	str	r3, [sp, #64]	; 0x40
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8009fc6:	9306      	str	r3, [sp, #24]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b30      	cmp	r3, #48	; 0x30
 8009fcc:	d000      	beq.n	8009fd0 <_strtod_l+0x50>
 8009fce:	e083      	b.n	800a0d8 <_strtod_l+0x158>
 8009fd0:	9b06      	ldr	r3, [sp, #24]
 8009fd2:	3220      	adds	r2, #32
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	4393      	bics	r3, r2
 8009fd8:	2b58      	cmp	r3, #88	; 0x58
 8009fda:	d000      	beq.n	8009fde <_strtod_l+0x5e>
 8009fdc:	e072      	b.n	800a0c4 <_strtod_l+0x144>
 8009fde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fe0:	9502      	str	r5, [sp, #8]
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	ab22      	add	r3, sp, #136	; 0x88
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	4a97      	ldr	r2, [pc, #604]	; (800a248 <_strtod_l+0x2c8>)
 8009fea:	ab23      	add	r3, sp, #140	; 0x8c
 8009fec:	9805      	ldr	r0, [sp, #20]
 8009fee:	a921      	add	r1, sp, #132	; 0x84
 8009ff0:	f001 fdbe 	bl	800bb70 <__gethex>
 8009ff4:	2307      	movs	r3, #7
 8009ff6:	0005      	movs	r5, r0
 8009ff8:	0004      	movs	r4, r0
 8009ffa:	401d      	ands	r5, r3
 8009ffc:	4218      	tst	r0, r3
 8009ffe:	d006      	beq.n	800a00e <_strtod_l+0x8e>
 800a000:	2d06      	cmp	r5, #6
 800a002:	d12f      	bne.n	800a064 <_strtod_l+0xe4>
 800a004:	9b06      	ldr	r3, [sp, #24]
 800a006:	3301      	adds	r3, #1
 800a008:	9321      	str	r3, [sp, #132]	; 0x84
 800a00a:	2300      	movs	r3, #0
 800a00c:	9310      	str	r3, [sp, #64]	; 0x40
 800a00e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <_strtod_l+0x9a>
 800a014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a016:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01c      	beq.n	800a05a <_strtod_l+0xda>
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	0032      	movs	r2, r6
 800a024:	061b      	lsls	r3, r3, #24
 800a026:	18fb      	adds	r3, r7, r3
 800a028:	0010      	movs	r0, r2
 800a02a:	0019      	movs	r1, r3
 800a02c:	b027      	add	sp, #156	; 0x9c
 800a02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a030:	2b20      	cmp	r3, #32
 800a032:	d1c3      	bne.n	8009fbc <_strtod_l+0x3c>
 800a034:	3201      	adds	r2, #1
 800a036:	9221      	str	r2, [sp, #132]	; 0x84
 800a038:	e7b5      	b.n	8009fa6 <_strtod_l+0x26>
 800a03a:	2b2d      	cmp	r3, #45	; 0x2d
 800a03c:	d1be      	bne.n	8009fbc <_strtod_l+0x3c>
 800a03e:	3b2c      	subs	r3, #44	; 0x2c
 800a040:	9310      	str	r3, [sp, #64]	; 0x40
 800a042:	1c53      	adds	r3, r2, #1
 800a044:	9321      	str	r3, [sp, #132]	; 0x84
 800a046:	7853      	ldrb	r3, [r2, #1]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1b9      	bne.n	8009fc0 <_strtod_l+0x40>
 800a04c:	9b08      	ldr	r3, [sp, #32]
 800a04e:	9321      	str	r3, [sp, #132]	; 0x84
 800a050:	2300      	movs	r3, #0
 800a052:	9310      	str	r3, [sp, #64]	; 0x40
 800a054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1dc      	bne.n	800a014 <_strtod_l+0x94>
 800a05a:	0032      	movs	r2, r6
 800a05c:	003b      	movs	r3, r7
 800a05e:	e7e3      	b.n	800a028 <_strtod_l+0xa8>
 800a060:	2300      	movs	r3, #0
 800a062:	e7ed      	b.n	800a040 <_strtod_l+0xc0>
 800a064:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a066:	2a00      	cmp	r2, #0
 800a068:	d007      	beq.n	800a07a <_strtod_l+0xfa>
 800a06a:	2135      	movs	r1, #53	; 0x35
 800a06c:	a824      	add	r0, sp, #144	; 0x90
 800a06e:	f002 fd54 	bl	800cb1a <__copybits>
 800a072:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a074:	9805      	ldr	r0, [sp, #20]
 800a076:	f002 f90f 	bl	800c298 <_Bfree>
 800a07a:	1e68      	subs	r0, r5, #1
 800a07c:	2805      	cmp	r0, #5
 800a07e:	d806      	bhi.n	800a08e <_strtod_l+0x10e>
 800a080:	f7f6 f854 	bl	800012c <__gnu_thumb1_case_uqi>
 800a084:	1c190b0e 	.word	0x1c190b0e
 800a088:	030e      	.short	0x030e
 800a08a:	2700      	movs	r7, #0
 800a08c:	003e      	movs	r6, r7
 800a08e:	0723      	lsls	r3, r4, #28
 800a090:	d5bd      	bpl.n	800a00e <_strtod_l+0x8e>
 800a092:	2380      	movs	r3, #128	; 0x80
 800a094:	061b      	lsls	r3, r3, #24
 800a096:	431f      	orrs	r7, r3
 800a098:	e7b9      	b.n	800a00e <_strtod_l+0x8e>
 800a09a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a09c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a09e:	e7f6      	b.n	800a08e <_strtod_l+0x10e>
 800a0a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a0a2:	4a6a      	ldr	r2, [pc, #424]	; (800a24c <_strtod_l+0x2cc>)
 800a0a4:	496a      	ldr	r1, [pc, #424]	; (800a250 <_strtod_l+0x2d0>)
 800a0a6:	401a      	ands	r2, r3
 800a0a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0aa:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a0ac:	185b      	adds	r3, r3, r1
 800a0ae:	051b      	lsls	r3, r3, #20
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	0017      	movs	r7, r2
 800a0b4:	e7eb      	b.n	800a08e <_strtod_l+0x10e>
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	4f66      	ldr	r7, [pc, #408]	; (800a254 <_strtod_l+0x2d4>)
 800a0ba:	e7e8      	b.n	800a08e <_strtod_l+0x10e>
 800a0bc:	2601      	movs	r6, #1
 800a0be:	4f66      	ldr	r7, [pc, #408]	; (800a258 <_strtod_l+0x2d8>)
 800a0c0:	4276      	negs	r6, r6
 800a0c2:	e7e4      	b.n	800a08e <_strtod_l+0x10e>
 800a0c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	9221      	str	r2, [sp, #132]	; 0x84
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	2b30      	cmp	r3, #48	; 0x30
 800a0ce:	d0f9      	beq.n	800a0c4 <_strtod_l+0x144>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d09c      	beq.n	800a00e <_strtod_l+0x8e>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0da:	220a      	movs	r2, #10
 800a0dc:	9311      	str	r3, [sp, #68]	; 0x44
 800a0de:	2300      	movs	r3, #0
 800a0e0:	930e      	str	r3, [sp, #56]	; 0x38
 800a0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a0e8:	7805      	ldrb	r5, [r0, #0]
 800a0ea:	002b      	movs	r3, r5
 800a0ec:	3b30      	subs	r3, #48	; 0x30
 800a0ee:	b2d9      	uxtb	r1, r3
 800a0f0:	2909      	cmp	r1, #9
 800a0f2:	d927      	bls.n	800a144 <_strtod_l+0x1c4>
 800a0f4:	0022      	movs	r2, r4
 800a0f6:	9907      	ldr	r1, [sp, #28]
 800a0f8:	f003 fb0a 	bl	800d710 <strncmp>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d033      	beq.n	800a168 <_strtod_l+0x1e8>
 800a100:	2000      	movs	r0, #0
 800a102:	002b      	movs	r3, r5
 800a104:	4684      	mov	ip, r0
 800a106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a108:	900c      	str	r0, [sp, #48]	; 0x30
 800a10a:	9206      	str	r2, [sp, #24]
 800a10c:	2220      	movs	r2, #32
 800a10e:	0019      	movs	r1, r3
 800a110:	4391      	bics	r1, r2
 800a112:	000a      	movs	r2, r1
 800a114:	2100      	movs	r1, #0
 800a116:	9107      	str	r1, [sp, #28]
 800a118:	2a45      	cmp	r2, #69	; 0x45
 800a11a:	d000      	beq.n	800a11e <_strtod_l+0x19e>
 800a11c:	e0c5      	b.n	800a2aa <_strtod_l+0x32a>
 800a11e:	9b06      	ldr	r3, [sp, #24]
 800a120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a122:	4303      	orrs	r3, r0
 800a124:	4313      	orrs	r3, r2
 800a126:	428b      	cmp	r3, r1
 800a128:	d090      	beq.n	800a04c <_strtod_l+0xcc>
 800a12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a12c:	9308      	str	r3, [sp, #32]
 800a12e:	3301      	adds	r3, #1
 800a130:	9321      	str	r3, [sp, #132]	; 0x84
 800a132:	9b08      	ldr	r3, [sp, #32]
 800a134:	785b      	ldrb	r3, [r3, #1]
 800a136:	2b2b      	cmp	r3, #43	; 0x2b
 800a138:	d075      	beq.n	800a226 <_strtod_l+0x2a6>
 800a13a:	000c      	movs	r4, r1
 800a13c:	2b2d      	cmp	r3, #45	; 0x2d
 800a13e:	d178      	bne.n	800a232 <_strtod_l+0x2b2>
 800a140:	2401      	movs	r4, #1
 800a142:	e071      	b.n	800a228 <_strtod_l+0x2a8>
 800a144:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a146:	2908      	cmp	r1, #8
 800a148:	dc09      	bgt.n	800a15e <_strtod_l+0x1de>
 800a14a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a14c:	4351      	muls	r1, r2
 800a14e:	185b      	adds	r3, r3, r1
 800a150:	930b      	str	r3, [sp, #44]	; 0x2c
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	3001      	adds	r0, #1
 800a156:	3301      	adds	r3, #1
 800a158:	9309      	str	r3, [sp, #36]	; 0x24
 800a15a:	9021      	str	r0, [sp, #132]	; 0x84
 800a15c:	e7c3      	b.n	800a0e6 <_strtod_l+0x166>
 800a15e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a160:	4351      	muls	r1, r2
 800a162:	185b      	adds	r3, r3, r1
 800a164:	930e      	str	r3, [sp, #56]	; 0x38
 800a166:	e7f4      	b.n	800a152 <_strtod_l+0x1d2>
 800a168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16c:	191c      	adds	r4, r3, r4
 800a16e:	9421      	str	r4, [sp, #132]	; 0x84
 800a170:	7823      	ldrb	r3, [r4, #0]
 800a172:	2a00      	cmp	r2, #0
 800a174:	d039      	beq.n	800a1ea <_strtod_l+0x26a>
 800a176:	900c      	str	r0, [sp, #48]	; 0x30
 800a178:	9206      	str	r2, [sp, #24]
 800a17a:	001a      	movs	r2, r3
 800a17c:	3a30      	subs	r2, #48	; 0x30
 800a17e:	2a09      	cmp	r2, #9
 800a180:	d912      	bls.n	800a1a8 <_strtod_l+0x228>
 800a182:	2201      	movs	r2, #1
 800a184:	4694      	mov	ip, r2
 800a186:	e7c1      	b.n	800a10c <_strtod_l+0x18c>
 800a188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a18a:	3001      	adds	r0, #1
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	9221      	str	r2, [sp, #132]	; 0x84
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	2b30      	cmp	r3, #48	; 0x30
 800a194:	d0f8      	beq.n	800a188 <_strtod_l+0x208>
 800a196:	001a      	movs	r2, r3
 800a198:	3a31      	subs	r2, #49	; 0x31
 800a19a:	2a08      	cmp	r2, #8
 800a19c:	d83e      	bhi.n	800a21c <_strtod_l+0x29c>
 800a19e:	900c      	str	r0, [sp, #48]	; 0x30
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1a4:	9006      	str	r0, [sp, #24]
 800a1a6:	9211      	str	r2, [sp, #68]	; 0x44
 800a1a8:	001a      	movs	r2, r3
 800a1aa:	9906      	ldr	r1, [sp, #24]
 800a1ac:	1c44      	adds	r4, r0, #1
 800a1ae:	3a30      	subs	r2, #48	; 0x30
 800a1b0:	2b30      	cmp	r3, #48	; 0x30
 800a1b2:	d013      	beq.n	800a1dc <_strtod_l+0x25c>
 800a1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b6:	191b      	adds	r3, r3, r4
 800a1b8:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ba:	1844      	adds	r4, r0, r1
 800a1bc:	000b      	movs	r3, r1
 800a1be:	210a      	movs	r1, #10
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d114      	bne.n	800a1ee <_strtod_l+0x26e>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	1c59      	adds	r1, r3, #1
 800a1c8:	1809      	adds	r1, r1, r0
 800a1ca:	1818      	adds	r0, r3, r0
 800a1cc:	2808      	cmp	r0, #8
 800a1ce:	dc1c      	bgt.n	800a20a <_strtod_l+0x28a>
 800a1d0:	230a      	movs	r3, #10
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a1d6:	4343      	muls	r3, r0
 800a1d8:	18d3      	adds	r3, r2, r3
 800a1da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1de:	0020      	movs	r0, r4
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	9221      	str	r2, [sp, #132]	; 0x84
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	9106      	str	r1, [sp, #24]
 800a1e8:	e7c7      	b.n	800a17a <_strtod_l+0x1fa>
 800a1ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ec:	e7d1      	b.n	800a192 <_strtod_l+0x212>
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	dc04      	bgt.n	800a1fc <_strtod_l+0x27c>
 800a1f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a1f4:	434d      	muls	r5, r1
 800a1f6:	950b      	str	r5, [sp, #44]	; 0x2c
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	e7e1      	b.n	800a1c0 <_strtod_l+0x240>
 800a1fc:	1c5d      	adds	r5, r3, #1
 800a1fe:	2d10      	cmp	r5, #16
 800a200:	dcfa      	bgt.n	800a1f8 <_strtod_l+0x278>
 800a202:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a204:	434d      	muls	r5, r1
 800a206:	950e      	str	r5, [sp, #56]	; 0x38
 800a208:	e7f6      	b.n	800a1f8 <_strtod_l+0x278>
 800a20a:	2400      	movs	r4, #0
 800a20c:	2910      	cmp	r1, #16
 800a20e:	dce5      	bgt.n	800a1dc <_strtod_l+0x25c>
 800a210:	230a      	movs	r3, #10
 800a212:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a214:	4343      	muls	r3, r0
 800a216:	18d3      	adds	r3, r2, r3
 800a218:	930e      	str	r3, [sp, #56]	; 0x38
 800a21a:	e7df      	b.n	800a1dc <_strtod_l+0x25c>
 800a21c:	2200      	movs	r2, #0
 800a21e:	920c      	str	r2, [sp, #48]	; 0x30
 800a220:	9206      	str	r2, [sp, #24]
 800a222:	3201      	adds	r2, #1
 800a224:	e7ae      	b.n	800a184 <_strtod_l+0x204>
 800a226:	2400      	movs	r4, #0
 800a228:	9b08      	ldr	r3, [sp, #32]
 800a22a:	3302      	adds	r3, #2
 800a22c:	9321      	str	r3, [sp, #132]	; 0x84
 800a22e:	9b08      	ldr	r3, [sp, #32]
 800a230:	789b      	ldrb	r3, [r3, #2]
 800a232:	001a      	movs	r2, r3
 800a234:	3a30      	subs	r2, #48	; 0x30
 800a236:	2a09      	cmp	r2, #9
 800a238:	d914      	bls.n	800a264 <_strtod_l+0x2e4>
 800a23a:	9a08      	ldr	r2, [sp, #32]
 800a23c:	9221      	str	r2, [sp, #132]	; 0x84
 800a23e:	2200      	movs	r2, #0
 800a240:	e032      	b.n	800a2a8 <_strtod_l+0x328>
 800a242:	46c0      	nop			; (mov r8, r8)
 800a244:	0800e840 	.word	0x0800e840
 800a248:	0800e5f0 	.word	0x0800e5f0
 800a24c:	ffefffff 	.word	0xffefffff
 800a250:	00000433 	.word	0x00000433
 800a254:	7ff00000 	.word	0x7ff00000
 800a258:	7fffffff 	.word	0x7fffffff
 800a25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	9221      	str	r2, [sp, #132]	; 0x84
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	2b30      	cmp	r3, #48	; 0x30
 800a266:	d0f9      	beq.n	800a25c <_strtod_l+0x2dc>
 800a268:	2200      	movs	r2, #0
 800a26a:	9207      	str	r2, [sp, #28]
 800a26c:	001a      	movs	r2, r3
 800a26e:	3a31      	subs	r2, #49	; 0x31
 800a270:	2a08      	cmp	r2, #8
 800a272:	d81a      	bhi.n	800a2aa <_strtod_l+0x32a>
 800a274:	3b30      	subs	r3, #48	; 0x30
 800a276:	001a      	movs	r2, r3
 800a278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a27e:	1c59      	adds	r1, r3, #1
 800a280:	9121      	str	r1, [sp, #132]	; 0x84
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	001d      	movs	r5, r3
 800a286:	3d30      	subs	r5, #48	; 0x30
 800a288:	2d09      	cmp	r5, #9
 800a28a:	d939      	bls.n	800a300 <_strtod_l+0x380>
 800a28c:	9d07      	ldr	r5, [sp, #28]
 800a28e:	1b49      	subs	r1, r1, r5
 800a290:	4daf      	ldr	r5, [pc, #700]	; (800a550 <_strtod_l+0x5d0>)
 800a292:	9507      	str	r5, [sp, #28]
 800a294:	2908      	cmp	r1, #8
 800a296:	dc03      	bgt.n	800a2a0 <_strtod_l+0x320>
 800a298:	9207      	str	r2, [sp, #28]
 800a29a:	42aa      	cmp	r2, r5
 800a29c:	dd00      	ble.n	800a2a0 <_strtod_l+0x320>
 800a29e:	9507      	str	r5, [sp, #28]
 800a2a0:	2c00      	cmp	r4, #0
 800a2a2:	d002      	beq.n	800a2aa <_strtod_l+0x32a>
 800a2a4:	9a07      	ldr	r2, [sp, #28]
 800a2a6:	4252      	negs	r2, r2
 800a2a8:	9207      	str	r2, [sp, #28]
 800a2aa:	9a06      	ldr	r2, [sp, #24]
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	d14b      	bne.n	800a348 <_strtod_l+0x3c8>
 800a2b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b2:	4310      	orrs	r0, r2
 800a2b4:	d000      	beq.n	800a2b8 <_strtod_l+0x338>
 800a2b6:	e6aa      	b.n	800a00e <_strtod_l+0x8e>
 800a2b8:	4662      	mov	r2, ip
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	d000      	beq.n	800a2c0 <_strtod_l+0x340>
 800a2be:	e6c5      	b.n	800a04c <_strtod_l+0xcc>
 800a2c0:	2b69      	cmp	r3, #105	; 0x69
 800a2c2:	d025      	beq.n	800a310 <_strtod_l+0x390>
 800a2c4:	dc21      	bgt.n	800a30a <_strtod_l+0x38a>
 800a2c6:	2b49      	cmp	r3, #73	; 0x49
 800a2c8:	d022      	beq.n	800a310 <_strtod_l+0x390>
 800a2ca:	2b4e      	cmp	r3, #78	; 0x4e
 800a2cc:	d000      	beq.n	800a2d0 <_strtod_l+0x350>
 800a2ce:	e6bd      	b.n	800a04c <_strtod_l+0xcc>
 800a2d0:	49a0      	ldr	r1, [pc, #640]	; (800a554 <_strtod_l+0x5d4>)
 800a2d2:	a821      	add	r0, sp, #132	; 0x84
 800a2d4:	f001 fe9a 	bl	800c00c <__match>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d100      	bne.n	800a2de <_strtod_l+0x35e>
 800a2dc:	e6b6      	b.n	800a04c <_strtod_l+0xcc>
 800a2de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b28      	cmp	r3, #40	; 0x28
 800a2e4:	d12a      	bne.n	800a33c <_strtod_l+0x3bc>
 800a2e6:	499c      	ldr	r1, [pc, #624]	; (800a558 <_strtod_l+0x5d8>)
 800a2e8:	aa24      	add	r2, sp, #144	; 0x90
 800a2ea:	a821      	add	r0, sp, #132	; 0x84
 800a2ec:	f001 fea2 	bl	800c034 <__hexnan>
 800a2f0:	2805      	cmp	r0, #5
 800a2f2:	d123      	bne.n	800a33c <_strtod_l+0x3bc>
 800a2f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a2f6:	4a99      	ldr	r2, [pc, #612]	; (800a55c <_strtod_l+0x5dc>)
 800a2f8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	0017      	movs	r7, r2
 800a2fe:	e686      	b.n	800a00e <_strtod_l+0x8e>
 800a300:	210a      	movs	r1, #10
 800a302:	434a      	muls	r2, r1
 800a304:	18d2      	adds	r2, r2, r3
 800a306:	3a30      	subs	r2, #48	; 0x30
 800a308:	e7b8      	b.n	800a27c <_strtod_l+0x2fc>
 800a30a:	2b6e      	cmp	r3, #110	; 0x6e
 800a30c:	d0e0      	beq.n	800a2d0 <_strtod_l+0x350>
 800a30e:	e69d      	b.n	800a04c <_strtod_l+0xcc>
 800a310:	4993      	ldr	r1, [pc, #588]	; (800a560 <_strtod_l+0x5e0>)
 800a312:	a821      	add	r0, sp, #132	; 0x84
 800a314:	f001 fe7a 	bl	800c00c <__match>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d100      	bne.n	800a31e <_strtod_l+0x39e>
 800a31c:	e696      	b.n	800a04c <_strtod_l+0xcc>
 800a31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a320:	4990      	ldr	r1, [pc, #576]	; (800a564 <_strtod_l+0x5e4>)
 800a322:	3b01      	subs	r3, #1
 800a324:	a821      	add	r0, sp, #132	; 0x84
 800a326:	9321      	str	r3, [sp, #132]	; 0x84
 800a328:	f001 fe70 	bl	800c00c <__match>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d102      	bne.n	800a336 <_strtod_l+0x3b6>
 800a330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a332:	3301      	adds	r3, #1
 800a334:	9321      	str	r3, [sp, #132]	; 0x84
 800a336:	2600      	movs	r6, #0
 800a338:	4f88      	ldr	r7, [pc, #544]	; (800a55c <_strtod_l+0x5dc>)
 800a33a:	e668      	b.n	800a00e <_strtod_l+0x8e>
 800a33c:	488a      	ldr	r0, [pc, #552]	; (800a568 <_strtod_l+0x5e8>)
 800a33e:	f003 f993 	bl	800d668 <nan>
 800a342:	0006      	movs	r6, r0
 800a344:	000f      	movs	r7, r1
 800a346:	e662      	b.n	800a00e <_strtod_l+0x8e>
 800a348:	9b07      	ldr	r3, [sp, #28]
 800a34a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	930a      	str	r3, [sp, #40]	; 0x28
 800a350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <_strtod_l+0x3da>
 800a356:	9b06      	ldr	r3, [sp, #24]
 800a358:	9309      	str	r3, [sp, #36]	; 0x24
 800a35a:	9c06      	ldr	r4, [sp, #24]
 800a35c:	2c10      	cmp	r4, #16
 800a35e:	dd00      	ble.n	800a362 <_strtod_l+0x3e2>
 800a360:	2410      	movs	r4, #16
 800a362:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a364:	f7f8 f9b4 	bl	80026d0 <__aeabi_ui2d>
 800a368:	9b06      	ldr	r3, [sp, #24]
 800a36a:	0006      	movs	r6, r0
 800a36c:	000f      	movs	r7, r1
 800a36e:	2b09      	cmp	r3, #9
 800a370:	dd15      	ble.n	800a39e <_strtod_l+0x41e>
 800a372:	0022      	movs	r2, r4
 800a374:	4b7d      	ldr	r3, [pc, #500]	; (800a56c <_strtod_l+0x5ec>)
 800a376:	3a09      	subs	r2, #9
 800a378:	00d2      	lsls	r2, r2, #3
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f7f7 fb24 	bl	80019cc <__aeabi_dmul>
 800a384:	0006      	movs	r6, r0
 800a386:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a388:	000f      	movs	r7, r1
 800a38a:	f7f8 f9a1 	bl	80026d0 <__aeabi_ui2d>
 800a38e:	0002      	movs	r2, r0
 800a390:	000b      	movs	r3, r1
 800a392:	0030      	movs	r0, r6
 800a394:	0039      	movs	r1, r7
 800a396:	f7f6 fba9 	bl	8000aec <__aeabi_dadd>
 800a39a:	0006      	movs	r6, r0
 800a39c:	000f      	movs	r7, r1
 800a39e:	9b06      	ldr	r3, [sp, #24]
 800a3a0:	2b0f      	cmp	r3, #15
 800a3a2:	dc39      	bgt.n	800a418 <_strtod_l+0x498>
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d100      	bne.n	800a3ac <_strtod_l+0x42c>
 800a3aa:	e630      	b.n	800a00e <_strtod_l+0x8e>
 800a3ac:	dd24      	ble.n	800a3f8 <_strtod_l+0x478>
 800a3ae:	2b16      	cmp	r3, #22
 800a3b0:	dc09      	bgt.n	800a3c6 <_strtod_l+0x446>
 800a3b2:	00dd      	lsls	r5, r3, #3
 800a3b4:	0032      	movs	r2, r6
 800a3b6:	003b      	movs	r3, r7
 800a3b8:	4c6c      	ldr	r4, [pc, #432]	; (800a56c <_strtod_l+0x5ec>)
 800a3ba:	1964      	adds	r4, r4, r5
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	6861      	ldr	r1, [r4, #4]
 800a3c0:	f7f7 fb04 	bl	80019cc <__aeabi_dmul>
 800a3c4:	e7bd      	b.n	800a342 <_strtod_l+0x3c2>
 800a3c6:	2325      	movs	r3, #37	; 0x25
 800a3c8:	9a06      	ldr	r2, [sp, #24]
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	db22      	blt.n	800a418 <_strtod_l+0x498>
 800a3d2:	240f      	movs	r4, #15
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	4d65      	ldr	r5, [pc, #404]	; (800a56c <_strtod_l+0x5ec>)
 800a3d8:	1ae4      	subs	r4, r4, r3
 800a3da:	00e1      	lsls	r1, r4, #3
 800a3dc:	1869      	adds	r1, r5, r1
 800a3de:	0032      	movs	r2, r6
 800a3e0:	6808      	ldr	r0, [r1, #0]
 800a3e2:	6849      	ldr	r1, [r1, #4]
 800a3e4:	003b      	movs	r3, r7
 800a3e6:	f7f7 faf1 	bl	80019cc <__aeabi_dmul>
 800a3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ec:	1b1c      	subs	r4, r3, r4
 800a3ee:	00e4      	lsls	r4, r4, #3
 800a3f0:	192c      	adds	r4, r5, r4
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	e7e3      	b.n	800a3c0 <_strtod_l+0x440>
 800a3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fa:	3316      	adds	r3, #22
 800a3fc:	db0c      	blt.n	800a418 <_strtod_l+0x498>
 800a3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a400:	9a07      	ldr	r2, [sp, #28]
 800a402:	0030      	movs	r0, r6
 800a404:	1a9a      	subs	r2, r3, r2
 800a406:	4b59      	ldr	r3, [pc, #356]	; (800a56c <_strtod_l+0x5ec>)
 800a408:	00d2      	lsls	r2, r2, #3
 800a40a:	189b      	adds	r3, r3, r2
 800a40c:	0039      	movs	r1, r7
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f7f6 fed5 	bl	80011c0 <__aeabi_ddiv>
 800a416:	e794      	b.n	800a342 <_strtod_l+0x3c2>
 800a418:	9b06      	ldr	r3, [sp, #24]
 800a41a:	1b1c      	subs	r4, r3, r4
 800a41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41e:	18e4      	adds	r4, r4, r3
 800a420:	2c00      	cmp	r4, #0
 800a422:	dd70      	ble.n	800a506 <_strtod_l+0x586>
 800a424:	230f      	movs	r3, #15
 800a426:	0021      	movs	r1, r4
 800a428:	4019      	ands	r1, r3
 800a42a:	421c      	tst	r4, r3
 800a42c:	d00a      	beq.n	800a444 <_strtod_l+0x4c4>
 800a42e:	00cb      	lsls	r3, r1, #3
 800a430:	494e      	ldr	r1, [pc, #312]	; (800a56c <_strtod_l+0x5ec>)
 800a432:	0032      	movs	r2, r6
 800a434:	18c9      	adds	r1, r1, r3
 800a436:	6808      	ldr	r0, [r1, #0]
 800a438:	6849      	ldr	r1, [r1, #4]
 800a43a:	003b      	movs	r3, r7
 800a43c:	f7f7 fac6 	bl	80019cc <__aeabi_dmul>
 800a440:	0006      	movs	r6, r0
 800a442:	000f      	movs	r7, r1
 800a444:	230f      	movs	r3, #15
 800a446:	439c      	bics	r4, r3
 800a448:	d048      	beq.n	800a4dc <_strtod_l+0x55c>
 800a44a:	3326      	adds	r3, #38	; 0x26
 800a44c:	33ff      	adds	r3, #255	; 0xff
 800a44e:	429c      	cmp	r4, r3
 800a450:	dd22      	ble.n	800a498 <_strtod_l+0x518>
 800a452:	2300      	movs	r3, #0
 800a454:	9306      	str	r3, [sp, #24]
 800a456:	9307      	str	r3, [sp, #28]
 800a458:	930b      	str	r3, [sp, #44]	; 0x2c
 800a45a:	9309      	str	r3, [sp, #36]	; 0x24
 800a45c:	2322      	movs	r3, #34	; 0x22
 800a45e:	2600      	movs	r6, #0
 800a460:	9a05      	ldr	r2, [sp, #20]
 800a462:	4f3e      	ldr	r7, [pc, #248]	; (800a55c <_strtod_l+0x5dc>)
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a468:	42b3      	cmp	r3, r6
 800a46a:	d100      	bne.n	800a46e <_strtod_l+0x4ee>
 800a46c:	e5cf      	b.n	800a00e <_strtod_l+0x8e>
 800a46e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a470:	9805      	ldr	r0, [sp, #20]
 800a472:	f001 ff11 	bl	800c298 <_Bfree>
 800a476:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a478:	9805      	ldr	r0, [sp, #20]
 800a47a:	f001 ff0d 	bl	800c298 <_Bfree>
 800a47e:	9907      	ldr	r1, [sp, #28]
 800a480:	9805      	ldr	r0, [sp, #20]
 800a482:	f001 ff09 	bl	800c298 <_Bfree>
 800a486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a488:	9805      	ldr	r0, [sp, #20]
 800a48a:	f001 ff05 	bl	800c298 <_Bfree>
 800a48e:	9906      	ldr	r1, [sp, #24]
 800a490:	9805      	ldr	r0, [sp, #20]
 800a492:	f001 ff01 	bl	800c298 <_Bfree>
 800a496:	e5ba      	b.n	800a00e <_strtod_l+0x8e>
 800a498:	2300      	movs	r3, #0
 800a49a:	0030      	movs	r0, r6
 800a49c:	0039      	movs	r1, r7
 800a49e:	001d      	movs	r5, r3
 800a4a0:	1124      	asrs	r4, r4, #4
 800a4a2:	2c01      	cmp	r4, #1
 800a4a4:	dc1d      	bgt.n	800a4e2 <_strtod_l+0x562>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <_strtod_l+0x52e>
 800a4aa:	0006      	movs	r6, r0
 800a4ac:	000f      	movs	r7, r1
 800a4ae:	4b30      	ldr	r3, [pc, #192]	; (800a570 <_strtod_l+0x5f0>)
 800a4b0:	00ed      	lsls	r5, r5, #3
 800a4b2:	18ff      	adds	r7, r7, r3
 800a4b4:	4b2f      	ldr	r3, [pc, #188]	; (800a574 <_strtod_l+0x5f4>)
 800a4b6:	0032      	movs	r2, r6
 800a4b8:	195d      	adds	r5, r3, r5
 800a4ba:	6828      	ldr	r0, [r5, #0]
 800a4bc:	6869      	ldr	r1, [r5, #4]
 800a4be:	003b      	movs	r3, r7
 800a4c0:	f7f7 fa84 	bl	80019cc <__aeabi_dmul>
 800a4c4:	4b25      	ldr	r3, [pc, #148]	; (800a55c <_strtod_l+0x5dc>)
 800a4c6:	4a2c      	ldr	r2, [pc, #176]	; (800a578 <_strtod_l+0x5f8>)
 800a4c8:	0006      	movs	r6, r0
 800a4ca:	400b      	ands	r3, r1
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d8c0      	bhi.n	800a452 <_strtod_l+0x4d2>
 800a4d0:	4a2a      	ldr	r2, [pc, #168]	; (800a57c <_strtod_l+0x5fc>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d913      	bls.n	800a4fe <_strtod_l+0x57e>
 800a4d6:	2601      	movs	r6, #1
 800a4d8:	4f29      	ldr	r7, [pc, #164]	; (800a580 <_strtod_l+0x600>)
 800a4da:	4276      	negs	r6, r6
 800a4dc:	2300      	movs	r3, #0
 800a4de:	9308      	str	r3, [sp, #32]
 800a4e0:	e087      	b.n	800a5f2 <_strtod_l+0x672>
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	4214      	tst	r4, r2
 800a4e6:	d007      	beq.n	800a4f8 <_strtod_l+0x578>
 800a4e8:	4a22      	ldr	r2, [pc, #136]	; (800a574 <_strtod_l+0x5f4>)
 800a4ea:	00eb      	lsls	r3, r5, #3
 800a4ec:	189b      	adds	r3, r3, r2
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f7f7 fa6b 	bl	80019cc <__aeabi_dmul>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	1064      	asrs	r4, r4, #1
 800a4fc:	e7d1      	b.n	800a4a2 <_strtod_l+0x522>
 800a4fe:	23d4      	movs	r3, #212	; 0xd4
 800a500:	049b      	lsls	r3, r3, #18
 800a502:	18cf      	adds	r7, r1, r3
 800a504:	e7ea      	b.n	800a4dc <_strtod_l+0x55c>
 800a506:	2c00      	cmp	r4, #0
 800a508:	d0e8      	beq.n	800a4dc <_strtod_l+0x55c>
 800a50a:	4264      	negs	r4, r4
 800a50c:	220f      	movs	r2, #15
 800a50e:	0023      	movs	r3, r4
 800a510:	4013      	ands	r3, r2
 800a512:	4214      	tst	r4, r2
 800a514:	d00a      	beq.n	800a52c <_strtod_l+0x5ac>
 800a516:	00da      	lsls	r2, r3, #3
 800a518:	4b14      	ldr	r3, [pc, #80]	; (800a56c <_strtod_l+0x5ec>)
 800a51a:	0030      	movs	r0, r6
 800a51c:	189b      	adds	r3, r3, r2
 800a51e:	0039      	movs	r1, r7
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f7f6 fe4c 	bl	80011c0 <__aeabi_ddiv>
 800a528:	0006      	movs	r6, r0
 800a52a:	000f      	movs	r7, r1
 800a52c:	1124      	asrs	r4, r4, #4
 800a52e:	d0d5      	beq.n	800a4dc <_strtod_l+0x55c>
 800a530:	2c1f      	cmp	r4, #31
 800a532:	dd27      	ble.n	800a584 <_strtod_l+0x604>
 800a534:	2300      	movs	r3, #0
 800a536:	9306      	str	r3, [sp, #24]
 800a538:	9307      	str	r3, [sp, #28]
 800a53a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a53c:	9309      	str	r3, [sp, #36]	; 0x24
 800a53e:	2322      	movs	r3, #34	; 0x22
 800a540:	9a05      	ldr	r2, [sp, #20]
 800a542:	2600      	movs	r6, #0
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a548:	2700      	movs	r7, #0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d18f      	bne.n	800a46e <_strtod_l+0x4ee>
 800a54e:	e55e      	b.n	800a00e <_strtod_l+0x8e>
 800a550:	00004e1f 	.word	0x00004e1f
 800a554:	0800e5c5 	.word	0x0800e5c5
 800a558:	0800e604 	.word	0x0800e604
 800a55c:	7ff00000 	.word	0x7ff00000
 800a560:	0800e5bd 	.word	0x0800e5bd
 800a564:	0800e744 	.word	0x0800e744
 800a568:	0800ea1b 	.word	0x0800ea1b
 800a56c:	0800e8e0 	.word	0x0800e8e0
 800a570:	fcb00000 	.word	0xfcb00000
 800a574:	0800e8b8 	.word	0x0800e8b8
 800a578:	7ca00000 	.word	0x7ca00000
 800a57c:	7c900000 	.word	0x7c900000
 800a580:	7fefffff 	.word	0x7fefffff
 800a584:	2310      	movs	r3, #16
 800a586:	0022      	movs	r2, r4
 800a588:	401a      	ands	r2, r3
 800a58a:	9208      	str	r2, [sp, #32]
 800a58c:	421c      	tst	r4, r3
 800a58e:	d001      	beq.n	800a594 <_strtod_l+0x614>
 800a590:	335a      	adds	r3, #90	; 0x5a
 800a592:	9308      	str	r3, [sp, #32]
 800a594:	0030      	movs	r0, r6
 800a596:	0039      	movs	r1, r7
 800a598:	2300      	movs	r3, #0
 800a59a:	4dca      	ldr	r5, [pc, #808]	; (800a8c4 <_strtod_l+0x944>)
 800a59c:	2201      	movs	r2, #1
 800a59e:	4214      	tst	r4, r2
 800a5a0:	d004      	beq.n	800a5ac <_strtod_l+0x62c>
 800a5a2:	682a      	ldr	r2, [r5, #0]
 800a5a4:	686b      	ldr	r3, [r5, #4]
 800a5a6:	f7f7 fa11 	bl	80019cc <__aeabi_dmul>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	1064      	asrs	r4, r4, #1
 800a5ae:	3508      	adds	r5, #8
 800a5b0:	2c00      	cmp	r4, #0
 800a5b2:	d1f3      	bne.n	800a59c <_strtod_l+0x61c>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <_strtod_l+0x63c>
 800a5b8:	0006      	movs	r6, r0
 800a5ba:	000f      	movs	r7, r1
 800a5bc:	9b08      	ldr	r3, [sp, #32]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00f      	beq.n	800a5e2 <_strtod_l+0x662>
 800a5c2:	236b      	movs	r3, #107	; 0x6b
 800a5c4:	0079      	lsls	r1, r7, #1
 800a5c6:	0d49      	lsrs	r1, r1, #21
 800a5c8:	003a      	movs	r2, r7
 800a5ca:	1a5b      	subs	r3, r3, r1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dd08      	ble.n	800a5e2 <_strtod_l+0x662>
 800a5d0:	2b1f      	cmp	r3, #31
 800a5d2:	dc00      	bgt.n	800a5d6 <_strtod_l+0x656>
 800a5d4:	e126      	b.n	800a824 <_strtod_l+0x8a4>
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	2b34      	cmp	r3, #52	; 0x34
 800a5da:	dc00      	bgt.n	800a5de <_strtod_l+0x65e>
 800a5dc:	e11b      	b.n	800a816 <_strtod_l+0x896>
 800a5de:	27dc      	movs	r7, #220	; 0xdc
 800a5e0:	04bf      	lsls	r7, r7, #18
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	0030      	movs	r0, r6
 800a5e8:	0039      	movs	r1, r7
 800a5ea:	f7f5 ff39 	bl	8000460 <__aeabi_dcmpeq>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d1a0      	bne.n	800a534 <_strtod_l+0x5b4>
 800a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5fa:	9b06      	ldr	r3, [sp, #24]
 800a5fc:	9805      	ldr	r0, [sp, #20]
 800a5fe:	f001 feb3 	bl	800c368 <__s2b>
 800a602:	900b      	str	r0, [sp, #44]	; 0x2c
 800a604:	2800      	cmp	r0, #0
 800a606:	d100      	bne.n	800a60a <_strtod_l+0x68a>
 800a608:	e723      	b.n	800a452 <_strtod_l+0x4d2>
 800a60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60c:	9907      	ldr	r1, [sp, #28]
 800a60e:	17da      	asrs	r2, r3, #31
 800a610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	401a      	ands	r2, r3
 800a616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a618:	9215      	str	r2, [sp, #84]	; 0x54
 800a61a:	43db      	mvns	r3, r3
 800a61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a61e:	17db      	asrs	r3, r3, #31
 800a620:	401a      	ands	r2, r3
 800a622:	2300      	movs	r3, #0
 800a624:	921c      	str	r2, [sp, #112]	; 0x70
 800a626:	9306      	str	r3, [sp, #24]
 800a628:	9307      	str	r3, [sp, #28]
 800a62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a62c:	9805      	ldr	r0, [sp, #20]
 800a62e:	6859      	ldr	r1, [r3, #4]
 800a630:	f001 fdee 	bl	800c210 <_Balloc>
 800a634:	9009      	str	r0, [sp, #36]	; 0x24
 800a636:	2800      	cmp	r0, #0
 800a638:	d100      	bne.n	800a63c <_strtod_l+0x6bc>
 800a63a:	e70f      	b.n	800a45c <_strtod_l+0x4dc>
 800a63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	310c      	adds	r1, #12
 800a644:	1c9a      	adds	r2, r3, #2
 800a646:	0092      	lsls	r2, r2, #2
 800a648:	300c      	adds	r0, #12
 800a64a:	930c      	str	r3, [sp, #48]	; 0x30
 800a64c:	f001 fdd7 	bl	800c1fe <memcpy>
 800a650:	ab24      	add	r3, sp, #144	; 0x90
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	ab23      	add	r3, sp, #140	; 0x8c
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	0032      	movs	r2, r6
 800a65a:	003b      	movs	r3, r7
 800a65c:	9805      	ldr	r0, [sp, #20]
 800a65e:	960e      	str	r6, [sp, #56]	; 0x38
 800a660:	970f      	str	r7, [sp, #60]	; 0x3c
 800a662:	f002 f9cf 	bl	800ca04 <__d2b>
 800a666:	9022      	str	r0, [sp, #136]	; 0x88
 800a668:	2800      	cmp	r0, #0
 800a66a:	d100      	bne.n	800a66e <_strtod_l+0x6ee>
 800a66c:	e6f6      	b.n	800a45c <_strtod_l+0x4dc>
 800a66e:	2101      	movs	r1, #1
 800a670:	9805      	ldr	r0, [sp, #20]
 800a672:	f001 ff0d 	bl	800c490 <__i2b>
 800a676:	9007      	str	r0, [sp, #28]
 800a678:	2800      	cmp	r0, #0
 800a67a:	d100      	bne.n	800a67e <_strtod_l+0x6fe>
 800a67c:	e6ee      	b.n	800a45c <_strtod_l+0x4dc>
 800a67e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a680:	2b00      	cmp	r3, #0
 800a682:	da00      	bge.n	800a686 <_strtod_l+0x706>
 800a684:	e0d3      	b.n	800a82e <_strtod_l+0x8ae>
 800a686:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a688:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a68a:	189d      	adds	r5, r3, r2
 800a68c:	9908      	ldr	r1, [sp, #32]
 800a68e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a690:	1a5b      	subs	r3, r3, r1
 800a692:	2136      	movs	r1, #54	; 0x36
 800a694:	189b      	adds	r3, r3, r2
 800a696:	1a8a      	subs	r2, r1, r2
 800a698:	498b      	ldr	r1, [pc, #556]	; (800a8c8 <_strtod_l+0x948>)
 800a69a:	3b01      	subs	r3, #1
 800a69c:	2001      	movs	r0, #1
 800a69e:	428b      	cmp	r3, r1
 800a6a0:	db00      	blt.n	800a6a4 <_strtod_l+0x724>
 800a6a2:	e0cf      	b.n	800a844 <_strtod_l+0x8c4>
 800a6a4:	1ac9      	subs	r1, r1, r3
 800a6a6:	1a52      	subs	r2, r2, r1
 800a6a8:	291f      	cmp	r1, #31
 800a6aa:	dd00      	ble.n	800a6ae <_strtod_l+0x72e>
 800a6ac:	e0c3      	b.n	800a836 <_strtod_l+0x8b6>
 800a6ae:	4088      	lsls	r0, r1
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9014      	str	r0, [sp, #80]	; 0x50
 800a6b4:	9312      	str	r3, [sp, #72]	; 0x48
 800a6b6:	18ab      	adds	r3, r5, r2
 800a6b8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ba:	18a4      	adds	r4, r4, r2
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c0:	191c      	adds	r4, r3, r4
 800a6c2:	002b      	movs	r3, r5
 800a6c4:	4295      	cmp	r5, r2
 800a6c6:	dd00      	ble.n	800a6ca <_strtod_l+0x74a>
 800a6c8:	0013      	movs	r3, r2
 800a6ca:	42a3      	cmp	r3, r4
 800a6cc:	dd00      	ble.n	800a6d0 <_strtod_l+0x750>
 800a6ce:	0023      	movs	r3, r4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dd04      	ble.n	800a6de <_strtod_l+0x75e>
 800a6d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d6:	1ae4      	subs	r4, r4, r3
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	920c      	str	r2, [sp, #48]	; 0x30
 800a6dc:	1aed      	subs	r5, r5, r3
 800a6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dd17      	ble.n	800a714 <_strtod_l+0x794>
 800a6e4:	001a      	movs	r2, r3
 800a6e6:	9907      	ldr	r1, [sp, #28]
 800a6e8:	9805      	ldr	r0, [sp, #20]
 800a6ea:	f001 ff97 	bl	800c61c <__pow5mult>
 800a6ee:	9007      	str	r0, [sp, #28]
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d100      	bne.n	800a6f6 <_strtod_l+0x776>
 800a6f4:	e6b2      	b.n	800a45c <_strtod_l+0x4dc>
 800a6f6:	0001      	movs	r1, r0
 800a6f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	f001 fede 	bl	800c4bc <__multiply>
 800a700:	9011      	str	r0, [sp, #68]	; 0x44
 800a702:	2800      	cmp	r0, #0
 800a704:	d100      	bne.n	800a708 <_strtod_l+0x788>
 800a706:	e6a9      	b.n	800a45c <_strtod_l+0x4dc>
 800a708:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a70a:	9805      	ldr	r0, [sp, #20]
 800a70c:	f001 fdc4 	bl	800c298 <_Bfree>
 800a710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a712:	9322      	str	r3, [sp, #136]	; 0x88
 800a714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a716:	2b00      	cmp	r3, #0
 800a718:	dd00      	ble.n	800a71c <_strtod_l+0x79c>
 800a71a:	e096      	b.n	800a84a <_strtod_l+0x8ca>
 800a71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71e:	2b00      	cmp	r3, #0
 800a720:	dd08      	ble.n	800a734 <_strtod_l+0x7b4>
 800a722:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a724:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a726:	9805      	ldr	r0, [sp, #20]
 800a728:	f001 ff78 	bl	800c61c <__pow5mult>
 800a72c:	9009      	str	r0, [sp, #36]	; 0x24
 800a72e:	2800      	cmp	r0, #0
 800a730:	d100      	bne.n	800a734 <_strtod_l+0x7b4>
 800a732:	e693      	b.n	800a45c <_strtod_l+0x4dc>
 800a734:	2c00      	cmp	r4, #0
 800a736:	dd08      	ble.n	800a74a <_strtod_l+0x7ca>
 800a738:	0022      	movs	r2, r4
 800a73a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a73c:	9805      	ldr	r0, [sp, #20]
 800a73e:	f001 ffc9 	bl	800c6d4 <__lshift>
 800a742:	9009      	str	r0, [sp, #36]	; 0x24
 800a744:	2800      	cmp	r0, #0
 800a746:	d100      	bne.n	800a74a <_strtod_l+0x7ca>
 800a748:	e688      	b.n	800a45c <_strtod_l+0x4dc>
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	dd08      	ble.n	800a760 <_strtod_l+0x7e0>
 800a74e:	002a      	movs	r2, r5
 800a750:	9907      	ldr	r1, [sp, #28]
 800a752:	9805      	ldr	r0, [sp, #20]
 800a754:	f001 ffbe 	bl	800c6d4 <__lshift>
 800a758:	9007      	str	r0, [sp, #28]
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d100      	bne.n	800a760 <_strtod_l+0x7e0>
 800a75e:	e67d      	b.n	800a45c <_strtod_l+0x4dc>
 800a760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a762:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a764:	9805      	ldr	r0, [sp, #20]
 800a766:	f002 f841 	bl	800c7ec <__mdiff>
 800a76a:	9006      	str	r0, [sp, #24]
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d100      	bne.n	800a772 <_strtod_l+0x7f2>
 800a770:	e674      	b.n	800a45c <_strtod_l+0x4dc>
 800a772:	2200      	movs	r2, #0
 800a774:	68c3      	ldr	r3, [r0, #12]
 800a776:	9907      	ldr	r1, [sp, #28]
 800a778:	60c2      	str	r2, [r0, #12]
 800a77a:	9311      	str	r3, [sp, #68]	; 0x44
 800a77c:	f002 f81a 	bl	800c7b4 <__mcmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	da6c      	bge.n	800a85e <_strtod_l+0x8de>
 800a784:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a786:	4333      	orrs	r3, r6
 800a788:	d000      	beq.n	800a78c <_strtod_l+0x80c>
 800a78a:	e097      	b.n	800a8bc <_strtod_l+0x93c>
 800a78c:	033b      	lsls	r3, r7, #12
 800a78e:	d000      	beq.n	800a792 <_strtod_l+0x812>
 800a790:	e094      	b.n	800a8bc <_strtod_l+0x93c>
 800a792:	22d6      	movs	r2, #214	; 0xd6
 800a794:	4b4d      	ldr	r3, [pc, #308]	; (800a8cc <_strtod_l+0x94c>)
 800a796:	04d2      	lsls	r2, r2, #19
 800a798:	403b      	ands	r3, r7
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d800      	bhi.n	800a7a0 <_strtod_l+0x820>
 800a79e:	e08d      	b.n	800a8bc <_strtod_l+0x93c>
 800a7a0:	9b06      	ldr	r3, [sp, #24]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	930a      	str	r3, [sp, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d105      	bne.n	800a7b6 <_strtod_l+0x836>
 800a7aa:	9b06      	ldr	r3, [sp, #24]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	dc00      	bgt.n	800a7b6 <_strtod_l+0x836>
 800a7b4:	e082      	b.n	800a8bc <_strtod_l+0x93c>
 800a7b6:	9906      	ldr	r1, [sp, #24]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	9805      	ldr	r0, [sp, #20]
 800a7bc:	f001 ff8a 	bl	800c6d4 <__lshift>
 800a7c0:	9907      	ldr	r1, [sp, #28]
 800a7c2:	9006      	str	r0, [sp, #24]
 800a7c4:	f001 fff6 	bl	800c7b4 <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	dd77      	ble.n	800a8bc <_strtod_l+0x93c>
 800a7cc:	9908      	ldr	r1, [sp, #32]
 800a7ce:	003b      	movs	r3, r7
 800a7d0:	4a3e      	ldr	r2, [pc, #248]	; (800a8cc <_strtod_l+0x94c>)
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	d100      	bne.n	800a7d8 <_strtod_l+0x858>
 800a7d6:	e09e      	b.n	800a916 <_strtod_l+0x996>
 800a7d8:	0011      	movs	r1, r2
 800a7da:	20d6      	movs	r0, #214	; 0xd6
 800a7dc:	4039      	ands	r1, r7
 800a7de:	04c0      	lsls	r0, r0, #19
 800a7e0:	4281      	cmp	r1, r0
 800a7e2:	dd00      	ble.n	800a7e6 <_strtod_l+0x866>
 800a7e4:	e097      	b.n	800a916 <_strtod_l+0x996>
 800a7e6:	23dc      	movs	r3, #220	; 0xdc
 800a7e8:	049b      	lsls	r3, r3, #18
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	dc00      	bgt.n	800a7f0 <_strtod_l+0x870>
 800a7ee:	e6a6      	b.n	800a53e <_strtod_l+0x5be>
 800a7f0:	4b37      	ldr	r3, [pc, #220]	; (800a8d0 <_strtod_l+0x950>)
 800a7f2:	0030      	movs	r0, r6
 800a7f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a7fa:	0039      	movs	r1, r7
 800a7fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a7fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a800:	f7f7 f8e4 	bl	80019cc <__aeabi_dmul>
 800a804:	0006      	movs	r6, r0
 800a806:	000f      	movs	r7, r1
 800a808:	4308      	orrs	r0, r1
 800a80a:	d000      	beq.n	800a80e <_strtod_l+0x88e>
 800a80c:	e62f      	b.n	800a46e <_strtod_l+0x4ee>
 800a80e:	2322      	movs	r3, #34	; 0x22
 800a810:	9a05      	ldr	r2, [sp, #20]
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e62b      	b.n	800a46e <_strtod_l+0x4ee>
 800a816:	2101      	movs	r1, #1
 800a818:	3b20      	subs	r3, #32
 800a81a:	4249      	negs	r1, r1
 800a81c:	4099      	lsls	r1, r3
 800a81e:	400a      	ands	r2, r1
 800a820:	0017      	movs	r7, r2
 800a822:	e6de      	b.n	800a5e2 <_strtod_l+0x662>
 800a824:	2201      	movs	r2, #1
 800a826:	4252      	negs	r2, r2
 800a828:	409a      	lsls	r2, r3
 800a82a:	4016      	ands	r6, r2
 800a82c:	e6d9      	b.n	800a5e2 <_strtod_l+0x662>
 800a82e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a830:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a832:	1ad4      	subs	r4, r2, r3
 800a834:	e72a      	b.n	800a68c <_strtod_l+0x70c>
 800a836:	4927      	ldr	r1, [pc, #156]	; (800a8d4 <_strtod_l+0x954>)
 800a838:	1acb      	subs	r3, r1, r3
 800a83a:	0001      	movs	r1, r0
 800a83c:	4099      	lsls	r1, r3
 800a83e:	9112      	str	r1, [sp, #72]	; 0x48
 800a840:	9014      	str	r0, [sp, #80]	; 0x50
 800a842:	e738      	b.n	800a6b6 <_strtod_l+0x736>
 800a844:	2300      	movs	r3, #0
 800a846:	9312      	str	r3, [sp, #72]	; 0x48
 800a848:	e7fa      	b.n	800a840 <_strtod_l+0x8c0>
 800a84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a84c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a84e:	9805      	ldr	r0, [sp, #20]
 800a850:	f001 ff40 	bl	800c6d4 <__lshift>
 800a854:	9022      	str	r0, [sp, #136]	; 0x88
 800a856:	2800      	cmp	r0, #0
 800a858:	d000      	beq.n	800a85c <_strtod_l+0x8dc>
 800a85a:	e75f      	b.n	800a71c <_strtod_l+0x79c>
 800a85c:	e5fe      	b.n	800a45c <_strtod_l+0x4dc>
 800a85e:	970c      	str	r7, [sp, #48]	; 0x30
 800a860:	2800      	cmp	r0, #0
 800a862:	d176      	bne.n	800a952 <_strtod_l+0x9d2>
 800a864:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a866:	033b      	lsls	r3, r7, #12
 800a868:	0b1b      	lsrs	r3, r3, #12
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	d038      	beq.n	800a8e0 <_strtod_l+0x960>
 800a86e:	4a1a      	ldr	r2, [pc, #104]	; (800a8d8 <_strtod_l+0x958>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d138      	bne.n	800a8e6 <_strtod_l+0x966>
 800a874:	2201      	movs	r2, #1
 800a876:	9b08      	ldr	r3, [sp, #32]
 800a878:	4252      	negs	r2, r2
 800a87a:	0031      	movs	r1, r6
 800a87c:	0010      	movs	r0, r2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <_strtod_l+0x91a>
 800a882:	24d4      	movs	r4, #212	; 0xd4
 800a884:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <_strtod_l+0x94c>)
 800a886:	0010      	movs	r0, r2
 800a888:	403b      	ands	r3, r7
 800a88a:	04e4      	lsls	r4, r4, #19
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	d804      	bhi.n	800a89a <_strtod_l+0x91a>
 800a890:	306c      	adds	r0, #108	; 0x6c
 800a892:	0d1b      	lsrs	r3, r3, #20
 800a894:	1ac3      	subs	r3, r0, r3
 800a896:	409a      	lsls	r2, r3
 800a898:	0010      	movs	r0, r2
 800a89a:	4281      	cmp	r1, r0
 800a89c:	d123      	bne.n	800a8e6 <_strtod_l+0x966>
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <_strtod_l+0x95c>)
 800a8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d102      	bne.n	800a8ac <_strtod_l+0x92c>
 800a8a6:	1c4b      	adds	r3, r1, #1
 800a8a8:	d100      	bne.n	800a8ac <_strtod_l+0x92c>
 800a8aa:	e5d7      	b.n	800a45c <_strtod_l+0x4dc>
 800a8ac:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <_strtod_l+0x94c>)
 800a8ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	401a      	ands	r2, r3
 800a8b4:	0013      	movs	r3, r2
 800a8b6:	2280      	movs	r2, #128	; 0x80
 800a8b8:	0352      	lsls	r2, r2, #13
 800a8ba:	189f      	adds	r7, r3, r2
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d196      	bne.n	800a7f0 <_strtod_l+0x870>
 800a8c2:	e5d4      	b.n	800a46e <_strtod_l+0x4ee>
 800a8c4:	0800e618 	.word	0x0800e618
 800a8c8:	fffffc02 	.word	0xfffffc02
 800a8cc:	7ff00000 	.word	0x7ff00000
 800a8d0:	39500000 	.word	0x39500000
 800a8d4:	fffffbe2 	.word	0xfffffbe2
 800a8d8:	000fffff 	.word	0x000fffff
 800a8dc:	7fefffff 	.word	0x7fefffff
 800a8e0:	4333      	orrs	r3, r6
 800a8e2:	d100      	bne.n	800a8e6 <_strtod_l+0x966>
 800a8e4:	e772      	b.n	800a7cc <_strtod_l+0x84c>
 800a8e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01d      	beq.n	800a928 <_strtod_l+0x9a8>
 800a8ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8f0:	4213      	tst	r3, r2
 800a8f2:	d0e3      	beq.n	800a8bc <_strtod_l+0x93c>
 800a8f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8f6:	0030      	movs	r0, r6
 800a8f8:	0039      	movs	r1, r7
 800a8fa:	9a08      	ldr	r2, [sp, #32]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d017      	beq.n	800a930 <_strtod_l+0x9b0>
 800a900:	f7ff fb26 	bl	8009f50 <sulp>
 800a904:	0002      	movs	r2, r0
 800a906:	000b      	movs	r3, r1
 800a908:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a90a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a90c:	f7f6 f8ee 	bl	8000aec <__aeabi_dadd>
 800a910:	0006      	movs	r6, r0
 800a912:	000f      	movs	r7, r1
 800a914:	e7d2      	b.n	800a8bc <_strtod_l+0x93c>
 800a916:	2601      	movs	r6, #1
 800a918:	4013      	ands	r3, r2
 800a91a:	4a9b      	ldr	r2, [pc, #620]	; (800ab88 <_strtod_l+0xc08>)
 800a91c:	4276      	negs	r6, r6
 800a91e:	189b      	adds	r3, r3, r2
 800a920:	4a9a      	ldr	r2, [pc, #616]	; (800ab8c <_strtod_l+0xc0c>)
 800a922:	431a      	orrs	r2, r3
 800a924:	0017      	movs	r7, r2
 800a926:	e7c9      	b.n	800a8bc <_strtod_l+0x93c>
 800a928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a92a:	4233      	tst	r3, r6
 800a92c:	d0c6      	beq.n	800a8bc <_strtod_l+0x93c>
 800a92e:	e7e1      	b.n	800a8f4 <_strtod_l+0x974>
 800a930:	f7ff fb0e 	bl	8009f50 <sulp>
 800a934:	0002      	movs	r2, r0
 800a936:	000b      	movs	r3, r1
 800a938:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a93a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a93c:	f7f7 fab2 	bl	8001ea4 <__aeabi_dsub>
 800a940:	2200      	movs	r2, #0
 800a942:	2300      	movs	r3, #0
 800a944:	0006      	movs	r6, r0
 800a946:	000f      	movs	r7, r1
 800a948:	f7f5 fd8a 	bl	8000460 <__aeabi_dcmpeq>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d0b5      	beq.n	800a8bc <_strtod_l+0x93c>
 800a950:	e5f5      	b.n	800a53e <_strtod_l+0x5be>
 800a952:	9907      	ldr	r1, [sp, #28]
 800a954:	9806      	ldr	r0, [sp, #24]
 800a956:	f002 f8b9 	bl	800cacc <__ratio>
 800a95a:	2380      	movs	r3, #128	; 0x80
 800a95c:	2200      	movs	r2, #0
 800a95e:	05db      	lsls	r3, r3, #23
 800a960:	0004      	movs	r4, r0
 800a962:	000d      	movs	r5, r1
 800a964:	f7f5 fd8c 	bl	8000480 <__aeabi_dcmple>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d079      	beq.n	800aa60 <_strtod_l+0xae0>
 800a96c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d04b      	beq.n	800aa0a <_strtod_l+0xa8a>
 800a972:	2300      	movs	r3, #0
 800a974:	4c86      	ldr	r4, [pc, #536]	; (800ab90 <_strtod_l+0xc10>)
 800a976:	2500      	movs	r5, #0
 800a978:	9312      	str	r3, [sp, #72]	; 0x48
 800a97a:	9413      	str	r4, [sp, #76]	; 0x4c
 800a97c:	4c84      	ldr	r4, [pc, #528]	; (800ab90 <_strtod_l+0xc10>)
 800a97e:	4a85      	ldr	r2, [pc, #532]	; (800ab94 <_strtod_l+0xc14>)
 800a980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a982:	4013      	ands	r3, r2
 800a984:	9314      	str	r3, [sp, #80]	; 0x50
 800a986:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a988:	4b83      	ldr	r3, [pc, #524]	; (800ab98 <_strtod_l+0xc18>)
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d000      	beq.n	800a990 <_strtod_l+0xa10>
 800a98e:	e0b0      	b.n	800aaf2 <_strtod_l+0xb72>
 800a990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a994:	921a      	str	r2, [sp, #104]	; 0x68
 800a996:	931b      	str	r3, [sp, #108]	; 0x6c
 800a998:	4a80      	ldr	r2, [pc, #512]	; (800ab9c <_strtod_l+0xc1c>)
 800a99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a99c:	4694      	mov	ip, r2
 800a99e:	4463      	add	r3, ip
 800a9a0:	001f      	movs	r7, r3
 800a9a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9a6:	0030      	movs	r0, r6
 800a9a8:	0039      	movs	r1, r7
 800a9aa:	920c      	str	r2, [sp, #48]	; 0x30
 800a9ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a9ae:	f001 ffb5 	bl	800c91c <__ulp>
 800a9b2:	0002      	movs	r2, r0
 800a9b4:	000b      	movs	r3, r1
 800a9b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a9b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9ba:	f7f7 f807 	bl	80019cc <__aeabi_dmul>
 800a9be:	0032      	movs	r2, r6
 800a9c0:	003b      	movs	r3, r7
 800a9c2:	f7f6 f893 	bl	8000aec <__aeabi_dadd>
 800a9c6:	4a73      	ldr	r2, [pc, #460]	; (800ab94 <_strtod_l+0xc14>)
 800a9c8:	4b75      	ldr	r3, [pc, #468]	; (800aba0 <_strtod_l+0xc20>)
 800a9ca:	0006      	movs	r6, r0
 800a9cc:	400a      	ands	r2, r1
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d95e      	bls.n	800aa90 <_strtod_l+0xb10>
 800a9d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9d4:	4a73      	ldr	r2, [pc, #460]	; (800aba4 <_strtod_l+0xc24>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d103      	bne.n	800a9e2 <_strtod_l+0xa62>
 800a9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9dc:	3301      	adds	r3, #1
 800a9de:	d100      	bne.n	800a9e2 <_strtod_l+0xa62>
 800a9e0:	e53c      	b.n	800a45c <_strtod_l+0x4dc>
 800a9e2:	2601      	movs	r6, #1
 800a9e4:	4f6f      	ldr	r7, [pc, #444]	; (800aba4 <_strtod_l+0xc24>)
 800a9e6:	4276      	negs	r6, r6
 800a9e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a9ea:	9805      	ldr	r0, [sp, #20]
 800a9ec:	f001 fc54 	bl	800c298 <_Bfree>
 800a9f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9f2:	9805      	ldr	r0, [sp, #20]
 800a9f4:	f001 fc50 	bl	800c298 <_Bfree>
 800a9f8:	9907      	ldr	r1, [sp, #28]
 800a9fa:	9805      	ldr	r0, [sp, #20]
 800a9fc:	f001 fc4c 	bl	800c298 <_Bfree>
 800aa00:	9906      	ldr	r1, [sp, #24]
 800aa02:	9805      	ldr	r0, [sp, #20]
 800aa04:	f001 fc48 	bl	800c298 <_Bfree>
 800aa08:	e60f      	b.n	800a62a <_strtod_l+0x6aa>
 800aa0a:	2e00      	cmp	r6, #0
 800aa0c:	d11c      	bne.n	800aa48 <_strtod_l+0xac8>
 800aa0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa10:	031b      	lsls	r3, r3, #12
 800aa12:	d11f      	bne.n	800aa54 <_strtod_l+0xad4>
 800aa14:	2200      	movs	r2, #0
 800aa16:	0020      	movs	r0, r4
 800aa18:	0029      	movs	r1, r5
 800aa1a:	4b5d      	ldr	r3, [pc, #372]	; (800ab90 <_strtod_l+0xc10>)
 800aa1c:	f7f5 fd26 	bl	800046c <__aeabi_dcmplt>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d11a      	bne.n	800aa5a <_strtod_l+0xada>
 800aa24:	0020      	movs	r0, r4
 800aa26:	0029      	movs	r1, r5
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4b5f      	ldr	r3, [pc, #380]	; (800aba8 <_strtod_l+0xc28>)
 800aa2c:	f7f6 ffce 	bl	80019cc <__aeabi_dmul>
 800aa30:	0005      	movs	r5, r0
 800aa32:	000c      	movs	r4, r1
 800aa34:	2380      	movs	r3, #128	; 0x80
 800aa36:	061b      	lsls	r3, r3, #24
 800aa38:	18e3      	adds	r3, r4, r3
 800aa3a:	951e      	str	r5, [sp, #120]	; 0x78
 800aa3c:	931f      	str	r3, [sp, #124]	; 0x7c
 800aa3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa42:	9212      	str	r2, [sp, #72]	; 0x48
 800aa44:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa46:	e79a      	b.n	800a97e <_strtod_l+0x9fe>
 800aa48:	2e01      	cmp	r6, #1
 800aa4a:	d103      	bne.n	800aa54 <_strtod_l+0xad4>
 800aa4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d100      	bne.n	800aa54 <_strtod_l+0xad4>
 800aa52:	e574      	b.n	800a53e <_strtod_l+0x5be>
 800aa54:	2300      	movs	r3, #0
 800aa56:	4c55      	ldr	r4, [pc, #340]	; (800abac <_strtod_l+0xc2c>)
 800aa58:	e78d      	b.n	800a976 <_strtod_l+0x9f6>
 800aa5a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aa5c:	4c52      	ldr	r4, [pc, #328]	; (800aba8 <_strtod_l+0xc28>)
 800aa5e:	e7e9      	b.n	800aa34 <_strtod_l+0xab4>
 800aa60:	2200      	movs	r2, #0
 800aa62:	0020      	movs	r0, r4
 800aa64:	0029      	movs	r1, r5
 800aa66:	4b50      	ldr	r3, [pc, #320]	; (800aba8 <_strtod_l+0xc28>)
 800aa68:	f7f6 ffb0 	bl	80019cc <__aeabi_dmul>
 800aa6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa6e:	0005      	movs	r5, r0
 800aa70:	000b      	movs	r3, r1
 800aa72:	000c      	movs	r4, r1
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d107      	bne.n	800aa88 <_strtod_l+0xb08>
 800aa78:	2280      	movs	r2, #128	; 0x80
 800aa7a:	0612      	lsls	r2, r2, #24
 800aa7c:	188b      	adds	r3, r1, r2
 800aa7e:	9016      	str	r0, [sp, #88]	; 0x58
 800aa80:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa86:	e7dc      	b.n	800aa42 <_strtod_l+0xac2>
 800aa88:	0002      	movs	r2, r0
 800aa8a:	9216      	str	r2, [sp, #88]	; 0x58
 800aa8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa8e:	e7f8      	b.n	800aa82 <_strtod_l+0xb02>
 800aa90:	23d4      	movs	r3, #212	; 0xd4
 800aa92:	049b      	lsls	r3, r3, #18
 800aa94:	18cf      	adds	r7, r1, r3
 800aa96:	9b08      	ldr	r3, [sp, #32]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1a5      	bne.n	800a9e8 <_strtod_l+0xa68>
 800aa9c:	4b3d      	ldr	r3, [pc, #244]	; (800ab94 <_strtod_l+0xc14>)
 800aa9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aaa0:	403b      	ands	r3, r7
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d1a0      	bne.n	800a9e8 <_strtod_l+0xa68>
 800aaa6:	0028      	movs	r0, r5
 800aaa8:	0021      	movs	r1, r4
 800aaaa:	f7f5 fd25 	bl	80004f8 <__aeabi_d2lz>
 800aaae:	f7f5 fd5f 	bl	8000570 <__aeabi_l2d>
 800aab2:	0002      	movs	r2, r0
 800aab4:	000b      	movs	r3, r1
 800aab6:	0028      	movs	r0, r5
 800aab8:	0021      	movs	r1, r4
 800aaba:	f7f7 f9f3 	bl	8001ea4 <__aeabi_dsub>
 800aabe:	033b      	lsls	r3, r7, #12
 800aac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aac2:	0b1b      	lsrs	r3, r3, #12
 800aac4:	4333      	orrs	r3, r6
 800aac6:	4313      	orrs	r3, r2
 800aac8:	0004      	movs	r4, r0
 800aaca:	000d      	movs	r5, r1
 800aacc:	4a38      	ldr	r2, [pc, #224]	; (800abb0 <_strtod_l+0xc30>)
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d055      	beq.n	800ab7e <_strtod_l+0xbfe>
 800aad2:	4b38      	ldr	r3, [pc, #224]	; (800abb4 <_strtod_l+0xc34>)
 800aad4:	f7f5 fcca 	bl	800046c <__aeabi_dcmplt>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d000      	beq.n	800aade <_strtod_l+0xb5e>
 800aadc:	e4c7      	b.n	800a46e <_strtod_l+0x4ee>
 800aade:	0020      	movs	r0, r4
 800aae0:	0029      	movs	r1, r5
 800aae2:	4a35      	ldr	r2, [pc, #212]	; (800abb8 <_strtod_l+0xc38>)
 800aae4:	4b30      	ldr	r3, [pc, #192]	; (800aba8 <_strtod_l+0xc28>)
 800aae6:	f7f5 fcd5 	bl	8000494 <__aeabi_dcmpgt>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d100      	bne.n	800aaf0 <_strtod_l+0xb70>
 800aaee:	e77b      	b.n	800a9e8 <_strtod_l+0xa68>
 800aaf0:	e4bd      	b.n	800a46e <_strtod_l+0x4ee>
 800aaf2:	9b08      	ldr	r3, [sp, #32]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d02b      	beq.n	800ab50 <_strtod_l+0xbd0>
 800aaf8:	23d4      	movs	r3, #212	; 0xd4
 800aafa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aafc:	04db      	lsls	r3, r3, #19
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d826      	bhi.n	800ab50 <_strtod_l+0xbd0>
 800ab02:	0028      	movs	r0, r5
 800ab04:	0021      	movs	r1, r4
 800ab06:	4a2d      	ldr	r2, [pc, #180]	; (800abbc <_strtod_l+0xc3c>)
 800ab08:	4b2d      	ldr	r3, [pc, #180]	; (800abc0 <_strtod_l+0xc40>)
 800ab0a:	f7f5 fcb9 	bl	8000480 <__aeabi_dcmple>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d017      	beq.n	800ab42 <_strtod_l+0xbc2>
 800ab12:	0028      	movs	r0, r5
 800ab14:	0021      	movs	r1, r4
 800ab16:	f7f5 fcd1 	bl	80004bc <__aeabi_d2uiz>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d100      	bne.n	800ab20 <_strtod_l+0xba0>
 800ab1e:	3001      	adds	r0, #1
 800ab20:	f7f7 fdd6 	bl	80026d0 <__aeabi_ui2d>
 800ab24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab26:	0005      	movs	r5, r0
 800ab28:	000b      	movs	r3, r1
 800ab2a:	000c      	movs	r4, r1
 800ab2c:	2a00      	cmp	r2, #0
 800ab2e:	d122      	bne.n	800ab76 <_strtod_l+0xbf6>
 800ab30:	2280      	movs	r2, #128	; 0x80
 800ab32:	0612      	lsls	r2, r2, #24
 800ab34:	188b      	adds	r3, r1, r2
 800ab36:	9018      	str	r0, [sp, #96]	; 0x60
 800ab38:	9319      	str	r3, [sp, #100]	; 0x64
 800ab3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab3e:	9212      	str	r2, [sp, #72]	; 0x48
 800ab40:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab42:	22d6      	movs	r2, #214	; 0xd6
 800ab44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab46:	04d2      	lsls	r2, r2, #19
 800ab48:	189b      	adds	r3, r3, r2
 800ab4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab4c:	1a9b      	subs	r3, r3, r2
 800ab4e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab50:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab54:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ab56:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ab58:	f001 fee0 	bl	800c91c <__ulp>
 800ab5c:	0002      	movs	r2, r0
 800ab5e:	000b      	movs	r3, r1
 800ab60:	0030      	movs	r0, r6
 800ab62:	0039      	movs	r1, r7
 800ab64:	f7f6 ff32 	bl	80019cc <__aeabi_dmul>
 800ab68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab6c:	f7f5 ffbe 	bl	8000aec <__aeabi_dadd>
 800ab70:	0006      	movs	r6, r0
 800ab72:	000f      	movs	r7, r1
 800ab74:	e78f      	b.n	800aa96 <_strtod_l+0xb16>
 800ab76:	0002      	movs	r2, r0
 800ab78:	9218      	str	r2, [sp, #96]	; 0x60
 800ab7a:	9319      	str	r3, [sp, #100]	; 0x64
 800ab7c:	e7dd      	b.n	800ab3a <_strtod_l+0xbba>
 800ab7e:	4b11      	ldr	r3, [pc, #68]	; (800abc4 <_strtod_l+0xc44>)
 800ab80:	f7f5 fc74 	bl	800046c <__aeabi_dcmplt>
 800ab84:	e7b1      	b.n	800aaea <_strtod_l+0xb6a>
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	fff00000 	.word	0xfff00000
 800ab8c:	000fffff 	.word	0x000fffff
 800ab90:	3ff00000 	.word	0x3ff00000
 800ab94:	7ff00000 	.word	0x7ff00000
 800ab98:	7fe00000 	.word	0x7fe00000
 800ab9c:	fcb00000 	.word	0xfcb00000
 800aba0:	7c9fffff 	.word	0x7c9fffff
 800aba4:	7fefffff 	.word	0x7fefffff
 800aba8:	3fe00000 	.word	0x3fe00000
 800abac:	bff00000 	.word	0xbff00000
 800abb0:	94a03595 	.word	0x94a03595
 800abb4:	3fdfffff 	.word	0x3fdfffff
 800abb8:	35afe535 	.word	0x35afe535
 800abbc:	ffc00000 	.word	0xffc00000
 800abc0:	41dfffff 	.word	0x41dfffff
 800abc4:	3fcfffff 	.word	0x3fcfffff

0800abc8 <_strtod_r>:
 800abc8:	b510      	push	{r4, lr}
 800abca:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <_strtod_r+0xc>)
 800abcc:	f7ff f9d8 	bl	8009f80 <_strtod_l>
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	20000074 	.word	0x20000074

0800abd8 <_strtol_l.isra.0>:
 800abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abda:	b087      	sub	sp, #28
 800abdc:	001e      	movs	r6, r3
 800abde:	9005      	str	r0, [sp, #20]
 800abe0:	9101      	str	r1, [sp, #4]
 800abe2:	9202      	str	r2, [sp, #8]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d045      	beq.n	800ac74 <_strtol_l.isra.0+0x9c>
 800abe8:	0008      	movs	r0, r1
 800abea:	2b24      	cmp	r3, #36	; 0x24
 800abec:	d842      	bhi.n	800ac74 <_strtol_l.isra.0+0x9c>
 800abee:	4b3f      	ldr	r3, [pc, #252]	; (800acec <_strtol_l.isra.0+0x114>)
 800abf0:	2208      	movs	r2, #8
 800abf2:	469c      	mov	ip, r3
 800abf4:	0003      	movs	r3, r0
 800abf6:	4661      	mov	r1, ip
 800abf8:	781c      	ldrb	r4, [r3, #0]
 800abfa:	1c45      	adds	r5, r0, #1
 800abfc:	5d09      	ldrb	r1, [r1, r4]
 800abfe:	0028      	movs	r0, r5
 800ac00:	000f      	movs	r7, r1
 800ac02:	4017      	ands	r7, r2
 800ac04:	4211      	tst	r1, r2
 800ac06:	d1f5      	bne.n	800abf4 <_strtol_l.isra.0+0x1c>
 800ac08:	2c2d      	cmp	r4, #45	; 0x2d
 800ac0a:	d13a      	bne.n	800ac82 <_strtol_l.isra.0+0xaa>
 800ac0c:	2701      	movs	r7, #1
 800ac0e:	782c      	ldrb	r4, [r5, #0]
 800ac10:	1c9d      	adds	r5, r3, #2
 800ac12:	2e00      	cmp	r6, #0
 800ac14:	d065      	beq.n	800ace2 <_strtol_l.isra.0+0x10a>
 800ac16:	2e10      	cmp	r6, #16
 800ac18:	d109      	bne.n	800ac2e <_strtol_l.isra.0+0x56>
 800ac1a:	2c30      	cmp	r4, #48	; 0x30
 800ac1c:	d107      	bne.n	800ac2e <_strtol_l.isra.0+0x56>
 800ac1e:	2220      	movs	r2, #32
 800ac20:	782b      	ldrb	r3, [r5, #0]
 800ac22:	4393      	bics	r3, r2
 800ac24:	2b58      	cmp	r3, #88	; 0x58
 800ac26:	d157      	bne.n	800acd8 <_strtol_l.isra.0+0x100>
 800ac28:	2610      	movs	r6, #16
 800ac2a:	786c      	ldrb	r4, [r5, #1]
 800ac2c:	3502      	adds	r5, #2
 800ac2e:	4b30      	ldr	r3, [pc, #192]	; (800acf0 <_strtol_l.isra.0+0x118>)
 800ac30:	0031      	movs	r1, r6
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	0018      	movs	r0, r3
 800ac36:	9303      	str	r3, [sp, #12]
 800ac38:	f7f5 fb12 	bl	8000260 <__aeabi_uidivmod>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4684      	mov	ip, r0
 800ac42:	0018      	movs	r0, r3
 800ac44:	9104      	str	r1, [sp, #16]
 800ac46:	4252      	negs	r2, r2
 800ac48:	0021      	movs	r1, r4
 800ac4a:	3930      	subs	r1, #48	; 0x30
 800ac4c:	2909      	cmp	r1, #9
 800ac4e:	d81d      	bhi.n	800ac8c <_strtol_l.isra.0+0xb4>
 800ac50:	000c      	movs	r4, r1
 800ac52:	42a6      	cmp	r6, r4
 800ac54:	dd28      	ble.n	800aca8 <_strtol_l.isra.0+0xd0>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	db24      	blt.n	800aca4 <_strtol_l.isra.0+0xcc>
 800ac5a:	0013      	movs	r3, r2
 800ac5c:	4584      	cmp	ip, r0
 800ac5e:	d306      	bcc.n	800ac6e <_strtol_l.isra.0+0x96>
 800ac60:	d102      	bne.n	800ac68 <_strtol_l.isra.0+0x90>
 800ac62:	9904      	ldr	r1, [sp, #16]
 800ac64:	42a1      	cmp	r1, r4
 800ac66:	db02      	blt.n	800ac6e <_strtol_l.isra.0+0x96>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4370      	muls	r0, r6
 800ac6c:	1820      	adds	r0, r4, r0
 800ac6e:	782c      	ldrb	r4, [r5, #0]
 800ac70:	3501      	adds	r5, #1
 800ac72:	e7e9      	b.n	800ac48 <_strtol_l.isra.0+0x70>
 800ac74:	f7fe fa16 	bl	80090a4 <__errno>
 800ac78:	2316      	movs	r3, #22
 800ac7a:	6003      	str	r3, [r0, #0]
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	b007      	add	sp, #28
 800ac80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac82:	2c2b      	cmp	r4, #43	; 0x2b
 800ac84:	d1c5      	bne.n	800ac12 <_strtol_l.isra.0+0x3a>
 800ac86:	782c      	ldrb	r4, [r5, #0]
 800ac88:	1c9d      	adds	r5, r3, #2
 800ac8a:	e7c2      	b.n	800ac12 <_strtol_l.isra.0+0x3a>
 800ac8c:	0021      	movs	r1, r4
 800ac8e:	3941      	subs	r1, #65	; 0x41
 800ac90:	2919      	cmp	r1, #25
 800ac92:	d801      	bhi.n	800ac98 <_strtol_l.isra.0+0xc0>
 800ac94:	3c37      	subs	r4, #55	; 0x37
 800ac96:	e7dc      	b.n	800ac52 <_strtol_l.isra.0+0x7a>
 800ac98:	0021      	movs	r1, r4
 800ac9a:	3961      	subs	r1, #97	; 0x61
 800ac9c:	2919      	cmp	r1, #25
 800ac9e:	d803      	bhi.n	800aca8 <_strtol_l.isra.0+0xd0>
 800aca0:	3c57      	subs	r4, #87	; 0x57
 800aca2:	e7d6      	b.n	800ac52 <_strtol_l.isra.0+0x7a>
 800aca4:	0013      	movs	r3, r2
 800aca6:	e7e2      	b.n	800ac6e <_strtol_l.isra.0+0x96>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da09      	bge.n	800acc0 <_strtol_l.isra.0+0xe8>
 800acac:	2322      	movs	r3, #34	; 0x22
 800acae:	9a05      	ldr	r2, [sp, #20]
 800acb0:	9803      	ldr	r0, [sp, #12]
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	9b02      	ldr	r3, [sp, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0e1      	beq.n	800ac7e <_strtol_l.isra.0+0xa6>
 800acba:	1e6b      	subs	r3, r5, #1
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	e007      	b.n	800acd0 <_strtol_l.isra.0+0xf8>
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	d000      	beq.n	800acc6 <_strtol_l.isra.0+0xee>
 800acc4:	4240      	negs	r0, r0
 800acc6:	9a02      	ldr	r2, [sp, #8]
 800acc8:	2a00      	cmp	r2, #0
 800acca:	d0d8      	beq.n	800ac7e <_strtol_l.isra.0+0xa6>
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1f4      	bne.n	800acba <_strtol_l.isra.0+0xe2>
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	9a01      	ldr	r2, [sp, #4]
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	e7d2      	b.n	800ac7e <_strtol_l.isra.0+0xa6>
 800acd8:	2430      	movs	r4, #48	; 0x30
 800acda:	2e00      	cmp	r6, #0
 800acdc:	d1a7      	bne.n	800ac2e <_strtol_l.isra.0+0x56>
 800acde:	3608      	adds	r6, #8
 800ace0:	e7a5      	b.n	800ac2e <_strtol_l.isra.0+0x56>
 800ace2:	2c30      	cmp	r4, #48	; 0x30
 800ace4:	d09b      	beq.n	800ac1e <_strtol_l.isra.0+0x46>
 800ace6:	260a      	movs	r6, #10
 800ace8:	e7a1      	b.n	800ac2e <_strtol_l.isra.0+0x56>
 800acea:	46c0      	nop			; (mov r8, r8)
 800acec:	0800e641 	.word	0x0800e641
 800acf0:	7fffffff 	.word	0x7fffffff

0800acf4 <_strtol_r>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	f7ff ff6f 	bl	800abd8 <_strtol_l.isra.0>
 800acfa:	bd10      	pop	{r4, pc}

0800acfc <_write_r>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	0004      	movs	r4, r0
 800ad00:	0008      	movs	r0, r1
 800ad02:	0011      	movs	r1, r2
 800ad04:	001a      	movs	r2, r3
 800ad06:	2300      	movs	r3, #0
 800ad08:	4d05      	ldr	r5, [pc, #20]	; (800ad20 <_write_r+0x24>)
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7f9 ffa9 	bl	8004c62 <_write>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d103      	bne.n	800ad1c <_write_r+0x20>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d000      	beq.n	800ad1c <_write_r+0x20>
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	bd70      	pop	{r4, r5, r6, pc}
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	20000614 	.word	0x20000614

0800ad24 <_close_r>:
 800ad24:	2300      	movs	r3, #0
 800ad26:	b570      	push	{r4, r5, r6, lr}
 800ad28:	4d06      	ldr	r5, [pc, #24]	; (800ad44 <_close_r+0x20>)
 800ad2a:	0004      	movs	r4, r0
 800ad2c:	0008      	movs	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7f9 ffb3 	bl	8004c9a <_close>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d103      	bne.n	800ad40 <_close_r+0x1c>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d000      	beq.n	800ad40 <_close_r+0x1c>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
 800ad42:	46c0      	nop			; (mov r8, r8)
 800ad44:	20000614 	.word	0x20000614

0800ad48 <quorem>:
 800ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4a:	0006      	movs	r6, r0
 800ad4c:	690d      	ldr	r5, [r1, #16]
 800ad4e:	6933      	ldr	r3, [r6, #16]
 800ad50:	b087      	sub	sp, #28
 800ad52:	2000      	movs	r0, #0
 800ad54:	9102      	str	r1, [sp, #8]
 800ad56:	42ab      	cmp	r3, r5
 800ad58:	db6b      	blt.n	800ae32 <quorem+0xea>
 800ad5a:	000b      	movs	r3, r1
 800ad5c:	3d01      	subs	r5, #1
 800ad5e:	00ac      	lsls	r4, r5, #2
 800ad60:	3314      	adds	r3, #20
 800ad62:	9305      	str	r3, [sp, #20]
 800ad64:	191b      	adds	r3, r3, r4
 800ad66:	9303      	str	r3, [sp, #12]
 800ad68:	0033      	movs	r3, r6
 800ad6a:	3314      	adds	r3, #20
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	191c      	adds	r4, r3, r4
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	6827      	ldr	r7, [r4, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	0038      	movs	r0, r7
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	0019      	movs	r1, r3
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	f7f5 f9e8 	bl	8000154 <__udivsi3>
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	9000      	str	r0, [sp, #0]
 800ad88:	429f      	cmp	r7, r3
 800ad8a:	d329      	bcc.n	800ade0 <quorem+0x98>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	469c      	mov	ip, r3
 800ad90:	9801      	ldr	r0, [sp, #4]
 800ad92:	9f05      	ldr	r7, [sp, #20]
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	cf08      	ldmia	r7!, {r3}
 800ad98:	9a00      	ldr	r2, [sp, #0]
 800ad9a:	b299      	uxth	r1, r3
 800ad9c:	4351      	muls	r1, r2
 800ad9e:	0c1b      	lsrs	r3, r3, #16
 800ada0:	4353      	muls	r3, r2
 800ada2:	4461      	add	r1, ip
 800ada4:	0c0a      	lsrs	r2, r1, #16
 800ada6:	189b      	adds	r3, r3, r2
 800ada8:	0c1a      	lsrs	r2, r3, #16
 800adaa:	9305      	str	r3, [sp, #20]
 800adac:	6803      	ldr	r3, [r0, #0]
 800adae:	4694      	mov	ip, r2
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	9b04      	ldr	r3, [sp, #16]
 800adb4:	b289      	uxth	r1, r1
 800adb6:	18d2      	adds	r2, r2, r3
 800adb8:	6803      	ldr	r3, [r0, #0]
 800adba:	1a52      	subs	r2, r2, r1
 800adbc:	0c19      	lsrs	r1, r3, #16
 800adbe:	466b      	mov	r3, sp
 800adc0:	8a9b      	ldrh	r3, [r3, #20]
 800adc2:	1acb      	subs	r3, r1, r3
 800adc4:	1411      	asrs	r1, r2, #16
 800adc6:	185b      	adds	r3, r3, r1
 800adc8:	1419      	asrs	r1, r3, #16
 800adca:	b292      	uxth	r2, r2
 800adcc:	041b      	lsls	r3, r3, #16
 800adce:	431a      	orrs	r2, r3
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	9104      	str	r1, [sp, #16]
 800add4:	c004      	stmia	r0!, {r2}
 800add6:	42bb      	cmp	r3, r7
 800add8:	d2dd      	bcs.n	800ad96 <quorem+0x4e>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d02e      	beq.n	800ae3e <quorem+0xf6>
 800ade0:	0030      	movs	r0, r6
 800ade2:	9902      	ldr	r1, [sp, #8]
 800ade4:	f001 fce6 	bl	800c7b4 <__mcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	db21      	blt.n	800ae30 <quorem+0xe8>
 800adec:	0030      	movs	r0, r6
 800adee:	2400      	movs	r4, #0
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	9902      	ldr	r1, [sp, #8]
 800adf4:	3301      	adds	r3, #1
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	3014      	adds	r0, #20
 800adfa:	3114      	adds	r1, #20
 800adfc:	6802      	ldr	r2, [r0, #0]
 800adfe:	c908      	ldmia	r1!, {r3}
 800ae00:	b292      	uxth	r2, r2
 800ae02:	1914      	adds	r4, r2, r4
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	1aa2      	subs	r2, r4, r2
 800ae08:	6804      	ldr	r4, [r0, #0]
 800ae0a:	0c1b      	lsrs	r3, r3, #16
 800ae0c:	0c24      	lsrs	r4, r4, #16
 800ae0e:	1ae3      	subs	r3, r4, r3
 800ae10:	1414      	asrs	r4, r2, #16
 800ae12:	191b      	adds	r3, r3, r4
 800ae14:	141c      	asrs	r4, r3, #16
 800ae16:	b292      	uxth	r2, r2
 800ae18:	041b      	lsls	r3, r3, #16
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	c008      	stmia	r0!, {r3}
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	428b      	cmp	r3, r1
 800ae22:	d2eb      	bcs.n	800adfc <quorem+0xb4>
 800ae24:	9a01      	ldr	r2, [sp, #4]
 800ae26:	00ab      	lsls	r3, r5, #2
 800ae28:	18d3      	adds	r3, r2, r3
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	d010      	beq.n	800ae52 <quorem+0x10a>
 800ae30:	9800      	ldr	r0, [sp, #0]
 800ae32:	b007      	add	sp, #28
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <quorem+0xfe>
 800ae3c:	3d01      	subs	r5, #1
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	3c04      	subs	r4, #4
 800ae42:	42a3      	cmp	r3, r4
 800ae44:	d3f7      	bcc.n	800ae36 <quorem+0xee>
 800ae46:	6135      	str	r5, [r6, #16]
 800ae48:	e7ca      	b.n	800ade0 <quorem+0x98>
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	d104      	bne.n	800ae5a <quorem+0x112>
 800ae50:	3d01      	subs	r5, #1
 800ae52:	9a01      	ldr	r2, [sp, #4]
 800ae54:	3b04      	subs	r3, #4
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d3f7      	bcc.n	800ae4a <quorem+0x102>
 800ae5a:	6135      	str	r5, [r6, #16]
 800ae5c:	e7e8      	b.n	800ae30 <quorem+0xe8>
	...

0800ae60 <_dtoa_r>:
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	b09d      	sub	sp, #116	; 0x74
 800ae64:	9202      	str	r2, [sp, #8]
 800ae66:	9303      	str	r3, [sp, #12]
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	9c03      	ldr	r4, [sp, #12]
 800ae6c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae6e:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ae72:	0007      	movs	r7, r0
 800ae74:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ae76:	2c00      	cmp	r4, #0
 800ae78:	d10e      	bne.n	800ae98 <_dtoa_r+0x38>
 800ae7a:	2010      	movs	r0, #16
 800ae7c:	f001 f998 	bl	800c1b0 <malloc>
 800ae80:	1e02      	subs	r2, r0, #0
 800ae82:	6278      	str	r0, [r7, #36]	; 0x24
 800ae84:	d104      	bne.n	800ae90 <_dtoa_r+0x30>
 800ae86:	21ea      	movs	r1, #234	; 0xea
 800ae88:	4bc0      	ldr	r3, [pc, #768]	; (800b18c <_dtoa_r+0x32c>)
 800ae8a:	48c1      	ldr	r0, [pc, #772]	; (800b190 <_dtoa_r+0x330>)
 800ae8c:	f002 fd2e 	bl	800d8ec <__assert_func>
 800ae90:	6044      	str	r4, [r0, #4]
 800ae92:	6084      	str	r4, [r0, #8]
 800ae94:	6004      	str	r4, [r0, #0]
 800ae96:	60c4      	str	r4, [r0, #12]
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	6819      	ldr	r1, [r3, #0]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d00a      	beq.n	800aeb6 <_dtoa_r+0x56>
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	2301      	movs	r3, #1
 800aea4:	4093      	lsls	r3, r2
 800aea6:	604a      	str	r2, [r1, #4]
 800aea8:	608b      	str	r3, [r1, #8]
 800aeaa:	0038      	movs	r0, r7
 800aeac:	f001 f9f4 	bl	800c298 <_Bfree>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da21      	bge.n	800af00 <_dtoa_r+0xa0>
 800aebc:	2301      	movs	r3, #1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	085b      	lsrs	r3, r3, #1
 800aec6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aec8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aeca:	4bb2      	ldr	r3, [pc, #712]	; (800b194 <_dtoa_r+0x334>)
 800aecc:	002a      	movs	r2, r5
 800aece:	9318      	str	r3, [sp, #96]	; 0x60
 800aed0:	401a      	ands	r2, r3
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d117      	bne.n	800af06 <_dtoa_r+0xa6>
 800aed6:	4bb0      	ldr	r3, [pc, #704]	; (800b198 <_dtoa_r+0x338>)
 800aed8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aeda:	0328      	lsls	r0, r5, #12
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	9b02      	ldr	r3, [sp, #8]
 800aee0:	0b00      	lsrs	r0, r0, #12
 800aee2:	4318      	orrs	r0, r3
 800aee4:	d101      	bne.n	800aeea <_dtoa_r+0x8a>
 800aee6:	f000 fdc3 	bl	800ba70 <_dtoa_r+0xc10>
 800aeea:	48ac      	ldr	r0, [pc, #688]	; (800b19c <_dtoa_r+0x33c>)
 800aeec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aeee:	9005      	str	r0, [sp, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <_dtoa_r+0x9a>
 800aef4:	4baa      	ldr	r3, [pc, #680]	; (800b1a0 <_dtoa_r+0x340>)
 800aef6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	9805      	ldr	r0, [sp, #20]
 800aefc:	b01d      	add	sp, #116	; 0x74
 800aefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af00:	2300      	movs	r3, #0
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	e7e0      	b.n	800aec8 <_dtoa_r+0x68>
 800af06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800af0a:	9312      	str	r3, [sp, #72]	; 0x48
 800af0c:	9413      	str	r4, [sp, #76]	; 0x4c
 800af0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af10:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af12:	2200      	movs	r2, #0
 800af14:	2300      	movs	r3, #0
 800af16:	f7f5 faa3 	bl	8000460 <__aeabi_dcmpeq>
 800af1a:	1e04      	subs	r4, r0, #0
 800af1c:	d00b      	beq.n	800af36 <_dtoa_r+0xd6>
 800af1e:	2301      	movs	r3, #1
 800af20:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	4b9f      	ldr	r3, [pc, #636]	; (800b1a4 <_dtoa_r+0x344>)
 800af26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af28:	9305      	str	r3, [sp, #20]
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	d0e5      	beq.n	800aefa <_dtoa_r+0x9a>
 800af2e:	4a9e      	ldr	r2, [pc, #632]	; (800b1a8 <_dtoa_r+0x348>)
 800af30:	9926      	ldr	r1, [sp, #152]	; 0x98
 800af32:	600a      	str	r2, [r1, #0]
 800af34:	e7e1      	b.n	800aefa <_dtoa_r+0x9a>
 800af36:	ab1a      	add	r3, sp, #104	; 0x68
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	ab1b      	add	r3, sp, #108	; 0x6c
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	0038      	movs	r0, r7
 800af40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af44:	f001 fd5e 	bl	800ca04 <__d2b>
 800af48:	006e      	lsls	r6, r5, #1
 800af4a:	9004      	str	r0, [sp, #16]
 800af4c:	0d76      	lsrs	r6, r6, #21
 800af4e:	d100      	bne.n	800af52 <_dtoa_r+0xf2>
 800af50:	e07c      	b.n	800b04c <_dtoa_r+0x1ec>
 800af52:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af58:	4a94      	ldr	r2, [pc, #592]	; (800b1ac <_dtoa_r+0x34c>)
 800af5a:	031b      	lsls	r3, r3, #12
 800af5c:	0b1b      	lsrs	r3, r3, #12
 800af5e:	431a      	orrs	r2, r3
 800af60:	0011      	movs	r1, r2
 800af62:	4b93      	ldr	r3, [pc, #588]	; (800b1b0 <_dtoa_r+0x350>)
 800af64:	9416      	str	r4, [sp, #88]	; 0x58
 800af66:	18f6      	adds	r6, r6, r3
 800af68:	2200      	movs	r2, #0
 800af6a:	4b92      	ldr	r3, [pc, #584]	; (800b1b4 <_dtoa_r+0x354>)
 800af6c:	f7f6 ff9a 	bl	8001ea4 <__aeabi_dsub>
 800af70:	4a91      	ldr	r2, [pc, #580]	; (800b1b8 <_dtoa_r+0x358>)
 800af72:	4b92      	ldr	r3, [pc, #584]	; (800b1bc <_dtoa_r+0x35c>)
 800af74:	f7f6 fd2a 	bl	80019cc <__aeabi_dmul>
 800af78:	4a91      	ldr	r2, [pc, #580]	; (800b1c0 <_dtoa_r+0x360>)
 800af7a:	4b92      	ldr	r3, [pc, #584]	; (800b1c4 <_dtoa_r+0x364>)
 800af7c:	f7f5 fdb6 	bl	8000aec <__aeabi_dadd>
 800af80:	0004      	movs	r4, r0
 800af82:	0030      	movs	r0, r6
 800af84:	000d      	movs	r5, r1
 800af86:	f7f7 fb73 	bl	8002670 <__aeabi_i2d>
 800af8a:	4a8f      	ldr	r2, [pc, #572]	; (800b1c8 <_dtoa_r+0x368>)
 800af8c:	4b8f      	ldr	r3, [pc, #572]	; (800b1cc <_dtoa_r+0x36c>)
 800af8e:	f7f6 fd1d 	bl	80019cc <__aeabi_dmul>
 800af92:	0002      	movs	r2, r0
 800af94:	000b      	movs	r3, r1
 800af96:	0020      	movs	r0, r4
 800af98:	0029      	movs	r1, r5
 800af9a:	f7f5 fda7 	bl	8000aec <__aeabi_dadd>
 800af9e:	0004      	movs	r4, r0
 800afa0:	000d      	movs	r5, r1
 800afa2:	f7f7 fb2f 	bl	8002604 <__aeabi_d2iz>
 800afa6:	2200      	movs	r2, #0
 800afa8:	9002      	str	r0, [sp, #8]
 800afaa:	2300      	movs	r3, #0
 800afac:	0020      	movs	r0, r4
 800afae:	0029      	movs	r1, r5
 800afb0:	f7f5 fa5c 	bl	800046c <__aeabi_dcmplt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d00b      	beq.n	800afd0 <_dtoa_r+0x170>
 800afb8:	9802      	ldr	r0, [sp, #8]
 800afba:	f7f7 fb59 	bl	8002670 <__aeabi_i2d>
 800afbe:	002b      	movs	r3, r5
 800afc0:	0022      	movs	r2, r4
 800afc2:	f7f5 fa4d 	bl	8000460 <__aeabi_dcmpeq>
 800afc6:	4243      	negs	r3, r0
 800afc8:	4158      	adcs	r0, r3
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	1a1b      	subs	r3, r3, r0
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	2301      	movs	r3, #1
 800afd2:	9315      	str	r3, [sp, #84]	; 0x54
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	2b16      	cmp	r3, #22
 800afd8:	d80f      	bhi.n	800affa <_dtoa_r+0x19a>
 800afda:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afdc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800afde:	00da      	lsls	r2, r3, #3
 800afe0:	4b7b      	ldr	r3, [pc, #492]	; (800b1d0 <_dtoa_r+0x370>)
 800afe2:	189b      	adds	r3, r3, r2
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f7f5 fa40 	bl	800046c <__aeabi_dcmplt>
 800afec:	2800      	cmp	r0, #0
 800afee:	d049      	beq.n	800b084 <_dtoa_r+0x224>
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9315      	str	r3, [sp, #84]	; 0x54
 800affa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800affc:	1b9e      	subs	r6, r3, r6
 800affe:	2300      	movs	r3, #0
 800b000:	9308      	str	r3, [sp, #32]
 800b002:	0033      	movs	r3, r6
 800b004:	3b01      	subs	r3, #1
 800b006:	930d      	str	r3, [sp, #52]	; 0x34
 800b008:	d504      	bpl.n	800b014 <_dtoa_r+0x1b4>
 800b00a:	2301      	movs	r3, #1
 800b00c:	1b9b      	subs	r3, r3, r6
 800b00e:	9308      	str	r3, [sp, #32]
 800b010:	2300      	movs	r3, #0
 800b012:	930d      	str	r3, [sp, #52]	; 0x34
 800b014:	9b02      	ldr	r3, [sp, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	db36      	blt.n	800b088 <_dtoa_r+0x228>
 800b01a:	9a02      	ldr	r2, [sp, #8]
 800b01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b01e:	4694      	mov	ip, r2
 800b020:	4463      	add	r3, ip
 800b022:	930d      	str	r3, [sp, #52]	; 0x34
 800b024:	2300      	movs	r3, #0
 800b026:	9214      	str	r2, [sp, #80]	; 0x50
 800b028:	930e      	str	r3, [sp, #56]	; 0x38
 800b02a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b02c:	2401      	movs	r4, #1
 800b02e:	2b09      	cmp	r3, #9
 800b030:	d862      	bhi.n	800b0f8 <_dtoa_r+0x298>
 800b032:	2b05      	cmp	r3, #5
 800b034:	dd02      	ble.n	800b03c <_dtoa_r+0x1dc>
 800b036:	2400      	movs	r4, #0
 800b038:	3b04      	subs	r3, #4
 800b03a:	9322      	str	r3, [sp, #136]	; 0x88
 800b03c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b03e:	1e98      	subs	r0, r3, #2
 800b040:	2803      	cmp	r0, #3
 800b042:	d862      	bhi.n	800b10a <_dtoa_r+0x2aa>
 800b044:	f7f5 f872 	bl	800012c <__gnu_thumb1_case_uqi>
 800b048:	56343629 	.word	0x56343629
 800b04c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b04e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b050:	189e      	adds	r6, r3, r2
 800b052:	4b60      	ldr	r3, [pc, #384]	; (800b1d4 <_dtoa_r+0x374>)
 800b054:	18f2      	adds	r2, r6, r3
 800b056:	2a20      	cmp	r2, #32
 800b058:	dd0f      	ble.n	800b07a <_dtoa_r+0x21a>
 800b05a:	2340      	movs	r3, #64	; 0x40
 800b05c:	1a9b      	subs	r3, r3, r2
 800b05e:	409d      	lsls	r5, r3
 800b060:	4b5d      	ldr	r3, [pc, #372]	; (800b1d8 <_dtoa_r+0x378>)
 800b062:	9802      	ldr	r0, [sp, #8]
 800b064:	18f3      	adds	r3, r6, r3
 800b066:	40d8      	lsrs	r0, r3
 800b068:	4328      	orrs	r0, r5
 800b06a:	f7f7 fb31 	bl	80026d0 <__aeabi_ui2d>
 800b06e:	2301      	movs	r3, #1
 800b070:	4c5a      	ldr	r4, [pc, #360]	; (800b1dc <_dtoa_r+0x37c>)
 800b072:	3e01      	subs	r6, #1
 800b074:	1909      	adds	r1, r1, r4
 800b076:	9316      	str	r3, [sp, #88]	; 0x58
 800b078:	e776      	b.n	800af68 <_dtoa_r+0x108>
 800b07a:	2320      	movs	r3, #32
 800b07c:	9802      	ldr	r0, [sp, #8]
 800b07e:	1a9b      	subs	r3, r3, r2
 800b080:	4098      	lsls	r0, r3
 800b082:	e7f2      	b.n	800b06a <_dtoa_r+0x20a>
 800b084:	9015      	str	r0, [sp, #84]	; 0x54
 800b086:	e7b8      	b.n	800affa <_dtoa_r+0x19a>
 800b088:	9b08      	ldr	r3, [sp, #32]
 800b08a:	9a02      	ldr	r2, [sp, #8]
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	9308      	str	r3, [sp, #32]
 800b090:	4253      	negs	r3, r2
 800b092:	930e      	str	r3, [sp, #56]	; 0x38
 800b094:	2300      	movs	r3, #0
 800b096:	9314      	str	r3, [sp, #80]	; 0x50
 800b098:	e7c7      	b.n	800b02a <_dtoa_r+0x1ca>
 800b09a:	2300      	movs	r3, #0
 800b09c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b09e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dc36      	bgt.n	800b112 <_dtoa_r+0x2b2>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	001a      	movs	r2, r3
 800b0a8:	930c      	str	r3, [sp, #48]	; 0x30
 800b0aa:	9306      	str	r3, [sp, #24]
 800b0ac:	9223      	str	r2, [sp, #140]	; 0x8c
 800b0ae:	e00d      	b.n	800b0cc <_dtoa_r+0x26c>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e7f3      	b.n	800b09c <_dtoa_r+0x23c>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b0b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ba:	4694      	mov	ip, r2
 800b0bc:	9b02      	ldr	r3, [sp, #8]
 800b0be:	4463      	add	r3, ip
 800b0c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9306      	str	r3, [sp, #24]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	dc00      	bgt.n	800b0cc <_dtoa_r+0x26c>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0d0:	6042      	str	r2, [r0, #4]
 800b0d2:	3204      	adds	r2, #4
 800b0d4:	0015      	movs	r5, r2
 800b0d6:	3514      	adds	r5, #20
 800b0d8:	6841      	ldr	r1, [r0, #4]
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	d91d      	bls.n	800b11a <_dtoa_r+0x2ba>
 800b0de:	0038      	movs	r0, r7
 800b0e0:	f001 f896 	bl	800c210 <_Balloc>
 800b0e4:	9005      	str	r0, [sp, #20]
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d11b      	bne.n	800b122 <_dtoa_r+0x2c2>
 800b0ea:	21d5      	movs	r1, #213	; 0xd5
 800b0ec:	0002      	movs	r2, r0
 800b0ee:	4b3c      	ldr	r3, [pc, #240]	; (800b1e0 <_dtoa_r+0x380>)
 800b0f0:	0049      	lsls	r1, r1, #1
 800b0f2:	e6ca      	b.n	800ae8a <_dtoa_r+0x2a>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e7de      	b.n	800b0b6 <_dtoa_r+0x256>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	940f      	str	r4, [sp, #60]	; 0x3c
 800b0fc:	9322      	str	r3, [sp, #136]	; 0x88
 800b0fe:	3b01      	subs	r3, #1
 800b100:	930c      	str	r3, [sp, #48]	; 0x30
 800b102:	9306      	str	r3, [sp, #24]
 800b104:	2200      	movs	r2, #0
 800b106:	3313      	adds	r3, #19
 800b108:	e7d0      	b.n	800b0ac <_dtoa_r+0x24c>
 800b10a:	2301      	movs	r3, #1
 800b10c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b10e:	3b02      	subs	r3, #2
 800b110:	e7f6      	b.n	800b100 <_dtoa_r+0x2a0>
 800b112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b114:	930c      	str	r3, [sp, #48]	; 0x30
 800b116:	9306      	str	r3, [sp, #24]
 800b118:	e7d8      	b.n	800b0cc <_dtoa_r+0x26c>
 800b11a:	3101      	adds	r1, #1
 800b11c:	6041      	str	r1, [r0, #4]
 800b11e:	0052      	lsls	r2, r2, #1
 800b120:	e7d8      	b.n	800b0d4 <_dtoa_r+0x274>
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	9a05      	ldr	r2, [sp, #20]
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	9b06      	ldr	r3, [sp, #24]
 800b12a:	2b0e      	cmp	r3, #14
 800b12c:	d900      	bls.n	800b130 <_dtoa_r+0x2d0>
 800b12e:	e0eb      	b.n	800b308 <_dtoa_r+0x4a8>
 800b130:	2c00      	cmp	r4, #0
 800b132:	d100      	bne.n	800b136 <_dtoa_r+0x2d6>
 800b134:	e0e8      	b.n	800b308 <_dtoa_r+0x4a8>
 800b136:	9b02      	ldr	r3, [sp, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dd68      	ble.n	800b20e <_dtoa_r+0x3ae>
 800b13c:	001a      	movs	r2, r3
 800b13e:	210f      	movs	r1, #15
 800b140:	4b23      	ldr	r3, [pc, #140]	; (800b1d0 <_dtoa_r+0x370>)
 800b142:	400a      	ands	r2, r1
 800b144:	00d2      	lsls	r2, r2, #3
 800b146:	189b      	adds	r3, r3, r2
 800b148:	681d      	ldr	r5, [r3, #0]
 800b14a:	685e      	ldr	r6, [r3, #4]
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	111c      	asrs	r4, r3, #4
 800b150:	2302      	movs	r3, #2
 800b152:	9310      	str	r3, [sp, #64]	; 0x40
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	05db      	lsls	r3, r3, #23
 800b158:	d50b      	bpl.n	800b172 <_dtoa_r+0x312>
 800b15a:	4b22      	ldr	r3, [pc, #136]	; (800b1e4 <_dtoa_r+0x384>)
 800b15c:	400c      	ands	r4, r1
 800b15e:	6a1a      	ldr	r2, [r3, #32]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b164:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b166:	f7f6 f82b 	bl	80011c0 <__aeabi_ddiv>
 800b16a:	2303      	movs	r3, #3
 800b16c:	900a      	str	r0, [sp, #40]	; 0x28
 800b16e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b170:	9310      	str	r3, [sp, #64]	; 0x40
 800b172:	4b1c      	ldr	r3, [pc, #112]	; (800b1e4 <_dtoa_r+0x384>)
 800b174:	9307      	str	r3, [sp, #28]
 800b176:	2c00      	cmp	r4, #0
 800b178:	d136      	bne.n	800b1e8 <_dtoa_r+0x388>
 800b17a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b17c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b17e:	002a      	movs	r2, r5
 800b180:	0033      	movs	r3, r6
 800b182:	f7f6 f81d 	bl	80011c0 <__aeabi_ddiv>
 800b186:	900a      	str	r0, [sp, #40]	; 0x28
 800b188:	910b      	str	r1, [sp, #44]	; 0x2c
 800b18a:	e05c      	b.n	800b246 <_dtoa_r+0x3e6>
 800b18c:	0800e74e 	.word	0x0800e74e
 800b190:	0800e765 	.word	0x0800e765
 800b194:	7ff00000 	.word	0x7ff00000
 800b198:	0000270f 	.word	0x0000270f
 800b19c:	0800e74a 	.word	0x0800e74a
 800b1a0:	0800e74d 	.word	0x0800e74d
 800b1a4:	0800e9c9 	.word	0x0800e9c9
 800b1a8:	0800e9ca 	.word	0x0800e9ca
 800b1ac:	3ff00000 	.word	0x3ff00000
 800b1b0:	fffffc01 	.word	0xfffffc01
 800b1b4:	3ff80000 	.word	0x3ff80000
 800b1b8:	636f4361 	.word	0x636f4361
 800b1bc:	3fd287a7 	.word	0x3fd287a7
 800b1c0:	8b60c8b3 	.word	0x8b60c8b3
 800b1c4:	3fc68a28 	.word	0x3fc68a28
 800b1c8:	509f79fb 	.word	0x509f79fb
 800b1cc:	3fd34413 	.word	0x3fd34413
 800b1d0:	0800e8e0 	.word	0x0800e8e0
 800b1d4:	00000432 	.word	0x00000432
 800b1d8:	00000412 	.word	0x00000412
 800b1dc:	fe100000 	.word	0xfe100000
 800b1e0:	0800e7c4 	.word	0x0800e7c4
 800b1e4:	0800e8b8 	.word	0x0800e8b8
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	421c      	tst	r4, r3
 800b1ec:	d00b      	beq.n	800b206 <_dtoa_r+0x3a6>
 800b1ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1f0:	0028      	movs	r0, r5
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	9310      	str	r3, [sp, #64]	; 0x40
 800b1f6:	9b07      	ldr	r3, [sp, #28]
 800b1f8:	0031      	movs	r1, r6
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f7f6 fbe5 	bl	80019cc <__aeabi_dmul>
 800b202:	0005      	movs	r5, r0
 800b204:	000e      	movs	r6, r1
 800b206:	9b07      	ldr	r3, [sp, #28]
 800b208:	1064      	asrs	r4, r4, #1
 800b20a:	3308      	adds	r3, #8
 800b20c:	e7b2      	b.n	800b174 <_dtoa_r+0x314>
 800b20e:	2302      	movs	r3, #2
 800b210:	9310      	str	r3, [sp, #64]	; 0x40
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d016      	beq.n	800b246 <_dtoa_r+0x3e6>
 800b218:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b21a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b21c:	425c      	negs	r4, r3
 800b21e:	230f      	movs	r3, #15
 800b220:	4ab5      	ldr	r2, [pc, #724]	; (800b4f8 <_dtoa_r+0x698>)
 800b222:	4023      	ands	r3, r4
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	18d3      	adds	r3, r2, r3
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f7f6 fbce 	bl	80019cc <__aeabi_dmul>
 800b230:	2601      	movs	r6, #1
 800b232:	2300      	movs	r3, #0
 800b234:	900a      	str	r0, [sp, #40]	; 0x28
 800b236:	910b      	str	r1, [sp, #44]	; 0x2c
 800b238:	4db0      	ldr	r5, [pc, #704]	; (800b4fc <_dtoa_r+0x69c>)
 800b23a:	1124      	asrs	r4, r4, #4
 800b23c:	2c00      	cmp	r4, #0
 800b23e:	d000      	beq.n	800b242 <_dtoa_r+0x3e2>
 800b240:	e094      	b.n	800b36c <_dtoa_r+0x50c>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d19f      	bne.n	800b186 <_dtoa_r+0x326>
 800b246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d100      	bne.n	800b24e <_dtoa_r+0x3ee>
 800b24c:	e09b      	b.n	800b386 <_dtoa_r+0x526>
 800b24e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b250:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b252:	2200      	movs	r2, #0
 800b254:	0020      	movs	r0, r4
 800b256:	0029      	movs	r1, r5
 800b258:	4ba9      	ldr	r3, [pc, #676]	; (800b500 <_dtoa_r+0x6a0>)
 800b25a:	f7f5 f907 	bl	800046c <__aeabi_dcmplt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d100      	bne.n	800b264 <_dtoa_r+0x404>
 800b262:	e090      	b.n	800b386 <_dtoa_r+0x526>
 800b264:	9b06      	ldr	r3, [sp, #24]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d100      	bne.n	800b26c <_dtoa_r+0x40c>
 800b26a:	e08c      	b.n	800b386 <_dtoa_r+0x526>
 800b26c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd46      	ble.n	800b300 <_dtoa_r+0x4a0>
 800b272:	9b02      	ldr	r3, [sp, #8]
 800b274:	2200      	movs	r2, #0
 800b276:	0020      	movs	r0, r4
 800b278:	0029      	movs	r1, r5
 800b27a:	1e5e      	subs	r6, r3, #1
 800b27c:	4ba1      	ldr	r3, [pc, #644]	; (800b504 <_dtoa_r+0x6a4>)
 800b27e:	f7f6 fba5 	bl	80019cc <__aeabi_dmul>
 800b282:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b284:	900a      	str	r0, [sp, #40]	; 0x28
 800b286:	910b      	str	r1, [sp, #44]	; 0x2c
 800b288:	3301      	adds	r3, #1
 800b28a:	9310      	str	r3, [sp, #64]	; 0x40
 800b28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b290:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b292:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	f7f7 f9eb 	bl	8002670 <__aeabi_i2d>
 800b29a:	0022      	movs	r2, r4
 800b29c:	002b      	movs	r3, r5
 800b29e:	f7f6 fb95 	bl	80019cc <__aeabi_dmul>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4b98      	ldr	r3, [pc, #608]	; (800b508 <_dtoa_r+0x6a8>)
 800b2a6:	f7f5 fc21 	bl	8000aec <__aeabi_dadd>
 800b2aa:	9010      	str	r0, [sp, #64]	; 0x40
 800b2ac:	9111      	str	r1, [sp, #68]	; 0x44
 800b2ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2b2:	920a      	str	r2, [sp, #40]	; 0x28
 800b2b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2b6:	4a95      	ldr	r2, [pc, #596]	; (800b50c <_dtoa_r+0x6ac>)
 800b2b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ba:	4694      	mov	ip, r2
 800b2bc:	4463      	add	r3, ip
 800b2be:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2c2:	9b07      	ldr	r3, [sp, #28]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d161      	bne.n	800b38c <_dtoa_r+0x52c>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	0020      	movs	r0, r4
 800b2cc:	0029      	movs	r1, r5
 800b2ce:	4b90      	ldr	r3, [pc, #576]	; (800b510 <_dtoa_r+0x6b0>)
 800b2d0:	f7f6 fde8 	bl	8001ea4 <__aeabi_dsub>
 800b2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2d8:	0004      	movs	r4, r0
 800b2da:	000d      	movs	r5, r1
 800b2dc:	f7f5 f8da 	bl	8000494 <__aeabi_dcmpgt>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d000      	beq.n	800b2e6 <_dtoa_r+0x486>
 800b2e4:	e2b5      	b.n	800b852 <_dtoa_r+0x9f2>
 800b2e6:	488b      	ldr	r0, [pc, #556]	; (800b514 <_dtoa_r+0x6b4>)
 800b2e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b2ea:	4684      	mov	ip, r0
 800b2ec:	4461      	add	r1, ip
 800b2ee:	000b      	movs	r3, r1
 800b2f0:	0020      	movs	r0, r4
 800b2f2:	0029      	movs	r1, r5
 800b2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2f6:	f7f5 f8b9 	bl	800046c <__aeabi_dcmplt>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d000      	beq.n	800b300 <_dtoa_r+0x4a0>
 800b2fe:	e2a5      	b.n	800b84c <_dtoa_r+0x9ec>
 800b300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b302:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b304:	930a      	str	r3, [sp, #40]	; 0x28
 800b306:	940b      	str	r4, [sp, #44]	; 0x2c
 800b308:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da00      	bge.n	800b310 <_dtoa_r+0x4b0>
 800b30e:	e171      	b.n	800b5f4 <_dtoa_r+0x794>
 800b310:	9a02      	ldr	r2, [sp, #8]
 800b312:	2a0e      	cmp	r2, #14
 800b314:	dd00      	ble.n	800b318 <_dtoa_r+0x4b8>
 800b316:	e16d      	b.n	800b5f4 <_dtoa_r+0x794>
 800b318:	4b77      	ldr	r3, [pc, #476]	; (800b4f8 <_dtoa_r+0x698>)
 800b31a:	00d2      	lsls	r2, r2, #3
 800b31c:	189b      	adds	r3, r3, r2
 800b31e:	685c      	ldr	r4, [r3, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	9308      	str	r3, [sp, #32]
 800b324:	9409      	str	r4, [sp, #36]	; 0x24
 800b326:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	db00      	blt.n	800b32e <_dtoa_r+0x4ce>
 800b32c:	e0f6      	b.n	800b51c <_dtoa_r+0x6bc>
 800b32e:	9b06      	ldr	r3, [sp, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	dd00      	ble.n	800b336 <_dtoa_r+0x4d6>
 800b334:	e0f2      	b.n	800b51c <_dtoa_r+0x6bc>
 800b336:	d000      	beq.n	800b33a <_dtoa_r+0x4da>
 800b338:	e288      	b.n	800b84c <_dtoa_r+0x9ec>
 800b33a:	9808      	ldr	r0, [sp, #32]
 800b33c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b33e:	2200      	movs	r2, #0
 800b340:	4b73      	ldr	r3, [pc, #460]	; (800b510 <_dtoa_r+0x6b0>)
 800b342:	f7f6 fb43 	bl	80019cc <__aeabi_dmul>
 800b346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b34a:	f7f5 f8ad 	bl	80004a8 <__aeabi_dcmpge>
 800b34e:	9e06      	ldr	r6, [sp, #24]
 800b350:	0035      	movs	r5, r6
 800b352:	2800      	cmp	r0, #0
 800b354:	d000      	beq.n	800b358 <_dtoa_r+0x4f8>
 800b356:	e25f      	b.n	800b818 <_dtoa_r+0x9b8>
 800b358:	9b05      	ldr	r3, [sp, #20]
 800b35a:	9a05      	ldr	r2, [sp, #20]
 800b35c:	3301      	adds	r3, #1
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	2331      	movs	r3, #49	; 0x31
 800b362:	7013      	strb	r3, [r2, #0]
 800b364:	9b02      	ldr	r3, [sp, #8]
 800b366:	3301      	adds	r3, #1
 800b368:	9302      	str	r3, [sp, #8]
 800b36a:	e25a      	b.n	800b822 <_dtoa_r+0x9c2>
 800b36c:	4234      	tst	r4, r6
 800b36e:	d007      	beq.n	800b380 <_dtoa_r+0x520>
 800b370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b372:	3301      	adds	r3, #1
 800b374:	9310      	str	r3, [sp, #64]	; 0x40
 800b376:	682a      	ldr	r2, [r5, #0]
 800b378:	686b      	ldr	r3, [r5, #4]
 800b37a:	f7f6 fb27 	bl	80019cc <__aeabi_dmul>
 800b37e:	0033      	movs	r3, r6
 800b380:	1064      	asrs	r4, r4, #1
 800b382:	3508      	adds	r5, #8
 800b384:	e75a      	b.n	800b23c <_dtoa_r+0x3dc>
 800b386:	9e02      	ldr	r6, [sp, #8]
 800b388:	9b06      	ldr	r3, [sp, #24]
 800b38a:	e780      	b.n	800b28e <_dtoa_r+0x42e>
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b390:	1e5a      	subs	r2, r3, #1
 800b392:	4b59      	ldr	r3, [pc, #356]	; (800b4f8 <_dtoa_r+0x698>)
 800b394:	00d2      	lsls	r2, r2, #3
 800b396:	189b      	adds	r3, r3, r2
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d051      	beq.n	800b444 <_dtoa_r+0x5e4>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	495d      	ldr	r1, [pc, #372]	; (800b518 <_dtoa_r+0x6b8>)
 800b3a4:	f7f5 ff0c 	bl	80011c0 <__aeabi_ddiv>
 800b3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ac:	f7f6 fd7a 	bl	8001ea4 <__aeabi_dsub>
 800b3b0:	9a05      	ldr	r2, [sp, #20]
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	4694      	mov	ip, r2
 800b3b6:	9310      	str	r3, [sp, #64]	; 0x40
 800b3b8:	9b07      	ldr	r3, [sp, #28]
 800b3ba:	900a      	str	r0, [sp, #40]	; 0x28
 800b3bc:	910b      	str	r1, [sp, #44]	; 0x2c
 800b3be:	4463      	add	r3, ip
 800b3c0:	9319      	str	r3, [sp, #100]	; 0x64
 800b3c2:	0029      	movs	r1, r5
 800b3c4:	0020      	movs	r0, r4
 800b3c6:	f7f7 f91d 	bl	8002604 <__aeabi_d2iz>
 800b3ca:	9017      	str	r0, [sp, #92]	; 0x5c
 800b3cc:	f7f7 f950 	bl	8002670 <__aeabi_i2d>
 800b3d0:	0002      	movs	r2, r0
 800b3d2:	000b      	movs	r3, r1
 800b3d4:	0020      	movs	r0, r4
 800b3d6:	0029      	movs	r1, r5
 800b3d8:	f7f6 fd64 	bl	8001ea4 <__aeabi_dsub>
 800b3dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9307      	str	r3, [sp, #28]
 800b3e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3e6:	0004      	movs	r4, r0
 800b3e8:	3330      	adds	r3, #48	; 0x30
 800b3ea:	7013      	strb	r3, [r2, #0]
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f0:	000d      	movs	r5, r1
 800b3f2:	f7f5 f83b 	bl	800046c <__aeabi_dcmplt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d175      	bne.n	800b4e6 <_dtoa_r+0x686>
 800b3fa:	0022      	movs	r2, r4
 800b3fc:	002b      	movs	r3, r5
 800b3fe:	2000      	movs	r0, #0
 800b400:	493f      	ldr	r1, [pc, #252]	; (800b500 <_dtoa_r+0x6a0>)
 800b402:	f7f6 fd4f 	bl	8001ea4 <__aeabi_dsub>
 800b406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b40a:	f7f5 f82f 	bl	800046c <__aeabi_dcmplt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d000      	beq.n	800b414 <_dtoa_r+0x5b4>
 800b412:	e0d1      	b.n	800b5b8 <_dtoa_r+0x758>
 800b414:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b416:	9a07      	ldr	r2, [sp, #28]
 800b418:	4293      	cmp	r3, r2
 800b41a:	d100      	bne.n	800b41e <_dtoa_r+0x5be>
 800b41c:	e770      	b.n	800b300 <_dtoa_r+0x4a0>
 800b41e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b422:	2200      	movs	r2, #0
 800b424:	4b37      	ldr	r3, [pc, #220]	; (800b504 <_dtoa_r+0x6a4>)
 800b426:	f7f6 fad1 	bl	80019cc <__aeabi_dmul>
 800b42a:	4b36      	ldr	r3, [pc, #216]	; (800b504 <_dtoa_r+0x6a4>)
 800b42c:	900a      	str	r0, [sp, #40]	; 0x28
 800b42e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b430:	2200      	movs	r2, #0
 800b432:	0020      	movs	r0, r4
 800b434:	0029      	movs	r1, r5
 800b436:	f7f6 fac9 	bl	80019cc <__aeabi_dmul>
 800b43a:	9b07      	ldr	r3, [sp, #28]
 800b43c:	0004      	movs	r4, r0
 800b43e:	000d      	movs	r5, r1
 800b440:	9310      	str	r3, [sp, #64]	; 0x40
 800b442:	e7be      	b.n	800b3c2 <_dtoa_r+0x562>
 800b444:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b446:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b448:	f7f6 fac0 	bl	80019cc <__aeabi_dmul>
 800b44c:	9a05      	ldr	r2, [sp, #20]
 800b44e:	9b05      	ldr	r3, [sp, #20]
 800b450:	4694      	mov	ip, r2
 800b452:	930a      	str	r3, [sp, #40]	; 0x28
 800b454:	9b07      	ldr	r3, [sp, #28]
 800b456:	9010      	str	r0, [sp, #64]	; 0x40
 800b458:	9111      	str	r1, [sp, #68]	; 0x44
 800b45a:	4463      	add	r3, ip
 800b45c:	9319      	str	r3, [sp, #100]	; 0x64
 800b45e:	0029      	movs	r1, r5
 800b460:	0020      	movs	r0, r4
 800b462:	f7f7 f8cf 	bl	8002604 <__aeabi_d2iz>
 800b466:	9017      	str	r0, [sp, #92]	; 0x5c
 800b468:	f7f7 f902 	bl	8002670 <__aeabi_i2d>
 800b46c:	0002      	movs	r2, r0
 800b46e:	000b      	movs	r3, r1
 800b470:	0020      	movs	r0, r4
 800b472:	0029      	movs	r1, r5
 800b474:	f7f6 fd16 	bl	8001ea4 <__aeabi_dsub>
 800b478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b47a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47c:	3330      	adds	r3, #48	; 0x30
 800b47e:	7013      	strb	r3, [r2, #0]
 800b480:	0013      	movs	r3, r2
 800b482:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b484:	3301      	adds	r3, #1
 800b486:	0004      	movs	r4, r0
 800b488:	000d      	movs	r5, r1
 800b48a:	930a      	str	r3, [sp, #40]	; 0x28
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d12c      	bne.n	800b4ea <_dtoa_r+0x68a>
 800b490:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b492:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b494:	9a05      	ldr	r2, [sp, #20]
 800b496:	9b07      	ldr	r3, [sp, #28]
 800b498:	4694      	mov	ip, r2
 800b49a:	4463      	add	r3, ip
 800b49c:	2200      	movs	r2, #0
 800b49e:	9307      	str	r3, [sp, #28]
 800b4a0:	4b1d      	ldr	r3, [pc, #116]	; (800b518 <_dtoa_r+0x6b8>)
 800b4a2:	f7f5 fb23 	bl	8000aec <__aeabi_dadd>
 800b4a6:	0002      	movs	r2, r0
 800b4a8:	000b      	movs	r3, r1
 800b4aa:	0020      	movs	r0, r4
 800b4ac:	0029      	movs	r1, r5
 800b4ae:	f7f4 fff1 	bl	8000494 <__aeabi_dcmpgt>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d000      	beq.n	800b4b8 <_dtoa_r+0x658>
 800b4b6:	e07f      	b.n	800b5b8 <_dtoa_r+0x758>
 800b4b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4bc:	2000      	movs	r0, #0
 800b4be:	4916      	ldr	r1, [pc, #88]	; (800b518 <_dtoa_r+0x6b8>)
 800b4c0:	f7f6 fcf0 	bl	8001ea4 <__aeabi_dsub>
 800b4c4:	0002      	movs	r2, r0
 800b4c6:	000b      	movs	r3, r1
 800b4c8:	0020      	movs	r0, r4
 800b4ca:	0029      	movs	r1, r5
 800b4cc:	f7f4 ffce 	bl	800046c <__aeabi_dcmplt>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d100      	bne.n	800b4d6 <_dtoa_r+0x676>
 800b4d4:	e714      	b.n	800b300 <_dtoa_r+0x4a0>
 800b4d6:	9b07      	ldr	r3, [sp, #28]
 800b4d8:	001a      	movs	r2, r3
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	9207      	str	r2, [sp, #28]
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	2a30      	cmp	r2, #48	; 0x30
 800b4e2:	d0f8      	beq.n	800b4d6 <_dtoa_r+0x676>
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	9602      	str	r6, [sp, #8]
 800b4e8:	e054      	b.n	800b594 <_dtoa_r+0x734>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4b05      	ldr	r3, [pc, #20]	; (800b504 <_dtoa_r+0x6a4>)
 800b4ee:	f7f6 fa6d 	bl	80019cc <__aeabi_dmul>
 800b4f2:	0004      	movs	r4, r0
 800b4f4:	000d      	movs	r5, r1
 800b4f6:	e7b2      	b.n	800b45e <_dtoa_r+0x5fe>
 800b4f8:	0800e8e0 	.word	0x0800e8e0
 800b4fc:	0800e8b8 	.word	0x0800e8b8
 800b500:	3ff00000 	.word	0x3ff00000
 800b504:	40240000 	.word	0x40240000
 800b508:	401c0000 	.word	0x401c0000
 800b50c:	fcc00000 	.word	0xfcc00000
 800b510:	40140000 	.word	0x40140000
 800b514:	7cc00000 	.word	0x7cc00000
 800b518:	3fe00000 	.word	0x3fe00000
 800b51c:	9b06      	ldr	r3, [sp, #24]
 800b51e:	9e05      	ldr	r6, [sp, #20]
 800b520:	3b01      	subs	r3, #1
 800b522:	199b      	adds	r3, r3, r6
 800b524:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b526:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b528:	930a      	str	r3, [sp, #40]	; 0x28
 800b52a:	9a08      	ldr	r2, [sp, #32]
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	0020      	movs	r0, r4
 800b530:	0029      	movs	r1, r5
 800b532:	f7f5 fe45 	bl	80011c0 <__aeabi_ddiv>
 800b536:	f7f7 f865 	bl	8002604 <__aeabi_d2iz>
 800b53a:	9006      	str	r0, [sp, #24]
 800b53c:	f7f7 f898 	bl	8002670 <__aeabi_i2d>
 800b540:	9a08      	ldr	r2, [sp, #32]
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	f7f6 fa42 	bl	80019cc <__aeabi_dmul>
 800b548:	0002      	movs	r2, r0
 800b54a:	000b      	movs	r3, r1
 800b54c:	0020      	movs	r0, r4
 800b54e:	0029      	movs	r1, r5
 800b550:	f7f6 fca8 	bl	8001ea4 <__aeabi_dsub>
 800b554:	0033      	movs	r3, r6
 800b556:	9a06      	ldr	r2, [sp, #24]
 800b558:	3601      	adds	r6, #1
 800b55a:	3230      	adds	r2, #48	; 0x30
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b560:	9607      	str	r6, [sp, #28]
 800b562:	429a      	cmp	r2, r3
 800b564:	d139      	bne.n	800b5da <_dtoa_r+0x77a>
 800b566:	0002      	movs	r2, r0
 800b568:	000b      	movs	r3, r1
 800b56a:	f7f5 fabf 	bl	8000aec <__aeabi_dadd>
 800b56e:	9a08      	ldr	r2, [sp, #32]
 800b570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b572:	0004      	movs	r4, r0
 800b574:	000d      	movs	r5, r1
 800b576:	f7f4 ff8d 	bl	8000494 <__aeabi_dcmpgt>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d11b      	bne.n	800b5b6 <_dtoa_r+0x756>
 800b57e:	9a08      	ldr	r2, [sp, #32]
 800b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b582:	0020      	movs	r0, r4
 800b584:	0029      	movs	r1, r5
 800b586:	f7f4 ff6b 	bl	8000460 <__aeabi_dcmpeq>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d002      	beq.n	800b594 <_dtoa_r+0x734>
 800b58e:	9b06      	ldr	r3, [sp, #24]
 800b590:	07db      	lsls	r3, r3, #31
 800b592:	d410      	bmi.n	800b5b6 <_dtoa_r+0x756>
 800b594:	0038      	movs	r0, r7
 800b596:	9904      	ldr	r1, [sp, #16]
 800b598:	f000 fe7e 	bl	800c298 <_Bfree>
 800b59c:	2300      	movs	r3, #0
 800b59e:	9a07      	ldr	r2, [sp, #28]
 800b5a0:	9802      	ldr	r0, [sp, #8]
 800b5a2:	7013      	strb	r3, [r2, #0]
 800b5a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	6018      	str	r0, [r3, #0]
 800b5aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d100      	bne.n	800b5b2 <_dtoa_r+0x752>
 800b5b0:	e4a3      	b.n	800aefa <_dtoa_r+0x9a>
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	e4a1      	b.n	800aefa <_dtoa_r+0x9a>
 800b5b6:	9e02      	ldr	r6, [sp, #8]
 800b5b8:	9b07      	ldr	r3, [sp, #28]
 800b5ba:	9307      	str	r3, [sp, #28]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	781a      	ldrb	r2, [r3, #0]
 800b5c0:	2a39      	cmp	r2, #57	; 0x39
 800b5c2:	d106      	bne.n	800b5d2 <_dtoa_r+0x772>
 800b5c4:	9a05      	ldr	r2, [sp, #20]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d1f7      	bne.n	800b5ba <_dtoa_r+0x75a>
 800b5ca:	2230      	movs	r2, #48	; 0x30
 800b5cc:	9905      	ldr	r1, [sp, #20]
 800b5ce:	3601      	adds	r6, #1
 800b5d0:	700a      	strb	r2, [r1, #0]
 800b5d2:	781a      	ldrb	r2, [r3, #0]
 800b5d4:	3201      	adds	r2, #1
 800b5d6:	701a      	strb	r2, [r3, #0]
 800b5d8:	e785      	b.n	800b4e6 <_dtoa_r+0x686>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4bad      	ldr	r3, [pc, #692]	; (800b894 <_dtoa_r+0xa34>)
 800b5de:	f7f6 f9f5 	bl	80019cc <__aeabi_dmul>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	0004      	movs	r4, r0
 800b5e8:	000d      	movs	r5, r1
 800b5ea:	f7f4 ff39 	bl	8000460 <__aeabi_dcmpeq>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d09b      	beq.n	800b52a <_dtoa_r+0x6ca>
 800b5f2:	e7cf      	b.n	800b594 <_dtoa_r+0x734>
 800b5f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	d100      	bne.n	800b5fc <_dtoa_r+0x79c>
 800b5fa:	e082      	b.n	800b702 <_dtoa_r+0x8a2>
 800b5fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5fe:	2a01      	cmp	r2, #1
 800b600:	dc66      	bgt.n	800b6d0 <_dtoa_r+0x870>
 800b602:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b604:	2a00      	cmp	r2, #0
 800b606:	d05f      	beq.n	800b6c8 <_dtoa_r+0x868>
 800b608:	4aa3      	ldr	r2, [pc, #652]	; (800b898 <_dtoa_r+0xa38>)
 800b60a:	189b      	adds	r3, r3, r2
 800b60c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b60e:	9c08      	ldr	r4, [sp, #32]
 800b610:	9a08      	ldr	r2, [sp, #32]
 800b612:	2101      	movs	r1, #1
 800b614:	18d2      	adds	r2, r2, r3
 800b616:	9208      	str	r2, [sp, #32]
 800b618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b61a:	0038      	movs	r0, r7
 800b61c:	18d3      	adds	r3, r2, r3
 800b61e:	930d      	str	r3, [sp, #52]	; 0x34
 800b620:	f000 ff36 	bl	800c490 <__i2b>
 800b624:	0005      	movs	r5, r0
 800b626:	2c00      	cmp	r4, #0
 800b628:	dd0e      	ble.n	800b648 <_dtoa_r+0x7e8>
 800b62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	dd0b      	ble.n	800b648 <_dtoa_r+0x7e8>
 800b630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b632:	0023      	movs	r3, r4
 800b634:	4294      	cmp	r4, r2
 800b636:	dd00      	ble.n	800b63a <_dtoa_r+0x7da>
 800b638:	0013      	movs	r3, r2
 800b63a:	9a08      	ldr	r2, [sp, #32]
 800b63c:	1ae4      	subs	r4, r4, r3
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	9208      	str	r2, [sp, #32]
 800b642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	930d      	str	r3, [sp, #52]	; 0x34
 800b648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d01f      	beq.n	800b68e <_dtoa_r+0x82e>
 800b64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b650:	2b00      	cmp	r3, #0
 800b652:	d05a      	beq.n	800b70a <_dtoa_r+0x8aa>
 800b654:	2e00      	cmp	r6, #0
 800b656:	dd11      	ble.n	800b67c <_dtoa_r+0x81c>
 800b658:	0029      	movs	r1, r5
 800b65a:	0032      	movs	r2, r6
 800b65c:	0038      	movs	r0, r7
 800b65e:	f000 ffdd 	bl	800c61c <__pow5mult>
 800b662:	9a04      	ldr	r2, [sp, #16]
 800b664:	0001      	movs	r1, r0
 800b666:	0005      	movs	r5, r0
 800b668:	0038      	movs	r0, r7
 800b66a:	f000 ff27 	bl	800c4bc <__multiply>
 800b66e:	9904      	ldr	r1, [sp, #16]
 800b670:	9007      	str	r0, [sp, #28]
 800b672:	0038      	movs	r0, r7
 800b674:	f000 fe10 	bl	800c298 <_Bfree>
 800b678:	9b07      	ldr	r3, [sp, #28]
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b67e:	1b9a      	subs	r2, r3, r6
 800b680:	42b3      	cmp	r3, r6
 800b682:	d004      	beq.n	800b68e <_dtoa_r+0x82e>
 800b684:	0038      	movs	r0, r7
 800b686:	9904      	ldr	r1, [sp, #16]
 800b688:	f000 ffc8 	bl	800c61c <__pow5mult>
 800b68c:	9004      	str	r0, [sp, #16]
 800b68e:	2101      	movs	r1, #1
 800b690:	0038      	movs	r0, r7
 800b692:	f000 fefd 	bl	800c490 <__i2b>
 800b696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b698:	0006      	movs	r6, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dd37      	ble.n	800b70e <_dtoa_r+0x8ae>
 800b69e:	001a      	movs	r2, r3
 800b6a0:	0001      	movs	r1, r0
 800b6a2:	0038      	movs	r0, r7
 800b6a4:	f000 ffba 	bl	800c61c <__pow5mult>
 800b6a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6aa:	0006      	movs	r6, r0
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	dd33      	ble.n	800b718 <_dtoa_r+0x8b8>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9307      	str	r3, [sp, #28]
 800b6b4:	6933      	ldr	r3, [r6, #16]
 800b6b6:	3303      	adds	r3, #3
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	18f3      	adds	r3, r6, r3
 800b6bc:	6858      	ldr	r0, [r3, #4]
 800b6be:	f000 fe9f 	bl	800c400 <__hi0bits>
 800b6c2:	2320      	movs	r3, #32
 800b6c4:	1a18      	subs	r0, r3, r0
 800b6c6:	e03f      	b.n	800b748 <_dtoa_r+0x8e8>
 800b6c8:	2336      	movs	r3, #54	; 0x36
 800b6ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6cc:	1a9b      	subs	r3, r3, r2
 800b6ce:	e79d      	b.n	800b60c <_dtoa_r+0x7ac>
 800b6d0:	9b06      	ldr	r3, [sp, #24]
 800b6d2:	1e5e      	subs	r6, r3, #1
 800b6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6d6:	42b3      	cmp	r3, r6
 800b6d8:	db08      	blt.n	800b6ec <_dtoa_r+0x88c>
 800b6da:	1b9e      	subs	r6, r3, r6
 800b6dc:	9b06      	ldr	r3, [sp, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da0c      	bge.n	800b6fc <_dtoa_r+0x89c>
 800b6e2:	9b08      	ldr	r3, [sp, #32]
 800b6e4:	9a06      	ldr	r2, [sp, #24]
 800b6e6:	1a9c      	subs	r4, r3, r2
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e791      	b.n	800b610 <_dtoa_r+0x7b0>
 800b6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6f0:	1af3      	subs	r3, r6, r3
 800b6f2:	18d3      	adds	r3, r2, r3
 800b6f4:	960e      	str	r6, [sp, #56]	; 0x38
 800b6f6:	9314      	str	r3, [sp, #80]	; 0x50
 800b6f8:	2600      	movs	r6, #0
 800b6fa:	e7ef      	b.n	800b6dc <_dtoa_r+0x87c>
 800b6fc:	9c08      	ldr	r4, [sp, #32]
 800b6fe:	9b06      	ldr	r3, [sp, #24]
 800b700:	e786      	b.n	800b610 <_dtoa_r+0x7b0>
 800b702:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b704:	9c08      	ldr	r4, [sp, #32]
 800b706:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b708:	e78d      	b.n	800b626 <_dtoa_r+0x7c6>
 800b70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b70c:	e7ba      	b.n	800b684 <_dtoa_r+0x824>
 800b70e:	2300      	movs	r3, #0
 800b710:	9307      	str	r3, [sp, #28]
 800b712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b714:	2b01      	cmp	r3, #1
 800b716:	dc13      	bgt.n	800b740 <_dtoa_r+0x8e0>
 800b718:	2300      	movs	r3, #0
 800b71a:	9307      	str	r3, [sp, #28]
 800b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10e      	bne.n	800b740 <_dtoa_r+0x8e0>
 800b722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b724:	031b      	lsls	r3, r3, #12
 800b726:	d10b      	bne.n	800b740 <_dtoa_r+0x8e0>
 800b728:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b72a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b72c:	4213      	tst	r3, r2
 800b72e:	d007      	beq.n	800b740 <_dtoa_r+0x8e0>
 800b730:	9b08      	ldr	r3, [sp, #32]
 800b732:	3301      	adds	r3, #1
 800b734:	9308      	str	r3, [sp, #32]
 800b736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b738:	3301      	adds	r3, #1
 800b73a:	930d      	str	r3, [sp, #52]	; 0x34
 800b73c:	2301      	movs	r3, #1
 800b73e:	9307      	str	r3, [sp, #28]
 800b740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b742:	2001      	movs	r0, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1b5      	bne.n	800b6b4 <_dtoa_r+0x854>
 800b748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74a:	221f      	movs	r2, #31
 800b74c:	1818      	adds	r0, r3, r0
 800b74e:	0003      	movs	r3, r0
 800b750:	4013      	ands	r3, r2
 800b752:	4210      	tst	r0, r2
 800b754:	d046      	beq.n	800b7e4 <_dtoa_r+0x984>
 800b756:	3201      	adds	r2, #1
 800b758:	1ad2      	subs	r2, r2, r3
 800b75a:	2a04      	cmp	r2, #4
 800b75c:	dd3f      	ble.n	800b7de <_dtoa_r+0x97e>
 800b75e:	221c      	movs	r2, #28
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	9a08      	ldr	r2, [sp, #32]
 800b764:	18e4      	adds	r4, r4, r3
 800b766:	18d2      	adds	r2, r2, r3
 800b768:	9208      	str	r2, [sp, #32]
 800b76a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b76c:	18d3      	adds	r3, r2, r3
 800b76e:	930d      	str	r3, [sp, #52]	; 0x34
 800b770:	9b08      	ldr	r3, [sp, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	dd05      	ble.n	800b782 <_dtoa_r+0x922>
 800b776:	001a      	movs	r2, r3
 800b778:	0038      	movs	r0, r7
 800b77a:	9904      	ldr	r1, [sp, #16]
 800b77c:	f000 ffaa 	bl	800c6d4 <__lshift>
 800b780:	9004      	str	r0, [sp, #16]
 800b782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd05      	ble.n	800b794 <_dtoa_r+0x934>
 800b788:	0031      	movs	r1, r6
 800b78a:	001a      	movs	r2, r3
 800b78c:	0038      	movs	r0, r7
 800b78e:	f000 ffa1 	bl	800c6d4 <__lshift>
 800b792:	0006      	movs	r6, r0
 800b794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b796:	2b00      	cmp	r3, #0
 800b798:	d026      	beq.n	800b7e8 <_dtoa_r+0x988>
 800b79a:	0031      	movs	r1, r6
 800b79c:	9804      	ldr	r0, [sp, #16]
 800b79e:	f001 f809 	bl	800c7b4 <__mcmp>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	da20      	bge.n	800b7e8 <_dtoa_r+0x988>
 800b7a6:	9b02      	ldr	r3, [sp, #8]
 800b7a8:	220a      	movs	r2, #10
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	9302      	str	r3, [sp, #8]
 800b7ae:	0038      	movs	r0, r7
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	9904      	ldr	r1, [sp, #16]
 800b7b4:	f000 fd94 	bl	800c2e0 <__multadd>
 800b7b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7ba:	9004      	str	r0, [sp, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d100      	bne.n	800b7c2 <_dtoa_r+0x962>
 800b7c0:	e160      	b.n	800ba84 <_dtoa_r+0xc24>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	0029      	movs	r1, r5
 800b7c6:	220a      	movs	r2, #10
 800b7c8:	0038      	movs	r0, r7
 800b7ca:	f000 fd89 	bl	800c2e0 <__multadd>
 800b7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d0:	0005      	movs	r5, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc47      	bgt.n	800b866 <_dtoa_r+0xa06>
 800b7d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	dc0d      	bgt.n	800b7f8 <_dtoa_r+0x998>
 800b7dc:	e043      	b.n	800b866 <_dtoa_r+0xa06>
 800b7de:	2a04      	cmp	r2, #4
 800b7e0:	d0c6      	beq.n	800b770 <_dtoa_r+0x910>
 800b7e2:	0013      	movs	r3, r2
 800b7e4:	331c      	adds	r3, #28
 800b7e6:	e7bc      	b.n	800b762 <_dtoa_r+0x902>
 800b7e8:	9b06      	ldr	r3, [sp, #24]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dc35      	bgt.n	800b85a <_dtoa_r+0x9fa>
 800b7ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	dd32      	ble.n	800b85a <_dtoa_r+0x9fa>
 800b7f4:	9b06      	ldr	r3, [sp, #24]
 800b7f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10c      	bne.n	800b818 <_dtoa_r+0x9b8>
 800b7fe:	0031      	movs	r1, r6
 800b800:	2205      	movs	r2, #5
 800b802:	0038      	movs	r0, r7
 800b804:	f000 fd6c 	bl	800c2e0 <__multadd>
 800b808:	0006      	movs	r6, r0
 800b80a:	0001      	movs	r1, r0
 800b80c:	9804      	ldr	r0, [sp, #16]
 800b80e:	f000 ffd1 	bl	800c7b4 <__mcmp>
 800b812:	2800      	cmp	r0, #0
 800b814:	dd00      	ble.n	800b818 <_dtoa_r+0x9b8>
 800b816:	e59f      	b.n	800b358 <_dtoa_r+0x4f8>
 800b818:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b81a:	43db      	mvns	r3, r3
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	9b05      	ldr	r3, [sp, #20]
 800b820:	9307      	str	r3, [sp, #28]
 800b822:	2400      	movs	r4, #0
 800b824:	0031      	movs	r1, r6
 800b826:	0038      	movs	r0, r7
 800b828:	f000 fd36 	bl	800c298 <_Bfree>
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	d100      	bne.n	800b832 <_dtoa_r+0x9d2>
 800b830:	e6b0      	b.n	800b594 <_dtoa_r+0x734>
 800b832:	2c00      	cmp	r4, #0
 800b834:	d005      	beq.n	800b842 <_dtoa_r+0x9e2>
 800b836:	42ac      	cmp	r4, r5
 800b838:	d003      	beq.n	800b842 <_dtoa_r+0x9e2>
 800b83a:	0021      	movs	r1, r4
 800b83c:	0038      	movs	r0, r7
 800b83e:	f000 fd2b 	bl	800c298 <_Bfree>
 800b842:	0029      	movs	r1, r5
 800b844:	0038      	movs	r0, r7
 800b846:	f000 fd27 	bl	800c298 <_Bfree>
 800b84a:	e6a3      	b.n	800b594 <_dtoa_r+0x734>
 800b84c:	2600      	movs	r6, #0
 800b84e:	0035      	movs	r5, r6
 800b850:	e7e2      	b.n	800b818 <_dtoa_r+0x9b8>
 800b852:	9602      	str	r6, [sp, #8]
 800b854:	9e07      	ldr	r6, [sp, #28]
 800b856:	0035      	movs	r5, r6
 800b858:	e57e      	b.n	800b358 <_dtoa_r+0x4f8>
 800b85a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d100      	bne.n	800b862 <_dtoa_r+0xa02>
 800b860:	e0c8      	b.n	800b9f4 <_dtoa_r+0xb94>
 800b862:	9b06      	ldr	r3, [sp, #24]
 800b864:	930c      	str	r3, [sp, #48]	; 0x30
 800b866:	2c00      	cmp	r4, #0
 800b868:	dd05      	ble.n	800b876 <_dtoa_r+0xa16>
 800b86a:	0029      	movs	r1, r5
 800b86c:	0022      	movs	r2, r4
 800b86e:	0038      	movs	r0, r7
 800b870:	f000 ff30 	bl	800c6d4 <__lshift>
 800b874:	0005      	movs	r5, r0
 800b876:	9b07      	ldr	r3, [sp, #28]
 800b878:	0028      	movs	r0, r5
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d01f      	beq.n	800b8be <_dtoa_r+0xa5e>
 800b87e:	0038      	movs	r0, r7
 800b880:	6869      	ldr	r1, [r5, #4]
 800b882:	f000 fcc5 	bl	800c210 <_Balloc>
 800b886:	1e04      	subs	r4, r0, #0
 800b888:	d10c      	bne.n	800b8a4 <_dtoa_r+0xa44>
 800b88a:	0002      	movs	r2, r0
 800b88c:	4b03      	ldr	r3, [pc, #12]	; (800b89c <_dtoa_r+0xa3c>)
 800b88e:	4904      	ldr	r1, [pc, #16]	; (800b8a0 <_dtoa_r+0xa40>)
 800b890:	f7ff fafb 	bl	800ae8a <_dtoa_r+0x2a>
 800b894:	40240000 	.word	0x40240000
 800b898:	00000433 	.word	0x00000433
 800b89c:	0800e7c4 	.word	0x0800e7c4
 800b8a0:	000002ea 	.word	0x000002ea
 800b8a4:	0029      	movs	r1, r5
 800b8a6:	692b      	ldr	r3, [r5, #16]
 800b8a8:	310c      	adds	r1, #12
 800b8aa:	1c9a      	adds	r2, r3, #2
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	300c      	adds	r0, #12
 800b8b0:	f000 fca5 	bl	800c1fe <memcpy>
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	0021      	movs	r1, r4
 800b8b8:	0038      	movs	r0, r7
 800b8ba:	f000 ff0b 	bl	800c6d4 <__lshift>
 800b8be:	002c      	movs	r4, r5
 800b8c0:	0005      	movs	r5, r0
 800b8c2:	9b05      	ldr	r3, [sp, #20]
 800b8c4:	9308      	str	r3, [sp, #32]
 800b8c6:	0031      	movs	r1, r6
 800b8c8:	9804      	ldr	r0, [sp, #16]
 800b8ca:	f7ff fa3d 	bl	800ad48 <quorem>
 800b8ce:	0003      	movs	r3, r0
 800b8d0:	0021      	movs	r1, r4
 800b8d2:	3330      	adds	r3, #48	; 0x30
 800b8d4:	900e      	str	r0, [sp, #56]	; 0x38
 800b8d6:	9804      	ldr	r0, [sp, #16]
 800b8d8:	9306      	str	r3, [sp, #24]
 800b8da:	f000 ff6b 	bl	800c7b4 <__mcmp>
 800b8de:	002a      	movs	r2, r5
 800b8e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b8e2:	0031      	movs	r1, r6
 800b8e4:	0038      	movs	r0, r7
 800b8e6:	f000 ff81 	bl	800c7ec <__mdiff>
 800b8ea:	68c3      	ldr	r3, [r0, #12]
 800b8ec:	9007      	str	r0, [sp, #28]
 800b8ee:	9310      	str	r3, [sp, #64]	; 0x40
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d104      	bne.n	800b904 <_dtoa_r+0xaa4>
 800b8fa:	0001      	movs	r1, r0
 800b8fc:	9804      	ldr	r0, [sp, #16]
 800b8fe:	f000 ff59 	bl	800c7b4 <__mcmp>
 800b902:	900d      	str	r0, [sp, #52]	; 0x34
 800b904:	0038      	movs	r0, r7
 800b906:	9907      	ldr	r1, [sp, #28]
 800b908:	f000 fcc6 	bl	800c298 <_Bfree>
 800b90c:	2301      	movs	r3, #1
 800b90e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b912:	4018      	ands	r0, r3
 800b914:	9b08      	ldr	r3, [sp, #32]
 800b916:	3301      	adds	r3, #1
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b91c:	4313      	orrs	r3, r2
 800b91e:	4303      	orrs	r3, r0
 800b920:	d10c      	bne.n	800b93c <_dtoa_r+0xadc>
 800b922:	9b06      	ldr	r3, [sp, #24]
 800b924:	2b39      	cmp	r3, #57	; 0x39
 800b926:	d025      	beq.n	800b974 <_dtoa_r+0xb14>
 800b928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dd02      	ble.n	800b934 <_dtoa_r+0xad4>
 800b92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b930:	3331      	adds	r3, #49	; 0x31
 800b932:	9306      	str	r3, [sp, #24]
 800b934:	9b08      	ldr	r3, [sp, #32]
 800b936:	9a06      	ldr	r2, [sp, #24]
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	e773      	b.n	800b824 <_dtoa_r+0x9c4>
 800b93c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	db03      	blt.n	800b94a <_dtoa_r+0xaea>
 800b942:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b944:	4313      	orrs	r3, r2
 800b946:	4303      	orrs	r3, r0
 800b948:	d11f      	bne.n	800b98a <_dtoa_r+0xb2a>
 800b94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	ddf1      	ble.n	800b934 <_dtoa_r+0xad4>
 800b950:	9904      	ldr	r1, [sp, #16]
 800b952:	2201      	movs	r2, #1
 800b954:	0038      	movs	r0, r7
 800b956:	f000 febd 	bl	800c6d4 <__lshift>
 800b95a:	0031      	movs	r1, r6
 800b95c:	9004      	str	r0, [sp, #16]
 800b95e:	f000 ff29 	bl	800c7b4 <__mcmp>
 800b962:	2800      	cmp	r0, #0
 800b964:	dc03      	bgt.n	800b96e <_dtoa_r+0xb0e>
 800b966:	d1e5      	bne.n	800b934 <_dtoa_r+0xad4>
 800b968:	9b06      	ldr	r3, [sp, #24]
 800b96a:	07db      	lsls	r3, r3, #31
 800b96c:	d5e2      	bpl.n	800b934 <_dtoa_r+0xad4>
 800b96e:	9b06      	ldr	r3, [sp, #24]
 800b970:	2b39      	cmp	r3, #57	; 0x39
 800b972:	d1dc      	bne.n	800b92e <_dtoa_r+0xace>
 800b974:	2339      	movs	r3, #57	; 0x39
 800b976:	9a08      	ldr	r2, [sp, #32]
 800b978:	7013      	strb	r3, [r2, #0]
 800b97a:	9b07      	ldr	r3, [sp, #28]
 800b97c:	9307      	str	r3, [sp, #28]
 800b97e:	3b01      	subs	r3, #1
 800b980:	781a      	ldrb	r2, [r3, #0]
 800b982:	2a39      	cmp	r2, #57	; 0x39
 800b984:	d06c      	beq.n	800ba60 <_dtoa_r+0xc00>
 800b986:	3201      	adds	r2, #1
 800b988:	e7d6      	b.n	800b938 <_dtoa_r+0xad8>
 800b98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dd07      	ble.n	800b9a0 <_dtoa_r+0xb40>
 800b990:	9b06      	ldr	r3, [sp, #24]
 800b992:	2b39      	cmp	r3, #57	; 0x39
 800b994:	d0ee      	beq.n	800b974 <_dtoa_r+0xb14>
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	9a08      	ldr	r2, [sp, #32]
 800b99a:	3301      	adds	r3, #1
 800b99c:	7013      	strb	r3, [r2, #0]
 800b99e:	e741      	b.n	800b824 <_dtoa_r+0x9c4>
 800b9a0:	9b08      	ldr	r3, [sp, #32]
 800b9a2:	9a06      	ldr	r2, [sp, #24]
 800b9a4:	701a      	strb	r2, [r3, #0]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	9a05      	ldr	r2, [sp, #20]
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	9a08      	ldr	r2, [sp, #32]
 800b9ae:	189b      	adds	r3, r3, r2
 800b9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d03e      	beq.n	800ba34 <_dtoa_r+0xbd4>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	220a      	movs	r2, #10
 800b9ba:	9904      	ldr	r1, [sp, #16]
 800b9bc:	0038      	movs	r0, r7
 800b9be:	f000 fc8f 	bl	800c2e0 <__multadd>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	9004      	str	r0, [sp, #16]
 800b9c6:	220a      	movs	r2, #10
 800b9c8:	0021      	movs	r1, r4
 800b9ca:	0038      	movs	r0, r7
 800b9cc:	42ac      	cmp	r4, r5
 800b9ce:	d106      	bne.n	800b9de <_dtoa_r+0xb7e>
 800b9d0:	f000 fc86 	bl	800c2e0 <__multadd>
 800b9d4:	0004      	movs	r4, r0
 800b9d6:	0005      	movs	r5, r0
 800b9d8:	9b07      	ldr	r3, [sp, #28]
 800b9da:	9308      	str	r3, [sp, #32]
 800b9dc:	e773      	b.n	800b8c6 <_dtoa_r+0xa66>
 800b9de:	f000 fc7f 	bl	800c2e0 <__multadd>
 800b9e2:	0029      	movs	r1, r5
 800b9e4:	0004      	movs	r4, r0
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	0038      	movs	r0, r7
 800b9ec:	f000 fc78 	bl	800c2e0 <__multadd>
 800b9f0:	0005      	movs	r5, r0
 800b9f2:	e7f1      	b.n	800b9d8 <_dtoa_r+0xb78>
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b9f8:	2400      	movs	r4, #0
 800b9fa:	0031      	movs	r1, r6
 800b9fc:	9804      	ldr	r0, [sp, #16]
 800b9fe:	f7ff f9a3 	bl	800ad48 <quorem>
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	3030      	adds	r0, #48	; 0x30
 800ba06:	5518      	strb	r0, [r3, r4]
 800ba08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba0a:	3401      	adds	r4, #1
 800ba0c:	9006      	str	r0, [sp, #24]
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	dd07      	ble.n	800ba22 <_dtoa_r+0xbc2>
 800ba12:	2300      	movs	r3, #0
 800ba14:	220a      	movs	r2, #10
 800ba16:	0038      	movs	r0, r7
 800ba18:	9904      	ldr	r1, [sp, #16]
 800ba1a:	f000 fc61 	bl	800c2e0 <__multadd>
 800ba1e:	9004      	str	r0, [sp, #16]
 800ba20:	e7eb      	b.n	800b9fa <_dtoa_r+0xb9a>
 800ba22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba24:	2001      	movs	r0, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd00      	ble.n	800ba2c <_dtoa_r+0xbcc>
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	2400      	movs	r4, #0
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	181b      	adds	r3, r3, r0
 800ba32:	9307      	str	r3, [sp, #28]
 800ba34:	9904      	ldr	r1, [sp, #16]
 800ba36:	2201      	movs	r2, #1
 800ba38:	0038      	movs	r0, r7
 800ba3a:	f000 fe4b 	bl	800c6d4 <__lshift>
 800ba3e:	0031      	movs	r1, r6
 800ba40:	9004      	str	r0, [sp, #16]
 800ba42:	f000 feb7 	bl	800c7b4 <__mcmp>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	dc97      	bgt.n	800b97a <_dtoa_r+0xb1a>
 800ba4a:	d102      	bne.n	800ba52 <_dtoa_r+0xbf2>
 800ba4c:	9b06      	ldr	r3, [sp, #24]
 800ba4e:	07db      	lsls	r3, r3, #31
 800ba50:	d493      	bmi.n	800b97a <_dtoa_r+0xb1a>
 800ba52:	9b07      	ldr	r3, [sp, #28]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	781a      	ldrb	r2, [r3, #0]
 800ba5a:	2a30      	cmp	r2, #48	; 0x30
 800ba5c:	d0fa      	beq.n	800ba54 <_dtoa_r+0xbf4>
 800ba5e:	e6e1      	b.n	800b824 <_dtoa_r+0x9c4>
 800ba60:	9a05      	ldr	r2, [sp, #20]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d18a      	bne.n	800b97c <_dtoa_r+0xb1c>
 800ba66:	9b02      	ldr	r3, [sp, #8]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	9302      	str	r3, [sp, #8]
 800ba6c:	2331      	movs	r3, #49	; 0x31
 800ba6e:	e795      	b.n	800b99c <_dtoa_r+0xb3c>
 800ba70:	4b08      	ldr	r3, [pc, #32]	; (800ba94 <_dtoa_r+0xc34>)
 800ba72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <_dtoa_r+0xc38>)
 800ba78:	2a00      	cmp	r2, #0
 800ba7a:	d001      	beq.n	800ba80 <_dtoa_r+0xc20>
 800ba7c:	f7ff fa3b 	bl	800aef6 <_dtoa_r+0x96>
 800ba80:	f7ff fa3b 	bl	800aefa <_dtoa_r+0x9a>
 800ba84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dcb6      	bgt.n	800b9f8 <_dtoa_r+0xb98>
 800ba8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	dd00      	ble.n	800ba92 <_dtoa_r+0xc32>
 800ba90:	e6b2      	b.n	800b7f8 <_dtoa_r+0x998>
 800ba92:	e7b1      	b.n	800b9f8 <_dtoa_r+0xb98>
 800ba94:	0800e741 	.word	0x0800e741
 800ba98:	0800e749 	.word	0x0800e749

0800ba9c <rshift>:
 800ba9c:	0002      	movs	r2, r0
 800ba9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa0:	6907      	ldr	r7, [r0, #16]
 800baa2:	3214      	adds	r2, #20
 800baa4:	0013      	movs	r3, r2
 800baa6:	b085      	sub	sp, #20
 800baa8:	114e      	asrs	r6, r1, #5
 800baaa:	42b7      	cmp	r7, r6
 800baac:	dd31      	ble.n	800bb12 <rshift+0x76>
 800baae:	00b3      	lsls	r3, r6, #2
 800bab0:	18d3      	adds	r3, r2, r3
 800bab2:	251f      	movs	r5, #31
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	000b      	movs	r3, r1
 800bab8:	00bc      	lsls	r4, r7, #2
 800baba:	402b      	ands	r3, r5
 800babc:	1914      	adds	r4, r2, r4
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	4229      	tst	r1, r5
 800bac2:	d10c      	bne.n	800bade <rshift+0x42>
 800bac4:	0015      	movs	r5, r2
 800bac6:	9901      	ldr	r1, [sp, #4]
 800bac8:	428c      	cmp	r4, r1
 800baca:	d838      	bhi.n	800bb3e <rshift+0xa2>
 800bacc:	9901      	ldr	r1, [sp, #4]
 800bace:	2300      	movs	r3, #0
 800bad0:	3903      	subs	r1, #3
 800bad2:	428c      	cmp	r4, r1
 800bad4:	d301      	bcc.n	800bada <rshift+0x3e>
 800bad6:	1bbb      	subs	r3, r7, r6
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	18d3      	adds	r3, r2, r3
 800badc:	e019      	b.n	800bb12 <rshift+0x76>
 800bade:	2120      	movs	r1, #32
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	9d01      	ldr	r5, [sp, #4]
 800bae4:	1acb      	subs	r3, r1, r3
 800bae6:	9303      	str	r3, [sp, #12]
 800bae8:	cd02      	ldmia	r5!, {r1}
 800baea:	9b02      	ldr	r3, [sp, #8]
 800baec:	4694      	mov	ip, r2
 800baee:	40d9      	lsrs	r1, r3
 800baf0:	9100      	str	r1, [sp, #0]
 800baf2:	42ac      	cmp	r4, r5
 800baf4:	d816      	bhi.n	800bb24 <rshift+0x88>
 800baf6:	9d01      	ldr	r5, [sp, #4]
 800baf8:	2300      	movs	r3, #0
 800bafa:	3501      	adds	r5, #1
 800bafc:	42ac      	cmp	r4, r5
 800bafe:	d302      	bcc.n	800bb06 <rshift+0x6a>
 800bb00:	1bbb      	subs	r3, r7, r6
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	3b04      	subs	r3, #4
 800bb06:	9900      	ldr	r1, [sp, #0]
 800bb08:	18d3      	adds	r3, r2, r3
 800bb0a:	6019      	str	r1, [r3, #0]
 800bb0c:	2900      	cmp	r1, #0
 800bb0e:	d000      	beq.n	800bb12 <rshift+0x76>
 800bb10:	3304      	adds	r3, #4
 800bb12:	1a99      	subs	r1, r3, r2
 800bb14:	1089      	asrs	r1, r1, #2
 800bb16:	6101      	str	r1, [r0, #16]
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d101      	bne.n	800bb20 <rshift+0x84>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6143      	str	r3, [r0, #20]
 800bb20:	b005      	add	sp, #20
 800bb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	9903      	ldr	r1, [sp, #12]
 800bb28:	408b      	lsls	r3, r1
 800bb2a:	9900      	ldr	r1, [sp, #0]
 800bb2c:	4319      	orrs	r1, r3
 800bb2e:	4663      	mov	r3, ip
 800bb30:	c302      	stmia	r3!, {r1}
 800bb32:	469c      	mov	ip, r3
 800bb34:	cd02      	ldmia	r5!, {r1}
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	40d9      	lsrs	r1, r3
 800bb3a:	9100      	str	r1, [sp, #0]
 800bb3c:	e7d9      	b.n	800baf2 <rshift+0x56>
 800bb3e:	c908      	ldmia	r1!, {r3}
 800bb40:	c508      	stmia	r5!, {r3}
 800bb42:	e7c1      	b.n	800bac8 <rshift+0x2c>

0800bb44 <__hexdig_fun>:
 800bb44:	0002      	movs	r2, r0
 800bb46:	3a30      	subs	r2, #48	; 0x30
 800bb48:	0003      	movs	r3, r0
 800bb4a:	2a09      	cmp	r2, #9
 800bb4c:	d802      	bhi.n	800bb54 <__hexdig_fun+0x10>
 800bb4e:	3b20      	subs	r3, #32
 800bb50:	b2d8      	uxtb	r0, r3
 800bb52:	4770      	bx	lr
 800bb54:	0002      	movs	r2, r0
 800bb56:	3a61      	subs	r2, #97	; 0x61
 800bb58:	2a05      	cmp	r2, #5
 800bb5a:	d801      	bhi.n	800bb60 <__hexdig_fun+0x1c>
 800bb5c:	3b47      	subs	r3, #71	; 0x47
 800bb5e:	e7f7      	b.n	800bb50 <__hexdig_fun+0xc>
 800bb60:	001a      	movs	r2, r3
 800bb62:	3a41      	subs	r2, #65	; 0x41
 800bb64:	2000      	movs	r0, #0
 800bb66:	2a05      	cmp	r2, #5
 800bb68:	d8f3      	bhi.n	800bb52 <__hexdig_fun+0xe>
 800bb6a:	3b27      	subs	r3, #39	; 0x27
 800bb6c:	e7f0      	b.n	800bb50 <__hexdig_fun+0xc>
	...

0800bb70 <__gethex>:
 800bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb72:	b08d      	sub	sp, #52	; 0x34
 800bb74:	930a      	str	r3, [sp, #40]	; 0x28
 800bb76:	4bbd      	ldr	r3, [pc, #756]	; (800be6c <__gethex+0x2fc>)
 800bb78:	9005      	str	r0, [sp, #20]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb7e:	0018      	movs	r0, r3
 800bb80:	9202      	str	r2, [sp, #8]
 800bb82:	9307      	str	r3, [sp, #28]
 800bb84:	f7f4 faca 	bl	800011c <strlen>
 800bb88:	2202      	movs	r2, #2
 800bb8a:	9b07      	ldr	r3, [sp, #28]
 800bb8c:	4252      	negs	r2, r2
 800bb8e:	181b      	adds	r3, r3, r0
 800bb90:	3b01      	subs	r3, #1
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	9003      	str	r0, [sp, #12]
 800bb96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb9a:	6819      	ldr	r1, [r3, #0]
 800bb9c:	1c8b      	adds	r3, r1, #2
 800bb9e:	1a52      	subs	r2, r2, r1
 800bba0:	18d1      	adds	r1, r2, r3
 800bba2:	9301      	str	r3, [sp, #4]
 800bba4:	9108      	str	r1, [sp, #32]
 800bba6:	9901      	ldr	r1, [sp, #4]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	7808      	ldrb	r0, [r1, #0]
 800bbac:	2830      	cmp	r0, #48	; 0x30
 800bbae:	d0f7      	beq.n	800bba0 <__gethex+0x30>
 800bbb0:	f7ff ffc8 	bl	800bb44 <__hexdig_fun>
 800bbb4:	1e04      	subs	r4, r0, #0
 800bbb6:	d13e      	bne.n	800bc36 <__gethex+0xc6>
 800bbb8:	9a03      	ldr	r2, [sp, #12]
 800bbba:	9907      	ldr	r1, [sp, #28]
 800bbbc:	9801      	ldr	r0, [sp, #4]
 800bbbe:	f001 fda7 	bl	800d710 <strncmp>
 800bbc2:	1e07      	subs	r7, r0, #0
 800bbc4:	d000      	beq.n	800bbc8 <__gethex+0x58>
 800bbc6:	e06f      	b.n	800bca8 <__gethex+0x138>
 800bbc8:	9b01      	ldr	r3, [sp, #4]
 800bbca:	9a03      	ldr	r2, [sp, #12]
 800bbcc:	5c98      	ldrb	r0, [r3, r2]
 800bbce:	189d      	adds	r5, r3, r2
 800bbd0:	f7ff ffb8 	bl	800bb44 <__hexdig_fun>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d034      	beq.n	800bc46 <__gethex+0xd6>
 800bbdc:	9501      	str	r5, [sp, #4]
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	7818      	ldrb	r0, [r3, #0]
 800bbe2:	2830      	cmp	r0, #48	; 0x30
 800bbe4:	d009      	beq.n	800bbfa <__gethex+0x8a>
 800bbe6:	f7ff ffad 	bl	800bb44 <__hexdig_fun>
 800bbea:	4243      	negs	r3, r0
 800bbec:	4143      	adcs	r3, r0
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	002c      	movs	r4, r5
 800bbf4:	9308      	str	r3, [sp, #32]
 800bbf6:	9d01      	ldr	r5, [sp, #4]
 800bbf8:	e004      	b.n	800bc04 <__gethex+0x94>
 800bbfa:	9b01      	ldr	r3, [sp, #4]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	e7ed      	b.n	800bbde <__gethex+0x6e>
 800bc02:	3501      	adds	r5, #1
 800bc04:	7828      	ldrb	r0, [r5, #0]
 800bc06:	f7ff ff9d 	bl	800bb44 <__hexdig_fun>
 800bc0a:	1e07      	subs	r7, r0, #0
 800bc0c:	d1f9      	bne.n	800bc02 <__gethex+0x92>
 800bc0e:	0028      	movs	r0, r5
 800bc10:	9a03      	ldr	r2, [sp, #12]
 800bc12:	9907      	ldr	r1, [sp, #28]
 800bc14:	f001 fd7c 	bl	800d710 <strncmp>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d112      	bne.n	800bc42 <__gethex+0xd2>
 800bc1c:	2c00      	cmp	r4, #0
 800bc1e:	d107      	bne.n	800bc30 <__gethex+0xc0>
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	18ed      	adds	r5, r5, r3
 800bc24:	002c      	movs	r4, r5
 800bc26:	7828      	ldrb	r0, [r5, #0]
 800bc28:	f7ff ff8c 	bl	800bb44 <__hexdig_fun>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d106      	bne.n	800bc3e <__gethex+0xce>
 800bc30:	1b67      	subs	r7, r4, r5
 800bc32:	00bf      	lsls	r7, r7, #2
 800bc34:	e007      	b.n	800bc46 <__gethex+0xd6>
 800bc36:	2300      	movs	r3, #0
 800bc38:	001c      	movs	r4, r3
 800bc3a:	9304      	str	r3, [sp, #16]
 800bc3c:	e7db      	b.n	800bbf6 <__gethex+0x86>
 800bc3e:	3501      	adds	r5, #1
 800bc40:	e7f1      	b.n	800bc26 <__gethex+0xb6>
 800bc42:	2c00      	cmp	r4, #0
 800bc44:	d1f4      	bne.n	800bc30 <__gethex+0xc0>
 800bc46:	2220      	movs	r2, #32
 800bc48:	782b      	ldrb	r3, [r5, #0]
 800bc4a:	002e      	movs	r6, r5
 800bc4c:	4393      	bics	r3, r2
 800bc4e:	2b50      	cmp	r3, #80	; 0x50
 800bc50:	d11d      	bne.n	800bc8e <__gethex+0x11e>
 800bc52:	786b      	ldrb	r3, [r5, #1]
 800bc54:	2b2b      	cmp	r3, #43	; 0x2b
 800bc56:	d02c      	beq.n	800bcb2 <__gethex+0x142>
 800bc58:	2b2d      	cmp	r3, #45	; 0x2d
 800bc5a:	d02e      	beq.n	800bcba <__gethex+0x14a>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	1c6e      	adds	r6, r5, #1
 800bc60:	9306      	str	r3, [sp, #24]
 800bc62:	7830      	ldrb	r0, [r6, #0]
 800bc64:	f7ff ff6e 	bl	800bb44 <__hexdig_fun>
 800bc68:	1e43      	subs	r3, r0, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b18      	cmp	r3, #24
 800bc6e:	d82b      	bhi.n	800bcc8 <__gethex+0x158>
 800bc70:	3810      	subs	r0, #16
 800bc72:	0004      	movs	r4, r0
 800bc74:	7870      	ldrb	r0, [r6, #1]
 800bc76:	f7ff ff65 	bl	800bb44 <__hexdig_fun>
 800bc7a:	1e43      	subs	r3, r0, #1
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	3601      	adds	r6, #1
 800bc80:	2b18      	cmp	r3, #24
 800bc82:	d91c      	bls.n	800bcbe <__gethex+0x14e>
 800bc84:	9b06      	ldr	r3, [sp, #24]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d000      	beq.n	800bc8c <__gethex+0x11c>
 800bc8a:	4264      	negs	r4, r4
 800bc8c:	193f      	adds	r7, r7, r4
 800bc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc90:	601e      	str	r6, [r3, #0]
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d019      	beq.n	800bccc <__gethex+0x15c>
 800bc98:	2600      	movs	r6, #0
 800bc9a:	9b08      	ldr	r3, [sp, #32]
 800bc9c:	42b3      	cmp	r3, r6
 800bc9e:	d100      	bne.n	800bca2 <__gethex+0x132>
 800bca0:	3606      	adds	r6, #6
 800bca2:	0030      	movs	r0, r6
 800bca4:	b00d      	add	sp, #52	; 0x34
 800bca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bca8:	2301      	movs	r3, #1
 800bcaa:	0027      	movs	r7, r4
 800bcac:	9d01      	ldr	r5, [sp, #4]
 800bcae:	9304      	str	r3, [sp, #16]
 800bcb0:	e7c9      	b.n	800bc46 <__gethex+0xd6>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9306      	str	r3, [sp, #24]
 800bcb6:	1cae      	adds	r6, r5, #2
 800bcb8:	e7d3      	b.n	800bc62 <__gethex+0xf2>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e7fa      	b.n	800bcb4 <__gethex+0x144>
 800bcbe:	230a      	movs	r3, #10
 800bcc0:	435c      	muls	r4, r3
 800bcc2:	1824      	adds	r4, r4, r0
 800bcc4:	3c10      	subs	r4, #16
 800bcc6:	e7d5      	b.n	800bc74 <__gethex+0x104>
 800bcc8:	002e      	movs	r6, r5
 800bcca:	e7e0      	b.n	800bc8e <__gethex+0x11e>
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	9904      	ldr	r1, [sp, #16]
 800bcd0:	1aeb      	subs	r3, r5, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	2b07      	cmp	r3, #7
 800bcd6:	dc0a      	bgt.n	800bcee <__gethex+0x17e>
 800bcd8:	9805      	ldr	r0, [sp, #20]
 800bcda:	f000 fa99 	bl	800c210 <_Balloc>
 800bcde:	1e04      	subs	r4, r0, #0
 800bce0:	d108      	bne.n	800bcf4 <__gethex+0x184>
 800bce2:	0002      	movs	r2, r0
 800bce4:	21de      	movs	r1, #222	; 0xde
 800bce6:	4b62      	ldr	r3, [pc, #392]	; (800be70 <__gethex+0x300>)
 800bce8:	4862      	ldr	r0, [pc, #392]	; (800be74 <__gethex+0x304>)
 800bcea:	f001 fdff 	bl	800d8ec <__assert_func>
 800bcee:	3101      	adds	r1, #1
 800bcf0:	105b      	asrs	r3, r3, #1
 800bcf2:	e7ef      	b.n	800bcd4 <__gethex+0x164>
 800bcf4:	0003      	movs	r3, r0
 800bcf6:	3314      	adds	r3, #20
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	001e      	movs	r6, r3
 800bd00:	9306      	str	r3, [sp, #24]
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	d340      	bcc.n	800bd8a <__gethex+0x21a>
 800bd08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bd0a:	9b04      	ldr	r3, [sp, #16]
 800bd0c:	c540      	stmia	r5!, {r6}
 800bd0e:	1aed      	subs	r5, r5, r3
 800bd10:	10ad      	asrs	r5, r5, #2
 800bd12:	0030      	movs	r0, r6
 800bd14:	6125      	str	r5, [r4, #16]
 800bd16:	f000 fb73 	bl	800c400 <__hi0bits>
 800bd1a:	9b02      	ldr	r3, [sp, #8]
 800bd1c:	016d      	lsls	r5, r5, #5
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	1a2e      	subs	r6, r5, r0
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	429e      	cmp	r6, r3
 800bd26:	dd5a      	ble.n	800bdde <__gethex+0x26e>
 800bd28:	1af6      	subs	r6, r6, r3
 800bd2a:	0031      	movs	r1, r6
 800bd2c:	0020      	movs	r0, r4
 800bd2e:	f000 ff16 	bl	800cb5e <__any_on>
 800bd32:	1e05      	subs	r5, r0, #0
 800bd34:	d016      	beq.n	800bd64 <__gethex+0x1f4>
 800bd36:	2501      	movs	r5, #1
 800bd38:	211f      	movs	r1, #31
 800bd3a:	0028      	movs	r0, r5
 800bd3c:	1e73      	subs	r3, r6, #1
 800bd3e:	4019      	ands	r1, r3
 800bd40:	4088      	lsls	r0, r1
 800bd42:	0001      	movs	r1, r0
 800bd44:	115a      	asrs	r2, r3, #5
 800bd46:	9804      	ldr	r0, [sp, #16]
 800bd48:	0092      	lsls	r2, r2, #2
 800bd4a:	5812      	ldr	r2, [r2, r0]
 800bd4c:	420a      	tst	r2, r1
 800bd4e:	d009      	beq.n	800bd64 <__gethex+0x1f4>
 800bd50:	42ab      	cmp	r3, r5
 800bd52:	dd06      	ble.n	800bd62 <__gethex+0x1f2>
 800bd54:	0020      	movs	r0, r4
 800bd56:	1eb1      	subs	r1, r6, #2
 800bd58:	f000 ff01 	bl	800cb5e <__any_on>
 800bd5c:	3502      	adds	r5, #2
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d100      	bne.n	800bd64 <__gethex+0x1f4>
 800bd62:	2502      	movs	r5, #2
 800bd64:	0031      	movs	r1, r6
 800bd66:	0020      	movs	r0, r4
 800bd68:	f7ff fe98 	bl	800ba9c <rshift>
 800bd6c:	19bf      	adds	r7, r7, r6
 800bd6e:	9b02      	ldr	r3, [sp, #8]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	42bb      	cmp	r3, r7
 800bd76:	da42      	bge.n	800bdfe <__gethex+0x28e>
 800bd78:	0021      	movs	r1, r4
 800bd7a:	9805      	ldr	r0, [sp, #20]
 800bd7c:	f000 fa8c 	bl	800c298 <_Bfree>
 800bd80:	2300      	movs	r3, #0
 800bd82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd84:	26a3      	movs	r6, #163	; 0xa3
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	e78b      	b.n	800bca2 <__gethex+0x132>
 800bd8a:	1e6b      	subs	r3, r5, #1
 800bd8c:	9308      	str	r3, [sp, #32]
 800bd8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d014      	beq.n	800bdc0 <__gethex+0x250>
 800bd96:	9b06      	ldr	r3, [sp, #24]
 800bd98:	2b20      	cmp	r3, #32
 800bd9a:	d104      	bne.n	800bda6 <__gethex+0x236>
 800bd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9e:	c340      	stmia	r3!, {r6}
 800bda0:	2600      	movs	r6, #0
 800bda2:	9309      	str	r3, [sp, #36]	; 0x24
 800bda4:	9606      	str	r6, [sp, #24]
 800bda6:	9b08      	ldr	r3, [sp, #32]
 800bda8:	7818      	ldrb	r0, [r3, #0]
 800bdaa:	f7ff fecb 	bl	800bb44 <__hexdig_fun>
 800bdae:	230f      	movs	r3, #15
 800bdb0:	4018      	ands	r0, r3
 800bdb2:	9b06      	ldr	r3, [sp, #24]
 800bdb4:	9d08      	ldr	r5, [sp, #32]
 800bdb6:	4098      	lsls	r0, r3
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4306      	orrs	r6, r0
 800bdbc:	9306      	str	r3, [sp, #24]
 800bdbe:	e7a0      	b.n	800bd02 <__gethex+0x192>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	9a03      	ldr	r2, [sp, #12]
 800bdc4:	1a9d      	subs	r5, r3, r2
 800bdc6:	9b08      	ldr	r3, [sp, #32]
 800bdc8:	195d      	adds	r5, r3, r5
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	429d      	cmp	r5, r3
 800bdce:	d3e2      	bcc.n	800bd96 <__gethex+0x226>
 800bdd0:	0028      	movs	r0, r5
 800bdd2:	9907      	ldr	r1, [sp, #28]
 800bdd4:	f001 fc9c 	bl	800d710 <strncmp>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d1dc      	bne.n	800bd96 <__gethex+0x226>
 800bddc:	e791      	b.n	800bd02 <__gethex+0x192>
 800bdde:	9b01      	ldr	r3, [sp, #4]
 800bde0:	2500      	movs	r5, #0
 800bde2:	429e      	cmp	r6, r3
 800bde4:	dac3      	bge.n	800bd6e <__gethex+0x1fe>
 800bde6:	1b9e      	subs	r6, r3, r6
 800bde8:	0021      	movs	r1, r4
 800bdea:	0032      	movs	r2, r6
 800bdec:	9805      	ldr	r0, [sp, #20]
 800bdee:	f000 fc71 	bl	800c6d4 <__lshift>
 800bdf2:	0003      	movs	r3, r0
 800bdf4:	3314      	adds	r3, #20
 800bdf6:	0004      	movs	r4, r0
 800bdf8:	1bbf      	subs	r7, r7, r6
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	e7b7      	b.n	800bd6e <__gethex+0x1fe>
 800bdfe:	9b02      	ldr	r3, [sp, #8]
 800be00:	685e      	ldr	r6, [r3, #4]
 800be02:	42be      	cmp	r6, r7
 800be04:	dd71      	ble.n	800beea <__gethex+0x37a>
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	1bf6      	subs	r6, r6, r7
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	dc38      	bgt.n	800be80 <__gethex+0x310>
 800be0e:	9b02      	ldr	r3, [sp, #8]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	2b02      	cmp	r3, #2
 800be14:	d026      	beq.n	800be64 <__gethex+0x2f4>
 800be16:	2b03      	cmp	r3, #3
 800be18:	d02e      	beq.n	800be78 <__gethex+0x308>
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d119      	bne.n	800be52 <__gethex+0x2e2>
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	42b3      	cmp	r3, r6
 800be22:	d116      	bne.n	800be52 <__gethex+0x2e2>
 800be24:	2b01      	cmp	r3, #1
 800be26:	d10d      	bne.n	800be44 <__gethex+0x2d4>
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	2662      	movs	r6, #98	; 0x62
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	2301      	movs	r3, #1
 800be38:	9a04      	ldr	r2, [sp, #16]
 800be3a:	6123      	str	r3, [r4, #16]
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be40:	601c      	str	r4, [r3, #0]
 800be42:	e72e      	b.n	800bca2 <__gethex+0x132>
 800be44:	9901      	ldr	r1, [sp, #4]
 800be46:	0020      	movs	r0, r4
 800be48:	3901      	subs	r1, #1
 800be4a:	f000 fe88 	bl	800cb5e <__any_on>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d1ea      	bne.n	800be28 <__gethex+0x2b8>
 800be52:	0021      	movs	r1, r4
 800be54:	9805      	ldr	r0, [sp, #20]
 800be56:	f000 fa1f 	bl	800c298 <_Bfree>
 800be5a:	2300      	movs	r3, #0
 800be5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be5e:	2650      	movs	r6, #80	; 0x50
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	e71e      	b.n	800bca2 <__gethex+0x132>
 800be64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1f3      	bne.n	800be52 <__gethex+0x2e2>
 800be6a:	e7dd      	b.n	800be28 <__gethex+0x2b8>
 800be6c:	0800e840 	.word	0x0800e840
 800be70:	0800e7c4 	.word	0x0800e7c4
 800be74:	0800e7d5 	.word	0x0800e7d5
 800be78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1d4      	bne.n	800be28 <__gethex+0x2b8>
 800be7e:	e7e8      	b.n	800be52 <__gethex+0x2e2>
 800be80:	1e77      	subs	r7, r6, #1
 800be82:	2d00      	cmp	r5, #0
 800be84:	d12f      	bne.n	800bee6 <__gethex+0x376>
 800be86:	2f00      	cmp	r7, #0
 800be88:	d004      	beq.n	800be94 <__gethex+0x324>
 800be8a:	0039      	movs	r1, r7
 800be8c:	0020      	movs	r0, r4
 800be8e:	f000 fe66 	bl	800cb5e <__any_on>
 800be92:	0005      	movs	r5, r0
 800be94:	231f      	movs	r3, #31
 800be96:	117a      	asrs	r2, r7, #5
 800be98:	401f      	ands	r7, r3
 800be9a:	3b1e      	subs	r3, #30
 800be9c:	40bb      	lsls	r3, r7
 800be9e:	9904      	ldr	r1, [sp, #16]
 800bea0:	0092      	lsls	r2, r2, #2
 800bea2:	5852      	ldr	r2, [r2, r1]
 800bea4:	421a      	tst	r2, r3
 800bea6:	d001      	beq.n	800beac <__gethex+0x33c>
 800bea8:	2302      	movs	r3, #2
 800beaa:	431d      	orrs	r5, r3
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	0031      	movs	r1, r6
 800beb0:	1b9b      	subs	r3, r3, r6
 800beb2:	2602      	movs	r6, #2
 800beb4:	0020      	movs	r0, r4
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	f7ff fdf0 	bl	800ba9c <rshift>
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	685f      	ldr	r7, [r3, #4]
 800bec0:	2d00      	cmp	r5, #0
 800bec2:	d041      	beq.n	800bf48 <__gethex+0x3d8>
 800bec4:	9b02      	ldr	r3, [sp, #8]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d010      	beq.n	800beee <__gethex+0x37e>
 800becc:	2b03      	cmp	r3, #3
 800bece:	d012      	beq.n	800bef6 <__gethex+0x386>
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d106      	bne.n	800bee2 <__gethex+0x372>
 800bed4:	07aa      	lsls	r2, r5, #30
 800bed6:	d504      	bpl.n	800bee2 <__gethex+0x372>
 800bed8:	9a04      	ldr	r2, [sp, #16]
 800beda:	6810      	ldr	r0, [r2, #0]
 800bedc:	4305      	orrs	r5, r0
 800bede:	421d      	tst	r5, r3
 800bee0:	d10c      	bne.n	800befc <__gethex+0x38c>
 800bee2:	2310      	movs	r3, #16
 800bee4:	e02f      	b.n	800bf46 <__gethex+0x3d6>
 800bee6:	2501      	movs	r5, #1
 800bee8:	e7d4      	b.n	800be94 <__gethex+0x324>
 800beea:	2601      	movs	r6, #1
 800beec:	e7e8      	b.n	800bec0 <__gethex+0x350>
 800beee:	2301      	movs	r3, #1
 800bef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bef2:	1a9b      	subs	r3, r3, r2
 800bef4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d0f2      	beq.n	800bee2 <__gethex+0x372>
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	2000      	movs	r0, #0
 800bf00:	9303      	str	r3, [sp, #12]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	0023      	movs	r3, r4
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	3314      	adds	r3, #20
 800bf0c:	1899      	adds	r1, r3, r2
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	1c55      	adds	r5, r2, #1
 800bf12:	d01e      	beq.n	800bf52 <__gethex+0x3e2>
 800bf14:	3201      	adds	r2, #1
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	0023      	movs	r3, r4
 800bf1a:	3314      	adds	r3, #20
 800bf1c:	2e02      	cmp	r6, #2
 800bf1e:	d140      	bne.n	800bfa2 <__gethex+0x432>
 800bf20:	9a02      	ldr	r2, [sp, #8]
 800bf22:	9901      	ldr	r1, [sp, #4]
 800bf24:	6812      	ldr	r2, [r2, #0]
 800bf26:	3a01      	subs	r2, #1
 800bf28:	428a      	cmp	r2, r1
 800bf2a:	d10b      	bne.n	800bf44 <__gethex+0x3d4>
 800bf2c:	114a      	asrs	r2, r1, #5
 800bf2e:	211f      	movs	r1, #31
 800bf30:	9801      	ldr	r0, [sp, #4]
 800bf32:	0092      	lsls	r2, r2, #2
 800bf34:	4001      	ands	r1, r0
 800bf36:	2001      	movs	r0, #1
 800bf38:	0005      	movs	r5, r0
 800bf3a:	408d      	lsls	r5, r1
 800bf3c:	58d3      	ldr	r3, [r2, r3]
 800bf3e:	422b      	tst	r3, r5
 800bf40:	d000      	beq.n	800bf44 <__gethex+0x3d4>
 800bf42:	2601      	movs	r6, #1
 800bf44:	2320      	movs	r3, #32
 800bf46:	431e      	orrs	r6, r3
 800bf48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf4a:	601c      	str	r4, [r3, #0]
 800bf4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf4e:	601f      	str	r7, [r3, #0]
 800bf50:	e6a7      	b.n	800bca2 <__gethex+0x132>
 800bf52:	c301      	stmia	r3!, {r0}
 800bf54:	4299      	cmp	r1, r3
 800bf56:	d8da      	bhi.n	800bf0e <__gethex+0x39e>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	68a2      	ldr	r2, [r4, #8]
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	db17      	blt.n	800bf90 <__gethex+0x420>
 800bf60:	6863      	ldr	r3, [r4, #4]
 800bf62:	9805      	ldr	r0, [sp, #20]
 800bf64:	1c59      	adds	r1, r3, #1
 800bf66:	f000 f953 	bl	800c210 <_Balloc>
 800bf6a:	1e05      	subs	r5, r0, #0
 800bf6c:	d103      	bne.n	800bf76 <__gethex+0x406>
 800bf6e:	0002      	movs	r2, r0
 800bf70:	2184      	movs	r1, #132	; 0x84
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <__gethex+0x474>)
 800bf74:	e6b8      	b.n	800bce8 <__gethex+0x178>
 800bf76:	0021      	movs	r1, r4
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	310c      	adds	r1, #12
 800bf7c:	1c9a      	adds	r2, r3, #2
 800bf7e:	0092      	lsls	r2, r2, #2
 800bf80:	300c      	adds	r0, #12
 800bf82:	f000 f93c 	bl	800c1fe <memcpy>
 800bf86:	0021      	movs	r1, r4
 800bf88:	9805      	ldr	r0, [sp, #20]
 800bf8a:	f000 f985 	bl	800c298 <_Bfree>
 800bf8e:	002c      	movs	r4, r5
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	1c5a      	adds	r2, r3, #1
 800bf94:	6122      	str	r2, [r4, #16]
 800bf96:	2201      	movs	r2, #1
 800bf98:	3304      	adds	r3, #4
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	18e3      	adds	r3, r4, r3
 800bf9e:	605a      	str	r2, [r3, #4]
 800bfa0:	e7ba      	b.n	800bf18 <__gethex+0x3a8>
 800bfa2:	6922      	ldr	r2, [r4, #16]
 800bfa4:	9903      	ldr	r1, [sp, #12]
 800bfa6:	428a      	cmp	r2, r1
 800bfa8:	dd09      	ble.n	800bfbe <__gethex+0x44e>
 800bfaa:	2101      	movs	r1, #1
 800bfac:	0020      	movs	r0, r4
 800bfae:	f7ff fd75 	bl	800ba9c <rshift>
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	3701      	adds	r7, #1
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	42bb      	cmp	r3, r7
 800bfba:	dac2      	bge.n	800bf42 <__gethex+0x3d2>
 800bfbc:	e6dc      	b.n	800bd78 <__gethex+0x208>
 800bfbe:	221f      	movs	r2, #31
 800bfc0:	9d01      	ldr	r5, [sp, #4]
 800bfc2:	9901      	ldr	r1, [sp, #4]
 800bfc4:	2601      	movs	r6, #1
 800bfc6:	4015      	ands	r5, r2
 800bfc8:	4211      	tst	r1, r2
 800bfca:	d0bb      	beq.n	800bf44 <__gethex+0x3d4>
 800bfcc:	9a04      	ldr	r2, [sp, #16]
 800bfce:	189b      	adds	r3, r3, r2
 800bfd0:	3b04      	subs	r3, #4
 800bfd2:	6818      	ldr	r0, [r3, #0]
 800bfd4:	f000 fa14 	bl	800c400 <__hi0bits>
 800bfd8:	2320      	movs	r3, #32
 800bfda:	1b5d      	subs	r5, r3, r5
 800bfdc:	42a8      	cmp	r0, r5
 800bfde:	dbe4      	blt.n	800bfaa <__gethex+0x43a>
 800bfe0:	e7b0      	b.n	800bf44 <__gethex+0x3d4>
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	0800e7c4 	.word	0x0800e7c4

0800bfe8 <L_shift>:
 800bfe8:	2308      	movs	r3, #8
 800bfea:	b570      	push	{r4, r5, r6, lr}
 800bfec:	2520      	movs	r5, #32
 800bfee:	1a9a      	subs	r2, r3, r2
 800bff0:	0092      	lsls	r2, r2, #2
 800bff2:	1aad      	subs	r5, r5, r2
 800bff4:	6843      	ldr	r3, [r0, #4]
 800bff6:	6806      	ldr	r6, [r0, #0]
 800bff8:	001c      	movs	r4, r3
 800bffa:	40ac      	lsls	r4, r5
 800bffc:	40d3      	lsrs	r3, r2
 800bffe:	4334      	orrs	r4, r6
 800c000:	6004      	str	r4, [r0, #0]
 800c002:	6043      	str	r3, [r0, #4]
 800c004:	3004      	adds	r0, #4
 800c006:	4288      	cmp	r0, r1
 800c008:	d3f4      	bcc.n	800bff4 <L_shift+0xc>
 800c00a:	bd70      	pop	{r4, r5, r6, pc}

0800c00c <__match>:
 800c00c:	b530      	push	{r4, r5, lr}
 800c00e:	6803      	ldr	r3, [r0, #0]
 800c010:	780c      	ldrb	r4, [r1, #0]
 800c012:	3301      	adds	r3, #1
 800c014:	2c00      	cmp	r4, #0
 800c016:	d102      	bne.n	800c01e <__match+0x12>
 800c018:	6003      	str	r3, [r0, #0]
 800c01a:	2001      	movs	r0, #1
 800c01c:	bd30      	pop	{r4, r5, pc}
 800c01e:	781a      	ldrb	r2, [r3, #0]
 800c020:	0015      	movs	r5, r2
 800c022:	3d41      	subs	r5, #65	; 0x41
 800c024:	2d19      	cmp	r5, #25
 800c026:	d800      	bhi.n	800c02a <__match+0x1e>
 800c028:	3220      	adds	r2, #32
 800c02a:	3101      	adds	r1, #1
 800c02c:	42a2      	cmp	r2, r4
 800c02e:	d0ef      	beq.n	800c010 <__match+0x4>
 800c030:	2000      	movs	r0, #0
 800c032:	e7f3      	b.n	800c01c <__match+0x10>

0800c034 <__hexnan>:
 800c034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c036:	680b      	ldr	r3, [r1, #0]
 800c038:	b08b      	sub	sp, #44	; 0x2c
 800c03a:	115c      	asrs	r4, r3, #5
 800c03c:	00a4      	lsls	r4, r4, #2
 800c03e:	9201      	str	r2, [sp, #4]
 800c040:	1912      	adds	r2, r2, r4
 800c042:	0019      	movs	r1, r3
 800c044:	9202      	str	r2, [sp, #8]
 800c046:	221f      	movs	r2, #31
 800c048:	4011      	ands	r1, r2
 800c04a:	9008      	str	r0, [sp, #32]
 800c04c:	9106      	str	r1, [sp, #24]
 800c04e:	4213      	tst	r3, r2
 800c050:	d002      	beq.n	800c058 <__hexnan+0x24>
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	3304      	adds	r3, #4
 800c056:	9302      	str	r3, [sp, #8]
 800c058:	9b02      	ldr	r3, [sp, #8]
 800c05a:	2500      	movs	r5, #0
 800c05c:	1f1e      	subs	r6, r3, #4
 800c05e:	0037      	movs	r7, r6
 800c060:	0034      	movs	r4, r6
 800c062:	9b08      	ldr	r3, [sp, #32]
 800c064:	6035      	str	r5, [r6, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	9507      	str	r5, [sp, #28]
 800c06a:	9305      	str	r3, [sp, #20]
 800c06c:	9503      	str	r5, [sp, #12]
 800c06e:	9b05      	ldr	r3, [sp, #20]
 800c070:	3301      	adds	r3, #1
 800c072:	9309      	str	r3, [sp, #36]	; 0x24
 800c074:	9b05      	ldr	r3, [sp, #20]
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d028      	beq.n	800c0d0 <__hexnan+0x9c>
 800c07e:	9804      	ldr	r0, [sp, #16]
 800c080:	f7ff fd60 	bl	800bb44 <__hexdig_fun>
 800c084:	2800      	cmp	r0, #0
 800c086:	d154      	bne.n	800c132 <__hexnan+0xfe>
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d819      	bhi.n	800c0c2 <__hexnan+0x8e>
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	9a07      	ldr	r2, [sp, #28]
 800c092:	4293      	cmp	r3, r2
 800c094:	dd12      	ble.n	800c0bc <__hexnan+0x88>
 800c096:	42bc      	cmp	r4, r7
 800c098:	d206      	bcs.n	800c0a8 <__hexnan+0x74>
 800c09a:	2d07      	cmp	r5, #7
 800c09c:	dc04      	bgt.n	800c0a8 <__hexnan+0x74>
 800c09e:	002a      	movs	r2, r5
 800c0a0:	0039      	movs	r1, r7
 800c0a2:	0020      	movs	r0, r4
 800c0a4:	f7ff ffa0 	bl	800bfe8 <L_shift>
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	2508      	movs	r5, #8
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	d905      	bls.n	800c0bc <__hexnan+0x88>
 800c0b0:	1f27      	subs	r7, r4, #4
 800c0b2:	2500      	movs	r5, #0
 800c0b4:	003c      	movs	r4, r7
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	603d      	str	r5, [r7, #0]
 800c0ba:	9307      	str	r3, [sp, #28]
 800c0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0be:	9305      	str	r3, [sp, #20]
 800c0c0:	e7d5      	b.n	800c06e <__hexnan+0x3a>
 800c0c2:	9b04      	ldr	r3, [sp, #16]
 800c0c4:	2b29      	cmp	r3, #41	; 0x29
 800c0c6:	d158      	bne.n	800c17a <__hexnan+0x146>
 800c0c8:	9b05      	ldr	r3, [sp, #20]
 800c0ca:	9a08      	ldr	r2, [sp, #32]
 800c0cc:	3302      	adds	r3, #2
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	9b03      	ldr	r3, [sp, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d051      	beq.n	800c17a <__hexnan+0x146>
 800c0d6:	42bc      	cmp	r4, r7
 800c0d8:	d206      	bcs.n	800c0e8 <__hexnan+0xb4>
 800c0da:	2d07      	cmp	r5, #7
 800c0dc:	dc04      	bgt.n	800c0e8 <__hexnan+0xb4>
 800c0de:	002a      	movs	r2, r5
 800c0e0:	0039      	movs	r1, r7
 800c0e2:	0020      	movs	r0, r4
 800c0e4:	f7ff ff80 	bl	800bfe8 <L_shift>
 800c0e8:	9b01      	ldr	r3, [sp, #4]
 800c0ea:	429c      	cmp	r4, r3
 800c0ec:	d935      	bls.n	800c15a <__hexnan+0x126>
 800c0ee:	001a      	movs	r2, r3
 800c0f0:	0023      	movs	r3, r4
 800c0f2:	cb02      	ldmia	r3!, {r1}
 800c0f4:	c202      	stmia	r2!, {r1}
 800c0f6:	429e      	cmp	r6, r3
 800c0f8:	d2fb      	bcs.n	800c0f2 <__hexnan+0xbe>
 800c0fa:	9b02      	ldr	r3, [sp, #8]
 800c0fc:	1c61      	adds	r1, r4, #1
 800c0fe:	1eda      	subs	r2, r3, #3
 800c100:	2304      	movs	r3, #4
 800c102:	4291      	cmp	r1, r2
 800c104:	d805      	bhi.n	800c112 <__hexnan+0xde>
 800c106:	9b02      	ldr	r3, [sp, #8]
 800c108:	3b04      	subs	r3, #4
 800c10a:	1b1c      	subs	r4, r3, r4
 800c10c:	08a4      	lsrs	r4, r4, #2
 800c10e:	3401      	adds	r4, #1
 800c110:	00a3      	lsls	r3, r4, #2
 800c112:	9a01      	ldr	r2, [sp, #4]
 800c114:	18d4      	adds	r4, r2, r3
 800c116:	2300      	movs	r3, #0
 800c118:	c408      	stmia	r4!, {r3}
 800c11a:	42a6      	cmp	r6, r4
 800c11c:	d2fc      	bcs.n	800c118 <__hexnan+0xe4>
 800c11e:	6833      	ldr	r3, [r6, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d104      	bne.n	800c12e <__hexnan+0xfa>
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	429e      	cmp	r6, r3
 800c128:	d125      	bne.n	800c176 <__hexnan+0x142>
 800c12a:	2301      	movs	r3, #1
 800c12c:	6033      	str	r3, [r6, #0]
 800c12e:	2005      	movs	r0, #5
 800c130:	e024      	b.n	800c17c <__hexnan+0x148>
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	3501      	adds	r5, #1
 800c136:	3301      	adds	r3, #1
 800c138:	9303      	str	r3, [sp, #12]
 800c13a:	2d08      	cmp	r5, #8
 800c13c:	dd06      	ble.n	800c14c <__hexnan+0x118>
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	429c      	cmp	r4, r3
 800c142:	d9bb      	bls.n	800c0bc <__hexnan+0x88>
 800c144:	2300      	movs	r3, #0
 800c146:	2501      	movs	r5, #1
 800c148:	3c04      	subs	r4, #4
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	220f      	movs	r2, #15
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	4010      	ands	r0, r2
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	4318      	orrs	r0, r3
 800c156:	6020      	str	r0, [r4, #0]
 800c158:	e7b0      	b.n	800c0bc <__hexnan+0x88>
 800c15a:	9b06      	ldr	r3, [sp, #24]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0de      	beq.n	800c11e <__hexnan+0xea>
 800c160:	2220      	movs	r2, #32
 800c162:	1ad2      	subs	r2, r2, r3
 800c164:	2301      	movs	r3, #1
 800c166:	425b      	negs	r3, r3
 800c168:	40d3      	lsrs	r3, r2
 800c16a:	9c02      	ldr	r4, [sp, #8]
 800c16c:	3c04      	subs	r4, #4
 800c16e:	6822      	ldr	r2, [r4, #0]
 800c170:	4013      	ands	r3, r2
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	e7d3      	b.n	800c11e <__hexnan+0xea>
 800c176:	3e04      	subs	r6, #4
 800c178:	e7d1      	b.n	800c11e <__hexnan+0xea>
 800c17a:	2004      	movs	r0, #4
 800c17c:	b00b      	add	sp, #44	; 0x2c
 800c17e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c180 <_localeconv_r>:
 800c180:	4800      	ldr	r0, [pc, #0]	; (800c184 <_localeconv_r+0x4>)
 800c182:	4770      	bx	lr
 800c184:	20000164 	.word	0x20000164

0800c188 <_lseek_r>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	0004      	movs	r4, r0
 800c18c:	0008      	movs	r0, r1
 800c18e:	0011      	movs	r1, r2
 800c190:	001a      	movs	r2, r3
 800c192:	2300      	movs	r3, #0
 800c194:	4d05      	ldr	r5, [pc, #20]	; (800c1ac <_lseek_r+0x24>)
 800c196:	602b      	str	r3, [r5, #0]
 800c198:	f7f8 fda0 	bl	8004cdc <_lseek>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d103      	bne.n	800c1a8 <_lseek_r+0x20>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d000      	beq.n	800c1a8 <_lseek_r+0x20>
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	bd70      	pop	{r4, r5, r6, pc}
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	20000614 	.word	0x20000614

0800c1b0 <malloc>:
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	4b03      	ldr	r3, [pc, #12]	; (800c1c0 <malloc+0x10>)
 800c1b4:	0001      	movs	r1, r0
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	f000 fd4c 	bl	800cc54 <_malloc_r>
 800c1bc:	bd10      	pop	{r4, pc}
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	2000000c 	.word	0x2000000c

0800c1c4 <__ascii_mbtowc>:
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	2900      	cmp	r1, #0
 800c1c8:	d100      	bne.n	800c1cc <__ascii_mbtowc+0x8>
 800c1ca:	a901      	add	r1, sp, #4
 800c1cc:	1e10      	subs	r0, r2, #0
 800c1ce:	d006      	beq.n	800c1de <__ascii_mbtowc+0x1a>
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <__ascii_mbtowc+0x1e>
 800c1d4:	7813      	ldrb	r3, [r2, #0]
 800c1d6:	600b      	str	r3, [r1, #0]
 800c1d8:	7810      	ldrb	r0, [r2, #0]
 800c1da:	1e43      	subs	r3, r0, #1
 800c1dc:	4198      	sbcs	r0, r3
 800c1de:	b002      	add	sp, #8
 800c1e0:	4770      	bx	lr
 800c1e2:	2002      	movs	r0, #2
 800c1e4:	4240      	negs	r0, r0
 800c1e6:	e7fa      	b.n	800c1de <__ascii_mbtowc+0x1a>

0800c1e8 <memchr>:
 800c1e8:	b2c9      	uxtb	r1, r1
 800c1ea:	1882      	adds	r2, r0, r2
 800c1ec:	4290      	cmp	r0, r2
 800c1ee:	d101      	bne.n	800c1f4 <memchr+0xc>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	4770      	bx	lr
 800c1f4:	7803      	ldrb	r3, [r0, #0]
 800c1f6:	428b      	cmp	r3, r1
 800c1f8:	d0fb      	beq.n	800c1f2 <memchr+0xa>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	e7f6      	b.n	800c1ec <memchr+0x4>

0800c1fe <memcpy>:
 800c1fe:	2300      	movs	r3, #0
 800c200:	b510      	push	{r4, lr}
 800c202:	429a      	cmp	r2, r3
 800c204:	d100      	bne.n	800c208 <memcpy+0xa>
 800c206:	bd10      	pop	{r4, pc}
 800c208:	5ccc      	ldrb	r4, [r1, r3]
 800c20a:	54c4      	strb	r4, [r0, r3]
 800c20c:	3301      	adds	r3, #1
 800c20e:	e7f8      	b.n	800c202 <memcpy+0x4>

0800c210 <_Balloc>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c214:	0006      	movs	r6, r0
 800c216:	000c      	movs	r4, r1
 800c218:	2d00      	cmp	r5, #0
 800c21a:	d10e      	bne.n	800c23a <_Balloc+0x2a>
 800c21c:	2010      	movs	r0, #16
 800c21e:	f7ff ffc7 	bl	800c1b0 <malloc>
 800c222:	1e02      	subs	r2, r0, #0
 800c224:	6270      	str	r0, [r6, #36]	; 0x24
 800c226:	d104      	bne.n	800c232 <_Balloc+0x22>
 800c228:	2166      	movs	r1, #102	; 0x66
 800c22a:	4b19      	ldr	r3, [pc, #100]	; (800c290 <_Balloc+0x80>)
 800c22c:	4819      	ldr	r0, [pc, #100]	; (800c294 <_Balloc+0x84>)
 800c22e:	f001 fb5d 	bl	800d8ec <__assert_func>
 800c232:	6045      	str	r5, [r0, #4]
 800c234:	6085      	str	r5, [r0, #8]
 800c236:	6005      	str	r5, [r0, #0]
 800c238:	60c5      	str	r5, [r0, #12]
 800c23a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c23c:	68eb      	ldr	r3, [r5, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d013      	beq.n	800c26a <_Balloc+0x5a>
 800c242:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c244:	00a2      	lsls	r2, r4, #2
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	189b      	adds	r3, r3, r2
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d118      	bne.n	800c282 <_Balloc+0x72>
 800c250:	2101      	movs	r1, #1
 800c252:	000d      	movs	r5, r1
 800c254:	40a5      	lsls	r5, r4
 800c256:	1d6a      	adds	r2, r5, #5
 800c258:	0030      	movs	r0, r6
 800c25a:	0092      	lsls	r2, r2, #2
 800c25c:	f000 fca2 	bl	800cba4 <_calloc_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	d00c      	beq.n	800c27e <_Balloc+0x6e>
 800c264:	6044      	str	r4, [r0, #4]
 800c266:	6085      	str	r5, [r0, #8]
 800c268:	e00d      	b.n	800c286 <_Balloc+0x76>
 800c26a:	2221      	movs	r2, #33	; 0x21
 800c26c:	2104      	movs	r1, #4
 800c26e:	0030      	movs	r0, r6
 800c270:	f000 fc98 	bl	800cba4 <_calloc_r>
 800c274:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c276:	60e8      	str	r0, [r5, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e1      	bne.n	800c242 <_Balloc+0x32>
 800c27e:	2000      	movs	r0, #0
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	6802      	ldr	r2, [r0, #0]
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	2300      	movs	r3, #0
 800c288:	6103      	str	r3, [r0, #16]
 800c28a:	60c3      	str	r3, [r0, #12]
 800c28c:	e7f8      	b.n	800c280 <_Balloc+0x70>
 800c28e:	46c0      	nop			; (mov r8, r8)
 800c290:	0800e74e 	.word	0x0800e74e
 800c294:	0800e854 	.word	0x0800e854

0800c298 <_Bfree>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c29c:	0005      	movs	r5, r0
 800c29e:	000c      	movs	r4, r1
 800c2a0:	2e00      	cmp	r6, #0
 800c2a2:	d10e      	bne.n	800c2c2 <_Bfree+0x2a>
 800c2a4:	2010      	movs	r0, #16
 800c2a6:	f7ff ff83 	bl	800c1b0 <malloc>
 800c2aa:	1e02      	subs	r2, r0, #0
 800c2ac:	6268      	str	r0, [r5, #36]	; 0x24
 800c2ae:	d104      	bne.n	800c2ba <_Bfree+0x22>
 800c2b0:	218a      	movs	r1, #138	; 0x8a
 800c2b2:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <_Bfree+0x40>)
 800c2b4:	4809      	ldr	r0, [pc, #36]	; (800c2dc <_Bfree+0x44>)
 800c2b6:	f001 fb19 	bl	800d8ec <__assert_func>
 800c2ba:	6046      	str	r6, [r0, #4]
 800c2bc:	6086      	str	r6, [r0, #8]
 800c2be:	6006      	str	r6, [r0, #0]
 800c2c0:	60c6      	str	r6, [r0, #12]
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	d007      	beq.n	800c2d6 <_Bfree+0x3e>
 800c2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c2c8:	6862      	ldr	r2, [r4, #4]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	0092      	lsls	r2, r2, #2
 800c2ce:	189b      	adds	r3, r3, r2
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	6022      	str	r2, [r4, #0]
 800c2d4:	601c      	str	r4, [r3, #0]
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	0800e74e 	.word	0x0800e74e
 800c2dc:	0800e854 	.word	0x0800e854

0800c2e0 <__multadd>:
 800c2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e2:	000e      	movs	r6, r1
 800c2e4:	9001      	str	r0, [sp, #4]
 800c2e6:	000c      	movs	r4, r1
 800c2e8:	001d      	movs	r5, r3
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	690f      	ldr	r7, [r1, #16]
 800c2ee:	3614      	adds	r6, #20
 800c2f0:	6833      	ldr	r3, [r6, #0]
 800c2f2:	3001      	adds	r0, #1
 800c2f4:	b299      	uxth	r1, r3
 800c2f6:	4351      	muls	r1, r2
 800c2f8:	0c1b      	lsrs	r3, r3, #16
 800c2fa:	4353      	muls	r3, r2
 800c2fc:	1949      	adds	r1, r1, r5
 800c2fe:	0c0d      	lsrs	r5, r1, #16
 800c300:	195b      	adds	r3, r3, r5
 800c302:	0c1d      	lsrs	r5, r3, #16
 800c304:	b289      	uxth	r1, r1
 800c306:	041b      	lsls	r3, r3, #16
 800c308:	185b      	adds	r3, r3, r1
 800c30a:	c608      	stmia	r6!, {r3}
 800c30c:	4287      	cmp	r7, r0
 800c30e:	dcef      	bgt.n	800c2f0 <__multadd+0x10>
 800c310:	2d00      	cmp	r5, #0
 800c312:	d022      	beq.n	800c35a <__multadd+0x7a>
 800c314:	68a3      	ldr	r3, [r4, #8]
 800c316:	42bb      	cmp	r3, r7
 800c318:	dc19      	bgt.n	800c34e <__multadd+0x6e>
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	9801      	ldr	r0, [sp, #4]
 800c31e:	1c59      	adds	r1, r3, #1
 800c320:	f7ff ff76 	bl	800c210 <_Balloc>
 800c324:	1e06      	subs	r6, r0, #0
 800c326:	d105      	bne.n	800c334 <__multadd+0x54>
 800c328:	0002      	movs	r2, r0
 800c32a:	21b5      	movs	r1, #181	; 0xb5
 800c32c:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <__multadd+0x80>)
 800c32e:	480d      	ldr	r0, [pc, #52]	; (800c364 <__multadd+0x84>)
 800c330:	f001 fadc 	bl	800d8ec <__assert_func>
 800c334:	0021      	movs	r1, r4
 800c336:	6923      	ldr	r3, [r4, #16]
 800c338:	310c      	adds	r1, #12
 800c33a:	1c9a      	adds	r2, r3, #2
 800c33c:	0092      	lsls	r2, r2, #2
 800c33e:	300c      	adds	r0, #12
 800c340:	f7ff ff5d 	bl	800c1fe <memcpy>
 800c344:	0021      	movs	r1, r4
 800c346:	9801      	ldr	r0, [sp, #4]
 800c348:	f7ff ffa6 	bl	800c298 <_Bfree>
 800c34c:	0034      	movs	r4, r6
 800c34e:	1d3b      	adds	r3, r7, #4
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	18e3      	adds	r3, r4, r3
 800c354:	605d      	str	r5, [r3, #4]
 800c356:	1c7b      	adds	r3, r7, #1
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	0020      	movs	r0, r4
 800c35c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	0800e7c4 	.word	0x0800e7c4
 800c364:	0800e854 	.word	0x0800e854

0800c368 <__s2b>:
 800c368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c36a:	0006      	movs	r6, r0
 800c36c:	0018      	movs	r0, r3
 800c36e:	000c      	movs	r4, r1
 800c370:	3008      	adds	r0, #8
 800c372:	2109      	movs	r1, #9
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	0015      	movs	r5, r2
 800c378:	f7f3 ff76 	bl	8000268 <__divsi3>
 800c37c:	2301      	movs	r3, #1
 800c37e:	2100      	movs	r1, #0
 800c380:	4283      	cmp	r3, r0
 800c382:	db0a      	blt.n	800c39a <__s2b+0x32>
 800c384:	0030      	movs	r0, r6
 800c386:	f7ff ff43 	bl	800c210 <_Balloc>
 800c38a:	1e01      	subs	r1, r0, #0
 800c38c:	d108      	bne.n	800c3a0 <__s2b+0x38>
 800c38e:	0002      	movs	r2, r0
 800c390:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <__s2b+0x90>)
 800c392:	481a      	ldr	r0, [pc, #104]	; (800c3fc <__s2b+0x94>)
 800c394:	31ce      	adds	r1, #206	; 0xce
 800c396:	f001 faa9 	bl	800d8ec <__assert_func>
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	3101      	adds	r1, #1
 800c39e:	e7ef      	b.n	800c380 <__s2b+0x18>
 800c3a0:	9b08      	ldr	r3, [sp, #32]
 800c3a2:	6143      	str	r3, [r0, #20]
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	6103      	str	r3, [r0, #16]
 800c3a8:	2d09      	cmp	r5, #9
 800c3aa:	dd18      	ble.n	800c3de <__s2b+0x76>
 800c3ac:	0023      	movs	r3, r4
 800c3ae:	3309      	adds	r3, #9
 800c3b0:	001f      	movs	r7, r3
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	1964      	adds	r4, r4, r5
 800c3b6:	783b      	ldrb	r3, [r7, #0]
 800c3b8:	220a      	movs	r2, #10
 800c3ba:	0030      	movs	r0, r6
 800c3bc:	3b30      	subs	r3, #48	; 0x30
 800c3be:	f7ff ff8f 	bl	800c2e0 <__multadd>
 800c3c2:	3701      	adds	r7, #1
 800c3c4:	0001      	movs	r1, r0
 800c3c6:	42a7      	cmp	r7, r4
 800c3c8:	d1f5      	bne.n	800c3b6 <__s2b+0x4e>
 800c3ca:	002c      	movs	r4, r5
 800c3cc:	9b00      	ldr	r3, [sp, #0]
 800c3ce:	3c08      	subs	r4, #8
 800c3d0:	191c      	adds	r4, r3, r4
 800c3d2:	002f      	movs	r7, r5
 800c3d4:	9b01      	ldr	r3, [sp, #4]
 800c3d6:	429f      	cmp	r7, r3
 800c3d8:	db04      	blt.n	800c3e4 <__s2b+0x7c>
 800c3da:	0008      	movs	r0, r1
 800c3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3de:	2509      	movs	r5, #9
 800c3e0:	340a      	adds	r4, #10
 800c3e2:	e7f6      	b.n	800c3d2 <__s2b+0x6a>
 800c3e4:	1b63      	subs	r3, r4, r5
 800c3e6:	5ddb      	ldrb	r3, [r3, r7]
 800c3e8:	220a      	movs	r2, #10
 800c3ea:	0030      	movs	r0, r6
 800c3ec:	3b30      	subs	r3, #48	; 0x30
 800c3ee:	f7ff ff77 	bl	800c2e0 <__multadd>
 800c3f2:	3701      	adds	r7, #1
 800c3f4:	0001      	movs	r1, r0
 800c3f6:	e7ed      	b.n	800c3d4 <__s2b+0x6c>
 800c3f8:	0800e7c4 	.word	0x0800e7c4
 800c3fc:	0800e854 	.word	0x0800e854

0800c400 <__hi0bits>:
 800c400:	0003      	movs	r3, r0
 800c402:	0c02      	lsrs	r2, r0, #16
 800c404:	2000      	movs	r0, #0
 800c406:	4282      	cmp	r2, r0
 800c408:	d101      	bne.n	800c40e <__hi0bits+0xe>
 800c40a:	041b      	lsls	r3, r3, #16
 800c40c:	3010      	adds	r0, #16
 800c40e:	0e1a      	lsrs	r2, r3, #24
 800c410:	d101      	bne.n	800c416 <__hi0bits+0x16>
 800c412:	3008      	adds	r0, #8
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	0f1a      	lsrs	r2, r3, #28
 800c418:	d101      	bne.n	800c41e <__hi0bits+0x1e>
 800c41a:	3004      	adds	r0, #4
 800c41c:	011b      	lsls	r3, r3, #4
 800c41e:	0f9a      	lsrs	r2, r3, #30
 800c420:	d101      	bne.n	800c426 <__hi0bits+0x26>
 800c422:	3002      	adds	r0, #2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	2b00      	cmp	r3, #0
 800c428:	db03      	blt.n	800c432 <__hi0bits+0x32>
 800c42a:	3001      	adds	r0, #1
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	d400      	bmi.n	800c432 <__hi0bits+0x32>
 800c430:	2020      	movs	r0, #32
 800c432:	4770      	bx	lr

0800c434 <__lo0bits>:
 800c434:	6803      	ldr	r3, [r0, #0]
 800c436:	0002      	movs	r2, r0
 800c438:	2107      	movs	r1, #7
 800c43a:	0018      	movs	r0, r3
 800c43c:	4008      	ands	r0, r1
 800c43e:	420b      	tst	r3, r1
 800c440:	d00d      	beq.n	800c45e <__lo0bits+0x2a>
 800c442:	3906      	subs	r1, #6
 800c444:	2000      	movs	r0, #0
 800c446:	420b      	tst	r3, r1
 800c448:	d105      	bne.n	800c456 <__lo0bits+0x22>
 800c44a:	3002      	adds	r0, #2
 800c44c:	4203      	tst	r3, r0
 800c44e:	d003      	beq.n	800c458 <__lo0bits+0x24>
 800c450:	40cb      	lsrs	r3, r1
 800c452:	0008      	movs	r0, r1
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	4770      	bx	lr
 800c458:	089b      	lsrs	r3, r3, #2
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	e7fb      	b.n	800c456 <__lo0bits+0x22>
 800c45e:	b299      	uxth	r1, r3
 800c460:	2900      	cmp	r1, #0
 800c462:	d101      	bne.n	800c468 <__lo0bits+0x34>
 800c464:	2010      	movs	r0, #16
 800c466:	0c1b      	lsrs	r3, r3, #16
 800c468:	b2d9      	uxtb	r1, r3
 800c46a:	2900      	cmp	r1, #0
 800c46c:	d101      	bne.n	800c472 <__lo0bits+0x3e>
 800c46e:	3008      	adds	r0, #8
 800c470:	0a1b      	lsrs	r3, r3, #8
 800c472:	0719      	lsls	r1, r3, #28
 800c474:	d101      	bne.n	800c47a <__lo0bits+0x46>
 800c476:	3004      	adds	r0, #4
 800c478:	091b      	lsrs	r3, r3, #4
 800c47a:	0799      	lsls	r1, r3, #30
 800c47c:	d101      	bne.n	800c482 <__lo0bits+0x4e>
 800c47e:	3002      	adds	r0, #2
 800c480:	089b      	lsrs	r3, r3, #2
 800c482:	07d9      	lsls	r1, r3, #31
 800c484:	d4e9      	bmi.n	800c45a <__lo0bits+0x26>
 800c486:	3001      	adds	r0, #1
 800c488:	085b      	lsrs	r3, r3, #1
 800c48a:	d1e6      	bne.n	800c45a <__lo0bits+0x26>
 800c48c:	2020      	movs	r0, #32
 800c48e:	e7e2      	b.n	800c456 <__lo0bits+0x22>

0800c490 <__i2b>:
 800c490:	b510      	push	{r4, lr}
 800c492:	000c      	movs	r4, r1
 800c494:	2101      	movs	r1, #1
 800c496:	f7ff febb 	bl	800c210 <_Balloc>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d106      	bne.n	800c4ac <__i2b+0x1c>
 800c49e:	21a0      	movs	r1, #160	; 0xa0
 800c4a0:	0002      	movs	r2, r0
 800c4a2:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <__i2b+0x24>)
 800c4a4:	4804      	ldr	r0, [pc, #16]	; (800c4b8 <__i2b+0x28>)
 800c4a6:	0049      	lsls	r1, r1, #1
 800c4a8:	f001 fa20 	bl	800d8ec <__assert_func>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	6144      	str	r4, [r0, #20]
 800c4b0:	6103      	str	r3, [r0, #16]
 800c4b2:	bd10      	pop	{r4, pc}
 800c4b4:	0800e7c4 	.word	0x0800e7c4
 800c4b8:	0800e854 	.word	0x0800e854

0800c4bc <__multiply>:
 800c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4be:	690b      	ldr	r3, [r1, #16]
 800c4c0:	0014      	movs	r4, r2
 800c4c2:	6912      	ldr	r2, [r2, #16]
 800c4c4:	000d      	movs	r5, r1
 800c4c6:	b089      	sub	sp, #36	; 0x24
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	da01      	bge.n	800c4d0 <__multiply+0x14>
 800c4cc:	0025      	movs	r5, r4
 800c4ce:	000c      	movs	r4, r1
 800c4d0:	692f      	ldr	r7, [r5, #16]
 800c4d2:	6926      	ldr	r6, [r4, #16]
 800c4d4:	6869      	ldr	r1, [r5, #4]
 800c4d6:	19bb      	adds	r3, r7, r6
 800c4d8:	9302      	str	r3, [sp, #8]
 800c4da:	68ab      	ldr	r3, [r5, #8]
 800c4dc:	19ba      	adds	r2, r7, r6
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	da00      	bge.n	800c4e4 <__multiply+0x28>
 800c4e2:	3101      	adds	r1, #1
 800c4e4:	f7ff fe94 	bl	800c210 <_Balloc>
 800c4e8:	9001      	str	r0, [sp, #4]
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d106      	bne.n	800c4fc <__multiply+0x40>
 800c4ee:	215e      	movs	r1, #94	; 0x5e
 800c4f0:	0002      	movs	r2, r0
 800c4f2:	4b48      	ldr	r3, [pc, #288]	; (800c614 <__multiply+0x158>)
 800c4f4:	4848      	ldr	r0, [pc, #288]	; (800c618 <__multiply+0x15c>)
 800c4f6:	31ff      	adds	r1, #255	; 0xff
 800c4f8:	f001 f9f8 	bl	800d8ec <__assert_func>
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	3314      	adds	r3, #20
 800c502:	469c      	mov	ip, r3
 800c504:	19bb      	adds	r3, r7, r6
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4463      	add	r3, ip
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	4663      	mov	r3, ip
 800c50e:	9903      	ldr	r1, [sp, #12]
 800c510:	428b      	cmp	r3, r1
 800c512:	d32c      	bcc.n	800c56e <__multiply+0xb2>
 800c514:	002b      	movs	r3, r5
 800c516:	0022      	movs	r2, r4
 800c518:	3314      	adds	r3, #20
 800c51a:	00bf      	lsls	r7, r7, #2
 800c51c:	3214      	adds	r2, #20
 800c51e:	9306      	str	r3, [sp, #24]
 800c520:	00b6      	lsls	r6, r6, #2
 800c522:	19db      	adds	r3, r3, r7
 800c524:	9304      	str	r3, [sp, #16]
 800c526:	1993      	adds	r3, r2, r6
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	2304      	movs	r3, #4
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	002b      	movs	r3, r5
 800c530:	9904      	ldr	r1, [sp, #16]
 800c532:	3315      	adds	r3, #21
 800c534:	9200      	str	r2, [sp, #0]
 800c536:	4299      	cmp	r1, r3
 800c538:	d305      	bcc.n	800c546 <__multiply+0x8a>
 800c53a:	1b4b      	subs	r3, r1, r5
 800c53c:	3b15      	subs	r3, #21
 800c53e:	089b      	lsrs	r3, r3, #2
 800c540:	3301      	adds	r3, #1
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	9305      	str	r3, [sp, #20]
 800c546:	9b07      	ldr	r3, [sp, #28]
 800c548:	9a00      	ldr	r2, [sp, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d311      	bcc.n	800c572 <__multiply+0xb6>
 800c54e:	9b02      	ldr	r3, [sp, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	dd06      	ble.n	800c562 <__multiply+0xa6>
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	3b04      	subs	r3, #4
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d054      	beq.n	800c60c <__multiply+0x150>
 800c562:	9b01      	ldr	r3, [sp, #4]
 800c564:	9a02      	ldr	r2, [sp, #8]
 800c566:	0018      	movs	r0, r3
 800c568:	611a      	str	r2, [r3, #16]
 800c56a:	b009      	add	sp, #36	; 0x24
 800c56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56e:	c304      	stmia	r3!, {r2}
 800c570:	e7cd      	b.n	800c50e <__multiply+0x52>
 800c572:	9b00      	ldr	r3, [sp, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	b298      	uxth	r0, r3
 800c578:	2800      	cmp	r0, #0
 800c57a:	d01c      	beq.n	800c5b6 <__multiply+0xfa>
 800c57c:	4667      	mov	r7, ip
 800c57e:	2400      	movs	r4, #0
 800c580:	9e06      	ldr	r6, [sp, #24]
 800c582:	ce02      	ldmia	r6!, {r1}
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	b28b      	uxth	r3, r1
 800c588:	4343      	muls	r3, r0
 800c58a:	0c09      	lsrs	r1, r1, #16
 800c58c:	4341      	muls	r1, r0
 800c58e:	b292      	uxth	r2, r2
 800c590:	189b      	adds	r3, r3, r2
 800c592:	191b      	adds	r3, r3, r4
 800c594:	000c      	movs	r4, r1
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	0c11      	lsrs	r1, r2, #16
 800c59a:	1861      	adds	r1, r4, r1
 800c59c:	0c1c      	lsrs	r4, r3, #16
 800c59e:	1909      	adds	r1, r1, r4
 800c5a0:	0c0c      	lsrs	r4, r1, #16
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	0409      	lsls	r1, r1, #16
 800c5a6:	430b      	orrs	r3, r1
 800c5a8:	c708      	stmia	r7!, {r3}
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	42b3      	cmp	r3, r6
 800c5ae:	d8e8      	bhi.n	800c582 <__multiply+0xc6>
 800c5b0:	4663      	mov	r3, ip
 800c5b2:	9a05      	ldr	r2, [sp, #20]
 800c5b4:	509c      	str	r4, [r3, r2]
 800c5b6:	9b00      	ldr	r3, [sp, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	0c1e      	lsrs	r6, r3, #16
 800c5bc:	d020      	beq.n	800c600 <__multiply+0x144>
 800c5be:	4663      	mov	r3, ip
 800c5c0:	002c      	movs	r4, r5
 800c5c2:	4660      	mov	r0, ip
 800c5c4:	2700      	movs	r7, #0
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3414      	adds	r4, #20
 800c5ca:	6822      	ldr	r2, [r4, #0]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	b291      	uxth	r1, r2
 800c5d0:	4371      	muls	r1, r6
 800c5d2:	6802      	ldr	r2, [r0, #0]
 800c5d4:	0c12      	lsrs	r2, r2, #16
 800c5d6:	1889      	adds	r1, r1, r2
 800c5d8:	19cf      	adds	r7, r1, r7
 800c5da:	0439      	lsls	r1, r7, #16
 800c5dc:	430b      	orrs	r3, r1
 800c5de:	6003      	str	r3, [r0, #0]
 800c5e0:	cc02      	ldmia	r4!, {r1}
 800c5e2:	6843      	ldr	r3, [r0, #4]
 800c5e4:	0c09      	lsrs	r1, r1, #16
 800c5e6:	4371      	muls	r1, r6
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	0c3f      	lsrs	r7, r7, #16
 800c5ec:	18cb      	adds	r3, r1, r3
 800c5ee:	9a04      	ldr	r2, [sp, #16]
 800c5f0:	19db      	adds	r3, r3, r7
 800c5f2:	0c1f      	lsrs	r7, r3, #16
 800c5f4:	3004      	adds	r0, #4
 800c5f6:	42a2      	cmp	r2, r4
 800c5f8:	d8e7      	bhi.n	800c5ca <__multiply+0x10e>
 800c5fa:	4662      	mov	r2, ip
 800c5fc:	9905      	ldr	r1, [sp, #20]
 800c5fe:	5053      	str	r3, [r2, r1]
 800c600:	9b00      	ldr	r3, [sp, #0]
 800c602:	3304      	adds	r3, #4
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	2304      	movs	r3, #4
 800c608:	449c      	add	ip, r3
 800c60a:	e79c      	b.n	800c546 <__multiply+0x8a>
 800c60c:	9b02      	ldr	r3, [sp, #8]
 800c60e:	3b01      	subs	r3, #1
 800c610:	9302      	str	r3, [sp, #8]
 800c612:	e79c      	b.n	800c54e <__multiply+0x92>
 800c614:	0800e7c4 	.word	0x0800e7c4
 800c618:	0800e854 	.word	0x0800e854

0800c61c <__pow5mult>:
 800c61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c61e:	2303      	movs	r3, #3
 800c620:	0015      	movs	r5, r2
 800c622:	0007      	movs	r7, r0
 800c624:	000e      	movs	r6, r1
 800c626:	401a      	ands	r2, r3
 800c628:	421d      	tst	r5, r3
 800c62a:	d008      	beq.n	800c63e <__pow5mult+0x22>
 800c62c:	4925      	ldr	r1, [pc, #148]	; (800c6c4 <__pow5mult+0xa8>)
 800c62e:	3a01      	subs	r2, #1
 800c630:	0092      	lsls	r2, r2, #2
 800c632:	5852      	ldr	r2, [r2, r1]
 800c634:	2300      	movs	r3, #0
 800c636:	0031      	movs	r1, r6
 800c638:	f7ff fe52 	bl	800c2e0 <__multadd>
 800c63c:	0006      	movs	r6, r0
 800c63e:	10ad      	asrs	r5, r5, #2
 800c640:	d03d      	beq.n	800c6be <__pow5mult+0xa2>
 800c642:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c644:	2c00      	cmp	r4, #0
 800c646:	d10f      	bne.n	800c668 <__pow5mult+0x4c>
 800c648:	2010      	movs	r0, #16
 800c64a:	f7ff fdb1 	bl	800c1b0 <malloc>
 800c64e:	1e02      	subs	r2, r0, #0
 800c650:	6278      	str	r0, [r7, #36]	; 0x24
 800c652:	d105      	bne.n	800c660 <__pow5mult+0x44>
 800c654:	21d7      	movs	r1, #215	; 0xd7
 800c656:	4b1c      	ldr	r3, [pc, #112]	; (800c6c8 <__pow5mult+0xac>)
 800c658:	481c      	ldr	r0, [pc, #112]	; (800c6cc <__pow5mult+0xb0>)
 800c65a:	0049      	lsls	r1, r1, #1
 800c65c:	f001 f946 	bl	800d8ec <__assert_func>
 800c660:	6044      	str	r4, [r0, #4]
 800c662:	6084      	str	r4, [r0, #8]
 800c664:	6004      	str	r4, [r0, #0]
 800c666:	60c4      	str	r4, [r0, #12]
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	689c      	ldr	r4, [r3, #8]
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	2c00      	cmp	r4, #0
 800c670:	d108      	bne.n	800c684 <__pow5mult+0x68>
 800c672:	0038      	movs	r0, r7
 800c674:	4916      	ldr	r1, [pc, #88]	; (800c6d0 <__pow5mult+0xb4>)
 800c676:	f7ff ff0b 	bl	800c490 <__i2b>
 800c67a:	9b01      	ldr	r3, [sp, #4]
 800c67c:	0004      	movs	r4, r0
 800c67e:	6098      	str	r0, [r3, #8]
 800c680:	2300      	movs	r3, #0
 800c682:	6003      	str	r3, [r0, #0]
 800c684:	2301      	movs	r3, #1
 800c686:	421d      	tst	r5, r3
 800c688:	d00a      	beq.n	800c6a0 <__pow5mult+0x84>
 800c68a:	0031      	movs	r1, r6
 800c68c:	0022      	movs	r2, r4
 800c68e:	0038      	movs	r0, r7
 800c690:	f7ff ff14 	bl	800c4bc <__multiply>
 800c694:	0031      	movs	r1, r6
 800c696:	9001      	str	r0, [sp, #4]
 800c698:	0038      	movs	r0, r7
 800c69a:	f7ff fdfd 	bl	800c298 <_Bfree>
 800c69e:	9e01      	ldr	r6, [sp, #4]
 800c6a0:	106d      	asrs	r5, r5, #1
 800c6a2:	d00c      	beq.n	800c6be <__pow5mult+0xa2>
 800c6a4:	6820      	ldr	r0, [r4, #0]
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d107      	bne.n	800c6ba <__pow5mult+0x9e>
 800c6aa:	0022      	movs	r2, r4
 800c6ac:	0021      	movs	r1, r4
 800c6ae:	0038      	movs	r0, r7
 800c6b0:	f7ff ff04 	bl	800c4bc <__multiply>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	6020      	str	r0, [r4, #0]
 800c6b8:	6003      	str	r3, [r0, #0]
 800c6ba:	0004      	movs	r4, r0
 800c6bc:	e7e2      	b.n	800c684 <__pow5mult+0x68>
 800c6be:	0030      	movs	r0, r6
 800c6c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6c2:	46c0      	nop			; (mov r8, r8)
 800c6c4:	0800e9a8 	.word	0x0800e9a8
 800c6c8:	0800e74e 	.word	0x0800e74e
 800c6cc:	0800e854 	.word	0x0800e854
 800c6d0:	00000271 	.word	0x00000271

0800c6d4 <__lshift>:
 800c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6d6:	000c      	movs	r4, r1
 800c6d8:	0017      	movs	r7, r2
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	1155      	asrs	r5, r2, #5
 800c6de:	b087      	sub	sp, #28
 800c6e0:	18eb      	adds	r3, r5, r3
 800c6e2:	9302      	str	r3, [sp, #8]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	6849      	ldr	r1, [r1, #4]
 800c6ea:	68a3      	ldr	r3, [r4, #8]
 800c6ec:	9004      	str	r0, [sp, #16]
 800c6ee:	9a01      	ldr	r2, [sp, #4]
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	db11      	blt.n	800c718 <__lshift+0x44>
 800c6f4:	9804      	ldr	r0, [sp, #16]
 800c6f6:	f7ff fd8b 	bl	800c210 <_Balloc>
 800c6fa:	0002      	movs	r2, r0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	3214      	adds	r2, #20
 800c700:	0006      	movs	r6, r0
 800c702:	0011      	movs	r1, r2
 800c704:	9203      	str	r2, [sp, #12]
 800c706:	4298      	cmp	r0, r3
 800c708:	d10d      	bne.n	800c726 <__lshift+0x52>
 800c70a:	21da      	movs	r1, #218	; 0xda
 800c70c:	0002      	movs	r2, r0
 800c70e:	4b27      	ldr	r3, [pc, #156]	; (800c7ac <__lshift+0xd8>)
 800c710:	4827      	ldr	r0, [pc, #156]	; (800c7b0 <__lshift+0xdc>)
 800c712:	31ff      	adds	r1, #255	; 0xff
 800c714:	f001 f8ea 	bl	800d8ec <__assert_func>
 800c718:	3101      	adds	r1, #1
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	e7e7      	b.n	800c6ee <__lshift+0x1a>
 800c71e:	2200      	movs	r2, #0
 800c720:	0098      	lsls	r0, r3, #2
 800c722:	500a      	str	r2, [r1, r0]
 800c724:	3301      	adds	r3, #1
 800c726:	42ab      	cmp	r3, r5
 800c728:	dbf9      	blt.n	800c71e <__lshift+0x4a>
 800c72a:	43eb      	mvns	r3, r5
 800c72c:	17db      	asrs	r3, r3, #31
 800c72e:	401d      	ands	r5, r3
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	00ad      	lsls	r5, r5, #2
 800c734:	211f      	movs	r1, #31
 800c736:	0038      	movs	r0, r7
 800c738:	195d      	adds	r5, r3, r5
 800c73a:	0023      	movs	r3, r4
 800c73c:	6922      	ldr	r2, [r4, #16]
 800c73e:	3314      	adds	r3, #20
 800c740:	0092      	lsls	r2, r2, #2
 800c742:	4008      	ands	r0, r1
 800c744:	4684      	mov	ip, r0
 800c746:	189a      	adds	r2, r3, r2
 800c748:	420f      	tst	r7, r1
 800c74a:	d02a      	beq.n	800c7a2 <__lshift+0xce>
 800c74c:	3101      	adds	r1, #1
 800c74e:	1a09      	subs	r1, r1, r0
 800c750:	9105      	str	r1, [sp, #20]
 800c752:	2100      	movs	r1, #0
 800c754:	9503      	str	r5, [sp, #12]
 800c756:	4667      	mov	r7, ip
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	40b8      	lsls	r0, r7
 800c75c:	4301      	orrs	r1, r0
 800c75e:	9803      	ldr	r0, [sp, #12]
 800c760:	c002      	stmia	r0!, {r1}
 800c762:	cb02      	ldmia	r3!, {r1}
 800c764:	9003      	str	r0, [sp, #12]
 800c766:	9805      	ldr	r0, [sp, #20]
 800c768:	40c1      	lsrs	r1, r0
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d8f3      	bhi.n	800c756 <__lshift+0x82>
 800c76e:	0020      	movs	r0, r4
 800c770:	3015      	adds	r0, #21
 800c772:	2304      	movs	r3, #4
 800c774:	4282      	cmp	r2, r0
 800c776:	d304      	bcc.n	800c782 <__lshift+0xae>
 800c778:	1b13      	subs	r3, r2, r4
 800c77a:	3b15      	subs	r3, #21
 800c77c:	089b      	lsrs	r3, r3, #2
 800c77e:	3301      	adds	r3, #1
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	50e9      	str	r1, [r5, r3]
 800c784:	2900      	cmp	r1, #0
 800c786:	d002      	beq.n	800c78e <__lshift+0xba>
 800c788:	9b02      	ldr	r3, [sp, #8]
 800c78a:	3302      	adds	r3, #2
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	9b01      	ldr	r3, [sp, #4]
 800c790:	9804      	ldr	r0, [sp, #16]
 800c792:	3b01      	subs	r3, #1
 800c794:	0021      	movs	r1, r4
 800c796:	6133      	str	r3, [r6, #16]
 800c798:	f7ff fd7e 	bl	800c298 <_Bfree>
 800c79c:	0030      	movs	r0, r6
 800c79e:	b007      	add	sp, #28
 800c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a2:	cb02      	ldmia	r3!, {r1}
 800c7a4:	c502      	stmia	r5!, {r1}
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d8fb      	bhi.n	800c7a2 <__lshift+0xce>
 800c7aa:	e7f0      	b.n	800c78e <__lshift+0xba>
 800c7ac:	0800e7c4 	.word	0x0800e7c4
 800c7b0:	0800e854 	.word	0x0800e854

0800c7b4 <__mcmp>:
 800c7b4:	6902      	ldr	r2, [r0, #16]
 800c7b6:	690b      	ldr	r3, [r1, #16]
 800c7b8:	b530      	push	{r4, r5, lr}
 800c7ba:	0004      	movs	r4, r0
 800c7bc:	1ad0      	subs	r0, r2, r3
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d10d      	bne.n	800c7de <__mcmp+0x2a>
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	3414      	adds	r4, #20
 800c7c6:	3114      	adds	r1, #20
 800c7c8:	18e2      	adds	r2, r4, r3
 800c7ca:	18c9      	adds	r1, r1, r3
 800c7cc:	3a04      	subs	r2, #4
 800c7ce:	3904      	subs	r1, #4
 800c7d0:	6815      	ldr	r5, [r2, #0]
 800c7d2:	680b      	ldr	r3, [r1, #0]
 800c7d4:	429d      	cmp	r5, r3
 800c7d6:	d003      	beq.n	800c7e0 <__mcmp+0x2c>
 800c7d8:	2001      	movs	r0, #1
 800c7da:	429d      	cmp	r5, r3
 800c7dc:	d303      	bcc.n	800c7e6 <__mcmp+0x32>
 800c7de:	bd30      	pop	{r4, r5, pc}
 800c7e0:	4294      	cmp	r4, r2
 800c7e2:	d3f3      	bcc.n	800c7cc <__mcmp+0x18>
 800c7e4:	e7fb      	b.n	800c7de <__mcmp+0x2a>
 800c7e6:	4240      	negs	r0, r0
 800c7e8:	e7f9      	b.n	800c7de <__mcmp+0x2a>
	...

0800c7ec <__mdiff>:
 800c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ee:	000e      	movs	r6, r1
 800c7f0:	0007      	movs	r7, r0
 800c7f2:	0011      	movs	r1, r2
 800c7f4:	0030      	movs	r0, r6
 800c7f6:	b087      	sub	sp, #28
 800c7f8:	0014      	movs	r4, r2
 800c7fa:	f7ff ffdb 	bl	800c7b4 <__mcmp>
 800c7fe:	1e05      	subs	r5, r0, #0
 800c800:	d110      	bne.n	800c824 <__mdiff+0x38>
 800c802:	0001      	movs	r1, r0
 800c804:	0038      	movs	r0, r7
 800c806:	f7ff fd03 	bl	800c210 <_Balloc>
 800c80a:	1e02      	subs	r2, r0, #0
 800c80c:	d104      	bne.n	800c818 <__mdiff+0x2c>
 800c80e:	4b40      	ldr	r3, [pc, #256]	; (800c910 <__mdiff+0x124>)
 800c810:	4940      	ldr	r1, [pc, #256]	; (800c914 <__mdiff+0x128>)
 800c812:	4841      	ldr	r0, [pc, #260]	; (800c918 <__mdiff+0x12c>)
 800c814:	f001 f86a 	bl	800d8ec <__assert_func>
 800c818:	2301      	movs	r3, #1
 800c81a:	6145      	str	r5, [r0, #20]
 800c81c:	6103      	str	r3, [r0, #16]
 800c81e:	0010      	movs	r0, r2
 800c820:	b007      	add	sp, #28
 800c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c824:	2301      	movs	r3, #1
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	2800      	cmp	r0, #0
 800c82a:	db04      	blt.n	800c836 <__mdiff+0x4a>
 800c82c:	0023      	movs	r3, r4
 800c82e:	0034      	movs	r4, r6
 800c830:	001e      	movs	r6, r3
 800c832:	2300      	movs	r3, #0
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	0038      	movs	r0, r7
 800c838:	6861      	ldr	r1, [r4, #4]
 800c83a:	f7ff fce9 	bl	800c210 <_Balloc>
 800c83e:	1e02      	subs	r2, r0, #0
 800c840:	d103      	bne.n	800c84a <__mdiff+0x5e>
 800c842:	2190      	movs	r1, #144	; 0x90
 800c844:	4b32      	ldr	r3, [pc, #200]	; (800c910 <__mdiff+0x124>)
 800c846:	0089      	lsls	r1, r1, #2
 800c848:	e7e3      	b.n	800c812 <__mdiff+0x26>
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	2700      	movs	r7, #0
 800c84e:	60c3      	str	r3, [r0, #12]
 800c850:	6920      	ldr	r0, [r4, #16]
 800c852:	3414      	adds	r4, #20
 800c854:	9401      	str	r4, [sp, #4]
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	0084      	lsls	r4, r0, #2
 800c85a:	191b      	adds	r3, r3, r4
 800c85c:	0034      	movs	r4, r6
 800c85e:	9302      	str	r3, [sp, #8]
 800c860:	6933      	ldr	r3, [r6, #16]
 800c862:	3414      	adds	r4, #20
 800c864:	0099      	lsls	r1, r3, #2
 800c866:	1863      	adds	r3, r4, r1
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	0013      	movs	r3, r2
 800c86c:	3314      	adds	r3, #20
 800c86e:	469c      	mov	ip, r3
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	9b01      	ldr	r3, [sp, #4]
 800c874:	9304      	str	r3, [sp, #16]
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	cc02      	ldmia	r4!, {r1}
 800c87a:	cb20      	ldmia	r3!, {r5}
 800c87c:	9304      	str	r3, [sp, #16]
 800c87e:	b2ab      	uxth	r3, r5
 800c880:	19df      	adds	r7, r3, r7
 800c882:	b28b      	uxth	r3, r1
 800c884:	1afb      	subs	r3, r7, r3
 800c886:	0c2d      	lsrs	r5, r5, #16
 800c888:	0c09      	lsrs	r1, r1, #16
 800c88a:	1a69      	subs	r1, r5, r1
 800c88c:	141d      	asrs	r5, r3, #16
 800c88e:	1949      	adds	r1, r1, r5
 800c890:	140f      	asrs	r7, r1, #16
 800c892:	b29b      	uxth	r3, r3
 800c894:	0409      	lsls	r1, r1, #16
 800c896:	430b      	orrs	r3, r1
 800c898:	4661      	mov	r1, ip
 800c89a:	c108      	stmia	r1!, {r3}
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	468c      	mov	ip, r1
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d8e8      	bhi.n	800c876 <__mdiff+0x8a>
 800c8a4:	0031      	movs	r1, r6
 800c8a6:	9c03      	ldr	r4, [sp, #12]
 800c8a8:	3115      	adds	r1, #21
 800c8aa:	2304      	movs	r3, #4
 800c8ac:	428c      	cmp	r4, r1
 800c8ae:	d304      	bcc.n	800c8ba <__mdiff+0xce>
 800c8b0:	1ba3      	subs	r3, r4, r6
 800c8b2:	3b15      	subs	r3, #21
 800c8b4:	089b      	lsrs	r3, r3, #2
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	9901      	ldr	r1, [sp, #4]
 800c8bc:	18cc      	adds	r4, r1, r3
 800c8be:	9905      	ldr	r1, [sp, #20]
 800c8c0:	0026      	movs	r6, r4
 800c8c2:	18cb      	adds	r3, r1, r3
 800c8c4:	469c      	mov	ip, r3
 800c8c6:	9902      	ldr	r1, [sp, #8]
 800c8c8:	428e      	cmp	r6, r1
 800c8ca:	d310      	bcc.n	800c8ee <__mdiff+0x102>
 800c8cc:	9e02      	ldr	r6, [sp, #8]
 800c8ce:	1ee5      	subs	r5, r4, #3
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	42ae      	cmp	r6, r5
 800c8d4:	d304      	bcc.n	800c8e0 <__mdiff+0xf4>
 800c8d6:	0031      	movs	r1, r6
 800c8d8:	3103      	adds	r1, #3
 800c8da:	1b09      	subs	r1, r1, r4
 800c8dc:	0889      	lsrs	r1, r1, #2
 800c8de:	0089      	lsls	r1, r1, #2
 800c8e0:	185b      	adds	r3, r3, r1
 800c8e2:	3b04      	subs	r3, #4
 800c8e4:	6819      	ldr	r1, [r3, #0]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d00f      	beq.n	800c90a <__mdiff+0x11e>
 800c8ea:	6110      	str	r0, [r2, #16]
 800c8ec:	e797      	b.n	800c81e <__mdiff+0x32>
 800c8ee:	ce02      	ldmia	r6!, {r1}
 800c8f0:	b28d      	uxth	r5, r1
 800c8f2:	19ed      	adds	r5, r5, r7
 800c8f4:	0c0f      	lsrs	r7, r1, #16
 800c8f6:	1429      	asrs	r1, r5, #16
 800c8f8:	1879      	adds	r1, r7, r1
 800c8fa:	140f      	asrs	r7, r1, #16
 800c8fc:	b2ad      	uxth	r5, r5
 800c8fe:	0409      	lsls	r1, r1, #16
 800c900:	430d      	orrs	r5, r1
 800c902:	4661      	mov	r1, ip
 800c904:	c120      	stmia	r1!, {r5}
 800c906:	468c      	mov	ip, r1
 800c908:	e7dd      	b.n	800c8c6 <__mdiff+0xda>
 800c90a:	3801      	subs	r0, #1
 800c90c:	e7e9      	b.n	800c8e2 <__mdiff+0xf6>
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	0800e7c4 	.word	0x0800e7c4
 800c914:	00000232 	.word	0x00000232
 800c918:	0800e854 	.word	0x0800e854

0800c91c <__ulp>:
 800c91c:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <__ulp+0x40>)
 800c91e:	4019      	ands	r1, r3
 800c920:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <__ulp+0x44>)
 800c922:	18c9      	adds	r1, r1, r3
 800c924:	2900      	cmp	r1, #0
 800c926:	dd04      	ble.n	800c932 <__ulp+0x16>
 800c928:	2200      	movs	r2, #0
 800c92a:	000b      	movs	r3, r1
 800c92c:	0010      	movs	r0, r2
 800c92e:	0019      	movs	r1, r3
 800c930:	4770      	bx	lr
 800c932:	4249      	negs	r1, r1
 800c934:	2200      	movs	r2, #0
 800c936:	2300      	movs	r3, #0
 800c938:	1509      	asrs	r1, r1, #20
 800c93a:	2913      	cmp	r1, #19
 800c93c:	dc04      	bgt.n	800c948 <__ulp+0x2c>
 800c93e:	2080      	movs	r0, #128	; 0x80
 800c940:	0300      	lsls	r0, r0, #12
 800c942:	4108      	asrs	r0, r1
 800c944:	0003      	movs	r3, r0
 800c946:	e7f1      	b.n	800c92c <__ulp+0x10>
 800c948:	3914      	subs	r1, #20
 800c94a:	2001      	movs	r0, #1
 800c94c:	291e      	cmp	r1, #30
 800c94e:	dc02      	bgt.n	800c956 <__ulp+0x3a>
 800c950:	2080      	movs	r0, #128	; 0x80
 800c952:	0600      	lsls	r0, r0, #24
 800c954:	40c8      	lsrs	r0, r1
 800c956:	0002      	movs	r2, r0
 800c958:	e7e8      	b.n	800c92c <__ulp+0x10>
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	7ff00000 	.word	0x7ff00000
 800c960:	fcc00000 	.word	0xfcc00000

0800c964 <__b2d>:
 800c964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c966:	0006      	movs	r6, r0
 800c968:	6903      	ldr	r3, [r0, #16]
 800c96a:	3614      	adds	r6, #20
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	18f3      	adds	r3, r6, r3
 800c970:	1f1d      	subs	r5, r3, #4
 800c972:	682c      	ldr	r4, [r5, #0]
 800c974:	000f      	movs	r7, r1
 800c976:	0020      	movs	r0, r4
 800c978:	9301      	str	r3, [sp, #4]
 800c97a:	f7ff fd41 	bl	800c400 <__hi0bits>
 800c97e:	2320      	movs	r3, #32
 800c980:	1a1b      	subs	r3, r3, r0
 800c982:	491f      	ldr	r1, [pc, #124]	; (800ca00 <__b2d+0x9c>)
 800c984:	603b      	str	r3, [r7, #0]
 800c986:	280a      	cmp	r0, #10
 800c988:	dc16      	bgt.n	800c9b8 <__b2d+0x54>
 800c98a:	230b      	movs	r3, #11
 800c98c:	0027      	movs	r7, r4
 800c98e:	1a1b      	subs	r3, r3, r0
 800c990:	40df      	lsrs	r7, r3
 800c992:	4339      	orrs	r1, r7
 800c994:	469c      	mov	ip, r3
 800c996:	000b      	movs	r3, r1
 800c998:	2100      	movs	r1, #0
 800c99a:	42ae      	cmp	r6, r5
 800c99c:	d202      	bcs.n	800c9a4 <__b2d+0x40>
 800c99e:	9901      	ldr	r1, [sp, #4]
 800c9a0:	3908      	subs	r1, #8
 800c9a2:	6809      	ldr	r1, [r1, #0]
 800c9a4:	3015      	adds	r0, #21
 800c9a6:	4084      	lsls	r4, r0
 800c9a8:	4660      	mov	r0, ip
 800c9aa:	40c1      	lsrs	r1, r0
 800c9ac:	430c      	orrs	r4, r1
 800c9ae:	0022      	movs	r2, r4
 800c9b0:	0010      	movs	r0, r2
 800c9b2:	0019      	movs	r1, r3
 800c9b4:	b003      	add	sp, #12
 800c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b8:	2700      	movs	r7, #0
 800c9ba:	42ae      	cmp	r6, r5
 800c9bc:	d202      	bcs.n	800c9c4 <__b2d+0x60>
 800c9be:	9d01      	ldr	r5, [sp, #4]
 800c9c0:	3d08      	subs	r5, #8
 800c9c2:	682f      	ldr	r7, [r5, #0]
 800c9c4:	230b      	movs	r3, #11
 800c9c6:	425b      	negs	r3, r3
 800c9c8:	469c      	mov	ip, r3
 800c9ca:	4484      	add	ip, r0
 800c9cc:	280b      	cmp	r0, #11
 800c9ce:	d013      	beq.n	800c9f8 <__b2d+0x94>
 800c9d0:	4663      	mov	r3, ip
 800c9d2:	2020      	movs	r0, #32
 800c9d4:	409c      	lsls	r4, r3
 800c9d6:	1ac0      	subs	r0, r0, r3
 800c9d8:	003b      	movs	r3, r7
 800c9da:	40c3      	lsrs	r3, r0
 800c9dc:	431c      	orrs	r4, r3
 800c9de:	4321      	orrs	r1, r4
 800c9e0:	000b      	movs	r3, r1
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	42b5      	cmp	r5, r6
 800c9e6:	d901      	bls.n	800c9ec <__b2d+0x88>
 800c9e8:	3d04      	subs	r5, #4
 800c9ea:	6829      	ldr	r1, [r5, #0]
 800c9ec:	4664      	mov	r4, ip
 800c9ee:	40c1      	lsrs	r1, r0
 800c9f0:	40a7      	lsls	r7, r4
 800c9f2:	430f      	orrs	r7, r1
 800c9f4:	003a      	movs	r2, r7
 800c9f6:	e7db      	b.n	800c9b0 <__b2d+0x4c>
 800c9f8:	4321      	orrs	r1, r4
 800c9fa:	000b      	movs	r3, r1
 800c9fc:	e7fa      	b.n	800c9f4 <__b2d+0x90>
 800c9fe:	46c0      	nop			; (mov r8, r8)
 800ca00:	3ff00000 	.word	0x3ff00000

0800ca04 <__d2b>:
 800ca04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca06:	2101      	movs	r1, #1
 800ca08:	0014      	movs	r4, r2
 800ca0a:	001e      	movs	r6, r3
 800ca0c:	9f08      	ldr	r7, [sp, #32]
 800ca0e:	f7ff fbff 	bl	800c210 <_Balloc>
 800ca12:	1e05      	subs	r5, r0, #0
 800ca14:	d105      	bne.n	800ca22 <__d2b+0x1e>
 800ca16:	0002      	movs	r2, r0
 800ca18:	4b26      	ldr	r3, [pc, #152]	; (800cab4 <__d2b+0xb0>)
 800ca1a:	4927      	ldr	r1, [pc, #156]	; (800cab8 <__d2b+0xb4>)
 800ca1c:	4827      	ldr	r0, [pc, #156]	; (800cabc <__d2b+0xb8>)
 800ca1e:	f000 ff65 	bl	800d8ec <__assert_func>
 800ca22:	0333      	lsls	r3, r6, #12
 800ca24:	0076      	lsls	r6, r6, #1
 800ca26:	0b1b      	lsrs	r3, r3, #12
 800ca28:	0d76      	lsrs	r6, r6, #21
 800ca2a:	d124      	bne.n	800ca76 <__d2b+0x72>
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	2c00      	cmp	r4, #0
 800ca30:	d027      	beq.n	800ca82 <__d2b+0x7e>
 800ca32:	4668      	mov	r0, sp
 800ca34:	9400      	str	r4, [sp, #0]
 800ca36:	f7ff fcfd 	bl	800c434 <__lo0bits>
 800ca3a:	9c00      	ldr	r4, [sp, #0]
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d01e      	beq.n	800ca7e <__d2b+0x7a>
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	2120      	movs	r1, #32
 800ca44:	001a      	movs	r2, r3
 800ca46:	1a09      	subs	r1, r1, r0
 800ca48:	408a      	lsls	r2, r1
 800ca4a:	40c3      	lsrs	r3, r0
 800ca4c:	4322      	orrs	r2, r4
 800ca4e:	616a      	str	r2, [r5, #20]
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	9c01      	ldr	r4, [sp, #4]
 800ca54:	61ac      	str	r4, [r5, #24]
 800ca56:	1e63      	subs	r3, r4, #1
 800ca58:	419c      	sbcs	r4, r3
 800ca5a:	3401      	adds	r4, #1
 800ca5c:	612c      	str	r4, [r5, #16]
 800ca5e:	2e00      	cmp	r6, #0
 800ca60:	d018      	beq.n	800ca94 <__d2b+0x90>
 800ca62:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <__d2b+0xbc>)
 800ca64:	18f6      	adds	r6, r6, r3
 800ca66:	2335      	movs	r3, #53	; 0x35
 800ca68:	1836      	adds	r6, r6, r0
 800ca6a:	1a18      	subs	r0, r3, r0
 800ca6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6e:	603e      	str	r6, [r7, #0]
 800ca70:	6018      	str	r0, [r3, #0]
 800ca72:	0028      	movs	r0, r5
 800ca74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca76:	2280      	movs	r2, #128	; 0x80
 800ca78:	0352      	lsls	r2, r2, #13
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	e7d6      	b.n	800ca2c <__d2b+0x28>
 800ca7e:	616c      	str	r4, [r5, #20]
 800ca80:	e7e7      	b.n	800ca52 <__d2b+0x4e>
 800ca82:	a801      	add	r0, sp, #4
 800ca84:	f7ff fcd6 	bl	800c434 <__lo0bits>
 800ca88:	2401      	movs	r4, #1
 800ca8a:	9b01      	ldr	r3, [sp, #4]
 800ca8c:	612c      	str	r4, [r5, #16]
 800ca8e:	616b      	str	r3, [r5, #20]
 800ca90:	3020      	adds	r0, #32
 800ca92:	e7e4      	b.n	800ca5e <__d2b+0x5a>
 800ca94:	4b0b      	ldr	r3, [pc, #44]	; (800cac4 <__d2b+0xc0>)
 800ca96:	18c0      	adds	r0, r0, r3
 800ca98:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <__d2b+0xc4>)
 800ca9a:	6038      	str	r0, [r7, #0]
 800ca9c:	18e3      	adds	r3, r4, r3
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	18eb      	adds	r3, r5, r3
 800caa2:	6958      	ldr	r0, [r3, #20]
 800caa4:	f7ff fcac 	bl	800c400 <__hi0bits>
 800caa8:	0164      	lsls	r4, r4, #5
 800caaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caac:	1a24      	subs	r4, r4, r0
 800caae:	601c      	str	r4, [r3, #0]
 800cab0:	e7df      	b.n	800ca72 <__d2b+0x6e>
 800cab2:	46c0      	nop			; (mov r8, r8)
 800cab4:	0800e7c4 	.word	0x0800e7c4
 800cab8:	0000030a 	.word	0x0000030a
 800cabc:	0800e854 	.word	0x0800e854
 800cac0:	fffffbcd 	.word	0xfffffbcd
 800cac4:	fffffbce 	.word	0xfffffbce
 800cac8:	3fffffff 	.word	0x3fffffff

0800cacc <__ratio>:
 800cacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cace:	b085      	sub	sp, #20
 800cad0:	000d      	movs	r5, r1
 800cad2:	a902      	add	r1, sp, #8
 800cad4:	0004      	movs	r4, r0
 800cad6:	f7ff ff45 	bl	800c964 <__b2d>
 800cada:	9000      	str	r0, [sp, #0]
 800cadc:	9101      	str	r1, [sp, #4]
 800cade:	9e00      	ldr	r6, [sp, #0]
 800cae0:	9f01      	ldr	r7, [sp, #4]
 800cae2:	0028      	movs	r0, r5
 800cae4:	a903      	add	r1, sp, #12
 800cae6:	f7ff ff3d 	bl	800c964 <__b2d>
 800caea:	6924      	ldr	r4, [r4, #16]
 800caec:	692d      	ldr	r5, [r5, #16]
 800caee:	0002      	movs	r2, r0
 800caf0:	1b65      	subs	r5, r4, r5
 800caf2:	016c      	lsls	r4, r5, #5
 800caf4:	46a4      	mov	ip, r4
 800caf6:	9d03      	ldr	r5, [sp, #12]
 800caf8:	9c02      	ldr	r4, [sp, #8]
 800cafa:	000b      	movs	r3, r1
 800cafc:	1b64      	subs	r4, r4, r5
 800cafe:	4464      	add	r4, ip
 800cb00:	0525      	lsls	r5, r4, #20
 800cb02:	2c00      	cmp	r4, #0
 800cb04:	dd07      	ble.n	800cb16 <__ratio+0x4a>
 800cb06:	9901      	ldr	r1, [sp, #4]
 800cb08:	186f      	adds	r7, r5, r1
 800cb0a:	0030      	movs	r0, r6
 800cb0c:	0039      	movs	r1, r7
 800cb0e:	f7f4 fb57 	bl	80011c0 <__aeabi_ddiv>
 800cb12:	b005      	add	sp, #20
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb16:	1b4b      	subs	r3, r1, r5
 800cb18:	e7f7      	b.n	800cb0a <__ratio+0x3e>

0800cb1a <__copybits>:
 800cb1a:	b570      	push	{r4, r5, r6, lr}
 800cb1c:	0015      	movs	r5, r2
 800cb1e:	6913      	ldr	r3, [r2, #16]
 800cb20:	3514      	adds	r5, #20
 800cb22:	009c      	lsls	r4, r3, #2
 800cb24:	0006      	movs	r6, r0
 800cb26:	002b      	movs	r3, r5
 800cb28:	3901      	subs	r1, #1
 800cb2a:	1149      	asrs	r1, r1, #5
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	0089      	lsls	r1, r1, #2
 800cb30:	1841      	adds	r1, r0, r1
 800cb32:	192c      	adds	r4, r5, r4
 800cb34:	429c      	cmp	r4, r3
 800cb36:	d80d      	bhi.n	800cb54 <__copybits+0x3a>
 800cb38:	0015      	movs	r5, r2
 800cb3a:	3511      	adds	r5, #17
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	42a5      	cmp	r5, r4
 800cb40:	d803      	bhi.n	800cb4a <__copybits+0x30>
 800cb42:	1aa3      	subs	r3, r4, r2
 800cb44:	3b11      	subs	r3, #17
 800cb46:	089b      	lsrs	r3, r3, #2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	18c0      	adds	r0, r0, r3
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4281      	cmp	r1, r0
 800cb50:	d803      	bhi.n	800cb5a <__copybits+0x40>
 800cb52:	bd70      	pop	{r4, r5, r6, pc}
 800cb54:	cb20      	ldmia	r3!, {r5}
 800cb56:	c620      	stmia	r6!, {r5}
 800cb58:	e7ec      	b.n	800cb34 <__copybits+0x1a>
 800cb5a:	c008      	stmia	r0!, {r3}
 800cb5c:	e7f7      	b.n	800cb4e <__copybits+0x34>

0800cb5e <__any_on>:
 800cb5e:	0002      	movs	r2, r0
 800cb60:	6900      	ldr	r0, [r0, #16]
 800cb62:	b510      	push	{r4, lr}
 800cb64:	3214      	adds	r2, #20
 800cb66:	114b      	asrs	r3, r1, #5
 800cb68:	4298      	cmp	r0, r3
 800cb6a:	db13      	blt.n	800cb94 <__any_on+0x36>
 800cb6c:	dd0c      	ble.n	800cb88 <__any_on+0x2a>
 800cb6e:	241f      	movs	r4, #31
 800cb70:	0008      	movs	r0, r1
 800cb72:	4020      	ands	r0, r4
 800cb74:	4221      	tst	r1, r4
 800cb76:	d007      	beq.n	800cb88 <__any_on+0x2a>
 800cb78:	0099      	lsls	r1, r3, #2
 800cb7a:	588c      	ldr	r4, [r1, r2]
 800cb7c:	0021      	movs	r1, r4
 800cb7e:	40c1      	lsrs	r1, r0
 800cb80:	4081      	lsls	r1, r0
 800cb82:	2001      	movs	r0, #1
 800cb84:	428c      	cmp	r4, r1
 800cb86:	d104      	bne.n	800cb92 <__any_on+0x34>
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	18d3      	adds	r3, r2, r3
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d803      	bhi.n	800cb98 <__any_on+0x3a>
 800cb90:	2000      	movs	r0, #0
 800cb92:	bd10      	pop	{r4, pc}
 800cb94:	0003      	movs	r3, r0
 800cb96:	e7f7      	b.n	800cb88 <__any_on+0x2a>
 800cb98:	3b04      	subs	r3, #4
 800cb9a:	6819      	ldr	r1, [r3, #0]
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	d0f5      	beq.n	800cb8c <__any_on+0x2e>
 800cba0:	2001      	movs	r0, #1
 800cba2:	e7f6      	b.n	800cb92 <__any_on+0x34>

0800cba4 <_calloc_r>:
 800cba4:	434a      	muls	r2, r1
 800cba6:	b570      	push	{r4, r5, r6, lr}
 800cba8:	0011      	movs	r1, r2
 800cbaa:	0015      	movs	r5, r2
 800cbac:	f000 f852 	bl	800cc54 <_malloc_r>
 800cbb0:	1e04      	subs	r4, r0, #0
 800cbb2:	d003      	beq.n	800cbbc <_calloc_r+0x18>
 800cbb4:	002a      	movs	r2, r5
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	f7fc fa9e 	bl	80090f8 <memset>
 800cbbc:	0020      	movs	r0, r4
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}

0800cbc0 <_free_r>:
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	0005      	movs	r5, r0
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	d010      	beq.n	800cbea <_free_r+0x2a>
 800cbc8:	1f0c      	subs	r4, r1, #4
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da00      	bge.n	800cbd2 <_free_r+0x12>
 800cbd0:	18e4      	adds	r4, r4, r3
 800cbd2:	0028      	movs	r0, r5
 800cbd4:	f001 f89c 	bl	800dd10 <__malloc_lock>
 800cbd8:	4a1d      	ldr	r2, [pc, #116]	; (800cc50 <_free_r+0x90>)
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d105      	bne.n	800cbec <_free_r+0x2c>
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	6014      	str	r4, [r2, #0]
 800cbe4:	0028      	movs	r0, r5
 800cbe6:	f001 f89b 	bl	800dd20 <__malloc_unlock>
 800cbea:	bd70      	pop	{r4, r5, r6, pc}
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	d908      	bls.n	800cc02 <_free_r+0x42>
 800cbf0:	6821      	ldr	r1, [r4, #0]
 800cbf2:	1860      	adds	r0, r4, r1
 800cbf4:	4283      	cmp	r3, r0
 800cbf6:	d1f3      	bne.n	800cbe0 <_free_r+0x20>
 800cbf8:	6818      	ldr	r0, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	1841      	adds	r1, r0, r1
 800cbfe:	6021      	str	r1, [r4, #0]
 800cc00:	e7ee      	b.n	800cbe0 <_free_r+0x20>
 800cc02:	001a      	movs	r2, r3
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <_free_r+0x4e>
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	d9f9      	bls.n	800cc02 <_free_r+0x42>
 800cc0e:	6811      	ldr	r1, [r2, #0]
 800cc10:	1850      	adds	r0, r2, r1
 800cc12:	42a0      	cmp	r0, r4
 800cc14:	d10b      	bne.n	800cc2e <_free_r+0x6e>
 800cc16:	6820      	ldr	r0, [r4, #0]
 800cc18:	1809      	adds	r1, r1, r0
 800cc1a:	1850      	adds	r0, r2, r1
 800cc1c:	6011      	str	r1, [r2, #0]
 800cc1e:	4283      	cmp	r3, r0
 800cc20:	d1e0      	bne.n	800cbe4 <_free_r+0x24>
 800cc22:	6818      	ldr	r0, [r3, #0]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	1841      	adds	r1, r0, r1
 800cc28:	6011      	str	r1, [r2, #0]
 800cc2a:	6053      	str	r3, [r2, #4]
 800cc2c:	e7da      	b.n	800cbe4 <_free_r+0x24>
 800cc2e:	42a0      	cmp	r0, r4
 800cc30:	d902      	bls.n	800cc38 <_free_r+0x78>
 800cc32:	230c      	movs	r3, #12
 800cc34:	602b      	str	r3, [r5, #0]
 800cc36:	e7d5      	b.n	800cbe4 <_free_r+0x24>
 800cc38:	6821      	ldr	r1, [r4, #0]
 800cc3a:	1860      	adds	r0, r4, r1
 800cc3c:	4283      	cmp	r3, r0
 800cc3e:	d103      	bne.n	800cc48 <_free_r+0x88>
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	1841      	adds	r1, r0, r1
 800cc46:	6021      	str	r1, [r4, #0]
 800cc48:	6063      	str	r3, [r4, #4]
 800cc4a:	6054      	str	r4, [r2, #4]
 800cc4c:	e7ca      	b.n	800cbe4 <_free_r+0x24>
 800cc4e:	46c0      	nop			; (mov r8, r8)
 800cc50:	200003d4 	.word	0x200003d4

0800cc54 <_malloc_r>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	2303      	movs	r3, #3
 800cc58:	1ccd      	adds	r5, r1, #3
 800cc5a:	439d      	bics	r5, r3
 800cc5c:	3508      	adds	r5, #8
 800cc5e:	0006      	movs	r6, r0
 800cc60:	2d0c      	cmp	r5, #12
 800cc62:	d21f      	bcs.n	800cca4 <_malloc_r+0x50>
 800cc64:	250c      	movs	r5, #12
 800cc66:	42a9      	cmp	r1, r5
 800cc68:	d81e      	bhi.n	800cca8 <_malloc_r+0x54>
 800cc6a:	0030      	movs	r0, r6
 800cc6c:	f001 f850 	bl	800dd10 <__malloc_lock>
 800cc70:	4925      	ldr	r1, [pc, #148]	; (800cd08 <_malloc_r+0xb4>)
 800cc72:	680a      	ldr	r2, [r1, #0]
 800cc74:	0014      	movs	r4, r2
 800cc76:	2c00      	cmp	r4, #0
 800cc78:	d11a      	bne.n	800ccb0 <_malloc_r+0x5c>
 800cc7a:	4f24      	ldr	r7, [pc, #144]	; (800cd0c <_malloc_r+0xb8>)
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d104      	bne.n	800cc8c <_malloc_r+0x38>
 800cc82:	0021      	movs	r1, r4
 800cc84:	0030      	movs	r0, r6
 800cc86:	f000 fcf5 	bl	800d674 <_sbrk_r>
 800cc8a:	6038      	str	r0, [r7, #0]
 800cc8c:	0029      	movs	r1, r5
 800cc8e:	0030      	movs	r0, r6
 800cc90:	f000 fcf0 	bl	800d674 <_sbrk_r>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d12b      	bne.n	800ccf0 <_malloc_r+0x9c>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	0030      	movs	r0, r6
 800cc9c:	6033      	str	r3, [r6, #0]
 800cc9e:	f001 f83f 	bl	800dd20 <__malloc_unlock>
 800cca2:	e003      	b.n	800ccac <_malloc_r+0x58>
 800cca4:	2d00      	cmp	r5, #0
 800cca6:	dade      	bge.n	800cc66 <_malloc_r+0x12>
 800cca8:	230c      	movs	r3, #12
 800ccaa:	6033      	str	r3, [r6, #0]
 800ccac:	2000      	movs	r0, #0
 800ccae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	1b5b      	subs	r3, r3, r5
 800ccb4:	d419      	bmi.n	800ccea <_malloc_r+0x96>
 800ccb6:	2b0b      	cmp	r3, #11
 800ccb8:	d903      	bls.n	800ccc2 <_malloc_r+0x6e>
 800ccba:	6023      	str	r3, [r4, #0]
 800ccbc:	18e4      	adds	r4, r4, r3
 800ccbe:	6025      	str	r5, [r4, #0]
 800ccc0:	e003      	b.n	800ccca <_malloc_r+0x76>
 800ccc2:	6863      	ldr	r3, [r4, #4]
 800ccc4:	42a2      	cmp	r2, r4
 800ccc6:	d10e      	bne.n	800cce6 <_malloc_r+0x92>
 800ccc8:	600b      	str	r3, [r1, #0]
 800ccca:	0030      	movs	r0, r6
 800cccc:	f001 f828 	bl	800dd20 <__malloc_unlock>
 800ccd0:	0020      	movs	r0, r4
 800ccd2:	2207      	movs	r2, #7
 800ccd4:	300b      	adds	r0, #11
 800ccd6:	1d23      	adds	r3, r4, #4
 800ccd8:	4390      	bics	r0, r2
 800ccda:	1ac2      	subs	r2, r0, r3
 800ccdc:	4298      	cmp	r0, r3
 800ccde:	d0e6      	beq.n	800ccae <_malloc_r+0x5a>
 800cce0:	1a1b      	subs	r3, r3, r0
 800cce2:	50a3      	str	r3, [r4, r2]
 800cce4:	e7e3      	b.n	800ccae <_malloc_r+0x5a>
 800cce6:	6053      	str	r3, [r2, #4]
 800cce8:	e7ef      	b.n	800ccca <_malloc_r+0x76>
 800ccea:	0022      	movs	r2, r4
 800ccec:	6864      	ldr	r4, [r4, #4]
 800ccee:	e7c2      	b.n	800cc76 <_malloc_r+0x22>
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	1cc4      	adds	r4, r0, #3
 800ccf4:	439c      	bics	r4, r3
 800ccf6:	42a0      	cmp	r0, r4
 800ccf8:	d0e1      	beq.n	800ccbe <_malloc_r+0x6a>
 800ccfa:	1a21      	subs	r1, r4, r0
 800ccfc:	0030      	movs	r0, r6
 800ccfe:	f000 fcb9 	bl	800d674 <_sbrk_r>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	d1db      	bne.n	800ccbe <_malloc_r+0x6a>
 800cd06:	e7c7      	b.n	800cc98 <_malloc_r+0x44>
 800cd08:	200003d4 	.word	0x200003d4
 800cd0c:	200003d8 	.word	0x200003d8

0800cd10 <__ssputs_r>:
 800cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd12:	688e      	ldr	r6, [r1, #8]
 800cd14:	b085      	sub	sp, #20
 800cd16:	0007      	movs	r7, r0
 800cd18:	000c      	movs	r4, r1
 800cd1a:	9203      	str	r2, [sp, #12]
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	429e      	cmp	r6, r3
 800cd20:	d83c      	bhi.n	800cd9c <__ssputs_r+0x8c>
 800cd22:	2390      	movs	r3, #144	; 0x90
 800cd24:	898a      	ldrh	r2, [r1, #12]
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	421a      	tst	r2, r3
 800cd2a:	d034      	beq.n	800cd96 <__ssputs_r+0x86>
 800cd2c:	2503      	movs	r5, #3
 800cd2e:	6909      	ldr	r1, [r1, #16]
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	1a5b      	subs	r3, r3, r1
 800cd34:	9302      	str	r3, [sp, #8]
 800cd36:	6963      	ldr	r3, [r4, #20]
 800cd38:	9802      	ldr	r0, [sp, #8]
 800cd3a:	435d      	muls	r5, r3
 800cd3c:	0feb      	lsrs	r3, r5, #31
 800cd3e:	195d      	adds	r5, r3, r5
 800cd40:	9b01      	ldr	r3, [sp, #4]
 800cd42:	106d      	asrs	r5, r5, #1
 800cd44:	3301      	adds	r3, #1
 800cd46:	181b      	adds	r3, r3, r0
 800cd48:	42ab      	cmp	r3, r5
 800cd4a:	d900      	bls.n	800cd4e <__ssputs_r+0x3e>
 800cd4c:	001d      	movs	r5, r3
 800cd4e:	0553      	lsls	r3, r2, #21
 800cd50:	d532      	bpl.n	800cdb8 <__ssputs_r+0xa8>
 800cd52:	0029      	movs	r1, r5
 800cd54:	0038      	movs	r0, r7
 800cd56:	f7ff ff7d 	bl	800cc54 <_malloc_r>
 800cd5a:	1e06      	subs	r6, r0, #0
 800cd5c:	d109      	bne.n	800cd72 <__ssputs_r+0x62>
 800cd5e:	230c      	movs	r3, #12
 800cd60:	603b      	str	r3, [r7, #0]
 800cd62:	2340      	movs	r3, #64	; 0x40
 800cd64:	2001      	movs	r0, #1
 800cd66:	89a2      	ldrh	r2, [r4, #12]
 800cd68:	4240      	negs	r0, r0
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	81a3      	strh	r3, [r4, #12]
 800cd6e:	b005      	add	sp, #20
 800cd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd72:	9a02      	ldr	r2, [sp, #8]
 800cd74:	6921      	ldr	r1, [r4, #16]
 800cd76:	f7ff fa42 	bl	800c1fe <memcpy>
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	4a14      	ldr	r2, [pc, #80]	; (800cdd0 <__ssputs_r+0xc0>)
 800cd7e:	401a      	ands	r2, r3
 800cd80:	2380      	movs	r3, #128	; 0x80
 800cd82:	4313      	orrs	r3, r2
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	9b02      	ldr	r3, [sp, #8]
 800cd88:	6126      	str	r6, [r4, #16]
 800cd8a:	18f6      	adds	r6, r6, r3
 800cd8c:	6026      	str	r6, [r4, #0]
 800cd8e:	6165      	str	r5, [r4, #20]
 800cd90:	9e01      	ldr	r6, [sp, #4]
 800cd92:	1aed      	subs	r5, r5, r3
 800cd94:	60a5      	str	r5, [r4, #8]
 800cd96:	9b01      	ldr	r3, [sp, #4]
 800cd98:	429e      	cmp	r6, r3
 800cd9a:	d900      	bls.n	800cd9e <__ssputs_r+0x8e>
 800cd9c:	9e01      	ldr	r6, [sp, #4]
 800cd9e:	0032      	movs	r2, r6
 800cda0:	9903      	ldr	r1, [sp, #12]
 800cda2:	6820      	ldr	r0, [r4, #0]
 800cda4:	f000 ffa1 	bl	800dcea <memmove>
 800cda8:	68a3      	ldr	r3, [r4, #8]
 800cdaa:	2000      	movs	r0, #0
 800cdac:	1b9b      	subs	r3, r3, r6
 800cdae:	60a3      	str	r3, [r4, #8]
 800cdb0:	6823      	ldr	r3, [r4, #0]
 800cdb2:	199e      	adds	r6, r3, r6
 800cdb4:	6026      	str	r6, [r4, #0]
 800cdb6:	e7da      	b.n	800cd6e <__ssputs_r+0x5e>
 800cdb8:	002a      	movs	r2, r5
 800cdba:	0038      	movs	r0, r7
 800cdbc:	f000 ffb8 	bl	800dd30 <_realloc_r>
 800cdc0:	1e06      	subs	r6, r0, #0
 800cdc2:	d1e0      	bne.n	800cd86 <__ssputs_r+0x76>
 800cdc4:	0038      	movs	r0, r7
 800cdc6:	6921      	ldr	r1, [r4, #16]
 800cdc8:	f7ff fefa 	bl	800cbc0 <_free_r>
 800cdcc:	e7c7      	b.n	800cd5e <__ssputs_r+0x4e>
 800cdce:	46c0      	nop			; (mov r8, r8)
 800cdd0:	fffffb7f 	.word	0xfffffb7f

0800cdd4 <_svfiprintf_r>:
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	b0a1      	sub	sp, #132	; 0x84
 800cdd8:	9003      	str	r0, [sp, #12]
 800cdda:	001d      	movs	r5, r3
 800cddc:	898b      	ldrh	r3, [r1, #12]
 800cdde:	000f      	movs	r7, r1
 800cde0:	0016      	movs	r6, r2
 800cde2:	061b      	lsls	r3, r3, #24
 800cde4:	d511      	bpl.n	800ce0a <_svfiprintf_r+0x36>
 800cde6:	690b      	ldr	r3, [r1, #16]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10e      	bne.n	800ce0a <_svfiprintf_r+0x36>
 800cdec:	2140      	movs	r1, #64	; 0x40
 800cdee:	f7ff ff31 	bl	800cc54 <_malloc_r>
 800cdf2:	6038      	str	r0, [r7, #0]
 800cdf4:	6138      	str	r0, [r7, #16]
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d105      	bne.n	800ce06 <_svfiprintf_r+0x32>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	9a03      	ldr	r2, [sp, #12]
 800cdfe:	3801      	subs	r0, #1
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	b021      	add	sp, #132	; 0x84
 800ce04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce06:	2340      	movs	r3, #64	; 0x40
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	ac08      	add	r4, sp, #32
 800ce0e:	6163      	str	r3, [r4, #20]
 800ce10:	3320      	adds	r3, #32
 800ce12:	7663      	strb	r3, [r4, #25]
 800ce14:	3310      	adds	r3, #16
 800ce16:	76a3      	strb	r3, [r4, #26]
 800ce18:	9507      	str	r5, [sp, #28]
 800ce1a:	0035      	movs	r5, r6
 800ce1c:	782b      	ldrb	r3, [r5, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <_svfiprintf_r+0x52>
 800ce22:	2b25      	cmp	r3, #37	; 0x25
 800ce24:	d147      	bne.n	800ceb6 <_svfiprintf_r+0xe2>
 800ce26:	1bab      	subs	r3, r5, r6
 800ce28:	9305      	str	r3, [sp, #20]
 800ce2a:	42b5      	cmp	r5, r6
 800ce2c:	d00c      	beq.n	800ce48 <_svfiprintf_r+0x74>
 800ce2e:	0032      	movs	r2, r6
 800ce30:	0039      	movs	r1, r7
 800ce32:	9803      	ldr	r0, [sp, #12]
 800ce34:	f7ff ff6c 	bl	800cd10 <__ssputs_r>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	d100      	bne.n	800ce3e <_svfiprintf_r+0x6a>
 800ce3c:	e0ae      	b.n	800cf9c <_svfiprintf_r+0x1c8>
 800ce3e:	6962      	ldr	r2, [r4, #20]
 800ce40:	9b05      	ldr	r3, [sp, #20]
 800ce42:	4694      	mov	ip, r2
 800ce44:	4463      	add	r3, ip
 800ce46:	6163      	str	r3, [r4, #20]
 800ce48:	782b      	ldrb	r3, [r5, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d100      	bne.n	800ce50 <_svfiprintf_r+0x7c>
 800ce4e:	e0a5      	b.n	800cf9c <_svfiprintf_r+0x1c8>
 800ce50:	2201      	movs	r2, #1
 800ce52:	2300      	movs	r3, #0
 800ce54:	4252      	negs	r2, r2
 800ce56:	6062      	str	r2, [r4, #4]
 800ce58:	a904      	add	r1, sp, #16
 800ce5a:	3254      	adds	r2, #84	; 0x54
 800ce5c:	1852      	adds	r2, r2, r1
 800ce5e:	1c6e      	adds	r6, r5, #1
 800ce60:	6023      	str	r3, [r4, #0]
 800ce62:	60e3      	str	r3, [r4, #12]
 800ce64:	60a3      	str	r3, [r4, #8]
 800ce66:	7013      	strb	r3, [r2, #0]
 800ce68:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce6a:	2205      	movs	r2, #5
 800ce6c:	7831      	ldrb	r1, [r6, #0]
 800ce6e:	4854      	ldr	r0, [pc, #336]	; (800cfc0 <_svfiprintf_r+0x1ec>)
 800ce70:	f7ff f9ba 	bl	800c1e8 <memchr>
 800ce74:	1c75      	adds	r5, r6, #1
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d11f      	bne.n	800ceba <_svfiprintf_r+0xe6>
 800ce7a:	6822      	ldr	r2, [r4, #0]
 800ce7c:	06d3      	lsls	r3, r2, #27
 800ce7e:	d504      	bpl.n	800ce8a <_svfiprintf_r+0xb6>
 800ce80:	2353      	movs	r3, #83	; 0x53
 800ce82:	a904      	add	r1, sp, #16
 800ce84:	185b      	adds	r3, r3, r1
 800ce86:	2120      	movs	r1, #32
 800ce88:	7019      	strb	r1, [r3, #0]
 800ce8a:	0713      	lsls	r3, r2, #28
 800ce8c:	d504      	bpl.n	800ce98 <_svfiprintf_r+0xc4>
 800ce8e:	2353      	movs	r3, #83	; 0x53
 800ce90:	a904      	add	r1, sp, #16
 800ce92:	185b      	adds	r3, r3, r1
 800ce94:	212b      	movs	r1, #43	; 0x2b
 800ce96:	7019      	strb	r1, [r3, #0]
 800ce98:	7833      	ldrb	r3, [r6, #0]
 800ce9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce9c:	d016      	beq.n	800cecc <_svfiprintf_r+0xf8>
 800ce9e:	0035      	movs	r5, r6
 800cea0:	2100      	movs	r1, #0
 800cea2:	200a      	movs	r0, #10
 800cea4:	68e3      	ldr	r3, [r4, #12]
 800cea6:	782a      	ldrb	r2, [r5, #0]
 800cea8:	1c6e      	adds	r6, r5, #1
 800ceaa:	3a30      	subs	r2, #48	; 0x30
 800ceac:	2a09      	cmp	r2, #9
 800ceae:	d94e      	bls.n	800cf4e <_svfiprintf_r+0x17a>
 800ceb0:	2900      	cmp	r1, #0
 800ceb2:	d111      	bne.n	800ced8 <_svfiprintf_r+0x104>
 800ceb4:	e017      	b.n	800cee6 <_svfiprintf_r+0x112>
 800ceb6:	3501      	adds	r5, #1
 800ceb8:	e7b0      	b.n	800ce1c <_svfiprintf_r+0x48>
 800ceba:	4b41      	ldr	r3, [pc, #260]	; (800cfc0 <_svfiprintf_r+0x1ec>)
 800cebc:	6822      	ldr	r2, [r4, #0]
 800cebe:	1ac0      	subs	r0, r0, r3
 800cec0:	2301      	movs	r3, #1
 800cec2:	4083      	lsls	r3, r0
 800cec4:	4313      	orrs	r3, r2
 800cec6:	002e      	movs	r6, r5
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	e7ce      	b.n	800ce6a <_svfiprintf_r+0x96>
 800cecc:	9b07      	ldr	r3, [sp, #28]
 800cece:	1d19      	adds	r1, r3, #4
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	9107      	str	r1, [sp, #28]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	db01      	blt.n	800cedc <_svfiprintf_r+0x108>
 800ced8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceda:	e004      	b.n	800cee6 <_svfiprintf_r+0x112>
 800cedc:	425b      	negs	r3, r3
 800cede:	60e3      	str	r3, [r4, #12]
 800cee0:	2302      	movs	r3, #2
 800cee2:	4313      	orrs	r3, r2
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	782b      	ldrb	r3, [r5, #0]
 800cee8:	2b2e      	cmp	r3, #46	; 0x2e
 800ceea:	d10a      	bne.n	800cf02 <_svfiprintf_r+0x12e>
 800ceec:	786b      	ldrb	r3, [r5, #1]
 800ceee:	2b2a      	cmp	r3, #42	; 0x2a
 800cef0:	d135      	bne.n	800cf5e <_svfiprintf_r+0x18a>
 800cef2:	9b07      	ldr	r3, [sp, #28]
 800cef4:	3502      	adds	r5, #2
 800cef6:	1d1a      	adds	r2, r3, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	9207      	str	r2, [sp, #28]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	db2b      	blt.n	800cf58 <_svfiprintf_r+0x184>
 800cf00:	9309      	str	r3, [sp, #36]	; 0x24
 800cf02:	4e30      	ldr	r6, [pc, #192]	; (800cfc4 <_svfiprintf_r+0x1f0>)
 800cf04:	2203      	movs	r2, #3
 800cf06:	0030      	movs	r0, r6
 800cf08:	7829      	ldrb	r1, [r5, #0]
 800cf0a:	f7ff f96d 	bl	800c1e8 <memchr>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d006      	beq.n	800cf20 <_svfiprintf_r+0x14c>
 800cf12:	2340      	movs	r3, #64	; 0x40
 800cf14:	1b80      	subs	r0, r0, r6
 800cf16:	4083      	lsls	r3, r0
 800cf18:	6822      	ldr	r2, [r4, #0]
 800cf1a:	3501      	adds	r5, #1
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	7829      	ldrb	r1, [r5, #0]
 800cf22:	2206      	movs	r2, #6
 800cf24:	4828      	ldr	r0, [pc, #160]	; (800cfc8 <_svfiprintf_r+0x1f4>)
 800cf26:	1c6e      	adds	r6, r5, #1
 800cf28:	7621      	strb	r1, [r4, #24]
 800cf2a:	f7ff f95d 	bl	800c1e8 <memchr>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	d03c      	beq.n	800cfac <_svfiprintf_r+0x1d8>
 800cf32:	4b26      	ldr	r3, [pc, #152]	; (800cfcc <_svfiprintf_r+0x1f8>)
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d125      	bne.n	800cf84 <_svfiprintf_r+0x1b0>
 800cf38:	2207      	movs	r2, #7
 800cf3a:	9b07      	ldr	r3, [sp, #28]
 800cf3c:	3307      	adds	r3, #7
 800cf3e:	4393      	bics	r3, r2
 800cf40:	3308      	adds	r3, #8
 800cf42:	9307      	str	r3, [sp, #28]
 800cf44:	6963      	ldr	r3, [r4, #20]
 800cf46:	9a04      	ldr	r2, [sp, #16]
 800cf48:	189b      	adds	r3, r3, r2
 800cf4a:	6163      	str	r3, [r4, #20]
 800cf4c:	e765      	b.n	800ce1a <_svfiprintf_r+0x46>
 800cf4e:	4343      	muls	r3, r0
 800cf50:	0035      	movs	r5, r6
 800cf52:	2101      	movs	r1, #1
 800cf54:	189b      	adds	r3, r3, r2
 800cf56:	e7a6      	b.n	800cea6 <_svfiprintf_r+0xd2>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	425b      	negs	r3, r3
 800cf5c:	e7d0      	b.n	800cf00 <_svfiprintf_r+0x12c>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	200a      	movs	r0, #10
 800cf62:	001a      	movs	r2, r3
 800cf64:	3501      	adds	r5, #1
 800cf66:	6063      	str	r3, [r4, #4]
 800cf68:	7829      	ldrb	r1, [r5, #0]
 800cf6a:	1c6e      	adds	r6, r5, #1
 800cf6c:	3930      	subs	r1, #48	; 0x30
 800cf6e:	2909      	cmp	r1, #9
 800cf70:	d903      	bls.n	800cf7a <_svfiprintf_r+0x1a6>
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d0c5      	beq.n	800cf02 <_svfiprintf_r+0x12e>
 800cf76:	9209      	str	r2, [sp, #36]	; 0x24
 800cf78:	e7c3      	b.n	800cf02 <_svfiprintf_r+0x12e>
 800cf7a:	4342      	muls	r2, r0
 800cf7c:	0035      	movs	r5, r6
 800cf7e:	2301      	movs	r3, #1
 800cf80:	1852      	adds	r2, r2, r1
 800cf82:	e7f1      	b.n	800cf68 <_svfiprintf_r+0x194>
 800cf84:	ab07      	add	r3, sp, #28
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	003a      	movs	r2, r7
 800cf8a:	0021      	movs	r1, r4
 800cf8c:	4b10      	ldr	r3, [pc, #64]	; (800cfd0 <_svfiprintf_r+0x1fc>)
 800cf8e:	9803      	ldr	r0, [sp, #12]
 800cf90:	f7fc f964 	bl	800925c <_printf_float>
 800cf94:	9004      	str	r0, [sp, #16]
 800cf96:	9b04      	ldr	r3, [sp, #16]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	d1d3      	bne.n	800cf44 <_svfiprintf_r+0x170>
 800cf9c:	89bb      	ldrh	r3, [r7, #12]
 800cf9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cfa0:	065b      	lsls	r3, r3, #25
 800cfa2:	d400      	bmi.n	800cfa6 <_svfiprintf_r+0x1d2>
 800cfa4:	e72d      	b.n	800ce02 <_svfiprintf_r+0x2e>
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	4240      	negs	r0, r0
 800cfaa:	e72a      	b.n	800ce02 <_svfiprintf_r+0x2e>
 800cfac:	ab07      	add	r3, sp, #28
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	003a      	movs	r2, r7
 800cfb2:	0021      	movs	r1, r4
 800cfb4:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <_svfiprintf_r+0x1fc>)
 800cfb6:	9803      	ldr	r0, [sp, #12]
 800cfb8:	f7fc fc0e 	bl	80097d8 <_printf_i>
 800cfbc:	e7ea      	b.n	800cf94 <_svfiprintf_r+0x1c0>
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	0800e9b4 	.word	0x0800e9b4
 800cfc4:	0800e9ba 	.word	0x0800e9ba
 800cfc8:	0800e9be 	.word	0x0800e9be
 800cfcc:	0800925d 	.word	0x0800925d
 800cfd0:	0800cd11 	.word	0x0800cd11

0800cfd4 <_sungetc_r>:
 800cfd4:	b570      	push	{r4, r5, r6, lr}
 800cfd6:	0014      	movs	r4, r2
 800cfd8:	1c4b      	adds	r3, r1, #1
 800cfda:	d103      	bne.n	800cfe4 <_sungetc_r+0x10>
 800cfdc:	2501      	movs	r5, #1
 800cfde:	426d      	negs	r5, r5
 800cfe0:	0028      	movs	r0, r5
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	8993      	ldrh	r3, [r2, #12]
 800cfe6:	2220      	movs	r2, #32
 800cfe8:	4393      	bics	r3, r2
 800cfea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cfec:	81a3      	strh	r3, [r4, #12]
 800cfee:	b2ce      	uxtb	r6, r1
 800cff0:	6863      	ldr	r3, [r4, #4]
 800cff2:	b2cd      	uxtb	r5, r1
 800cff4:	2a00      	cmp	r2, #0
 800cff6:	d010      	beq.n	800d01a <_sungetc_r+0x46>
 800cff8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cffa:	429a      	cmp	r2, r3
 800cffc:	dd07      	ble.n	800d00e <_sungetc_r+0x3a>
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	3b01      	subs	r3, #1
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	701e      	strb	r6, [r3, #0]
 800d006:	6863      	ldr	r3, [r4, #4]
 800d008:	3301      	adds	r3, #1
 800d00a:	6063      	str	r3, [r4, #4]
 800d00c:	e7e8      	b.n	800cfe0 <_sungetc_r+0xc>
 800d00e:	0021      	movs	r1, r4
 800d010:	f000 fc20 	bl	800d854 <__submore>
 800d014:	2800      	cmp	r0, #0
 800d016:	d0f2      	beq.n	800cffe <_sungetc_r+0x2a>
 800d018:	e7e0      	b.n	800cfdc <_sungetc_r+0x8>
 800d01a:	6921      	ldr	r1, [r4, #16]
 800d01c:	6822      	ldr	r2, [r4, #0]
 800d01e:	2900      	cmp	r1, #0
 800d020:	d007      	beq.n	800d032 <_sungetc_r+0x5e>
 800d022:	4291      	cmp	r1, r2
 800d024:	d205      	bcs.n	800d032 <_sungetc_r+0x5e>
 800d026:	1e51      	subs	r1, r2, #1
 800d028:	7808      	ldrb	r0, [r1, #0]
 800d02a:	42a8      	cmp	r0, r5
 800d02c:	d101      	bne.n	800d032 <_sungetc_r+0x5e>
 800d02e:	6021      	str	r1, [r4, #0]
 800d030:	e7ea      	b.n	800d008 <_sungetc_r+0x34>
 800d032:	6423      	str	r3, [r4, #64]	; 0x40
 800d034:	0023      	movs	r3, r4
 800d036:	3344      	adds	r3, #68	; 0x44
 800d038:	6363      	str	r3, [r4, #52]	; 0x34
 800d03a:	2303      	movs	r3, #3
 800d03c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d03e:	0023      	movs	r3, r4
 800d040:	3346      	adds	r3, #70	; 0x46
 800d042:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d044:	701e      	strb	r6, [r3, #0]
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	2301      	movs	r3, #1
 800d04a:	e7de      	b.n	800d00a <_sungetc_r+0x36>

0800d04c <__ssrefill_r>:
 800d04c:	b510      	push	{r4, lr}
 800d04e:	000c      	movs	r4, r1
 800d050:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d052:	2900      	cmp	r1, #0
 800d054:	d00e      	beq.n	800d074 <__ssrefill_r+0x28>
 800d056:	0023      	movs	r3, r4
 800d058:	3344      	adds	r3, #68	; 0x44
 800d05a:	4299      	cmp	r1, r3
 800d05c:	d001      	beq.n	800d062 <__ssrefill_r+0x16>
 800d05e:	f7ff fdaf 	bl	800cbc0 <_free_r>
 800d062:	2000      	movs	r0, #0
 800d064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d066:	6360      	str	r0, [r4, #52]	; 0x34
 800d068:	6063      	str	r3, [r4, #4]
 800d06a:	4283      	cmp	r3, r0
 800d06c:	d002      	beq.n	800d074 <__ssrefill_r+0x28>
 800d06e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	bd10      	pop	{r4, pc}
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	2001      	movs	r0, #1
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	2300      	movs	r3, #0
 800d07c:	89a2      	ldrh	r2, [r4, #12]
 800d07e:	6063      	str	r3, [r4, #4]
 800d080:	3320      	adds	r3, #32
 800d082:	4313      	orrs	r3, r2
 800d084:	81a3      	strh	r3, [r4, #12]
 800d086:	4240      	negs	r0, r0
 800d088:	e7f3      	b.n	800d072 <__ssrefill_r+0x26>
	...

0800d08c <__ssvfiscanf_r>:
 800d08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d08e:	4cb5      	ldr	r4, [pc, #724]	; (800d364 <__ssvfiscanf_r+0x2d8>)
 800d090:	0005      	movs	r5, r0
 800d092:	44a5      	add	sp, r4
 800d094:	000c      	movs	r4, r1
 800d096:	2100      	movs	r1, #0
 800d098:	9148      	str	r1, [sp, #288]	; 0x120
 800d09a:	9149      	str	r1, [sp, #292]	; 0x124
 800d09c:	a905      	add	r1, sp, #20
 800d09e:	914a      	str	r1, [sp, #296]	; 0x128
 800d0a0:	21be      	movs	r1, #190	; 0xbe
 800d0a2:	48b1      	ldr	r0, [pc, #708]	; (800d368 <__ssvfiscanf_r+0x2dc>)
 800d0a4:	0049      	lsls	r1, r1, #1
 800d0a6:	ae45      	add	r6, sp, #276	; 0x114
 800d0a8:	5070      	str	r0, [r6, r1]
 800d0aa:	48b0      	ldr	r0, [pc, #704]	; (800d36c <__ssvfiscanf_r+0x2e0>)
 800d0ac:	3104      	adds	r1, #4
 800d0ae:	ae45      	add	r6, sp, #276	; 0x114
 800d0b0:	5070      	str	r0, [r6, r1]
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	9101      	str	r1, [sp, #4]
 800d0b6:	7813      	ldrb	r3, [r2, #0]
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d100      	bne.n	800d0c0 <__ssvfiscanf_r+0x34>
 800d0be:	e14f      	b.n	800d360 <__ssvfiscanf_r+0x2d4>
 800d0c0:	4fab      	ldr	r7, [pc, #684]	; (800d370 <__ssvfiscanf_r+0x2e4>)
 800d0c2:	2008      	movs	r0, #8
 800d0c4:	5cf9      	ldrb	r1, [r7, r3]
 800d0c6:	2308      	movs	r3, #8
 800d0c8:	1c56      	adds	r6, r2, #1
 800d0ca:	400b      	ands	r3, r1
 800d0cc:	4201      	tst	r1, r0
 800d0ce:	d01e      	beq.n	800d10e <__ssvfiscanf_r+0x82>
 800d0d0:	6863      	ldr	r3, [r4, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dd11      	ble.n	800d0fa <__ssvfiscanf_r+0x6e>
 800d0d6:	2108      	movs	r1, #8
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	781a      	ldrb	r2, [r3, #0]
 800d0dc:	5cba      	ldrb	r2, [r7, r2]
 800d0de:	420a      	tst	r2, r1
 800d0e0:	d101      	bne.n	800d0e6 <__ssvfiscanf_r+0x5a>
 800d0e2:	0032      	movs	r2, r6
 800d0e4:	e7e7      	b.n	800d0b6 <__ssvfiscanf_r+0x2a>
 800d0e6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	9200      	str	r2, [sp, #0]
 800d0ec:	3201      	adds	r2, #1
 800d0ee:	9249      	str	r2, [sp, #292]	; 0x124
 800d0f0:	6862      	ldr	r2, [r4, #4]
 800d0f2:	6023      	str	r3, [r4, #0]
 800d0f4:	3a01      	subs	r2, #1
 800d0f6:	6062      	str	r2, [r4, #4]
 800d0f8:	e7ea      	b.n	800d0d0 <__ssvfiscanf_r+0x44>
 800d0fa:	9a01      	ldr	r2, [sp, #4]
 800d0fc:	ab45      	add	r3, sp, #276	; 0x114
 800d0fe:	589b      	ldr	r3, [r3, r2]
 800d100:	0021      	movs	r1, r4
 800d102:	0028      	movs	r0, r5
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	4798      	blx	r3
 800d108:	2800      	cmp	r0, #0
 800d10a:	d0e4      	beq.n	800d0d6 <__ssvfiscanf_r+0x4a>
 800d10c:	e7e9      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d10e:	9900      	ldr	r1, [sp, #0]
 800d110:	2925      	cmp	r1, #37	; 0x25
 800d112:	d164      	bne.n	800d1de <__ssvfiscanf_r+0x152>
 800d114:	9347      	str	r3, [sp, #284]	; 0x11c
 800d116:	9345      	str	r3, [sp, #276]	; 0x114
 800d118:	7853      	ldrb	r3, [r2, #1]
 800d11a:	2b2a      	cmp	r3, #42	; 0x2a
 800d11c:	d102      	bne.n	800d124 <__ssvfiscanf_r+0x98>
 800d11e:	3b1a      	subs	r3, #26
 800d120:	9345      	str	r3, [sp, #276]	; 0x114
 800d122:	1c96      	adds	r6, r2, #2
 800d124:	0037      	movs	r7, r6
 800d126:	200a      	movs	r0, #10
 800d128:	7839      	ldrb	r1, [r7, #0]
 800d12a:	1c7b      	adds	r3, r7, #1
 800d12c:	9302      	str	r3, [sp, #8]
 800d12e:	000b      	movs	r3, r1
 800d130:	3b30      	subs	r3, #48	; 0x30
 800d132:	2b09      	cmp	r3, #9
 800d134:	d91f      	bls.n	800d176 <__ssvfiscanf_r+0xea>
 800d136:	4e8f      	ldr	r6, [pc, #572]	; (800d374 <__ssvfiscanf_r+0x2e8>)
 800d138:	2203      	movs	r2, #3
 800d13a:	0030      	movs	r0, r6
 800d13c:	f7ff f854 	bl	800c1e8 <memchr>
 800d140:	2800      	cmp	r0, #0
 800d142:	d007      	beq.n	800d154 <__ssvfiscanf_r+0xc8>
 800d144:	2301      	movs	r3, #1
 800d146:	1b80      	subs	r0, r0, r6
 800d148:	4083      	lsls	r3, r0
 800d14a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d14c:	9f02      	ldr	r7, [sp, #8]
 800d14e:	4313      	orrs	r3, r2
 800d150:	9203      	str	r2, [sp, #12]
 800d152:	9345      	str	r3, [sp, #276]	; 0x114
 800d154:	783b      	ldrb	r3, [r7, #0]
 800d156:	1c7e      	adds	r6, r7, #1
 800d158:	2b78      	cmp	r3, #120	; 0x78
 800d15a:	d807      	bhi.n	800d16c <__ssvfiscanf_r+0xe0>
 800d15c:	2b57      	cmp	r3, #87	; 0x57
 800d15e:	d812      	bhi.n	800d186 <__ssvfiscanf_r+0xfa>
 800d160:	2b25      	cmp	r3, #37	; 0x25
 800d162:	d03c      	beq.n	800d1de <__ssvfiscanf_r+0x152>
 800d164:	d836      	bhi.n	800d1d4 <__ssvfiscanf_r+0x148>
 800d166:	2b00      	cmp	r3, #0
 800d168:	d100      	bne.n	800d16c <__ssvfiscanf_r+0xe0>
 800d16a:	e0f6      	b.n	800d35a <__ssvfiscanf_r+0x2ce>
 800d16c:	2303      	movs	r3, #3
 800d16e:	934b      	str	r3, [sp, #300]	; 0x12c
 800d170:	3307      	adds	r3, #7
 800d172:	9346      	str	r3, [sp, #280]	; 0x118
 800d174:	e076      	b.n	800d264 <__ssvfiscanf_r+0x1d8>
 800d176:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d178:	9f02      	ldr	r7, [sp, #8]
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	4343      	muls	r3, r0
 800d17e:	3b30      	subs	r3, #48	; 0x30
 800d180:	185b      	adds	r3, r3, r1
 800d182:	9347      	str	r3, [sp, #284]	; 0x11c
 800d184:	e7d0      	b.n	800d128 <__ssvfiscanf_r+0x9c>
 800d186:	0018      	movs	r0, r3
 800d188:	3858      	subs	r0, #88	; 0x58
 800d18a:	2820      	cmp	r0, #32
 800d18c:	d8ee      	bhi.n	800d16c <__ssvfiscanf_r+0xe0>
 800d18e:	f7f2 ffd7 	bl	8000140 <__gnu_thumb1_case_shi>
 800d192:	0051      	.short	0x0051
 800d194:	ffedffed 	.word	0xffedffed
 800d198:	ffed0086 	.word	0xffed0086
 800d19c:	ffedffed 	.word	0xffedffed
 800d1a0:	ffedffed 	.word	0xffedffed
 800d1a4:	ffedffed 	.word	0xffedffed
 800d1a8:	00600093 	.word	0x00600093
 800d1ac:	00240024 	.word	0x00240024
 800d1b0:	ffed0024 	.word	0xffed0024
 800d1b4:	ffed0062 	.word	0xffed0062
 800d1b8:	ffedffed 	.word	0xffedffed
 800d1bc:	009dffed 	.word	0x009dffed
 800d1c0:	004b0065 	.word	0x004b0065
 800d1c4:	ffedffed 	.word	0xffedffed
 800d1c8:	ffed009b 	.word	0xffed009b
 800d1cc:	ffed0060 	.word	0xffed0060
 800d1d0:	0051ffed 	.word	0x0051ffed
 800d1d4:	3b45      	subs	r3, #69	; 0x45
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d8c8      	bhi.n	800d16c <__ssvfiscanf_r+0xe0>
 800d1da:	2305      	movs	r3, #5
 800d1dc:	e041      	b.n	800d262 <__ssvfiscanf_r+0x1d6>
 800d1de:	6863      	ldr	r3, [r4, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dd0f      	ble.n	800d204 <__ssvfiscanf_r+0x178>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	9900      	ldr	r1, [sp, #0]
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	428a      	cmp	r2, r1
 800d1ec:	d000      	beq.n	800d1f0 <__ssvfiscanf_r+0x164>
 800d1ee:	e0b7      	b.n	800d360 <__ssvfiscanf_r+0x2d4>
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	6862      	ldr	r2, [r4, #4]
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800d1f8:	3a01      	subs	r2, #1
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	6062      	str	r2, [r4, #4]
 800d200:	9349      	str	r3, [sp, #292]	; 0x124
 800d202:	e76e      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d204:	9a01      	ldr	r2, [sp, #4]
 800d206:	ab45      	add	r3, sp, #276	; 0x114
 800d208:	589b      	ldr	r3, [r3, r2]
 800d20a:	0021      	movs	r1, r4
 800d20c:	0028      	movs	r0, r5
 800d20e:	9302      	str	r3, [sp, #8]
 800d210:	4798      	blx	r3
 800d212:	2800      	cmp	r0, #0
 800d214:	d0e6      	beq.n	800d1e4 <__ssvfiscanf_r+0x158>
 800d216:	9848      	ldr	r0, [sp, #288]	; 0x120
 800d218:	2800      	cmp	r0, #0
 800d21a:	d000      	beq.n	800d21e <__ssvfiscanf_r+0x192>
 800d21c:	e099      	b.n	800d352 <__ssvfiscanf_r+0x2c6>
 800d21e:	3801      	subs	r0, #1
 800d220:	23a7      	movs	r3, #167	; 0xa7
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	449d      	add	sp, r3
 800d226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d228:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d22a:	9200      	str	r2, [sp, #0]
 800d22c:	2220      	movs	r2, #32
 800d22e:	9900      	ldr	r1, [sp, #0]
 800d230:	430a      	orrs	r2, r1
 800d232:	9245      	str	r2, [sp, #276]	; 0x114
 800d234:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d236:	9200      	str	r2, [sp, #0]
 800d238:	2280      	movs	r2, #128	; 0x80
 800d23a:	9900      	ldr	r1, [sp, #0]
 800d23c:	0092      	lsls	r2, r2, #2
 800d23e:	430a      	orrs	r2, r1
 800d240:	9245      	str	r2, [sp, #276]	; 0x114
 800d242:	2210      	movs	r2, #16
 800d244:	9246      	str	r2, [sp, #280]	; 0x118
 800d246:	226e      	movs	r2, #110	; 0x6e
 800d248:	429a      	cmp	r2, r3
 800d24a:	419b      	sbcs	r3, r3
 800d24c:	425b      	negs	r3, r3
 800d24e:	3303      	adds	r3, #3
 800d250:	e007      	b.n	800d262 <__ssvfiscanf_r+0x1d6>
 800d252:	220a      	movs	r2, #10
 800d254:	e7f6      	b.n	800d244 <__ssvfiscanf_r+0x1b8>
 800d256:	2300      	movs	r3, #0
 800d258:	9346      	str	r3, [sp, #280]	; 0x118
 800d25a:	e7f8      	b.n	800d24e <__ssvfiscanf_r+0x1c2>
 800d25c:	2308      	movs	r3, #8
 800d25e:	9346      	str	r3, [sp, #280]	; 0x118
 800d260:	3b04      	subs	r3, #4
 800d262:	934b      	str	r3, [sp, #300]	; 0x12c
 800d264:	6863      	ldr	r3, [r4, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	dd3f      	ble.n	800d2ea <__ssvfiscanf_r+0x25e>
 800d26a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	065b      	lsls	r3, r3, #25
 800d270:	d406      	bmi.n	800d280 <__ssvfiscanf_r+0x1f4>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	493e      	ldr	r1, [pc, #248]	; (800d370 <__ssvfiscanf_r+0x2e4>)
 800d276:	781a      	ldrb	r2, [r3, #0]
 800d278:	5c8a      	ldrb	r2, [r1, r2]
 800d27a:	2108      	movs	r1, #8
 800d27c:	420a      	tst	r2, r1
 800d27e:	d13e      	bne.n	800d2fe <__ssvfiscanf_r+0x272>
 800d280:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800d282:	2b02      	cmp	r3, #2
 800d284:	dc51      	bgt.n	800d32a <__ssvfiscanf_r+0x29e>
 800d286:	0022      	movs	r2, r4
 800d288:	0028      	movs	r0, r5
 800d28a:	ab04      	add	r3, sp, #16
 800d28c:	a945      	add	r1, sp, #276	; 0x114
 800d28e:	f000 f875 	bl	800d37c <_scanf_chars>
 800d292:	2801      	cmp	r0, #1
 800d294:	d064      	beq.n	800d360 <__ssvfiscanf_r+0x2d4>
 800d296:	2802      	cmp	r0, #2
 800d298:	d000      	beq.n	800d29c <__ssvfiscanf_r+0x210>
 800d29a:	e722      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d29c:	e7bb      	b.n	800d216 <__ssvfiscanf_r+0x18a>
 800d29e:	0031      	movs	r1, r6
 800d2a0:	a805      	add	r0, sp, #20
 800d2a2:	f000 f9f9 	bl	800d698 <__sccl>
 800d2a6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d2a8:	0006      	movs	r6, r0
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	2340      	movs	r3, #64	; 0x40
 800d2ae:	9a00      	ldr	r2, [sp, #0]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	9345      	str	r3, [sp, #276]	; 0x114
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e7d4      	b.n	800d262 <__ssvfiscanf_r+0x1d6>
 800d2b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	2340      	movs	r3, #64	; 0x40
 800d2be:	9a00      	ldr	r2, [sp, #0]
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	9345      	str	r3, [sp, #276]	; 0x114
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e7cc      	b.n	800d262 <__ssvfiscanf_r+0x1d6>
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	e7ca      	b.n	800d262 <__ssvfiscanf_r+0x1d6>
 800d2cc:	9845      	ldr	r0, [sp, #276]	; 0x114
 800d2ce:	06c3      	lsls	r3, r0, #27
 800d2d0:	d500      	bpl.n	800d2d4 <__ssvfiscanf_r+0x248>
 800d2d2:	e706      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d2d8:	1d19      	adds	r1, r3, #4
 800d2da:	9104      	str	r1, [sp, #16]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	07c7      	lsls	r7, r0, #31
 800d2e0:	d501      	bpl.n	800d2e6 <__ssvfiscanf_r+0x25a>
 800d2e2:	801a      	strh	r2, [r3, #0]
 800d2e4:	e6fd      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d2e6:	601a      	str	r2, [r3, #0]
 800d2e8:	e6fb      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d2ea:	9a01      	ldr	r2, [sp, #4]
 800d2ec:	ab45      	add	r3, sp, #276	; 0x114
 800d2ee:	589b      	ldr	r3, [r3, r2]
 800d2f0:	0021      	movs	r1, r4
 800d2f2:	0028      	movs	r0, r5
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	4798      	blx	r3
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d0b6      	beq.n	800d26a <__ssvfiscanf_r+0x1de>
 800d2fc:	e78b      	b.n	800d216 <__ssvfiscanf_r+0x18a>
 800d2fe:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d300:	9200      	str	r2, [sp, #0]
 800d302:	3201      	adds	r2, #1
 800d304:	9249      	str	r2, [sp, #292]	; 0x124
 800d306:	6862      	ldr	r2, [r4, #4]
 800d308:	3a01      	subs	r2, #1
 800d30a:	6062      	str	r2, [r4, #4]
 800d30c:	2a00      	cmp	r2, #0
 800d30e:	dd02      	ble.n	800d316 <__ssvfiscanf_r+0x28a>
 800d310:	3301      	adds	r3, #1
 800d312:	6023      	str	r3, [r4, #0]
 800d314:	e7ad      	b.n	800d272 <__ssvfiscanf_r+0x1e6>
 800d316:	9a01      	ldr	r2, [sp, #4]
 800d318:	ab45      	add	r3, sp, #276	; 0x114
 800d31a:	589b      	ldr	r3, [r3, r2]
 800d31c:	0021      	movs	r1, r4
 800d31e:	0028      	movs	r0, r5
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	4798      	blx	r3
 800d324:	2800      	cmp	r0, #0
 800d326:	d0a4      	beq.n	800d272 <__ssvfiscanf_r+0x1e6>
 800d328:	e775      	b.n	800d216 <__ssvfiscanf_r+0x18a>
 800d32a:	2b04      	cmp	r3, #4
 800d32c:	dc06      	bgt.n	800d33c <__ssvfiscanf_r+0x2b0>
 800d32e:	0022      	movs	r2, r4
 800d330:	0028      	movs	r0, r5
 800d332:	ab04      	add	r3, sp, #16
 800d334:	a945      	add	r1, sp, #276	; 0x114
 800d336:	f000 f87f 	bl	800d438 <_scanf_i>
 800d33a:	e7aa      	b.n	800d292 <__ssvfiscanf_r+0x206>
 800d33c:	4b0e      	ldr	r3, [pc, #56]	; (800d378 <__ssvfiscanf_r+0x2ec>)
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d100      	bne.n	800d344 <__ssvfiscanf_r+0x2b8>
 800d342:	e6ce      	b.n	800d0e2 <__ssvfiscanf_r+0x56>
 800d344:	0022      	movs	r2, r4
 800d346:	0028      	movs	r0, r5
 800d348:	ab04      	add	r3, sp, #16
 800d34a:	a945      	add	r1, sp, #276	; 0x114
 800d34c:	f7fc fb56 	bl	80099fc <_scanf_float>
 800d350:	e79f      	b.n	800d292 <__ssvfiscanf_r+0x206>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	065b      	lsls	r3, r3, #25
 800d356:	d400      	bmi.n	800d35a <__ssvfiscanf_r+0x2ce>
 800d358:	e762      	b.n	800d220 <__ssvfiscanf_r+0x194>
 800d35a:	2001      	movs	r0, #1
 800d35c:	4240      	negs	r0, r0
 800d35e:	e75f      	b.n	800d220 <__ssvfiscanf_r+0x194>
 800d360:	9848      	ldr	r0, [sp, #288]	; 0x120
 800d362:	e75d      	b.n	800d220 <__ssvfiscanf_r+0x194>
 800d364:	fffffd64 	.word	0xfffffd64
 800d368:	0800cfd5 	.word	0x0800cfd5
 800d36c:	0800d04d 	.word	0x0800d04d
 800d370:	0800e641 	.word	0x0800e641
 800d374:	0800e9ba 	.word	0x0800e9ba
 800d378:	080099fd 	.word	0x080099fd

0800d37c <_scanf_chars>:
 800d37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d37e:	0015      	movs	r5, r2
 800d380:	688a      	ldr	r2, [r1, #8]
 800d382:	000c      	movs	r4, r1
 800d384:	9001      	str	r0, [sp, #4]
 800d386:	2a00      	cmp	r2, #0
 800d388:	d105      	bne.n	800d396 <_scanf_chars+0x1a>
 800d38a:	6989      	ldr	r1, [r1, #24]
 800d38c:	3201      	adds	r2, #1
 800d38e:	2900      	cmp	r1, #0
 800d390:	d000      	beq.n	800d394 <_scanf_chars+0x18>
 800d392:	3a02      	subs	r2, #2
 800d394:	60a2      	str	r2, [r4, #8]
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	06d2      	lsls	r2, r2, #27
 800d39a:	d403      	bmi.n	800d3a4 <_scanf_chars+0x28>
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	1d11      	adds	r1, r2, #4
 800d3a0:	6019      	str	r1, [r3, #0]
 800d3a2:	6817      	ldr	r7, [r2, #0]
 800d3a4:	2600      	movs	r6, #0
 800d3a6:	69a0      	ldr	r0, [r4, #24]
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d013      	beq.n	800d3d4 <_scanf_chars+0x58>
 800d3ac:	2801      	cmp	r0, #1
 800d3ae:	d108      	bne.n	800d3c2 <_scanf_chars+0x46>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	6962      	ldr	r2, [r4, #20]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	5cd3      	ldrb	r3, [r2, r3]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <_scanf_chars+0x58>
 800d3bc:	2e00      	cmp	r6, #0
 800d3be:	d127      	bne.n	800d410 <_scanf_chars+0x94>
 800d3c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3c2:	2802      	cmp	r0, #2
 800d3c4:	d124      	bne.n	800d410 <_scanf_chars+0x94>
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	4a1a      	ldr	r2, [pc, #104]	; (800d434 <_scanf_chars+0xb8>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	5cd3      	ldrb	r3, [r2, r3]
 800d3ce:	2208      	movs	r2, #8
 800d3d0:	4213      	tst	r3, r2
 800d3d2:	d11d      	bne.n	800d410 <_scanf_chars+0x94>
 800d3d4:	2210      	movs	r2, #16
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	3601      	adds	r6, #1
 800d3da:	4213      	tst	r3, r2
 800d3dc:	d103      	bne.n	800d3e6 <_scanf_chars+0x6a>
 800d3de:	682b      	ldr	r3, [r5, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	703b      	strb	r3, [r7, #0]
 800d3e4:	3701      	adds	r7, #1
 800d3e6:	682a      	ldr	r2, [r5, #0]
 800d3e8:	686b      	ldr	r3, [r5, #4]
 800d3ea:	3201      	adds	r2, #1
 800d3ec:	602a      	str	r2, [r5, #0]
 800d3ee:	68a2      	ldr	r2, [r4, #8]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	3a01      	subs	r2, #1
 800d3f4:	606b      	str	r3, [r5, #4]
 800d3f6:	60a2      	str	r2, [r4, #8]
 800d3f8:	2a00      	cmp	r2, #0
 800d3fa:	d009      	beq.n	800d410 <_scanf_chars+0x94>
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dcd2      	bgt.n	800d3a6 <_scanf_chars+0x2a>
 800d400:	23c0      	movs	r3, #192	; 0xc0
 800d402:	005b      	lsls	r3, r3, #1
 800d404:	0029      	movs	r1, r5
 800d406:	58e3      	ldr	r3, [r4, r3]
 800d408:	9801      	ldr	r0, [sp, #4]
 800d40a:	4798      	blx	r3
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d0ca      	beq.n	800d3a6 <_scanf_chars+0x2a>
 800d410:	6822      	ldr	r2, [r4, #0]
 800d412:	2310      	movs	r3, #16
 800d414:	0011      	movs	r1, r2
 800d416:	4019      	ands	r1, r3
 800d418:	421a      	tst	r2, r3
 800d41a:	d106      	bne.n	800d42a <_scanf_chars+0xae>
 800d41c:	68e3      	ldr	r3, [r4, #12]
 800d41e:	3301      	adds	r3, #1
 800d420:	60e3      	str	r3, [r4, #12]
 800d422:	69a3      	ldr	r3, [r4, #24]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d000      	beq.n	800d42a <_scanf_chars+0xae>
 800d428:	7039      	strb	r1, [r7, #0]
 800d42a:	6923      	ldr	r3, [r4, #16]
 800d42c:	2000      	movs	r0, #0
 800d42e:	199e      	adds	r6, r3, r6
 800d430:	6126      	str	r6, [r4, #16]
 800d432:	e7c5      	b.n	800d3c0 <_scanf_chars+0x44>
 800d434:	0800e641 	.word	0x0800e641

0800d438 <_scanf_i>:
 800d438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43a:	000c      	movs	r4, r1
 800d43c:	b08d      	sub	sp, #52	; 0x34
 800d43e:	9302      	str	r3, [sp, #8]
 800d440:	4b79      	ldr	r3, [pc, #484]	; (800d628 <_scanf_i+0x1f0>)
 800d442:	0016      	movs	r6, r2
 800d444:	9005      	str	r0, [sp, #20]
 800d446:	aa09      	add	r2, sp, #36	; 0x24
 800d448:	cb23      	ldmia	r3!, {r0, r1, r5}
 800d44a:	c223      	stmia	r2!, {r0, r1, r5}
 800d44c:	4b77      	ldr	r3, [pc, #476]	; (800d62c <_scanf_i+0x1f4>)
 800d44e:	9306      	str	r3, [sp, #24]
 800d450:	69a3      	ldr	r3, [r4, #24]
 800d452:	2b03      	cmp	r3, #3
 800d454:	d001      	beq.n	800d45a <_scanf_i+0x22>
 800d456:	4b76      	ldr	r3, [pc, #472]	; (800d630 <_scanf_i+0x1f8>)
 800d458:	9306      	str	r3, [sp, #24]
 800d45a:	22ae      	movs	r2, #174	; 0xae
 800d45c:	2000      	movs	r0, #0
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	0052      	lsls	r2, r2, #1
 800d462:	1e59      	subs	r1, r3, #1
 800d464:	9004      	str	r0, [sp, #16]
 800d466:	4291      	cmp	r1, r2
 800d468:	d905      	bls.n	800d476 <_scanf_i+0x3e>
 800d46a:	3b5e      	subs	r3, #94	; 0x5e
 800d46c:	3bff      	subs	r3, #255	; 0xff
 800d46e:	9304      	str	r3, [sp, #16]
 800d470:	235e      	movs	r3, #94	; 0x5e
 800d472:	33ff      	adds	r3, #255	; 0xff
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	0023      	movs	r3, r4
 800d478:	331c      	adds	r3, #28
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	23d0      	movs	r3, #208	; 0xd0
 800d47e:	2700      	movs	r7, #0
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	4313      	orrs	r3, r2
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	9b01      	ldr	r3, [sp, #4]
 800d48a:	9303      	str	r3, [sp, #12]
 800d48c:	6833      	ldr	r3, [r6, #0]
 800d48e:	a809      	add	r0, sp, #36	; 0x24
 800d490:	7819      	ldrb	r1, [r3, #0]
 800d492:	00bb      	lsls	r3, r7, #2
 800d494:	2202      	movs	r2, #2
 800d496:	5818      	ldr	r0, [r3, r0]
 800d498:	f7fe fea6 	bl	800c1e8 <memchr>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d02b      	beq.n	800d4f8 <_scanf_i+0xc0>
 800d4a0:	2f01      	cmp	r7, #1
 800d4a2:	d162      	bne.n	800d56a <_scanf_i+0x132>
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <_scanf_i+0x80>
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	6822      	ldr	r2, [r4, #0]
 800d4ae:	6063      	str	r3, [r4, #4]
 800d4b0:	33f9      	adds	r3, #249	; 0xf9
 800d4b2:	33ff      	adds	r3, #255	; 0xff
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	6023      	str	r3, [r4, #0]
 800d4b8:	4b5e      	ldr	r3, [pc, #376]	; (800d634 <_scanf_i+0x1fc>)
 800d4ba:	6822      	ldr	r2, [r4, #0]
 800d4bc:	4013      	ands	r3, r2
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	68a3      	ldr	r3, [r4, #8]
 800d4c2:	1e5a      	subs	r2, r3, #1
 800d4c4:	60a2      	str	r2, [r4, #8]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d016      	beq.n	800d4f8 <_scanf_i+0xc0>
 800d4ca:	6833      	ldr	r3, [r6, #0]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	6032      	str	r2, [r6, #0]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	9a03      	ldr	r2, [sp, #12]
 800d4d4:	7013      	strb	r3, [r2, #0]
 800d4d6:	6873      	ldr	r3, [r6, #4]
 800d4d8:	1c55      	adds	r5, r2, #1
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	6073      	str	r3, [r6, #4]
 800d4de:	9503      	str	r5, [sp, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	dc09      	bgt.n	800d4f8 <_scanf_i+0xc0>
 800d4e4:	23c0      	movs	r3, #192	; 0xc0
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	58e3      	ldr	r3, [r4, r3]
 800d4ea:	0031      	movs	r1, r6
 800d4ec:	9805      	ldr	r0, [sp, #20]
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	4798      	blx	r3
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d000      	beq.n	800d4f8 <_scanf_i+0xc0>
 800d4f6:	e081      	b.n	800d5fc <_scanf_i+0x1c4>
 800d4f8:	3701      	adds	r7, #1
 800d4fa:	2f03      	cmp	r7, #3
 800d4fc:	d1c6      	bne.n	800d48c <_scanf_i+0x54>
 800d4fe:	6863      	ldr	r3, [r4, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <_scanf_i+0xd0>
 800d504:	330a      	adds	r3, #10
 800d506:	6063      	str	r3, [r4, #4]
 800d508:	2110      	movs	r1, #16
 800d50a:	2700      	movs	r7, #0
 800d50c:	6863      	ldr	r3, [r4, #4]
 800d50e:	6960      	ldr	r0, [r4, #20]
 800d510:	1ac9      	subs	r1, r1, r3
 800d512:	4b49      	ldr	r3, [pc, #292]	; (800d638 <_scanf_i+0x200>)
 800d514:	18c9      	adds	r1, r1, r3
 800d516:	f000 f8bf 	bl	800d698 <__sccl>
 800d51a:	9d03      	ldr	r5, [sp, #12]
 800d51c:	68a3      	ldr	r3, [r4, #8]
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	9303      	str	r3, [sp, #12]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d041      	beq.n	800d5aa <_scanf_i+0x172>
 800d526:	6831      	ldr	r1, [r6, #0]
 800d528:	6963      	ldr	r3, [r4, #20]
 800d52a:	7808      	ldrb	r0, [r1, #0]
 800d52c:	5c1b      	ldrb	r3, [r3, r0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d03b      	beq.n	800d5aa <_scanf_i+0x172>
 800d532:	2830      	cmp	r0, #48	; 0x30
 800d534:	d129      	bne.n	800d58a <_scanf_i+0x152>
 800d536:	2380      	movs	r3, #128	; 0x80
 800d538:	011b      	lsls	r3, r3, #4
 800d53a:	421a      	tst	r2, r3
 800d53c:	d025      	beq.n	800d58a <_scanf_i+0x152>
 800d53e:	9b04      	ldr	r3, [sp, #16]
 800d540:	3701      	adds	r7, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d005      	beq.n	800d552 <_scanf_i+0x11a>
 800d546:	001a      	movs	r2, r3
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	3a01      	subs	r2, #1
 800d54c:	3301      	adds	r3, #1
 800d54e:	9204      	str	r2, [sp, #16]
 800d550:	60a3      	str	r3, [r4, #8]
 800d552:	6873      	ldr	r3, [r6, #4]
 800d554:	3b01      	subs	r3, #1
 800d556:	6073      	str	r3, [r6, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	dd1d      	ble.n	800d598 <_scanf_i+0x160>
 800d55c:	6833      	ldr	r3, [r6, #0]
 800d55e:	3301      	adds	r3, #1
 800d560:	6033      	str	r3, [r6, #0]
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	3b01      	subs	r3, #1
 800d566:	60a3      	str	r3, [r4, #8]
 800d568:	e7d8      	b.n	800d51c <_scanf_i+0xe4>
 800d56a:	2f02      	cmp	r7, #2
 800d56c:	d1a8      	bne.n	800d4c0 <_scanf_i+0x88>
 800d56e:	21c0      	movs	r1, #192	; 0xc0
 800d570:	2380      	movs	r3, #128	; 0x80
 800d572:	6822      	ldr	r2, [r4, #0]
 800d574:	00c9      	lsls	r1, r1, #3
 800d576:	4011      	ands	r1, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4299      	cmp	r1, r3
 800d57c:	d1bf      	bne.n	800d4fe <_scanf_i+0xc6>
 800d57e:	3bf1      	subs	r3, #241	; 0xf1
 800d580:	3bff      	subs	r3, #255	; 0xff
 800d582:	6063      	str	r3, [r4, #4]
 800d584:	33f0      	adds	r3, #240	; 0xf0
 800d586:	4313      	orrs	r3, r2
 800d588:	e799      	b.n	800d4be <_scanf_i+0x86>
 800d58a:	4b2c      	ldr	r3, [pc, #176]	; (800d63c <_scanf_i+0x204>)
 800d58c:	4013      	ands	r3, r2
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	780b      	ldrb	r3, [r1, #0]
 800d592:	702b      	strb	r3, [r5, #0]
 800d594:	3501      	adds	r5, #1
 800d596:	e7dc      	b.n	800d552 <_scanf_i+0x11a>
 800d598:	23c0      	movs	r3, #192	; 0xc0
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	58e3      	ldr	r3, [r4, r3]
 800d59e:	0031      	movs	r1, r6
 800d5a0:	9805      	ldr	r0, [sp, #20]
 800d5a2:	9303      	str	r3, [sp, #12]
 800d5a4:	4798      	blx	r3
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d0db      	beq.n	800d562 <_scanf_i+0x12a>
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	05db      	lsls	r3, r3, #23
 800d5ae:	d50e      	bpl.n	800d5ce <_scanf_i+0x196>
 800d5b0:	9b01      	ldr	r3, [sp, #4]
 800d5b2:	429d      	cmp	r5, r3
 800d5b4:	d907      	bls.n	800d5c6 <_scanf_i+0x18e>
 800d5b6:	23be      	movs	r3, #190	; 0xbe
 800d5b8:	3d01      	subs	r5, #1
 800d5ba:	005b      	lsls	r3, r3, #1
 800d5bc:	0032      	movs	r2, r6
 800d5be:	7829      	ldrb	r1, [r5, #0]
 800d5c0:	58e3      	ldr	r3, [r4, r3]
 800d5c2:	9805      	ldr	r0, [sp, #20]
 800d5c4:	4798      	blx	r3
 800d5c6:	9b01      	ldr	r3, [sp, #4]
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	429d      	cmp	r5, r3
 800d5cc:	d029      	beq.n	800d622 <_scanf_i+0x1ea>
 800d5ce:	6821      	ldr	r1, [r4, #0]
 800d5d0:	2310      	movs	r3, #16
 800d5d2:	000a      	movs	r2, r1
 800d5d4:	401a      	ands	r2, r3
 800d5d6:	4219      	tst	r1, r3
 800d5d8:	d11c      	bne.n	800d614 <_scanf_i+0x1dc>
 800d5da:	702a      	strb	r2, [r5, #0]
 800d5dc:	6863      	ldr	r3, [r4, #4]
 800d5de:	9901      	ldr	r1, [sp, #4]
 800d5e0:	9805      	ldr	r0, [sp, #20]
 800d5e2:	9e06      	ldr	r6, [sp, #24]
 800d5e4:	47b0      	blx	r6
 800d5e6:	9b02      	ldr	r3, [sp, #8]
 800d5e8:	6821      	ldr	r1, [r4, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	068a      	lsls	r2, r1, #26
 800d5ee:	d507      	bpl.n	800d600 <_scanf_i+0x1c8>
 800d5f0:	1d1a      	adds	r2, r3, #4
 800d5f2:	9902      	ldr	r1, [sp, #8]
 800d5f4:	600a      	str	r2, [r1, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6018      	str	r0, [r3, #0]
 800d5fa:	e008      	b.n	800d60e <_scanf_i+0x1d6>
 800d5fc:	2700      	movs	r7, #0
 800d5fe:	e7d4      	b.n	800d5aa <_scanf_i+0x172>
 800d600:	1d1a      	adds	r2, r3, #4
 800d602:	07ce      	lsls	r6, r1, #31
 800d604:	d5f5      	bpl.n	800d5f2 <_scanf_i+0x1ba>
 800d606:	9902      	ldr	r1, [sp, #8]
 800d608:	600a      	str	r2, [r1, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	8018      	strh	r0, [r3, #0]
 800d60e:	68e3      	ldr	r3, [r4, #12]
 800d610:	3301      	adds	r3, #1
 800d612:	60e3      	str	r3, [r4, #12]
 800d614:	2000      	movs	r0, #0
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	1aed      	subs	r5, r5, r3
 800d61a:	6923      	ldr	r3, [r4, #16]
 800d61c:	19ef      	adds	r7, r5, r7
 800d61e:	19df      	adds	r7, r3, r7
 800d620:	6127      	str	r7, [r4, #16]
 800d622:	b00d      	add	sp, #52	; 0x34
 800d624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d626:	46c0      	nop			; (mov r8, r8)
 800d628:	0800e490 	.word	0x0800e490
 800d62c:	0800acf5 	.word	0x0800acf5
 800d630:	0800d84d 	.word	0x0800d84d
 800d634:	fffffaff 	.word	0xfffffaff
 800d638:	0800e9ce 	.word	0x0800e9ce
 800d63c:	fffff6ff 	.word	0xfffff6ff

0800d640 <_read_r>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	0004      	movs	r4, r0
 800d644:	0008      	movs	r0, r1
 800d646:	0011      	movs	r1, r2
 800d648:	001a      	movs	r2, r3
 800d64a:	2300      	movs	r3, #0
 800d64c:	4d05      	ldr	r5, [pc, #20]	; (800d664 <_read_r+0x24>)
 800d64e:	602b      	str	r3, [r5, #0]
 800d650:	f7f7 faea 	bl	8004c28 <_read>
 800d654:	1c43      	adds	r3, r0, #1
 800d656:	d103      	bne.n	800d660 <_read_r+0x20>
 800d658:	682b      	ldr	r3, [r5, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d000      	beq.n	800d660 <_read_r+0x20>
 800d65e:	6023      	str	r3, [r4, #0]
 800d660:	bd70      	pop	{r4, r5, r6, pc}
 800d662:	46c0      	nop			; (mov r8, r8)
 800d664:	20000614 	.word	0x20000614

0800d668 <nan>:
 800d668:	2000      	movs	r0, #0
 800d66a:	4901      	ldr	r1, [pc, #4]	; (800d670 <nan+0x8>)
 800d66c:	4770      	bx	lr
 800d66e:	46c0      	nop			; (mov r8, r8)
 800d670:	7ff80000 	.word	0x7ff80000

0800d674 <_sbrk_r>:
 800d674:	2300      	movs	r3, #0
 800d676:	b570      	push	{r4, r5, r6, lr}
 800d678:	4d06      	ldr	r5, [pc, #24]	; (800d694 <_sbrk_r+0x20>)
 800d67a:	0004      	movs	r4, r0
 800d67c:	0008      	movs	r0, r1
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f7f7 fb38 	bl	8004cf4 <_sbrk>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d103      	bne.n	800d690 <_sbrk_r+0x1c>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d000      	beq.n	800d690 <_sbrk_r+0x1c>
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	bd70      	pop	{r4, r5, r6, pc}
 800d692:	46c0      	nop			; (mov r8, r8)
 800d694:	20000614 	.word	0x20000614

0800d698 <__sccl>:
 800d698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d69a:	780b      	ldrb	r3, [r1, #0]
 800d69c:	0004      	movs	r4, r0
 800d69e:	2b5e      	cmp	r3, #94	; 0x5e
 800d6a0:	d00c      	beq.n	800d6bc <__sccl+0x24>
 800d6a2:	1c48      	adds	r0, r1, #1
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	0022      	movs	r2, r4
 800d6a8:	1c65      	adds	r5, r4, #1
 800d6aa:	35ff      	adds	r5, #255	; 0xff
 800d6ac:	7011      	strb	r1, [r2, #0]
 800d6ae:	3201      	adds	r2, #1
 800d6b0:	42aa      	cmp	r2, r5
 800d6b2:	d1fb      	bne.n	800d6ac <__sccl+0x14>
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d105      	bne.n	800d6c4 <__sccl+0x2c>
 800d6b8:	3801      	subs	r0, #1
 800d6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6bc:	784b      	ldrb	r3, [r1, #1]
 800d6be:	1c88      	adds	r0, r1, #2
 800d6c0:	2101      	movs	r1, #1
 800d6c2:	e7f0      	b.n	800d6a6 <__sccl+0xe>
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	262d      	movs	r6, #45	; 0x2d
 800d6c8:	4051      	eors	r1, r2
 800d6ca:	0002      	movs	r2, r0
 800d6cc:	54e1      	strb	r1, [r4, r3]
 800d6ce:	7815      	ldrb	r5, [r2, #0]
 800d6d0:	1c50      	adds	r0, r2, #1
 800d6d2:	2d2d      	cmp	r5, #45	; 0x2d
 800d6d4:	d009      	beq.n	800d6ea <__sccl+0x52>
 800d6d6:	2d5d      	cmp	r5, #93	; 0x5d
 800d6d8:	d0ef      	beq.n	800d6ba <__sccl+0x22>
 800d6da:	2d00      	cmp	r5, #0
 800d6dc:	d101      	bne.n	800d6e2 <__sccl+0x4a>
 800d6de:	0010      	movs	r0, r2
 800d6e0:	e7eb      	b.n	800d6ba <__sccl+0x22>
 800d6e2:	002b      	movs	r3, r5
 800d6e4:	e7f1      	b.n	800d6ca <__sccl+0x32>
 800d6e6:	0033      	movs	r3, r6
 800d6e8:	e7ef      	b.n	800d6ca <__sccl+0x32>
 800d6ea:	7855      	ldrb	r5, [r2, #1]
 800d6ec:	2d5d      	cmp	r5, #93	; 0x5d
 800d6ee:	d0fa      	beq.n	800d6e6 <__sccl+0x4e>
 800d6f0:	42ab      	cmp	r3, r5
 800d6f2:	dcf8      	bgt.n	800d6e6 <__sccl+0x4e>
 800d6f4:	0018      	movs	r0, r3
 800d6f6:	3202      	adds	r2, #2
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	5421      	strb	r1, [r4, r0]
 800d6fc:	4285      	cmp	r5, r0
 800d6fe:	dcfb      	bgt.n	800d6f8 <__sccl+0x60>
 800d700:	2000      	movs	r0, #0
 800d702:	1c5f      	adds	r7, r3, #1
 800d704:	42ab      	cmp	r3, r5
 800d706:	da01      	bge.n	800d70c <__sccl+0x74>
 800d708:	1ae8      	subs	r0, r5, r3
 800d70a:	3801      	subs	r0, #1
 800d70c:	183b      	adds	r3, r7, r0
 800d70e:	e7de      	b.n	800d6ce <__sccl+0x36>

0800d710 <strncmp>:
 800d710:	b530      	push	{r4, r5, lr}
 800d712:	0005      	movs	r5, r0
 800d714:	1e10      	subs	r0, r2, #0
 800d716:	d00b      	beq.n	800d730 <strncmp+0x20>
 800d718:	2400      	movs	r4, #0
 800d71a:	3a01      	subs	r2, #1
 800d71c:	5d2b      	ldrb	r3, [r5, r4]
 800d71e:	5d08      	ldrb	r0, [r1, r4]
 800d720:	4283      	cmp	r3, r0
 800d722:	d104      	bne.n	800d72e <strncmp+0x1e>
 800d724:	4294      	cmp	r4, r2
 800d726:	d002      	beq.n	800d72e <strncmp+0x1e>
 800d728:	3401      	adds	r4, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1f6      	bne.n	800d71c <strncmp+0xc>
 800d72e:	1a18      	subs	r0, r3, r0
 800d730:	bd30      	pop	{r4, r5, pc}
	...

0800d734 <_strtoul_l.isra.0>:
 800d734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d736:	001e      	movs	r6, r3
 800d738:	4b43      	ldr	r3, [pc, #268]	; (800d848 <_strtoul_l.isra.0+0x114>)
 800d73a:	b087      	sub	sp, #28
 800d73c:	000f      	movs	r7, r1
 800d73e:	9101      	str	r1, [sp, #4]
 800d740:	469c      	mov	ip, r3
 800d742:	2108      	movs	r1, #8
 800d744:	9005      	str	r0, [sp, #20]
 800d746:	9202      	str	r2, [sp, #8]
 800d748:	003b      	movs	r3, r7
 800d74a:	4662      	mov	r2, ip
 800d74c:	781c      	ldrb	r4, [r3, #0]
 800d74e:	1c7d      	adds	r5, r7, #1
 800d750:	5d10      	ldrb	r0, [r2, r4]
 800d752:	002f      	movs	r7, r5
 800d754:	0002      	movs	r2, r0
 800d756:	400a      	ands	r2, r1
 800d758:	4208      	tst	r0, r1
 800d75a:	d1f5      	bne.n	800d748 <_strtoul_l.isra.0+0x14>
 800d75c:	2c2d      	cmp	r4, #45	; 0x2d
 800d75e:	d13a      	bne.n	800d7d6 <_strtoul_l.isra.0+0xa2>
 800d760:	2701      	movs	r7, #1
 800d762:	782c      	ldrb	r4, [r5, #0]
 800d764:	1c9d      	adds	r5, r3, #2
 800d766:	2e00      	cmp	r6, #0
 800d768:	d069      	beq.n	800d83e <_strtoul_l.isra.0+0x10a>
 800d76a:	2e10      	cmp	r6, #16
 800d76c:	d109      	bne.n	800d782 <_strtoul_l.isra.0+0x4e>
 800d76e:	2c30      	cmp	r4, #48	; 0x30
 800d770:	d107      	bne.n	800d782 <_strtoul_l.isra.0+0x4e>
 800d772:	2220      	movs	r2, #32
 800d774:	782b      	ldrb	r3, [r5, #0]
 800d776:	4393      	bics	r3, r2
 800d778:	2b58      	cmp	r3, #88	; 0x58
 800d77a:	d15b      	bne.n	800d834 <_strtoul_l.isra.0+0x100>
 800d77c:	2610      	movs	r6, #16
 800d77e:	786c      	ldrb	r4, [r5, #1]
 800d780:	3502      	adds	r5, #2
 800d782:	2001      	movs	r0, #1
 800d784:	0031      	movs	r1, r6
 800d786:	4240      	negs	r0, r0
 800d788:	f7f2 fce4 	bl	8000154 <__udivsi3>
 800d78c:	9003      	str	r0, [sp, #12]
 800d78e:	2001      	movs	r0, #1
 800d790:	0031      	movs	r1, r6
 800d792:	4240      	negs	r0, r0
 800d794:	f7f2 fd64 	bl	8000260 <__aeabi_uidivmod>
 800d798:	2300      	movs	r3, #0
 800d79a:	9104      	str	r1, [sp, #16]
 800d79c:	2101      	movs	r1, #1
 800d79e:	2201      	movs	r2, #1
 800d7a0:	0018      	movs	r0, r3
 800d7a2:	468c      	mov	ip, r1
 800d7a4:	4252      	negs	r2, r2
 800d7a6:	0021      	movs	r1, r4
 800d7a8:	3930      	subs	r1, #48	; 0x30
 800d7aa:	2909      	cmp	r1, #9
 800d7ac:	d81a      	bhi.n	800d7e4 <_strtoul_l.isra.0+0xb0>
 800d7ae:	000c      	movs	r4, r1
 800d7b0:	42a6      	cmp	r6, r4
 800d7b2:	dd25      	ble.n	800d800 <_strtoul_l.isra.0+0xcc>
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	db21      	blt.n	800d7fc <_strtoul_l.isra.0+0xc8>
 800d7b8:	9903      	ldr	r1, [sp, #12]
 800d7ba:	0013      	movs	r3, r2
 800d7bc:	4281      	cmp	r1, r0
 800d7be:	d307      	bcc.n	800d7d0 <_strtoul_l.isra.0+0x9c>
 800d7c0:	d103      	bne.n	800d7ca <_strtoul_l.isra.0+0x96>
 800d7c2:	9904      	ldr	r1, [sp, #16]
 800d7c4:	0013      	movs	r3, r2
 800d7c6:	42a1      	cmp	r1, r4
 800d7c8:	db02      	blt.n	800d7d0 <_strtoul_l.isra.0+0x9c>
 800d7ca:	4663      	mov	r3, ip
 800d7cc:	4370      	muls	r0, r6
 800d7ce:	1820      	adds	r0, r4, r0
 800d7d0:	782c      	ldrb	r4, [r5, #0]
 800d7d2:	3501      	adds	r5, #1
 800d7d4:	e7e7      	b.n	800d7a6 <_strtoul_l.isra.0+0x72>
 800d7d6:	2c2b      	cmp	r4, #43	; 0x2b
 800d7d8:	d001      	beq.n	800d7de <_strtoul_l.isra.0+0xaa>
 800d7da:	0017      	movs	r7, r2
 800d7dc:	e7c3      	b.n	800d766 <_strtoul_l.isra.0+0x32>
 800d7de:	782c      	ldrb	r4, [r5, #0]
 800d7e0:	1c9d      	adds	r5, r3, #2
 800d7e2:	e7fa      	b.n	800d7da <_strtoul_l.isra.0+0xa6>
 800d7e4:	0021      	movs	r1, r4
 800d7e6:	3941      	subs	r1, #65	; 0x41
 800d7e8:	2919      	cmp	r1, #25
 800d7ea:	d801      	bhi.n	800d7f0 <_strtoul_l.isra.0+0xbc>
 800d7ec:	3c37      	subs	r4, #55	; 0x37
 800d7ee:	e7df      	b.n	800d7b0 <_strtoul_l.isra.0+0x7c>
 800d7f0:	0021      	movs	r1, r4
 800d7f2:	3961      	subs	r1, #97	; 0x61
 800d7f4:	2919      	cmp	r1, #25
 800d7f6:	d803      	bhi.n	800d800 <_strtoul_l.isra.0+0xcc>
 800d7f8:	3c57      	subs	r4, #87	; 0x57
 800d7fa:	e7d9      	b.n	800d7b0 <_strtoul_l.isra.0+0x7c>
 800d7fc:	0013      	movs	r3, r2
 800d7fe:	e7e7      	b.n	800d7d0 <_strtoul_l.isra.0+0x9c>
 800d800:	2b00      	cmp	r3, #0
 800d802:	da09      	bge.n	800d818 <_strtoul_l.isra.0+0xe4>
 800d804:	2322      	movs	r3, #34	; 0x22
 800d806:	2001      	movs	r0, #1
 800d808:	9a05      	ldr	r2, [sp, #20]
 800d80a:	4240      	negs	r0, r0
 800d80c:	6013      	str	r3, [r2, #0]
 800d80e:	9b02      	ldr	r3, [sp, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d109      	bne.n	800d828 <_strtoul_l.isra.0+0xf4>
 800d814:	b007      	add	sp, #28
 800d816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d818:	2f00      	cmp	r7, #0
 800d81a:	d000      	beq.n	800d81e <_strtoul_l.isra.0+0xea>
 800d81c:	4240      	negs	r0, r0
 800d81e:	9a02      	ldr	r2, [sp, #8]
 800d820:	2a00      	cmp	r2, #0
 800d822:	d0f7      	beq.n	800d814 <_strtoul_l.isra.0+0xe0>
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <_strtoul_l.isra.0+0xf8>
 800d828:	1e6b      	subs	r3, r5, #1
 800d82a:	9301      	str	r3, [sp, #4]
 800d82c:	9b02      	ldr	r3, [sp, #8]
 800d82e:	9a01      	ldr	r2, [sp, #4]
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	e7ef      	b.n	800d814 <_strtoul_l.isra.0+0xe0>
 800d834:	2430      	movs	r4, #48	; 0x30
 800d836:	2e00      	cmp	r6, #0
 800d838:	d1a3      	bne.n	800d782 <_strtoul_l.isra.0+0x4e>
 800d83a:	3608      	adds	r6, #8
 800d83c:	e7a1      	b.n	800d782 <_strtoul_l.isra.0+0x4e>
 800d83e:	2c30      	cmp	r4, #48	; 0x30
 800d840:	d097      	beq.n	800d772 <_strtoul_l.isra.0+0x3e>
 800d842:	260a      	movs	r6, #10
 800d844:	e79d      	b.n	800d782 <_strtoul_l.isra.0+0x4e>
 800d846:	46c0      	nop			; (mov r8, r8)
 800d848:	0800e641 	.word	0x0800e641

0800d84c <_strtoul_r>:
 800d84c:	b510      	push	{r4, lr}
 800d84e:	f7ff ff71 	bl	800d734 <_strtoul_l.isra.0>
 800d852:	bd10      	pop	{r4, pc}

0800d854 <__submore>:
 800d854:	000b      	movs	r3, r1
 800d856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d858:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d85a:	3344      	adds	r3, #68	; 0x44
 800d85c:	000c      	movs	r4, r1
 800d85e:	429d      	cmp	r5, r3
 800d860:	d11c      	bne.n	800d89c <__submore+0x48>
 800d862:	2680      	movs	r6, #128	; 0x80
 800d864:	00f6      	lsls	r6, r6, #3
 800d866:	0031      	movs	r1, r6
 800d868:	f7ff f9f4 	bl	800cc54 <_malloc_r>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d102      	bne.n	800d876 <__submore+0x22>
 800d870:	2001      	movs	r0, #1
 800d872:	4240      	negs	r0, r0
 800d874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d876:	0023      	movs	r3, r4
 800d878:	6360      	str	r0, [r4, #52]	; 0x34
 800d87a:	63a6      	str	r6, [r4, #56]	; 0x38
 800d87c:	3346      	adds	r3, #70	; 0x46
 800d87e:	781a      	ldrb	r2, [r3, #0]
 800d880:	4b10      	ldr	r3, [pc, #64]	; (800d8c4 <__submore+0x70>)
 800d882:	54c2      	strb	r2, [r0, r3]
 800d884:	0023      	movs	r3, r4
 800d886:	3345      	adds	r3, #69	; 0x45
 800d888:	781a      	ldrb	r2, [r3, #0]
 800d88a:	4b0f      	ldr	r3, [pc, #60]	; (800d8c8 <__submore+0x74>)
 800d88c:	54c2      	strb	r2, [r0, r3]
 800d88e:	782a      	ldrb	r2, [r5, #0]
 800d890:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <__submore+0x78>)
 800d892:	54c2      	strb	r2, [r0, r3]
 800d894:	18c0      	adds	r0, r0, r3
 800d896:	6020      	str	r0, [r4, #0]
 800d898:	2000      	movs	r0, #0
 800d89a:	e7eb      	b.n	800d874 <__submore+0x20>
 800d89c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800d89e:	0029      	movs	r1, r5
 800d8a0:	0073      	lsls	r3, r6, #1
 800d8a2:	001a      	movs	r2, r3
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	f000 fa43 	bl	800dd30 <_realloc_r>
 800d8aa:	1e05      	subs	r5, r0, #0
 800d8ac:	d0e0      	beq.n	800d870 <__submore+0x1c>
 800d8ae:	1987      	adds	r7, r0, r6
 800d8b0:	0001      	movs	r1, r0
 800d8b2:	0032      	movs	r2, r6
 800d8b4:	0038      	movs	r0, r7
 800d8b6:	f7fe fca2 	bl	800c1fe <memcpy>
 800d8ba:	9b01      	ldr	r3, [sp, #4]
 800d8bc:	6027      	str	r7, [r4, #0]
 800d8be:	6365      	str	r5, [r4, #52]	; 0x34
 800d8c0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d8c2:	e7e9      	b.n	800d898 <__submore+0x44>
 800d8c4:	000003ff 	.word	0x000003ff
 800d8c8:	000003fe 	.word	0x000003fe
 800d8cc:	000003fd 	.word	0x000003fd

0800d8d0 <__ascii_wctomb>:
 800d8d0:	0003      	movs	r3, r0
 800d8d2:	1e08      	subs	r0, r1, #0
 800d8d4:	d005      	beq.n	800d8e2 <__ascii_wctomb+0x12>
 800d8d6:	2aff      	cmp	r2, #255	; 0xff
 800d8d8:	d904      	bls.n	800d8e4 <__ascii_wctomb+0x14>
 800d8da:	228a      	movs	r2, #138	; 0x8a
 800d8dc:	2001      	movs	r0, #1
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	4240      	negs	r0, r0
 800d8e2:	4770      	bx	lr
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	700a      	strb	r2, [r1, #0]
 800d8e8:	e7fb      	b.n	800d8e2 <__ascii_wctomb+0x12>
	...

0800d8ec <__assert_func>:
 800d8ec:	b530      	push	{r4, r5, lr}
 800d8ee:	0014      	movs	r4, r2
 800d8f0:	001a      	movs	r2, r3
 800d8f2:	4b09      	ldr	r3, [pc, #36]	; (800d918 <__assert_func+0x2c>)
 800d8f4:	0005      	movs	r5, r0
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	b085      	sub	sp, #20
 800d8fa:	68d8      	ldr	r0, [r3, #12]
 800d8fc:	4b07      	ldr	r3, [pc, #28]	; (800d91c <__assert_func+0x30>)
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	d101      	bne.n	800d906 <__assert_func+0x1a>
 800d902:	4b07      	ldr	r3, [pc, #28]	; (800d920 <__assert_func+0x34>)
 800d904:	001c      	movs	r4, r3
 800d906:	9301      	str	r3, [sp, #4]
 800d908:	9100      	str	r1, [sp, #0]
 800d90a:	002b      	movs	r3, r5
 800d90c:	4905      	ldr	r1, [pc, #20]	; (800d924 <__assert_func+0x38>)
 800d90e:	9402      	str	r4, [sp, #8]
 800d910:	f000 f9b8 	bl	800dc84 <fiprintf>
 800d914:	f000 fc62 	bl	800e1dc <abort>
 800d918:	2000000c 	.word	0x2000000c
 800d91c:	0800e9e0 	.word	0x0800e9e0
 800d920:	0800ea1b 	.word	0x0800ea1b
 800d924:	0800e9ed 	.word	0x0800e9ed

0800d928 <__sflush_r>:
 800d928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d92a:	898b      	ldrh	r3, [r1, #12]
 800d92c:	0005      	movs	r5, r0
 800d92e:	000c      	movs	r4, r1
 800d930:	071a      	lsls	r2, r3, #28
 800d932:	d45f      	bmi.n	800d9f4 <__sflush_r+0xcc>
 800d934:	684a      	ldr	r2, [r1, #4]
 800d936:	2a00      	cmp	r2, #0
 800d938:	dc04      	bgt.n	800d944 <__sflush_r+0x1c>
 800d93a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d93c:	2a00      	cmp	r2, #0
 800d93e:	dc01      	bgt.n	800d944 <__sflush_r+0x1c>
 800d940:	2000      	movs	r0, #0
 800d942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d944:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d946:	2f00      	cmp	r7, #0
 800d948:	d0fa      	beq.n	800d940 <__sflush_r+0x18>
 800d94a:	2200      	movs	r2, #0
 800d94c:	2180      	movs	r1, #128	; 0x80
 800d94e:	682e      	ldr	r6, [r5, #0]
 800d950:	602a      	str	r2, [r5, #0]
 800d952:	001a      	movs	r2, r3
 800d954:	0149      	lsls	r1, r1, #5
 800d956:	400a      	ands	r2, r1
 800d958:	420b      	tst	r3, r1
 800d95a:	d034      	beq.n	800d9c6 <__sflush_r+0x9e>
 800d95c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	075b      	lsls	r3, r3, #29
 800d962:	d506      	bpl.n	800d972 <__sflush_r+0x4a>
 800d964:	6863      	ldr	r3, [r4, #4]
 800d966:	1ac0      	subs	r0, r0, r3
 800d968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <__sflush_r+0x4a>
 800d96e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d970:	1ac0      	subs	r0, r0, r3
 800d972:	0002      	movs	r2, r0
 800d974:	6a21      	ldr	r1, [r4, #32]
 800d976:	2300      	movs	r3, #0
 800d978:	0028      	movs	r0, r5
 800d97a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d97c:	47b8      	blx	r7
 800d97e:	89a1      	ldrh	r1, [r4, #12]
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d106      	bne.n	800d992 <__sflush_r+0x6a>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	2b1d      	cmp	r3, #29
 800d988:	d831      	bhi.n	800d9ee <__sflush_r+0xc6>
 800d98a:	4a2c      	ldr	r2, [pc, #176]	; (800da3c <__sflush_r+0x114>)
 800d98c:	40da      	lsrs	r2, r3
 800d98e:	07d3      	lsls	r3, r2, #31
 800d990:	d52d      	bpl.n	800d9ee <__sflush_r+0xc6>
 800d992:	2300      	movs	r3, #0
 800d994:	6063      	str	r3, [r4, #4]
 800d996:	6923      	ldr	r3, [r4, #16]
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	04cb      	lsls	r3, r1, #19
 800d99c:	d505      	bpl.n	800d9aa <__sflush_r+0x82>
 800d99e:	1c43      	adds	r3, r0, #1
 800d9a0:	d102      	bne.n	800d9a8 <__sflush_r+0x80>
 800d9a2:	682b      	ldr	r3, [r5, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d100      	bne.n	800d9aa <__sflush_r+0x82>
 800d9a8:	6560      	str	r0, [r4, #84]	; 0x54
 800d9aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9ac:	602e      	str	r6, [r5, #0]
 800d9ae:	2900      	cmp	r1, #0
 800d9b0:	d0c6      	beq.n	800d940 <__sflush_r+0x18>
 800d9b2:	0023      	movs	r3, r4
 800d9b4:	3344      	adds	r3, #68	; 0x44
 800d9b6:	4299      	cmp	r1, r3
 800d9b8:	d002      	beq.n	800d9c0 <__sflush_r+0x98>
 800d9ba:	0028      	movs	r0, r5
 800d9bc:	f7ff f900 	bl	800cbc0 <_free_r>
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	6360      	str	r0, [r4, #52]	; 0x34
 800d9c4:	e7bd      	b.n	800d942 <__sflush_r+0x1a>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	0028      	movs	r0, r5
 800d9ca:	6a21      	ldr	r1, [r4, #32]
 800d9cc:	47b8      	blx	r7
 800d9ce:	1c43      	adds	r3, r0, #1
 800d9d0:	d1c5      	bne.n	800d95e <__sflush_r+0x36>
 800d9d2:	682b      	ldr	r3, [r5, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0c2      	beq.n	800d95e <__sflush_r+0x36>
 800d9d8:	2b1d      	cmp	r3, #29
 800d9da:	d001      	beq.n	800d9e0 <__sflush_r+0xb8>
 800d9dc:	2b16      	cmp	r3, #22
 800d9de:	d101      	bne.n	800d9e4 <__sflush_r+0xbc>
 800d9e0:	602e      	str	r6, [r5, #0]
 800d9e2:	e7ad      	b.n	800d940 <__sflush_r+0x18>
 800d9e4:	2340      	movs	r3, #64	; 0x40
 800d9e6:	89a2      	ldrh	r2, [r4, #12]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	81a3      	strh	r3, [r4, #12]
 800d9ec:	e7a9      	b.n	800d942 <__sflush_r+0x1a>
 800d9ee:	2340      	movs	r3, #64	; 0x40
 800d9f0:	430b      	orrs	r3, r1
 800d9f2:	e7fa      	b.n	800d9ea <__sflush_r+0xc2>
 800d9f4:	690f      	ldr	r7, [r1, #16]
 800d9f6:	2f00      	cmp	r7, #0
 800d9f8:	d0a2      	beq.n	800d940 <__sflush_r+0x18>
 800d9fa:	680a      	ldr	r2, [r1, #0]
 800d9fc:	600f      	str	r7, [r1, #0]
 800d9fe:	1bd2      	subs	r2, r2, r7
 800da00:	9201      	str	r2, [sp, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	079b      	lsls	r3, r3, #30
 800da06:	d100      	bne.n	800da0a <__sflush_r+0xe2>
 800da08:	694a      	ldr	r2, [r1, #20]
 800da0a:	60a2      	str	r2, [r4, #8]
 800da0c:	9b01      	ldr	r3, [sp, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	dc00      	bgt.n	800da14 <__sflush_r+0xec>
 800da12:	e795      	b.n	800d940 <__sflush_r+0x18>
 800da14:	003a      	movs	r2, r7
 800da16:	0028      	movs	r0, r5
 800da18:	9b01      	ldr	r3, [sp, #4]
 800da1a:	6a21      	ldr	r1, [r4, #32]
 800da1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da1e:	47b0      	blx	r6
 800da20:	2800      	cmp	r0, #0
 800da22:	dc06      	bgt.n	800da32 <__sflush_r+0x10a>
 800da24:	2340      	movs	r3, #64	; 0x40
 800da26:	2001      	movs	r0, #1
 800da28:	89a2      	ldrh	r2, [r4, #12]
 800da2a:	4240      	negs	r0, r0
 800da2c:	4313      	orrs	r3, r2
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	e787      	b.n	800d942 <__sflush_r+0x1a>
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	183f      	adds	r7, r7, r0
 800da36:	1a1b      	subs	r3, r3, r0
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	e7e7      	b.n	800da0c <__sflush_r+0xe4>
 800da3c:	20400001 	.word	0x20400001

0800da40 <_fflush_r>:
 800da40:	690b      	ldr	r3, [r1, #16]
 800da42:	b570      	push	{r4, r5, r6, lr}
 800da44:	0005      	movs	r5, r0
 800da46:	000c      	movs	r4, r1
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d102      	bne.n	800da52 <_fflush_r+0x12>
 800da4c:	2500      	movs	r5, #0
 800da4e:	0028      	movs	r0, r5
 800da50:	bd70      	pop	{r4, r5, r6, pc}
 800da52:	2800      	cmp	r0, #0
 800da54:	d004      	beq.n	800da60 <_fflush_r+0x20>
 800da56:	6983      	ldr	r3, [r0, #24]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <_fflush_r+0x20>
 800da5c:	f000 f892 	bl	800db84 <__sinit>
 800da60:	4b14      	ldr	r3, [pc, #80]	; (800dab4 <_fflush_r+0x74>)
 800da62:	429c      	cmp	r4, r3
 800da64:	d11b      	bne.n	800da9e <_fflush_r+0x5e>
 800da66:	686c      	ldr	r4, [r5, #4]
 800da68:	220c      	movs	r2, #12
 800da6a:	5ea3      	ldrsh	r3, [r4, r2]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d0ed      	beq.n	800da4c <_fflush_r+0xc>
 800da70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da72:	07d2      	lsls	r2, r2, #31
 800da74:	d404      	bmi.n	800da80 <_fflush_r+0x40>
 800da76:	059b      	lsls	r3, r3, #22
 800da78:	d402      	bmi.n	800da80 <_fflush_r+0x40>
 800da7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da7c:	f000 f933 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800da80:	0028      	movs	r0, r5
 800da82:	0021      	movs	r1, r4
 800da84:	f7ff ff50 	bl	800d928 <__sflush_r>
 800da88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da8a:	0005      	movs	r5, r0
 800da8c:	07db      	lsls	r3, r3, #31
 800da8e:	d4de      	bmi.n	800da4e <_fflush_r+0xe>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	059b      	lsls	r3, r3, #22
 800da94:	d4db      	bmi.n	800da4e <_fflush_r+0xe>
 800da96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da98:	f000 f926 	bl	800dce8 <__retarget_lock_release_recursive>
 800da9c:	e7d7      	b.n	800da4e <_fflush_r+0xe>
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <_fflush_r+0x78>)
 800daa0:	429c      	cmp	r4, r3
 800daa2:	d101      	bne.n	800daa8 <_fflush_r+0x68>
 800daa4:	68ac      	ldr	r4, [r5, #8]
 800daa6:	e7df      	b.n	800da68 <_fflush_r+0x28>
 800daa8:	4b04      	ldr	r3, [pc, #16]	; (800dabc <_fflush_r+0x7c>)
 800daaa:	429c      	cmp	r4, r3
 800daac:	d1dc      	bne.n	800da68 <_fflush_r+0x28>
 800daae:	68ec      	ldr	r4, [r5, #12]
 800dab0:	e7da      	b.n	800da68 <_fflush_r+0x28>
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	0800ea3c 	.word	0x0800ea3c
 800dab8:	0800ea5c 	.word	0x0800ea5c
 800dabc:	0800ea1c 	.word	0x0800ea1c

0800dac0 <std>:
 800dac0:	2300      	movs	r3, #0
 800dac2:	b510      	push	{r4, lr}
 800dac4:	0004      	movs	r4, r0
 800dac6:	6003      	str	r3, [r0, #0]
 800dac8:	6043      	str	r3, [r0, #4]
 800daca:	6083      	str	r3, [r0, #8]
 800dacc:	8181      	strh	r1, [r0, #12]
 800dace:	6643      	str	r3, [r0, #100]	; 0x64
 800dad0:	0019      	movs	r1, r3
 800dad2:	81c2      	strh	r2, [r0, #14]
 800dad4:	6103      	str	r3, [r0, #16]
 800dad6:	6143      	str	r3, [r0, #20]
 800dad8:	6183      	str	r3, [r0, #24]
 800dada:	2208      	movs	r2, #8
 800dadc:	305c      	adds	r0, #92	; 0x5c
 800dade:	f7fb fb0b 	bl	80090f8 <memset>
 800dae2:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <std+0x38>)
 800dae4:	6263      	str	r3, [r4, #36]	; 0x24
 800dae6:	4b05      	ldr	r3, [pc, #20]	; (800dafc <std+0x3c>)
 800dae8:	6224      	str	r4, [r4, #32]
 800daea:	62a3      	str	r3, [r4, #40]	; 0x28
 800daec:	4b04      	ldr	r3, [pc, #16]	; (800db00 <std+0x40>)
 800daee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800daf0:	4b04      	ldr	r3, [pc, #16]	; (800db04 <std+0x44>)
 800daf2:	6323      	str	r3, [r4, #48]	; 0x30
 800daf4:	bd10      	pop	{r4, pc}
 800daf6:	46c0      	nop			; (mov r8, r8)
 800daf8:	08009ea5 	.word	0x08009ea5
 800dafc:	08009ed1 	.word	0x08009ed1
 800db00:	08009f09 	.word	0x08009f09
 800db04:	08009f35 	.word	0x08009f35

0800db08 <_cleanup_r>:
 800db08:	b510      	push	{r4, lr}
 800db0a:	4902      	ldr	r1, [pc, #8]	; (800db14 <_cleanup_r+0xc>)
 800db0c:	f000 f8ca 	bl	800dca4 <_fwalk_reent>
 800db10:	bd10      	pop	{r4, pc}
 800db12:	46c0      	nop			; (mov r8, r8)
 800db14:	0800da41 	.word	0x0800da41

0800db18 <__sfmoreglue>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	2568      	movs	r5, #104	; 0x68
 800db1c:	1e4a      	subs	r2, r1, #1
 800db1e:	4355      	muls	r5, r2
 800db20:	000e      	movs	r6, r1
 800db22:	0029      	movs	r1, r5
 800db24:	3174      	adds	r1, #116	; 0x74
 800db26:	f7ff f895 	bl	800cc54 <_malloc_r>
 800db2a:	1e04      	subs	r4, r0, #0
 800db2c:	d008      	beq.n	800db40 <__sfmoreglue+0x28>
 800db2e:	2100      	movs	r1, #0
 800db30:	002a      	movs	r2, r5
 800db32:	6001      	str	r1, [r0, #0]
 800db34:	6046      	str	r6, [r0, #4]
 800db36:	300c      	adds	r0, #12
 800db38:	60a0      	str	r0, [r4, #8]
 800db3a:	3268      	adds	r2, #104	; 0x68
 800db3c:	f7fb fadc 	bl	80090f8 <memset>
 800db40:	0020      	movs	r0, r4
 800db42:	bd70      	pop	{r4, r5, r6, pc}

0800db44 <__sfp_lock_acquire>:
 800db44:	b510      	push	{r4, lr}
 800db46:	4802      	ldr	r0, [pc, #8]	; (800db50 <__sfp_lock_acquire+0xc>)
 800db48:	f000 f8cd 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	46c0      	nop			; (mov r8, r8)
 800db50:	20000620 	.word	0x20000620

0800db54 <__sfp_lock_release>:
 800db54:	b510      	push	{r4, lr}
 800db56:	4802      	ldr	r0, [pc, #8]	; (800db60 <__sfp_lock_release+0xc>)
 800db58:	f000 f8c6 	bl	800dce8 <__retarget_lock_release_recursive>
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	46c0      	nop			; (mov r8, r8)
 800db60:	20000620 	.word	0x20000620

0800db64 <__sinit_lock_acquire>:
 800db64:	b510      	push	{r4, lr}
 800db66:	4802      	ldr	r0, [pc, #8]	; (800db70 <__sinit_lock_acquire+0xc>)
 800db68:	f000 f8bd 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800db6c:	bd10      	pop	{r4, pc}
 800db6e:	46c0      	nop			; (mov r8, r8)
 800db70:	2000061b 	.word	0x2000061b

0800db74 <__sinit_lock_release>:
 800db74:	b510      	push	{r4, lr}
 800db76:	4802      	ldr	r0, [pc, #8]	; (800db80 <__sinit_lock_release+0xc>)
 800db78:	f000 f8b6 	bl	800dce8 <__retarget_lock_release_recursive>
 800db7c:	bd10      	pop	{r4, pc}
 800db7e:	46c0      	nop			; (mov r8, r8)
 800db80:	2000061b 	.word	0x2000061b

0800db84 <__sinit>:
 800db84:	b513      	push	{r0, r1, r4, lr}
 800db86:	0004      	movs	r4, r0
 800db88:	f7ff ffec 	bl	800db64 <__sinit_lock_acquire>
 800db8c:	69a3      	ldr	r3, [r4, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d002      	beq.n	800db98 <__sinit+0x14>
 800db92:	f7ff ffef 	bl	800db74 <__sinit_lock_release>
 800db96:	bd13      	pop	{r0, r1, r4, pc}
 800db98:	64a3      	str	r3, [r4, #72]	; 0x48
 800db9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800db9c:	6523      	str	r3, [r4, #80]	; 0x50
 800db9e:	4b13      	ldr	r3, [pc, #76]	; (800dbec <__sinit+0x68>)
 800dba0:	4a13      	ldr	r2, [pc, #76]	; (800dbf0 <__sinit+0x6c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	62a2      	str	r2, [r4, #40]	; 0x28
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	d101      	bne.n	800dbb0 <__sinit+0x2c>
 800dbac:	2301      	movs	r3, #1
 800dbae:	61a3      	str	r3, [r4, #24]
 800dbb0:	0020      	movs	r0, r4
 800dbb2:	f000 f81f 	bl	800dbf4 <__sfp>
 800dbb6:	6060      	str	r0, [r4, #4]
 800dbb8:	0020      	movs	r0, r4
 800dbba:	f000 f81b 	bl	800dbf4 <__sfp>
 800dbbe:	60a0      	str	r0, [r4, #8]
 800dbc0:	0020      	movs	r0, r4
 800dbc2:	f000 f817 	bl	800dbf4 <__sfp>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	2104      	movs	r1, #4
 800dbca:	60e0      	str	r0, [r4, #12]
 800dbcc:	6860      	ldr	r0, [r4, #4]
 800dbce:	f7ff ff77 	bl	800dac0 <std>
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	2109      	movs	r1, #9
 800dbd6:	68a0      	ldr	r0, [r4, #8]
 800dbd8:	f7ff ff72 	bl	800dac0 <std>
 800dbdc:	2202      	movs	r2, #2
 800dbde:	2112      	movs	r1, #18
 800dbe0:	68e0      	ldr	r0, [r4, #12]
 800dbe2:	f7ff ff6d 	bl	800dac0 <std>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	61a3      	str	r3, [r4, #24]
 800dbea:	e7d2      	b.n	800db92 <__sinit+0xe>
 800dbec:	0800e5b4 	.word	0x0800e5b4
 800dbf0:	0800db09 	.word	0x0800db09

0800dbf4 <__sfp>:
 800dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf6:	0007      	movs	r7, r0
 800dbf8:	f7ff ffa4 	bl	800db44 <__sfp_lock_acquire>
 800dbfc:	4b1f      	ldr	r3, [pc, #124]	; (800dc7c <__sfp+0x88>)
 800dbfe:	681e      	ldr	r6, [r3, #0]
 800dc00:	69b3      	ldr	r3, [r6, #24]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d102      	bne.n	800dc0c <__sfp+0x18>
 800dc06:	0030      	movs	r0, r6
 800dc08:	f7ff ffbc 	bl	800db84 <__sinit>
 800dc0c:	3648      	adds	r6, #72	; 0x48
 800dc0e:	68b4      	ldr	r4, [r6, #8]
 800dc10:	6873      	ldr	r3, [r6, #4]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	d504      	bpl.n	800dc20 <__sfp+0x2c>
 800dc16:	6833      	ldr	r3, [r6, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d022      	beq.n	800dc62 <__sfp+0x6e>
 800dc1c:	6836      	ldr	r6, [r6, #0]
 800dc1e:	e7f6      	b.n	800dc0e <__sfp+0x1a>
 800dc20:	220c      	movs	r2, #12
 800dc22:	5ea5      	ldrsh	r5, [r4, r2]
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	d11a      	bne.n	800dc5e <__sfp+0x6a>
 800dc28:	0020      	movs	r0, r4
 800dc2a:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <__sfp+0x8c>)
 800dc2c:	3058      	adds	r0, #88	; 0x58
 800dc2e:	60e3      	str	r3, [r4, #12]
 800dc30:	6665      	str	r5, [r4, #100]	; 0x64
 800dc32:	f000 f857 	bl	800dce4 <__retarget_lock_init_recursive>
 800dc36:	f7ff ff8d 	bl	800db54 <__sfp_lock_release>
 800dc3a:	0020      	movs	r0, r4
 800dc3c:	2208      	movs	r2, #8
 800dc3e:	0029      	movs	r1, r5
 800dc40:	6025      	str	r5, [r4, #0]
 800dc42:	60a5      	str	r5, [r4, #8]
 800dc44:	6065      	str	r5, [r4, #4]
 800dc46:	6125      	str	r5, [r4, #16]
 800dc48:	6165      	str	r5, [r4, #20]
 800dc4a:	61a5      	str	r5, [r4, #24]
 800dc4c:	305c      	adds	r0, #92	; 0x5c
 800dc4e:	f7fb fa53 	bl	80090f8 <memset>
 800dc52:	6365      	str	r5, [r4, #52]	; 0x34
 800dc54:	63a5      	str	r5, [r4, #56]	; 0x38
 800dc56:	64a5      	str	r5, [r4, #72]	; 0x48
 800dc58:	64e5      	str	r5, [r4, #76]	; 0x4c
 800dc5a:	0020      	movs	r0, r4
 800dc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc5e:	3468      	adds	r4, #104	; 0x68
 800dc60:	e7d7      	b.n	800dc12 <__sfp+0x1e>
 800dc62:	2104      	movs	r1, #4
 800dc64:	0038      	movs	r0, r7
 800dc66:	f7ff ff57 	bl	800db18 <__sfmoreglue>
 800dc6a:	1e04      	subs	r4, r0, #0
 800dc6c:	6030      	str	r0, [r6, #0]
 800dc6e:	d1d5      	bne.n	800dc1c <__sfp+0x28>
 800dc70:	f7ff ff70 	bl	800db54 <__sfp_lock_release>
 800dc74:	230c      	movs	r3, #12
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	e7ef      	b.n	800dc5a <__sfp+0x66>
 800dc7a:	46c0      	nop			; (mov r8, r8)
 800dc7c:	0800e5b4 	.word	0x0800e5b4
 800dc80:	ffff0001 	.word	0xffff0001

0800dc84 <fiprintf>:
 800dc84:	b40e      	push	{r1, r2, r3}
 800dc86:	b503      	push	{r0, r1, lr}
 800dc88:	0001      	movs	r1, r0
 800dc8a:	ab03      	add	r3, sp, #12
 800dc8c:	4804      	ldr	r0, [pc, #16]	; (800dca0 <fiprintf+0x1c>)
 800dc8e:	cb04      	ldmia	r3!, {r2}
 800dc90:	6800      	ldr	r0, [r0, #0]
 800dc92:	9301      	str	r3, [sp, #4]
 800dc94:	f000 f89a 	bl	800ddcc <_vfiprintf_r>
 800dc98:	b002      	add	sp, #8
 800dc9a:	bc08      	pop	{r3}
 800dc9c:	b003      	add	sp, #12
 800dc9e:	4718      	bx	r3
 800dca0:	2000000c 	.word	0x2000000c

0800dca4 <_fwalk_reent>:
 800dca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dca6:	0004      	movs	r4, r0
 800dca8:	0006      	movs	r6, r0
 800dcaa:	2700      	movs	r7, #0
 800dcac:	9101      	str	r1, [sp, #4]
 800dcae:	3448      	adds	r4, #72	; 0x48
 800dcb0:	6863      	ldr	r3, [r4, #4]
 800dcb2:	68a5      	ldr	r5, [r4, #8]
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	9b00      	ldr	r3, [sp, #0]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	d504      	bpl.n	800dcc8 <_fwalk_reent+0x24>
 800dcbe:	6824      	ldr	r4, [r4, #0]
 800dcc0:	2c00      	cmp	r4, #0
 800dcc2:	d1f5      	bne.n	800dcb0 <_fwalk_reent+0xc>
 800dcc4:	0038      	movs	r0, r7
 800dcc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dcc8:	89ab      	ldrh	r3, [r5, #12]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d908      	bls.n	800dce0 <_fwalk_reent+0x3c>
 800dcce:	220e      	movs	r2, #14
 800dcd0:	5eab      	ldrsh	r3, [r5, r2]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	d004      	beq.n	800dce0 <_fwalk_reent+0x3c>
 800dcd6:	0029      	movs	r1, r5
 800dcd8:	0030      	movs	r0, r6
 800dcda:	9b01      	ldr	r3, [sp, #4]
 800dcdc:	4798      	blx	r3
 800dcde:	4307      	orrs	r7, r0
 800dce0:	3568      	adds	r5, #104	; 0x68
 800dce2:	e7e8      	b.n	800dcb6 <_fwalk_reent+0x12>

0800dce4 <__retarget_lock_init_recursive>:
 800dce4:	4770      	bx	lr

0800dce6 <__retarget_lock_acquire_recursive>:
 800dce6:	4770      	bx	lr

0800dce8 <__retarget_lock_release_recursive>:
 800dce8:	4770      	bx	lr

0800dcea <memmove>:
 800dcea:	b510      	push	{r4, lr}
 800dcec:	4288      	cmp	r0, r1
 800dcee:	d902      	bls.n	800dcf6 <memmove+0xc>
 800dcf0:	188b      	adds	r3, r1, r2
 800dcf2:	4298      	cmp	r0, r3
 800dcf4:	d303      	bcc.n	800dcfe <memmove+0x14>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e007      	b.n	800dd0a <memmove+0x20>
 800dcfa:	5c8b      	ldrb	r3, [r1, r2]
 800dcfc:	5483      	strb	r3, [r0, r2]
 800dcfe:	3a01      	subs	r2, #1
 800dd00:	d2fb      	bcs.n	800dcfa <memmove+0x10>
 800dd02:	bd10      	pop	{r4, pc}
 800dd04:	5ccc      	ldrb	r4, [r1, r3]
 800dd06:	54c4      	strb	r4, [r0, r3]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d1fa      	bne.n	800dd04 <memmove+0x1a>
 800dd0e:	e7f8      	b.n	800dd02 <memmove+0x18>

0800dd10 <__malloc_lock>:
 800dd10:	b510      	push	{r4, lr}
 800dd12:	4802      	ldr	r0, [pc, #8]	; (800dd1c <__malloc_lock+0xc>)
 800dd14:	f7ff ffe7 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	46c0      	nop			; (mov r8, r8)
 800dd1c:	2000061c 	.word	0x2000061c

0800dd20 <__malloc_unlock>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	4802      	ldr	r0, [pc, #8]	; (800dd2c <__malloc_unlock+0xc>)
 800dd24:	f7ff ffe0 	bl	800dce8 <__retarget_lock_release_recursive>
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	46c0      	nop			; (mov r8, r8)
 800dd2c:	2000061c 	.word	0x2000061c

0800dd30 <_realloc_r>:
 800dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd32:	0007      	movs	r7, r0
 800dd34:	000d      	movs	r5, r1
 800dd36:	0016      	movs	r6, r2
 800dd38:	2900      	cmp	r1, #0
 800dd3a:	d105      	bne.n	800dd48 <_realloc_r+0x18>
 800dd3c:	0011      	movs	r1, r2
 800dd3e:	f7fe ff89 	bl	800cc54 <_malloc_r>
 800dd42:	0004      	movs	r4, r0
 800dd44:	0020      	movs	r0, r4
 800dd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd48:	2a00      	cmp	r2, #0
 800dd4a:	d103      	bne.n	800dd54 <_realloc_r+0x24>
 800dd4c:	f7fe ff38 	bl	800cbc0 <_free_r>
 800dd50:	0034      	movs	r4, r6
 800dd52:	e7f7      	b.n	800dd44 <_realloc_r+0x14>
 800dd54:	f000 fab6 	bl	800e2c4 <_malloc_usable_size_r>
 800dd58:	002c      	movs	r4, r5
 800dd5a:	42b0      	cmp	r0, r6
 800dd5c:	d2f2      	bcs.n	800dd44 <_realloc_r+0x14>
 800dd5e:	0031      	movs	r1, r6
 800dd60:	0038      	movs	r0, r7
 800dd62:	f7fe ff77 	bl	800cc54 <_malloc_r>
 800dd66:	1e04      	subs	r4, r0, #0
 800dd68:	d0ec      	beq.n	800dd44 <_realloc_r+0x14>
 800dd6a:	0029      	movs	r1, r5
 800dd6c:	0032      	movs	r2, r6
 800dd6e:	f7fe fa46 	bl	800c1fe <memcpy>
 800dd72:	0029      	movs	r1, r5
 800dd74:	0038      	movs	r0, r7
 800dd76:	f7fe ff23 	bl	800cbc0 <_free_r>
 800dd7a:	e7e3      	b.n	800dd44 <_realloc_r+0x14>

0800dd7c <__sfputc_r>:
 800dd7c:	6893      	ldr	r3, [r2, #8]
 800dd7e:	b510      	push	{r4, lr}
 800dd80:	3b01      	subs	r3, #1
 800dd82:	6093      	str	r3, [r2, #8]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	da04      	bge.n	800dd92 <__sfputc_r+0x16>
 800dd88:	6994      	ldr	r4, [r2, #24]
 800dd8a:	42a3      	cmp	r3, r4
 800dd8c:	db07      	blt.n	800dd9e <__sfputc_r+0x22>
 800dd8e:	290a      	cmp	r1, #10
 800dd90:	d005      	beq.n	800dd9e <__sfputc_r+0x22>
 800dd92:	6813      	ldr	r3, [r2, #0]
 800dd94:	1c58      	adds	r0, r3, #1
 800dd96:	6010      	str	r0, [r2, #0]
 800dd98:	7019      	strb	r1, [r3, #0]
 800dd9a:	0008      	movs	r0, r1
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	f000 f94f 	bl	800e040 <__swbuf_r>
 800dda2:	0001      	movs	r1, r0
 800dda4:	e7f9      	b.n	800dd9a <__sfputc_r+0x1e>

0800dda6 <__sfputs_r>:
 800dda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda8:	0006      	movs	r6, r0
 800ddaa:	000f      	movs	r7, r1
 800ddac:	0014      	movs	r4, r2
 800ddae:	18d5      	adds	r5, r2, r3
 800ddb0:	42ac      	cmp	r4, r5
 800ddb2:	d101      	bne.n	800ddb8 <__sfputs_r+0x12>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e007      	b.n	800ddc8 <__sfputs_r+0x22>
 800ddb8:	7821      	ldrb	r1, [r4, #0]
 800ddba:	003a      	movs	r2, r7
 800ddbc:	0030      	movs	r0, r6
 800ddbe:	f7ff ffdd 	bl	800dd7c <__sfputc_r>
 800ddc2:	3401      	adds	r4, #1
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d1f3      	bne.n	800ddb0 <__sfputs_r+0xa>
 800ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddcc <_vfiprintf_r>:
 800ddcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddce:	b0a1      	sub	sp, #132	; 0x84
 800ddd0:	0006      	movs	r6, r0
 800ddd2:	000c      	movs	r4, r1
 800ddd4:	001f      	movs	r7, r3
 800ddd6:	9203      	str	r2, [sp, #12]
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d004      	beq.n	800dde6 <_vfiprintf_r+0x1a>
 800dddc:	6983      	ldr	r3, [r0, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d101      	bne.n	800dde6 <_vfiprintf_r+0x1a>
 800dde2:	f7ff fecf 	bl	800db84 <__sinit>
 800dde6:	4b8e      	ldr	r3, [pc, #568]	; (800e020 <_vfiprintf_r+0x254>)
 800dde8:	429c      	cmp	r4, r3
 800ddea:	d11c      	bne.n	800de26 <_vfiprintf_r+0x5a>
 800ddec:	6874      	ldr	r4, [r6, #4]
 800ddee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddf0:	07db      	lsls	r3, r3, #31
 800ddf2:	d405      	bmi.n	800de00 <_vfiprintf_r+0x34>
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	059b      	lsls	r3, r3, #22
 800ddf8:	d402      	bmi.n	800de00 <_vfiprintf_r+0x34>
 800ddfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddfc:	f7ff ff73 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	071b      	lsls	r3, r3, #28
 800de04:	d502      	bpl.n	800de0c <_vfiprintf_r+0x40>
 800de06:	6923      	ldr	r3, [r4, #16]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d11d      	bne.n	800de48 <_vfiprintf_r+0x7c>
 800de0c:	0021      	movs	r1, r4
 800de0e:	0030      	movs	r0, r6
 800de10:	f000 f96c 	bl	800e0ec <__swsetup_r>
 800de14:	2800      	cmp	r0, #0
 800de16:	d017      	beq.n	800de48 <_vfiprintf_r+0x7c>
 800de18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de1a:	07db      	lsls	r3, r3, #31
 800de1c:	d50d      	bpl.n	800de3a <_vfiprintf_r+0x6e>
 800de1e:	2001      	movs	r0, #1
 800de20:	4240      	negs	r0, r0
 800de22:	b021      	add	sp, #132	; 0x84
 800de24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de26:	4b7f      	ldr	r3, [pc, #508]	; (800e024 <_vfiprintf_r+0x258>)
 800de28:	429c      	cmp	r4, r3
 800de2a:	d101      	bne.n	800de30 <_vfiprintf_r+0x64>
 800de2c:	68b4      	ldr	r4, [r6, #8]
 800de2e:	e7de      	b.n	800ddee <_vfiprintf_r+0x22>
 800de30:	4b7d      	ldr	r3, [pc, #500]	; (800e028 <_vfiprintf_r+0x25c>)
 800de32:	429c      	cmp	r4, r3
 800de34:	d1db      	bne.n	800ddee <_vfiprintf_r+0x22>
 800de36:	68f4      	ldr	r4, [r6, #12]
 800de38:	e7d9      	b.n	800ddee <_vfiprintf_r+0x22>
 800de3a:	89a3      	ldrh	r3, [r4, #12]
 800de3c:	059b      	lsls	r3, r3, #22
 800de3e:	d4ee      	bmi.n	800de1e <_vfiprintf_r+0x52>
 800de40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de42:	f7ff ff51 	bl	800dce8 <__retarget_lock_release_recursive>
 800de46:	e7ea      	b.n	800de1e <_vfiprintf_r+0x52>
 800de48:	2300      	movs	r3, #0
 800de4a:	ad08      	add	r5, sp, #32
 800de4c:	616b      	str	r3, [r5, #20]
 800de4e:	3320      	adds	r3, #32
 800de50:	766b      	strb	r3, [r5, #25]
 800de52:	3310      	adds	r3, #16
 800de54:	76ab      	strb	r3, [r5, #26]
 800de56:	9707      	str	r7, [sp, #28]
 800de58:	9f03      	ldr	r7, [sp, #12]
 800de5a:	783b      	ldrb	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <_vfiprintf_r+0x98>
 800de60:	2b25      	cmp	r3, #37	; 0x25
 800de62:	d14e      	bne.n	800df02 <_vfiprintf_r+0x136>
 800de64:	9b03      	ldr	r3, [sp, #12]
 800de66:	1afb      	subs	r3, r7, r3
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	9b03      	ldr	r3, [sp, #12]
 800de6c:	429f      	cmp	r7, r3
 800de6e:	d00d      	beq.n	800de8c <_vfiprintf_r+0xc0>
 800de70:	9b05      	ldr	r3, [sp, #20]
 800de72:	0021      	movs	r1, r4
 800de74:	0030      	movs	r0, r6
 800de76:	9a03      	ldr	r2, [sp, #12]
 800de78:	f7ff ff95 	bl	800dda6 <__sfputs_r>
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	d100      	bne.n	800de82 <_vfiprintf_r+0xb6>
 800de80:	e0b5      	b.n	800dfee <_vfiprintf_r+0x222>
 800de82:	696a      	ldr	r2, [r5, #20]
 800de84:	9b05      	ldr	r3, [sp, #20]
 800de86:	4694      	mov	ip, r2
 800de88:	4463      	add	r3, ip
 800de8a:	616b      	str	r3, [r5, #20]
 800de8c:	783b      	ldrb	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d100      	bne.n	800de94 <_vfiprintf_r+0xc8>
 800de92:	e0ac      	b.n	800dfee <_vfiprintf_r+0x222>
 800de94:	2201      	movs	r2, #1
 800de96:	1c7b      	adds	r3, r7, #1
 800de98:	9303      	str	r3, [sp, #12]
 800de9a:	2300      	movs	r3, #0
 800de9c:	4252      	negs	r2, r2
 800de9e:	606a      	str	r2, [r5, #4]
 800dea0:	a904      	add	r1, sp, #16
 800dea2:	3254      	adds	r2, #84	; 0x54
 800dea4:	1852      	adds	r2, r2, r1
 800dea6:	602b      	str	r3, [r5, #0]
 800dea8:	60eb      	str	r3, [r5, #12]
 800deaa:	60ab      	str	r3, [r5, #8]
 800deac:	7013      	strb	r3, [r2, #0]
 800deae:	65ab      	str	r3, [r5, #88]	; 0x58
 800deb0:	9b03      	ldr	r3, [sp, #12]
 800deb2:	2205      	movs	r2, #5
 800deb4:	7819      	ldrb	r1, [r3, #0]
 800deb6:	485d      	ldr	r0, [pc, #372]	; (800e02c <_vfiprintf_r+0x260>)
 800deb8:	f7fe f996 	bl	800c1e8 <memchr>
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	1c5f      	adds	r7, r3, #1
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d120      	bne.n	800df06 <_vfiprintf_r+0x13a>
 800dec4:	682a      	ldr	r2, [r5, #0]
 800dec6:	06d3      	lsls	r3, r2, #27
 800dec8:	d504      	bpl.n	800ded4 <_vfiprintf_r+0x108>
 800deca:	2353      	movs	r3, #83	; 0x53
 800decc:	a904      	add	r1, sp, #16
 800dece:	185b      	adds	r3, r3, r1
 800ded0:	2120      	movs	r1, #32
 800ded2:	7019      	strb	r1, [r3, #0]
 800ded4:	0713      	lsls	r3, r2, #28
 800ded6:	d504      	bpl.n	800dee2 <_vfiprintf_r+0x116>
 800ded8:	2353      	movs	r3, #83	; 0x53
 800deda:	a904      	add	r1, sp, #16
 800dedc:	185b      	adds	r3, r3, r1
 800dede:	212b      	movs	r1, #43	; 0x2b
 800dee0:	7019      	strb	r1, [r3, #0]
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b2a      	cmp	r3, #42	; 0x2a
 800dee8:	d016      	beq.n	800df18 <_vfiprintf_r+0x14c>
 800deea:	2100      	movs	r1, #0
 800deec:	68eb      	ldr	r3, [r5, #12]
 800deee:	9f03      	ldr	r7, [sp, #12]
 800def0:	783a      	ldrb	r2, [r7, #0]
 800def2:	1c78      	adds	r0, r7, #1
 800def4:	3a30      	subs	r2, #48	; 0x30
 800def6:	4684      	mov	ip, r0
 800def8:	2a09      	cmp	r2, #9
 800defa:	d94f      	bls.n	800df9c <_vfiprintf_r+0x1d0>
 800defc:	2900      	cmp	r1, #0
 800defe:	d111      	bne.n	800df24 <_vfiprintf_r+0x158>
 800df00:	e017      	b.n	800df32 <_vfiprintf_r+0x166>
 800df02:	3701      	adds	r7, #1
 800df04:	e7a9      	b.n	800de5a <_vfiprintf_r+0x8e>
 800df06:	4b49      	ldr	r3, [pc, #292]	; (800e02c <_vfiprintf_r+0x260>)
 800df08:	682a      	ldr	r2, [r5, #0]
 800df0a:	1ac0      	subs	r0, r0, r3
 800df0c:	2301      	movs	r3, #1
 800df0e:	4083      	lsls	r3, r0
 800df10:	4313      	orrs	r3, r2
 800df12:	602b      	str	r3, [r5, #0]
 800df14:	9703      	str	r7, [sp, #12]
 800df16:	e7cb      	b.n	800deb0 <_vfiprintf_r+0xe4>
 800df18:	9b07      	ldr	r3, [sp, #28]
 800df1a:	1d19      	adds	r1, r3, #4
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	9107      	str	r1, [sp, #28]
 800df20:	2b00      	cmp	r3, #0
 800df22:	db01      	blt.n	800df28 <_vfiprintf_r+0x15c>
 800df24:	930b      	str	r3, [sp, #44]	; 0x2c
 800df26:	e004      	b.n	800df32 <_vfiprintf_r+0x166>
 800df28:	425b      	negs	r3, r3
 800df2a:	60eb      	str	r3, [r5, #12]
 800df2c:	2302      	movs	r3, #2
 800df2e:	4313      	orrs	r3, r2
 800df30:	602b      	str	r3, [r5, #0]
 800df32:	783b      	ldrb	r3, [r7, #0]
 800df34:	2b2e      	cmp	r3, #46	; 0x2e
 800df36:	d10a      	bne.n	800df4e <_vfiprintf_r+0x182>
 800df38:	787b      	ldrb	r3, [r7, #1]
 800df3a:	2b2a      	cmp	r3, #42	; 0x2a
 800df3c:	d137      	bne.n	800dfae <_vfiprintf_r+0x1e2>
 800df3e:	9b07      	ldr	r3, [sp, #28]
 800df40:	3702      	adds	r7, #2
 800df42:	1d1a      	adds	r2, r3, #4
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	9207      	str	r2, [sp, #28]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	db2d      	blt.n	800dfa8 <_vfiprintf_r+0x1dc>
 800df4c:	9309      	str	r3, [sp, #36]	; 0x24
 800df4e:	2203      	movs	r2, #3
 800df50:	7839      	ldrb	r1, [r7, #0]
 800df52:	4837      	ldr	r0, [pc, #220]	; (800e030 <_vfiprintf_r+0x264>)
 800df54:	f7fe f948 	bl	800c1e8 <memchr>
 800df58:	2800      	cmp	r0, #0
 800df5a:	d007      	beq.n	800df6c <_vfiprintf_r+0x1a0>
 800df5c:	4b34      	ldr	r3, [pc, #208]	; (800e030 <_vfiprintf_r+0x264>)
 800df5e:	682a      	ldr	r2, [r5, #0]
 800df60:	1ac0      	subs	r0, r0, r3
 800df62:	2340      	movs	r3, #64	; 0x40
 800df64:	4083      	lsls	r3, r0
 800df66:	4313      	orrs	r3, r2
 800df68:	3701      	adds	r7, #1
 800df6a:	602b      	str	r3, [r5, #0]
 800df6c:	7839      	ldrb	r1, [r7, #0]
 800df6e:	1c7b      	adds	r3, r7, #1
 800df70:	2206      	movs	r2, #6
 800df72:	4830      	ldr	r0, [pc, #192]	; (800e034 <_vfiprintf_r+0x268>)
 800df74:	9303      	str	r3, [sp, #12]
 800df76:	7629      	strb	r1, [r5, #24]
 800df78:	f7fe f936 	bl	800c1e8 <memchr>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d045      	beq.n	800e00c <_vfiprintf_r+0x240>
 800df80:	4b2d      	ldr	r3, [pc, #180]	; (800e038 <_vfiprintf_r+0x26c>)
 800df82:	2b00      	cmp	r3, #0
 800df84:	d127      	bne.n	800dfd6 <_vfiprintf_r+0x20a>
 800df86:	2207      	movs	r2, #7
 800df88:	9b07      	ldr	r3, [sp, #28]
 800df8a:	3307      	adds	r3, #7
 800df8c:	4393      	bics	r3, r2
 800df8e:	3308      	adds	r3, #8
 800df90:	9307      	str	r3, [sp, #28]
 800df92:	696b      	ldr	r3, [r5, #20]
 800df94:	9a04      	ldr	r2, [sp, #16]
 800df96:	189b      	adds	r3, r3, r2
 800df98:	616b      	str	r3, [r5, #20]
 800df9a:	e75d      	b.n	800de58 <_vfiprintf_r+0x8c>
 800df9c:	210a      	movs	r1, #10
 800df9e:	434b      	muls	r3, r1
 800dfa0:	4667      	mov	r7, ip
 800dfa2:	189b      	adds	r3, r3, r2
 800dfa4:	3909      	subs	r1, #9
 800dfa6:	e7a3      	b.n	800def0 <_vfiprintf_r+0x124>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	425b      	negs	r3, r3
 800dfac:	e7ce      	b.n	800df4c <_vfiprintf_r+0x180>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	001a      	movs	r2, r3
 800dfb2:	3701      	adds	r7, #1
 800dfb4:	606b      	str	r3, [r5, #4]
 800dfb6:	7839      	ldrb	r1, [r7, #0]
 800dfb8:	1c78      	adds	r0, r7, #1
 800dfba:	3930      	subs	r1, #48	; 0x30
 800dfbc:	4684      	mov	ip, r0
 800dfbe:	2909      	cmp	r1, #9
 800dfc0:	d903      	bls.n	800dfca <_vfiprintf_r+0x1fe>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0c3      	beq.n	800df4e <_vfiprintf_r+0x182>
 800dfc6:	9209      	str	r2, [sp, #36]	; 0x24
 800dfc8:	e7c1      	b.n	800df4e <_vfiprintf_r+0x182>
 800dfca:	230a      	movs	r3, #10
 800dfcc:	435a      	muls	r2, r3
 800dfce:	4667      	mov	r7, ip
 800dfd0:	1852      	adds	r2, r2, r1
 800dfd2:	3b09      	subs	r3, #9
 800dfd4:	e7ef      	b.n	800dfb6 <_vfiprintf_r+0x1ea>
 800dfd6:	ab07      	add	r3, sp, #28
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	0022      	movs	r2, r4
 800dfdc:	0029      	movs	r1, r5
 800dfde:	0030      	movs	r0, r6
 800dfe0:	4b16      	ldr	r3, [pc, #88]	; (800e03c <_vfiprintf_r+0x270>)
 800dfe2:	f7fb f93b 	bl	800925c <_printf_float>
 800dfe6:	9004      	str	r0, [sp, #16]
 800dfe8:	9b04      	ldr	r3, [sp, #16]
 800dfea:	3301      	adds	r3, #1
 800dfec:	d1d1      	bne.n	800df92 <_vfiprintf_r+0x1c6>
 800dfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dff0:	07db      	lsls	r3, r3, #31
 800dff2:	d405      	bmi.n	800e000 <_vfiprintf_r+0x234>
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	059b      	lsls	r3, r3, #22
 800dff8:	d402      	bmi.n	800e000 <_vfiprintf_r+0x234>
 800dffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dffc:	f7ff fe74 	bl	800dce8 <__retarget_lock_release_recursive>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	065b      	lsls	r3, r3, #25
 800e004:	d500      	bpl.n	800e008 <_vfiprintf_r+0x23c>
 800e006:	e70a      	b.n	800de1e <_vfiprintf_r+0x52>
 800e008:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e00a:	e70a      	b.n	800de22 <_vfiprintf_r+0x56>
 800e00c:	ab07      	add	r3, sp, #28
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	0022      	movs	r2, r4
 800e012:	0029      	movs	r1, r5
 800e014:	0030      	movs	r0, r6
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <_vfiprintf_r+0x270>)
 800e018:	f7fb fbde 	bl	80097d8 <_printf_i>
 800e01c:	e7e3      	b.n	800dfe6 <_vfiprintf_r+0x21a>
 800e01e:	46c0      	nop			; (mov r8, r8)
 800e020:	0800ea3c 	.word	0x0800ea3c
 800e024:	0800ea5c 	.word	0x0800ea5c
 800e028:	0800ea1c 	.word	0x0800ea1c
 800e02c:	0800e9b4 	.word	0x0800e9b4
 800e030:	0800e9ba 	.word	0x0800e9ba
 800e034:	0800e9be 	.word	0x0800e9be
 800e038:	0800925d 	.word	0x0800925d
 800e03c:	0800dda7 	.word	0x0800dda7

0800e040 <__swbuf_r>:
 800e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e042:	0005      	movs	r5, r0
 800e044:	000e      	movs	r6, r1
 800e046:	0014      	movs	r4, r2
 800e048:	2800      	cmp	r0, #0
 800e04a:	d004      	beq.n	800e056 <__swbuf_r+0x16>
 800e04c:	6983      	ldr	r3, [r0, #24]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <__swbuf_r+0x16>
 800e052:	f7ff fd97 	bl	800db84 <__sinit>
 800e056:	4b22      	ldr	r3, [pc, #136]	; (800e0e0 <__swbuf_r+0xa0>)
 800e058:	429c      	cmp	r4, r3
 800e05a:	d12e      	bne.n	800e0ba <__swbuf_r+0x7a>
 800e05c:	686c      	ldr	r4, [r5, #4]
 800e05e:	69a3      	ldr	r3, [r4, #24]
 800e060:	60a3      	str	r3, [r4, #8]
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	071b      	lsls	r3, r3, #28
 800e066:	d532      	bpl.n	800e0ce <__swbuf_r+0x8e>
 800e068:	6923      	ldr	r3, [r4, #16]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d02f      	beq.n	800e0ce <__swbuf_r+0x8e>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	6922      	ldr	r2, [r4, #16]
 800e072:	b2f7      	uxtb	r7, r6
 800e074:	1a98      	subs	r0, r3, r2
 800e076:	6963      	ldr	r3, [r4, #20]
 800e078:	b2f6      	uxtb	r6, r6
 800e07a:	4283      	cmp	r3, r0
 800e07c:	dc05      	bgt.n	800e08a <__swbuf_r+0x4a>
 800e07e:	0021      	movs	r1, r4
 800e080:	0028      	movs	r0, r5
 800e082:	f7ff fcdd 	bl	800da40 <_fflush_r>
 800e086:	2800      	cmp	r0, #0
 800e088:	d127      	bne.n	800e0da <__swbuf_r+0x9a>
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	3001      	adds	r0, #1
 800e08e:	3b01      	subs	r3, #1
 800e090:	60a3      	str	r3, [r4, #8]
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	1c5a      	adds	r2, r3, #1
 800e096:	6022      	str	r2, [r4, #0]
 800e098:	701f      	strb	r7, [r3, #0]
 800e09a:	6963      	ldr	r3, [r4, #20]
 800e09c:	4283      	cmp	r3, r0
 800e09e:	d004      	beq.n	800e0aa <__swbuf_r+0x6a>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	07db      	lsls	r3, r3, #31
 800e0a4:	d507      	bpl.n	800e0b6 <__swbuf_r+0x76>
 800e0a6:	2e0a      	cmp	r6, #10
 800e0a8:	d105      	bne.n	800e0b6 <__swbuf_r+0x76>
 800e0aa:	0021      	movs	r1, r4
 800e0ac:	0028      	movs	r0, r5
 800e0ae:	f7ff fcc7 	bl	800da40 <_fflush_r>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d111      	bne.n	800e0da <__swbuf_r+0x9a>
 800e0b6:	0030      	movs	r0, r6
 800e0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ba:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <__swbuf_r+0xa4>)
 800e0bc:	429c      	cmp	r4, r3
 800e0be:	d101      	bne.n	800e0c4 <__swbuf_r+0x84>
 800e0c0:	68ac      	ldr	r4, [r5, #8]
 800e0c2:	e7cc      	b.n	800e05e <__swbuf_r+0x1e>
 800e0c4:	4b08      	ldr	r3, [pc, #32]	; (800e0e8 <__swbuf_r+0xa8>)
 800e0c6:	429c      	cmp	r4, r3
 800e0c8:	d1c9      	bne.n	800e05e <__swbuf_r+0x1e>
 800e0ca:	68ec      	ldr	r4, [r5, #12]
 800e0cc:	e7c7      	b.n	800e05e <__swbuf_r+0x1e>
 800e0ce:	0021      	movs	r1, r4
 800e0d0:	0028      	movs	r0, r5
 800e0d2:	f000 f80b 	bl	800e0ec <__swsetup_r>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d0c9      	beq.n	800e06e <__swbuf_r+0x2e>
 800e0da:	2601      	movs	r6, #1
 800e0dc:	4276      	negs	r6, r6
 800e0de:	e7ea      	b.n	800e0b6 <__swbuf_r+0x76>
 800e0e0:	0800ea3c 	.word	0x0800ea3c
 800e0e4:	0800ea5c 	.word	0x0800ea5c
 800e0e8:	0800ea1c 	.word	0x0800ea1c

0800e0ec <__swsetup_r>:
 800e0ec:	4b37      	ldr	r3, [pc, #220]	; (800e1cc <__swsetup_r+0xe0>)
 800e0ee:	b570      	push	{r4, r5, r6, lr}
 800e0f0:	681d      	ldr	r5, [r3, #0]
 800e0f2:	0006      	movs	r6, r0
 800e0f4:	000c      	movs	r4, r1
 800e0f6:	2d00      	cmp	r5, #0
 800e0f8:	d005      	beq.n	800e106 <__swsetup_r+0x1a>
 800e0fa:	69ab      	ldr	r3, [r5, #24]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d102      	bne.n	800e106 <__swsetup_r+0x1a>
 800e100:	0028      	movs	r0, r5
 800e102:	f7ff fd3f 	bl	800db84 <__sinit>
 800e106:	4b32      	ldr	r3, [pc, #200]	; (800e1d0 <__swsetup_r+0xe4>)
 800e108:	429c      	cmp	r4, r3
 800e10a:	d10f      	bne.n	800e12c <__swsetup_r+0x40>
 800e10c:	686c      	ldr	r4, [r5, #4]
 800e10e:	230c      	movs	r3, #12
 800e110:	5ee2      	ldrsh	r2, [r4, r3]
 800e112:	b293      	uxth	r3, r2
 800e114:	0711      	lsls	r1, r2, #28
 800e116:	d42d      	bmi.n	800e174 <__swsetup_r+0x88>
 800e118:	06d9      	lsls	r1, r3, #27
 800e11a:	d411      	bmi.n	800e140 <__swsetup_r+0x54>
 800e11c:	2309      	movs	r3, #9
 800e11e:	2001      	movs	r0, #1
 800e120:	6033      	str	r3, [r6, #0]
 800e122:	3337      	adds	r3, #55	; 0x37
 800e124:	4313      	orrs	r3, r2
 800e126:	81a3      	strh	r3, [r4, #12]
 800e128:	4240      	negs	r0, r0
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
 800e12c:	4b29      	ldr	r3, [pc, #164]	; (800e1d4 <__swsetup_r+0xe8>)
 800e12e:	429c      	cmp	r4, r3
 800e130:	d101      	bne.n	800e136 <__swsetup_r+0x4a>
 800e132:	68ac      	ldr	r4, [r5, #8]
 800e134:	e7eb      	b.n	800e10e <__swsetup_r+0x22>
 800e136:	4b28      	ldr	r3, [pc, #160]	; (800e1d8 <__swsetup_r+0xec>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	d1e8      	bne.n	800e10e <__swsetup_r+0x22>
 800e13c:	68ec      	ldr	r4, [r5, #12]
 800e13e:	e7e6      	b.n	800e10e <__swsetup_r+0x22>
 800e140:	075b      	lsls	r3, r3, #29
 800e142:	d513      	bpl.n	800e16c <__swsetup_r+0x80>
 800e144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e146:	2900      	cmp	r1, #0
 800e148:	d008      	beq.n	800e15c <__swsetup_r+0x70>
 800e14a:	0023      	movs	r3, r4
 800e14c:	3344      	adds	r3, #68	; 0x44
 800e14e:	4299      	cmp	r1, r3
 800e150:	d002      	beq.n	800e158 <__swsetup_r+0x6c>
 800e152:	0030      	movs	r0, r6
 800e154:	f7fe fd34 	bl	800cbc0 <_free_r>
 800e158:	2300      	movs	r3, #0
 800e15a:	6363      	str	r3, [r4, #52]	; 0x34
 800e15c:	2224      	movs	r2, #36	; 0x24
 800e15e:	89a3      	ldrh	r3, [r4, #12]
 800e160:	4393      	bics	r3, r2
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	2300      	movs	r3, #0
 800e166:	6063      	str	r3, [r4, #4]
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	6023      	str	r3, [r4, #0]
 800e16c:	2308      	movs	r3, #8
 800e16e:	89a2      	ldrh	r2, [r4, #12]
 800e170:	4313      	orrs	r3, r2
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10b      	bne.n	800e192 <__swsetup_r+0xa6>
 800e17a:	21a0      	movs	r1, #160	; 0xa0
 800e17c:	2280      	movs	r2, #128	; 0x80
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	0089      	lsls	r1, r1, #2
 800e182:	0092      	lsls	r2, r2, #2
 800e184:	400b      	ands	r3, r1
 800e186:	4293      	cmp	r3, r2
 800e188:	d003      	beq.n	800e192 <__swsetup_r+0xa6>
 800e18a:	0021      	movs	r1, r4
 800e18c:	0030      	movs	r0, r6
 800e18e:	f000 f855 	bl	800e23c <__smakebuf_r>
 800e192:	220c      	movs	r2, #12
 800e194:	5ea3      	ldrsh	r3, [r4, r2]
 800e196:	2001      	movs	r0, #1
 800e198:	001a      	movs	r2, r3
 800e19a:	b299      	uxth	r1, r3
 800e19c:	4002      	ands	r2, r0
 800e19e:	4203      	tst	r3, r0
 800e1a0:	d00f      	beq.n	800e1c2 <__swsetup_r+0xd6>
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	60a2      	str	r2, [r4, #8]
 800e1a6:	6962      	ldr	r2, [r4, #20]
 800e1a8:	4252      	negs	r2, r2
 800e1aa:	61a2      	str	r2, [r4, #24]
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	6922      	ldr	r2, [r4, #16]
 800e1b0:	4282      	cmp	r2, r0
 800e1b2:	d1ba      	bne.n	800e12a <__swsetup_r+0x3e>
 800e1b4:	060a      	lsls	r2, r1, #24
 800e1b6:	d5b8      	bpl.n	800e12a <__swsetup_r+0x3e>
 800e1b8:	2240      	movs	r2, #64	; 0x40
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	81a3      	strh	r3, [r4, #12]
 800e1be:	3801      	subs	r0, #1
 800e1c0:	e7b3      	b.n	800e12a <__swsetup_r+0x3e>
 800e1c2:	0788      	lsls	r0, r1, #30
 800e1c4:	d400      	bmi.n	800e1c8 <__swsetup_r+0xdc>
 800e1c6:	6962      	ldr	r2, [r4, #20]
 800e1c8:	60a2      	str	r2, [r4, #8]
 800e1ca:	e7ef      	b.n	800e1ac <__swsetup_r+0xc0>
 800e1cc:	2000000c 	.word	0x2000000c
 800e1d0:	0800ea3c 	.word	0x0800ea3c
 800e1d4:	0800ea5c 	.word	0x0800ea5c
 800e1d8:	0800ea1c 	.word	0x0800ea1c

0800e1dc <abort>:
 800e1dc:	2006      	movs	r0, #6
 800e1de:	b510      	push	{r4, lr}
 800e1e0:	f000 f8a2 	bl	800e328 <raise>
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	f7f6 fd13 	bl	8004c10 <_exit>
	...

0800e1ec <__swhatbuf_r>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	000e      	movs	r6, r1
 800e1f0:	001d      	movs	r5, r3
 800e1f2:	230e      	movs	r3, #14
 800e1f4:	5ec9      	ldrsh	r1, [r1, r3]
 800e1f6:	0014      	movs	r4, r2
 800e1f8:	b096      	sub	sp, #88	; 0x58
 800e1fa:	2900      	cmp	r1, #0
 800e1fc:	da07      	bge.n	800e20e <__swhatbuf_r+0x22>
 800e1fe:	2300      	movs	r3, #0
 800e200:	602b      	str	r3, [r5, #0]
 800e202:	89b3      	ldrh	r3, [r6, #12]
 800e204:	061b      	lsls	r3, r3, #24
 800e206:	d411      	bmi.n	800e22c <__swhatbuf_r+0x40>
 800e208:	2380      	movs	r3, #128	; 0x80
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	e00f      	b.n	800e22e <__swhatbuf_r+0x42>
 800e20e:	466a      	mov	r2, sp
 800e210:	f000 f8aa 	bl	800e368 <_fstat_r>
 800e214:	2800      	cmp	r0, #0
 800e216:	dbf2      	blt.n	800e1fe <__swhatbuf_r+0x12>
 800e218:	23f0      	movs	r3, #240	; 0xf0
 800e21a:	9901      	ldr	r1, [sp, #4]
 800e21c:	021b      	lsls	r3, r3, #8
 800e21e:	4019      	ands	r1, r3
 800e220:	4b05      	ldr	r3, [pc, #20]	; (800e238 <__swhatbuf_r+0x4c>)
 800e222:	18c9      	adds	r1, r1, r3
 800e224:	424b      	negs	r3, r1
 800e226:	4159      	adcs	r1, r3
 800e228:	6029      	str	r1, [r5, #0]
 800e22a:	e7ed      	b.n	800e208 <__swhatbuf_r+0x1c>
 800e22c:	2340      	movs	r3, #64	; 0x40
 800e22e:	2000      	movs	r0, #0
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	b016      	add	sp, #88	; 0x58
 800e234:	bd70      	pop	{r4, r5, r6, pc}
 800e236:	46c0      	nop			; (mov r8, r8)
 800e238:	ffffe000 	.word	0xffffe000

0800e23c <__smakebuf_r>:
 800e23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e23e:	2602      	movs	r6, #2
 800e240:	898b      	ldrh	r3, [r1, #12]
 800e242:	0005      	movs	r5, r0
 800e244:	000c      	movs	r4, r1
 800e246:	4233      	tst	r3, r6
 800e248:	d006      	beq.n	800e258 <__smakebuf_r+0x1c>
 800e24a:	0023      	movs	r3, r4
 800e24c:	3347      	adds	r3, #71	; 0x47
 800e24e:	6023      	str	r3, [r4, #0]
 800e250:	6123      	str	r3, [r4, #16]
 800e252:	2301      	movs	r3, #1
 800e254:	6163      	str	r3, [r4, #20]
 800e256:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e258:	466a      	mov	r2, sp
 800e25a:	ab01      	add	r3, sp, #4
 800e25c:	f7ff ffc6 	bl	800e1ec <__swhatbuf_r>
 800e260:	9900      	ldr	r1, [sp, #0]
 800e262:	0007      	movs	r7, r0
 800e264:	0028      	movs	r0, r5
 800e266:	f7fe fcf5 	bl	800cc54 <_malloc_r>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d108      	bne.n	800e280 <__smakebuf_r+0x44>
 800e26e:	220c      	movs	r2, #12
 800e270:	5ea3      	ldrsh	r3, [r4, r2]
 800e272:	059a      	lsls	r2, r3, #22
 800e274:	d4ef      	bmi.n	800e256 <__smakebuf_r+0x1a>
 800e276:	2203      	movs	r2, #3
 800e278:	4393      	bics	r3, r2
 800e27a:	431e      	orrs	r6, r3
 800e27c:	81a6      	strh	r6, [r4, #12]
 800e27e:	e7e4      	b.n	800e24a <__smakebuf_r+0xe>
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <__smakebuf_r+0x84>)
 800e282:	62ab      	str	r3, [r5, #40]	; 0x28
 800e284:	2380      	movs	r3, #128	; 0x80
 800e286:	89a2      	ldrh	r2, [r4, #12]
 800e288:	6020      	str	r0, [r4, #0]
 800e28a:	4313      	orrs	r3, r2
 800e28c:	81a3      	strh	r3, [r4, #12]
 800e28e:	9b00      	ldr	r3, [sp, #0]
 800e290:	6120      	str	r0, [r4, #16]
 800e292:	6163      	str	r3, [r4, #20]
 800e294:	9b01      	ldr	r3, [sp, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00d      	beq.n	800e2b6 <__smakebuf_r+0x7a>
 800e29a:	0028      	movs	r0, r5
 800e29c:	230e      	movs	r3, #14
 800e29e:	5ee1      	ldrsh	r1, [r4, r3]
 800e2a0:	f000 f874 	bl	800e38c <_isatty_r>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d006      	beq.n	800e2b6 <__smakebuf_r+0x7a>
 800e2a8:	2203      	movs	r2, #3
 800e2aa:	89a3      	ldrh	r3, [r4, #12]
 800e2ac:	4393      	bics	r3, r2
 800e2ae:	001a      	movs	r2, r3
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	81a3      	strh	r3, [r4, #12]
 800e2b6:	89a0      	ldrh	r0, [r4, #12]
 800e2b8:	4307      	orrs	r7, r0
 800e2ba:	81a7      	strh	r7, [r4, #12]
 800e2bc:	e7cb      	b.n	800e256 <__smakebuf_r+0x1a>
 800e2be:	46c0      	nop			; (mov r8, r8)
 800e2c0:	0800db09 	.word	0x0800db09

0800e2c4 <_malloc_usable_size_r>:
 800e2c4:	1f0b      	subs	r3, r1, #4
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	1f18      	subs	r0, r3, #4
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	da01      	bge.n	800e2d2 <_malloc_usable_size_r+0xe>
 800e2ce:	580b      	ldr	r3, [r1, r0]
 800e2d0:	18c0      	adds	r0, r0, r3
 800e2d2:	4770      	bx	lr

0800e2d4 <_raise_r>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	0004      	movs	r4, r0
 800e2d8:	000d      	movs	r5, r1
 800e2da:	291f      	cmp	r1, #31
 800e2dc:	d904      	bls.n	800e2e8 <_raise_r+0x14>
 800e2de:	2316      	movs	r3, #22
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	4240      	negs	r0, r0
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d004      	beq.n	800e2f8 <_raise_r+0x24>
 800e2ee:	008a      	lsls	r2, r1, #2
 800e2f0:	189b      	adds	r3, r3, r2
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	2a00      	cmp	r2, #0
 800e2f6:	d108      	bne.n	800e30a <_raise_r+0x36>
 800e2f8:	0020      	movs	r0, r4
 800e2fa:	f000 f831 	bl	800e360 <_getpid_r>
 800e2fe:	002a      	movs	r2, r5
 800e300:	0001      	movs	r1, r0
 800e302:	0020      	movs	r0, r4
 800e304:	f000 f81a 	bl	800e33c <_kill_r>
 800e308:	e7ed      	b.n	800e2e6 <_raise_r+0x12>
 800e30a:	2000      	movs	r0, #0
 800e30c:	2a01      	cmp	r2, #1
 800e30e:	d0ea      	beq.n	800e2e6 <_raise_r+0x12>
 800e310:	1c51      	adds	r1, r2, #1
 800e312:	d103      	bne.n	800e31c <_raise_r+0x48>
 800e314:	2316      	movs	r3, #22
 800e316:	3001      	adds	r0, #1
 800e318:	6023      	str	r3, [r4, #0]
 800e31a:	e7e4      	b.n	800e2e6 <_raise_r+0x12>
 800e31c:	2400      	movs	r4, #0
 800e31e:	0028      	movs	r0, r5
 800e320:	601c      	str	r4, [r3, #0]
 800e322:	4790      	blx	r2
 800e324:	0020      	movs	r0, r4
 800e326:	e7de      	b.n	800e2e6 <_raise_r+0x12>

0800e328 <raise>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	4b03      	ldr	r3, [pc, #12]	; (800e338 <raise+0x10>)
 800e32c:	0001      	movs	r1, r0
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	f7ff ffd0 	bl	800e2d4 <_raise_r>
 800e334:	bd10      	pop	{r4, pc}
 800e336:	46c0      	nop			; (mov r8, r8)
 800e338:	2000000c 	.word	0x2000000c

0800e33c <_kill_r>:
 800e33c:	2300      	movs	r3, #0
 800e33e:	b570      	push	{r4, r5, r6, lr}
 800e340:	4d06      	ldr	r5, [pc, #24]	; (800e35c <_kill_r+0x20>)
 800e342:	0004      	movs	r4, r0
 800e344:	0008      	movs	r0, r1
 800e346:	0011      	movs	r1, r2
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	f7f6 fc51 	bl	8004bf0 <_kill>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	d103      	bne.n	800e35a <_kill_r+0x1e>
 800e352:	682b      	ldr	r3, [r5, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d000      	beq.n	800e35a <_kill_r+0x1e>
 800e358:	6023      	str	r3, [r4, #0]
 800e35a:	bd70      	pop	{r4, r5, r6, pc}
 800e35c:	20000614 	.word	0x20000614

0800e360 <_getpid_r>:
 800e360:	b510      	push	{r4, lr}
 800e362:	f7f6 fc3f 	bl	8004be4 <_getpid>
 800e366:	bd10      	pop	{r4, pc}

0800e368 <_fstat_r>:
 800e368:	2300      	movs	r3, #0
 800e36a:	b570      	push	{r4, r5, r6, lr}
 800e36c:	4d06      	ldr	r5, [pc, #24]	; (800e388 <_fstat_r+0x20>)
 800e36e:	0004      	movs	r4, r0
 800e370:	0008      	movs	r0, r1
 800e372:	0011      	movs	r1, r2
 800e374:	602b      	str	r3, [r5, #0]
 800e376:	f7f6 fc9a 	bl	8004cae <_fstat>
 800e37a:	1c43      	adds	r3, r0, #1
 800e37c:	d103      	bne.n	800e386 <_fstat_r+0x1e>
 800e37e:	682b      	ldr	r3, [r5, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d000      	beq.n	800e386 <_fstat_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd70      	pop	{r4, r5, r6, pc}
 800e388:	20000614 	.word	0x20000614

0800e38c <_isatty_r>:
 800e38c:	2300      	movs	r3, #0
 800e38e:	b570      	push	{r4, r5, r6, lr}
 800e390:	4d06      	ldr	r5, [pc, #24]	; (800e3ac <_isatty_r+0x20>)
 800e392:	0004      	movs	r4, r0
 800e394:	0008      	movs	r0, r1
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	f7f6 fc97 	bl	8004cca <_isatty>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d103      	bne.n	800e3a8 <_isatty_r+0x1c>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d000      	beq.n	800e3a8 <_isatty_r+0x1c>
 800e3a6:	6023      	str	r3, [r4, #0]
 800e3a8:	bd70      	pop	{r4, r5, r6, pc}
 800e3aa:	46c0      	nop			; (mov r8, r8)
 800e3ac:	20000614 	.word	0x20000614

0800e3b0 <_init>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	46c0      	nop			; (mov r8, r8)
 800e3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b6:	bc08      	pop	{r3}
 800e3b8:	469e      	mov	lr, r3
 800e3ba:	4770      	bx	lr

0800e3bc <_fini>:
 800e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3be:	46c0      	nop			; (mov r8, r8)
 800e3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3c2:	bc08      	pop	{r3}
 800e3c4:	469e      	mov	lr, r3
 800e3c6:	4770      	bx	lr
